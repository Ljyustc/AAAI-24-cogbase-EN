{
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes = []\n    \n    for n in range(1, 51):\n        if isprime(n) and ((isprime(n + 6) and n - 6 > 0 and isprime(n - 6)) or (n == 2 or n == 3)):\n            primes.append(n)\n            \n    return len(primes), primes\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 as it is the ten's place of A\n        for y in range(10):  # y can be 0-9\n            A = 10*x + y\n            B = 20*x + 2*y  # corrected B to not include the additional 200\n            if B == 6*A + 25:\n                return A\n    return None  # should never reach here if there is a valid solution\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Based on provided equations\n    # triangle + triangle = square\n    # square + triangle = circle\n    # diamond = circle + square + triangle\n    # we simplify them to\n    # 2 * triangle = square  (from equation1)\n    # square + triangle = circle  (from equation2)\n    # diamond = circle + square + triangle (from equation3)\n    # This simplifies to diamond = 2 * square + triangle (combining equations 2 and 3)\n    # Substitute square from equation1 to get: diamond = 2 * (2 * triangle) + triangle\n    # Simplify further to get the answer: diamond = 5 * triangle\n\n    equation1 = Eq(2 * triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, 2 * square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # The number of triangles in diamond is the coefficient of triangle in the equation diamond = 5 * triangle\n    ans = solutions[diamond] / solutions[triangle]\n    return ans\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    words = {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine',\n             10: 'ten', 11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen', 16: 'sixteen',\n             17: 'seventeen', 18: 'eighteen', 19: 'nineteen', 20: 'twenty', 30: 'thirty', 40: 'forty', 50: 'fifty',\n             60: 'sixty', 70: 'seventy', 80: 'eighty', 90: 'ninety', 100: 'hundred', 1000: 'thousand'}\n\n    def int_to_en(num):\n        if num < 20:\n            return words[num]\n        elif num < 100:\n            return words[num // 10 * 10] + ('' if num % 10 == 0 else '-' + words[num % 10])\n        elif num < 1000:\n            return words[num // 100] + ' hundred' + ('' if num % 100 == 0 else ' and ' + int_to_en(num % 100))\n        else:\n            return int_to_en(num // 1000) + ' thousand' + ('' if num % 1000 == 0 else ' ' + int_to_en(num % 1000))\n\n    return int_to_en(number)\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "import matplotlib.pyplot as plt\n\ndef solution():\n    # Define the parts for Bud and Pip\n    bud_parts = 1\n    pip_parts = 5\n\n    # Plotting the \"parts\" graph using a bar chart\n    labels = ['Bud', 'Pip']\n    parts = [bud_parts, pip_parts]\n    plt.bar(labels, parts, color=['blue', 'green'])\n\n    # Add labels and title for clarity\n    plt.ylabel('Number of Parts')\n    plt.title('Apples Parts Graph')\n\n    # Save the graph to a file\n    plt.savefig('parts_graph.png')\n\n    # Return the file name of the graph\n    return 'parts_graph.png'\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution(y):\n    hazel_current_age = y\n    jessica_current_age = hazel_current_age - 3\n    \n    hazel_next_year_age = hazel_current_age + 1\n    jessica_next_year_age = jessica_current_age + 1\n    \n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n\n    return total_age_next_year\n\nans = solution(y)  # 'y' should be replaced with the actual numerical value of Hazel's age 3 years from now."
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Judy has and y be the number of books Lily has\n    x, y = symbols('x y')\n    \n    # After sending some books, they both have the same amount: (y - (y - x)/2) = x + (y - x)/2\n    equation = Eq(y - (y - x)/2, x + (y - x)/2)\n\n    # Solving the equation\n    solutions = solve((equation,))\n\n    # The number of books Lily has more than Judy is y - x\n    return solutions[y] - solutions[x]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let the total number of stickers Liz had originally be x\n    x = symbols('x')\n    \n    # She gave away 2/3 of her red stickers and she was left with 1/4 of her stickers\n    red_given = (2/3) * (1/2) * x\n    remaining = (1/4) * x\n    \n    # The number of blue stickers she had initially is equal to the red stickers, so it is x/2\n    # blue_given is the number of blue stickers she gave away, which we will calculate\n    blue_given = (1/2) * x - (remaining - red_given)\n\n    # We're looking for the fraction of blue stickers given away\n    # blue_given = y * (total blue stickers)\n    # y = blue_given / (total blue stickers)\n    y = symbols('y')\n    equation = Eq(blue_given, y * (1/2) * x)\n    \n    # Solve for y\n    solution = solve(equation, y)\n    return solution[0]\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # The correct strategy involves calculating the Nim sum by XOR-ing the size of the two piles.\n    # The player should then adjust a pile to make the Nim sum 0.\n    # If the Nim sum before a player's move is non-zero, they can always make it zero.\n\n    pile_a = 88\n    pile_b = 52\n    nim_sum = pile_a ^ pile_b  # XOR operation\n\n    if nim_sum != 0:\n        # Tom can win. Find the correct move.\n        for pile in [pile_a, pile_b]:\n            if (pile ^ nim_sum) < pile:\n                # This is the pile to take from.\n                cards_to_take = pile - (pile ^ nim_sum)\n                return (\"A\", cards_to_take) if pile == pile_a else (\"B\", cards_to_take)\n    else:\n        # This condition is impossible given the problem states Tom can win.\n        # We'll return this for the sake of having a return value in all cases.\n        return (\"No winning strategy\", 0)\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is older man's current age, y is younger man's current age\n    equation1 = Eq(x - y, y - 4)  # When older was the age of the younger, younger was 4\n    equation2 = Eq(x + (x - y), x + 61 - y)  # Adjusted equation: older's future age when equal to younger's current + difference = younger's future age when he's 61\n    \n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    # All possible digits for A, B, C\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        # First number 5A3\n        num1 = 500 + A*10 + 3\n        # Second number B7C\n        num2 = B*100 + 70 + C\n        # Multiplication result\n        result = num1 * num2\n        # Convert result to string for easier manipulation\n        result_str = str(result)\n        # Check if result has the exact format of the given multiplication\n        if len(result_str) == 5 and result_str.startswith(\"3\" + str(B)) and result_str.endswith(\"1\" + str(A)):\n            return A + B + C\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    equation1 = Eq(elias, 5 * aileen)\n    # Use elias - 88 and aileen - 8 already in equation2 since that's the final condition of equality\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    # Use the original number of stickers from the solution directly\n    final_elias = solutions[elias]\n    final_aileen = solutions[aileen]\n\n    return final_elias, final_aileen\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    temp = str(number)\n    odd_sum = sum(int(temp[i]) for i in range(0, len(temp), 2))\n    even_sum = sum(int(temp[i]) for i in range(1, len(temp), 2))\n    \n    difference = abs(odd_sum - even_sum)\n    is_divisible = (difference == 0) or (difference % 11 == 0)\n    remainder = difference % 11\n    \n    return (is_divisible, remainder)\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Possible cards based on given conditions by suit and numbers\n    possible_cards = {\n        'spades': ['A', 'J', 'K'],\n        'hearts': ['3', '5', 'K'],\n        'diamonds': ['2', '7', 'J'],\n        'clubs': ['A', '7']\n    }\n\n    # We need to find a card that Avril can identify uniquely after Eddie's statement.\n    # Eddie says he and Avril can't know the card. This means card cannot be Ace or its number is not unique.\n    # Avril then knows for sure, which means the number must be unique in remaining cards.\n    # Eddie then also knows, which means the card's suit is now uniquely identifiable.\n\n    # Extract all unique numbers by flattening the possible_cards list\n    all_numbers = [number for numbers in possible_cards.values() for number in numbers]\n    # Count occurrences of each number\n    number_counts = {number: all_numbers.count(number) for number in all_numbers}\n\n    # Unique numbers are those with a single occurrence\n    unique_numbers = {number for number, count in number_counts.items() if count == 1}\n\n    # Card must be from a suit that was not immediately identifiable by Eddie,\n    # so we eliminate suits where an Ace is the only possible card.\n    for suit in ['spades', 'clubs']:\n        if 'A' in possible_cards[suit] and len(possible_cards[suit]) == 1:\n            del possible_cards[suit]\n\n    # Now find the suit that contains the unique number that Avril can identify.\n    for suit, numbers in possible_cards.items():\n        for number in unique_numbers:\n            if number in numbers:\n                # This is the uniquely identifiable card.\n                return suit + number\n\n# Call the function and store the result in `ans`.\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit, for example, centimeters.\n    pink_ribbon_cm = 2.5 * 100  # meters to centimeters\n    blue_ribbon_cm = 220        # already in centimeters\n    orange_ribbon_cm = 30.5     # already in centimeters\n    \n    # Using a dictionary to keep track of ribbon name and length\n    ribbons = {'pink': pink_ribbon_cm, 'blue': blue_ribbon_cm, 'orange': orange_ribbon_cm}\n    \n    # Find the longest ribbon by comparing their lengths in centimeters.\n    longest_ribbon_color = max(ribbons, key=ribbons.get)\n    \n    return longest_ribbon_color\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 10000):\n        dividend = 8 * divisor + 7\n        if dividend // divisor == 8 and dividend % divisor == 7:\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) Fraction of the chicken pies more than vegetable pies\n    more_chicken_than_vegetable = chicken_pies - vegetable_pies\n    fraction_more_chicken_than_vegetable = Fraction(more_chicken_than_vegetable, chicken_pies)\n    \n    # (2) Fraction of the vegetable pies less than fruit pies\n    less_vegetable_than_fruit = fruit_pies - vegetable_pies\n    fraction_less_vegetable_than_fruit = Fraction(less_vegetable_than_fruit, vegetable_pies)\n    \n    return (fraction_more_chicken_than_vegetable, fraction_less_vegetable_than_fruit)\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    # Define the fixed digits based on the question\n    A, C, G = 3, 1, 7\n    # Create a list of the remaining digits to permute\n    remaining_digits = [0, 2, 4, 5, 6, 8, 9]\n    # Iterate through all permutations of the remaining 7 digits\n    for perm in permutations(remaining_digits):\n        # Since we know I must be even and J must be 0 for the number to be divisible by 10,\n        # we rearrange perm to fit these conditions\n        if perm[-1] != 0:  # Skip permutations where the last digit is not 0\n            continue\n        # Check divisibility by 5, if E is not 5 or 0, skip the permutation\n        E = perm[3]\n        if E != 5 and E != 0:\n            continue\n        # Place A, C, and G in their fixed positions and permute B, D, E, F, H, I, J\n        B, D, F, H, I, J = perm[0], perm[1], perm[2], perm[4], perm[5], perm[6]\n        # Form the numbers ABCDE and ABCDEFGH since we know the rules for 3 and 7\n        number_de = int(f'{A}{B}{C}{D}{E}')\n        number_abcdefgh = int(f'{A}{B}{C}{D}{E}{F}{G}{H}')\n        # Check the divisibility rules for 2, 4, and 8\n        if number_de % 2 == 0 and number_de % 4 == 0 and number_abcdefgh % 8 == 0:\n            # Return the solution as a dictionary\n            return {'B': B, 'D': D, 'E': E, 'F': F, 'H': H, 'I': I, 'J': J}\n        \nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n    ans = total_used\n    return ans\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables representing original speed and time\n    speed, time = symbols('speed time')\n\n    # New speed after 25% increase\n    increased_speed = speed * 1.25\n\n    # Decreased time due to speed increase (decrease by 20 minutes)\n    decreased_time = time - 20/60  # Convert 20 minutes to hours\n\n    # Equation representing the relationship after speed increase\n    equation1 = Eq(increased_speed * decreased_time, speed * time)\n\n    # Decreased speed by 45 mpm (meters per minute)\n    decreased_speed = speed - 45\n\n    # Increased time by 75% due to speed decrease\n    increased_time = time * 1.75\n\n    # Equation representing the relationship after speed decrease\n    equation2 = Eq(decreased_speed * increased_time, speed * time)\n\n    # Solve for original speed and time\n    solutions = solve((equation1, equation2), (speed, time))\n\n    # Original speed and time\n    original_speed = solutions[speed]\n    original_time = solutions[time]\n\n    # Convert original_speed from meters/minute to meters/hour\n    original_speed_mpm = original_speed\n\n    # Distance covered (in meters)\n    distance = original_speed_mpm * original_time * 60  # Time converted back to minutes\n\n    return distance.evalf()\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the variables\n    cap_cost, wristband_cost, total_money = symbols('cap_cost wristband_cost total_money')\n\n    # Caleb spends 2/5 of his money on 4 caps and 6 wristbands\n    # Equation1: (2/5) * total_money = 4 * cap_cost + 6 * wristband_cost\n    equation1 = Eq((2/5) * total_money, 4 * cap_cost + 6 * wristband_cost)\n\n    # The cost of each cap is 3 times the cost of each wristband\n    # Equation2: cap_cost = 3 * wristband_cost\n    equation2 = Eq(cap_cost, 3 * wristband_cost)\n\n    # Solve the equations to find the values for cap_cost and wristband_cost\n    solutions = solve((equation1, equation2), (cap_cost, wristband_cost))\n\n    cap_cost_value = solutions[cap_cost]\n\n    # Calculates the remaining money after the first purchase\n    # Equation3: remaining_money = total_money - (2/5) * total_money\n    remaining_money = (3/5) * total_money\n\n    # Function to solve for total_money\n    # Equation to find the total_money after buying additional caps with 1/3 of the remaining money\n    # Equation4: cap_cost_value * caps_bought_with_remaining_money = (1/3) * remaining_money\n    # Equation5: total_caps_money = 4 * cap_cost_value + cap_cost_value * caps_bought_with_remaining_money\n    # Simplify to find caps_bought_with_remaining_money = (1/3) * remaining_money / cap_cost_value\n    # Substitute above in Equation5 and solve Equation5 along with Equation1 to find total_money\n    equation3 = Eq((1/3) * remaining_money / cap_cost_value, remaining_money / (3 * cap_cost_value))\n    equation4 = Eq(4 * cap_cost_value + (remaining_money / (3 * cap_cost_value)) * cap_cost_value, (2/5) * total_money)\n    \n    total_money_value = solve((equation3, equation4), (total_money,))\n\n    # Total number of caps bought with 1/3 of the remaining money\n    caps_bought_with_remaining_money = (1/3) * (3/5) * total_money_value[total_money] / cap_cost_value\n\n    # Total number of caps = caps from the first purchase + additional caps bought\n    total_caps = 4 + caps_bought_with_remaining_money\n\n    return int(total_caps)\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(1, 10):  # A cannot be 0 as it is the thousands digit\n        for B in range(10):\n            for C in range(10):\n                pips_number = int(f\"{A}{B}{C}{A}\")\n                # To reverse the units and tens, we need to swap C and B's places\n                buds_number = int(f\"{A}{C}{B}{A}\")\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the year is current year (2023)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration - timedelta(days=1)\n\n    return end_date.strftime('%d %B %Y')\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for a single notebook, pencil case, and eraser\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Set up the equations based on the provided information\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)  # Angel's total purchase\n    equation2 = Eq(notebook + pencil_case, 6)  # A notebook and a pencil case cost $6\n    equation3 = Eq(pencil_case + eraser, 9)    # A pencil case and an eraser cost $9\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    # Return the cost of a pencil case\n    return float(solutions[pencil_case])\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the variables\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # define the equations based on the problem\n    total_marbles = Eq(anna + betsy + charlene, 168)\n    after_charlene_gives = Eq(betsy + 15, charlene - 15)\n    betsy_to_anna = betsy - 8\n    anna_receives = anna + 8\n    ratio_anna = 2 * (betsy_to_anna)\n    ratio_betsy = 5 * (anna_receives)\n    ratio_charlene = 7 * (betsy_to_anna)\n\n    # solve the equations\n    solutions = solve((total_marbles, after_charlene_gives, Eq(betsy_to_anna, anna_receives), Eq(ratio_betsy, ratio_charlene)), (anna, betsy, charlene))\n\n    # extract the solution for betsy\n    return solutions[betsy]\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration - timedelta(days=1)  # Subtract 1 because the starting day is included\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given values\n    initial_speed = 10  # in meters per second\n    angle_degrees = 37  # angle in degrees\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Convert angle from degrees to radians for calculation\n    angle_radians = math.radians(angle_degrees)\n\n    # Calculate the height using conservation of energy formula:\n    # m*g*h = 0.5*m*v^2 \n    # where m is the mass of the object (cancels out),\n    # g is the acceleration due to gravity,\n    # h is the height,\n    # v is the initial velocity.\n    # Since we are looking for the height (h) we rearrange the equation:\n    # h = v^2 / (2*g)\n    # The initial kinetic energy will be converted entirely into potential energy at the highest point.\n    # However we need to take the component of initial velocity parallel to the ramp's surface:\n    # height along the ramp = (initial_speed * cos(angle))^2 / (2 * g)\n    height_along_ramp = (initial_speed * math.cos(angle_radians)) ** 2 / (2 * g)\n\n    # The distance along the ramp will be the length the object travelled\n    # Distance = height_along_ramp / cos(angle)\n    distance_along_ramp = height_along_ramp / math.cos(angle_radians)\n\n    return height_along_ramp, distance_along_ramp\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    ways = []\n    for a in range(1, 25):\n        for b in range(a + 1, 25):\n            for c in range(b + 1, 25):\n                for d in range(c + 1, 25):\n                    for e in range(d + 1, 25):\n                        for f in range(e + 1, 25):\n                            g = 25 - (a + b + c + d + e + f)\n                            if g > f:\n                                ways.append((a, b, c, d, e, f, g))\n    return ways\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    for num in range(2, 200):  # Start from 2, as the number must be greater than 1\n        if 290 % num == 235 % num and 235 % num == 200 % num - 3:\n            return num\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    # Let x be the number of volunteers\n    # Let y be the total number of trees\n    \n    # Based on the problem:\n    # if each plants 4 trees, 5 trees are left: 4*x + 5 = y\n    # if each plants 7 trees, one volunteer has nothing to plant: 7*(x-1) = y\n    \n    # From the above equations, we can solve for x and y\n    x = 1\n    while True:\n        y = 4 * x + 5\n        if 7 * (x - 1) == y:\n            break\n        x += 1\n    \n    # To correct the while loop condition\n    while True:\n        y = 4 * x + 5\n        if 7 * (x - 1) == y - 7:  # Correct condition: need to subtract 7 from y to account for 1 volunteer having nothing\n            break\n        x += 1\n    \n    # Now we have x number of volunteers and y number of trees\n    volunteers = x\n    trees = y\n    return volunteers, trees\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%H:%M %p\")\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n    \n    # The correct calculation should subtract the respective durations from the lunch_end_time\n    home_arrival_time = lunch_end_time - lunch_duration - tv_duration - play_duration\n    \n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    interval_aytown = 15\n    interval_beeville = 12\n    interval_ceeford = 8\n\n    common_interval_minutes = lcm(lcm(interval_aytown, interval_beeville), interval_ceeford)\n    \n    first_time = 10 * 60  # 10:00 am in minutes\n    next_time_minutes = first_time + common_interval_minutes\n    \n    next_time_hour = next_time_minutes // 60\n    next_time_minute = next_time_minutes % 60\n\n    # Format the time to HH:MM format\n    next_time = f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\n    return next_time\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    # Given sequence: 11, 14, 17, 20, 23, 26\n    # Common difference (d) is 3\n    d = 3\n    # First term (a1) of the sequence is 11\n    \n    # Create a list of numbers from 30 to 60 to check for sequence members\n    sequence_in_range = []\n    \n    # Calculate the first term in the sequence greater than or equal to 30\n    # (n-1)d = term - a1 => n = (term - a1) / d + 1\n    # We need the smallest n such that term >= 30, so we take the ceiling\n    from math import ceil\n    \n    n_start = ceil((30 - 11) / d)\n    \n    # Calculate the corresponding term for n_start\n    a_n = 11 + (n_start - 1) * d\n    \n    # Add terms to the sequence until the term exceeds 60\n    while a_n <= 60:\n        sequence_in_range.append(a_n)\n        a_n += d\n    \n    # The answer is the list of sequence numbers\n    ans = sequence_in_range\n    return ans\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_g = 9 * 1000 + 5  # Convert total mass to grams\n    soil_mass_g = 4 * 1000 + 50  # Convert soil mass to grams\n    sand_mass_g = total_mass_g - soil_mass_g  # Calculate sand mass in grams\n    \n    # The question asks for the difference between soil and sand, so the previous error was subtracting twice\n    # Instead, just use the sand_mass_g directly for the difference\n    difference_kg = sand_mass_g // 1000\n    difference_g_remainder = sand_mass_g % 1000\n\n    # Return the difference in the format \"kg g\"\n    # Directly return the mass of sand as the difference\n    ans = f\"{difference_kg}kg {difference_g_remainder}g\"\n\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Total candies\n    total_candies = 10\n\n    # Felix can always win if he goes first. He needs to leave a multiple of 3 candies\n    # for John in each turn, then John will eventually have to leave Felix with either\n    # 1 or 2 candies, both are winning states for Felix.\n    # Felix's winning strategy: make sure the total candies after his turn is multiple of 3.\n    \n    # Let's check the first few moves\n    # If Felix eats 1 candy, left 9 candies (John eats 1 or 2 candies, leaves 8 or 7 candies, both not multiple of 3, Felix can make it multiple of 3)\n    # If Felix eats 2 candies, left 8 candies (John can eat 2 candies, leave 6 candies, multiple of 3, Felix in trouble)\n    # So Felix's first move should be to eat 1 candy.\n\n    # Thus, the strategy is: \n    # Felix goes first, eats 1 candy.\n    # After that, whatever John eats (1 or 2 candies), Felix can always eat (2 or 1 candies),\n    # and maintain the total number left as a multiple of 3.\n\n    # Felix goes first with this strategy to ensure victory.\n    return \"First\"\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_pc_4pc = 7 / 4\n    price_per_pc_6pc = 8.5 / 6\n    better_buy = \"4pc\" if price_per_pc_4pc < price_per_pc_6pc else \"6pc\"\n    return price_per_pc_4pc, price_per_pc_6pc, better_buy\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    correct_ans, wrong_ans = symbols('correct_ans wrong_ans')\n    \n    # Equation for total questions answered\n    total_questions_eq = Eq(correct_ans + wrong_ans, 10)\n    \n    # Equation for the score based on correct and wrong answers\n    score_eq = Eq(4 * correct_ans - 2 * wrong_ans, 29)\n    \n    # Solving the system of equations\n    solutions = solve((total_questions_eq, score_eq), (correct_ans, wrong_ans))\n    \n    return int(solutions[correct_ans])\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Calculate the least common multiple of the three times\n    lcm_ab = lcm(ashley_time, ben_time)\n    meeting_time_seconds = lcm(lcm_ab, charlie_time)\n\n    # Convert the meeting time from seconds to hours:minutes:seconds format\n    hours = meeting_time_seconds // 3600\n    minutes = (meeting_time_seconds % 3600) // 60\n    seconds = meeting_time_seconds % 60\n\n    # Starting time is 10:00 am\n    start_hour = 10\n\n    # Calculate the meeting hour by adding the hours to the start_hour\n    meet_hour = start_hour + hours\n\n    # Since the day changes after every 24 hours, take modulo to get the correct hour\n    meet_hour %= 24\n\n    return f\"{meet_hour:02d}:{minutes:02d}:{seconds:02d}\"\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    total_diff = 52\n    side_length = 1  # starting from the smallest possible square size\n\n    while True:\n        boys = ((side_length + 1) // 2) ** 2\n        girls = (side_length // 2) ** 2\n\n        if boys - girls == total_diff:\n            total_students = boys + girls\n            break\n\n        side_length += 1\n\n    return total_students\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_avg, group_number = symbols('original_avg group_number')\n\n    # Average = Sum of weights / Number of people\n    \n    # After Aaron joins, the average is 61 kg\n    # Sum of weights of original group = original_avg * group_number\n    # New sum of weights after Aaron joins = original_avg * group_number + 45\n    # Equation 1: (original_avg * group_number + 45) / (group_number + 1) = 61\n    equation1 = Eq((original_avg * group_number + 45) / (group_number + 1), 61)\n\n    # After Ben joins, the average is 62 kg\n    # New sum of weights after Ben joins = original_avg * group_number + 45 + 71\n    # Equation 2: (original_avg * group_number + 45 + 71) / (group_number + 2) = 62\n    equation2 = Eq((original_avg * group_number + 45 + 71) / (group_number + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_avg, group_number))\n\n    # Check if there's a valid solution before returning\n    if solutions:\n        # Pick the first (and only) solution\n        return solutions[original_avg]\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    import math\n    \n    mass1 = 500 # Mass of first car in kg\n    mass2 = 500 # Mass of second car in kg\n    velocity1 = 20 # Velocity of first car in m/s, north\n    velocity2 = 30 # Velocity of second car in m/s, west\n    \n    # Calculate the momentum of each car\n    momentum1 = mass1 * velocity1\n    momentum2 = mass2 * velocity2\n    \n    # The cars lock bumpers and stick together, momentum is conserved\n    # The combined mass after the collision\n    combined_mass = mass1 + mass2\n    \n    # The x-component of velocity (due west is considered negative)\n    velocity_x = -momentum2 / combined_mass\n    \n    # The y-component of velocity (due north is considered positive)\n    velocity_y = momentum1 / combined_mass\n    \n    # To find the magnitude of the resultant velocity (v), we use Pythagorean theorem.\n    magnitude_of_velocity = math.sqrt(velocity_x**2 + velocity_y**2)\n    \n    # To calculate the direction, we find the angle theta with respect to the north axis (counter-clockwise is positive)\n    angle_with_north = math.degrees(math.atan2(velocity_y, -velocity_x))  # the negative sign is due to west being in the negative x direction\n    \n    return magnitude_of_velocity, angle_with_north\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amelia = 160\n    carl, daniel = symbols('carl daniel')\n    \n    # Bala had 320 more cookies than Daniel\n    bala = daniel + 320\n    \n    # Bala had 1/2 as many cookies as Amelia, Carl, and Daniel\n    eq1 = Eq(bala, (amelia + carl + daniel) / 2)\n    \n    # Carl had 3/4 as many cookies as Amelia, Bala, and Daniel\n    eq2 = Eq(carl, (amelia + bala + daniel) * 3 / 4)\n    \n    # Total number of cookies\n    eq3 = Eq(amelia + bala + carl + daniel, 6230)\n    \n    solutions = solve((eq1, eq2, eq3), (carl, daniel))\n    \n    daniel_cookies = solutions[daniel]\n    return daniel_cookies\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "import math\n\ndef cycle_length(numerator, denominator):\n    remainders = {}\n    remainder = numerator % denominator\n    length = 0\n    while remainder not in remainders:\n        remainders[remainder] = length\n        remainder = (remainder * 10) % denominator\n        length += 1\n    return length\n\ndef find_equal_digit(remainder_1, cycle_length_1, denominator_1,\n                     remainder_2, cycle_length_2, denominator_2):\n    for n in range(1, max(cycle_length_1, cycle_length_2) * denominator_1 * denominator_2):\n        if (remainder_1 * pow(10, n, denominator_1)) % denominator_1 == \\\n           (remainder_2 * pow(10, n, denominator_2)) % denominator_2:\n            return n\n    return -1\n\ndef solution():\n    remainder_1 = 1199239\n    cycle_length_1 = cycle_length(remainder_1, 999990)\n    denominator_1 = 999990\n\n    remainder_2 = 234544\n    cycle_length_2 = cycle_length(remainder_2, 99990)\n    denominator_2 = 99990\n\n    return find_equal_digit(remainder_1, cycle_length_1, denominator_1,\n                            remainder_2, cycle_length_2, denominator_2)\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import gcd\n\n    green_line_interval = 5  # Train interval for the green line in minutes\n    red_line_interval = 6    # Train interval for the red line in minutes\n    \n    # Find the least common multiple of the two train intervals using gcd (since lcm is not directly available in math module)\n    intervals_lcm = (green_line_interval * red_line_interval) // gcd(green_line_interval, red_line_interval)\n    \n    # Calculate hours and minutes from the least common multiple\n    hours = intervals_lcm // 60\n    minutes = intervals_lcm % 60\n    \n    # The trains start at 5 am, so we add the hours to 5\n    next_common_time_hour = 5 + hours\n    \n    # If adding minutes does not increment the hour\n    next_common_time_minute = minutes\n    \n    # Adjust for next day if hours go beyond 24\n    if next_common_time_hour >= 24:\n        next_common_time_hour -= 24\n    \n    return f\"{next_common_time_hour:02}:{next_common_time_minute:02}\"\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "from sympy import symbols\n\ndef solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    return (66 * 2 + 66 * 3), (66 * 5)\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    eq1 = Eq(2 * triangle, square)  # since two triangles equal a square\n    eq2 = Eq(square + triangle, circle)  # a square plus a triangle equals a circle\n    eq3 = Eq(diamond, circle + square + triangle)  # diamond is equal to a circle plus a square plus a triangle\n    \n    # solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (triangle, square, circle, diamond))\n    \n    # how many triangles in a diamond\n    number_of_triangles_in_diamond = solutions[diamond] / solutions[triangle]\n    \n    return number_of_triangles_in_diamond\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for num in range(21, 50):\n        if num % 6 == 0 and num % 9 == 0:\n            multiples.append(num)\n    return multiples\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    required_time_minutes = 13 + 23 + 8 + 27\n    school_start_time = datetime.strptime(\"7:45\", \"%H:%M\")\n    wake_up_time = school_start_time - timedelta(minutes=required_time_minutes)\n    return wake_up_time.time().strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 < x2 < x3 and x1 + x2 + x3 == 14:\n                    ways.append((x1, x2, x3))\n    return ways\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('19:15', '%H:%M')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    # Since adding \"0\" in base 10 is multiplying by 10, we need to find an age such that when multiplied by 10\n    # gives the same number when written in base 3.\n    for age in range(1, 100):  # Assuming Mr. Lv's age is below 100\n        base_10_age_with_0 = age * 10  # Multiply by 10 to simulate adding \"0\" at the end\n        base_3_representation = int(str(base_10_age_with_0), 3)  # Convert the new age to base 3\n        if base_3_representation == age:  # Compare with the age in base 10\n            return age  # Return Mr. Lv's age in base 10\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    a = symbols('a', real=True, positive=True)\n    x = sqrt(a) - 2/sqrt(a)\n\n    # Substitute the expression of x inside the square root\n    expression = sqrt(x**2 + 8*x)\n    # Since we know that x = sqrt(a) - 2/sqrt(a), and we want to simplify sqrt(x^2 + 8x),\n    # we'll expand (sqrt(a) - 2/sqrt(a))^2 + 8(sqrt(a) - 2/sqrt(a)) which results in a\n    simplified_expression = simplify(expression.subs(sqrt(a) - 2/sqrt(a), x))\n\n    return simplified_expression\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import Symbol, Eq, solve, sqrt\n\n    # Let x be the length of PA\n    x = Symbol('x', real=True)\n\n    # Since AB, AC, and AD are edges of the cube, they are equal and we can denote them as 'a'\n    a = Symbol('a', real=True)\n\n    # PG is the space diagonal of the cube and can be calculated with a√3 using Pythagorean theorem in 3D\n    # PG^2 = AG^2 => (36√7)^2 = a^2 + a^2 + a^2\n    equation1 = Eq(3 * a**2, (36 * sqrt(7))**2)\n\n    # PB^2 = PA^2 + AB^2 => (60√10)^2 = x^2 + a^2\n    equation2 = Eq(x**2 + a**2, (60 * sqrt(10))**2)\n    # PC^2 = PA^2 + AC^2 => (60√5)^2 = x^2 + a**2\n    equation3 = Eq(x**2 + a**2, (60 * sqrt(5))**2)\n    # PD^2 = PA^2 + AD^2 => (120√2)^2 = x^2 + a**2\n    equation4 = Eq(x**2 + a**2, (120 * sqrt(2))**2)\n\n    # Solve equation1 for 'a'\n    a_solution = solve(equation1, a)[0]\n\n    # Since all equations equation2, equation3, equation4 should be equal\n    # We need to find the right equation that matches the correct distance which is PB in this case\n    # We substitute 'a' into equation2 and solve for 'x'\n    pa_solution = solve(equation2.subs(a, a_solution), x)\n\n    # Filter out the negative solution as distance can't be negative\n    pa = [sol.evalf() for sol in pa_solution if sol.is_real and sol > 0]\n\n    return pa[0]  # Get the positive solution\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let total number of students originally be x\n    # Then, boys = 0.40 * x and girls = x - boys\n    \n    # After 16 boys left and 16 girls entered:\n    # New number of boys = boys - 16\n    # New number of girls = girls + 16\n    # New total number of students = x (unchanged)\n    \n    # According to the problem, new number of boys = 2/15 of the new total number of students\n    # Thus, New number of boys = (2/15) * x\n    \n    # We can now set up an equation:\n    # Old boys - 16 = New boys\n    # 0.40 * x - 16 = (2/15) * x\n    \n    # Solving the equation for x\n    x = symbols('x')\n    equation = Eq(0.40 * x - 16, (2/15) * x)\n    total_students = solve(equation, x)\n    \n    # Since we are only expecting one solution for the total number of students\n    total_students = total_students[0]\n    \n    # Calculate the original number of girls\n    original_girls = total_students - (0.40 * total_students)\n    \n    # Calculate the new number of girls after 16 joined\n    new_girls = original_girls + 16\n    \n    return int(new_girls)\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for thousands in range(1, 10):  # Thousands digit must be 1-9 for a valid 4-digit number.\n        for hundreds in range(10):  # Hundreds digit can be 0-9.\n            for tens in range(10):  # Tens digit can be 0-9.\n                for ones in range(10):  # Ones digit can be 0-9.\n                    # Original number\n                    N = 1000 * thousands + 100 * hundreds + 10 * tens + ones\n                    # Check each possible new number M after removing one digit\n                    M1 = 100 * hundreds + 10 * tens + ones\n                    M2 = 1000 * thousands + 10 * tens + ones\n                    M3 = 1000 * thousands + 100 * hundreds + ones\n                    M4 = 1000 * thousands + 100 * hundreds + 10 * tens\n                    # Redefine the differences to consider the positional value of the removed digit\n                    diff1 = N - 10 * M1\n                    diff2 = N - 100 * (M2 // 10)\n                    diff3 = N - (M3 // 10)\n                    diff4 = N - (M4 // 100)\n                    # Check if difference is 2021\n                    if diff1 == 2021 or diff2 == 2021 or diff3 == 2021 or diff4 == 2021:\n                        return N\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the graph passes through the origin (0,0), b must be equal to 0.\n    b = 0\n\n    # The graph also passes through the point (4,8), we use this to solve for m.\n    # 8 = m * 4 + b\n    # With b = 0, we simplify to 8 = 4m\n    m = 8 / 4\n\n    # Remove the unnecessary .0 from the slope m and constant b for the final answer\n    m = int(m)\n\n    # Form the linear equation without the unnecessary ' + 0'\n    linear_equation = f\"y = {m}x\"\n\n    return linear_equation\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(49, 100)\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    original_password = '0141705021'\n    attempted_password = '4005220912'\n\n    if sorted(original_password) == sorted(attempted_password):\n        return True, \"Andy can unlock the treasure chest.\"\n    else:\n        # The correct password would be a string with the same count of each digit as the original_password,\n        # but arranged as 'Devil' in ascending lexicographical order.\n        digit_to_letter = {'0': 'D', '1': 'E', '2': 'V', '4': 'I', '5': 'L', \n                           '7': 'A', '9': 'N', '3': 'G', '6': 'B', '8': 'M'}\n        correct_password_digits = sorted(original_password, key=lambda x: digit_to_letter[x])\n        correct_password = ''.join(correct_password_digits)\n        return False, correct_password\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Initial state of the stacks\n    stack_A = 20\n    stack_B = 20\n    \n    # Tom takes 4 stones from stack B\n    stack_B -= 4\n    \n    # To ensure a win, Jerry needs to create a situation where both stacks have the same number of stones\n    # because the player who leaves two equal stacks will lose under optimal play\n    # We know that Tom has already taken from Stack B, so Jerry should take from Stack A\n    stones_jerry_takes = stack_A - stack_B\n    \n    # Jerry takes from stack A\n    stack_A -= stones_jerry_takes\n    \n    return stones_jerry_takes, 'A'\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n    \n    # Initial conditions\n    equation1 = Eq(frogs_initial - dragonflies_initial, 9)\n    \n    # Final condition after the magic show\n    equation2 = Eq(dragonflies_initial + 1, frogs_initial - 1)\n    \n    solutions = solve((equation1, equation2), (frogs_initial, dragonflies_initial))\n    \n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n\n    home_arrival_time = lunch_end_time - lunch_duration - tv_duration - play_duration\n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "from sympy import symbols, Eq\n\ndef solution():\n    # Define the variables representing the cost per mile and total fare\n    cost_per_mile = 6  # dollars per mile\n    y = symbols('y')  # total fare in dollars\n    x = symbols('x')  # distance traveled in miles\n    \n    # Write the equation that relates total fare to the distance traveled\n    equation = Eq(y, cost_per_mile * x)\n\n    return equation\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution(total_collected = 30):  # I'm assuming a default total amount collected for illustration\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    romily, reema = symbols('romily reema')\n\n    # Create the equation\n    equation1 = Eq(romily, reema + 10)\n    equation2 = Eq(romily + reema, total_collected)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (romily, reema))\n\n    # Extract the solution for Reema\n    reema_collected = solutions[reema]\n\n    return reema_collected\n\n# Since the problem statement doesn't provide the total collected amount,\n# I have chosen an arbitrary value for demonstration purposes.\n# Replace the value of 'total_collected' with the actual total amount to get the correct result.\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of coins in each stack\n    h_one, h_two, h_five = symbols('h_one h_two h_five')\n\n    # There are three equations based on the relationship of the heights of the coins and the total number of coins\n    equation1 = Eq(h_one / 6, h_two / 5)  # A stack of 6 one-cent coins has the same height as a stack of 5 two-cent coins\n    equation2 = Eq(h_one / 4, h_five / 3)  # A stack of 4 one-cent coins has the same height as a stack of 3 five-cent coins\n    equation3 = Eq(6*h_one + 5*h_two + 4*h_five, 124)  # Sam uses a total of 124 coins\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (h_one, h_two, h_five))\n\n    # Calculate the total value of all the coins in cents: one-cent (1*number of one-cent coins), two-cent (2*2*number of two-cent coins),\n    # and five-cent (5*5*number of five-cent coins) because each height contains either 6, 5, or 4 coins respectively\n    total_value = solutions[h_one] + 2*2*solutions[h_two] + 5*5*solutions[h_five]\n\n    return total_value\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    # Since George's amount is 5 times that of Chloe, we calculate the total sweets as:\n    # Chloe's + Maggie's + Lily's + George's\n    total_sweets = sum(solutions.values())\n\n    return total_sweets\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "from sympy import nsimplify, sqrt\nfrom decimal import Decimal, getcontext\n\ndef solution():\n    # Set the precision to ensure the final answer can be rounded to 3 decimal places correctly\n    getcontext().prec = 6\n\n    # Calculate the repeating decimals using sympy's nsimplify function\n    neg_thirteen_dot_three = nsimplify(\"-13.333...\", rational=True)\n    four_dot_zero_nine = nsimplify(\"4.090909...\", rational=True)\n    eleven_dot_one = nsimplify(\"11.111...\", rational=True)\n\n    # Calculate the cubed root, square of the number and the square root\n    cube_root = neg_thirteen_dot_three**(Decimal(1)/3)\n    squared_number = four_dot_zero_nine**2\n    sqrt_eleven_dot_one = sqrt(eleven_dot_one)\n\n    # Perform the final calculation\n    result = (cube_root * squared_number) / (Decimal('59.24') - sqrt_eleven_dot_one)\n\n    # Round off to the nearest 3 decimal places\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all heights to meters for comparison.\n    # 1 foot = 0.3048 meters, 10 millimeters = 1 centimeter, 100 centimeters = 1 meter.\n    \n    # Original estimates in various units\n    height_m = 5\n    height_cm = 120\n    height_mm = 50\n    height_ft = 8\n    \n    # Conversions to meters\n    height_cm_to_m = height_cm / 100   # 120cm to meters\n    height_mm_to_m = height_mm / 1000  # 50mm to meters\n    height_ft_to_m = height_ft * 0.3048  # 8 feet to meters\n    \n    # Possible range for a pupil's height: 1m to 2.5m (typical heights for children aged 11)\n    min_height = 1\n    max_height = 2.5\n    \n    # Check if the estimates are within the typical height range.\n    correct_estimates = {\n        '5m': min_height <= height_m <= max_height,\n        '120cm': min_height <= height_cm_to_m <= max_height,\n        '50mm': min_height <= height_mm_to_m <= max_height,\n        '8ft': min_height <= height_ft_to_m <= max_height\n    }\n    \n    # The correct estimates are returned.\n    correct_estimate = None\n    for estimate, is_correct in correct_estimates.items():\n        if is_correct:\n            correct_estimate = estimate\n            break  # Stop the loop after finding the correct estimate\n\n    return correct_estimate\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for a in range(1, 10): # Thousands digit cannot be 0\n        for b in range(10): # Tens and hundreds digit can be from 0-9\n            pip_number = int(f\"{a}{b}{b}{a}\")\n            bud_number = int(f\"{b}{a}{a}{b}\")\n            if pip_number + bud_number == 5510:\n                return pip_number\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 46))\n\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                if a != b and b != c and a != c:  # Different prime numbers\n                    if a + b != c and a + c != b and b + c != a:  # A's statement\n                        if b - 1 in primes and b - a == 7:  # B's statement\n                            if a + 2 * c == b or b + 2 * c == a or a + b == 2 * c:  # C's statement and Teacher's confirmation\n                                return a + b + c\n    return None\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15 AM\", \"%I:%M %p\")\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Abigail gets up at 07:40\n    wake_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    \n    # 25 minutes later she starts her breakfast\n    breakfast_start_time = wake_up_time + timedelta(minutes=25)\n    \n    # Breakfast takes 10 minutes to finish\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    \n    # Her journey takes 35 minutes in total\n    journey_end_time = breakfast_end_time + timedelta(minutes=35)\n    \n    # She arrives 5 minutes late for registration\n    # Therefore, registration time is 5 minutes before she actually arrives\n    registration_time = journey_end_time - timedelta(minutes=5)\n\n    # Return the registration time in \"%H:%M\" format\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the distance, s be the original speed, and t be the original time.\n    d, s, t = symbols('d s t')\n\n    # When speed increases by 25%, the time taken decreases by 20 minutes.\n    # Therefore, d = s * (t - 20/60).\n    # And with increased speed, d = s * 1.25 * new_time. As distance is constant, new_time = t - 20/60.\n    equation1 = Eq(d, s * 1.25 * (t - 20/60))\n\n    # When speed decreases by 45 m/min, the time taken increases by 75%.\n    # Therefore, d = (s - 45) * new_time. As distance is constant, new_time = t * 1.75.\n    equation2 = Eq(d, (s - 45) * t * 1.75)\n\n    # Combine the two equations with the equation d = s * t\n    equation3 = Eq(d, s * t)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, s, t))\n\n    # The returned solutions is a dictionary. We should access the value using .get method instead of [d].\n    return solutions.get(d)\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import gcd\n\ndef solution():\n    interval_a = 24\n    interval_b = 30\n\n    # Find the least time both trains will leave together using LCM\n    least_common_multiple = (interval_a * interval_b) // gcd(interval_a, interval_b)\n\n    hours_passed = least_common_multiple // 60\n    minutes_passed = least_common_multiple % 60\n\n    # Since the trains leave at 9 AM, add the hours and minutes passed to 9 AM\n    hours = 9 + hours_passed\n    minutes = minutes_passed\n\n    # Convert to 24-hour format in case of overflow\n    if hours >= 24:\n        hours -= 24\n\n    return f\"{hours:02d}:{minutes:02d}\"\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_questions = 25\n    points_for_correct = 4\n    points_for_incorrect = -1\n    total_jack_points = 61\n    \n    for correct_jack in range(total_questions + 1):\n        incorrect_jack = total_questions - correct_jack\n        jack_points = correct_jack * points_for_correct + incorrect_jack * points_for_incorrect\n        \n        if jack_points == total_jack_points:\n            for correct_johnson in range(correct_jack):\n                incorrect_johnson = total_questions - correct_johnson\n                johnson_points = correct_johnson * points_for_correct + incorrect_johnson * points_for_incorrect\n                \n                if johnson_points == total_jack_points and correct_jack > correct_johnson:\n                    jack_unanswered = total_questions - correct_jack - (correct_jack * points_for_correct - total_jack_points)\n                    return jack_unanswered\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_taken = 0\n\n    while total_taken < 2989:\n        # Take out two balls\n        total_taken += 2\n        # Assuming Ming can take balls until there are balls in the bag\n        if white_balls > 1:\n            # Case 1: Both balls are white\n            white_balls -= 2\n            if black_balls > 0:\n                # Put back one black ball only if there is any black ball in Bag B\n                black_balls -= 1\n        elif black_balls > 1:\n            # Case 2: Both balls are black\n            black_balls -= 2\n            # Put back one black ball\n            black_balls += 1\n        else:\n            # Case 3: One white and one black\n            white_balls -= 1\n            black_balls -= 1\n            # Put back one white ball\n            white_balls += 1\n    \n    # Since the last action took 2 balls and only one would be put back\n    # we need to correct total taken by subtracting one\n    total_taken -= 1\n    \n    remaining_balls = white_balls + black_balls\n\n    return {'remaining_balls': remaining_balls, 'color': 'white' if white_balls > black_balls else 'black'}\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = \"11:15 AM\"\n    travel_duration_hours, travel_duration_minutes = 3, 50\n\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M %p\")\n    travel_duration = timedelta(hours=travel_duration_hours, minutes=travel_duration_minutes)\n\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # meters\n    rabbit_sleep_time = 215  # minutes\n    start_delay = 10   # minutes\n\n    # Distance covered by rabbit before it sleeps\n    rabbit_distance_before_sleep = rabbit_speed * start_delay\n    # Time taken by rabbit to finish the race after it wakes up without sleep time\n    if rabbit_distance_before_sleep < race_distance:\n        rabbit_running_time_after_sleep = (race_distance - rabbit_distance_before_sleep) / rabbit_speed\n    else:\n        rabbit_running_time_after_sleep = 0\n    # Total time taken by rabbit to finish the race including sleep\n    rabbit_total_time = start_delay + rabbit_sleep_time + rabbit_running_time_after_sleep\n\n    # Time taken by turtle to finish the race\n    turtle_total_time = race_distance / turtle_speed\n\n    # Who reaches the finish line first and the distance difference at that point\n    if rabbit_total_time < turtle_total_time:\n        # Rabbit reaches first. Calculate remaining distance for the turtle\n        turtle_distance_when_rabbit_finishes = turtle_speed * rabbit_total_time\n        distance_between = race_distance - turtle_distance_when_rabbit_finishes\n        winner = \"Rabbit\"\n    else:\n        # Turtle reaches first. Calculate remaining distance for the rabbit\n        rabbit_distance_when_turtle_finishes = rabbit_distance_before_sleep + rabbit_speed * (turtle_total_time - start_delay - rabbit_sleep_time)\n        distance_between = race_distance - rabbit_distance_when_turtle_finishes\n        winner = \"Turtle\"\n    \n    return winner, distance_between\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 because it's the tenth place of a two-digit number\n        for y in range(10):  # y can be from 0 to 9\n            A = 10 * x + y\n            B = 20 * x + 2 * y\n            if B == 6 * A + 25:\n                # The equation 6A + 25 = B translates to 60x + 6y + 25 = 20x + 2y\n                # Simplifying gives us 40x + 4y + 25 = 0, which contradicts the initial condition\n                # Therefore, subtract both sides of the initial statement for clarity\n                if (20 * x + 2 * y) - (60 * x + 6 * y) == 25:\n                    return A  # return A once the corrected condition of the problem is satisfied\n    return None\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    x = symbols('x')\n    equation = simplify((8 * x + 8) / 2 - 3 * (x + 6))\n\n    return equation\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's marbles\n    Andrew, Boris, Jeffery, Xavier = symbols('Andrew Boris Jeffery Xavier')\n\n    # Andrew has 30 marbles less than the average of Boris, Jeffery, and Xavier\n    equation1 = Eq(Andrew, (Boris + Jeffery + Xavier)/3 - 30)\n\n    # Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(Xavier, 3 * Andrew)\n\n    # There are no additional conditions provided for Boris and Jeffery\n    # Hence, their relationship with Andrew and Xavier is unknown\n    # The two above equations have 4 unknowns, this system is underdetermined\n    # We cannot find a unique solution for this unless we had two more equations\n    # But for the sake of this problem, let's assume Boris and Jeffery have equal marbles\n    \n    # Let's add two more assumptions to solve the equations\n    # Boris and Jeffery have an equal number of marbles\n    equation3 = Eq(Boris, Jeffery)\n    \n    # The total number of marbles is the sum of Andrew and 3 times Andrew\n    # plus twice the number of marbles Boris has (since Boris = Jeffery)\n    # This is also an assumption for practical purposes\n    # You may choose a different assumption based on the problem statement\n    total_marbles = 4 * Andrew + 2 * Boris  # Total is arbitrary for demonstration\n    equation4 = Eq(total_marbles, 4 * Andrew + 2 * Boris)\n\n    # Solve the set of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (Andrew, Boris, Jeffery, Xavier))\n\n    # Sum of Jeffery and Boris' marbles\n    BJ_sum = solutions[Boris] + solutions[Jeffery]\n\n    return BJ_sum\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Given departure time in hours and minutes.\n    departure_hour = 10\n    departure_minute = 35\n    \n    # Convert departure time to a datetime object.\n    departure_time = datetime.strptime(f\"{departure_hour}:{departure_minute}\", \"%H:%M\")\n    \n    # Duration of the journey in hours and minutes.\n    journey_hours = 3\n    journey_minutes = 35\n    \n    # Calculate arrival time by adding the duration to the departure time.\n    arrival_time = departure_time + timedelta(hours=journey_hours, minutes=journey_minutes)\n    \n    # Format the arrival time into the required format.\n    ans = arrival_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \").replace(\"PM\", \"p.m.\").replace(\"AM\", \"a.m.\")\n\n    return ans\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_2 = pow(2, 2017) % 10  # The last digit of 2^2017\n    last_digit_3 = pow(3, 2017) % 10  # The last digit of 3^2017\n    ans = (last_digit_2 * last_digit_3) % 10  # The last digit of the product\n    return ans\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original = int(i)\n        reversed_num = int(str(i)[::-1])\n        diff = abs(original - reversed_num)  # Take the absolute difference\n        results.add(diff)\n    ans = all(result % 9 == 0 for result in results)  # Check if all differences are multiples of 9\n    return ans\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Define the system of equations based on the problem statement\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Get the number of triangles equal to a diamond\n    num_triangles_equal_diamond = solutions[diamond] / solutions[triangle]\n\n    return num_triangles_equal_diamond\n\nans = int(solution())"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    price_per_kg_1 = 5 / 2.5\n    price_per_kg_2 = 7.70 / 4\n\n    if price_per_kg_1 > price_per_kg_2:\n        return \"4kg for £7.70\"\n    else:\n        return \"2.5kg for £5\"\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the animals\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # Calculate how many pigs weigh as much as 8 elephants\n    pigs_for_elephants = 8 * solutions[elephant] / solutions[pig]\n    \n    return pigs_for_elephants[0]  # Access the value for pigs in the solution dictionary\n    \nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n    \n    equation1 = Eq(cars, 4/3 * bikes)\n    equation2 = Eq(bikes, lorries + lorries/4)\n    total_vehicles = cars + bikes + lorries\n    \n    # Since we are looking for an even number of vehicles less than 100, the maximum total must be 98.\n    for total in range(2, 100, 2):\n        equation3 = Eq(total_vehicles, total)\n        solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n        \n        # Check that all the values are positive integers.\n        if solutions and all(value.is_integer and value > 0 for value in solutions.values()):\n            return solutions\n    return None\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (3, 7), (5, 11)]\n    num, _ = solve_congruence(*congruences)\n    return num\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for S, E in permutations(range(10), 2):\n        SEE = (S * 100) + (E * 10) + E\n        EES = (E * 100) + (E * 10) + S\n        if SEE * 2 == EES and S != 0:\n            return SEE\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = (35 / 5 + 1) / 6\n    return c\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)  # Daniel started on May 15, 2023\n    duration_days = 3 * 7 - 1  # 3 weeks equals 21 days, subtract 1 because the start day counts as day 1\n\n    end_date = start_date + timedelta(days=duration_days)\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('8:30', '%H:%M')\n    lesson_duration = timedelta(minutes=45)\n    moving_period = timedelta(minutes=5)\n\n    # Calculate the time after all lessons and moving periods\n    total_duration = (lesson_duration + moving_period) * 2 + lesson_duration\n    break_time = start_time + total_duration\n\n    return break_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 5 * 60  # Convert start time to minutes (5 p.m. is 300 minutes past noon)\n    badminton_duration = 45  # Badminton duration in minutes\n    jogging_duration = 30  # Jogging duration in minutes\n\n    # Total duration in minutes\n    total_duration = badminton_duration + jogging_duration\n\n    # End time in minutes past noon\n    end_time_minutes = start_time + total_duration\n\n    # Convert end time back to hours and minutes\n    end_time_hours = end_time_minutes // 60\n    end_time_remain_minutes = end_time_minutes % 60\n    \n    # Determine AM or PM for end time\n    period = \"PM\" if end_time_hours < 12 or end_time_hours >= 12 and start_time >= 12 * 60 else \"AM\"\n    # Adjust for 24 hour to 12 hour conversion\n    end_time_hours = end_time_hours if end_time_hours <= 12 else end_time_hours - 12\n\n    # Return end time in hours and minutes with correct period\n    return f\"{end_time_hours}:{end_time_remain_minutes:02d} {period}\"\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    marcs_watch = datetime.strptime(\"11:50 AM\", \"%I:%M %p\")\n    actual_time = marcs_watch + timedelta(minutes=15)  # Correct Marc's slow watch\n    georges_time = actual_time - timedelta(minutes=7)  # Account for George's fast watch\n\n    # Adding half an hour to the actual time\n    future_time = actual_time + timedelta(minutes=30)\n    future_georges_time = future_time - timedelta(minutes=7)  # Apply George's fast watch to future time\n    \n    # Formatting the time as a string\n    ans = future_georges_time.strftime(\"%I:%M %p\")\n\n    return ans\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction = 4 / 25\n    decimal = 0.17\n\n    if fraction > decimal:\n        ans = \"4/25 is larger\"\n    elif fraction < decimal:\n        ans = \"0.17 is larger\"\n    else:\n        ans = \"Both are equal\"\n\n    return ans\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    ans = (False, factors)  # 91 is not a prime number because it has these factors\n    return ans\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Initialize the list to represent whether the state is winning (True) or losing (False) for the player \n    # who is about to write numbers. The index represents the number of numbers left to write.\n    state = [False] * 53\n\n    # Go through each state from 1 to 52, since state 0 is trivially a losing state as there are no\n    # more numbers to write\n    for i in range(1, 53):\n        # For each move (1, 3, 4, or 6), check if making that move would result in a losing state \n        # for the opponent. If so, the current state is winning.\n        moves = [1, 3, 4, 6]\n        state[i] = any(i - move >= 0 and not state[i - move] for move in moves)\n    \n    # If the first state (with all 52 numbers left to be written) is a winning state, then Betty should \n    # go first, otherwise she should go second. \n    # Winning strategy: always write a number or numbers that leaves a state which is a multiple of 7\n    # (7, 14, 21, 28, 35, 42, 49, 1).\n    if state[52]:\n        return \"First\", \"Betty should always leave a multiple of 7 for Abby to play next. If Abby writes any numbers, Betty should respond so that the total amount written is a multiple of 7.\"\n    else:\n        return \"Second\", \"Betty should respond so that the total amount written after her turn is a multiple of 7.\"\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # As the provided question does not contain a pattern to analyze,\n    # there is no concrete answer to provide.\n    # If additional information regarding the pattern is made available in the future,\n    # this function can be updated accordingly to find the value of the specific pattern.\n    # For now, with no specific pattern or picture provided, the answer must remain as None.\n\n    ans = None\n\n    return ans\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    train_departure = datetime.strptime(\"07:35\", \"%H:%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = train_departure + journey_duration + walk_duration\n    return arrival_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    # difference between total number of boys and girls is given as 31\n    # when arranged in a square array, girls form the (s - 2) x (s - 2) square\n    # and the boys form the outer layer, with s x s square\n    # therefore, the equation representing the difference in number of boys and girls is:\n    # s^2 - (s - 2)^2 = 31, where s is the total side length of square including both boys and girls\n    # simplify the equation to find s\n    \n    s = 3  # start with a side length of 3, which is the smallest possibility to satisfy the condition\n    while (s**2 - (s - 2)**2) != 31:\n        s += 2  # increment by 2 each time to ensure there is always an outer layer of boys and inner of girls\n    \n    # The total number of students is equal to s^2, which is the square of the side length including both boys and girls\n    total_students = s**2\n    \n    return total_students\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "from sympy import symbols\n\ndef solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime(\"17:30\", \"%H:%M\")\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n\n    for coin in coins:\n        if (total - coin) == 2 * (total - coin - (total - coin) // 2):\n            return coin\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # After Tom takes 4 stones from Stack B:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    # For Jerry to win, he must make a move that prevents Tom from being able to equalize the counts in the next move.\n    # Jerry should also take stones from Stack B. This will allow Jerry to always keep a winning position by mirroring Tom's move.\n\n    stones_taken_from_b = 16  # To leave 0 stones, ensuring Tom can't make the piles equal again.\n    stack = \"B\"  # Stack from which Jerry takes the stones.\n\n    return f\"Jerry must take {stones_taken_from_b} stone(s) from Stack {stack}.\"\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    is_prime = True\n    for i in range(2, int(233**0.5)+1):  # Check divisors only up to the square root of 233\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return not is_prime  # Return True if 233 is not prime, meaning it can be divided evenly\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    waiting_time = timedelta(hours=1, minutes=25)\n    waiting_start = datetime.strptime(\"15:15\", \"%H:%M\")\n    meeting_time = waiting_start + waiting_time\n    return meeting_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n\n        # Ensure that A and D are not 0 as they are the leading digits\n        if A == 0 or D == 0:\n            continue\n        \n        # Ensure that all letters represent different digits\n        if len(set(p)) != 5:\n            continue\n\n        num1 = 10 * A + B  # AB represented by A and B\n        num2 = 10 * C + D  # CD represented by C and D\n        num3 = 100 * A + 10 * E + B  # AEB represented by A, E, and B\n\n        if num1 + num2 == num3:\n            return A + B + C + D\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    m = symbols('m')\n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n    solution = solve(equation, m)\n    return solution[0]\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    return 18 - x\n\nans = solution(5)  # Assume Lucy uses 5 meters for the dress as an example"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the unknowns\n    n = symbols('n', integer=True)  # number of terms in the sequence\n    a1 = symbols('a1')  # first term\n    d = symbols('d')  # common difference\n\n    # The sum of the first 4 numbers: S_4 = 4/2 * (2*a1 + (4-1)*d) = 124\n    equation1 = Eq(2 * (2*a1 + 3*d), 124)\n\n    # The sum of the last 4 numbers: S_4_last = 4/2 * (2*(a1 + (n-1)*d) - 3*d) = 156\n    # This accounts for the sum formula S_n = n/2 * (first term + last term)\n    # The last term of the sequence is a1 + (n-1)*d\n    equation2 = Eq(2 * (2*(a1 + (n-1)*d) - 3*d), 156)\n\n    # The total sum of the sequence: S_n = n/2 * (2*a1 + (n-1)*d) = 210\n    equation3 = Eq(n * (2*a1 + (n-1)*d) / 2, 210)\n\n    # Solve the system of equations for n, a1, and d\n    solutions = solve((equation1, equation2, equation3), (n, a1, d))\n\n    # We're interested in the number of terms, n\n    # Since n is an integer, we simply return the solution for n\n    return solutions[n]\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Given remainders and moduli for the congruences\n    remainders_and_moduli = [(5, 7), (6, 8), (6, 10)]\n\n    # Using Chinese Remainder Theorem to find a number that fits all congruences\n    crt_solution = solve_congruence(*remainders_and_moduli)\n    number = crt_solution[0]\n\n    # Given sum of quotients when dividing by 6, 7, and 8 is 265.\n    # Based on the Chinese Remainder Theorem solution, the number found is the solution module lcm(7, 8, 10).\n    # We can represent our number as number = crt_solution + k * lcm(7, 8, 10), where k is an integer.\n    # The quotients when dividing this number by 6, 7, and 8 will be the same for all k,\n    # so we can just calculate it for the crt_solution found above.\n\n    sum_of_quotients = (number // 6) + (number // 7) + (number // 8)\n    if sum_of_quotients != 265:\n        # If the sum of quotients is not 265, we did not find the correct k.\n        # We calculate the correct k by finding how much the sum of quotients needs to be adjusted.\n        k = (265 - sum_of_quotients) // (lcm(7, 8, 10) // 6 + lcm(7, 8, 10) // 7 + lcm(7, 8, 10) // 8)\n        # Adjust the number with the correct k\n        number = number + k * lcm(7, 8, 10)\n\n    return number\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Pip's statement has an issue because it does not account for the number 1,\n    # which is neither prime nor composite.\n    \n    # A composite number is defined as a whole number greater than 1 that is not prime.\n    # That is, it has more than two factors. The number 1 is not considered composite\n    # because it has exactly one positive divisor (itself).\n\n    # So, the statement should be corrected as:\n    # \"A positive integer greater than one which is not a prime number is called\n    # a composite number.\"\n\n    # Since Pip did not mention the part about being greater than one, his definition\n    # is not strictly correct; however, the spirit of the statement is generally correct\n    # for positive integers greater than one.\n\n    # This function just needs to return the corrected statement or a confirmation.\n    return True  # This returns True to confirm that the corrected definition is now accurate\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    final_step = result + 50\n    divide_by_5 = (final_step) // 5\n    add_20 = divide_by_5 + 20\n    divide_by_5_again = add_20 // 5\n    subtract_6 = divide_by_5_again - 6\n    month_of_birth = subtract_6 // 4\n    day_of_birth = final_step - (month_of_birth * 100)\n\n    return (month_of_birth, day_of_birth)\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    # Use sympy expressions for the equation\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n\n    # Using sympy's solve function to find the solution to the equation\n    ans = solve(equation, x)\n\n    # Return the solution in an appropriate format (which could be a list of solutions)\n    return ans[0] if len(ans) == 1 else ans\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "from sympy import symbols, simplify\n\ndef solution():\n    # Let x be the number we think of\n    x = symbols('x')\n    # Add 3 to x\n    x_plus_3 = x + 3\n    # Multiply by 2\n    times_2 = x_plus_3 * 2\n    # Take away 2\n    minus_2 = times_2 - 2\n    # Add 10\n    add_10 = minus_2 + 10\n    # Divide by 2\n    div_2 = add_10 / 2\n    # Take away the number you started with (x)\n    final_result = div_2 - x\n\n    # Simplify the final result\n    ans = simplify(final_result)\n\n    return ans\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    A = 88 // 22  # Sandra got 22 by dividing by A, thus 88 = 22 * A\n    correct_answer = 98 // A  # The correct answer using the correct number 98 divided by A\n\n    return (A, correct_answer)\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 0\n    red_tiles = 0\n    green_tiles = 0\n\n    while total_tiles > 0:\n        tiles_in_current_layer = (layer * 2 + 1)**2 - (layer * 2)**2\n        tiles_to_use = min(total_tiles, tiles_in_current_layer)\n        if layer % 2 == 0:\n            red_tiles += tiles_to_use\n        else:\n            green_tiles += tiles_to_use\n        total_tiles -= tiles_to_use\n        layer += 1\n\n    color_more_used = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n\n    return (color_more_used, difference)\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    pink = symbols('pink')\n    gray = 11 * pink\n    total_dolphins = pink + gray\n\n    number_of_pink = solve(Eq(total_dolphins, 48), pink)[0]\n\n    return number_of_pink.evalf()\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%M %p')\n    game_duration = timedelta(minutes=225)\n\n    start_time = end_time - game_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define the time when the musical ended and the duration of the second half.\n    end_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    second_half_duration = timedelta(hours=1, minutes=45) / 2\n\n    # Calculate the start time by subtracting the total duration from the end time.\n    start_time = end_time - second_half_duration * 2\n\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols to use in the equations\n    t = symbols('t')  # time after 6:10 pm in hours\n\n    # Simon's travel distance equation\n    # distance = speed * time\n    simon_distance = 80 * t\n\n    # Wife's travel distance equation\n    # distance = speed * time + initial distance head start\n    wife_distance = 60 * t + 15\n\n    # Setting the equations equal to find the time when Simon overtakes his wife\n    # Simon's and his wife's distances are the same at the point of overtaking\n    equation = Eq(simon_distance, wife_distance)\n\n    # Solve the equation for t\n    t_overtake = solve(equation, t)[0]\n\n    # Convert the overtaking time to minutes and add to the start time 6:10 pm\n    overtaking_time_minutes = t_overtake * 60\n    overtaking_hours = int(overtaking_time_minutes // 60)\n    overtaking_minutes = int(overtaking_time_minutes % 60)\n\n    # Start time is 6:10 pm, so add the overtaking hours and minutes to it\n    overtaking_hour = 18 + overtaking_hours\n    overtaking_minute = 10 + overtaking_minutes\n\n    # If overtaking_minute is 60 or more, adjust the time\n    if overtaking_minute >= 60:\n        overtaking_hour += 1  # Add one hour if minutes exceed 60\n        overtaking_minute -= 60  # Subtract 60 to get the remaining minutes\n\n    # Format the time in hh:mm format\n    overtaking_time_formatted = f\"{overtaking_hour:02d}:{overtaking_minute:02d}\"\n\n    return overtaking_time_formatted\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the mass of mint candies, and y, z be the total mass of the other two containers\n    m, x, y, z = symbols('m x y z')\n    # Define the ratios based on the given fractions for strawberry candies\n    # and the fact that mint and chocolate together make the rest\n    eq1 = Eq((2/5) * x + m, x)\n    eq2 = Eq((2/7) * y + m, y)\n    eq3 = Eq((2/9) * z + m, z)\n    eq4 = Eq(x + y + z, 1371)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (m, x, y, z))\n\n    # Extract the solution values for the total masses\n    x_value, y_value, z_value = solutions[x], solutions[y], solutions[z]\n\n    # The mass of all strawberry candies is the sum of strawberry candies from all three containers\n    mass_strawberry = (2/5) * x_value + (2/7) * y_value + (2/9) * z_value\n\n    return mass_strawberry.evalf()\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    books_first_shelf = 18\n    books_second_shelf = 24\n\n    # Let x be the number of books moved from the first to the second shelf.\n    # After moving x books, the first shelf will have (18 - x) books,\n    # and the second shelf will have (24 + x) books.\n    # We want the second shelf to have twice as many books as the first shelf,\n    # so we can set up the equation: 24 + x = 2 * (18 - x)\n\n    x = symbols('x')\n    equation = Eq(books_second_shelf + x, 2 * (books_first_shelf - x))\n\n    # Solve for x\n    solution = solve(equation, x)\n    \n    # We take the non-negative solution as it is not possible to move a negative number of books\n    number_of_books_to_move = max(solution)\n\n    return number_of_books_to_move\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n\n    # Step 5: Reverse the subtraction of 50\n    result += 50\n    \n    # Step 4: Reverse adding the day of his birth twice by subtracting 250 (we'll later add the known constant 250)\n    result -= 250\n    \n    # Step 3: Reverse the multiplication by 50\n    result //= 50\n    \n    # Step 2: Reverse adding 1 to the result\n    result -= 1\n    \n    # Step 1: Reverse the multiplication of the month by 4\n    month = result // 4\n    \n    # Since we subtracted 250 earlier, we restore the 200, and the remainder will be the day\n    day = result % 4 * 100 + 50\n    \n    return (month, day)\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "from sympy import symbols, solveset, Abs, S\n\ndef solution():\n    x = symbols('x')\n    solutions = solveset(Abs(x + 1) - (2 * x + 5), x, domain=S.Reals)\n    \n    return [s.evalf() for s in solutions]\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "from sympy import symbols, lcm, solve\n\ndef solution():\n    # Define the variable M\n    M = symbols('M')\n    a = 1  # Initialize a to the smallest positive integer greater than 0\n\n    # The smallest common multiple of 7, 9, and 28 is their least common multiple (LCM)\n    common_multiple = lcm(7, 9, 28)\n\n    # Loop through values of a to find the smallest a that fits the conditions\n    while True:\n        # The differences between the remainders should be equal since they form an arithmetic sequence.\n        # The pattern should be (a, a+d, a+2d, a+3d)\n        # Since the remainders when divided by 7 and 28 must also form this pattern, we can consider\n        # 'a' as the difference 'd' in the arithmetic sequence. Then the remainders can be:\n        # when M is divided by  7, the remainder is a (first term of the sequence)\n        # when M is divided by  9, the remainder is a+1a (second term)\n        # when M is divided by  a, the remainder is 0 (since M has to be divisible by a)\n        # when M is divided by 28, the remainder is a+2a (third term)\n        # We do not consider the remainder by 9 for this pattern because it is not needed for the calculation\n      \n        # Since the remainders form an increasing arithmetic sequence and the difference is 'a' \n        # (which is the first term), 'a+2a' has to be less than 28 to be a valid remainder (less than the divisor)\n        if 3*a < 28:\n            # 'a' should not be a divisor of 9 to ensure that the remainders are distinct\n            if 9 % a != 0:\n                # Now use the Chinese Remainder Theorem to find the smallest M\n                # We set up the equations based on the remainders of M\n                equations = [\n                    M % 7 == a,    \n                    M % 9 == 2 * a, \n                    M % 28 == 3 * a\n                ]\n\n                # We find a solution for M that satisfies all the equations\n                res = solve(equations, M)\n\n                # Since 'res' will be in terms of a dictionary, we extract the value of M\n                M_val = int(res[M])\n\n                # Validate that M when divided by 'a' should also leave a remainder of 3*a (from the pattern)\n                # However, since M is divisible by a (as per the given), we just ensure M is a multiple of a\n                if M_val % a == 0:\n                    # If it passes all checks, we've found our number\n                    return M_val\n        # Increment 'a' and try the next number\n        a += 1\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # First part: Arranging four different colored socks\n    ways_for_different_socks = factorial(4)  # 4!\n    \n    # Second part: Arranging two pairs of socks with the same color (treated as indistinguishable)\n    ways_for_pairs = factorial(4) // (factorial(2) * factorial(2))  # 4! / (2! * 2!)\n    \n    return ways_for_different_socks, ways_for_pairs\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "from itertools import product\n\ndef solution():\n    # Define all the attempts\n    attempts = {\n        '5648': 2,\n        '3628': 2,\n        '3147': 2,\n        '5629': 2,\n        '1258': 0\n    }\n    \n    # Initialize a dictionary to store how many times each digit occurs at each position\n    digit_frequency = [{}, {}, {}, {}]\n    \n    # Loop through all the products of 10 numbers at 4 positions\n    for possibility in product('0123456789', repeat=4):\n        code = ''.join(possibility)\n        \n        # Check every attempt\n        for attempt, correct_digit_count in attempts.items():\n            match_count = sum(a == b for a, b in zip(code, attempt))\n            \n            # If the count does not match the expected count of correct digits, break\n            if match_count != correct_digit_count:\n                break\n        else:\n            # If all attempts have their expected count, we found a solution\n            return code\n\n    # If there is no solution\n    return None\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import sqrt\n\n    m = 2.0  # mass in kg\n    k = 500  # force constant in N/m\n    A = 0.08  # amplitude in m\n    x = 0.04  # displacement from equilibrium in m\n\n    # Total energy (E) of the oscillator in Joules (using the formula E = 0.5 * k * A^2)\n    E = 0.5 * k * A**2 \n\n    # Maximum speed (v_max) at equilibrium is not needed to find the speed at displacement x\n\n    # Speed (v) of the block when it's x meters from equilibrium\n    # Conservation of mechanical energy: Potential energy at x + Kinetic energy at x = Total energy\n    # 0.5 * k * x^2 + 0.5 * m * v^2 = E gives us v = sqrt((2/m) * (E - 0.5 * k * x^2))\n    v = sqrt((2/m) * (E - 0.5 * k * x**2))\n\n    # Returning the total energy and the speed\n    return E, v\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    # Convert all time values to seconds\n    light1_cycle = 1 * 60  # 1 minute in seconds\n    light2_cycle = int(1.5 * 60)  # convert 1.5 minutes to seconds and make it an integer\n    light3_min_cycle = 30  # 30 seconds minimum for light 3\n\n    # Find least common multiple for the first two lights (in seconds)\n    lcm_first_two = lcm(light1_cycle, light2_cycle)\n\n    # The third light should at least take 30 seconds, so we need to find\n    # the smallest multiple of lcm_first_two that is greater than or equal\n    # to light3_min_cycle. Since we need the lights to turn green every 9 minutes,\n    # we also need to ensure that the cycle does not exceed 9 minutes.\n    max_cycle_time = 9 * 60  # 9 minutes in seconds\n\n    # Starting from the minimum cycle time for the third light, find the first\n    # multiple of lcm_first_two that is greater than or equal to 30 seconds\n    # and less than or equal to 9 minutes.\n    for cycle_time in range(light3_min_cycle, max_cycle_time + 1, light3_min_cycle):\n        if cycle_time % lcm_first_two == 0:\n            return cycle_time  # Return the shortest valid cycle time for light 3 in seconds\n\n# Call the solution function and store the answer\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    return hex(0x2A3 + 0x17B).upper().replace('0X', '')\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the marks of each student\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Given conditions\n    equation1 = Eq((A + B + C) / 3, 95)  # Average mark of A, B, C\n    equation2 = Eq((B + C + D) / 3, 94)  # Average mark of B, C, D\n    equation3 = Eq(E, 96)                # Mark of E\n    equation4 = Eq(B, D)                 # B and D have the same score\n    # Fix: Remove the +1 since we use inequalities to set the constraints\n    equation5 = Eq(A, max(A, B, C, D, E))             # A has the highest mark\n\n    # Fix: Add inequality conditions directly into the solve function\n    # Solve the system of equations with constraints\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, A > 91, B > 91, C > 91, D > 91, E > 91), (A, B, C, D, E))\n\n    # Since we have constraints, we may end up with more than one solution. \n    # We need to pick the one where A is the highest and B and D are the same.\n    d_score = None\n    for sol in solutions:\n        if sol[A] > sol[E] and sol[B] == sol[D] and sol[E] == 96:\n            d_score = sol[D]\n            break\n\n    # If no solution found, return None\n    if d_score is None:\n        return \"No solution found within the given constraints\"\n\n    # Return the mark of D\n    return d_score\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Update the equation to represent the total spent on pens and pencils\n    total_cost = Eq((5 * x) * 12 + (3 * x) * 5, 120)\n    x_value = solve(total_cost, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789', 3):  # B=2, D=0 fixed, so we permute the rest\n        A, C, E, F = perm\n        ABCDEF = int(f'2{A}0{C}{E}F')  # Placeholder F as string\n        EFABCD = int(f'{E}{F}2{A}0{C}')\n        if 5 * ABCDEF == 6 * EFABCD:\n            return int(f'{F}{A}{C}{E}')  # Correctly returning the 4-digit number FACE\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, total_water = symbols('A B C total_water')\n\n    # 1st scenario - A and C fill the pool with A contributing 18 tons.\n    eq1 = Eq(A + C, total_water)\n    \n    # 2nd scenario - B and C fill the pool with B contributing 27 tons.\n    eq2 = Eq(B + C, total_water)\n    \n    # Given - B's rate is twice A's rate.\n    eq3 = Eq(B, 2 * A)\n\n    # Solve the system of equations.\n    solutions = solve((eq1, eq2, eq3), (A, B, C, total_water))\n\n    # Since eq1 states A contributes 18 tons, and B's rate is twice that of A,\n    # we can determine C using one of the scenarios provided, eq1 or eq2.\n    # We'll use eq1 and the given data: A = 18 tons.\n    # Then, B = 2 * A => B = 36 tons.\n    # Thus, the pool's total can be determined from eq2: B + C = total_water.\n    # With B = 36 and the fact that B + C = A + C, we have:\n    # total_water = A + C = 18 + (27 - 18) = 18 + 9 = 27 tons.\n    ans = solutions[A] + 18  # We add 18 because C = B - A = 27 - 18.\n\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_animals, cows, goats = symbols('total_animals cows goats')\n\n    # Initial conditions: 65% cows, 35% goats.\n    equation1 = Eq(cows, 0.65 * total_animals)\n    equation2 = Eq(goats, 0.35 * total_animals)\n\n    # When 240 more animals were added, cows become 85% of the total animals.\n    equation3 = Eq(cows + 240 * 0.20, 0.85 * (total_animals + 240))\n\n    # The number of goats doubled.\n    equation4 = Eq(goats * 2, goats + 240*0.15)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3, equation4), (total_animals, cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import gcd\n    \n    # Calculate differences of pairs (190-137, 137-101, 190-101)\n    diffs = [53, 36, 89]\n    \n    # gcd of the differences will be the divisor\n    n = diffs[0]\n    for diff in diffs[1:]:\n        n = gcd(n, diff)\n    \n    # Find the remainder when 299 is divided by this number\n    remainder_when_299_divided = 299 % n\n    \n    return remainder_when_299_divided\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first_term = 12\n    last_term = 90\n    num_terms = last_term - first_term + 1\n    \n    # The sum of an arithmetic series is (first_term + last_term) * num_terms / 2\n    # The series sum will be odd if (first_term + last_term) and num_terms are both odd or both even\n    # Otherwise, the sum will be even\n    if (first_term + last_term) % 2 == 0 or num_terms % 2 == 0:\n        ans = \"even\"\n    else:\n        ans = \"odd\"\n            \n    return ans\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3) * (-1)  # Correcting the cube root of a negative number\n    square = (-1.2) ** 2                  # Squaring a negative number\n    return cube_root + square\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "from sympy import symbols\n\ndef solution(a, b, c):\n    # Each digit will appear in each position (hundreds, tens, ones) twice\n    # because there are 3! = 6 permutations and the total permutations are evenly distributed\n    sum_of_digits_each_position = 2 * (a + b + c)\n\n    # The place values contribute by a factor of 100 for hundreds, 10 for tens, and 1 for ones\n    sum_of_all_numbers = sum_of_digits_each_position * (100 + 10 + 1)\n\n    return sum_of_all_numbers\n\na, b, c = symbols('a b c')\nans = solution(a, b, c)"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "from sympy import Rational, sqrt\n\ndef solution():\n    # Evaluate the first fraction\n    numerator_1 = Rational(7, -10) / Rational(-10, 3)  # -3.3... as a fraction -10/3\n    denominator_1 = (-Rational(27, 1000))**(Rational(1, 3))  # The cube root of -0.027 as a fraction\n    fraction_1 = numerator_1 / denominator_1\n    \n    # Evaluate the second fraction\n    numerator_2 = Rational(2**3, 4**2)\n    denominator_2 = Rational(1, 8) * (Rational(18, 10) - (Rational(2, 10) * 7))\n    fraction_2 = numerator_2 / denominator_2\n    \n    # Evaluate the third expression inside the brackets\n    repeating_fraction = Rational(1, 7)  # This is the fraction form of the repeating decimal 0.142857...\n    fraction_3 = Rational(1, 10) / repeating_fraction\n    expression_3 = fraction_3 + (2 * Rational(3, 10))\n    \n    # The final expression calculation\n    ans = fraction_1 + fraction_2 - expression_3\n    return ans\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    # Since we want to find the total number of students given there are 44 more boys than girls\n    # Let's start by considering the different possibilities for the numbers of rows and columns of boys and girls.\n    # n = side of the square containing boys\n    # m = side of the square containing girls (n - 2)\n    # The total number of boys is n * n\n    # The total number of girls is (n - 2) * (n - 2) if n > 1, otherwise 0\n    # We are given the difference between the total number of boys and total number of girls is 44\n    # Hence, n * n - (n - 2) * (n - 2) = 44\n    # We need to find such an n and calculate the total number of students (boys + girls)\n\n    n = 1  # Starting with the smallest possible square that can surround another square\n    while True:\n        # Calculate the number of boys based on the current n\n        boys = n * n\n        # Calculate the number of girls, which is the inner (n-2) square if bigger than 1\n        girls = (n - 2) * (n - 2) if n > 1 else 0\n        # Check if the difference between boys and girls matches the condition\n        if boys - girls == 44:\n            # If the condition is met, calculate the total number of students and break the loop\n            total_students = boys + girls\n            break\n        # Increment n to check the next possible size of the square\n        n += 1\n\n    return total_students\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the variable for the total number of cookies in the box\n    x = symbols('x')\n\n    # James sold 7/20 more cookies in the second month than the first month\n    cookies_sold_second_month = 1680 + (7/20) * x\n\n    # The number of cookies James kept decreased by 3/20\n    cookies_kept_decrease = (3/20) * x\n\n    # Equation: cookies kept in first month - cookies kept in second month = decreased amount\n    equation = Eq((x - 1680) - (x - cookies_sold_second_month), cookies_kept_decrease)\n\n    # Solve the equation to find x (the total number of cookies in the box)\n    total_cookies = solve(equation, x)\n\n    return total_cookies[0]\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Correct duration is 8 hours 45 minutes\n    work_duration = timedelta(hours=8, minutes=45)\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    start_time = end_time - work_duration\n    \n    # Format start_time in the 12-hour clock format\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n\n    while True:\n        if (mother_age + years) == 3 * (justin_age + years):\n            return years\n        years += 1\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Since the difference between the fruits of two neighboring trees is 1,\n    # they form an arithmetic sequence. For such a sequence, the average number\n    # of fruits on a tree is simply the average of the first and last term.\n    # The sum of the fruits for the trees is then given by the formula:\n    # sum = average_number_of_fruits * number_of_trees\n    # Since the number of trees is even (8 trees), if the average number of \n    # fruits on a tree is an integer, then the sum will also be an even number.\n    \n    # Let's assume the tree with the least amount of fruits has x fruits,\n    # and then the trees will have (x, x+1, x+2, ..., x+7) fruits respectively\n    # The sum of these amounts of fruits will be:\n    # sum = (x) + (x+1) + (x+2) + ... + (x+7)\n    # sum = 8*x + (1+2+3+4+5+6+7)\n    # sum = 8*x + 28\n    # We are looking for the total sum to be 225:\n    # 8*x + 28 = 225\n    # 8*x = 197\n    # x = 197 / 8\n    # Since x needs to be a whole number (as you can't grow a fraction of a fruit),\n    # and 197 divided by 8 gives a fractional number, it is not possible for the sum\n    # of the fruits to be 225, as it would not result in a sequence of fruits  \n    # where each tree grows an integer number of fruits.\n    \n    return 'It is not possible for the sum of the number of fruits for these 8 trees to be 225'\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    # If Cora gives Qingle 8 sweets\n    equation1 = Eq(qingle + 8, cora - 8)\n\n    # Set the equation for Qingle having 4 more sweets than Cora after the transfer\n    equation2 = Eq(qingle + 8, cora - 8 + 4)\n\n    solutions = solve((equation1, equation2), (cora, qingle))\n\n    # Difference in the number of sweets they have at first\n    difference = solutions[cora] - solutions[qingle]\n\n    return difference\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    x_origin, y_origin = 0, 0  # Origin point (0,0)\n    x_point, y_point = 4, 8  # Point through which the line passes (4,8)\n\n    # Since the graph passes through the origin, b = 0\n    b = 0\n\n    # Calculate the slope m based on the point (4,8) and the origin (0,0)\n    m = (y_point - y_origin) / (x_point - x_origin)\n\n    # Construct the linear equation y = mx + b\n    # Since b is zero, the term \"+ b\" can be omitted.\n    equation = f\"y = {m}x\"\n\n    return equation\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Distance covered in 30 minutes (from 8:00 am to 8:30 am)\n    distance_covered = 6300 - 1800  # in meters\n    \n    # Time spent in minutes to cover the distance\n    time_spent = 30  # 30 minutes\n    \n    # Find the speed (distance per minute)\n    speed = distance_covered / time_spent  # in meters per minute\n\n    # Remaining distance to cover at 8:30 am\n    remaining_distance = 1800  # in meters\n\n    # Calculate the time needed to cover the remaining distance\n    time_needed = remaining_distance / speed  # in minutes\n\n    # Initial time at 8:30 am\n    start_time = datetime.strptime(\"8:30\", \"%H:%M\")\n\n    # Calculate the time when Peter reaches his friend's house\n    arrival_time = start_time + timedelta(minutes=time_needed)\n\n    # Format the arrival time to return only the time\n    ans = arrival_time.strftime(\"%H:%M\")\n\n    return ans\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    # To solve the incorrect equation: -6/6 = 6 which is clearly wrong as -6/6 = -1\n    # However, to follow the instruction, we can create an \"equation\" from the given statement\n    # and check whether it can have a solution.\n    \n    # Importing fraction for precise calculation\n    from fractions import Fraction\n    \n    # Setting up the equation -6/6 = x, where x is the unknown we expect to be 6\n    left_side = Fraction(-6, 6)\n    right_side = Fraction(6, 1)\n    \n    # Check if the solution to the equation is 6\n    ans = left_side == right_side\n    \n    return ans\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330    # m/min\n    turtle_speed = 30     # m/min\n    race_distance = 6990  # meters\n    rabbit_sleep_time = 215   # minutes\n    start_delay = 10      # minutes\n\n    # After delay and before sleep, the rabbit is still running\n    rabbit_distance_after_delay = rabbit_speed * start_delay\n\n    # By the time the rabbit starts sleeping, the turtle has covered:\n    turtle_distance_after_delay = turtle_speed * (start_delay + rabbit_sleep_time)\n\n    # Time for the turtle to finish from that point\n    remaining_distance_for_turtle = race_distance - turtle_distance_after_delay\n    remaining_time_for_turtle = remaining_distance_for_turtle / turtle_speed\n\n    # Hence, total time for turtle to finish the race\n    turtle_total_time = start_delay + rabbit_sleep_time + remaining_time_for_turtle\n\n    # Rabbit completes the race without any more sleep\n    rabbit_remaining_distance = race_distance - rabbit_distance_after_delay\n    rabbit_run_time_total = rabbit_remaining_distance / rabbit_speed\n\n    # Total time for the rabbit to complete the race including the sleep\n    rabbit_total_time = start_delay + rabbit_sleep_time + rabbit_run_time_total\n\n    # Check who reaches the finish line first and calculate the distance between them\n    if rabbit_total_time < turtle_total_time:\n        winner = \"rabbit\"\n        # Distance the turtle has covered when the rabbit finishes\n        turtle_distance_when_rabbit_finishes = turtle_speed * rabbit_total_time\n        distance_between = race_distance - turtle_distance_when_rabbit_finishes\n    else:\n        winner = \"turtle\"\n        # Distance the rabbit has covered when the turtle finishes\n        rabbit_distance_when_turtle_finishes = rabbit_distance_after_delay + rabbit_speed * (turtle_total_time - start_delay - rabbit_sleep_time)\n        distance_between = race_distance - rabbit_distance_when_turtle_finishes\n    \n    return (winner, distance_between)\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "from sympy import symbols\n\ndef solution():\n    y = symbols('y')\n    remaining_sweets = y / 2\n    return remaining_sweets\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve, Rational\n\n    # Define symbols for each child's age\n    y_son, o_son, y_daughter, o_daughter = symbols('y_son o_son y_daughter o_daughter')\n\n    # Set up the equations based on the given problem\n    equation1 = Eq(y_son + o_son + y_daughter + o_daughter, 55)\n    equation2 = Eq(o_son - y_son, 3)\n    equation3 = Eq(o_daughter - y_daughter, 2)\n    equation4 = Eq(y_son, 2 * o_daughter)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (y_son, o_son, y_daughter, o_daughter))\n\n    # Convert the solution values to simple fractions (if needed)\n    simplified_solutions = {k: Rational(str(v)) for k, v in solutions.items()}\n    \n    youngest_age = min(simplified_solutions.values())\n\n    return youngest_age.evalf()\n\nans = solution()"
    ]
}