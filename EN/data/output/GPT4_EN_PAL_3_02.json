{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    # Formula for the sum of squares of the first n natural numbers: 1²+2²+3²+......+n²=1/6n(n+1)(n+2)\n    # We calculate the sum from 1 to 15, then subtract the sum from 1 to 4\n    def sum_of_squares(n):\n        return (n * (n + 1) * (2*n + 1)) // 6\n\n    sum_1_to_15 = sum_of_squares(15)\n    sum_1_to_4 = sum_of_squares(4)\n    \n    ans = sum_1_to_15 - sum_1_to_4\n    return ans\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_of_hand = 14 / 27\n    \n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n    \n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9\n    end_time = 10\n\n    class_duration = end_time - start_time\n\n    return class_duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for n in range(1, 100):\n        if (n*n + 5) + 26 == (n+1)*(n+1):\n            return n*n + 5\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have amy - x apples\n    # John will have john + x apples\n    # We want amy - x to be 4 more than john + x\n    # So we set up the equation amy - x = john + x + 4\n    # And solve for x\n    x = (amy - john - 4) // 2\n    return x\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = sum(range(1, 10)) + 7\n    return ans\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "def solution():\n    from math import factorial as fact\n\n    num_plants = 9\n    select_plants = 4\n\n    permutations = fact(num_plants) // fact(num_plants - select_plants)\n\n    return permutations\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    # Let the cost of the first house be x and second house be y.\n    # The selling price for both is 99000 each.\n    # Profit on first house is 10% of x -> 0.10 * x\n    # Similarly, loss on second house is 10% of y -> 0.10 * y\n    # Equations based on profit and loss:\n    # x + 0.10*x = 99000 -> 1.10*x = 99000 -> x = 99000 / 1.10\n    # y - 0.10*y = 99000 -> 0.90*y = 99000 -> y = 99000 / 0.90\n    \n    x = 99000 / 1.10\n    y = 99000 / 0.90\n    \n    # Overall cost is the sum of the costs of both houses\n    overall_cost = x + y\n    \n    # Overall selling price is the sum of the selling prices of both houses\n    overall_selling_price = 99000 * 2\n    \n    # Overall profit or loss is the difference between the selling price and the cost\n    overall_profit_loss = overall_selling_price - overall_cost\n\n    return overall_profit_loss\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    blouse_pants_shoes = shirts * pants * shoes\n    dress_shoes = dresses * shoes\n    dress_heels = dresses * heels\n    \n    total_combinations = blouse_pants_shoes + dress_shoes + dress_heels\n    return total_combinations\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure winning, Fred needs to leave a multiple of 4\n    # after his first move, since whatever George removes\n    # (1, 2, or 3), Fred can then always remove enough to bring\n    # the total removed to 4. This will ensure that George is\n    # always faced with a multiple of 4, which will eventually\n    # lead to Fred removing the last orange.\n    # Thus, Fred should remove 1 orange to leave 14,\n    # which is not a multiple of 4, but then he can subsequently\n    # always bring the total to a multiple of 4 after each of\n    # George's moves.\n    \n    total_oranges = 15\n    # Winning position is when the remaining oranges are multiple of 4\n    # Find Fred's first move by finding the smallest number that\n    # results in a multiple of 4 when subtracted from the total\n    for first_move in range(1, 4):\n        if (total_oranges - first_move) % 4 == 0:\n            return first_move\n    \n    # If no such move found, return None (should not happen with given problem statement)\n    return None\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    toms_age = symbols('toms_age')\n    dads_age = 43\n    equation = Eq(4 * toms_age - 5, dads_age)\n    \n    age_of_tom = solve(equation, toms_age)\n    \n    return age_of_tom[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    return 66666 * 66666\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3 / 20\n    decimal = 0.16\n\n    if fraction > decimal:\n        ans = \"3/20 is larger\"\n    elif fraction < decimal:\n        ans = \"0.16 is larger\"\n    else:\n        ans = \"Both are equal\"\n\n    return ans\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    # A has to be in the middle of B and C, which leaves two spots on either side\n    # We can place B and C in 2! ways since A has to be between them\n    bc_permutation = 2\n    # With B, C, and A in place, we have to place D and E in the remaining two places\n    de_permutation = 2\n\n    # The total count is the product of the two permutations\n    count = bc_permutation * de_permutation\n\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    cupcakes_per_egg = 15 / 3\n    eggs = cupcakes / cupcakes_per_egg\n    return int(eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Exercise timeline:\n    # Jogging from 6:30 am to 8:30 am (2 hours)\n    # Walking from 8:30 am to 9:30 am (1 hour)\n\n    # Jogging speed and time\n    jogging_speed = 8  # km/h\n    jogging_time = 2  # hours\n\n    # Walking speed and time (half of jogging speed)\n    walking_speed = jogging_speed / 2\n    walking_time = 1  # hour\n\n    # Calculate distances\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled during exercise\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let `n` be the number of each type of note in the purse\n    n = symbols('n')\n    total_value = Eq(5 * n + 10 * n + 20 * n, 280)\n    number_of_notes = solve(total_value, n)[0]\n\n    # The total number of notes is three times the number of one type\n    return 3 * number_of_notes\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # The last digit of a number after multiplication depends on the last digit of the factors.\n    # Last digit of powers of 2: 2, 4, 8, 6, and it repeats every 4 powers.\n    # Last digit of powers of 7: 7, 9, 3, 1, and it repeats every 4 powers.\n    # Last digit of powers of 9: 9, 1, and it repeats every 2 powers.\n    \n    # Since there are 100 of each, we just need to find the pattern's position at the 100th power.\n    # For the powers of 2: 100 % 4 = 0, so we take the last digit of 2^4.\n    last_digit_2 = (2 ** 4) % 10\n    # For the powers of 7: 100 % 4 = 0, so we take the last digit of 7^4.\n    last_digit_7 = (7 ** 4) % 10\n    # For the powers of 9: 100 % 2 = 0, so we take the last digit of 9^2.\n    last_digit_9 = (9 ** 2) % 10\n\n    # Now we multiply the last digits and take the last digit of the result.\n    last_digit = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n\n    def square(M, N):\n        return 8 * M - N * N\n\n    return square(diamond(7, 6), 9)\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Since we want the smallest possible number for the largest pile,\n    # we should start distributing marbles giving the piles the smallest numbers possible first\n    # We must have at least 1 marble in each pile, and each must be different\n    marbles_left = 16 - (1 + 2 + 3) # we allocate 1, 2, and 3 marbles to the first three piles\n\n    # The fourth pile will have the remaining marbles, and it will be the biggest pile\n    biggest_pile = marbles_left\n    \n    return biggest_pile\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2\n    while not (isprime(p) and isprime(p + 107)):\n        p += 1\n    return p\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 60 * (1 + 1/2 + 1/3 + 1/4 + 1/5)\n    return A\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 + 1) // 2  # since we are only considering odd squares, we take half\n    ans = (1/6) * n * (n + 1) * (2 * n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    minibusses_needed = (students + capacity - 1) // capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_floors = 4 - 1  # From the first to the fourth floor\n    target_floors = 2 - 1  # From the first to the second floor\n    total_time = 12  # Danny needs 12 minutes for total_floors\n\n    # The time needed is proportional to the number of floors.\n    time_for_target_floors = total_time * (target_floors / total_floors)\n\n    return time_for_target_floors\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    ans = sum((i**2 + (i+1)**2) / (i * (i+1)) for i in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = (24 / 100) * 25\n    return ans\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    return 123456789 * 987654321\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    n_terms = (13 - 1) // 2 + 1  # Number of terms in the sequence 1,3,5,...,13 is (last - first) / step + 1\n    sum_of_sequence = sum(range(1, 2*n_terms, 2))  # 1+3+5+...+13\n    ans = sum_of_sequence ** 2\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(3, 2)\n    for i in range(3, 10):\n        result *= Fraction(i+1, i)\n\n    return float(result)\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    apples_to_give = (amy_apples - john_apples) // 2\n    return apples_to_give\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    return 167 - 43\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    # lengths of the ribbons\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    # calculate the greatest common divisor\n    gcd_12 = gcd(ribbon1, ribbon2)\n    greatest_length = gcd(gcd_12, ribbon3)\n\n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    total_family_age = 29 * 6\n    total_parents_age = total_family_age - 64\n    average_parents_age_3_years_ago = (total_parents_age - 3 * 2) / 2\n    return average_parents_age_3_years_ago\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark = 26\n    sue = mark / 2\n    total = mark + sue\n    return total\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # Original equation\n    eq1 = Eq(x + y, 11.63)\n\n    # Faulty equation where the decimal of one number is shifted left\n    eq2 = Eq(x + y / 10, 5.87)\n\n    # Solving the system of equations for x and y\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Difference between the two numbers\n    diff = abs(solutions[x] - solutions[y])\n\n    # The problem asks for one hundred times the difference\n    result = 100 * diff\n\n    return result\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Cherry can either choose a dress combination or a blouse and pants combination\n    # If she chooses a dress, she can wear shoes or heels\n    dress_combinations = dresses * (shoes + heels)\n\n    # If she chooses a blouse and pants, she can only wear shoes\n    blouse_pants_combinations = shirts * pants * shoes\n\n    # Total combinations\n    total_combinations = dress_combinations + blouse_pants_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes, y be the number of $2 notes\n    x, y = symbols('x y')\n\n    # Initial conditions\n    # x + y = 40 (the total number of notes)\n    eq1 = Eq(x + y, 40)\n\n    # Spending conditions\n    # David spent 40% of the $10 notes and 25% of the $2 notes\n    spent_x = 0.40 * x  # 40% of $10 notes\n    spent_y = 0.25 * y  # 25% of $2 notes\n\n    # After spending, the ratio of $10 to $2 notes is 4/5\n    # (x - spent_x) = (4/5) * (y - spent_y)\n    eq2 = Eq(x - spent_x, (4/5) * (y - spent_y))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # Calculate the cost of the gift\n    cost = spent_x * 10 + spent_y * 2\n\n    return cost.subs(solutions)  # substitute the solutions to find the cost\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # The presented series follows a pattern of (1 + 1/2^k) where k is each even power of 2.\n    # According to the given equation, we multiply each term in the series until 2^(2^2009).\n    \n    # Let's evaluate the expression on the left-hand side in the question:\n    # Since we have pairs of (1 + 1/2^k) starting with k=0, k=1, k=2, k=4... up to k=2^2009,\n    # each pair is of the form (1 + 2^(-2^i)) where i is from 0 to 2009.\n    \n    # When multiplying the sequence with the first term, we get:\n    # (1 + 1/2) * (1 + 1/4) * ... * (1 + 1/2^(2^2009))\n    # Notice that every term in the sequence will cancel out the term from the previous multiplication\n    # except for the first half and the last denominator fraction:\n    # 1/2 from the first term and 1/2^(2^2009) from the last term.\n    # So we're left with:\n    # 2 * (1 - (1/2^(2^2009))) which resembles the form of the equation given on the right-hand side.\n    \n    # Thus, the pattern shows that n is actually one less than 2009, because the power starts with 2^0.\n    n = 2009 - 1\n    return int(n)\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        P, A, S, O = perm\n        if P == 0:  # A 4-digit number cannot start with 0\n            continue\n        if P + A + S + O == (O*10 + S) - (A*10 + P):\n            return P*1000 + A*100 + S*10 + O\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n\n    # Harry and Liam had 640mL of water in total.\n    equation1 = Eq(harry + liam, 640)\n\n    # If 90mL of water was transferred from Liam to Harry, Harry would have thrice the amount of water as Liam.\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # Arithmetic sequence: a_n = a_1 + (n - 1) * d\n    first_term = 3  # a_1 (mondays questions)\n    difference = 3  # d (difference in questions each day)\n    # Total days from Monday to Sunday is 7\n    num_days = 7\n\n    # Calculate the number of questions for each day\n    total_questions = 0\n    for day in range(num_days):\n        total_questions += first_term + (day * difference)\n\n    return total_questions\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Let the rate of work of the man be m and his wife be w.\n\n    # The man can finish the barrel of orange juice in 15 days on his own.\n    # Therefore, his rate is (1 barrel) / (15 days).\n    m = 1 / 15\n\n    # Together, they can finish it in 12 days.\n    # Hence, their combined rate is (1 barrel) / (12 days).\n    # Therefore, m + w = 1 / 12\n\n    # To find the wife's rate, w, we subtract man's rate, m, from their combined rate.\n    w = (1 / 12) - m\n\n    # Now we calculate the number of days the wife will take to finish the barrel on her own.\n    # We take the reciprocal of the wife's rate to get the days.\n    days_wife = 1 / w\n\n    return days_wife\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    # Calculate the number of balls left in the bag for each color based on the conditions given\n    for white_left in range(3, 9):\n        for red_left in range(2, 6):\n            for black_left in range(6, 7):  # At least 3 black balls need to be picked, so max 6 left\n                if (9 - white_left + 5 - red_left + 6 - black_left) == 10:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # Hundreds digit must be between 1 and 9\n        for j in range(10):  # Tens digit must be between 0 and 9\n            for k in range(10):  # Ones digit must be between 0 and 9\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    return pow(2, 10) % 3\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100  # Convert snake length from meters to centimeters\n\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    n = 1\n    while True:\n        term = (n * (n + 1)) // 2\n        if term >= 100:\n            break\n        last_term = term\n        n += 1\n    return last_term\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls = symbols('pearls')\n\n    equation = Eq((1/2) * pearls + (1/4) * pearls + (1/6) * pearls + 3, pearls)\n\n    total_pearls = solve(equation, pearls)\n\n    return total_pearls[0]\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # Calculate the sum of the initial three numbers using the mean\n    sum_of_three = 3 * 120\n    \n    # Calculate the sum of the four numbers using the new mean\n    sum_of_four = 4 * 150\n    \n    # The fourth number is the difference between the sum of four and sum of three\n    fourth_number = sum_of_four - sum_of_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = round(initial_mass - given_away, 1)\n    return remaining_mass\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    empty_basket_weight = 2 * half_full_weight - full_weight\n    return empty_basket_weight\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define congruences based on the problem statement:\n    # x ≡ 0 (mod 7)\n    # x+2 ≡ 0 (mod 8)\n    # x+4 ≡ 0 (mod 9)\n    congruences = [(0, 7), (-2, 8), (-4, 9)]\n\n    # Use the Chinese Remainder Theorem to find a solution for the system of congruences\n    first_number = solve_congruence(*congruences)[0]\n\n    # Calculate the sum of the three consecutive even numbers\n    ans = first_number + (first_number + 2) + (first_number + 4)\n\n    return ans\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the distances\n    x = symbols('x')\n\n    # Since Maria is 5 minutes late because of the rain, the time spent in rain is 5 minutes.\n    # Her initial time at usual speed was 30 minutes.\n    original_time = 30  # in minutes\n    rain_time = 5  # in minutes, extra time because of the rain\n\n    # Her speed reduces to 80% due to the rain\n    speed_reduction_factor = 0.8\n\n    # The distance she covers in rain at reduced speed is 2400 meters\n    rain_distance = 2400  # in meters\n\n    # Equation:\n    # (usual speed * 30 minutes) + (80% of usual speed * 5 minutes) = length of the journey\n    equation = Eq(x + speed_reduction_factor * (rain_distance / (x / original_time)) * rain_time, x + rain_distance)\n\n    # Solve for x, which is the length of the journey\n    length_of_journey = solve(equation, x)\n\n    return length_of_journey[0]\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front, Bud is 6th from the back\n    # There are 5 children between Pip and Bud, counting inclusively\n    # So we add up Pip's position, the children in between, and Bud's position\n    pip_position_from_front = 6\n    children_between_inclusive = 5\n    bud_position_from_back = 6\n\n    # Since the position counting is inclusive,\n    # we subtract 1 from the sum of Pip's and Bud's position\n    # to avoid counting one of them twice.\n    total_children = pip_position_from_front + children_between_inclusive + bud_position_from_back - 1\n\n    return total_children\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    difference = (25 - 10) // (4 - 1)\n    total_rows = 25\n    # Using Arithmetic Series Sum formula: n/2 * (2a + (n-1)d)\n    total_athletes = total_rows/2 * (2*first_term + (total_rows-1)*difference)\n    return int(total_athletes)\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    total_days_spent = 5\n    target_total_paintings = 56\n\n    paintings_per_day = total_paintings_done / total_days_spent\n    remaining_paintings = target_total_paintings - total_paintings_done\n    remaining_days_needed = remaining_paintings / paintings_per_day\n\n    return remaining_days_needed\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    # Given that a leaf is inserted after every 3 pieces of paper\n    # A leaf is essentially two pieces of paper side by side when book is opened\n    # Calculate the number of leaves by dividing the number of pages by 3 \n    # and rounding down to the nearest whole number as incomplete sets don't count\n    pieces_of_paper = 18\n    leaves_after_every = 3\n\n    number_of_leaves = pieces_of_paper // leaves_after_every\n\n    return number_of_leaves\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "from math import comb\n\ndef solution():\n    # There are 13 oranges, and each kid needs to get at least 2 oranges.\n    # This means we will first hand out 2 oranges to each kid, leaving us with 13 - 3 * 2 oranges.\n    remaining_oranges = 13 - 3 * 2\n\n    # Now we have to distribute the remaining oranges to 3 kids, where any kid can get any number of the remaining oranges.\n    # This is analogous to the problem of partitioning the remaining oranges into 3 parts.\n    # The problem can be handled by adding 2 \"partition oranges\" to split the oranges into 3 groups.\n    # This is equivalent to the \"stars and bars\" combinatorial problem, where we have remaining_oranges \"stars\" (oranges) and 2 \"bars\" (partitions).\n\n    total_ways = comb(remaining_oranges + 2, 2)\n    \n    return total_ways\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    # Number of family members\n    family_members = 6\n    # Current average age of the family\n    current_average_age = 29\n    # Total age of the family currently\n    total_age_family = current_average_age * family_members\n    # Total age of the children\n    total_age_children = 64\n    # Total age of the parents currently\n    total_age_parents = total_age_family - total_age_children\n    \n    # Number of parents\n    parents = family_members - (family_members - 2)\n    \n    # Average age of the parents currently\n    average_age_parents_current = total_age_parents / parents\n    \n    # Average age of the parents 3 years ago\n    average_age_parents_past = average_age_parents_current - 3\n    \n    return average_age_parents_past\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "def solution():\n    import itertools\n\n    times = [7, 9, 4, 10]\n    shortest_time = float(\"inf\")\n\n    # Generate all possible pairs for the first trip across the river\n    for first_trip in itertools.combinations(times, 2):\n        time_taken = max(first_trip)  # Time it takes for the slowest person\n        remaining_three = list(set(times) - set(first_trip))\n\n        # Generate all options for the person to return\n        for returner in first_trip:\n            two_on_other_side = remaining_three + [returner]\n\n            # Generate all possible pairs for the second trip across the river\n            for second_trip in itertools.combinations(two_on_other_side, 2):\n                time_taken_second_trip = time_taken + returner + max(second_trip)\n                remaining_one = list(set(two_on_other_side) - set(second_trip))\n\n                # Finally, the last person returns and the fastest pair crosses the river\n                last_person_returning = min(second_trip)\n                last_person = remaining_one[0]\n                total_time = time_taken_second_trip + last_person_returning + last_person\n                \n                # Update the shortest time if the current total time is lower\n                shortest_time = min(shortest_time, total_time)\n\n    return shortest_time\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    ans = 95 * (37 + 42 + 21)\n    return ans\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # The nth term of an arithmetic progression is given by a + (n-1)d\n    # where a is the first term and d is the common difference\n    # We have the 5th term, so for n=5: a + 4d = 8\n    # We have the 12th term, so for n=12: a + 11d = 50\n\n    # Let's solve these two equations to find d\n\n    # From the first equation: a = 8 - 4d\n    # Substitute a into the second equation, we get:\n    # (8 - 4d) + 11d = 50\n    # 8 + 7d = 50\n    # 7d = 50 - 8\n    # 7d = 42\n    # d = 42 / 7\n    d = 42 / 7\n\n    return d\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    difference = 3\n    \n    # Find the number of terms in the original arithmetic progression\n    num_terms = (242 - first_term) // difference + 1\n    \n    # The process of removing 3 terms and adding their sum as a term continues until there are only 3 terms left\n    while num_terms > 3:\n        total_sum = first_term * 3 + difference * 3   # Sum of the first 3 terms\n        first_term += difference * 3                  # Update the first term by skipping 3 terms\n        num_terms -= 2                                # Each operation effectively removes 2 terms\n        \n    second_term = first_term + difference            # Calculate the second term from the first term and difference\n\n    return second_term\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let pip, bud, and bob represent their respective weights\n    pip, bud, bob = symbols('pip bud bob')\n\n    # Formulate equations based on average weights\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n\n    # Solve the system of equations for pip, bud, and bob\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    equation = 2*x + 3*x + 2 - 30 - 6*x + 8*x\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    elder_jacob = 1\n    younger_sisters = 4\n    younger_brothers = 3\n    total_children = elder_jacob + younger_sisters + younger_brothers\n    return total_children\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 7\n\n    work_per_person = initial_days * initial_people\n    total_work = work_per_person\n\n    # Calculate total number of people required to complete the bridge in 7 days\n    people_needed = total_work / target_days\n\n    # Calculate how many more people will be needed in addition to the initial 5\n    additional_people = people_needed - initial_people\n\n    return int(additional_people) if additional_people == round(additional_people, 0) else int(additional_people) + 1 # Since we can't have a fraction of a person, round up\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    usual_time = 30  # usual time in minutes\n    delay = 5  # delay caused by rain in minutes\n    reduced_distance = 2400  # distance covered after speed reduction in meters\n\n    # Let the original speed be 's' meters/minute, and the total distance be 'd' meters.\n    # Time taken to cover 2400 meters at reduced speed is actual time - usual time for 2400 meters at usual speed.\n    # reduced_speed = 0.8 * s, because speed is reduced by 20%\n    # So, the equation is: reduced_distance / (0.8 * s) - reduced_distance / s = delay\n    # Simplify the equation to find 's':\n    # (2400 / (0.8 * s)) - (2400 / s) = 5\n    # On further simplification: 2400 * (1 - 0.8) / (0.8 * s) = 5\n    # => (2400 * 0.2) / (0.8 * s) = 5\n    # => s = (2400 * 0.2) / (5 * 0.8)\n    s = (2400 * 0.2) / (5 * 0.8)\n\n    # The total time to complete the distance at usual speed is 30 + 5 = 35 minutes\n    # So, d = s * total_time\n    # => d = s * 35\n    total_time = usual_time + delay\n    d = s * total_time\n\n    return d\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3\n    rate_of_rise = 2\n    total_hours = (10 + 0.5) - 5\n\n    current_temp = initial_temp + (rate_of_rise * total_hours)\n\n    return current_temp\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let's denote the original number of students in school A as 'a' and in school B as 'b'.\n    # According to the question, we have two equations:\n    # a + b = 1050 (total number of students)\n    # (a - 20) = (b + 20) + 10 (school A after transfer has 10 more students than school B)\n    \n    # Let's rewrite the second equation as:\n    # a - 20 = b + 30 => a = b + 50\n    \n    # Substitute this back into the first equation:\n    # (b + 50) + b = 1050\n    # 2b + 50 = 1050\n    # 2b = 1000\n    b = 1000 // 2\n\n    # Now find the original number of students in school A:\n    a = b + 50\n\n    return a\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Worst case scenario for not drawing a green pencil would be:\n    # Darrell could draw all blue pencils and all white pencils first.\n    all_blue_and_white = 3 + 3\n    \n    # To then be sure to get a green pencil, he must draw one more.\n    to_get_green = 1\n    \n    # Total pencils Darrell must draw to be sure to get a green pencil\n    total_pencils = all_blue_and_white + to_get_green\n    \n    return total_pencils\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    # Equations based on the problem statement\n    spent_in_A = (initial_money / 2) + 1\n    remaining_after_A = initial_money - spent_in_A\n\n    spent_in_B = (remaining_after_A / 2) + 2\n    remaining_after_B = remaining_after_A - spent_in_B\n\n    spent_in_C = (remaining_after_B / 3) + 3\n    remaining_after_C = remaining_after_B - spent_in_C\n\n    # Remaining money after shopping in shop C\n    equation = Eq(remaining_after_C, 49)\n\n    # Solve the equation for initial_money\n    solution = solve(equation, initial_money)[0]\n\n    return solution\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    boys_fraction = 3/4\n    boys_count = total_students * boys_fraction\n    girls_count = total_students - boys_count\n    return int(girls_count)\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of books on the top shelf be n\n    n = symbols('n')\n\n    # The total number of books is the sum of an arithmetic series with 7 terms\n    # The common difference is -3 (since each shelf contains 3 fewer books than the one below it)\n    # The total number of books is 280\n\n    # Sum of arithmetic series formula is (n/2)*(first_term + last_term)\n    # Here, first_term is n and last_term is n + 6*(-3)\n    # n/2 is the number of terms, which is 7/2 for 7 terms\n\n    # Setting up the equation for the sum of the arithmetic series to equal 280\n    equation = Eq((7/2)*(n + (n + 6*(-3))), 280)\n\n    # Solving for n\n    solution = solve(equation, n)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Find divisors of 2240\n    divs = divisors(2240)\n\n    # Find the largest divisor that when divided by 2240 gives a square number\n    n = max(filter(lambda d: is_square(2240 // d), divs))\n\n    return n\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import lcm\n\ndef solution():\n    sweep_cycle = 3\n    mop_cycle = 5\n    cook_cycle = 9\n    clean_window_cycle = 3 * 7  # converting weeks to days\n\n    ans = lcm(sweep_cycle, mop_cycle, cook_cycle, clean_window_cycle)\n    return ans\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    # Pip was 6th from the front\n    # Bud was 6th from the end\n    # 5 children in between Pip and Bud inclusive\n    # Total children = Pip's position from front + children between + (Bud's position from end - 1)\n    total_children = 6 + 5 + (6 - 1)\n    return total_children\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    result = solve_congruence(*congruences)[0]\n    return result\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    sum_digits = sum(sum_of_digits(page) for page in range(1, 311))\n    return sum_digits\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    items_9_cost = 6.30\n    cost_per_item = items_9_cost / 9\n    cost_of_11_items = cost_per_item * 11\n    return cost_of_11_items\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    total_paintings_done = 35\n    days_spent = 5\n    total_paintings_goal = 56\n\n    paintings_per_day = total_paintings_done / days_spent\n    additional_paintings_needed = total_paintings_goal - total_paintings_done\n    additional_days_needed = additional_paintings_needed / paintings_per_day\n\n    return additional_days_needed\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    digits = 792  # Total number of digits used\n    pages = 0     # Total number of pages in the book\n    pageIndex = 0  # Index of the page\n    \n    # Count digits based on number of digit in page numbers\n    # First all pages having one digit\n    for index in range(1, 10):\n        digits -= 1 * index\n        pages += 1\n        pageIndex += 1\n\n    # Then all pages having two digits\n    for index in range(10, 100):\n        digits -= 2 * (index - pageIndex + 1)\n        pages += index - pageIndex + 1\n        pageIndex = index\n\n    # Finally pages having three digits\n    if digits > 0:\n        # Calculate the last index of the page using the remaining number of digits\n        # Note: If 'd' digits remain, and page numbers are three digits long, then there are d//3 pages left\n        pages += digits // 3\n\n    return pages\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Mr. Lim's and Mrs. Lim's current ages\n    mr_lim, mrs_lim = symbols('mr_lim mrs_lim')\n\n    # Define the equations based on the problem statement\n    # 7 years ago, the ratio of their ages was 6:5\n    equation1 = Eq((mr_lim - 7) / (mrs_lim - 7), 6 / 5)\n    # The sum of their current ages\n    equation2 = Eq(mr_lim + mrs_lim, 69)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mr_lim, mrs_lim))\n\n    # Mr. Lim's current age\n    return solutions[mr_lim]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # Total score of 5 students\n    total_score_5_students = 5 * 87\n    # Total score of 6 students after adding Jim's score\n    total_score_6_students = 6 * 88\n    # Jim's score is the difference between total scores before and after adding his score\n    jim_score = total_score_6_students - total_score_5_students\n    return jim_score\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Jayden's speed ratio is 7, and Carter's is 4.\n    # Let x be the distance Jayden traveled when they first meet.\n    # Since they start at the same time, the time is the same, so their distances relate by their speed ratio.\n    # Therefore, Carter travels (4/7) * x when they first meet.\n    # The sum of their distances is 440 m at the first meeting.\n    # x + (4/7) * x = 440\n    # (7/7 + 4/7) * x = 440\n    # (11/7) * x = 440\n    # x = 440 * (7/11)\n    # x = 280 m\n   \n    # Now, Jayden immediately turns around and meets Carter again.\n    # Let y be the additional distance Jayden travels after turning around until the second meeting.\n    # Since Jayden and Carter continue to walk towards each other, the ratio of their speeds remains the same.\n    # So, when Jayden covers y distance, Carter covers (4/7) * y.\n    # The sum of these additional distances (y + (4/7) * y) will be the remaining distance 440 - 280 = 160 m.\n    # y + (4/7) * y = 160\n    # (7/7 + 4/7) * y = 160\n    # (11/7) * y = 160\n    # y = 160 * (7/11)\n    # y = 160 * 7 / 11\n    # y = 101.8181818181...\n    # Approximation may occur, and since we need an integer result,\n    # we'll round it internally within the function, if necessary.\n    \n    y = 160 * 7 / 11\n    # y = 101.8181... m but since we only take full meters we truncate the decimal part\n    y = int(y)\n    # The total distance Jayden traveled is 280 m + y m.\n    total_distance_jayden = 280 + y\n    # So, the meeting place from A is the distance Jayden traveled.\n    return total_distance_jayden\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, peter, john = symbols('sam peter john')\n    \n    # Set up the equation: after giving 20%, Sam has 80% left, and has 20 more than John\n    # Since Sam and Peter had stickers in the ratio 7:5, we express sam as 7/5*Peter.\n    # After giving stickers away, John's number of stickers increased by 80%, so we can write that as:\n    # john * 1.8 = sam * 0.2 + peter * 0.2 -> which gives us John's initial amount of stickers.\n    \n    equation1 = Eq(sam, 7/5 * peter)\n    equation2 = Eq(0.8 * sam - 20, john)\n    equation3 = Eq(john * 1.8, sam * 0.2 + peter * 0.2)\n    \n    # Now we can solve the equations\n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    original_price = 4200\n    first_discount = 10 / 100\n    second_discount = 20 / 100\n\n    after_first_discount = original_price * (1 - first_discount)\n    final_price = after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    # Raja and Kumar had the same amount of money at first\n    equation1 = Eq(raja, kumar)\n\n    # After Raja spent $286 and Kumar spent $109, Kumar had 4 times as much money as Raja.\n    equation2 = Eq(kumar - 109, 4 * (raja - 286))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (raja, kumar))\n    \n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    capacity = 6\n    \n    minibusses_needed = (total_boys + capacity - 1) // capacity\n    \n    return minibusses_needed\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # The number of triangles equal to a diamond\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of baseball bats\n    x = symbols('x')\n    \n    cost_each = 135\n    sell_each = 185\n    profit = 2945\n    remaining_bats = 3\n    \n    # Equation for total cost\n    total_cost = x * cost_each\n    \n    # Equation for total sales when 3 bats are left\n    # We subtract the cost of the remaining bats because they haven't been sold\n    total_sales = (x - remaining_bats) * sell_each\n    \n    # Equation representing the profit\n    equation = Eq(total_sales, total_cost + profit)\n    \n    # Solve the equation\n    number_of_bats = solve(equation, x)\n\n    return number_of_bats[0]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one chair and one table\n    chair, table = symbols('chair table')\n    \n    # Equation representing the cost difference between a table and a chair\n    eq1 = Eq(table, chair + 160)\n    # Equation representing the total cost of 1 table and 5 chairs\n    eq2 = Eq(table + 5 * chair, 328)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (chair, table))\n    \n    # Return the cost of one chair\n    return solutions[chair]\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money_pence = 60\n    bud_money_pounds = 1.10\n    total_money_pence = pip_money_pence + (bud_money_pounds * 100)\n    \n    return total_money_pence / 100\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Rachel and Alice's original amounts of candy\n    rachel, alice = symbols('rachel alice')\n    \n    # Equation when Rachel gives Alice 10 candies\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Equation when Alice gives Rachel 10 candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total amount of candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rate of flow of the hot tap be x (bath/min), then the cold tap is 2x.\n    x = symbols('x')\n    equation = Eq(1/x + 1/(2*x), 1/10)\n\n    # Solve for x to find the time taken by the hot tap alone\n    hot_tap_time = solve(equation, x)[0]\n\n    # The cold tap flows at twice the rate, so it takes half the time\n    cold_tap_time = hot_tap_time / 2\n\n    return cold_tap_time\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_numbers = 10\n    mean_of_all = 1111\n\n    # Total sum of all numbers\n    total_sum = total_numbers * mean_of_all\n\n    # mean of the first 4 numbers\n    mean_of_first_four = (mean_of_all * total_numbers / 2) - 240\n\n    # sum of the first 4 numbers\n    sum_of_first_four = mean_of_first_four * 4\n\n    # sum of the last 6 numbers (total sum - sum of first 4)\n    sum_of_last_six = total_sum - sum_of_first_four\n\n    # mean of the last 6 numbers\n    mean_of_last_six = sum_of_last_six / 6\n\n    return mean_of_last_six\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2 # Lori's speed in meters per second\n    joyce_to_lori_ratio = 3 / 2 # Joyce's speed to Lori's speed ratio is 3:2\n    joyce_speed = lori_speed * joyce_to_lori_ratio # Calculate Joyce's speed\n\n    time = 10 # time in seconds\n    distance_joyce_runs = joyce_speed * time # distance = speed * time\n\n    return distance_joyce_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_cost = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    value_after_years = initial_cost * (1 - depreciation_rate) ** years\n    ans = round(value_after_years, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for i in range(1, 10):  # I cannot be 0\n        for s in range(0, 10):\n            if i != s:  # I and S must be different\n                is_sum = (10*i + s) * 4  # IS + IS + IS + IS\n                p = is_sum // 100  # The first digit of PI\n                pi = is_sum % 100  # Last two digits of PI\n                if pi // 10 != i and pi // 10 != s and pi % 10 != i and pi % 10 != s:\n                    # Digits of PI must be different from I and S\n                    if p != i and p != s and pi // 10 != p and pi % 10 != p:\n                        # Digits of P must be different from I, S and other digits of PI\n                        return is_sum  # PI is the total sum\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 727 + 482\n    return ans\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_A_over_20 = 0.6\n    probability_A_over_25_given_over_20 = 0.3\n\n    # Using conditional probability since we know the animal is already over 20\n    probability_A_over_25 = probability_A_over_25_given_over_20 / probability_A_over_20\n\n    return probability_A_over_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    distance_met = 360  # distance from home where they meet in metres\n    total_distance = 780  # total distance to the library in metres\n    danny_travel_distance = total_distance - distance_met\n\n    # Since they start at the same time and meet at the same time,\n    # the ratios of their speeds will be equal to the ratios of the distances they've traveled.\n    danny_speed = (danny_travel_distance / distance_met) * don_speed\n\n    return danny_speed\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    speed_1 = 7  # speed for the first 280 meters (in meters per second)\n    speed_2 = 5  # speed for the middle 400 meters (in meters per second)\n    speed_3 = 8  # speed for the sprint stage (in meters per second)\n    \n    distance_1 = 280  # distance of the first part (in meters)\n    distance_2 = 400  # distance of the middle part (in meters)\n    distance_3 = 800 - distance_1 - distance_2  # distance of the last part (in meters)\n\n    # Calculate time for each part\n    time_1 = distance_1 / speed_1\n    time_2 = distance_2 / speed_2\n    time_3 = distance_3 / speed_3\n\n    # Total time is the sum of times for each part\n    total_time = time_1 + time_2 + time_3\n    return total_time\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n\n    num_teams = 5\n    num_games = comb(num_teams, 2)\n\n    return num_games\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping + long_jump) - (2 * both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j / i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    pages_with_1_digit = 9\n    pages_with_2_digits = 90 * 2\n    pages_with_3_digits = 900 * 3\n\n    # Calculate the number of used digits so far\n    used_digits = pages_with_1_digit + pages_with_2_digits\n    remaining_digits = total_digits - used_digits\n\n    # Calculate how many pages have 3 digits\n    pages_with_more_than_2_digits = remaining_digits // 3\n    \n    # Calculate the total pages\n    total_pages = pages_with_1_digit + 90 + pages_with_more_than_2_digits\n    \n    return total_pages\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B can only be in positions 1 or 4 (far left or far right)\n    # There are 2 possibilities for A (either the far left or far right)\n    # After A is placed, there is 1 possibility for B (the remaining far position)\n    # There are 2 possibilities for C and D, which can be in any order in the remaining positions.\n    # Thus, we have 2 (for A) * 1 (for B) * 2! (for C and D)\n    from math import factorial\n    count = 2 * 1 * factorial(2)\n    return count\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    flour = 1 * 1000 + 500  # Converting to grams\n    brown_sugar = 1 * 1000 + 200  # Converting to grams\n    butter = 900  # Already in grams\n    \n    total_weight = flour + brown_sugar + butter  # Total weight in grams\n    mixture_per_tin = total_weight / 8  # Dividing the total weight by number of cake tins\n    \n    return mixture_per_tin\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return (20 * 27) // 30\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # If Janice takes out 3 reds, 3 blues and 3 greens, she will have 9 marbles\n    # without satisfying the requirement of getting at least 4 marbles of the same\n    # color.\n    # But if she takes one more marble, no matter what the color is, she will\n    # have 4 of at least one color (the worst case for the 10th marble is to be\n    # of a color of which she already has 3).\n    min_marbles = 3 + 3 + 3 + 1\n    return min_marbles\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    one_fifth_length = 6  # One-fifth of the wood is 6cm\n    full_length = one_fifth_length * 5  # The full length of the wood\n    one_third_length = full_length / 3  # One-third of the wood\n\n    return one_third_length\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    # Count the number of two-digit numbers\n    # The first digit can be 1, 2, or 3 (3 choices)\n    # The second digit can also be 1, 2, or 3 (3 choices)\n    # But we can't have the same digit twice since repetition is not allowed\n    # Thus, for each choice of the first digit, there are 2 remaining choices for the second digit\n\n    first_digit_choices = 3\n    second_digit_choices = 2  # since no repetition is allowed\n\n    count = first_digit_choices * second_digit_choices\n    return count\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    min_even_digit = min([digit for digit in digits if digit % 2 == 0])\n    digits.remove(min_even_digit)\n    smallest_number = str(min(digits))\n    digits.remove(int(smallest_number))\n    middle_digits = sorted(digits)\n    smallest_4_digit_even_number = int(smallest_number + ''.join(map(str, middle_digits)) + str(min_even_digit))\n    return smallest_4_digit_even_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for i in range(99, 9, -1):\n        if i % 7 == 5 and i % 13 == 11:\n            return i\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    number_of_rows = 3\n\n    pupils_per_row = total_pupils // number_of_rows\n\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Defining the symbols\n    a, b = symbols('a b')\n\n    # Constructing the equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2*a + b, 18)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Getting the value of b\n    return solutions[b]\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Calculate the different results from adding brackets in different ways\n    a = 285\n    b = 15\n    c = 5\n    d = 2\n\n    # Possible ways to add brackets\n    results = set()\n    \n    # Original equation without brackets\n    results.add(a + b / c - d)\n\n    # Brackets around first two terms\n    results.add((a + b) / c - d)\n\n    # Brackets around last two terms\n    results.add(a + (b / (c - d)))\n\n    # Brackets around the division and subtraction\n    results.add(a + (b / c) - d)\n\n    # Brackets around the addition and division\n    results.add((a + b / c) - d)\n\n    # Double brackets variant 1\n    results.add((a + (b / c)) - d)\n\n    # Double brackets variant 2\n    results.add(a + ((b / c) - d))\n\n    # Since all other combinations of brackets don't affect the order of operations\n    # in this particular expression, these are all the unique expressions.\n    \n    return len(results)\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # John's equation: 6 * (10x + y) + 25 = 200 + 10x + y \n    # Simplifying John's equation\n    LHS = 6 * (10 * x + y) + 25\n    RHS = 200 + 10 * x + y\n    # The simplified equation becomes 60x + 6y + 25 = 200 + 10x + y\n    # Move all terms involving x and y to one side and constants to the other side\n    equation = LHS - RHS\n    # Simplifying the equation gives us 50x + 5y = 175\n    # Divide throughout by 5\n    equation //= 5  # Now, we have 10x + y = 35 which is incorrect\n\n    # Since John's conclusion is incorrect, we need to solve the problem ourselves:\n    # Let A = 10x + y\n    # Let B = 20x + 2y\n    # Given: B = 6A + 25\n    # 20x + 2y = 6(10x + y) + 25\n    # 20x + 2y = 60x + 6y + 25\n    # Bring variables to one side and constants to the other side:\n    # 20x - 60x + 2y - 6y = 25\n    # Simplify:\n    # -40x - 4y = 25\n\n    # Now we need to solve for integers x and y, where x has to be a one-digit number and y has to be a one-digit number (because A is a two-digit number formed by xy).\n    for x in range(1, 10):  # x can't be 0 as it'll lead to a one-digit A\n        for y in range(10):\n            if -40 * x - 4 * y == 25:\n                A = 10 * x + y\n                return A\n    return None  # Just in case there is no solution.\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # Nicolas's speed compared to Yiding's speed is 4:3.\n    # If Nicolas reaches level 16, then Yiding's level can be calculated by proportion.\n    nicolas_level = 16\n    nicolas_start_level = 4\n    yiding_start_level = 3\n\n    yiding_level = (yiding_start_level / nicolas_start_level) * nicolas_level\n    return int(yiding_level)\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    count_unlocked = 0\n    for locker_number in range(1, 101):\n        div_by_3 = locker_number % 3 == 0\n        div_by_5 = locker_number % 5 == 0\n\n        # If locker number is divisible by both 3 and 5 (i.e., 15), the actions cancel each other out,\n        # so the locker stays unlocked. If it's divisible only by 3, it gets locked.\n        # If it's divisible only by 5, the locker's state is toggled from the initial state (unlocked).\n        # Therefore, it will stay unlocked only if it is not divisible by 3 but divisible by 5, or not divisible by any.\n        if not div_by_3 or div_by_5:\n            count_unlocked += 1\n\n    return count_unlocked\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    total_count = 0\n    for perm in permutations('ABCDEFG'):\n        if perm.index('A') in [perm.index('B') + 1, perm.index('B') - 1] and \\\n           perm.index('A') in [perm.index('C') + 1, perm.index('C') - 1] and \\\n           abs(perm.index('D') - perm.index('E')) != 1 and \\\n           (perm.index('F') == perm.index('G') + 1 or perm.index('F') == perm.index('G') - 1):\n            total_count += 1\n    return total_count\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50  # Total mass of boys\n    total_mass_girls = 6 * 40  # Total mass of girls\n    total_mass_children = total_mass_boys + total_mass_girls  # Total mass of children\n    average_mass_children = total_mass_children / 10  # Average mass of children\n\n    return average_mass_children\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1/(2-3)) - (4/(5-6)) - (7/(8-9))\n    return ans\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_per_cake, borrowed_10, borrowed_13 = symbols('cost_per_cake borrowed_10 borrowed_13')\n    equation1 = Eq(10 * cost_per_cake - borrowed_10, borrowed_10 - 11)\n    equation2 = Eq(13 * cost_per_cake - borrowed_13, borrowed_13 - 26)\n\n    solutions = solve((equation1, equation2), (cost_per_cake, borrowed_10, borrowed_13))\n\n    return solutions[cost_per_cake]\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    first_number = 4.6\n    second_number = 13.8\n    midpoint = (first_number + second_number) / 2\n    return midpoint\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    ans = 4336 // 8\n    return ans\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"CHEESE\")\n    letter_counts = {\"C\": 1, \"H\": 1, \"E\": 3, \"S\": 1}\n    \n    total_ways = factorial(total_letters)\n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n    \n    return total_ways\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    # mean score is 40\n    mean_score = 40\n    # total matches is 5\n    total_matches = 5\n    # scores in other matches\n    scores = [37, 53, 29, 41]\n\n    # total score required for mean of 40 over 5 matches\n    total_required_score = mean_score * total_matches\n    # sum of known scores\n    sum_of_known_scores = sum(scores)\n    # calculate x as the remaining score for the mean of 40\n    x = total_required_score - sum_of_known_scores\n\n    return x\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_count = 0\n    at_least_two_sevens_count = 0\n\n    # Counting the numbers with exactly two sevens.\n    for i in range(100, 1000):\n        digits = [int(digit) for digit in str(i)]\n        if digits.count(7) == 2:\n            at_least_two_sevens_count += 1\n\n    # Adding the numbers with three sevens\n    at_least_two_sevens_count += 1\n\n    # Total count of three-digit numbers containing at least two sevens\n    total_count = at_least_two_sevens_count\n\n    return total_count\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    remaining_work = 360\n    completed_percentage = 60\n    total_work = remaining_work / (1 - (completed_percentage / 100))\n    return int(total_work)\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, jonathan = symbols('abigail jonathan')\n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n    \n    solutions = solve((equation1, equation2), (abigail, jonathan))\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial total number of animals in the farm\n    # Hence, 0.65x is the initial number of cows, and 0.35x is the initial number of goats.\n    x = symbols('x')\n    \n    # When 240 more animals (cows and goats) were added,\n    # the amount of cows becomes 0.65x + (0.2 * (x + 240)), because cows' percentage increased by 20%\n    # and the number of goats becomes 2 * 0.35x, because goats were doubled.\n    equation = Eq(0.65*x + (0.2 * (x + 240)), x + 240 - 2 * 0.35 * x)\n\n    # Solve the equation for x, which is the initial total number of animals\n    initial_total_animals = solve(equation, x)\n\n    # The number of goats at first is 35% of the initial total number of animals\n    initial_goats = 0.35 * initial_total_animals[0]\n\n    return int(initial_goats)\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n\n    ans = new_operation(4, 3) - new_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A != 0 and C != 0 and (100*A + 10*B + A) + (100*C + 10*D + C) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Individual work rates for Alice and Bob\n    alice_rate = 1 / 40\n    bob_rate = 1 / 60\n\n    # Total work rate when Alice and Bob are working together\n    total_rate = alice_rate + bob_rate\n\n    # Assume Alice takes x days off\n    # For the days Alice works, both are working together\n    # For the days Alice takes off, only Bob is working\n    # Total work done should be 1 (the whole job)\n\n    # Equation representing total work done:\n    # (days Alice and Bob work together)*(total_rate) + (days Alice is off)*(bob_rate) = 1\n    # Let x be the days Alice takes off, then (27 - x) is the days Alice and Bob work together\n    \n    # We need to find the value of x that satisfies the equation:\n    # (27 - x) * total_rate + x * bob_rate = 1\n    \n    # Simplifying the equation: \n    # 27*total_rate - x*total_rate + x*bob_rate = 1\n    # 27*total_rate - x*(total_rate - bob_rate) = 1\n    # x = (27*total_rate - 1) / (total_rate - bob_rate)\n    \n    x = (27 * total_rate - 1) / (total_rate - bob_rate)\n    \n    return int(x)\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return product\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = '2020020202202002'  # One full cycle in the sequence\n    cycle_length = len(sequence)\n    count_2s_in_cycle = sequence.count('2')\n    total_cycles = 535 // cycle_length  # Number of full cycles\n    remaining_digits = 535 % cycle_length  # Number of digits in the partial cycle\n\n    # Counting 2s in the full cycles\n    count_2s = total_cycles * count_2s_in_cycle\n\n    # Counting 2s in the remaining part of the sequence\n    count_2s += sequence[:remaining_digits].count('2')\n\n    return count_2s\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    cookies_baked_morning = 85\n    cookies_baked_afternoon = 135\n    cookies_given_away = 55\n\n    cookies_left = (cookies_baked_morning + cookies_baked_afternoon) - cookies_given_away\n    return cookies_left\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # From the given examples, we need to determine the pattern for `Δ`.\n    # We will use sympy to find a relationship between the operands and the result.\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the components of the operation.\n    a, b, c = symbols('a b c')\n    \n    # The equations derived from the examples are:\n    # 4a + b = 17\n    # 5a + 4b = 29\n    # 8a + 16b = 80\n    equation1 = Eq(4 * a + b, 17)\n    equation2 = Eq(5 * a + 4 * b, 29)\n    equation3 = Eq(8 * a + 16 * b, 80)\n    \n    # Solving the equations to find the values of a and b.\n    solutions = solve((equation1, equation2, equation3), (a, b))\n    \n    # Extracting the values of 'a' and 'b' after the pattern is found.\n    a_val = solutions[a]\n    b_val = solutions[b]\n    \n    # Calculation for 10 Δ 9 = 10a + 9b\n    result = 10 * a_val + 9 * b_val\n    \n    return result\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    dress_cost = solutions[dress]\n    shirt_cost = solutions[shirt]\n\n    difference = dress_cost - shirt_cost\n\n    return abs(difference)\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    adults, children = symbols('adults children')\n    \n    # Equation 1: price per adult ticket ($5) times number of adult tickets + price per child ticket ($3) times number of child tickets equals total amount ($75).\n    equation1 = Eq(5 * adults + 3 * children, 75)\n    \n    # Equation 2: the total number of tickets sold is 19.\n    equation2 = Eq(adults + children, 19)\n    \n    solutions = solve((equation1, equation2), (adults, children))\n    \n    return solutions[adults]\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # Let's denote the initial number of fifty-cent coins as f and one-dollar coins as d.\n    # According to the problem, (2/7) of all coins are fifty-cent coins, and the remaining (5/7) are one-dollar coins.\n    # After receiving the additional coins, he ended up with twice as many one-dollar coins as fifty-cent coins.\n    # The total value of fifty-cent coins given by the mother is 5 dollars, which is equal to 10 fifty-cent coins.\n    # Let's set up the system of equations and solve it.\n\n    from sympy import symbols, Eq, solve\n    \n    f, d = symbols('f d', integer=True)\n    # The initial state of the coins before his mother gave him more\n    initial_fifty_cent = Eq(f, (2/7) * (f + d))\n    initial_one_dollar = Eq(d, (5/7) * (f + d))\n    \n    # After his mother gave him the additional coins\n    final_fifty_cent = Eq(f + 10, (1/3) * (2 * (f + 10)))\n    final_one_dollar = Eq(d + 10, 2 * (f + 10))\n\n    # Solve the system of equations\n    solutions = solve((initial_fifty_cent, initial_one_dollar, final_fifty_cent, final_one_dollar), (f, d))\n\n    # The solution is the number of original fifty-cent coins plus one-dollar coins\n    return solutions[f] + solutions[d]\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_savings_per_day = 7\n    brenda_savings_per_day = 6\n    andy_total_savings = 378\n    brenda_total_savings = (andy_total_savings / andy_savings_per_day) * brenda_savings_per_day\n    return brenda_total_savings\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(anna + betsy + charlene, 168)\n    equation2 = Eq(anna - 8, 2 * (betsy + 8 - 15))\n    equation3 = Eq(betsy + 8 - 15, 5 * (charlene - 15))\n    equation4 = Eq(charlene - 15, 7 * (anna - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (anna, betsy, charlene))\n\n    # Get the number of marbles Betsy had at first\n    betsy_initial = solutions[betsy] + 15 - 8\n\n    return betsy_initial\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    # Let correct_answers be the number of questions Eddie answered correctly\n    # Each correct answer gives 6 points, so correct_answers would contribute 6 * correct_answers points\n    # The incorrect answers would then be (10 - correct_answers) questions, \n    # and each would deduct 2 points: -2 * (10 - correct_answers)\n    # The total points would be the sum of points from correct and incorrect answers:\n    # Total points: 6 * correct_answers - 2 * (10 - correct_answers) = 44.\n\n    total_questions = 10\n    total_points = 44\n    points_correct = 6\n    points_incorrect = -2  # Points lost for incorrect answer\n\n    # We solve for correct_answers using algebra.\n    for correct_answers in range(total_questions + 1):\n        if points_correct * correct_answers + points_incorrect * (total_questions - correct_answers) == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original length, breadth, height of the cuboid is 100%\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n\n    # New dimensions after changes\n    new_length = original_length * 1.10  # Increase by 10%\n    new_breadth = original_breadth * (4/5)  # Reduce to 4/5 of the original\n    new_height = original_height * (11/10)  # Height ratio of 11:10\n\n    # Original volume\n    original_volume = original_length * original_breadth * original_height\n    \n    # New volume\n    new_volume = new_length * new_breadth * new_height\n\n    # Express the new volume as a percentage of its original volume\n    volume_percentage = (new_volume / original_volume) * 100\n\n    return volume_percentage\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    num_contestants = 8\n\n    # Calculate the number of ways to award the prizes\n    # This is a permutation since the order matters (gold, silver, bronze)\n    ans = factorial(num_contestants) // factorial(num_contestants - 3)\n    \n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_triangle_vertices = 3\n\n    num_triangles = comb(num_points, num_triangle_vertices)\n\n    return num_triangles\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    sequence = '20200202202002'  # The repeating sequence pattern\n    sequence_length = len(sequence)\n    digit_count = 535\n\n    # Number of full repeats of the sequence\n    full_repeats = digit_count // sequence_length\n\n    # Number of remaining digits after the full repeats\n    remaining_digits_count = digit_count % sequence_length\n\n    # Count of '2's in a single full repeat\n    count_2_in_sequence = sequence.count('2')\n\n    # Total count of '2's after full repeats\n    total_count_2 = full_repeats * count_2_in_sequence\n\n    # Count of '2's in the remaining part of the sequence\n    remaining_sequence = sequence[:remaining_digits_count]\n    count_2_in_remaining = remaining_sequence.count('2')\n\n    # Total count of '2's\n    total_count_2 += count_2_in_remaining\n\n    return total_count_2\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    # List the numbers in the sequence\n    numbers = [30, 40, 50, 30, 40, 50, 30, 40, 50]\n    # Calculate the sum of the numbers in the list\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_masks = 360\n    completed_percentage = 0.60\n    total_masks = remaining_masks / (1 - completed_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    max_noa = (40 - 10) // 2  # Subtract minimum possible numbers for the other students (1+2+3+4) then divide by 2\n    return max_noa\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    total_mushrooms = 40\n    more_mushrooms_first_hour = 26\n    \n    # If he gathered 26 more mushrooms in the first hour, it would be equal to the number he gathered in the second hour\n    # Let the number of mushrooms gathered in the first hour be x\n    # Then the number of mushrooms gathered in the second hour would be x + 26\n    # x + (x + 26) = total_mushrooms\n    # 2x + 26 = 40\n    # 2x = 40 - 26\n    # 2x = 14\n    # x = 14 / 2\n    # x = 7 (mushrooms gathered in the first hour)\n    # Thus, in the second hour, he gathered x + 26 mushrooms\n    \n    first_hour_mushrooms = (total_mushrooms - more_mushrooms_first_hour) / 2\n    second_hour_mushrooms = first_hour_mushrooms + more_mushrooms_first_hour\n\n    return second_hour_mushrooms\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging (from 6:30 to 7:30) is 1 hour\n    jogging_time = 1\n    jogging_speed = 6.5  # miles per hour\n    # Distance covered while jogging\n    jogging_distance = jogging_time * jogging_speed\n\n    # Time spent walking (from 7:30 to 9:30) is 2 hours\n    walking_time = 2\n    walking_speed = 4.5  # miles per hour\n    # Distance covered while walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded = round(number / 1000) * 1000\n    return rounded\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    return 9 * 100\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of foldable and non-foldable bicycles\n    foldable, non_foldable = symbols('foldable non_foldable')\n\n    # Create an equation for the total number of bicycles\n    total_bikes = Eq(foldable + non_foldable, 476)\n\n    # Create an equation for the remaining bicycles after sales\n    bikes_sold = Eq((5/9) * non_foldable + (4/7) * foldable, 476 - 208)\n\n    # Solve the system of equations\n    solutions = solve((total_bikes, bikes_sold), (foldable, non_foldable))\n\n    # Calculate the number of foldable bicycles sold\n    foldable_sold = solutions[foldable] - (4/7) * solutions[foldable]\n\n    return int(foldable_sold)\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    total_climbed = 0\n    day = 0\n    slide = 0\n\n    while total_climbed < height:\n        day += 1\n        total_climbed += 10  # climb during the day\n        if total_climbed >= height:\n            break\n\n        slide += 1\n        total_climbed -= slide  # slide during the night\n\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies / 2\n    guppies = goldfish / 2\n    more_mollies_than_guppies = mollies - guppies\n\n    return more_mollies_than_guppies\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # If each of the 20 students gets at most 2 pieces of candy,\n    # then the maximum number of candies distributed without anyone getting 3 is:\n    max_with_at_most_2 = 20 * 2\n    \n    # To guarantee that at least one student gets at least 3 pieces of candy,\n    # Valeria needs to prepare one more than this number:\n    return max_with_at_most_2 + 1\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    num = 20\n    factors = set()\n    \n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tuna_price, curry_price = symbols('tuna_price curry_price')\n    \n    equation1 = Eq(curry_price, tuna_price - 0.20)\n    equation2 = Eq(12 * tuna_price + 19 * curry_price, 39.60)\n    \n    solutions = solve((equation1, equation2), (tuna_price, curry_price))\n    \n    return solutions[tuna_price]\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    marks_for_correct = 8\n    marks_deducted_for_wrong = 4\n    total_score = 100\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * marks_for_correct - wrong * marks_deducted_for_wrong\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_fraction = 1 - 5/8\n    remaining_grams = 6000\n\n    original_grams = remaining_grams / remaining_fraction\n\n    return original_grams\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    percentage = 60\n    total_amount = 765\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n    number_of_gaps = total_flowers // flowers_between_lamps\n    \n    road_length = 50\n    distance_between_lamps = road_length / (number_of_gaps + 1)\n    \n    return distance_between_lamps\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    total = sum(range(1, 20, 2))\n    return total\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the mushrooms gathered in the first and second hours\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Equation1: First hour + second hour = 40 mushrooms\n    equation1 = Eq(first_hour + second_hour, 40)\n    # Equation2: First hour + 26 = second hour\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    # Return the number of mushrooms gathered in the second hour\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    # The number of books to the left of the favorite book\n    left_books = 6\n    # Counting from the right, the favorite book is the 14th book\n    right_position = 14\n\n    # Total number of books is the number of books on the left\n    # plus the number of books on the right (including the favorite book)\n    total_books = left_books + right_position\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    temperature_difference = 17\n    initial_temperature = 8\n\n    final_temperature = initial_temperature - temperature_difference\n\n    return final_temperature\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    num_trees = (road_length // distance_between_trees) + 1\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    number_in_box = 48 * (5 / 4)\n    return number_in_box\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1 / 4\n    nth_term = first_number * (ratio ** (5 - 1))\n    return nth_term\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return result\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_given_away = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_given_away // number_of_friends\n    \n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # As there are 5 children and each must get at least 1 apple,\n    # we will start by giving each child 1 apple\n    remaining_apples = 19 - 5\n\n    # If we give 4 of the children 1 more apple each, that leaves us\n    # with a remaining number of apples we can give to the 5th child\n    remaining_apples_after_four_kids = remaining_apples - 4\n\n    # Assign the remaining apples to the 5th child\n    max_apples_to_child = 1 + remaining_apples_after_four_kids\n    return max_apples_to_child\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12\n    distance_from_edge = 1.5\n    distance_between_bushes = 3\n\n    # Calculate the length of the space where bushes can be planted\n    plantable_length = side_length - 2 * distance_from_edge\n\n    # Calculate how many bushes can be planted along one side\n    bushes_per_side = plantable_length // distance_between_bushes\n\n    # Total bushes is bushes per side times 4 as there are 4 sides\n    total_bushes = bushes_per_side * 4\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # P's work rate per hour\n    p_rate = 1 / (12 * 8)\n    # Q's work rate per hour\n    q_rate = 1 / (8 * 10)\n    # Combined work rates of P and Q per hour\n    combined_rate = p_rate + q_rate\n    # Total hours required to complete the job when P and Q work together 8 hours a day\n    total_hours = 1 / combined_rate\n    # Total days required when working 8 hours a day\n    days_needed = total_hours / 8\n    return days_needed\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van1 = 132\n    speed_van2 = 78\n    time = 8\n\n    distance_apart = (speed_van1 + speed_van2) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_masks = 360\n    percentage_completed = 60 / 100\n\n    total_masks = remaining_masks / (1 - percentage_completed)\n\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    result = (2 - 1.8) / (1 / 2) * (5 / 2)\n    return result\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    score_solution = solve(equation, original_score)\n\n    return score_solution[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    n = 78\n    count = 0\n    for i in range(2, n+1, 2):\n        if n % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given that 9 rabbits can be exchanged for 3 goats\n    # This means 1 goat is equivalent to 3 rabbits\n    goats_to_rabbits = 3\n    \n    # Given that 2 goats can be exchanged for 4 cows\n    # This means 1 cow is equivalent to 0.5 goats\n    cows_to_goats = 0.5\n    \n    # To find out how many rabbits 2 cows can be exchanged for\n    # First find out how many goats 2 cows can be exchanged for\n    goats_for_two_cows = 2 * cows_to_goats\n    \n    # Now exchange the goats for rabbits\n    rabbits_for_two_cows = goats_for_two_cows * goats_to_rabbits\n    \n    return rabbits_for_two_cows\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    return 765 * 0.6\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    total = sum(range(1, 20, 2))\n    return total\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - 5 * a + 8\n    \n    ans = custom_op(10, 9)\n    ans = custom_op(ans, 8)\n    ans = custom_op(ans, 7)\n    ans = custom_op(ans, 6)\n    ans = custom_op(ans, 5)\n    ans = custom_op(ans, 4)\n\n    return ans\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    # x is the number of correct answers, y is the number of incorrect answers\n    # We know that x + y = total_questions - number of unattempted questions\n    # And that 4*x - y = total_score\n    # We can solve these equations for x and y\n\n    total_score = 168\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n\n    # If all attempted questions were correct, the score would be 4 * attempted\n    # Each incorrect question decreases the score by 5 (4 for the loss of a correct score, 1 for the penalty)\n    # score = 4 * correct - incorrect = 4 * (correct + incorrect) - 5 * incorrect = 4 * attempted - 5 * incorrect\n\n    incorrect = (4 * attempted - total_score) // 5\n    correct = attempted - incorrect\n\n    return correct\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    initial_temp = 8\n    temp_difference = 17\n\n    final_temp = initial_temp - temp_difference\n\n    return final_temp\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    difference = 4\n    number_of_terms = 10\n\n    # Formula for the sum of an arithmetic progression: S_n = n/2 * (2a + (n - 1)d)\n    total_seats = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * difference)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls_percent = 1 - 0.40\n    total_children = 72 / girls_percent\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    total_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return total_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    start_page = 14\n    end_page = 35\n    # Since the page numbers are consecutive and each sheet has two pages (front and back),\n    # the missing sheets equal half the difference in page numbers, plus 1 if the start page is on the right (odd number)\n    missing_pages = end_page - start_page - 1\n    missing_sheets = missing_pages // 2\n\n    # If the start page is an odd number, add 1 to the count of missing sheets\n    if start_page % 2 == 1:\n        missing_sheets += 1\n\n    return missing_sheets\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of a tuna puff and a curry puff\n    tuna_puff, curry_puff = symbols('tuna_puff curry_puff')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(12 * tuna_puff + 19 * curry_puff, 39.60)\n    equation2 = Eq(curry_puff, tuna_puff - 0.20)\n\n    # Solve the system of equations for the cost of a tuna puff\n    solution = solve((equation1, equation2), (tuna_puff, curry_puff))\n\n    return solution[tuna_puff]\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    for i in digits:\n        for j in digits:\n            if i == j or i == 0:  # The two digits must be different and the first digit cannot be 0\n                continue\n            number = i * 10 + j\n            if number % 2 != 0:  # The number must be odd\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    # Start with the first possible number that leaves remainder 1 when divided by 5\n    number = 1\n    \n    # Continue until we find a number meeting all the conditions or exceed 500\n    while number < 500:\n        # Check the remainder conditions for 8 and 9\n        if number % 8 == 4 and number % 9 == 5:\n            # If we find a number that satisfies the conditions, that's our answer\n            return number\n        # Increase the number by 5 as we know the number leaves remainder 1 when divided by 5\n        number += 5\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    ans = end - start + 1\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    # Assume all children are boys initially and they get 2 balloons each\n    total_boys_balloons = total_children * 2\n    balloons_to_add_for_girls = total_balloons - total_boys_balloons\n    \n    # Boys get 2 balloons, girls get 4, so for each girl we need to add 2 more\n    # balloons to the initial count\n    number_of_girls = balloons_to_add_for_girls // 2\n    \n    # Subtract the number of girls from total children to get the number of boys\n    number_of_boys = total_children - number_of_girls\n    return number_of_boys\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "from fractions import Fraction\n\ndef solution():\n    result = 1\n    for i in range(3, 21, 2):\n        result *= Fraction(1 + (2 / i))\n\n    return float(result)\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_needed_cm = 400 * 85  # Total string needed in centimeters\n    roll_length_cm = 20 * 100    # One roll length in centimeters\n    rolls_needed = string_needed_cm / roll_length_cm  # Number of rolls needed\n    return int(rolls_needed) if rolls_needed.is_integer() else int(rolls_needed) + 1\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, goats, total = symbols('cows goats total')\n\n    # Initial conditions\n    equation1 = Eq(cows, 0.65 * total)\n    equation2 = Eq(goats, total - cows)\n\n    # After 240 more cows and goats were added\n    equation3 = Eq(cows + 240, 0.65 * total + 0.20 * (0.65 * total))\n    equation4 = Eq(goats * 2, total - (0.65 * total) + 240 - (240 * 0.20))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (cows, goats, total))\n\n    # Get the number of goats at first\n    return solutions[goats]\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Emma and John's ages now\n    emma, john = symbols('emma john')\n\n    # From the problem, we have two equations:\n    # 1) In 3 years, the sum of their ages will be 27, so (emma+3) + (john+3) = 27\n    # 2) John is 7 years older than Emma, so john = emma + 7\n    equation1 = Eq((emma + 3) + (john + 3), 27)\n    equation2 = Eq(john, emma + 7)\n\n    # Solve the system of equations for Emma and John's ages now\n    solutions = solve((equation1, equation2), (emma, john))\n\n    # We want to find Emma's age, so we return that part of the solution\n    return solutions[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    # We are looking for a number that, when divided by 6, leaves a remainder of 5,\n    # and when one more box (5 cookies) is needed to be filled completely, it is 3 short.\n    # Hence, when divided by 5, it should leave a remainder of 2 (as 5 - 3 is 2).\n    \n    for num_cookies in range(1, 40):\n        if num_cookies % 6 == 5 and num_cookies % 5 == 2:\n            return num_cookies\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    nth_term_7 = 57  # 7th term value\n    nth_term_15 = 89  # 15th term value\n\n    n_difference = 15 - 7  # The difference in the term numbers\n\n    # Calculate the common difference\n    common_difference = (nth_term_15 - nth_term_7) / n_difference\n\n    return common_difference\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 's' be his total salary\n    s = symbols('s')\n    \n    # Amount donated to charity\n    charity = s / 4\n    \n    # Amount spent on food\n    food = (5 / 6) * (s - charity)\n    \n    # Amount saved (not really needed, but for a complete understanding)\n    saved = s - charity - food\n    \n    # The equation according to the problem statement\n    equation = Eq(food, charity + 78)\n    \n    # Solve the equation for 's' (salary)\n    salary = solve(equation, s)\n    \n    return salary[0]\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans = solve_congruence(*congruences)\n    while ans[0] < 400:\n        return ans[0]\n        ans = (ans[0] + ans[1], ans[1])  # Get the next solution that satisfies all the congruences\n        \nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let x be the number of minutes he walks at the increased speed\n    x = symbols('x')\n    \n    # Distance covered in the first 10 minutes\n    distance_first = 150 * 10\n    \n    # Distance covered at the increased speed\n    distance_increased = (150 + 50) * x\n    \n    # Total distance\n    equation = Eq(distance_first + distance_increased, 3700)\n    \n    # Solve for x\n    time_at_increased_speed = solve(equation, x)[0]\n    \n    # Total time spent walking\n    total_time = 10 + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if len({4, 7, A, 1, B, 9, C}) == 7:  # all digits are different\n                    number = 4700000 + A*10000 + 1000 + B*10 + 9*100 + C\n                    if number % 9 == 0:\n                        return A + B + C, number\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    sweets_per_week = 45 - 60  # sweets bought - sweets eaten\n    desired_sweets = 150\n\n    weeks = (desired_sweets - initial_sweets) / sweets_per_week\n\n    return abs(int(weeks))\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    carrie_cost = solutions[apple] + solutions[orange]\n\n    return carrie_cost\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # There are 3 choices for each digit place (three-digit number)\n    choices_per_digit = 3\n    # Calculate total different numbers by multiplying the choices for each of the three digits\n    total_numbers = choices_per_digit ** 3\n    return total_numbers\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        # Check if sweets - 2 is a common multiple of 3, 4, 5, and 6.\n        if all((sweets % i == 2) for i in [3, 4, 5, 6]):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    # Applying the Inclusion-Exclusion Principle for Two Sets\n    both_classes = sport_class_students + reading_class_students - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Drawing all purple balls first, then all white balls.\n    # After that, the next ball drawn must be red, thus ensuring 3 different colours.\n    minimum_balls = 4 + 4 + 1\n    \n    return minimum_balls\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    total_money = 140\n    racket_price = 49\n    ball_price = 1.5\n\n    money_spent_on_rackets = 2 * racket_price\n    remaining_money = total_money - money_spent_on_rackets\n\n    num_balls = remaining_money // ball_price\n\n    return int(num_balls)\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes with 6 donuts each\n    donuts_eaten = 3\n    donuts_left = total_donuts - donuts_eaten\n    return donuts_left\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    jed_chocolates = 137\n    heinz_rate = 4\n    jed_rate = -6\n\n    weeks = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_rate\n        jed_chocolates += jed_rate\n        weeks += 1\n\n    return weeks\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    height = 21\n    ratio_h = 3\n    ratio_w = 4\n\n    width = (ratio_w / ratio_h) * height\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "from math import comb\n\ndef solution():\n    # The hypotenuse of the right angled triangle on a circle(thales' circle) goes through the circle's center.\n    # Each right angled triangle has exactly one side as the diameter. We have 12 points, so 6 possible diameters.\n    # For each diameter, there are 10 remaining points to choose from for the right angled vertex.\n    # This gives us 6 * 10 possible right angled triangles.\n    num_diameters = 12 // 2\n    remaining_points = 12 - 2  # Excluding the 2 points on the diameter\n    \n    # Calculate the number of right angled triangles\n    num_right_angled_triangles = num_diameters * remaining_points\n\n    return num_right_angled_triangles\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for a box of apples (a) and a box of oranges (o)\n    a, o = symbols('a o')\n    \n    # Set up the equations based on the given information\n    equation1 = Eq(3 * a + 5 * o, 270)\n    equation2 = Eq(3 * a + 7 * o, 342)\n    \n    # Solve the equations for a box of apples and a box of oranges\n    solutions = solve((equation1, equation2), (a, o))\n    \n    # Extract the solutions for a box of apples and a box of oranges\n    box_of_apples = solutions[a]\n    box_of_oranges = solutions[o]\n    \n    return box_of_apples, box_of_oranges\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    racket, shuttlecock = symbols('racket shuttlecock')\n    \n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n    \n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n    \n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits_sum = sum(int(digit) for digit in str(i))\n        if digits_sum == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # The tiger says it's in the exact middle of the line and also the 11th.\n    # Since it's in the middle, there must be an equal number of animals before and after it.\n    # Being the 11th means there are 10 animals before it.\n    # Therefore, there must be 10 animals after it to be the middle of the line.\n\n    total_animals = 10 + 1 + 10  # 10 before, tiger itself, 10 after\n    return total_animals\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    result = 36.42 * 1000\n    return result\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.5  # cost of Haribo in dollars\n    mamee_cost = haribo_cost - 0.30  # cost of Mamee in dollars\n    big_jelly_cost = 6 * mamee_cost  # cost of big packet of jelly in dollars\n    return big_jelly_cost\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    roses_initially = 24\n    vases_initially = 3\n    vases_after = 4\n\n    # Calculate the roses per vase initially\n    roses_per_vase_initially = roses_initially / vases_initially\n\n    # Since each vase has the same amount of roses in the end, the total roses will be \n    # 'vases_after' times the amount of roses per vase initially\n    total_roses = roses_per_vase_initially * vases_after\n\n    return total_roses\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    num = 2405 + 1827\n    return num2words(num)\n\nfrom num2words import num2words\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for i in range(1, 100):\n        if i % 3 == 2 and i % 4 == 3 and i % 5 == 4:\n            return i\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_flavour = 2\n    cherry_flavour = 7\n    mint_flavour = 1\n\n    # Since Will hates to eat candy in mint flavour, we exclude it\n    max_candies_Will_can_eat = lemon_flavour + cherry_flavour\n\n    return max_candies_Will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    num1 = -18\n    num2 = -2\n    midpoint = (num1 + num2) / 2\n    return midpoint\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_price = 3\n    marble_price = strawberry_price + 2\n    cheese_price = 3 * marble_price\n    price_for_two_cheese_cakes = 2 * cheese_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    number, _ = solve_congruence(*congruences)\n    \n    while number < 80:\n        return number\n        number += 2*3*4*5  # Update the number to the next solution\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    return 10.256 + 9.2 - 7.51\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(1, 10), 4): # We don't include 0 as it cannot be in the most significant place\n        AB, BC, CD, ABC, BCD = perm[0] * 10 + perm[1], perm[1] * 10 + perm[2], perm[2] * 10 + perm[3], perm[0] * 100 + perm[1] * 10 + perm[2], perm[1] * 100 + perm[2] * 10 + perm[3]\n        if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n            return perm[0] * 1000 + perm[1] * 100 + perm[2] * 10 + perm[3]\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    # Number of teachers\n    num_teachers = 16\n\n    # Number of games required will be one less than the number of teachers\n    # because each game eliminates one teacher\n    num_games = num_teachers - 1\n\n    return num_games\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n\n    original_number = solve(equation, x)[0]\n\n    return original_number\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the ages of sons and daughters\n    son1, son2, daughter1, daughter2 = symbols('son1 son2 daughter1 daughter2', integer=True)\n\n    # Equations based on the problem\n    equation1 = Eq(son1 + son2 + daughter1 + daughter2, 55)\n    equation2 = Eq(son1 - son2, 3)  # two sons were born three years apart\n    equation3 = Eq(daughter1 - daughter2, 2)  # two daughters were born two years apart\n    equation4 = Eq(son2, 2 * daughter1)  # younger son is twice the age of the older daughter\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (son1, son2, daughter1, daughter2))\n\n    # The youngest child could be the younger son or the younger daughter\n    youngest_child_age = min(solutions[son2], solutions[daughter2])\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurrent_sequence = '428571'\n    sequence_length = len(recurrent_sequence)\n    \n    full_repeats = 58 // sequence_length\n    partial_repeat_length = 58 % sequence_length\n\n    sum_full_repeats = sum(int(digit) for digit in recurrent_sequence) * full_repeats\n    sum_partial_repeat = sum(int(recurrent_sequence[i]) for i in range(partial_repeat_length))\n    \n    ans = sum_full_repeats + sum_partial_repeat\n    return ans\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    \n    average_distance = total_distance / number_of_people\n    \n    return average_distance\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    half_sum = 35 // 2\n    largest_factor = half_sum\n    second_factor = 35 - half_sum\n    if 35 % 2 == 0:\n        return largest_factor**2\n    else:\n        return largest_factor * second_factor\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution exchanged from A to B\n    x = symbols('x')\n\n    # The concentration of sugar in A after exchange (11% of the remaining + the amount from B's 47% sugar solution)\n    concentration_a = Eq((((50 - x) * 0.11) + (x * 0.47)) / 50, (50 * 0.47 - x * 0.47 + x * 0.11) / 50)\n\n    # Solve for x\n    exchanged_solution = solve(concentration_a, x)\n\n    return exchanged_solution[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    tom_string_length = 13\n    difference_length = 25\n    nick_string_length = tom_string_length + difference_length\n\n    return nick_string_length - tom_string_length\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "def solution():\n    from math import factorial\n\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    # Biographies, science fictions, magazines, and practice books are identical\n    biographies = 3\n    science_fictions = 4\n    magazines = 2\n    practice_books = 2\n\n    # Number of ways to arrange total books\n    total_ways = factorial(total_books)\n    \n    # Divide by the permutations of the identical books to correct for overcounting\n    ans = total_ways // (factorial(biographies) * factorial(science_fictions) * factorial(magazines) * factorial(practice_books))\n\n    return ans\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert plot length from meters to centimeters\n    cauliflower_spacing_cm = 40\n    first_cauliflower_offset_cm = 20\n\n    # Calculate the available length for planting cauliflowers\n    available_length_cm = plot_length_cm - (2 * first_cauliflower_offset_cm)\n\n    # Calculate the number of cauliflowers that can be planted\n    number_of_cauliflowers = available_length_cm // cauliflower_spacing_cm + 1\n    \n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    from itertools import permutations\n\n    cards = ['1', '3', '6']\n    unique_numbers = set()\n\n    for p in permutations(cards, 3):\n        number = int(''.join(p))\n        unique_numbers.add(number)\n        \n    return len(unique_numbers)\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    candy_count = 15\n    piles_count = 4\n    ways_count = 0\n\n    for combination in combinations(range(1, candy_count), piles_count - 1):\n        if sum(combination) < candy_count:\n            ways_count += 1\n\n    return ways_count\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes = []\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and num + 6 <= 50:\n            primes.append(num)\n        elif isprime(num) and isprime(num - 6) and num - 6 >= 2:\n            primes.append(num)\n    primes = list(set(primes))  # Remove duplicates if any\n    return len(primes), primes\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    distance_1_to_4 = 9\n    number_of_gaps_1_to_4 = 4 - 1\n\n    gap_distance = distance_1_to_4 / number_of_gaps_1_to_4\n    distance_1_to_9 = gap_distance * (9 - 1)\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    base_value = 250\n    result = (percentage / 100) * base_value\n    return result\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64 / 100  # Convert cm to metres and add to 3.7 metres\n    subtract_metres = 2 + 7 / 100  # Convert cm to metres and prepare to subtract from total\n\n    ans = total_metres - subtract_metres  # Perform the subtraction\n\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation_max = Eq(banana + 2*pear, 94)  # Max's purchase\n    equation_emily = Eq(banana + pear, 62)  # Emily's purchase\n\n    solutions = solve((equation_max, equation_emily), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    seq = [1, 2, 3, 5, 8, 13, 21]\n    next_number = seq[-1] + seq[-2]\n    return next_number\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    return 19 + 23 + 19 + 22 + 20\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5/8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_numbers = 35\n    max_product = 0\n\n    for i in range(1, sum_of_numbers // 2 + 1):\n        j = sum_of_numbers - i\n        product = i * j\n        if product > max_product:\n            max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black_rabbits, white_rabbits, grey_rabbits = symbols('black_rabbits white_rabbits grey_rabbits')\n\n    equation1 = Eq(black_rabbits + white_rabbits + grey_rabbits, 59)\n    equation2 = Eq(black_rabbits + white_rabbits, grey_rabbits + 11)\n    equation3 = Eq(black_rabbits, white_rabbits - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black_rabbits, white_rabbits, grey_rabbits))\n\n    return solutions[white_rabbits]\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    daily_earnings = 70\n    num_days_worked = 6  # Monday to Saturday\n\n    total_earnings = daily_earnings * num_days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # The sequence given is a geometric sequence where each term is twice the previous term.\n\n    # Finding the 20th term\n    term_20th = 2 ** (20 - 1)  # Since the first term is 1 = 2^0, the nth term is 2^(n-1)\n\n    # Finding the 17th term\n    term_17th = 2 ** (17 - 1)  # Similarly, for the 17th term\n\n    # Dividing the 20th term by the 17th term\n    ans = term_20th / term_17th\n\n    return ans\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    seconds = minutes * seconds_per_minute\n    return seconds\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # average of books for Alice, Becky, and Crystal\n    average_ABC = 60\n    # total books for Alice, Becky, and Crystal\n    total_ABC = average_ABC * 3\n\n    # new average when counting Dennis \n    new_average_ABCD = average_ABC + 10\n    # new total for Alice, Becky, Crystal and Dennis\n    total_ABCD = new_average_ABCD * 4\n\n    # books that Dennis has\n    dennis_books = total_ABCD - total_ABC\n\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "from math import factorial\n\ndef solution():\n    # The number of ways to arrange 7 dancing performances is factorial(7).\n    dance_permutations = factorial(7)\n    \n    # Between every 2 playing a sketch, there must be at least 1 dancing performance.\n    # This creates 4 separate slots for the playing a sketch to be placed (before the 1st dance, between the 1st and 2nd dance, ..., after the last dance).\n    play_slots = 7 + 1 \n    \n    # The number of ways to arrange the playing a sketch performances in these slots follows the combinations formula.\n    # We have 4 slots and need to place 3 playing a sketch performances.\n    play_combinations = factorial(play_slots) // (factorial(3) * factorial(play_slots - 3))\n    \n    # Total number of ways to arrange the performances is the product of play_combinations and dance_permutations.\n    return dance_permutations * play_combinations\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28512 to get the prime factors and their powers\n    factors = factorint(28512)\n    \n    # To make the fraction a cube, each prime factor's power in the denominator\n    # should make the total power of that prime factor in the fraction a multiple of 3\n    h = 1\n    for prime, power in factors.items():\n        if power % 3 != 0:\n            # Add enough prime factors to make the power a multiple of 3\n            h *= prime ** (3 - power % 3)\n    \n    return h\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9  # Distance from the 1st to the 4th flag\n    num_intervals_1_to_4 = 4 - 1  # Number of intervals between the 1st and 4th flag\n    \n    # Distance between two flags is constant, so use the distance between 1st and 4th flag\n    # and divide by number of intervals to find distance between each flag.\n    distance_between_flags = distance_1_to_4 / num_intervals_1_to_4\n    \n    num_intervals_1_to_9 = 9 - 1  # Number of intervals between the 1st and 9th flag\n    # Calculate the distance from the 1st to the 9th flag by multiplying the distance between\n    # each flag by the number of intervals between 1st and 9th flag.\n    distance_1_to_9 = distance_between_flags * num_intervals_1_to_9\n    \n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n\n    return mike_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    from sympy import isprime\n\n    ans = isprime(233)\n    return ans\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    hundredths = 7\n    tenths = 6\n    ones = 4\n\n    ans = ones + tenths * 0.1 + hundredths * 0.01\n    return ans\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22\n    speed_of_current = 3\n    downstream_speed = speed_in_still_water + speed_of_current\n    distance = 200\n\n    time_taken = distance / downstream_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_points = 36\n    correct_points = 6\n    wrong_points = -2\n    total_questions = 10\n\n    for correct_count in range(total_questions + 1):\n        wrong_count = total_questions - correct_count\n        if correct_count * correct_points + wrong_count * wrong_points == total_points:\n            return correct_count\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    ways_to_travel = trains + buses + flights\n\n    return ways_to_travel\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    return (888 * 999) % 100\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange 3 sketches with spaces between them for 7 dances\n    num_sketch_slots = 4 # since there needs to be at least one dance between each sketch\n    num_dance_slots = 7 - (3 - 1) # 3 - 1 because one dance is used as a separator\n\n    # Choose slots for sketches, then arrange the dances and sketches separately\n    ways_to_choose_sketch_slots = factorial(num_sketch_slots)\n    ways_to_arrange_dances = factorial(num_dance_slots)\n    \n    ans = ways_to_choose_sketch_slots * ways_to_arrange_dances\n    return ans\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    total_sum = sum(range(1, 63))\n    sum_with_missing_page = 1939\n    missing_page = total_sum - sum_with_missing_page\n    return missing_page\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Bart can take all 3 red chips and still not have 2 different colors.\n    # If he then takes all 4 yellow chips, he will have both red and yellow.\n    # So the smallest number is 3 (red) + 4 (yellow) + 1 (to ensure a different color, either yellow or brown).\n    # The extra 1 chip will ensure that he has either a brown one or a different color if the first 4 are yellow.\n    return 3 + 4 + 1\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    # This problem is a typical example of a derangement problem\n    # also known as a !n problem (subfactorial of n).\n    # A derangement is a permutation of the elements of a set such that no element appears in its original position.\n    # Since with 7 friends, we need to calculate !7 (subfactorial of 7)\n    \n    n = 7\n    derangement = [0] * (n + 1)\n    derangement[1] = 0\n    derangement[2] = 1\n\n    for i in range(3, n + 1):\n        derangement[i] = (i - 1) * (derangement[i - 1] + derangement[i - 2])\n    \n    return derangement[n]\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    # Total number of families\n    families = 10\n\n    # Each father shakes hands with all the people from the other 9 families (3 * 9)\n    # There are 10 fathers\n    father_handshakes = 10 * (3 * (families - 1))\n\n    # Each mother shakes hands with all the fathers and children from the other 9 families\n    # and there are 10 mothers. (9 fathers + 9 children from other families)\n    mother_handshakes = 10 * (families - 1 + 3 * (families - 1))\n\n    # Each child shakes hands with all the fathers and mothers from the other families\n    # There are 10 children. (9 fathers + 9 mothers from other families)\n    child_handshakes = 10 * (3 * (families - 1))\n\n    # Total handshakes\n    total_handshakes = father_handshakes + mother_handshakes + child_handshakes\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    # Total number of children in the queue is:\n    # (Position of Mark from the front) + (Children between Mark and Helen) + \n    # (Position of Helen from the end)\n    total_children = mark_position + children_between + helen_position_from_end\n    \n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    odd_digits = 5  # There are 5 odd digits (1, 3, 5, 7, 9)\n    # Each place (hundreds, tens, ones) can be occupied by any of the odd digits\n    count = odd_digits * odd_digits * odd_digits\n    return count\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = \"85274\"\n    sequence_length = len(recurring_sequence)\n    position = (79 - 1) % sequence_length\n    ans = int(recurring_sequence[position])\n    return ans\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    divisible_by_both = 17 * 19  # LCM of 17 and 19, since 17 and 19 are prime\n    largest_three_digit_number = 999  # Start with the largest three-digit number\n    ans = None  # Define the variable 'ans' to store the answer\n\n    # Loop backwards from 999 to find the largest number which when added to 2009 is divisible by both 17 and 19\n    for number in range(largest_three_digit_number, 99, -1):\n        if (number + 2009) % divisible_by_both == 0:\n            ans = number\n            break\n\n    return ans\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_pages = 62\n    expected_sum = sum(range(1, total_pages + 1))\n    actual_sum = 1939\n    missing_page = expected_sum - actual_sum\n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(1000):\n        for j in range(i + 1, 1000):\n            if i + j == 777:\n                return j + 1\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    # Given values\n    free_hours = 40  # Free parking hours\n    first_rate = 5   # Dollars per hour up to 50 hours\n    second_rate = 8  # Dollars per hour from 50 to 60 hours\n    third_rate = 15  # Dollars per hour after 60 hours\n    bill = 82        # Total parking bill\n\n    # Calculate the extra hours parked by subtracting the first 40 free hours\n    extra_hours_first_segment = (50 - free_hours)  # Hours from 40 to 50\n    extra_hours_second_segment = 10                # Hours from 50 to 60\n    \n    # Calculate the bill for parking up to 50 hours\n    bill_first_segment = extra_hours_first_segment * first_rate\n    \n    # Calculate the bill for parking up to 60 hours\n    bill_second_segment = bill_first_segment + (extra_hours_second_segment * second_rate)\n    \n    if bill <= bill_first_segment:\n        # Calculate hours if the bill is within the first segment (40-50 hours)\n        total_hours = free_hours + (bill / first_rate)\n    elif bill <= bill_second_segment:\n        # Calculate hours if the bill is within the second segment (50-60 hours)\n        total_hours = 50 + ((bill - bill_first_segment) / second_rate)\n    else:\n        # Calculate hours if the bill is beyond the second segment (more than 60 hours)\n        total_hours = 60 + ((bill - bill_second_segment) / third_rate)\n    \n    return total_hours\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def count_ways(step):\n        if step == 4: \n            # Ways to reach step 4 is 0 since it's muddy and he should avoid it\n            return 0\n        elif step < 0: \n            # If step is negative, there is no way to get there\n            return 0\n        elif step == 0:\n            # There is 1 way to stay on the ground (not climbing any steps)\n            return 1\n        # Ways to get to current step is the sum of the ways to get to the previous three steps\n        return count_ways(step - 1) + count_ways(step - 2) + count_ways(step - 3)\n    \n    # Calculate the total ways to reach step 10\n    # Avoiding step 5 means we can either get to step 4 or 6 from step 3,\n    # then from step 4 (0 ways), or step 6 we move directly to step 7\n    total_ways = count_ways(3) * (count_ways(10 - 6) + count_ways(10 - 7))\n    \n    return total_ways\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 5\n\n    final_value = initial_value * (depreciation_rate ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Extracting the digit values from the problem definition\n    hundredths = 7\n    tenths = 6\n    ones = 4\n\n    # Construct the number with the given decimal places\n    ans = ones + tenths * 0.1 + hundredths * 0.01\n\n    return ans\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_still_water = 88\n    speed_current = 12\n    downstream_speed = speed_still_water + speed_current\n    distance = 500\n    \n    time_taken = distance / downstream_speed\n    \n    return time_taken\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    total_coins = 213\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol T as tax rate\n    T = symbols('T')\n\n    # Define equation based on the problem statement\n    equation = Eq(0.01 * T * 30000 + 0.01 * (T + 3) * (x - 30000), 0.01 * (T + 1) * x)\n\n    # Solve the equation for x (annual income)\n    annual_income_solution = solve(equation, x)\n\n    # Since the problem asks for Ryan's income, we need the positive value\n    return max(annual_income_solution)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_wrong = -2\n    total_points = 36\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * points_correct + wrong * points_wrong == total_points:\n            return correct\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    num_children = 5\n\n    remainder = total_coins % num_children\n\n    return remainder\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        number = int(\"2\" + \"5\" * i)\n        root = int(number ** 0.5)\n        if root * root == number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the distance between A and B.\n    # Let s be the speed of Alan in meters per minute.\n    x, s = symbols('x s')\n\n    # Phillip walks 15 meters more per minute than Alan does.\n    phil_speed = s + 15\n    \n    # Phillip takes 12 minutes to arrive at B.\n    # Alan arrives 3 minutes later than Phillip.\n    alan_time = 12 + 3\n    \n    # The distance is the product of speed and time.\n    equation1 = Eq(phil_speed * 12, x)\n    equation2 = Eq(s * alan_time, x)\n\n    # Solving the equations for x and s\n    solutions = solve((equation1, equation2), (x, s))\n\n    # Getting the distance x\n    distance = solutions[x]\n\n    return distance\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbols for Alice's initial amount (alice_initial) and Tom's amount (tom)\n    alice_initial, tom = symbols('alice_initial tom')\n\n    # Tom's amount is given\n    tom_amount = 68.10\n\n    # After Alice spent $36, she had $25.40 less than Tom\n    equation = Eq(alice_initial - 36, tom_amount - 25.40)\n\n    # Solve for Alice's initial amount\n    solutions = solve(equation, alice_initial)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_five_numbers = 28\n    mean_twelve_numbers = 11\n\n    total_five_numbers = mean_five_numbers * 5\n    total_twelve_numbers = mean_twelve_numbers * 12\n\n    mean_all_numbers = (total_five_numbers + total_twelve_numbers) / (5 + 12)\n\n    return mean_all_numbers\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    # Number of benches is 9 and each bench is placed 7 meters apart, from end to end.\n    # So the total distance covered by the benches excluding the length of the last bench is \n    # distance between 8 intervals of 7 meters each.\n    total_distance_between_benches = 8 * 7\n    \n    # The total length of the road is 74 meters.\n    total_length_of_road = 74\n    \n    # Subtract the total distance covered between benches from the total length of the road\n    # to find the length of the bench.\n    length_of_bench = total_length_of_road - total_distance_between_benches\n    \n    return length_of_bench\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B, then 2x is the number of students in class A\n    x = symbols('x')\n    # Total candies Miss Jenny has is represented by C\n    C = symbols('C')\n\n    # Equation 1: For class A, 4 candies per student (2x students) plus 20 more needed equals total candies\n    equation1 = Eq(4 * 2 * x + 20, C)\n    # Equation 2: For class B, 6 candies per student (x students) minus 16 left equals total candies\n    equation2 = Eq(6 * x - 16, C)\n\n    # Solve the system of equations for x and C\n    solutions = solve((equation1, equation2), (x, C))\n\n    # Return the value of C (total candies Miss Jenny has)\n    return solutions[C]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Once Peter cut off 5 arms, one new arm grew.\n    # For every 5 arms cut, the net loss of arms is 4.\n    # Therefore, we can calculate the original number of arms\n    # by finding out how many times 4 fits into the total of 21 arms cut.\n    \n    # Total arms cut\n    total_arms_cut = 21\n    # Net loss of arms after each cycle of cutting 5 and one growing back\n    net_loss_per_cycle = 4\n    # Finding the number of full cycles by dividing the total arms cut by net loss per cycle\n    full_cycles = total_arms_cut // net_loss_per_cycle\n    # The total original arms must be the full cycles times 5 (since 5 were cut in each cycle)\n    # plus the remaining number of arms (arms cut that did not complete a cycle)\n    original_arms = full_cycles * 5 + (total_arms_cut % net_loss_per_cycle)\n\n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # Since we are looking for the minimum value of the 4th greatest number, \n    # we can maximize the values of the 1st and 2nd greatest numbers.\n    # The 3rd greatest number is already given to be 246.\n    # We are left with 7 numbers that should be as small as possible.\n    # The smallest whole numbers are 1, 2, 3, 4, 5, 6, 7 (7 numbers).\n    # Let's subtract the sum of these seven smallest numbers and the 3rd greatest number from the total sum.\n    \n    sum_of_smallest_seven = sum(range(1, 8))  # Sum of numbers from 1 to 7\n    sum_without_4th_greatest = 2021 - 246 - sum_of_smallest_seven\n\n    # Since we have maximized the value of the 1st and 2nd numbers by making other numbers as small as possible,\n    # the remainder of the sum should be the minimum value of the 4th greatest number.\n    \n    min_value_4th_greatest = sum_without_4th_greatest\n\n    return min_value_4th_greatest\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # We need to consider the worst case scenario using the pigeonhole principle.\n    # If we take out all the gold coins (6) and we still don't have 2 different coloured coins,\n    # it means we need to take out one more which will definitely be silver.\n    # That makes 6 (gold) + 1 (silver) = 7 coins to ensure we have 2 different coloured coins.\n    \n    return 7\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_s = 150\n    time_min = time_s / 60  # convert seconds to minutes\n\n    distance = speed_m_per_min * time_min\n\n    return distance\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Distance between each consecutive tree is constant, so let's find that first\n    # Since the distance from the 1st to the 5th tree is 20 cm, the distance between\n    # each consecutive tree is 20 cm divided by the number of intervals between 5 trees, which is 4.\n    distance_per_interval = 20 / 4\n    \n    # Now calculate the number of intervals between the 8th and the 14th tree\n    number_of_intervals = 14 - 8\n    \n    # Multiply the distance per interval by the number of intervals to get the final answer\n    return distance_per_interval * number_of_intervals\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # Since mutually exclusive means they share no common divisors other than 1,\n    # all prime numbers can be put next to each other,\n    # as well as 1 since it only shares the divisor 1 with any other number.\n\n    from sympy import primerange\n\n    # Get all prime numbers from 1 to 24\n    primes = list(primerange(1, 25))\n\n    # Including 1 to the list as it can be placed next to any number\n    primes.append(1)\n\n    # Sort the list to arrange them in increasing order\n    primes.sort()\n\n    # The count of numbers that can be selected will be the count of primes plus 1\n    # since all primes can be placed next to each other in a circle,\n    # along with the number 1 which can be placed next to any prime.\n    count = len(primes)\n\n    return count\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    # Calculate using the law of addition and multiplication\n    ans = (38 * 32) + (37 * 33) + (36 * 34)\n    return ans\n\n# Call the function and store the answer\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip = 7\n    kevin = 3 * pip\n    qing_qing = kevin + 6\n    total_sweets = pip + kevin + qing_qing\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jerry's current age be 'jerry'\n    # Devi is 8 years older than Jerry, therefore Devi's age is 'jerry + 8'\n    jerry = symbols('jerry')\n\n    # In 4 years, Jerry's age will be 'jerry + 4', and Devi's age will be 'jerry + 8 + 4'\n    # The age ratio in 4 years is 5:7\n    equation = Eq((jerry + 4) / (jerry + 8 + 4), 5/7)\n\n    # Solve the equation\n    solution = solve(equation, jerry)\n\n    # Jerry's current age\n    return solution[0]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey, father = symbols('grey father')\n    # When Grey was born, father was 30, so Grey's age is (father - 30).\n    # Grey's father is three times Grey's age now: father = 3 * (father - 30).\n    equation = Eq(father, 3 * (father - 30))\n\n    solution = solve(equation, father)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    value = 10 * (numerator / denominator)\n    \n    return value\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    # formula to calculate number of terms in an arithmetic sequence: n = (l - a) / d + 1\n    # where l is the last term, a is the first term, and d is the difference between the terms\n    number_of_rows = int((last_term - first_term) / difference + 1)\n\n    # formula to calculate the sum of an arithmetic sequence: s = n/2 * (a + l)\n    # where n is the number of terms, a is the first term, and l is the last term\n    total_seats = number_of_rows / 2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    # Since we only need to return the answer and not actually draw a graph,\n    # we can represent the \"parts\" graph with a textual description.\n\n    # Let's assume Bud has 1 part of apples\n    bud_parts = 1\n\n    # According to the problem, Pip has 5 times as many apples as Bud\n    pip_parts = 5 * bud_parts\n\n    # The total number of parts is the sum of Bud's part and Pip's part\n    total_parts = bud_parts + pip_parts\n\n    # We don't have specific numbers, so the \"parts\" graph can be described\n    # by the ratio of parts between Bud and Pip\n    ans = f\"Bud : Pip = {bud_parts} : {pip_parts}\"\n\n    return ans\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 6, 9]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    sum_of_numbers = 0.12 + 0.345 + 0.6789\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    # There are two cases to consider\n    # Case 1: Numbers starting with 1 or 2 (2 options for the first digit)\n    # The second and third digit can be any of the remaining two numbers (2 options for the second digit, and 1 for the third)\n    case1 = 2 * 2 * 1\n\n    # Case 2: Numbers starting with 0 is not allowed for a three-digit number.\n    # So, there are no numbers in this case.\n\n    # Adding both cases to get the total number of three-digit numbers\n    total_numbers = case1  # case2 is 0, so it's omitted\n\n    return total_numbers\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans = solve_congruence(*congruences)\n\n    while ans[0] < 100 or ans[0] > 200:\n        ans = (ans[0] + ans[1], ans[1])\n\n    return ans[0]\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The minimum divisor is always 1 more than the remainder for such problems\n    divisor = remainder + 1\n    # The minimum dividend can be calculated by dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    hazel, jessica = symbols('hazel jessica')\n    y = symbols('y')  # y is the age Hazel will be in three years\n\n    # Hazel's age in three years is y, so next year, she'll be y - 2\n    hazel_next_year = y - 2\n    \n    # Jessica is 3 years younger than Hazel, so today she is y - 3 - 3\n    # Thus, next year, Jessica will be y - 3 - 2\n    jessica_next_year = y - 5\n    \n    # Their total age next year will be the sum of their ages next year\n    total_age_next_year = hazel_next_year + jessica_next_year\n\n    # Simplify the total\n    ans = total_age_next_year.expand()\n\n    return ans\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    first_section_cm = 30\n    second_section_cm = 1.5 * 100\n    third_section_cm = 150 / 10\n\n    total_width_cm = first_section_cm + second_section_cm + third_section_cm\n\n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    difference_in_age = 38 - melanie_age\n    uncle_age = melanie_age + difference_in_age\n    return uncle_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    percentage = (15 / 300) * 100\n    return percentage\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial total number of animals be x\n    # Then the initial number of cows is 0.65x and goats is 0.35x\n    total_animals = symbols('total_animals')\n\n    # After 240 more cows and goats are added, the percentage of cows is up to 85%\n    # Number of goats has doubled so it is now 0.7 * initial goats which is 0.7 * 0.35 * total animals\n    new_cows_percentage = Eq(0.85 * (total_animals + 240), 0.65 * total_animals + 240)\n    new_goats_double = Eq(0.7 * 0.35 * total_animals * 2, total_animals - 0.65 * total_animals + 240)\n\n    # Solve the system of equations\n    solutions = solve((new_cows_percentage, new_goats_double), (total_animals,))\n\n    # Since we want the initial number of goats, it's 35% of the original total number of animals\n    initial_goats = int(0.35 * solutions[total_animals])\n\n    return initial_goats\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    students = 50\n    facing_teacher = students\n\n    for student in range(1, students + 1):\n        if student % 4 == 0 or student % 6 == 0:\n            facing_teacher -= 1\n\n    return facing_teacher\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "def solution():\n    start_time_hour = 15\n    start_time_minute = 25\n    duration_minutes = 108\n\n    end_time_hour = start_time_hour + (start_time_minute + duration_minutes) // 60\n    end_time_minute = (start_time_minute + duration_minutes) % 60\n\n    return f\"{end_time_hour:02d}:{end_time_minute:02d}\"\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_3_years_later = amy_age_5_years_ago\n    sister_age_now = sister_age_3_years_later - 3\n    \n    return sister_age_now\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    mixed_fractions_sum = 2 + Fraction(3, 8) + 6 + Fraction(9, 12) + 1 + Fraction(14, 16)\n    return mixed_fractions_sum\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amy_age = 15\n    sister_age = symbols('sister_age')\n    \n    equation = Eq(amy_age - 5, sister_age + 3)\n    \n    sister_current_age = solve(equation, sister_age)[0]\n    \n    return sister_current_age\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # There are 13 different numbers/letters in each suit.\n    # We have 4 suits, so we can draw 1 card from each suit with different numbers/letters. \n    # But as soon as we draw the 14th card, it must have the same number/letter as one of the previous cards.\n    return 14\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    # Find the smallest even 3-digit number with digit sum 21\n    for num in range(100, 1000, 2): # Start from 100, end at 999, increment by 2 for even numbers\n        if sum(map(int, str(num))) == 21:\n            return num\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1 / i for i in range(2, 21))\n    for num in range(2, 20):\n        ans += num * sum(1 / i for i in range(num + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18  # This is the part of the sum that represents 3/5\n    whole_amount = (part * 5) / 3  # Calculate the whole amount by inverting the fraction\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    ans = 423 * 72\n    return ans\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    # Maximum number of coins of the same colour that can be taken out is 6\n    # To ensure we have 2 different coloured coins, we need to take out one more coin\n    ans = 6 + 1\n    return ans\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, solve, Eq\n    \n    # Define the symbols for the number of cacti and sunflowers\n    cacti, sunflowers = symbols('cacti sunflowers')\n    \n    # Equation 1: The cost of cacti and sunflowers Lavi spent\n    eq1 = Eq(2 * cacti + 7 * sunflowers, 156)\n    # Equation 2: Lavi bought 6 more cacti than sunflowers\n    eq2 = Eq(cacti, sunflowers + 6)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (cacti, sunflowers))\n    \n    # Return the number of cacti\n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of a book and a pencil\n    book = symbols('book')\n    \n    # Create the equation: 8 * book + 3 * 0.40 = 3 * book + 8 * 0.40 + 1\n    equation = Eq(8 * book + 3 * 0.40, 3 * book + 8 * 0.40 + 1)\n\n    # Solve the equation\n    solution = solve(equation, book)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares_sum = sum([i**2 for i in range(2, 21, 2)])\n    odd_squares_sum = sum([i**2 for i in range(1, 20, 2)])\n    ans = even_squares_sum - odd_squares_sum\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    jug_capacity = 2\n    num_jugs = 6\n\n    water_poured = jug_capacity * num_jugs\n    remaining_water = total_water - water_poured\n\n    return remaining_water\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of Liverpool fans be 'liverpool_fans'\n    # and the initial number of Manchester United fans be 'man_united_fans'\n    liverpool_fans, man_united_fans = symbols('liverpool_fans man_united_fans')\n\n    # Initial difference in fans\n    equation1 = Eq(liverpool_fans - man_united_fans, 1000)\n\n    # After 30 minutes, more fans enter the stadium\n    equation2 = Eq(3 * (liverpool_fans + 472), (man_united_fans + 4836))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (liverpool_fans, man_united_fans))\n\n    return solutions[liverpool_fans]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    result = 12.5 * 32\n    return result\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    pencil_price = 40 / 100  # convert pence to pounds\n\n    # Create an equation based on the given word problem\n    sarah_spends = 8 * book_price + 3 * pencil_price\n    rebecca_spends = 3 * book_price + 8 * pencil_price\n    equation = Eq(sarah_spends, rebecca_spends + 1)\n\n    # Solve the equation for the price of a book\n    book_price = solve(equation, book_price)[0]\n\n    return book_price\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n    jack_points = andrew_points + jack_more_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    return ways_to_choose\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2\n    before_nini = remaining_after_mike * 2\n    before_bob = before_nini * 2\n    original_amount = before_bob * 2\n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey, father = symbols('grey father')\n\n    equation1 = Eq(father, 30 + grey)\n    equation2 = Eq(father, 3 * grey)\n\n    solutions = solve((equation1, equation2), (grey, father))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    # Since we are unable to draw an actual graph in a Python function, we can represent the \"parts\" graph using text.\n\n    # Let Bud's parts be represented by 'B' and Pip's parts be represented by 'P'.\n\n    # According to the problem, Pip has 5 times as many apples as Bud.\n    # So we represent Bud's part as B and Pip's part as 5P.\n\n    # We represent the parts graph in a string.\n    parts_graph = \"Bud: B\\nPip: PPPPP\\n\"\n\n    # The 'ans' variable should return the \"parts\" graph representation.\n    ans = parts_graph\n    return ans\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    third_number = 450 - first_number - second_number\n    \n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    t, c = symbols('t c')  # t for number of T-shirts, c for number of caps\n\n    # t to c ratio\n    ratio_eq = Eq(t / c, 8 / 5)\n\n    # Equation representing the amount of money received from selling T-shirts and caps\n    money_eq = Eq((1/4) * t * 3 + (1/5) * c * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, money_eq), (t, c))\n\n    # Extract the number of T-shirts\n    t_shirts = solutions[t]\n\n    return t_shirts\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 99 - 11  # Calculate the birth year\n    age_on_310101 = 1 - birth_year  # Calculate the age on 31/12/01\n    \n    return age_on_310101\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "def solution():\n    count = 0\n    # First digit cannot be 0\n    for first in range(1, 3):\n        # Second digit can be 0, 1, or 2\n        for second in range(3):\n            # Third digit can be 0, 1, or 2 and different from the second digit\n            for third in range(3):\n                if first != second and second != third and first != third:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    max_students_per_boat = 6\n    \n    full_trips = total_students // max_students_per_boat\n    remaining_students = total_students % max_students_per_boat\n    \n    if remaining_students > 0:\n        full_trips += 1\n    \n    return full_trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    specific_term = 36\n\n    ordinal_number = (specific_term - first_term) // difference + 1\n\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let the number of game cards that Joe has be 7x\n    # Let the number of game cards that Eric has be x\n    # After giving y number of game cards Joe will have 7x - y \n    # After receiving y game cards, Eric will have x + y\n    # Joe and Eric will both have 168 game cards after the exchange\n    # So we need to solve the system of equations:\n    # 7x - y = 168\n    # x + y = 168\n\n    # We can solve for x using the second equation: x = 168 - y\n    # Now we can substitute x in the first equation:\n    # 7(168 - y) - y = 168\n    # Simplifying the equation: 1176 - 7y - y = 168\n    # 1176 - 8y = 168\n    # 8y = 1176 - 168\n    # y = (1176 - 168) / 8\n    y = (1176 - 168) / 8\n\n    return int(y)\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    # Tens digit and ones digit possibilities (prime numbers up to 9)\n    primes = [2, 3, 5, 7]\n    for tens in primes:\n        for ones in primes:\n            N = tens * 10 + ones\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catches = 8\n    run_away = 5\n    library_catches = 9\n\n    total_catches = initial_catches - run_away + library_catches\n\n    return total_catches\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 80  # 1 hour and 20 minutes is 80 minutes\n    number_of_pictures = total_minutes / minutes_per_picture\n    return number_of_pictures\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for total_people in range(1, 50):  # Upper limit based on reasonable estimate\n        if (19 - 6) % total_people == total_people // 2:\n            return total_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    ans = result.numerator // result.denominator + Fraction(result.numerator % result.denominator, result.denominator)\n    return ans\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    return factorial(5)\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    for anne_pears in range(total_pears):\n        charlie_pears = total_pears - anne_pears\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    \n    ans = amy_swims - joanne_swims\n    \n    return ans\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n\n    # Original amounts\n    equation1 = Eq(isaac, 5 * joseph)\n\n    # After Joseph received stamps\n    equation2 = Eq(joseph + 154, (9 / 10) * isaac)\n\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    # Initialize the counter for students still facing the teacher\n    count = 0\n    \n    # Iterate over each student number from 1 to 50\n    for i in range(1, 51):\n        # Check if the student is facing the teacher\n        # The student will face the teacher if the number is not a multiple of 4 or 6\n        if i % 4 != 0 and i % 6 != 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    # Define the symbols\n    from sympy import symbols, Eq, solve\n    a, b, c, d = symbols('a b c d')\n\n    # Define the equation based on the given problem\n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n\n    # Solve the equation for a, b, c, d\n    solutions = solve(equation, (a, b, c, d))\n\n    # Calculate the value of abcd\n    abcd = solutions[a]*1000 + solutions[b]*100 + solutions[c]*10 + solutions[d]\n\n    return abcd\n\n# Get the answer\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert the base 8 number to base 10\n    N = int(\"12345654321\", 8)\n    \n    # Calculate remainders\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    # Sum the remainders\n    ans = remainder_7 + remainder_9\n    \n    return ans\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # The distance Linda jogged when she met Ted is 1200m\n    linda_jogged = 1200\n\n    # The speed ratio of Linda to Ted is 3:4\n    # Since they meet at the same time, their distances covered are in the same ratio as their speeds\n    # Hence the distance Ted jogged when he met Linda is:\n    ted_jogged = (4/3) * linda_jogged\n\n    # The length of the path is the sum of the distances both jogged when they met\n    path_length = linda_jogged + ted_jogged\n\n    return path_length\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # A 5-digit number is divisible by 9 if the sum of its digits is divisible by 9\n    # For the number 2018A to be divisible by 9, find A such that 2 + 0 + 1 + 8 + A is divisible by 9\n    # This sum must be 9 or a multiple of 9. Here we compute A as the smallest positive digit so that the property holds\n    A = (9 - (2 + 0 + 1 + 8) % 9) % 9  # Ensure A is the smallest digit that makes 2018A divisible by 9\n\n    # Now, we need to find the remainder when 2018A is divided by 8\n    # We only need to care about the last 3 digits of the number for divisibility by 8\n    # because the divisibility by 8 depends on the number formed by the last three digits\n    last_three_digits = int(f'18{A}')\n    remainder = last_three_digits % 8\n\n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    return 5 + 1 + 1 + 7\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # This is a problem of counting Derangements, also known as subfactorial or !n\n    # A derangement is a permutation where no element appears in its original position.\n    # For n = 6, we can solve using the formula !n = (n-1) * (!(n-1) + !(n-2))\n    \n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n    \n    return subfactorial(6)\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    one_worker_days = workers * days\n    return one_worker_days\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25 / 100\n    total_weight = 64\n    ans = percentage * total_weight\n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the original number of pupils in School P, y be the original number of pupils in School Q\n    x, y = symbols('x y')\n\n    # Given ratio of the pupils in School P and the pupils in School Q is 2:3\n    equation1 = Eq(x / y, 2 / 3)\n\n    # 240 Primary one pupils were admitted to both schools\n    # The ratio became 3:4 in the end\n    equation2 = Eq((x + 240) / (y + 240), 3 / 4)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30\n    total_amount = 45\n\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    sum_odd_numbers = sum(range(1, 20, 2))\n    return sum_odd_numbers\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_current = symbols('jack_current')\n    equation = Eq(jack_current - 5, (jack_current + 8) / 2)\n    solutions = solve(equation, jack_current)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    bag_percentage = 70\n    purse_fraction = 3 / 8\n\n    purse_percentage = (100 - bag_percentage) * purse_fraction\n\n    return purse_percentage\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    word = 'EDUCATION'\n    vowels = 'AEIOU'\n    consonants = ''.join(set(word) - set(vowels))\n    \n    total_permutations = factorial(len(word))\n    vowel_permutations = factorial(len(vowels))\n    consonant_permutations = factorial(len(consonants))\n    \n    # Subtracting permutations where vowels are together\n    vowels_together = vowel_permutations * factorial(len(consonants) + 1)\n    ans = total_permutations - vowels_together\n    \n    return ans\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12\n    total_students = 5 + 1\n    candies_per_student = total_candies // total_students\n    return candies_per_student\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    angle_A = 50\n    angle_BPC = 180 - angle_A\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    # Initial number of sweets is the number she can buy.\n    sweets = 11\n    \n    # Keep trading wrappers for sweets until there are less than 3 wrappers left.\n    wrappers = 11\n    while wrappers >= 3:\n        # Exchange wrappers for new sweets.\n        new_sweets = wrappers // 3\n        sweets += new_sweets\n        \n        # Calculate the remaining wrappers: those left after exchange and new wrappers from new sweets.\n        wrappers = wrappers % 3 + new_sweets\n        \n    return sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of eight-tailed birds, y be the number of six-tailed birds,\n    # z be the number of three-tailed birds, and w be the number of two-tailed birds.\n    x, y, z, w = symbols('x y z w')\n    \n    # The number of two-tailed birds is 5 more than twice as many as the number of eight-tailed birds.\n    equation1 = Eq(w, 2 * x + 5)\n    \n    # The number of three-tailed birds is 2 more than half the number of six-tailed birds.\n    equation2 = Eq(z, y / 2 + 2)\n    \n    # The total number of their tails is 2 less than four times as many as the total number of their heads.\n    equation3 = Eq(2 * w + 3 * z + 6 * y + 8 * x, 4 * (w + z + y + x + x) - 2)\n    \n    # The difference between the total number of their heads and their tails is 241.\n    equation4 = Eq(w + z + y + x + x - (2 * w + 3 * z + 6 * y + 8 * x), 241)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3, equation4), (w, z, y, x))\n    \n    return solutions[z]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n\n    interest = principal * rate\n    return interest\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):  # two-digit numbers range from 10 to 99\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    cost_price = 10\n    selling_price_per_bag = 0.65\n    weight_per_bag = 0.25 # in kg\n    total_weight = 5 # in kg\n\n    number_of_bags = total_weight / weight_per_bag\n    total_selling_price = number_of_bags * selling_price_per_bag\n    profit = total_selling_price - cost_price\n    profit_percentage = (profit / cost_price) * 100\n\n    return profit_percentage\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of ways to travel between towns\n    ayton_beeton = 4\n    beeton_ceeton = 5\n    ceeton_deeton = 6\n    ayton_deeton_direct = 3\n\n    # Applying the multiplication rule for independent events (paths between two towns)\n    ayton_ceeton = ayton_beeton * beeton_ceeton\n    ayton_deeton_indirect = ayton_ceeton * ceeton_deeton\n\n    # Applying the addition rule for distinct events (direct path and indirect path)\n    total_ways = ayton_deeton_direct + ayton_deeton_indirect\n\n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    # Reduce the fraction on the left side\n    numerator = 15\n    denominator = 20\n    reduced_denominator = denominator / (numerator / 3)\n    \n    # The □ is the right side denominator in the reduced fraction form\n    return reduced_denominator\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    # Given data\n    tenth_term = 23\n    fifteenth_term = 38\n    \n    # Calculate the common difference of the arithmetic sequence\n    difference = (fifteenth_term - tenth_term) / (15 - 10)\n    \n    # Calculate the 12th term using the difference and the 10th term as reference\n    twelfth_term = tenth_term + (12 - 10) * difference\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    # The function will perform the addition and subtraction of the given decimals\n    ans = 1003.67 + 108.98 + 9.08 + 102.33 + 32.02 - 3.08\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    # Multiples of 2\n    multiples_of_2 = set(range(2, 2017, 2))\n    # Multiples of 3\n    multiples_of_3 = set(range(3, 2017, 3))\n    # Multiples of 4\n    multiples_of_4 = set(range(4, 2017, 4))\n\n    # Numbers underlined twice\n    # Multiple of 2 and multiple of 3 but not multiple of 4\n    # Since every multiple of 4 is also a multiple of 2, we don't need to consider them\n    twice_underlined = (multiples_of_2 & multiples_of_3) - multiples_of_4\n\n    return len(twice_underlined)\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sally = 3.75\n    joe = symbols('joe')\n    \n    # Both spent $2.50 on an ice-cream cone\n    sally_after = sally - 2.50\n    joe_after = joe - 2.50\n    \n    # Together, they have $5 left after buying the ice-cream\n    equation = Eq(sally_after + joe_after, 5)\n    \n    # Solve the equation to find out how much Joe had at first\n    joe_initial = solve(equation, joe)\n    \n    return joe_initial[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_period = 3\n    second_period = 5\n    first_average = 135\n    second_average = 151\n\n    total_trees = (first_average * first_period) + (second_average * second_period)\n    total_days = first_period + second_period\n    average_trees = total_trees / total_days\n    \n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    ans = 876 * 3\n    return ans\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "It appears you might be referring to a file with the name GPT4_EN_PAL_3_00.json. Unfortunately, without any context, I can't provide specific information about this file.\nGenerally speaking, a JSON (JavaScript Object Notation) file is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate. It may contain data structured in a way that a specific application or service can understand, such as configurations, parameters, datasets, or serialized objects.\nThe part \"GPT4\" in the filename could imply that the file is related to an AI model, possibly a fourth-generation model from the Generative Pre-trained Transformer (GPT) series developed by OpenAI. However, I have no data beyond my last update, which does not include information about a GPT-4 model.\nThe rest of the file name could be indicative of its content or purpose, e.g., _EN_ may indicate that the contents are in English, and _PAL_3_00 could be a version or module identifier, but this is speculative without more context.\nIf you have the file and need to understand its contents, you would typically use a JSON viewer or parse the JSON using a programming language that can handle JSON, such as Python, JavaScript, etc. If you intend to get information about hypothetical or conceptual data related to AI advancements such as a GPT-4, that's beyond the scope of my current training data. If you need help with JSON or have more specific questions, please provide additional details."
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    total_salads = 15\n    total_soups = 20\n    total_vegetables = 12\n    total_sandwiches = 6\n\n    # Calculate the different choices for each pair of options\n    salad_soup_choices = comb(total_salads, 1) * comb(total_soups, 1)\n    salad_vegetable_choices = comb(total_salads, 1) * comb(total_vegetables, 1)\n    salad_sandwich_choices = comb(total_salads, 1) * comb(total_sandwiches, 1)\n    soup_vegetable_choices = comb(total_soups, 1) * comb(total_vegetables, 1)\n    soup_sandwich_choices = comb(total_soups, 1) * comb(total_sandwiches, 1)\n    vegetable_sandwich_choices = comb(total_vegetables, 1) * comb(total_sandwiches, 1)\n\n    # Add up all the choices\n    ans = (salad_soup_choices + salad_vegetable_choices + salad_sandwich_choices +\n           soup_vegetable_choices + soup_sandwich_choices + vegetable_sandwich_choices)\n\n    return ans\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if (hundreds + tens + ones == 7) and (ones % 2 == 0):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    # Boys and girls are arranged in square layers. \n    # Let's denote the side of the nth square layer by n, where n is odd for boys and even for girls.\n    # Boys are at layers 1, 3, 5, ... and girls at 2, 4, 6, ...\n    # The total number of boys B = 1^2 + 3^2 + ... + n^2 (where n is odd)\n    # The total number of girls G = 2^2 + 4^2 + ... + (n-1)^2 (where n is even)\n    # We are given B = G + 32.\n    # We search for such n that B - G = 32.\n\n    # Initialize variables to count number of boys and girls.\n    boys = 0\n    girls = 0\n    layer = 1\n\n    # Iterate while the difference between boys and girls is not 32\n    while True:\n        if layer % 2 == 1: # Odd layer, add to boys\n            boys += layer * layer\n        else: # Even layer, add to girls\n            girls += layer * layer\n        \n        # Check if the difference between boys and girls is 32\n        if boys - girls == 32:\n            break\n        layer += 1\n\n    # Now, let's calculate the total number of students.\n    # The last layer 'layer' is the side length of the square with the boys being the outermost layer.\n    total_students = boys + girls\n\n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime\n\ndef solution():\n    n = 0\n    found = False\n    \n    while not found:\n        n += 1\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and \n            isprime(n + 106) and isprime(n + 308)):\n            found = True\n            \n    return n\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters / 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the mass of mangoes, s be the mass of strawberries.\n    m, s = symbols('m s')\n\n    # Equation for the initial condition (mangoes were 448g more than strawberries)\n    equation1 = Eq(m, s + 448)\n\n    # Equation for the condition after 900g of mangoes were given away (strawberries is twice the mass of mangoes)\n    equation2 = Eq(s, 2 * (m - 900))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, s))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_items = symbols('total_items')\n    \n    # Define the fractions for each type of item\n    apples_fraction = 2/3\n    bananas_fraction = 1/9\n    lemons_fraction = 1 - apples_fraction - bananas_fraction\n    \n    # Expression for the number of apples & lemons\n    apples = apples_fraction * total_items\n    lemons = lemons_fraction * total_items\n    \n    # Equation for the number of apples being 12 more than lemons\n    equation = Eq(apples, lemons + 12)\n    \n    # Solve for the total number of items\n    total_items_solution = solve(equation, total_items)\n    \n    # Calculate the number of lemons bought\n    lemons_bought = lemons_fraction * total_items_solution[0]\n    \n    return int(lemons_bought)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for Max's and Anthony's initial amounts\n    max_money, anthony_money = symbols('max_money anthony_money')\n    \n    # Equations for the ratios after purchasing the chocolates\n    eq1 = Eq(max_money - 12, 2*(anthony_money / 5))\n    eq2 = Eq(max_money, 8*(anthony_money - 12) / 13)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (max_money, anthony_money))\n    \n    # Return Max's original amount of money\n    return solutions[max_money]\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote each bird type with a symbol\n    two_tailed = symbols('two_tailed')\n    three_tailed = symbols('three_tailed')\n    six_tailed = symbols('six_tailed')\n    eight_tailed = symbols('eight_tailed')\n\n    # Now, we write the equations based on the problem statement\n    # The number of two-tailed birds is 5 more than twice as many as the number of eight-tailed birds\n    eq1 = Eq(two_tailed, 2 * eight_tailed + 5)\n    # The number of three-tailed birds is 2 more than half the number of six-tailed bird\n    eq2 = Eq(three_tailed, six_tailed / 2 + 2)\n    # The total number of their tails is 2 less than four times as many as the total number of their heads\n    eq3 = Eq(2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed,\n             4 * (two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - 2)\n    # The difference between the total number of their heads and their tails is 241\n    eq4 = Eq(two_tailed + three_tailed + six_tailed + 2 * eight_tailed - \n             (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed), 241)\n\n    # Now, solving the equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import comb\n\ndef solution():\n    # There are 20 pens to be divided among 6 kids, with each getting at least one pen.\n    # This problem is equivalent to putting 20 indistinguishable items (pens) into 6 distinguishable boxes (kids)\n    # with no box being empty. This can be solved using the stars and bars method.\n\n    # Since each child must get at least one pen, we give one pen to each child first.\n    # This leaves us with 20 - 6 = 14 pens to distribute.\n    remaining_pens = 20 - 6\n\n    # Now we have to partition these 14 pens into 6 parts, which is equivalent to partitioning into 5 dividers.\n    # This is a combination problem C(n+k-1, k-1) where n is the remaining items and k is the number of partitions.\n    num_ways = comb(remaining_pens + 6 - 1, 6 - 1)\n\n    return num_ways\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # Unit digit pattern for powers of 4: 4, 6, 4, 6, ...\n    # The pattern repeats every 2 powers\n    # Therefore, the unit digit for 444^2022 will be the same as 4^(2022 mod 2)\n    \n    power_mod = 2022 % 2  # Calculate 2022 modulo 2 to find the position in the unit digit pattern\n    unit_digit_pattern = [4, 6]\n    \n    # Get the unit digit from the pattern\n    unit_digit = unit_digit_pattern[power_mod]\n    \n    return unit_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Assume that marbles are sorted in increasing order such that a <= b <= c <= d\n    # where a, b, c, d represent the four piles.\n    # Since we want the smallest largest pile (d), and all values must be distinct,\n    # we start with the smallest possible values for a, b, and c: 1, 2, and 3.\n    # The rest of the marbles go into the pile d.\n    \n    total_marbles = 16\n    # Start with the smallest values for the first three piles\n    a, b, c = 1, 2, 3\n    # The rest go into the fourth pile (d)\n    d = total_marbles - (a + b + c)\n\n    return d\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    lengths_in_metres = {\n        '10 millimetres': 10 / 1000,\n        '100 centimetres': 100 / 100,\n        '10 metres': 10,\n        '2 kilometres': 2 * 1000,\n        '2800 centimetres': 2800 / 100,\n        '2500 metres': 2500,\n        '100 millimetres': 100 / 1000,\n        '100 metres': 100\n    }\n    \n    smallest_length = min(lengths_in_metres, key=lengths_in_metres.get)\n    \n    return smallest_length\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    daily_increase = 4\n\n    number_of_days = (last_day_pages - first_day_pages) // daily_increase + 1\n    total_pages = (first_day_pages + last_day_pages) * number_of_days // 2\n\n    return total_pages\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    difference = smallest_6_digit_number - largest_5_digit_number\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # For a three-digit odd number, the last digit has to be an odd number.\n    # We have three odd numbers to choose from: 1, 3, 5\n    odd_places = 3\n    \n    # For the first digit, we cannot have 0 and it cannot be the same as the last digit.\n    # So we have (6 - 1) choices after choosing the last digit.\n    first_digit_places = 5\n    \n    # For the middle digit, we cannot use the same digit as the first or the last,\n    # so we have (6 - 2) choices after choosing the first and last digits.\n    middle_digit_places = 4\n    \n    # The total number of ways is the product of the choices for each place\n    total_ways = odd_places * first_digit_places * middle_digit_places\n    \n    return total_ways\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from fractions import Fraction\n\n    # initial assumption: Let the total number of stickers be 1 (100%)\n    # then red stickers = 1/2 and blue stickers = 1/2 initially\n    # after giving away 2/3 of red stickers, red stickers left = 1/2 - (2/3)*(1/2) = 1/6\n    # stickers left = 1/4 (given)\n    # So, blue stickers left = 1/4 (total left) - 1/6 (red left) = 1/12\n    # initial blue stickers = 1/2, blue stickers left = 1/12\n    # fraction of blue stickers given away = (1/2 - 1/12) / (1/2) = (6/12 - 1/12) / (1/2) = 5/12 / 1/2 = 5/12 * 2/1 = 5/6\n\n    blue_given_away_fraction = (Fraction(1, 2) - Fraction(1, 12)) / Fraction(1, 2)\n\n    return blue_given_away_fraction\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim = 20\n    basketball = 25\n    both = 10\n    neither = 9\n\n    total_students = (swim + basketball - both) + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    # It's a sequence with a common difference of 4\n    numbers = [3, 7, 11, 15, 19]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    # Given relationships\n    # A = 2/3 * B\n    # B = 4/5 * C\n    # A = C - 21\n\n    # Express A and B in terms of C\n    B = 4/5 * C\n    A = 2/3 * B\n\n    # Now, A = C - 21 => 2/3 * (4/5 * C) = C - 21\n    # Solve for C\n    C = 21 / (1 - (2/3 * 4/5))\n\n    # Now calculate A based on the value of C\n    A = 2/3 * (4/5 * C)\n\n    return int(A)\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    # If Mr Wong gives 4 bookmarks to each pupil, he will have 8 bookmarks left.\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    \n    # If he gives 6 bookmarks to each pupil instead, he will be short of 10 bookmarks.\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    for cows in range(total_animals + 1):\n        ducks = total_animals - cows\n        if 4 * cows + 2 * ducks == total_legs:\n            return ducks\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the average height of the boys\n    x = symbols('x')\n\n    # The number of girls and boys\n    num_girls = 11\n    num_boys = 5\n\n    # Average height of the group\n    avg_group_height = 122.5\n\n    # The average height of the girls is 3.2 cm more than the average of the boys\n    avg_girls_height = x + 3.2\n\n    # Equation based on the total height of girls and boys\n    equation = Eq((num_girls * avg_girls_height) + (num_boys * x), (num_girls + num_boys) * avg_group_height)\n\n    # Solving the equation for x gives the average height of the boys\n    boys_avg_height = solve(equation, x)[0]\n\n    # The average height of the girls\n    girls_avg_height = boys_avg_height + 3.2\n\n    return girls_avg_height\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7, 602 % 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n\n    # Total number of students\n    total_students = 70\n\n    # Overall average score\n    total_average = 66\n\n    # Number of boys\n    boys = total_students - girls\n\n    # Average score for girls\n    girls_average = 70\n\n    # Average score for boys\n    boys_average = 63\n\n    # Equation representing the total score\n    equation = Eq(girls * girls_average + boys * boys_average, total_students * total_average)\n\n    # Solving the equation\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # total sum of the 9 consecutive odd numbers\n    total_sum = 1503\n    # Since the numbers are consecutive and odd, the middle number (the fifth number) is the mean.\n    middle_number = total_sum // 9\n    # The smallest number is 4 numbers before the middle number, with a difference of 2 (since they are odd)\n    smallest_number = middle_number - (4 * 2)\n    return smallest_number\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    # Given terms of the arithmetic sequence\n    nth_term_32 = 157\n    nth_term_108 = 537\n\n    # Calculate the common difference of the sequence\n    n_diff = 108 - 32\n    term_diff = nth_term_108 - nth_term_32\n    common_difference = term_diff / n_diff\n\n    # Find the first term of the sequence\n    first_term = nth_term_32 - common_difference * (32 - 1)\n\n    return first_term\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # A cannot get the ball in the 2nd pass, only B, C, or D can get it, which is 3 options\n    # A can only get the ball back in the 3rd pass from the person who got it in the 2nd pass\n    # So the person who gets it in the 2nd pass has 2 options to pass it to (excluding A and themselves)\n    # Total number of different methods is 3 (for 2nd pass) * 2 (for 3rd pass)\n    \n    return 3 * 2\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Using inductive reasoning, the maximum number of regions created by n lines is n(n+1)/2 + 1.\n    # Each triangle has three lines, but we do not count overlapping lines twice, just once.\n    # Hence, we should calculate it as if they were non-overlapping lines:\n    # Let's suppose each triangle adds 3 new lines, but as we go on, the following triangles could share lines with the previous ones.\n    # Triangle 1: 3 lines, 0 overlap (3 new lines)\n    # Triangle 2: 3 lines, can share at most 1 line (2 new lines)\n    # Triangle 3: 3 lines, can share at most 2 lines (1 new lines)\n    # Triangle 4 and Triangle 5 cannot contribute more new lines as all their lines could overlap with previous lines.\n    # Total new lines = 3 + 2 + 1 = 6\n    # Now, we use the formula of new regions created by non-overlapping lines:\n    n = 6\n    max_parts = n*(n+1)//2 + 1\n    return max_parts\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let Jason has J books and Anthea has A books at first\n    J = 30\n    # After giving away 4 books, both will have same number so:\n    # J - 4 = A + 4\n    # But we know that J = 30, so we can substitute that in:\n    # 30 - 4 = A + 4\n    A = (J - 4) - 4\n    # The difference in the number of books they originally had is:\n    difference = J - A\n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    kate_candies = symbols('kate_candies')\n    \n    # After Kate ate 1/4 of the candies, she had 42 left, which means those 42 are the remaining 3/4\n    equation = Eq(4/3 * 42, kate_candies)\n    \n    # Solve for candies before Kate ate\n    kate_candies_before = solve(equation, kate_candies)[0]\n    \n    # Jane had 1/3 of the candies plus 4 candies before giving the rest to Kate\n    jane_candies_before = kate_candies_before + 1/3 * kate_candies_before + 4\n    \n    # Donna had half of the number of candies plus 3 candies before giving the rest to Jane\n    donna_candies_initial = 2 * (jane_candies_before - (1/3 * jane_candies_before + 4)) + 3\n\n    return donna_candies_initial\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p, q in permutations(range(10), 2):\n        if (q - p) == ((10 * q + p) - (10 * p + q)):\n            return 10 * q + p\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    lcm = 1\n    for i in range(2, min(4, 10) + 1):\n        if 4 % i == 0 and 10 % i == 0:\n            lcm = i\n\n    lcm = (4 // lcm) * (10 // lcm) * lcm\n\n    return lcm\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2  # William's speed in metres per second\n    time_s = 12 * 60  # 12 minutes converted to seconds\n\n    distance_jogged = speed_m_per_s * time_s  # Distance = Speed * Time\n\n    return distance_jogged\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_1 = 4\n    common_factor_2 = 101\n    \n    term1 = common_factor_1 * common_factor_2 * 17\n    term2 = common_factor_1 * common_factor_2 * 32\n    \n    ans = term1 + term2\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    # Xavier's sugar amount\n    xavier_sugar = 100 * 0.25\n    # Yelena's sugar amount\n    yelena_sugar = 500 * 0.55\n    # Carol's sugar amount\n    carol_sugar = 400 * 0.35\n    \n    # Total sugar amount\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    # Total solution weight\n    total_solution = 100 + 500 + 400\n    \n    # Calculate concentration of the resulting solution\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    b_days = symbols('b_days')\n\n    # A's efficiency is twice B's; A finishes in 12 days less than B\n    # Let B take b_days to finish, A will take b_days/2\n    # A's efficiency is 1/(b_days/2), B's efficiency is 1/b_days\n\n    equation = Eq(1/(b_days/2) + 1/b_days, 1/(b_days - 12))\n\n    # Solve the equation to find the number of days B would take\n    b_days_solution = solve(equation, b_days)\n\n    # Choose the positive solution for number of days as time cannot be negative\n    b_days_value = [sol.evalf() for sol in b_days_solution if sol.is_real and sol > 0][0]\n\n    # Number of days to complete the job together\n    days_together = 1 / (1/(b_days_value/2) + 1/b_days_value)\n\n    return days_together\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    change_received = 4.83\n    cost_newspaper = 2.20\n\n    cost_tissues = total_paid - change_received - cost_newspaper\n\n    return cost_tissues\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    # Let the total number of boys and girls be 2x at the beginning, so there are x boys and x girls.\n    # After 3/5 of the boys left, there are 2/5 of the x boys remaining.\n    # After 42 girls left, there are x - 42 girls remaining.\n    # We are given that there are 12 more boys than girls left at the exhibition:\n    # (2/5)x - (x - 42) = 12\n    # Solve the equation to find the value of x.\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/5)*x - (x - 42), 12)\n    total_students = solve(equation, x)[0] * 2 # times 2 because x represents only half of the students\n    \n    return total_students\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Let the required distance be x km\n    \n    # Time taken when travelling at 3 km/h\n    time_at_3kmph = x / 3\n    \n    # Time taken when travelling at 5 km/h\n    time_at_5kmph = x / 5\n    \n    # Difference in time is 12 min late - 4 min early = 16 min = 16/60 hours\n    time_difference = 16 / 60\n    \n    # From the proportion between speed and time: time_at_3kmph - time_at_5kmph = time_difference\n    # x/3 - x/5 = 16/60\n    # Solve for x\n    \n    # Multiply both sides by 15 to clear the denominators\n    x = (time_difference * 3 * 5) / (3 - 5)\n    \n    return x\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n\n    digits = '123'\n    perm = permutations(digits)\n\n    ans = len(list(perm))\n    return ans\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 + 3 * tomatoes\n    return cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    rachel_candy = solutions[rachel]\n    alice_candy = solutions[alice]\n\n    total_candy = rachel_candy + alice_candy\n\n    return total_candy\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost = cost_per_case * 12\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temp = -8\n    today_temp = 13\n    difference = today_temp - last_night_temp\n    return difference\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks in a row\n    ways_different_socks = factorial(4) # Because there are 4! ways to arrange 4 distinct items\n\n    # For two different colored pairs of socks in a row (2 pairs, each color appears twice)\n    ways_same_socks = factorial(4) // (factorial(2) * factorial(2)) # Because there are 4! ways to arrange 4 items but we divide by 2! for each pair to account for repetition\n\n    return ways_different_socks, ways_same_socks\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "import math\n\ndef solution():\n    g_earth = 9.81  # Acceleration due to gravity on Earth in m/s^2\n    g_moon = g_earth / 6  # Acceleration due to gravity on the Moon in m/s^2\n    T_earth = 1  # Period on Earth in seconds\n\n    # Formula: T = 2 * pi * sqrt(l/g)\n    # We can say that T_earth = 2 * pi * sqrt(l_earth/g_earth)\n    # And T_moon = 2 * pi * sqrt(l_moon/g_moon)\n    # For the same pendulum length, l_earth = l_moon, so we can write:\n    # T_moon = T_earth * sqrt(g_earth/g_moon)\n    # Cancel out the lengths and solve for the period on the moon:\n    T_moon = T_earth * math.sqrt(g_earth / g_moon)\n    \n    return T_moon\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles**0.5)\n    red_tiles = 0\n    green_tiles = 0\n\n    for i in range(0, side_length // 2):\n        layer_tiles = (side_length - 2 * i) ** 2 - (side_length - 2 * i - 2) ** 2\n        if i % 2 == 0:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n\n    if side_length % 2 != 0:\n        red_tiles += 1\n\n    if red_tiles > green_tiles:\n        dominant_color = \"Red\"\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = \"Green\"\n        more_tiles = green_tiles - red_tiles\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    # initially, let the number of boys be 3x and the number of girls be 2x\n    # after 12 boys and 12 girls joined, the number became (3x + 12) boys and (2x + 12) girls\n    # the new ratio is (3x + 12):(2x + 12) = 19:14\n    # therefore, we can set up the equation 14 * (3x + 12) = 19 * (2x + 12)\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(14 * (3 * x + 12), 19 * (2 * x + 12))\n    x_value = solve(equation, x)[0]\n    \n    # the total number of boys and girls initially is 5x\n    initial_children = 5 * x_value\n    # include the children joined in the afternoon\n    total_children = initial_children + 12 + 12\n\n    return total_children\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_first_bar = 23\n    length_second_bar = 37\n    length_welded_part = 3\n    \n    full_length = length_first_bar + length_second_bar - length_welded_part\n    \n    return full_length\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1/3/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"15/4/2023\", \"%d/%m/%Y\")\n    difference = end_date - start_date\n\n    return difference.days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    for A in range(10):\n        if 2 * A == int(str(A) + str(A)):\n            return A\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    A_rate = 1 / 15\n    B_rate = 1 / 10\n\n    work_done_in_3_days = 3 * (A_rate + B_rate)\n    remaining_work = 1 - work_done_in_3_days\n\n    days_for_B_to_finish = remaining_work / B_rate\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    people_sqrt = 100 ** 0.5\n    if people_sqrt.is_integer():\n        outermost_people = 4 * (people_sqrt - 1)\n    else:\n        outermost_people = 0  # Not a perfect square, no single outer layer\n    return int(outermost_people)\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = -4  # since each term decreases by 4\n\n    # Since we need to find out how many terms before the first negative,\n    # we set up the last term to be just under zero.\n    num_terms = 0\n    term = first_term\n    while term > 0:\n        term += difference\n        num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    justin_points = 24\n    total_points = 96\n    correct_points = 6\n    incorrect_points = -2\n\n    # Assume William answers all questions incorrectly, which is the minimum score he can achieve\n    min_william_points = 10 * incorrect_points\n    # Justin's points is William's points plus 24\n    min_justin_points = min_william_points + justin_points\n    \n    # Calculate the difference in points to reach the total of 96\n    # Due to every correct answer, the score increases by 8 (6 for correct - (-2) for incorrect)\n    points_difference_needed = total_points - (min_justin_points + min_william_points)\n    correct_answer_point_difference = correct_points - incorrect_points\n\n    # Calculate how many correct answers are needed to get the remaining points\n    total_correct_answers_needed = points_difference_needed // correct_answer_point_difference\n\n    # Since they get 96 points together with Justin receiving 24 more than William,\n    # we divide the number of correct answers by 2 to get the correct answers for William\n    william_correct_answers = total_correct_answers_needed // 2\n\n    return william_correct_answers\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Difference between the two piles\n    difference = 88 - 52\n\n    # The winning strategy for Tom is to take the difference of the two piles\n    # in cards from the larger pile, which will then make both piles equal.\n    # Making both piles equal puts Tom in a winning position because then,\n    # no matter how many cards Jane takes from either pile, Tom can take the same\n    # number from the other pile, leaving one left for him to win on his next turn.\n\n    # Tom should take this number of cards from Pile A to execute this strategy.\n    cards_to_take = difference\n\n    return cards_to_take\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 280 / (1 - 1/8)\n    initial_cash = remaining_after_sister / (1 - 3/7)\n    return initial_cash\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # The pigeohole principle dictates that if 80 apples are to be divided \n    # in such a way that at least one student gets at least 3 apples,\n    # then at least 3 apples must be given away before every student has 1 apple.\n    \n    # If we give 3 apples to one student, we have 80 - 3 = 77 apples left to distribute.\n    # The remaining 77 apples can be given to 77 students (each receiving 1 apple).\n    # Including the first student who received 3 apples, this means we have 77 + 1 = 78 students.\n    \n    # The minimum class size has to be 78, because with 77 students,\n    # it would not be guaranteed that at least one student would receive 3 apples.\n    return 78\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    max_temp = max(temperatures)\n    min_temp = min(temperatures)\n    return max_temp - min_temp\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    # let the number of red, white, and black balls be r, w, and b respectively \n    # According to the question, r : w = 1 : 2 and w : b = 3 : 4\n    # r/w = 1/2 and w/b = 3/4\n    # Thus, r = w / 2 and b = (4/3) * w\n    # The total number of balls is r + w + b = 34\n    \n    # From the above equations, we have w / 2 + w + (4/3) * w = 34\n    # Multiply through by 6 to clear fractions: 3w + 6w + 8w = 204\n    # Combine like terms: 17w = 204\n    # Finally, find w : w = 204 / 17\n    \n    w = 204 // 17\n    r = w // 2\n    return r\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    # Define the cost of a cheesecake as x and a logcake as y\n    # We have two equations:\n    # 6x + 7y = 1426   (1)\n    # 4x = 3y          (2)\n    \n    # Import Linear Algebra module from NumPy to solve the linear equations\n    from numpy.linalg import solve\n    import numpy as np\n    \n    # Set up the coefficients matrix for the left-hand side of the equations\n    coeffs = np.array([[6, 7], [4, -3]])\n    \n    # Set up the constants on the right-hand side of the equations\n    constants = np.array([1426, 0])\n    \n    # Solve the linear equations\n    x, y = solve(coeffs, constants)\n    \n    # Determine the cost of 10 cheesecakes and 10 logcakes\n    total_cost = 10 * x + 10 * y\n    \n    return int(total_cost)\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Let x be the number of storybooks Anthea originally had.\n    # Jason originally had $30.\n    # After Jason gives 4 books to Anthea, they have the same amount:\n    # Jason's new amount is $30 - 4 = 26\n    # Anthea's new amount is x + 4\n    # Set them equal to find the original amount of Anthea\n    # 26 = x + 4\n    # Solve for x:\n    anthea_original = 26 - 4\n    \n    # Calculate the difference between the original amounts\n    jason_original = 30\n    difference = jason_original - anthea_original\n    \n    return difference\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5\n    hole_area = 1 * 1\n    area_with_hole = base_area - hole_area\n    \n    volume_of_prism = 480\n    height_of_prism = volume_of_prism / area_with_hole\n    \n    return height_of_prism\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total = 0\n    for i in range(1, 11):\n        total += i * (2 * i - 1)\n    return total\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    total = sum((-1)**(x+1) * x for x in range(1, 1002))\n    return total\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variables\n    yellow, green = symbols('yellow green')\n\n    # Initial ratio of beads: yellow (3 parts) to green (2 parts)\n    initial_ratio_eq = Eq(yellow / green, 3/2)\n\n    # After buying more beads, the ratio of green to yellow (3:2)\n    new_ratio_eq = Eq((green + 20) / (yellow + 5), 3/2)\n\n    # Solve the simultaneous equations\n    solutions = solve((initial_ratio_eq, new_ratio_eq), (yellow, green))\n\n    # Total beads initially\n    total_beads_initially = solutions[yellow] + solutions[green]\n\n    return total_beads_initially\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    total = 12 + 102 + 1002 + 10002\n    return total\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x in range(1, 13):\n        for y in range(1, 13):\n            for z in range(1, 13):\n                if x + y + z == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    # Henry gave 26 marbles to his brother\n    marbles_to_brother = 26\n\n    # He gave 13 marbles to each of his 2 sisters\n    marbles_to_sisters = 13 * 2\n\n    # He is left with 16 marbles\n    marbles_left = 16\n\n    # Total marbles Henry had at first\n    total_marbles = marbles_to_brother + marbles_to_sisters + marbles_left\n\n    return total_marbles\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum((2 * i - 1) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    # Amy's speed (in miles per hour)\n    speed_amy = 60\n    # Christen's speed (in miles per hour)\n    speed_christen = 40\n\n    # The time they meet after (in hours)\n    time_to_meet = 4\n\n    # Calculate the distance each has traveled by the time they meet\n    distance_amy = speed_amy * time_to_meet\n    distance_christen = speed_christen * time_to_meet\n\n    # Total distance between the two starting points\n    total_distance = distance_amy + distance_christen\n\n    # Time taken for Christen to reach Amy's starting point\n    # which is the total distance divided by Christen's speed\n    time_for_christen_to_reach_amy = total_distance / speed_christen\n\n    return time_for_christen_to_reach_amy\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 6, 8, 9]\n    count = 0\n    \n    # Filter only even numbers by checking if the last digit is even\n    for perm in permutations(digits, 4):\n        if perm[-1] % 2 == 0 and perm[0] != 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    correct_ans = symbols('correct_ans')\n    total_questions = 50\n    total_marks = 110\n    correct_marks = 4\n    incorrect_deduction = -1\n    \n    # Let correct_ans be the number of correct answers\n    equation = Eq(correct_marks * correct_ans + incorrect_deduction * (total_questions - correct_ans), total_marks)\n\n    correct_ans = solve(equation, correct_ans)\n\n    return correct_ans[0]\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # For palindromic numbers between 10 and 100\n    for a in range(1, 10):  # First digit (cannot be zero for two-digit numbers)\n        for b in range(0, 10):  # Second digit can be anything\n            num = int(f\"{a}{b}{a}\")  # Constructing the palindromic number\n            if 10 <= num < 100:\n                count += 1\n    \n    # For palindromic numbers between 100 and 1000\n    for a in range(1, 10):  # First digit (cannot be zero for three-digit numbers)\n        for b in range(0, 10):  # Second digit can be anything\n            num = int(f\"{a}{b}{b}{a}\")  # Constructing the palindromic number\n            if 100 <= num < 1000:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = 0.35 * total_cakes\n    \n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    ratio_total_parts = 4 + 5\n    lemon_cakes = (4 / ratio_total_parts) * remaining_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        unique_digits = set(str_num)\n        if len(unique_digits) == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Lily has two choices for the first pass: Cici or April\n    first_pass_options = 2\n    # After the first pass, the receiver has only one choice: to pass it to the third person\n    second_pass_options = 1\n    # The total number of different passing ways is the product of choices at each step\n    total_passing_ways = first_pass_options * second_pass_options\n    \n    return total_passing_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    total_score_first_four = 89 * 4\n    fifth_assignment_score = 94\n    total_score_five_assignments = total_score_first_four + fifth_assignment_score\n    average_score_five_assignments = total_score_five_assignments / 5\n    return average_score_five_assignments\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    rachel, alice = symbols('rachel alice')\n    \n    # Create equation for the first condition\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Create equation for the second condition\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n    return total_candies\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wibble_count = 11\n    total_arms = 81\n    \n    wobble_arms = total_arms - (wibble_arms * wibble_count)\n    wobble_count = wobble_arms // 5\n    \n    return wobble_count\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 179):\n        if isprime(a):\n            b = (179 - 7 * a) / 9\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):  # hundreds place cannot be 0 in a 3-digit number\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and \\\n                   (tens == 2 * hundreds) and \\\n                   (hundreds == 1 + ones):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume Lily had initially L books and Judy had initially J books\n    L, J = symbols('L J')\n\n    # If Lily gives x books to Judy, both will have the same amount\n    # So, L - x = J + x\n    # And we have to find L - J, which is the difference between their initial amounts\n    # Let's express L in terms of J and x\n\n    equation = Eq(L - J, 2 * symbols('x'))\n\n    # As L and J will have same amount after Lily gives x books to Judy:\n    equation2 = Eq(L - symbols('x'), J + symbols('x'))\n\n    # Solve the system of equations to find the amounts in terms of x\n    solutions = solve((equation, equation2), (L, J))\n\n    # Substitute L in terms of J and x back into the equation to find the difference L - J\n    return solutions[L] - solutions[J]\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    amount = 420 * 0.15\n    return amount\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    # There are 60 seconds in a minute\n    seconds_per_minute = 60\n    \n    # Compute the fraction of the 32 minutes\n    fraction_of_time = (1/4) * (1/6) * (1/8) * 32\n    \n    # Convert the fractional minutes to seconds\n    total_seconds = fraction_of_time * seconds_per_minute\n    \n    return int(total_seconds)\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Maverick's speed (km/h)\n    maverick_speed = 15\n    # Kelvin's speed (km/h)\n    kelvin_speed = 10\n    # Kelvin's head start (km)\n    kelvin_head_start = 10\n    # Maverick's catch-up time (hours)\n    maverick_catchup_time = 24 / 60  # converting minutes to hours\n\n    # Distance covered by Maverick when he catches up (km)\n    distance_maverick = maverick_speed * maverick_catchup_time\n    # Distance covered by Kelvin when he is caught up (km)\n    distance_kelvin = kelvin_speed * maverick_catchup_time + kelvin_head_start\n\n    # Check if the distances covered are the same\n    if distance_maverick == distance_kelvin:\n        return maverick_catchup_time * 60  # Convert hours back to minutes for the answer\n    else:\n        # Actual time taken for Maverick to catch up (hours)\n        catchup_time = kelvin_head_start / (maverick_speed - kelvin_speed)\n        return catchup_time * 60  # Convert hours to minutes\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    final_number = 113\n    initial_number = (final_number - 5) / 9\n    return initial_number\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    sum_of_numbers = 80\n    difference_of_numbers = 40\n    smaller_number = (sum_of_numbers - difference_of_numbers) / 2\n    return smaller_number\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_boy_and_girl = boys * girls\n    return ways_to_pick_boy_and_girl\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # Since every kid gets at least one eraser, we distribute one to each kid first.\n    # Now we have 3 erasers left to distribute to 3 kids.\n    # We solve the problem using stars and bars method, where we have n+k-1 C k-1 (n=erasers, k=kids)\n    \n    # Number of erasers left\n    erasers_left = 3\n    # Number of kids\n    kids = 3\n    # Calculate the number of ways\n    ways = math.comb(erasers_left + kids - 1, kids - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_marks = 23\n    marks_correct = 5\n    marks_wrong = -2\n\n    # Assume Valerie got all the questions correct first.\n    correct_questions = total_marks / marks_correct\n\n    # Now use the chicken-rabbit problem solving method to adjust the number of correct questions.\n    questions_remaining = 6 - correct_questions \n    while correct_questions % 1 != 0: \n        correct_questions += (marks_wrong / marks_correct)\n        questions_remaining -= 1\n\n    return int(correct_questions)\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    total_distance = (41 - 1) * 4  # Distance between first and last plum tree\n    pine_trees = total_distance / 5 + 1  # Pine trees count, including both ends\n    return int(pine_trees)\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # The given operation a # b = a + b - (ab / 910)\n    # observe that 1 # n = 1 + n - n/910 = 1 - n/910 + n\n    # when n = 910, 1 # 910 = 1 - 1 + 910 = 910\n    \n    # Using the pattern found above, we can simplify the operation\n    # Starting from the rightmost side, we know that 1 # n will yield n when n = 910\n    # Therefore, we'll reach the number 910 after performing the operation from 1 to 910\n    # After 910, we can skip to 2016 since the operation between\n    # any two numbers a and b, where b >= 910, will yield a\n\n    # Final result is simply 2016 because all other operations will have been simplified to 2016 # 2015 # ... # 911 # 910\n    return 2016\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people = 10\n    hours = 9\n    target_hours = 3\n\n    rate_per_person = 1 / (people * hours)\n    target_people = 1 / (rate_per_person * target_hours)\n\n    return int(target_people)\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 1 - 1/3\n    remaining_after_second_day = 1 - 0.6\n    final_remaining = remaining_after_first_day * remaining_after_second_day\n\n    total_watermelons = 48 / final_remaining\n\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the current ages of the two men\n    age_younger, age_older = symbols('age_younger age_older')\n\n    # Equation 1: When the older was the age of the younger, the younger was 4\n    # This means the age difference between the two is (current_age_older - current_age_younger)\n    # And at that time, older's age was younger's current age, and younger's age was 4\n    # So, the difference in their ages is always the same, and we can say:\n    # age_older - age_younger = age_younger - 4\n    equation1 = Eq(age_older - age_younger, age_younger - 4)\n\n    # Equation 2: When the younger is the age of the older, the younger will be 61\n    # This means older's current age + the difference = 61\n    # So, age_older + (age_older - age_younger) = 61\n    equation2 = Eq(age_older + (age_older - age_younger), 61)\n\n    # Use sympy's solve function to solve the system of equations\n    solutions = solve((equation1, equation2), (age_younger, age_older))\n\n    # Since we are looking for the current age of the younger, return that part of the solution\n    return solutions[age_younger]\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15  # upper bound of the range\n    m = 4   # lower bound of the range minus 1\n\n    # Using the formula for the sum of squares from 1 to n\n    sum_squares_n = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_squares_m = (m * (m + 1) * (2 * m + 1)) // 6\n\n    # Subtracting the sum of squares from 1 to m from the sum of squares from 1 to n\n    ans = sum_squares_n - sum_squares_m\n    \n    return ans\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x in range(1, 9):\n        for y in range(x+1, 9):  # Ensure y > x to get distinct integers\n            for z in range(y+1, 9):  # Ensure z > y to get distinct integers\n                if x + y + z == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # There are 5 desks in front of Jessica's\n    desks_in_front_of_jessica = 5\n    # Jessica's desk itself\n    jessicas_desk = 1\n    # Judy sits behind Jessica, so there is only Judy's desk\n    judys_desk = 1\n    # There are 7 desks behind Judy's\n    desks_behind_judy = 7\n\n    # Total number of desks is the sum of all these counts\n    total_desks = (desks_in_front_of_jessica + jessicas_desk +\n                   judys_desk + desks_behind_judy)\n\n    return total_desks\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Let's denote x as the money Bud had at first.\n    # According to the question:\n    \n    # The amount spent on a book is (1/3) * x\n    # The remaining money after buying the book is x - (1/3) * x = (2/3) * x\n    # The amount spent on a bag is (2/5) * ((2/3) * x) = (4/15) * x\n    # We know the bag cost £120, so we have the equation (4/15) * x = 120\n    # Now we solve the equation for x:\n    \n    x = 120 * (15/4)\n    return x\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = 152\n\n    # equation representing total number of students\n    equation_total = Eq(boys + girls, total_students)\n    # equation after removing 1/11 of boys and 5 girls\n    equation_remaining = Eq(boys - boys / 11, girls - 5)\n\n    # solve the equations\n    solutions = solve((equation_total, equation_remaining), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    # Convert the percentage to decimal by dividing by 100\n    equation = (75/100) * x - 5 - 2.5\n    # Solve the equation for x\n    ans = solve(equation, x)\n    return ans[0]\n\n# Import the sympy library to use the solve() function\nfrom sympy import symbols, solve\n\n# Define the variable 'x' as a symbol\nx = symbols('x')\n\n# Call the solution function to get 'ans'\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_amount = 1000\n    negative_amount = 0\n    subtract_amount = 11\n\n    iterations = (initial_amount - negative_amount) // subtract_amount\n\n    if (initial_amount - iterations * subtract_amount) > 0:\n        iterations += 1\n\n    first_negative_number = initial_amount - iterations * subtract_amount\n\n    return first_negative_number\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    num1 = 0.11\n    num_halfway = 0.126\n    difference = num_halfway - num1\n    num2 = num_halfway + difference\n    return num2\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n    sweets_per_classmate = total_sweets // classmates\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates_per_toffee = 12 / 7\n    total_chocolates = 72\n    total_toffees = total_chocolates / chocolates_per_toffee\n    return int(total_toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for number in range(28, 41):\n        if number % 4 == 0 and 9 in set(factors := [i for i in range(1, number+1) if number % i == 0]):\n            return number\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mango_cost_per_box = 56\n    mangoes_boxes = 24\n    lychees_boxes = 19\n    \n    total_cost = 2826\n    mangoes_total_cost = mango_cost_per_box * mangoes_boxes\n    lychees_total_cost = total_cost - mangoes_total_cost\n    lychee_cost_per_box = lychees_total_cost / lychees_boxes\n    \n    return lychee_cost_per_box\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_types = [1, 2, 5]\n    unique_totals = set()\n\n    for coin1 in coin_types:\n        for coin2 in coin_types:\n            for coin3 in coin_types:\n                total = coin1 + coin2 + coin3\n                unique_totals.add(total)\n\n    ans = len(unique_totals)\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        a, b, c = perm\n        if a * (10 * b + c) == 10 * b * c + a:\n            return a + b + c\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    teams = 6\n    games = comb(teams, 2)\n    return games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n    \n    amount = principal * ((1 + rate) ** years)\n    \n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    decimal_sum = 0.65 + 0.507 + 0.25\n    return decimal_sum\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    # Create all permutations of the digits\n    perm = permutations(['1', '1', '2', '2'], 3)\n    \n    # Convert each permutation into a number and store in a set to avoid duplicates\n    unique_numbers = set(int(''.join(p)) for p in perm if p[0] != '0')\n    \n    # The length of the set is the number of unique three-digit numbers\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # P, Q, R represent single digit integers, so their range is from 0 to 9\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                # Constructing the multiplication based on the place values of P, Q, R\n                top_number = 100*P + 10*Q + R\n                bottom_number = 100*R + 10*Q + P\n                product = top_number * bottom_number\n                # Checking if the product meets the criteria given in the puzzle\n                if product == int(\"1234567PQR\"):\n                    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let x be the number of children who paid for the shirt with their name\n    # Let y be the number of children who paid for the shirt without their name\n    # We have two equations:\n    # x + y = 50 (total number of children)\n    # 15x + 10y = 555 (total amount paid)\n    # We will solve this system of equations for x and y.\n    \n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 50)\n    equation2 = Eq(15 * x + 10 * y, 555)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Total exercise time for jogging in hours (from 7:30 to 8:30)\n    jogging_time = 1\n    # Speed of jogging in miles per hour\n    jogging_speed = 5\n\n    # Distance covered by jogging\n    jogging_distance = jogging_time * jogging_speed\n\n    # Total exercise time for walking in hours (from 8:30 to 10:30)\n    walking_time = 2\n    # Speed of walking in miles per hour\n    walking_speed = 3\n\n    # Distance covered by walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # If x is the smallest number, then the sum of the five consecutive numbers is:\n    # x + (x + 1) + (x + 2) + (x + 3) + (x + 4) = 100\n    # 5x + 10 = 100\n    # 5x = 90\n    # x = 18\n    # The smallest number is 18\n    smallest_number = (100 - 10) // 5\n    return smallest_number\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    q = 44000\n    # Start with the largest possible cube (below 44000) and work downwards\n    for i in range(int(44000 ** (1/3)), 0, -1):\n        if q % (i ** 3) == 0:\n            q = q // (i ** 3)\n            break\n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_large_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n\n    oranges_left = total_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n\n    bags_used = (total_balls - 2) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # Because there are 4 patterns and we want to guarantee at least 3 cards with the same number,\n    # in the worst case scenario, we would draw all different patterns for each number.\n\n    # Calculate the number of cards ensuring that we have at least 3 cards with the same number:\n    # We have to draw 2 cards of each number for all 13 numbers and 1 more card to guarantee the third card with the same number.\n    cards_drawn = 2 * 13 + 1\n\n    return cards_drawn\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_trees = 21\n    total_distance = 800\n\n    distance_between_trees = total_distance / (total_trees - 1)\n  \n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Calculate the correct number of notebooks Andy's sister has at first\n    andy_initial = 149\n    given_to_sister = 38\n    andy_after_giving = andy_initial - given_to_sister\n    \n    # Andy and his sister would then have the same number of notebooks\n    sister_initial = andy_after_giving\n    \n    # Joey's calculation mistake\n    joey_mistake = given_to_sister // 2\n    joey_calculation = andy_initial - joey_mistake\n    \n    return sister_initial == joey_calculation, sister_initial\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90  # distance in meters\n    number_of_intervals = 9 + 1       # number of trees plus one, representing the intervals between them\n\n    distance_between_each_tree = distance_between_buildings / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        ""
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # Let's denote the smaller number as x.\n    # Then the larger number will be 2x because it is twice the smaller number.\n    # According to the problem statement, the sum of these two numbers equals 72:\n    # x + 2x = 72\n\n    # From this equation, we can solve for x:\n    # 3x = 72\n    # x = 72 / 3\n    x = 72 / 3\n\n    # Since we want the smaller number which we've denoted as x:\n    return x\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Define the possible cards\n    possible_cards = {\n        'Spades': ['A', 'J', 'K'],\n        'Hearts': ['3', '5', 'K'],\n        'Diamonds': ['2', '7', 'J'],\n        'Clubs': ['A', '7']\n    }\n\n    # Step 1: Eddie and Avril both don't know the card. Therefore, the card cannot be an Ace or a King because\n    #         they appear in only one suit and their suits have no other numerical overlaps. They would have known\n    #         immediately. We can eliminate Aces and Kings from consideration.\n    possible_cards['Spades'].remove('A')\n    possible_cards['Spades'].remove('K')\n    possible_cards['Hearts'].remove('K')\n\n    # Step 2: After Eddie says he doesn't know and Avril agrees, but then suddenly knows after Eddie's statement,\n    #         we can deduce that the card must be the only remaining card of its number in the possible cards.\n    #         This means that the number cannot be '7' because it's both in Diamonds and Clubs, and Avril would not\n    #         have been able to know for sure after Eddie's statement.\n    for suit, cards in possible_cards.items():\n        if '7' in cards:\n            cards.remove('7')\n\n    # Step 3: Now, Eddie knows as well. This indicates that the remaining card must be the only card of its suit\n    #         because at this point Eddie knows the suit and if there were more than one option he would still be unsure.\n    #         Therefore, the suit with only one card remaining is the suit of the card. Find that suit and the card.\n    for suit, cards in possible_cards.items():\n        if len(cards) == 1:\n            return {'suit': suit, 'number': cards[0]}\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_value = 5\n    num_numbers = 5\n    known_numbers = [3, 4, 6, 10]\n    total_sum_known = sum(known_numbers)\n    total_sum = mean_value * num_numbers\n    fifth_number = total_sum - total_sum_known\n    return fifth_number\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Time taken to cut the wood into 4 sections is 12 minutes.\n    # Each cut takes a certain amount of time, so let's find the time per cut.\n    # There are 3 cuts made to divide the wood into 4 sections.\n    time_per_cut = 12 / 3\n    \n    # If Emma wants to cut the wood into 5 sections, she needs to make 4 cuts.\n    # Therefore, the time required for cutting the wood 5 times is:\n    time_for_5_sections = time_per_cut * 4\n    \n    return time_for_5_sections\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variables to solve for\n    total_pages, deadline = symbols('total_pages deadline')\n\n    # Create equations based on the problem description\n    equation1 = Eq(30 * (deadline + 2), total_pages)\n    equation2 = Eq(39 * (deadline - 4), total_pages)\n\n    # Solve the equations for the unknowns\n    solutions = solve((equation1, equation2), (total_pages, deadline))\n\n    # Return the deadline and total pages\n    return solutions[deadline], solutions[total_pages]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    pages_with_five = 0\n    current_page = 1\n\n    # Loop until we find the number of pages that contain the digit '5' 30 times\n    while pages_with_five < 30:\n        # Check each digit for the number '5'\n        if '5' in str(current_page):\n            pages_with_five += 1\n        # Increment the current page to check the next one\n        current_page += 1\n\n    # Subtract 1 to account for the last increment that exceeded the condition\n    return current_page - 1\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n    cost_per_cup = total_cost / number_of_cups\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2*x - 3), 5 - (x - 2))\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of books Lily has as L and Judy has as J.\n    L, J = symbols('L J')\n    \n    # According to the question Lily sends x books to Judy\n    # and then they both will have the same amount of books, therefore:\n    # L - x = J + x\n    # Since we do not know the value of x, we can assume the difference in books as 2x.\n    # This means L - J = 2x, with x being the number of books sent.\n    # We need to find out this difference which is L - J (the value of 2x).\n    \n    # But the equation is not solvable with the information given, as we have two variables but only one equation.\n    # We won't be able to find a numerical solution to this problem without additional constraints or information.\n    # The problem just states that Lily sends some unknown number of books to Judy and they have the same amount of books.\n    # There is no unique solution for the number of books each originally had or the number being exchanged.\n    # However, we can express the solution in terms of x:\n    \n    # Equation\n    equation = Eq(L - J, 2 * symbols('x'))\n    \n    # Since we cannot determine the actual values of L, J, or x from the provided information,\n    # our solution will only involve expressing the difference (L-J) in terms of the unknown quantity x.\n    # Thus, the answer is 2x, as that is the difference in the number of books they originally had.\n    ans = 2 * symbols('x')\n    \n    return ans\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    workers = 2\n    total_rooms = 4\n\n    days = total_rooms / (rooms_per_day_per_worker * workers)\n\n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange = symbols('apple orange')\n    \n    # Kate's purchase: 1 apple and 2 oranges for 48p\n    equation1 = Eq(apple + 2 * orange, 48)\n    # Jade's purchase: 1 apple and 1 orange for 31p\n    equation2 = Eq(apple + orange, 31)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    # Return the cost of 1 orange\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the pocket money and y be the price of one tennis ball\n    x, y = symbols('x y')\n    \n    # Equation for the first week\n    equation1 = Eq(4 * y + 27, x)\n    \n    # Equation for the next week, note that 1.51 must be converted to pence\n    equation2 = Eq(2 * y + 151, x)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour  # 3600 seconds in an hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_away = total_badges * (3/8)\n    remaining = total_badges - given_away\n\n    return int(remaining)\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        str_num = str(num)\n        if str_num.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        ""
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elias, aileen = symbols('elias aileen')\n    equation1 = Eq(elias, 5 * aileen)\n    equation2 = Eq(elias - 88, aileen - 8)\n    \n    solutions = solve((equation1, equation2), (elias, aileen))\n    \n    elias_final = solutions[elias] - 88\n    aileen_final = solutions[aileen] - 8\n    \n    return (elias_final, aileen_final)\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n\n    total_steps = steps_per_staircase * total_staircases\n\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    louis_position = total_people - people_behind - 1\n    return louis_position\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    total_cheese = 104\n    ratio_thomas = 5\n    ratio_gerald = 3\n    total_ratio = ratio_thomas + ratio_gerald\n    \n    # Total pieces of cheese each one eats\n    cheese_thomas = (ratio_thomas / total_ratio) * total_cheese\n    cheese_gerald = (ratio_gerald / total_ratio) * total_cheese\n    \n    # The difference in pieces of cheese eaten by Thomas and Gerald\n    cheese_difference = cheese_thomas - cheese_gerald\n    return int(cheese_difference)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    ans = sum(range(11, 32, 2))\n    return ans\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    ans = cookies_per_gram * 48\n    return int(ans)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert base 8 numbers to base 10, perform the addition, then convert back to base 8\n    num1_base10 = int(\"25\", 8)\n    num2_base10 = int(\"37\", 8)\n    \n    sum_base10 = num1_base10 + num2_base10\n    ans = oct(sum_base10)[2:]  # Convert sum to base 8 and remove the '0o' prefix\n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return round(result, 2)\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of boys be b, girls be g, and adults be a.\n    from sympy import symbols, Eq, solve\n\n    b, g, a = symbols('b g a')\n    \n    # We have the following equations based on the problem statement:\n    # Equation 1: boys are 2/7 of the girls -> b = 2/7 * g\n    # Equation 2: adults are 2/3 of the children (children are boys + girls) -> a = 2/3 * (b + g)\n    # Equation 3: there are 1228 more adults than boys -> a = b + 1228\n\n    # Using the equations above, we create sympy equations:\n    equation1 = Eq(b, 2/7 * g)\n    equation2 = Eq(a, 2/3 * (b + g))\n    equation3 = Eq(a, b + 1228)\n\n    # Solve the system of equations for boys b, girls g, and adults a:\n    solutions = solve((equation1, equation2, equation3), (b, g, a))\n\n    # Total number of people is the sum of boys, girls, and adults:\n    total_people = solutions[b] + solutions[g] + solutions[a]\n\n    return total_people\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let x be the initial amount of money each had.\n    # Chloe's remaining money is x - 20d, where d is the number of days.\n    # Gordon's remaining money is x - 25d.\n    # We are given that when Chloe has $157 left, Gordon has $82 left.\n    # Thus, we can form the equation x - 20d = 157 and x - 25d = 82.\n    # Subtract the second equation from the first to find d:\n    # 5d = 157 - 82\n    d = (157 - 82) // 5\n    \n    # Now find the initial amount (x) using Chloe's remaining money:\n    x = 157 + 20 * d\n    \n    return x\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    # The formula for the number of regions R created by n circles in a plane is\n    # R = n^2 - n + 2 by considering line intersections and regions within the circles.\n    ans = n**2 - n + 2\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total value of jewels in P as p and in Q as q\n    # Initially, the average value of jewels in P is p/3 and in Q is q/3\n    # After transferring a jewel worth 5000 from P to Q:\n    # New average in P = (p - 5000)/3 and in Q = (q + 5000)/3\n    # It is given that these new averages are 1000 more than the initial averages\n    # So, we can set up the following equations:\n    # (p - 5000)/3 = p/3 + 1000 and (q + 5000)/3 = q/3 + 1000\n\n    # Define the symbols\n    p, q = symbols('p q')\n\n    # Equations based on the problem statement\n    equation1 = Eq((p - 5000)/3, p/3 + 1000)\n    equation2 = Eq((q + 5000)/3, q/3 + 1000)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (p, q))\n    \n    # The total value is the sum of p and q\n    total_value = solutions[p] + solutions[q]\n    return total_value\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    \n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons_fraction = 1 / 5\n    selling_price_per_melon = 1.50\n\n    bad_melons = total_melons * bad_melons_fraction\n    good_melons = total_melons - bad_melons\n\n    total_selling_price = good_melons * selling_price_per_melon\n    profit = total_selling_price - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    total_oranges = 150\n    leftover_oranges = 17\n    total_apples = 100\n    leftover_apples = 5\n\n    # Calculate the number of oranges and apples given to each neighbour\n    oranges_each = (total_oranges - leftover_oranges)\n    apples_each = (total_apples - leftover_apples)\n\n    # Find the greatest common divisor (GCD) of the two numbers\n    # The GCD will give us the number of neighbours\n    import math\n    gcd = math.gcd(oranges_each, apples_each)\n\n    ans = gcd\n    return ans\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # in cm\n    interval = 1  # in cm\n    crosses_at_ends = 2  # one at each end\n\n    # calculate the number of crosses between the ends\n    crosses_between = (line_length - 1) / interval\n\n    # total crosses is sum of crosses at ends and crosses between\n    total_crosses = crosses_at_ends + crosses_between\n\n    return int(total_crosses)\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Let x be the number of tennis rackets the shop purchased at first\n    # cost_price_per_racket is the cost price of each racket\n    # selling_price_per_racket is the selling price of each racket\n    # remaining_rackets is the number of rackets left unsold\n    # profit is the additional money made by the shop after covering costs\n    cost_price_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    profit = 525\n    \n    # Let y be the number of rackets sold\n    # cost_price_total is the total cost price of all rackets purchased\n    # proceeds is the total money made from selling y rackets\n    # The equation can be written as:\n    # proceeds = cost_price_total + profit + (remaining_rackets * selling_price_per_racket)\n    # selling_price_per_racket * y = cost_price_per_racket * x + profit + (remaining_rackets * selling_price_per_racket)\n    # Now solve the equation for x:\n    \n    # Rearrange the equation to solve for y (the number of rackets sold):\n    # selling_price_per_racket * y = cost_price_per_racket * (y + remaining_rackets) + profit\n    # y = (cost_price_per_racket * remaining_rackets + profit) / (selling_price_per_racket - cost_price_per_racket)\n    y = (cost_price_per_racket * remaining_rackets + profit) / (selling_price_per_racket - cost_price_per_racket)\n    \n    # The total number of tennis rackets purchased at first is the sum of the sold rackets and the remaining ones\n    x = y + remaining_rackets\n    return int(x)\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    result = 6.23 - 5.72\n    return result\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # The pattern \"red, red, green, yellow, yellow, green\" has 6 balloons\n    greens_per_pattern = 2  # There are 2 green balloons in each pattern\n    \n    full_patterns, remaining_balloons = divmod(75, pattern_length)\n    green_balloons = full_patterns * greens_per_pattern\n\n    # We only need to check the remaining balloons if there are any\n    if remaining_balloons > 0:\n        # Loop through the remaining balloons to count the greens\n        for i in range(1, remaining_balloons + 1):\n            if i % 6 == 3 or i % 6 == 0:\n                green_balloons += 1\n\n    return green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Sandra's original number of marbles be s and Jessica's be j\n    s, j = symbols('s j')\n    \n    # Sandra gave Jessica 13 marbles: Sandra has s - 13, Jessica has j + 13\n    # After giving, Sandra had 6 fewer marbles than Jessica\n    equation = Eq(s - 13, j + 13 - 6)\n    \n    # But we know from the problem statement that Sandra had more marbles initially\n    # So Sandra's marbles are more than Jessica's marbles by some positive number, let's say n\n    n = symbols('n')\n    equation2 = Eq(s, j + n)\n    \n    # We have two equations now\n    # 1. Sandra's new amount is 6 less than Jessica's new amount\n    # 2. Sandra's original amount is n more than Jessica's\n    \n    # Solve the system of equations\n    solutions = solve((equation, equation2), (s, j, n))\n    ans = solutions[n]\n\n    return ans\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_first_and_sixth = 60\n    number_of_intervals_sixth = 6 - 1  # Since 1st is included, we subtract 1\n\n    distance_between_each_lamppost = distance_between_first_and_sixth / number_of_intervals_sixth\n    \n    number_of_intervals_ninth = 9 - 1  # Similarly for 9th lamppost\n    \n    distance_between_first_and_ninth = distance_between_each_lamppost * number_of_intervals_ninth\n\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    total_cost = 2826\n    mango_cost_per_case = 56\n    mango_cases = 24\n    lychee_cases = 19\n    \n    mango_total_cost = mango_cases * mango_cost_per_case\n    lychee_total_cost = total_cost - mango_total_cost\n    lychee_cost_per_case = lychee_total_cost / lychee_cases\n\n    return lychee_cost_per_case\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    games_played = comb(num_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Each of her seven friends received 26 pieces of candy\n    friends_candy = 7 * 26\n\n    # Kate left with 22 pieces of candy\n    kate_candy = 22\n\n    # Total candy brought to school\n    school_candy = friends_candy + kate_candy\n\n    # The total candy is 3/2 (since she ate 1/3 at home, 2/3 is the rest) of the school candy\n    total_candy = (3 / 2) * school_candy\n\n    return int(total_candy)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_rate = 9\n    bob_rate = 5\n    total_floors = 25\n    bob_at_top = (bob_rate / andy_rate) * total_floors\n    return int(bob_at_top)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if 120 + m == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w be the number of words James needs to type in total\n    # Let s be the original speed (words per minute)\n    w, s = symbols('w s')\n\n    # Equation 1: original speed and time (3 minutes -> w = 3s)\n    equation1 = Eq(w, 3 * s)\n    \n    # Equation 2: increased speed (s + 30) and decreased time (2 minutes -> w = 2(s + 30))\n    equation2 = Eq(w, 2 * (s + 30))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, s))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [False] * 10  # Represent the lights, all initially turned off\n\n    # Ms. Lily presses each switch once every other one alternatively.\n    for i in range(0, 10, 2):\n        lights[i] = not lights[i]\n\n    # Sam presses each switch marked with an even number (7 times each)\n    for i in range(1, 10, 2):\n        lights[i] = not lights[i] if 7 % 2 != 0 else lights[i]\n\n    # Count the number of lights that are on\n    ans = lights.count(True)\n\n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let a be the initial amount of water in Pail A\n    # let b be the initial amount of water in Pail B\n    a, b = symbols('a b')\n\n    # equation for the initial amount of water (before transferring 4 litres)\n    equation1 = Eq(a, 2/3 * b)\n\n    # equation after transferring 4 litres from Pail B to Pail A\n    equation2 = Eq(a + 4, 7/8 * (b - 4))\n\n    # solving the system of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # total amount of water is a + b\n    total_water = solutions[a] + solutions[b]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    climb_distance_day = 3\n    slip_distance_night = 2\n    progress_per_day = climb_distance_day - slip_distance_night\n\n    # Calculate days it takes without the final climb\n    days = (total_distance - climb_distance_day) // progress_per_day\n    \n    # The last day is when it climbs out and doesn't slip back\n    # Since we start counting from zero, we need to add 1\n    days += 1\n    \n    return days\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    total_volume = 900  # ml\n    initial_sugar_percentage = 6 / 100  # converting to decimal\n    final_sugar_percentage = 10 / 100  # converting to decimal\n    \n    initial_sugar_content = total_volume * initial_sugar_percentage\n    final_sugar_content = total_volume * final_sugar_percentage\n    \n    additional_sugar_needed = final_sugar_content - initial_sugar_content\n    \n    return additional_sugar_needed\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    # Eddy's initial calculation\n    parts_per_hour = 20 / 2\n    total_time_needed = 100 / parts_per_hour\n\n    # Correction, he already used 2 hours so remaining time needed is:\n    remaining_time = total_time_needed - 2\n\n    return remaining_time\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # You could draw all 5 balls of one color first, then all 5 of another color\n    # so you need to draw at least 1 more to ensure you get 3 different colors\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n    \n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    from math import comb\n\n    # Calculate all the possibilities for taking 2 balls of different colors\n    combinations_of_diff_colors = comb(5, 2)\n\n    # Calculate all the possibilities for taking 2 balls of the same color\n    combinations_of_same_color = 5\n\n    # Total unique combinations\n    total_unique_combinations = combinations_of_diff_colors + combinations_of_same_color\n    \n    # To guarantee that there are always two people with the same kind of balls,\n    # the number of people must be one more than the total unique combinations\n    num_people = total_unique_combinations + 1\n\n    return num_people\n    \nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n\n    # Let x be the number of cards Hisham has, then Melissa has 2x cards\n    # x + 2x = 876 -> 3x = 876\n    x = total_cards / 3\n    hisham_cards = x\n    melissa_cards = 2 * x\n\n    # When Melissa gives cards to Hisham, both will have the same number of cards\n    # which will be half of the total cards\n    equal_cards = total_cards / 2\n    cards_to_give = melissa_cards - equal_cards\n\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    common_difference = (third_term - first_term) / 2\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # 2 m 20 cm is 220 cm\n    length_per_piece = total_length_cm / 2\n    return length_per_piece\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    sum = 0\n    for i in range(46, 51):\n        sum += i * (100 - i)\n    return sum\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # We need at least one even number to have a product divisible by 4.\n    # Since every second number is even in the range 10 to 41, we start by counting even numbers.\n\n    # The worst case scenario is that we pick all the odd numbers first.\n    # There are 16 odd numbers and 16 even numbers between 10 and 41.\n\n    # After picking all odd numbers (16), we need to pick at least one even number to have a chance of the product being divisible by 4.\n    # However, just picking one even might give us an even that is only divisible by 2 (like 10), not 4.\n    # To ensure we have a number divisible by 4, we might need to pick all other even numbers that are not multiples of 4 (worst case).\n    # There are eight even numbers that are multiples of 2 but not 4: 10, 14, 18, 22, 26, 30, 34, 38.\n\n    # So we pick all 16 odd numbers and 8 even numbers that are not multiples of 4 (worst case).\n    # The next number we pick must be an even number that is a multiple of 4, fulfilling the condition.\n\n    nums_picked = 16 + 8 + 1  # All odd numbers, even but not multiple of 4, and then one multiple of 4.\n\n    return nums_picked\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Smallest two-digit prime number\n    smallest_two_digit_prime = list(primerange(10, 100))[0]\n\n    # Largest two-digit square number\n    i = 9\n    while True:\n        square = i ** 2\n        if square >= 100:\n            i -= 1\n            break\n        i += 1\n    largest_two_digit_square = i ** 2\n\n    # Product of smallest two-digit prime number and largest two-digit square number\n    product = smallest_two_digit_prime * largest_two_digit_square\n    \n    return product\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(40 / (x + 5), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian's age at 14 is the reverse of his father's age, so he is 14 and his father is 41.\n    # The difference in their ages is 41 - 14 = 27.\n    age_difference = 27\n    \n    # Search for a future age where Brian's age is the reverse of his father's age.\n    for i in range(1, 100): # Assuming their ages won't be reversed after Brian becomes 100\n        brian_future_age = 14 + i\n        father_future_age = 41 + i\n        \n        # Check if Brian's future age is the reverse of his father's future age\n        if str(brian_future_age) == str(father_future_age)[::-1]:\n            return brian_future_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    coffee_price_euro = 4.8\n    \n    coffee_price_usd = coffee_price_euro * euro_to_usd\n    \n    return coffee_price_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "def solution():\n    mean_value = 5\n    numbers = [3, 4, 6, 10]\n    total_sum = mean_value * (len(numbers) + 1)  # Mean times the total number of terms\n    sum_of_known_numbers = sum(numbers)\n    fifth_number = total_sum - sum_of_known_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20):\n            for C in range(1, 20):\n                if A + B + C == 19:\n                    max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_initial = 3900\n    total_books_final = 3900 + 510\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n\n    # Initial number of books for each language\n    chinese_books_initial = (total_books_initial * ratio_chinese) / total_ratio\n    malay_books_initial = (total_books_initial * ratio_malay) / total_ratio\n    english_books_initial = (total_books_initial * ratio_english) / total_ratio\n\n    # Increased number of books\n    chinese_books_increased = chinese_books_initial * 1.20\n    malay_books_increased = malay_books_initial * 1.10\n\n    # Remaining books are English books\n    english_books_final = total_books_final - (chinese_books_increased + malay_books_increased)\n    \n    # Percentage increase for English books\n    percentage_increase_english = ((english_books_final - english_books_initial) / english_books_initial) * 100\n    \n    return percentage_increase_english\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import gcd\n\n    # The smallest number that can be distributed equally to 12 or 56 friends\n    # is the least common multiple (LCM) of 12 and 56.\n    lcm = (12 * 56) // gcd(12, 56)\n\n    return lcm\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    # Number of juniors and seniors\n    juniors = 12\n    seniors = 8\n    \n    # Average scores\n    average_juniors = 10\n    average_total = 14\n\n    # Total score for juniors\n    total_score_juniors = juniors * average_juniors\n    \n    # Total score for all participants\n    total_score_all = (juniors + seniors) * average_total\n    \n    # Total score for seniors\n    total_score_seniors = total_score_all - total_score_juniors\n    \n    # Average score for seniors\n    average_seniors = total_score_seniors / seniors\n\n    return average_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Age of the 2 dogs 4 years ago\n    combined_age_4_years_ago = 10\n    \n    # Their combined age now is the age 4 years ago plus 4 years for each dog\n    combined_age_now = combined_age_4_years_ago + 4*2\n    \n    # Their combined age in 2 years will be their current age plus 2 years for each dog\n    combined_age_in_2_years = combined_age_now + 2*2\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    score_not_attempted = 0\n    score_rex = 66\n    questions_attempted = total_questions - 1\n\n    # Assume all attempted questions were answered correctly\n    max_possible_score = questions_attempted * score_correct\n    \n    # The difference between the max possible score and the actual score\n    # is due to incorrect answers, each causing a score drop of 4+2=6 points\n    score_difference = max_possible_score - score_rex\n    \n    # Calculate the number of incorrect answers\n    incorrect_answers = score_difference // (score_correct - score_incorrect)\n    \n    # Calculate the number of correct answers\n    correct_answers = questions_attempted - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of correct, wrong, and unanswered questions\n    correct, wrong, unanswered = symbols('correct wrong unanswered')\n    \n    # Mochi answered 60% of the 90 questions, so 40% were unanswered\n    total_questions = 90\n    unanswered_eq = Eq(unanswered, total_questions * 0.4)\n    \n    # The number of correct and wrong answers must sum to the number of answered questions (60% of total)\n    answered_eq = Eq(correct + wrong, total_questions * 0.6)\n    \n    # Define the equation for the total score\n    score_eq = Eq(correct * 5 - wrong * 2 + unanswered * 1, 264)\n    \n    # Solve the system of equations\n    solutions = solve((unanswered_eq, answered_eq, score_eq), (correct, wrong, unanswered))\n    \n    # We are asked for the number of questions Mochi answered correctly\n    return solutions[correct]\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    # Pigeonhole principle: To guarantee that at least one container has 2 apples,\n    # we distribute 1 apple to each others and then we have to add one more apple to any container.\n    min_apples = containers + 1  # One apple per container plus at least one container with 2 apples\n    return min_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * 10**-2021\n    denominator = 92 * 10**-2023\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_per_gram = 160 / 50\n    grams_needed = 300 / cookies_per_gram\n    return grams_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dedra, timm = symbols('dedra timm')\n    \n    # Initial state: Dedra had 4 times as much money as Timm\n    initial_state = Eq(dedra, 4 * timm)\n    \n    # Both received $72 each\n    # New state after receiving money: Dedra has twice as much money as Timm\n    new_state = Eq(dedra + 72, 2 * (timm + 72))\n    \n    # Solving the equations\n    solutions = solve((initial_state, new_state), (dedra, timm))\n    \n    return solutions[dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    current_length = 0\n    number = 1\n\n    while current_length < 1000:\n        number_length = len(str(number))\n        current_length += number_length\n        if current_length >= 1000:\n            break\n        number += 1\n\n    overflow = current_length - 1000\n    number_str = str(number)\n    unit_digit = number_str[-1 - overflow]\n\n    return int(unit_digit)\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    square = symbols('square')\n    equation = Eq(3 * square - 2, 19)\n    sol = solve(equation, square)\n    return sol[0]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    # Number of types containing only A, only C, only E respectively.\n    only_a = 62 - 48 - 36 + 25\n    only_c = 90 - 48 - 50 + 25\n    only_e = 68 - 36 - 50 + 25\n    \n    # Number of types containing both A and C, but not E\n    # both A and E, but not C, and both C and E, but not A, respectively.\n    only_ac = 48 - 25\n    only_ae = 36 - 25\n    only_ce = 50 - 25\n    \n    # Number of types containing all three.\n    all_three = 25\n    \n    # Total number of types studied.\n    total_types = only_a + only_c + only_e + only_ac + only_ae + only_ce + all_three\n    \n    return total_types\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1 # Subtract 1 for Louis himself\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    n = 18  # Total number of pupils\n    r = 3   # Number of pupils to be seated in a row\n\n    # Number of permutations for selecting r from n is given by nPr = n! / (n-r)!\n    ans = factorial(n) // factorial(n-r)\n    \n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack = 4\n    jason = symbols('jason')\n    bruce = symbols('bruce')\n    willie = symbols('willie')\n\n    bruce_and_willie_same_as_jason = Eq(bruce, jason) & Eq(willie, jason)\n    total_age = Eq(jack + jason + bruce + willie, 19)\n\n    solutions = solve((bruce_and_willie_same_as_jason, total_age), (jason, bruce, willie))\n    \n    return solutions[jason]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    num_friends = symbols('num_friends')\n    # Let x be the number of friends\n\n    # If each friend got 5 erasers, 3 left\n    equation1 = Eq(5 * num_friends + 3, 5 * num_friends + 3 + 3)\n\n    # If each friend got 6 erasers, 2 short\n    equation2 = Eq(6 * num_friends - 2, 6 * num_friends)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), num_friends)\n\n    # Number of erasers is when each friend got 5 erasers plus 3 left\n    num_erasers = 5 * solutions[num_friends] + 3\n\n    return num_erasers\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Jake's current age as j and John's current age as n\n    j, n = symbols('j n')\n    \n    # The sum of their ages is 44\n    equation1 = Eq(j + n, 44)\n    \n    # In 14 years, Jake will be twice as old as John\n    equation2 = Eq(j + 14, 2 * (n + 14))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, n))\n    \n    # We want to know John's age in 14 years\n    john_age_in_14_years = solutions[n] + 14\n    \n    return john_age_in_14_years\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    future_value = 2360\n    interest_rate = 0.06\n    years = 3\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return round(present_value, 2)\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    youngest = symbols('youngest')\n\n    # The oldest child is six times as old as the youngest.\n    oldest = 6 * youngest\n\n    # The age difference between each child is 15 months.\n    age_difference = 15\n\n    # Calculate the total age difference between the oldest and youngest.\n    total_age_difference = age_difference * (9 - 1)\n\n    # Set equation based on the total age difference and age of the oldest.\n    equation = Eq(oldest - youngest, total_age_difference)\n\n    # Solve the equation to find the age of the youngest child.\n    youngest_age = solve(equation, youngest)\n\n    return youngest_age[0]\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    # We can simplify the term inside the sum as:\n    # (k^2 + (k+1)^2) / (k(k+1)) = (k(k+1) + (k+1)) / (k(k+1)) = 1 + 1/k\n    # Therefore, the sum becomes the sum of 1 (2008 times) and the sum of the harmonic series up to 1/2007\n    sum_of_ones = 2008\n    harmonic_sum = sum(1/k for k in range(1, 2008))\n    total_sum = sum_of_ones + harmonic_sum\n    ans = round(total_sum)\n    return ans\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Since the ones digit becomes the thousands digit and increases the number by 5877,\n    # The ones place contributes 1000 more than its original value, \n    # and the original thousands place digit contributes 1000 less to the new number.\n    # Hence, the ones digit must be 5 + the original thousands place digit.\n    for original_thousands in range(10):\n        ones_digit = original_thousands + 5\n        if ones_digit < 10:\n            # Construct the smallest original number possible with the current thousands digit\n            original_number = int(str(original_thousands) + \"000\")  # Smallest number with that thousands digit\n            new_number = original_number + 5877\n            # Check if the ones place in the new number is equal to the original thousands place\n            if new_number % 10 == original_thousands:\n                return original_number\n    return None\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let x be the number of sweets Jiaxiang initially has.\n    # Cayden then has x + 5 sweets.\n    \n    # After Cayden gives Jiaxiang 10 sweets:\n    # Jiaxiang will have x + 10 sweets,\n    # Cayden will have (x + 5) - 10 = x - 5 sweets.\n    \n    # The difference in number of sweets they have now is:\n    # (x + 10) - (x - 5) = x + 10 - x + 5 = 15\n    \n    return 15\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    # Find the first multiple of 11 greater than 50\n    first_multiple = 11 * ((50 // 11) + 1)\n    # Find the last multiple of 11 less than 150\n    last_multiple = 11 * (150 // 11)\n    \n    # Compute the number of multiples\n    num_multiples = (last_multiple - first_multiple) // 11 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    result = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2 / 15)\n    return result\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Average score of the 5 pupils\n    avg_5_pupils = 72\n    \n    # Total score of the 5 pupils\n    total_score_5_pupils = avg_5_pupils * 5\n    \n    # New class average with Mary's score included\n    new_avg = 75\n    \n    # New total score with Mary's score for 6 pupils\n    total_score_6_pupils = new_avg * 6\n    \n    # Mary's score\n    marys_score = total_score_6_pupils - total_score_5_pupils\n    \n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60  # Speed of the train in m/s\n    \n    # The time it takes for the entire train to cross the bridge is the time it takes for the train\n    # to travel a distance equal to its own length plus the length of the bridge.\n    total_distance = train_length + bridge_length\n    \n    # time = distance / speed\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    for number in range(999, 100, -1):\n        if number % 2 == 1 and number % 9 == 0 and (number // 10) % 10 % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # Since each student must get at least one doughnut, we give out four\n    # which leaves us with 11 - 4 = 7 doughnuts to distribute freely.\n    # This is a problem of distributing k identical items into n parts,\n    # which translates to \"combinations with repetition\" or \"stars and bars\"\n    # method, where k = 7 (doughnuts) and n = 4 (students).\n    # The formula for combinations with repetition is C(n + k - 1, k).\n    ways = comb(7 + 4 - 1, 7)\n    return ways\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48  # Distance to the market in meters\n    speed = 8  # Auntie Lina's walking speed in meters per minute\n    time = distance / speed  # Time in minutes to reach the market\n    \n    return int(time)\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # The worst-case scenario is that Jane draws the maximum number of marbles of each color except one.\n    # Therefore, she needs to draw all the red, green, and blue marbles without drawing an orange one,\n    # And then she will be guaranteed to get an orange one in the next draw.\n    \n    red = 4\n    green = 7\n    blue = 6\n    # We don't take all the oranges otherwise we won't guarantee an orange marble in the end.\n\n    marbles_to_draw = red + green + blue + 1  # The +1 accounts for the guaranteed different colored marble draw\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    temp_drop = 11\n    midnight_temp = midday_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $2 and $10 notes\n    num_2, num_10 = symbols('num_2 num_10')\n\n    # Total number of notes\n    total_notes_eq = Eq(num_2 + num_10, 38)\n\n    # Relationship between spent and remaining notes\n    spent_2_eq = Eq(num_2 * 0.25, 3 * (num_10 * 0.2))\n    spent_10_eq = Eq(num_2 * 0.25, num_10 * 0.2)\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, spent_2_eq, spent_10_eq), (num_2, num_10))\n\n    # Calculate the cost of the fan based on the number of notes spent\n    cost_of_fan = (solutions[num_2] * 0.75 * 2) + (solutions[num_10] * 0.8 * 10)\n\n    return cost_of_fan\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_hives = 5\n    current_honey_production = 50\n    desired_honey_production = 90\n    additional_hives = (desired_honey_production / current_honey_production * current_hives) - current_hives\n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ali, kumar = symbols('ali kumar')\n    \n    initial_ratio = Eq(ali / kumar, 7/5)\n    final_ratio = Eq((ali - 10) / (kumar + 10), 1/5)\n    \n    solutions = solve((initial_ratio, final_ratio), (ali, kumar))\n    \n    return solutions[ali] + solutions[kumar]\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    from itertools import combinations\n\n    # Convert pounds to pence\n    five_pound_in_pence = 500\n    \n    # Possible coins in multiples of 5 pence\n    coins = [5, 10, 20, 50, 100, 200]\n    \n    # Find all ways to choose 5 different coins\n    possible_combinations = list(combinations(coins, 5))\n    \n    # Calculate the value of the chosen coins\n    for coin_set in possible_combinations:\n        if sum(coin_set) < five_pound_in_pence:\n            amount_spent = five_pound_in_pence - sum(coin_set)\n            return amount_spent\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n    east_west_dist = 15 - 9  # since she first went east 15 km then west 9 km\n    north_south_dist = 3 + 5  # since she went north a total of 3+5 km\n\n    # Using Pythagorean theorem to find the shortest distance\n    shortest_distance = sqrt(east_west_dist**2 + north_south_dist**2)\n\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the price of one banana and one pear\n    banana, pear = symbols('banana pear')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(banana + 3 * pear, 84)  # Max's purchase\n    equation2 = Eq(banana + pear, 48)  # Emily's purchase\n\n    # Solve the equations\n    solution = solve((equation1, equation2), (banana, pear))\n\n    # Extract the price of one banana from the solution\n    banana_price = solution[banana]\n\n    return banana_price\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = 8 * 60 + 20  # Convert total hours and minutes to minutes\n    activity_and_break = 45 + 20 # Each activity's duration and the following break in minutes\n\n    # Calculate number of activities by dividing the total time by the length of activity and break\n    num_activities = total_minutes // activity_and_break\n\n    # Check if there's enough time left for another activity without break\n    remaining_minutes = total_minutes % activity_and_break\n    if remaining_minutes >= 45:\n        num_activities += 1\n\n    return num_activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Adam and Ben weigh 102kg\n    adam_and_ben = 102\n    # Ben and Carl weigh 97kg\n    ben_and_carl = 97\n    # Adam and Carl weigh 92kg\n    adam_and_carl = 92\n\n    # Sum of all individual weights\n    all_weights_sum = adam_and_ben + ben_and_carl + adam_and_carl\n    \n    # The sum of all weights counts Ben and Adam twice, so we divide by 2\n    # to get the total weight of Adam, Ben, and Carl\n    total_weight = all_weights_sum / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "def solution():\n    # The distance between the 1st and 6th lamp post represents 5 equal intervals.\n    interval_distance = 60 / 5  # distance between two consecutive lamp posts\n    \n    # To find the distance between the 1st and 9th lamp post, we consider 8 such intervals.\n    distance_1_to_9 = interval_distance * 8\n    \n    return distance_1_to_9\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * (3/4)\n    return afternoon_cookies\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days B takes to finish the work\n    x = symbols('x')\n\n    # A's efficiency is twice B's, so A takes x/2 days to finish the work\n    # A takes 5 days less than B, which gives us equation x/2 = x - 5\n    equation = Eq(x / 2, x - 5)\n\n    # Solving the equation for x gives us the number of days B takes\n    days_for_B = solve(equation, x)\n\n    return days_for_B[0]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    # To check divisibility by 11, you alternate between summing and subtracting\n    # the digits of the number. If the result is a multiple of 11, the number\n    # itself is divisible by 11.\n    digits = [int(digit) for digit in str(number)]\n    alternating_sum = sum(digits[::2]) - sum(digits[1::2])\n    \n    is_divisible_by_11 = alternating_sum % 11 == 0\n    remainder_when_divided_by_11 = alternating_sum % 11\n    \n    # If the result after applying the rule happens to be 11 or -11,\n    # it is also divisible by 11.\n    if abs(alternating_sum) == 11:\n        is_divisible_by_11 = True\n        remainder_when_divided_by_11 = 0\n    \n    # George is not correct if the remainder_when_divided_by_11 is not 1\n    is_george_correct = (remainder_when_divided_by_11 == 1)\n    \n    # The correct answer would be the actual remainder\n    correct_remainder = number % 11\n    \n    return is_george_correct, correct_remainder\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Since multiplication has higher precedence than addition and subtraction,\n    # we first focus on the subtraction to minimize.\n    # To make the result smallest, we want to subtract as big a number as possible.\n    # This can be done by making the multiplication result as big as possible,\n    # then subtracting it from the addition result.\n    # We will try to insert brackets in a way that maximizes the multiplication term\n    # and then subtracts it from the sum of the other numbers.\n    \n    # Original equation: 15 + 5 * 5 + 15 - 6 + 7\n\n    # Inserting brackets to maximize the multiplication: 15 + (5 * 5) + (15 - 6) + 7\n    # Evaluates to: 15 + 25 + 9 + 7 = 56\n\n    # However, we can obtain a smaller result by evaluating a subtraction after a bracketed multiplication:\n    # Inserting brackets to have a large subtraction: (15 + 5) * (5 + 15) - 6 + 7\n    # Evaluates to: 20 * 20 - 6 + 7 = 400 - 6 + 7 = 401\n\n    # To minimize, we should ensure that we subtract the product of two numbers, like this:\n    # (15 + (5 * 5)) + (15 - (6 + 7))\n    # Evaluates to: (15 + 25) + (15 - 13) = 40 + 2 = 42\n    \n    ans = (15 + (5 * 5)) + (15 - (6 + 7))\n    return ans\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = (1/5) * total_bulbs\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    \n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    start_length = 2.06  # in meters\n    end_length = 78 / 100  # in meters (converted from cm)\n    \n    melted_length = start_length - end_length\n    return melted_length\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40 / 100\n    base_value = 650\n    ans = percentage * base_value\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    m = symbols('m')\n    equation = Eq(120 + m, 9 * (10 + m) - 2)\n    solution = solve(equation, m)\n    return solution[0]\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    ans = 3549 // 7\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    after_first_stop = initial_passengers - (2/5) * initial_passengers + 7\n    after_second_stop = after_first_stop - (1/4) * after_first_stop + 13\n\n    return int(after_second_stop)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    n_terms = int(10 / 0.5)\n    sum_of_series = (n_terms * (n_terms + 1) / 4) ** 2\n    return sum_of_series\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    # If the estimate is £35 to the nearest £5, the least amount the shopping bill could be is half-way between £30 and £35.\n    return 35 - 2.5\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let the number of years required be x\n    # The sum of their ages in x years will be (22 + 2x) since both will be older by x years\n    # We set the equation (22 + 2x) = 40 and solve for x\n    x = (40 - 22) // 2\n    return x\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for s1 in range(98, 103):  # s1 is the number of magazines ordered by school 1\n        for s2 in range(98, 103):  # s2 is the number of magazines ordered by school 2\n            s3 = 300 - s1 - s2   # s3 is the number of magazines ordered by school 3\n            if 98 <= s3 <= 102:  # Check if s3 is within the given range\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    # Initial amount of sugar in the bottle\n    initial_sugar_content_ml = 900 * 0.06\n    # Final desired sugar content in percentage\n    desired_sugar_content = 0.10\n    # Total volume of the bottle remains 900 ml\n    total_volume_ml = 900\n    \n    # Let x be the amount of sugar to be added\n    # The new amount of sugar will be initial_sugar_content_ml + x\n    # The new concentration will be (initial_sugar_content_ml + x) / total_volume_ml\n    # Set up the equation: (initial_sugar_content_ml + x) / total_volume_ml = desired_sugar_content\n    # Solve for x:\n    x = (desired_sugar_content * total_volume_ml) - initial_sugar_content_ml\n    \n    return x\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time Tim takes to complete writing the book by himself\n    t = symbols('t')\n    \n    # Nancy can complete 1/6 of the book per day\n    # Tim can complete 1/t of the book per day\n    # Together, they can complete 1/6 + 1/t of the book per day\n\n    equation = Eq(1/6 + 1/t, 1/4)  # Because together they complete the book in 4 days\n\n    solutions = solve(equation, t)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and pencils % 3 == 2 and pencils % 4 == 3 and pencils % 5 == 4):\n            return pencils\n        else:\n            pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    cost_per_bar = 50\n    number_of_bars = 4\n    total_cost = cost_per_bar * number_of_bars\n    return total_cost\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    result = (3/7) * 385\n    return result\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean = 12\n    sum_numbers = mean * (len(numbers) + 1)  # mean * total number of terms\n    a = sum_numbers - sum(numbers)  # subtract the sum of the known numbers from the total sum to find a\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds for uniformity\n    light1_cycle = 1 * 60  # 1 minute\n    light2_cycle = 1.5 * 60  # 1.5 minutes\n    combined_cycle = 9 * 60  # 9 minutes\n\n    # At least 30 seconds for the third light\n    min_third_light_cycle = 30  # 30 seconds\n\n    # Least common multiple of the first two lights\n    lcm_two_lights = lcm(light1_cycle, light2_cycle)\n\n    # Since we want the three lights to synchronize every 9 minutes, we need to find the smallest\n    # cycle time for the third light that is at least 30 seconds and also divides evenly into the 9-minute cycle.\n    for third_light_cycle in range(min_third_light_cycle, combined_cycle + 1):\n        lcm_three_lights = lcm(lcm_two_lights, third_light_cycle)\n        if lcm_three_lights == combined_cycle:\n            return third_light_cycle\n\n    return None\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Here we will convert all the lengths to the same unit for comparison, we choose centimeters.\n    pink_length = 2.5 * 100  # Convert meters to centimeters\n    blue_length = 220        # Already in centimeters\n    orange_length = 30.5     # Already in centimeters\n\n    # Compare the lengths and find the longest ribbon\n    longest_length = max(pink_length, blue_length, orange_length)\n\n    # Determine which ribbon corresponds to the longest length\n    if longest_length == pink_length:\n        return \"pink\"\n    elif longest_length == blue_length:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    prepare_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = prepare_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    paid_price = 75\n    discount = 0.50  # 50% discount\n    original_price = paid_price / (1 - discount)\n\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_people_red = 3 * 10\n    total_people_blue = 12 * 15\n    total_people_green = 15 * 20\n    \n    total_cars = 3 + 12 + 15\n    total_people = total_people_red + total_people_blue + total_people_green\n    \n    average_people_per_car = total_people / total_cars\n    \n    return average_people_per_car\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Eleanor's travel time from the point they met to City G\n    eleanor_travel_time_to_g = 1.5\n\n    # Eleanor's total travel time from City F to City G\n    eleanor_total_travel_time = 4\n\n    # Eleanor's travel time from City F to the meeting point with Rachel\n    eleanor_travel_time_to_meet = eleanor_total_travel_time - eleanor_travel_time_to_g\n\n    # Rachel's speed is known\n    rachel_speed = 84  # km/h\n\n    # Rachel's distance to City F when Eleanor reached City G\n    rachel_distance_to_f = 39  # km\n\n    # Calculating the distance Rachel traveled from the meeting point to her current position\n    rachel_distance_from_meet = rachel_speed * eleanor_travel_time_to_g\n\n    # The distance between the meeting point and City F is Rachel's distance from meet plus the remaining distance to F\n    distance_meet_to_f = rachel_distance_from_meet + rachel_distance_to_f\n\n    # Eleanor's speed can be calculated using the distance from City F to the meeting point which is same as Rachel's distance from the meeting point to City F\n    eleanor_speed = distance_meet_to_f / eleanor_travel_time_to_meet\n\n    # Now calculate the total distance from City F to City G using Eleanor's speed and total travel time\n    distance_f_to_g = eleanor_speed * eleanor_total_travel_time\n\n    return distance_f_to_g\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert the total mass of the sauce to grams for simplicity\n    total_mass_grams = 172000  # 172 kg in grams\n\n    # Mass for each packet of ingredients P, Q and R \n    mass_P = 300  # in grams\n    mass_Q = 400  # in grams\n    mass_R = 500  # in grams\n\n    # The ratio of the number of packets of ingredients P, Q, and R\n    ratio_P = 7\n    ratio_Q = 3\n    ratio_R = 2\n\n    # Calculate the total ratio units\n    total_ratio_units = ratio_P + ratio_Q + ratio_R\n\n    # Calculate the mass for one ratio unit\n    mass_per_ratio_unit = total_mass_grams / total_ratio_units\n\n    # Calculate the number of packets for each ingredient based on ratio and mass per ratio unit\n    packets_P = (mass_per_ratio_unit * ratio_P) / mass_P\n    packets_Q = (mass_per_ratio_unit * ratio_Q) / mass_Q\n    packets_R = (mass_per_ratio_unit * ratio_R) / mass_R\n\n    # Calculate total number of packets used\n    total_packets = packets_P + packets_Q + packets_R\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    def calculate_odot(a, b):\n        return sum(a * int(str(a) * i) for i in range(1, b + 1))\n\n    ans = calculate_odot(4, 3)\n    return ans\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollar_price = 64\n    exchange_rate = 1.25\n    us_dollar_price = canadian_dollar_price / exchange_rate\n    return us_dollar_price\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # s for number of shelves, p1 for position from front, p2 for position from back\n    s, p1, p2 = symbols('s p1 p2')\n    \n    # The position from the front plus the position from the back should equal the number of shelves plus one\n    equation = Eq(p1 + p2, s + 1)\n    \n    # Solve for the total number of shelves 's' given positions of the book\n    number_of_shelves = solve(equation.subs({p1: 8, p2: 10}), s)\n    \n    return number_of_shelves[s]\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    for lowest_score in range(1, 100):\n        # Assuming the scores are in increasing order and distinct\n        scores = [lowest_score, lowest_score+1, lowest_score+2, lowest_score+3, lowest_score+4]\n        if sum(scores) / 5 == 90:\n            return lowest_score\n    \nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rope_b = symbols('rope_b')\n    # Rope A is 3 times Rope B\n    rope_a = 3 * rope_b\n    # Rope C is 56cm longer than Rope B\n    rope_c = rope_b + 56\n    # Rope A is 130cm (1m 30cm) longer than Rope C\n    equation = Eq(rope_a, rope_c + 130)\n    \n    # Solve for Rope B\n    rope_b_length = solve(equation, rope_b)[0]\n    \n    # Calculate lengths of Rope A and Rope C\n    rope_a_length = rope_a.subs(rope_b, rope_b_length)\n    rope_c_length = rope_c.subs(rope_b, rope_b_length)\n    \n    # Total length of the three ropes\n    total_length = rope_a_length + rope_b_length + rope_c_length\n    \n    return total_length.evalf()\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_num = max(numbers)\n    smallest_num = min(numbers)\n    \n    ans = (2 * largest_num) - (3 * smallest_num)\n    return ans\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial\n\ndef solution():\n    total_letters = 5\n    string_length = 3\n    favorable_outcomes = factorial(total_letters - 2) # Fixing A and B, arrange the remaining letter\n    total_possible_outcomes = factorial(total_letters) / factorial(total_letters - string_length)\n    probability = favorable_outcomes / total_possible_outcomes\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    total_members = 50 + 70\n    student_males = 0.16 * 50\n    student_females = 0.10 * 70\n    total_students = student_males + student_females\n    percentage_of_students = (total_students / total_members) * 100\n    return percentage_of_students\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    volume1 = 200\n    concentration1 = 0.35\n\n    volume2 = 300\n    concentration2 = 0.50\n\n    total_volume = volume1 + volume2\n    total_concentration = (volume1 * concentration1 + volume2 * concentration2) / total_volume\n    \n    return total_concentration * 100\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    proportion = 3 / 4\n    x = 48 * proportion\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_initial = 37\n    john_initial = 15\n    amy_final = john_initial + 4\n    apples_to_give = amy_initial - amy_final\n\n    return apples_to_give\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the original number of papers she plans to mark each hour\n    x = symbols('x')\n\n    # After working for one hour, she has 4 hours left\n    # According to the problem, she has to mark 6 more papers per hour than originally planned\n    # This gives us the equation: 4*(x+6) + x = total_papers\n\n    # If she marks 10 more papers per hour, she can finish in 3 hours instead of 5\n    # This gives us the equation: 3*(x+10) + x = total_papers\n\n    # Both equations are equal to total_papers\n    # Setting them equal to each other and solving for x:\n    equation = Eq(4*(x+6) + x, 3*(x+10) + x)\n\n    # Solve the equation for 'x'\n    solved_x = solve(equation, x)\n\n    # Now we substitute the found value of 'x' back into one of the equations to find the total number of papers\n    total_papers = 4*(solved_x[0] + 6) + solved_x[0]\n\n    return total_papers\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n    \n    # (1) What fraction of the chicken pies more than vegetable pies?\n    more_chicken_than_vegetable = chicken_pies - vegetable_pies\n    frac_more_chicken = Fraction(more_chicken_than_vegetable, chicken_pies)\n    \n    # (2) What fraction of the vegetable pies less than fruit pies?\n    less_vegetable_than_fruit = fruit_pies - vegetable_pies\n    frac_less_vegetable = Fraction(less_vegetable_than_fruit, vegetable_pies)\n    \n    ans = (frac_more_chicken, frac_less_vegetable)\n    return ans\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    given_away = 7\n    markers_left = total_markers - given_away\n\n    number_of_bags = markers_left // 5\n\n    return number_of_bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    # Combined age of the 2 dogs 4 years ago\n    combined_age_4_years_ago = 10\n\n    # Each year both dogs get older by 1 year each, so together they get older by 2 years each year\n    # 4 years ago + 4 * 2 (1 year for each dog per year for 4 years) + 2 * 2 (1 year for each dog for the next 2 years)\n    combined_age_in_2_years = combined_age_4_years_ago + 4 * 2 + 2 * 2\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 since 'ab' is a 2-digit number\n        for b in range(10):  # 'b' can be 0-9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    meal_cost = 55\n    tip_percent = 0.20\n    tax_percent = 0.10\n\n    tip = meal_cost * tip_percent\n    tax = meal_cost * tax_percent\n\n    total_cost = meal_cost + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    ans = sum(sum_of_digits(page) for page in range(1, 208))\n    return ans\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3/4\n    total_designs = made_designs / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds place cannot have a 0\n        for tens in range(10):  # Tens place can have a 0\n            for ones in range(10):  # Ones place can have a 0\n                if hundreds + tens + ones == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the costs\n    total_money = symbols('total_money')\n    cost_per_cap = symbols('cost_per_cap')\n    cost_per_wristband = symbols('cost_per_wristband')\n    \n    # Conditions from the problem\n    condition_1 = Eq(cost_per_cap, 3 * cost_per_wristband)\n    # Caleb spent 2/5 of his money on 4 caps and 6 wristbands\n    condition_2 = Eq((4 * cost_per_cap + 6 * cost_per_wristband), 2/5 * total_money)\n    # Caleb spent 1/3 of his remaining money (which is 3/5 of his money)\n    # on additional caps\n    remaining_money = 3/5 * total_money\n    additional_caps_money = 1/3 * remaining_money\n    condition_3 = Eq(additional_caps_money, cost_per_cap * symbols('additional_caps'))\n\n    # Solve the system of equations\n    solutions = solve((condition_1, condition_2, condition_3), \n                      (total_money, cost_per_cap, cost_per_wristband, symbols('additional_caps')))\n    \n    # Calculate the total number of caps bought (initial + additional)\n    initial_caps = 4\n    additional_caps = solutions[symbols('additional_caps')]\n    total_caps = initial_caps + additional_caps\n\n    return total_caps\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Use the law of conservation of energy where potential energy at 3000m will be equal to the kinetic energy at 2000m.\n    # Let v be the velocity of the skydiver at 2000m above the ground.\n    v = symbols('v')\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Potential energy at 3000m (mgh, with h = 3000-2000)\n    PE_3000 = g * 1000\n\n    # Kinetic energy at 2000m (1/2 * m * v^2, ignoring mass since it will cancel out)\n    KE_2000 = (1/2) * v**2\n\n    # Energy conservation equation: PE_3000 = KE_2000\n    equation = Eq(PE_3000, KE_2000)\n\n    # Solve for v\n    solution_v = solve(equation, v)\n\n    # There will be two solutions, one positive and one negative. We'll take the positive since velocity cannot be negative.\n    velocity_at_2000m = max(solution_v)\n\n    return velocity_at_2000m.evalf()  # Evaluate the expression to a floating-point number.\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # We want to ensure that we always get 4 cards with consecutive numbers, regardless of suit\n    # If we draw one card from each number, we have 13 draws, but no guarantee of consecutive numbers\n    # If we draw one more card, we may or may not have a consecutive pair\n    # With each additional card drawn, we increase the chance of getting a consecutive set\n    # We need to draw enough cards to cover the worst-case scenario, which means we have to consider the gaps\n    # The worst case is having a gap of one card between each draw, meaning each consecutive draw starts after a potential sequence\n\n    # Since we want a sequence of 4, the worst case would be having a card,\n    # then a gap, then another card, and so on, until we reach a point where the next card guarantees a sequence\n    # The pattern would look like: card, gap, card, gap, card, gap, card, [next card starts the sequence]\n    # This pattern requires drawing up to the 10th number to ensure a sequence of 4 consecutive cards\n\n    # Adding one because after drawing the 10th card, we need one more to ensure the sequence\n    return (3 * 10) + 1  # Multiply by 3 because there are 4 suits and we add 1 to ensure the next drawn card creates the sequence\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0245689', 7):  # We need to fill the slots B, D, E, F, H, I, J\n        if perm[0] != '0':  # Ensure B != 0 because numbers cannot start with 0\n            num = '3{}1{}{}{}7{}{}{}'.format(*perm)\n            if all(int(num[:i]) % i == 0 for i in range(1, 11)):\n                return tuple(map(int, num))\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    three_years_ago = ashley_age - 3\n    brother_age = three_years_ago - 2\n    return brother_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    def actual_page_to_printed_page(n):\n        # Determine the number of omissions before the current page\n        omissions = (n - 1) // 3\n        # Calculate the printed page number\n        return n + omissions\n    \n    # Start with the highest possible printed page number\n    printed_page = 89\n    # Find the first actual page that corresponds to a printed page number higher than 89\n    while actual_page_to_printed_page(printed_page) > 89:\n        printed_page -= 1\n        \n    return printed_page\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        total_sales = adults * 5 + children * 3\n        if total_sales == 75:\n            return adults\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // 15  # Count multiples of both 3 and 5 (LCM of 3 and 5) using the inclusion-exclusion principle\n\n    ans = count_3 + count_5 - count_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_future = 20\n    grandma_age_future = 60\n\n    # Calculate the difference in age between now and the future for Tom\n    tom_age_difference = tom_age_future - tom_age_now\n    \n    # Since the age difference will be the same for Grandma, subtract it from her future age.\n    grandma_age_now = grandma_age_future - tom_age_difference\n\n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of students in class B be b.\n    # Then the number of students in class A is 2b.\n    # Let the total number of candies be c.\n    b, c = symbols('b c')\n\n    # If each student in class A gets 4 candies, 20 more candies are needed.\n    # So the total number of candies needed for class A is 4 * 2b + 20.\n    # If each student in class B gets 6 candies, there will be 16 candies left.\n    # So the total number of candies Miss Jenny has is 6 * b + 16.\n\n    # Setting up the equations based on the above information.\n    equation1 = Eq(4 * 2 * b + 20, c)  # Equation for class A.\n    equation2 = Eq(6 * b + 16, c)      # Equation for class B.\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (b, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    count = 0\n    # enumerate the number of ten-pence coins used\n    for ten in range(6):  # Jeremy has 5 ten-pence coins\n        for twenty in range(4):  # Jeremy has 3 twenty-pence coins\n            for fifty in range(2):  # Jeremy has 1 fifty-pence coin\n                if ten * 10 + twenty * 20 + fifty * 50 == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # If you want to be sure to get 2 stickers of the same color,\n    # you must consider the worst case scenario.\n    # This is like the pigeonhole principle, where each color (red, green) represents a pigeonhole.\n    # Worst case scenario:\n    #   - You take 1 red (1st sticker),\n    #   - You take 1 green (2nd sticker),\n    #   - To ensure you get two of the same color, take one more sticker (3rd sticker).\n    # No matter the color of the 3rd sticker, you will have two of the same color.\n   \n    return 3\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Taking the worst case scenario using the Pigeonhole Principle\n    # To not get 4 balls of the same color, she could take:\n    # - All 4 orange balls\n    # - 3 blue balls (the fourth would make 4 of the same color)\n    # - 3 yellow balls (there are only 2, so this guarantees the fourth ball)\n    # Total balls taken so far: 4 (orange) + 3 (blue) + 3 (yellow) = 10\n    # The next ball she takes must result in 4 balls of the same color\n    # So she needs to take out 1 more ball after the 10\n  \n    balls_needed = 10 + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    ducklings_legs = 4 * 2  # Each duckling has 2 legs and there are 4 ducklings\n    geese_legs = 2 * 2      # Each baby goose has 2 legs and there are 2 baby geese\n    total_known_legs = ducklings_legs + geese_legs  # Total legs of ducklings and geese\n    remaining_legs = 36 - total_known_legs  # Remaining legs for the lambs\n    lamb_legs = 4                          # Each lamb has 4 legs\n    num_lambs = remaining_legs // lamb_legs  # Number of lambs\n\n    return num_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    teams = 5\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation 1: There were three times as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n\n    # Equation 2: Total sweets received by boys and girls\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Layer 1 (Top layer) has 1^2 = 1 box\n    layer1 = 1**2\n    # Layer 2 has 2^2 = 4 boxes\n    layer2 = 2**2\n    # Layer 3 has 3^2 = 9 boxes\n    layer3 = 3**2\n    # Total number of boxes is the sum of boxes in all three layers\n    total_boxes = layer1 + layer2 + layer3\n    \n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_a = 600 * (3/5)\n    good_copies_needed_b = 600 * (2/5)\n\n    total_copies_a = good_copies_needed_a * (5/4)\n    total_copies_b = good_copies_needed_b * (6/5)\n\n    total_copies_needed = total_copies_a + total_copies_b\n\n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    expr1 = (1.2 + 1.23 + 1)\n    expr2 = (1.2 + 1.23)\n\n    ans = expr1 * expr1 - expr1 * expr2\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 200):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    total_smiles = smiles_per_day * days_in_january\n    return total_smiles\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    ans = int(math.sqrt(40))\n    return ans\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Annie's sugar amount\n    sugar_annie = 300 * 0.15\n    # Becky's sugar amount\n    sugar_becky = 400 * 0.25\n    # Carol's sugar amount\n    sugar_carol = 300 * 0.35\n\n    # The total sugar\n    total_sugar = sugar_annie + sugar_becky + sugar_carol\n    # The total solution weight\n    total_solution = 300 + 400 + 300\n\n    # The resulting concentration\n    concentration = total_sugar / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # Initial drop height in meters\n    bounce_height = initial_height / 2  # Height after first bounce\n    total_distance = initial_height + 2 * bounce_height  # Distance after second bounce\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1/6\n    expected_number_of_fives = total_rolls * probability_of_five\n\n    return expected_number_of_fives\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for i in range(999, 99, -1):\n        if i % 36 == 0:\n            return i\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time the son takes to harvest the crops alone\n    x = symbols('x')\n    \n    # Farmer's work rate\n    farmer_work_rate = 1 / 24\n    # Son's work rate\n    son_work_rate = 1 / x\n    # Combined work rate when both are working together\n    combined_work_rate = farmer_work_rate + son_work_rate\n    # They complete the work in 16 hours when working together\n    work_done_together = combined_work_rate * 16\n    \n    # The son works alone for 6 hours\n    work_done_by_son_alone = son_work_rate * 6\n    \n    # Equation is based on the total work done\n    equation = Eq(work_done_together + work_done_by_son_alone, 1)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange all five children\n    total_arrangements = factorial(5)\n\n    # Number of ways when Hugh is between Louise and Richard (we treat them as one unit)\n    # First we arrange the three units (Hugh and Louise-Richard as one unit, and the other two children)\n    between_arrangements = factorial(3) * factorial(3)\n\n    # The number of valid arrangements is the total arrangements minus the invalid ones\n    valid_arrangements = total_arrangements - between_arrangements\n\n    return valid_arrangements\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # Since the team lost 10 matches, we deduce that the fractions 2/5 and 7/20 refer\n    # to the remaining matches played. The total matches played can be found by\n    # adding the fractions of wins and draws and converting to a common denominator.\n\n    # Convert win and draw fractions to have a common denominator (e.g., 20)\n    win_fraction = (2 / 5) * (4 / 4)   # Simplified to 8/20 to have the same denominator\n    draw_fraction = 7 / 20\n\n    # Since the team lost 10 matches, these do not contribute to the score and thus\n    # the total fraction representing all matches is the sum of the win and draw\n    # fractions, giving us 1 or a whole.\n    all_matches_fraction = win_fraction + draw_fraction\n\n    # Find total matches played\n    total_matches = 10 / (1 - all_matches_fraction)\n\n    # Calculate points\n    points_from_wins = (total_matches * win_fraction) * 3\n    points_from_draws = (total_matches * draw_fraction) * 1\n\n    # Total points is the sum of points from wins and draws\n    total_points = points_from_wins + points_from_draws\n\n    return int(total_points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Johnny's initial steps\n    quotient = 9\n    remainder = 2\n    wrong_multiplier = 9  # Error: This should be the quotient, not the remainder\n    divisor = 4\n    \n    # Johnny's incorrect calculation\n    wrong_total = (wrong_multiplier * remainder) + divisor\n    \n    # Finding the correct dividend\n    correct_total = (quotient * divisor) + remainder\n    \n    # Checking if Johnny's answer is correct\n    is_correct = wrong_total == correct_total\n    \n    return correct_total, is_correct\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    total = 0\n    for i in range(2, 41, 2):\n        if i % 4 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = 4 * 75 + 3 * 95  # Total cost in pence\n    amount_paid = 10 * 100  # Amount paid in pence (£10 note)\n    change_received = amount_paid - total_cost  # Change in pence\n\n    return change_received / 100  # Change in pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n    \n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n    \n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_numbers = 8\n    mean_of_all = 555\n    total_sum_all = total_numbers * mean_of_all\n    \n    # Let mean_of_first_3 be the mean of the first 3 numbers\n    # Let mean_of_last_5 be the mean of the last 5 numbers\n    mean_of_first_3 = mean_of_total = mean_of_all * total_numbers  # Total sum of all 8 numbers\n    \n    # mean_of_first_3 is mean_of_last_5 - 296\n    mean_of_last_5 = symbols('mean_of_last_5')\n    \n    equation1 = Eq(mean_of_first_3, 3 * (mean_of_last_5 - 296))\n    equation2 = Eq(mean_of_total, 3 * (mean_of_last_5 - 296) + 5 * mean_of_last_5)\n    \n    solution = solve((equation1, equation2), mean_of_last_5)\n    \n    return int(solution[mean_of_last_5])\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    last_number = 100\n    multiple_of_two = 2\n    \n    number_of_multiples = last_number // multiple_of_two\n    \n    return number_of_multiples\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Vicky has 99 stickers. She has 3 less than 6 times as many stickers as Timmy.\n    # Vicky = 6 * Timmy - 3\n    vicky = 99\n    \n    # Kevin has 32 more stickers than Timmy.\n    # Kevin = Timmy + 32\n    \n    # Define the symbol\n    timmy = symbols('timmy')\n    \n    # Define the equation based on the problem statement\n    equation = Eq(6*timmy - 3, vicky)\n    \n    # Solve the equation to find the number of stickers Timmy has\n    timmy_stickers = solve(equation, timmy)[0]\n    \n    # Calculate the number of stickers Kevin has\n    kevin_stickers = timmy_stickers + 32\n    \n    return kevin_stickers\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    # If five people can build a bridge in 15 days,\n    # they can build 1/15 of a bridge per day collectively.\n    bridge_per_day_five_people = 1 / 15\n\n    # If we want to build the same bridge in 5 days,\n    # we need to build 1/5 of a bridge per day collectively.\n    bridge_per_day_required = 1 / 5\n\n    # The number of people is directly proportional to the amount of work that can be done.\n    # Therefore, the number of people needed is 5 * (1/5) / (1/15)\n    # which simplifies to 5 * (15/5) = 5 * 3\n    people_needed = 5 * (bridge_per_day_required / bridge_per_day_five_people)\n\n    # To find out how many more people are needed, subtract the original 5 people.\n    additional_people_needed = people_needed - 5\n\n    return additional_people_needed\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position_from_front = 3\n    children_between_pip_and_bud = 5\n    bud_position_from_front = pip_position_from_front + children_between_pip_and_bud + 1\n\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(rasidah * 2/5, chai_seng * 1/7 / 2)\n    \n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n    years_ago = symbols('years_ago')\n\n    # Equation: isaac_current_age - years_ago = 1/3 * (mother_current_age - years_ago)\n    equation = Eq(isaac_current_age - years_ago, 1/3 * (mother_current_age - years_ago))\n    solution = solve(equation, years_ago)\n\n    return solution[0]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    conversion_rate = 2.2\n    kg = pounds / conversion_rate\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    coins = [5, 10, 20, 50, 100]  # Values of coins in pence\n    total_spent = 500 - sum(coins) # 500 pence in a five pound note\n    return total_spent\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8  # Elena's speed in m/s\n    cat_speed = 3    # Cat's speed in m/s\n    distance_behind = 500  # Distance behind in meters\n\n    # Relative speed of Elena with respect to her cat\n    relative_speed = elena_speed - cat_speed\n    \n    # Time taken for Elena to catch up to her cat\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n-r)\n\n    # There are 3 choices for the first digit, 2 for the second, and 1 for the third\n    count = permutations(3, 3)\n\n    return count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for prime in range(1, 21):\n        if isprime(prime) and isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i + 1] - differences[i] for i in range(len(differences) - 1)]\n    \n    # Since it's a double arithmetic sequence, the second differences should be constant\n    constant_second_difference = second_differences[0]\n    \n    # Calculate the next first difference by adding the constant second difference\n    next_difference = differences[-1] + constant_second_difference\n    \n    # Calculate the next number in the sequence\n    next_number = 50 + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from math import factorial\n\n    # For an even number, the last digit must be 2 or 4 (two choices)\n    last_digit_options = 2\n\n    # There are 4 options for the first digit (can't be 0)\n    first_digit_options = 4\n\n    # For the remaining three spots, we have permutations of 3 digits\n    remaining_permutations = factorial(3)\n\n    # Total ways is product of all options\n    total_ways = last_digit_options * first_digit_options * remaining_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for units_digit in range(10):\n            if tens_digit + units_digit == 15:\n                return tens_digit * 10 + units_digit\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_mean_weight = 50\n    new_mean_weight = 52\n    number_of_apples_initially = 8\n    number_of_apples_after = 9\n\n    total_weight_initially = initial_mean_weight * number_of_apples_initially\n    total_weight_after = new_mean_weight * number_of_apples_after\n    weight_of_extra_apple = total_weight_after - total_weight_initially\n\n    return weight_of_extra_apple\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    from math import sqrt\n\n    count = 0\n    for i in range(1, 251):\n        if int(sqrt(i)) == sqrt(i):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -(4**2)\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    # Let x be the number of pages in the document\n    # Let t be the time it takes for the photocopier to finish at the initial speed\n    # Initial rate is 50 pages/min, so the time to finish x pages is x / 50 = t\n    # New rate is 50 + 20 = 70 pages/min, so the time to finish is x / 70 = t - 2\n    # Setting up the equations:\n    # x = 50t and x = 70(t - 2)\n    # Equating both expressions for x gives us:\n    # 50t = 70(t - 2)\n    \n    # Solve for t\n    t = symbols('t')\n    equation = Eq(50*t, 70*(t - 2))\n    time_original = solve(equation, t)[0]\n    \n    # Now calculate the number of pages\n    pages = 50 * time_original\n    \n    return int(pages)\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    # Max's purchase: 1 banana + 3 pears = 84p\n    equation1 = Eq(banana + 3 * pear, 84)\n    \n    # Emily's purchase: 1 banana + 1 pear = 48p\n    equation2 = Eq(banana + pear, 48)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2013, 1, 28)  # January 28th, 2013\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n    \n    next_date = start_date + one_year  # January 28th, 2014\n    while next_date.weekday() != 0:  # 0 is Monday\n        if next_date.year % 4 == 0 and (next_date.year % 100 != 0 or next_date.year % 400 == 0):\n            next_date += one_year + one_day  # Leap year\n        else:\n            next_date += one_year  # Non-leap year\n            \n    return next_date.year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for dividend in range(1, 100):\n        for divisor in range(1, dividend):\n            quotient, remainder = divmod(dividend, divisor)\n            if quotient == 8 and remainder == 7:\n                return dividend, divisor\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    # Using the sympy library to apply the Chinese Remainder Theorem\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences can be represented by the following tuple of tuples (remainder, modulus)\n    congruences = ((2, 4), (3, 5), (6, 9))\n\n    # Applying the Chinese Remainder Theorem to find the smallest positive integer that satisfies all congruences\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Star jogs for 1 hour from 6:30 am to 7:30 am at 6 miles per hour\n    distance_jogging = 6 * 1\n\n    # Star walks for 2 hours from 7:30 am to 9:30 am at 5 miles per hour\n    distance_walking = 5 * 2\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    amount_left = (original_amount + (saved_per_day * days_saved)) - (lent_to_brother + spent_on_snacks)\n\n    return amount_left\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_meters = 900\n    companies = 4\n    days = 5\n    \n    meters_per_company_per_day = total_meters / (companies * days)\n    \n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    number_of_members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / number_of_members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_cost = 0.80  # base cost for up to 15 minutes\n    cost_per_extra_minute = 0.05  # cost for each additional minute\n    total_cost = 1.4  # Ryan's total cost\n\n    if total_cost <= base_cost:\n        # If total cost is less than or equal to base cost, the call did not exceed 15 minutes\n        minutes = 15\n    else:\n        # If total cost is more than base cost, calculate additional minutes\n        extra_cost = total_cost - base_cost  # extra cost\n        extra_minutes = extra_cost / cost_per_extra_minute  # number of extra minutes\n        minutes = 15 + extra_minutes\n\n    return int(minutes)\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # Since we only care about the last digit, we find the last digit after exponentiation of single digits\n    last_digit_2 = (2 ** 2017) % 10  # Last digit of 2^2017\n    last_digit_3 = (3 ** 2017) % 10  # Last digit of 3^2017\n\n    # Now we find the last digit of the product of these two numbers\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Define a function for the custom operation\n    def custom_operation(a, b):\n        return a + b - (a % 10 + b % 10)\n    \n    # Use the custom operation to find the result for 9 ◈ 20\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(((x - 4) / 2) + 11, 37)\n\n    first_number = solve(equation, x)\n\n    return first_number[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    dividend = 3549\n    divisor = 7\n\n    quotient = dividend // divisor\n\n    return quotient\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(10 - 2*x + 7*x, 35)\n    sol = solve(equation, x)\n    \n    return sol[x]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age when James was 20:\n    # On 10th May 1997, Gina's birth year is 1955 (2005-50), so her age is 1997-1955 = 42.\n    gina_age_when_james_20 = 1997 - (2005 - 50)\n    \n    # Age difference between Gina and James is always constant:\n    age_difference = gina_age_when_james_20 - 20\n    \n    # James's age when Gina was 35:\n    james_age_when_gina_35 = 35 - age_difference\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    series = [0.5 * i for i in range(1, 21)]  # The series 0.5, 1, 1.5, ..., 10\n    sum_of_series = sum(series)\n    ans = sum_of_series**2\n    return ans\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position_front = 5\n    eddie_position_back = 9\n    people_between = 2\n\n    # Calculate the total number of people\n    total_people = (lucy_position_front - 1) + people_between + 1 + (eddie_position_back - 1)\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(0, 10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    from sympy import isprime\n\n    # Initialize the smallest number\n    num = 1\n\n    while True:\n        # Find the remainders when divided by 3, 5, 7, 8\n        r3 = num % 3\n        r5 = num % 5\n        r7 = num % 7\n        r8 = num % 8\n\n        # Check if all remainders are prime and distinct\n        remainders = [r3, r5, r7, r8]\n        if all(isprime(r) for r in remainders) and len(set(remainders)) == 4:\n            return num\n        else:\n            # Increment number to test the next one\n            num += 1\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11*100 + 74  # convert total length to cm\n    dress_length_cm = 5*100 + 8    # convert dress length to cm\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n\n    # Now convert back to meters and centimeters\n    stripe_length_m = stripe_length_cm // 100\n    stripe_length_rem_cm = stripe_length_cm % 100\n\n    return (stripe_length_m, stripe_length_rem_cm)\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    result = 35\n    added_value = 21\n    multiplier = 7\n    initial_addition = 4\n    \n    initial_result = (result + added_value) / multiplier\n    original_number = initial_result - initial_addition\n    \n    return original_number\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    total_flowers = 3616\n    sold_flowers = total_flowers - 2644\n\n    # Equations based on the problem\n    ratio_eq = Eq(orchids / tulips, 3 / 5)\n    sold_eq = Eq(0.4 * orchids + tulips / 5 + 0.25 * roses, sold_flowers)\n    total_eq = Eq(orchids + tulips + roses, total_flowers)\n\n    # Solving the system of equations\n    solutions = solve((ratio_eq, sold_eq, total_eq), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    boys = total_pupils - girls\n    right_handed_boys = min(boys, right_handed)\n    right_handed_girls_min = right_handed - right_handed_boys\n\n    return right_handed_girls_min\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let tim be the time it takes for Tim to write the book by himself\n    tim = symbols('tim')\n\n    # Nancy's rate of writing is 1 book per 6 days\n    # Tim's rate of writing is 1 book per tim days\n    # Together their combined rate is 1 book per 4 days\n\n    # Equation representing their combined work\n    equation = Eq(1/6 + 1/tim, 1/4)\n\n    # Solve for tim\n    tim_value = solve(equation, tim)\n\n    return tim_value[0]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    books, files = symbols('books files')  # Represent the number of books and files using symbols\n\n    # Create equations based on the problem statement\n    equation1 = Eq(12*books + 9*files, 336)  # Total cost equation\n    equation2 = Eq(books, files + 14)        # Books are 14 more than files\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    total_animals = 10\n    total_legs = 34\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    ones_digits = [pow(i, 2013, 10) for i in range(1, 10)]\n    return sum(ones_digits) % 10\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Peter can take one red, one blue, and one black sock without getting a matching pair\n    # The next sock Peter takes out must be the same colour as one he already has\n    return 1 + 1 + 1 + 1  # Three single socks of different colors + 1 sock to guarantee a pair\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Amy's starting time in Japan\n    departure_time_japan = datetime(year=2023, month=7, day=2, hour=20, minute=0)\n\n    # Amy's arrival time in France\n    arrival_time_france = datetime(year=2023, month=7, day=3, hour=1, minute=0)\n    \n    # Adjust France time to Japan time zone (which is 7 hours ahead)\n    arrival_time_japan = arrival_time_france + timedelta(hours=7)\n    \n    # Calculate the duration of the flight\n    flight_duration = arrival_time_japan - departure_time_japan\n    \n    # Flight duration in hours\n    return flight_duration.total_seconds() / 3600\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[diamond] + solutions[square]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 132):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    score = 168\n    \n    # Assume x is the number of correct questions\n    correct_marks = 4\n    wrong_marks = 1\n\n    # Score for correct question is 4x\n    # Score for wrong question is attempted_questions-x since each wrong question reduces 1 mark\n    # Set up the equation 4x - (attempted_questions - x) = total score\n    x = symbols('x')\n    equation = Eq(4 * x - (attempted_questions - x), score)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # There are two places to fill, tens and units.\n    # For the tens place, we cannot use 0, so we have only 1 and 2, which gives us 2 options.\n    # For the units place, we can use 0, 1, or 2, which gives us 3 options.\n    # Using the multiplication principle, we multiply the number of choices for each place.\n    \n    tens_place_options = 2  # Can choose 1 or 2\n    units_place_options = 3  # Can choose 0, 1, or 2\n    \n    # Total number of 2-digit numbers\n    total_numbers = tens_place_options * units_place_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    for i in range(200):\n        if i % 2 == 0:\n            if i + (i + 2) + (i + 4) + (i + 6) + (i + 8) == 200:\n                return i\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    ans = 0\n    numerator = 1\n    denominator = 1\n    for i in range(0, 4):\n        numerator *= (100 - i)\n        denominator *= (97 - i)\n        ans += numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie needs 8 minutes to make 4 cuts to divide the wood into 5 sections.\n    # Hence, she needs 2 minutes per cut (8 minutes / 4 cuts).\n    minutes_per_cut = 8 / 4\n\n    # To cut the wood 6 times, she will need 6 * minutes_per_cut.\n    total_minutes = 6 * minutes_per_cut\n\n    return total_minutes\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    votes_for_peter = 35\n    votes_for_mark = 22\n    votes_for_nicole = 27\n    remaining_votes = total_votes - (votes_for_peter + votes_for_mark + votes_for_nicole)\n\n    # In the worst case, all remaining votes go to the competitors, equally distributed\n    # Peter needs one more vote than the sum of half of the remaining votes evenly distributed\n    # to Mark and Nicole to secure a lead.\n    additional_votes_needed = (remaining_votes // 2) + 1\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys - 7)\n    equation2 = Eq(boys + girls, 995)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    # Extract the units of each number\n    units_31 = 31 % 10\n    units_32 = 32 % 10\n\n    # Compare the units and return the number with the higher units value\n    if units_31 > units_32:\n        ans = 31\n    else:\n        ans = 32\n\n    return ans\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable x as the amount of sugar solution transferred in grams.\n    x = symbols('x')\n\n    # The amount of sugar in container A before transfer: 50g * 10% = 5g.\n    # After transferring x g of sugar solution: (5 - 0.1 * x) g of sugar in (50 - x) g of water.\n    # The concentration of sugar in container A after transfer: (5 - 0.1 * x) / (50 - x).\n\n    # The amount of sugar in container B before transfer: 30g * 20% = 6g.\n    # After transferring x g of sugar solution: (6 - 0.2 * x) g of sugar in (30 - x) g of water.\n    # The concentration of sugar in container B after transfer: (6 - 0.2 * x) / (30 - x).\n\n    # Set up the equation where the concentration of sugar in both containers is the same.\n    equation = Eq((5 - 0.1 * x) / (50 - x), (6 - 0.2 * x) / (30 - x))\n\n    # Solve the equation for x.\n    solution = solve(equation, x)\n\n    # Return the volume of sugar solution transferred in grams (assuming only positive solution is valid).\n    ans = [sol.evalf() for sol in solution if sol.is_real and sol > 0]\n    return ans[0]\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # Total amount in pence\n\n    # Let's say there are 'n' coins of each denomination.\n    # Then the total amount can be calculated as:\n    # 5 * n + 10 * n + 20 * n = 490\n    # 35 * n = 490\n    # n = 490 / 35\n\n    n = total_amount // 35  # Number of coins of each denomination\n\n    total_coins = 3 * n  # Total number of coins (5p, 10p, 20p)\n\n    return total_coins\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one necklace and one earring\n    necklace, earring = symbols('necklace earring')\n\n    # Equation corresponding to the total cost of 9 necklaces and 5 earrings\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n\n    # Equation corresponding to the total cost of 2 necklaces and 3 earrings\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Get the total cost of 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    discount = 189\n    percentage_reduction = (discount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    # Total sweets eaten in 9 days\n    total_sweets = 135\n    # Number of days\n    num_days = 9\n    # Since each day he ate 3 more than the day before, it forms an arithmetic sequence\n    # The sum of an arithmetic sequence can be calculated as: n/2 * (first_term + last_term)\n    # Also, total_sweets = num_days/2 * (first_day_sweets + last_day_sweets)\n    \n    # Simplifying\n    # 2 * total_sweets = num_days * (first_day_sweets + last_day_sweets)\n    # 2 * total_sweets / num_days = first_day_sweets + last_day_sweets\n    # last_day_sweets = (2 * total_sweets / num_days) - first_day_sweets\n    \n    # Since the difference is 3, first_day_sweets = last_day_sweets - 3 * (num_days - 1)\n    # Thus, 2 * last_day_sweets = (2 * total_sweets / num_days) + 3 * (num_days - 1)\n    # Finally, last_day_sweets = ((2 * total_sweets / num_days) + 3 * (num_days - 1)) / 2\n    \n    last_day_sweets = ((2 * total_sweets / num_days) + 3 * (num_days - 1)) / 2\n    return int(last_day_sweets)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    total_money = 100\n    spent_on_book = total_money * 0.10\n    money_left = total_money - spent_on_book\n    spent_on_DVD = money_left * 0.20\n    final_money_left = money_left - spent_on_DVD\n    return final_money_left\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount_cents = 28 * 100\n    gift_cost_cents = 20 * 100\n    remaining_amount_cents = initial_amount_cents - gift_cost_cents\n    return remaining_amount_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n    balance = principal * ((1 + rate) ** time)\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    volume1 = 200\n    concentration1 = 35\n\n    volume2 = 300\n    concentration2 = 50\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1 / 100) + (volume2 * concentration2 / 100)\n\n    new_concentration = (total_juice / total_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    original_annual_salary = 24000\n    pay_raise_percentage = 0.10\n    months_in_year = 12\n\n    pay_raise = original_annual_salary * pay_raise_percentage\n    new_annual_salary = original_annual_salary + pay_raise\n    new_monthly_salary = new_annual_salary / months_in_year\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    return 123 - (23 + 56)\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):  # months 1 through 12\n        for day in range(1, 32):  # days 1 through 31; assuming no month has more than 31 days\n            if month * 31 + day * 12 == 376:\n                ans = '{:02d}{:02d}'.format(day, month)\n                return ans\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    # Using the distributive property of multiplication over addition, we have\n    # a * 20 = b * 20 + x * 20. To find x, we can rearrange the equation:\n    # x * 20 = a * 20 - b * 20, which simplifies to x = a - b.\n    a = 4.08\n    b = 1.08\n    x = a - b\n\n    return x\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(119, 98, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    n = 2023\n    count = 0\n    for x in range(1, n):\n        if x % 7 != 0 and x % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = cost_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6\n    protractor_original_price = 0.30\n    \n    calculator_sale_price = calculator_original_price * (1 - 0.25)\n    protractor_sale_price = protractor_original_price * (1 - 0.50)\n    \n    total_cost = (calculator_sale_price * 8) + (protractor_sale_price * 20)\n    \n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_ratio = 40\n    milk_ratio = 80\n\n    available_flour = 25\n    milk_needed = (available_flour * milk_ratio) / flour_ratio\n    \n    return milk_needed\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    sweets_initial = sweets_taken + sweets_left\n    return sweets_initial\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let y be the age of the younger elephant and o be the age of the older elephant\n    y = 18  # The age of the younger elephant is given as 18 years\n\n    # When the younger elephant reaches the current age of the older elephant,\n    # let's assume the older elephant's current age is o years.\n    # At that time, the older elephant will be 62 years old.\n    \n    # The difference in their ages will always be the same.\n    # Therefore, when the younger elephant is o years old, the older elephant will be o + (o - y) years old.\n    # According to the problem, at that time the older elephant will be 62 years old.\n\n    # We have the equation: o + (o - y) = 62\n\n    # Substitute the age of the younger elephant (y = 18) into the equation\n    o = symbols('o')\n    equation = Eq(o + (o - 18), 62)\n\n    # Solve for o\n    sol = solve(equation, o)\n\n    # There might be two solutions but only one will be a realistic age (positive and making sense in this context)\n    older_elephant_age = [s for s in sol if s.is_real and s > 18][0]\n    return older_elephant_age\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # 27 oxen eat the grass in 6 weeks\n    oxen_1 = 27\n    weeks_1 = 6\n\n    # 23 oxen eat the grass in 9 weeks\n    oxen_2 = 23\n    weeks_2 = 9\n\n    # The total amount of work done in both scenarios is the same, so we can equate them\n    # Work is defined as the number of oxen multiplied by the number of weeks\n    work = oxen_1 * weeks_1\n\n    # We want to find how many weeks it will take for 21 oxen\n    oxen_3 = 21\n\n    # Using the formula work = oxen * weeks, we can solve for the weeks for 21 oxen\n    weeks_3 = work / oxen_3\n\n    return weeks_3\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_in_kg = (tonnes * (2/3)) * 1000  # 1 tonne = 1000 kg\n    return two_thirds_in_kg\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's bike ride duration from home to the train station (from 7:30 am to 8:30 am)\n    bike_ride_duration_hours = 1\n    \n    # Ellen's bike speed in miles per hour\n    bike_speed_mph = 10\n    \n    # Calculate the distance Ellen travels by bike\n    distance_bike_miles = bike_ride_duration_hours * bike_speed_mph\n    \n    # Ellen's train ride duration from the train station to the town (from 8:30 am to 10:30 am)\n    train_ride_duration_hours = 2\n    \n    # Ellen's train speed in miles per hour\n    train_speed_mph = 50\n    \n    # Calculate the distance Ellen travels by train\n    distance_train_miles = train_ride_duration_hours * train_speed_mph\n    \n    # Total distance Ellen travels every Saturday\n    total_distance_miles = distance_bike_miles + distance_train_miles\n    \n    return total_distance_miles\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x, y, and z be the number of balls in boxes A, B, and C respectively.\n    x, y, z, n = symbols('x y z n')\n\n    # Equation for the total number of balls.\n    equation = Eq(x + y + z, 5)\n\n    # Solve the diophantine equation for non-negative integer solutions.\n    solutions = solve(equation, (x, y, z), dict=True)\n\n    # Count the no. of different tuples (x, y, z) satisfying the equation.\n    num_solutions = len(solutions)\n\n    return num_solutions\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Range of three-digit numbers\n        digits = [int(digit) for digit in str(i)]  # Break number into digits\n        if sum(digits) == 4:  # Check if the sum of its digits is 4\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    equation1 = Eq(blue + (blue + 25) + (blue + 25 + 32), 112)\n\n    solutions = solve(equation1, blue)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    from_front = 3\n    from_back = 2\n    from_left = 4\n    from_right = 3\n\n    rows = from_front + from_back - 1\n    columns = from_left + from_right - 1\n\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ema, keng_wee = symbols('ema keng_wee')\n\n    equation1 = Eq(ema, keng_wee - 360)\n    equation2 = Eq(ema - ema / 4, keng_wee - (4/7) * keng_wee)\n\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    def sum_of_digits(number):\n        return sum(int(digit) for digit in str(number))\n\n    number = 217\n    while sum_of_digits(number) != 9:\n        number += 1\n\n    return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    return 284 + 69 - 271\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    one_tenth_x = one_fourth_of_36\n    x = one_tenth_x * 10\n    return x\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    from_front = 3\n    from_back = 2\n    from_left = 4\n    from_right = 3\n    \n    # Total students = (from_front + from_back - 1) * (from_left + from_right - 1)\n    num_students = (from_front + from_back - 1) * (from_left + from_right - 1)\n    \n    return num_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    equation1 = Eq(girls, 9/11 * boys)\n    equation2 = Eq(girls + 2, 10/11 * boys)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    total_students_now = solutions[girls] + 2 + solutions[boys]\n\n    return total_students_now\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    nums = [37, 38, 40, 43, 42, 41]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    return (0.02)**2\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    ans = 418 * 7\n    return ans\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    actual_page_number = 0\n    printed_page_number = 0\n    \n    while printed_page_number < 89:\n        actual_page_number += 1\n        if actual_page_number % 3 != 0:\n            printed_page_number += 1\n    \n    return actual_page_number\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n    # Establish the equation from the given expression\n    equation = Eq(2*(3*x - y), 2*x + 4)\n    # Solve the equation for y\n    solved_expr = solve(equation, y)\n    # Substitute the value of y into the (2x - y) expression\n    result_expr = 2*x - solved_expr[0]\n    return result_expr\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_in_pence = 3 * 31 + 2 * 17 + 78 + 105\n    paid_in_pence = 5 * 100\n    change_in_pence = paid_in_pence - total_cost_in_pence\n    return change_in_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    trevor, siobhan = symbols('trevor siobhan')\n    \n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n    \n    solutions = solve((equation1, equation2), (trevor, siobhan))\n    \n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim_tiles, tan_tiles = symbols('lim_tiles tan_tiles')\n    equation1 = Eq(lim_tiles, 5 * tan_tiles)\n    equation2 = Eq(lim_tiles + tan_tiles, 390)\n\n    solutions = solve((equation1, equation2), (lim_tiles, tan_tiles))\n\n    difference = solutions[lim_tiles] - solutions[tan_tiles]\n\n    return difference\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_current = symbols('zehan_current')\n    zehan_future = zehan_current + 12\n\n    equation = Eq(zehan_future, 3 * zehan_current)\n\n    age = solve(equation, zehan_current)\n\n    return age[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Total of choosing any 5 from 15\n    total_ways = comb(15, 5)\n    \n    # Subtracting the number of ways none of A, B, or C are chosen\n    none_of_ABC = comb(12, 5)\n    \n    # Subtracting the number of ways two of A, B, or C are chosen\n    two_of_ABC = 3 * comb(12, 4)\n    \n    # Subtracting the number of ways all of A, B, or C are chosen\n    all_ABC = comb(12, 2)\n    \n    # Total ways - (none of ABC + two of ABC + all ABC)\n    ans = total_ways - (none_of_ABC + two_of_ABC + all_ABC)\n    return ans\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    cost_per_ticket = total_cost / num_tickets\n    return cost_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    ways = 0\n\n    for ten_pence in range(6):  # From 0 to 5 ten-pence coins\n        for twenty_pence in range(4):  # From 0 to 3 twenty-pence coins\n            for fifty_pence in range(2):  # 0 or 1 fifty-pence coin\n                if (ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50) == 70:\n                    ways += 1\n                    \n    return ways\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of lemon juice initially in the bottle\n    x = symbols('x')\n    \n    # The equation represents the new ratio when 80ml of lemon juice is added\n    equation = Eq((x + 80) / 6, (x / 2 + 80 / 3) / 5)\n    \n    # Solve for x\n    initial_lemon_juice = solve(equation, x)\n    \n    return initial_lemon_juice[0]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    return 536 - 11\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    ans = 3 * 6\n    return ans\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    # Ratio parts for Savannah is 5 and for Shaila is 6\n    shaila_ratio = 6\n    total_ratio = 5 + shaila_ratio\n    \n    # Shaila received 36 sweets, which corresponds to her part of the ratio\n    # Calculate total sweets based on the ratio\n    total_sweets = (36 * total_ratio) // shaila_ratio\n    \n    return total_sweets\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    # Define the equation\n    equation = Eq(savings - 177 - 129, (savings / 3) / 2)\n\n    # Solve the equation\n    total_savings = solve(equation, savings)\n\n    return total_savings[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Using the Inclusion-Exclusion Principle\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    \n    # Teachers who only know French\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.3  # increased speed by 30%\n    delay_in_hours = 9 / 60  # converting 9 minutes to hours\n\n    # If the car increases its speed by 30%, the time taken at increased speed + delay = usual time taken\n    # Let's denote the distance by d\n    # The usual time to cover the distance is d / usual_speed\n    # The time taken at increased speed is d / increased_speed\n    # According to the problem, d / increased_speed + delay_in_hours = d / usual_speed\n    # Solving for d, we get: d = usual_speed * delay_in_hours / (1 - (usual_speed / increased_speed))\n\n    d = usual_speed * delay_in_hours / (1 - (usual_speed / increased_speed))\n\n    return d\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Let's denote the unknown number as x.\n    # According to the problem statement, we have:\n    # (((x + 8) * 8) - 8) / 8 = 80\n    # Simplifying the equation:\n    # (x + 8) * 8 - 8 = 80 * 8\n    # (x + 8) * 8 = 80 * 8 + 8\n    # x + 8 = (80 * 8 + 8) / 8\n    # x = ((80 * 8 + 8) / 8) - 8\n    \n    x = ((80 * 8 + 8) / 8) - 8\n    return x\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original speed be 's' meters per minute and original time be 't' minutes.\n    s, t = symbols('s t')\n    \n    # Equation 1: If speed is increased by 25%, time taken is decreased by 20 minutes.\n    equation1 = Eq(s * 1.25 * (t - 20), s * t)\n    \n    # Equation 2: If speed is decreased by 45 m/min, time taken is increased by 75%.\n    equation2 = Eq((s - 45) * t * 1.75, s * t)\n    \n    # Solve for 's' and 't'\n    solutions = solve((equation1, equation2), (s, t))\n    \n    # Extract the solution and calculate the distance (original speed * original time)\n    s_value, t_value = solutions[0]\n    distance = s_value * t_value\n    \n    return distance\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n\n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        if (red_ropes * 2) + (blue_ropes * 3) == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both = 21\n\n    only_one_event = (skipping_rope - both) + (long_jump - both)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = (21 * 100) / 30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_second_half = 6\n\n    total_second_half = average_second_half * months_second_half\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    children = 0\n    while True:\n        children += 1\n        if children % 7 == 0 and (children - 2) % 9 == 0:\n            return children\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for x in range(1, 22 // 2 + 1):\n        y = 22 - x\n        if x != y:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n    \n    total_used = brownies + cookies + muffins\n    \n    return total_used\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    # Since the smallest factor of any number is 1, \n    # the greatest factor of A is A itself.\n    # Therefore, the difference of 41 between the smallest and greatest factor \n    # means that A - 1 = 41 -> A = 42\n    \n    A = 42\n    \n    # The 7th multiple of A is simply 7 * A\n    seventh_multiple = 7 * A\n\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    result = 1\n    for i in range(2, 12):\n        result *= (1 + (1/i))\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Buzz and Jessie's weights\n    buzz, jessie = symbols('buzz jessie')\n    \n    # The two equations based on the problem statement\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]  # Buzz's weight\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let's denote the two numbers as x and y, where x is the larger number and y is the smaller one.\n    # According to the problem, we have the following two equations:\n    # x - y = 36\n    # x + y = 98\n    \n    # We can solve these equations using algebra. First we add them together to eliminate y:\n    # 2x = 134\n    # x = 134 / 2\n    # x = 67\n    \n    # Now substitute x back into one of the equations to find y:\n    # 67 - y = 36\n    # y = 67 - 36\n    # y = 31\n    \n    # Since y is the smaller number, return y as the answer\n    return 31\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number_str = '3' * 12\n    number_int = int(number_str)\n    remainder = number_int % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    return 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 0.70\n    correct_marks = 3\n    incorrect_marks = -1\n    total_marks = 78\n\n    correct_answers = total_questions * correct_percentage\n    wrong_answers = total_questions - correct_answers\n    # total_marks = (correct_answers * correct_marks) + (wrong_answers * incorrect_marks)\n    # correct_answers * correct_marks - wrong_answers = total_marks\n    # correct_answers * (correct_marks + incorrect_marks) = total_marks + wrong_answers * incorrect_marks\n    correct_answers = (total_marks + (wrong_answers * incorrect_marks)) / (correct_marks + abs(incorrect_marks))\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    cost_per_file = 40 / (6 + 10/15 * 6)\n    cost_per_ruler = cost_per_file * 10/15\n    total_cost = 9 * cost_per_file + 15 * cost_per_ruler\n    return total_cost\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John's and Jessie's amount of money\n    john, jessie = symbols('john jessie')\n\n    # Equation 1: John has 5/13 of Jessie's money\n    equation1 = Eq(john, 5 / 13 * jessie)\n    \n    # Equation 2: After transfer, John has money which is 50% of Jessie's remaining money\n    equation2 = Eq(john + 600, 1 / 2 * (jessie - 600))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    # Calculate the total amount of money they have\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    count_1 = 0\n    count_2 = 0\n    N = 0\n    while count_1 < 15 or count_2 < 14:\n        N += 1\n        count_1 += str(N).count('1')\n        count_2 += str(N).count('2')\n\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    format_string = \"%H:%M\"\n    start_time = datetime.strptime(\"10:30\", format_string)\n    end_time = datetime.strptime(\"11:00\", format_string)\n    \n    baking_time = end_time - start_time\n    return baking_time.total_seconds() // 60\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # Express the relationship between the number of t-shirts and caps\n    ratio_tshirts_to_caps = Eq(t_shirts / caps, 8 / 5)\n\n    # Siti sold 1/4 of T-shirts and 1/5 of caps\n    # The total amount collected for the items she sold\n    amount_collected = Eq((1/4) * t_shirts * 3 + (1/5) * caps * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_tshirts_to_caps, amount_collected), (t_shirts, caps))\n\n    # Extract the value of T-shirts\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    banana_cost = 3 * 12  # cost of bananas in pence\n    apple_cost = 5 * 11   # cost of apples in pence\n    total_cost = banana_cost + apple_cost  # total cost in pence\n    paid = 200  # amount paid in pence (2 pounds)\n    change = paid - total_cost  # change in pence\n\n    # converting change to pounds and pence\n    pounds = change // 100\n    pence = change % 100\n    return pounds + pence / 100\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    num_siblings = 7\n    # Since Harvir is the oldest, he is 2 years older than each of his six siblings.\n    harvir_age = youngest_age + (num_siblings - 1) * age_difference\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    cost_calendar = 6.97\n    cost_ball = 2.99\n    total_cost = cost_calendar + cost_ball\n    return total_cost\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_left_kg = 360 / 1000  # 360g to kg\n    flour_used_muffins = 1 / 5  # kg\n    flour_used_cookies = 1 / 2  # kg\n\n    total_flour = flour_left_kg + flour_used_muffins + flour_used_cookies\n\n    return total_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # Define the cost in pence for clarity\n    cost_orange = 26\n    cost_lemon = 30\n    total_spent_pence = 500  # Gordon spent 5 pounds which is 500 pence\n\n    # We will iterate over the possible number of oranges and calculate the number of lemons\n    for oranges in range(total_spent_pence // cost_orange + 1):\n        lemons = (total_spent_pence - oranges * cost_orange) / cost_lemon\n        if lemons.is_integer():\n            return oranges + int(lemons)\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    import math\n    # Since it's a circular permutation, we use (n - 1)! formula, where n is the number of people.\n    num_people = 4\n    num_ways_to_sit = math.factorial(num_people - 1)\n    \n    return num_ways_to_sit\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eggs_original = symbols('eggs_original')\n    equation = Eq(3 * eggs_original, eggs_original + 24)\n\n    solution = solve(equation, eggs_original)\n\n    return solution[0]\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Last digits of multiplications are cyclical\n    # For 4: The cycle is 4 -> 6 -> 4 -> 6 -> ...\n    # After an even number of multiplications, the last digit is always 6\n    last_digit_4 = 6\n    \n    # For 7: The cycle is 7 -> 9 -> 3 -> 1 -> 7 -> 9 -> 3 -> 1 -> ...\n    # After 4 multiplications, the cycle repeats.\n    # 100 is a multiple of 4, so the last digit after 100 multiplications is 1\n    last_digit_7 = 1\n    \n    # For 9: The cycle is 9 -> 1 -> 9 -> 1 -> ...\n    # After an even number of multiplications, the last digit is always 1\n    last_digit_9 = 1\n    \n    # For 11: Since we only care for the last digit, we can consider it as 1:\n    # The cycle for 1 is 1 -> 1 -> 1 -> 1 -> ...\n    # No matter the number of multiplications, the last digit is always 1\n    last_digit_11 = 1\n    \n    # The last digit of the entire expression is a multiplication of the last digits we found:\n    last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    return last_digit\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n\n    ans = delta(star(delta(3, 4), 5), 6)\n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "import math\n\ndef solution():\n    total_cookies = 298\n    cookies_per_box = 8\n    num_boxes = math.ceil(total_cookies / cookies_per_box)\n\n    return num_boxes\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let f be the number of female visitors on the first day\n    # m be the number of male visitors on the first day\n    f, m = symbols('f m')\n    \n    # Relationships given in the problem\n    eq1 = Eq(m, f + 450)  # m is 450 more than f on the first day\n    eq2 = Eq(f * 1.15 + m * 0.82, 1354)  # Second-day visitors\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (f, m))\n    \n    # Total visitors on the first day\n    total_first_day = solutions[f] + solutions[m]\n    \n    return total_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    # Leo had $220 more than Jason initially\n    equation1 = Eq(leo, jason + 220)\n    \n    # Leo got an additional $180 and Jason got an additional $1100\n    equation2 = Eq(jason + 1100, 2 * (leo + 180))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    # We need to find the current amount of money Jason has, which is his initial amount plus $1100\n    jason_current_money = solutions[jason] + 1100\n\n    return jason_current_money \n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    same_books_factor = factorial(3) * factorial(4) * factorial(2) * factorial(2)  # Factorial for each type of book\n\n    # Total permutations divided by the permutations of identical items\n    permutations = factorial(total_books) // same_books_factor \n\n    return permutations\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "def solution():\n    from itertools import permutations\n\n    # All possible 5-digit numbers made up of unique digits\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        if (2 * (10000 * E + 1000 * D + 100 * C + 10 * B + A) == \n            (10000 * A + 1000 * B + 100 * C + 10 * D + E)):\n            return 10000 * E + 1000 * F + 100 * C + 10 * B + H\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    ways = 0\n    # Because the pencil cases are identical, we only need to consider\n    # the counts of pencils in each case and not their order.\n    # We go through each possible combination without considering the cases.\n    for x in range(8):\n        for y in range(8 - x):\n            z = 7 - x - y\n            if x + y + z == 7:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_a_week = 7\n    robots_per_week = robots_per_day * days_in_a_week\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    from itertools import permutations\n\n    nums = range(10)  # All possible digits from 0 to 9\n    for perm in permutations(nums, 5):\n        A, B, C, D, E = perm\n        F = E - 4\n        H = B + 1\n        if A == 0 or E == 0 or F not in nums or F == A or F == B or F == C or F == D or F == E or \\\n           H not in nums or H == A or H == B or H == C or H == D or H == E or H == F:\n            continue\n        return E * 10000 + F * 1000 + C * 100 + B * 10 + H  # Use the perm values to construct the number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000  # Total cost of the mansion in pounds\n    number_of_friends = 5   # Number of friends sharing the cost\n\n    each_pay = total_cost / number_of_friends\n\n    return each_pay\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children who paid £10\n    # Let y be the number of children who paid £15 to have their name on the shirt\n    x, y = symbols('x y')\n\n    # Eq1: The total number of children is 50\n    equation1 = Eq(x + y, 50)\n\n    # Eq2: The total amount paid by children is £555\n    equation2 = Eq(10 * x + 15 * y, 555)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time in minutes David walks at the increased speed\n    x = symbols('x')\n\n    # Distance walked at initial speed = 150m/min * 10min = 1500m\n    initial_distance = 150 * 10\n\n    # Distance walked at increased speed = (150 + 50) * x = 200 * x meters\n    increased_speed_distance = 200 * x\n\n    # Total distance = initial distance + increased speed distance\n    total_distance = initial_distance + increased_speed_distance\n\n    # Equation representing total distance David walked\n    equation = Eq(total_distance, 3700)\n\n    # Solve for x\n    x_solution = solve(equation, x)[0]\n\n    # Total time spent walking = time at initial speed + time at increased speed\n    total_time = 10 + x_solution\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let f be the number of female visitors on the first day\n    # m is the number of male visitors on the first day\n    f, m = symbols('f m')\n    \n    # The number of male visitors was 450 more than the number of female visitors on the first day\n    equation1 = Eq(m, f + 450)\n    \n    # On the second day:\n    # Female visitors increased by 15%\n    # Male visitors decreased by 18%\n    # The total number is 1354\n    equation2 = Eq(0.85 * m + 1.15 * f, 1354)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, f))\n    \n    return solutions[m]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    # Since at every round only students in even positions remain,\n    # and they become the next round's odd and even positions,\n    # the last student's original position must be a power of 2.\n    # We keep dividing by 2 until we get to the last student.\n    students = 40\n    position = 1  # Start from position 1\n\n    while students > 1:\n        position *= 2  # The position is doubled as we remove half the students\n        students /= 2  # Number of students is halved in each round\n\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore is 7 hours ahead of London.\n    # When it is 05:00 in Singapore, it is 22:00 of the previous day in London.\n    singapore_departure = 5  # 05:00 AM\n    london_arrival = 11  # 11:00 AM\n    \n    # If the flight would have been direct with no time difference,\n    # the duration would be from 22:00 to 11:00, which is 13 hours.\n    # But since Singapore is 7 hours ahead, we need to subtract this time difference.\n    flight_duration = 13 - 7  # 13 hours minus 7 hours time difference.\n    \n    # Since the flight crosses the date line (from the previous day's 22:00 to today),\n    # we need to add 24 hours to the calculation\n    if singapore_departure > london_arrival:\n        flight_duration += 24\n    \n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    # Total number of playing cards\n    total_cards = 4 + 3 + 7\n    \n    # Calculate the factorial of the total number of cards for permutations\n    total_permutations = factorial(total_cards)\n    \n    # Since permutations count all the identical hearts, spades, and diamonds as\n    # different entities, we need to divide by the permutations of those\n    # to remove the duplicates within each type of cards.\n    hearts_permutations = factorial(4)\n    spades_permutations = factorial(3)\n    diamonds_permutations = factorial(7)\n    \n    # Divide the total permutations by each set of identical card permutations\n    different_ways = total_permutations // (hearts_permutations * spades_permutations * diamonds_permutations)\n    \n    return different_ways\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # The smallest multiple of 5\n    second_digit = 1  # The smallest odd number among natural numbers\n    third_digit = 9  # The largest single digit odd number\n    fourth_digit = 2  # The smallest even number in nature\n    fifth_digit = 8  # The largest single digit that is a multiple of 2\n    sixth_digit = 3  # The smallest odd number greater than 1\n    seventh_digit = 0  # Multiple of 2 and 5, and a digit\n    \n    phone_number = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel * 1.30)\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages = 80\n    current_day = 1\n    pages_read = 20\n    \n    while pages_read < total_pages:\n        total_pages -= pages_read\n        current_day += 1\n        pages_read += 5\n\n    total_days = current_day + 1\n    first_day_pages = 20\n\n    sum_of_pages = (total_days * (2 * first_day_pages + (total_days - 1) * 5)) // 2\n\n    return sum_of_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9\n    cashews = 1/3\n    difference = almonds - cashews\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Calculate the number he used for his division\n    johnny_num = quotient * divisor + remainder\n\n    # The correct working should be quotient multiplied by the divisor plus the remainder\n    correct_working = quotient * divisor + remainder\n\n    # Check if Johnny's answer is correct\n    is_correct = (johnny_num == correct_working)\n\n    return correct_working if is_correct else None\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positives = sum(range(2, 55, 4))\n    sum_negatives = sum(range(50, 1, -4))\n    ans = sum_positives - sum_negatives\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = Eq(40 - boys)\n    equation = Eq(4 * boys - 3 * (40 - boys), 62)\n    \n    solutions = solve(equation, boys)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n    \n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    \n    return ans\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cut_length = symbols('cut_length')\n\n    equation = Eq((65 - cut_length), 3 * (29 - cut_length))\n\n    cut_length_solution = solve(equation, cut_length)\n\n    return cut_length_solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    expected_value_for_5 = total_rolls * (1/6)\n    return expected_value_for_5\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    return 12 / 18 * 6\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        S, A, M, O, G = perm\n        if S == 0 or G == 0:  # Skip if S or G is zero, not valid for a 5-digit number.\n            continue\n        SASMO = 10000 * S + 1000 * A + 100 * S + 10 * M + O\n        OGAMS = 10000 * O + 1000 * G + 100 * A + 10 * M + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    # Given ratios\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n    \n    # Average of A, B and C\n    equation3 = Eq((A + B + C) / 3, 45)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the symbol for the unknown variable\n    dress_cost = 7 * x  # Cost of one dress\n    skirt_cost = 35  # Cost of one skirt\n    total_dresses = 6  # Number of dresses bought\n    total_skirts = 3  # Number of skirts bought\n    total_spent = 441  # Total amount spent\n\n    # Create the equation for the total spent\n    equation = Eq(total_dresses * dress_cost + total_skirts * skirt_cost, total_spent)\n\n    # Solve the equation to find the value of x\n    solution = solve(equation, x)\n\n    return solution[0]  # Return the value of x (cost of one dress)\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits = 5  # 1, 3, 5, 7, 9\n    # There are three positions, each can be filled with any of the 5 odd digits\n    return odd_digits ** 3\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # The pattern indicates a telescoping series where consecutive terms cancel each other out\n    # The general term of the series is 1/n(n+1) which can be split into 1/n - 1/(n+1)\n    \n    # Initial terms for n = 1\n    first_numerator = 1\n    first_denominator = 2\n\n    # Last terms for n = 2011\n    last_numerator = 1\n    last_denominator = 2012\n\n    # The final expression after the series collapses will be 1/1 - 1/(2012)\n    # This simplifies to (2012 - 1) / 2012 = 2011 / 2012\n\n    # This fraction is of the form k/(k+2)\n    k = 2011\n\n    return k\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i**2) % 3\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let's denote the original length of the rectangle as 'l' and the width as 'w'.\n    # According to the problem, the increased length would be 'l + 12'.\n    \n    # We are given that the perimeter of the new rectangle is 38 cm, which gives us the equation\n    # 2 * (l + 12) + 2w = 38\n    # Let's simplify the equation to solve for 'l':\n    # 2l + 24 + 2w = 38\n    # 2l + 2w = 38 - 24\n    # 2l + 2w = 14\n    \n    # Since we want the perimeter of the original rectangle, we need to express it in terms of 'l' and 'w'.\n    # The perimeter of the original rectangle is 2l + 2w.\n    # We already simplified the equation for the modified rectangle to find that 2l + 2w = 14.\n    \n    # Therefore, the perimeter of the original rectangle is 14 cm.\n    return 14\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = nell_sweets * (nell_ratio + joe_ratio) / nell_ratio\n    return int(total_sweets)\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8 / 9) * baby_chickens\n    roosters = (1 / 4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n\n    # The first equation represents the ratio 5:3\n    equation1 = Eq(jamie_anne, 5/3 * natasha)\n\n    # The second equation represents the difference in the number of stamps\n    equation2 = Eq(jamie_anne - natasha, 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jamie_anne, natasha))\n\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's represent the number of days it takes for the lazy one to paint the house alone as a symbol.\n    lazy_days = symbols('lazy_days')\n\n    # Productivity rates\n    # If the energetic one paints the house in 12 days, his work rate is 1/12 of the house per day.\n    energetic_rate = 1 / 12\n\n    # Together, they paint the house in 8 days, so their combined rate is 1/8 of the house per day.\n    combined_rate = 1 / 8\n\n    # The lazy one's work rate is the total combined rate minus the energetic one's work rate.\n    lazy_rate = combined_rate - energetic_rate\n\n    # The equation to solve is lazy_rate * lazy_days, and it should equal 1 (the whole house painted).\n    equation = Eq(lazy_rate * lazy_days, 1)\n\n    # Solve for lazy_days.\n    days = solve(equation, lazy_days)\n\n    return days[0]\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n\n    equation1 = Eq(sana, 8 * mina)\n    equation2 = Eq(sana + mina, 234)\n    equation3 = Eq(mina - 12, 0)\n\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    mina_left = solutions[mina] - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_on_monday = (3 / 7) * total_grapes\n    remaining_after_monday = total_grapes - sold_on_monday\n    sold_on_tuesday = (3 / 8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_on_tuesday\n    small_bag_weight = 3 / 4\n    number_of_bags = remaining_after_tuesday / small_bag_weight\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    term_number = 11\n    \n    nth_term = first_term + (term_number - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100  # Convert pounds to pence\n    percentage = (pence / total_pence) * 100  # Calculate the percentage\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for page in range(1, 121):\n        count += str(page).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Uncle Sam cycles from the first to the eleventh lamp post in 50 seconds,\n    # which means he passes 10 intervals in 50 seconds (interval between each lamp post).\n    # So, the time taken to pass one interval is 50 seconds / 10 intervals.\n    time_per_interval = 50 / 10\n    \n    # Now we need to find out how many intervals he can pass in 80 seconds.\n    intervals_in_80_seconds = 80 / time_per_interval\n    \n    # The number of lamp posts he will cycle past is one more than the number of intervals.\n    lamp_posts_passed = intervals_in_80_seconds + 1\n    \n    # Since he must pass a whole number of lamp posts, we take the floor of the number.\n    return int(lamp_posts_passed)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Since the flowers at the corners are counted for two sides,\n    # we should subtract the corners from Jill's initial calculation.\n    # There are 4 corners, so we subtract 4 from the total flowers.\n    \n    flowers_per_side = 6\n    sides = 4\n    corners = 4\n\n    # each corner is counted in two sides, so they should be counted only once\n    # Jill's calculation is overcounted by the 4 corner flowers since each corner flower\n    # is counted twice (once for each adjoining side)\n    total_flowers = (flowers_per_side * sides) - corners\n\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # Let's consider the total items Rena bought as the variable total_items\n\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n\n    # We know that Rena bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve for the total number of items\n    total_solution = solve(equation, total_items)\n\n    # Find the number of lemons\n    num_lemons = lemons.subs(total_items, total_solution[0])\n\n    return num_lemons\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Calculate the sum of all factors of 4\n    factors_of_4 = [1, 2, 4]\n    ones_digit = sum(factors_of_4)\n    \n    # The digit in the hundreds place is known (800 -> 8)\n    hundreds_digit = 8\n    \n    # The digit in the thousands place is 1 more than the hundreds place\n    thousands_digit = hundreds_digit + 1\n    \n    # The digit in the tens place is the difference between the hundreds and ones place\n    tens_digit = hundreds_digit - ones_digit\n    \n    # Construct the number\n    number = 4 * 10000 + thousands_digit * 1000 + hundreds_digit * 100 + tens_digit * 10 + ones_digit\n    \n    return number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n\n    football_field_length = basketball_court_length + additional_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    discount_given_to_ana = original_price - 67.50\n    discount_percentage_to_ana = (discount_given_to_ana / original_price) * 100\n    \n    return discount_percentage_to_ana\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "from fractions import Fraction\n\ndef solution():\n    lower_bound = Fraction(3, 10)\n    upper_bound = Fraction(5, 16)\n\n    s = 1\n    while True:\n        r = (lower_bound * s).numerator\n        if lower_bound < Fraction(r, s) < upper_bound:\n            return s\n        s += 1\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    fraction = 5/6\n\n    total_two_days = first_day + second_day\n    total_steering_wheels = total_two_days / fraction\n\n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * x - (7 * x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Total capacity of the bus in terms of children\n    total_capacity_children = 40\n    \n    # Number of children already on the bus\n    children_on_bus = 15\n    \n    # Remaining capacity in terms of children\n    remaining_capacity_children = total_capacity_children - children_on_bus\n    \n    # The bus's total capacity in terms of adults\n    total_capacity_adults = 24\n    \n    # The equivalent adult capacity for one child\n    equivalent_adult_per_child = total_capacity_adults / total_capacity_children\n    \n    # The equivalent remaining capacity in terms of adults\n    remaining_capacity_adults = remaining_capacity_children * equivalent_adult_per_child\n    \n    # Since we want the greatest number of adults, we take the floor of the remaining adult capacity\n    greatest_num_adults = int(remaining_capacity_adults)\n    \n    return greatest_num_adults\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint\n\n    # Factor 28 to get its prime factorization\n    factors = factorint(28)\n    \n    # Iterate through factors and if a factor has an odd power, multiply our number by that factor\n    num = 1\n    for factor in factors:\n        if factors[factor] % 2 != 0:\n            num *= factor\n\n    return num\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    minutes_per_pancake = 3 / 2\n    pancakes_in_12_minutes = 12 / minutes_per_pancake\n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 - x, 5 * x - 8)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    num_students = 35\n    num_sizes = 3\n    min_students_same_size = (num_students // num_sizes) + 1  # Pigeonhole Principle\n    \n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle_operation(a, b):\n        return (a + 2) / b\n\n    ans = triangle_operation(8, triangle_operation(6, 4))\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    spent_on_DVD = 740\n    remaining_after_DVD = salary - spent_on_DVD\n    spent_on_TV = 3 * remaining_after_DVD / 4\n    leftover = salary / 5\n\n    equation = Eq(remaining_after_DVD - spent_on_TV, leftover)\n\n    ans = solve(equation, salary)[0]\n\n    return ans\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    russell_current_age = symbols('russell_current_age')\n\n    equation = Eq(russell_current_age + 32, 4 * (russell_current_age - 16))\n\n    solutions = solve(equation, russell_current_age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 40 / 100 * 120\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    diff = abs(6 - 19)\n    num_people = diff * 2\n    return num_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(1, 10):  # Thousands digit cannot be 0\n        for B in range(0, 10):  # Tens digit can be anything from 0 to 9\n            for C in range(0, 10):  # Hundreds digit can be anything from 0 to 9\n                pips_number = 1000 * A + 100 * B + 10 * C + A\n                buds_number = 1000 * C + 100 * A + 10 * A + B\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    # Initial number: A = 4/9 * B\n    initial_condition = Eq(A, 4/9 * B)\n    \n    # After reshuffling: (A + 18) = (B - 3)\n    final_condition = Eq(A + 18, B - 3)\n    \n    # Solving both equations for A and B\n    solutions = solve((initial_condition, final_condition), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make 1 cut.\n    # To cut a rod into 5 pieces, we need 4 cuts (since the first piece is created after the first cut).\n    # Thus, we multiply the number of cuts needed by the time per cut (2 minutes).\n    cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_minutes = cuts_needed * time_per_cut\n\n    return total_minutes\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Let x be the number of shelves with math books\n    # 15 - x will be the number of shelves with spelling books \n    for x in range(16):  # We loop from 0 to 15 because there can be at most 15 shelves\n        if 9 * (15 - x) == 72:  # The number of shelves with spelling books times 9 should equal 72\n            return 4 * x  # Return the number of math books (4 books per shelf times the number of math book shelves)\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    floors_walked = 4 - 1  # From first to fourth floor is walking across 3 intervals\n    time_for_3_floors = 6  # Given time to walk these 3 intervals\n\n    # We need to find the time for walking from first to tenth floor, which is across 9 intervals\n    # The speed is constant, so we scale the time proportionally to the number of intervals\n    time_for_9_floors = (time_for_3_floors / floors_walked) * (10 - 1)\n    \n    return time_for_9_floors\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuits_original = 100\n    chocolate_original = 40\n    biscuits_available = 75\n\n    ratio = biscuits_available / biscuits_original\n    chocolate_needed = ratio * chocolate_original\n\n    return chocolate_needed\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_earnings_per_day = 90\n    number_of_days_worked = 7  # from Monday to Sunday is 7 days\n\n    total_earnings = average_earnings_per_day * number_of_days_worked\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n\n    ans = pastas * sauces * toppings\n    return ans\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    for n in range(1, 33):  # n is a whole number\n        if 32 / n == n / 2:\n            return n\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # In the first game, the 8th and the 16th student are opposite.\n    # This means there are 16 - 8 = 8 students between them.\n    # As they are opposite, it indicates the total number of students is 8 * 2 = 16 in the circle.\n\n    # In the second game, the 8th and the 22nd student are opposite.\n    # This means there are 22 - 8 = 14 students between them.\n    # Again, since they are opposite, the total number of students is now 14 * 2 = 28 in the circle.\n\n    # The difference in the number of students between the two games is the new students that joined.\n    new_students = 28 - 16\n    return new_students\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of marbles each person initially had\n    a, b, c = symbols('a b c')\n    \n    # After transactions, Anna has a + 8, Betsy has b + 15 - 8, Charlene has c - 15 = 2:5:7 ratio\n    # We set up the three equations based on the problem description\n    equation1 = Eq(a + b + c, 168)\n    equation2 = Eq((a + 8) / (b + 7), 2/5)\n    equation3 = Eq((a + 8) / (c - 15), 2/7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    # Return the result for Betsy's initial number of marbles\n    return solutions[b]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    total = 180\n    subtractions = 9 * 6 + 7 * 6\n\n    ans = total - subtractions\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards\n    yellow_cards = 4         # Number of yellow cards\n    red_cards = 3            # Number of red cards\n    green_cards = 7          # Number of green cards\n\n    # Calculating the total permutations\n    total_permutations = factorial(total_cards)\n\n    # Calculate the permutation for each color since they are indistinguishable\n    yellow_permutations = factorial(yellow_cards)\n    red_permutations = factorial(red_cards)\n    green_permutations = factorial(green_cards)\n\n    # Using the formula for permutations with indistinguishable objects\n    ans = total_permutations // (yellow_permutations * red_permutations * green_permutations)\n\n    return ans\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lollipops, gum_drops = symbols('lollipops gum_drops')\n    \n    original_ratio = Eq(lollipops / gum_drops, 5/7)\n    new_ratio = Eq((lollipops + 120) / (gum_drops + 120), 4/5)\n    \n    solutions = solve((original_ratio, new_ratio), (lollipops, gum_drops))\n    \n    total_candy_now = solutions[lollipops] + 120 + solutions[gum_drops] + 120\n    \n    return total_candy_now\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 268 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "from math import gcd\n\ndef solution():\n    length = 1.36  # in meters\n    width = 0.8    # in meters\n\n    # convert to centimeters to deal with integer values\n    length_cm = int(length * 100)\n    width_cm = int(width * 100)\n\n    # find the greatest common divisor to get the largest square side\n    square_side = gcd(length_cm, width_cm)\n\n    # calculate the number of squares\n    num_squares = (length_cm // square_side) * (width_cm // square_side)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    for hundreds in [4, 5, 7]:\n        for tens in [4, 5, 7]:\n            for ones in [4, 5, 7]:\n                if (hundreds * 100 + tens * 10 + ones) % 2 != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Speed and distance for each part of the race\n    speed1 = 7 # m/s\n    distance1 = 280 # m\n    speed2 = 5 # m/s\n    distance2 = 400 # m\n    # Speed for the final part of the race\n    speed3 = 8 # m/s\n    # Total distance for the race\n    total_distance = 800 # m\n    # Distance for the final part of the race\n    distance3 = total_distance - (distance1 + distance2)\n    \n    # Time = Distance / Speed\n    time1 = distance1 / speed1 # Time for the first part of the race\n    time2 = distance2 / speed2 # Time for the middle part of the race\n    time3 = distance3 / speed3 # Time for the final part of the race\n    \n    # Total time for the race\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_by_5 = (200 // 5)\n    count_by_7 = (200 // 7)\n    count_by_35 = (200 // 35)  # Both 5 and 7 divide 35\n    \n    # Using the inclusion-exclusion principle\n    total_count = count_by_5 + count_by_7 - count_by_35\n    return total_count\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the prices of each fruit\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    # Chris's purchase\n    eq1 = Eq(1 * durian + 2 * pineapple + 3 * watermelon, 440)\n    # Dylan's purchase\n    eq2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of teams as n\n    n = symbols('n')\n\n    # Each team plays each other exactly twice, hence we form the equation n*(n-1) = 2*30\n    # The equation is derived from the combination formula: n choose 2 (for one match) multiplied by 2\n    equation = Eq(n * (n - 1), 60)\n\n    # Solving the equation\n    solutions = solve(equation, n)\n\n    # Since the number of teams cannot be negative, we take the positive solution\n    return [s for s in solutions if s.is_real and s > 0][0]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for original_number in range(1000, 10000):  # The original number must be at least 4 digits\n        if original_number - int(str(original_number)[:-1]) == 135:\n            return original_number\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    total_students = 37\n    max_capacity = 5\n\n    # calculate the number of full trips (each trip carries 5 students)\n    full_trips = total_students // max_capacity\n    # calculate the number of students in the last (not necessarily full) trip\n    remaining_students = total_students % max_capacity\n\n    # The return trips do not require carrying students, so they are not counted\n    # as full trips. However, the last trip does not require a return, hence we\n    # subtract one from the total trips (except for the case when the last group\n    # exactly fits the capacity of the boat, which means all trips were full and\n    # the last trip does need a return).\n    total_trips = (full_trips * 2) - 1 if remaining_students == 0 else (full_trips * 2) + 1\n\n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    ans = (49 * 57) + 7\n    return ans\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let X be the total number of students involved in the streaming exercise.\n    # According to the problem:\n    # 0.80X students chose Grade A Math\n    # 0.35X students chose Grade B Math\n    # 0.10X students chose neither\n    # 75 students chose both Grade A and B Math\n    \n    # Number of students that chose either A or B or both\n    # 1 - 0.10X = 0.90X\n    \n    # Using the Inclusion-Exclusion Principle:\n    # Number of students that chose either A or B or both = \n    # (Number of students that chose A) + (Number of students that chose B) - (Number of students that chose both)\n    \n    # So we have:\n    # 0.90X = 0.80X + 0.35X - 75\n    # Solve for X:\n    X = 75 / (0.80 + 0.35 - 0.90)\n    return int(X)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2 * 10\n    hundreds = 3 * 100\n    \n    ans = ones + tens + hundreds\n    \n    return ans\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n    ans = factorial(100) / (factorial(99) + factorial(98))\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Frank is older than Alex, and Alex is older than Paul\n    # Therefore, Frank's age is alex + diff and Paul's age is alex - diff\n    # diff is the common difference in their ages\n\n    # Write the equations based on the problem statement\n    # Frank - Alex = Alex - Paul (The difference in age is the same)\n    equation1 = Eq(frank - alex, alex - paul)\n    \n    # Sum of their ages is 99\n    equation2 = Eq(frank + alex + paul, 99)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    # There will be multiple solutions, filter the correct one where Frank is older than Alex and Alex is older than Paul\n    for sol in solutions:\n        if sol[frank] > sol[alex] > sol[paul]:\n            return sol[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1469'\n    all_numbers = [''.join(p) for p in permutations(digits)]\n    total_sum = sum(int(number) for number in all_numbers)\n    average = total_sum / len(all_numbers)\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for number of boys and girls\n    boys, girls = symbols('boys girls')\n    \n    # Initially the number of boys and girls are equal\n    initial_condition = Eq(boys, girls)\n    \n    # After 60 boys and 12 girls left the gathering\n    boys_left = boys - 60\n    girls_left = girls - 12\n    \n    # There were twice as many girls as boys\n    final_condition = Eq(girls_left, 2 * boys_left)\n    \n    # Solve the equations\n    solutions = solve((initial_condition, final_condition), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for digit_tens in range(1, 10):\n        for digit_ones in range(1, 10):\n            if digit_tens != digit_ones and digit_tens + digit_ones == 15:\n                if digit_ones % 2 == 0:  # Ensure that the number is even\n                    return 900 + digit_tens * 10 + digit_ones\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    # 3 bowls of water can fill 1 jug\n    bowls_per_jug = 3\n    \n    # 2 jugs of water can fill 1 pail\n    jugs_per_pail = 2\n    \n    # Calculate the total number of bowls needed to fill 1 pail\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n    \n    return bowls_per_pail\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\nfrom math import prod\n\ndef count_factors(n):\n    return sum(n % i == 0 for i in range(1, n + 1))\n\ndef solution():\n    numbers = list(range(1, 14))\n    for combo in combinations(numbers, 9):\n        # Check if exactly two numbers have a unique count of factors (potential Alice and May)\n        factor_counts = [count_factors(num) for num in combo]\n        unique_factors = [factor_counts.count(factor) == 1 for factor in factor_counts]\n        if sum(unique_factors) == 2:\n            # Find Alice and May, assuming Alice has more factors (odd number)\n            for i in range(9):\n                for j in range(9):\n                    if unique_factors[i] and unique_factors[j] and combo[i] > combo[j]:\n                        # Calculate Alice's and May's numbers based on the teacher's statements\n                        alice_num = combo[i]\n                        may_num = combo[j]\n                        if alice_num % 2 != 0 and alice_num == may_num + 2 and all(alice_num != num + 2 for k, num in enumerate(combo) if k != j):\n                            # Calculate numbers on Mark's forehead and the remaining four numbers\n                            mark_possible_numbers = [num for num in combo if num < may_num]\n                            if mark_possible_numbers:\n                                mark_num = max(mark_possible_numbers)\n                                if may_num == mark_num + 1:\n                                    # Find the product of the four numbers not picked\n                                    remaining_numbers = set(numbers) - set(combo)\n                                    return prod(remaining_numbers)\n    return None\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    speed_van = 80\n    speed_car = 120\n    lead_time = 3\n    lead_distance = speed_van * lead_time\n\n    # Relative speed is the difference of speeds between the car and the van\n    relative_speed = speed_car - speed_van\n\n    # Time required for the car to catch up is the lead_distance divided by the relative speed\n    catch_up_time = lead_distance / relative_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    hats = sum([1 for i in range(5)])  # 4 hats + no hat option\n    shirts = 3\n    pants = 2\n    skirt = 1\n\n    combinations = hats * shirts * pants * skirt\n    return combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from fractions import Fraction\n    \n    # Convert recurring decimals to fractions\n    recurring_decimal_1 = Fraction(1, 99)\n    recurring_decimal_2 = Fraction(1, 99)\n    \n    # Calculate product\n    product = recurring_decimal_1 * recurring_decimal_2\n    \n    # Convert to decimal to find the repetend\n    decimal_repr = str(product.numerator).rjust(len(str(product.denominator)), '0')\n    \n    # The repetend is the number of digits in the numerator (after removing leading zeros)\n    repetend = len(decimal_repr.strip('0'))\n    \n    return repetend\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Calculate the rate per minute for each printer\n    rate_A = 300 / 12\n    rate_B = 300 / 10\n    \n    # Calculate the total rate when both printers are used at the same time\n    total_rate = rate_A + rate_B\n    \n    # Convert half an hour to minutes\n    half_hour_in_minutes = 0.5 * 60\n    \n    # Calculate how many pages both printers can print in half an hour\n    pages_printed = total_rate * half_hour_in_minutes\n    \n    return pages_printed\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of items\n    x = symbols('x')\n\n    # Create equations based on the problem statement\n    apples = (2/3) * x\n    bananas = (1/9) * x\n    lemons = x - apples - bananas\n\n    # Rena bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve for x\n    total_items = solve(equation, x)\n\n    # Calculate the number of lemons\n    num_lemons = total_items[0] - (2/3) * total_items[0] - (1/9) * total_items[0]\n\n    return num_lemons\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if the day is valid for the current month\n            if (month == 2 and day > 28) or \\\n               (month in [4, 6, 9, 11] and day == 31):\n                continue\n            # Format the date as specified\n            date_str = f\"{day:02d}/{month:02d}/2019\"\n            # Count the number of '3's in the date string\n            count += date_str.count('3')\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    number = 33033\n    return number\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the quantities of each puff\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n\n    # Set up equations based on the given information\n    ratio_eq = Eq(durian/chocolate, 3/4) & Eq(chocolate/strawberry, 4/2)\n    price_eq = Eq(5*durian + 3*chocolate + 4*strawberry, 560)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, price_eq), (durian, chocolate, strawberry))\n\n    # Calculate the amount collected from durian puffs\n    durian_sales = 5 * solutions[durian]\n\n    return durian_sales\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is cut into 490 small cubes,\n    # and the dimensions of the cuboid are 7x5x14,\n    # We can deduce that each side of the small cube is 1 unit\n    # (since 7*5*14 = 490, and it perfectly fits 490 unit cubes).\n    \n    # Only the cubes at the corners will have exactly three faces painted.\n    # Each corner of the cuboid will have one such cube.\n    \n    # A 7x5x14 cuboid has 8 corners.\n    num_corners = 8\n    \n    return num_corners\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_3_years = 1.191  # 6% compounded yearly for 3 years\n    rate_last_2_years = 1.166   # 8% compounded yearly for 2 years\n    \n    amount_after_3_years = principal * rate_first_3_years\n    final_amount = amount_after_3_years * rate_last_2_years\n    \n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the cost of a raisin roll and a donut\n    cost_raisin_roll, cost_donut = symbols('cost_raisin_roll cost_donut')\n    \n    # Two equations based on the problem statement\n    # 1. The cost of 5 raisin rolls plus 6 donuts equals $14.70\n    # 2. Each raisin roll costs 3 times as much as a donut\n    equation1 = Eq(5 * cost_raisin_roll + 6 * cost_donut, 14.70)\n    equation2 = Eq(cost_raisin_roll, 3 * cost_donut)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (cost_raisin_roll, cost_donut))\n    \n    # Returning the cost of a raisin roll\n    return solutions[cost_raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students from each school\n    school1 = 24\n    school2 = 36\n    school3 = 42\n\n    # Calculate the greatest common divisor for all three schools\n    gcd_12 = gcd(school1, school2)\n    gcd_all = gcd(gcd_12, school3)\n\n    return gcd_all\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return int(ans)\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    n1 = 9\n    S1 = 99\n    n2 = 27\n    S2 = 540\n    n3 = 16\n\n    # Using the formula for the sum of arithmetic sequence:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # S2 = 3 * S1\n\n    # from the given S1 and S2, we can find the sum of the first n terms\n    # 3 * (n1/2) * (2 * a + (n1 - 1) * d) = (n2/2) * (2 * a + (n2 - 1) * d)\n    # 3 * S1 = S2\n    # Solve for 'a' and 'd'\n    a = (S2 - 3 * S1) / (n2 - 3 * n1)\n    d = (S1 / n1 - 2 * a) / (n1 - 1)\n\n    # Now find the sum of first 16 terms\n    S3 = n3 / 2 * (2 * a + (n3 - 1) * d)\n\n    return S3\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit from 1 to 9 (inclusive)\n        for tens in range(1, 10):  # Tens digit from 1 to 9 (inclusive)\n            for units in range(1, 10):  # Units digit from 1 to 9 (inclusive)\n                if (hundreds * 100 + tens * 10 + units) >= 100 and hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = 12 * 12  # Each number from 1 to 12 is written 'number' times\n    half_total = total_numbers // 2\n\n    # Now we need to find the midpoint in the sequence\n    count, current_num = 0, 0\n    while count < half_total:\n        current_num += 1\n        count += current_num\n\n    # Handle the case when total number of elements is even\n    # If the count exceeds half of the total (which can only occur for even totals),\n    # we can tell the median is the current number because we are in the middle of the sequence\n    # of that repeated number.\n    if total_numbers % 2 == 0:\n        if count > half_total:\n            median = current_num\n        else:\n            median = current_num + 1\n    else:\n        # Otherwise, for an odd total, the median is simply the current number.\n        median = current_num\n    \n    return median\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 8]\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    \n    return count\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    required_loafs = 24\n    cups_needed = required_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    num_teachers = 139\n    num_children = total_people - num_teachers\n    return num_children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    single_digit_numbers = 9 - 7 + 1  # From 7 to 9\n    double_digit_numbers = 40 - 10 + 1  # From 10 to 40\n    total_digits = single_digit_numbers + (2 * double_digit_numbers)\n    return total_digits\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbolic representations for each person's level and assign to people.\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon', integer=True)\n    \n    # Create a list of conditions from the given information.\n    conditions = [\n        A > C,        # (1) A is higher than C,\n        A < D,        # (1) but lower than D,\n        B < Xavier,   # (2) B is lower than Xavier's unit,\n        D == 5 * Yvonne,  # (3) D is 5 times Yvonne's unit,\n        Zachary + 2 - Xavier == Xavier - Waylon,  # (4) If Zachary moves up 2, it's equidistant between Xavier and Waylon,\n        Zachary == Yvonne + Xavier,  # (5) Zachary's level is the sum of Yvonne's and Xavier's.\n        # Domains of the variables.\n        A > 0, A <= 18,\n        B > 0, B <= 18,\n        C > 0, C <= 18,\n        D > 0, D <= 18,\n        Zachary > 0, Zachary <= 18,\n        Yvonne > 0, Yvonne <= 18,\n        Xavier > 0, Xavier <= 18,\n        Waylon > 0, Waylon <= 18\n    ]\n\n    # Solve the system of equations based on the conditions.\n    solutions = solve(conditions)\n    \n    # Iterate through each solution and validate if it fits the conditions of the apartment levels.\n    for solution in solutions:\n        # Validate all the constraints for the apartment levels.\n        if all(1 <= solution[var] <= 18 for var in [A, B, C, D, Zachary, Yvonne, Xavier, Waylon]):\n            return solution[A]\n\n    return None\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Number of teams in each of the 8 groups\n    teams_in_group = 4\n    \n    # Each team plays against each other team exactly once in the group stage\n    # Number of games in one group is a combination of 4 taken 2 at a time (4C2)\n    group_games_per_group = (teams_in_group * (teams_in_group - 1)) // 2\n    \n    # Total number of group stage games is 8 times the number of games in one group\n    total_group_games = group_games_per_group * 8\n    \n    # Knockout stage games: top 16 (1/8 finals), top 8 (quarter-finals), top 4 (semi-finals), \n    # plus the third-place playoff and the final\n    total_knockout_games = 16 - 1 + 8 - 1 + 4 - 1 + 2  # includes semi-finals, finals and third-place playoff\n    \n    # Total number of games played throughout the World Cup\n    total_games = total_group_games + total_knockout_games\n    \n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # LCM of 4 and 6 is the number of seconds at which they will both flash\n    # at the same instant.\n    # The LCM of 4 and 6 is 12\n\n    # In one minute, they will flash together 60 / LCM(4,6) times.\n    # Number of times they flash together in one minute\n    times_per_minute = 60 / 12\n\n    # Since there are 60 minutes in one hour, we multiply by 60\n    ans = times_per_minute * 60\n\n    return int(ans)\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 1, 22)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(total_paintings * 0.40)\n    french_landscapes = 25\n    total_french = 40\n\n    still_lifes = total_paintings - landscapes\n    french_still_lifes = total_french - french_landscapes\n    non_french_still_lifes = still_lifes - french_still_lifes\n    \n    return non_french_still_lifes\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of rose drink in milliliters\n    max_volume_per_glass = total_volume // 9  # Greatest volume in milliliters that can be poured into each glass\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    amount_Amy = 100\n    concentration_Amy = 0.50\n    amount_dogfood = 400\n    concentration_dogfood = 0.80\n\n    total_amount = amount_Amy + amount_dogfood\n    total_rice = (amount_Amy * concentration_Amy) + (amount_dogfood * concentration_dogfood)\n\n    concentration_new_mixture = total_rice / total_amount\n\n    return concentration_new_mixture\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_in_meters_per_minute = 24\n    time_in_seconds = 300\n    time_in_minutes = time_in_seconds / 60\n\n    distance = speed_in_meters_per_minute * time_in_minutes\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    # Calculate each term in the sequence and add it to the sum S\n    S = sum(int('2' * i) for i in range(1, 2018))\n\n    # Get the last 5 digits of S\n    last_5_digits = S % 100000\n\n    return last_5_digits\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay = 12 * 15  # Total units of hay for 12 horses for 15 days.\n    days_for_20_horses = total_hay / 20  # How long the same pile of hay would feed 20 horses.\n\n    return days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        str_i = str(i)\n        moved_i = int(str_i[1:] + str_i[0])\n\n        if moved_i - i == 4707:\n            return i\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_age = 20\n    lin_age = 26\n\n    years_later = (48 - (oliver_age + lin_age)) / 2\n\n    return int(years_later)\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    difference_age_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    return difference_age_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    # Starting from the smallest number that ends with '35', which is 35 itself\n    smallest_multiple = 35\n    while True:\n        # Converting the number to a string to access its digits\n        number_str = str(smallest_multiple)\n        # Summing the digits of the number\n        digits_sum = sum(int(digit) for digit in number_str)\n        # Checking if the sum of the digits is 35 and the number ends with '35'\n        if digits_sum == 35 and number_str.endswith('35'):\n            break\n        # Incrementing by multiples of 35 to get the next number that ends with '35'\n        smallest_multiple += 35\n    return smallest_multiple\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    total_money = 8 * y\n    money_spent_on_watch = 4 * y\n    money_spent_on_handbag = 20\n    money_per_child = y - 5\n\n    # Equation representing money spent on watch, handbag, and given to children\n    equation = Eq(money_spent_on_watch + money_spent_on_handbag + 2 * money_per_child, total_money)\n\n    # Solve the equation for y\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    total_days = 0\n    \n    # Years between 1901 and 1999 inclusive\n    for year in range(1901, 2000):\n        if year % 4 == 0:\n            total_days += 366  # Leap year\n        else:\n            total_days += 365  # Non-leap year\n    \n    # Adding the days of year 2000\n    total_days += 366  # Year 2000 is a leap year\n    \n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    initial_amount = 100\n    deposit = 10\n    spend = -8\n    days = 15\n    cycle = 2\n\n    # Calculate completed cycles\n    completed_cycles = days // cycle\n    \n    # Calculate money after completed cycles\n    money_after_cycles = initial_amount + completed_cycles * (deposit + spend)\n\n    # Calculate remaining days after completed cycles\n    remaining_days = days % cycle\n\n    # Add the remaining day's transaction if it's a deposit day\n    final_amount = money_after_cycles + (deposit if remaining_days > 0 else 0)\n\n    return final_amount\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    num_hours = 12\n    first_strike = 1\n    last_strike = num_hours\n    total_strikes = (num_hours * (first_strike + last_strike)) // 2\n    return total_strikes\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of a ten-pence coin in grams\n    total_pence = 40  # total pence worth of coins\n    number_of_coins = total_pence / 10  # since each coin is ten pence\n    total_weight = weight_per_coin * number_of_coins  # total weight of all coins\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of buttons Nina originally has, and j be the number of buttons James has.\n    n, j = symbols('n j')\n\n    # Equation 1: Total number of buttons is 22\n    # n + j = 22\n    equation1 = Eq(n + j, 22)\n\n    # Equation 2: After giving 4 buttons to James, Nina and James have the same number of buttons.\n    # n - 4 = j + 4\n    equation2 = Eq(n - 4, j + 4)\n\n    # Solve the system of equations for n and j\n    solutions = solve((equation1, equation2), (n, j))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    # Find the numbers divisible by 3\n    divisible_by_3 = set(range(3, 100, 3))\n    # Find the numbers divisible by 7\n    divisible_by_7 = set(range(7, 100, 7))\n    # Use the inclusion-exclusion principle to find numbers divisible by either 3 or 7\n    divisible_by_3_or_7 = divisible_by_3.union(divisible_by_7)\n    # Find numbers less than 100 not divisible by 3 or 7\n    not_divisible_by_3_or_7 = set(range(1, 100)).difference(divisible_by_3_or_7)\n    # Return the count of these numbers\n    return len(not_divisible_by_3_or_7)\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    # Let x be the number of correct answers\n    # Total questions are 6, so (6 - x) will be the number of incorrect answers\n    # 5 marks are awarded for each correct answer and 2 marks are deducted for each wrong answer\n    # The equation for the total score is 5x - 2(6 - x) = 23\n\n    for x in range(7):  # Since there are only 6 questions, x can range from 0 to 6\n        if 5 * x - 2 * (6 - x) == 23:\n            return x\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_parts = 1 + 4  # Sum of ratio parts for adults and children\n    adults = (total_people * 1) // ratio_parts\n    return adults\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given values\n    initial_speed = 10  # initial speed in m/s\n    angle_degree = 37  # angle of incline in degrees\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Convert angle from degrees to radians for math functions\n    angle_radian = math.radians(angle_degree)\n\n    # Using conservation of energy, at the highest point, kinetic energy is all converted to potential energy\n    # Kinetic energy (initial) = Potential energy (at highest point)\n    # (1/2) * m * v^2 = m * g * h, where m cancels out, and v is the initial velocity\n    # So, h = (v^2) / (2 * g)\n\n    # However, we have to account for the angle of the incline, so we use components\n    # The component of the gravitational force that is acting against the motion up the ramp is g * cos(θ)\n    # Therefore, we modify our equation for h to include the angle: h = (v^2) / (2 * g * cos(θ))\n\n    # Calculating the height 'h' up the ramp\n    h = (initial_speed ** 2) / (2 * g * math.cos(angle_radian))\n\n    # The distance 's' along the ramp is related to the height 'h' through the sine of the incline angle:\n    # s = h / sin(θ)\n    s = h / math.sin(angle_radian)\n    \n    return h, s\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    start_seat = 3\n    num_children = 9\n\n    final_seat = (start_seat + total_candies - 1) % num_children\n    if final_seat == 0:\n        final_seat = num_children\n    \n    return final_seat\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    sum_of_numbers = sum(numbers)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # She could take out all 5 blue balls first.\n    # Then, she could move on to the orange balls, and she needs to take out all 4 to make a group of 4.\n    # At this point, she has one complete group of 4.\n    # Continuing with the worst case scenario, she now takes 3 yellow balls.\n    # She still doesn't have two groups of 4, because she has 5 blue, 4 orange, and 3 yellow.\n    # The next ball she takes out, whether it be blue, orange, or yellow, will complete the second group of 4.\n    \n    # Total number of balls, if taken out one by one in the worst case scenario:\n    balls_to_take_out = 5 + 4 + 3 + 1  # 5 blue, 4 orange, 3 yellow, and 1 more for the second group\n    return balls_to_take_out\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    # A knock-out tournament where 4 players compete and one winner proceeds.\n    # The tournament ends when there's only one winner.\n    # Therefore, each match reduces the number of players by 3.\n\n    total_players = 64\n    players_per_match = 4\n    players_out_per_match = players_per_match - 1\n\n    # The number of matches required is equal to the number of times we need to\n    # remove 3 players from the competition to be left with just one winner.\n    matches = (total_players - 1) // players_out_per_match\n\n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for i in range(1000, 10000):\n        first_digit = i // 1000\n        remaining_digits = i % 1000\n        new_number = (remaining_digits * 10) + first_digit\n        if new_number - i == 4707:\n            return i\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags_of_flour = 4\n\n    weight_of_all_flour = total_weight - cheese_weight\n    weight_per_bag_of_flour = weight_of_all_flour / num_bags_of_flour\n\n    return weight_per_bag_of_flour\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # First, we need to find the exchange rate between the British pound (GBP) and the Russian ruble (RUB).\n    # We will assume that the provided conversion rates are:\n    # 1 GBP = 100 RUB (This is a hypothetical conversion rate for the sake of this problem)\n    \n    # If Richard spent an amount in St Petersburg equivalent to the £14 he would spend for a CD in England,\n    # we need to calculate how many rubles that would be.\n    price_in_pounds = 14\n    exchange_rate = 100  # 1 GBP = 100 RUB\n\n    # Convert the price of the CD to rubles.\n    price_in_rubles = price_in_pounds * exchange_rate\n    \n    # Now assume Richard has the same amount in rubles as the price of a CD in pounds\n    # We want to find out how many CDs he could buy in St Petersburg.\n    # We need to determine the price of a CD in RUB in St Petersburg. We will assume this price is provided as:\n    price_per_cd_rubles = 700 # This is a hypothetical price for a CD in St Petersburg, in rubles.\n    \n    # The number of CDs Richard can buy is the total rubles he has divided by the price of one CD in rubles.\n    num_cds = price_in_rubles // price_per_cd_rubles\n    \n    return int(num_cds)\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Take all M&M's of one color plus one of another color to guarantee two different colors.\n    # Since we want the smallest number, we always take all of the color with the least number first.\n    # In this case, red has the least number which is 3\n    # So we take all 3 red, and take 1 from yellow to guarantee we have two different colors.\n    ans = 3 + 1\n    return ans\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Speed ratios Andrew : Bernice : Cassandra \n    # From Andrew at 5 and Bernice at 3, we infer Bernice has 3/5 the speed of Andrew\n    A_to_B = 5 / 3\n    \n    # From Bernice at 6 and Cassandra at 10, we infer Cassandra has 10/6 times the speed of Bernice\n    B_to_C = 10 / 6\n    \n    # Speed ratio of Andrew to Cassandra by multiplying the two ratios\n    A_to_C = A_to_B * B_to_C\n    \n    # When Cassandra is at 19, we calculate where Andrew is by multiplying 19 with inverse Cassandra to Andrew ratio\n    level_A = 19 / A_to_C\n\n    return level_A\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    # Define the new operation symbol as a function\n    def new_op(a, b):\n        return a * b + a + b\n\n    # Given the equation: 2 ⊻ (x ⊻ 4) = 59\n    # Let's find the value of x\n\n    # Start by searching for x in a reasonable range. \n    # Since 2 ⊻ (1 ⊻ 4) is already 13, x must be lower than 13.\n    for x in range(14):\n        # Check if the current x satisfies the given equation\n        if new_op(2, new_op(x, 4)) == 59:\n            # Return the value of x if it satisfies the equation\n            return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    pattern_length = len(pattern)\n    total_digits = 43\n    full_patterns = total_digits // pattern_length\n    remaining_digits = total_digits % pattern_length\n\n    full_pattern_sum = sum(int(digit) for digit in pattern)\n    remaining_pattern_sum = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    total_sum = full_patterns * full_pattern_sum + remaining_pattern_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # let a be the first term, and d be the common difference\n    n1 = 9  # number of terms for sum1\n    sum1 = 72  # sum of the first n1 terms\n    n2 = 23  # number of terms for sum2\n    sum2 = 736  # sum of the first n2 terms\n    n3 = 16  # number of terms for sum3 (which we want to find)\n    \n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (2a + (n-1)d)\n    # We have two equations for two unknowns (a and d)\n    # Equation 1: sum1 = n1/2 * (2a + (n1-1)d)\n    # Equation 2: sum2 = n2/2 * (2a + (n2-1)d)\n    \n    # Solve the two linear equations to find a and d\n    a = (sum2*n1 - sum1*n2) / (n1*n2 - n1*(n1-1)/2 - n2*(n2-1)/2 + n1*(n1-1)/2)\n    d = (sum1 - n1 * a) * 2 / n1 + 1 - a\n\n    # Now find the sum of the first n3 terms using the values for a and d\n    sum3 = n3/2 * (2*a + (n3-1)*d)\n\n    return int(sum3)\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    minutes_per_quiz = 30\n    total_quizzes = 4\n    total_minutes = minutes_per_quiz * total_quizzes\n    hours = total_minutes / 60\n    \n    return hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    km_to_cm = 4.7 * 100000  # 1 km equals 100,000 cm\n    return km_to_cm\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n    \n    current_sum_grandsons = sum(grandsons_ages)\n    \n    years = 0\n    while current_sum_grandsons < grandpa_age:\n        years += 1\n        current_sum_grandsons += 3  # each grandson gets 1 year older\n        grandpa_age += 1  # grandpa gets 1 year older\n    \n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair, table = symbols('chair table')\n    equation1 = Eq(table, 3 * chair)\n    equation2 = Eq(4 * table + 9 * chair, 504)\n\n    solutions = solve((equation1, equation2), (chair, table))\n\n    return solutions[chair]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    # Loop over the number of 5p coins (from 0 to 8 because 9*5p is 45p which is more than 40p)\n    for five_p in range(0, 9):\n        # Calculate the remaining amount to be made up by 10p coins\n        remaining = 40 - five_p * 5\n        # Check if the remaining amount is divisible by 10\n        if remaining % 10 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -4  # the common difference between terms\n    term = first_term\n    num_terms = 0\n    \n    # Keep finding terms until the term is negative\n    while term > 0:\n        term += difference\n        num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for number in range(100, 1000):\n        digits = [int(digit) for digit in str(number)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if 100 <= product <= 999:\n            return number\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    speed_shafur = 54  # in km/h\n    speed_samuel = 66  # in km/h\n\n    # Convert 40 minutes to hours\n    time_initial_drive = 40 / 60  # in hours\n\n    # Distance both drove before Samuel turned back\n    distance_initial_drive_shafur = speed_shafur * time_initial_drive\n    distance_initial_drive_samuel = speed_samuel * time_initial_drive\n\n    # Since Samuel turns back, he covers the initial distance twice\n    # Therefore, when Shafur reaches Town Y, Samuel has to cover\n    # the initial distance_shafur by traveling at a higher speed to reach at the same time.\n\n    # Let the distance from X to Y be 'd'.\n    # Time taken by Shafur to cover the whole distance 'd' at his speed.\n    # time_shafur = d / speed_shafur\n\n    # Time taken by Samuel to cover the distance from the point of return to Town Y plus the initial distance covered twice.\n    # time_samuel = (d - distance_initial_drive_shafur + (2 * distance_initial_drive_samuel)) / speed_samuel\n\n    # Given that they reached Town Y at the same time, their time of travel must be same\n    # time_shafur = time_samuel\n\n    # Solving the equation to find 'd'\n    d = symbols('d')\n    equation = Eq(speed_shafur * (d / speed_shafur), ((d - distance_initial_drive_shafur + (2 * distance_initial_drive_samuel)) / speed_samuel))\n\n    # Solve the equation for 'd'\n    distance = solve(equation, d)\n\n    return distance[0]\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n    \n    vases_needed = (flowers + vase_capacity - 1) // vase_capacity\n\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = -(-38 // 3)  # Ceiling division to find the first multiple of 3 greater than or equal to 38\n    last_multiple = 81 // 3       # Floor division to find the last multiple of 3 less than or equal to 81\n    return last_multiple - first_multiple + 1  # +1 to include both the first and last in the count\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Sum of sequence 3 to 10\n    sum_3_to_10 = sum(range(3, 11))\n    # Sum of sequence 10 to 3\n    sum_10_to_3 = sum(range(3, 11))\n    # Total sum is the sum of both sequences minus 10 (as it's included twice)\n    total_sum = sum_3_to_10 + sum_10_to_3 - 10\n\n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip, bud + 50)\n    equation2 = Eq(6 * (bud - 3/4 * bud), 5 * (pip - 4/5 * pip))\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_after_feb = 78\n    sold_in_feb = 13\n    remaining_after_jan = (remaining_after_feb + sold_in_feb) * 2\n    sold_in_jan = 22\n    initial_phones = (remaining_after_jan + sold_in_jan) * 2\n\n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    base_number = (18 * 7) / 3\n    part_of_number = (base_number * 5) / 6\n    return part_of_number\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Evaluate the first fraction\n    numerator1 = 7 / -3.3333333333333335 #  -3.\\dot{3} (repeating 3) approximated with its decimal representation\n    denominator1 = (-0.027) ** (1/3)     # Cube root of -0.027\n    fraction1 = numerator1 / denominator1\n\n    # Evaluate the second fraction\n    numerator2 = 2**3 / 4**2\n    denominator2 = 0.125 * (1.8 - (0.2 * 7))\n    fraction2 = numerator2 / denominator2\n\n    # Third expression, with repeating decimal in the denominator\n    repeating_fraction = 0.1 / 0.14285714285714285 # 0.\\dot{1}\\dot{4}\\dot{2}\\dot{8}\\dot{5}\\dot{7} (rounded)\n    expression3 = repeating_fraction + (2 * 0.3)\n\n    # Final answer is the sum of the first two fractions minus the third expression\n    ans = fraction1 + fraction2 - expression3\n\n    return ans\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1  # (5-1) because each game eliminates one person\n\n    return num_games\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # We will check each age option, no need to go past the highest option\n    max_age = 84\n    # Check each age for the conditions.\n    for age in range(1, max_age + 1):\n        # Age 3 years ago was a square number.\n        if (age - 3)**0.5 % 1 == 0:\n            # Age next year will be a prime number.\n            if isprime(age + 1):\n                # Age in 12 years will be a cube number.\n                if round((age + 12)**(1/3))**3 == age + 12:\n                    return age\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    # Let the number of pencils be x\n    # Then the number of pens is x + more_pens\n    # The sum of pencils and pens is total_items\n    # x + (x + more_pens) = total_items\n    # 2x + more_pens = total_items\n    # 2x = total_items - more_pens\n    # x = (total_items - more_pens) / 2\n    # The solution gives us the number of pencils\n    \n    pencils = (total_items - more_pens) / 2\n\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Average spent from January to April is 500 dollars per month for 4 months\n    jan_to_apr = 500 * 4\n    \n    # Average spent from May to July is 300 dollars per month for 3 months\n    may_to_jul = 300 * 3\n\n    # Total spent from August to September is 400 dollars\n    aug_to_sep = 400\n\n    # Average spent from October to December is 300 dollars per month for 3 months\n    oct_to_dec = 300 * 3\n    \n    # Total amount spent in the year\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    \n    # Total months in a year\n    total_months = 12\n    \n    # Calculate the average spent per month from January to December\n    average_per_month = total_spent / total_months\n    \n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    initial_apples = 5 * 9\n    apples_from_bud = 16\n    total_apples = initial_apples + apples_from_bud\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    red_packet = 70\n    num_packets = 4\n    short_of = 15\n    \n    total_money = (red_packet * num_packets) - short_of\n    \n    return total_money\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        \n        if '3' in str(i):\n            break\n\n    return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    num_people = 5\n    games_played = num_people - 1\n    return games_played\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of 2016\n    prime_factors = factorint(2016)\n\n    # Get the list of primes raised to their respective powers\n    ages = [p**e for p, e in prime_factors.items()]\n\n    # Since the product of ages is 2016 and all children are under 10,\n    # combine some factors to ensure all ages are under 10\n    while len(ages) > 4 or any(age >= 10 for age in ages):\n        # Combine two smallest factors and sort the list again\n        ages.sort()\n        ages = [ages[0] * ages[1]] + ages[2:]\n    \n    ans = sum(ages)\n    return ans\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Since Chris is 7th from the front and 4th from the back,\n    # There are 6 people in front of him and 3 people behind him in the same row.\n    total_rows = 6 + 1 + 3 # +1 for Chris himself\n    \n    # Similarly, since he is 3rd from the left and 7th from the right,\n    # There are 2 people to his left and 6 people to his right in the same column.\n    total_columns = 2 + 1 + 6 # +1 for Chris himself\n    \n    # Total number of students in the rectangular field is rows multiplied by columns.\n    total_students = total_rows * total_columns\n    \n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    combined_age_4_years_ago = 10\n    years_passed_since_then = 4 + 2\n    combined_age_now = combined_age_4_years_ago + 2 * years_passed_since_then\n    return combined_age_now\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    # total value in pence\n    total_pence = 1575\n    \n    # let x be the number of 10p coins\n    # so number of 20p coins is 2x\n    # and number of 5p coins is x/2\n    \n    # equation for the total value:\n    # (5 * x/2) + (10 * x) + (20 * 2x) = total_pence\n    # Multiply everything by 2 to avoid fractions:\n    # 5x + 20x + 80x = 2 * total_pence\n    # 105x = 2 * total_pence\n    # x = (2 * total_pence) / 105\n    \n    # Solve for 10p coins\n    x = (2 * total_pence) // 105\n    \n    # Calculate the number of 20p coins\n    num_20p_coins = 2 * x\n    \n    return num_20p_coins\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Anna, Betsy, and Charlene have a total of 168 marbles\n    total_marbles = Eq(anna + betsy + charlene, 168)\n\n    # Charlano gave 15 marbles to Betsy, and then Betsy gave 8 marbles to Anna\n    # So we adjust their counts according to the transactions\n    charlene_after = charlene - 15\n    betsy_after = betsy + 15 - 8\n    anna_after = anna + 8\n\n    # The ratio of their marbles is 2:5:7 after the transactions\n    ratio = Eq(anna_after / betsy_after / charlene_after, 2 / 5 / 7)\n\n    # Solve the system of equations\n    solutions = solve((total_marbles, ratio), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys - 1, girls)  # Each boy has as many sisters as brothers (boys - 1 because he is not his own brother)\n    equation2 = Eq(2 * (girls - 1), boys)  # Each girl has half as many sisters as brothers (girls - 1 because she is not her own sister)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    ans = solutions[boys] + solutions[girls]\n    return ans\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for x, which is the average speed during the first 30 minutes\n    x = symbols('x')\n    \n    # Define the distances covered in each 30-minute period in terms of x\n    # The average speed is given in miles per hour, and he drives for 0.5 hours in 30 minutes\n    distance_first_30 = x * 0.5\n    distance_second_30 = (x - 20) * 0.5\n    distance_third_30 = (x + 10) * 0.5\n    \n    # Set up the equation where the sum of all distances equals 70 miles\n    equation = Eq(distance_first_30 + distance_second_30 + distance_third_30, 70)\n    \n    # Solve the linear equation for x\n    solution = solve(equation, x)\n    \n    # Solution will be a list, we take the first (and in this case, only) element\n    return solution[0]\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining = 60\n    fraction_eaten = 3/5\n    fraction_remaining = 1 - fraction_eaten\n\n    original_mass = remaining / fraction_remaining\n\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%d %b %Y')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 11 - 5  # Common difference obtained from the sequence\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally_amount = 8\n    kelvin_amount = sally_amount + 12\n    ivan_amount = 2 * kelvin_amount\n    return ivan_amount\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    \n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_10_number = base_10_number // 6\n        base_6_number = str(remainder) + base_6_number\n    \n    return base_6_number\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # 27 apples to distribute to 5 children with unique amounts\n    # Start assigning apples to children in ascending order\n    # The one with least apples gets 1, second least gets 2, and so on.\n    # The question asks for the least amount the last child could get, \n    # which is when the distribution is as equal as possible.\n\n    # Initialize the minimum apples assigned to first four children\n    # with 1, 2, 3, 4 to respect the \"different amounts\" condition\n    min_apples = [1, 2, 3, 4]\n    \n    # Calculate the remaining apples after distributing the minimum\n    # apples to the first four children\n    remaining_apples = 27 - sum(min_apples)\n\n    # The remaining apples would be the least amount possible \n    # for the child who gets the most as we started from the minimum\n    return remaining_apples\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 10\n    note_amount = 50\n\n    total_cost = total_cost_per_person * number_of_people\n    total_tip = (total_cost * tip_percentage) / 100\n    total_payment = total_cost + total_tip\n    change_received = note_amount - total_payment\n\n    return change_received\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    return 60\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    day_climb = 4\n    night_slide = 2\n    distance_climbed = 0\n    day = 0\n    \n    while distance_climbed < total_distance:\n        day += 1\n        distance_climbed += day_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_slide\n\n    return day\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    \n    while True:\n        total = 5 * n * (n + 1) // 2  # Sum of arithmetic series formula: n/2 * (first_term + last_term)\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    return (6/7) * 42\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    ways = []\n    for x1 in range(1, 25):\n        for x2 in range(x1+1, 25):\n            for x3 in range(x2+1, 25):\n                for x4 in range(x3+1, 25):\n                    for x5 in range(x4+1, 25):\n                        for x6 in range(x5+1, 25):\n                            x7 = 25 - (x1 + x2 + x3 + x4 + x5 + x6)\n                            if x6 < x7:\n                                ways.append([x1, x2, x3, x4, x5, x6, x7])\n    return ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    return 0.90\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths_of_number = 18\n    number = three_sevenths_of_number * (7 / 3)\n    five_sixths_of_number = (5 / 6) * number\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # Total marbles.\n    total_marbles = 26\n    \n    # In order to win, Jason must leave Belinda with a number of marbles that is\n    # a multiple of 4 (since Belinda can only take 1 to 3 marbles).\n    # Jason can win by always making the total number of marbles that both have taken \n    # to be a multiple of 4 after his turn.\n    # Since they must take at least 1 marble each turn, we need to find a number x for Jason\n    # such that (26 - x) is a multiple of 4 (because x + 3*(y) should be 25 for Jason to win, where y is an integer).\n    # This allows Jason to take the last turn before Belinda would be forced to take the\n    # final marble.\n    \n    # We need to find x where (26 - x) % 4 == 0\n    # Possible values of x are 1, 2, or 3 (as per the rules of the game),\n    # so we iterate through them to find the correct value of x.\n    \n    for x in range(1, 4):\n        if (total_marbles - x) % 4 == 0:\n            return x\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    \n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of a pencil and a marker\n    pencil, marker = symbols('pencil marker')\n    \n    # Define the equations based on the given information\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n    \n    # Use sympy's solve function to solve the system of equations\n    solutions = solve((equation1, equation2), (pencil, marker))\n    \n    # Calculate the total cost of 7 pencils and 7 markers using the solutions found\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n    \n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    volunteer = 1\n    while True:\n        trees_if_four_per = 4 * volunteer + 5   # Trees when each volunteer plants 4 trees\n        trees_if_seven_per = 7 * (volunteer - 1)  # Trees when each volunteer plants 7 trees\n        if trees_if_four_per == trees_if_seven_per:\n            return volunteer, trees_if_four_per\n        volunteer += 1\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let G be the grass growth per week and C be the total grass capacity\n    # 120 * 12 = G * 12 + C\n    # 150 * 8 = G * 8 + C\n\n    # Creating a system of equations from the above equations\n    from sympy import symbols, Eq, solve\n\n    G, C = symbols('G C')\n    equation1 = Eq(120 * 12, G * 12 + C)\n    equation2 = Eq(150 * 8, G * 8 + C)\n\n    # Solving the equations to find G and C\n    solutions = solve((equation1, equation2), (G, C))\n    grass_growth_per_week = solutions[G]\n    total_grass_capacity = solutions[C]\n\n    # Calculating how many cows the pasture can sustain for 6 weeks\n    # Let x be the number of cows it can sustain for 6 weeks\n    # x * 6 = G * 6 + C\n    x = symbols('x')\n    equation3 = Eq(x * 6, grass_growth_per_week * 6 + total_grass_capacity)\n\n    # Solving for x\n    solution_x = solve(equation3, x)\n    return solution_x[x]\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Equation representing total number of stickers before moving\n    equation1 = Eq(A + B, 270)\n    \n    # Equation representing the ratio after moving 56 stickers from A to B\n    equation2 = Eq(B + 56, 3 / 2 * (A - 56))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Given proportion 10:x = 14:21\n    # Cross multiply to find x\n    x = 10 * 21 // 14\n    return x\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    common_difference = 6\n    last_term = 41\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n    \n    packets_needed = (children + bars_per_packet - 1) // bars_per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    ans = 0.05 * 180\n    return ans\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # Starting with the assumption that the side of the square is n,\n    # the number of students in the outermost layer (boys) will be n^2,\n    # and the next layer (girls) will be (n-2)^2, and so on.\n    # Therefore, the difference in the number of boys and girls is given by:\n    # (n^2 + (n-4)^2 + ...) - ((n-2)^2 + (n-6)^2 + ...) = 55\n    # Summing over the layers and solving for n:\n    \n    # As n increases, the term (n-2) will eventually become negative or zero.\n    # Therefore, we need to find the smallest positive integer value of n for which this expression is true.\n    # We can do this by iterating over potential values of n:\n\n    n = 1  # We start with the smallest possible square\n\n    while True:\n        # Calculate the total number of boys and girls for the current n\n        boys = sum((n - 2 * i) ** 2 for i in range(n // 2 + 1))\n        girls = sum((n - 2 * i - 2) ** 2 for i in range(n // 2))\n\n        if boys - girls == 55:\n            # Once we find the difference to be 55, return the total number of students (boys + girls)\n            return boys + girls\n        n += 2  # We increase n by 2 since the difference in layer counts can only be even\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    from sympy import divisors\n\n    number = 2\n    while True:\n        factors = divisors(number)[:-1]\n        if sum(factors) == number:\n            return number\n        number += 1\n        \nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    ans = sum([30, 26, 22, 18, 14]) - sum([28, 24, 20, 16])\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term = 10\n    last_term_value = 31\n    common_difference = 28 - 25\n\n    first_term = last_term_value - (term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    \n    num_boxes = total_cakes // cakes_per_box\n    if total_cakes % cakes_per_box != 0:\n        num_boxes += 1\n    \n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n    \n    sweets_to_give_away = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_to_give_away // number_of_friends\n    \n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    total_muffins = 3998\n    lovelle_sold = 462\n    makayla_sold_fraction = 2 / 5\n    \n    # Lovelle's muffins after selling\n    lovelle_left = lovelle - lovelle_sold\n    \n    # Makayla's muffins after selling 2/5 of her muffins\n    makayla_left = makayla - (makayla * makayla_sold_fraction)\n\n    # The equation representing the total amount of muffins before selling\n    equation_total = Eq(lovelle + makayla, total_muffins)\n    \n    # The equation representing the condition that they both have equal muffins left\n    equation_equal_left = Eq(lovelle_left, makayla_left)\n\n    # Solving for Lovelle's original amount of muffins\n    solutions = solve((equation_total, equation_equal_left), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount of money Irene had initially\n    x = symbols('x')\n\n    # Create the equation based on the problem statement\n    equation = Eq((1/4) * x + (2/7) * x, 225)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Since the solve function returns a list, we retrieve the first element\n    return solution[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # Start with the largest number 30.\n    # To have multiple positive integers add to 30,\n    # we have to subtract 1 from the total and add 1 as a term.\n    # As we keep subtracting 1 and adding a new term of value 1, the number of terms increase.\n    # Once we hit the middle point, where the remaining sum to reach 30 is less than our largest term,\n    # we stop because any subsequent splits increase duplicates. This happens at 15.\n    # Therefore, our iteration stops at 15, which gives us the answer.\n    largest_term = 30\n    count = 0\n    for num in range(largest_term, 0, -1):\n        count += 1\n        largest_term -= num\n        if largest_term <= count:\n            break\n\n    return count\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # We want to find the minimum number of cards to guarantee 10 of the same color.\n    # Using the Pigeonhole Principle, in the worst case, we pick all but 9 cards of\n    # each color, which would be 4-1, 8-1, 12-1, and 16-1 cards for each color.\n    \n    # Total number of cards picked in the worst-case scenario before getting 10 of the same color\n    worst_case_picks = (4 - 1) + (8 - 1) + (12 - 1) + (16 - 1)\n    \n    # To guarantee the next card is the 10th of the same color, we add 1 to the worst-case scenario.\n    ans = worst_case_picks + 1\n    return ans\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap = 1.1\n    # The number of gaps is one less than the number of daffodils\n    num_gaps = num_daffodils - 1\n    # Total length is the number of gaps times the size of each gap\n    total_length = num_gaps * gap\n    return total_length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    ribbon_length = 87\n    pieces = 30\n    length_per_piece = ribbon_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    # Since the boxes are identical, we only need to consider one order of stickers\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):  # x2 must be greater than x1 to avoid identical counts\n            x3 = 9 - x1 - x2\n            if x2 < x3:  # Ensure x3 has a different number of stickers than x1 and x2\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    ratio_alex_to_jane = 1.5\n    total_portion = ratio_alex_to_jane + 1\n    alex_drinks = total_juice * (ratio_alex_to_jane / total_portion)\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance_to_market = 48  # in meters\n    walking_speed = 8        # meters per minute\n    correct_time = distance_to_market / walking_speed  # correct number of minutes\n    return int(correct_time)\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    # Total ways to select a group of 4 out of 12 students without restriction\n    total_combinations = comb(12, 4)\n    \n    # Total ways to select a group of 4 girls only (0 boys)\n    girls_only_combinations = comb(5, 4)\n    \n    # Subtracting combinations with only girls from total combinations\n    # to ensure there is at least 1 boy in the group\n    ans = total_combinations - girls_only_combinations\n    \n    return ans\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    # Since 1/4 of 16 equals to 4. We need to find a number which will give us the same result when multiplied by 1/2.\n    # 1/2 of x should be equal to 1/4 of 16, thus x should be twice the amount since 1/4 is half of 1/2.\n    result = (1 / 4) * 16\n    x = result * 2\n    return x\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_fruits = 18 + 30 + 18\n    num_friends = 6\n    fruits_per_friend = total_fruits / num_friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    bag_cost = 60\n    # Let x be the total money Bud had initially.\n    # After spending 1/4 of it on a book, she is left with 3/4 of the money.\n    # Then she spends 2/5 of the remaining money on a bag.\n    # Therefore, (3/4) * (2/5) * x = bag cost\n    # => x = bag_cost / ((3/4) * (2/5))\n    initial_money = bag_cost / (3/4 * 2/5)\n    return initial_money\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    digits = 0\n    page = 1\n    while digits < total_digits:\n        digits += len(str(page))\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 241, 2):  # Starting from 201 to include only odd numbers\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total length of the road with trees is (number of trees - 1) * distance between trees\n    length_of_road = (41 - 1) * 3\n    \n    # As there are lamp posts at both ends of the road,\n    # the total length divided by the distance between lamp posts + 1 gives the number of lamp posts\n    num_lamp_posts = (length_of_road // 8) + 1\n    \n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for unit_price in range(1, 73):\n        if 72 % unit_price == 0:\n            total_price = unit_price * 72\n            if total_price // 10000 == 6 and total_price % 10 == 9 and total_price % 100 // 10 == 7:\n                return unit_price\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the total number of candies\n    # Let b be the number of students in class B\n    c, b = symbols('c b')\n\n    # Number of students in class A is twice the number of students in class B\n    # If each student in class A gets 4 candies, 20 more candies are needed\n    # This implies: 4*(2*b) + 20 = c\n    equation1 = Eq(4 * (2 * b) + 20, c)\n\n    # If each student in class B gets 6 candies, there will be 16 candies left\n    # This implies: 6*b + 16 = c\n    equation2 = Eq(6 * b + 16, c)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, b))\n\n    # We want the total number of candies c\n    return solutions[c]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of train in meters\n    speed = 40          # speed in meters per second\n\n    time = train_length / speed  # time in seconds\n\n    return time\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # 2-digit numbers range from 10 to 99\n        digits_sum = sum(int(digit) for digit in str(number))\n        if digits_sum % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    spent_on_dvd = total_savings / 3\n    remaining_after_dvd = total_savings - spent_on_dvd\n    spent_on_book = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - spent_on_book\n\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for _ in range(years):\n        initial_rabbits *= 3     # Rabbits multiply 3 times each year\n        initial_rabbits /= 2     # Wolves eat half of the rabbits\n\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Speeds for both trips\n    speed1 = 60\n    speed2 = 30\n    \n    # Distances for both trips\n    distance1 = 1\n    distance2 = 1\n    \n    # Time taken for both trips\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    \n    # Total distance and total time\n    total_distance = distance1 + distance2\n    total_time = time1 + time2\n    \n    # Calculate average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    money_per_wash = 1.40\n    desired_money = 12\n    num_washes = desired_money / money_per_wash\n\n    return int(num_washes) + 1 if num_washes % 1 != 0 else int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    initial_candies = 2\n    # Since she eats \"2 times the number of candies that she ate on the previous day\", \n    # for the fourth day it would be 2 raised to the power of (4 - 1) because she starts counting from day 1.\n    day = 4\n    candies_eaten_on_fourth_day = initial_candies * (2**(day - 1)) \n    return candies_eaten_on_fourth_day\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for number in range(121, 136):\n        if number % 4 == 0 and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    a, n = symbols('a n', integer=True)\n    equations = [Eq(290 % n, a), Eq(235 % n, a+2), Eq(200 % n, a+5)]\n    sols = solve(equations)\n    for sol in sols:\n        if sol[n] > 1:  # Ensure n is a natural number greater than 1\n            return sol[n]\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earning = 70\n    number_of_days_worked = 6  # Monday to Saturday inclusive is 6 days\n\n    total_earnings = average_daily_earning * number_of_days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the two unknown angles\n    angle1, angle2 = symbols('angle1 angle2')\n    \n    # Given: one angle is twice the other\n    equation1 = Eq(angle1, 2 * angle2)\n    \n    # The sum of angles in a triangle is always 180 degrees, and one angle is 90 degrees (right angle)\n    equation2 = Eq(angle1 + angle2 + 90, 180)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (angle1, angle2))\n    \n    # Larger angle between angle1 and angle2\n    return max(solutions[angle1], solutions[angle2])\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):  # P cannot be 0\n        for I in range(0, 10):\n            for S in range(0, 10):\n                if P != I and P != S and I != S: # ensuring all digits are different\n                    PI = 10 * P + I\n                    IS = 10 * I + S\n                    if 4 * IS == PI:\n                        return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_age = 765\n    num_members = 9\n    # The sum of an arithmetic sequence is given by the formula: n/2 * (first_term + last_term),\n    # where n is the number of terms. Since we have the sum and the number of terms (9),\n    # we can express the first_term + last_term as (total_age * 2) / num_members.\n    \n    # Also, since the ages are consecutive natural numbers, the difference between each term is 1,\n    # so the first_term + last_term = first_term + (first_term + num_members - 1).\n    # Therefore, we have: 2*first_term + num_members - 1 = (total_age * 2) / num_members.\n    \n    first_and_last_age_sum = (total_age * 2) / num_members\n    first_age = (first_and_last_age_sum + 1 - num_members) // 2\n    middle_member_age = first_age + num_members // 2\n\n    return int(middle_member_age)\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    hours_six_days = 3 * 6\n    hours_sunday = 10\n    total_days = 7\n    total_hours = hours_six_days + hours_sunday\n    average_per_day = total_hours / total_days\n    return average_per_day\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walk_speed = 75  # m/min\n    run_speed = walk_speed * 2  # m/min\n\n    walk_time = 24  # min\n\n    # Total distance to school\n    distance = walk_speed * walk_time\n\n    # Half the journey by walking\n    half_distance = distance / 2\n\n    # Time taken to cover half distance by walking\n    time_walking_half = half_distance / walk_speed\n\n    # Time taken to cover half distance by running\n    time_running_half = half_distance / run_speed\n\n    # Total time for half walking and half running\n    total_time = time_walking_half + time_running_half\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    # There are 79 trees, so there are 78 intervals between the trees\n    intervals = 79 - 1\n\n    # The total length of the road is 320m\n    total_length = 320\n\n    # The distance between each tree is the total length divided by the number of intervals\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys_watched_movie = 120 * 0.50\n    girls_watched_movie = 80 * 0.60\n    total_pupils_watched_movie = boys_watched_movie + girls_watched_movie\n    return int(total_pupils_watched_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total savings that Kim originally had\n    x = symbols('x')\n    \n    # Kim gave 1/3 of her savings to her mother\n    gave_to_mother = x / 3\n    \n    # Kim spent 177 + 129 on dresses and earrings\n    spent_on_items = 177 + 129\n    \n    # What is left is 1/2 of what she gave to her mother\n    left_over = gave_to_mother / 2\n    \n    # Equation representing the total savings:\n    # Part given to her mother + spent on items + what is left = total savings\n    equation = Eq(gave_to_mother + spent_on_items + left_over, x)\n    \n    # Solve for x\n    savings = solve(equation, x)\n    \n    # Since we defined x as the symbol, the actual savings is the first (and only) solution\n    return savings[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    count = 0\n    for basket1 in range(7): # 0 to 6 apples in the first basket\n        for basket2 in range(7 - basket1): # remaining apples for the second basket\n            # The third basket's apple count is determined by the other two\n            basket3 = 6 - basket1 - basket2\n            # Count each valid arrangement\n            count += 1\n    return count\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    piece_length = 15\n\n    number_of_pieces = total_length // piece_length\n    leftover_length = total_length % piece_length\n\n    return leftover_length\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3/100\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    possible_values = []\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            possible_values.append(N)\n    return sum(possible_values)\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker = 6\n    num_days = 9\n    total_skirts = sum((skirts_per_worker * d) for d in range(1, num_days + 1))\n\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c represent the number of chickens and k represent the number of cows\n    c, k = symbols('c k')\n    \n    # There are 8 cows and chickens altogether\n    equation1 = Eq(c + k, 8)\n    \n    # The total number of legs is 26\n    # Since chickens have 2 legs and cows have 4 legs\n    equation2 = Eq(2*c + 4*k, 26)\n    \n    solutions = solve((equation1, equation2), (c, k))\n    \n    # We are asked for the number of chickens\n    return solutions[c]\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    sequence_start = 11\n    common_difference = 3\n    ans = []\n\n    for n in range(30, 61):\n        if (n - sequence_start) % common_difference == 0:\n            ans.append(n)\n\n    return ans\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    cap, digits, num = 0, 1, 9\n    \n    while cap + digits * num < 2023:\n        cap += digits * num\n        digits += 1\n        num *= 10\n        \n    remaining_digits = 2023 - cap\n    value_at_position = (remaining_digits - 1) // digits\n    number = 10**(digits - 1) + value_at_position\n    digit_index = (remaining_digits - 1) % digits\n    \n    return int(str(number)[digit_index])\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    class_size = total_sweets // min_sweets_per_student\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # Equations based on the given word problem\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n\n    tax_for_first_50k = 0.08 * 50000\n    tax_for_remaining = (0.08 + T) * (150000 - 50000)\n\n    equation = Eq(tax_for_first_50k + tax_for_remaining, 15000)\n\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    woody_score = 66\n    unanswered = 1\n    correct_answers = 0\n\n    # Since Woody answered all but one question\n    answered_questions = total_questions - unanswered\n\n    # Find the number of correct answers by iterating over possible scenarios\n    for correct in range(answered_questions + 1):\n        incorrect = answered_questions - correct\n        score = correct * 4 - incorrect * 2\n        if score == woody_score:\n            correct_answers = correct\n            break\n\n    return correct_answers\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of candies Rachel has be r and Alice has be a\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they have the same amount: r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 pieces, Rachel has 3 times more than Alice: (r - 8) = 3 * (a - 8)\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solving the equations for the number of candies\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # Total number of pieces of candy originally\n    total_candy = solutions[r] + solutions[a]\n\n    return total_candy\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n\n    # Pigeonhole principle: (total items + number of holes - 1) // number of holes\n    # ensures at least one hole(pigeonhole) has ceil(total items/number of holes) items(pigeons)\n    min_boys_per_day = (total_boys + days_in_january - 1) // days_in_january\n\n    return min_boys_per_day\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # We need to form three-digit numbers, therefore the first digit cannot be 0\n    # We have two choices for the first digit: 2 or 3\n    # For the second digit, we also have two choices since we can use 0 here, and the third digit will have\n    # only one choice which is the remaining number\n    # So for each choice of the first digit, there are 2 permutations for the second and third digits\n    count = 2 * 2\n    \n    return count\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    num_other_cars = 31 - 1\n    space_between_cars = 5\n    total_spaces = 31 + 1\n\n    total_length = first_car_length + (other_cars_length * num_other_cars) + (space_between_cars * total_spaces)\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Given:\n    # 105 is the 7th term\n    # 120 is the 8th term\n    # 135 is the 9th term\n    # The sequence is arithmetic\n\n    # Find the difference between consecutive terms\n    difference = 120 - 105  # we can choose any two consecutive terms to find the common difference\n\n    # Find the first term using the 7th term (7th term = first_term + 6 * difference)\n    first_term = 105 - (6 * difference)\n\n    # Find the 100th term (100th term = first_term + 99 * difference)\n    nth_term = first_term + (99 * difference)\n\n    return nth_term\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    initial_chocolates = 5 * 10\n    chocolates_given = 23\n    chocolates_left = initial_chocolates - chocolates_given\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "import itertools\n\ndef solution():\n    cards = [0, 3, 5, 8]\n    count = 0\n    for number in itertools.permutations(cards):\n        if number[0] != 0 and int(''.join(map(str, number))) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all permutations of the students\n    for p in permutations(\"ABCDFG\"):\n        for i in range(len(p) + 1):\n            # Insert student E next to D in each permutation\n            lineup = list(p[:i]) + ['E'] + list(p[i:])\n            \n            # Find the index of A, B, and C\n            a_index = lineup.index('A')\n            b_index = lineup.index('B')\n            c_index = lineup.index('C')\n            \n            # Check if A is in the middle of B and C\n            if (b_index < a_index < c_index) or (c_index < a_index < b_index):\n                count += 1\n\n    # Multiply by 2 for the two ways D and E can be arranged (DE or ED)\n    count *= 2\n\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_part = 3\n    total_parts = 2 + 3 + 5\n    sweets_received_by_sarah = 12\n\n    total_sweets = (sweets_received_by_sarah * total_parts) / sarah_part\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_biscuits_cost = 7 * 73  # pence\n    total_cakes_cost = 9 * 113    # pence (since £1.13 is 113 pence)\n\n    total_cost_pence = total_biscuits_cost + total_cakes_cost\n    total_cost_pounds = total_cost_pence / 100  # convert pence to pounds\n\n    change = 20 - total_cost_pounds\n\n    return round(change, 2)  # rounding to 2 decimal places to represent pounds\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    original_length = current_length / (1 + growth_rate)\n\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1_petrol = 27\n    week2_petrol = 25\n    week3_petrol = 30\n\n    total_petrol = week1_petrol + week2_petrol + week3_petrol\n\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    return 1.8 - 0.57\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (3, 4),\n        (3, 5),\n        (3, 6),\n        (3, 9)\n    ]\n    \n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    lunch_end_time = datetime.strptime(\"2:50 PM\", \"%I:%M %p\")\n    total_minutes_before_lunch = 10 + 20 + 20\n    home_arrival_time = lunch_end_time - timedelta(minutes=total_minutes_before_lunch)\n\n    return home_arrival_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "def solution():\n    arrival_time_minutes = 12 * 60 + 40  # convert 12.40pm to minutes\n    stay_duration_minutes = 2 * 60 + 40  # convert 2 hours and 40 minutes to minutes\n\n    leave_time_minutes = arrival_time_minutes + stay_duration_minutes\n    leave_time_hours = leave_time_minutes // 60\n    leave_time_remaining_minutes = leave_time_minutes % 60\n\n    # Convert to 12-hour format if time is >= 13\n    if leave_time_hours > 12:\n        leave_time_hours -= 12\n\n    ans = f\"{leave_time_hours}:{str(leave_time_remaining_minutes).zfill(2)} {'pm' if leave_time_minutes >= 12*60 else 'am'}\"\n    return ans\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial\n\ndef solution():\n    digits = 4  # We have four unique digits from the number 2017\n    \n    # Number of 3-digit combinations (permutations without using the 0)\n    # We have 3 places to fill with 4 digits, but one of the digits is 0 so\n    # for the first place (hundreds place) we have only 3 choices\n    three_digit_numbers = 3 * (factorial(digits - 1) / factorial(digits - 3))\n    \n    # Number of 4-digit combinations\n    # All digits are used so this is simply 4 factorial\n    # However, 0 cannot be at the thousand's place, so we need to subtract those cases\n    four_digit_numbers = factorial(digits) - factorial(digits - 1)\n    \n    return int(three_digit_numbers + four_digit_numbers)\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers Sam and Peter have initially\n    s, p = symbols('s p')\n\n    # Equation 1: Sam had 40 stickers more than Peter initially\n    equation1 = Eq(s, p + 40)\n\n    # Equation 2: Sam gives 20% of his stickers to Peter\n    # So Sam has 80% of his own stickers left\n    sam_gives = 0.20 * s\n    sam_left = 0.80 * s\n\n    # Peter now has his initial stickers plus the 20% he received from Sam\n    peter_receives = p + sam_gives\n\n    # Equation 3: Peter gives 25% of his new total stickers to Sam\n    peter_gives = 0.25 * peter_receives\n\n    # Peter now has 75% of his new total stickers left\n    peter_left = 0.75 * peter_receives\n\n    # Equation 4: Sam now has the 80% of his own stickers plus the 25% he received from Peter\n    sam_final = sam_left + peter_gives\n\n    # Equation 5: In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_final, peter_left + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    num = 1\n    while not (num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 1):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    ans = 6.5 / 0.5\n    return ans\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 8 - 5\n    n = 14\n\n    last_term = first_term + (n - 1) * common_difference\n    sum_of_sequence = n * (first_term + last_term) / 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 181:\n        page += 1\n        count += str(page).count('9')\n    return page - 1\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_crystals = symbols('initial_crystals')\n    \n    # Equation representing the sequence of actions\n    equation = Eq(initial_crystals / 2 - 10 + 20 - 14, 35)\n    \n    # Solve for the initial number of crystals\n    solution = solve(equation, initial_crystals)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_pattern_count = 2      # 2 grey rabbits in the repeating pattern\n    total_grey_rabbits = 14     # total number of grey rabbits\n    pattern_repeat_count = total_grey_rabbits // grey_pattern_count  # number of full patterns\n    \n    # To calculate the minimum total number of rabbits, we take the complete pattern count\n    # Since each complete pattern consists of 5 rabbits (1 black, 2 white, 2 grey), we multiply the pattern count by 5\n    # If there are extra grey rabbits outside of a complete pattern, we need to add an entire extra pattern\n    if total_grey_rabbits % grey_pattern_count != 0:\n        pattern_repeat_count += 1\n    \n    total_rabbits_in_pattern = pattern_repeat_count * 5\n    return total_rabbits_in_pattern\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "from math import gcd\n\ndef solution():\n    students_A = 12\n    students_B = 15\n    students_C = 18\n\n    # Find the greatest common divisor (GCD) of the three class sizes\n    gcd_AB = gcd(students_A, students_B)\n    gcd_ABC = gcd(gcd_AB, students_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    factors = 0\n    for i in range(1, 181):\n        if 180 % i == 0 and i % 9 == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n\n    total_age = sarah_age + peter_age + mike_age\n\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    # Since we want to form the smallest and largest three-digit numbers,\n    # for the smallest number, we choose the smallest non-zero digit for the\n    # first place, and then arrange the remaining digits in ascending order.\n    # For the largest number, we choose the largest digit for the first place\n    # and arrange the remaining digits in descending order.\n    \n    # The available digits are 0, 1, 5, and 8.\n    # For the smallest three-digit number, we can't start with 0, therefore\n    # the smallest digit we can start with is 1. The remaining digits are 0, 5,\n    # which gives us the smallest number 105 when arranged in ascending order.\n    \n    smallest_number = 105\n\n    # For the largest three-digit number, we can start with 8. The remaining digits\n    # are 5 and 1, which gives us the largest number 851 when arranged in descending\n    # order.\n    \n    largest_number = 851\n\n    # The difference between the largest and smallest numbers is:\n\n    difference = largest_number - smallest_number\n\n    return difference\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    # For a number to be divisible by 9, the sum of its digits must also be divisible by 9\n    # Find the sum of the known digits\n    known_digit_sum = 2 + 6 + 5 + 3 + 9\n    # Calculate what 'a' must be for the total sum to be divisible by 9\n    for a in range(10):\n        if (known_digit_sum + a) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    # Compound interest formula A = P * (1 + r/n) ** (n*t)\n    # Since no compounding frequency is provided, assume it is compounded yearly (n=1)\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    \n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n    \n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n    \n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    num_boxes = 12\n    total_cost = price_per_box * num_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    # Convert £2 to pence\n    total_pence = 200\n    # Calculate max sweets when buying three at a time\n    sweets_in_threes = (total_pence // 30) * 3\n    # Calculate remaining pence after buying sweets in sets of three\n    remaining_pence = total_pence % 30\n    # Calculate additional sweets that can be bought individually\n    additional_sweets = remaining_pence // 12\n    # Total sweets is the sum of sweets_in_threes and additional_sweets\n    max_sweets = sweets_in_threes + additional_sweets\n    return max_sweets\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_when_10 = 10\n    kenny_age_diff_with_brother = 2\n    may_current_age = 7\n    \n    # let kenny's younger brother's age be x when May is 10\n    brother = symbols('brother')\n    \n    # Kenny's age will be x + 2 when May is 10\n    kenny = brother + kenny_age_diff_with_brother\n    \n    # The equation according to the problem statement\n    equation = Eq((kenny + brother), 3 * may_age_when_10)\n    \n    # Solve the equation\n    brother_age_when_may_is_10 = solve(equation, brother)[0]\n    \n    # Kenny's age when May is 10 would be\n    kenny_age_when_may_is_10 = brother_age_when_may_is_10 + kenny_age_diff_with_brother\n    \n    # Now, find out how much older Kenny is than May this year\n    kenny_current_age = kenny_age_when_may_is_10 - (may_age_when_10 - may_current_age)\n    \n    # Kenny is older than May by\n    age_difference = kenny_current_age - may_current_age\n    \n    return age_difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "def solution():\n    from math import comb\n\n    # Number of identical balls\n    balls = 10\n    # Number of different boxes\n    boxes = 7\n    # At least 1 ball in each box which means we have to place 7 balls in the boxes\n    # (one in each) to begin with, and then we distribute the remaining balls.\n    remaining_balls = balls - boxes\n\n    # Now, we need to find the number of ways to distribute the remaining balls\n    # into the 7 boxes, which is a problem of combinations with repetition.\n    # This can be calculated using the formula for combinations with repetitions as follows:\n    # C(n+k-1, k), where n is number of boxes, and k is remaining balls.\n    ans = comb(remaining_balls + boxes - 1, remaining_balls)\n\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Total number of candies\n    total_candies = 10\n\n    # To ensure victory, Felix must aim to leave John with 4 candies\n    # at any turn because from 4, no matter John eats 1 or 2 candies,\n    # Felix can eat in such a way to leave 1 candy for John's next turn.\n    # Additionally, Felix needs to aim for a position that is 3 more than\n    # a multiple of 3 to force John into the losing position of 4.\n\n    # Felix wants to go first to control the game.\n    # Felix's strategy is to eat 2 candies initially, as 10 is not (3n + 1).\n    # Then, whatever John eats (1 or 2 candies), Felix can always eat\n    # so that the total number of candies eaten by both is a multiple of 3.\n    # This will ensure that after the 9th candy is eaten, 1 candy is left\n    # and it will be John's turn, so Felix will win.\n\n    # If Felix goes first, he should eat 2 candies to reach multiple of 3.\n    # Resulting in 8 candies left. \n    # Now, no matter what John does, Felix will adjust to reach multiples of 3.\n    # For example: If John eats 1, Felix eats 2 to reach 5 candies left.\n\n    felix_goes_first = True\n\n    # To simplify the solution, answer with True if Felix should go first, False otherwise.\n    return felix_goes_first\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    pipe_length = 305\n    single_pipe_length = 5\n\n    num_pipes = pipe_length // single_pipe_length\n\n    if pipe_length % single_pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for i in range(1, 2017):\n        # Check if i is a multiple of two of the sets (2,3), (2,4), or (3,4)\n        if (i % 2 == 0 and i % 3 == 0 and i % 4 != 0) or \\\n           (i % 2 == 0 and i % 4 == 0 and i % 3 != 0) or \\\n           (i % 3 == 0 and i % 4 == 0 and i % 2 != 0):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count_3s = 0\n    page = 1\n    while count_3s < 28:\n        if '3' in str(page):\n            count_3s += str(page).count('3')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total = sum(coins)\n    brother_amount = (total - sum(coins)) // 2\n    \n    for coin in coins:\n        if total - coin == 2 * (brother_amount + coin):\n            return coin\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the required amount of water to fill the fish tank\n    # According to the problem:\n    # x - 5*litre_pail = 4 litres overflow\n    # x + 3*litre_pail*extra_pails = 4 litres needed + x (since x is the exact amount needed)\n    # Therefore, extra_pails = 4 / 3 (since to fill in the 4 litres shortage we need more 3-litre pails)\n    \n    # Since extra_pails must be whole (you can't have a fraction of a pail), \n    # extra_pails should be the smallest number that makes 3*extra_pails an integer\n    # In this case, extra_pails = 2 (as 2 is the smallest integer that makes 3*2 = 6 an integer)\n\n    # So now we calculate for 2 extra pails which is 2 * 3 litres each:\n    extra_pails = 4 / 3\n    litre_pail_diff = 5 - 3  # difference between 5-litre pail and 3-litre pail\n    tank_capacity = litre_pail_diff * extra_pails + 4  # calculate tank capacity\n\n    return tank_capacity\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    # Convert bus times to minutes past the hour for easier calculation\n    first_bus = (15 * 60) + 55 # 15.55 in minutes\n    second_bus = (16 * 60) + 35 # 16.35 in minutes\n    \n    # Time when you arrive if 4 minutes late\n    arrival_time = first_bus + 4\n    \n    # Time you have to wait for the second bus\n    wait_time = second_bus - arrival_time\n    \n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3', '4']\n    even_digits = ['2', '4']\n    count = 0\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    for boys in range(152):\n        girls = 152 - boys\n        if boys - boys / 11 == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    import math\n    lorries_needed = math.ceil(70 / 8)\n    return lorries_needed\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    men, women = symbols('men women')\n    \n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n    \n    solutions = solve((equation1, equation2), (men, women))\n    \n    total_people = solutions[men] + solutions[women]\n    \n    return total_people\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Each average is the sum of 4 numbers divided by 4, so we can find the sum of each group.\n    sum_36 = 36 * 4\n    sum_38 = 38 * 4\n    sum_39 = 39 * 4\n    sum_45 = 45 * 4\n    sum_49 = 49 * 4\n    \n    # The total sum of all five numbers can be found by adding all individual sums and\n    # subtracting the sum that has been counted four times (one time for each average).\n    total_sum = sum([sum_36, sum_38, sum_39, sum_45, sum_49])\n    duplicated_sum = total_sum // 5  # since each number has been added four times\n    \n    # The largest number will be the sum that results in the highest total sum when removed.\n    largest_number = max(sum_36, sum_38, sum_39, sum_45, sum_49) - duplicated_sum\n    \n    return largest_number\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days = 20 * 4\n    last_two_days = 60\n\n    total_pages = first_three_days + next_four_days + last_two_days\n\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    result = solve_congruence(*congruences)\n    # Find the largest three-digit number less than 200 satisfying the congruences\n    ans = result[0]\n    while ans >= 200 or ans < 100:\n        ans -= result[1]\n    return ans\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    room_count = 0\n    student_count = 0\n    \n    while True:\n        student_count = 4 * room_count + 6\n        if (student_count - 1) % 5 == 0 and ((student_count - 1) / 5) == room_count + 1:\n            break\n        room_count += 1\n    \n    return student_count\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for x1 in range(1, 7):\n        for x2 in range(1, 7):\n            for x3 in range(1, 7):\n                if x1 + x2 + x3 == 12 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_current_age = 70\n    grandsons_ages = [6, 12, 18]\n    sum_grandsons_ages = sum(grandsons_ages)\n    years = 0\n    \n    while True:\n        years += 1\n        new_bill_age = bill_current_age + years\n        new_grandsons_ages = [age + years for age in grandsons_ages]\n        if new_bill_age == sum(new_grandsons_ages):\n            return new_bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_weight_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_weight_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    original_total = 7 * 9\n    new_total = 6 * 10\n    removed_number = original_total - new_total\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    fraction_leaving = 1/3\n\n    people_left = total_people * (1 - fraction_leaving)\n\n    return int(people_left)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "from math import lcm\n\ndef solution():\n    interval_a = 15\n    interval_b = 12\n    interval_c = 8\n\n    lcm_intervals = lcm(interval_a, interval_b, interval_c)\n    \n    next_arrival_minutes = lcm_intervals\n\n    # 10:00 am in minutes is 10*60 = 600 minutes after midnight\n    starting_time = 600  # time in minutes at 10:00 am\n\n    next_arrival_time = starting_time + next_arrival_minutes\n\n    next_arrival_hours = next_arrival_time // 60\n    next_arrival_minutes = next_arrival_time % 60\n\n    return f\"{next_arrival_hours:02d}:{next_arrival_minutes:02d}\"\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    incorrect_mark = -2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        if correct_answers * correct_mark + (total_questions - correct_answers) * incorrect_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Maximum possible number of students who are in at least two sports\n    max_two_sports = (swimmers + cyclists + table_tennis_players) - total_students\n    \n    # Minimum possible number of students who play all three sports\n    # is the number of students in at least two sports minus the number \n    # of students in exactly two sports (which is the maximum number it could be).\n    min_all_three = max_two_sports - (swimmers - 1) - (cyclists - 1) - (table_tennis_players - 1)\n\n    return min_all_three\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    numerator = (3999 * 2014.2014 + 3999.3999 * 2014)\n    denominator = 12.0012\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time = 30  # time to pass the tree in seconds\n    distance = 360  # length of the train in meters\n    \n    speed = distance / time  # speed = distance / time\n    \n    return speed\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    return 6 * 8\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    effective_distance = climb_distance - slide_distance\n    day = 0\n    \n    while total_distance > 0:\n        day += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slide_distance\n    return day\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # To ensure 4 marbles of different colors, in the worst case:\n    # Draw all marbles of one color (3 reds) and\n    # Then draw all marbles of another color (8 yellows) and\n    # Then draw all marbles of a third color (9 blues),\n    # Finally, the next draw guarantees a fourth color (1 marble of any color).\n    # So we must draw 3 + 8 + 9 + 1 = 21 marbles to ensure 4 marbles of different colors.\n    ans = 3 + 8 + 9 + 1\n    return ans\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    total_restaurants = 8 + 6 + 4\n    return total_restaurants\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Distance between each two people is same in terms of numbers\n    # Person with number 10 is opposite to person with number 24, thus half the circle apart\n    # The difference in the numbers is 24 - 10 = 14\n    # This implies there are 14 * 2 positions in the whole circle\n    total_people = 14 * 2\n\n    return total_people\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery_percent = 20\n    savings_less_than_food = 6\n\n    books_stationery = (books_stationery_percent / 100) * pocket_money\n    # Let's denote food expenditure as x\n    # Then transport expenditure is x/3\n    # Savings is x - 6\n    # We have the total amount as:\n    # books_stationery + food + transport + savings = pocket_money\n    # x + x/3 + x - 6 = pocket_money - books_stationery\n    # (4/3)x = pocket_money - books_stationery + 6\n    # x (food expenditure) = (3/4) * (pocket_money - books_stationery + 6)\n\n    food_expenditure = (3/4) * (pocket_money - books_stationery + savings_less_than_food)\n    savings = food_expenditure - savings_less_than_food\n\n    savings_percent = (savings / pocket_money) * 100\n\n    return round(savings_percent, 2)\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [x for x in range(1, 67) if 66 % x == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    return possible_ages[-1]  # Return the largest possible age\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    time_A = 24\n    time_B = 64\n\n    ans = lcm(time_A, time_B)\n    return ans\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for number in permutations('123456', 4):\n        num = int(''.join(number))\n        if 3267 <= num <= 5120:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for i in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if 75 % i == 0 and i % 6 == 3:  # Check if i is factor of 75 and gives remainder 3 when divided by 6\n            return i\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    wrong_subtrahend = 41\n    wrong_result = 50\n    original_subtrahend = 14\n    \n    # We know that the mistake led to a wrong result. To find the minuend (the number from which another number (the subtrahend) is to be subtracted),\n    # we now add the wrong subtrahend to the wrong result.\n    \n    minuend = wrong_subtrahend + wrong_result\n    \n    # To get the correct difference, we subtract the correct subtrahend from the minuend.\n    \n    correct_difference = minuend - original_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum(40 - i * 2 - (38 - i * 2) for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    number_of_sisters = 4\n    apples_left = 20\n\n    total_apples_eaten = justin_apples + sisters_apples_each * number_of_sisters\n    initial_apples = total_apples_eaten + apples_left\n\n    return initial_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    final_amount = 7320.5\n    years = 4\n\n    rate = (final_amount / principal) ** (1 / years) - 1\n    return round(rate, 4)\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    for n in range(1, 31):\n        if (n * n + n + n + 1) == n*n + 31:\n            return n*n + 31\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    number_to_find = (21 * 3) / 56\n    return number_to_find\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    part1 = (3.2 + 6.77 + 8.88)\n    part2 = (6.77 + 8.88 + 6.3)\n    part3 = (3.2 + 6.77 + 8.88 + 6.3)\n    part4 = (6.77 + 8.88)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    \n    february_saved = total_saved - january_saved - march_saved\n    \n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    initial_value = 176\n    final_value = 88\n\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 1 * 60 + 20  # One hour and twenty minutes in total minutes\n    num_pictures = total_minutes / minutes_per_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    return seconds_per_minute * minutes\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let P be the principal amount that we want to find\n    P = symbols('P')\n\n    # Calculate the final amount after 4 years with compound interest formula\n    # Final amount = P * (1 + rate)^time\n    # Since the interest is annual, time = 4 years and rate = 8% or 0.08\n    final_amount = 924\n    rate = 0.08\n    time = 4\n\n    # Create the equation based on the formula: final_amount = P * (1 + rate)^time\n    equation = Eq(final_amount, P * (1 + rate)**time)\n\n    # Solve the equation for P\n    principal = solve(equation, P)\n\n    return principal[0]\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total number of apples\n    total_apples = 30\n    # Number of other children\n    other_children = 5\n    # Each of other children gets at least one apple\n    min_apples_for_others = other_children * 1\n    # Remaining apples for Ann\n    ann_apples = total_apples - min_apples_for_others\n    \n    return ann_apples\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permuations of the digits\n    perms = permutations([1, 3, 5, 6, 7, 8, 9])\n    \n    for perm in perms:\n        # Generate number from permuations\n        first = perm[0] * 100 + perm[1] * 10 + perm[2]\n        second = 2 * first\n        third = 4 * first\n\n        # All digits should be used once, check using set operation\n        all_digits = set(str(first) + str(second) + str(third))\n        \n        if all_digits == set('1356789'):\n            return third\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Pairing a blouse with any pair of pants and shoes\n    blouse_pants_shoes = shirts * pants * shoes\n\n    # Wearing a dress with either shoes or heels\n    dress_shoes_or_heels = dresses * (shoes + heels)\n\n    # Total combinations\n    total_combinations = blouse_pants_shoes + dress_shoes_or_heels\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the weights of objects A, B, and C as a, b, and c, respectively\n    a, b, c = symbols('a b c')\n\n    # Given equations based on the problem\n    equation1 = Eq(a + b, 13) # A and B together weigh 13 kg\n    equation2 = Eq(a + c, 25) # A and C together weigh 25 kg\n    equation3 = Eq(c, 3 * b)  # C weighs 3 times as much as B\n\n    # Now, solving these equations for a, b, and c\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # We need to find the mass of Object A\n    return solutions[a]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for the cost of one book and one teddy bear\n    book, teddy_bear = symbols('book teddy_bear')\n\n    # Now we will set up our equations based on the problem statement\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    # Returning the cost of one book\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5  # converting everything to grams for easier calculation\n    total_mass_in_g = (total_mass_kg * 1000) + total_mass_g  # converting kg to g and adding the remaining grams\n\n    soil_mass_kg = 4\n    soil_mass_g = 50\n    soil_mass_in_g = (soil_mass_kg * 1000) + soil_mass_g  # converting kg to g and adding the remaining grams\n\n    sand_mass_in_g = total_mass_in_g - soil_mass_in_g  # finding the mass of the pack of sand by subtracting soil from total\n\n    difference_in_g = abs(soil_mass_in_g - sand_mass_in_g)  # finding the difference in grams\n\n    difference_kg = difference_in_g // 1000  # converting grams to kilograms for the main part of the result\n    difference_remaining_g = difference_in_g % 1000  # getting the remaining grams\n\n    return difference_kg, difference_remaining_g\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let n be the number of buttons Nina originally has\n    # Let j be the number of buttons James originally has\n    # According to the problem, we have the following equations:\n    # n + j = 22 (Total number of buttons)\n    # n - 4 = j + 4 (After Nina gives James 4 buttons, they have the same amount)\n    \n    # Using algebra to solve for n:\n    # From the second equation: n = j + 8\n    # Substitute n in the first equation: (j + 8) + j = 22\n    # Combine like terms: 2j + 8 = 22\n    # Subtract 8 from both sides: 2j = 14\n    # Divide by 2: j = 7\n    # Now that we know j, we can find n using the first equation:\n    # n + 7 = 22\n    # Subtract 7 from both sides: n = 15\n\n    # Nina originally has 15 buttons\n    return 15\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum([sum([1/i for i in range(1, n+1)]) for n in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    correct_points = 4\n    incorrect_points = -2\n    total_score = 29\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        score = correct * correct_points + incorrect * incorrect_points\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "from sympy import divisors, gcd\n\ndef solution():\n    # Given that the HCF is 75, both M and N can be expressed in the form of 3^a * 5^b where a and b are integers.\n    # Also, note that the count of divisors for a number is equal to the product of (exponent + 1) for each of the prime factors.\n    # Hence, if a number is expressed as 3^a * 5^b, it has (a + 1)(b + 1) divisors.\n    # So, we are looking for a pair of (a, b) such that (a + 1)(b + 1) is 12 for M, and another pair such that it is 10 for N.\n    \n    # Now, the HCF of M and N is 75 which means that the lowest a and b can each be is 1 (since 75 = 3 * 5^2),\n    # resulting in the numbers 3^1 * 5^2 = 75, as already a factor we should check for factors above this.\n\n    # To get a quick list of factor pairs that multiply to 12 and 10,\n    # we will just use simple iterations to avoid computing for smaller factors that would not respect the HCF condition.\n    \n    # Factor pairs for 12: (1,12), (2,6), (3,4)\n    # Note that we have to subtract 1 from both elements in the pair because the formula counts (exponent + 1).\n    \n    # Factor pairs for 10: (1,10), (2,5)\n    # Similarly, we have to subtract 1 for these\n    \n    # Since we are looking for factors greater than that of HCF (3^1 * 5^2), we will increment the a and b values appropriately.\n    M_factors = [(a + 1, b + 1) for a, b in [(0, 11), (1, 5), (2, 3)]]\n    N_factors = [(c + 1, d + 1) for c, d in [(0, 9), (1, 4)]]\n    \n    # Now, we shall generate M and N from these factors and check if they indeed have 12 and 10 divisors respectively\n    # Also, we check if their GCD is 75.\n    for a, b in M_factors:\n        M = 3**a * 5**b\n        for c, d in N_factors:\n            N = 3**c * 5**d\n            if gcd(M, N) == 75 and len(divisors(M)) == 12 and len(divisors(N)) == 10:\n                return M + N\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    # The pattern 12345 repeats every 5 digits\n    pattern_length = 5 \n    # The total number of complete patterns in the 52-digit number\n    complete_patterns = 52 // pattern_length \n    # The sum of digits in the 5-digit pattern 12345\n    sum_of_pattern = sum(range(1, 6)) \n    # The sum of all the complete patterns\n    complete_sum = complete_patterns * sum_of_pattern \n    \n    # The remaining digits after the last complete pattern\n    remaining_digits = 52 % pattern_length \n    # The sum of the remaining digits\n    remaining_sum = sum(range(1, remaining_digits + 1))\n    \n    # The total sum is the sum of complete patterns and the sum of remaining digits\n    total_sum = complete_sum + remaining_sum \n    \n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n    num_kites = total_paper // paper_per_kite\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_trees = 79\n    total_distance = 320\n    gaps_between_trees = total_trees + 1\n    distance_between_each_tree = total_distance / gaps_between_trees\n    \n    return distance_between_each_tree\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen trades 10 fish for 4 rabbits, which means Owen can get 1 rabbit for 2.5 fish\n    fish_per_rabbit = 10 / 4\n    \n    # Oscar trades 5 rabbits for 6 packs of wheat, which means 1 pack of wheat is equivalent to 5/6 rabbits\n    rabbits_per_wheat_pack = 5 / 6\n    \n    # To find out how many fish Owen needs to give for 1 pack of wheat, we multiply fish_per_rabbit with rabbits_per_wheat_pack\n    fish_per_wheat_pack = fish_per_rabbit * rabbits_per_wheat_pack\n    \n    # To find out how many fish are needed for 12 packs of wheat, we multiply fish_per_wheat_pack by 12\n    fish_for_twelve_wheat_packs = fish_per_wheat_pack * 12\n\n    return fish_for_twelve_wheat_packs\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    total_length = Fraction(10) + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n    num_short_rods = total_length / short_rod_length\n    return num_short_rods.numerator // num_short_rods.denominator\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_price_for_30 = 2800\n    deal_price_per_laptop = deal_price_for_30 / 30\n    savings_per_laptop = single_laptop_price - deal_price_per_laptop\n    total_savings = savings_per_laptop * 20\n    return total_savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "def solution():\n    from math import factorial as fact\n\n    # Calculate permutations for singing performances\n    sing_perms = fact(6)\n    \n    # Calculate combinations for positions of dancing performances\n    # We treat each singing performance and adjacent gap as a slot,\n    # so we have 7 slots (6 performances + 1 extra gap at the end) to choose from\n    # for 4 dancing performances. This is equivalent to (7 choose 4).\n    dance_comb = fact(7) // (fact(4) * fact(7 - 4))\n\n    # The final answer is the product of the two separated permutations/combinations\n    return sing_perms * dance_comb\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    equation1 = Eq(3*penguins + 5, 4*penguins - 15)\n\n    solutions = solve(equation1, penguins)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    subtracted_instead_of_adding = 26\n    correction = subtracted_instead_of_adding * 2  # Reverse the subtraction and add the correct amount\n    correct_result = incorrect_result + correction\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height / ratio_matthew) * ratio_kelly\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 0.35 * 80\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Possible scores at half time, where the first team has x goals and the second team has y goals\n    for x in range(4):  # The first team can score at most 3 goals by half time\n        for y in range(3):  # The second team can score at most 2 goals by half time\n            # Conditions after the first half:\n            # The number of goals scored by each team at half time cannot be greater\n            # than their final score, and the total number of half time goals cannot\n            # exceed the total number of final goals (3+2=5).\n            if x <= 3 and y <= 2 and (x + y) < 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n    cards_lost = original_cards * fraction_lost\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    total_cookies = 1002\n    ratio = 5  # Clara baked five times as many cookies as Emma did\n    # Let the number of cookies Emma baked be x\n    # Then the number of cookies Clara baked is 5 * x\n    # Their sum is x + 5 * x = 1002\n    # 6 * x = 1002\n    # x = 1002 / 6\n    emma_cookies = total_cookies / (1 + ratio)\n    return int(emma_cookies)\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    return comb(6, 2)\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_weight_when_half_full = half_full_weight - (full_weight / 2)\n    empty_basket_weight = full_weight - (2 * mangoes_weight_when_half_full)\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85 / 100\n    money = 400\n    result = percentage * money\n    return result\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    sweets_left = 16\n    bud_share = 2/5\n    total_sweets = sweets_left / bud_share\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    six_times_five = 6 * 5\n    percent_of_40 = (six_times_five / 40) * 100\n    return percent_of_40\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of girls in class as g and boys as b.\n    g, b = symbols('g b')\n\n    # Since 20 pupils in the class cannot swim and the number of boys and girls who cannot swim is equal,\n    # hence each of them is 10.\n    # Now, 3/8 of the girls can swim, which means 5/8 of the girls cannot swim, and that amounts to 10.\n    # Similarly, 3/5 of the boys can swim, meaning 2/5 of the boys cannot swim, also amounting to 10.\n    # Therefore, we have two equations:\n    # (5/8)*g = 10 and (2/5)*b = 10\n    # Simplify these equations to find g and b:\n\n    equation1 = Eq((5/8)*g, 10)\n    equation2 = Eq((2/5)*b, 10)\n\n    solutions = solve((equation1, equation2), (g, b))\n    total_pupils = solutions[g] + solutions[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Given that desks and chairs are aligned in a rectangular array,\n    # we need to find a pair of factors (m, n) of the total number of students,\n    # such that the position from each direction is the second for Mike.\n\n    # Note: The total number of students is not just m * n, because we need the second position from each side.\n    # This means that Mike is located not on the edge but one inside, so we have (m-2) * (n-2) desks surrounded by the outer frame of desks.\n    # The equations based on Mike's position would therefore be:\n    # m * n - (m-2) * (n-2) = m * n - (mn - 2m - 2n + 4) = 2m + 2n - 4\n\n    # Additionally, because this number is the difference between the outer frame and the inner frame,\n    # and we need to create a complete rectangular array, the smallest possible/meaningful m and n values are 3, so that Mike is 2nd from any side.\n    # This further constrains the problem that m, n >= 3 and ensures that Mike isn't located on a corner.\n\n    # Considering that, we need to find a pair of numbers (m, n) whose smallest values start at 3,\n    # such that (m-2) * (n-2) is the inner rectangle, and the frame is 2m + 2n - 4.\n    # It is impossible for the total class size to be a prime larger than 2, because such a class size can't be configured as a rectangle with Mike being the second from each direction.\n    # Hence, we're looking for a composite number for the class size.\n    # Let's start our search from 2 * 2 = 4 (the smallest composite number).\n\n    class_size = 4\n\n    while True:\n        # Try each class size from 4 and up, checking if it can be a valid rectangle configuration\n        possible = False\n\n        for m in range(3, class_size // 2 + 1):  # m is from 3 to half of the class size (inclusive)\n            if (class_size + 4) % m == 0:  # Is (class_size + 4) divisible by m without remainder?\n                n = (class_size + 4) // m   # Calculate the corresponding n\n                if n >= 3:  # Ensure n is not less than 3\n                    # We've found a pair (m, n) such that m * n - (m-2) * (n-2) equals class size\n                    possible = True\n                    break  # We've found at least one valid configuration, so we can stop searching\n\n        if possible:\n            break  # We've found the class size with at least one valid configuration, so we can stop increasing the class size\n\n        class_size += 1  # Increase the possible class size and repeat the process\n\n    return class_size\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_cost_for_3_cups = 30\n    number_of_cups_initially = 3\n    \n    cost_per_cup = total_cost_for_3_cups / number_of_cups_initially\n    number_of_cups_mandy_wants = 5\n    \n    total_cost_for_mandy = cost_per_cup * number_of_cups_mandy_wants\n    \n    return total_cost_for_mandy\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    # B represents big mushroom houses, S represents small mushroom houses\n    # B can accommodate 4 rabbits each, and there are 5 B\n    # R is the total number of rabbits, R = 38\n    \n    B = 5\n    S = 9\n    R = 38\n    \n    # The total number of rabbits that B can accommodate\n    total_in_B = 4 * B\n    \n    # The total number of rabbits remaining for small houses\n    remaining_for_S = R - total_in_B\n    \n    # Since each small house will accommodate the same number of rabbits\n    # The number of rabbits in each small S can be found by dividing the remaining rabbits by the number of S\n    rabbits_per_S = remaining_for_S / S\n    \n    return rabbits_per_S\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_earnings_per_day = 60\n    number_of_days = 7  # Monday to Sunday\n\n    total_earnings = average_earnings_per_day * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            ans += i**2\n        else:\n            ans -= i**2\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * (6 + 1)\n    ways[0] = 1  # Base case: 1 way to reach the 0th step (stand still)\n    for i in range(1, 7):\n        ways[i] = ways[i - 1]\n        if i - 2 >= 0:\n            ways[i] += ways[i - 2]\n        if i - 3 >= 0:\n            ways[i] += ways[i - 3]\n\n    return ways[6]\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    total_months = 5  # March to July inclusive is 5 months\n\n    total_pizzas = average_pizzas_per_month * total_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_of_numbers = 21+22+23\n    factors = sum_of_numbers / (2*3)\n    return int(factors)\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    return 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    speed_upstream = speed_in_still_water - speed_of_current\n    distance = 150\n\n    time_taken = distance / speed_upstream\n    return time_taken\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are given the following congruences:\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    congruences = [(2, 3), (3, 4), (4, 5)]\n\n    # The solution will be a tuple (x, M) such that x is the smallest solution and\n    # M is the product of moduli, we're only interested in x.\n    x, _ = solve_congruence(*congruences)\n    \n    return x\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n    \n    # Convert the cost to pence\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4 if 56 % 4 == 0 else ((56 // 4) + 1) * 4\n    last_multiple = 92 // 4 * 4\n    \n    ans = (last_multiple - first_multiple) // 4 + 1\n    return ans\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    num1 = 3.5\n    num2 = 6.9\n    halfway_number = (num1 + num2) / 2\n\n    return halfway_number\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum([x if (x // 4) % 2 == 0 else -x for x in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # Find the pattern of ones digits in powers of 9\n    # 9^1 -> 9, 9^2 -> 1, 9^3 -> 9, 9^4 -> 1, and so on...\n    # The ones digit of 9 to any power alternates between 9 and 1\n    ones_digit_power_9 = [9, 1]\n\n    # Since the pattern repeats every 2, find the remainder when 99 is divided by 2\n    remainder = 99 % 2\n\n    # Get the ones digit from the pattern\n    ones_digit = ones_digit_power_9[remainder - 1]\n\n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    claire_current_age = symbols('claire_current_age')\n    \n    equation = Eq(claire_current_age + 6, 3 * claire_current_age)\n    \n    claire_age_now = solve(equation, claire_current_age)[0]\n    \n    return claire_age_now + 2\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    late_departure = 15\n    late_arrival = 5\n    journey_fraction = 11/12\n    \n    # Let x be the actual journey time in minutes\n    # The journey took x minutes instead of the expected time\n    # It also arrived 5 minutes late, therefore we have: x = actual_time * journey_fraction + late_arrival\n    # It departed 15 minutes late, so the expected time is x + late_departure - late_arrival\n    \n    # Solving for x we have the equation x = (x + late_departure - late_arrival) * journey_fraction\n    # Which simplifies to: x - journey_fraction * x = journey_fraction * (late_departure - late_arrival)\n    # Thus: x * (1 - journey_fraction) = journey_fraction * (late_departure - late_arrival)\n    \n    x = (journey_fraction * (late_departure - late_arrival)) / (1 - journey_fraction)\n    \n    # Convert minutes to hours\n    ans = x / 60\n    \n    return ans\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        year_digits = set(str(year))\n        if year_digits == {'0', '2'}:\n            return year - 2022\n          \nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total = 5.42 * 25\n    part = 5.42 * 5\n    missing_number = (total - part) / 5.42\n\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # Assuming Susan pays with the least number of coins that sum up to or just over 44p\n    # The combinations from the largest coin to the smallest that she can use are:\n    # 1 x 50p, 1 x 20p + 1 x 20p + 1 x 5p, 1 x 20p + 1 x 10p + 2 x 5p (5p used twice)\n    # Starting from one 50p coin to give the least amount of change\n    # Assuming UK denomination coins are used: 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p)\n    \n    # Susan pays with a 50p coin\n    payment = 50\n    cost = 44\n    change = payment - cost\n    \n    # Now, we calculate the smallest number of coins to make up the change.\n    # Start from the largest to the smallest (Greedy algorithm)\n    \n    coins = [20, 10, 5, 2, 1]\n    number_of_coins = 0  # This includes the payment coin\n    \n    # Add 1 for the payment coin\n    number_of_coins += 1\n    \n    for coin in coins:\n        while change >= coin:\n            change -= coin  # Reduce the change by the value of the coin\n            number_of_coins += 1  # Increase the number of coins\n\n    return number_of_coins\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Since there are 4 colors, in the worst case, Jane will have to pick\n    # one marble of each color to ensure she has all 4 different colors.\n    # Considering the number of marbles for each color and the need to pick at least one,\n    # we start by picking the 3 colors with the most marbles.\n\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # In the worst-case scenario, she first picks all green, blue, and orange marbles without getting any red\n    worst_case = green + blue + orange\n\n    # Then, she would need to pick one more to guarantee a red marble which would complete the set of 4 colors.\n    # This last pick is for the red marble which we have not considered yet.\n    total_picks = worst_case + 1\n    \n    return total_picks\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_height = 9\n    day_climb = 3\n    night_slide = 1\n    effective_climb = day_climb - night_slide\n    days = 0\n    height_after_last_day = 0\n\n    while height_after_last_day < total_height:\n        days += 1\n        height_after_last_day += day_climb\n        if height_after_last_day >= total_height:\n            break\n        height_after_last_day -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # Total books and kids\n    total_books = 19\n    kids = 4\n    \n    # Books need to be distributed so each kid gets at least one\n    total_books -= kids\n    \n    # Now we have to distribute total_books to kids\n    # This is a problem of distributing n identical items to r distinct groups\n    # The formula for this is C(n+k-1, k-1) where n is items, k is groups\n    \n    # In our case, the formula is C(total_books+kids-1, kids-1)\n    # So we calculate the value of formula\n    ways = factorial(total_books+kids-1) // (factorial(kids-1) * factorial(total_books))\n    \n    return ways\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    n = 2\n    increment = 1\n    while n < 100:\n        increment += 1\n        n += increment\n    return n\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since the pencil cases cannot be empty, start by placing one pen in each case. \n    # We have 6 - 3 = 3 pens left to distribute without restrictions.\n    remaining_pens = 6 - 3\n\n    # The number of ways to distribute 'remaining_pens' identical items into 3 distinct groups\n    # is given by the number of solutions to x1 + x2 + x3 = remaining_pens, which is a problem\n    # of combinations with repetition. The formula is: (n+k-1)! / (k! * (n-1)!)\n    # Where n is the number of groups (pencil cases) and k is the remaining pens.\n    \n    from math import factorial\n\n    # Applying formula where n = 3 cases, k = 3 pens\n    ways = factorial(remaining_pens + 3 - 1) // (factorial(3) * factorial(remaining_pens))\n    \n    return ways\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 // 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the amount of water in each tank\n    A, B, C, D = symbols('A B C D')\n    \n    # Equations based on the problem description\n    eq1 = Eq(A, 5 * B)        # Tank A has 5 times as much water as Tank B\n    eq2 = Eq(B, C + 5)        # Tank B has 5 more liters of water than Tank C\n    eq3 = Eq(C + D, A)        # Total water in Tank C and D equals to Tank A\n    eq4 = Eq(D, 41)           # Tank D contains 41 liters of water\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (A, B, C, D))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((2*i+2)**2 - (2*i)**2 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n\n    gallons_needed = order_cups / cups_per_gallon\n\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n  people_in_front_of_Pip = 9\n  people_behind_Bud = 10\n  Pip_and_Bud = 2  # Pip and Bud themselves\n\n  total_people = people_in_front_of_Pip + Pip_and_Bud + people_behind_Bud\n  return total_people\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the number of motorbikes, t be the number of tricycles, and v be the number of vans\n    m, t, v = symbols('m t v')\n\n    # Equation 1: Each motorbike has 2 wheels and each van has 4 wheels\n    # motorbike + van wheels = tricycle wheels + 35\n    equation1 = Eq(2 * m + 4 * v, 3 * t + 35)\n    \n    # Equation 2: Each tricycle has 3 wheels and each van has 4 wheels\n    # tricycle + van wheels = motorbike wheels + 13\n    equation2 = Eq(3 * t + 4 * v, 2 * m + 13)\n\n    # Equation 3: Total number of wheels is 101\n    equation3 = Eq(2 * m + 3 * t + 4 * v, 101)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n\n    # Calculate the difference between the number of motorbikes and vans\n    motorbikes_vans_difference = solutions[m] - solutions[v]\n\n    return motorbikes_vans_difference\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    return 68 + 75\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    year = '2014'\n    count = 0\n    \n    # Generate all possible permutations of '00', '11', and '22'\n    digits_permutations = set(permutations('001122'))\n\n    for perm in digits_permutations:\n        # Construct date strings by placing each permutation in the 'mmdd' format\n        date_str = year + ''.join(perm) \n\n        # Extract month and day from the constructed date string\n        month = int(date_str[4:6])\n        day = int(date_str[6:8])\n\n        # Check if month and day form a valid date in year 2014\n        if month > 0 and month < 13:\n            if ((month in [1, 3, 5, 7, 8, 10, 12] and day > 0 and day < 32) or\n               (month in [4, 6, 9, 11] and day > 0 and day < 31) or\n               (month == 2 and day > 0 and day < 29)):  # February, non-leap year\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Given numbers and their average\n    numbers = [4, 5, 6, 9, 3, 9]\n    average = 6\n\n    # Total sum of the given numbers\n    total_sum = sum(numbers)  # Existing total sum\n\n    # Since the average of 8 numbers is 6, the total sum of 8 numbers should be 8 * 6\n    final_sum = 8 * average  # Final total sum including p and q\n\n    # Calculate the sum of p and q\n    pq_sum = final_sum - total_sum\n\n    # The difference between the highest and lowest number is 6\n    # Since 9 is the highest of the given numbers, the lowest number can be 3 (as it's in the list)\n\n    # We need to find the lowest possible value of q such that p < q and (highest - lowest) = 6\n    # Trying the lowest possible values for p and then calculating q\n    for p in range(3, 10): # p should not exceed the existing numbers\n        q = pq_sum - p\n        if p < q and (q - 3) == 6:\n            return q\n    # If no solution is found within the range, return None (This should not happen based on the problem statement)\n    return None\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n    \n    term_number = ((last_term - first_term) // difference) + 1\n    \n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    # Let's denote the number of students who like both sports as x.\n    # According to the given information:\n    # Students who like football = 3x\n    # Students who like basketball = 4x\n    # Total students = Students who like football + Students who like basketball - Students who like both\n    # 36 = 3x + 4x - x\n\n    # Let's solve for x\n    x = symbols('x')\n    equation = Eq(3 * x + 4 * x - x, 36)\n\n    both_sports = solve(equation, x)\n\n    return both_sports[0]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    remainder_when_divided_by_7 = 3\n    remainder_when_divided_by_11 = 7\n    remainder_when_divided_by_13 = 9\n\n    # Since 7, 11, and 13 are co-prime, we can use the Chinese Remainder Theorem\n    for i in range(10000, 100000):\n        if (i % 7 == remainder_when_divided_by_7) and \\\n           (i % 11 == remainder_when_divided_by_11) and \\\n           (i % 13 == remainder_when_divided_by_13):\n            return i\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    adam_speed = 60  # km/h\n    jacob_speed = 80  # km/h\n    jacob_time = 3  # hours\n    adam_time = 3 + 0.5  # hours (3 hours + 30 minutes)\n\n    adam_distance = adam_speed * adam_time  # distance traveled by Adam\n    jacob_distance = jacob_speed * jacob_time  # distance traveled by Jacob\n\n    # The total distance between their homes is the sum of the distances they traveled.\n    total_distance = adam_distance + jacob_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    step1 = custom_operation(1, 2)\n    step2 = custom_operation(step1, 3)\n    step3 = custom_operation(step2, 4)\n    result = custom_operation(step3, 5)\n    \n    return int(result)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    from sympy import divisors\n\n    factors_252 = divisors(252)\n\n    return len(factors_252)\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n\n    # Using Pigeonhole principle\n    max_cakes_in_layer = (total_cakes + layers - 1) // layers\n\n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    paid_gst = 0.91\n\n    cost_before_gst = paid_gst / gst_rate\n\n    return cost_before_gst\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # There are only two colors: blue and yellow.\n    # By the pigeonhole principle, to guarantee Lucy grabs 2 marbles of the same color,\n    # she should take at least one more than the number of colors.\n    num_colors = 2\n    marbles_needed = num_colors + 1\n\n    return marbles_needed\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    weight_kg_1 = 2.49\n    weight_g_1 = weight_kg_1 * 1000\n    weight_g_2 = 670\n    weight_kg_3 = 3\n    weight_g_3_additional = 80\n    weight_g_3 = weight_kg_3 * 1000 + weight_g_3_additional\n\n    total_weight_g = weight_g_1 + weight_g_2 + weight_g_3\n\n    return int(total_weight_g)\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Find the least common multiple to determine when they will all meet\n    meet_time_seconds = lcm(ashley_time, ben_time, charlie_time)\n\n    # Convert seconds to hours, minutes, and seconds\n    meet_time_hours = meet_time_seconds // 3600\n    meet_time_minutes = (meet_time_seconds % 3600) // 60\n    meet_time_seconds = meet_time_seconds % 60\n\n    # Start time is at 10.00 a.m., which is 10 hours. Add the meet_time_hours to it.\n    meet_time_total_hours = 10 + meet_time_hours\n\n    # Take care of the situation where adding the hours might cross into the next day.\n    meet_time_total_hours = meet_time_total_hours % 24\n\n    return f\"{meet_time_total_hours:02d}:{meet_time_minutes:02d}:{meet_time_seconds:02d}\"\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time_minutes = 60  # 1 hour = 60 minutes\n    cycling_fraction = 1 / 3\n    \n    cycling_time = total_time_minutes * cycling_fraction\n    jogging_time = total_time_minutes - cycling_time\n    \n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solution = solve(equation, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    difference = 22 - 18  # Calculate difference between the terms given\n    last_term = 2  # The last term given in the sequence\n    next_term = last_term - difference  # Find the next term in the sequence\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Since we want the kid with the most apples to have the largest possible number of apples,\n    # we should minimize the number of apples the other kids get. Since each kid must get a \n    # different number of apples, and all kids must have at least one apple, we can start by \n    # giving the first five kids 1, 2, 3, 4, 5 apples respectively.\n    # This way, we have given out the smallest numbers in an increasing order.\n    # We calculate the remaining apples by subtracting the sum of the first five kids' apples\n    # from the total number of apples.\n    \n    # Total apples\n    total_apples = 30\n\n    # Apples distributed to the first five kids\n    apples_for_first_five = sum(range(1, 6))\n\n    # Remaining apples for the kid who gets the most\n    remaining_apples = total_apples - apples_for_first_five\n\n    return remaining_apples\n\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    # Calculate the amount of petrol Sam's car consumes for the trip\n    distance = 273\n    sam_miles_per_gallon = 72.8\n    sam_petrol_consumption = distance / sam_miles_per_gallon\n\n    # Tom's car uses 6 3/4 gallons more petrol than Sam's car for the same distance\n    tom_additional_petrol = 6 + 3/4\n    tom_petrol_consumption = sam_petrol_consumption + tom_additional_petrol\n    \n    # Calculate the average rate at which Tom's car consumes petrol\n    tom_miles_per_gallon = distance / tom_petrol_consumption\n    \n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Bart needs to take out at least 1 chip of each color to ensure he has 2 different colors\n    # Taking 1 red, 1 yellow, and 1 brown guarantees having 2 chips of different colors\n    # However, if he's unlucky, he might get 2 chips of the same color in his first two picks\n    # Therefore, the worst-case scenario is:\n    # 1. Taking all 3 red (and not having 2 different colors yet)\n    # 2. Taking all 4 yellow (still possible to not have 2 different colors if all picks so far are yellow)\n    # After this point, the next chip taken (which would be brown in this case) guarantees 2 different colors\n\n    # So, the smallest number of chips he needs to take out is 3 (red) + 4 (yellow) + 1 (next chip, which will be brown)\n    minimum_chips = 3 + 4 + 1\n    return minimum_chips\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        num = int(f\"24572{i}\")\n        if num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(1, 20, 2))\n    return sum_of_squares\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    # Linda has two shirts to choose from and two skirts.\n    # Each shirt can be matched with each skirt, so we use the Principle of Multiplication.\n    num_shirts = 2\n    num_skirts = 2\n\n    # Total ways to match an outfit\n    total_outfits = num_shirts * num_skirts\n\n    return total_outfits\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Identify the pattern\n    # Looking at 1, 3, 27, 81 we can see that 3 is 3^1, 27 is 3^3 and 81 is 3^4\n    # So the missing number should be 3^2 to maintain the pattern\n\n    missing_number = 3**2  # 3 to the power of 2\n\n    return missing_number\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    term_7 = 105\n    term_8 = 120\n    term_9 = 135\n\n    common_difference = term_8 - term_7\n\n    term_100 = term_7 + (100 - 7) * common_difference\n\n    return term_100\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n    sum_decimal = num1 + num2\n    ans = ''\n    while sum_decimal > 0:\n        ans = str(sum_decimal % 7) + ans\n        sum_decimal //= 7\n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the symbols represent the initial number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n\n    # Define the equations based on the given ratios and changes\n    # Initial ratio of oranges to lemons is 3:5\n    eq1 = Eq(oranges / lemons, 3/5)\n    # After selling 48 oranges, the ratio becomes 1:2\n    eq2 = Eq((oranges - 48) / lemons, 1/2)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (oranges, lemons))\n\n    # Extract the number of lemons from the solutions\n    num_lemons = solutions[lemons]\n\n    return num_lemons\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    rabbits = 8\n    days = 5\n    total_carrots = carrots_per_day_per_rabbit * rabbits * days\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # The rate at which the animals eat the hay\n    horse_rate = 1/2\n    cow_rate = 1/3\n    sheep_rate = 1/12\n\n    # Combined rate of all three animals eating together\n    combined_rate = horse_rate + cow_rate + sheep_rate\n\n    # Total number of bales of hay\n    total_bales = 22\n\n    # Number of days the bales will last\n    days = total_bales / combined_rate\n\n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5/8) * 160\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let x be the current age of the daughter, y be the current age of the mother\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # When the daughter is y years old, the mother will be 75\n    equation1 = Eq(y + (y - x), 75)\n\n    # When the mother was x years old, the daughter was 3\n    equation2 = Eq(x - (y - x), 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    year = \"2014\"\n    count = 0\n    \n    # Since we care about equal numbers of 0, 1, 2, there must be 2 of each in the date\n    all_digits = \"011122\"\n    possible_day_month_combinations = set(permutations(all_digits))\n    \n    for combination in possible_day_month_combinations:\n        mm = ''.join(combination[:2])\n        dd = ''.join(combination[2:])\n        if int(mm) < 1 or int(mm) > 12:  # Invalid month\n            continue\n        if int(dd) < 1 or int(dd) > 31:  # Invalid day\n            continue\n\n        # Check if date is valid considering different month lengths\n        if mm == \"02\" and int(dd) > 28:  # February\n            continue\n        if mm in [\"04\", \"06\", \"09\", \"11\"] and int(dd) > 30:  # April, June, September, November\n            continue\n        \n        count += 1\n    return count\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    num_green = 11\n    num_yellow = 7\n    num_red_needed = 3\n\n    max_non_red = num_green + num_yellow\n\n    # She might take all non-red apples first, so she needs to take at least 1 more than that\n    # to ensure she has 3 red apples.\n    apples_to_take = max_non_red + num_red_needed\n\n    return apples_to_take\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    original_amount = 200\n    new_amount = 204\n    percentage_change = ((new_amount - original_amount) / original_amount) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    # Total pupils\n    total_pupils = 30\n    \n    # Right handed pupils\n    right_handed = 21\n    \n    # Total girls\n    girls = 16\n    \n    # The smallest number of girls who are right-handed is when the maximum number\n    # of left-handed pupils are girls. Therefore, we have to find out the maximum\n    # number of left-handed girls first.\n    \n    # Maximum number of left-handed students\n    left_handed = total_pupils - right_handed\n    \n    # Maximum possible left-handed girls\n    max_left_handed_girls = min(girls, left_handed)\n    \n    # To find the minimum right-handed girls, we subtract the maximum possible\n    # left-handed girls from the total number of girls.\n    min_right_handed_girls = girls - max_left_handed_girls\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    original_price = 6400 / 0.2  # Tiffany spent this amount after discount, so to find the original, divide by the discount rate.\n    savings = original_price - 6400  # The savings is the difference between the original price and the spent amount.\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a round-robin tournament, each team plays against each other team once.\n    # Therefore, there are C(6, 2) games, because we are choosing 2 teams to play from 6,\n    # which can be calculated using the combination formula: C(n, k) = n! / (k! * (n - k)!)\n    \n    from math import comb\n    total_games = comb(6, 2)\n    \n    # For each game, there are 2 points awarded (either 2 points to the winner or 1 point to each team in case of a tie).\n    # So, independent of the game's result, total points awarded per game is 2.\n    \n    total_points = total_games * 2\n    \n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "import math\n\ndef solution():\n    children = 45\n    capacity = 8\n    minibuses = math.ceil(children / capacity)\n    return minibuses\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # The worst case to ensure she gets 4 different coloured marbles\n    # is to consider she picks all marbles of one colour first, then all of another,\n    # and so on, until she gets to the last colour, where she must get a different colour\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # She could pick all green, blue, and orange marbles and still not have 4 different colours\n    # She has to pick one more, which would be a red marble in the worst case scenario\n    marbles_needed = green + blue + orange + 1\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    # Prime factorization of 10 is 2 * 5.\n    # Therefore, the number of zeros in factorial(n) is determined by the minimum of the count of 2's and 5's.\n    # Since the factorial has more factors of 2 than 5, we only need to find how many times 5 is a factor in the numbers from 1 to n.\n    \n    # Count the number of fives in the prime factorizations of numbers up to n.\n    # We want to find the smallest n such that there are 28 factors of 5.\n    count_of_fives = 0\n    n = 0\n    while count_of_fives < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            count_of_fives += 1\n            temp //= 5\n    \n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    ans = 789 * 6\n    return ans\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime, primerange\n\n    ans = None\n    for a in primerange(1, 41):\n        for b in primerange(1, 41):\n            if 3*a + 7*b == 41:\n                if isprime(a) and isprime(b):\n                    ans = a + b\n                    break\n        if ans is not None:\n            break\n\n    return ans\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_pc_4pc = 7 / 4\n    price_per_pc_6pc = 8.5 / 6\n    \n    if price_per_pc_4pc < price_per_pc_6pc:\n        ans = '4pc is a better buy'\n    elif price_per_pc_4pc > price_per_pc_6pc:\n        ans = '6pc is a better buy'\n    else:\n        ans = 'Both are the same value'\n    return ans\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_plays = 60\n    bet_amount = 1\n    win_amount = 10\n    num_dice = 2\n    num_sides = 6\n    win_threshold = 11\n\n    # Count the number of ways to get a sum greater than 10\n    win_cases = 0\n    for d1 in range(1, num_sides + 1):\n        for d2 in range(1, num_sides + 1):\n            if d1 + d2 >= win_threshold:\n                win_cases += 1\n\n    # Total number of possible outcomes for two dice\n    total_cases = num_sides * num_sides\n\n    # Probability of winning\n    win_prob = win_cases / total_cases\n\n    # Expected win per game\n    expected_win_per_game = (win_prob * win_amount) - (bet_amount * (1 - win_prob))\n\n    # Expected total loss\n    expected_total_loss = total_plays * (bet_amount - expected_win_per_game)\n\n    return expected_total_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n    \n    # Equation for total number of pupils\n    total_pupils_eq = Eq(g + b, 1690)\n    \n    # Equation for difference between boys and girls\n    boys_girls_diff_eq = Eq(b - g, 90)\n    \n    # Solve for g and b\n    pupils_solution = solve((total_pupils_eq, boys_girls_diff_eq), (g, b))\n    \n    girls = pupils_solution[g]\n    boys = pupils_solution[b]\n    \n    # Ratios for girls who can swim (c_swim_g) and cannot swim (nc_swim_g)\n    c_swim_g = 31\n    nc_swim_g = 49\n    \n    # Total girls who can swim and cannot swim\n    total_girls_swim = girls * c_swim_g / (c_swim_g + nc_swim_g)\n    total_girls_not_swim = girls * nc_swim_g / (c_swim_g + nc_swim_g)\n    \n    # The number of boys who can swim (c_swim_b) and cannot swim (nc_swim_b)\n    nc_swim_b, c_swim_b = symbols('nc_swim_b c_swim_b')\n    \n    # Boys can swim is 120 less than boys who cannot swim\n    boys_swim_diff_eq = Eq(c_swim_b, nc_swim_b - 120)\n    \n    # Total number of boys who can swim and cannot swim is equal to total boys\n    total_boys_swim_eq = Eq(c_swim_b + nc_swim_b, boys)\n    \n    # Solve for c_swim_b and nc_swim_b\n    boys_solution = solve((boys_swim_diff_eq, total_boys_swim_eq), (c_swim_b, nc_swim_b))\n    \n    not_swim = total_girls_not_swim + boys_solution[nc_swim_b]\n    \n    return int(not_swim)\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    # let's call the remaining money after buying the phone as 'remaining'\n    # she spent 75% of remaining, which means she had 25% of 'remaining' left\n    # this 25% of 'remaining' is 1/5 of her total salary 'total_salary'\n\n    # Let's translate the above explanation to the equation\n    # 0.25 * remaining = total_salary / 5\n    # And since she spent 740 on phone, remaining = total_salary - 740\n\n    # Therefore, we have 0.25 * (total_salary - 740) = total_salary / 5\n    # Let's solve for 'total_salary'\n\n    total_salary = symbols('total_salary')\n    equation = Eq(0.25 * (total_salary - 740), total_salary / 5)\n    total_salary_value = solve(equation, total_salary)[0]\n\n    return total_salary_value\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - weight_with_two_apples\n    \n    weight_of_basket = weight_with_two_apples - 2 * (weight_of_three_apples / 3)\n    return int(weight_of_basket)\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n\n    numbers = [2, 3, 4]\n    all_permutations = set(permutations(numbers, 1)) | set(permutations(numbers, 2)) | set(permutations(numbers, 3))\n    count = len(all_permutations)\n    \n    return count\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    total_minutes = 24 * 60  # total minutes in a day\n    start_time_minutes = 2 * 60 + 31  # convert 02:31 to total minutes from 00:00\n    \n    for i in range(start_time_minutes + 1, total_minutes):\n        hour = i // 60\n        minute = i % 60\n        time_digits = set(str(hour).zfill(2) + str(minute).zfill(2))\n        if time_digits == set(['0', '1', '2', '3']):\n            return i - start_time_minutes\n    return -1  # if not found, which shouldn't be the case\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    after_class = 100 + 150  # Total after drinking after class\n    before_class = after_class * 2  # Total before class, since he drank half before class\n    return before_class\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Lynn and Mary had\n    x = symbols('x')\n    # Lynn spent $160, so she had x - 160 left\n    # Mary spent $58, so she had x - 58 left, which is three times what Lynn has: 3 * (x - 160)\n    equation = Eq(x - 58, 3 * (x - 160))\n\n    # Solve the equation for x\n    solutions = solve(equation, x)\n\n    # Calculate the amount of money Lynn had left, which is x - 160\n    lynn_left = solutions[0] - 160\n\n    return lynn_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n\n    def triangle(A, B):\n        return 5 * A - B * B\n\n    return triangle(diamond(4, 2), 6)\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3/7) * total_grapes\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3/8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    weight_per_bag = 3/4\n    number_of_bags = remaining_after_tuesday / weight_per_bag\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_unsold = 100 - 60\n    tickets_remaining = 28\n\n    total_capacity = tickets_remaining * 100 / percent_unsold\n\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # The divisor must be greater than the quotient, otherwise the quotient would be higher.\n\n    # Dividend = Divisor * Quotient + Remainder\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Deⅵ's and Jerry's current ages\n    devis_age, jerrys_age = symbols('devis_age jerrys_age')\n\n    # Deⅵ is 8 years older than Jerry\n    equation1 = Eq(devis_age, jerrys_age + 8)\n\n    # In 4 years' time, the ratio of their ages will be 5:7\n    equation2 = Eq((devis_age + 4) / (jerrys_age + 4), 5/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (devis_age, jerrys_age))\n\n    # Jerry's current age\n    return solutions[jerrys_age]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum(64 - i * 2 * ((-1) ** (i % 2)) for i in range(0, 11))\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Assuming the correct 2-digit number is 'ab', where a and b are its tens and ones places respectively\n    # Serene's mistaken subtrahend is 53 instead of 32\n    # Let's find the proper number that should be subtracted from the minuend and that yields a difference of 36\n    for a in range(1, 10):\n        for b in range(10):\n            minuend = a * 10 + b\n            correct_subtrahend = 30 + 2\n            incorrect_subtrahend = 50 + 3\n            proper_diff = minuend - correct_subtrahend\n            if minuend - incorrect_subtrahend == 36 and proper_diff != 36:\n                return proper_diff\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    result = (41 + 4) / 5\n    return result\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n\n    num_jugs = -(-total_ml // jug_capacity)  # Ceiling division\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50\n    target_percentage = 0.90\n    blue_balls = 1\n\n    # Let x be the number of red balls to be removed\n    # The equation will be: (49 - x) / (50 - x) = 0.90\n    # Solve for x\n    x = symbols('x')\n    equation = Eq((49 - x) / (total_balls - x), target_percentage)\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    sum = 0\n    numerator = 100\n    denominator = 97\n    factorial_denominator = 1\n\n    while numerator >= 4:\n        sum += numerator / (denominator * factorial_denominator)\n        numerator -= 1\n        factorial_denominator *= denominator\n        denominator -= 1\n        \n    return sum\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45  # Total weight of the box with matches (in grams).\n    empty_box_weight = 12           # Weight of the empty box (in grams).\n    number_of_matches = 220         # Total number of matches.\n\n    # Calculate the weight of all matches.\n    matches_weight = total_weight_with_matches - empty_box_weight\n    # Calculate the weight of one match.\n    weight_per_match = matches_weight / number_of_matches\n\n    return weight_per_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, birds = symbols('cows birds')\n    # Each cow has 4 legs and each bird has 2 legs \n    # The total number of animals is 1300\n    equation1 = Eq(cows + birds, 1300)\n    # The total number of legs is 3440\n    equation2 = Eq(4*cows + 2*birds, 3440)\n\n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    max_number = 0\n\n    for number in range(100, 1000):  # Range for 3-digit numbers\n        if number % 9 == 0 and number % 2 != 0:  # divisible by 9 and odd\n            if (number // 10) % 10 % 4 == 0:  # Tens place divisible by 4\n                max_number = max(max_number, number)\n\n    return max_number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_initial = 83\n    pens_given_to_ben = 28\n    ben_initial = jenny_initial - pens_given_to_ben - (jenny_initial - pens_given_to_ben) // 2\n    return ben_initial\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # The distance between the first and last tree\n    distance = (21 - 1) * 2  # 20 intervals of 2m each\n    \n    # The number of lamp posts required. Since we need a lamp post at each end,\n    # we start with counting the first one and then add the number required in between.\n    # We divide the total distance by the interval distance between lamp posts \n    # and add 1 for the lamp post at the starting point.\n    num_lamp_posts = (distance // 10) + 1\n    \n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    # 5 laptops and 4 DVD players cost $14438\n    equation1 = Eq(5 * laptop + 4 * dvd_player, 14438)\n    # 1 laptop and 1 DVD player cost $2960\n    equation2 = Eq(laptop + dvd_player, 2960)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the initial momenta of the cars\n    m1, v1_north = 500, 20\n    m2, v2_west = 500, 30\n    \n    # Initial momentum in north direction (only first car)\n    p1_north = m1 * v1_north\n    # Initial momentum in west direction (only second car)\n    p2_west = m2 * v2_west\n    \n    # After collision, the cars stick together, thus having a combined mass of m1 + m2\n    combined_mass = m1 + m2\n    \n    # Let's say after the collision the combined velocity vector has components v_north and v_west\n    v_north, v_west = symbols('v_north v_west')\n    \n    # Conservation of momentum equations\n    equation1 = Eq(p1_north, combined_mass * v_north)  # Momentum in north direction is conserved\n    equation2 = Eq(p2_west, combined_mass * v_west)    # Momentum in west direction is conserved\n    \n    # Solve the conservation of momentum equations to find the north and west components of velocity\n    solutions = solve((equation1, equation2), (v_north, v_west))\n    \n    # The resultant velocity is given by the vector magnitude formula: sqrt(v_north^2 + v_west^2)\n    v_resultant = (solutions[v_north]**2 + solutions[v_west]**2)**0.5\n    \n    return v_resultant\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # Number of sizes: S, M, L\n    colours = 5  # Number of colors: black, white, red, yellow, purple\n\n    # The total number of combinations is the product of the number of choices for size and color.\n    total_combinations = sizes * colours\n\n    return total_combinations\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    #Let the original average be x and the number of people be n\n    #We have two equations based on the information given:\n    # (n*x + 45) / (n + 1) = 61 => n*x + 45 = 61*(n + 1)\n    # (n*x + 45 + 71) / (n + 2) = 62 => n*x + 116 = 62*(n + 2)\n    \n    from sympy import symbols, Eq, solve\n    \n    #Define the symbols\n    x, n = symbols('x n')\n    \n    #Set up the equations\n    equation1 = Eq(n*x + 45, 61 * (n + 1))\n    equation2 = Eq(n*x + 116, 62 * (n + 2))\n    \n    #Solve the equations for n and x\n    solutions = solve((equation1, equation2), (n, x))\n    \n    #Return the original average x\n    return solutions[x]\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    # There are only 10 possible digits, so we will find a permutation where the conditions are met\n    for perm in permutations(range(10), 3):\n        # Assign the digits from the permutation to the shapes\n        square, circle, triangle = perm\n        # Check if the equation square + circle + triangle * triangle == circle * circle holds true\n        if square + circle + triangle * triangle == circle * circle:\n            return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    # Initialize counter for the number of pairs\n    count = 0\n\n    # Loop over the range of numbers from 1 to 100\n    for i in range(1, 101):\n        for j in range(i + 1, 101):  # Ensure j > i to get distinct pairs\n            # If the sum of the pair i and j is divisible by 5, it forms a valid pair\n            if (i + j) % 5 == 0:\n                count += 1\n\n    # Return the total number of distinct pairs\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    period_length = 5\n    repeat_times, remainder = divmod(2000, period_length)\n    period_sum = sum(range(1, period_length + 1))\n    total_sum = repeat_times * period_sum + sum(range(1, remainder + 1))\n    \n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_paid = 5.15\n    coffee_price = 3.69\n    milk_price = 0.89\n\n    sugar_price = total_paid - (coffee_price + milk_price)\n\n    return sugar_price\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    # Let x be the number of hours passed since midnight and 12 - x be the number of hours remaining until noon.\n    # From the problem statement, we have the equation: x = 2 * (12 - x)\n    for x in range(1, 12):\n        if x == 2 * (12 - x):\n            ans = x\n            return ans\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Maximum number of balls Sheila can take out without getting 4 balls of the same color\n    max_balls_without_four = (5 - 1) + (4 - 1) + (4 - 1)\n\n    # To get 4 balls of the same color, add one more to the maximum without four\n    balls_to_take_out = max_balls_without_four + 1\n\n    return balls_to_take_out\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    answer = 2.3 + 9.7 + 5.2 - 2.2\n    return answer\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    orange_price_per_kg = 1.5\n    mango_price_per_kg = 2.3\n    weight_oranges = 4.1\n    weight_mangoes = 2\n    \n    total_cost = orange_price_per_kg * weight_oranges + mango_price_per_kg * weight_mangoes\n    \n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean = 5\n    sum_numbers = sum(numbers)\n    num_elements = len(numbers) + 1  # Including the unknown 'a'\n    sum_with_a = mean * num_elements\n    a = sum_with_a - sum_numbers\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Total work is considered as the LCM of the days A and B can individually complete the work.\n    total_work = 1  # We can consider the work as a single unit job.\n\n    # Rates of A and B\n    rate_a = 1/15\n    rate_b = 1/10\n\n    # They work together for 4 days\n    work_done = 4 * (rate_a + rate_b)\n\n    # Remaining work\n    remaining_work = total_work - work_done\n\n    # Days B takes to finish the remaining work\n    days_b = remaining_work / rate_b\n\n    return days_b\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the sequence: 1 to 13\n    sum_to_13 = (13 * (13 + 1)) // 2\n    # Since the sequence 1 to 13 is repeated twice,\n    # except the number 13 which is not repeated, we subtract it from the sum\n    total_sum = 2 * sum_to_13 - 13\n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    \n    discount = original_price - reduced_price\n    discount_percentage = (discount / original_price) * 100\n    \n    return discount_percentage\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    boys_more_than_girls = 52\n    total_students = 0\n    side_length = 1  # Start with a 1x1 square\n    \n    while True:\n        if side_length % 2 == 0:\n            girls = (side_length - 1) ** 2\n            boys = side_length ** 2 - girls\n        else:\n            boys = (side_length - 1) ** 2\n            girls = side_length ** 2 - boys\n            \n        if boys - girls == boys_more_than_girls:\n            total_students = side_length**2\n            break\n        \n        side_length += 1\n    \n    return total_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    import math\n    num_bottles = 1000\n    test_tubes_needed = math.ceil(math.log(num_bottles, 2))\n    \n    return test_tubes_needed\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are looking for a number that leaves a remainder of 1 when divided by 5, 6, and 7.\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Use the Chinese Remainder Theorem to find the smallest such number.\n    smallest_number = solve_congruence(*congruences)[0]\n\n    # Ensure the smallest number is a three-digit number.\n    while smallest_number < 100:\n        smallest_number += 5 * 6 * 7\n\n    return smallest_number\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Ducks have 2 legs each\n    duck_legs = 4 * 2\n    # Baby geese have 2 legs each\n    goose_legs = 2 * 2\n    # Lambs have 4 legs each,  let the number of lambs be x\n    lamb_legs_unit = 4\n    \n    # Total number of legs\n    total_legs = 36\n    \n    # Calculate the number of legs ducks and geese have\n    known_legs = duck_legs + goose_legs\n    \n    # Subtract the known number of legs from the total to find the total number of lamb legs\n    lamb_legs_total = total_legs - known_legs\n    \n    # The number of lambs can be found by dividing the total number of lamb legs by the number of legs one lamb has\n    num_lambs = lamb_legs_total // lamb_legs_unit\n    \n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    # On the fourth day, he ate 1/4 of the remaining number of sweets.\n    # So before eating on the fourth day, there were 4/3 of the sweets left after the third day.\n    before_fourth_day = remaining_sweets * (4 / 3)\n\n    # On the third day, he ate 1/5 of the remaining number of sweets.\n    # So before eating on the third day, there were 5/4 of the sweets left after the second day.\n    before_third_day = before_fourth_day * (5 / 4)\n\n    # On the second day, he ate 1/6 of the remaining number of sweets.\n    # So before eating on the second day, there were 6/5 of the sweets left after the first day.\n    before_second_day = before_third_day * (6 / 5)\n\n    # On the first day, he ate 1/7 of the number of sweets.\n    # So before eating on the first day, there were 7/6 of all the sweets.\n    initial_sweets = before_second_day * (7 / 6)\n\n    return int(initial_sweets)\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_cookies = symbols('total_cookies')\n\n    # Charlene kept half plus 8\n    charlene_kept = (1/2)*total_cookies + 8\n\n    # Remaining cookies given to Emerald\n    emerald_received = total_cookies - charlene_kept\n\n    # Emerald ate a third plus 4\n    emerald_ate = (1/3)*emerald_received + 4\n\n    # Remaining cookies given to Hebe\n    hebe_received = emerald_received - emerald_ate\n\n    # Hebe ate a quarter, and 42 cookies were left\n    equation = Eq((1/4)*hebe_received + 42, hebe_received)\n\n    # Solve the equation\n    solutions = solve(equation, total_cookies)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_kid_chocolates = 17\n    last_kid_chocolates = 150\n    difference = 7\n\n    # Using arithmetic sequence nth term formula: a + (n-1)d = l, where\n    # a is the first term, d is the difference, and l is the last term.\n    # Solving for n gives us n = ((l - a) / d) + 1\n    num_kids = ((last_kid_chocolates - first_kid_chocolates) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    total_matches = 30\n    for teams in range(1, total_matches + 1):\n        if teams * (teams - 1) == total_matches * 2:\n            return teams\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_sets = 3600\n    sets_made = 720\n    days_passed = 5\n    \n    sets_per_day = sets_made / days_passed\n    remaining_sets = total_sets - sets_made\n    remaining_days = remaining_sets / sets_per_day\n    \n    total_days = days_passed + remaining_days\n    \n    return total_days\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    second_number = symbols('second_number')\n    \n    # Define the relationships between the numbers\n    first_number = second_number + 1099\n    third_number = second_number - 877\n    \n    # Define the equation based on the sum of the three numbers\n    equation = Eq(first_number + second_number + third_number, 7656)\n    \n    # Solve for the second number\n    second_number_value = solve(equation, second_number)\n\n    return second_number_value[0]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = 45\n    boys = symbols('boys')\n    \n    equation = Eq(3 * boys - 21, girls)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    from sympy import primefactors, Mul\n    from collections import Counter\n    \n    factors = [2, 2, 2, 3, 8, 5, 5, 25]\n    prime_factor_counts = Counter()\n    \n    for factor in factors:\n        prime_factor_counts.update(Counter(primefactors(factor)))\n\n    # The number of zeros at the end of the product is determined by the number of complete '10s'\n    # which is the count of pairs (2,5) in the prime factors.\n    num_zeros = min(prime_factor_counts[2], prime_factor_counts[5])\n    \n    return num_zeros\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8):  # The range is limited as 7^2 = 49 and 6^2 = 36 which are the only squares near 40 and 50\n        n = i**2\n        if 40 < n < 50:\n            return n\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_water = 150\n    water_per_cup = 40\n    number_of_cups = 3\n\n    water_used = water_per_cup * number_of_cups\n    water_left = initial_water - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    num1 = 0.7\n    num2 = 5.1\n    halfway = (num1 + num2) / 2\n    return halfway\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    from math import factorial\n\n    # Define a function to calculate combinations (nCk)\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Ways to reach 5th step: 1+1+1+1+1, 1+1+1+2, 1+1+2+1, 1+2+1+1, 2+1+1+1, \n    # 2+2+1, 2+1+2, 1+2+2 which is equal to the 4th Fibonacci number, starts from f(0)=1, f(1)=1\n    # We can obtain it by calculating the combinations for reaching 4th step:\n    # (4,0), (3,1), (2,2)\n    ways_to_5th = combinations(4, 0) + combinations(3, 1) + combinations(2, 2)\n\n    # Ways to reach 10th step from 5th: 1+1+1+1+1, 1+1+1+2, ..., up to the 10th step\n    # This is equivalent to the ways to reach 5th step from 0\n    # We can obtain it by calculating the combinations for reaching 5th step:\n    # (5,0), (4,1), (3,2), (2,3), (1,4)\n    ways_to_10th_from_5th = combinations(5, 0) + combinations(4, 1) + combinations(3, 2) + combinations(2, 3) + combinations(1, 4)\n\n    # Total ways is the product of the number of ways to reach the 5th step and then to reach the 10th from the 5th step\n    total_ways = ways_to_5th * ways_to_10th_from_5th\n\n    return total_ways\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    ans = 936 // 54\n    return ans\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Angel bought 3 notebooks, 4 pencil cases and 5 erasers at $50\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n\n    # A notebook and a pencil case cost $6\n    equation2 = Eq(notebook + pencil_case, 6)\n\n    # A pencil case and an eraser cost $8\n    equation3 = Eq(pencil_case + eraser, 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    # Since the product of 4 consecutive natural numbers is given as 3024,\n    # We can set up a loop to find a number whose factorial gives us a product less than or equal to 3024\n    # and the next consecutive number's factorial gives a product more than 3024.\n    # We start with 1 and move upwards\n\n    # Variable to find the largest number\n    largest_number = 1\n\n    # Loop to find the consecutive numbers whose product is 3024\n    while True:\n        product = largest_number * (largest_number - 1) * (largest_number - 2) * (largest_number - 3)\n        if product == 3024:\n            break\n        else:\n            largest_number += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bob, alan = symbols('bob alan')\n\n    equation1 = Eq(bob - alan, 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (bob, alan))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    # Finding the least common multiple (LCM) of the pack sizes\n    from math import lcm\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Calculate the smallest number of packs needed to exceed 1000 markers\n    number_of_packs = 1000 // pack_lcm\n    if 1000 % pack_lcm != 0:\n        number_of_packs += 1\n\n    # Calculate the total number of markers with the least number of packs\n    total_markers = number_of_packs * pack_lcm\n    \n    # If the total is less than 1000, increment the number of packs\n    while total_markers < 1000:\n        number_of_packs += 1\n        total_markers = number_of_packs * pack_lcm\n\n    return number_of_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    total_students = 10\n    handshakes = total_students * (total_students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert the recurring decimals to fractions\n    def recurring_to_fraction(whole, repeat, non_repeat_len):\n        non_repeat = int(whole.replace('.', ''))\n        repeat = int(repeat)\n\n        non_repeat_factor = 10 ** non_repeat_len\n        repeat_factor = 10 ** len(repeat) - 1\n\n        numerator = non_repeat * repeat_factor + repeat - non_repeat\n        denominator = non_repeat_factor * (repeat_factor)\n\n        return numerator, denominator\n    \n    # Define the repeating parts of the decimals\n    repeat1 = '1'\n    non_repeat_len1 = 2\n\n    repeat2 = '3'\n    non_repeat_len2 = 1\n\n    # Get the fractions for both recurring decimals\n    fraction1 = recurring_to_fraction('0.1', repeat1, non_repeat_len1)\n    fraction2 = recurring_to_fraction('0.2', repeat2, non_repeat_len2)\n\n    # Define n\n    n = 1\n    while True:\n        # Tenths place for both numbers\n        digit1 = (fraction1[0]*10**n) // fraction1[1] % 10\n        digit2 = (fraction2[0]*10**n) // fraction2[1] % 10\n\n        # Check if the nth digit matches and is equal to 7\n        if digit1 == digit2 == 7:\n            return n\n        # Increment n for the next digit\n        n += 1\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    \n    maria = anne + 20\n    total = anne + maria\n    \n    equation = Eq(total, 44)\n    \n    solution = solve(equation, anne)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target_number = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest_number = min(numbers, key=lambda x: abs(x - target_number))\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    twenty_percent_of_ninety = 0.20 * 90\n    ninety_percent_of_twenty = 0.90 * 20\n\n    difference = twenty_percent_of_ninety - ninety_percent_of_twenty\n\n    return difference\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_amount = 10  # in grams\n\n    # Using cross multiplication\n    water_amount = (water_ratio * orange_amount) / orange_ratio\n\n    return water_amount\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    required_average = 8.5\n    total_score_needed = required_average * 5\n    current_total = sum(scores)\n    score_needed_from_last_judge = total_score_needed - current_total\n\n    return score_needed_from_last_judge\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2*x - 5), 4)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 10000  # Principal amount\n    total_interest = 816  # Total interest earned in 2 years\n    rate = symbols('r')  # Interest rate (symbolic variable)\n    \n    # Equation representing the interest for two years with simple interest formula\n    equation = Eq(principal * rate * 2, total_interest)\n    \n    # Solve for interest rate\n    interest_rate_per_year = solve(equation, rate)[0]\n    \n    return interest_rate_per_year * 100  # Converting to percentage\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's calculation\n    johnny_answer = (quotient * remainder) + divisor\n\n    # Correct calculation\n    correct_answer = (divisor * quotient) + remainder\n\n    return correct_answer if johnny_answer != correct_answer else johnny_answer\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    final_number = 43\n    added_number = 7\n    original_number = (final_number - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    # Total pages read is 550\n    total_pages = 550\n    # Pages read on the first day is 30\n    first_day_pages = 30\n    # Pages read on the last day is 70\n    last_day_pages = 70\n\n    # The number of pages read forms an arithmetic sequence from the first day to the last day\n    # The sum of an arithmetic sequence is given by: S_n = n/2 * (a_1 + a_n)\n    # where S_n is the sum of the first n terms, a_1 is the first term and a_n is the last term\n    # We need to find n, which is the number of days\n    # We also have S_n = total_pages, a_1 = first_day_pages and a_n = last_day_pages\n    # We can solve for n using the equation n/2 * (a_1 + a_n) = S_n\n\n    # Let's algebraically rearrange the equation to solve for n:\n    # n = 2 * S_n / (a_1 + a_n)\n\n    # We know that n must be an integer because you cannot read for a fraction of a day\n    # Therefore, we will iterate over possible values of n until we find the correct one that satisfies\n    # the condition that the total pages read equals 550\n\n    n = 2\n    while True:\n        sum_of_sequence = n/2 * (first_day_pages + first_day_pages + (n - 1) * (last_day_pages - first_day_pages) / (n - 1))\n        if sum_of_sequence == total_pages:\n            break\n        n += 1\n\n    # Once we have the correct n, we calculate the common difference \"d\" of the arithmetic sequence\n    # The common difference is: d = (a_n - a_1) / (n - 1)\n\n    d = (last_day_pages - first_day_pages) / (n - 1)\n\n    return int(d)\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let h be the speed of Hannah\n    h = symbols('h')\n    \n    # Given that Peter's speed is 15 cm/s faster than Hannah's\n    p = h + 15\n    \n    # Given time ratio for Peter and Hannah is 3:4, therefore their speed ratio is 4:3\n    equation = Eq(h/p, 3/4)\n    \n    # Solve for Hannah's speed\n    hannah_speed = solve(equation, h)[0]\n    \n    return hannah_speed\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the costs of each fruit\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    # Return the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    emily, victor, victoria = symbols('emily victor victoria')\n    \n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n    \n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n    \n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial total number of coins Owen had\n    # Let y be the initial number of fifty-cent coins\n    x, y = symbols('x y')\n\n    # Initial ratio of fifty-cent to one-dollar coins\n    equation1 = Eq(y, x * 2/7)\n\n    # After the mother gave Owen 10 one-dollar coins and $5 worth of fifty-cent coins, which is 10 fifty-cent coins\n    # He then had y + 10 fifty-cent coins and x - y + 10 one-dollar coins\n    # It was stated that he had twice as many one-dollar coins as fifty-cent coins in the end\n    equation2 = Eq(2 * (y + 10), (x - y + 10))\n\n    # We solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    multiple_choice_time = 23\n    fill_in_blank_time = 35\n\n    short_answer_time = total_time - (multiple_choice_time + fill_in_blank_time)\n\n    return short_answer_time\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # train speed in meters per second\n    cross_time = 45   # time to cross the tunnel in seconds\n\n    train_length = 850  # length of the train in meters\n\n    # Distance covered by train to cross the tunnel entirely\n    total_distance = train_speed * cross_time\n\n    # Length of the tunnel\n    tunnel_length = total_distance - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    max_parts = (circles ** 2) + circles + (2 * line) + 1\n    return max_parts\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    # Total number of entrances\n    entrances = 4\n    \n    # Since Joe and Mike cannot enter through the same entrance,\n    # Joe has 4 options, Mike has 3 options (since one is taken by Joe),\n    # and Tina has 3 options (since one more is taken by Mike).\n    # After selecting entrances, the order of entry is also important,\n    # which adds another possible permutation for the 3 people.\n    \n    # Choosing entrances and considering permutations of entry order\n    ways = 4 * 3 * 3 * 6  # 6 is for the permutation of Joe, Mike and Tina\n    \n    return ways\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    spent_money = total_money - saved_money\n\n    # Let x be the money spent on transportation, then money spent on food is 2x.\n    # The sum of money spent on transportation and food is the total amount spent.\n    # Therefore, x + 2x = spent_money\n    # Which simplifies to 3x = spent_money\n\n    money_on_transportation = spent_money / 3\n    money_on_food = 2 * money_on_transportation\n\n    return money_on_food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Cost for the first 3 tons\n    base_cost = 4 * 3\n    \n    # Fixed service fee\n    fixed_fee = 4\n    \n    # Remaining amount after fixed charges\n    remaining_amount = 109 - (base_cost + fixed_fee)\n    \n    # Additional tons she can use after first 3 tons (with the unit cost of 3 dollars per ton)\n    additional_tons = remaining_amount // 3\n    \n    # Total tons of water she can use\n    total_tons = 3 + additional_tons\n    \n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    return (45 + 13)\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9, 3258 % 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n\n    equation1 = Eq(bala, daniel + 320)\n    equation2 = Eq(bala, (amelia + carl + daniel)/2)\n    equation3 = Eq(carl, (3/4) * (amelia + bala + daniel))\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n    equation5 = Eq(amelia, 160)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    \n    smallest_divisor = remainder + 1\n    smallest_dividend = (quotient * smallest_divisor) + remainder\n    \n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time it takes for the lazy gardener to mow the lawn on his own\n    x = symbols('x')\n    \n    # The rate at which the quick gardener works is 1/12 lawn per hour\n    # The rate at which the lazy gardener works is 1/x lawn per hour\n    \n    # Together, they work at a rate of (1/12 + 1/x) lawn per hour\n    \n    # It takes them 8 hours to mow the lawn, so:\n    # 8 * (1/12 + 1/x) = 1 lawn\n    \n    equation = Eq(8 * (1/12 + 1/x), 1)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples * (2/3) + oranges * (1/2), 100)\n    \n    solutions = solve((equation1, equation2), (apples, oranges))\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9\n    num_girls = 3\n\n    candy_per_girl = total_candy // num_girls\n\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda = 36\n    matthew = belinda - 7\n    initial_matthew = matthew - (belinda - matthew)\n    return initial_matthew\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for x\n    x = symbols('x')\n    \n    # Equation representing Jenny's expenditures and remaining money\n    equation = Eq(5 * x + 3 * x + 5 * x, 182)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\n# Call the function\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    # [2017] denotes the greatest integer less than or equal to 2017\n    term1 = floor(2017)\n    \n    # {201.7} denotes the fractional part of 201.7, which is 201.7 - floor(201.7)\n    term2 = 201.7 - floor(201.7)\n    \n    # [20.17] denotes the greatest integer less than or equal to 20.17\n    term3 = floor(20.17)\n    \n    # {2.017} denotes the fractional part of 2.017, which is 2.017 - floor(2.017)\n    term4 = 2.017 - floor(2.017)\n\n    ans = term1 - term2 + term3 - term4\n\n    return ans\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import lcm\n\n    green_line_interval = 5\n    red_line_interval = 6\n\n    common_interval = lcm(green_line_interval, red_line_interval)\n\n    hours, minutes = divmod(common_interval, 60)\n    time_in_24h_format = f\"{5 + hours:02d}:{minutes:02d}\"\n\n    return time_in_24h_format\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    term = 1\n    ans = 0\n    for i in range(2, 15, 2):\n        term *= i\n        ans += term\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    total_capacity = 990  # in mL\n    half_capacity = total_capacity / 2\n    capacity_per_cup = half_capacity / 3\n\n    return capacity_per_cup\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Calculate the distance from the first tree to the 101th tree\n    distance_to_101th_tree = 3 * (101 - 1) # Since there's a tree every 3 meters, we subtract 1 because we start at the first tree\n\n    # Olivia takes 3 minutes to walk this distance\n    # Calculate her walking speed (meters/minute)\n    speed = distance_to_101th_tree / 3\n\n    # Calculate the time (in minutes) it takes for her to travel 4000 meters to her home at this speed\n    time_to_home = 4000 / speed\n\n    return time_to_home\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_position_from_front = 8\n\n    blue_car_position_from_back = total_cars - blue_car_position_from_front + 1\n\n    return blue_car_position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    nearest_thousand = round(number, -3)\n    return nearest_thousand\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    n = 124 // 4\n    sum_of_squares = sum([4*i**2 for i in range(1, n+1)])\n    return sum_of_squares\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_of_squares = sum([(5 * i + 1)**2 for i in range(12)])\n    return sum_of_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    ans = 2017 + 597\n    return ans\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Initial given proportion\n    # Owen -> Oscar: 5 fish = 2 rabbits\n    fish_per_rabbit = 5 / 2\n\n    # Oscar -> Dennis: 4 rabbits = 7 packs of wheat\n    rabbit_per_wheat = 4 / 7\n\n    # How many fish for 14 packs of wheat?\n    # (fish_per_rabbit) * (rabbit_per_wheat) = fish_per_wheat\n    # We need the reciprocal of rabbit_per_wheat to obtain fish_per_wheat\n    fish_per_wheat = fish_per_rabbit * (1 / rabbit_per_wheat)\n\n    # Find the number of fish for 14 packs of wheat\n    fish_for_14_wheat = fish_per_wheat * 14\n\n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "def solution():\n    from itertools import permutations\n\n    # Possible configurations for at least one person at each entrance: 1-1-2, 1-2-1, 2-1-1\n    ways_1_1_2 = len(set(permutations([1, 1, 2, 3], 4)))\n    ways_1_2_1 = len(set(permutations([1, 2, 2, 3], 4)))\n    ways_2_1_1 = len(set(permutations([1, 2, 3, 3], 4)))\n\n    # Total ways for them to enter the park\n    total_ways = ways_1_1_2 + ways_1_2_1 + ways_2_1_1\n    return total_ways\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    score_per_correct = 5\n    score_deducted = 2\n    total_score = 23\n    \n    # Assume all answers were correct initially and calculate the total score for that case\n    max_score = total_questions * score_per_correct\n    \n    # Calculate the number of wrong answers based on the difference between the maximum score and actual score received\n    wrong_answers = (max_score - total_score) / (score_per_correct + score_deducted)\n    \n    # Calculate the number of correct answers\n    correct_answers = total_questions - wrong_answers\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Creating symbols for the number of cows and goats\n    cows, goats = symbols('cows goats')\n\n    # 65% of the animals were cows, the rest 35% were goats\n    # When 240 animals were added:\n    # - Cows percentage increased to 85% (65+20), \n    # - Number of goats doubled\n\n    # Equation representing the initial condition (65% cows, 35% goats)\n    equation1 = Eq(cows, 0.65 * (cows + goats))\n\n    # Equation representing the final condition (85% cows, after 240 animals added)\n    # Note that the number of goats doubled, hence 2 * goats\n    equation2 = Eq(cows + 240, 0.85 * (cows + goats + 240))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solution_age = solve(equation, justin)\n\n    return solution_age[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    total_time = time_per_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    return 378 - 196\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # define the congruences based on the problem statement\n    congruences = ((1, 4), (2, 5), (3, 6))\n\n    # use the Chinese Remainder Theorem to solve the congruences\n    ans, _ = solve_congruence(*congruences)\n\n    # ensure the number is less than 100\n    while ans < 100:\n        return ans\n        ans += lcm(*[c[1] for c in congruences])\n    \nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    # Since the discount for spending $50 is greater than the discount for spending $20,\n    # we will apply the greater discount.\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n\n    final_cost = total_cost - discount\n\n    return final_cost\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 / 2\n    total_books_in_six_cases = books_per_case * 6\n    return int(total_books_in_six_cases)\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial as f\n\n    # Two boys can be arranged in 2! ways\n    # Three girls can be arranged in 3! ways\n    return f(2) * f(3)\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    # Since Tom's age is a multiple of 3 and he is one of the siblings, Tom must be either 6 or 9 years old\n    # However, Jason is younger than Tom, so Tom cannot be 6 years old, hence Tom must be 9\n    # Now, we know Jason is not 9 and is younger than Tom, leaving the only possibility for Jason to be 6\n    # Therefore, Adam must be the one that is 10 years old\n    adam_age = 10\n    return adam_age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Worst case scenarios for each color:\n    # Draw all 5 red balls: still no guarantee of 3 different colors\n    # Draw all 5 red balls + 1 white ball: no guarantee of 3 different colors\n    # Therefore, draw all red balls, all white (or yellow) balls, and one more of the remaining color\n    # to ensure getting 3 different colored balls.\n    num_balls = 5 + 5 + 1\n\n    return num_balls\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    # Initialize variable to concatenate numbers\n    number_concat = \"2023\"\n    n = 1\n\n    # Define a function to check divisibility by 11\n    # A number is divisible by 11 if the alternate sum of its digits is divisible by 11\n    def is_divisible_by_11(num_str):\n        # Calculate the alternating sum\n        alt_sum = sum(int(num_str[i]) * (-1) ** i for i in range(len(num_str)))\n        # Check if the alternate sum is divisible by 11\n        return alt_sum % 11 == 0\n\n    # Repeat process until number formed by repeating '2023' is divisible by 11\n    while not is_divisible_by_11(number_concat):\n        number_concat += \"2023\"\n        n += 1\n\n    # Return the count of how many times '2023' was written to form the number\n    return n\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 / 21\n    return ans\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    max_apples = 28 - sum(range(1, 6)) # Sum of the smallest 5 numbers\n    return max_apples\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    eq1 = Eq(triangle + triangle, square)\n    eq2 = Eq(square + triangle, circle)\n    eq3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((eq1, eq2, eq3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5 / 8\n    cost_of_laptop = total_money * fraction_spent\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2\n    ratio_jocye_lori = 3 / 2\n    jocye_speed = lori_speed * ratio_jocye_lori\n    time = 10\n\n    distance_jocye_runs = jocye_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    total_numbers = 3\n    \n    total_original = original_average * 2\n    total_new = new_average * total_numbers\n    \n    new_number = total_new - total_original\n    \n    return new_number\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    common_difference = 23 - 16\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = sum(range(1, 6)) + sum(range(4, 0, -1))\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n\n    percentage_boys = (boys / total_children) * 100\n\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cookies eaten each day.\n    first_day_cookies = symbols('first_day_cookies')\n\n    # Daily increase in the number of cookies eaten.\n    daily_increase = 6\n\n    # Calculate the total number of cookies eaten over the five days.\n    # Total = first_day_cookies + (first_day_cookies + daily_increase) + ...\n    # + (first_day_cookies + 4 * daily_increase)\n    total_cookies = 5 * first_day_cookies + 10 * daily_increase\n\n    # Define the equation based on the total number of cookies eaten.\n    equation = Eq(total_cookies, 100)\n\n    # Solve the equation for the first day's number of cookies.\n    solution = solve(equation, first_day_cookies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    number_counts = [2, 3, 4, 5, 6, 7, 8]  # Number of times each number appears\n    sequence_length = sum(number_counts)\n    median_pos = (sequence_length + 1) // 2\n    \n    current_pos = 0\n    for i, count in enumerate(number_counts):\n        if current_pos + count >= median_pos:\n            return i + 1\n        current_pos += count\n        \nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    total_marbles = 18 + 6 + 8\n    # To ensure we get 2 red marbles, we must consider the worst-case scenario:\n    # that is we pick all non-red marbles first\n    non_red_marbles = total_marbles - 6  # 6 is the number of red marbles\n\n    # After taking out all non-red marbles, the next two marbles we take out must be red\n    marbles_to_ensure_red = non_red_marbles + 2\n\n    return marbles_to_ensure_red\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Convert the times into datetime objects\n    school_time = datetime.strptime('15:22', '%H:%M')\n    bus_start_time = datetime.strptime('16:01', '%H:%M')\n    bus_end_time = bus_start_time + timedelta(minutes=18)\n    home_time = datetime.strptime('16:35', '%H:%M')\n    \n    # Calculate walking time to the bus stop and home from the drop off\n    walking_to_bus_stop = bus_start_time - school_time\n    walking_home = home_time - bus_end_time\n    \n    # Total walking time in minutes\n    total_walking_time = walking_to_bus_stop + walking_home\n    return total_walking_time.seconds // 60  # Convert timedelta to minutes\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    max_num = int(''.join(map(str, sorted(digits, reverse=True))))\n    min_num = int(''.join(map(str, sorted(digits))))\n    return max_num - min_num\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Ken's money at first as 'k' and the amount given to Lisa as 'x'\n    k, x = symbols('k x')\n\n    # Ken had $15 more than Lisa at first, which means Lisa had (k - 15)\n    # After giving 'x' dollars to Lisa, Ken has k - x\n    # and Lisa has (k - 15) + x\n    \n    # Ken now has $21 less than Lisa\n    # So, Lisa's money is k - x + 21\n\n    # We set up two equations:\n    # k - x = (k - 15) + x - 21\n    # solving it for 'x' gives us the amount Ken gave to Lisa\n    \n    equation = Eq(k - x, (k - 15) + x - 21)\n\n    # Solve the equation for 'x'\n    solution = solve((equation), (x))\n    \n    return solution[x]\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    students_facing_teacher = 30\n    \n    # Turn around for multiples of 2\n    students_facing_teacher -= 30 // 2\n\n    # Turn around for multiples of 3\n    students_facing_teacher -= 30 // 3\n    \n    # Turn back again for multiples of both 2 and 3 (i.e. multiples of 6)\n    students_facing_teacher += 30 // (2*3)\n\n    return students_facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    ans = 3267 - 745\n    return ans\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, solve, sqrt\n\n    x = solve(Eq(sqrt(x) + sqrt(36), sqrt(81)), x)[0]\n\n    return x\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    # Calculate the common difference\n    difference = (fourth_term - first_term) // (4 - 1)\n\n    # Use arithmetic series sum formula: n/2 * (2a + (n - 1)d)\n    total_athletes = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    number = 2  # Starting from the smallest possible value with remainder 2 when divided by 4\n    while True:\n        # Check the remainder conditions for 3 and 7\n        if number % 3 == 2 and number % 7 == 1:\n            return number\n        number += 4  # Increment by 4 to maintain the remainder of 2 when divided by 4\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Initially, the probability of the car being behind any door is 1/3.\n    # After door 3 is revealed to have a goat, there are two scenarios to consider:\n    # 1. The car was behind door 1 initially; switching to door 2 results in a goat.\n    # 2. The car was behind door 2 or door 3 initially; switching to door 2 results in a car.\n    # Given that door 3 has been revealed to have a goat, the probability of the car being\n    # behind door 1 remains 1/3, and the combined probability for doors 2 and 3 is now 2/3.\n    # Since door 3 is not an option, the entire 2/3 probability shifts to door 2.\n    # Therefore, you should switch to door 2 for a higher chance of winning the car.\n    \n    # The optimal strategy is to always switch when given the option.\n    # So, we should choose gate 2.\n    ans = 'gate 2'\n    return ans\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    cds = 75\n    remaining_after_cds = original_money - cds\n    batteries = remaining_after_cds / 4\n    remaining_after_batteries = remaining_after_cds - batteries\n    final_remaining = original_money / 3\n\n    equation = Eq(remaining_after_batteries, final_remaining)\n\n    solution = solve(equation, original_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Given that 7 trainers can catch 7 pokemon in 7 minutes, \n    # we can say that 1 trainer can catch 1 pokemon in 7 minutes.\n    # We need to find out how many trainers are needed to catch 49 pokemons in 49 minutes.\n    \n    # Since catching 1 pokemon takes 1 trainer 7 minutes, catching 49 pokemon takes 1 trainer 49 * 7 minutes.\n    trainer_minutes_for_one_pokemon = 7\n    total_pokemon_to_catch = 49\n    total_time_given = 49\n    \n    # The rate of catching pokemon doesn't change, so the number of trainers needed\n    # would be the same as the number of pokemon since the time is also scaled up.\n    num_trainers_needed = total_pokemon_to_catch\n    \n    return num_trainers_needed\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # Calculate the total number of ways to choose 3 books from 7 for the first student.\n    ways_first_student = factorial(7) // (factorial(3) * factorial(7 - 3))\n    \n    # The remaining 4 books are for the other two students, and they get one each.\n    # Hence, calculate the total number of ways to choose 1 book from 4 for the second student.\n    ways_second_student = factorial(4) // (factorial(1) * factorial(4 - 1))\n    \n    # The last student gets the remaining book, so there is just 1 way.\n    ways_third_student = 1\n    \n    # Multiply all the individual possibilities together to get the total number of ways.\n    ans = ways_first_student * ways_second_student * ways_third_student\n    return ans\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    num_people = 12 + 1  # Tommy and his 12 friends\n    minutes_per_person = 142\n\n    total_minutes = num_people * minutes_per_person\n\n    return total_minutes\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The given number is a repetition of \"928\", creating a pattern\n    pattern = '928'\n    \n    # Since the number is 99 digits long, \"928\" repeats 99 // 3 times\n    repetitions = 99 // len(pattern)\n    \n    # Construct the repeated pattern\n    repeated_pattern = pattern * repetitions\n    \n    # Convert the repeated pattern to an integer\n    number = int(repeated_pattern)\n    \n    # Find the remainder when the number is divided by 9\n    remainder = number % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value\n    oplus = symbols('oplus')\n\n    # Formulate the equation\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n\n    # Solve the equation\n    solution = solve(equation, oplus)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_people = 1500\n\n    percentage_incorrect = (incorrect_people / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')  # a is the smallest, b is the median, c is the largest\n\n    # The sum of three numbers is 56\n    equation1 = Eq(a + b + c, 56)\n\n    # The average of the smallest two numbers is 14\n    equation2 = Eq((a + b) / 2, 14)\n\n    # The average of the largest two numbers is 22\n    equation3 = Eq((b + c) / 2, 22)\n    \n    # Solving for a, b, c\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    return solutions[b]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    for number_of_bars in range(1, 100):\n        eliot_cost = 12 * number_of_bars\n        maya_cost = 17 * number_of_bars\n        eliot_change = 300 - eliot_cost\n        maya_change = 400 - maya_cost\n        \n        if eliot_change == maya_change:\n            return number_of_bars\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [0, 2, 3, 4]\n    \n    # The smallest 4-digit number should start with the smallest non-zero digit which is 2\n    first_digit = 2\n    \n    # The last digit must be an even number, and since we've used 2, the next smallest even is 0\n    last_digit = 0\n    \n    # Now we need to find the smallest combination for the two middle digits, which we sort and combine\n    middle_digits = sorted(digits[1:])  # Exclude the first digit (2) which is already used\n    second_digit = middle_digits[0]  # Smallest of the remaining\n    third_digit = middle_digits[1]  # Next smallest of the remaining\n    \n    # Combine the digits to form the smallest 4-digit even number\n    smallest_number = (first_digit * 1000) + (second_digit * 100) + (third_digit * 10) + last_digit\n    \n    return smallest_number\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')  # define the symbols\n\n    # write the equations based on the problem\n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    return solutions[jackson] + 3\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    eq1 = 66 * 2 + 66 * 3\n    eq2 = 66 * 5\n    return eq1 == eq2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dumpling, bun = symbols('dumpling bun')\n    equation1 = Eq(6 * dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * dumpling + 1 * bun, 41)\n\n    solutions = solve((equation1, equation2), (dumpling, bun))\n\n    return solutions[dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_cost = 8.5\n    base_km = 1.8\n\n    additional_cost = total_cost - base_fare\n    additional_km = additional_cost / additional_fare_per_km\n\n    total_km = base_km + additional_km\n\n    return total_km\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    total_apples = 80\n    min_apples = 3\n    max_students = total_apples // min_apples\n\n    return max_students\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    bars_received = 8\n    original_bars = bars_received * 2\n    return original_bars\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    capacity_big_cars = 4\n    capacity_small_cars = 2\n\n    total_big_cars = boys_in_big_cars // capacity_big_cars\n    total_small_cars = girls_in_small_cars // capacity_small_cars\n\n    total_cars = total_big_cars + total_small_cars\n\n    return total_cars\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    # Current ages\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n\n    # Current total age\n    current_total_age = mother_age + father_age + julia_age\n\n    # Future total age when the sum of all their ages will be 100\n    future_total_age = 100\n\n    # Calculate the difference to reach future total age\n    age_difference_to_reach_100 = future_total_age - current_total_age\n\n    # Since all of them get older by one year each year, the number of years needed\n    # is equal to the age difference to reach a total of 100\n    return age_difference_to_reach_100\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_to_pounds = 56 / 16\n    pounds_to_kg = ounces_to_pounds / 2.2\n    return pounds_to_kg\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    ascending_sum = sum(range(5, 81))\n    descending_sum = sum(range(5, 80))\n    ans = ascending_sum + descending_sum\n    return ans\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    ans = 342 * 24\n    return ans\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for p in permutations(range(1, 10)):\n        abc, bcd, cde, def_, efg, fgh, ghi = (100*p[i] + 10*p[i+1] + p[i+2] for i in range(7))\n        A = abc + bcd + cde + def_ + efg + fgh + ghi\n        max_A = max(max_A, A)\n    return max_A\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price_after_first_discount = 32\n    second_discount = 4\n    \n    # Calculate the price before the first discount\n    price_before_any_discount = original_price_after_first_discount / (1 - 0.20)\n    \n    # Final price after both discounts\n    final_price = original_price_after_first_discount - second_discount\n    \n    # Calculate the total discount in terms of the original price\n    total_discount = price_before_any_discount - final_price\n    \n    # Calculate the total percentage discount given\n    total_percentage_discount = (total_discount / price_before_any_discount) * 100\n    \n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n    arrangements = factorial(total_people - 2)  # Fix positions for A, B, C\n    return arrangements * factorial(3)  # Permute A, B, C with condition\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i * (i + 7)) for i in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_numbers = sorted([''.join(p) for p in permutations(digits, 6) if p[0] != '0'])\n    return int(all_numbers[504])\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n    # Total work rate when both are working\n    total_work_rate = alice_work_rate + bob_work_rate\n    # Days required to complete the job when both work without any off days\n    days_required_without_off = 1 / total_work_rate\n    \n    # Since the job was finished by the end of the 27th day, calculate the work done by Bob alone\n    bob_work_done = 27 * bob_work_rate\n    \n    # Use the remaining work to find out how many days Alice worked\n    remaining_work = 1 - bob_work_done\n    alice_days_worked = remaining_work / alice_work_rate\n    \n    # Find out how many days Alice took off\n    alice_days_off = 27 - alice_days_worked\n\n    return alice_days_off\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples_of_6_and_9 = []\n    for multiple in range(21, 50):\n        if multiple % 6 == 0 and multiple % 9 == 0:\n            multiples_of_6_and_9.append(multiple)\n    return multiples_of_6_and_9\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    # Let the number of red balls be r, white balls be w, and black balls be b\n    # According to the problem, we have the following equations:\n    # r/w = 1/2 => r = w / 2\n    # w/b = 3/4 => b = 4w / 3\n    # r + w + b = 136\n    \n    # We substitute the r and b into the third equation:\n    # w / 2 + w + 4w / 3 = 136\n    # Multiply all terms by 6 to clear denominators:\n    # 3w + 6w + 8w = 136 * 6\n    # 17w = 136 * 6\n    # w = (136 * 6) / 17\n    w = (136 * 6) // 17\n    \n    # Now we find r:\n    # r = w / 2\n    r = w // 2\n    \n    return r\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Observing the pattern:\n    # 10 x 10 = 1 (difference between 10 and 1, squared: (10-1)^2 = 9^2 = 81, which ends with a 1)\n    # 11 x 11 = 4 (difference between 11 and 4, squared: (11-4)^2 = 7^2 = 49, which ends with a 4)\n    # Following the same logic for 55:\n    # Find a number that, when squared, ends with a double digit where both digits are the same.\n    # Since we're looking for a pattern, it is assumed that the relationship between the two numbers in each multiplication is consistent.\n    # (55 - x) * (55 - x) = (11 - x)^2, where the result ends with '55'\n    # Therefore, x equals the tens digit of 55, which is 5.\n    # Hence, 55 x 55 should theoretically equal 25.\n    # But confirming with the observed pattern:\n    difference = 55 - 5\n    ans = difference ** 2\n    return ans\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    a = 105  # 7th term\n    n = 100  # term we want to find\n    d = 120 - 105  # common difference\n    \n    # Using the n-th term formula for an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # We need to find the 1st term first: a_7 = a_1 + (7 - 1) * d\n    a_1 = a - (7 - 1) * d  # a_1 is the 1st term\n\n    # Now we can find the 100th term using the 1st term and the common difference\n    a_100 = a_1 + (100 - 1) * d\n\n    return a_100\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # we can have 3 possibilities for the hundreds place (2, 3 or 0)\n    # however, 0 cannot be used in the hundreds place for a three-digit number\n    # therefore, we only have 2 possibilities for the hundreds place (2 or 3)\n\n    hundreds_place_options = 2  # (2, 3)\n\n    # we can have 3 possibilities for the tens place (0, 2, 3)\n    # since one digit is already used in the hundreds place, we have 2 remaining options\n\n    tens_place_options = 2  # (0, 2, 3) minus the used one\n\n    # similarly, we can have 3 possibilities for the ones place (0, 2, 3)\n    # since two digits are already used in the hundreds and tens places, we have 1 remaining option\n\n    ones_place_options = 1  # the remaining unused option\n\n    # the total number of different three-digit numbers is the product of the possibilities\n    total_numbers = hundreds_place_options * tens_place_options * ones_place_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n    \n    # Let the number of girls be x\n    # Then the number of boys will be total_students - x\n    \n    # total score of the class is the average times the number of students\n    total_class_score = total_students * total_average\n    \n    # Let x be the number of girls\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    \n    # Equation based on the total score\n    equation = Eq(x * girls_average + (total_students - x) * boys_average, total_class_score)\n\n    # Solve the equation\n    girls_count = solve(equation, x)[0]\n\n    return girls_count\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # We have two colors so the worst case is drawing one of each color.\n    # To ensure there is a matching pair, draw one more than the total number of colors.\n    num_colors = 2\n    # Number of draws to guarantee a pair is one more than the number of colors.\n    draws_to_guarantee_pair = num_colors + 1\n    return draws_to_guarantee_pair\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    number_of_dogs = 3\n\n    # Since 4 years ago, each dog would have aged 4 years, so we add 4 years for each dog to get their current age\n    current_combined_age = combined_age_4_years_ago + number_of_dogs * 4\n\n    # In 2 years, we need to add an additional 2 years for each dog\n    combined_age_in_2_years = current_combined_age + number_of_dogs * 2\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    ans = 5297 + 7345\n    return ans\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) // 2\n    return n\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan_initial, audrey_initial = symbols('ryan_initial audrey_initial')\n    ryan_final = ryan_initial + 20\n    audrey_final = audrey_initial - 80\n\n    equation1 = Eq(ryan_initial / audrey_initial, 2/7)\n    equation2 = Eq(ryan_final / audrey_final, 1/3)\n\n    solutions = solve((equation1, equation2), (ryan_initial, audrey_initial))\n\n    return solutions[audrey_initial]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n    \n    # Each hour is 30 degrees (360 degrees / 12 hours)\n    # Each minute is 6 degrees (360 degrees / 60 minutes)\n    \n    # Calculate the position of the hour hand\n    hour_angle = (hour % 12) * 30 + (minute / 60) * 30\n    \n    # Calculate the position of the minute hand\n    minute_angle = minute * 6\n    \n    # Calculate the difference between the two angles\n    angle = abs(hour_angle - minute_angle)\n    \n    # The smaller angle is the one we're interested in\n    if angle > 180:\n        angle = 360 - angle\n    \n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    # Justin ate 4 apples\n    justin_ate = 4\n    \n    # Each of Justin's four sisters ate 5 apples\n    sisters_ate = 4 * 5\n    \n    # There were 20 apples left\n    apples_left = 20\n    \n    # Total apples before they ate is the sum of apples they ate and apples left\n    total_apples = justin_ate + sisters_ate + apples_left\n    \n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # Number of beads in one complete pattern\n    black_beads_in_pattern = 3 + 3  # Number of black beads in one complete pattern\n    \n    # Calculate how many complete patterns there are\n    complete_patterns = total_beads // pattern_length\n    \n    # Calculate the remaining beads after the complete patterns\n    remaining_beads = total_beads % pattern_length\n    \n    # Calculate the number of black beads in the complete patterns\n    black_beads = complete_patterns * black_beads_in_pattern\n    \n    # Add the remaining black beads (if any) to the total black count\n    if remaining_beads > 3:\n        black_beads += 3\n    elif remaining_beads > 0:\n        black_beads += remaining_beads\n    \n    return black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes_needed = 13 + 23 + 8 + 27\n    arrival_time = datetime.strptime('7:45 AM', '%I:%M %p')\n    wake_up_time = arrival_time - timedelta(minutes=total_minutes_needed)\n    return wake_up_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum((-1) ** ((i-1) // 2) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    for chickens in range(52):  # There cannot be more than 51 chickens since there are 51 heads\n        ducks = chickens  # The number of chickens is equal to the number of ducks\n        cows = 51 - chickens - ducks  # The remaining heads must be cows\n        total_legs = chickens * 2 + ducks * 2 + cows * 4\n        if total_legs == 160:\n            return chickens  # Return the number of chickens when the total legs condition is met\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    # Create a list for each type of coin\n    coins = [1, 2, 5]\n    # Define a set to store different totals\n    totals = set()\n\n    # Loop through all combinations of 3 coins\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                # Add the total of each combination to the set\n                totals.add(i + j + k)\n\n    # The length of the set gives the number of different totals\n    return len(totals)\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "def solution():\n    from itertools import permutations\n    \n    # Total amount of ways to pick entrances without restrictions.\n    total_ways = len(list(permutations([1, 2, 3, 4], 3)))\n    \n    # Ways for Joe and Mike to pick the same entrance which is not allowed.\n    same_entrance_ways = 4 * 3\n    \n    # Subtract the not allowed ways from the total ways.\n    allowed_ways = total_ways - same_entrance_ways\n    \n    return allowed_ways\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice * (1/5)\n    abigail_drank = 200\n    anna_drank = 120\n\n    juice_left = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75 / 100\n    quantity = 90\n    ans = percentage * quantity\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    distance = 3000  # nautical miles\n    time_days = 13\n    time_hours = 22\n    total_time_hours = (time_days * 24) + time_hours  # convert days to hours and add the extra hours\n\n    average_speed = distance / total_time_hours  # calculate average speed in nautical miles per hour\n\n    return round(average_speed)  # round to the nearest integer\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # in liters\n    concentration1 = 0.40  # 40% fruit juice\n    \n    volume2 = 3  # in liters\n    concentration2 = 0.70  # 70% fruit juice\n    \n    # Calculate the total volume of the mixture\n    total_volume = volume1 + volume2\n    \n    # Calculate the total amount of fruit juice in the mixture\n    total_fruit_juice = (volume1 * concentration1) + (volume2 * concentration2)\n    \n    # Calculate the concentration of the mixture\n    concentration_mixture = total_fruit_juice / total_volume\n    \n    return concentration_mixture\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) + 1 if 50 % 11 != 0 else 50 // 11\n    last_multiple = 150 // 11\n    count = last_multiple - first_multiple + 1\n    return count\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    men, women = symbols('men women')\n\n    # After the first bus, the number of women is 3/5 times the number of men\n    eq1 = Eq(women - 36, 3/5 * men)\n\n    # After the second bus, the number of men and women is equal\n    eq2 = Eq(men - 48, women - 36)\n\n    # Solve the system of equations\n    result = solve((eq1, eq2), (men, women))\n\n    # Total number of people at the bus stop at first\n    total_people = result[men] + result[women]\n\n    return total_people\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    stamps_given_away_first = 339\n    stamps_bought = 455\n    stamps_given_away_second = 777\n\n    remaining_stamps = initial_stamps - stamps_given_away_first + stamps_bought - stamps_given_away_second\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2\n\n    total_people = people_in_front_of_bella + albert_and_bella + people_behind_albert\n    \n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    return sum(numbers)\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n\n    # Generate a list of prime numbers between 20 and 30\n    primes_list = list(primerange(20, 30))\n    \n    # Return any prime number from the list (in this case, the first one)\n    return primes_list[0]\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq(age + 2, 2 * (age - 5))\n\n    solution_age = solve(equation, age)\n\n    return solution_age[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    solutions = []\n    for x in range(1, 14):\n        for y in range(x+1, 14):  # Ensure y > x\n            for z in range(y+1, 14):  # Ensure z > y\n                if x + y + z == 14:\n                    solutions.append((x, y, z))\n    return solutions\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_spent = 3 * 0.50 # three pens at 50p each, hence converted to pounds\n    total_available = 5.00 # total money available in pounds\n    \n    change = total_available - total_spent\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5), 2.5*x + 3*(2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # Winning strategy for Fred is to leave a multiple of 4 for George\n    # since any move made by George will still leave Fred the choice to\n    # leave George with another multiple of 4 until the number comes down to 4.\n    # When there are 4 oranges left, Fred can take all and win.\n    # Therefore, Fred needs to take away some oranges to make the count (15 - taken_oranges) a multiple of 4.\n\n    total_oranges = 15\n    # Assume Fred can take 1, 2, or 3 oranges in the first move\n    for taken_oranges in range(1, 4):\n        if (total_oranges - taken_oranges) % 4 == 0:\n            return taken_oranges\n\n    # If none of the amounts work, return 0 (should not happen)\n    return 0\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    \n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n\n    total = go + checkers + chess - go_checkers - go_chess - checkers_chess + all_three\n\n    return total\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    oliver_age = 20\n    lin_age = 26\n    target_sum_age = 48\n\n    years_later = (target_sum_age - (oliver_age + lin_age)) / 2\n\n    return years_later\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    # Maximum height is 132cm and minimum height is 124cm.\n    max_height = 132\n    min_height = 124\n\n    # Height range is from 124 to 132 inclusive, so there are 132 - 124 + 1 possible heights.\n    possible_heights = max_height - min_height + 1\n\n    # If at least 4 students are of the same height, we use pigeonhole principle.\n    # To guarantee that at least one pigeonhole (height) contains at least 4 pigeons (students),\n    # we distribute 3 students per height for the first 8 heights and then we add one more student.\n\n    # Calculate the class size by assigning 3 students to each possible height\n    # and then adding one more to ensure at least 4 students have the same height.\n    class_size = 3 * possible_heights + 1\n\n    return class_size\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3\n    \n    total_distance = (num_poles - 1) * distance_between_poles\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    from sympy import symbols, solve, Eq, real_roots\n\n    # Find p such that 245p is a perfect cube\n    p = symbols('p', real=True, positive=True)\n    cube_root = (245 * p) ** (1/3)\n\n    # Since 245p must be a perfect cube, we find the prime factors of 245\n    # 245 = 5 * 7 * 7\n    # For 245p to be a perfect cube, p must contain the missing prime factors to complete the cube\n    # Specifically, p must contain two 5's and one 7 to make the cube of 5's and three 7's\n    # Therefore, p must be 5^2 * 7 = 5 * 5 * 7 = 175\n    p_value = 5**2 * 7\n\n    return p_value\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from itertools import permutations\n    \n    for perm in permutations(range(10), 5):\n        E, S, M, O, A = perm\n        if E == 0 or S == 0 or M == 0 or O == 0 or A == 0:\n            continue\n        ESSE = E * 1000 + S * 100 + S * 10 + E\n        SASMO = S * 10000 + A * 1000 + S * 100 + M * 10 + O\n        if ESSE + 2018 == SASMO:\n            return S + A + S + M + O\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_m = 736 / 100\n    return cm_in_m\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(64, 45, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    current_year_production = 36000\n    last_year_production = (1/4) * current_year_production + 1\n    return int(last_year_production)\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 1 + 1\n    present_students = total_students - absent_students\n\n    attendance_rate = (present_students / total_students) * 100\n\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    # The given equation is 5/15 = 8/□, solve for □\n    ans = (8 * 15) / 5\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    # Initialize the sum\n    total_sum = 0\n\n    # Iterate through the sequences [1/n to (n-1)/n] for n = 2 to 2017\n    for n in range(2, 2018):\n        # Each sequence sum is (1/n + 2/n + ... + (n-1)/n),\n        # which simplifies to (1 + 2 + ... + (n-1)) / n\n        # The sum of first (n-1) natural numbers is (n-1)*n/2\n        sequence_sum = ((n-1)*n/2) / n\n        \n        # Add the current sequence sum to the total sum\n        total_sum += sequence_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 0.30 * 270\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Since Tim stands 4th from the front and 3rd from the back, there are 3+4-1 people in the line.\n    length = 4 + 3 - 1\n    # Because Tim is also 1st from left to right and 4th from right to left, there are 1+4-1 people in the row.\n    width = 1 + 4 - 1\n    # The total number of band members is the product of the number of people in one line and in one row.\n    total_members = length * width\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    original_ratio = Eq(apples / oranges, 3 / 8)\n    new_ratio = Eq((apples - 1) / oranges, 1 / 3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda x: abs(x - 100))\n    return closest\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    daily_savings = 2.40\n    total_savings_required = 150\n    days_needed = total_savings_required / daily_savings\n    weeks_needed = days_needed / 7\n    return int(weeks_needed) if weeks_needed.is_integer() else int(weeks_needed) + 1\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    result = (6 + 1/2) / (1/4)\n    return result\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    # This is an arithmetic sequence where a1 = 2, an = 100, and d = 2\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    # The formula for the sum of an arithmetic sequence is \n    # S_n = n/2 * (a1 + an) where n is the number of terms\n    # Finding the number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Calculating the sum\n    sum_sequence = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    letters = \"STATISTICS\"\n    freq = {letter: letters.count(letter) for letter in set(letters)}\n    ans = factorial(len(letters))\n    \n    for key, value in freq.items():\n        ans //= factorial(value)\n    \n    return ans\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    factor = 3428\n    sum_factors = 836 + 162 + 2\n    ans = factor * sum_factors\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount / note_value\n\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the weight of a rabbit and c represent the weight of a chicken\n    r, c = symbols('r c')\n\n    # We have two equations based on the problem statement:\n    # Equation 1: The weight of 2 rabbits is equal to 6 chickens -> 2r = 6c\n    # Equation 2: The weight of 3 kangaroos is equal to 4 rabbits  -> 3k = 4r\n    # We are asked to find the weight of one kangaroo in terms of chickens -> k = ?c\n\n    # Set up the equations using sympy\n    equation1 = Eq(2 * r, 6 * c)\n    equation2 = Eq(3, 4 * r / c)\n\n    # Solve the first equation for r in terms of c\n    solutions = solve(equation1, r)\n\n    # Substitute r from the first equation in terms of c into the second equation\n    equation2 = equation2.subs(r, solutions[r])\n\n    # Solve for k\n    k_in_terms_of_c = solve(equation2, 1)[0]  # Solving for 1 k, which is k = ?c\n\n    return k_in_terms_of_c\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    y = (9 * 5 + 15 * 5) // 5\n    return y\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # List of the number of days it takes to perform each task\n    tasks = [3, 1, 5, 1, 1, 1, 1]\n    \n    # Since some tasks can be done simultaneously, we figure out the minimum days needed\n    # Tasks: wood cutting(3), rope weaving(1), wood drying(5), grass mowing(1), food(1), grass soaking(1), wood selecting(1)\n    # Grass mowing and soaking can be done during wood cutting, rope can be weaved after grass is mowed on the fourth day\n    # Food can be done at any time, assuming the last day to not delay anything else.\n    # The longest task is drying the wood, so other tasks could be done in parallel while the wood is drying\n\n    # Thus, the total time needed would be the time to cut the wood and the wood drying time, plus one extra day to choose wood\n    # Since he can mow grass, soak cut grass and weave rope into the days wood is either being cut or dried\n    max_task_time = max(tasks)\n    \n    # Adding one day for selecting wood, because this is an additional task that he will undertake after wood cutting.\n    total_days = max_task_time + 1\n    \n    # Resulting in:\n    return total_days\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is the 7th from the front and in the exact middle\n    # This means there are 6 people in front of her and 6 behind her\n    total_dwarves = 6 + 6 # The number of dwarves in front and behind Snow White\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    # If the school with the most participants had at least 4 participants,\n    # then to maximize the number of schools, other schools should have 3 participants at most.\n    # We use the Pigeonhole Principle to distribute the participants into schools.\n    \n    total_participants = 100\n    max_participants_per_school = 3\n    \n    # Calculate the number of schools using the Pigeonhole Principle\n    # total_participants should be divided by max_participants_per_school \n    # and rounded up to the nearest integer\n    number_of_schools = -(-total_participants // max_participants_per_school)\n    \n    return number_of_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        fraction_part = (2018 + i) / 5 - (2018 + i) // 5\n        total += fraction_part\n    return total\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for number in range(1000, 10000):\n        if round((number / 6) ** 0.5) ** 2 == number / 6 and round((number * 6) ** (1/3)) ** 3 == number * 6:\n            return number\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Relative speed is the sum of both trains' speeds\n    relative_speed = 48 + 36  # in km/h\n\n    # When the trains meet, the distance covered by the faster train is 70 km more than the slower one\n    # Let the time taken for the trains to meet be t hours\n    # Then, distance covered by the faster train is 48t and by the slower train is 36t\n    # According to the problem, 48t = 36t + 70\n    # This gives us t = 70 / (48 - 36)\n\n    t = 70 / (48 - 36)\n\n    # Now, we can calculate the distance between the two stations\n    # This is the sum of distances covered by both trains when they meet\n    distance_between_stations = (48 * t) + (36 * t)\n\n    return distance_between_stations\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    frac1 = 3 * 9 + 5  # 3(5/9)\n    frac2 = 6 * 9 + 4  # 6(4/9)\n    \n    # Sum the improper fractions\n    result = Fraction(frac1, 9) + Fraction(frac2, 9)\n    \n    # Simplify the fraction (if necessary) and return result\n    return result\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    # Total amount Zoey had before losing the coin\n    total_amount = 50 + 20 + 10 + 5\n    \n    # Brother's amount must be half of the remaining after Zoey loses one coin\n    for lost_coin in [50, 20, 10, 5]:\n        if (total_amount - lost_coin) == 2 * (total_amount - lost_coin) / 2:\n            return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (1 + 1/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):\n        if (boats + 1) * 6 == (boats - 1) * 9:\n            return (boats + 1) * 6\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim is 4th from the front and 3rd from the back, so there are 4 + 3 - 1 people in the vertical line\n    vertical_members = 4 + 3 - 1\n    \n    # Tim is 4th from the left and 7th from the right, so there are 4 + 7 - 1 people in the horizontal line\n    horizontal_members = 4 + 7 - 1\n    \n    # The total number of members is the product of the number of members in each line\n    total_members = vertical_members * horizontal_members\n\n    return total_members\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    original_sum = sum(range(1, 15))\n    new_sum = original_sum + 2019\n\n    for start in range(1, new_sum//8):\n        if sum(range(start, start + 8)) == new_sum:\n            return start\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_chocolates, friends = symbols('total_chocolates friends')\n\n    equation1 = Eq(total_chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - total_chocolates, 34)\n\n    solutions = solve((equation1, equation2), (total_chocolates, friends))\n\n    remaining_chocolates = solutions[total_chocolates] - 20 * solutions[friends]\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng - (chai_seng * 6 / 7), (rasidah - (rasidah * 3 / 5)) / 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = [0, 2, 4]\n    count = 0\n    \n    for first_digit in digits[1:]:  # The first digit cannot be 0\n        for second_digit in digits:\n            if first_digit != second_digit:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007) ** 2\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_num = 0\n    digits = [2, 4, 6, 8]\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 4 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the quantity of Lily's and Gigi's wheat.\n    lily, gigi = symbols('lily gigi')\n    \n    # Given the conditions, we can write two equations.\n    # When Lily gives 36 tonnes of wheat to Gigi, she still has 26 tonnes more.\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    \n    # Lily's wheat is 8 times Gigi's.\n    equation2 = Eq(lily, 8 * gigi)\n    \n    # Solve the system of equations for the quantity of wheat for Lily and Gigi.\n    solutions = solve((equation1, equation2), (lily, gigi))\n    \n    # We want to know how many tonnes of wheat Lily has.\n    return solutions[lily]\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance based on Amy's uphill journey\n    uphill_distance = 5 * 3  # speed * time\n\n    # Calculate the distance based on Amy's downhill journey\n    downhill_distance = 10 * 2  # speed * time\n\n    # Total distance is the sum of uphill and downhill distances\n    total_distance = uphill_distance + downhill_distance\n\n    # Total time is the sum of uphill and downhill times\n    total_time = 3 + 2\n\n    # Average speed is the total distance divided by the total time\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for th in range(1, 10):  # thousands digit\n        for h in range(th+1, 10):  # hundreds digit\n            for t in range(h+1, 10):  # tens digit\n                if t == th + h:  # tens digit is the sum of the thousands and hundreds digit\n                    o = 16 - (th + h + t)  # ones digit is the remainder to add up to 16\n                    if o >= t and o < 10:  # ones digit must be greater than tens and less than 10\n                        return o\n    return -1  # If no solution is found, which should not happen\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # cost for the first 5 kWh\n    initial_cost = 2 * 5\n\n    # fixed service fee\n    service_fee = 3\n\n    # total cost up to the first 5 kWh including service fee\n    total_initial_cost = initial_cost + service_fee\n\n    # remaining amount after initial cost and service fee\n    remaining_amount = 63 - total_initial_cost\n\n    # cost per additional kWh after the first 5 kWh\n    additional_rate = 1\n\n    # Calculate the additional kWh she can use\n    additional_kwh = remaining_amount / additional_rate\n\n    # Calculate total kWh including the first 5 kWh\n    total_kwh = 5 + additional_kwh\n\n    return total_kwh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    fraction_value = 54\n    whole_value = 63\n    denominator = 7\n\n    numerator = (fraction_value * denominator) / whole_value\n\n    return int(numerator)\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.9\n    years = 5\n\n    final_value = initial_value * (depreciation_rate ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 400 + 10 * x + y\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n\n    total_cookies = big_boxes * cookies_per_big_box\n    small_boxes_needed = (total_cookies + cookies_per_small_box - 1) // cookies_per_small_box\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-8 - (-19))\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_students = 43\n    math_passed = 30\n    science_passed = 28\n    english_passed = 25\n    \n    # Maximum number of students that could have passed all tests\n    max_all_passed = min(math_passed, science_passed, english_passed, total_students - (math_passed + science_passed + english_passed - total_students))\n    \n    return max_all_passed\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    punch1_weight = 20\n    punch1_concentration = 35 / 100 \n\n    punch2_weight = 30\n    punch2_concentration = 60 / 100 \n\n    total_weight = punch1_weight + punch2_weight\n    total_fruit_juice = (punch1_weight * punch1_concentration) + (punch2_weight * punch2_concentration)\n\n    new_concentration = (total_fruit_juice / total_weight) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the original amount of grain in warehouse B\n    original_b = symbols('original_b')\n\n    # Warehouse A after shipment: original 50 + received 12\n    # Warehouse B after shipment: original B - shipped out 16\n    # Warehouse A is 2 times Warehouse B\n    equation = Eq((50 + 12), 2 * (original_b - 16))\n\n    # Solve the equation to find the original amount of grain in warehouse B\n    solution = solve(equation, original_b)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    prime = 37  # The missing prime number between 31 and 41\n    return prime\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    box_capacity = 6\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    from sympy import primefactors\n\n    # Prime factorization of 4320\n    factors_of_4320 = primefactors(4320)\n\n    # Prime factors of (3/2)^n that keep the product an integer are only 2 and 3.\n    # 4320 can be divided by 2 at most log2(4320) times before it is no longer an integer.\n    # Similarly, it can be divided by 3 at most log3(4320) times.\n    # The maximum power of 3/2 that keeps the number an integer is determined by how many times 4320 can be divided by 2,\n    # as every 3 from (3/2)^n will cancel out a 3 from 4320.\n    power_of_2 = 0\n    current_number = 4320\n    while current_number % 2 == 0:\n        power_of_2 += 1\n        current_number //= 2\n\n    # The number of integer values of n is equal to the number of times 4320 can be divided by 2\n    return power_of_2\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_counts = {char: word.count(char) for char in set(word)}\n\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    result = 0.5 * 0.2 * 6000\n    return result\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen traded 3 fishes for 1 rabbit\n    # Oscar traded 2 rabbits for 3 packs of wheat\n    \n    # To find out how many fishes equal one pack of wheat,\n    # we need to determine the overall ratio of fishes to packs of wheat\n    \n    # Find how many fishes one rabbit equals: 3 fishes = 1 rabbit\n    # Then find out how many fishes three packs of wheat equal: 2 rabbits = 3 packs of wheat\n    # Therefore, 1 pack of wheat equals (3 fishes) * (2 rabbits / 3 packs of wheat)\n    \n    # Since the rabbits cancel out, we get the ratio of fishes to packs of wheat\n    fishes_per_pack_wheat = (3 * 2) / 3  # calculate fishes per pack of wheat\n    \n    return int(fishes_per_pack_wheat)\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 1000):  # Setting an arbitrary upper limit for the search\n        benches_3 = people // 3 + (1 if people % 3 else 0)\n        benches_7 = people // 7\n        if people + 7 == benches_3 * 3 and people - 3 == benches_7 * 7:\n            return people\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    hourly_rate = 10\n\n    hours_hired = (total_cost - booking_fee) / hourly_rate\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = [(1, 4), (2, 5), (4, 7)]\n\n    # Use the Chinese Remainder Theorem to find the solution\n    lcm_remainder, _ = solve_congruence(*congruences)\n\n    # Find the number of pencils within the given range 400 to 500\n    num_pencils = lcm_remainder\n    while num_pencils < 400:\n        num_pencils += 4 * 5 * 7  # Increase by the least common multiple of 4, 5, and 7\n\n    return num_pencils\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):  # x1 can be from 0 to 9\n        for x2 in range(10):  # x2 can be from 0 to 9\n            x3 = 9 - x1 - x2\n            if x3 >= 0:  # x3 must be a non-negative integer\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell_stickers = 32\n    ginnie_stickers = dell_stickers // 2\n    lyn_stickers = ginnie_stickers // 4\n    total_stickers = ginnie_stickers + lyn_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount / ratio_sum) * 3\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    empty_bottle, juice_mass = symbols('empty_bottle juice_mass')\n    \n    equation1 = Eq(empty_bottle + 5/6 * juice_mass, 4.6)\n    equation2 = Eq(empty_bottle + 2/3 * juice_mass, 4.45)\n    \n    solutions = solve((equation1, equation2), (empty_bottle, juice_mass))\n    \n    return solutions[empty_bottle] * 1000  # Convert to grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    favourite_number = symbols('favourite_number')\n    \n    equation = Eq(2 * favourite_number - 3, 19)\n    solution = solve(equation, favourite_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):      # Hundreds place must be an odd digit\n        for j in range(10):         # Tens place can be any digit\n            for k in range(10):     # Ones place can be any digit\n                if i + j + k == 5:  # Sum of digits must be 5\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2  # Since they end up with the same number of pupils\n    \n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1) ** (i % 2) * (20 - i) for i in range(20))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    # This is not a geometric sequence, thus we use the observed pattern of the sequence.\n    # We notice that the sequence grows as n^2 - n + 1.\n    # We need to find the largest n for which n^2 - n + 1 is a two-digit number.\n\n    # We'll start with n = 1 and increment until the generated number exceeds two digits.\n    n = 1\n    while True:\n        number = n ** 2 - n + 1\n        if number > 99:\n            break\n        n += 1\n    \n    # The last number before breaking out of the loop was still a two-digit number.\n    # We decrement n by 1 to get the largest two-digit number in the sequence.\n    largest_two_digit_number = (n - 1) ** 2 - (n - 1) + 1\n\n    return largest_two_digit_number\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let a, b, and c represent the weights of Adam, Ben, and Carl, respectively\n    a_and_b = 102\n    b_and_c = 97\n    a_and_c = 93\n    \n    # The total weight of all three people is the sum of each pair minus one of the weights (since it is counted twice)\n    total_weight = (a_and_b + b_and_c + a_and_c) // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_cost = 23\n    book_cost = 3.40\n    magazine_cost = 1.60\n\n    max_books = int(total_cost / book_cost)\n\n    for books in range(max_books + 1):\n        magazines = (total_cost - books * book_cost) / magazine_cost\n        if magazines.is_integer():\n            return int(magazines)\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 0   # Total number of digits used so far\n    pages = 0          # Total number of pages counted so far\n\n    digit_length = 1  # Current length of page numbers (1 digit, 2 digits, etc)\n\n    while total_digits < 1101:\n        digit_range = 9 * 10 ** (digit_length - 1)  # Number of pages with the current digit length\n        digits_needed = digit_range * digit_length   # Number of digits needed for current range\n\n        # Check if adding all these digits exceeds the total\n        if total_digits + digits_needed > 1101:\n            break   # Done if we reach beyond total digits allowed\n\n        # Add the page range to the total page count\n        pages += digit_range\n        # Add used digits to total digits\n        total_digits += digits_needed\n\n        # Go to next digit length\n        digit_length += 1\n\n    # Calculate remaining digits and pages\n    remaining_digits = 1101 - total_digits\n    remaining_pages = remaining_digits // digit_length\n\n    # Final total pages is pages calculated + the remaining pages calculated\n    return pages + remaining_pages\n\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    sister_notebooks = andy_notebooks - andy_gives - (andy_notebooks - 2 * andy_gives)\n    return sister_notebooks\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    ashley = symbols('ashley')\n    crystal = 2 * ashley\n    justin = 10 * ashley\n\n    equation = Eq(justin, crystal + 64)\n    ashley_pages = solve(equation, ashley)[0]\n    crystal_pages = 2 * ashley_pages\n    justin_pages = 10 * ashley_pages\n\n    total_pages = ashley_pages + crystal_pages + justin_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # We assume Mr. Lv's age is below 100 for simplicity\n        base10_age_with_0 = int(str(age) + \"0\")\n        base3_age = int(str(age), 3)\n        if base10_age_with_0 == base3_age:\n            return age\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factor_product = 7007\n    for i in range(10, 100):\n        if factor_product % i == 0:\n            j = factor_product // i\n            if j >= 10 and j < 100 and i % 7 == 0 and j % 7 == 0:\n                return i + j\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    \n    # There are 7 people to sit around an eight-seater circular table.\n    # One seat is always empty, so we can fix the empty seat and arrange\n    # the 7 people around the 7 remaining seats.\n    # This is a circular permutation problem without repetitions.\n\n    num_people = 7\n    num_seats = 8\n\n    # The number of ways to arrange n people in a circle is (n - 1)!.\n    # So here it would be (num_people - 1)!.\n    ans = factorial(num_people - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):  # Start from 1 since each pile must have at least one pin\n        for x2 in range(1, 10 - x1):  # The second pile must leave at least one for the third\n            x3 = 10 - x1 - x2  # The third pile gets the remaining pins\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n    \n    for prime1 in range(2, 55):\n        prime2 = 55 - prime1\n        if isprime(prime1) and isprime(prime2) and prime1 < prime2:\n            return prime1 * prime2\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = (379 * 0.00038) + (159 * 0.00621) + (3.79 * 0.121)\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Given that 1 cookie costs $9.\n    cost_cookie = 9\n    \n    # Since 3 pieces of cheesecake equal 5 cookies,\n    # 1 piece of cheesecake is equal to 5/3 cookies.\n    cost_cheesecake_per_piece = (5 / 3) * cost_cookie\n    \n    # Now since 3 pieces of chocolate cake is equal to 2 pieces of cheesecake,\n    # 1 piece of chocolate cake is equal to 2/3 piece of cheesecake.\n    cost_chocolate_cake_per_piece = (2 / 3) * cost_cheesecake_per_piece\n    \n    return cost_chocolate_cake_per_piece\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Equation based on the ratio of orchids to tulips\n    equation1 = Eq(orchids / tulips, 3 / 5)\n\n    # Equation based on the initial total number of flowers\n    equation2 = Eq(orchids + tulips + roses, 3616)\n\n    # Equation based on the remaining flowers\n    equation3 = Eq(orchids * 0.6 + tulips * 4 / 5 + roses * 0.75, 2644)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    basketball, volleyball = symbols('basketball volleyball')\n    \n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                number = int(f\"20{A}{M}C19\")\n                if len(set(str(number))) == 7 and number % 9 == 0:\n                    return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n    # Total candy is 36\n    equation1 = Eq(mike + valeria, 36)\n    # After eating the same amount, Mike will have 6 and Valeria 22.\n    # This implies Valeria has 22 + x and Mike has 6 + x before eating\n    equation2 = Eq(mike - valeria, 6 - 22)\n\n    solutions = solve((equation1, equation2), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    portion_per_day = 1/4 / 3\n    total_days = 1 / portion_per_day\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n    equation1 = Eq(mother_now, melissa_now * 3)\n    equation2 = Eq(mother_now - melissa_now, 32 - 8)\n\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 // (2 * 7)\n    return n\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    recurring_part = '857142'  # Digits that repeat indefinitely\n    num_repeats = 58 // len(recurring_part)  # Number of complete sets of the repeating part\n    partial_repeat = recurring_part[:58 % len(recurring_part)]  # Part of the repeating sequence not complete\n\n    sum_complete_repeats = sum(int(digit) for digit in recurring_part) * num_repeats\n    sum_partial_repeat = sum(int(digit) for digit in partial_repeat)\n\n    ans = sum_complete_repeats + sum_partial_repeat\n\n    return ans\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n\n    repeating_decimal = 4 + Fraction(73, 99)\n    non_repeating_decimal1 = Fraction(473, 100)\n    non_repeating_decimal2 = Fraction(477, 100)\n    non_repeating_decimal3 = Fraction(4737, 1000)\n\n    smallest_decimal_value = min(repeating_decimal, non_repeating_decimal1, non_repeating_decimal2, non_repeating_decimal3)\n    return smallest_decimal_value\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n\n    # Joel's turn: adding 2 then doubling to undo \"2 less than half\"\n    joel_added = (remaining_plants + 2) * 2\n\n    # Valerie's turn: adding 3 then doubling to undo \"3 less than half\"\n    valerie_added = (joel_added + 3) * 2\n\n    # Ethan's turn: adding 1 then doubling to undo \"1 less than half\"\n    initial_plants = (valerie_added + 1) * 2\n\n    return initial_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n\n    distance_to_travel = train_length + tunnel_length\n    time_taken = distance_to_travel / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eggs_initial = symbols('eggs_initial')\n\n    first_sale = eggs_initial / 2 + 16\n    second_sale = (eggs_initial - first_sale) / 2 - 7\n\n    equation = Eq(eggs_initial - (first_sale + second_sale), 18)\n\n    solution = solve(equation, eggs_initial)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n\n    return original_price\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Let x be the side of the cube\n    x = symbols('x')\n\n    # Based on the given distances, we can write the equations as follows:\n    # For PB, PC, PD, and PG we have:\n    equation1 = Eq(sqrt(2*x**2), 60*sqrt(10))\n    equation2 = Eq(sqrt(x**2 + (x*sqrt(2))**2), 60*sqrt(5))\n    equation3 = Eq(sqrt((x*sqrt(3))**2), 120*sqrt(2))\n    equation4 = Eq(sqrt(3*x**2), 36*sqrt(7))\n\n    # Solve the system of equations for x\n    solutions = solve((equation1, equation3, equation4), x)\n\n    # Only positive solutions are meaningful for the side of a cube\n    x_value = [sol.evalf() for sol in solutions if sol > 0][0]\n\n    # PA is the diagonal of the cube, which we can find using Pythagoras\n    PA = sqrt(3) * x_value\n\n    return PA.evalf()\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of P1 and P6 students\n    P1, P6 = symbols('P1 P6')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(P1 + P6, 120)  # The total number of P1 and P6 students\n    equation2 = Eq(2*P6 + 0.5*P1, 180)  # The total number of buckets of water\n    \n    # Solve the system of equations for the number of P1 and P6 students\n    solutions = solve((equation1, equation2), (P1, P6))\n    \n    # Return the number of P1 students\n    return solutions[P1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    # Since a coin has 2 sides and we are tossing it twice,\n    # there are 2 outcomes for the first toss,\n    # and 2 outcomes for the second toss.\n    # The total number of outcomes is the product of these possibilities.\n    outcomes_first_toss = 2\n    outcomes_second_toss = 2\n\n    total_possible_outcomes = outcomes_first_toss * outcomes_second_toss\n\n    return total_possible_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    # Number of football teams\n    n_teams = 5\n\n    # Number of matches that need to be played (Combination of 5 teams taken 2 at a time)\n    # This is because each match is between 2 teams\n    matches = n_teams * (n_teams - 1) // 2\n\n    return matches\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    # Division of fractions is equivalent to multiplication by the reciprocal of the divisor.\n    ans = 7 * (3/1)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    pencils = 55\n    pens = 143\n    \n    ans = gcd(pencils, pens)\n\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen gives 3 fish for 1 rabbit to Oscar.\n    fish_per_rabbit = 3\n    \n    # Oscar gives 2 rabbits for 3 packs of wheat to Dennis.\n    rabbits_per_pack_of_wheat = 2 / 3\n    \n    # Calculate the number of fish per pack of wheat.\n    fish_per_pack_of_wheat = fish_per_rabbit / rabbits_per_pack_of_wheat\n    \n    return fish_per_pack_of_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    remainder = 2\n    quotient = 9\n    divisor = 4\n\n    johnny_answer = (quotient * remainder) + divisor  # This is Johnny's error\n    correct_product = quotient * divisor\n    correct_answer = correct_product + remainder\n    \n    is_johnny_correct = (johnny_answer == correct_answer)\n    \n    return correct_answer if not is_johnny_correct else johnny_answer\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                count += 1\n                ways.append((die1, die2))\n    ans = (count, ways)\n    return ans\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    \n    return mike_future_age\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one basketball and one volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Equation 1: 2 basketballs + 3 volleyballs = 195\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    # Equation 2: 4 basketballs + 5 volleyballs = 355\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    # We want the cost of each volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of students at first be 'x'\n    x = symbols('x')\n    # At first, 40% of the students were boys => 0.4*x = number of boys initially\n    # Then 16 boys left => 0.4*x - 16 = number of boys after leaving\n    # And 16 girls entered => x + 16 = total number of students after girls entered\n    # After these changes, boys made up 2/15 of the students in the canteen\n    # So (0.4*x - 16) / (x + 16) = 2/15\n\n    equation = Eq((0.4*x - 16) / (x + 16), 2/15)\n\n    # Solve the equation to find the value of 'x'\n    total_students_initially = solve(equation, x)\n\n    # Since 'total_students_initially' will be a list of solutions,\n    # we need to take the first (and in this case, only) solution\n    total_students_initially = total_students_initially[0]\n\n    # Number of girls now is total number of students after girls entered \n    # minus number of boys after 16 boys left\n    girls_now = (total_students_initially + 16) - (0.4*total_students_initially - 16)\n\n    return int(girls_now)\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\n\ndef solution():\n    digits = '279'\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    unique_primes = set()\n\n    for i in range(1, 4):  # Length of numbers to form\n        for p in permutations(digits, i):\n            num = int(''.join(p))\n            if num in primes:\n                unique_primes.add(num)\n\n    return len(unique_primes)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the prices of the necklace, bracelet, and ring\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n    \n    # Return the price of the bracelet\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Iterate over each four-digit number N\n    for N in range(1000, 10000):\n        str_n = str(N)\n        # Iterate over each digit to remove and create the three-digit number M\n        for i in range(4):\n            M = int(str_n[:i] + str_n[i+1:])\n            # Check if the difference is 2021\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote b as the cost of 1 banana and p as the cost of 1 pear.\n    b, p = symbols('b p')\n\n    # Max buys 1 banana and 2 pears for 94p.\n    eq1 = Eq(b + 2*p, 94)\n\n    # Emily buys 1 banana and 1 pear for 62p.\n    eq2 = Eq(b + p, 62)\n\n    # Solve the system of equations to find the cost of 1 banana and 1 pear.\n    result = solve((eq1, eq2), (b, p))\n    \n    # Return the cost of 1 banana.\n    return result[b]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n    both = swimming + jogging - (total_students - neither)\n\n    return int(both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    A_rate = 1 / 15\n    # B's work rate per day\n    B_rate = 1 / 10\n    # They work together for 4 days\n    work_done = 4 * (A_rate + B_rate)\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    # B completes the remaining work\n    days_for_B_to_finish = remaining_work / B_rate\n    \n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65)\n    part2 = (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed fractions to improper fractions\n    mixed_to_improper = lambda whole, numerator, denominator: (whole * denominator + numerator) / denominator\n\n    # Numerator calculation\n    numerator = (mixed_to_improper(3, 1, 3) * 1.9 + 19.5 / mixed_to_improper(4, 1, 2))\n\n    # Denominator first part calculation\n    denominator_part1 = (Fraction(62, 75) - 0.16)\n\n    # Denominator second part calculation (Nested calculations)\n    denominator_part2_numerator = (3.5 + mixed_to_improper(4, 2, 3) + mixed_to_improper(2, 2, 15))\n    denominator_part2_denominator = (0.5 * (mixed_to_improper(1, 1, 20) + 4.1))\n\n    # Combine the calculated parts to form the denominator\n    denominator = denominator_part1 / (denominator_part2_numerator / denominator_part2_denominator)\n\n    # Finally, divide the numerator by the denominator to get the result\n    result = numerator / denominator\n\n    return float(result)\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n    # Include trees at both ends of the road\n    num_trees = (road_length // tree_distance) + 1\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Time Linda takes to solve one problem in minutes\n    linda_time = 5\n    # Time Cici takes to solve one problem in minutes\n    cici_time = 6\n    \n    # Total time working together in minutes (2 hours)\n    total_time = 2 * 60\n    \n    # Calculate rates per minute\n    linda_rate = 1 / linda_time\n    cici_rate = 1 / cici_time\n    \n    # Combined rate per minute\n    combined_rate = linda_rate + cici_rate\n    \n    # Total number of problems solved together in 2 hours\n    total_problems = combined_rate * total_time\n    \n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    # Let x be the number of apples Amy has to give to John\n    # After giving x apples, Amy will have 37 - x apples and John will have 15 + x apples\n    # The condition is that Amy will have 4 more apples than John after the exchange\n    # Hence, we get the equation: (37 - x) = (15 + x) + 4\n    # Now we solve for x\n\n    x = (37 - 4 - 15) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    # Find the odd number that is less than 17 and more than 13\n    for number in range(14, 17):\n        if number % 2 != 0:  # Check if the number is odd\n            return number\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    lateness = 18\n    bus_interval = 45\n    wait_time = bus_interval - (lateness % bus_interval)\n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Let's find the total amount of grass available on the pasture (denoted as G)\n    # If 14 goats can feed for 15 days, then G = 14 goats * 15 days\n    # However, we know that 1 goat eats as much grass as 4 rabbits per day\n    # Therefore, G can also be calculated as G = 70 rabbits * 8 days\n    # Setting these two expressions equal, we get 14 goats * 15 days = 70 rabbits * 8 days\n    # Simplifying this, we get 1 goat * 15 days = 4 rabbits * 8 days\n    # Further simplifying, we get total grass G = 14 * 15 = 210 goat-days\n    \n    # If 17 goats and 20 rabbits were to graze the field, their combined grass consumption per day would be:\n    # 17 goat-days + (20 rabbits * 1 goat / 4 rabbits) goat-days = 17 goat-days + 5 goat-days = 22 goat-days\n    \n    # To find how many days the pasture can feed the 17 goats and 20 rabbits, we divide the total grass G by the combined consumption per day:\n    # Days = G / (22 goat-days/day)\n    grass_total = 14 * 15\n    daily_consumption = 17 + (20 / 4)\n    days = grass_total / daily_consumption\n    \n    return days\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    mean_value = 37\n    total_numbers = 10\n    sum_of_numbers = mean_value * total_numbers\n    missing_number = sum_of_numbers - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    eq1 = Eq(x, y + 83)\n    eq2 = Eq(z, x + 24)\n    eq3 = Eq(x + y + z, 283)\n\n    solutions = solve((eq1, eq2, eq3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost = 38.79\n    number_of_books = 9\n\n    cost_per_book = total_cost / number_of_books\n    cost_for_seven_books = cost_per_book * 7\n\n    return cost_for_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    answer = tens + tenths + hundredths\n    return answer\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Mr. Chan's and Mr. Toh's money\n    chan, toh = symbols('chan toh')\n\n    # Given equations based on the problem statement\n    equation1 = Eq((1/4) * chan, (1/3) * toh + 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    # Mr. Toh's money\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 * sandra / 5)\n    equation3 = Eq(tasha, riley + 60)\n\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        height_climbed -= day\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    acc = 0\n    for i in range(4):\n        acc += int(str(4) * (i + 1))\n    return acc\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    num_months = 3\n\n    total_savings = january_savings + february_savings + march_savings\n    mean_savings = total_savings / num_months\n\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9 ** 2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "from itertools import permutations\n\ndef solution():\n    angel_pattern = list(permutations(\"0141705021\"))\n    \n    devil = \"4005220912\"\n    devil_permutations = list(permutations(devil))\n    \n    if tuple(devil) in angel_pattern:\n        return True\n    \n    angel_ordered = sorted(\"0141705021\")\n    correct_password = ''.join(angel_ordered)\n    \n    return False, correct_password\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    for i in range(1, 6):  # Iterate from 1 to 5 for the first number\n        for j in range(1, 6 - i):  # Iterate for the second number, ensuring the sum is <= 6\n            if i + j < 6:  # Check if there's room for a third number\n                count += 6 - (i + j) - 1  # Add the number of ways to choose the third number\n            else:\n                count += 1  # No room for a third number, so count this as 1 way\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def repeating_decimal_to_fraction(digit, repeating):\n    non_repeating_length = len(str(digit)) - 2  # minus 2 for \"0.\"\n    repeating_length = len(str(repeating))\n    repeated_value = int(str(digit) + str(repeating))\n    fraction = (repeated_value - digit) / (10**non_repeating_length * (10**repeating_length - 1))\n    return fraction\n\ndef solution():\n    terms = [\n        (0.0, 1),\n        (0.1, 2),\n        (0.2, 3),\n        (0.3, 4),\n        (0.4, 5),\n        (0.5, 4),\n        (0.7, 8)\n    ]\n    \n    total_sum = sum(repeating_decimal_to_fraction(digit, repeating) for digit, repeating in terms)\n    return total_sum\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    a = symbols('a')\n    x = sqrt(a) - 2/sqrt(a)\n\n    expression = sqrt(x**2 + 8*x)\n\n    simplified_expression = simplify(expression)\n\n    return simplified_expression\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    ways = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    sheep = 23\n    pens = 11\n\n    min_sheep_in_max_pen = (sheep + pens - 1) // pens\n\n    return min_sheep_in_max_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The congruence system as per the problem statement\n    congruences = [(2, 3), (2, 4), (2, 5), (5, 7)]\n\n    # Solve the system of congruences to find the smallest non-negative solution\n    least_solution, _ = solve_congruence(*congruences)\n\n    # Since we need a number between 300 and 400, we need to find the smallest\n    # multiple of the least common multiple (LCM) of the moduli that, added to the least_solution,\n    # gives us a number in the desired range.\n    lcm = 3 * 4 * 5 * 7  # Manual calculation of the LCM\n    k = (300 - least_solution) // lcm  # Find the multiple k\n    ans = least_solution + k * lcm  # Calculate the answer in the range\n    \n    # Check if the solution falls in the desired range, otherwise increment k by 1\n    if not (300 <= ans <= 400):\n        k += 1\n        ans = least_solution + k * lcm\n    \n    return ans\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    boys = 18\n    girls = 27\n    total_members = boys + girls\n    mean_age_boys = 16.2\n    mean_age_girls = 16.7\n\n    total_age_boys = boys * mean_age_boys\n    total_age_girls = girls * mean_age_girls\n\n    total_age = total_age_boys + total_age_girls\n    mean_age_all = total_age / total_members\n\n    return mean_age_all\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Defining the congruences based on the problem statement\n    congruences = [(1, 6), (8, 13)]\n    num = solve_congruence(*congruences)\n\n    # Find the smallest number that satisfies the congruences between 200 and 300\n    while num[0] < 200:\n        num = (num[0] + num[1], num[1])\n\n    if num[0] < 300:\n        ans = num[0]\n    else:\n        ans = None  # No solution found within the given range\n\n    return ans\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    from math import lcm\n    return lcm(6, 12, 16)\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Worst case scenario for getting 4 balls of each color without getting 5 of the same color\n    # 4 green + 4 yellow + 4 red = 12 balls\n    # To ensure 5 balls of the same color, we take one more after the 12\n    balls_needed = 4 + 4 + 4 + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the mass of table and chair\n    table, chair = symbols('table chair')\n\n    # Equations based on the problem statement\n    equation1 = Eq(3 * table, 4 * chair)  # Total mass of 3 tables equals 4 chairs\n    equation2 = Eq(table, chair + 2)      # A table is 2kg heavier than a chair\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 25  # The last number shown, which is the 10th term\n    common_difference = 3  # Difference between consecutive terms\n    n = 10  # The term number of the last number shown\n    \n    # Calculate the first term\n    first_term = nth_term - (n - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30\n    sam_speed = 1  # m/s\n    ben_speed = 0.6  # m/s\n    total_time = 10 * 60  # convert minutes to seconds\n\n    combined_speed = sam_speed + ben_speed  # As they are moving towards each other\n    total_meetings = total_time * combined_speed / pool_length  # Time * combined speed gives total distance covered together; divide by pool length to find meetings\n\n    return int(total_meetings)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n\n    ans = a * b + c * d\n    return ans\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "from itertools import permutations\n\ndef solution():\n    # 'Angel' represented by '0141705021'\n    angel_representation = '0141705021'\n    # All possible permutations of 'Angel' representation\n    angel_permutations = set(permutations(angel_representation))\n    \n    # Andy's input for 'Devil'\n    andy_input = '4005220912'\n    \n    # If Andy's input is a permutation of 'Angel', he can unlock the chest\n    if tuple(andy_input) in angel_permutations:\n        return True, \"Andy's input can unlock the treasure chest.\"\n    else:\n        # The problem definition doesn't explicitly state how 'Devil' is represented\n        # Assuming we convert 'Angel' to 'Devil' by some consistent rule,\n        # one possibility could be mapping each digit to its complement (9 minus digit)\n        # However, since there might not be a direct mapping mentioned, we need to\n        # return a statement that Andy cannot unlock the chest without the correct password.\n        return False, \"Andy's input cannot unlock the treasure chest.\"\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    bob_cindy_average = 120\n    doris_height = 126\n    total_height = bob_cindy_average * 2 + doris_height\n    average_height = total_height / 3\n    return average_height\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5']\n    possible_numbers = permutations(digits, len(digits))\n    ans = len(list(possible_numbers))\n    return ans\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure = 6 * 60 + 35  # Convert departure time to minutes past midnight\n    arrival = 10 * 60 + 22   # Convert arrival time to minutes past midnight\n\n    duration = arrival - departure  # Calculate the duration in minutes\n\n    return duration\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    # Define the repeating pattern and its sum\n    pattern = \"3456\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n\n    # Calculate the number of complete patterns in the 50-digit number\n    complete_patterns = 50 // len(pattern)\n\n    # Calculate the sum of the digits in the complete patterns\n    complete_sum = complete_patterns * pattern_sum\n\n    # Calculate the remaining digits, if any\n    remaining_digits = 50 % len(pattern)\n\n    # Calculate the sum of the remaining digits\n    remaining_sum = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    # The total sum of the 50-digit number is the sum of the complete patterns and the remaining digits\n    total_sum = complete_sum + remaining_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_pupils = 40\n    total_avg_pencils = 35\n    boys_avg_pencils = 20\n    girls_avg_pencils = 60\n\n    # Let's denote the number of boys as 'b' and the number of girls as 'g'.\n    # We know that 'b + g = total_pupils' and 'b*boys_avg_pencils + g*girls_avg_pencils = total_pupils * total_avg_pencils'\n\n    # From 'b + g = total_pupils' we get 'g = total_pupils - b'\n    # We plug 'g' into the second equation:\n    # 'b*boys_avg_pencils + (total_pupils - b)*girls_avg_pencils = total_pupils * total_avg_pencils'\n\n    # After simplifying the equation, we can solve for 'b':\n    b = (total_pupils*total_avg_pencils - total_pupils*girls_avg_pencils) / (boys_avg_pencils - girls_avg_pencils)\n\n    return int(b)\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pies each of them had at first\n    x = symbols('x')\n\n    # Mrs Tan now has x + 12 pies\n    # Mrs Lim now has x - 4 pies\n\n    # According to the condition, Mrs Tan has twice as many pies as Mrs Lim\n    # Create the equation based on the condition\n    equation = Eq(x + 12, 2 * (x - 4))\n\n    # Solve the equation for x\n    pies_initially = solve(equation, x)\n\n    return pies_initially[0]\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    three_fifths_students_sweets = 6\n    one_fourth_reminder_sweets = 4\n    rest_students_sweets = 5\n\n    three_fifths_students = (3 / 5) * total_sweets / three_fifths_students_sweets\n    remainder_sweets = total_sweets - (three_fifths_students * three_fifths_students_sweets)\n    one_fourth_remainder_students = (1 / 4) * remainder_sweets / one_fourth_reminder_sweets\n    rest_sweets = remainder_sweets - (one_fourth_remainder_students * one_fourth_reminder_sweets)\n    rest_students = rest_sweets / rest_students_sweets\n\n    total_students = three_fifths_students + one_fourth_remainder_students + rest_students\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    return 3.88 - 1.111\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    \n    # Difference in age between Tom and his father\n    age_difference = father_future_age - tom_age\n    \n    # Father's current age\n    father_current_age = tom_age + age_difference\n\n    return father_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + (30 / 100)\n    return ans\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be Destin's current age and n be his nephew's current age\n    d, n = symbols('d n')\n\n    # In 6 years, Destin will be twice his nephew's age: d + 6 = 2 * (n + 6)\n    future_age_relation = Eq(d + 6, 2 * (n + 6))\n\n    # 6 years ago, the ratio of Destin’s age to his nephew’s age was 5:1: (d - 6) / (n - 6) = 5 / 1\n    past_age_relation = Eq((d - 6) / (n - 6), 5 / 1)\n\n    # Solve the system of equations to find d and n\n    solutions = solve((future_age_relation, past_age_relation), (d, n))\n\n    # Calculate the sum of their ages in 10 years' time: (d + 10) + (n + 10)\n    destin_age_in_10_years = solutions[d] + 10\n    nephew_age_in_10_years = solutions[n] + 10\n    sum_of_ages_in_10_years = destin_age_in_10_years + nephew_age_in_10_years\n\n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    for odd in range(999, 0, -2):\n        found = False\n        for i in range(2, odd):\n            if is_composite(i):\n                for j in range(i + 1, odd):\n                    if is_composite(j) and is_composite(odd - i - j):\n                        found = True\n                        break\n            if found:\n                break\n        if not found:\n            return odd\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    # LCM of 25 and 20 will give the number of days after which Granny starts new packets of both tablets again\n    days = lcm(25, 20)\n    \n    # Since March has 31 days, we need to find out the next date after March 1st\n    days_in_march = 31\n    next_date = days_in_march + (days - (days_in_march - 1) % days)\n\n    return next_date\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    num1 = 17\n    num2 = 35\n    halfway = (num1 + num2) / 2\n    return halfway\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from itertools import combinations\n\n    cards = [6, 12, 35, 175, 245, 300]\n    products = {}\n\n    for chosen in combinations(cards, 2):\n        product = chosen[0] * chosen[1]\n        if product in products:\n            products[product].append(chosen)\n        else:\n            products[product] = [chosen]\n    \n    for chosen in combinations(cards, 3):\n        product = chosen[0] * chosen[1] * chosen[2]\n        if product in products:\n            for picked_cards in products[product]:\n                total_chosen = set(picked_cards + chosen)\n                if len(total_chosen) == 5:\n                    unpicked = set(cards) - total_chosen\n                    return list(unpicked)[0]\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    greater_number = 3 + 1/4\n    smaller_number = 1 + 3/4\n    difference = greater_number - smaller_number\n    return round(difference, 2)\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    boys, girls = symbols('boys girls')\n\n    # Equation 1: The total prize money\n    equation1 = Eq(8 * boys + 5 * girls, 580)\n    \n    # Equation 2: The ratio of boys to girls\n    equation2 = Eq(boys, 3 * girls)\n\n    # Solve the system of equations for the number of boys\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    sum_numbers = 0\n    for number in range(1, 101):\n        if number % 4 == 3:\n            sum_numbers += number\n    return sum_numbers\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 13):\n        for b in range(1, (12 - a) // 2 + 1):\n            c = 12 - a - b\n            if a == b or b == c or a == c:\n                if a + b > c and a + c > b and b + c > a:\n                    count += 1\n    return count // 2\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip = bill * 0.15\n    tax = bill * 0.08\n    total_cost = bill + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the current ages of the two brothers\n    elder, younger = symbols('elder younger')\n\n    # The sum of the current ages of the two brothers is 42\n    equation1 = Eq(elder + younger, 42)\n\n    # A few years ago, when the elder brother was at the current age of the younger brother\n    # The variable 'diff' refers to this difference in years\n    diff = elder - younger\n\n    # The younger brother was exactly half the elder brother's current age\n    equation2 = Eq(younger - diff, elder / 2)\n\n    # Solve the linear equations\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    # We return the age of the elder brother\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_had_initially = 86\n    lena_gave_away = 29\n    lena_has_now = 100\n\n    strawberries_given_by_mother = lena_has_now - (lena_had_initially - lena_gave_away)\n\n    return strawberries_given_by_mother\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    # Numbers of students in each class\n    A = 8\n    B = 12\n    C = 20\n\n    # Find the greatest common divisor (GCD) of the three numbers\n    gcd_AB = gcd(A, B)\n    gcd_ABC = gcd(gcd_AB, C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    pass_first_exam = 25\n    fail_second_exam = 12\n    pass_second_fail_first = 3\n\n    pass_only_first = pass_first_exam - (total_students - fail_second_exam - pass_second_fail_first)\n\n    return pass_only_first\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # A --> B --> C --> D\n    route_1 = 7 * 5 * 2\n    # A --> C --> D\n    route_2 = 4 * 2\n    # A --> D directly\n    route_3 = 6\n\n    # Total routes by summing up the possibilities\n    total_routes = route_1 + route_2 + route_3\n\n    return total_routes\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, cheese = symbols('chocolate cheese')\n    total_cupcakes = 255\n    chocolate_sold = chocolate * 40 / 100\n    cheese_sold = cheese * 75 / 100\n\n    equation1 = Eq(chocolate + cheese, total_cupcakes)\n    equation2 = Eq(chocolate - chocolate_sold, cheese - cheese_sold)\n\n    solutions = solve((equation1, equation2), (chocolate, cheese))\n\n    cupcakes_left = solutions[chocolate] - chocolate_sold.subs(solutions)\n\n    return cupcakes_left\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen = symbols('pen')\n    \n    # Given that each pencil costs £2\n    pencil_cost = 2\n    \n    # Given that 2 pens and 3 pencils cost a total of £20\n    total_cost = Eq(2 * pen + 3 * pencil_cost, 20)\n    \n    # Solving for the cost of a pen\n    pen_cost = solve(total_cost, pen)\n    \n    return pen_cost[0]\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    cattle = 5\n    days = 10\n\n    hay_per_day_per_cattle = total_hay / (cattle * days)\n\n    return hay_per_day_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    for age1 in range(1, 10):\n        for age2 in range(age1+1, 10):  # start from age1+1 to ensure different ages\n            for age3 in range(age2+1, 10):  # start from age2+1 to ensure different ages\n                if age1 * age2 * age3 == 210:\n                    return age1\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Assuming the total number of boys is b and the total number of girls is g\n    # According to the problem, (1/4)b = (2/5)g and b + g = 39 (total students)\n    # We can solve these two equations to find the values of b and g\n    \n    from sympy import symbols, Eq, solve\n    \n    b, g = symbols('b g')\n    equation1 = Eq((1/4) * b, (2/5) * g)\n    equation2 = Eq(b + g, 39)\n\n    solutions = solve((equation1, equation2), (b, g))\n    \n    # Difference between number of boys and girls\n    difference = solutions[b] - solutions[g]\n    \n    return difference\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    number_of_boxes = total_avocados // per_box\n    return number_of_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed_by_frost = 3 / 8\n    seedlings_killed = total_seedlings * fraction_killed_by_frost\n    seedlings_survive = total_seedlings - seedlings_killed\n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n    days_last = total_locusts // daily_consumption\n    remaining_locusts = total_locusts - days_last * daily_consumption\n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12 * 92 + 22 * 82 + 32 * 72\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    don, ben = symbols('don ben')\n\n    # Initial ratio condition\n    initial_ratio = Eq(don/ben, 2/3)\n    # New ratio condition after changes\n    new_ratio = Eq((don + 10) / (ben - 5), 6/7)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (don, ben))\n\n    return solutions[don]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    ans = 60 * 20\n    return ans\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    result = 726 * 8\n    ans = round(result, 1)\n    return ans\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(2, 2017)])\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        return 0\n    else:\n        number_to_remove = remainder\n        return number_to_remove\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_give = (amy_toys - sally_toys) // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of $5 notes and y be the number of $10 notes\n    x, y = symbols('x y')\n    \n    # equations derived from the problem statement\n    total_notes = Eq(x + y, 116)                              # Jeremy had a total of 116 notes\n    remaining_10_notes = Eq(y - 0.6 * y, (4/7) * (x - 0.25 * x))  # After spending, 4/7 as many $10 as $5 notes left\n    spent_notes_eq = Eq(0.6 * y * 10 + 0.25 * x * 5, y * 10 - (4/7) * (x * 5 - 0.25 * x * 5))  # Money spent on the bag\n\n    # solve the system of equations\n    solutions = solve((total_notes, remaining_10_notes, spent_notes_eq), (x, y))\n\n    # calculate the cost of the bag\n    bag_cost = 0.6 * solutions[y] * 10 + 0.25 * solutions[x] * 5\n\n    return bag_cost\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0\n    \n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    sum_squares = 2870\n    n = 20\n    sum_of_sequence = (n * (n + 1) * (2 * n + 1)) / 6\n\n    # Ensures that the sum of the sequence matches the provided sum of squares\n    assert sum_of_sequence == sum_squares\n\n    ans = sum((2 * i - 1) * (2 * i + 1) for i in range(1, n + 1))\n\n    return ans\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    ans = (road_length // distance_between_trees) + 1\n    \n    return ans\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n    gallons_needed = order_cups / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"21{i}{j}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Each week has 1 Friday, so in 55 days there are 55 // 7 weeks, each with a Friday.\n    full_weeks_fridays = 55 // 7\n    \n    # The remaining days after the full weeks are calculated.\n    remaining_days = 55 % 7\n    \n    # Check if the remaining days can include an extra Friday.\n    # If summer vacation starts on a Friday, then there can be an extra Friday.\n    # This is because the remaining days will be counted starting from Friday.\n    if remaining_days > 0:\n        extra_friday = 1\n    else:\n        extra_friday = 0\n    \n    # Calculate the total number of Fridays by adding the Fridays from full weeks\n    # and the possible extra Friday.\n    total_fridays = full_weeks_fridays + extra_friday\n    \n    return total_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    result = 3 / (1 - 1/2)\n    return result\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage = 20\n    total_girls = 25\n\n    girls_with_glasses = (percentage / 100) * total_girls\n\n    return int(girls_with_glasses)\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial\n\ndef solution():\n    # The triplet sisters are considered as a single unit.\n    num_units = 5  # 4 individuals + 1 triplet group\n\n    # Total arrangements for the 5 units\n    total_arrangements_units = factorial(num_units)\n\n    # The triplet sisters can be arranged among themselves in 3! ways\n    arrangements_triplets = factorial(3)\n\n    # We need to consider arrangements where twins are not next to each other\n    # Total arrangements without restriction for twins\n    total_arrangements = total_arrangements_units * arrangements_triplets\n\n    # Arrangements where twins are together (treat them as a single unit, so we have 4 units in total)\n    total_arrangements_twins_together = factorial(4) * arrangements_triplets\n\n    # Subtract arrangements where twins are together from total\n    valid_arrangements = total_arrangements - total_arrangements_twins_together\n\n    return valid_arrangements\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    lcm = 2 * 3 * 4 * 5 * 6 * 8 * 9\n    for i in range(lcm, lcm * 7, lcm):\n        if (i + 5) % 7 == 0:\n            return i + 5\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Cost of one mug\n    cost_per_mug = 3.50 / 5\n    # Cost of one pen\n    cost_per_pen = 6.80 / 8\n\n    # Total cost for 7 mugs\n    total_cost_mugs = 7 * cost_per_mug\n    # Total cost for 5 pens\n    total_cost_pens = 5 * cost_per_pen\n\n    # Total cost\n    total_cost = total_cost_mugs + total_cost_pens\n\n    # Change from £10\n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away_fraction = 1/5\n    pupils_away = total_pupils * pupils_away_fraction\n    pupils_going_to_cathedral = total_pupils - pupils_away\n    \n    return pupils_going_to_cathedral\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_child_per_song = 3  # minutes\n    number_of_songs = 2\n    number_of_children = 50\n\n    total_time = time_per_child_per_song * number_of_songs * number_of_children\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - remaining_weight_with_two_apples\n    weight_of_one_apple = weight_of_three_apples / 3\n    weight_of_five_apples = weight_of_one_apple * 5\n    weight_of_basket = total_weight_with_apples - weight_of_five_apples\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    return max(0.25, 0.3)\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    # In the worst case scenario according to the Pigeonhole Principle,\n    # the least number of students born in the week that has the most number\n    # of students born in it can be calculated by dividing the total number\n    # of students by the number of days in a week and then taking the ceiling of that number.\n    least_number_in_busy_week = (total_students + days_in_week - 1) // days_in_week\n\n    return least_number_in_busy_week\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100  # converting percentage to a decimal\n    time_claimed = 5\n\n    # Using the formula A = P(1 + r)^t, where\n    # A is the amount of money accumulated after n years, including interest.\n    # P is the principal amount (the initial amount of money)\n    # r is the annual interest rate (decimal)\n    # t is the number of years the money is invested for\n    \n    # We need to solve for t: t = ln(A/P) / ln(1 + r)\n    from math import log\n\n    time_actual = log(final_amount / principal) / log(1 + interest_rate)\n    \n    # Check if the actual time matches the claimed time\n    if int(time_actual) == time_claimed:\n        return \"right\"\n    else:\n        # If Bella is wrong, return the number of years rounded down to the nearest whole number, because you cannot save money for a fraction of a year\n        return int(time_actual)\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    needed_loafs = 35\n    cups_needed = needed_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least Common Multiple of 3 and 7\n    ans = lcm\n\n    while True:\n        if str(ans).endswith('2'):\n            return ans\n        ans += lcm\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, cakes = symbols('cookies cakes')\n    \n    # originally, there were thrice as many cookies as cakes\n    equation1 = Eq(cookies, 3 * cakes)\n    # after selling, 39 cookies and 17 cakes were sold\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2), (cookies, cakes))\n    \n    # calculate how many cookies were left\n    cookies_left = solutions[cookies] - 39\n    \n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    number_of_weeks = 2\n    days_in_two_weeks = days_in_a_week * number_of_weeks\n    return days_in_two_weeks\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    # Value of the 3 in the hundred thousands place\n    value_3_hundred_thousands = 3 * 10**5\n    \n    # Value of the 3 in the tens place\n    value_3_tens = 3 * 10**1\n    \n    # The difference between their values\n    difference = value_3_hundred_thousands - value_3_tens\n\n    return difference\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2 ** 17 % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    num_pages = sum(range(1, 21))\n    return num_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # Initialize variables\n    coin1 = 4\n    coin2 = 5\n\n    # Theorem to find the largest total that cannot be made (Frobenius Number) for two coins\n    # The formula is (coin1 * coin2) - coin1 - coin2, as long as coin1 and coin2 are coprime (have no common divisors other than 1)\n    # Since 4 and 5 are coprime, we apply the formula directly\n    ans = (coin1 * coin2) - coin1 - coin2\n    return ans\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # Since the sum of the numbers is 1001 and we want to maximize d,\n    # d has to be a divisor of 1001.\n    # We find the divisors of 1001.\n    divisors = [i for i in range(1, 1002) if 1001 % i == 0]\n    # The maximum possible value of d is the largest divisor of 1001,\n    # which is 1001 itself (since there could be one number which is 1001\n    # and the rest 9 numbers could be 0, but since we need positive integers,\n    # we ignore the case of 1001 as a divisor and take the next largest divisor).\n    # Since we need positive integers, we ignore 1 as a divisor and consider the next largest divisor.\n    return max(divisors[1:-1])\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Claire and Daniel's combined age five years ago\n    combined_age_5_years_ago = 14\n    # Since this was 5 years ago, we add 5 years for each person to get their current combined age\n    current_combined_age = combined_age_5_years_ago + 2*5\n    # In 3 years, we need to add an additional 3 years for each person\n    combined_age_in_3_years = current_combined_age + 2*3\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            num = int(f\"1082{a}{b}\")\n            if num % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weight of an apple and a pear\n    apple, pear = symbols('apple pear')\n\n    # Create equations based on the given information\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    # Calculate the weight of 4 apples and 4 pears using the solutions found\n    weight_4_apples_4_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_4_apples_4_pears\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    # 1 / j, 1 / o, 1 / a represent the rate of John, Jonah, and Angus respectively\n    # Since John, Jonah, and Angus together take 27 hours, their combined rate is 1 / 27\n    # Jonah and Angus together take 36 hours, so their combined rate is 1 / 36\n\n    # Let's denote the rates of John, Jonah and Angus as j, o, and a respectively.\n    # The combined rate when all three work together is 1/27.\n    # The combined rate of Jonah and Angus is 1/36.\n\n    # Since Jonah and Angus work just as hard as each other, we assume their rates are equal.\n    # Therefore, o = a\n\n    # Thus, we have the following equations based on the rates (work done per hour):\n    # j + o + o = 1/27 => j + 2o = 1/27\n    # o + o = 1/36 => 2o = 1/36 => o = 1/72\n\n    # Substitute o in the first equation:\n    # j + 2(1/72) = 1/27\n    # j + 1/36 = 1/27\n    # j = 1/27 - 1/36\n\n    # To find John's rate let's first find a common denominator\n    j = (1/27)*(36/36) - (1/36)*(27/27)\n    j = (36 - 27) / (27 * 36)\n    j = 9 / (27 * 36)\n\n    # To find out how long John would take to build the wall on his own, we take the reciprocal of j\n    johns_time = 1 / j\n    return johns_time\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n    length1 = 45\n    length2 = 30\n    ans = gcd(length1, length2)\n    return ans\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    # Let the original number of boys be x\n    # Then the original number of girls will be 152 - x\n    # After removing 1/11 of boys (x/11) and 5 girls, the number of boys and girls becomes equal\n    # So, x - x/11 = 152 - x - 5\n    # Simplify: (10/11)*x = 147 - x\n    # Therefore, (21/11)*x = 147\n    # x = 147 * 11 / 21\n\n    x = (147 * 11) // 21\n    return x\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    x = 1\n    while True:\n        if x % 5 == 1 and x % 12 == 3:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    total_sum = 42 + 21 + 16 + 44 + 37\n    return total_sum\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    num_boxes = total_pencils // pencils_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    eq1 = Eq(cathy, 3 * amanda)\n    eq2 = Eq(amanda, 2 * bernie)\n    eq3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((eq1, eq2, eq3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    daily_eggs = 50\n    adult_in_days = 30\n    \n    # For the first 30 days, no eggs become adults, so we tally eggs laid\n    if 40 <= adult_in_days:\n        ans = 0  # No adult fleas yet\n    else:\n        # From day 31 to day 40, eggs laid on each day become adults\n        adults_per_day = daily_eggs\n        days_adult_eggs_laid = 40 - adult_in_days\n        ans = adults_per_day * days_adult_eggs_laid\n    \n    return ans\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3) + 9\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    total = (french + japanese + italian) - \\\n            (french_japanese + french_italian + japanese_italian) + \\\n            all_three\n\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12  # total liters of orange drink\n    fraction_water = 3 / 4  # fraction of orange drink that is water\n    liters_water = total_orange_drink * fraction_water  # calculate liters of water\n\n    return liters_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n\n    last_term = first_term + (num_rows - 1) * difference\n    total_students = (first_term + last_term) * num_rows // 2\n    \n    return total_students\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    \n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    # The difference is due to repositioning the last digit to the first place.\n    # The place value of '5' changes from 5 (ones place) to 50000 (ten-thousands place).\n    # The difference in place value contributes to the total difference (22122).\n    # Therefore, M - N is actually just the change in place value of the digit '5'.\n    # So we have 50000 - 5 = 49995.\n    # But, M - N = 22122. We can write it as 49995 - abcd0 (since N = abcd5)\n    # Then, 49995 - abcd0 = 22122\n    # Meaning, abcd0 = 49995 - 22122 = 27873\n    # So abcd = 27873 / 10 = 2787\n\n    abcd = (50000 - 5 - 22122) // 10\n    return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    a = Fraction(21 * 286 + 21, 286)\n    b = Fraction(6 * 2530 + 647, 2530)\n    c = Fraction(1 * 2829 + 1370, 2829)\n    \n    # Perform the operations\n    result = a / b * c\n    \n    # Convert the result to a mixed number\n    mixed_number = (result.numerator // result.denominator, result.numerator % result.denominator, result.denominator)\n    \n    return mixed_number\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    percentage = 30\n    total_amount = 1600\n\n    result = (percentage / 100) * total_amount\n\n    return result\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85\n    pencil_cost = 0.38\n    ruler_cost = 0.59\n\n    remaining_money = total_money - (pencil_cost + ruler_cost)\n\n    return remaining_money\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n\n    num_apples_anne = solve(total_apples, anne)\n\n    return num_apples_anne[0]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # Prime factorization of 140 = 2^2 * 5 * 7\n    # To distribute the candies in odd-numbered piles, we must use piles of sizes that \n    # are powers of 5 and 7 only, since any power of 2 will result in an even number.\n    # 140 candies can be distributed in (2+1)(1+1) ways (adding 1 to include power of 0)\n    # These correspond to powers of 5 (0 or 1) and 7 (0 or 1)\n    return (2+1) * (1+1)\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    # Use a loop to iterate through all 2-digit numbers\n    for number in range(10, 100):\n        # Check if the number meets both conditions\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    keys = 20\n    # In the worst case, he tries keys one by one and gets the right key for each classroom at last.\n    # Hence, for each classroom except the last, he potentially tries all the keys.\n    attempts_per_classroom = keys - 1\n    # For the last classroom, he just uses the last key.\n    total_attempts = attempts_per_classroom * (keys - 1) + 1\n    \n    return total_attempts\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Tom takes 4 stones from Stack B first\n    stones_in_A = 20\n    stones_in_B = 20 - 4  # 16 stones left in Stack B after Tom's turn\n\n    # Jerry must now take stones in such a way to leave Tom in a position where\n    # any move Tom makes, Jerry can win.\n    # If Jerry leaves an equal number of stones in both piles, no matter how many\n    # stones Tom takes from either pile, Jerry can take the same number from the other pile,\n    # ensuring the last stone is picked by Jerry.\n    \n    # Jerry should therefore take 4 stones from Stack A to make the number\n    # of stones in both piles equal.\n    stones_to_take_A = stones_in_A - stones_in_B\n\n    # Jerry takes stones from Stack A\n    if stones_to_take_A > 0:\n        return f\"Jerry must take {stones_to_take_A} stone(s) from Stack A.\"\n    else:\n        # In case Jerry needs to take from Stack B\n        stones_to_take_B = stones_in_B - stones_in_A\n        return f\"Jerry must take {stones_to_take_B} stone(s) from Stack B.\"\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    third_sheet = 3\n    page_side1 = (third_sheet - 1) * 2 + 1\n    page_side2 = page_side1 + 1\n    \n    sum_of_pages = page_side1 + page_side2\n\n    return sum_of_pages\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n    \n    # Star types for 5 hours + Nini types for 20 hours = 1 job\n    equation1 = Eq(star_rate * 5 + nini_rate * 20, 1)\n    \n    # Star types for 20 hours + Nini types for 8 hours = 1 job\n    equation2 = Eq(star_rate * 20 + nini_rate * 8, 1)\n    \n    # Solve for the rates of work for Star and Nini\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    # Nini's work rate gives: 1/nini_rate = time taken by Nini to do 1 job alone\n    nini_time = 1 / solutions[nini_rate]\n\n    return nini_time\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    girls_fraction = 3 / 7\n    num_girls = total_students * girls_fraction\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = 2017 / 2018 + 20172017 / 20182018\n    denominator = 201720172017 / 201820182018\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n    \n    return int(watermelon_to_apples)\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # The number of small cubes along each dimension of the cuboid\n    # Since the cuboid's surface is painted and it's cut into small cubes of the same size,\n    # Each dimension should be a factor of the dimension size of the large cuboid.\n    # We can derive the size of a small cube by dividing the total number by the total number of small cubes.\n    \n    # Total number of small cubes\n    total_cubes = 720\n    \n    # Large cuboid dimensions\n    length = 6\n    width = 10\n    height = 12\n    \n    # Volume of the large cuboid is the product of its dimensions\n    large_cuboid_volume = length * width * height\n    \n    # The volume of a small cube is the volume of the large cuboid divided by the total number of small cubes\n    small_cube_volume = large_cuboid_volume / total_cubes\n    \n    # Since all the small cubes are the same size, each side of the small cube is the cube root of its volume\n    # To find the number of small cubes that form the length, width, height of the cuboid, we divide dimension size of the large cuboid \n    # by side of small cube\n    \n    # Calculation of side of small cube, considering int division because we assume perfect division here\n    side_small_cube = int(small_cube_volume ** (1/3))\n    \n    # Calculating how many small cubes form each side of the cuboid\n    num_cubes_length = length // side_small_cube\n    num_cubes_width = width // side_small_cube\n    num_cubes_height = height // side_small_cube\n    \n    # To find the number of cubes with exactly one face painted,\n    # we sum the cubes on all the faces, excluding the overlapping edges and corners (since those will have more than one face painted).\n    \n    # For each of the three pairs of faces:\n    # (length x width), (width x height), (height x length)\n    # we calculate the number of painted cubes\n    # Since these are on the outside, we subtract the overlap of 2 layers from each dimension (hence the -2)\n    \n    painted_length_width = (num_cubes_length - 2) * (num_cubes_width - 2) * 2  # Top and bottom faces\n    painted_width_height = (num_cubes_width - 2) * (num_cubes_height - 2) * 2  # Front and back faces\n    painted_height_length = (num_cubes_height - 2) * (num_cubes_length - 2) * 2  # Left and right faces\n    \n    # Total number of small cubes with exactly one face painted pink\n    one_face_painted = painted_length_width + painted_width_height + painted_height_length\n\n    return one_face_painted\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits = 933\n    pages = 0\n    for digit_count in range(1, 4):\n        first_page_of_size = 10**(digit_count - 1)\n        last_page_of_size = 10**digit_count - 1\n        pages_of_this_size = last_page_of_size - first_page_of_size + 1\n        if pages_of_this_size * digit_count < digits:\n            digits -= pages_of_this_size * digit_count\n            pages += pages_of_this_size\n        else:\n            full_pages = digits // digit_count\n            pages += full_pages\n            break\n    return pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) // 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    total_cups = 30 + 50 + 20\n    average_cost_per_cup = total_cost / total_cups\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Starting number of pens of each color in Box A\n    blue_a, red_a, black_a, green_a = 10, 15, 20, 25\n\n    # Remove 20 pens (from the color with the most pens, which is green)\n    green_a -= 20\n\n    # Now Box A has less than 15 green pens and at least 15 pens of all other colors\n    # To ensure at least 15 pens of each color, we need to return enough green pens to Box A\n    pens_to_return = 15 - green_a\n    \n    return pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    # Initialize the total count of digits to 0\n    total_digits = 0\n    # Loop through each number from 1 to 91\n    for i in range(1, 92):\n        # Increment total digits by the length of the current number when converted to a string\n        total_digits += len(str(i))\n    # Return the total count of digits written\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert start time to minutes\n    end_time = (11 * 60) + 6    # Convert end time to minutes\n\n    duration = end_time - start_time\n\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_students = 0\n    boys, girls = 0, 0\n    n = 1  # Let's assume the smallest square has side length of n\n    while True:\n        # Layer calculation\n        if n % 2 == 1:  # Odd layers (outermost and every alternate layer)\n            boys += 4 * n - 4 if n > 1 else 1\n        else:  # Even layers (2nd layer and every alternate layer)\n            girls += 4 * n - 4\n        \n        if boys - girls == 32:\n            # Total students up to current layer\n            total_students = boys + girls\n            break\n        \n        # Proceeding to the next layer, increasing side length by 2 (since 2 layers are added externally to form a square)\n        n += 2\n    \n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1 / 8\n    return ans\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    # Total chocolates = 20\n    # Plain chocolates = 8\n    # Milk chocolates = 12\n    # Chocolates with soft-centres = 16\n\n    # Let's denote the number of plain chocolates with soft-centres as x.\n    # Since there are more chocolates with soft-centres than plain chocolates,\n    # at least some plain chocolates have soft-centres.\n\n    # Minimum plain chocolates with soft-centres is max(0, 16 - 12) = 4\n    # because we subtract the milk chocolates from chocolates with soft-centres.\n    # (maximum number of milk chocolates with soft-centres is 12,\n    # so the remaining must be plain with soft-centres)\n    \n    # Maximum plain chocolates with soft-centres is min(8, 16) = 8\n    # because it can't exceed the total number of plain chocolates or\n    # the total number of chocolates with soft-centres.\n    \n    # So the number of plain chocolates with soft-centre is at least 4 and at most 8.\n    \n    min_plain_soft_centres = max(0, 16 - 12)\n    max_plain_soft_centres = min(8, 16)\n    \n    return min_plain_soft_centres, max_plain_soft_centres\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    quotient = 29\n    remainder = 11\n    total_sum = 431\n\n    # Let the divisor be x\n    # Then the dividend is quotient * x + remainder\n    # And according to the problem, dividend + divisor = total_sum\n    # (quotient * x + remainder) + x = total_sum\n    # (quotient + 1) * x + remainder = total_sum\n    # x = (total_sum - remainder) / (quotient + 1)\n    \n    divisor = (total_sum - remainder) // (quotient + 1)\n    dividend = quotient * divisor + remainder\n\n    # Difference between the two numbers\n    difference = abs(dividend - divisor)\n\n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage = 12.5 / 100\n    number_violin_players = 11\n\n    total_pupils = number_violin_players / percentage\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution():\n    n = symbols('n')\n    C = 50 * n\n    return C\n\nans = solution()"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of each type of coin\n    x = symbols('x')\n\n    # Create equations based on the problem statement\n    # Total sum is 90 pence, and the sum of values of all coins is equal to this total sum\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Total number of coins is 4 times x as there are 4 types of coins\n    total_coins = 4 * solution[0]\n\n    return total_coins\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    stickers, pupils = symbols('stickers pupils')\n    \n    equation1 = Eq((stickers - 190) % 13, 0)\n    equation2 = Eq((stickers - 50) % 17, 0)\n    \n    solutions = solve((equation1, equation2), (stickers, pupils))\n    \n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars_fraction = 5/12\n    blue_cars_percentage = 20/100\n\n    red_cars = total_cars * red_cars_fraction\n    blue_cars = total_cars * blue_cars_percentage\n\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    # The ratio A:B:C = 4:5:6\n    # Let the common ratio constant be x\n    # So, A = 4x, B = 5x, C = 6x\n    # According to the problem, C is greater than A by 10\n    # So, C = A + 10\n    # Therefore, 6x = 4x + 10\n    # Solving for x\n    x = 10 / (6 - 4)\n    \n    # Now that we have x, we can find A, B, and C\n    A = 4 * x\n    B = 5 * x\n    C = 6 * x\n    \n    # The sum of A, B, and C\n    total_sum = A + B + C\n    \n    return total_sum\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n\n    # Treat A, B, C, and D as one unit as they always stand together\n    # so we have 12 - 3 = 9 units in total (because A, B, C, D become one unit)\n    units = 9\n\n    # Then we have to consider the permutations of A, B, C, D among themselves\n    abc_permutations = factorial(4)\n\n    # Now, the total permutations for the 9 units along with the permutations of A, B, C, D\n    total_permutations = factorial(units) * abc_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    total_matches = (6 * 5) // 2  # Total possible matches\n    total_points = total_matches * 2  # Each match gives out 2 points\n    known_points = 7 + 6 + 5 + 4 + 3\n    remaining_points = total_points - known_points\n\n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # original ratio\n    equation1 = Eq(A/B, 5/3)\n    \n    # new ratio after transferring the candy\n    equation2 = Eq((A - 10)/(B + 10), 7/5)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2), (A, B))\n    A_val = solutions[A]\n    B_val = solutions[B]\n    \n    # total weight of both bags\n    return A_val + B_val\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys = 9\n    boys_to_girls_ratio = 3 / 5\n    girls = (boys / boys_to_girls_ratio)\n    return girls\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's assume a for number of apples and p for number of pears\n    a, p = symbols('a p')\n    \n    # Total fruits\n    total_fruits = Eq(a + p, 105)\n    \n    # a/3 apples and 2p/5 pears were sold\n    apples_sold = a/3\n    pears_sold = 2*p/5\n    \n    # (2a/3) is 5/6th of the (3p/5) after sold\n    fruits_left = Eq((2*a/3), (5/6) * (3*p/5))\n    \n    # Now solve the simultaneous equations\n    solutions = solve((total_fruits, fruits_left), (a, p))\n    \n    # Calculate the total number of apples and pears sold\n    total_sold = solutions[a]/3 + 2*solutions[p]/5\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n\n    # Since the sum of an arithmetic sequence is n/2 * (first_term + last_term),\n    # and we know the sum (total_players), first_term and last_term,\n    # we can find the number of terms (n)\n    # total_players = n/2 * (first_line_players + last_line_players)\n    n = total_players * 2 / (first_line_players + last_line_players)\n\n    # The difference (d) is (last_term - first_term) / (n - 1)\n    d = (last_line_players - first_line_players) / (n - 1)\n\n    return int(d)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if (num % 3 == 2) and (num % 5 == 2) and (num % 7 == 2):\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    count_zeros = 0\n    while product % 10 == 0:\n        count_zeros += 1\n        product //= 10\n    return count_zeros\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # converting all masses to grams\n\n    largest_mass = max(masses)\n\n    return largest_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    total_weeks = 1000 / 7\n    total_barks = 3 * total_weeks\n    thefts = 2\n    probability_thief_and_bark = 0.9\n    probability_bark_given_theft = (probability_thief_and_bark * thefts) / total_barks\n    \n    return probability_bark_given_theft\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_girls = 6 / 11\n    num_girls = total_children * fraction_girls\n    num_boys = total_children - num_girls\n    return int(num_boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # Since the numbers have to be different and must use all digits from 1 to 9,\n    # the smallest difference would occur when they are as close to each other as\n    # possible. Therefore, consider two numbers, where the first is the smallest\n    # possible nine-digit number with all unique digits and the second is the next\n    # smallest nine-digit number.\n    # The smallest nine-digit number with all unique digits is 123456789.\n    # The next smallest nine-digit number with all unique digits is 123456798,\n    # which is obtained by swapping the last two digits of the smallest number.\n\n    num1 = 123456789\n    num2 = 123456798\n\n    # Calculate the difference\n    difference = num2 - num1\n\n    return difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Given conditions\n    condition1 = Eq(girls - boys, 65)\n    condition2 = Eq(girls - (3/7)*girls, boys - (2/5)*boys)\n\n    # Solve the system of equations\n    solutions = solve((condition1, condition2), (boys, girls))\n    boys_left = solutions[boys] - (2/5)*solutions[boys]\n    girls_left = solutions[girls] - (3/7)*solutions[girls]\n    \n    # Total students left in the hall\n    total_left = boys_left + girls_left\n    \n    return total_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of bricks at first\n    x = symbols('x')\n\n    # Equation based on the word problem\n    equation = Eq((x / 2) - 26 + ((x - ((x / 2) - 26)) / 2) + 11 + 68 + 25, x)\n\n    # Solve the equation\n    total_bricks = solve(equation, x)\n\n    return total_bricks[0]\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    ans = 2412 // 9\n    return ans\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    # There are 3 kids, so we want to find the number of permutations of these 3.\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    for n in range(2, 10000):  # Assuming the class size will be less than 10000\n        if (n - 1) ** 2 < n ** 2 <= (n - 1) ** 2 + 4 * (n - 1):\n            return (n - 1) ** 2 + 2 * (n - 1) + 1\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum = 22\n    desired_sum = 40\n    \n    # Assuming that the sum of their ages increases by 2 every year\n    # (1 year for Geoff and 1 year for his sister)\n    \n    # The number of years required for the sum of their ages to be 40\n    years_to_pass = desired_sum - current_sum\n    \n    return years_to_pass\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 21):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of girls be g and the number of boys be b\n    g, b = symbols('g b')\n\n    # g + b = total students\n    equation_total_students = Eq(g + b, 1690)\n\n    # b = g + 90\n    equation_more_boys = Eq(b, g + 90)\n    \n    # Ratio of swimming girl to non-swimming girl is 31:49\n    # Let x be the common multiplier for the number of girls\n    x = symbols('x')\n    swimming_girls = 31 * x\n    non_swimming_girls = 49 * x\n\n    # Total girls g = swimming_girls + non_swimming_girls\n    equation_girls_total = Eq(g, swimming_girls + non_swimming_girls)\n\n    # The number of boys who can swim is 120 less than the number of boys who can not swim\n    # Let y be the common multiplier for the number of boys\n    y = symbols('y')\n    swimming_boys = y - 120\n    non_swimming_boys = y\n\n    # Total boys b = swimming_boys + non_swimming_boys\n    equation_boys_total = Eq(b, swimming_boys + non_swimming_boys)\n\n    # Solve the set of equations\n    solutions = solve((equation_total_students, equation_more_boys, equation_girls_total, equation_boys_total), (b, g, x, y))\n\n    # Calculate the number of pupils who cannot swim\n    non_swimming_pupils = solutions[x]*49 + solutions[y]\n    \n    return non_swimming_pupils\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # This problem can be solved using dynamic programming. We create an array ways \n    # where ways[i] will store the number of ways to reach the i-th step.\n    ways = [0] * 11  # Since there are 10 steps, we need an array of length 11 (0 to 10)\n    \n    # Base cases:\n    # 0 ways to reach step 0 (we start from step 1)\n    # 1 way to reach step 1 (only 1 step needed), but we start directly on step 1\n    ways[0] = 0  \n    ways[1] = 1 \n    \n    # We start from step 2 since the base case for step 1 is already defined\n    for i in range(2, 11):\n        # We can reach the i-th step either from (i-2)-th step or from (i-3)-th step\n        ways[i] = ways[i - 2] + ways[i - 3]\n    \n    return ways[10]\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for i in range(1000, 10000):\n        # Split the number into its digits\n        original_digits = [int(d) for d in str(i)]\n        # Perform the swap to generate the new number\n        new_number_digits = original_digits.copy()\n        new_number_digits[0] = original_digits[3]\n        # Convert digits back to the whole number\n        new_number = int(''.join(map(str, new_number_digits)))\n        # Check if the new number is 5877 greater than the original\n        if new_number - i == 5877:\n            return i\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    # Given quotient\n    quotient = 12\n    # Given remainder\n    remainder = 3\n    # Minimum divisor is stated to be 1\n    # So the minimum dividend is as per formula: dividend = (divisor * quotient) + remainder\n    # As divisor is 1, minimum dividend = (1 * 12) + 3\n    minimum_dividend = (1 * quotient) + remainder\n    \n    return minimum_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number_str = '1998'\n    n = len(number_str)\n    while True:\n        if int(number_str * (n // len(number_str))) % 33 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    a = group_number\n    b = a**2\n    c = a*b\n\n    sum_of_numbers = a + b + c\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_lap = 1/4\n    total_distance = 3.75\n\n    laps_required = total_distance / distance_per_lap\n\n    return int(laps_required)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3_030_030\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    total_girls = (total_boys / boys_to_girls_ratio)\n    \n    return int(total_girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    num = 100  # start from the smallest 3 digit number\n    while True:\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num\n        num += 1  # increment and check the next number\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # create symbols for each person's stamps\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    # set up the equations based on the problem statement\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of erasers for Candice, Doris, and Elly be represented by c, d, and e respectively.\n    c, d, e = symbols('c d e')\n    \n    # Given that Elly's erasers are 6 more than Doris'.\n    equation1 = Eq(e, d + 6)\n    \n    # Given that Candice has five times as many erasers as Elly.\n    equation2 = Eq(c, 5 * e)\n    \n    # Given that the total number of erasers is 50.\n    equation3 = Eq(c + d + e, 50)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (c, d, e))\n    \n    # Return the number of erasers Candice has.\n    return solutions[c]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Known values in the proportion\n    a = 10\n    c = 14\n    d = 21\n\n    # The proportion states that a/b = c/d\n    # Therefore, b = a*d/c\n\n    b = a * d / c\n\n    return b\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100, 10):  # Since it ends with 0, consider only multiples of 10\n        if num % 6 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_more = 7 * 10\n    correct_answer = original_number + tens_more\n    johnny_answer = 5839\n\n    if johnny_answer == correct_answer:\n        ans = johnny_answer\n    else:\n        ans = correct_answer\n    \n    return ans\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    return 27\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # Convert 3m to cm\n    lengths_cm = [147, 32.5, 67]  # Given lengths in cm\n    sum_of_given_lengths_cm = sum(lengths_cm)\n    fourth_length_cm = total_length_cm - sum_of_given_lengths_cm\n    return fourth_length_cm\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    papers = 18\n    interval = 3\n    leaves_needed = papers // interval\n    \n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    expr1 = (101 + 234 + 567) * (234 + 567 + 89)\n    expr2 = (101 + 234 + 567 + 89) * (234 + 567)\n    ans = expr1 - expr2\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # start with the initial value 1\n    for n in range(2, 11):\n        ans += (2 * (n - 1) * 1/n)\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n\n    initial_ratio = Eq(watches/caps, 8/11)\n    final_ratio = Eq(watches/(caps - 88), 12/11)\n\n    solutions = solve((initial_ratio, final_ratio), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Time taken to reach the 6th house\n    time_to_sixth_house = 30  # in minutes\n\n    # Ratio of distances: first to sixth house is same as first to tenth house\n    # d(first to sixth) / d(first to tenth) = time(first to sixth) / time(first to tenth)\n    # d(first to sixth) = 5 * distance_between_houses\n    # d(first to tenth) = 9 * distance_between_houses\n    # Therefore, 5 * distance_between_houses / 9 * distance_between_houses = time_to_sixth_house / time_to_tenth_house\n    # time_to_tenth_house = time_to_sixth_house * (9 / 5)\n\n    time_to_tenth_house = time_to_sixth_house * (9 / 5)\n\n    return time_to_tenth_house\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    # Probability of each person passing\n    p_a = 0.5\n    p_b = 0.4\n    p_c = 0.2\n\n    # Probability of each person failing\n    q_a = 1 - p_a\n    q_b = 1 - p_b\n    q_c = 1 - p_c\n\n    # Probability of each possible outcome\n    prob_0_pass = q_a * q_b * q_c  # None pass\n    prob_1_pass = p_a * q_b * q_c + q_a * p_b * q_c + q_a * q_b * p_c  # Exactly one passes\n    prob_2_pass = p_a * p_b * q_c + p_a * q_b * p_c + q_a * p_b * p_c  # Exactly two pass\n    prob_3_pass = p_a * p_b * p_c  # All pass\n\n    # List the probabilities\n    probs = [prob_0_pass, prob_1_pass, prob_2_pass, prob_3_pass]\n\n    # Get the number of people with the highest probability of passing\n    most_likely_pass = probs.index(max(probs))\n\n    return most_likely_pass\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == (D // 4) and D % 4 == 0:\n                B = A - 1\n                if B in [A, D]:\n                    continue\n                C = (4 * D) - 1\n                if B == C or A == C or C >= 10 or C == 0:\n                    continue\n                ABCD = 1000 * A + 100 * B + 10 * C + D\n                DCBA = 1000 * D + 100 * C + 10 * B + A\n                if ABCD * 4 == DCBA:\n                    return ABCD\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # Total length in meters\n    total_length_cm = total_length_m * 100  # Convert total length to centimeters\n    \n    # Let the length of the shorter piece be x cm.\n    # Then the length of the longer piece is 2x cm.\n    # The sum of their lengths is the total length: x + 2x = total_length_cm\n    # Thus, 3x = total_length_cm\n    # We find x by dividing the total length by 3.\n    shorter_piece_length_cm = total_length_cm / 3\n    longer_piece_length_cm = 2 * shorter_piece_length_cm  # The longer piece is twice the length of the shorter piece\n    \n    return longer_piece_length_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    # Given quantities\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n    \n    # Calculate gallons used\n    gallons_used = miles_driven / miles_per_gallon\n    \n    # Calculate litres used\n    litres_used = gallons_used * litres_per_gallon\n    \n    # Calculate the total cost\n    total_cost = litres_used * cost_per_litre\n    \n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # Since the total number of coins that can be picked up in each turn is 66 (1+2+...+11),\n    # Jack should ensure that after his first move, the number of coins left is a multiple\n    # of 66 such that Ken is forced to pick up the last coin.\n    # Starting with 2015 coins, we subtract multiples of 66 until we get a number that\n    # is less than or equal to 11 (since Jack can only pick at most 11 coins).\n    \n    remaining_coins = 2015\n    multiple_of_66 = 66 * (remaining_coins // 66)\n    \n    # Calculate how many coins Jack should pick up initially to make the remaining\n    # coins a multiple of 66.\n    first_pick = remaining_coins - multiple_of_66\n    \n    # If the first_pick is within the allowed range, Jack can pick up that many coins.\n    # Otherwise, he needs to pick up a number of coins such that the remaining\n    # number will be one more than a multiple of 66, to make Ken pick the last coin.\n    if 1 <= first_pick <= 11:\n        return first_pick\n    else:\n        first_pick = (remaining_coins - 1) - 66 * ((remaining_coins - 1) // 66)\n        return first_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, we know that b = 0.\n    b = 0\n    \n    # We can use the point (4, 8) to determine the slope m.\n    # slope m is change in y divided by change in x (rise over run)\n    # point (4, 8) implies that when x = 4, y = 8.\n    x1, y1 = 0, 0\n    x2, y2 = 4, 8\n    m = (y2 - y1) / (x2 - x1)\n    \n    # Now we can write the equation as y = mx\n    equation = f\"y = {m}x\"\n\n    return equation\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    num = 1200031093\n    return num\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    white_in_pattern = 2\n    total_in_pattern = 5\n    white_balls = 92\n\n    # Calculate full patterns\n    full_patterns = white_balls // white_in_pattern\n\n    # Calculate total balls for full patterns\n    total_balls = full_patterns * total_in_pattern\n\n    # Calculate remaining white balls\n    remaining_white_balls = white_balls % white_in_pattern\n\n    # Add remaining balls if necessary\n    if remaining_white_balls > 0:\n        # As soon as there's one white ball, there will be three more balls added (●○ pattern)\n        total_balls += 3\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    # Loop over all hours (0-23) and minutes (0-59)\n    for hour in range(24):\n        for minute in range(60):\n            # Convert hours and minutes into strings and concatenate\n            time_str = f\"{hour:02d}{minute:02d}\"\n            # Count the occurrences of '4' in the time string\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def sum_of_digits(number):\n        return sum(int(digit) for digit in str(number))\n\n    def odd_digit_sum(number):\n        return sum(int(digit) for digit in str(number) if int(digit) % 2 != 0)\n\n    ans = odd_digit_sum(2015) - sum_of_digits(2015 // 100)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let x be the age of the youngest dwarf\n    # Then, the ages of the youngest three will be x, x+1, x+2\n    # Their sum is x + (x+1) + (x+2) = 42\n    \n    # Let's solve this equation for x\n    x = (42 - 1 - 2) // 3  # Subtracting the +1 and +2 from the sum and dividing by 3\n\n    # Now, the age of the oldest one will be x + 6 (since there are seven consecutive years)\n    oldest_age = x + 6\n\n    return oldest_age\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if pears % 6 == 2 and (pears + 3) % 7 == 0:\n            break\n    return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    sharpened_length_mm = 4\n\n    # Convert the sharpened length from mm to cm\n    sharpened_length_cm = sharpened_length_mm / 10.0\n\n    # Calculate the new length after sharpening\n    new_length = original_length_cm - sharpened_length_cm\n\n    return new_length\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols representing the number of stickers each originally had\n    sam, peter, john = symbols('sam peter john')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(sam, 7/5 * peter)  # sam and peter had stickers in the ratio 7:5\n    equation2 = Eq(0.8 * john, (0.2 * sam) + (0.2 * peter)) # john's stickers increased by 80%\n    equation3 = Eq(sam - 0.2 * sam, john + 20) # Sam had 20 stickers more than John after giving 20% to John\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n\n    # Return the number of stickers Peter had initially\n    return solutions[peter]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Speeds and distances for each stage\n    speed1, distance1 = 7, 420\n    speed2, distance2 = 5, 620\n    speed3 = 8\n    total_distance = 1200\n    \n    # Calculate the time taken for each stage\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    # Calculate remaining distance for stage 3\n    distance3 = total_distance - distance1 - distance2\n    time3 = distance3 / speed3\n    \n    # Total time\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    total_current_score = 4 * 89\n    desired_average = 95\n    test_score_full = 100\n    \n    # Assuming Paul can get full marks in all subsequent tests\n    # The formula to calculate total tests needed to reach the desired average is:\n    # total_current_score + (number_of_tests * test_score_full) = (4 + number_of_tests) * desired_average\n    # Solving for number_of_tests:\n    number_of_tests = 0\n    while True:\n        if (total_current_score + (number_of_tests * test_score_full)) >= (4 + number_of_tests) * desired_average:\n            break\n        number_of_tests += 1\n    \n    return number_of_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of $10 notes be x, and the number of $2 notes be y\n    x, y = symbols('x y')\n\n    # At the beginning, David had a total of 72 notes\n    total_notes = Eq(x + y, 72)\n\n    # He spent 90% of the $10 notes and 75% of the $2 notes on a gift\n    # Therefore, he is left with 10% of the $10 notes and 25% of the $2 notes\n    # After spending, he is left with twice as many $10 notes as $2 notes\n    left_notes = Eq(0.1 * x, 2 * 0.25 * y)\n\n    # Solve the equations to find the number of each type of note\n    solutions = solve((total_notes, left_notes), (x, y))\n\n    num_10_notes = solutions[x]\n    num_2_notes = solutions[y]\n\n    # Calculate the amount spent on the gift\n    spent_10_notes = 0.9 * num_10_notes * 10\n    spent_2_notes = 0.75 * num_2_notes * 2\n    gift_cost = spent_10_notes + spent_2_notes\n\n    return gift_cost\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    # Let a, b, and c be the reciprocal of the hours required by hoses A, B, and C alone to fill the pool\n    # i.e., if Hose A fills the pool in x hours, a = 1/x.\n    # The sum of their reciprocals represents the part of the pool they fill together in one hour.\n    \n    # For A and B: a + b = 1/9 \n    # For A and C: a + c = 1/12\n    # For B and C: b + c = 1/18\n    \n    # From the above equations, we need to find the value of a + b + c\n\n    # Adding all three equations, we get 2(a + b + c) = 1/9 + 1/12 + 1/18\n    # Therefore, a + b + c = (1/9 + 1/12 + 1/18) / 2\n    ab_c = (1/9 + 1/12 + 1/18) / 2\n    \n    # Since a + b + c is the part of pool filled by A, B, and C in one hour\n    # The total time taken to fill the pool with all three hoses on is the reciprocal of a + b + c\n    total_time = 1/ab_c\n\n    return total_time\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    \n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # As the worst case, you take exactly one marker of each color before you take a second marker of the same color.\n    # There are 3 different colors.\n    # After you have taken one marker of each color (3 markers), the next one you take must be the same color as one you already have.\n    num_colors = 3\n    num_markers_to_ensure_pair = num_colors + 1\n\n    return num_markers_to_ensure_pair\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    # Let x be the number of $2 notes and y be the number of $5 notes\n    # We have two equations based on the problem:\n    # x + y = 58 (Total number of notes)\n    # 2x + 5y = 164 (Total value of the notes)\n    # We can solve these two linear equations to find the values of x and y\n\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 58)\n    equation2 = Eq(2*x + 5*y, 164)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]  # Returning the number of $5 notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    common_difference = 120 - 105  # Calculate the common difference between terms\n    first_term = 105 - (7 - 1) * common_difference  # Find the first term based on the 7th term\n    hundredth_term = first_term + (100 - 1) * common_difference  # Calculate the 100th term\n    return hundredth_term\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    marbles = [2 * i for i in range(1, 9)]  # Smallest distinct even numbers for 8 boxes\n    marbles.append(marbles[-1])  # Two boxes with the same number of marbles\n    marbles_sum = sum(marbles) + 2  # The smallest even number for the last box\n    return marbles_sum\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(4, 9))\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    # Applying Pigeonhole Principle\n    min_pigeons_in_most_populated_cage = (total_pigeons // total_cages) + (1 if total_pigeons % total_cages > 0 else 0)\n    \n    return min_pigeons_in_most_populated_cage\n    \nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    parterres = 1007\n    sprinklers = parterres - 1\n    return sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    correct_answer = total_mass\n    james_error = False if total_mass == 3 else True\n\n    return (james_error, correct_answer)\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    # Let's denote:\n    # x = price of one muffin\n    # 3x = price of one cupcake since it costs thrice as much as a muffin\n\n    # Cellina spends 5/9 of her money on initial purchase (cupcakes + muffins)\n    # and 1/6 of her money on additional cupcakes\n    # Total money spent on cupcakes is given as $187.50\n    # Initial purchase on cupcakes is 36 cupcakes which is 36 * 3x\n    \n    # From the total amount spent on cupcakes, we know:\n    # 36 * 3x + (1/6 of total money) = 187.50\n    # 108x + (1/6 of total money) = 187.50\n    # We also know that 32 muffins are bought initially: 32x\n    # So the total initial purchase: 108x + 32x = (5/9 of total money)\n    # Which means: 140x = (5/9 of total money)\n    \n    # Let's denote total money as 'y':\n    # 108x + y/6 = 187.50\n    # 140x = 5/9 y\n    \n    # We can express 'x' from the second equation:\n    # x = (5y / 9) / 140\n    # x = y / 252\n    \n    # Replace 'x' in the first equation:\n    # 108(y / 252) + y/6 = 187.50\n    # 108y / 252 + y/6 = 187.50 -> Calculate common denominator for y terms:\n    # (108y + 42y) / 252 = 187.50\n    # 150y = 187.50 * 252\n    # y = 187.50 * 252 / 150\n\n    y = 187.50 * 252 / 150\n\n    # Now we plug y back into the equation for x\n    x = y / 252\n\n    # And the total amount Cellina spent on muffins initially is\n    # 32x since she bought 32 muffins\n    total_spent_on_muffins = 32 * x\n\n    return total_spent_on_muffins\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mary, alexis, charlotte = symbols('mary alexis charlotte')\n    \n    # Mary had 7/5 as many stickers as Alexis\n    equation1 = Eq(mary, (7/5) * alexis)\n    \n    # Mary and Alexis each gave 20% of their stickers to Charlotte\n    equation2 = Eq(mary - (mary * 0.20), mary - (alexis * 0.20) - 20)\n    \n    # Charlotte’s stickers increased by 80%\n    equation3 = Eq(charlotte + (charlotte * 0.80), mary * 0.20 + alexis * 0.20)\n    \n    # Mary had 20 stickers more than Charlotte in the end\n    equation4 = Eq(mary - (mary * 0.20), charlotte + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (mary, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_length = symbols('total_length')\n    first_day = 8\n    second_day = 4 + total_length / 6\n    two_days = (5 / 12) * total_length\n    \n    equation = Eq(first_day + second_day, two_days)\n    \n    total_length_value = solve(equation, total_length)\n    \n    return total_length_value[0]\n    \nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['3', '4', '5']\n    all_combinations = set(permutations(digits, 3))\n    count = len(all_combinations)\n\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Fraction left after giving away 440 bottle caps\n    fraction_left = 5 / 9\n\n    # Total collection initially (before giving away 440 bottle caps)\n    initial_collection = 440 / (1 - fraction_left)\n\n    return int(initial_collection)\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n\n    # Since wheat is planted at each corner, we have to subtract the 4 corner wheat from the total\n    # The remaining wheat will be evenly distributed along the sides (minus the corners)\n    # So, we'll have (num_wheat_along_length - 1) * 2 + (num_wheat_along_width - 1) * 2 = total_wheat - 4\n    # We can simplify this to 2*num_wheat_along_length + 2*num_wheat_along_width = total_wheat + 4 - 4\n    # And then further to num_wheat_along_length + num_wheat_along_width = total_wheat / 2\n\n    # The total number of intervals will be num_wheat_along_length - 1 on the length side\n    # and num_wheat_along_width - 1 on the width side (not including corners)\n\n    num_wheat_along_length = ((total_wheat // 2) - 1)\n    num_wheat_along_width = ((total_wheat // 2) - 1)\n    \n    # Calculating the distance between wheats along the length and width\n    dist_between_wheat_length = length / num_wheat_along_length\n    dist_between_wheat_width = width / num_wheat_along_width\n\n    # Assuming the distance between every 2 wheat is the same on length and width (for uniform distribution)\n    dist_between_wheat = min(dist_between_wheat_length, dist_between_wheat_width)\n\n    return dist_between_wheat\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        str_num = str(num)\n        digits_sum = sum(int(digit) for digit in str_num)\n        if str_num.endswith(\"35\") and digits_sum == 35:\n            return num\n        num += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    total_height = sum(heights)\n    average_height = total_height / len(heights)\n    \n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # total days\n    total_days = 8\n    # total pine nuts collected\n    total_pine_nuts = 112\n    # nuts collected on a sunny day\n    sunny_nuts = 20\n    # nuts collected on a rainy day\n    rainy_nuts = 12\n    \n    # let's assume x is the number of sunny days and y is the number of rainy days\n    x, y = symbols('x y')\n    \n    # two equations are formed based on the problem statement\n    equation1 = Eq(x + y, total_days) # Equation for the total number of days\n    equation2 = Eq(sunny_nuts*x + rainy_nuts*y, total_pine_nuts) # Equation for the total number of pine nuts\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # since we need the number of rainy days\n    return solutions[y]\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pounds\n    one_botle_price = 0.15\n    two_botles_price = 0.28\n    five_botles_price = 0.60\n    \n    min_cost = float('inf')  # Initialize with a large number\n\n    # Iterate through all possible combinations of buying packs of 1, 2, and 5 botles\n    for five_packs in range(0, 17 // 5 + 1):  # The maximum possible number of 5-botle packs\n        for two_packs in range(0, (17 - 5 * five_packs) // 2 + 1):  # The maximum possible number of 2-botle packs\n            one_packs = 17 - 5 * five_packs - 2 * two_packs  # The remaining count of botles to be bought as single packs\n            total_cost = one_packs * one_botle_price + two_packs * two_botles_price + five_packs * five_botles_price\n            min_cost = min(min_cost, total_cost)  # Update if a new minimum cost is found\n\n    return round(min_cost, 2)  # Round to the nearest penny\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # Number of players\n    players = 4\n\n    # Since this is a knockout tournament, each round eliminates one player.\n    # A knockout tournament of n players will always have n - 1 games, as each game\n    # eliminates one player until only one is left.\n    rounds = players - 1\n\n    return rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    both_correct = 7\n    first_question_correct = 10\n    second_question_correct = 15\n\n    only_one_correct = (first_question_correct - both_correct) + (second_question_correct - both_correct)\n\n    return only_one_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in m/s\n    time = 5  # time in seconds\n\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    fib = [1, 1]\n    while len(fib) < 8:\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1]\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + 26, second_hour)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n\n    for num_brushes in range(total_spent // brush_price):\n        if (total_spent - num_brushes * brush_price) % towel_price == 0 and num_brushes * brush_price < 10:\n            return num_brushes\n\n    return None\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_days = 5\n    total_bears = 35\n    # If we designate the first day's teddy bears as 'a', then \n    # a, a + 2, a + 4, a + 6, a + 8 are the number of teddy bears made each day.\n    # The sum of an arithmetic series is n/2 * (first_term + last_term)\n    # Here we solve for 'a', the number of teddy bears made on the first day.\n    last_day = total_days*2 - 2  # The difference between the first day and last day\n    first_day = (2 * total_bears / total_days) - last_day\n    fifth_day_bears = first_day + 4*2  # The first day bears plus the difference for four days\n    return int(fifth_day_bears)\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    result_number = 71\n    initial_number = (result_number - 8) / 7\n    return initial_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "def solution():\n    from fractions import Fraction\n    \n    ans = Fraction('0.49').limit_denominator()\n    return ans\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 90)\n    equation2 = Eq(rick, morty * 9)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    # There are two cases to consider\n    # Case 1: The first digit is 1 or 8 (2 possibilities).\n    # The second digit can be either of the two remaining numbers (2 possibilities).\n    # The third digit is the remaining number (1 possibility).\n    case1 = 2 * 2 * 1\n\n    # Case 2: The first digit is 0 (not allowed for a three-digit number).\n    # This case is not possible so it will have 0 outcomes.\n\n    # Total different three-digit numbers = case1 (since case2 contributes 0)\n    total = case1\n\n    return total\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    expressions = [\n        '285+15/5-2',                 # Original expression\n        '(285+15)/5-2',               # Bracket around first two terms\n        '285+(15/5)-2',               # No need, as it's same as original expression\n        '(285+15)/(5-2)',             # Bracket around first two terms and last two terms\n        '285+15/(5-2)',               # Bracket around last two terms\n        '(285+15/5)-2',               # Bracket around first term and division\n        '285+(15/5-2)',               # Bracket around division and subtraction\n        '285+((15/5)-2)',             # Bracket around division and subtraction with nested brackets\n        '(285+15/5)-2',               # Same as before without effect\n        '(285+(15/5))-2',             # No effect with redundant brackets\n        '(285+(15/5-2))'              # Bracket around addition of first term and rest\n    ]\n\n    results = set()\n    for expr in expressions:\n        results.add(eval(expr))\n    \n    return len(results)\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n    \n    # To ensure a blue marble is drawn, we first draw all pink and grey marbles.\n    # After that, the next marble we draw must be blue.\n    ans = pink + grey + 1\n    \n    return ans\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n\n    price_of_computer = sales_tax_paid / sales_tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from math import gcd\nfrom itertools import permutations\n\ndef solution():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    count = 0\n    \n    for perm in permutations(nums):\n        is_coprime_adjacent = all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm) - 1))\n        if is_coprime_adjacent:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    percentage = (3/10) / (6/7) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(b, g - 30) # There were 30 less boys than girls\n    equation2 = Eq((3/5)*b, (5/8)*g) # After a fraction of both left, an equal number remained\n\n    # Use sympy's solve function to find a solution to the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Return the number of boys at the beginning\n    return solutions[b]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n    \n    # Original condition: frogs are 9 more than dragonflies\n    original_condition = Eq(frogs_begin, dragonflies_begin + 9)\n\n    # After the magic show, there are 11 frogs and 10 dragonflies\n    magic_show_condition = Eq(frogs_begin - (10 - dragonflies_begin), 11)\n\n    solutions = solve((original_condition, magic_show_condition), (frogs_begin, dragonflies_begin))\n\n    return solutions[frogs_begin]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    result = 300 - 9 - 19 - 29 - 39 - 49 - 59\n    return result\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Define the original expression\n    a = 285\n    b = 15\n    c = 5\n    d = 2\n    \n    # Calculate all possible expressions with one or two pairs of brackets\n    results = set()\n    \n    # One pair of brackets\n    results.add(a + (b / c) - d)\n    results.add(a + b / (c - d))\n    results.add((a + b) / c - d)\n    results.add((a + b / c) - d)\n    results.add(a + (b / (c - d)))\n    \n    # Two pairs of brackets (no need as it doesn't change the order of operations from one pair of brackets)\n    \n    # Count the different results\n    ans = len(results)\n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    total_apples = amy_apples + john_apples\n    apples_each_after_sharing = total_apples // 2\n\n    apples_amy_has_to_give = amy_apples - apples_each_after_sharing\n\n    return apples_amy_has_to_give\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(100):\n        if (24 - i) / 4 == 4:\n            ans = i\n            return ans\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1) ** (i % 2) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    \n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')  # The amount of 15% sugar water to be found\n    \n    # Equation based on the concentration of sugar in the final mixture\n    equation = Eq((2 * 0.45) + (x * 0.15), (2 + x) * 0.25)\n    \n    # Solve the equation for x\n    amount = solve(equation, x)\n    \n    return amount[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n    \n    equation1 = Eq(johnson + vicky, 48)\n    equation2 = Eq(vicky + 8, johnson - 8 - 2)\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n    \n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of kids and y be the total number of candies.\n    x, y = symbols('x y')\n\n    # If every kid eats 18 candies, we need 12 more candies.\n    equation1 = Eq(x * 18 + 12, y)\n\n    # If every kid eats 15 candies, the candies are just enough for x + 2 kids.\n    equation2 = Eq((x + 2) * 15, y)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The number of candies is given by y.\n    return solutions[y]\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(1/A + 1/B, 1/3)\n    equation2 = Eq(1/B + 1/C, 1/4)\n    equation3 = Eq(1/A + 1/C, 1/8)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    A, B, C = solutions[A], solutions[B], solutions[C]\n    \n    time_for_all = 1 / (1/A + 1/B + 1/C)\n    \n    return time_for_all\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    \n    girls = boys / boy_to_girl_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2018):\n        total_sum += int(\"2\" * i)\n\n    # Get the last 5 digits of S\n    last_five_digits = str(total_sum)[-5:]\n\n    ans = sum([int(digit) for digit in last_five_digits])\n    return ans\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    number_after_adding = 77 // 7\n    original_number = number_after_adding - 6\n    return original_number\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of cookies Sam and Tim had as s and t respectively\n    s, t = symbols('s t')\n\n    # After Sam eats 1/4 of her cookies and Tim buys 1/5 more, we get the following equations\n    equation1 = Eq(s - (1/4)*s + t + (1/5)*t, 1170)\n    equation2 = Eq(t + (1/5)*t - (s - (1/4)*s), 663)\n\n    # Solve the system of equations for s and t\n    solutions = solve((equation1, equation2), (s, t))\n\n    # Calculate the amount Sam ate which is 1/4 of her initial amount of cookies\n    cookies_eaten = solutions[s] / 4\n\n    return int(cookies_eaten)\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    total_kg_in_six_days = 24\n    per_day_kg = total_kg_in_six_days / 6\n    total_kg_in_eight_days = per_day_kg * 8\n    return total_kg_in_eight_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for number in range(200, 301):\n        if all(number % x == 1 for x in [2, 3, 4, 6]) and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Initial number of stamps\n    sally_stamps = 40\n    ting_stamps = 32\n\n    # Let x be the number of stamps Sally gave to Ting\n    # After giving x stamps to Ting, Sally has 40 - x stamps\n    # Ting has 32 + x stamps after receiving x stamps\n    # The ratio of their stamps is now 1:2\n    # (40 - x) / (32 + x) = 1/2\n    # Solving for x gives us the number of stamps Sally gave to Ting\n    # which also allows us to calculate the final number of stamps Ting has.\n    \n    # Multiply both sides by 2*(32 + x) to get rid of the fraction\n    # 2 * (40 - x) = 32 + x\n    # 80 - 2x = 32 + x\n    # 80 - 32 = 2x + x\n    # 48 = 3x\n    # x = 48 / 3\n    x = 48 // 3\n\n    # Now calculate the number of stamps Ting has in the end\n    ting_final_stamps = ting_stamps + x\n    return ting_final_stamps\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_rate = 1 / 18\n    combined_rate = 1 / 6\n    tom_rate = combined_rate - jerry_rate\n    tom_time = 1 / tom_rate\n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    # Define the time walked with the first speed and the second speed\n    first_speed_time = 10 # in minutes\n    second_speed_time = symbols('t') # in minutes\n\n    # Calculate the distance walked at each speed\n    first_distance = 150 * first_speed_time\n    second_distance = (150 + 50) * second_speed_time\n\n    # Equation for the total distance\n    total_distance_eq = Eq(first_distance + second_distance, 3700)\n\n    # Solve for the time walked at the second speed\n    second_speed_time_solution = solve(total_distance_eq, second_speed_time)\n\n    # Calculate the total time walked in the park\n    total_time_walked = first_speed_time + second_speed_time_solution[0]\n\n    return total_time_walked\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n\n    total_candy = sissy_candy + lily_candy\n\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    budget = 20\n    packet_price = 4\n    sweets_per_packet = 8\n\n    packets_bought = budget // packet_price\n    free_sweets = packets_bought // 2\n\n    total_sweets = (packets_bought * sweets_per_packet) + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # since the children must get different amounts and at least 1 piece,\n    # the least amount of candies the first 7 children can get are the sums of the first 7 positive integers\n    min_sum = sum(range(1, 8))  # This is 1+2+3+...+7\n\n    # The last (8th) child will get the remaining candies\n    max_candies_for_last_child = 88 - min_sum\n\n    return max_candies_for_last_child\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    pink = 5\n    purple = 7\n    orange = 8\n    total_counters = pink + purple + orange\n    \n    # Original probability of drawing a pink\n    original_prob = pink / total_counters\n    \n    # We want to double this probability\n    double_prob = original_prob * 2\n    \n    # Let's denote x as the number of extra pink counters to add to reach the doubled probability\n    # The new probability will then be (pink + x) / (total_counters + x)\n    # Set up the equation and solve for x\n    x = symbols('x')\n    equation = Eq((pink + x) / (total_counters + x), double_prob)\n    \n    extra_counters = solve(equation, x)\n    \n    # Return only the positive solution (as you cannot add negative counters)\n    for solution in extra_counters:\n        if solution > 0:\n            return solution\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - 1/4\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    # Let the initial number of girls be x\n    # Then the initial number of boys is x + 0.40x = 1.40x\n    # After 24 boys and 24 girls leave:\n    # Number of girls left is x - 24\n    # Number of boys left is 1.40x - 24\n    # There are now 50% (or 0.50 times) more boys than girls:\n    # So, 1.40x - 24 = (x - 24) + 0.50(x - 24)\n    # Now, we solve for x:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1.40 * x - 24, (x - 24) + 0.50 * (x - 24))\n\n    initial_girls = solve(equation, x)[0]\n    initial_boys = 1.40 * initial_girls\n\n    return int(initial_boys)\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        while n > 0:\n            n //= 5\n            count += n\n        return count\n\n    num = factorial(16)\n    ans = count_trailing_zeros(16)\n\n    return ans\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # If Cindy picks 1 sock of each color, she will have 3 socks.\n    # The fourth sock she picks must create a pair of one color.\n    # However, this is only one pair.\n    # In the worst case scenario, she picks the following socks: B, G, R, B, G, R, (with B, G, R representing the colors)\n    # At this point, she has two single socks of each color, and no pairs.\n    # The next sock she picks must create a pair, so she will have one pair. \n    # To guarantee the second pair, she must pick at least two more socks.\n    # Since she might pick two socks of the remaining two colors, she must pick one more to have at least 2 pairs of the same color.\n    min_socks = 3 + 4 + 2 + 1\n    return min_socks\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    # Initially, the number of cupcakes and muffins is the same\n    equation1 = Eq(cupcakes, muffins)\n\n    # After selling, the muffins left is twice the number of cupcakes left\n    equation2 = Eq(muffins - 12, 2 * (cupcakes - 60))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n\n    total = solutions[cupcakes] + solutions[muffins]\n    return total\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    \n    solved = solve(equation, x)\n    \n    return solved[0]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for daily pocket money for George and Helen\n    george, helen, days = symbols('george helen days')\n    \n    # George receives $3 more pocket money than Helen every day\n    equation1 = Eq(george, helen + 3)\n    \n    # Each spends $5 a day\n    spending = 5\n    \n    # Helen saves $60 in total\n    equation2 = Eq((helen - spending) * days, 60)\n    \n    # George saves $90 more than Helen\n    equation3 = Eq((george - spending) * days, 60 + 90)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (george, helen, days))\n    \n    return solutions[helen]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_los_angels = 12.25\n    los_angels_to_shanghai = shanghai_to_los_angels + 90 / 60  # Converting minutes to hours by dividing by 60\n\n    round_trip_time = shanghai_to_los_angels + los_angels_to_shanghai\n    \n    return round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    return 278 + 127\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve    \n    \n    eddi, wiya = symbols('eddi wiya')\n    equation1 = Eq(eddi/wiya, 3/2)\n    equation2 = Eq((eddi + 4)/wiya, 8/5)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[wiya]\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # In the first 2 hours, Linda drove at a speed of 40 km/h\n    distance_initial = 2 * 40  # Distance covered in the first 2 hours\n    \n    # For the remaining 280 km, Linda drove at a speed of 70 km/h\n    distance_remaining = 280\n    time_remaining = distance_remaining / 70  # Time taken to cover the remaining distance\n    \n    # Total distance covered\n    total_distance = distance_initial + distance_remaining\n    \n    # Total time taken\n    total_time = 2 + time_remaining\n    \n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 4 * four_page_letters + 3 * three_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    return 8 * 10**2\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # a is the first term, d is the common difference\n    # 9th term: a + 8d\n    # 15th term: a + 14d\n    equation1 = Eq(a + 8*d, a + 14*d + 18)\n\n    # 20th term: a + 19d\n    # 12th term: a + 11d\n    equation2 = Eq(a + 19*d + a + 11*d, 88)\n\n    # solve the system of equations for a and d\n    solutions = solve((equation1, equation2), (a, d))\n\n    # 32nd term: a + 31d\n    a_value = solutions[a]\n    d_value = solutions[d]\n    term_32nd = a_value + 31*d_value\n\n    return term_32nd\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "from sympy import lcm\n\ndef solution():\n    days_in_march = 31 # there are 31 days in March\n    lcm_days = lcm(25, 20)\n\n    next_start_day = 1 + lcm_days # since we start counting from March 1st\n    month = next_start_day // days_in_march\n    day = next_start_day % days_in_march\n\n    # if the remainder is 0, we need to adjust the day to the last of the previous month\n    if day == 0:\n        month -= 1\n        day = days_in_march\n\n    next_month = \"March\" if month == 1 else \"April\"\n\n    return f'{day} {next_month}'\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # We will think of this as placing the 4 dancing performances in the slots created by\n    # the 6 singing performances. There are 7 such slots because we can put a dancing performance\n    # at the beginning, in between the singing performances, or at the end.\n    \n    # We have to choose 4 slots from the 7 available to place the dancing performances.\n    slots_for_dancing = factorial(7) // (factorial(4) * factorial(7 - 4))\n    \n    # Now for each of these slot arrangements, the singing and dancing performances can be \n    # permuted among themselves.\n    perm_singing = factorial(6)  # 6 singing performances\n    perm_dancing = factorial(4)  # 4 dancing performances\n    \n    # The total arrangements are the product of these possibilities.\n    total_arrangements = slots_for_dancing * perm_singing * perm_dancing\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    A = 1\n    a1 = A - 1/2\n    a2 = A - 2/3\n    a3 = A - 7/8\n    a4 = A - 29/30\n    a5 = A - 139/144\n    a6 = A - 839/840\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n    \n    m, n = a0.as_integer_ratio()\n    return m + n\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # Analyze the clues given by the teacher\n    # \"8765\" has two correct digits but in the wrong positions.\n    # \"1023\" has two correct digits but in the wrong positions.\n    # \"8642\" has two correct digits in the right positions.\n    # \"5430\" has no correct digit.\n\n    # From \"5430\", we can conclude that none of these digits (5, 4, 3, 0) is in the answer.\n    wrong_digits = {'5', '4', '3', '0'}\n\n    # From \"8765\" and \"1023\", \n    # we can conclude that the two correct digits can be found in both numbers but are in different positions,\n    # so we can focus on the common digits with different positions: \"1\" and \"2\" from \"1023\"\n    common_digits1 = {'8', '7', '6', '5'}\n    common_digits2 = {'1', '0', '2', '3'}\n    correct_digits_but_wrong_positions = common_digits1.intersection(common_digits2)\n\n    # From \"8642\", we can conclude that \"8\" and \"6\" are correct digits in the right positions.\n    correct_digits_and_positions = {'8', '6'}\n\n    # The final answer consists of four different digits, two of them are \"8\" and \"6\" from \"8642\".\n    for i in range(10):\n        for j in range(10):\n            # Skip if any digit is not supposed to be in the number\n            if str(i) in wrong_digits or str(j) in wrong_digits:\n                continue\n            if str(i) in correct_digits_and_positions or str(j) in correct_digits_and_positions:\n                continue\n\n            # Build a potential number\n            potential_number = '8' + str(i) + '6' + str(j)\n\n            # Check if the number has the correct digits but in wrong positions compared to \"8765\" and \"1023\"\n            # The common digits \"1\" and \"2\" should not be in the same position as in \"8765\" and \"1023\"\n            if (potential_number[1] == '1' and potential_number[3] == '2') or \\\n               (potential_number[1] == '2' and potential_number[3] == '1'):\n                # Check if the potential number satisfies \"8642\" conditions\n                if potential_number[0] == '8' and potential_number[2] == '6':\n                    return potential_number\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    # Equation for the mistake\n    mistake = (x / 4) - 25\n    # Equation for what Aiden should have done\n    correct = (x * 4) + 25\n\n    # Solving for x when the mistake equals 2021\n    mistaken_value = solve(mistake - 2021, x)\n\n    # Calculating the correct answer with the obtained x\n    correct_answer = correct.subs(x, mistaken_value[0])\n\n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    factors = [75, 56, 12, 105]\n    two_count = 0\n    five_count = 0\n    \n    for factor in factors:\n        while factor % 2 == 0:\n            two_count += 1\n            factor //= 2\n        while factor % 5 == 0:\n            five_count += 1\n            factor //= 5\n    \n    ans = min(two_count, five_count)\n    \n    return ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let the number of books Donna has be d\n    # Then Chloe has 4d books\n    # According to the problem, Chloe has 816 more books than Donna\n    # So, 4d - d = 816\n    # Solve for d\n    d = 816 // 3  # Dividing both sides by 3\n\n    return d\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    # Equation: (x + 4) / 8 = 3\n    # Multiply both sides by 8 to isolate x\n    x = 3 * 8 - 4\n    return x\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    adults, children, boys, girls = symbols('adults children boys girls')\n\n    # Equation 1: adults = 3 * children (three times as many adults as children)\n    eq1 = Eq(adults, 3 * children)\n\n    # Equation 2: boys = 2 * girls (twice as many boys as girls)\n    eq2 = Eq(boys, 2 * girls)\n\n    # Equation 3: adults = girls + 176 (there were 176 more adults than girls)\n    eq3 = Eq(adults, girls + 176)\n\n    # Equation 4: adults + children + boys + girls = total people at the concert\n    # We'll use this later to find the total\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (adults, children, boys, girls))\n\n    # Calculate the total number of people\n    total_people = solutions[adults] + solutions[children] + solutions[boys] + solutions[girls]\n\n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # The ones digit of a number 'n' raised to any power repeats in a cycle.\n    # We need only the cycle of 9 to solve this.\n    # The cycle for the ones digits of powers of 9 is: 9, 1, 9, 1, ...\n    # Since 99 is odd, the ones digit of 999^99 is the first element of the cycle, which is 9.\n    \n    return 9\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n    \n    # Loop through a range of numbers to check for prime 'a'\n    # Since 'a' and 'b' are prime, the loop starts at 2, the smallest prime number\n    for a in range(2, 193):\n        if isprime(a):\n            # Calculate 'b' based on the current 'a'\n            b = (193 - 3*a) / 11\n            \n            # Check if 'b' is an integer and a prime number\n            if b.is_integer() and isprime(b):\n                # Return the sum of 'a' and 'b'\n                return int(a + b)\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # Iterate through all possible values of a and b to find the solution\n    for a in range(1, 10):  # a cannot be 0 as it is a tens digit\n        for b in range(10):  # b can be from 0 to 9\n            if 7 * (10 * a + b) == 100 * a + b:\n                return 10 * a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The list of tuples represents the remainders (a) and the moduli (n) as per the Chinese Remainder Theorem (CRT)\n    # x ≡ 1 (mod 4), x ≡ 2 (mod 5), x ≡ 4 (mod 7)\n    congruences = [(1, 4), (2, 5), (4, 7)]\n\n    # Solve the system of congruences\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one banana and one apple\n    banana, apple = symbols('banana apple')\n\n    # Equation for Ellie: 2 bananas + 3 apples = £1.50\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    # Equation for Beth: 3 bananas + 2 apples = £1.45\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the price for 1 banana and 1 apple\n    total_price = solutions[banana] + solutions[apple]\n\n    return total_price\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Sum of the first part 1+2+3+...+30\n    sum_first_part = sum(range(1, 31))\n\n    # Sum of the second part 29+28+...+2+1\n    sum_second_part = sum(range(1, 30))\n\n    # Total sum\n    total_sum = sum_first_part + sum_second_part\n\n    return total_sum\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    houses_per_worker_per_day = (14 / 3) / 4\n    houses_built = houses_per_worker_per_day * 9 * 2\n    return int(houses_built)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    gcd_12_15 = gcd(12, 15)\n    ans = gcd(gcd_12_15, 60)\n    return ans\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    min_product = None\n    for bob in range(1, 28):  # Upper bound for age is 28 since the sum of ages is 28\n        for rex in range(1, bob):  # Rex is younger than Bob\n            fido = 28 - (bob + rex)  # Calculate Fido's age by subtracting from total sum\n            if fido > 0 and fido < rex:  # Fido is the youngest and all ages are positive\n                product = bob * rex * fido\n                if min_product is None or product < min_product:\n                    min_product = product\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    people = symbols('people')\n    children_fraction = 2/5\n    women_fraction = 1/4\n    men_fraction = 1 - (children_fraction + women_fraction)\n    \n    equation = Eq(children_fraction * people, men_fraction * people + 20)\n    \n    total_people = solve(equation, people)\n    \n    return total_people[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the cost of one ball and the amount of money Adam has\n    cost_per_ball, money = symbols('cost_per_ball money')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(money - 5 * cost_per_ball, 15)\n    equation2 = Eq(money - 8 * cost_per_ball, -12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_per_ball, money))\n\n    return solutions[cost_per_ball]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    # HCF is 75, so both A and B must be multiples of 75.\n    # The largest 3-digit multiple of 75 is 975 (13 * 75).\n    # Iterate over possible values of A and B, ensuring they fulfill the given conditions.\n    max_sum = 0\n    for A in range(975, 74, -75):\n        for B in range(A - 75, 74, -75):\n            # Convert numbers to strings to check if they have two equal digits\n            strA = str(A)\n            strB = str(B)\n            if len(set(strA)) == 2 or len(set(strB)) == 2:\n                if len(set(strA).intersection(set(strB))) == 2:\n                    max_sum = max(max_sum, A + B)\n    \n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9  # 9 cm after the second bounce\n    height_after_first_bounce = height_after_second_bounce * 3  # Calculate the height after the first bounce\n    initial_height = height_after_first_bounce * 3  # Calculate the initial height\n\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are given in the form (remainder, modulus)\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "from fractions import Fraction\n\ndef solution():\n    # Calculate the numerator and denominator of the first complex fraction\n    numerator1 = Fraction(1, 30) + Fraction(1, 6)\n    denominator1 = Fraction(2, 25)\n    first_complex_fraction = numerator1 / denominator1\n\n    # Calculate the numerator and denominator of the second complex fraction\n    numerator2 = 2 - Fraction(2, 3)\n    denominator2 = Fraction(8, 3)\n    second_complex_fraction = numerator2 / denominator2\n    \n    # Evaluate the entire expression\n    ans = first_complex_fraction + second_complex_fraction\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let L be the work Lee can do in one hour\n    # Let N be the work Nancy can do in one hour\n    L, N = symbols('L N')\n    \n    # Together they finish the job in 10 hours\n    equation1 = Eq(10 * (L + N), 1)\n    # Lee types for 6 hours and Nancy types for 20 hours\n    equation2 = Eq(6 * L + 20 * N, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L, N))\n    \n    # We need to find the time it takes Nancy to finish the job by herself\n    # which is the reciprocal of the work she can do in one hour\n    time_for_nancy = 1 / solutions[N]\n    \n    return time_for_nancy\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_students = 40 + 30\n    total_average = 90\n    diff = 7\n\n    # Let the average of class A be x\n    # So average of B will be x + 7\n    # The total score for all students is the average times the number of students\n    total_score = total_students * total_average\n    # According to the problem, we have:\n    # 40*x + 30*(x + 7) = total_score\n    # Simplify to find x\n    x = (total_score - 30 * diff) / (40 + 30)\n\n    # Now add the difference to get the average of class B\n    average_b = x + diff\n\n    return average_b\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    numerator = 1\n    denominator_sum = (1 / (2007 * 2008)) + (1 / (2008 * 2009)) + (1 / 2009)\n    ans = numerator / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    count = 0\n    for ten_pence in range(6):   # Jeremy can use 0 to 5 ten-pence coins\n        for twenty_pence in range(4):  # Jeremy can use 0 to 3 twenty-pence coins\n            for fifty_pence in [0, 1]:  # Jeremy can use 0 or 1 fifty-pence coin\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    ans = (250250**2) - (250249 * 250251)\n    return ans\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    count = 0\n    for i in range(1, 200 + 1):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        num = int(f\"9{a}8{a}\")\n        if num % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # A number is divisible by 4 if its last two digits form a number that's divisible by 4.\n    for j in range(10):\n        number = int(f\"125{j}6\")\n        if number % 4 == 0:\n            return j\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one chair and one table\n    chair_cost, table_cost = symbols('chair_cost table_cost')\n\n    # Create two equations based on the problem statement\n    equation1 = Eq(5 * table_cost + 12 * chair_cost, 720)\n    equation2 = Eq(table_cost, chair_cost + 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chair_cost, table_cost))\n\n    # Return the cost of one table\n    return solutions[table_cost]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n    \n    # 4 apples and 3 peaches cost £10\n    equation1 = Eq(4*apple + 3*peach, 10)\n    \n    # 4 apples and 6 peaches cost £16\n    equation2 = Eq(4*apple + 6*peach, 16)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    # Let x be the number originally thought of\n    # We have the equation: (x + 7) * 6 = 66\n    # To find x, we perform the inverse operations in reverse order\n    result_after_adding = 66 // 6  # first, we divide 66 by 6\n    original_number = result_after_adding - 7  # then, we subtract 7 from the result\n    return original_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177  # Audrey's water in liters\n    jane_water = audrey_water + 32  # Jane's water in liters more than Audrey\n    total_water = audrey_water + jane_water  # Total water in liters\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    # Define the operator result and the value it should be equal to\n    operator_result = 33\n    a_value = 9\n\n    # Define the equation based on the new operation definition a⊙b=5a-2b\n    # Since 9⊙x=33, we have 5*9 - 2*x = 33\n    # Solve for x\n    \n    # Rearrange the equation: 5*a_value - 2*x = operator_result\n    # 45 - 2*x = 33\n    # -2*x = 33 - 45\n    # -2*x = -12\n    # x = -12 / (-2)\n    # x = 6\n\n    x = (operator_result - (5 * a_value)) / -2\n\n    return x\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    ans = sum(i * (i+1)**2 for i in range(24))\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time = 360  # total time in minutes\n    ratio_up_to_down = 5 / 4\n    \n    # Calculate time spent going up and down\n    time_down = total_time / (1 + ratio_up_to_down)\n    time_up = time_down * ratio_up_to_down\n\n    # Speed relation\n    speed_down = time_up / time_down * 10\n\n    # Distance calculation\n    distance_up = (speed_down - 10) * time_up\n    distance_down = speed_down * time_down\n\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "from math import lcm\n\ndef solution():\n    days_in_packet_25 = 25\n    days_in_packet_20 = 20\n\n    # Find the LCM of the two packet sizes to determine the periodicity\n    days_until_resync = lcm(days_in_packet_25, days_in_packet_20)\n\n    # Since she starts new packets on March 1st, add the LCM to this date\n    # March has 31 days\n\n    total_days_march = 31\n    days_after_march = days_until_resync - total_days_march\n\n    # Assuming no leap year, after March comes April with 30 days. If the days after \n    # March exceed the days in April, it will be a date in May or later.\n\n    if days_after_march <= 30:\n        next_month = \"April\"\n        next_day = days_after_march\n    else:\n        days_after_march -= 30 # Subtracting April days\n        if days_after_march <= 31:\n            next_month = \"May\"\n            next_day = days_after_march\n        else:\n            # Continue the pattern if needed for months beyond May\n            pass\n    \n    return next_day, next_month\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    used_per_day = 9\n    days = 0\n    \n    while True:\n        watermelons_left = watermelons - used_per_day * days\n        pineapples_left = pineapples - used_per_day * days\n        if pineapples_left == 3 * watermelons_left:\n            break\n        days += 1\n\n    return days\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    num_cards_sent_each = num_friends - 1  # Each friend sends a card to every other friend\n    total_cards_sent = num_friends * num_cards_sent_each\n    # Since each card is counted twice (once for sender, once for receiver), divide by 2\n    ans = total_cards_sent // 2\n    return ans\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Tom's current age and Jerry's current age\n    tom_age, jerry_age = symbols('tom_age jerry_age')\n\n    # Tom will be twice his current age in 4 years\n    equation1 = Eq(tom_age + 4, 2 * tom_age)\n\n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom_age - 3) + (jerry_age - 3), 10)\n\n    # Solve the system of equations\n    ages_solution = solve((equation1, equation2), (tom_age, jerry_age))\n\n    # Extract Tom's and Jerry's current ages from the solution\n    tom_current_age = ages_solution[tom_age]\n    jerry_current_age = ages_solution[jerry_age]\n\n    # Calculate in how many years from now will Jerry's age be doubled\n    years_until_jerry_doubled = (2 * jerry_current_age) - jerry_current_age\n\n    return years_until_jerry_doubled\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n    \n    difference = fruits_per_truck - fruits_per_car\n    \n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    # Convert the time Aiden wants to take the bus into minutes\n    desired_bus_time = 9*60 + 15  # 9 hours * 60 minutes/hour + 15 minutes\n\n    # Convert the time Aiden arrives at the bus stop into minutes\n    arrival_time = 9*60 + 22  # 9 hours * 60 minutes/hour + 22 minutes\n\n    # Calculate the next bus time after Aiden arrival\n    wait_time = (35 - (arrival_time - desired_bus_time) % 35) % 35\n\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    total_days = 329\n    days_per_week = 7\n    num_weeks = total_days // days_per_week\n\n    return num_weeks\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # Eddie's speed in metres per minute\n    brother_speed = 70  # His brother's speed in metres per minute\n    time_met = 5  # The time in minutes after which they meet\n\n    # Distance covered by Eddie until they meet\n    distance_eddie = eddie_speed * time_met\n\n    # Since both Eddie and his brother meet after walking for the same time,\n    # we can find the distance covered by his brother using the same time\n    distance_brother = brother_speed * time_met\n\n    # The total distance from the house to the mall is the sum of the distances\n    # each of them covered.\n    total_distance = distance_eddie + distance_brother\n\n    return total_distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n\n    ages = [7, 5, 29, 31]\n    year = 2017\n    \n    while True:\n        year += 1\n        new_ages = [age + (year - 2017) for age in ages]\n        \n        if all(isprime(age) for age in new_ages):\n            return new_ages[3]  # Father's age is last in the list\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    # Apply the discount\n    discounted_price = original_price * (1 - discount_rate)\n\n    # Increase the price by 15% after Black Friday\n    final_price = discounted_price * (1 + increase_rate)\n    \n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((-1)**(i+1) * i**2 for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    ans = 9321 - 899\n    return ans\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    road_length = 50\n\n    # Calculate the number of intervals between lamp posts\n    intervals = total_flowers // flowers_between_posts\n\n    # Calculate the distance between every 2 lamp posts\n    distance_between_posts = road_length / (intervals + 1)\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n = 7  # number of circles\n    # The formula for maximum number of regions formed by n circles on a plane is:\n    # R = n^2 + n + 2/2\n    ans = (n**2 + n + 2) // 2\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_packed = total_books - books_given_away\n    return books_packed\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # Get the last digit of 4 raised to the power of the exponent modulo 10\n    last_digit = pow(4, 2008, 10)\n    return last_digit\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = 90009\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    male_fraction = 3 / 5\n    males = total_adults * male_fraction\n\n    return int(males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Paths from home to each landmark\n    paths_audio = 6\n    paths_book = 4\n    paths_chapel = 5\n    \n    # Paths from each landmark to school\n    paths_audio_school = 2\n    paths_book_school = 2\n    paths_chapel_school = 3\n    \n    # Total paths from home to school\n    total_paths = (paths_audio * paths_audio_school) + \\\n                  (paths_book * paths_book_school) + \\\n                  (paths_chapel * paths_chapel_school)\n    \n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Given weights when paired\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n    \n    # Total sum of all pairs\n    sum_of_pairs = adam_ben + ben_carl + adam_carl\n    \n    # Since each person is counted twice in the sum_of_pairs,\n    # the total weight is half of the sum_of_pairs\n    total_weight = sum_of_pairs / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_p_cent_coins = 124\n    twenty_p_cent_coins = total_coins - one_pound_coins - fifty_p_cent_coins\n    \n    total_value = (one_pound_coins * 1) + (fifty_p_cent_coins * 0.50) + (twenty_p_cent_coins * 0.20)\n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    ans = 76 * 9\n    return ans\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    \n    total_money = 705\n    calculator_price = 34\n    racket_price = 63\n\n    equation1 = Eq(benson + clive, total_money)\n    equation2 = Eq(benson - calculator_price, clive - racket_price)\n    \n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    return 14.8 - 5.67\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle_sticks = symbols('belle_sticks')\n\n    belle_initial = 49\n    belle_received = 11\n\n    equation = Eq(2 * (belle_initial + belle_received), belle_initial + belle_sticks)\n    \n    belle_sticks_after = belle_initial + belle_received\n    eddie_initial = solve(equation, belle_sticks)[0]\n\n    return eddie_initial\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    number_of_lampposts = 50\n    distance_between_lampposts = 2\n\n    road_length = (number_of_lampposts - 1) * distance_between_lampposts\n    \n    return road_length\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5/11 + 2/27) * 11 + 5/27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    equation1 = Eq((3/4) * chelsia, (5/6) * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    total_boxes = 6\n    total_weight = weight_per_box * total_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 4 - 3)\n\n    solutions = solve((equation1, equation2), (john, kofi))\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    jason_tea = 983\n    belinda_tea = 179\n    total_tea = jason_tea + belinda_tea\n    tea_each = total_tea // 2\n    tea_to_give = jason_tea - tea_each\n\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 4, 6]\n    perm = permutations(digits)\n    ans = len(list(perm))\n    \n    return ans\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n\n    # Normal rabbit has 1 head and 4 feet. Special rabbit has 3 heads and 2 feet.\n    equation1 = Eq(normal_rabbits + 3 * special_rabbits, 53)  # equation for heads\n    equation2 = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)  # equation for feet\n\n    solutions = solve((equation1, equation2), (normal_rabbits, special_rabbits))\n\n    total_rabbits = solutions[normal_rabbits] + solutions[special_rabbits]\n\n    return total_rabbits\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = (10 * 100) - total_cost  # Change from £10, so multiply by 100 to get pence\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return 18 + 2 + 16\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    total = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    from decimal import getcontext, Decimal\n\n    getcontext().prec = 500  # Set precision to include 500 digits after decimal\n    fraction = Decimal(1) / Decimal(70)\n\n    # Extract the recurring sequence and find the 500th digit\n    recurring_sequence = str(fraction)[2:]  # Ignore '0.'\n    \n    # Since 1/70 has a repeating cycle of 6 digits, find the remainder when 500 is \n    # divided by 6 to get the position of the 500th digit in the repeating cycle.\n    position_in_cycle = 500 % 6\n    # If position_in_cycle is 0, we need the last digit of the cycle\n    ans_digit = recurring_sequence[position_in_cycle - 1] if position_in_cycle != 0 else recurring_sequence[-1]\n    \n    return int(ans_digit)\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    # Neelesh has 4 sweets left after eating one.\n    sweets_with_neelesh_after_eating = 4\n    \n    # Add the one sweet Neelesh ate to the remaining ones to find out how many he initially received.\n    sweets_received_by_neelesh = sweets_with_neelesh_after_eating + 1\n    \n    # Since Neelesh received 1/6 of the sweets from Ayesha, \n    # we multiply by 6 to find the total number of sweets Ayesha had initially.\n    total_sweets_ayesha_had = sweets_received_by_neelesh * 6\n    \n    # Ayesha gave 1/6 of her sweets to Neelesh, so she has 5/6 left.\n    # Calculate how many sweets Ayesha has left.\n    sweets_ayesha_has_left = total_sweets_ayesha_had - sweets_received_by_neelesh\n    \n    return sweets_ayesha_has_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    copper_ball, iron_ball = symbols('copper_ball iron_ball')\n    equation1 = Eq(8 * copper_ball + 9 * iron_ball, 135)\n    equation2 = Eq(6 * copper_ball + 3 * iron_ball, 75)\n    solutions = solve((equation1, equation2), (copper_ball, iron_ball))\n    return solutions[copper_ball]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator_sum = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1/(i*(20+i-11)) for i in range(11, 16))\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of gummy bears and y be the number of lollipops initially.\n    x, y = symbols('x y')\n\n    # Given ratio: 5x = 7y\n    eq1 = Eq(5*x, 7*y)\n\n    # After adding 120 to each, the new ratio is 4x:5y, which means 4(x + 120) = 5(y + 120)\n    eq2 = Eq(4*(x + 120), 5*(y + 120))\n\n    # Solving equations for x and y\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Calculating the total number of candies after adding 120 to each pile\n    total_candies = solutions[x] + solutions[y] + 240\n\n    return total_candies\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n    count = 0\n\n    for a in range(1, 425):\n        b = 425 - a\n        if gcd(a, b) == 1 and a < b:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    return 4.5 / 5\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    # Given conditions\n    equation1 = Eq(A, 80)  # Box A contains 80 marbles\n    equation2 = Eq(B, 2 * C)  # Box B contains twice as many marbles as in Box C\n    equation3 = Eq(A + B + C, 560)  # Total marbles in all boxes\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25\n\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    sum_of_numbers = sum(numbers) * 3\n    return sum_of_numbers\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    ans = sum(31 + i * 11 for i in range(7))\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the given numbers from base 3 to base 10\n    num1_base10 = int('12101', 3)\n    num2_base10 = int('2210', 3)\n    \n    # Subtract the second number from the first in base 10\n    result_base10 = num1_base10 - num2_base10\n    \n    # Convert the result back to base 3\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n    \n    return ans if ans else '0'  # Return '0' if ans is an empty string\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Since each chosen number should have no other number differing by exactly 5,\n    # we can create a list for every possible choice by skipping five numbers at a time.\n    # This is illustrated by creating groups of numbers that are invalid together (differ by 5).\n    # For example: group1 = [1, 6, 11, 16], group2 = [2, 7, 12, 17], etc.\n    # Since there cannot be two numbers from any group, we simply choose the largest groups.\n    \n    # The 20 positive integers can be separated into four groups:\n    group1 = list(range(1, 20+1, 5))\n    group2 = list(range(2, 20+1, 5))\n    group3 = list(range(3, 20+1, 5))\n    group4 = list(range(4, 20+1, 5))\n    \n    # Maximize the number of elements from the largest groups\n    n = max(len(group1), len(group2), len(group3), len(group4))\n    \n    # Since each group has at most 4 elements, the answer is 4 from one group, and 3 from the others\n    ans = n + 3 * (4 - 1)\n    return ans\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cake, biscuit = symbols('cake biscuit')\n    \n    equation1 = Eq(cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n    \n    solutions = solve((equation1, equation2), (cake, biscuit))\n    \n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols\n    john_age, mother_age, age_difference = symbols('john_age mother_age age_difference')\n\n    # Equations based on the problem\n    equation1 = Eq(john_age + 8, mother_age - 20)\n    equation2 = Eq(mother_age, 5 * john_age)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_age, mother_age))\n\n    # Calculate age difference\n    age_difference = solutions[mother_age] - solutions[john_age]\n\n    # John's age when his mother was 5 times his age\n    john_past_age = symbols('john_past_age')\n    equation3 = Eq(solutions[mother_age] - age_difference, 5 * john_past_age)\n    john_past_age_solution = solve(equation3, john_past_age)\n\n    return john_past_age_solution[john_past_age]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    total_questions = correct_answers + wrong_answers\n    \n    total_marks = (correct_answers * 12) + (wrong_answers * 0)\n    average_mark = total_marks / total_questions\n    \n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    num1 = 2017 + Fraction(7, 8)\n    num2 = 3 + Fraction(2, 3)\n    num3 = 2016 + Fraction(7, 8)\n    num4 = Fraction(11, 3)\n    num5 = 2017 + Fraction(1, 3)\n    num6 = 2016 + Fraction(7, 8)\n    num7 = 3 + Fraction(23, 32)\n\n    # Perform the calculation\n    result = ((num1 * num2 - num3 * num4) / ((num5 - num6) * 17)) * num7\n\n    return result\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for B in range(1, 10):\n        for i in range(0, 10):\n            if ((10 * B + i) % 44 == 0):\n                pencils_per_pupil = (10 * B + i) // 44\n                return pencils_per_pupil\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sara = symbols('sara')\n    kevin = sara + 30\n    james = sara + 40\n\n    equation = Eq(sara + kevin + james, 160)\n    \n    solutions = solve(equation, sara)\n\n    return solutions[sara] + 30\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 6, 7)\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = set(M % i for i in range(2, 11))\n        if len(remainders) == 9 and all(remainders):\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    lcm = lambda a, b: (a * b) // math.gcd(a, b)\n    import math\n    \n    tom_time = 24\n    william_time = 8\n\n    ans = lcm(tom_time, william_time)\n\n    return ans\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    per_container = 4\n\n    if total_apples % per_container == 0:\n        containers_needed = total_apples // per_container\n    else:\n        containers_needed = (total_apples // per_container) + 1\n\n    return containers_needed\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    romily = symbols('romily')\n    reema = symbols('reema')\n    \n    equation = Eq(romily, reema + 10)\n\n    solutions = solve(equation, (reema))\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    fish_books = 78\n    bird_books = fish_books - 12\n    total_books = fish_books + bird_books\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    both_competitions = (math_competition + art_competition) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(28)\n    to_square = 1\n    \n    for factor, exponent in factors.items():\n        if exponent % 2 != 0:\n            to_square *= factor\n    \n    ans = to_square\n    return ans\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n    # Since posts are also needed at both ends, the total number of posts is one more than the number of intervals.\n    num_posts = (field_length // post_interval) + 1\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    \n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n    \n    solutions = solve((equation1, equation2), (andrew, louise))\n    \n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_sum = sum([10, 20, 30, 50, 60, 70])\n    negative_sum = sum([6, 16, 26, 46, 56, 66])\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Lunch finished at 2:50 pm\n    lunch_finished_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    \n    # Lunch lasted for 20 minutes, so start of lunch was 20 minutes before\n    lunch_start_time = lunch_finished_time - timedelta(minutes=20)\n    \n    # Watched television for 20 minutes before lunch\n    tv_end_time = lunch_start_time\n    tv_start_time = tv_end_time - timedelta(minutes=20)\n    \n    # Played for 10 minutes after reaching home\n    play_end_time = tv_start_time\n    home_arrival_time = play_end_time - timedelta(minutes=10)\n    \n    # Format the result to display only the time\n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # Consider A and B as one entity, hence we have 5 entities to arrange\n    arrangements_of_5 = factorial(5)\n    \n    # A and B can be arranged in 2! ways since they can switch places\n    arrangements_of_AB = factorial(2)\n\n    # Total arrangements is the product of the two possibilities\n    total_arrangements = arrangements_of_5 * arrangements_of_AB\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    rabbits_after_years = initial_rabbits * (5/2)**years\n    return int(rabbits_after_years)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    cost_per_mile = 6\n    y = symbols('y')\n    x = symbols('x')\n    equation = Eq(y, cost_per_mile * x)\n    return equation\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    largest_number = 0\n    for number in range(99, 9, -1):\n        if (number % 4 == 3) and (number % 5 == 3):\n            largest_number = number\n            break\n    return largest_number\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let x be the number of steps when stationary\n    # Let y be the speed of the escalator in steps per second\n\n    # When Peter walks 1 step per second for 10 seconds, the escalator takes him up (10 * y) steps.\n    # So we have the equation: 10 + 10 * y = x\n\n    # When Peter walks 2 steps per second for 8 seconds, the escalator takes him up (8 * y) steps.\n    # So we have the equation: 16 + 8 * y = x\n\n    # Set up the equations and solve for y\n    # 10 + 10y = 16 + 8y\n    # 2y = 16 - 10\n    # y = 3\n\n    # Now substitute value of y into any of the equations to find x\n    # x = 10 + 10 * 3\n    # x = 40\n\n    # The number of steps on the escalator is 40\n    return 40\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, purple = symbols('red green purple')\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, purple * 3 / 5)\n    equation3 = Eq(red * 4 + green * 5 + purple * 7, 642)\n    \n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n    \n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    max_class_size = total_sweets // min_sweets_per_student\n    return max_class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    known_product = 246 * 135\n    known_sum = known_product + 135 * 2\n    return known_sum\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n    \n    # Include the trees at both ends\n    number_of_trees = (road_length // interval) + 1\n    return number_of_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_numbers = 3 * 10 + 33 * 0.01 + 300 * 0.001\n    return sum_of_numbers\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    return 1200 * 0.25\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # height of James in cm\n    difference = 30     # difference in height between James and his brother Mark in cm\n\n    mark_height = james_height + difference  # calculate Mark's height\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    number_of_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return number_of_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks * (1/4)\n    remaining_blocks = total_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # Digit 1 (hundreds) can only be 2 or 4 (as it has to be even and smaller than digit 2)\n        for tens in range(hundreds + 1, 10, 2):  # Digit 2 (tens) has to be even and greater than digit 1\n            ones = 2 * hundreds  # Digit 3 (ones) is twice the value of digit 1 (hundreds)\n            if ones not in [2, 4, 6, 8] or ones == tens or hundreds == tens:\n                continue  # All digits must be even and different\n            number = hundreds * 100 + tens * 10 + ones\n            if number % 2 == 0 and number % 9 == 0:  # Check divisibility by 2 and 9\n                return number\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    allison, ben, eunice = symbols('allison ben eunice')\n    \n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n    \n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    \n    return solutions[eunice]\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of chocolates Sally (s) and Ken (k) originally had\n    s, k = symbols('s k')\n\n    # Create an equation based on the given ratio 5:7 => s/k = 5/7\n    equation1 = Eq(s/k, 5/7)\n    \n    # Ken gave Sally 24 chocolates, so Ken has k - 24 and Sally has s + 24\n    # After the exchange, Sally had twice as many chocolates as Ken => s + 24 = 2*(k - 24)\n    equation2 = Eq(s + 24, 2*(k - 24))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, k))\n    \n    # Ken's chocolates after giving 24 to Sally\n    ken_chocolates_end = solutions[k] - 24\n    \n    return ken_chocolates_end\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    colour_pencil, notebook = symbols('colour_pencil notebook')\n    \n    # 5 colour pencils and 6 notebooks cost $17\n    equation1 = Eq(5 * colour_pencil + 6 * notebook, 17)\n    \n    # 8 colour pencils and 6 notebooks cost $20\n    equation2 = Eq(8 * colour_pencil + 6 * notebook, 20)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (colour_pencil, notebook))\n    \n    # Calculate the total cost of 1 colour pencil and 1 notebook\n    total_cost = solutions[colour_pencil] + solutions[notebook]\n    \n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n\n    # Calculate extra amount when paying $5 per hour\n    if bill > 40 * 5:\n        bill -= 40 * 5\n    else:\n        return 40 + bill // 5\n\n    # Calculate extra amount for the $8 per hour phase\n    if bill > 10 * 8:\n        bill -= 10 * 8\n    else:\n        return 50 + bill // 8\n\n    # Calculate the remaining hours with $15 per hour charge\n    extra_hours = bill // 15\n\n    # return total parking hours\n    return 60 + extra_hours\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip = 0.2 * bill\n    tax = 0.1 * bill\n    total_cost = bill + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick)/3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    square_sides = 4\n    triangle_sides = 3\n    number_thought = (square_sides * 2) - triangle_sides\n    return number_thought\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12 / 100\n    new_pay = original_pay * (1 + increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits = 1014\n    page_count = 0\n    current_digit_count = 0\n\n    for num_digits in range(1, 10):\n        page_addition = 9 * (10 ** (num_digits - 1)) * num_digits\n        if current_digit_count + page_addition >= digits:\n            remaining_digits = digits - current_digit_count\n            full_pages = remaining_digits // num_digits\n            page_count += full_pages\n            break\n        current_digit_count += page_addition\n        page_count += 9 * (10 ** (num_digits - 1))\n\n    return page_count\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    ans = 89 * 19\n    return ans\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    total_male_students = 7\n    total_female_students = 6\n    \n    # Total ways to choose a teacher\n    ways_to_choose_teacher = total_teachers\n    \n    # Total ways to choose 4 students regardless of gender\n    ways_to_choose_4_students = comb(total_male_students + total_female_students, 4)\n    \n    # Ways to choose 4 students without a female (all male students)\n    ways_to_choose_4_males = comb(total_male_students, 4)\n    \n    # Ways to choose 4 students with at least one female\n    ways_to_choose_with_females = ways_to_choose_4_students - ways_to_choose_4_males\n    \n    # Total ways to form the committee\n    total_ways = ways_to_choose_teacher * ways_to_choose_with_females\n    \n    return total_ways\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    # The pattern in the sequence is (10n - (6n + 4)) for n = 1 to 7, followed by the addition of 2021.\n\n    sum_of_sequence = 0\n    for n in range(1, 8):  # Calculate the sum of the pattern from 1 to 7\n        sum_of_sequence += (10 * n) - (6 * n + 4)\n\n    sum_of_sequence += 2021  # Add 2021 at the end of the sequence\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    # Given values\n    nth_10_value = 23\n    nth_15_value = 38\n\n    # Difference in term number\n    term_diff = 15 - 10\n\n    # Common difference in the sequence\n    common_diff = (nth_15_value - nth_10_value) / term_diff\n\n    # Calculate the 12th term using the arithmetic sequence formula\n    nth_12_value = nth_10_value + (12 - 10) * common_diff\n\n    return nth_12_value\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # The degree of a monomial is the sum of the exponents of the variables.\n    # Given the monomial -x^3 * y^(2n)\n    # The degree is given to be 5, so we have:\n    # Degree of x^3 is 3\n    # Let's denote the degree of y^(2n) as 'degree_y'\n    # So, degree_y = 2n\n    # According to the given degree of the monomial which is 5:\n    # 3 (degree of x^3) + degree_y = 5\n    # Hence, 3 + 2n = 5\n    # We find n by isolating it: 2n = 5 - 3 -> 2n = 2 -> n = 2 / 2 -> n = 1\n\n    n = (5 - 3) / 2\n    return int(n)\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2/3\n    tea_per_cup = 3/5\n    total_cups = 45\n    total_milk = milk_per_cup * total_cups\n    total_tea = tea_per_cup * total_cups\n    \n    total_amount = total_milk + total_tea\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n\n    percentage = (marks_scored / total_marks) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    # In 10 years, their total age is 53\n    equation2 = Eq(alice + sister + 20, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil = symbols('book pencil')\n    pencil_price = 0.40  # 40p is 0.40 pounds\n\n    # Equations based on the problem statement\n    equation1 = Eq(8 * book + 3 * pencil, 1 + 3 * book + 8 * pencil)\n\n    # We know the price of a pencil, so substitute the value\n    equation1 = equation1.subs(pencil, pencil_price)\n\n    # Solve the equation to find the price of a book\n    solution = solve(equation1, book)\n\n    return float(solution[0])\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq(6 * (angela + bernice + candice), 342)\n\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    for i in range(1, 60):\n        if i + (i + 1) + (i + 2) == 60:\n            return i + 2\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n    \n    num_containers = total_juice / per_container\n    \n    return int(num_containers)\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_groups = 4\n    \n    # Total possible handshakes if all members shook hands\n    total_handshakes = total_members * (total_members - 1) // 2\n    \n    # Handshakes not occurred within the non-shaking group\n    non_shaking_handshakes = non_shaking_groups * (non_shaking_groups - 1) // 2\n    \n    # Subtracting handshakes that did not happen from the total possible handshakes\n    handshakes_happened = total_handshakes - non_shaking_handshakes\n    \n    return handshakes_happened\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since the median of the list is given to be 20 (which is the middle element since there are 10 elements),\n    # it must equal the average of the 5th and 6th terms i.e., (n+7 + n+8)/2 = 20.\n    # Solving for n we get:\n    n = (40 - 15) / 2\n\n    # With n found, we can find the mean by adding all numbers and dividing by the count of numbers\n    all_numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(all_numbers) / len(all_numbers)\n\n    return mean\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a, b, c be the weights of the apples with a < b < c\n    a, b, c = symbols('a b c')\n\n    # If Tim eats the largest apple, the mean weight of the remaining two apples is 70 grams.\n    equation1 = Eq((a + b) / 2, 70)\n\n    # If Tim eats the lightest apple, the mean weight of the remaining two apples is 105 grams.\n    equation2 = Eq((b + c) / 2, 105)\n\n    # We can derive the third equation from the fact that the average weight of all three apples\n    # is between 70 grams and 105 grams, let's assume the average is x.\n    x = symbols('x')\n    equation3 = Eq((a + b + c) / 3, x)\n\n    # Now, solving the system of equations for a, b, c and x\n    solutions = solve((equation1, equation2, equation3), (a, b, c, x))\n\n    # The weight difference between the heaviest apple (c) and the lightest apple (a)\n    weight_diff = solutions[c] - solutions[a]\n\n    return weight_diff\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "# Python Code:\ndef solution():\n    # Loop through all possible values of A\n    for A in range(0, 10):\n        # Define the number formed by concatenating the digits (vertical puzzle)\n        value = int(f\"{A}{A + A}{A + A + A}\")\n        if value == A * 132:\n            return A\n    return None\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for num in range(1,10):   # loop from 1 to 9 since we're looking for a digit\n        new_number = int(str(num) + '0')  # add '0' to the right side to form the new number\n        if new_number - num == 27:  # check if the new number is greater by 27\n            return num   # return the original number if condition is met\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent = 0.75\n    \n    joanna_total = joanna_weekly * 5\n    amy_total = (amy_weekly - amy_spent) * 5\n\n    difference = joanna_total - amy_total\n\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(57 + magic_number, 4 * (9 + magic_number))\n\n    result = solve(equation, magic_number)\n\n    return result[magic_number]\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Since Bob is always the 3rd, the number of animals before Bob in any direction\n    # should be 2 and the number of animals after Bob in any direction should also be 2.\n    # Therefore, the total number of animals in a line should be 5 including Bob.\n    # Since we have an array (2D grid), both the number of rows and columns should be 5.\n    # Therefore, the total number of animals is 5 rows * 5 columns.\n    \n    ans = 5 * 5\n    return ans\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of one-cent coins per stack\n    # Let y be the number of two-cent coins per stack\n    # Let z be the number of five-cent coins per stack\n    \n    x, y, z = symbols('x y z')\n    \n    # Based on the height ratio of coins\n    equation1 = Eq(6*x, 5*y)  # 6 one-cent coins have the same height as 5 two-cent coins\n    equation2 = Eq(4*x, 3*z)  # 4 one-cent coins have the same height as 3 five-cent coins\n    \n    # Based on the total number of coins used by Sam\n    equation3 = Eq(3*x + 3*y + 3*z, 124)  # Total coins divided into 3 stacks of equal height\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    # Calculate the total value of the coins\n    total_value = solutions[x] + 2*solutions[y] + 5*solutions[z]\n    \n    return total_value\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Total distance covered by plum trees\n    total_distance = (41 - 1) * 4  # 41 trees, 40 intervals, 4m apart\n\n    # Calculate the number of pine trees, +1 for the tree on the starting end\n    num_pine_trees = (total_distance // 5) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = 11 * ((100 // 11) + 1)\n    largest_multiple = 11 * (300 // 11)\n    return smallest_multiple + largest_multiple\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 4000 * 12\n    correct_total = incorrect_total - 2800 + 3040\n    correct_average = correct_total / 12\n    \n    return correct_average\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    eq1 = Eq(A, B + 350)\n    eq2 = Eq(B, 2 * (A - 500))\n\n    result = solve((eq1, eq2), (A, B))\n\n    return result[A]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, green, red = symbols('blue green red')\n\n    # Given ratios\n    blue_to_green_ratio = Eq(blue, 2/5 * green)\n    green_to_red_ratio = Eq(green, 4 * red)\n\n    # Total pens constraint\n    total_constraint = Eq(blue + green + red, 99)\n    \n    # Solve systems of equations\n    solutions = solve((blue_to_green_ratio, green_to_red_ratio, total_constraint), (blue, green, red))\n    \n    # Since we need the greatest possible number of red pens, we check for the greatest integer solution less than 100\n    max_red_pens = 0\n    for solution in solutions:\n        if all(val.is_integer for val in solution) and solution[2] > max_red_pens:\n            max_red_pens = solution[2]\n    \n    return max_red_pens\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_amount = 200\n    amount_after_books = initial_amount * (1 - 0.25)\n    amount_after_dvd = amount_after_books * (1 - 0.20)\n    return amount_after_dvd\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 // 5\n    return ans\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m / 12\n\nans = solution(m)  # Replace m with the actual number of components produced last year when calling the function"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for i in range(999999, 100000 - 1, -1):\n        if i % 6 == 0 and str(i) == str(i)[::-1]:\n            return i\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys_at_start = 216\n    girls_at_start = 153\n    children_joined = 37\n    \n    total_children_after_an_hour = boys_at_start + girls_at_start + children_joined\n    \n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_needles = 2540\n    sold_pins = 1820\n    remaining_pins = total_pins_needles - sold_pins\n    # Let x be the total number of needles\n    # sold_needles = 4/5 * needles , remaining_needles = 1/5 * needles\n    # remaining_pins = remaining_needles -> remaining_pins = 1/5 * x\n    # 5 * remaining_pins = x\n    total_needles = 5 * remaining_pins # Total needles before selling\n\n    # Check Paul's statement\n    pauls_statement = (4/5) * total_needles == sold_pins\n    is_paul_correct = \"Yes\" if pauls_statement else \"No\"\n\n    # Needles remaining after selling 4/5 of the needles\n    remaining_needles = 1/5 * total_needles\n\n    return remaining_needles, is_paul_correct\n\nans, pauls_correctness = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    sequence_sum = 56 + 78 + 44 + 22\n    return sequence_sum\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # Desired length in meters\n    short_by_cm = 10        # Short by in centimeters\n    \n    # Since the desired length is in meters and shortage is in centimeters,\n    # we need to convert centimeters to meters by dividing by 100\n    short_by_m = short_by_cm / 100  # Convert to meters\n    \n    # Calculate the length of piece in the garage by subtracting the shortage from desired length\n    garage_piece_length_m = desired_length_m - short_by_m\n    \n    # Return the length in meters or convert to centimeters if needed\n    # Here we provide the answer in meters\n    return garage_piece_length_m\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    rep_len = len(pattern)\n    total_sum = 0\n    for i in range(41):\n        total_sum += pattern[i % rep_len]\n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    result = (2/7) * 315\n    return result\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    for two_pence_coins in range(0, 47 // 2 + 1):\n        for five_pence_coins in range(0, 47 // 5 + 1):\n            if 2 * two_pence_coins + 5 * five_pence_coins == 47:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    # Calculation of the numerator\n    numerator = (9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11\n    \n    # Calculation of the denominator\n    denominator = 1 / 8 - 1 / 9 + 1 / 10 - 1 / 11\n    \n    # Calculation of the final result\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Initially, Brian is 14 and his father is 41, hence their age difference remains constant\n    age_difference = 41 - 14\n\n    # We'll increment Brian's age until the reversed age of Brian equals his father's\n    for brian_age in range(15, 100):  # Reasonable upper bound for Brian to be alive\n        father_age = brian_age + age_difference\n        if int(str(brian_age)[::-1]) == father_age:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')  # Define the symbol x which will be used in the equation\n    equation = 52 - (4 * x - 3) - 47  # Set up the equation based on the question\n\n    solutions = solve(equation, x)  # Solve the equation for x\n\n    return solutions[0]  # Return the solution for x\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            x3 = 11 - x1 - x2\n            if x3 > 0 and len(set([x1, x2, x3])) == 3:\n                count += 1\n    return count // 6  # to account for permutations of piles\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of marbles Wei Yan had.\n    x = symbols('x')\n\n    # After giving 3/8 to his friends, he has 5/8 left.\n    after_friends = (5/8) * x\n\n    # After giving 5/7 of the remaining to his brother, he has 2/7 left.\n    after_brother = (2/7) * after_friends\n\n    # His cousin gave him 408 marbles.\n    final_count = after_brother + 408\n\n    # In the end, he had twice as many marbles as he had at first.\n    equation = Eq(final_count, 2 * x)\n\n    # Solve for x.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    first_number = round(654876, -2)\n    second_number = round(279745, -2)\n    \n    estimated_difference = first_number - second_number\n    \n    return estimated_difference\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for n in range(2, 9):  # n is the number of terms in the sum\n        for combination in itertools.combinations_with_replacement(range(1, 8), n):\n            if sum(combination) == 8:\n                if len(set(combination)) == len(combination):  # All numbers should be unique\n                    count += len(set(itertools.permutations(combination)))\n                else:\n                    # Count permutations where numbers are not unique\n                    count += 1\n    return count\n\nimport itertools\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time = 16  # seconds\n    distance = 480  # meters\n\n    speed = distance / time  # Speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    ans = sum(range(1, 6)) + sum(range(1, 5))\n    return ans\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    fraction = 2 / 5\n    number = 30\n    result = fraction * number\n    return result\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5 / 8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    num_lampposts = 113\n    distance_between_lampposts = 8\n    road_length = (num_lampposts - 1) * distance_between_lampposts\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    failed_percentage = (failed_pupils / total_pupils) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = sum([i for i in range(1, 51) if '3' in str(i)])\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pasta_choices = 4\n    sauce_choices = 3\n    topping_choices = 3\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n    \n    return total_combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # This problem is a worst case scenario for the process of elimination when trying keys\n    # We will calculate the maximum number of attempts to match each key to its correct classroom\n    attempts = 0\n    remaining_keys = 10\n    while remaining_keys > 0:\n        # for each classroom, we try all the remaining keys (but one key will match)\n        attempts += remaining_keys\n        # once you find the right key for a classroom, one less key remains\n        remaining_keys -= 1\n    return attempts\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    poppers_per_bag = 12\n\n    full_bags_used = total_guests // poppers_per_bag\n    poppers_used = full_bags_used * poppers_per_bag\n\n    remaining_poppers = (full_bags_used + 1) * poppers_per_bag - total_guests\n\n    return remaining_poppers\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # The ones digit of 7 raised to any power will cycle in a pattern 7, 9, 3, 1\n    # Thus, we only need to find out where 2023 lies in this cycle.\n    cycle = [7, 9, 3, 1]\n    position = 2023 % 4  # Get the position in the cycle, 4 is the length of the cycle\n    if position == 0:  # If position is 0, it means it is the last element of the cycle\n        position = 4\n    ones_digit = cycle[position - 1]  # Adjust for index starting at 0\n    return ones_digit\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n\n    getcontext().prec = 6  # Setting the precision to calculate with more accuracy than required\n\n    # Calculate each part of the expression using Decimal for higher precision\n    numerator = Decimal(-13.3333333333).sqrt(3) * (Decimal(4.0909090909)**Decimal(2))\n    denominator = Decimal(59.24) - Decimal(11.1111111111).sqrt()\n    \n    result = numerator / denominator\n\n    # Round to nearest 3 decimal places\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    number_str = ''.join(str(i) for i in range(1, 31))\n    smallest_number = number_str[:46]\n    \n    ans = int(smallest_number)\n    return ans\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (The first 5-digit number that reads the same backwards and forwards)\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome is 999999 (The largest 6-digit number that reads the same backwards and forwards)\n    greatest_6_digit_palindrome = 999999\n\n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    num_children = 10\n    num_to_pick = 2\n    \n    ans = comb(num_children, num_to_pick)\n    \n    return ans\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    # Total 1 part boys and 3 parts girls makes 4 parts in all\n    total_parts = 4\n    # Number of parts for girls\n    girls_parts = total_parts - 1\n    # Girls is 3 quarters, thus 3 parts out of 4 parts\n    girls = (girls_parts * boys) // (total_parts - girls_parts)\n\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n    \n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n    \n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabellas_cost = solutions[banana] + solutions[apple]\n    \n    return annabellas_cost\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    # Let 'n' be the number of years later when their ages sum up to 60.\n    sara_age = 8\n    lucy_age = 36\n    desired_sum_ages = 60\n\n    # Each year, both Sara and Lucy grow one year older.\n    # After 'n' years, Sara will be 8 + n years old,\n    # and Lucy will be 36 + n years old.\n    # The sum of their ages will be (8 + n) + (36 + n) = 44 + 2n.\n\n    # We can set up an equation as follows:\n    # 44 + 2n = 60\n    # Solving for 'n', we get:\n    # 2n = 60 - 44\n    # n = (60 - 44) / 2\n    # n = 16 / 2\n    # n = 8\n\n    # It will take 8 years for their combined ages to be 60.\n    return 8\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n\n    total_seating = (two_seater_benches * 2) + (three_seater_benches * 3)\n\n    return total_seating\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    amount_paid = 16  # Since we pay with 1 pound coins, we need to give at least 16 to cover the cost\n    change = amount_paid - book_cost\n    return round(change, 2)  # Round to 2 decimal places to represent the change accurately\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    seq = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(seq)\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    # Convert the mixed number to an improper fraction\n    numerator = 201 * 7 + 1\n    denominator = 7\n\n    # Perform the division\n    result = (numerator / denominator) / 8\n\n    # Subtract the fraction part to get the value of A\n    A = result - (1/7)\n\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    footballs, basketballs = symbols('footballs basketballs')\n\n    equation1 = Eq(footballs, 2/5 * basketballs)\n    equation2 = Eq(footballs, 2/3 * (basketballs - 16))\n\n    solutions = solve((equation1, equation2), (footballs, basketballs))\n\n    return solutions[footballs] + solutions[basketballs]\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the older brother and y be the current age of the younger brother\n    x, y = symbols('x y')\n\n    # When the older brother was y years old, the younger brother was 12\n    equation1 = Eq(x - (y - 12), y)\n\n    # When the younger brother becomes x years old, the older brother will be 27\n    equation2 = Eq(x, y + (27 - x))\n\n    # Solve the system of equations\n    sol = solve((equation1, equation2), (x, y))\n\n    return sol[x]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona must take one glove from each color to ensure she doesn't get a pair\n    # That is 5 different colors without pairing\n    gloves_taken_without_pair = 5\n    \n    # To guarantee a pair, she must take one more glove, potentially creating a pair\n    gloves_to_ensure_pair = gloves_taken_without_pair + 1\n    \n    return gloves_to_ensure_pair\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 // 8) + 1  # First multiple of 8 above 30\n    last_multiple = 82 // 8         # Last multiple of 8 below 82\n\n    ans = last_multiple - first_multiple + 1\n\n    return ans\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter initially\n    initial_condition = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_gives = 0.20 * sam\n    peter_after_sam_gives = peter + sam_gives\n\n    # Peter gave 25% of his stickers to Sam\n    peter_gives = 0.25 * peter_after_sam_gives\n    sam_after_peter_gives = sam - sam_gives + peter_gives\n\n    # In the end, Sam had 96 stickers more than Peter\n    final_condition = Eq(sam_after_peter_gives, peter_after_sam_gives + 96)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    num_lines = 13\n    max_junctions = num_lines * (num_lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increase_rate = 0.10  # 10% increase\n    decrease_rate = 0.10  # 10% decrease\n    \n    # First calculate the new price after the increase\n    increased_price = original_price * (1 + increase_rate)\n    \n    # Then calculate the final price after the decrease\n    final_price = increased_price * (1 - decrease_rate)\n    \n    return final_price\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    # Define Flora's current age\n    flora_age_now = 5\n\n    # Calculate Flora's age two years ago\n    flora_age_two_years_ago = flora_age_now - 2\n\n    # Father's age was 9 times Flora's age two years ago\n    fathers_age_two_years_ago = 9 * flora_age_two_years_ago\n\n    # Calculate father's current age\n    fathers_age_now = fathers_age_two_years_ago + 2\n\n    return fathers_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    # Initialize the answer variable.\n    ans = 0 \n\n    # Loop through the range of numbers Mrs. Tan could have.\n    for sweets in range(31, 40):\n        # Check if the number of sweets is divisible by both 4 and 6.\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            ans = sweets\n            # Since the question asks for the number of sweets, we break out of the loop\n            # as soon as we find the first number that meets the condition.\n            break\n            \n    return ans\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate the number of games in the group stage for a single group\n    # In a single round-robin, each team plays every other team once\n    # Number of games in one group = Combination of 4 taken 2 at a time (since there are 4 in a group)\n    group_games = 4 * (4 - 1) // 2\n\n    # Total number of games in the group stage for all groups\n    all_group_games = group_games * 4\n\n    # Calculate the number of games in the knockout stage\n    # There will be 7 games: quarterfinals (4 games), semifinals (2 games), and finals (1 game)\n    knockout_games = 4 + 2 + 1\n\n    # The third and fourth place is decided in a single game\n    third_place_game = 1\n\n    # Total number of games throughout the contest\n    total_games = all_group_games + knockout_games + third_place_game\n\n    return total_games\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def count_3s_in_number(number):\n    # Convert number to string and count occurrences of '3'\n    return str(number).count('3')\n\ndef solution():\n    count = 0\n    # The first 25 even numbers\n    for i in range(1, 26):\n        even_number = 2 * i\n        count += count_3s_in_number(even_number)\n    \n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    # Conversion rate from pounds to pence (1 pound = 100 pence)\n    conversion_rate = 100\n    \n    # Value of 1 pound in pounds on that day\n    value_in_pounds = 1.25\n    \n    # Convert the value in pounds to pence\n    value_in_pence = value_in_pounds * conversion_rate\n    \n    return value_in_pence\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Since we need to calculate the time in hours, convert the 7.2 minutes to hours\n    total_time_hours = 7.2 / 60\n\n    # Students' walking speed in km/h\n    student_speed = 8\n\n    # Teacher's running speed in km/h\n    teacher_speed = 12\n\n    # Let the distance from the end to the front be x km\n    # When the teacher runs to the front and back, the students also move forward \n    # The total distance the teacher runs is the distance to the front plus the distance back\n    # Distance to the front: x km, Distance back (since students have moved): x + 8 * time_front km\n    # Let time_front be the time it took teacher to reach the front from end\n\n    # Total distance run by the teacher is equal to the total time multiplied by the teacher's speed\n    # Total distance = teacher_speed * total_time_hours\n    \n    # Time taken by teacher to go to the front is x / teacher_speed\n    # In this time, students will walk (x / teacher_speed) * student_speed distance forward\n    # Total distance is thus 2 * x + (x / teacher_speed) * student_speed\n    # teacher_speed * total_time_hours = 2 * x + (x / teacher_speed) * student_speed\n\n    # Solve for x\n    # x * (2 + (student_speed / teacher_speed)) = teacher_speed * total_time_hours\n    x = (teacher_speed * total_time_hours) / (2 + (student_speed / teacher_speed))\n\n    # This length x is the length of the line\n    return x\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_price = 8\n    juice_price = ramen_price - 5\n    duck_price = 6 * ramen_price\n    total_price = ramen_price + juice_price + duck_price\n    return total_price\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_distance = 18\n    day_climb = 7\n    special_day_climb = 3\n    special_day = 6\n\n    # Calculate the total distance climbed by the 5th day\n    distance_by_day_5 = (day_climb * (special_day - 1))\n    # Calculate the remaining distance on the 6th day after climbing 3 metres\n    remaining_distance = total_distance - distance_by_day_5 - special_day_climb\n    # Since the snail manages to climb out on the 6th day, it does not slide back that night.\n    # Therefore, the slide distance is the remaining distance after the 5th night.\n    slide_distance = day_climb - remaining_distance\n\n    return slide_distance\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    eq1 = Eq(tulips, 3 * roses)\n    eq2 = Eq(sunflowers, roses + 40)\n    eq3 = Eq(roses + tulips + sunflowers, 590)\n    \n    solutions = solve((eq1, eq2, eq3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    distinct_permutations = set(permutations('CYZZ'))\n    return len(distinct_permutations)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 20 / 60\n    early_time = 10 / 60\n    \n    # Let the distance be 'd' km, and the actual time to travel be 't' hours\n    # We have two equations based on the problem:\n    # d / 4 = t + 1/3 (time when Mike is 20min late)\n    # d / 6 = t - 1/6 (time when Mike is 10min early)\n    \n    # By multiplying the equations by the speed to eliminate 't', we get:\n    # d = 4 * (t + 1/3)\n    # d = 6 * (t - 1/6)\n    \n    # Equating the two expressions for 'd', we get:\n    # 4 * (t + 1/3) = 6 * (t - 1/6)\n    # 4*t + 4/3 = 6*t - 1\n    # Moving 't' terms on one side and constant terms on the other side:\n    # 2*t = 4/3 + 1\n    # 2*t = 7/3\n    # t = 7/6 hours\n    \n    # Now we can substitute 't' in one of the expressions to find 'd':\n    # d = 4 * (7/6 + 1/3)\n    # d = 4 * (7/6 + 2/6)\n    # d = 4 * (9/6)\n    # d = 4 * 1.5\n    d = 4 * 1.5\n    \n    return d\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # 1 meter = 100 centimeters\n    # 1 meter = 1000 millimeters\n    # 1 foot = 30.48 centimeters\n    \n    # Convert all measurements to centimeters\n    estimate_heights_cm = [\n        5 * 100,                # 5 meters to centimeters\n        120,                    # already in centimeters\n        50 / 10,                # 50 millimeters to centimeters\n        8 * 30.48               # 8 feet to centimeters\n    ]\n    \n    # Average height of children in cm (assuming 11+ years age group)\n    # Source for average height: https://www.disabled-world.com/calculators-charts/height-weight-teens.php\n    # This is a rough average, for the purpose of comparison only.\n    avg_min_height_cm = 130  \n    avg_max_height_cm = 160  \n   \n    # Check which height estimate is likely correct\n    correct_estimates = [height for height in estimate_heights_cm\n                         if avg_min_height_cm <= height <= avg_max_height_cm]\n    \n    # We are only interested in one height which might be correct,\n    # so we return the first one that matches criteria if available.\n    return correct_estimates[0] if correct_estimates else None\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let the number of boys be 'b' and the number of girls be 'g'.\n    # According to the problem, there are 3 times as many girls as boys, so 'g = 3b'.\n    # Total paintbrushes taken = number of brushes by girls + number of brushes by boys\n    # Each girl took 2 brushes and each boy took 3 brushes.\n    # Therefore, the total paintbrushes can be represented by the equation: (2 * g) + (3 * b) = 99\n    # Substituting 'g' with '3b' in the equation gives us: (2 * (3b)) + (3 * b) = 99\n    # Simplifying, we get: 6b + 3b = 99 => 9b = 99 => b = 99 / 9 => b = 11\n    # Hence, the number of girls 'g' is '3b' which is 3 * 11 = 33.\n\n    # Calculate the number of boys\n    b = 99 // 9\n    # Calculate the number of girls using the relation g = 3b\n    g = 3 * b\n\n    # Return the number of girls\n    return g\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Inverse of Ken taking 1 less than half of the remaining pieces\n    ken_gave = (remaining + 1) * 2\n    # Inverse of Nini taking 3 more than half of the remaining pieces\n    nini_gave = (ken_gave - 3) * 2\n    # Inverse of Ivy taking 2 less than half of the pieces left\n    ivy_gave = (nini_gave + 2) * 2\n    # Inverse of Eddie taking 1 more than half of the pieces\n    initial = (ivy_gave - 1) * 2\n\n    return initial\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "from math import gcd\n\ndef solution():\n    A = 12\n    B = 16\n    C = 20\n    g = gcd(A, gcd(B, C))\n    return g\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12 ** 2\n    n = 3 ** 2 * 2 ** 3\n    return m + n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n    \n    # total score of the boys\n    total_score_boys = total_boys * average_boys\n    \n    # total number of participants\n    total_participants = total_boys + total_girls\n    \n    # average score of all participants\n    average_all = 82\n    \n    # total score of all participants\n    total_score_all = total_participants * average_all\n    \n    # total score of the girls\n    total_score_girls = total_score_all - total_score_boys\n    \n    # average score of the girls\n    average_girls = total_score_girls / total_girls\n    \n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n\n    # Lengths of the pieces into which they cut the strings\n    alyson_piece = 2\n    clara_piece = 3\n    joyce_piece = 5\n    \n    # Compute the least common multiple of the three lengths\n    shortest_length = lcm(alyson_piece, clara_piece, joyce_piece)\n    \n    return shortest_length\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    n = 15\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Using the capture-recapture method to estimate the total population\n    marked_fish_first_catch = 100\n    total_fish_second_catch = 200\n    marked_fish_second_catch = 25\n\n    # Estimate the total number of fish in the pond\n    estimated_total_fish = (marked_fish_first_catch * total_fish_second_catch) / marked_fish_second_catch\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    # total amount of food required for 12 rabbits for 15 days\n    total_food = 12 * 15\n    # number of days the same food can feed 20 rabbits\n    days_for_20_rabbits = total_food / 20\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n    \n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n    \n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n    \n    total_sweets = sum(solutions.values())\n    \n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gift = 22\n    dress_cost = 56\n\n    total_susan_money = susan_money + mother_gift\n    additional_required = dress_cost - total_susan_money\n\n    return additional_required\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Abigail gets up at 07:40\n    wake_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n\n    # 25 minutes later she starts her breakfast\n    breakfast_start_time = wake_up_time + timedelta(minutes=25)\n\n    # Breakfast takes 10 minutes\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n\n    # Journey takes 35 minutes\n    journey_end_time = breakfast_end_time + timedelta(minutes=35)\n\n    # She arrives 5 minutes late for registration\n    registration_time = journey_end_time - timedelta(minutes=5)\n\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n\n    total_salt = salt_per_packet * packets\n\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 77 // 2 + 1):\n        # 2g * number of 2g weights + 3g * number of 3g weights = 77\n        if (77 - 2 * two_gram_weights) % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Calculate the sum of cubes from 1 to 20 using the given formula\n    n1 = 20\n    sum1 = (n1 * (n1 + 1) // 2) ** 2\n    \n    # Calculate the sum of cubes from 1 to 9 using the given formula\n    n2 = 9\n    sum2 = (n2 * (n2 + 1) // 2) ** 2\n    \n    # The result is the difference of the two sums\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    ans = total_amount * quarters_in_one_dollar\n    return ans\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_scores_for_five_assignments = 5 * 90\n    scores_of_first_four_assignments = 96 + 85 + 89 + 92\n    score_of_fifth_assignment = total_scores_for_five_assignments - scores_of_first_four_assignments\n    return score_of_fifth_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    # Initialize the variable to store the smallest number of cards that Jason has\n    num_cards = 0\n\n    # Iterate over possible numbers of cards until the conditions are met\n    while True:\n        num_cards += 1\n        # Check if the current number of cards meets the given remainders when divided by 4, 5, and 7\n        if num_cards % 4 == 3 and num_cards % 5 == 4 and num_cards % 7 == 6:\n            return num_cards\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # For 4 different colors with at least 10 pencils each,\n    # one could draw 10 from each color and not satisfy the condition\n    # therefore, we need one more draw to ensure at least 5 different colors\n    return (4 * 10) + 1\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    coach_capacity = 34\n\n    num_coaches = (pupils + coach_capacity - 1) // coach_capacity\n\n    return num_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    # Original ratio: pip/bud = 4/7\n    # After getting 5 sweets: (pip)/(bud + 5) = 8/15\n    equation1 = Eq(pip * 7, bud * 4)\n    equation2 = Eq(15 * pip, 8 * (bud + 5))\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    perimeter = 2 * (144 + 204)  # Calculate the perimeter of the field\n    num_corners = 4  # Number of corners with wheat\n    num_intervals = 116 - num_corners  # Number of intervals between wheats\n    distance_between_wheat = perimeter / num_intervals  # Distance between two wheats\n    \n    return distance_between_wheat\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_of_5 = 5 ** 20 % 10  # The last digit of any power of 5 is always 5\n    last_digit_of_7 = 7 ** 30 % 10  # The last digit of powers of 7 cycles every 4 powers (7, 9, 3, 1, ...)\n    ans = (last_digit_of_5 * last_digit_of_7) % 10  # Multiply the last digits and find the last digit of the result\n    return ans\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    from sympy import primerange\n\n    # Get all primes less than 45\n    primes = list(primerange(1, 46))\n    \n    # Check conditions given by A, B, and C\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                if a != b and b != c and a != c:  # All numbers are different\n                    if a + b != c and a + c != b and b + c != a:  # A's condition\n                        if b - 1 != 7 or a - b != 7 and b - c != 7:  # B's condition\n                            if 2 * c + a in primes or 2 * c + b in primes:  # C's condition\n                                return a + b + c\n    return 0\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    import math\n    length1 = 39\n    length2 = 52\n    ans = math.gcd(length1, length2)\n    return ans\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, solve\n    \n    girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls_swim girls_not_swim boys_swim boys_not_swim')\n    total_pupils = 1690\n\n    eq_girls_ratio = girls_swim / girls_not_swim - 31 / 49\n    eq_boys_swim = boys_swim - (boys_not_swim - 120)\n    \n    girls_total = girls_swim + girls_not_swim\n    boys_total = boys_swim + boys_not_swim\n\n    eq_boys_girls_difference = boys_total - girls_total - 90\n    eq_total_pupils = girls_total + boys_total - total_pupils\n    \n    eq_total_not_swim = boys_not_swim + girls_not_swim\n\n    solutions = solve((eq_girls_ratio, eq_boys_swim, eq_boys_girls_difference, eq_total_pupils), \n                      (girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Extract the number of pupils who cannot swim\n    pupils_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return pupils_not_swim\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbolize the points for A and B grades\n    A, B = symbols('A B')\n\n    # Equations based on Simon and Peter's scores\n    equation1 = Eq(4 * A + 4 * B, 36)  # Simon's score\n    equation2 = Eq(2 * A + 3 * B, 22)  # Peter's score\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Calculate the score of someone with 3 A grades and 5 B grades\n    score = 3 * solutions[A] + 5 * solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # Since Joe decides to share the chocolate bar with his friend equally,\n    # and there's no information about how many friends, we assume it's one friend.\n    # Therefore, he splits the chocolate bar into two equal parts.\n    total_squares = 16\n    joe_squares = total_squares // 2  # Integer division since squares can't be split.\n    return joe_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    A = 2  # smallest prime number\n    B = 4  # smallest composite number (since 1 is not considered a composite number)\n    C = 1  # neither prime nor composite (1 is unique in this aspect)\n    D = A - 2  # 2 less than smallest prime number (0, although not prime, it fits here as a digit)\n    E = 9  # largest composite number up to 10\n    F = 5  # only has factors 1 and 5\n    G = 4  # greatest factor of 8\n    H = 6  # lowest multiple of 6 (excluding 0)\n    \n    # Combine the digits ABCDEFGH to get Tony's phone number\n    phone_number = int(f'{A}{B}{C}{D}{E}{F}{G}{H}')\n    return phone_number\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    original_charlotte = charlotte / 1.8  # Charlotte had 100% before the increase, now has 180%\n\n    # Mary and Alexis give 20% of their stickers to Charlotte\n    equation1 = Eq(charlotte, original_charlotte + 0.2 * marry + 0.2 * alexis)\n    # The ratio of Marry's to Alexis's stickers is 7:5\n    equation2 = Eq(marry / alexis, 7 / 5)\n    # Marry had 20 stickers more than Charlotte after giving away stickers\n    equation3 = Eq(marry - 0.2 * marry, 20 + original_charlotte)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte, original_charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_left = 42\n    people_joined = 60\n    people_after = 322\n\n    people_before = people_after - people_joined + people_left\n\n    return people_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    day_in_seconds = 24 * 60 * 60\n    fraction_of_day = (1/4) * (1/6) * (1/8)\n    seconds = day_in_seconds * fraction_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "import math\n\ndef solution():\n    # Treat Eddie and his mom and dad as one unit, plus the other family members, say n.\n    # So there are (n+1)! ways to arrange these (n+1) units.\n    # But Eddie and his mom and dad can be arranged among themselves in 3! different ways.\n    # Therefore, the total number of arrangements is (n+1)! * 3!.\n\n    # Since we are not given the total number of family members, \n    # let's assume it's just Eddie and his parents (no other members involved).\n    # In that case, n would be 0 as there are no other family members.\n\n    # Thus, the result would be:\n    # (0+1)! * 3! = 1! * 3! = 1 * 6 = 6\n\n    n = 0  # Assuming Eddie's family consists of himself and his parents only.\n    ans = math.factorial(n+1) * math.factorial(3)\n    return ans\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    digit_2_count = 3\n    digit_3_count = 2\n    # calculate the total permutations including repetitions of digits\n    total_permutations = factorial(total_digits) // (factorial(digit_2_count) * factorial(digit_3_count))\n\n    # subtract the permutations that do not result in a four-digit number, i.e., those starting with zero\n    # in this case, there is no zero, so there are no invalid permutations\n    return total_permutations\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    # Iterate through all possible 4-digit numbers where the thousands and units digit are the same\n    for i in range(1, 10):\n        for j in range(0, 10):\n            for k in range(0, 10):\n                # Construct Pip's number using the pattern described\n                pip_number = int(f\"{i}{j}{k}{i}\")\n                # Reverse the units and tens digit to get Bud's number\n                bud_number = int(f\"{i}{k}{j}{i}\")\n                # Check if Pip's number and Bud's number add up to 5510\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    max_days = 0\n    total_pages = 95\n    pages_read = 0\n\n    while pages_read < total_pages:\n        max_days += 1\n        pages_read += max_days\n\n    return max_days\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3\n    third_day = (5 / 3) * second_day\n    \n    total_sold = first_day + second_day + third_day\n    \n    return total_sold\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Treat the 3 math books as 1 unit, and the 2 English books as 1 unit.\n    # Now we have a total of 3 (from other books) + 1 (math unit) + 1 (English unit) = 5 units.\n    permutations_of_units = factorial(5)\n    \n    # Since within each unit of math and English books, books can be permuted among themselves\n    permutations_of_math_books = factorial(3)\n    permutations_of_english_books = factorial(2)\n    \n    # Total permutations will be the product of the above calculated permutations\n    total_permutations = permutations_of_units * permutations_of_math_books * permutations_of_english_books\n    \n    return total_permutations\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_rate = 30 / 100\n    member_discount = 100\n    sales_tax_rate = 10 / 100\n\n    discount_price = original_price * (1 - discount_rate)\n    price_after_member_discount = discount_price - member_discount\n    final_price_with_tax = price_after_member_discount * (1 + sales_tax_rate)\n\n    return final_price_with_tax\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    grass_for_25_cows_10_days = 25 * 10\n    grass_for_15_cows_20_days = 15 * 20\n\n    # Total amount of grass available from either statement is the same\n    # Hence, we can equate them to find the total quantity of grass Q\n    Q = grass_for_25_cows_10_days  # Q = grass_for_15_cows_20_days\n    \n    # Q = cows * days\n    # We want to find the number of cows that can be fed for 50 days\n    # Let x be the number of cows that can be fed for 50 days\n    # Then, Q = x * 50\n    # We know the total quantity of grass Q, so we can solve for x\n    x = Q / 50\n\n    return x\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes_possible = 250 // flour_per_cake\n    return int(cakes_possible)\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    # Let x be the initial number of oranges and y be the initial number of lemons\n    # We have the following system of equations based on the problem statement:\n    # (1) 3/5 = x/y\n    # (2) 1/2 = (x - 48)/y\n\n    # From equation (1), we can express x in terms of y: x = 3y/5\n    # Substitute x from (1) into (2)\n    # 1/2 = ((3y/5) - 48) / y\n    # Cross-multiplying gives us 2((3y/5) - 48) = y\n    # Simplifying the equation we get 3y - 240 = (5/2)y\n    # Further simplification gives 240 = (5/2)y - 3y\n    # Solving for y gives us 240 = (1/2)y\n    # Therefore y = 240 * 2\n\n    y = 240 * 2\n    return y\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24  # Ivy's work rate per day\n    kevin_rate = 1 / 20  # Kevin's work rate per day\n\n    # Let's assume Kevin took off 'x' days\n    # Then Kevin worked for (12 - x) days and Ivy worked for 12 days\n    # The total work done by both is the complete job, i.e., 1\n\n    # Ivy's work + Kevin's work = 1 job\n    # 12 * ivy_rate + (12 - x) * kevin_rate = 1\n\n    # Now solve for x\n    x = (1 - (12 * ivy_rate)) / kevin_rate\n\n    return int(12 - x)  # return the number of days Kevin took off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ophelia, penelope = symbols('ophelia penelope')\n    \n    # Ophelia had 4 times as many diamonds as Penelope\n    equation1 = Eq(ophelia, 4 * penelope)\n    \n    # Penelope bought 21 more diamonds, and then had 5/8 as many diamonds as Ophelia\n    equation2 = Eq(penelope + 21, 5/8 * ophelia)\n    \n    # Now solve the equations\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    missing_number = (32 * 8) / 20\n    return missing_number\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using the inclusion-exclusion principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    remainder = 379 % 6\n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # If Cindy picks 3 socks, it's possible they could all be different (which is impossible here because there are only 2 colors),\n    # or two the same and one different. But to be absolutely sure she gets a pair of the same color,\n    # considering the worst case scenario, she might pick like this:\n    # 1st pick - black\n    # 2nd pick - red\n    # In the worst case, at this point she has one black and one red sock.\n    # 3rd pick - if it's black or red she has a pair, but to be sure of having at least one pair...\n    # 4th pick - she definitely has a pair of the same color now, because she's got two socks of each color max.\n\n    # Therefore, Cindy must pick 4 socks to be sure to have at least one matching pair.\n\n    return 4\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    n = 9\n    r = 4\n    permutations = factorial(n) // factorial(n - r)\n    return permutations\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 0.10  # in pounds (£)\n    new_price = 1.00  # in pounds (£)\n    \n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    \n    return round(percentage_increase, 2)  # rounding to 2 decimal places\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_rate = 0.08\n\n    gst_amount = bracelet_cost * gst_rate\n    total_cost = bracelet_cost + gst_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    tricycles, bicycles = symbols('tricycles bicycles')\n  \n    total_vehicles = Eq(tricycles + bicycles, 300)\n  \n    wheels_difference = Eq(3*tricycles - 2*bicycles, 180)\n  \n    solutions = solve((total_vehicles, wheels_difference), (tricycles, bicycles))\n  \n    return solutions[bicycles]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    principal_amount = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return principal_amount\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_rabbits = 14\n    pattern_grey = 2  # In the pattern, there are 2 grey rabbits\n    total_patterns = grey_rabbits // pattern_grey\n\n    black_rabbits = total_patterns * 1  # 1 black rabbit in the pattern\n    white_rabbits = total_patterns * 2  # 2 white rabbits in the pattern\n\n    # If the grey rabbits are not a multiple of the pattern's grey count, \n    # one more pattern should be counted for the remaining grey, white, and potentially black.\n    if grey_rabbits % pattern_grey != 0:\n        total_patterns += 1\n        if grey_rabbits % pattern_grey == 1:\n            white_rabbits += 2\n            black_rabbits += 1\n        else:\n            # grey count is exactly 1 more than a multiple of the pattern_grey\n            white_rabbits += 2\n            black_rabbits += 1\n\n    total_rabbits = black_rabbits + white_rabbits + grey_rabbits\n    return total_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    divisor = 27\n    remainder = 9\n    quotient = 27\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    number = 9 + 6\n    return number\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015 * 2015 - 2016 * 2014\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    not_chocolate_not_foil = 9\n\n    # Total chocolate biscuits = Chocolate with foil + (Chocolate without foil)\n    # Chocolate without foil = Total chocolate - Chocolate with foil\n    # Total chocolate = Total biscuits - Not chocolate not foil\n    chocolate_biscuits = total_biscuits - not_chocolate_not_foil\n\n    ans = chocolate_biscuits\n    return ans\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4 / 5 * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, v be the original speed, and t be the original time\n    d, v, t = symbols('d v t')\n\n    # When speed increases by 25%, the time decreases by 20 minutes\n    equation1 = Eq(v + 0.25 * v, d / (t - 20/60)) \n\n    # When the speed decreases by 45 m/min, the time taken will increase by 75%\n    equation2 = Eq(v - 45, d / (1.75 * t))\n\n    # The original relationship between speed, time, and distance\n    equation3 = Eq(v, d / t)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, v, t))\n\n    # The distance is what we want to find\n    return solutions[d]\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    # Define the number with 3 decimal places\n    number = 4 + 0.6 + 0.07 + 0.009   # 4 + 6/10 + 7/100 + 9/1000\n\n    # Round off the number to one decimal place\n    rounded_number = round(number, 1)\n\n    # Check if Tongtong's answer is correct\n    is_correct = (rounded_number == 9764.0)\n\n    # Return the correct rounded number and whether Tongtong is correct\n    return (rounded_number, is_correct)\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    # Let x be the number of crystals Jason had at first\n    # He sold 10 more than half of his crystals to Yvonne, so he sold (x/2 + 10) crystals\n    # He then mined 20 more crystals, so he had (x - (x/2 + 10) + 20) crystals left\n    # He sold 14 crystals to Cherlyn, so he had (x - (x/2 + 10) + 20 - 14) crystals left\n    # In the end, he has 35 crystals, so we have the equation:\n    # x - (x/2 + 10) + 20 - 14 = 35\n    # Solve the equation for x to find the number of crystals he had at first\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - (x / 2 + 10) + 20 - 14, 35)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Since the number of consecutive zeros at the end of a number is determined by the number of pairs of 2 and 5 in its prime factorization,\n    # we need to count the minimum of the number of 2s and 5s.\n    num_twos = 10  # There are 10 twos because A includes 2 multiplied by itself 10 times\n    num_fives = 15  # There are 15 fives because A includes 5 multiplied by itself 15 times\n\n    # The number of zeros will be equal to the number of pairs of 2 and 5 in the factorization.\n    # Since every zero at the end of a number corresponds to a 10 and each 10 is made of a 2 and a 5, we only need as many zeros as the lesser of the count of 2s or 5s.\n    num_zeros = min(num_twos, num_fives)\n\n    return num_zeros\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    decimal_point = '.'\n    count = 0\n\n    # Generate all permutations of the digits\n    for perm in permutations(digits):\n        for i in range(1, len(perm)):\n            # Insert the decimal point in each possible position\n            num_with_decimal = perm[:i] + (decimal_point,) + perm[i:]\n            # This now represents a number with the decimal point inserted\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    # Since Bala is directly behind Ali, we only count Ali once.\n    total_people = people_in_front_of_ali + people_behind_bala + 1  # +1 for Bala who is behind Ali\n\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # since we have 18 blue cars, the remaining (60-18=42) cars must be black\n    black_cars = total_cars - blue_cars\n    # black Fords will be the difference between all Fords and blue Fords\n    blue_fords = fords - (black_cars - black_dodges)\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    pence_per_plant = 85\n    pence_available = 3000  # Convert £30 to pence\n\n    plants_can_buy = pence_available // pence_per_plant\n\n    return plants_can_buy\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the number of carrots Anna had initially\n    # Let 'o' be the number of carrots Olaf had initially \n    a, o = symbols('a o')\n\n    # Setting up the equations based on the problem statement\n    # Olaf had thrice as many carrots as Anna initially\n    equation1 = Eq(o, 3 * a)\n\n    # After Olaf gave away 335 carrots, Anna had twice as many as Olaf\n    # Olaf now has o - 335 carrots, and Anna has a + 335 carrots\n    equation2 = Eq(a + 335, 2 * (o - 335))\n\n    # Solving the equations \n    solutions = solve((equation1, equation2), (a, o))\n\n    # The solution will give us the initial number of carrots Anna had\n    # We need to find the number of carrots Anna had after the exchange\n    anna_carrots_after = solutions[a] + 335\n\n    return anna_carrots_after\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4\n    while True:\n        B, C, D = A + 1, A + 2, A + 3\n        if all(n % i != 0 for i in range(2, int(n ** 0.5) + 1) for n in (A, B, C, D)) == False:\n            return A + B + C + D\n        A += 1\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # The pigeonhole principle states that if n items are put into m containers,\n    # with n > m, then at least one container must contain more than one item.\n    \n    # For our magician to make sure he gets at least one of each color,\n    # he can take all but one of each color first, which does not guarantee that he has all colors.\n    # To be certain, he needs to pick one more after that.\n    \n    # Calculate the minimum number of picks needed\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n    \n    # Take all but one ball of each color\n    picks_without_guarantee = (blue_balls - 1) + (red_balls - 1) + (green_balls - 1)\n    \n    # Add one more pick to guarantee he has all colors\n    min_picks_with_guarantee = picks_without_guarantee + 1\n    \n    return min_picks_with_guarantee\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    num = 0\n    while True:\n        if num % 11 == 5 and num % 7 == 1:\n            break\n        num += 1\n    return num\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    days_worked = 5\n\n    total_earnings = average_daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n\n    # Every child gets at least one apple\n    remaining_apples = total_apples - children\n\n    # Calculate least number of apples for the kid with most apples\n    # using the Pigeonhole principle\n    max_apples = (remaining_apples - 1) // children + 1\n\n    return max_apples + 1  # Add one because each child has at least one apple initially\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n\n    num_teams = 6\n    num_games = comb(num_teams, 2)  # Combination of 6 teams taken 2 at a time\n\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n    num1 = 60\n    num2 = 72\n    num3 = 84\n\n    gcd12 = math.gcd(num1, num2)\n    ans = math.gcd(gcd12, num3)\n\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    # Let's denote x as the number of correct answers Andrew got.\n    # The number of questions he got wrong would then be 50 - x.\n    # For each correct answer, he gets 3 marks and for each wrong answer, 2 marks are deducted.\n    # So, the total score can be calculated by the formula: 3x - 2(50 - x) = 125\n    # We solve this equation for x.\n\n    # Total marks for correct answers minus total marks deducted for wrong answers equals the score.\n    # 3x - 2(50 - x) = 125\n    # 3x - 100 + 2x = 125\n    # 5x - 100 = 125\n    # 5x = 225\n    x = 225 // 5\n\n    return x\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    for i in range(2, 2011):\n        next_num = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_num)\n    return sequence[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    number = (two_thirds * 3) / 2\n    three_quarters = (number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31\n    m = 0\n    while True:\n        sum_of_series = sum(range(23, 2 * k, 2))\n        m = int(sum_of_series ** 0.5)\n        if sum_of_series == m ** 2:\n            break\n        k += 1\n    return m\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    time_first_part = 2  # hours\n    speed_first_part = 40  # km/h\n    distance_first_part = time_first_part * speed_first_part\n\n    distance_second_part = 280  # km\n    speed_second_part = 70  # km/h\n    time_second_part = distance_second_part / speed_second_part\n\n    total_distance = distance_first_part + distance_second_part\n    total_time = time_first_part + time_second_part\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bob, alan = symbols('bob alan')\n    \n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    solutions = solve((equation1, equation2), (bob, alan))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    # Eddie counts to 30 and stops at 10 o'clock.\n    # Since there are 12 numbers on the clock, every 12 counts Eddie gets back to the same number.\n    # So counting to 30 is the same as counting to 30 mod 12 (since the clock \"resets\" after every 12 counts).\n    \n    counts = 30 % 12  # Remainder after dividing 30 by 12\n    stop_number = 10  # The number Eddie stops at after counting to 30\n    \n    # If Eddie ends at 10 after counting 30 (which is actually 6 after applying clock arithmetic),\n    # then he must have started from 10 - 6 = 4 o'clock to end up at 10 o'clock after 30 counts.\n    start_number = (stop_number - counts) % 12\n    if start_number == 0:\n        start_number = 12 # Properly adjust for clock numbering (0 o'clock is actually 12 o'clock)\n    \n    return start_number\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    savings_duration = 7  # one week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = original_amount + (daily_savings * savings_duration) - lent_to_brother - spent_on_snacks\n\n    return current_amount\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_cow_per_day = 1\n\n    total_grass = cows * days * grass_per_cow_per_day\n\n    return total_grass\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define variables for the price of one banana and one apple\n    banana, apple = symbols('banana apple')\n\n    # Ellie's equation: 2 bananas + 3 apples = 3 dollars\n    eq1 = Eq(2 * banana + 3 * apple, 3)\n\n    # Beth's equation: 3 bananas + 2 apples = 4 dollars\n    eq2 = Eq(3 * banana + 2 * apple, 4)\n\n    # solve for the price of one banana and one apple\n    prices = solve((eq1, eq2), (banana, apple))\n\n    # calculate how much Annabella pays for 10 bananas and 10 apples\n    annabella_cost = 10 * prices[banana] + 10 * prices[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil taken from each bucket\n    x = symbols('x')\n\n    # Big bucket equation: 89 - x = 12 * (Small bucket equation)\n    # Small bucket equation: 45 - x\n    equation = Eq(89 - x, 12 * (45 - x))\n\n    # Solve for x\n    sold_amount = solve(equation, x)\n\n    return sold_amount[x]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    # Probability that both are not late\n    prob_neither_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n\n    # Probability that at least one is late is the complement\n    prob_at_least_one_late = 1 - prob_neither_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_initial_strawberries = 86\n    lena_gave_away = 29\n    lena_final_strawberries = 100\n\n    strawberries_received_from_mother = lena_final_strawberries - (lena_initial_strawberries - lena_gave_away)\n\n    return strawberries_received_from_mother\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_numbers = 90  # 2-digit numbers start from 10 to 99\n    without_six = 8 * 8  # Numbers without a six either in tens or units place\n    with_six = total_numbers - without_six  # At least one six in tens or units place\n    return with_six\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let x be the total number of visitors\n    # 37% were men\n    # Let the number of children be c\n    # The number of women be 4y and the number of children be 5y where y is a proportionality constant\n    # Based on the ratio of women to children\n    # men + women + children = total visitors\n    # 0.37x + 4y + 5y = x\n    # Also given that men are 12 more than children: 0.37x = 5y + 12\n    # Substitute 5y from second equation to the first equation\n    # 0.37x + 4y + (0.37x - 12) = x\n    # x(0.37 + 0.37) - 12 + 4y = x\n    # y = (1 - 0.74x + 12) / 4\n    # y = (x - 0.74x + 12) / 4\n    # Solve for y, then find the women\n\n    # Assign values from equations to solve for x\n    men_more_than_children = 12\n    percentage_men = 0.37\n\n    # Combine equations into one, solve for x\n    # 0.74x + 4y = x + 12\n    # 4y = x(1 - 0.74) + 12\n    # y = (x * 0.26 + 12) / 4\n    # Women = 4y\n    # We want to find x such that y is an integer because the number of people must be integer\n    # We will iterate over possible values of x until we find a y that is integer\n    \n    x = 1\n    while True:\n        y = (x * 0.26 + men_more_than_children) / 4\n        if y.is_integer():\n            women = 4 * y\n            break\n        x += 1\n\n    return int(women)\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    n = 30\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    # Calculate the last digit of each component separately since we only care about the last digit\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_power_2023 = (2 ** 2023) % 10\n    \n    # Add the two last digits and take the last digit of the sum\n    sum_last_digit = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n    \n    # The last digit of a number raised to the third power is\n    # the last digit of the number itself raised to the third power\n    ans = (sum_last_digit ** 3) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    total_numbers = 2022\n    divisible_by_7 = total_numbers // 7\n    divisible_by_17 = total_numbers // 17\n    divisible_by_both = total_numbers // (7 * 17)\n\n    ans = total_numbers - (divisible_by_7 + divisible_by_17 - divisible_by_both)\n    return ans\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    relative_speed = speed_a + speed_b\n\n    time = distance / relative_speed\n\n    return time\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbolic representation of the cost of a mango, pear and orange.\n    mango, pear, orange = symbols('mango pear orange')\n\n    # Equations based on the problem statement.\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (mango, pear, orange))\n\n    # Return the cost of a mango.\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    max_intersections = num_lines * (num_lines - 1) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    ans = 9744 // 7\n    return ans\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5 = 5\n    last_digit_7 = 7 ** 20 % 10\n    \n    ans = (last_digit_5 * last_digit_7) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    pi = 22 / 7\n    AB = CD = 14  # The lengths of AB and CD are given.\n\n    # The perimeter of the figure comes from both the arcs and the straight line segments.\n    # The two quadrants make a full circle with radius half of AB (or CD),\n    # so we calculate the circumference of the full circle with radius 7:\n\n    quadrant_circumference = pi * 7\n\n    # The two semicircles make a full circle with radius AB (or CD),\n    # so we calculate the circumference of the full circle with radius 14:\n    semicircle_circumference = pi * 14\n\n    # The perimeter of the figure is then the sum of the quadrant's circumferences and the semicircle's circumferences.\n    perimeter = quadrant_circumference + semicircle_circumference\n\n    return perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "from math import gcd\n\ndef solution():\n    pencils = 28\n    pens = 63\n    greatest_common_divisor = gcd(pencils, pens)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 1 - 1/3\n    remaining_after_second_day = 1 - 3/5\n\n    # After the first day\n    after_first_day = 48 / remaining_after_second_day\n\n    # Total watermelons at the start\n    total_watermelons = after_first_day / remaining_after_first_day\n\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    sum_of_decimals = 2.99 + 12.99 + 22.99\n    return sum_of_decimals\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define a symbol for the cost of a packet of rice\n    rice_cost = symbols('rice_cost')\n    \n    # The total cost of pasta packets\n    pasta_cost = 6 * 95  # This is in pence\n    \n    # The total amount spent is 11.70 pounds, we convert it to pence\n    total_spent = 1170  # This is in pence\n    \n    # Equation representing the total cost: cost of pasta + cost of rice = total spent\n    equation = Eq(6 * 95 + 5 * rice_cost, total_spent)\n    \n    # Solve the equation for the cost of a packet of rice\n    solution = solve(equation, rice_cost)\n    \n    # The solution is in pence, but we need to return in pounds (hence we divide by 100)\n    return solution[0] / 100\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5 and 7\n    for i in range(lcm, 1000, lcm):\n        if str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_cup_noodles = 10\n    to_choose = 6\n    ways = comb(total_cup_noodles, to_choose)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Start with the given fraction\n    fraction = 13/10\n    # Subtract 1 to invert the fraction for the nested part\n    fraction = fraction - 1\n\n    # Invert the fraction to find 'a'\n    a = int(1 / fraction)\n    # Subtract 'a' from the inverted fraction to find the next part\n    fraction = (1 / fraction) - a\n    \n    # Invert the fraction to find 'b'\n    b = int(1 / fraction)\n    # Subtract 'b' from the inverted fraction to find 'c'\n    fraction = (1 / fraction) - b\n    \n    # The last fraction simply equals to 'c'\n    c = int(1 / fraction)\n    \n    # Calculate the final answer\n    ans = a + 2 * b + 3 * c\n    return ans\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cost_per_cake = 46\n    number_of_cakes = 195\n    total_cost = cost_per_cake * number_of_cakes\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    # Let x be the number of days it would take the lazy one to paint the house\n    # Let's define energetic person's work rate as 1/20 house per day\n    energetic_rate = 1 / 20\n    # Together, they paint at a rate that completes 1 house in 12 days\n    together_rate = 1 / 12\n    # The lazy person's work rate is the difference between the together rate and energetic rate\n    lazy_rate = together_rate - energetic_rate\n    # The number of days it would take the lazy decorator to paint the house is then 1 divided by their work rate\n    lazy_days = 1 / lazy_rate\n    return lazy_days\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    ans = 0.30 * (2/3) * 45\n    return ans\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) // 8\n    return B\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    for pies in range(1, 4*6 + 1):\n        if pies % 4 == 0 and pies % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n\n    girls = (boys / 3) * 2\n\n    return girls\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    oddtastic_count = 0\n\n    for number in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(number)):\n            oddtastic_count += 1\n\n    return oddtastic_count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    for a in range(100):\n        if a % 8 == 6:\n            for b in range(100):\n                if b % 8 == 7:\n                    return (a + b) % 8\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    skirts = 8\n    blouses = 2\n    cloth_per_skirt = 2.83\n\n    cloth_used_for_skirts = skirts * cloth_per_skirt\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = round(remaining_cloth / blouses, 1)\n\n    return cloth_per_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    total_sum = 1650\n    # Since the sum of an arithmetic series is the average of the first and last term\n    # multiplied by the number of terms, and the sum of the series is given along with\n    # the number of terms, we can find the average of the first and last term.\n    average = total_sum / 15\n    # To find the middle term (arithmetic mean), we divide the average by 2\n    middle_number = average / 2\n    # The largest number is the middle number + (number of terms - 1) / 2\n    largest_number = middle_number + 7\n    # The smallest number is the middle number - (number of terms - 1) / 2\n    smallest_number = middle_number - 7\n    sum_of_largest_and_smallest = largest_number + smallest_number\n    return int(sum_of_largest_and_smallest)\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    number = ''\n    i = 1\n    while len(number) < 2019:\n        number += str(i)\n        i += 1\n    return int(number[2018])\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # In the worst case, he will find the key of the first room in the last attempt.\n    # Then the key for the second room in the second last attempt and so on.\n    # So for the first room it can take up to 11 attempts,\n    # for the second room up to 10 (as one key is already matched), and so on.\n    # This is a sum of an arithmetic series from 11 to 1.\n    return sum(range(1, 12))\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n    \n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n    \n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # n % 2 = 1, n % 3 = 2, n % 4 = 3, n % 5 = 4\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n = solve_congruence(*congruences)\n    \n    return n[0]\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    # Create a string containing the given digits\n    digits = '22233'\n    # Generate all unique permutations of the string of digits\n    perm_set = set(permutations(digits, 4))\n    # Count the number of unique permutations that do not start with a '0'\n    count = sum(1 for p in perm_set if p[0] != '0')\n    return count\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # basket mass converted from grams to kilograms\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    number_of_kittens = 4  # number of kittens\n    \n    # calculate the mass of the cat\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + number_of_kittens * kitten_mass_kg)\n    \n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    return 412 / 1000\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    price_now = original_price * (1 + increase_percentage / 100)\n    return price_now\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    num_siblings = 3 + 4  # Mary has 3 brothers and 4 sisters\n    total_people = 1 + num_siblings  # Including Mary herself\n    eggs_bought_each = num_siblings  # Each person buys an egg for every other sibling\n    total_eggs = total_people * eggs_bought_each  # Total eggs are what each person buys times the total people\n\n    return total_eggs\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    start_time = (7 * 60) + 50  # converting start time 7:50 AM to minutes\n    end_time = (8 * 60) + 40    # converting end time 8:40 AM to minutes\n    journey_duration = end_time - start_time\n    return journey_duration\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one apple and one banana\n    apple, banana = symbols('apple banana')\n\n    # Create equations based on the given information\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount of money Samuel had initially.\n    x = symbols('x')\n\n    # After spending 1/6 of his money on a DVD and an additional $5, he has 5/6*x - 5 left.\n    after_dvd = (5/6) * x - 5\n\n    # Then he spent 2/5 of the remaining money on magazines and an additional $12. After this, he has $24 left.\n    # So, 3/5 * (after_dvd) - 12 = 24\n    after_magazines = Eq((3/5) * after_dvd - 12, 24)\n\n    # Solve the equation to find the initial amount of money x.\n    solution = solve(after_magazines, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_bag = 80 / (1 - 3/5)\n    original_money = remaining_after_bag / (1 - 1/5)\n    return original_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47\n    oil_poured_out = 5\n    number_of_tanks = 6\n\n    remaining_oil = total_volume - oil_poured_out\n    volume_per_tank = remaining_oil / number_of_tanks\n\n    return volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    johnny_age = 8\n    grandpa_age = 72\n\n    for year in range(1, 100):  # search range of years, realistic to problem context\n        if grandpa_age + year == 5 * (johnny_age + year):\n            return year\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    distance_between = 4\n    pip_position = 8\n    bud_from_end = 10\n    \n    total_children = pip_position + distance_between + bud_from_end\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bob, alan = symbols('bob alan')\n    \n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    \n    # Colin gives Bob 25 cards\n    bob_after = bob + 25\n    \n    # Bob now has three times as many as Alan\n    equation2 = Eq(bob_after, 3 * alan)\n    \n    # Use sympy to solve these equations\n    solutions = solve((equation1, equation2), (bob, alan))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    rate = (amount / principal) ** (1 / years) - 1\n    rate_percent = round(rate * 100, 1)\n\n    return rate_percent\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # The sequence appears to be increasing by consecutive numbers\n    # 3 + 3 = 6, 6 + 4 = 10, 10 + 5 = 15\n    # The pattern shows that each time we are adding one more than the previous time\n\n    # We start with the difference of 3 (since 3 to 6 is +3)\n    difference = 3\n\n    # The first number in the sequence is 3\n    current_number = 3\n\n    # Initialize to keep track of the terms in the sequence\n    sequence = [current_number]\n\n    # We need to find the 5th term, therefore we iterate 4 times (since we already have the first term)\n    for _ in range(4):\n        # Increment the difference\n        difference += 1\n        # Calculate the next number by adding the current difference\n        current_number += difference\n        # Append the number to the sequence\n        sequence.append(current_number)\n    \n    # The missing number (5th term) is the last element in the sequence\n    missing_number = sequence[-1]\n    \n    return missing_number\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    sum_odd = sum(range(1, 51, 2))\n    sum_even = sum(range(2, 51, 2))\n    diff = sum_even - sum_odd\n    return diff\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of elders, y be the number of oranges\n    x, y = symbols('x y')\n\n    # If she gave 20 oranges to each elder, 10 elders will not receive any oranges\n    # So, 20*(x - 10) = y\n    equation1 = Eq(20 * (x - 10), y)\n\n    # If she gave 16 oranges to each elder,\n    # she would have enough oranges to pack 25 boxes of 2 dozen oranges each\n    # So, 16*x = 25*2*12 (as one dozen equals 12)\n    equation2 = Eq(16 * x, 25 * 2 * 12)\n\n    # Now we solve the two equations to find the values of x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We need to find an integer number of oranges to give to each elder\n    # such that all oranges are given out, and each elder receives the same number of oranges\n    # Hence, we just divide total oranges y by total number of elders x\n    num_oranges_per_elder = solutions[y] // solutions[x]\n\n    return num_oranges_per_elder\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Define a function that represents the operator ~Delta~\n    def delta_op(m, n):\n        return 5*m + 3*n\n\n    # We know that x ~Delta~ 9 = 37, so we can set up an equation and solve for x\n    x = symbols('x')\n    equation = Eq(delta_op(x, 9), 37)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Maximum number of balls she can take out without having 4 of the same color:\n    # Taking maximum number of different colors without getting four of the same\n    max_without_four_same = (3 - 1) * (4 - 1)\n    \n    # One additional ball will ensure she gets 4 of the same color\n    balls_to_ensure_four_same = max_without_four_same + 1\n    \n    return balls_to_ensure_four_same\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    weight_after_removal = 27\n    removed_soil_fraction = 1/5\n    \n    removed_weight = full_weight - weight_after_removal\n    full_soil_weight = removed_weight / removed_soil_fraction\n    empty_wheelbarrow_weight = full_weight - full_soil_weight\n    \n    return empty_wheelbarrow_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tim, tyler = symbols('tim tyler')\n\n    # Initial relationship between Tim's and Tyler's cookies\n    equation1 = Eq(tim / 6, tyler * 3 / 8)\n\n    # Tyler sold 96 cookies\n    equation2 = Eq(tim, 9 * (tyler - 96))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    # Total number of cookies at first\n    total_cookies = solutions[tim] + solutions[tyler]\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols for numbers of each cupcake flavor\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations based on the problem statement\n    eq1 = Eq(chocolate, vanilla + 72)\n    eq2 = Eq(blueberry, vanilla - 36)\n    eq3 = Eq(chocolate - chocolate / 6 + vanilla - 2 * vanilla / 3 + blueberry - 7 * blueberry / 9, 427)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (chocolate, vanilla, blueberry))\n\n    # Find out how many chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "def solution():\n    from math import gcd\n    lcm = lambda a, b: a * b // gcd(a, b)\n    \n    leave_interval = lcm(24, 30)  # The least common multiple of the two intervals\n    hours_passed = leave_interval // 60\n    minutes_passed = leave_interval % 60\n    \n    initial_hour = 9  # 9 a.m.\n    \n    final_hour = (initial_hour + hours_passed) % 24\n    final_minutes = minutes_passed\n    \n    # Format to return the answer in \"HH:MM\" format\n    return \"{:02d}:{:02d}\".format(final_hour, final_minutes)\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3/4\n    gallons_poured = 24\n    full_tank = gallons_poured / part_filled\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave - chris, 5)\n    equation2 = Eq(dave - benu, 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the initial number of red marbles, w be the initial number of white marbles,\n    # p be the number of red marbles put by Pip, and b be the number of white marbles put by Bud.\n    r, w, p, b = symbols('r w p b')\n\n    # The initial ratio of red to white marbles is 3:2.\n    equation1 = Eq(r / w, 3 / 2)\n\n    # After Pip puts some red marbles, the ratio becomes 5:3.\n    equation2 = Eq((r + p) / w, 5 / 3)\n\n    # After Bud puts some white marbles, the ratio becomes 5:4, and he puts 100 more than Pip.\n    equation3 = Eq((r + p) / (w + b), 5 / 4)\n    equation4 = Eq(b, p + 100)\n\n    # Solve the system of equations for r, w, p, and b.\n    solution = solve((equation1, equation2, equation3, equation4), (r, w, p, b))\n\n    # solution[w] gives us the initial number of white marbles.\n    return solution[w]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Since a divides by 8 with remainder 6, it can be written as a = 8*k + 6\n    # Since b divides by 8 with remainder 7, it can be written as b = 8*m + 7\n    # The sum (a+b) can be written as: (a+b) = (8*k + 6) + (8*m + 7) = 8*(k+m) + 13\n    # When adding the remainders, we actually get a number that is greater than 8, hence,\n    # the new remainder after adding 13 is: (13 % 8), because the 8*(k+m) part is divisible by 8.\n\n    remainder_of_sum = (6 + 7) % 8\n    return remainder_of_sum\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark - david, 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    desks_between_jessica_and_judy = 1  # Judy sits directly behind Jessica\n\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy + 2\n    # Adding 2 for Jessica's and Judy's own desks\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white = 1991\n    black = 1000\n    total_taken_out = 2989\n\n    # Initially, all balls in Bag A.\n    while total_taken_out > 0:\n        # Since there are more white balls, Ming will take 2 white balls initially.\n        if white > black:\n            white -= 2  # Taking out two white balls.\n            black += 1  # Adding one black ball from Bag B.\n        else:\n            # If there are equal numbers of white and black or more black, Ming will take one of each.\n            white -= 1  # Taking out one white ball.\n            black -= 1  # Taking out one black ball.\n        total_taken_out -= 2\n\n    # Ming finished taking out balls, we return the remaining balls color and count.\n    return (white + black, 'White' if white > black else 'Black')\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 5):\n        a, b, c, d, e = perm\n        x = int(a + b)\n        y = int(c + d + e)\n        prod = x * y\n        if len(str(prod)) == 6 and set(str(prod)) == set(perm) and all(str(prod).count(digit) == 1 for digit in perm):\n            return prod\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    people_initial = 6\n    time_initial = 15\n    time_required = 2\n\n    work_rate_initial = people_initial / time_initial\n    work_required = 1  # The total work required to build one bridge\n\n    # Work = People * Time\n    # People = Work / Time\n    people_required = work_required / (work_rate_initial * time_required)\n\n    return int(people_required)\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    aaron_weight = 45\n    aaron_average = 61\n    ben_weight = 71\n    ben_average = 62\n    \n    # Let the original average weight be x and the number of people in the original group be n\n    \n    # After Aaron joins, the new average is calculated by the total weight over the total number of people \n    # (n * x + aaron_weight) / (n+1) = aaron_average\n    # n * x + aaron_weight = aaron_average * (n + 1)\n    # n * x + 45 = 61 * (n + 1)\n    \n    # After Ben joins, we update the above equation \n    # (n * x + aaron_weight + ben_weight) / (n + 2) = ben_average\n    # n * x + aaron_weight + ben_weight = ben_average * (n + 2)\n    # n * x + 45 + 71 = 62 * (n + 2)\n    \n    # We now have two equations for the two variables n and x\n    # Equation 1: n * x + 45 = 61 * (n + 1)\n    # Equation 2: n * x + 116 = 62 * (n + 2)\n    \n    # Subtract Equation 1 from Equation 2 to eliminate x and solve for n:\n    # n * x + 116 - (n * x + 45) = 62 * (n + 2) - 61 * (n + 1)\n    # 116 - 45 = 62n + 124 - 61n - 61\n    # 71 = n + 63\n    # n = 71 - 63 = 8\n    \n    # Substituting n back into Equation 1 to solve for x:\n    # 8 * x + 45 = 61 * (8 + 1)\n    # 8 * x = 61 * 9 - 45\n    # x = (61 * 9 - 45) / 8\n    \n    n = 71 - 63\n    original_average = (61 * (n + 1) - 45) / n\n    \n    return original_average\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    meters = 2.1\n    centimeters_per_meter = 100\n    n = meters * centimeters_per_meter\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_money = 30.00\n    expenses = 3.99 + 2.50 + 0.70 + 10.99 + 4 * 1.50\n    remaining_money = initial_money - expenses\n    return round(remaining_money, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    # Initialize the count of ways to 0\n    count = 0\n    \n    # The number that we are splitting into parts\n    total = 5\n    \n    # Loop over the first part\n    for x1 in range(1, total):\n        # Assign the remainder to the second part\n        x2 = total - x1\n        # If x2 is greater than 0, we have a valid split\n        if x2 > 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for units_digit in range(2, 10):\n        hundreds_digit = units_digit - 2\n        # Tens digit can be anything from 0 to 9, giving 10 possibilities.\n        count += 10  # because for each valid (hundreds, units) pair, there are 10 choices for the tens place\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    total_mass = 91.2\n    ratio = 3\n\n    daughter_mass = total_mass / (1 + ratio)\n    mr_han_mass = ratio * daughter_mass\n\n    return mr_han_mass\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    original_amount = remaining_after_students / (1 - 0.8)\n    return int(original_amount)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 101, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # If Samantha has more votes than anyone else, we should first ensure she has more than 1/3 of the total votes,\n    # as there are 3 students. If you divide 25 votes into 3 groups trying to give the least to the winner,\n    # the \"worst-case\" equality scenario would be 8, 8, 9 votes. So to guarantee she has more, she needs at least 9 votes.\n\n    # Now we still have to ensure Samantha has more votes than each of the other two. \n    # As there are 25 - 9 = 16 votes remaining, if we divide them as equally as possible without giving more than Samantha to anyone,\n    # the maximum either of the others can have is 8 votes (since exactly dividing 16 by 2 gives 8).\n    # If Samantha only got 9, the other two, in theory, could both get 8 each, which would not make Samantha the one with the most votes.\n    \n    # Hence, Samantha needs at least 8 + 1 = 9 votes to ensure she has strictly more than either of the other two individuals,\n    # and we need to add one more to make sure she has the most, which would give us a minimum of 10 votes for Samantha.\n    \n    return 10\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    unique_totals = set()\n\n    for coin1 in coin_values:\n        for coin2 in coin_values:\n            for coin3 in coin_values:\n                total = coin1 + coin2 + coin3\n                unique_totals.add(total)\n\n    ans = len(unique_totals)\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = sum(str(page).count('1') for page in range(1, 131))\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x + 7, 5 * (x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbol for the unknown interest rate x\n    x = symbols('x')\n    \n    # Initial investment\n    P = 6000  \n    # Final amount after 5 years\n    A = 8029.35\n    # Number of years\n    n = 5\n    \n    # Compound interest formula: A = P(1 + r/n)^(nt), \n    # Here: r = x / 100 (since x is the rate in percent), n = 1 (compounded once per year)\n    equation = Eq(A, P * (1 + x/100)**n)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    return float(solution[0])\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits_used = 0\n    \n    # Digits for 1-9 (1 digit each)\n    if digits_used + 9 < 291:\n        digits_used += 9\n        pages += 9\n    else:\n        pages += (291 - digits_used)\n        return pages\n\n    # Digits for 10-99 (2 digits each)\n    if digits_used + 180 < 291:\n        digits_used += 180\n        pages += 90\n    else:\n        pages += (291 - digits_used) // 2\n        return pages\n\n    # Digits for 100-999 (3 digits each)\n    if digits_used < 291:\n        pages += (291 - digits_used) // 3\n    \n    return pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    percentage = (13 / 25) * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money = 1500\n    money_spent_on_chairs = 360\n    \n    percent_spent_on_chairs = (money_spent_on_chairs / total_money) * 100\n    \n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pages, r be the number of pages read.\n    x, r = symbols('x r')\n\n    # Given that the ratio of read to unread pages is 1:5\n    # Hence unread pages would be 5*r\n    # Equation representing initial condition: r / (x - r) = 1 / 5\n    equation1 = Eq(r / (x - r), 1 / 5)\n\n    # After reading 80 more pages, the pages read will become 70% of total pages.\n    # Pages read after reading 80 more pages: r + 80\n    # Equation representing the final condition: (r + 80) / x = 70 / 100\n    equation2 = Eq((r + 80) / x, 70 / 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, r))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of questions CC answered correctly\n    # Then Vivi answered x+3 correctly (since every correct answer Vivi gets 15 more points, which is 3 correct answers)\n    # The remaining questions they both got wrong, so for CC it's 10-x and for Vivi it's 7-x\n    # The total score for CC is then 10x - 5(10-x) = 15x - 50\n    # The total score for Vivi is 10(x+3) - 5(7-x) = 15x + 15\n    # The total combined score is 15x - 50 + 15x + 15 = 30x - 35\n    # We know the total combined score is 95.\n    # So we solve for x: 30x - 35 = 95\n\n    total_points = 95\n    point_diff = 15\n    \n    for x in range(11):\n        cc_points = 10*x - 5*(10-x)\n        vivi_points = cc_points + point_diff\n        if cc_points + vivi_points == total_points:\n            return x\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2*book + 3*magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 // 5\n    teachers_rooms = 3\n    total_rooms = girls_rooms + teachers_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_per_person = 650 / 15\n    flour_for_18_people = flour_per_person * 18\n    return flour_for_18_people\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number_str = '2581953752'\n    minimum_sum = float('inf')\n\n    # Iterate through all possible cuts by choosing two positions to cut\n    for i in range(1, len(number_str) - 1):\n        for j in range(i + 1, len(number_str)):\n            part1 = int(number_str[:i])\n            part2 = int(number_str[i:j])\n            part3 = int(number_str[j:])\n\n            # Sum the numbers after cutting and check if it is the new minimum\n            current_sum = part1 + part2 + part3\n            if current_sum < minimum_sum:\n                minimum_sum = current_sum\n\n    return minimum_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x and y be the two original numbers\n    x, y = symbols('x y')\n    \n    # Given that the sum of two numbers is 11.63\n    equation1 = Eq(x + y, 11.63)\n    \n    # Oliver accidentally shifted the decimal point in one of the numbers\n    # one position to the left and got an answer of 5.87\n    equation2 = Eq(x + y/10, 5.87)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate one hundred times the difference between the two numbers\n    difference = abs(solutions[x] - solutions[y])\n    \n    return int(difference * 100)\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    millimeters = 7000000\n    meters = millimeters / 1000\n    return meters\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    # Let x be the common factor for the first ratio\n    # science club to literature club is 9x to 10x\n\n    # Let y be the common factor for the second ratio\n    # literature club to math club is 5y to 7y\n\n    # We know that 10x = 5y since both represent the literature club\n    # From this equation, we get the relationship x = (5/10) * y or x = y / 2\n\n    # The total number of members is 9x + 10x + 7y = 99\n    # Replace x with y/2: 9*(y/2) + 10*(y/2) + 7y = 99\n\n    # Simplify the equation: (9y/2) + (10y/2) + 7y = 99\n    # Multiply by 2 to clear the denominator: 9y + 10y + 14y = 198\n    # Combine like terms: 33y = 198\n    # Solve for y: y = 198 / 33\n    y = 198 / 33\n\n    # Now, we calculate the number of members in the literature club (5y) and math club (7y)\n    literature_members = 5 * y\n    math_members = 7 * y\n\n    # Calculate the difference in number of members between math club and literature club\n    difference = math_members - literature_members\n\n    return int(difference)\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    divisor = 1\n    quotient = 12\n    remainder = 3\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Assuming the worst-case scenario to ensure 3 marbles of the same colour\n    # After taking out 2 blue marbles, 2 yellow marbles, and 1 red marble,\n    # the next marble could be of any colour, but would guarantee 3 of the same colour.\n    \n    # As each colour already has 2 taken out, the third will make a triplet.\n    blue_taken = 2\n    yellow_taken = 2\n    red_taken = 1\n\n    # Total is the sum of taken out marbles plus 1 to ensure we have 3 of the same\n    total_taken = blue_taken + yellow_taken + red_taken + 1\n    return total_taken\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side has 6 flowers, but this count includes the corners.\n    # Since each corner is shared by 2 sides, we would count the corner flowers twice.\n    # To get the total count, we count the corners once and other flowers 4 times.\n    \n    corners = 4  # One flower at each corner\n    other_flowers_per_side = 6 - 2  # Subtract 2 corner flowers from each side\n\n    total_flowers = corners + (other_flowers_per_side * 4)  # Total flowers calculation\n\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10.0\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = original_length - (piece1 + piece2)\n    longest_piece = max(piece1, piece2, piece3)\n    shortest_piece = min(piece1, piece2, piece3)\n    length_difference = longest_piece - shortest_piece\n    return length_difference\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n    # the book costs 1/3 of the original sum, and the bag costs 1/2 of the remainder\n    # if x is the original amount of money, then (2/3)x * (1/2) is spent on the bag\n    # so we have (1/3)x + (1/2)(2/3)x = (1/3)x + (1/3)x = (2/3)x\n\n    # So, 2/3 of the original money x is equal to total cost\n    # (2/3)x = total_cost\n    # x = total_cost * (3/2)\n    original_money = total_cost * (3/2)\n    return original_money\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the price of a volleyball as 'v'.\n    basketball, volleyball = symbols('basketball volleyball')\n    \n    # We have two equations based on the problem statement:\n    # Equation for total cost: 5 * basketball + 6 * volleyball = 325\n    # Equation for price relation: basketball = volleyball + 10\n    \n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n    equation2 = Eq(basketball, volleyball + 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    num_repeats = 47 // len(pattern)\n    remaining_digits = 47 % len(pattern)\n\n    sum_repeated_pattern = sum(int(digit) for digit in pattern) * num_repeats\n    sum_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    ans = sum_repeated_pattern + sum_remaining_digits\n\n    return ans\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    total_cost_for_nine = cost_per_bottle * 9\n    return total_cost_for_nine\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys and g represent the number of girls\n    b = symbols('b')\n    g = 40 - b  # Since there are 40 pupils in total\n\n    # Equation representing average pencils for the class\n    equation = Eq((20 * b + 60 * g) / 40, 35)\n\n    # Solving the equation for b\n    solution_b = solve(equation, b)\n\n    return solution_b[0]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    points = 61\n    total_problems = 25\n    points_per_correct = 4\n    points_per_incorrect = -1\n    jack_not_answered = 0\n\n    for jack_correct in range(1, total_problems + 1):\n        jack_incorrect = total_problems - jack_correct - jack_not_answered\n        johnson_correct = jack_correct - 1\n        johnson_incorrect = total_problems - johnson_correct - jack_not_answered\n\n        jack_score = jack_correct * points_per_correct + jack_incorrect * points_per_incorrect\n        johnson_score = johnson_correct * points_per_correct + johnson_incorrect * points_per_incorrect\n\n        if jack_score == points and johnson_score == points and jack_correct > johnson_correct:\n            return jack_not_answered\n\n        jack_not_answered += 1\n\n    return jack_not_answered\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Define cost constants\n    base_price = 4.5\n    shipping_handling = 12\n    discount = 0.2  # 20% discount\n    \n    # Since Kate's bill is $120, we first subtract the shipping and handling\n    bill_minus_shipping = 120 - shipping_handling\n    \n    # Calculate maximum cupcakes at base price within the bill\n    max_cupcakes_base_price = bill_minus_shipping // base_price\n    \n    if max_cupcakes_base_price <= 20:\n        # All cupcakes are priced at base price\n        return int(max_cupcakes_base_price)\n    else:\n        # Calculate the number of cupcakes bought at discounted price\n        cupcakes_at_discount = (bill_minus_shipping - (20 * base_price)) / (base_price * (1 - discount))\n        # Total cupcakes is the sum of first 20 at base price, and the rest at discounted price\n        total_cupcakes = 20 + cupcakes_at_discount\n        return int(total_cupcakes)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pig, goat = symbols('pig goat')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(3 * pig + 1 * goat, 440)\n    equation2 = Eq(1 * pig + 2 * goat, 280)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (pig, goat))\n\n    total_cost = 5 * solutions[pig] + 5 * solutions[goat]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    total_pence = 57\n\n    # Convert everything to pence\n    total_pounds_in_pence = total_pounds * 100\n\n    # Sum up the total in pence\n    total_in_pence = total_pounds_in_pence + total_pence\n    \n    # Convert the final result back to pounds\n    ans = total_in_pence / 100\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    return 15 * 3\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') // 3:\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    ans = solve(equation, A)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    rose_position_from_back = 12\n\n    total_people = people_in_front + rose_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    energetic_rate = 1 / 10\n    combined_rate = 1 / 6\n    lazy = symbols('lazy')\n\n    equation = Eq(energetic_rate + (1 / lazy), combined_rate)\n\n    days_lazy = solve(equation, lazy)[0]\n\n    return days_lazy\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_age, mother_age = symbols('melissa_age mother_age')\n\n    # Equation 1: Relationship when Melissa was 8\n    equation1 = Eq(mother_age - melissa_age, 32 - 8)\n    # Equation 2: Current relationship\n    equation2 = Eq(mother_age, 3 * melissa_age)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (melissa_age, mother_age))\n\n    return solutions[melissa_age]\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    \n    total_cost = (2 * adult_ticket_price) + (3 * child_ticket_price)\n    \n    return total_cost\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_age_difference = 42\n    years_later = 2\n\n    grandmother_current_age = john_current_age + grandmother_age_difference\n    total_age_in_future = (john_current_age + years_later) + (grandmother_current_age + years_later)\n\n    return total_age_in_future\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for John's number\n    john_number = symbols('john_number')\n\n    # Create the equation according to the problem statement\n    equation = Eq((john_number + 45) / 3, 2 * john_number)\n\n    # Solve the equation for John's number\n    solution = solve(equation, john_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    sum_of_series = (n * (n + 1)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    original_number = (result - 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    total_books = 10\n    min_books_per_person = 2\n\n    # Initialize the count of ways to 0\n    count = 0\n\n    # Generate all possible combinations of dividing the books with at least 2 books per person\n    for combo in combinations_with_replacement(range(min_books_per_person, total_books - 2 * min_books_per_person + 1), 3):\n        if sum(combo) == total_books:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    return -2 + 9\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Worst case scenario for not getting 4 different colors:\n    # We pick all marbles of the most abundant color, then all of the second most abundant, and then all of third.\n    # After this step, no matter which marble we pick, we will have 4 different colors.\n\n    # 1. Pick all 12 red marbles -> We have 12 red.\n    # 2. Pick all 9 blue marbles -> We have 12 red, 9 blue.\n    # 3. Pick all 8 yellow marbles -> We have 12 red, 9 blue, 8 yellow.\n    # At this point, we have 12 + 9 + 8 = 29 marbles which are either red, blue or yellow.\n    # 4. Pick 1 more marble, and it is guaranteed to be the 4th color (in this case, green).\n\n    # Therefore, we need to draw 29 + 1 marbles to ensure we have 4 marbles of different colors.\n    ans = 12 + 9 + 8 + 1\n    return ans\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    number_str = '5' * 19 + '0' + '9' * 19  # create the number string with the middle digit as '0'\n    for i in range(10):\n        test_number = int(number_str[:19] + str(i) + number_str[20:])  # Inject the i-th digit in the middle\n        if test_number % 7 == 0:\n            return i  # Return the digit that makes the number divisible by 7\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1/5\n\n    total_pages = pages_first_day / fraction_of_book\n    return int(total_pages)\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds_digit in range(1, 10):\n        for tens_digit in range(0, 10):\n            for ones_digit in range(0, 10):\n                if (hundreds_digit + tens_digit + ones_digit == 15 and\n                    tens_digit == 2 * hundreds_digit and\n                    hundreds_digit == ones_digit + 1):\n                    return hundreds_digit * 100 + tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    first_two_digit_num_with_unit_6 = 16  # The first two-digit number ending with 6\n    last_two_digit_num_with_unit_6 = 96   # The last two-digit number ending with 6\n    step = 10  # The step between two consecutive numbers ending with 6\n\n    # Calculate how many numbers are there from the first to the last\n    num_of_nums = ((last_two_digit_num_with_unit_6 - first_two_digit_num_with_unit_6) // step) + 1\n\n    return num_of_nums\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    last_purchase = 105.6 - 14.4\n    total_spent = last_purchase + 105.6\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let's denote the number of storybooks Anthea originally has as 'anthea_books'.\n    # According to the problem, if Jason gives 4 books to Anthea, they will have the same number of books.\n    # So, Jason will have 30 - 4 = 26 books left.\n    # And Anthea will have anthea_books + 4 books.\n\n    # Since they have the same number of books after the exchange:\n    # anthea_books + 4 = 26\n\n    # Calculating the original number of books Anthea had:\n    anthea_books = 26 - 4\n\n    # Now we find the difference between the storybooks Jason and Anthea had originally:\n    jason_books = 30\n    difference = jason_books - anthea_books\n\n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2021):\n        a, b = b, a + b\n    return b % 3\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Tom is the 10th from the start, so there are 9 children shorter than Tom.\n    # The tallest child is 131 cm, and there are 31 - 10 = 21 children taller than Tom.\n    # For Tom to be the maximum height, the 21 taller children must be the 21 tallest possible children.\n    # This means they are the 21 consecutive heights immediately below 131 cm.\n    # The shortest of these children would then be 131 - 21 = 110 cm.\n    # And Tom, being shorter than this child, would have the next possible lower whole number height\n    tom_max_height = 110 - 1\n    return tom_max_height\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Let x be the total number of gifts Wan Ting has\n    # Let y be the total number of students\n    # Based on the problem statements, we can create two equations:\n    # x = 5y + 3 (1) -- If each student is given $5, there will be $3 left\n    # x = 4y + 9 (2) -- If each student is given $4, there will be $9 left\n    \n    # By equating the two expressions for x, we get:\n    # 5y + 3 = 4y + 9\n    # Solving for y gives us the number of students\n    y = 9 - 3\n    \n    # Therefore, the number of students is:\n    return y // (5 - 4) # Use integer division since the number of students must be an integer\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    n = 840\n    factors = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            factors += 1\n        i += 1\n    return factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    # According to the ratio of Alan's to Bella's money 4:3.\n    equation1 = Eq(alan, 4/7 * (alan + bella))\n\n    # Alan has £20 more than Chloe.\n    equation2 = Eq(alan, chloe + 20)\n\n    # Sum of their money is £200.\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_price = 7.85\n    bar_price_each = 1.83\n    total_cost = box_price + 2 * bar_price_each\n    note = 20\n    change = note - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    import math\n    num_people_in_middle = 3  # Since Lily and her mother are fixed at the ends\n    num_ways = math.factorial(num_people_in_middle)\n    return num_ways\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    last_term = 99\n    common_difference = 4\n\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n\n    sum_of_terms = (number_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return round(1.28 - 0.57, 2)\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'v' be the total number of visitors\n    visitors = symbols('visitors')\n\n    # Equation representing the number of children (3/5 of total visitors)\n    children_count = 3/5 * visitors\n\n    # Equation for the number of remaining visitors (not children)\n    remaining_visitors = visitors - children_count\n\n    # Equation representing the number of men (1/2 of the remaining visitors)\n    men_count = 1/2 * remaining_visitors\n\n    # Equation representing the difference in count (140 more children than men)\n    difference_eq = Eq(children_count, men_count + 140)\n\n    # Solve the equation for the number of visitors\n    solutions = solve(difference_eq, visitors)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4, 5, 6, 7, 8]\n    all_possible_numbers = set(int(''.join(map(str, p))) for p in permutations(digits, 2))\n    valid_numbers = []\n\n    for number in all_possible_numbers:\n        tens, ones = divmod(number, 10)\n        if ones == 2 * tens or ones + tens == 9 or tens == ones + 5 or (number % 2 != 0):\n            valid_numbers.append(number)\n\n    sorted_numbers = sorted(valid_numbers)\n\n    # Find the smallest number (ones digit is twice the tens digit)\n    smallest = [num for num in sorted_numbers if num % 10 == 2 * (num // 10)]\n    \n    # Find the largest number (sum of ones and tens digits is 9)\n    largest = [num for num in sorted_numbers if (num % 10) + (num // 10) == 9]\n\n    # Find the second largest number (tens digit is 5 more than the ones digit)\n    second_largest = [num for num in sorted_numbers if (num // 10) == (num % 10) + 5]\n\n    # Since there is only 1 odd number among the 4 numbers\n    odd_numbers = [num for num in sorted_numbers if num % 2 != 0]\n    if len(odd_numbers) == 1:\n        valid_numbers = [n for n in sorted_numbers if n in smallest + largest + second_largest + odd_numbers]\n    else:\n        return None  # Return None if we do not get exactly one odd number\n\n    # All 4 numbers should be unique and should fit the criteria\n    if len(valid_numbers) == 4:\n        valid_numbers = sorted(list(set(valid_numbers)))\n        # The second smallest number after sorting\n        ans = valid_numbers[1]\n        return ans\n    else:\n        return None  # Return None if we don't get exactly 4 unique numbers\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, peter = symbols('sam peter')\n    \n    original_sam = sam + 40  # Sam originally had 40 more stickers than Peter\n    sam_after_giving = original_sam - 0.20 * original_sam  # Sam gave 20% of his stickers to Peter\n    peter_after_receiving = peter + 0.20 * original_sam  # Peter received 20% of Sam's original stickers\n\n    peter_after_giving = peter_after_receiving - 0.25 * peter_after_receiving  # Peter gave 25% of his stickers to Sam\n    sam_after_receiving = sam_after_giving + 0.25 * peter_after_receiving  # Sam received 25% of Peter's stickers after receiving Sam's stickers\n\n    equation = Eq(sam_after_receiving - peter_after_giving, 96)  # In the end, Sam has 96 more stickers than Peter\n    \n    peter_stickers = solve((equation, Eq(original_sam, peter + 40)), (sam, peter))\n    \n    return peter_stickers[peter]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Average of first three numbers\n    average_initial = 120\n    # Number of first three numbers\n    num_initial = 3\n    # Total sum of first three numbers\n    total_sum_initial = average_initial * num_initial\n    \n    # New average after adding fourth number\n    new_average = 150\n    # New number of numbers\n    num_total = 4\n    # Total sum after adding fourth number\n    total_sum_new = new_average * num_total\n    \n    # Fourth number calculation\n    fourth_number = total_sum_new - total_sum_initial\n    \n    return fourth_number\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    # Let's denote x as the number of questions answered correctly, and y as the number of questions answered incorrectly.\n    # Since there are 20 questions in total, we have x + y = 20.\n    # The scoring system gives 5 points for each correct answer and deducts 2 points for each incorrect answer.\n    # Thus, for points, we have the equation 5x - 2y = 51.\n    # Now we can solve the system of equations using substitution or elimination. Let's use substitution.\n    \n    # from these equations, we can express y in terms of x:\n    # y = 20 - x\n    \n    # Substituting y in the second equation, we have:\n    # 5x - 2(20 - x) = 51\n    # 5x - 40 + 2x = 51\n    # 7x = 51 + 40\n    # 7x = 91\n    # x = 91 / 7\n    x = 91 // 7  # Use integer division since the number of correct answers must be an integer.\n    \n    # Thus, the number of correct answers is:\n    return x\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the original amount of money Amy had.\n    x = symbols('x')\n\n    # After spending 6/11 of her money and an additional $5, the remainder is (5/11)x - 5.\n    first_spend = (6/11) * x + 5\n    first_remainder = x - first_spend\n\n    # After spending 3/10 of the remainder and an additional $12, she has $30 left.\n    second_spend = (3/10) * first_remainder + 12\n    final_remain = first_remainder - second_spend\n\n    # Set up the equation that her final amount is $30.\n    equation = Eq(final_remain, 30)\n\n    # Solve for 'x'.\n    original_amount = solve(equation, x)\n\n    return original_amount[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, gillian = symbols('sally gillian')\n\n    ratio_current = Eq(sally / gillian, 2 / 7)\n    ratio_future = Eq((sally + 15) / (gillian + 15), 1 / 2)\n\n    solutions = solve((ratio_current, ratio_future), (sally, gillian))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n    actual_subtrahend = 75\n\n    # Find the initial number before Olivia miscalculated\n    initial_number = mistaken_subtrahend + mistaken_result\n\n    # Calculate the correct result by subtracting the correct subtrahend\n    correct_result = initial_number - actual_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = 12  # LCM of 3 and 4 is 12\n    ans = 40 // lcm  # Find how many times the LCM fits into 40\n    return ans\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    first_term = 5\n    last_term = n\n\n    # Calculate the sum of squares up to n (1^2 + 2^2 + ... + n^2)\n    sum_squares_n = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Calculate the sum of squares up to the term before the first term (1^2 + 2^2 + ... + (first_term - 1)^2)\n    sum_squares_before_first = ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) // 6\n\n    # Calculate the difference to get the sum from the first term to the last term\n    correct_sum = sum_squares_n - sum_squares_before_first\n    \n    # Kimmy's answer\n    kimmys_answer = 1240\n\n    return kimmys_answer == correct_sum, correct_sum\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_kg = 9 # Given that 9 apples have a mass of 1 kg\n    total_kg = 8 # Total kg of apples used by the baker\n    apples_used = total_kg * apples_per_kg # Total apples used\n    apples_per_cake = 4 # Apples used to bake one cake\n    cakes_baked = apples_used // apples_per_cake # Total cakes that can be baked\n    \n    return cakes_baked\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    return 35 * 9\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5  # metres\n    number_of_seeds = 12\n\n    # Total distance between all seeds would be the circumference of the circle.\n    circumference = distance_between_seeds * number_of_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3/8) * 32\n    return ans\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Let x be the number of pieces of paper cut into three parts\n    # Each paper cut into three parts will result in two more pieces\n    # Total pieces of paper will be the original number plus the additional pieces from cutting\n    # 10 (original) + 2x (additional from cutting x papers) = 16 (total)\n    \n    # total_pieces - original_pieces = 2 * cut_pieces\n    cut_pieces = (16 - 10) / 2\n\n    return int(cut_pieces)\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    return 198 + 67 - 25\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    avg_boys = 10\n    total_participants = 12 + 8\n    avg_participants = 14\n    \n    total_score_boys = total_boys * avg_boys\n    total_score_participants = total_participants * avg_participants\n    total_score_girls = total_score_participants - total_score_boys\n    \n    avg_girls = total_score_girls / 8\n    \n    return avg_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # original square side, denoted as 'n'\n    # number of students = n^2 + 9\n    # after adding one row and one column: (n+1)^2 = n^2 + 9 + 16\n    # solving the equation for original number of students gives us n^2 + 2n - 16 = 0\n    # now we will solve the quadratic equation to find the value of 'n'\n    from sympy import symbols, solve\n\n    n = symbols('n')\n    equation = n**2 + 2*n - 16\n    solutions = solve(equation, n)\n\n    # we are interested in the positive integer solution\n    for s in solutions:\n        if s.is_real and s > 0:\n            n_value = s\n            break\n\n    # calculate number of students\n    num_students = n_value**2 + 9\n    return int(num_students)\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Initially, 50 postcards are divided into 5 envelopes.\n    postcards_initial = 50\n    envelopes_initial = 5\n    per_envelope_initial = postcards_initial // envelopes_initial\n    \n    # After a week, an unknown number of postcards are divided into 2 more envelopes with the same number per envelope.\n    envelopes_additional = 2\n    per_envelope_additional = per_envelope_initial\n    \n    # Since each of the 2 additional envelopes contains the same number of postcards as the initial envelopes,\n    # we can calculate the total number of additional postcards.\n    postcards_additional = envelopes_additional * per_envelope_additional\n    \n    # Total postcards are the sum of initial postcards and additional postcards.\n    total_postcards = postcards_initial + postcards_additional\n     \n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    possible_coins = [1, 2, 5, 10, 20, 50, 100, 200]  # coin values in pence\n    for smallest_coin in possible_coins:\n        for second_smallest in possible_coins:\n            if second_smallest < smallest_coin:\n                continue\n            for third_smallest in possible_coins:\n                if third_smallest < second_smallest:\n                    continue\n                # Since each coin has exactly one other coin of the same value,\n                # the change must be twice the sum of the three distinct coin values.\n                change = 2 * (smallest_coin + second_smallest + third_smallest)\n                if change == 250:  # change must equal 250 pence (£2.50)\n                    return smallest_coin / 100  # convert pence to pounds\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_cookies = symbols('total_cookies')\n    \n    burnt_cookies = (3/5) * total_cookies\n    remaining_cookies = total_cookies - burnt_cookies\n    \n    sold_cookies = (75/100) * remaining_cookies\n\n    equation = Eq(burnt_cookies, sold_cookies + 42)\n\n    solution = solve(equation, total_cookies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 80 / 100\n    cost_per_1g = cost_per_100g / 100\n    cost_for_250g = cost_per_1g * 250\n    cost_in_pounds = cost_for_250g / 100\n    return cost_in_pounds\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    # Evaluate the first part of the expression\n    first_numerator = (-3.2) - (0.2) ** 2\n    first_denominator = -1.8\n    first_part = first_numerator / first_denominator\n\n    # Evaluate the second part of the expression\n    second_numerator = 41.08 - (-2 / 5) ** 2\n    second_denominator = 3 + (-2) ** 3\n    second_part = second_numerator / second_denominator\n\n    # Calculate the final answer\n    ans = first_part - second_part\n\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n\n    num_containers = total_apples // apples_per_container\n    if total_apples % apples_per_container != 0:\n        num_containers += 1\n\n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    # Iterate through possible numbers with 9 in the units place\n    for i in range(1, 10000):\n        original = i * 10 + 9\n        new_number = int(str(9) + str(i))\n        if new_number == 4 * original:\n            return original\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    # A number is divisible by 6 if it is divisible by both 2 and 3.\n    # Divisibility by 2: The last digit of the number must be even.\n    # Therefore Y can be 0, 2, 4, 6, or 8.\n    \n    # Divisibility by 3: The sum of the digits must be divisible by 3.\n    # The sum of the first three digits 1 + 0 + 7 = 8.\n    \n    # We will find a Y that when added to 8 results in a sum divisible by 3 and makes the number even.\n    for Y in [0, 2, 4, 6, 8]:\n        if (8 + Y) % 3 == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 1 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Laura must stand in the front, so there is only 1 choice for the first position\n    \n    # There are 5 students left (other than Laura and Rita) and they can stand in any order, so 5! possibilities for them.\n    \n    # Rita cannot stand at the end, so she has 5 possible positions (2nd to 6th place in the line) because the 7th is the end.\n    \n    # So the number of ways they can form the line is:\n    ways = 1 * factorial(5) * 5\n    \n    return ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    return (a + b) * a\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount = 0.50\n    additional_discount = 0.20\n    items_count = 8\n\n    discounted_price = regular_total_price * (1 - discount)\n    final_price = discounted_price * (1 - additional_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n    \n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction = 4/7\n\n    total_apples = sold_apples / fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the time format\n    time_format = \"%H:%M %dth %B\"\n\n    # Given times for Singapore and London\n    sg_time_str = \"05:00 24th August\"\n    lon_time_str = \"11:00 24th August\"\n\n    # Convert string times to datetime objects\n    sg_time = datetime.strptime(sg_time_str, time_format)\n    lon_time = datetime.strptime(lon_time_str, time_format)\n\n    # Adjust London time to Singapore time\n    adjusted_lon_time = lon_time + timedelta(hours=7)\n\n    # Calculate flight duration\n    duration = adjusted_lon_time - sg_time\n\n    return duration.total_seconds() // 3600  # Convert to hours\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Jerry travels 3/7 of the distance, so Kevin travels 4/7 of the distance\n    # Since they start at the same time and meet each other, their speeds are in the same ratio as the distances travelled\n    # Let d be the distance between towns A and B\n    # Jerry's speed is then (3/7)d divided by the time, and Kevin's speed is given as 80 mph\n    # We also know that Jerry travels 2/5 of the road length each hour\n    # This means (2/5)d must equal (3/7)d multiplied by some factor that represents the speed ratio\n    # Equating Jerry's and Kevin's travel rates gives us:\n    # (3/7)d / (2/5)d = Kevin's speed / Jerry's speed\n    # From this, we can express Jerry's speed:\n    # Jerry's speed = (3/7)d / ((2/5)d) * 80 mph\n    # Simplify the expression to find d:\n    # d = (3/7) / (2/5) * 80\n    # d = (3*5) / (7*2) * 80\n    # d = 15 / 14 * 80\n    # d = 15 * 80 / 14\n    d = (15 / 14) * 80\n    return d\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pupils = 40\n    total_pencils = total_pupils * 35\n    boys_pencils = 20\n    girls_pencils = 60\n    \n    # Let the number of boys be x\n    # Then number of girls is (total_pupils - x)\n    # total_pencils = boys_pencils*x + girls_pencils*(total_pupils - x)\n    # Solve for x\n    \n    x = (total_pencils - girls_pencils*total_pupils) / (boys_pencils - girls_pencils)\n    return int(x)\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    prob_win = 0.3\n    prob_draw = 0.1\n    prob_lose = 1 - (prob_win + prob_draw)\n\n    # Probability that Sally wins the first game and loses or draws the second game\n    prob_win_first = prob_win * (prob_lose + prob_draw)\n\n    # Probability that Sally loses or draws the first game and wins the second game\n    prob_win_second = (prob_lose + prob_draw) * prob_win\n\n    # The probability that Sally wins exactly one of the two games\n    prob_win_exactly_one = prob_win_first + prob_win_second\n\n    return prob_win_exactly_one\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # Let's start checking from 32 (since it's the number of lollipops left when using boxes of 4)\n    lollipops = 32\n    while True:\n        # If the remainder of the lollipops divided by 7 is 3,\n        # it means the last box would have 3 lollipops.\n        if (lollipops - 3) % 7 == 0:\n            break\n        # if it's not the case, check the next multiple of 4 plus 32\n        lollipops += 4\n    return lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # Find the differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # Calculate the greatest common divisor of the differences\n    from math import gcd\n    d = gcd(gcd(diff1, diff2), diff3)\n\n    # Since R is the same for all, it is the difference between one of the numbers and the quotient of that number divided by D\n    # We take the largest number and perform the modulo operation with D to find R\n    R = 3111 % d\n\n    # The answer we want is D + R\n    return d + R\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if (i // 10 + i % 10) % 5 == 0:  # Check if the sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    def new_operation(a, b):\n        return a * 3 + b * 4\n\n    ans = new_operation(4, 7)\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eddi, wiya = symbols('eddi wiya')\n    \n    equation1 = Eq(eddi/wiya, 8/7)\n    equation2 = Eq((eddi-4)/(wiya+4), 18/17)\n    \n    solutions = solve((equation1, equation2), (eddi, wiya))\n    \n    return solutions[eddi]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_marbles = (5 / 6) * blue_marbles\n    green_marbles = red_marbles / 2\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    # Calculating the numerator\n    numerator = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n\n    # Calculating the denominator\n    denominator = ((2017 + 1/3) - 2016.875) * 17\n\n    # Calculating the fraction after the division\n    fraction = numerator / denominator\n\n    # Multiplying by 3 23/32\n    ans = fraction * (3 + 23/32)\n\n    return ans\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal = ''\n    remainder = 1\n    for _ in range(2012):\n        remainder *= 10\n        digit = remainder // 13\n        decimal += str(digit)\n        remainder %= 13\n        if remainder == 0:\n            break\n    if len(decimal) < 2012:\n        decimal = (decimal * (2012 // len(decimal) + 1))[:2012]\n    return int(decimal[2011])\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of students in Class A and Class B\n    students_A, students_B = symbols('students_A students_B')\n\n    # Given equation: Class A has 47 more students than Class B\n    equation1 = Eq(students_A, students_B + 47)\n\n    # After moving x students from A to B, A has 9 more than B\n    # New number of students in A: students_A - x\n    # New number of students in B: students_B + x\n    # Updated equation: New A = New B + 9\n    x = symbols('x')\n    equation2 = Eq(students_A - x, students_B + x + 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (students_A, students_B, x))\n\n    # Return the number of students that needs to move from A to B\n    return solutions[x]\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece_1 = 5.3\n    piece_2 = 3.8\n    \n    piece_3 = total_length - (piece_1 + piece_2)\n    \n    return piece_3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n\n    total_footballs = footballs_per_basket * number_of_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # We know that y - x = 57 and x + y = 77\n    # Solving for x gives us x = (77 - 57) / 2\n    x = (77 - 57) / 2\n    return int(x)\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # meters per minute\n    turtle_speed = 30   # meters per minute\n    \n    # The time the rabbit started sleeping (10 minutes after start)\n    sleep_start = 10  # minutes\n    \n    # The duration for which the rabbit slept\n    sleep_duration = 215  # minutes\n    \n    # The distance the rabbit ran before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * sleep_start\n    \n    # The time the turtle reaches the finish line\n    turtle_time_to_finish = 6990 / turtle_speed\n    \n    # The time the rabbit would take to reach the finish line if it didn't sleep\n    rabbit_time_to_finish_without_sleep = 6990 / rabbit_speed\n    \n    # The time the rabbit actually takes to finish the race including sleeping time\n    rabbit_time_to_finish = sleep_start + sleep_duration + (6990 - rabbit_distance_before_sleep)/rabbit_speed\n    \n    # Check who reached the finish line first and by what distance\n    if rabbit_time_to_finish < turtle_time_to_finish:\n        # Rabbit finished first. Calculate the distance turtle covered when rabbit finished.\n        turtle_distance_when_rabbit_finished = turtle_time_to_finish - rabbit_time_to_finish\n        # Convert time back to distance\n        turtle_distance_when_rabbit_finished *= turtle_speed\n        winner = \"rabbit\"\n        distance_difference = 6990 - turtle_distance_when_rabbit_finished\n    else:\n        # Turtle finished first. Calculate the distance rabbit covered when turtle finished.\n        rabbit_distance_when_turtle_finished = rabbit_time_to_finish - turtle_time_to_finish\n        # Convert time back to distance\n        rabbit_distance_when_turtle_finished *= rabbit_speed\n        winner = \"turtle\"\n        distance_difference = 6990 - rabbit_distance_when_turtle_finished\n\n    return winner, round(abs(distance_difference))\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    def is_oddtastic(number):\n        return all(int(digit) % 2 != 0 for digit in str(number))\n    \n    ans = sum(is_oddtastic(number) for number in range(1, 1000))\n    return ans\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # Hundreds digit, has to be odd (1, 3, 5, 7, 9)\n        for j in range(0, 10):  # Tens digit\n            for k in range(0, 10):  # Units digit\n                # Check if the sum of digits is 5 and units digit is odd\n                if i + j + k == 5 and k % 2 != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    individual_cost_pounds = total_cost_pounds / (total_pairs * 2)  # There are 2 avocados in a pair\n    individual_cost_pence = individual_cost_pounds * 100  # Convert from pounds to pence\n    return individual_cost_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    # Initialize a counter to keep track of total scores frequencies\n    totals = Counter()\n\n    # Iterate through all possible outcomes of rolling two dice\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            totals[die1 + die2] += 1  # Sum of dice and count occurrences\n\n    # Find the total score(s) with the highest frequency\n    max_frequency = max(totals.values())\n    most_likely_totals = [total for total, frequency in totals.items() if frequency == max_frequency]\n\n    return most_likely_totals[0]  # Return the most likely total score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_class_score = 36 * 89\n    girls_total_score = 88 * girls\n    boys_total_score = 91 * boys\n\n    equation = Eq(girls_total_score + boys_total_score, total_class_score)\n\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    for rhinos in range(29):\n        deer = rhinos\n        ostriches = 28 - (rhinos + deer)\n        total_legs = 4 * rhinos + 4 * deer + 2 * ostriches\n        if total_legs == 88:\n            return rhinos\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # Each square table fits 3 people on each side\n    people_per_square_table = 12\n    people_per_side = people_per_square_table // 4\n    \n    # With eight tables, corners will not be counted twice, but internal sides will be\n    corners_counted_once = 8 * 4 - (8 - 1) * 2\n    internal_sides = (8 - 1) * 2 * (people_per_side - 1)\n    \n    # Maximum number of people that can sit evenly spaced around the long table\n    max_people = corners_counted_once + internal_sides\n    \n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Andrew's marbles be 'a', Boris's marbles be 'b', Jeffery's marbles be 'j', and Xavier's marbles be 'x'\n    a, b, j, x = symbols('a b j x')\n\n    # Andrew has 30 marbles less than the average of Boris, Jeffery and Xavier\n    equation1 = Eq(a, (b + j + x)/3 - 30)\n\n    # Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(x, 3 * a)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b, j, x))\n\n    # Since we need to find the total number of marbles Boris and Jeffery have, we take the sum of 'b' and 'j'\n    total_boris_jeffery = solutions[b] + solutions[j]\n\n    return total_boris_jeffery\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    digits = 339\n    pages = 0\n    digit_count = 0\n    \n    while digit_count < digits:\n        pages += 1\n        digit_count += len(str(pages))\n        \n    return pages\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = \"11:15 AM\"\n    travel_duration = timedelta(hours=3, minutes=50)\n\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M %p\")\n    departure_time = arrival_time - travel_duration\n    ans = departure_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n    \n    return ans\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    last_digit_32 = 32 % 10\n    last_digit_22 = 22 % 10\n\n    last_digit_32_pow = pow(last_digit_32, 33, 10)\n    last_digit_22_pow = pow(last_digit_22, 29, 10)\n\n    ans = (last_digit_32_pow - last_digit_22_pow) % 10\n\n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    for n in range(1, 100):\n        students = (2*n+1)**2 // 2 + 1\n        teachers = (2*n+1)**2 // 2\n        if students - teachers == 52:\n            return (2*n+1)**2\n    return None\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_difference = 0\n    # A is a 2-digit number, B is a 4-digit number\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                difference = B - A\n                if difference > max_difference:\n                    max_difference = difference\n    return max_difference\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "def solution():\n    from math import comb\n    ans = comb(12, 6)\n    return ans\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(apples, 5/7 * oranges)\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    return 10**4\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors, primerange\n\n    # We know that a number n that is a multiple of 15 can be expressed in its\n    # prime factorization as n = 2^a * 3^b * 5^c * ... where a, b, c, ... are non-negative integers\n    # Since 15 = 3 * 5, our number must thus be of the form n = 3^x * 5^y * other_primes^exponents\n    # with x >= 1 and y >= 1 to be a multiple of 15\n\n    # The number of factors of n is given by (a+1)*(b+1)*(c+1)*..., taking each exponent of the\n    # prime factorization, adding 1, and multiplying together. So, for n to have exactly 15 factors,\n    # we must have 15 = (x+1) * (y+1) * ... (product of one or more factors). So for 15 factors,\n    # (15) = (15), (5 * 3), (3 * 5), (1 * 15)\n\n    # We will calculate the number of numbers that follow this property\n\n    count = 0\n    # The possible exponent combinations for 15 factors, excluding the exponents for prime 3 and 5\n    # These combinations come from the prime factorization of 15: (1, 15) or (3, 5).\n    # Note that we count (1, 15) only once, because (15, 1) represents the same situation where\n    # only one extra prime is involved.\n    exponent_combinations = [(14,), (4, 2), (2, 4), (1,)]\n    primes = list(primerange(1, 100))  # Let's check primes up to 100, you can extend this range if needed\n\n    # we need to find other primes other than 3 and 5, so we exclude them\n    other_primes = [p for p in primes if p not in (3, 5)]\n\n    # Now, let's iterate through the exponent combinations\n    for exponents in exponent_combinations:\n        if len(exponents) == 1:\n            # Only one extra prime with exponent 14, which means p^14,\n            # as the +1 gives us 15. So we only loop through the primes once.\n            for p in other_primes:\n                if 3**1 * 5**1 * p**14 < 2**32:  # Let's assume we are interested in 32-bit integers\n                    count += 1\n        else:\n            # Multiple primes involved\n            for i in range(len(other_primes)):\n                for j in range(i + 1, len(other_primes)):\n                    p1, p2 = other_primes[i], other_primes[j]\n                    if 3**exponents[0] * 5**exponents[1] * p1**1 * p2**1 < 2**32:\n                        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    # We are asked to express 2014/37 as a continued fraction of the form 54 + 1/(x + 1/(y + 1/z))\n    # First, subtract 54 from (2014/37) to find the continued fraction part\n    main_fraction = 2014/37 - 54\n\n    # The fractional part should be equal to 1/(x + 1/(y + 1/z))\n    # Take the reciprocal of the main_fraction to get the value of x + 1/(y + 1/z)\n    x_part = 1 / main_fraction\n    \n    # Extract the integer part (x) and the fractional part (1/(y + 1/z))\n    x = int(x_part)\n    yz_fraction = x_part - x\n    \n    # Similarly, take the reciprocal of the yz_fraction to resolve y + 1/z\n    yz_part = 1 / yz_fraction\n    \n    # Extract y and 1/z\n    y = int(yz_part)\n    z_fraction = yz_part - y\n\n    # Take the reciprocal of the z_fraction to get the value of z\n    z = int(1 / z_fraction)\n    \n    # Return the sum of x, y, and z\n    return x + y + z\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    for start_number in range(1, 13):\n        if (start_number + 30 - 1) % 12 == 10 % 12:\n            return start_number\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    ans = 200 + 198 + 196 + 194 + 24\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Variables for the amounts of oil sold from each bucket\n    big_sold, small_sold = symbols('big_sold small_sold')\n    \n    # Setting up the equations based on the problem statement\n    equation1 = Eq(89 - big_sold, 12 * (45 - small_sold))\n    equation2 = Eq(big_sold, small_sold)\n    \n    # Solving the equations to find the amounts of oil sold\n    solutions = solve((equation1, equation2), (big_sold, small_sold))\n    \n    return solutions[big_sold]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    amount_per_person = jackpot // winners\n    \n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2 / 3) * snake_hibernation\n    frog_hibernation = (5 / 4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    for num in range(100, 1000):\n        if (num % 5 == 1) and (num % 6 == 1) and (num % 7 == 1):\n            return num\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    # from the equations, we can derive that\n    # a = b - 5 = c - 11\n    # and since a, b, c are primes and a, b, c are all different:\n    # start with the smallest prime greater than 11 (which is 13) for c,\n    # then b must be 5 more, and a must be 11 more.\n    # continue until a valid triplet of primes is found.\n    \n    from sympy import isprime\n    \n    # start with the smallest prime that can be c\n    c = 13\n    while True:\n        b = c + 5\n        a = c + 11\n        if isprime(a) and isprime(b) and isprime(c):\n            return a * b * c\n        c += 2  # only odd numbers can be prime (except 2), so increment by 2\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time_hours = 54 / 60  # Convert time from minutes to hours.\n    speed_to_park = 5  # Speed from home to the park.\n    speed_back_home = 4  # Speed from park back home.\n\n    # Let the distance between her home and the park be 'd' km.\n    # Time to park = distance/speed_to_park = d/5\n    # Time back home = distance/speed_back_home = d/4\n    # Total time = time to park + time back home = d/5 + d/4. This sums up to total_time_hours.\n    # So, we have the equation: d/5 + d/4 = total_time_hours\n\n    # Solve for 'd' using algebra\n    # Get a common denominator (5 * 4 = 20),\n    # so we have (4d + 5d) / 20 = total_time_hours\n    # which simplifies to 9d / 20 = total_time_hours\n\n    # Now solve for d: d = (total_time_hours * 20) / 9\n    d = (total_time_hours * 20) / 9\n\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of pies Rennie baked as 'r'\n    # and the number of pies Joleen baked as 'j'.\n    r, j = symbols('r j')\n\n    # Writing down the equation based on the problem statement:\n    # Joleen baked 5 more pies than Rennie: j = r + 5\n    # 3/4 of the number of pies Rennie baked was equal to 2/3 of the number of pies Joleen baked: 3/4 * r = 2/3 * j\n    equation1 = Eq(j, r + 5)\n    equation2 = Eq(3/4 * r, 2/3 * j)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (r, j))\n\n    # Total number of pies baked is the sum of pies baked by Rennie and Joleen\n    total_pies = solutions[r] + solutions[j]\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    girls, boys = symbols('girls boys')\n    equation = Eq(girls, boys + 8)\n    equation2 = Eq(girls + boys, 26)\n    solutions = solve((equation, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # x will be the number of students who like both fruits\n    x = Symbol('x')\n\n    # The number of students who like apples is three times the number who like both\n    apples = 3 * x\n\n    # The number of students who like bananas is five times the number who like both\n    bananas = 5 * x\n\n    # We know there are 35 students in the class and they all like at least one of the two fruits:\n    # Total = number who like apples + number who like bananas - number who like both\n    # 35 = apples + bananas - both\n    equation = apples + bananas - x - 35\n\n    # Solve the equation\n    num_both = solve(equation, x)\n\n    return num_both[0]\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Number of aliens (himself and his 5 brothers)\n    aliens = 1 + 5\n    # Number of legs for each alien\n    legs_per_alien = 5\n    \n    # Total legs for all aliens\n    total_legs = aliens * legs_per_alien\n\n    # Since each shoe pack contains 5 shoes, and each alien needs 5 shoes,\n    # the number of shoe packs needed is equal to the number of aliens.\n    shoe_packs_needed = aliens\n    # The price of one shoe pack\n    price_per_shoe_pack = 78\n    \n    # Total cost for shoes\n    total_shoe_cost = shoe_packs_needed * price_per_shoe_pack\n    \n    # Since each pair of socks contains 2 socks, and each alien has 5 legs,\n    # we need to divide the total legs by 2 to get the number of pairs needed.\n    sock_pairs_needed = total_legs // 2\n    # The price of one pair of socks\n    price_per_sock_pair = 12\n    \n    # Total cost for socks\n    total_sock_cost = sock_pairs_needed * price_per_sock_pair\n    \n    # Total cost is the sum of total cost for shoes and socks\n    total_cost = total_shoe_cost + total_sock_cost\n    \n    return total_cost\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    used_oranges_kg = (550 + 1050) / 1000  # Convert grams to kilograms\n    remaining_oranges_kg = total_oranges_kg - used_oranges_kg\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    \n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    common_difference = 3\n    number_of_days = 5\n\n    # The formula for the sum of an arithmetic series is: n/2 * (2a + (n-1)d)\n    total_chairs = (number_of_days / 2) * (2 * first_day_chairs + (number_of_days - 1) * common_difference)\n\n    return int(total_chairs)\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = sum(str(i).count('2') for i in range(1, 416))\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    ans = 111111111 * 99999999\n    return ans\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the time Lee takes to finish the job alone\n    # Let N be the time Nancy takes to finish the job alone\n    L, N = symbols('L N')\n\n    # Lee and Nancy together finish the job in 10 hours\n    # So their combined work rate is 1/10 jobs per hour\n    # Lee's work rate is 1/L and Nancy's work rate is 1/N\n    # Together, their work rate is 1/L + 1/N = 1/10\n    equation1 = Eq(1/L + 1/N, 1/10)\n\n    # Nancy works 20 hours while Lee works only 6 hours and they finish the job\n    # So, Nancy's work done is 20/N and Lee's work done is 6/L\n    # Combined work done is 20/N + 6/L = 1 job\n    equation2 = Eq(20/N + 6/L, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L, N))\n\n    # We need the time Nancy takes to finish the job alone, which is N\n    return solutions[N]\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # Choosing one pencil and one ruler\n    pencil_ruler_combinations = pencils * rulers\n\n    # Choosing one pencil and one pen\n    pencil_pen_combinations = pencils * pens\n\n    # Choosing one ruler and one pen\n    ruler_pen_combinations = rulers * pens\n\n    # Since each choice involves two different items, add up all the combinations\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # John's initial equation: 60x + 6y + 25 = 200 + 10x + y\n    # Let's simplify John's equation first and see if he made a mistake\n    simplified_equation = (60 - 10) * 1 + (6 - 1) * 2 + 25 # x is multiplied by 50, and y by 5\n    if simplified_equation == (200 * 1 + 10 * 2): # Check if left equals right\n        john_is_right = True\n    else:\n        john_is_right = False\n\n    # If John is not right, we'll find the correct expression for A and B values\n    if not john_is_right:\n        # The correct equation is: 6 * A + 25 = B\n        # Therefore: 6 * (10x + y) + 25 = 20x + 2y\n        # Simplify this to find the relationship between x and y\n        # 60x + 6y + 25 = 20x + 2y\n        # 40x + 4y = 25 --> 10x + y = 25 / 2.5 = 10\n        # A = 10x + y, for the smallest values of x and y which are integers and x != y\n        # The smallest value for x is 1, hence y can be 0\n        x, y = 1, 0\n        A = 10 * x + y\n    else:\n        A = 45  # John's answer\n    \n    return A\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Worst-case scenario: Benny takes out all the marbles except one of each color\n    # So, he takes 2 blue, 2 yellow and 1 red, which totals 5 marbles\n    # The next marble Benny takes out will ensure he has 3 of the same color\n    return 5 + 1  # 5 previously taken out, plus the next one guarantees 3 of a kind\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    terms = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # As of now, the sum of Mary and her son's age is 45\n    current_sum = 45\n    # In 5 years, both Mary and her son will be 5 years older\n    # Mary's new age will be Mary's current age + 5\n    # Her son's new age will be her son's current age + 5\n    # So the sum of their ages in 5 years' time will be:\n    future_sum = current_sum + 5 + 5\n    \n    return future_sum\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3  # Add 3 to both sides of the equation y - 3 = -10 to isolate y\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # Total cost in pence\n    amount_paid = 100     # Amount paid in pence (£1 = 100p)\n    \n    change = amount_paid - total_cost  # Change received in pence\n    \n    return change / 100   # Convert pence to pounds\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Garrett and Sebastian's current ages\n    garrett, sebastian = symbols('garrett sebastian')\n\n    # Equation 1: Garrett is 24 years older than Sebastian\n    equation1 = Eq(garrett, sebastian + 24)\n\n    # Equation 2: In 10 years, Garrett will be thrice as old as Sebastian\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (garrett, sebastian))\n\n    # Return Garrett's age\n    return solutions[garrett]\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    people = 4\n    days = 7\n    \n    travel_cost_per_person = 150\n    hotel_cost_per_person_per_day = 50\n    spending_money_per_person = 250\n    \n    total_travel_cost = travel_cost_per_person * people\n    total_hotel_cost = hotel_cost_per_person_per_day * days * people\n    total_spending_money = spending_money_per_person * people\n    \n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n    \n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n\n    # The nth term of an arithmetic sequence can be found by the formula:\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Treat each set of books that must be together as a single item.\n    # This gives us 4 items to arrange: math book set, chemistry book set, physics book set, and 1 biology book.\n    order_of_sets = factorial(4)\n    \n    # Now we need to consider the arrangements within each set:\n    math_books_arrangements = factorial(4)\n    chemistry_books_arrangements = factorial(3)\n    physics_books_arrangements = factorial(2)\n    \n    # Multiply the arrangements of sets with the internal arrangements of each set.\n    total_arrangements = (order_of_sets * math_books_arrangements *\n                          chemistry_books_arrangements * physics_books_arrangements)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    # Total number of ways to arrange 'ORANGES' (7 letters)\n    total_ways = factorial(7)\n    \n    # Total number of ways to arrange 'AE' (as a block with O) and four other letters (R, N, G, S)\n    vowels_together = factorial(5) * factorial(3)\n    \n    # Subtract the arrangements where vowels are together from all possible arrangements\n    ans = total_ways - vowels_together\n    \n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the fruits\n    apples, oranges, bananas = symbols('apples oranges bananas')\n\n    # Create equations based on the problem description\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_017_007\n    return number\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n    height_kilometers = height_meters / meters_to_kilometers\n    return height_kilometers\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n    \n    ways = category1 * category2 * category3\n    \n    return ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import primerange\n\n    # Since a, b and c are prime and they are part of the equal expressions,\n    # we find the common value that the expressions evaluate to\n    common_value = 31 + min(primerange(1, 31))  # As a is a prime < 31\n\n    # Solve for a, b, and c using the common value\n    a = common_value - 31\n    b = common_value - 26\n    c = common_value - 20\n\n    # Now calculate the product\n    ans = a * b * c\n    return ans\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    perimeter = 12\n    \n    for a in range(1, perimeter // 2):  # Side a\n        for b in range(a, (perimeter - a) // 2 + 1):  # Side b, equal or greater than a\n            c = perimeter - a - b  # Side c\n            if a <= b + c and b <= a + c and c <= a + b:  # Check if sides form a triangle\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Matches in each pile\n    pile_A = 35\n    pile_B = 24\n\n    # Perform XOR operation on the number of matches in each pile\n    # This gives the Nim-sum\n    nim_sum = pile_A ^ pile_B\n\n    if nim_sum == 0:\n        # If the Nim-sum is zero, Eddie (who goes first) does not have a winning strategy\n        ans = \"Wei'er\"\n    else:\n        # If the Nim-sum is not zero, Eddie has a winning strategy\n        ans = \"Eddie\"\n\n    return ans\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initial amount of stickers they have\n    eugene, melvin, david = symbols('eugene melvin david')\n\n    # After Eugene gives twice to Melvin, then the relations are:\n    # eugene' = eugene - 2 * melvin\n    # melvin' = melvin + 2 * melvin = 3 * melvin\n    # david' = david (unchanged at this stage)\n    \n    # After Melvin gives to David, then the relations are:\n    # eugene'' = eugene' (unchanged at this stage)\n    # melvin'' = melvin' - david\n    # david'' = david + david = 2 * david\n    \n    # After David gives to Eugene, then the relations are:\n    # eugene''' = eugene'' + eugene'\n    # melvin''' = melvin'' (unchanged at this stage)\n    # david''' = david'' - eugene'\n    \n    # The final ratio eugene''':melvin''':david''' is 46:12:7\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq((eugene - 2*melvin) + (eugene - 2*melvin), 46)\n    equation2 = Eq(3*melvin - david, 12)\n    equation3 = Eq(2*david - (eugene - 2*melvin), 7)\n    equation4 = Eq(eugene + melvin + david, 260)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (eugene, melvin, david))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 13)]\n    ans = solve_congruence(*congruences)\n    return next(filter(lambda x: 100 <= x <= 190, range(ans[0], ans[1]*ans[2], ans[2])))\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n    price_of_sofa = sales_tax_paid / sales_tax_rate\n\n    return price_of_sofa\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "from math import factorial\n\ndef solution():\n    # Since the table can be rotated and the rotation is considered the same arrangement,\n    # we fix one person and arrange the remaining 5 people around the table.\n    # This eliminates the rotational symmetry and is effectively a linear arrangement.\n    \n    # The number of ways to arrange 5 people in a line is 5! (factorial of 5)\n    return factorial(5)\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    original_condition = Eq(boys, girls)\n    boys_addition = 12\n    girls_subtraction = 8\n    end_condition = Eq(boys + boys_addition, 2 * (girls - girls_subtraction))\n\n    solutions = solve((original_condition, end_condition), (boys, girls))\n\n    total_students_at_first = solutions[boys] + solutions[girls]\n\n    return total_students_at_first\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term) + 1\n    sum_seq = (first_term + last_term) * num_terms // 2\n    return sum_seq\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = 0\n    for i in range(80, 55, -4):\n        ans += i - (i - 2)    \n    return ans\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Given speeds and distances\n    speed_first_part = 7    # speed in m/s\n    speed_middle_part = 5   # speed in m/s\n    speed_last_part = 8     # speed in m/s\n\n    distance_first_part = 280   # distance in meters\n    distance_middle_part = 400  # distance in meters\n    distance_last_part = 800 - (distance_first_part + distance_middle_part)  # remaining distance in meters\n    \n    # Calculate time for each part\n    time_first_part = distance_first_part / speed_first_part     # time in seconds\n    time_middle_part = distance_middle_part / speed_middle_part  # time in seconds\n    time_last_part = distance_last_part / speed_last_part        # time in seconds\n    \n    # Total time spent\n    total_time = time_first_part + time_middle_part + time_last_part  # time in seconds\n    \n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2 / 7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    digits = [3, 5, 7]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 25):\n        if isprime(i) and isprime(25 - i):\n            return i * (25 - i)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    \n    ribbon1 = 15\n    ribbon2 = 45\n    \n    largest_piece_length = gcd(ribbon1, ribbon2)\n    \n    return largest_piece_length\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time = (6 * 60) + 52  # Convert start time to minutes\n    end_time = (8 * 60) + 24    # Convert end time to minutes\n    time_spent = end_time - start_time  # Calculate the difference\n    return time_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for each type of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    # Sally had some cupcakes left after selling\n    equation3 = Eq(chocolate - chocolate/6 + vanilla - 2*vanilla/3 +\n                   blueberry - 7*blueberry/9, 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3),\n                      (chocolate, vanilla, blueberry))\n\n    chocolate_cupcakes = solutions[chocolate]\n\n    # Calculate how many chocolate cupcakes did Sally sell\n    chocolate_sold = chocolate_cupcakes - chocolate_cupcakes / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n      \n    # Setup the equations based on the problem statement\n    equation1 = Eq(girls, boys + 65)\n    equation2 = Eq(boys - 2/5 * boys, girls - 3/7 * girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Retrieve the solutions for boys and girls\n    boys_solution = solutions[boys]\n    girls_solution = solutions[girls]\n\n    # Calculate the number of boys and girls that remained in the hall\n    boys_remain = boys_solution - 2/5 * boys_solution\n    girls_remain = girls_solution - 3/7 * girls_solution\n\n    # Return the total number of students remained\n    return boys_remain + girls_remain\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamps = 50\n    distance_apart = 2  # in meters\n\n    # The total length will be the distance between lamps multiplied by the number of gaps between lamps\n    # Since lamps are at both ends, the number of gaps is one less than the number of lamps\n    num_gaps = num_lamps - 1\n    \n    total_length = num_gaps * distance_apart\n\n    return total_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n    \n    # Using the Pigeonhole Principle formula:\n    # n = Total number of items\n    # m = Total number of categories (pigeonholes)\n    # At least one category must contain at least ceil(n/m) items\n    max_peaches_per_student = (total_peaches + total_students - 1) // total_students\n\n    return max_peaches_per_student\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    return 48 + 84\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    midway_number = (18 + 52) / 2\n    return midway_number\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Let the smallest number be x\n    # Then the numbers are x, x+1, x+2, x+3, x+4, x+5, x+6\n    # Their sum is 7x + (1+2+3+4+5+6) = 140\n    # Calculate the sum of the consecutive integers from 1 to 6\n    sum_of_consecutive_ints = sum(range(1, 7))\n    \n    # Formulate the equation for x and solve it\n    # 7x + 21 = 140\n    x = (140 - sum_of_consecutive_ints) // 7\n    \n    return x\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    ans = (2/9) * 36\n    return ans\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We set up the congruences based on the problem statement:\n    # child_count % 4 = 3, child_count % 7 = 6, and child_count % 9 = 6\n    # These congruences mean that when the total number of children is\n    # divided by 4, the remainder is 3; and similar interpretations apply to the other cases.\n    congruences = ((3, 4), (6, 7), (6, 9))\n\n    # We solve the congruences using the Chinese Remainder Theorem\n    child_count, _ = solve_congruence(*congruences)\n    \n    # The solution will give us the smallest solution, which is what we are looking for\n    return child_count\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_card_cost_p = 45\n    stamp_cost_p = 27\n    number_of_items = 10\n    note_value_p = 1000  # converting £10 to pence\n\n    total_cost_p = (post_card_cost_p + stamp_cost_p) * number_of_items\n    change_p = note_value_p - total_cost_p\n\n    return change_p\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # Claire's seat is fixed. There are 3 seats left to arrange for Chantel, Tony, and Cale.\n    \n    # Without any restrictions, there are 3! ways for the 3 people to arrange themselves.\n    total_ways = 3*2*1\n    \n    # However, Tony cannot sit face to face with Claire. Since Claire's seat is fixed,\n    # if we fix Tony's seat as well, there are 2! ways for Chantel and Cale to arrange themselves.\n    # There are 2 possible seats for Tony to prevent him sitting face to face with Claire.\n    restricted_ways = 2*1\n    \n    # We subtract the restricted arrangements from the total unrestricted arrangements.\n    ans = total_ways - restricted_ways\n\n    return ans\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank makes 180 tables in 10 days\n    frank_rate = 180 / 10  # tables per day\n\n    # Ryan makes 180 tables in 15 days\n    ryan_rate = 180 / 15  # tables per day\n\n    # Find the difference in tables produced per day between Frank and Ryan\n    difference = frank_rate - ryan_rate\n\n    return difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    # Let the total number of questions be x\n    # Let the actual time she has to mark the questions be t minutes\n    # She marks 4 questions per minute -> time taken is x / 4\n    # She would leave 5 minutes late -> x / 4 = t + 5\n    # She marks 6 questions per minute -> time taken is x / 6\n    # She would leave 5 minutes early -> x / 6 = t - 5\n    # Equating the two equations: x / 4 - 5 = x / 6 + 5\n    # Solve for x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    eq1 = Eq(x / 4 - 5, x / 6 + 5)\n\n    solutions = solve(eq1, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    # When rounded off to 1 decimal place, the smallest possible value \n    # that would round up to 7.4 is 7.35, since 7.34 would round down to 7.3\n    smallest_mass = 7.35\n    return smallest_mass\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    marks_correct = 5\n    marks_wrong = -2\n    total_marks = 79\n\n    # Let x be the number of questions Kathy answered correctly,\n    # then (total_questions - x) would be the number of questions she answered incorrectly.\n\n    # Setting up the equation:\n    # (Number of correct answers * marks per correct answer) + \n    # (Number of wrong answers * marks per wrong answer) = Total marks\n    # x * marks_correct + (total_questions - x) * marks_wrong = total_marks\n\n    # Solving for x:\n    # x * marks_correct - x * marks_wrong = total_marks - total_questions * marks_wrong\n    # x * (marks_correct - marks_wrong) = total_marks - total_questions * marks_wrong\n    # x = (total_marks - total_questions * marks_wrong) / (marks_correct - marks_wrong)\n\n    x = (total_marks - total_questions * marks_wrong) / (marks_correct - marks_wrong)\n    return int(x)\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_earned = 165  # total amount earned in pounds\n    price_per_cake = 0.75  # price of each cake in pounds\n\n    number_of_cakes_sold = total_earned / price_per_cake\n\n    return int(number_of_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_restaurant = (3/7) * total_money\n    left_after_restaurant = total_money - spent_restaurant\n    spent_enrichment = (2/9) * left_after_restaurant\n    left_after_enrichment = left_after_restaurant - spent_enrichment\n    return left_after_enrichment\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    candies_to_give = (amy_candies - emma_candies) // 2\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution('x', 'y')"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # It takes 6 seconds to make 3 chimes, which means it takes 6 seconds for 2 intervals between chimes.\n    # So, 1 interval takes (6 seconds / 2) = 3 seconds.\n\n    interval_time = 6 / 2\n\n    # To chime 6 times, there are 5 intervals between the chimes.\n\n    total_intervals = 6 - 1\n\n    # Total time to chime 6 times is the interval time multiplied by the number of intervals.\n\n    total_time = interval_time * total_intervals\n\n    return total_time\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    p_days = 12\n    p_hours_per_day = 8\n    p_total_hours = p_days * p_hours_per_day\n\n    q_days = 8\n    q_hours_per_day = 10\n    q_total_hours = q_days * q_hours_per_day\n\n    # Calculate work rate of P and Q\n    p_work_rate = 1 / p_total_hours\n    q_work_rate = 1 / q_total_hours\n\n    # Combined work rate when P and Q work together for 8 hours a day\n    combined_work_rate = p_work_rate + q_work_rate\n    hours_together_per_day = 8\n\n    # Total hours to complete the job when working together\n    total_hours_together = 1 / combined_work_rate\n\n    # Convert total hours to full days, considering they work for 8 hours a day\n    days_together_full = total_hours_together / hours_together_per_day\n    \n    # Return the ceiling of the value to get the next whole number\n    import math\n    ans = math.ceil(days_together_full)\n\n    return ans\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100):\n        first = i\n        second = i + 1\n        third = i + 2\n        fourth = i + 3\n        fifth = i + 4\n        \n        if ((first + second + third) % 37 == 0 and (second + third + fourth) % 60 == 0) or \\\n           ((first + second + fourth) % 37 == 0 and (second + fourth + fifth) % 60 == 0) or \\\n           ((first + third + fourth) % 37 == 0 and (third + fourth + fifth) % 60 == 0) or \\\n           ((second + third + fourth) % 37 == 0 and (third + fourth + fifth) % 60 == 0) or \\\n           ((first + second + fifth) % 37 == 0 and (second + third + fourth) % 60 == 0) or \\\n           ((first + third + fifth) % 37 == 0 and (first + second + third) % 60 == 0) or \\\n           ((first + fourth + fifth) % 37 == 0 and (first + second + fourth) % 60 == 0) or \\\n           ((second + fourth + fifth) % 37 == 0 and (first + third + fourth) % 60 == 0) or \\\n           ((second + third + fifth) % 37 == 0 and (first + third + fifth) % 60 == 0) or \\\n           ((third + fourth + fifth) % 37 == 0 and (first + fourth + fifth) % 60 == 0):\n            return fifth\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    difference_in_meters = 3.2 - 0.3  # Convert 30 cm to 0.3 meters\n    difference_in_centimeters = difference_in_meters * 100  # Convert meters to centimeters\n    return difference_in_centimeters\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    # The sum of squares formula is (n(n + 1)(2n + 1)) / 6\n    # In Pip's method, the expression simplifies the given series by factoring out 3 squared (9)\n    # Then applies the sum of squares formula to the series 1^2 to 10^2\n\n    n = 10\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    ans = 3 * sum_of_squares\n    return ans\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    ans = 0\n    for i in range(1, 41):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56 / 100  # convert pence to pounds\n    total_cost = 5 * cost_per_kg\n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n    \n    factors_count = 1\n    prime_factors = factorint(120)\n    for exponent in prime_factors.values():\n        factors_count *= (exponent + 1)\n    \n    return factors_count\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    target_product = 180\n    factors = [(i, target_product // i) for i in range(1, int(target_product**0.5) + 1) if target_product % i == 0]\n    smallest_difference = min(abs(i[0] - i[1]) for i in factors)\n    return smallest_difference\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temperature_midnight = -8\n    temperature_midday = 13\n\n    overall_change = temperature_midday - temperature_midnight\n\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for number in range(6, 16):  # 6 is the first multiple of 3 after 5, 15 is the limit.\n        if 27 % number == 0:  # Check if number is a factor of 27\n            return number\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    import math\n    return math.gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_weight = total_durian_weight + total_watermelon_weight\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let x be the time it takes Max to cover the distance\n    # Then, the time it takes Luca at usual speed is (x + 10)\n    # The ratio of Luca's speed to Max's speed is 2:3, Luca_Speed/Max_Speed = 2/3\n    # Since Speed = Distance/Time, we have (Distance/(x + 10))/Distance/x = 2/3\n    # Simplifying the equation: 1/(x + 10) / (1/x) = 2/3\n    # Cross-multiply: 3x = 2(x + 10)\n    # Solve for x: 3x = 2x + 20\n    x = 20  # minutes, the time it takes Max to cover the distance\n\n    # Now, let's find the time it would take Luca at double his usual speed\n    # If Luca walks at double his usual speed, the time taken will be halved\n    # Original time taken by Luca is x + 10\n    time_taken_by_Luca_at_double_speed = (x + 10) / 2\n\n    return time_taken_by_Luca_at_double_speed\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pencils = symbols('pencils')\n    \n    # After giving away 5 pencils, she has twice as many pens as pencils.\n    equation = Eq(2 * (pencils - 5), pencils)\n    \n    # Solve the equation to find the number of pencils.\n    number_of_pencils = solve(equation, pencils)[0]\n    \n    # Since she initially had the same number of pens and pencils,\n    # the initial number of pens is the same as the number of pencils.\n    initial_pens = number_of_pencils\n    \n    # She then bought another 18 pens.\n    final_pens = initial_pens + 18\n    \n    return final_pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    jog_time = 1         # Star jogs for 1 hour from 6:30 AM to 7:30 AM\n    jog_speed = 6.5      # Star jogs at 6.5 mph\n    walk_time = 2        # Star walks for 2 hours from 7:30 AM to 9:30 AM\n    walk_speed = 4.5     # Star walks at 4.5 mph\n    \n    jog_distance = jog_time * jog_speed  # Total distance jogged\n    walk_distance = walk_time * walk_speed  # Total distance walked\n    \n    total_distance = jog_distance + walk_distance  # Total distance traveled\n    \n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 4 different patterns (suits) in a deck of cards and 13 cards within each pattern.\n    # To ensure that we have at least one 'A', we must take into account the worst-case scenario.\n    # That is drawing all the 'non-A' cards from each pattern before finally getting an 'A'.\n    # Since there are 4 patterns and 12 non-A cards within each pattern,\n    # In the worst case, we might have to draw all those non-A cards.\n    \n    non_a_cards_per_pattern = 12\n    patterns = 4\n    \n    # Since the pigeonhole principle dictates that after having a full set from each pattern and\n    # drawing one more card, we will surely have at least one 'A' card,\n    # Therefore, we calculate the number of cards to draw to ensure that:\n    cards_drawn = (non_a_cards_per_pattern * patterns) + 1\n    \n    return cards_drawn\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for page in range(1, 319):\n        count += str(page).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_still_water = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_still_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Let's denote x as the number of correct answers\n    # y as the number of wrong answers.\n    # We know that x + y = 40 (since there are 40 questions in total)\n    # We also know that 2x - y = 71 (since 2 points are awarded for each correct answer\n    # and 1 point is deducted for each wrong answer)\n    \n    # The mistake in Tom's method is that he assumes the difference in marks for a correct\n    # and wrong answer is 1, but it should be 3 since for each question that he thought\n    # was correct but is actually wrong, he's gaining a mark instead of losing two.\n    \n    # We can now set up the equations:\n    # x + y = 40 --> Equation (1)\n    # 2x - y = 71 --> Equation (2)\n    \n    # Let's solve this system using substitution or elimination method:\n    \n    # Multiply Equation (1) by 2 to help with the elimination method:\n    # 2x + 2y = 80 --> Equation (3)\n    \n    # Now subtract Equation (2) from Equation (3):\n    # (2x + 2y) - (2x - y) = 80 - 71\n    # 2x + 2y - 2x + y = 9\n    # 3y = 9\n    # y = 9 / 3\n    y = 9 / 3\n    \n    # Now we substitute the value of y in Equation (1) to find x:\n    # x + 9/3 = 40\n    # x + 3 = 40\n    # x = 40 - 3\n    x = 40 - 3\n    \n    # We return the number of questions Tom answered wrongly (the value of y):\n    return int(y)  # make sure to return an integer\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for num in range(1, 226):\n        count += str(num).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    num_piles = 10\n    books_per_pile = total_books // num_piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    fraction_left_handed_tennis_players = 1 / 10\n    fraction_left_handed = 25 / 100\n\n    left_handed_students = left_handed_tennis_players / fraction_left_handed_tennis_players\n    total_students = left_handed_students / fraction_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram_butter = 80 / 20\n    butter_needed_for_100_cookies = 100 / cookies_per_gram_butter\n    return butter_needed_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the departure time\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    \n    # Define the travel time\n    travel_hours = 3\n    travel_minutes = 35\n    travel_time = timedelta(hours=travel_hours, minutes=travel_minutes)\n    \n    # Calculate the arrival time\n    arrival_time = departure_time + travel_time\n    # Format the arrival time in the format \"HH:MM\"\n    arrival_time_formatted = arrival_time.strftime(\"%H:%M\")\n    \n    return arrival_time_formatted\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # There are 3 choices for each digit place\n    choices_per_place = 3\n    \n    # Since the number is three digits, we have 3 choices for each of the 3 places\n    total_combinations = choices_per_place ** 3\n\n    return total_combinations\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count_zeros = 0\n    current_number = 1\n    \n    while count_zeros < 100:\n        current_number_str = str(current_number)\n        \n        count_zeros += current_number_str.count('0')\n        \n        if count_zeros >= 100:\n            break\n            \n        current_number += 1\n\n    return current_number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drunk = 9\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drunk\n    \n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time_in_years = 10\n\n    interest = principal * interest_rate * time_in_years\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2*x - 2), 30 - 3*x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_initial = 180\n    time_initial = 6\n    speed_tired = 120\n    time_tired = 8\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Let the first number in the sequence be n\n    # Then the eight consecutive numbers are n, n+1, n+2, n+3, n+4, n+5, n+6, n+7\n    # The sum of these eight numbers is 8n + 28 (sum of first seven consecutive integers starting from 1) which is equal to 2012\n    # So we solve for n: 8n + 28 = 2012\n\n    # Calculate the first term\n    n = (2012 - 28) // 8\n\n    # Calculate the last term, which is the largest number\n    largest_number = n + 7\n\n    return largest_number\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1 # +1 for Elias\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    # Sachin's rate of work per hour\n    sachin_rate = 1 / 3\n    # Peter's rate of work per hour\n    peter_rate = 1 / 6\n    \n    # Combined rate of work\n    combined_rate = sachin_rate + peter_rate\n    \n    # Time taken to clean the flat when working together\n    time_taken = 1 / combined_rate\n    \n    return time_taken\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42 / 35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B', integer=True)  # Define variables representing the number of students in class A and B\n    \n    # Initial condition: A is 5/7 of B\n    initial_condition = Eq(A, 5/7 * B)\n    \n    # After transferring 3 students: (A+3) is 4/5 of (B-3)\n    transfer_condition = Eq(A + 3, 4/5 * (B - 3))\n    \n    # Solve the system of equations for A and B\n    solutions = solve((initial_condition, transfer_condition), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    # Solve the equation 3a + 8 = 14\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    ans = 52248 // 12\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let n be the number of boys in one row (or column) of the smaller square array\n    # then n^2 = total number of boys\n    # The larger square array will have n+1 rows and n+1 columns, with the girls at the end\n    # Therefore, (n+1)^2 = n^2 + 17 (since 17 girls form the extra row and column)\n    \n    # Start with n=1 and try increasing values until the equation is satisfied\n    n = 1\n    while True:\n        small_square = n * n\n        big_square = (n + 1) * (n + 1)\n        if big_square - small_square == 17:\n            break\n        n += 1\n    \n    # n^2 will be the total number of boys\n    total_boys = n ** 2\n    return total_boys\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    initial_length = 240\n    cut_length = 45 * 2\n    remaining_length = initial_length - cut_length\n    piece_length = 40\n\n    num_pieces = remaining_length // piece_length\n\n    return num_pieces\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    # Let the distance be d km\n    # Time for the trip if leaves at 1 PM (7 PM - 1 PM): 6 hours\n    # Time for the trip to arrive one hour earlier: 5 hours\n    # Speed needed to arrive one hour earlier: 2 km/h more\n    \n    # If she increases her speed by 2 km/h and wants to finish one hour earlier,\n    # her original speed is d/6 km/h, and her new speed is d/5 km/h\n    # We know that the new speed is 2 km/h greater than the original speed, so:\n    # d/5 = d/6 + 2\n    # Solving for distance d gives us the distance between Ivy's home and the destination\n    from sympy import symbols, Eq, solve\n    \n    d = symbols('d')\n    equation = Eq(d/5, d/6 + 2)\n    \n    distance = solve(equation, d)\n    \n    return distance[0]\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40  # total volume in litres\n    flow_rate = 125  # flow rate in millilitres per second\n    ml_in_a_litre = 1000  # number of millilitres in a litre\n\n    # convert litres to millilitres\n    total_ml = total_litres * ml_in_a_litre\n\n    # calculate time in seconds\n    time_seconds = total_ml / flow_rate\n    \n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    total_digits = 237\n    digits_per_page = 1\n    current_page = 1\n    pages_counted = 0\n    \n    while total_digits > 0:\n        total_digits -= digits_per_page\n        pages_counted += 1\n        if current_page == 9:\n            digits_per_page += 1\n        elif current_page == 99:\n            digits_per_page += 1\n        current_page += 1\n        \n    return pages_counted\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a1, d = symbols('a1 d')\n    \n    eq1 = Eq(a1 + 8*d, a1 + 14*d + 18)\n    eq2 = Eq(a1 + 19*d + a1 + 11*d, 88)\n    \n    sols = solve((eq1, eq2), (a1, d))\n    \n    a1_value = sols[a1]\n    d_value = sols[d]\n    \n    a32 = a1_value + 31 * d_value\n    \n    return a32\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of initial bottles Faye has.\n    # Since she swapped 5 times, and each time she got 1 more than expected:\n    # We assume that each time she exchanged 3 bottles, she received 1 bottle back without giving 3 empty bottles.\n    # So, in essence this 1 extra bottle per swap would add up to 5 extra bottles.\n    \n    # each swap gave her 1 extra bottle, for a total of 5 swaps\n    extra_bottles = 5\n    \n    # each swap should result in x // 3 exchanges, then x should be a multiple of 3\n    # the total number of bottles after 5 swaps is new_bottles + extra_bottles\n    new_bottles = 4\n    total_bottles_after_swaps = new_bottles + extra_bottles\n    \n    # since Faye continues to exchange until she cannot anymore,\n    # the number of bottles she ends with must be less than 3\n    # thus it initially seems she must end with 2 bottles, since she has 4 and got an extra one\n    # this would imply she exchanged (total_bottles_after_swaps - 2) bottles in sets of 3\n    # thus the initial amount should be (total_bottles_after_swaps - 2) * 3\n    \n    initial_bottles = (total_bottles_after_swaps - 2) * 3\n    \n    return initial_bottles\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    # Let d be the number of days\n    original_average = 1462\n    incorrect_average = 1468\n    incorrect_value = 1268\n    correct_value = 1082\n\n    # d * original_average = d * incorrect_average - incorrect_value + correct_value\n    # d * (original_average - incorrect_average) = correct_value - incorrect_value\n    d = (correct_value - incorrect_value) / (original_average - incorrect_average)\n    \n    return int(d)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # He cuts 3 segments to get 4 equal pieces in 12 minutes\n    # Each cut takes 12 / 3 = 4 minutes\n    cut_time_per_segment = 12 / 3\n\n    # He needs to make 11 cuts to get 12 pieces\n    # Total time = cut_time_per_segment * number_of_cuts_needed\n    total_time = cut_time_per_segment * 11\n\n    return total_time\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    age_in_2011 = 2011 - birth_year\n    return age_in_2011\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25\n    \n    first_term = last_shown_term - (nth_term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, marry, carol = symbols('lily marry carol')\n\n    equation1 = Eq(4 * lily * marry * carol, 2240)\n    equation2 = Eq(carol, marry + 2)\n    equation3 = Eq(marry, lily + 1)\n\n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n\n    for sol in solutions:\n        if all(map(lambda x: x.is_real and x > 0, sol)):\n            return sol[carol]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, simplify\n\n    x = symbols('x')\n    chewy_equation = (8*x + 8)/2 - 3*(x + 6)\n    correct_answer = simplify(chewy_equation)\n    \n    return correct_answer\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = total_flowers * 2 // 5\n    purple_flowers = total_flowers * 1 // 8\n    \n    return red_flowers + purple_flowers\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    \n    return ans\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # The splitting of identical marbles into piles can be thought of as placing a partition\n    # in a sequence of marbles. For n marbles into 2 piles, there are (n - 1) gaps between marbles\n    # where a partition could be placed. Thus, there are (n - 1) ways to split the marbles.\n    n = 10\n    ans = n - 1\n    return ans\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    ans = 6444 // 18\n    return ans\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # 1 liter is approximately 1.05669 quarts\n    cups_per_quart = 2  # 1 quart is 2 cups of 0.5 quart each\n    total_cups = liters_to_quarts * cups_per_quart\n    return round(total_cups)\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    wood1 = 85\n    wood2 = 200  # 2m converted to cm\n    wood3 = 147\n    total_length_cm = wood1 + wood2 + wood3\n    total_length_m = total_length_cm / 100  # Convert from cm to m\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fractional_part = 34 / 100\n    ans = whole_number + fractional_part\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    total_legs = 64\n    spider_legs = 8\n\n    # Assuming all legs belong to ants first (each with six legs) to find the maximum ants\n    max_ants = total_legs // 6\n\n    # Since the remainder must be accounted for by spiders, we find the largest number of ants \n    # where the remainder is a multiple of the number of spider legs\n    while (total_legs - (max_ants * 6)) % spider_legs != 0:\n        max_ants -= 1\n\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vivian, justin = symbols('vivian justin')\n\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian - justin, 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    return 34 + 2 - 11 + 14\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000  # 1 litre = 1000 millilitres\n    return 7.5 * litres_to_millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    expr = ((x - 6) * 6 + 6) / 6\n    equation = Eq(expr, 6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Assume the worst-case scenario where Jeremy picks the cars in such an order that\n    # he gets the maximum variety before getting three of the same color.\n    # He could pick 2 red, then 2 blue, then 2 white, which sums up to 2+2+2 = 6 cars.\n    # At this point, he has two of each color, but not three of the same color.\n    # The next car he picks must give him 3 of the same color.\n    # So, Jeremy needs to pick 1 more car after the initial 6 to be sure of getting 3 of the same color.\n    total_cars_needed = 6 + 1\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # After the 4th bounce, the ball reached a height of 36m, which is half of the height from the third bounce\n    height_third_bounce = 36 * 2  # Height after third bounce\n    # After the 3rd bounce, the ball reached a height that is three times the height from which it was dropped the second time\n    height_second_drop = height_third_bounce / 3  # Height from which the ball was dropped the second time\n    # After the 2nd bounce, the ball reached a height that is three times the height from which it was dropped initially\n    height_first_drop = height_second_drop / 3  # Initial height from which the ball was dropped\n\n    return height_first_drop\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    original_sum = Eq(x + y, 11.63)\n    accidental_sum = Eq(x + (y / 10), 5.87)\n    \n    solutions = solve((original_sum, accidental_sum), (x, y))\n    \n    difference = abs(solutions[x] - solutions[y])\n\n    return round(difference * 100)\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent = initial_amount / 2\n    remaining_amount = initial_amount - spent\n    return remaining_amount\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('012345679', 5):\n        num = int('8' + ''.join(perm))\n        if num % 3 == 0 and num % 4 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # in pence\n    cost_whole_cd = 899  # in pence, £8.99 is 899p\n    total_cost_individual_songs = 12 * cost_per_song\n    savings = total_cost_individual_songs - cost_whole_cd\n    \n    return savings / 100  # converting pence to pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):  # Looping through all 2 digit numbers\n        original = i\n        reverse = int(str(i)[::-1])  # Reversing the number\n        results.add(abs(original - reverse))  # Subtracting and adding result to a set\n    \n    # Check if all results are multiples of 9 by using modulo operation\n    all_multiples_of_nine = all(result % 9 == 0 for result in results)\n    \n    return all_multiples_of_nine\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = [1, 2, 3]\n    two_digit_numbers = set()\n\n    for digit1 in digits:\n        for digit2 in digits:\n            if digit1 != digit2:\n                two_digit_numbers.add(digit1 * 10 + digit2)\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # Sort the digits to find the smallest and largest numbers possible\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    sorted_digits = sorted(digits)\n\n    # The smallest number should start with 10 to avoid leading zero\n    smallest_num = int(str(sorted_digits[1]) + str(sorted_digits[0]) +\n                       str(sorted_digits[2]) + str(sorted_digits[3]) + \n                       str(sorted_digits[4]))\n\n    # The largest number should be formed by the remaining digits in reverse order\n    largest_num = int(str(sorted_digits[9]) + str(sorted_digits[8]) +\n                      str(sorted_digits[7]) + str(sorted_digits[6]) +\n                      str(sorted_digits[5]))\n\n    # The smallest difference is when you create the smallest and largest numbers\n    # like this and compute their difference.\n    ans = largest_num - smallest_num\n    return ans\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    sam, peter = symbols('sam peter')\n\n    # Initial condition: Sam had 40 stickers more than Peter\n    initial_condition = Eq(sam, peter + 40)\n\n    # After transactions: Sam gave 20% of his stickers to Peter\n    # and Peter gave 25% of his stickers to Sam\n    after_sam = sam - 0.2 * sam + 0.25 * peter\n    after_peter = peter + 0.2 * sam - 0.25 * peter\n\n    # Final condition: Sam had 96 stickers more than Peter after the exchange\n    final_condition = Eq(after_sam - after_peter, 96)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    # Return the number of stickers Peter had at first\n    return solutions[peter]\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_in_seconds = 15\n    length_of_train_meters = 450\n\n    # Speed = Distance / Time\n    speed_m_per_s = length_of_train_meters / time_in_seconds\n\n    # Convert speed from m/s to km/h (1 m/s = 3.6 km/h)\n    speed_km_per_h = speed_m_per_s * 3.6\n\n    return speed_km_per_h\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt_weight = 8\n    water_weight = 32\n    total_weight = salt_weight + water_weight\n    concentration = (salt_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 * 40 / 100\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_Ali = 14\n    Ali_and_Bala = 2\n    people_behind_Bala = 10\n    \n    total_people = people_in_front_of_Ali + Ali_and_Bala + people_behind_Bala\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    num_friends = 4\n    cards_sent_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    return (18 - 17) + (16 - 15) + (14 - 13)\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    return lcm(1, 2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    number_of_jugs = 4\n\n    total_water_added = jug_capacity * number_of_jugs\n\n    total_water = initial_water + total_water_added\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts collected by each friend\n    chloe, david, emily = symbols('chloe david emily')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(chloe, 2 * david) # Chloe collects twice as much as David\n    equation2 = Eq(david, 3 * emily) # David raises three times as much as Emily\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400) # Total amount collected\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    first_period_cookies = 9 * 3\n    second_period_cookies = 15 * 2\n    last_period_cookies = 10 * 2\n    total_days = 3 + 2 + 2\n    total_cookies = first_period_cookies + second_period_cookies + last_period_cookies\n    average_cookies_per_day = total_cookies / total_days\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Candy's work rate per day\n    candy_rate = 1 / 20\n    # David's work rate per day\n    david_rate = 1 / 25\n\n    # Total work done by Candy in 12 days\n    total_candy_work = 12 * candy_rate\n\n    # Let x be the days David takes off\n    # Then David works for (12 - x) days\n    # We need to find the value of x such that the total work done by Candy and David is 1 (the whole job)\n    for x in range(13):\n        total_david_work = (12 - x) * david_rate\n        total_work_done = total_candy_work + total_david_work\n        if total_work_done >= 1:\n            return x\n\n    return None\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's third law, the table applies a force equal in magnitude and opposite in direction\n    # to the gravitational force applied by the book (its weight).\n    # Since the book is at rest, these forces must be balanced, so the force exerted by the table is also 20N.\n    force_by_table = 20  # Magnitude of the force exerted by the table in Newtons (N)\n    return force_by_table\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n    \n    # Symbols for calculation\n    T = Symbol('T')\n    \n    # Define the equations based on the problem\n    tax_for_first_50k = 0.05 * 50000\n    tax_for_remaining = 0.01 * (140000 - 50000) * (8 + T)\n    total_tax = tax_for_first_50k + tax_for_remaining\n    \n    # Equation based on the given total tax paid\n    tax_equation = Eq(total_tax, 15100)\n    \n    # Solve for T\n    T_value = solve(tax_equation, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guy_age = y - 3\n    return guy_age\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_fruits, apples, pears = symbols('total_fruits apples pears')\n    \n    equation1 = Eq(apples, 4/5 * total_fruits)\n    equation2 = Eq(pears, total_fruits - apples)\n    equation3 = Eq(1/4 * apples, 1/8 * total_fruits)\n    equation4 = Eq(1/4 * pears, 30)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (total_fruits, apples, pears))\n    \n    return solutions[total_fruits]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Based on the Pigeonhole Principle, to guarantee we get 6 balls of the same type,\n    # we consider the worst case scenario where Lily takes out balls in a way that prolongs getting 6 of the same type.\n    # Worst case: Lily takes out 5 footballs, 5 basketballs, and 5 volleyballs without getting 6 of any type.\n    # After this, the next ball she takes out must be the 6th ball of some type.\n    \n    # Number of balls she must take to get 5 of each type:\n    balls_to_get_5_each = (5 * 3)\n    # The next ball she takes out will be the 6th of some type:\n    next_ball_to_get_6_of_a_type = 1\n    \n    # Total balls Lily must take out:\n    total_balls = balls_to_get_5_each + next_ball_to_get_6_of_a_type\n    \n    return total_balls\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variables\n    v_final = symbols('v_final')\n\n    # Constants given in the problem\n    g = 9.81  # Acceleration due to gravity in m/s^2\n    h = 5.0  # Height from which the ball is dropped in meters\n    m = 2.0  # Mass of the ball in kg\n\n    # Using the conservation of energy:\n    # Initial potential energy = Final kinetic energy\n    # m * g * h = 1/2 * m * v_final^2\n    # Solve for v_final:\n    equation = Eq(m * g * h, 1/2 * m * v_final**2)\n\n    # Solve for the final velocity\n    solutions = solve(equation, v_final)\n\n    # We want the positive root because speed can't be negative\n    return max(solutions)\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    initial_velocity = 5\n    angle = 45\n    angle_radians = math.radians(angle)\n    \n    # Initial velocity components\n    initial_velocity_x = initial_velocity * math.cos(angle_radians)\n    initial_velocity_y = initial_velocity * math.sin(angle_radians)\n    \n    # Building height\n    h = 30\n    \n    # Acceleration due to gravity\n    g = 9.81\n    \n    # Time it takes for the arrow to hit the ground, derived from:\n    # 0 = initial_velocity_y * t - (1/2) * g * t^2 + h\n    # We solve the quadratic equation for t\n    a = -0.5 * g\n    b = initial_velocity_y\n    c = h\n    \n    discriminant = b**2 - 4*a*c\n    t1 = (-b + math.sqrt(discriminant)) / (2*a)\n    t2 = (-b - math.sqrt(discriminant)) / (2*a)\n    \n    # We take the positive time since time cannot be negative\n    t = max(t1, t2)\n    \n    # Velocity in the y direction at the moment of hitting the ground\n    final_velocity_y = initial_velocity_y - g * t\n    \n    # Final velocity is the vector sum of the x and y components\n    final_velocity = math.sqrt(initial_velocity_x**2 + final_velocity_y**2)\n    \n    return final_velocity\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "def solution():\n    # Since each kid should get at least one orange, we give 1 to each.\n    remaining_oranges = 13 - 3\n    \n    # Now we have to distribute the remaining oranges over 3 kids.\n    # This is a problem of distributing \"n\" identical items to \"r\" distinct containers.\n    # We can solve it using the method of starts and bars.\n\n    # If we consider that | represents distribution to a new kid.\n    # For example 10 oranges to 3 kids can be done as:\n    # **|****|**** or *|*****|****\n    # That's a total of 10 stars and 2 bars (since 3 kids), so (10+2) items.\n\n    # To find number of ways to arrange these, we can simply calculate combinations,\n    # since we need to choose positions for bars (or stars) out of all positions.\n\n    # We need to choose 2 positions for bars from 12, thus C(12,2) = 12!/(10!2!)\n    from math import factorial as fact\n\n    ways = fact(remaining_oranges + 2) // (fact(2) * fact(remaining_oranges))\n\n    return ways\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # The smallest number with a digit sum of 20 is 299...9 (with as many nines as needed to reach the sum)\n    # Starting from this number, we need to find a number that is also divisible by 11\n    # Using the divisibility rule for 11, the alternating sum must be either 0 or a multiple of 11. \n    # We will start with the smallest number and increase until we find one that satisfies both conditions.\n    \n    num = 29  # Starting with the smallest possible number with a digit sum of 20\n    while True:\n        # Check if the digit sum is 20\n        if sum(int(digit) for digit in str(num)) == 20:\n            # Using the divisibility rule for 11\n            if (sum(int(digit) for digit in str(num)[::2]) -\n                sum(int(digit) for digit in str(num)[1::2])) % 11 == 0:\n                # Once both conditions are met, return this number\n                return num\n        num += 1  # Increment the number and try again\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789', 5):\n        s, a, m, o, g = perm\n        sasmo = int(s + a + s + m + o)\n        ogams = int(o + g + a + m + s)\n        if sasmo * 4 == ogams and s != '0':\n            return sasmo\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2  # sandwiches, burgers\n    drink_options = 3  # coffee, milk, tea\n    dessert_options = 4  # cake, pudding, ice-cream, pie\n\n    # Using the principle of multiplication\n    ways_to_order = food_options * drink_options * dessert_options\n\n    return ways_to_order\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    water_each_after_transfer = total_water / 2\n    water_to_transfer = water_each_after_transfer - 28\n    return water_to_transfer\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for animals\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    # Write the equations based on the given relationships\n    equation1 = Eq(elephant, 5/2 * cow)      # 2 elephants = 5 cows\n    equation2 = Eq(cow, 3/4 * horse)         # 4 cows = 3 horses\n    equation3 = Eq(horse, 5/3 * pig)         # 3 horses = 5 pigs\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # Calculate how many pigs weigh as much as 8 elephants\n    pigs_for_elephants = 8 * solutions[elephant] / solutions[pig]\n\n    return pigs_for_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    rate = symbols('rate')\n    equation = Eq(principal * (1 + rate) ** years, amount)\n    solution = solve(equation, rate)\n\n    return round(solution[0], 4)\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    total_change = 0.40\n    total_cost = total_paid - total_change\n    cost_per_cup = total_cost / 4\n    \n    return cost_per_cup\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    cakes_needed = 10\n\n    time_per_cake = time_for_6_cakes / 6\n    total_time = time_per_cake * cakes_needed\n\n    return total_time\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be total number of stickers and n be the number of pupils\n    x, n = symbols('x n')\n\n    # If he gives 13 stickers to each pupil, he has an excess of 190 stickers\n    equation1 = Eq(x, n * 13 + 190)\n\n    # If he gives 17 stickers to each pupil, he has an excess of 50 stickers\n    equation2 = Eq(x, n * 17 + 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, n))\n\n    return solutions[x]\n\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for price per box of mangoes and lychees\n    price_mangoes, price_lychees = symbols('price_mangoes price_lychees')\n\n    # Equation 1: Total cost of mangoes and lychees\n    equation1 = Eq(24 * price_mangoes + 20 * price_lychees, 1160)\n\n    # Equation 2: Price of each box of lychees is $6 less than 2 times the price of each box of mangoes\n    equation2 = Eq(price_lychees, 2 * price_mangoes - 6)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (price_mangoes, price_lychees))\n\n    return solutions[price_lychees]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    percent = 60\n    fraction = 2 / 5\n    whole_number = 75\n\n    ans = (percent / 100) * fraction * whole_number\n\n    return ans\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 0.18\n    tax_percent = 0.10\n    \n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef permutations(n, r):\n    return factorial(n) // factorial(n-r)\n\ndef solution():\n    # Total singing performances\n    total_singing = 6\n    \n    # Total dancing performances\n    total_dancing = 4\n    \n    # Places between the dancing performances\n    places_for_singing = total_dancing - 1\n    \n    # Select places for the 3 singing performances that must be placed\n    # and permute them\n    mandatory_singing_perm = permutations(total_singing, places_for_singing)\n\n    # Remaining singing performances after placing the mandatory ones\n    remaining_singing = total_singing - places_for_singing\n    \n    # Permutations of the remaining singing performances with the mandatory ones\n    remaining_singing_perm = factorial(remaining_singing + 1)\n    \n    # Total permutations of the dancing performances\n    dancing_perm = factorial(total_dancing)\n    \n    # Calculate the total number of possible arrangements\n    ans = mandatory_singing_perm * remaining_singing_perm * dancing_perm\n    \n    return ans\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_of_5_boxes = 350\n    weight_per_box = total_weight_of_5_boxes / 5\n    total_weight_of_3_boxes = weight_per_box * 3\n    return total_weight_of_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # There are factorial(4) ways to arrange the comics among themselves.\n    comics_arrangements = factorial(4)\n    # There are factorial(6) ways to arrange the fictions among themselves.\n    fictions_arrangements = factorial(6)\n    # We can treat the entire set of comics and fictions as two objects.\n    # Then there are 2! ways to arrange these two sets on the shelf.\n    sets_arrangements = factorial(2)\n    \n    # The total number of arrangements is the product of the arrangements\n    # of each group and the arrangement of the sets.\n    total_arrangements = comics_arrangements * fictions_arrangements * sets_arrangements\n    return total_arrangements\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    for dora_correct in range(11):\n        justin_correct = dora_correct + (15 // 10)\n        dora_wrong = 10 - dora_correct\n        justin_wrong = 10 - justin_correct\n        dora_points = 10 * dora_correct - 5 * dora_wrong\n        justin_points = 10 * justin_correct - 5 * justin_wrong\n        if dora_points + justin_points == 155 and justin_points - dora_points == 15:\n            return dora_correct\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let number of groups in Class A be A and in Class B be B\n    A = 3\n    B = 4\n    # Average number of candies sold by each group in Class A is 12\n    average_A = 12\n    # Average number of candies sold by each group in Class A and Class B combined is 8\n    average_total = 8\n\n    # Total candies sold by A\n    total_A = average_A * A\n    # Total groups in A and B\n    total_groups = A + B\n    # Total candies sold by A and B\n    total_candies = average_total * total_groups\n\n    # Total candies sold by B is (total candies by A and B) - (total candies by A)\n    total_B = total_candies - total_A\n    # Average number of candies sold by each group in Class B\n    average_B = total_B / B\n\n    return average_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n    \n    equation1 = Eq(1 / lee_rate + 1 / nancy_rate, 1 / 10)\n    equation2 = Eq(6 * lee_rate + 20 * nancy_rate, 1)\n    \n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n    \n    nancy_time = 1 / solutions[nancy_rate]\n    \n    return nancy_time\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_amount = 6  # liters\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_amount = (coffee_amount / coffee_ratio) * total_ratio\n\n    return total_amount\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    number_of_pieces = 10\n\n    remaining_string_length = total_string_length - used_string_length\n    length_per_piece = remaining_string_length / number_of_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_passengers = 22\n    remaining_after_first_stop = remaining_passengers / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    percentage = 45\n    total_value = 80\n\n    ans = (percentage / 100) * total_value\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    num_flavours = 7\n    num_doughnuts = 2\n    combinations = comb(num_flavours, num_doughnuts)\n    return combinations\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n\n    ratio_eq = Eq(white / milk, 3 / 7)\n    ratio_eq2 = Eq(white / dark, 3 / 5)\n    difference_eq = Eq(dark - white, 8)\n\n    solutions = solve((ratio_eq, ratio_eq2, difference_eq), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the variable for the total number of students\n    students = symbols('students')\n\n    # Equation representing the distribution of preferences in the class\n    equation = (1/4)*students + 3 + (1/3)*(students - (1/4)*students - 3) - 3 + 25 - students\n\n    # Solve the equation\n    number_of_students = solve(equation, students)\n\n    # Return the number of students (making sure to return an integer)\n    return int(number_of_students[0])\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    big_square_side_length = 6\n    small_square_side_length = 3\n\n    squares_per_side = big_square_side_length // small_square_side_length\n    total_squares = squares_per_side ** 2\n\n    return total_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    cm_per_meter = 100\n    ans = meters * cm_per_meter\n    return ans\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    # If 5p is one-quarter, Avril had 4 times this amount in total\n    total_money = 5 * 4\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers they initially had\n    sam, peter = symbols('sam peter')\n\n    # Create two equations based on the problem statement\n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n    # After transactions, Sam had 96 stickers more than Peter\n    # Sam gives 20% away and receives 25% of what Peter has left\n    # Peter's new amount is 80% of his amount plus the 20% Sam gave\n    # Sam's new amount is 75% of Sam's amount plus the 25% from Peter's updated amount\n    equation2 = Eq(sam * 0.75 + peter * 0.8 * 0.25, peter * 0.8 + sam * 0.2 + 96)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Initial number of green and red balls.\n    green_balls = 10\n    red_balls = 5\n\n    # Let x be the number of red balls to add for the probability of getting a green ball to be 1/3.\n    # The total number of balls after adding x red balls will be green_balls + red_balls + x.\n    # The probability of getting a green ball will be green_balls / (green_balls + red_balls + x).\n\n    # According to the problem, we need to find x such that:\n    # P(getting a green ball) = green_balls / (green_balls + red_balls + x) = 1/3\n\n    # Solving for x:\n    # 10 / (10 + 5 + x) = 1/3\n    # 3 * 10 = 10 + 5 + x\n    # 30 = 15 + x\n    # x = 30 - 15\n\n    x = 30 - 15\n\n    return x\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Calculate the last digit of 32^33 by considering the pattern of the powers of 2.\n    # We only need the last digit of it for each power.\n    last_digit_32_power_33 = (2 ** (33 % 4)) % 10  # Since 32 ends with 2, we can just consider powers of 2\n\n    # Calculate the last digit of 22^29 in a similar manner.\n    # Again, only the last digit matters, and 22 ends with 2.\n    last_digit_22_power_29 = (2 ** (29 % 4)) % 10  # Since 22 ends with 2, we can just consider powers of 2\n\n    # Subtract the two resulting last digits to get the ones digit of the original expression\n    ones_digit = (last_digit_32_power_33 - last_digit_22_power_29) % 10  # Modulo 10 to get the last digit\n\n    return ones_digit\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    count_sixes = 0\n    page = 1\n\n    while count_sixes < 18:\n        count_sixes += str(page).count('6')\n        page += 1\n\n    return page - 1\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            for die3 in range(1, 7):\n                if die1 != die2 and die1 != die3 and die2 != die3:\n                    if die1 + die2 + die3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n    \n    combinations = num_fruits * num_vegetables\n    \n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Since 4:9 is equivalent to 81:?, we can solve for ? using cross-multiplication.\n    # If we call the missing number x, then we have:\n    # 4/9 = 81/x\n    # Cross-multiplying gives us:\n    # 4 * x = 9 * 81\n    # Solve for x:\n    x = (9 * 81) / 4\n    return x\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((2 * i) ** 3 / (i * (i + 1) * (i + 2)) for i in range(1, 2013))\n    ans += 1 / 4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if num % 16 == 0 and (num + 1) % 5 == 0 and (num ** 0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, wrong = symbols('correct wrong')\n    \n    # Since each unanswered question is treated like a wrong answer, the total number of questions is correct + wrong\n    equation1 = Eq(correct + wrong, 80)\n    # Marks scored is 4 times the correct answers minus 2 times the wrong ones\n    equation2 = Eq(4 * correct - 2 * wrong, 152)\n\n    solutions = solve((equation1, equation2), (correct, wrong))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    people = 24\n    sausages = 16\n    if sausages % people == 0:\n        cuts = sausages - 1\n    else:\n        cuts = people - (sausages % people)\n    return cuts\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps = 0\n\n    # Accumulate height the monkey climbs\n    current_height = 0\n    while True:\n        jumps += 1\n        current_height += jump_up\n        if current_height >= height:\n            break  # Monkey reaches or surpasses the top\n        # After every two jumps, the monkey slides down\n        if jumps % 2 == 0:\n            current_height -= slide_down\n            \n    return jumps\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"RAINBOW\")  # Total letters in the word RAINBOW\n    total_vowels = len(\"AI\")        # Number of vowels in the word RAINBOW\n    total_consonants = total_letters - total_vowels  # Number of consonants\n    \n    # Total permutations of the letters in RAINBOW\n    total_permutations = factorial(total_letters)\n    \n    # Total permutations where vowels are together (consider the vowel group as a single entity)\n    vowels_together = factorial(total_vowels) * factorial(total_consonants + 1)\n    \n    # Subtracting permutations where vowels are together from the total permutations\n    ans = total_permutations - vowels_together\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    wendy_age_in_5_years = solutions[wendy] + 5\n        \n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts of water\n    A, B = symbols('A B')\n\n    # Create the equation based on the problem statement\n    equation1 = Eq(A, B + 350)         # A had 350 mL more water than B\n    equation2 = Eq(B, 2 * (A - 500))   # After spilling, B had twice as much as A\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(147 - 39, 147 - 51), 51 - 39)\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    decimal_value = 3 / 8\n    return decimal_value\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    common_difference = 21 - 15\n    last_term = 39\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from itertools import permutations\nfrom math import factorial\n\ndef solution():\n    word = \"STATISTIC\"\n    total_occurrences = factorial(len(word))\n    t_occurrences = factorial(word.count('T'))\n    \n    # Number of permutations without restriction\n    total_permutations = total_occurrences // (factorial(word.count('S')) *\n                                               factorial(word.count('T')) *\n                                               factorial(word.count('A')) *\n                                               factorial(word.count('I')) *\n                                               factorial(word.count('C')))\n    \n    # Number of permutations where T's are together\n    # Treat 'TT' as a single letter for permutation\n    grouped_word = \"SASTISTIC\"\n    grouped_occurrences = factorial(len(grouped_word))\n    grouped_permutations = grouped_occurrences // (factorial(grouped_word.count('S')) *\n                                                   factorial(grouped_word.count('A')) *\n                                                   factorial(grouped_word.count('I')) *\n                                                   factorial(grouped_word.count('C')))\n    \n    # Subtract the permutations where T's are together from total permutations\n    valid_permutations = total_permutations - t_occurrences * grouped_permutations\n\n    return valid_permutations\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n    total_tickets = first_week_tickets + second_week_tickets + third_week_tickets\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle said 3 sentences to each of the 5 other team members she talked to.\n    sentences_by_lovelle = 5 * 3\n    \n    # Since there are 12 team members who did not speak to Lovelle, \n    # each of those would say 3 sentences to the rest except Lovelle.\n    sentences_by_others = 12 * (12 - 1) * 3\n    \n    # Lovelle didn't speak to these 12 members, but the rest 5 members did,\n    # so we calculate the sentences among these 5 members.\n    sentences_among_five = 5 * (5 - 1) / 2 * 3\n    \n    # Total sentences spoken should be equal between counting methods:\n    # Lovelle's sentences + sentences among the 5 + sentences by the 12\n    # The factor of 1/2 for the final term accounts for double-counting\n    # since if A speaks to B, it's the same as B speaking to A.\n    total_sentences = sentences_by_lovelle + sentences_among_five + sentences_by_others / 2\n    \n    # The total number of sentences said should also equal 6 (Lovelle + 5 members)\n    # times every other member of the team, times 3 sentences each\n    # This is equal to total_sentences equation, so we solve for the number of team members.\n    num_members = 6 + 12  # Lovelle + 5 she talked to + 12 she didn't\n    \n    return num_members\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for gums in range(1, 100):  # Let's assume a reasonable upper limit for number of gums\n        remaining_after_music = gums - 2  # Ate 2 in music lesson\n        \n        if remaining_after_music % 3 == 0:\n            shared = remaining_after_music // 3  # Shared one third with friends\n            remaining_after_shared = remaining_after_music - shared  # Remaining after sharing\n\n            # Check if the remaining can be divided equally in the next 4 lessons\n            if remaining_after_shared % 4 == 0:\n                return gums  # Found the smallest number of gums\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    hours_needed = total_pieces / pieces_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbolic representation for Sarah and Mark's initial number of cards\n    sarah, mark = symbols('sarah mark')\n\n    # Construct equations based on the problem description\n    equation1 = Eq(sarah, mark + 20)      # Sarah had $20 more than Mark initially\n    equation2 = Eq(sarah + 16, 3 * mark)  # After buying cards, Sarah had 3 times Mark's cards\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    # Get the number of cards Sarah had initially\n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    calculation = (2018 - 20 + 18) / 8\n    return calculation\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # It starts with 9 choices for the 1st chest, 8 choices for the 2nd chest,\n    # 7 choices for the 3rd chest, and 6 choices for the last chest.\n    attempts = 9 + 8 + 7 + 6\n    return attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    pattern_diffs = [3445 - 2945, 3245 - 3445, 3745 - 3245]\n    missing_number = 3745 + pattern_diffs[1]  # Follows the same alternating rule\n    \n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    numerator = 15\n    denominator = 1/7\n\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for i in range(99, 9, -1):  # Start from 99 downwards to 10\n        if i % 3 == 0 and i % 5 == 0:  # Check if divisible by both 3 and 5\n            return i  # Return the first (largest) number that satisfies condition\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w be the number of women, and m be the number of men.\n    w, m = symbols('w m')\n\n    # Creating the equations based on the problem statement.\n    equation1 = Eq(w, 4 * m)  # There were 4 times as many women as men.\n    equation2 = Eq(2 * w + 5 * m, 182)  # Total number of mini cupcakes eaten.\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (w, m))\n\n    # Return the number of women.\n    return solutions[w]\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    # let x be the number of mushrooms gathered in the first hour\n    # let y be the number of mushrooms gathered in the second hour\n    # According to the problem, we have the following equations:\n    # 1) x + y = 40 (total mushrooms gathered in two hours)\n    # 2) x + 26 = y (if dad could have gathered 26 more in the first hour, it would equal the second hour)\n\n    # We need to solve these two equations to find the value of y (mushrooms in the second hour)\n    # From 2) x = y - 26\n    # Substituting x from 2) in 1) gives y - 26 + y = 40\n    # Combining like terms gives 2y - 26 = 40\n    # Add 26 to both sides gives 2y = 66\n    # Dividing both sides by 2 gives y = 33\n\n    # Hence, Judy's dad gathered 33 mushrooms in the second hour.\n    y = (40 + 26) / 2\n    return y\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 6\n\n    value_after_years = initial_value * (depreciation_rate ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    ans = round(number / 100) * 100\n    return ans\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    # Proportion calculation for the unknown square value (□)\n    fraction_original = 3 / 12\n    fraction_new_denominator = 20\n    \n    # cross-multiplication to find the value of □\n    ans = fraction_original * fraction_new_denominator\n    \n    return ans\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    ans = 2.98 * 23\n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    num_people = 8\n    # Subtracting 1 from the number of people as the circular arrangement\n    # makes one of the positions fixed relative to others to avoid rotations.\n    num_orders = factorial(num_people - 1)\n    return num_orders\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    \n    temp_difference = night_temp - morning_temp\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_2 = (2 ** 2017) % 10\n    last_digit_3 = (3 ** 2017) % 10\n\n    ans = (last_digit_2 * last_digit_3) % 10\n\n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ants_initial = symbols('ants_initial')\n    \n    equation = Eq(ants_initial - (3/4)*ants_initial - ((2/5)*(1/4)*ants_initial) + 185, 2*ants_initial)\n    ans = solve(equation, ants_initial)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    age_difference_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    pages = 325\n    digits = 0\n    \n    # Pages 1-9: 9 pages with 1 digit\n    if pages >= 9:\n        digits += 9\n    else:\n        digits += pages\n    \n    # Pages 10-99: 90 pages with 2 digits\n    if pages >= 99:\n        digits += 2 * (99 - 9)\n    else:\n        digits += 2 * (pages - 9)\n    \n    # Pages 100-325: 225 pages with 3 digits\n    if pages > 99:\n        digits += 3 * (pages - 99)\n    \n    return digits\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_first_day = 89\n    books_second_day = 11\n    \n    total_cost = (books_first_day + books_second_day) * book_cost\n    \n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    term = 8  # The next term after 49 (7^2) would be the 8th term\n    ans = term ** 2  # Since the sequence is of square numbers\n    return ans\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    friends = 42\n    total_pens = pens_per_friend * friends\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def nguyen_next(n):\n        return (2 * n + 4) % 100  # Capture only last two digits for numbers > 100\n\n    cur_num = 1\n    for _ in range(1, 2022):\n        cur_num = nguyen_next(cur_num)\n\n    return cur_num\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 42):\n        if isprime(a):\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    solution = solve(equation, n)\n    return solution\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume_per_bottle = 120 / (1 - 3/5)\n    water_volume_per_bottle = total_volume_per_bottle * (3/5)\n    water_volume_for_6_bottles = water_volume_per_bottle * 6\n    return water_volume_for_6_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kilograms = 8.2\n    grams_per_kilogram = 1000\n    n = kilograms * grams_per_kilogram\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    return factorial(len('EARTH'))\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    # Simon's speed\n    simon_speed = 150\n    # Simon's friend's speed\n    friend_speed = 200\n    # Time walked before Simon realizes his book is at school\n    time_walked = 10\n    \n    # Distance Simon walked before turning back (in feet)\n    simon_distance = simon_speed * time_walked\n    # Distance Simon's friend walked in the same time (in feet)\n    friend_distance = friend_speed * time_walked\n    \n    # Simon's speed when running back (twice of his original speed)\n    simon_run_speed = 2 * simon_speed\n    # Time taken for Simon to run back to school (distance divided by run speed)\n    time_run_back = simon_distance / simon_run_speed\n    \n    # Total time Simon's friend has walked (time walked + time Simon ran back)\n    total_friend_time = time_walked + time_run_back\n    # Total distance Simon's friend is from school\n    total_friend_distance = total_friend_time * friend_speed\n    \n    # Distance between Simon and his friend when Simon reaches the school\n    distance_between = total_friend_distance\n\n    return distance_between\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    return (4.5 + 10.3) / 2\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    common_difference = 8 - 5\n    num_of_terms = 14\n    \n    last_term = first_term + (num_of_terms - 1) * common_difference\n    sum_of_sequence = (num_of_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = p\n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y\n        if s != 0 and m != 0 and send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the first term of the arithmetic progression as a\n    # and the common difference as d.\n    a, d = symbols('a d')\n\n    # Sum of the first four terms S4 = a + (a + d) + (a + 2d) + (a + 3d) = 4a + 6d\n    S4 = 4*a + 6*d\n\n    # Sum of the last four terms S8_4 \n    # where S8 is the sum of the 8th term and 4 is the 4 initial terms\n    # S8 = a + (a + d) + (a + 2d) + ... + (a + 7d) = 8a + 28d\n    # S8_4 is the sum of the sequence without the first four terms\n    S8_4 = (8*a + 28*d) - S4\n\n    # According to the problem, S4 is 32 less than S8_4, we write the equation:\n    equation = Eq(S4, S8_4 - 32)\n\n    # Now we solve for d\n    solution = solve(equation, d)\n\n    return solution[d]\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_bells_stars_balls = 2 + 2 + 2 + 1  # Total decorations\n    # Calculate permutations of all items (divided by permutations of identical items)\n    total_permutations = factorial(total_bells_stars_balls) // (factorial(2) * factorial(2) * factorial(2))\n    return total_permutations\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # The fastest person (Eddie) will always need to come back with the flashlight\n    # The two slowest people (Rose and Mary) should cross together to minimize the time they take\n    # First, Eddie and Jack cross, Eddie comes back: 2 + 1 = 3 minutes\n    # Rose and Mary cross: 10 minutes (Eddie is on the initial side with the flashlight, total time is 13)\n    # Jack goes back with the flashlight: 2 minutes (Eddie and Rose are on the destination side, total is 15)\n    # Eddie and Jack cross again: 2 minutes (Total time is now 17 minutes)\n\n    # The total time taken is the sum of all these steps\n    total_time = 3 + 10 + 2 + 2\n\n    return total_time\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    # The size of the water dispenser in litres\n    dispenser_size = 5\n\n    # The size of the other container in litres (0.25 times the size of the dispenser)\n    other_container_size = dispenser_size * 0.25\n\n    # The total amount of water used for the 14 cups in litres (there are 1000 ml in 1 litre)\n    cups_water = 14 * 150 / 1000\n\n    # The amount of water left in the water dispenser after filling the other container and the cups\n    water_left = dispenser_size - other_container_size - cups_water\n\n    return water_left\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percentage_initial = 30\n    cost_price = selling_price / (1 + profit_percentage_initial / 100)\n    \n    desired_profit = 5000\n    new_selling_price = cost_price + desired_profit\n    new_profit_percentage = (desired_profit / cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        # Base case\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            # Recurrence relation: !n = (n-1)(!(n-1) + !(n-2))\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"2{i}{j}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 100 - (100 % 7)\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n    \n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    result = 5 / (1/4)\n    return result\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    # Let p be the number of pages Anny writes per day at the original rate.\n    # Then the total amount of homework is 8 * p pages.\n    # If she writes 2 more pages per day, she would write p + 2 pages each day,\n    # and she would finish in 8 - 2 = 6 days.\n    # Therefore, the total amount of homework would also be 6 * (p + 2) pages.\n    # These two expressions for the total homework should be equal: \n    # => 8 * p = 6 * (p + 2).\n    \n    from sympy import symbols, Eq, solve\n    \n    p = symbols('p')\n    equation = Eq(8 * p, 6 * (p + 2))\n    solution = solve(equation, p)\n    \n    # The total number of pages is 8 * p\n    total_pages = 8 * solution[0]\n    \n    return total_pages\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    counter = 0\n    for i in range(1, 201):\n        counter += str(i).count('5')\n    return counter\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip bakes 5 loaves in 20 minutes, so in 1 minute Pip bakes 5 / 20 loaves\n    pip_rate = 5 / 20\n\n    # Bud bakes 3 loaves in 15 minutes, so in 1 minute Bud bakes 3 / 15 loaves\n    bud_rate = 3 / 15\n\n    # In 40 minutes, Pip bakes 40 * (Pip's rate) loaves\n    pip_loaves = 40 * pip_rate\n\n    # In 40 minutes, Bud bakes 40 * (Bud's rate) loaves\n    bud_loaves = 40 * bud_rate\n\n    # Total loaves baked in 40 minutes is the sum of Pip's loaves and Bud's loaves\n    total_loaves = pip_loaves + bud_loaves\n\n    return int(total_loaves)\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Since the house increased in value by 10% and the value was £11,000 more than original\n    # We can calculate the original price (before increase) of the house\n    original_price = 11000 / 0.10\n\n    # After the first year, the value of the house increased by 10%\n    value_after_first_year = original_price * (1 + 0.10)\n\n    # In the second year, the house loses 10% of its value after the first year\n    value_after_second_year = value_after_first_year * (1 - 0.10)\n\n    # Now we calculate profit or loss comparing with the original price\n    profit_or_loss = value_after_second_year - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    max_red_or_black = 10 + 10 # maximum socks before taking a white one to ensure a pair\n    max_white_for_pair = 2 # maximum white socks to get at least one pair\n    return max_red_or_black + max_white_for_pair\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expression = (12 * a) / 4 + (2 * a) * 5\n    simplified_expr = simplify(expression)\n    return simplified_expr\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expr = (6 * d) + (5 * d) - d\n    simplified_expr = expr.simplify()\n    return simplified_expr\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for total number of cookies\n    total_cookies = symbols('total_cookies')\n\n    # Create the equation based on the problem statement\n    # After eating 3/8 in the morning and 1/6 in the afternoon, Richard has 33 cookies left\n    # So, (1 - 3/8 - 1/6) * total_cookies = 33\n    equation = Eq((1 - 3/8 - 1/6) * total_cookies, 33)\n\n    # Solve for the variable\n    solution = solve(equation, total_cookies)\n\n    # Return the number of cookies Richard had at first\n    return solution[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    # Create the sequence up to the first 10\n    sequence = []\n    for i in range(1, 10): # We stop before 10 because we want the numbers before the first 10 appears\n        sequence.extend([i] * (i + 2)) # i numbers repeated i+2 times\n\n    # Sort the sequence to find the median\n    sequence.sort()\n\n    # Find the length of the sequence to calculate the median\n    n = len(sequence)\n\n    # Calculate median\n    if n % 2 == 1:\n        # For odd n, median is the middle number\n        median = sequence[n // 2]\n    else:\n        # For even n, median is the average of the two middle numbers\n        median = (sequence[n // 2 - 1] + sequence[n // 2]) / 2\n\n    return median\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    diameter_of_each_coin = 1.85\n    number_of_coins = 11\n    # The first coin's entire diameter is part of the length, but every subsequent coin\n    # only adds its radius to the length because they are touching.\n    total_length = diameter_of_each_coin + (number_of_coins - 1) * (diameter_of_each_coin / 2)\n    return total_length\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    # Find the least common multiple of the flashing rates\n    red_flash_rate = 4\n    green_flash_rate = 6\n    minutes = 60\n    \n    # Using the LCM formula: LCM = (a*b) / GCD(a, b)\n    from math import gcd\n    lcm = (red_flash_rate * green_flash_rate) // gcd(red_flash_rate, green_flash_rate)\n    \n    # Number of times they flash at the same instant in one minute\n    same_instant_per_minute = lcm // red_flash_rate\n    \n    # Total number of times they flash at the same instant in one hour\n    ans = same_instant_per_minute * minutes\n\n    return ans\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n    ans = total_litres // bucket_capacity\n    return ans\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # Total kg of flour\n    packets = 25      # Number of packets\n    flour_per_packet = total_flour / packets  # Flour in each packet\n\n    return flour_per_packet\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # Arbitrary year 2020, May 5th\n    end_date = datetime(2020, 6, 7)  # Arbitrary year 2020, June 7th\n    one_day = timedelta(days=1)\n\n    # Since we know 5th May is Monday, we find the first Sunday after this date\n    first_sunday = start_date\n    while first_sunday.weekday() != 6:\n        first_sunday += one_day\n\n    # Now count the number of Sundays until the end date\n    number_of_sundays = 0\n    while first_sunday <= end_date:\n        number_of_sundays += 1\n        first_sunday += timedelta(days=7)  # jump to the next Sunday\n\n    return number_of_sundays\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the initial number of red marbles and 'w' be the initial number of white marbles.\n    r, w = symbols('r w', integer=True)\n    \n    # Let 'x' be the number of red marbles Pip adds, and 'y' be the number of white marbles Bud adds.\n    x, y = symbols('x y', integer=True)\n\n    # Initial ratio equation of red to white marbles (3r : 2w).\n    eq1 = Eq(r/w, 3/2)\n\n    # Equation after Pip adds red marbles (ratio becomes 5r : 3w).\n    eq2 = Eq((r + x)/w, 5/3)\n\n    # Equation after Bud adds white marbles (ratio becomes 5r : 4w).\n    eq3 = Eq((r + x)/(w + y), 5/4)\n\n    # Bud puts 100 more marbles than Pip.\n    eq4 = Eq(y - x, 100)\n\n    # Solve the system of equations.\n    solutions = solve((eq1, eq2, eq3, eq4), (r, w, x, y))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    rate_per_company = 900 / (4 * 5)  # Rate of construction per company per day\n    total_days = 5400 / (6 * rate_per_company)  # Total days for 6 companies to build 5400m\n    return total_days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    buy1 = 10\n    sell1 = 20\n    buy2 = 30\n    sell2 = 40\n\n    profit = (sell1 - buy1) + (sell2 - buy2)\n\n    return profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n\n    price_per_ticket = adam_spent / adam_tickets\n    claire_tickets = claire_spent / price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # To be divisible by 3, the sum of the digits must be divisible by 3.\n    # To be divisible by 4, the last two digits of the number must be divisible by 4.\n    \n    # First, let's check the divisibility by 4.\n    # Since we know the last digit is K, we have only limited options for K,\n    # as it must be an even number for the last two digits (2K) to be divisible by 4.\n    \n    for possible_digit in range(0, 10):\n        if (20 + possible_digit) % 4 == 0:  # Check if 2K is divisible by 4\n            K = possible_digit\n            \n            # Now check the sum of the digits for divisibility by 3\n            sum_of_digits = 5 + K + 2 + 7 + K  # Sum of all digits\n            if sum_of_digits % 3 == 0:\n                return K\n    \n    return None\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    term_position = 10\n    term_value = 28  # Any given term in the sequence\n    difference = 3  # Common difference between terms\n\n    first_term = term_value - (term_position - 1) * difference\n    \n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    player_one_sum = 23\n    all_cards_sum = sum(range(1, 9))  # Sum of all the numbers on the cards\n    player_two_sum = all_cards_sum - player_one_sum\n\n    # Since we want the highest single card for Player Two,\n    # we find the lowest possible sum of the other three cards.\n    player_two_other_cards_min_sum = sum(range(1, 4))\n\n    # The highest single card Player Two can have is their sum minus the lowest sum of the other cards\n    player_two_highest_card = player_two_sum - player_two_other_cards_min_sum\n\n    return player_two_highest_card\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies and y be the number of brownies\n    # initially baked by Mama Bear.\n    x, y = symbols('x y')\n\n    # We set up the equations based on the given ratios.\n    # Equation 1: The initial ratio of cookies to brownies is 4:3\n    equation1 = Eq(x/y, 4/3)\n\n    # Equation 2: After giving away 6 brownies, the ratio of cookies to remaining brownies is 12:7\n    # The quantity of cookies remains the same, hence only y changes to (y - 6).\n    equation2 = Eq(x/(y - 6), 12/7)\n\n    # Solve the system of equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total number of cookies and brownies initially baked.\n    total_baked = solutions[x] + solutions[y]\n\n    return total_baked\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, so 18 shoes in total\n    time_per_shoe = 2  # 2 minutes per shoe\n\n    # Since both cobblers work at the same time, we divide the total work by 2\n    # to find the total time required for both cobblers to finish the job together\n    total_time = (total_shoes * time_per_shoe) / 2\n\n    return total_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, n+1)) for n in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unattempted = 3\n    correct_score = 4\n    wrong_score = -1\n    total_score = 168\n\n    attempted_questions = total_questions - unattempted\n\n    # Let the number of correct answers be x.\n    # Then, the number of wrong answers is (attempted_questions - x).\n    # 4x - (attempted_questions - x) = total_score\n    # 4x - attempted_questions + x = total_score\n    # 5x = total_score + attempted_questions\n    # Solve for x.\n\n    x = (total_score + attempted_questions) / (correct_score - wrong_score)\n\n    return int(x)\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    # There are six players, and we need to select two for each handshake\n    num_players = 6\n    handshakes = comb(num_players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = luna_dumplings - dumplings_each\n    \n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds = 24\n    base_number = (3 * two_thirds) / 2\n    three_quarters = (3 * base_number) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    # List of all odd numbers between 0 and 20\n    odd_numbers = [x for x in range(1, 20, 2)]\n    # Sum of odd numbers\n    sum_of_odds = sum(odd_numbers)\n    return sum_of_odds\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jemma_number = symbols('jemma_number')\n    equation = Eq((jemma_number + 3) * 5, 35)\n    solution = solve(equation, jemma_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 4):\n        B, D, E, C = p\n        if B == 0:  # 'B' cannot be zero as it's the first digit in a 4-digit number\n            continue\n        CBCD = C * 1000 + B * 100 + C * 10 + D\n        CDBC = C * 1000 + D * 100 + B * 10 + C\n        BDEC = B * 1000 + D * 100 + E * 10 + C\n        \n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of the pack sizes\n    min_pack_lcm = lcm(6, 8, 9, 15)\n\n    # Find the smallest multiple of lcm greater than or equal to 1000\n    min_markers = (1000 // min_pack_lcm + (1000 % min_pack_lcm != 0)) * min_pack_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Count the number of each letter in \"CHALLENGE\"\n    total_letters = len(\"CHALLENGE\")\n    c_count = h_count = l_count = n_count = g_count = 1\n    e_count = 2\n    vowel_group_count = 1  # A, E, E are considered as one group\n\n    # Calculate permutation of the consonants plus the vowel group as one item\n    consonants_plus_vowel_group = factorial(c_count + h_count + l_count + n_count + g_count + vowel_group_count)\n\n    # Permutations within the vowel group (A, E, E)\n    vowel_group_permutations = factorial(3) // factorial(e_count)\n\n    # Final answer is permutations of consonants (and vowel group) times permutations within the vowel group\n    ans = consonants_plus_vowel_group * vowel_group_permutations\n\n    return ans\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Average spent from January to March\n    jan_to_mar = 450 * 3\n\n    # Average spent from April to July\n    apr_to_jul = 350 * 4\n\n    # Total spent from August to October\n    aug_to_oct = 1250\n\n    # Average spent from November to December\n    nov_to_dec = 400 * 2\n\n    # Total spent for all months\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n\n    # Total number of months from January to December\n    total_months = 12\n\n    # Calculate the average for the whole year\n    average_per_month = total_spent / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_carrot_cake_revenue = 4 * 5\n    total_cheesecake_revenue = 1 * 10\n    total_chocolate_cake_revenue = 5 * 12\n\n    total_cakes = 4 + 1 + 5\n    total_revenue = total_carrot_cake_revenue + total_cheesecake_revenue + total_chocolate_cake_revenue\n\n    average_price = total_revenue / total_cakes\n\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    divisor = remainder + 1\n    while True:\n        dividend = divisor * divisor + remainder\n        if dividend % divisor == remainder:\n            return dividend\n        divisor += 1\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, solve, nsimplify\n    \n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n    total_vehicles_eq = cars + bikes + lorries\n\n    # Given that total vehicles is an even number and less than 100, \n    # we search for solutions with these constraints\n    possible_solutions = []\n    for total_vehicles in range(2, 100, 2):\n        # cars is four-thirds of bikes\n        eq1 = cars - nsimplify(4/3)*bikes\n        # bikes is one quarter more than number of lorries\n        eq2 = bikes - lorries - nsimplify(1/4)*lorries\n        # total number of cars, bikes, lorries is an even number and is less than 100\n        eq3 = total_vehicles_eq - total_vehicles\n\n        solutions = solve((eq1, eq2, eq3), (cars, bikes, lorries))\n        \n        for sol in solutions:\n            # Filter only positive integer solutions\n            if all(val.is_integer and val > 0 for val in sol.values()):\n                possible_solutions.append(sol)\n\n    # Assuming that there's a unique solution that fits the constraints\n    if possible_solutions:\n        return possible_solutions[0]\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 50\n    while n % 13 != 0:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_row_seats = 10\n    row_increment = 2\n    row_number = 12\n\n    seats_in_12th_row = first_row_seats + (row_number - 1) * row_increment\n\n    return seats_in_12th_row\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    \n    # We know that when there's only one entrance,\n    # it takes 16 minutes for the line to clear out.\n    # Therefore, we can calculate the total number of visitors who were in line.\n    total_visitors = 16 * visitors_per_minute\n    \n    # With two entrances, the combined check-in rate per minute is doubled.\n    combined_check_in_rate = 2 * check_in_per_entrance\n    \n    # Now we calculate the time it would take for all visitors to check in with two entrances.\n    time_with_two_entrances = total_visitors / combined_check_in_rate\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    # To find the minimum value of p such that 245p is a cube,\n    # we factorize 245 and then make each prime factor's power\n    # a multiple of 3 (since a cube number has prime factors raised to powers of 3)\n    \n    # Prime factorization of 245 is 5 * 7^2\n    # We need to multiply 245 by a number p such that all prime factors are raised to powers of 3\n    # Hence, we need to multiply by 5^2 * 7 to make the cube\n    \n    p = 5**2 * 7\n    \n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    avg_pages_per_day = 20\n    days_spent_reading = total_pages / avg_pages_per_day\n\n    return int(days_spent_reading)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    \n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    book_percentage = 0.10\n    dvd_percentage = 0.20\n\n    money_spent_on_book = initial_amount * book_percentage\n    remaining_after_book = initial_amount - money_spent_on_book\n    money_spent_on_dvd = remaining_after_book * dvd_percentage\n    remaining_after_dvd = remaining_after_book - money_spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # Since 1/3 = 0.333..., the first 1000 digits will be '3'\n    digits_sum = sum(int(digit) for digit in decimal_part)\n    return digits_sum\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    distance_per_day = 5\n    distance_per_night = 3\n    effective_distance = distance_per_day - distance_per_night\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= distance_per_day\n        \n        if total_distance <= 0:\n            break\n        \n        total_distance += distance_per_night\n    \n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    original_number = (final_number - 12) / 2\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    # Let the number of oranges initially be 3x and number of lemons be 5x.\n    # After selling 48 oranges, the number of oranges becomes 3x - 48.\n    # According to the new ratio 1:2, we have (3x - 48) / 5x = 1/2.\n    # Solving for x will give us the initial number of oranges and lemons.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x - 48) / (5*x), 1/2)\n    solution = solve(equation, x)\n    \n    # The number of lemons initially is 5x\n    num_lemons = 5 * solution[0]\n    \n    return num_lemons\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # Calculate all possible combinations of fruits a student can choose\n    # There are 7 possibilities:\n    # 1. Only apple, 2. Only pear, 3. Only cherry, 4. Apple and pear,\n    # 5. Apple and cherry, 6. Pear and cherry, 7. Apple, pear, and cherry\n    \n    # Each student can choose 1 set of fruits\n    # By the pigeonhole principle, to ensure at least two students choose the same combination,\n    # you need one more student than the number of combinations\n\n    num_combinations = 7  # All possible unique combinations\n    students_needed = num_combinations + 1  # 1 more than the number of combinations\n    \n    return students_needed\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2  # Chicken burger, beef burger\n    sides = 3    # French fries, meshed potato, broccoli\n    drinks = 5   # Sprite, Coke, Fanta, lemonade, iced tea\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # Avril spent 10p which was one-quarter of her money\n    # If 10p is one-quarter, then Avril's total money is 4 times the amount she spent\n    total_money = spent * 4  \n    return total_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    legs_ducks = 3 * 2  # Each duck has 2 legs\n    legs_parrots = 2 * 2  # Each parrot has 2 legs\n    legs_rabbit = 1 * 4  # Each rabbit has 4 legs\n    legs_cats = 4  # Each cat has 4 legs\n\n    total_legs_other_than_cats = legs_ducks + legs_parrots + legs_rabbit\n    number_of_cats = (32 - total_legs_other_than_cats) / legs_cats\n\n    return int(number_of_cats)\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    students_A, students_B, students_C = 45, 75, 210\n\n    gcf = gcd(gcd(students_A, students_B), students_C)\n\n    return gcf\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    teams = 11\n    matches = comb(teams, 2)\n    return matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    ans = phi(4, phi(8, 3))\n    \n    return ans\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rooms, students = symbols('rooms students')\n    \n    equation1 = Eq(4 * rooms + 40, students)\n    equation2 = Eq(6 * (rooms - 4), students)\n    \n    solutions = solve((equation1, equation2), (rooms, students))\n    \n    return solutions[rooms]\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy, father = symbols('judy father')\n\n    # Judy's father is 33 years older than her\n    equation1 = Eq(father, judy + 33)\n    # The sum of their ages is 63 years old\n    equation2 = Eq(judy + father, 63)\n\n    # Solve the equations to find the current ages\n    ages = solve((equation1, equation2), (judy, father))\n\n    # Now, we want to find the number of years ago when\n    # her father's age was four times her age.\n    # Let 'x' be the number of years ago this occurred.\n    x = symbols('x')\n    # The age relation 'x' years ago: father - x = 4 * (judy - x)\n    equation3 = Eq(ages[father] - x, 4 * (ages[judy] - x))\n\n    # Solve for 'x'\n    years_ago = solve(equation3, x)\n\n    return years_ago[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given terms in the sequence\n    term_10 = 23\n    term_15 = 38\n    \n    # Calculate the common difference\n    common_difference = (term_15 - term_10) / (15 - 10)\n    \n    # Calculate the first term (a1) using term_10 (a10 = a1 + 9d)\n    first_term = term_10 - common_difference * (10 - 1)\n    \n    # Calculate the 102nd term\n    term_102 = first_term + common_difference * (102 - 1)\n    \n    return term_102\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    # Kristina ate 3/5 of the sweets, which is 18 sweets.\n    # Let's find the total number of sweets she bought.\n    total_sweets = (18 * 5) / 3\n\n    # Now, calculate how many sweets are left.\n    sweets_left = total_sweets - 18\n\n    return sweets_left\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = (6**2) - (4**2)\n    return ans\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    lcm = None  # Least Common Multiple of 6, 8, 9, 15\n\n    # Find LCM(6, 8, 9, 15) using gcd (greatest common divisor) function\n    from math import gcd\n\n    # Function to find LCM of two numbers\n    def find_lcm(num1, num2):\n        return (num1 * num2) // gcd(num1, num2)\n\n    # List of numbers\n    numbers = [6, 8, 9, 15]\n    \n    # Calculating LCM of the numbers list\n    lcm = find_lcm(numbers[0], numbers[1])\n    for i in range(2, len(numbers)):\n        lcm = find_lcm(lcm, numbers[i])\n\n    # In the problem statement, it is mentioned that he needs at least 1000 markers,\n    # so we have to find the multiple of the LCM that is just greater than or equal to 1000.\n    multiplier = 1000 // lcm\n    if 1000 % lcm != 0:\n        multiplier += 1\n\n    # Minimum number of markers Mr Manson had to purchase\n    return lcm * multiplier\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_current_age = 9\n    john_current_age = 5\n    jane_future_age = 15\n    age_difference = jane_future_age - jane_current_age\n    john_future_age = john_current_age + age_difference\n\n    return john_future_age\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    for x in range(-10, 14):  # Check for possible number that fits the blank\n        if (13 - x) ** 2 == 25:\n            return x\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    marked_price = 1.20 * cost_price\n    selling_price = 0.80 * marked_price\n    loss = marked_price - selling_price\n    \n    equation = Eq(loss, 40)\n    \n    cost_price_solution = solve(equation, cost_price)\n    \n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    expression1 = (7 + 3) * 11\n    expression2 = 7 + (3 * 11)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Total time taken by both taps to fill the tank\n    total_time_xy = 6\n    \n    # Time taken by tap X to fill the tank\n    time_x = 10\n    \n    # Rate of tap X (part of the tank filled per minute)\n    rate_x = 1 / time_x\n    \n    # Combined rate of tap X and Y (part of the tank filled per minute when both are on)\n    rate_xy = 1 / total_time_xy\n    \n    # Rate of tap Y is the combined rate minus the rate of tap X\n    rate_y = rate_xy - rate_x\n    \n    # Time taken by tap Y to fill the tank is the inverse of its rate\n    time_y = 1 / rate_y\n\n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    total_apples = 20\n    total_strawberries = 30\n    total_both = 10\n    total_neither = 5\n\n    # Using the inclusion-exclusion principle\n    total_students = (total_apples + total_strawberries - total_both + total_neither)\n    \n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanrui, yaokuan = symbols('xuanrui yaokuan')\n\n    # Xuanrui and Yaokuan had $708 markers altogether.\n    equation1 = Eq(xuanrui + yaokuan, 708)\n\n    # After Xuanrui gave away $532 markers\n    # and Yaokuan sold 3/7 of his markers, they had an equal number of markers left.\n    equation2 = Eq(xuanrui - 532, yaokuan - 3/7 * yaokuan)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (xuanrui, yaokuan))\n\n    return solutions[xuanrui]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    original_price = 1050\n    discount_rate = 0.12\n    discounted_amount = original_price * discount_rate\n    final_price = original_price - discounted_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_points = 44\n\n    # Let x be the number of correct answers\n    # The number of incorrect answers will then be total_questions - x\n    # We set up the equation based on the points system\n    for x in range(total_questions + 1):\n        if (x * correct_points) + ((total_questions - x) * incorrect_points) == total_points:\n            return x\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    # Calculate the factorial for each number and sum them up\n    from math import factorial\n    \n    total_sum = sum(factorial(i) for i in range(1, 9))\n    \n    # Get the last two digits of the total sum\n    return total_sum % 100\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    cup_a_volume = 300\n    cup_b_volume = 300\n    cup_a_concentration = 20 / 100\n    cup_b_concentration = 30 / 100\n\n    total_sugar = (cup_a_volume * cup_a_concentration) + (cup_b_volume * cup_b_concentration)\n    total_volume = cup_a_volume + cup_b_volume\n\n    concentration_mixture = (total_sugar / total_volume) * 100\n\n    return concentration_mixture\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, ryan = symbols('ahmad ryan')\n\n    equation1 = Eq(ahmad + ryan, 1442)\n    equation2 = Eq(ahmad, 6 * ryan)\n\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n\n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    conversion_rate = 1 / 2.50\n    pounds = dollars * conversion_rate\n    return pounds\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the current ages of the younger and older brother be y and o, respectively.\n    y, o = symbols('y o')\n    \n    # When the older brother was y years old, the younger brother was 12.\n    equation1 = Eq(o - (y - 12), y)\n    # When the younger brother will be o years old, the older brother will be 27.\n    equation2 = Eq(y + (o - y), 27)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (y, o))\n    \n    return solutions[o]\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    distance_between_carriages = 1\n    \n    # Subtract the length of the train head and divide the remaining length by the sum of carriage length and distance between carriages\n    remaining_length = total_length - head_length\n    carriage_total_length = carriage_length + distance_between_carriages\n\n    num_carriages = remaining_length // carriage_total_length + 1  # Include the head of the train\n\n    return num_carriages\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[triangle] / solutions[diamond]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    for correct_answers in range(51):\n        wrong_answers = 50 - correct_answers\n        score = correct_answers * 2 - wrong_answers\n        if score == 82:\n            return correct_answers\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 1  # we start testing from the smallest whole number value of x, which is 1\n    while True:\n        if (24 * x - 8) % 25 == 0:  # the smallest y should be whole number, so we check if (24x-8) is divisible by 25\n            return x\n        else:\n            x += 1  # increment x to test the next whole number\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let x be the number of $2 notes \n    # and y be the number of $10 notes at first.\n    # We have two equations based on the problem statement:\n    # x + y = 95 (total number of notes)\n    # 5y + x = 175 (total number of $2 notes after exchanging $10 for $2)\n    \n    # We can express y in terms of x from the first equation:\n    # y = 95 - x\n    \n    # Now we substitute y in the second equation:\n    # 5*(95 - x) + x = 175\n    \n    # solving for x gives us the number of $2 notes at first.\n    x = symbols('x')\n    equation = Eq(5 * (95 - x) + x, 175)\n    \n    # Use sympy's solve to find the value of x\n    number_of_2_notes_at_first = solve(equation, x)\n    \n    return number_of_2_notes_at_first[0]\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):  # since x is the first digit, it can't be 0\n        for y in range(10):  # y can be any digit, including 0\n            A = 10 * x + y\n            B = 2 * A\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Digit 8 in the ones place\n    ones_place_8 = 0\n    for i in range(1, 289):\n        if i % 10 == 8:\n            ones_place_8 += 1\n            \n    # Digit 8 in the tens place\n    tens_place_8 = 0\n    for i in range(80, 289, 10):\n        tens_place_8 += 10\n        \n    # Bobby's mistake: for numbers between 280 to 289, both the ones and tens place should be accounted for.\n    # As 288 is the last page, the tens place 8's only go up to 289\n    ten_correction = (288 - 280) + 1\n    tens_place_8 = ten_correction\n    \n    # Digit 8 in the hundreds place - Since book has only 288 pages, the 100's place never reaches 8.\n    hundreds_place_8 = 0\n\n    # Finally, correcting the total count and adding up the appearances\n    ans = ones_place_8 + tens_place_8 + hundreds_place_8\n    \n    return ans\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    price_per_kg_bag1 = 5 / 2.5\n    price_per_kg_bag2 = 7.70 / 4\n    \n    return \"Bag 1\" if price_per_kg_bag1 < price_per_kg_bag2 else \"Bag 2\"\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    # Calculate the sum of the reciprocals\n    reciprocal_sum = sum(1/i for i in range(2001, 2011))\n\n    # Find the value of S by taking the reciprocal of the sum of reciprocals\n    S = 1 / reciprocal_sum\n\n    # Largest whole number smaller than S is the floor of S\n    largest_whole_number = int(S // 1)  # Using floor division to find the largest whole number\n\n    return largest_whole_number\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    return 521 - 173 - 127\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250  # Mass of the jar when it is 1/4 full\n    mass_three_quarters_full = 350  # Mass of the jar when it is 3/4 full\n\n    # Since 3/4 full mass - 1/4 full mass gives the mass of half the jar of Marmite\n    mass_half_marmite = mass_three_quarters_full - mass_quarter_full\n\n    # Double the mass of half the jar to find the mass of full jar of Marmite\n    mass_full_marmite = 2 * mass_half_marmite\n\n    # Subtract the mass of full jar from the mass of the jar when it is 3/4 full\n    # to find the mass of the empty jar\n    mass_empty_jar = mass_three_quarters_full - mass_full_marmite\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    total_length = 60\n    interval = 10\n\n    # The number of intervals is one less than the number of trees\n    # Since both ends will have trees we add one more to the calculation\n    num_trees_per_side = (total_length // interval) + 1\n\n    # We have trees on both sides of the road\n    ans = num_trees_per_side * 2\n\n    return ans\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = bus_length * number_of_buses + distance_between_buses * (number_of_buses - 1)\n\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Aiden's mistake (dividing by 4 and subtracting 25): x/4 - 25\n    mistake_eq = Eq(x / 4 - 25, 2021)\n    # Aiden should be doing (multiplying by 4 and adding 25): 4*x + 25\n    mistake_solution = solve(mistake_eq, x)\n    original_number = mistake_solution[0]\n    correct_answer = 4 * original_number + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    unit_height = height_of_28_blocks / 28\n    height_of_42_blocks = unit_height * 42\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    ans = 4.8 * 5\n    return ans\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term + 1)\n    sum_series = (num_terms * (first_term + last_term)) // 2\n    return sum_series\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        number = int(f\"2{E}3{E}2\")\n        if number % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    x, y = symbols('x y')\n    proportion_equation = Eq(x * 3, y * 5)\n    solution_at_x_5 = solve(proportion_equation.subs(x, 5), y)\n    y_when_x_5 = solution_at_x_5[0]\n    \n    return \"direct\", y_when_x_5\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50  # 50% above cost\n    discount_price = selling_price * 0.90  # 10% Christmas discount\n    \n    final_selling_price = discount_price\n    profit = final_selling_price - cost_price\n    \n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    # Initialize the count of students and continue until we find a solution.\n    count = 0\n    while True:\n        # Total number of students originally\n        orig_students = (count ** 2) + 5\n        \n        # Check with additional 18 students\n        new_students = orig_students + 18\n        \n        # Check if new_students forms a perfect n x n square\n        if int(new_students ** 0.5) ** 2 == new_students:\n            return orig_students\n        # Increment count to try next possible perfect square for m x m\n        count += 1\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    return sum([9, 11, 8, 12, 7, 13, 6, 14, 5, 14])\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n    \n    class_a = 12\n    class_b = 15\n    class_c = 18\n    \n    ans = gcd(gcd(class_a, class_b), class_c)\n    \n    return ans\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Let x1, x2 be the first two numbers of the sequence.\n    # Then the sequence is: x1, x2, x1 + x2, x1 + 2*x2, 2*x1 + 3*x2, 3*x1 + 5*x2\n    # We are given that the fourth and the sixth numbers are 6 and 15 respectively.\n    # Therefore, we have the following system of equations:\n    # x1 + 2*x2 = 6     ... (1)\n    # 3*x1 + 5*x2 = 15  ... (2)\n    \n    # We can solve this system using sympy's solve function.\n    from sympy import symbols, Eq, solve\n    x1, x2 = symbols('x1 x2')\n    \n    equation1 = Eq(x1 + 2*x2, 6)\n    equation2 = Eq(3*x1 + 5*x2, 15)\n    \n    solutions = solve((equation1, equation2), (x1, x2))\n    \n    # Now we have the values for x1 and x2, we can find the seventh number in the sequence\n    # which is 5*x1 + 8*x2\n    seventh_number = 5*solutions[x1] + 8*solutions[x2]\n    \n    return seventh_number\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    start_time = datetime.strptime(\"17:00\", \"%H:%M\")  # 5 p.m as a datetime object\n    badminton_duration = timedelta(minutes=45)  # 45 minutes for badminton\n    jogging_duration = timedelta(minutes=30)    # 30 minutes for jogging\n\n    end_time = start_time + badminton_duration + jogging_duration  # Calculate end time\n\n    return end_time.strftime(\"%I:%M %p\")  # Format the end time in 12-hour clock format\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n\n    original_total = original_average * total_numbers\n    new_total = new_average * total_numbers\n\n    difference = original_total - new_total\n    original_number = 16 + difference\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n\n    boys = 36 - girls\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    result = solve(equation, girls)\n\n    return result[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3) ** 2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    david_sugar = 800 * 0.05\n    eugene_sugar = 200 * 0.30\n    felix_sugar = 300 * 0.10\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    total_solution = 800 + 200 + 300\n    concentration = (total_sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gill, andrew = symbols('gill andrew')\n    \n    equation1 = Eq(gill + andrew, 62)\n    equation2 = Eq(gill, andrew + 18)\n\n    solutions = solve((equation1, equation2), (gill, andrew))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    # Calculate the amount of fruit juice in each type of punch\n    fruit_juice_1 = 20 * 0.35\n    fruit_juice_2 = 30 * 0.60\n\n    # Calculate the total amount of fruit juice\n    total_fruit_juice = fruit_juice_1 + fruit_juice_2\n\n    # Calculate the total volume of the mixture\n    total_volume = 20 + 30\n\n    # Calculate the percent concentration of the new mixture\n    percent_concentration = (total_fruit_juice / total_volume) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n    ans = comb(4, 2)\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    rex_questions = 24\n    rex_score = 66\n    correct_points = 4\n    incorrect_points = -2\n\n    # Unknown: number of correct answers (c) and incorrect answers (i)\n    # Equation: c = rex_questions - i (since he answered all but one of the questions)\n    # Equation: correct_points * c + incorrect_points * i = rex_score\n    \n    # c + i = rex_questions -> c = rex_questions - i\n    # 4c - 2i = rex_score -> 4 * (rex_questions - i) - 2i = rex_score\n    \n    # Solve for i\n    i = (correct_points * rex_questions - rex_score) / (correct_points + (-incorrect_points))\n    c = rex_questions - i\n    \n    return int(c)\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    from itertools import combinations\n\n    vertices = range(8)  # 0 to 7 for the eight vertices of a cube\n    edges = list(combinations(vertices, 2))  # all possible edges without direction\n\n    # filter out the edges that are not part of the cube\n    actual_edges = [e for e in edges if bin(e[0] ^ e[1]).count('1') == 1]\n\n    # count how many quadrilaterals we can make - faces of the cube\n    quadrilaterals = list(combinations(actual_edges, 4))\n    valid_quadrilaterals = [q for q in quadrilaterals if is_valid_quadrilateral(q)]\n\n    return len(valid_quadrilaterals)\n\ndef is_valid_quadrilateral(edges):\n    # checks if 4 edges make up a valid quadrilateral face of the cube\n    vertices = set()\n    for edge in edges:\n        vertices.update(edge)\n    return len(vertices) == 4 and all_connected(edges)\n\ndef all_connected(edges):\n    # Given 4 edges, check if all vertices are connected\n    edges_as_sets = [set(edge) for edge in edges]\n    connected = edges_as_sets.pop()\n    while edges_as_sets:\n        for edge_set in edges_as_sets:\n            if connected & edge_set:\n                connected.update(edge_set)\n                edges_as_sets.remove(edge_set)\n                break\n        else:\n            # no more connected edges\n            return False\n    return True\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    return 58 + 74\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    box_capacity = 9\n    boxes_needed = -(-cookies // box_capacity)  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Initialize variables\n    smallest_number = float('inf')  # Start with infinity, so any found number will be smaller\n\n    # Loop through all possible three-digit numbers\n    for number in range(100, 1000):\n        # Convert the number to a string and then to a set of integers\n        digits = set(map(int, str(number)))\n\n        # Check if one of the digits is 7 and the difference between any two is not more than 4\n        if 7 in digits and all(abs(x - y) <= 4 for x in digits for y in digits):\n            smallest_number = min(smallest_number, number)\n            break\n    \n    return smallest_number\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, every game eliminates one person.\n    # So for four people, we need three games to determine a single winner.\n    # The three games follow this pattern: two people play and one is knocked out, then two more play (one is the one who won previously), and the last game to determine the winner.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_by_A = 266\n    not_by_B = 178\n\n    both_A_and_B = (not_by_A + not_by_B) - total_exhibits\n    \n    return both_A_and_B\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    badges_made_initially = 354  # Let's start with the assumption that initially 354 badges were made\n    \n    while True:\n        badges_sold_first_day = (5 / 7) * badges_made_initially\n        remaining_badges_after_first_day = badges_made_initially - badges_sold_first_day\n        badges_sold_second_day = (1 / 3) * remaining_badges_after_first_day\n        remaining_badges_after_second_day = remaining_badges_after_first_day - badges_sold_second_day\n\n        total_badges_in_the_end = remaining_badges_after_second_day + 354\n\n        # Check if the remaining badges are 3 times the initial badges made\n        if total_badges_in_the_end == 3 * badges_made_initially:\n            return badges_made_initially\n        else:\n            badges_made_initially += 1  # Increment the initial badges count and try again\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    drop_temp = 10\n    midnight_temp = noon_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # Maximum balls without getting all three colors = (maximum balls of one color - 1)\n    # for each color. After this point, the next ball must be of the third color.\n    max_blue = 8 - 1  # picking the maximum number of blue balls without picking all colors\n    max_red = 10 - 1  # similarly for red balls\n    max_green = 13 - 1  # and for green balls\n\n    # The magician needs to pick one more ball to guarantee the next one is of the third color\n    balls_needed = max_blue + max_red + max_green + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (3, 7), (5, 11)]\n    num, _ = solve_congruence(*congruences)\n    while num < 200 or num >= 300:\n        num += 6 * 7 * 11\n    return num\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "from itertools import permutations\n\ndef solution():\n    angel_number = \"0141705021\"\n    devil_number = \"4005220912\"\n\n    # Create a dictionary to count occurrences of each digit in 'Angel'\n    angel_dict = {str(i): angel_number.count(str(i)) for i in range(10)}\n\n    # Create a dictionary to count occurrences of each digit in 'Devil'\n    devil_dict = {str(i): devil_number.count(str(i)) for i in range(10)}\n\n    # Compare the dictionaries\n    if angel_dict == devil_dict:\n        ans = True  # Andy can unlock the chest because the passwords are permutations of each other\n    else:\n        ans = False  # Andy cannot unlock the chest, hence we need to generate the correct password\n\n    # If the correct password is needed, find a permutation of 'Angel' that matches 'Devil's pattern\n    if not ans:\n        # Generating all possible permutations from the 'Angel' number\n        all_permutations = set(permutations(angel_number))\n        # Searching for the 'Devil' number in the permutations of 'Angel'\n        if devil_number in all_permutations:\n            return True, \"Andy can unlock the chest.\"\n        else:\n            correct_password = \"\".join(sorted(devil_number))\n            return False, \"Andy cannot unlock the chest. The correct password is {}\".format(correct_password)\n\n    return ans\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, skirt = symbols('blouse skirt')\n    equation1 = Eq(skirt, blouse + 14)\n    equation2 = Eq(3 * skirt + 2 * blouse, 317)\n\n    solutions = solve((equation1, equation2), (blouse, skirt))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # original price of the house is the price from last year divided by 1.1,\n    # because the house increased by 10% to £110,000\n    original_price = 110000 / 1.1\n\n    # this year the house loses 10% of its value\n    current_price = original_price * 0.9\n\n    # the profit or loss is the current price minus the original price\n    profit_or_loss = current_price - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the 3 groups of flowers: roses, jasmines, and daisy\n    group_arrangement = factorial(3)\n    \n    # Number of ways to arrange within each flower group\n    roses_arrangement = factorial(3)\n    jasmines_arrangement = factorial(4)\n    \n    # Daisy has only one way to arrange since there's only one daisy\n    daisy_arrangement = 1\n    \n    # Total arrangements is the product of arrangements of groups and within groups\n    total_arrangements = group_arrangement * roses_arrangement * jasmines_arrangement * daisy_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    room_a = 235\n    room_b = 567\n\n    total_pupils = room_a + room_b\n    pupils_each = total_pupils // 2\n\n    return pupils_each\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    small_product = 1*2*3*4*5*6\n    large_product = 1*2*3*4*5*6*7*8\n    ans = 0\n    for i in range(small_product, large_product + 1):\n        if large_product % i == 0 and i % small_product == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    ans = 1\n    while (ans + 1) * ans // 2 <= 60:\n        ans += 1\n    return ans - 1\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    pies_given = 5\n    pies_left = 3\n    pies_short = 2\n\n    total_pies = pies_given + pies_left\n    while True:\n        total_pies += 1\n        if (total_pies - pies_short) % 6 == 0 and total_pies % 5 == pies_left:\n            break\n            \n    return total_pies\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.20\n    discount_amount = original_price * discount_rate\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # We are looking for prime numbers A and B such that 8A - 3B is a multiple of 3\n    # Since A and B are primes, let's try some primes until we find a suitable pair\n\n    from sympy import primerange\n\n    # Get a list of prime numbers for a reasonable range, say up to 100 for the sake of the example\n    primes = list(primerange(2, 100))\n\n    # Given that 8A - 3B must be a multiple of 3, A has to be a prime that satisfies (8A mod 3) == 0\n    for A in primes:\n        if (8 * A) % 3 == 0:\n            # 8A is a multiple of 3, so A must be also a multiple of 3\n            # Since 3 is itself a prime, the only value A can take and be prime is 3\n            return A\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    ans = 12321 // 9\n    return ans\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20  # in milliliters\n    minutes_per_hour = 60\n    milliliters_per_liter = 1000\n    \n    leaked_water_per_hour = (leak_rate_per_minute * minutes_per_hour) / milliliters_per_liter\n    \n    return leaked_water_per_hour\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        s, e, o, n = p\n        if s == 0 or o == 0:  # Leading digit cannot be zero\n            continue\n        see = s*100 + e*10 + e\n        ooo = o*100 + o*10 + o\n        nee = n*100 + e*10 + e\n        if see + ooo == nee:\n            return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    \n    # Solve the system of congruences using the Chinese Remainder Theorem\n    age, _ = solve_congruence(*congruences)\n    \n    return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Each color creates a pigeonhole\n    total_colors = 3\n    \n    # To ensure at least one pair, she needs to remove one sock of each color + 1\n    socks_needed = total_colors + 1\n\n    return socks_needed\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    # Let x be the number of pieces of paper cut into three parts\n    # Each piece cut into three parts adds 2 extra pieces to the total (as one piece becomes three)\n    # Initially there are 10 pieces, after cutting into three parts we should have 16 pieces\n    # 10 + 2x = 16\n    # 2x = 16 - 10\n    # x = (16 - 10) / 2\n    x = (16 - 10) // 2\n    \n    return x\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # You can take at most 1 red apple and 1 green apple without having 2 apples of the same color.\n    # The next apple you take must be either red or green, giving you 2 of the same color.\n    # So you must take 3 apples to ensure you have 2 of the same color.\n\n    return 3\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    twenty_thousand = 20000\n    number = twenty_thousand - 20\n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    return sum(scores) / len(scores)\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    ans = 6.3 + 8.7 + 9.6 - 2.6\n    return ans\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    volume_per_pail = 4\n    number_of_pails = 4\n    remaining_water = 7\n    \n    original_volume = (volume_per_pail * number_of_pails) + remaining_water\n    \n    return original_volume\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, solve\n\n    x, y, z = symbols('x y z')\n\n    equation = x**20 * y**15 * z**5 - 243\n    solutions = solve(equation)\n\n    for sol in solutions:\n        if all([s.is_real for s in sol]):\n            x_value, y_value, z_value = sol\n            break\n\n    result = x_value**8 * y_value**6 * z_value**2\n    return result\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    sum = 0\n    for i in range(1, 47):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    # Expand the left side of the equation\n    expanded = 5 * (6 * c - 1)\n    \n    # Move all terms to one side of the equation\n    equation = expanded + 35\n    \n    # Solve for c\n    c_value = equation.subs(c, solve(equation, c)[0])\n    \n    return c_value\n\nfrom sympy import symbols, solve\n\nc = symbols('c')\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for price of a book and price of a pencil box\n    book_price, pencil_box_price = symbols('book_price pencil_box_price')\n\n    # Set up equations based on the given information\n    equation1 = Eq(2 * book_price + 3 * pencil_box_price, 42)\n    equation2 = Eq(2 * book_price + 6 * pencil_box_price, 60)\n\n    # Solve equations\n    solutions = solve((equation1, equation2), (book_price, pencil_box_price))\n\n    # Return price of each pencil box\n    return solutions[pencil_box_price]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    factorial = 1\n    for i in range(1, 2011):\n        factorial *= i\n        while factorial % 10 == 0:\n            factorial //= 10\n    \n    return factorial % 10\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    total_numbers = sum([(i + 1) * (i + 2) for i in range(8)])\n    median_position = (total_numbers + 1) // 2\n    \n    cumulative_count = 0\n    for n in range(1, 9):\n        cumulative_count += (n + 1)\n        if cumulative_count >= median_position:\n            return n\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_of_six_players = 150 * 6\n    average_height_of_four_players = 150 - 2\n    total_height_of_four_players = average_height_of_four_players * 4\n\n    total_height_of_other_two_players = total_height_of_six_players - total_height_of_four_players\n    average_height_of_other_two_players = total_height_of_other_two_players / 2\n\n    return average_height_of_other_two_players\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_distance = 500\n    daily_paving_distance = 50\n\n    days_required = total_distance / daily_paving_distance\n\n    return int(days_required)\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    x = 42\n    y = 1\n\n    # Factoring 42*y where y makes every factor's exponent equal to 1\n    # Since 42 = 2 * 3 * 7, y should be chosen such that it cancels out\n    # the square factors. To make exponents 1, y must be 2 * 3 * 7 = 42.\n    \n    y = 2 * 3 * 7\n\n    return x + y\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # Given:\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # We want to know how many chickens weigh as much as 1 dog.\n\n    weight_dog_in_rabbits = 8\n    weight_rabbit_in_chickens = 2\n\n    # Since 1 dog weighs as much as 8 rabbits,\n    # and 1 rabbit weighs as much as 2 chickens,\n    # then 1 dog weighs as much as 8 * 2 chickens.\n\n    weight_dog_in_chickens = weight_dog_in_rabbits * weight_rabbit_in_chickens\n\n    return weight_dog_in_chickens\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')\n\n    # Before sharing\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # After sharing\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600\n    concentration = 0.22\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for number in range(1, 100):\n        for digit in str(number):\n            total += int(digit)\n    return total\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    quarter = total_money / 4\n    \n    return quarter\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    # Number of kilograms of fodder a cattle eats in a day\n    fodder_per_day_per_cattle = 10\n    # Number of cattles\n    num_cattles = 8\n    # Number of days it takes for the cattles to eat all the fodder\n    number_of_days = 4\n\n    # Total kilograms of fodder in the barn initially\n    total_fodder = fodder_per_day_per_cattle * num_cattles * number_of_days\n\n    return total_fodder\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(\"1\" + str(num)) * 3 == int(str(num) + \"1\"):\n            return num\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let's denote the initial number of marbles Larry had as x.\n    # According to the problem, after giving away some marbles, Larry is left with 35 marbles.\n    # Larry gave away 5/12 of his marbles to Mark, so the remaining part is 7/12.\n    # Then he gave away 30 marbles to Nate and 26 marbles to Ollie.\n    # The equation can be represented as: (7/12)x - 30 - 26 = 35\n    # We can solve for x to find the initial number of marbles.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((7/12) * x - 30 - 26, 35)\n    initial_marbles = solve(equation, x)\n\n    return initial_marbles[0]\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    today = datetime.today()\n    years = timedelta(days=38*365.25) # accounting for leap years\n    months = timedelta(days=6*30) # rough average of month duration\n\n    birth_date = today - (years + months)\n    return birth_date.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = 1848\n    ratio_money_pies_cakes = (15, 7)\n    ratio_pies_cakes = (4, 1)\n    difference_cost_pie_cake = 13\n\n    # Define symbols for the number of pies and cakes\n    pies, cakes = symbols('pies cakes', integer=True)\n\n    # We have two equations based on the problem:\n    # Equation 1: (money_pie/pie_price) / (money_cake/cake_price) = ratio_pies_cakes\n    # Equation 2: total_money = money_pie + money_cake\n\n    pie_price = symbols('pie_price')\n\n    # Using the ratios given to express the money collected from selling pies and cakes\n    money_pie = total_money * ratio_money_pies_cakes[0] / sum(ratio_money_pies_cakes)\n    money_cake = total_money * ratio_money_pies_cakes[1] / sum(ratio_money_pies_cakes)\n\n    # Using the ratio of number of pies to cakes sold and prices:\n    equation1 = Eq(pies / cakes, ratio_pies_cakes[0] / ratio_pies_cakes[1])\n\n    # Using the price difference between pies and cakes\n    equation2 = Eq(cakes * (pie_price + difference_cost_pie_cake), money_cake)\n\n    # The price of a pie is money_pie divided by the number of pies sold\n    equation3 = Eq(pie_price * pies, money_pie)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (pies, cakes, pie_price))\n\n    return solutions[cakes]\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((3/5) * (x - (1/4)*x - 3) - 6, 24)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n    for perm in permutations(digits, 4):\n        if perm[-1] in ['0', '6', '8'] and perm[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads.append(i)\n    ans = beads[0]  # Since there will be only one such number.\n    return ans\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    ans = 345 * 76\n    return ans\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Define the speeds in meters per minute\n    speed_qiqi = 60\n    speed_weiling = 72\n    \n    # Defining the time each takes to get to the school\n    # Weiling starts 2 minutes after Qiqi, so she travels for 2 minutes less than Qiqi\n    # Additionally, Weiling arrives 4 minutes before Qiqi,\n    # meaning Weiling travels for (2 + 4) minutes less than Qiqi\n    time_difference = 2 + 4\n    \n    # Let the time Qiqi takes to travel be t\n    # Therefore, Weiling takes (t - time_difference) minutes\n    # They both cover the same distance, which gives us the equation:\n    # speed_qiqi * t = speed_weiling * (t - time_difference)\n    # Solving for t we get:\n    \n    t = time_difference * speed_weiling / (speed_weiling - speed_qiqi)\n    \n    # Now calculate the distance using Qiqi's travel time\n    distance = speed_qiqi * t\n\n    return distance\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    units_digit_2015 = (9 ** 2015) % 10\n    units_digit_2016 = (9 ** 2016) % 10\n    \n    ans = (units_digit_2015 + units_digit_2016) % 10\n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # Calculate the total ways to arrange 5 men.\n    arrangements_of_men = factorial(5)\n    \n    # There are 6 possible places where the 3 women can be placed between the men.\n    # (W represents possible positions for women, M represents men):\n    # W M W M W M W M W M W      [W = Women, M = Men]\n    # The possible positions for the women are akin to choosing 3 places from 6\n    # which is C(6,3) or \"6 choose 3\".\n    positions_for_women = factorial(6) // (factorial(3) * factorial(6 - 3))\n    \n    # Now multiply the number of ways to arrange the men with the number of places\n    # where women can be positioned, and then multiply by the arrangements of the 3 women among themselves.\n    total_arrangements = arrangements_of_men * positions_for_women * factorial(3)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n    \n    rope1 = 45\n    rope2 = 30\n    \n    longest_piece_length = gcd(rope1, rope2)\n    \n    return longest_piece_length\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marcs_time = 11 * 60 + 50  # Convert 11:50 AM to minutes\n    marcs_time -= 15  # Adjust for Marc's watch being 15 minutes slow\n    georges_time = marcs_time + 7  # Adjust for George's watch being 7 minutes fast\n\n    # Add half an hour's time (30 minutes) to George's watch\n    georges_time += 30\n\n    # Convert back to hours and minutes\n    georges_hours = georges_time // 60\n    georges_minutes = georges_time % 60\n\n    # Adjust if passing over midday (12 PM)\n    if georges_hours >= 12:\n        georges_hours -= 12\n\n    # George's watch time\n    return f\"{georges_hours}.{georges_minutes}\"\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    tax_on_first_30000 = Eq(T * 30000, (T / 100) * 30000)\n    tax_above_30000 = Eq((T + 3) * (income - 30000), ((T + 3) / 100) * (income - 30000))\n    total_tax = tax_on_first_30000.rhs + tax_above_30000.rhs\n    tax_is_T_plus_1_percent_of_income = Eq(total_tax, (T + 1) / 100 * income)\n\n    solutions = solve((tax_is_T_plus_1_percent_of_income, income > 30000), (T, income))\n\n    # Filtering positive income solutions only\n    income_solution = [sol[income] for sol in solutions if sol[income] > 0 and sol[income] > 30000]\n\n    # There should be only one positive income solution\n    return income_solution[0]\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45 / 100\n    total_amount = 540\n\n    ans = percentage * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, solve\n\n    h = symbols('h')\n    equation = Eq(2*h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n    \nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    jumps = 0\n    height_after_slides = 0\n    \n    while height_after_slides < total_height:\n        jumps += 1\n        height_after_slides += jump_up\n        if height_after_slides >= total_height:\n            break\n        if jumps % 3 == 0:\n            height_after_slides -= slide_down\n    \n    return jumps\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    for correct in range(31):\n        wrong = 30 - correct\n        score = 5 * correct - wrong\n        if score == 90:\n            return correct\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    rate_a = 1 / 10\n    rate_b = 1 / 15\n    combined_rate = rate_a + rate_b\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # The worst case to ensure we have 4 marbles of different colors would be:\n    # Draw all marbles of one color, then all of another color, and then draw 3 from another color.\n\n    # We want to ensure the fourth color, so we take worst case scenario for the three most numerous colors:\n    # 12 (all reds) + 9 (all blues) + 3 (just before we ensure a yellow, since there are 8 yellows)\n    min_marbles_drawn = 12 + 9 + 3 + 1  # +1 is for the guaranteed different color marble\n\n    return min_marbles_drawn\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    # Loop through all multiples of 3 and 7 (which is multiples of 21) between 0 and 100\n    for number in range(21, 101, 21):\n        if (number - 2) % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    gigi_age_in_2002 = 45\n    jenny_age_in_1995 = 22\n    # Calculate the year when Gigi was 22\n    year_gigi_was_22 = 2002 - gigi_age_in_2002 + 22\n    # Calculate the age difference between Gigi and Jenny\n    age_difference = 2002 - 1995\n    # Jenny's age when Gigi was 22 would be her age in 1995 plus the age difference\n    jenny_age_when_gigi_was_22 = jenny_age_in_1995 - (year_gigi_was_22 - (1995 - age_difference))\n    \n    return jenny_age_when_gigi_was_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    last_term = 2  # The last positive term will be a value greater than 0\n\n    # Using the arithmetic sequence nth term formula: an = a1 + (n - 1)d\n    # Rearranging for n:\n    # n = (an - a1) / d + 1\n    # Since we need the last positive term, an >= 2.\n    # The equation becomes n = (2 - 50) / (-4) + 1\n\n    num_terms = (last_term - first_term) / difference + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    # Split the number into its digits and sum them\n    digits_sum = sum(int(digit) for digit in \"20190406\")\n    \n    # Find the missing digit for the sum to be divisible by 9\n    for A in range(10):\n        if (digits_sum + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    import math\n\n    numerator = -6.94 - math.pow(9.604, 1/3)\n    denominator = math.sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    result = numerator / denominator\n\n    return round(result, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n\n    # Since each group must have at least 1 apple, we iterate from 1 to total_apples - 1\n    for apples_in_first_group in range(1, total_apples):\n        apples_in_second_group = total_apples - apples_in_first_group\n        if apples_in_second_group > apples_in_first_group:  # Ensure different sizes\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25\n    speed_of_current = 3\n    distance = 140\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time_taken = distance / speed_downstream\n\n    return time_taken\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percentage = 15\n    sale_price = original_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelet_price = 0.99\n    card_price = 1.98\n    total_cost = (5 * bracelet_price) + (2 * card_price)\n    \n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost = 3.25\n    total_cupcake_cost = 3 * cupcake_cost\n    cost_of_drinks = total_cost - total_cupcake_cost\n    cost_of_one_can = cost_of_drinks / 2\n\n    return cost_of_one_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        score = correct * 5 - wrong * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import gcd\n    from fractions import Fraction\n\n    # Convert minutes to seconds for uniform units\n    cycle_time = 9 * 60  # in seconds\n\n    # The first and second traffic lights change every 30 and 45 seconds respectively\n    first_light_time = 30  # seconds\n    second_light_time = 45  # seconds\n\n    # Calculate Least Common Multiple (LCM) for the first two traffic lights\n    lcm_first_second = (first_light_time * second_light_time) // gcd(first_light_time, second_light_time)\n\n    # Calculate the greatest common divisor for cycle time and lcm of the first two lights\n    common_multiple = cycle_time // lcm_first_second\n\n    # The third traffic light time must be a factor of the common_multiple and at least 30 seconds\n    # Starting from 30 seconds, find the smallest factor of common_multiple that is >= 30\n    third_light_time = 30\n    while third_light_time <= common_multiple:\n        if common_multiple % third_light_time == 0:\n            return third_light_time\n        third_light_time += 1\n\n    return None\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i + 1] - differences[i] for i in range(len(differences) - 1)]\n    \n    # Since it's double arithmetic, the second differences should be constant.\n    # We can calculate the next second difference and use it to find the next first difference.\n    next_second_difference = second_differences[0]\n    next_first_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_first_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    total_numbers = len(numbers) + 1  # Including the missing number\n    total_sum = 5 * total_numbers  # Mean times the number of values\n    current_sum = sum(numbers)  # Sum of the known values\n    missing_number = total_sum - current_sum  # Subtract to find the missing number\n\n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # Since there are 4 individuals and A should receive the ball after 3 passes,\n    # we consider that the ball can be passed to any of the 3 other individuals first.\n    # Then, for the second pass, there are 2 choices left (it can't be passed back to the\n    # first passer and not to the one who has the ball).\n    # Finally, the third pass must be made to A, so there is only 1 choice.\n\n    # 3 choices for the first pass, 2 choices for the second one.\n    count = 3 * 2 * 1\n    return count\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, ming = symbols('daniel ming')\n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    paper_weight_g = 25\n    num_students = 250\n    total_weight_g = paper_weight_g * num_students\n    total_weight_kg = total_weight_g / 1000  # Convert grams to kilograms\n    return total_weight_kg\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Let x be the number of tour group A members and y be the number of group B members\n    # According to the problem, we have 36*n = x + y - 11, and we know that x*y is the total number of pictures.\n    # We need to find the number of full rolls of film (x*y // 36) and the number of pictures on the last roll (x*y % 36).\n    # Since x can range from 1 to 35, and we don't know exactly the values of x and y, we need to try each possible value of x and corresponding y\n    # that satisfies the condition 36*n = x + y - 11, where we can find a suitable n (number of buses), and check if the last roll of film can take more pictures than 36.\n    \n    for x in range(1, 36):\n        for n in range(1, 100): # Assumed 100 as an arbitrary upper limit for the number of buses\n            y = 36 * n + 11 - x\n            pictures_on_last_roll = (x * y) % 36\n            if pictures_on_last_roll > 0:\n                return 36 - pictures_on_last_roll\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    largest_product = 0\n\n    for perm in permutations(cards):\n        num1 = 10 * perm[0] + perm[1]\n        num2 = 10 * perm[2] + perm[3]\n        product = num1 * num2\n        if product > largest_product:\n            largest_product = product\n\n    return largest_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Speed of the line is the same for both bridges\n    # Total distance for first bridge includes the length of the line itself\n    total_distance_first_bridge = 9 + 3\n    # Time taken to cross the first bridge\n    time_first_bridge = 8\n    # Speed = Total Distance / Time\n    speed = total_distance_first_bridge / time_first_bridge\n    \n    # Time taken to cross the second bridge\n    time_second_bridge = 10\n    # Using the speed, calculate the total distance for the second bridge\n    total_distance_second_bridge = speed * time_second_bridge\n    # Length of the second bridge is the total distance minus the length of the line\n    length_second_bridge = total_distance_second_bridge - 3\n    \n    return length_second_bridge\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum((1000 - 2 * i) ** 2 - (998 - 2 * i) ** 2 for i in range(0, 497))\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    product = 2688\n    for i in range(2, int(product**(1/3)) + 1, 2):\n        if product % i == 0:\n            second_num = i\n            first_num = second_num - 2\n            third_num = second_num + 2\n            if first_num * second_num * third_num == product:\n                return third_num\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = 11 * 60 + 55  # Convert 11:55 am to minutes\n    end_time = 13 * 60 + 40    # Convert 1:40 pm to minutes (13:40 in 24h format)\n    duration = end_time - start_time  # Calculate the duration in minutes\n    return duration\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    # Crystal is counted once in each row\n    crystal_counted_twice = 11 + 7 + 1\n\n    # Since she was counted in both rows, we must subtract her duplicate count\n    total_people = crystal_counted_twice - 1\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 3 == 0 and number % 11 == 0:\n            if (number - 1) % 2 == 0 and (number - 1) % 7 == 0:\n                return number\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    # Maddy needs to divide 10 cupcakes into two different groups each with at least 1 cupcake.\n    # If one group has 1, the other must have 9; if one has 2, the other must have 8, and so on.\n    # There are 10 - 1 possible divisions, but since the division of (x, y) is the same as (y, x),\n    # we divide the count by 2 to get the unique pair combinations.\n    count = (10 - 1) // 2\n    return count\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n\n    factors_dict = factorint(224)\n    num_factors = 1\n    for exponent in factors_dict.values():\n        num_factors *= (exponent + 1)\n    return num_factors\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    n = 0\n    while True:\n        n += 24 # The least common multiple of 3 and 8\n        if str(n)[-1] == '2':\n            return n\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"8:30\", \"%H:%M\")\n    lesson_duration = timedelta(minutes=45)\n    moving_period = timedelta(minutes=5)\n    total_duration = (lesson_duration * 3) + (moving_period * 2)\n\n    break_start_time = start_time + total_duration\n    return break_start_time.time().strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                if b == a + 5 and c == b - 2 and b == (a + b + c) / 2:\n                    return 100*a + 10*b + c\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    # find greatest common divisor for the first two numbers\n    gcd_first_two = gcd(28, 84)\n    # find gcd for the result and the third number\n    ans = gcd(gcd_first_two, 126)\n\n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n    \n    # Troy has 5 times as many coins as Adam initially.\n    equation1 = Eq(troy, 5 * adam)\n    \n    # After Adam took 24 more coins, he has 1/3 as many coins as Troy.\n    equation2 = Eq(adam + 24, troy / 3)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # Calculate the total number of coins they had initially.\n    total_coins = solutions[troy] + solutions[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total money Hanson had at first\n    x = symbols('x')\n\n    # After spending 1/4 of his money and an additional $3, Hanson is left with (3/4)x - 3\n    money_after_CDs = (3/4)*x - 3\n\n    # Then Hanson spent 3/5 of the remaining money and an additional $6\n    # So he is left with (2/5)(money_after_CDs) - 6\n    money_after_batteries = (2/5)*money_after_CDs - 6\n\n    # According to the problem, he is left with $24 finally\n    equation = Eq(money_after_batteries, 24)\n\n    # Solve the equation for x\n    solutions = solve(equation, x)\n\n    # Return the solution which is the initial amount of money Hanson had\n    return solutions[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        digits = [int(digit) for digit in str(num)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    count = 0\n    for perm in permutations(digits, 3):\n        if sum(perm) == 8 and perm[0] != 0 and perm[2] % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # To ensure 5 green beads, Darrell must consider the worst case scenario.\n    # Draw all blue and white beads first before getting 5 green beads.\n    blue_beads = 5\n    white_beads = 6\n    needed_green_beads = 5\n    \n    # Worst case: drawing all non-green beads first\n    draws_without_green = blue_beads + white_beads\n\n    # Then draw the 5 green beads.\n    total_draws = draws_without_green + needed_green_beads\n    \n    return total_draws\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    fives, tens = symbols('fives tens')\n    bag_cost = symbols('bag_cost')\n    \n    # Jeremy has a total of 57 $5 notes and $10 notes.\n    total_notes_eq = Eq(fives + tens, 57)\n    \n    # After spending 60% of the $10 notes\n    spent_tens = 0.60 * tens\n    \n    # After spending 25% of the $5 notes\n    spent_fives = 0.25 * fives\n    \n    # The amount spent on the bag is the sum of spent $5 notes and $10 notes.\n    amount_spent_eq = Eq(spent_fives * 5 + spent_tens * 10, bag_cost)\n    \n    # After the spending, he was left with twice as many $10 notes as $5 notes.\n    left_notes_eq = Eq(tens - spent_tens, 2 * (fives - spent_fives))\n    \n    # Solve the system of equations\n    solutions = solve((total_notes_eq, amount_spent_eq, left_notes_eq), (fives, tens, bag_cost))\n    \n    return solutions[bag_cost]\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for x in range(6, 55):\n        if x % 5 == 0 and (x + 1) % 7 == 0:\n            return x\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    one_quarter_of_16 = (1 / 4) * 16\n    half_of_missing_number = one_quarter_of_16\n    missing_number = half_of_missing_number * 2\n    return missing_number\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    i = 1\n    while True:\n        if i % 5 == 1 and i % 6 == 1 and i % 11 == 0:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    last_term = 58\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Rachel's and Alice's original amount of candies\n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If Alice gives Rachel 10 pieces, Rachel has 4 more than 3 times Alice's remaining candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Sum the amounts to get the total number of candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    ans = permutations(9, 4)\n\n    return ans\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n    # Inclusion-Exclusion Principle: |A ∪ B| = |A| + |B| - |A ∩ B|\n    # |A ∩ B| = |A| + |B| - |A ∪ B|\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    given_away = 76\n    bought = 65\n\n    initial_stickers = final_stickers - bought + given_away\n\n    return initial_stickers\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # Each group of 4 people will play a single round-robin tournament,\n    # with each person playing against each other once.\n    # The number of matches in a single round-robin tournament with n participants is: n * (n-1) / 2\n    group_games = (4 * (4 - 1) // 2) * 4  # 4 groups, each with 4 participants\n\n    # Calculate the number of games in the knockout round\n    # Top 8, 4 matches; Top 4, 2 matches; Top 2, 1 match.\n    # For the third place, there is 1 match between the two losers of the top 4.\n    knockout_games = 8 - 1 + 1  # Top 8 to Final plus one match for third place\n\n    # Total games are the sum of group stage games and knockout stage games\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days B takes to finish the job alone\n    x = symbols('x')\n\n    # A is twice as good a workman as B, so A takes x/2 days to finish the job alone\n    # A finishes the job in 12 days less than B, so A takes x - 12 days\n\n    # 1/x is the fraction of the job B does in one day\n    # 2/x is the fraction of the job A does in one day, since A is twice as efficient\n    # Together, the fraction of the job they do in one day is 1/x + 2/x = 3/x\n    # Let y be the number of days they take to finish the job together\n\n    # Setting up the equation for when they work together\n    equation = Eq(1/x + 2/x, 1/(x-12))\n\n    # Solving the equation for x (days B takes to finish the job)\n    days_B = solve(equation, x)[0]\n\n    # Days A takes to finish the job\n    days_A = days_B - 12\n\n    # Days they take to finish the job together\n    days_together = 1 / (1/days_A + 1/days_B)\n\n    return days_together\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    x = 0\n    while True:\n        x += 1\n        if x % 3 == 2 and x % 4 == 2 and x % 5 == 2 and x % 7 == 0:\n            return x\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('013456789'):  # 0 cannot be the leading digit, so it's omitted from leading\n        number = '8' + ''.join(p)  # '8' is the leading digit\n        if all(int(number[:i]) % i == 0 for i in range(1, 10)):\n            return int(number)\n        \nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    tomatoes_after_giving = 36 - 7\n    matthew_original_tomatoes = tomatoes_after_giving - 7\n    return matthew_original_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10  # televisions per day\n    efficiency_increase = 0.50  # 50%\n    new_rate = original_rate * (1 + efficiency_increase)\n    return new_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n\n    a = 2012\n    b = 1274\n\n    # The problem states that a = D*q1 + R and b = D*q2 + R for some q1 and q2\n    # Thus, a - b = D*(q1 - q2). Since R is the same for both numbers,\n    # It's the greatest common divisor of (a-b) which is divisible by D.\n    D = gcd(a, b)\n\n    # We know that R < D and since we're looking for the maximum value of (D - R),\n    # We want to minimize R. R can go down to zero (e.g., if both numbers are divisible by D directly)\n    R = 0\n\n    # Therefore, the largest possible value of D - R is simply D because R is minimized to zero.\n    return D - R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    # Let's define the number of rabbits as r and the number of ducks as d\n    for r in range(8):  # As there are 7 animals in total, rabbits can be from 0 to 7\n        d = 7 - r       # If there are r rabbits, there must be 7-r ducks\n        if 4*r + 2*d == 20:  # Rabbits have 4 legs and ducks have 2 legs\n            return r  # We return the number of rabbits when the total legs add up to 20\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import sqrt\n    # Given that 15 and 21 are factors of the number, their least common multiple \n    # (LCM) is a multiple of the number\n    factor1 = 15  # 3 * 5\n    factor2 = 21  # 3 * 7\n    lcm = factor1 * factor2 // 3  # LCM(15, 21) = 105\n\n    # A positive integer with exactly 8 factors is either a product of a cubed prime\n    # and another prime, or the seventh power of a prime. Since we know two of the\n    # factors are 15 and 21, which are not powers of a single prime, the number must \n    # be a product of two primes, one of which is cubed.\n\n    # We take the cubed root of the LCM to find one possible prime factor.\n    possible_prime_factor = int(round(lcm ** (1/3)))\n\n    # Check which one gives us a number with exactly 8 factors.\n    for prime_factor in [factor1 // 3, factor2 // 3, possible_prime_factor]:\n        candidate_number = prime_factor ** 3 * (lcm // prime_factor)\n        factors = set()\n        for i in range(1, int(sqrt(candidate_number)) + 1):\n            if candidate_number % i == 0:\n                factors.add(i)\n                factors.add(candidate_number // i)\n        if len(factors) == 8:\n            # Found the number with exactly 8 factors, now calculate the sum of factors\n            return sum(factors)\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # last digit of powers of 4: 4, 6, 4, 6, ... (repeats every 2)\n    # last digit of 4^2009 is the same as the last digit of 4^1 which is 4\n\n    # last digit of powers of 6 is always 6\n\n    # last digit of a sum is the last digit of the sum of their last digits\n    ans = (4 + 6) % 10\n\n    return ans\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 32):\n        for five_gram_weights in range(0, 13):\n            if 2 * two_gram_weights + 5 * five_gram_weights == 63:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_of_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_two = total_height_of_six - total_height_of_four\n    average_height_of_two = total_height_of_two / 2\n    \n    return average_height_of_two\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Initialize a dictionary to store the winning (True) or losing (False) state for each number\n    state = {}\n    \n    # Define the choices each player can make\n    choices = [1, 3, 4, 6]\n\n    # Base case: 0 is a losing state as there are no numbers to write\n    state[0] = False\n\n    # Calculate the state for each number from 1 to 52\n    for i in range(1, 53):\n        # Assume the current state is losing\n        state[i] = False\n        # Check if there is a move that leads to a losing state for the opponent\n        for choice in choices:\n            # If the move is valid and leads to a losing state for the opponent\n            if i - choice >= 0 and not state[i - choice]:\n                # Update the current state to winning\n                state[i] = True\n                break\n\n    # Determine if Betty (going first) wins when starting with 52 numbers\n    if state[52]:\n        # Betty wins if she goes first. Now find the strategy:\n        # Look for choices that lead to a losing state for the opponent\n        winning_moves = []\n        for choice in choices:\n            if 52 - choice >= 0 and not state[52 - choice]:\n                winning_moves.append(choice)\n        # Choose the smallest winning move to draw out the game\n        ans = ('First', min(winning_moves))\n    else:\n        # Betty should go second\n        ans = ('Second', None)\n\n    return ans\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    rex_score = 66\n    questions_attempted = total_questions - 1\n\n    # Assume that all attempted questions were correct, calculate the maximum points\n    max_points = questions_attempted * points_correct\n\n    # Each incorrect answer reduces the score by 4 + 2 = 6 points\n    # compared to the assumption that it was correct\n    incorrect_reduction = points_correct - points_incorrect\n\n    # Calculate the number of incorrect answers\n    incorrect_answers = (max_points - rex_score) // incorrect_reduction\n\n    # Subtract incorrect answers from total questions attempted to get correct answers\n    correct_answers = questions_attempted - incorrect_answers\n    \n    return correct_answers\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    given_to_grace = (5/7) * total_juice\n    remaining_after_grace = total_juice - given_to_grace\n    given_to_evelyn = (1/9) * remaining_after_grace\n    remaining_juice = remaining_after_grace - given_to_evelyn\n    return remaining_juice\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # Calculating the sum of the series: 1+2+3...+19+20\n    sum_series = sum(range(1, 21))\n    \n    # The series is symmetric around 20, hence the sum is doubled\n    # But we need to subtract the middle term 20 since it's counted twice\n    total_sum = 2 * sum_series - 20\n    \n    return total_sum\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n\n    # There are 4 positions to fill with 5 different colors\n    # First position can be filled with any of the 5 colors\n    # Second position can be filled with any of the remaining 4 colors\n    # Third position with any of the remaining 3 colors\n    # Fourth position with any remaining 2 colors\n    # This is a permutation problem where order matters and we can use factorial\n    ans = factorial(5) // factorial(5 - 4)\n\n    return ans\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original_age = 10 * tens + ones\n            new_age = 10 * ones + tens + 1\n            if new_age * 2 == original_age:\n                return original_age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    for meatballs_per_student in range(1, 21):  # Start from 1 since each student gets at least one meatball\n        total_students_before = (20 + meatballs_per_student) // meatballs_per_student\n        total_students_after = (10 + meatballs_per_student) // meatballs_per_student\n\n        # If adding one more student results in 10 meatballs left\n        if total_students_before == total_students_after - 1:\n            return meatballs_per_student\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    number = 9.32\n    increase_by = number * (1/10)\n    ans = number + increase_by\n    return ans\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = symbols('total_questions')\n    first_day = total_questions / 2 + 7\n    remaining_after_first = total_questions - first_day\n    second_day = remaining_after_first / 2 - 5\n    remaining_after_second = remaining_after_first - second_day\n\n    equation = Eq(remaining_after_second, 23)\n\n    total = solve(equation, total_questions)\n\n    return total[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n\n    if fraction_value > decimal_value:\n        ans = \"4/25 is larger\"\n    else:\n        ans = \"0.17 is larger\"\n\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_water = 1000  # in ml\n    poured_water = 200 * 3  # in ml\n    remaining_water = total_water - poured_water\n    return remaining_water\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let the first term be a1 and the common difference be d\n    # The sum of the first n terms of an arithmetic sequence is given by:\n    # S_n = n/2 * (2*a1 + (n-1)*d)\n    # Now we have two equations based on the given data:\n    # S_8 = 8/2 * (2*a1 + 7*d) = 32\n    # S_22 = 22/2 * (2*a1 + 21*d) = 44\n    # We need to find S_15\n    \n    # From S_8 we can deduce that 4 * (2*a1 + 7*d) = 32 => a1 + 7*d/2 = 8 => 2*a1 + 7*d = 16 -- Equation (1)\n    # From S_22 we can deduce that 11 * (2*a1 + 21*d) = 44 => a1 + 21*d/2 = 4 => 2*a1 + 21*d = 8 -- Equation (2)\n    \n    # Subtracting Equation (1) from Equation (2) gives:\n    # (2*a1 + 21*d) - (2*a1 + 7*d) = 8 - 16\n    # => 14d = -8\n    # => d = -8/14 = -4/7\n    \n    # Using the value of d to find a1 from Equation (1):\n    # 2*a1 + 7*(-4/7) = 16\n    # 2*a1 - 4 = 16\n    # 2*a1 = 20\n    # a1 = 10\n    \n    # Now we have a1 and d, we can find S_15:\n    # S_15 = 15/2 * (2*10 + (15-1)*(-4/7))\n    # S_15 = 15/2 * (20 - 56/7)\n    # S_15 = 15/2 * (140/7 - 56/7)\n    # S_15 = 15/2 * (84/7)\n    # S_15 = 15/2 * 12\n    # S_15 = 15 * 6\n    # S_15 = 90\n    \n    return 90\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    # Given:\n    # 10th term, a10 = 23\n    # 15th term, a15 = 38\n    a10 = 23\n    a15 = 38\n    n10 = 10\n    n15 = 15\n\n    # Common difference d = (a15 - a10) / (n15 - n10)\n    d = (a15 - a10) / (n15 - n10)\n    \n    # 12th term, a12 = a10 + (n12 - n10) * d\n    # Where n12 is 12\n    n12 = 12\n    a12 = a10 + (n12 - n10) * d\n\n    return a12\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the flow rates of A, B, and C as a, b, and c respectively.\n    a, b, c = symbols('a b c')\n    \n    # We have the following equations:\n    # When A and C are turned on, 18 tons of water are from A -> A's flow rate * time = 18 tons\n    # When B and C are turned on, 27 tons of water are from B -> B's flow rate * time = 27 tons\n    # B's flow rate is twice A's -> b = 2a\n    \n    # Since the times are the same when either pair of pipes are turned on, we can set up the equations:\n    equation1 = Eq(a + c, 18)\n    equation2 = Eq(b + c, 27)\n    equation3 = Eq(b, 2 * a)\n    \n    # We need to solve for a, b, and c\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    # Once we have a, b, c, we can find the total amount of water by adding the flow rates together and equating it to the total time taken to fill the pool.\n    # Since b = 2a and c = 18 - a, the equation becomes total pool water = (a + 2a + (18 - a)) * time\n    # Since time is just a coefficient, we can take the pool water to be a + 2a + (18 - a)\n    total_water = a + 2 * a + (18 - a)\n    \n    # Computing the final result\n    ans = total_water.subs(solutions)\n\n    return ans\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    return int(250**0.5)\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 10 + 20 + 30\n    total_correct = (10 * 0.2) + (20 * 0.8) + (30 * 0.9)\n    overall_percentage = (total_correct / total_problems) * 100\n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Area of each large brick in square decimeter\n    large_brick_area = 6 * 6  # since side length is 6 decimeters\n    # Total area covered by all large bricks\n    total_area = large_brick_area * 80  # since he needs 80 of them\n    \n    # Area of each small brick in square decimeter, converting from square centimeter\n    small_brick_area = 64 / 100  # as 1 decimeter is 10 centimeters\n    \n    # Number of small bricks required\n    num_small_bricks = total_area / small_brick_area\n    \n    return int(num_small_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    bottle, bag = symbols('bottle bag')\n\n    # Setup the equations\n    equation1 = Eq(2 * bottle + 3 * bag, 2.55)  # the total cost equation\n    equation2 = Eq(bottle, bag + 0.15)  # the difference in cost equation\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (bottle, bag))\n\n    return solutions[bag]\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    roses_original, daisies_original, months, add_per_month = symbols('roses_original daisies_original months add_per_month')\n\n    # Define the equations based on the problem statement\n    total_plants_original = Eq(roses_original + daisies_original, 300)\n    total_roses_future = Eq(roses_original + add_per_month * months, 280)\n    total_daisies_future = Eq(daisies_original + add_per_month * months, 180)\n\n    # Solve the system of equations\n    solutions = solve((total_plants_original, total_roses_future, total_daisies_future), (roses_original, daisies_original, months, add_per_month))\n\n    return solutions[roses_original]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 5, 7, 8]\n    greatest_number = 0\n\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0 and number > greatest_number:\n            greatest_number = number\n\n    return greatest_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    # Let x be the number of boys, then the number of girls is x + 30\n    # According to the problem, x + (x + 30) = total_pupils\n    # Simplify the equation: 2x + 30 = 500\n    # Solve for x: 2x = 470\n    x = (total_pupils - 30) // 2\n    # The number of girls is x + 30\n    num_girls = x + 30\n    return num_girls\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    for i in range(2, int(91 ** 0.5) + 1):\n        if 91 % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    total_students = 0\n    boys_more_than_girls = 31\n    layer = 0\n    \n    while True:\n        boys = (layer * 2 + 1) ** 2\n        if layer == 0:\n            girls = 0\n        else:\n            girls = ((layer * 2 - 1) ** 2)\n        if boys - girls == boys_more_than_girls:\n            total_students = boys + girls\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    from math import log10\n    # Calculate the log of A\n    logA = 2018 * log10(4) + 2018 * log10(25)\n    # The number of digits is the integer part of logA plus 1\n    num_digits = int(logA) + 1\n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    players = 5\n    team_size = 3\n    return comb(players, team_size)\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30 / 100\n    cost_price = selling_price / (1 + profit_percent)\n    \n    new_profit = 5000\n    new_profit_percent = (new_profit / cost_price) * 100\n    \n    return new_profit_percent\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of apples Mr. Aziz had initially.\n    x = symbols('x')\n\n    # Equation representing the situation:\n    # He sold 1/5 of the apples on Monday, which is x/5.\n    # He sold 80 apples on Tuesday.\n    # He was left with 30% of the apples, which is 0.3 * x.\n    # The apples he sold plus the apples he was left with should equal the initial amount of apples.\n    # (x/5) + 80 + (0.3 * x) = x\n\n    # Rearrange the equation to isolate x on one side:\n    equation = Eq((x / 5) + 80 + (0.3 * x), x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Calculate the number of apples he had in the end which is 30% of x\n    apples_in_the_end = 0.3 * solution[0]\n\n    return apples_in_the_end\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x in range(1, 14):\n        for y in range(x+1, 14):  # start from x+1 to ensure y > x\n            for z in range(y+1, 14):  # start from y+1 to ensure z > y\n                if x + y + z == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n    \n    total_people = people_in_front_of_emily + danny_and_emily + people_behind_danny\n    \n    return total_people\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the first even number, then the numbers are x, x+2, x+4, x+6, x+8, x+10, x+12\n    x = symbols('x')\n    fourth_number = x + 6\n    sum_first_seventh = x + (x + 12)\n    \n    # Given that the fourth number is larger than one-third of the sum of the first and seventh numbers by 6\n    equation = Eq(fourth_number, (sum_first_seventh / 3) + 6)\n    \n    # Solve the equation to get x\n    solution_x = solve(equation, x)[0]\n    \n    # Get the sum of the seven consecutive even numbers\n    total_sum = sum([solution_x + 2*i for i in range(7)])\n    \n    return total_sum\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    length_of_wood = 52\n    number_of_pieces = 2\n    length_per_piece = length_of_wood / number_of_pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    meters = km * 1000\n    return meters\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    sum_remaining = total_sum - 180\n    average_remaining = sum_remaining / 8\n    return average_remaining\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Declaring symbols for the number of orchids\n    purple, yellow, white, red = symbols('purple yellow white red')\n    \n    # Ben has twice as many purple orchids as yellow orchids\n    equation1 = Eq(purple, 2 * yellow)\n    \n    # Ben has 3 times as many yellow orchids as white orchids\n    equation2 = Eq(yellow, 3 * white)\n    \n    # There are 38 red and white orchids\n    equation3 = Eq(red + white, 38)\n    \n    # 28 orchids are red\n    equation4 = Eq(red, 28)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # Total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue = 80\n    red = 2 * blue\n    green = blue + 45\n    total_markers = red + blue + green\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    # Since trees are planted at each end, number of segments between trees is one less than number of trees\n    trees_per_side = (length_of_highway // distance_between_trees) + 1\n    \n    # Total trees = trees on one side * 2 sides\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    # First odd number is 1\n    first_odd_number = 1\n    # Common difference in an arithmetic sequence of odd numbers is 2\n    common_difference = 2\n    # To find the 20th odd number, use the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * difference\n    nth_odd_number = first_odd_number + (20 - 1) * common_difference\n    \n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place after overtaking 5 cars,\n    # that means there was one car that the Ferrari driver did not overtake.\n    # Since the Ferrari driver was initially in the last place and finished second,\n    # we add the 5 overtaken cars and the 1 car not overtaken,\n    # plus the Ferrari driver's car itself to get the total.\n    total_cars = 5 + 1 + 1\n    return total_cars\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    johnny = 194\n    amber = 5 * johnny\n    remaining = 65\n    \n    total = symbols('total')\n    equation = Eq(johnny + amber + remaining, total)\n    \n    solution = solve(equation, total)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    # Calculate the difference in age between Eddie and Mike\n    age_difference = 48 - 8\n    \n    # When Eddie is 18, we add the age difference to find Mike's age\n    mikes_age_when_eddie_is_18 = 18 + age_difference\n    \n    return mikes_age_when_eddie_is_18\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price_difference = 8.01\n    amy_book_price = lily_book_price + amy_book_price_difference\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    interior_angle = ((sides - 2) * 180) / sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 21):\n        total_sum += int('5' * i)\n    return total_sum % 10000  # To get the last 4 digits\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(y, x):\n    # It takes 2 men 3 days to build 1 wall.\n    # Therefore, it takes 1 man 6 days to build 1 wall.\n    days_for_1_man_to_build_1_wall = 2 * 3\n    \n    # So, it would take 1 man 6x days to build x walls.\n    days_for_1_man_to_build_x_walls = days_for_1_man_to_build_1_wall * x\n    \n    # Now, if y men are working to build x walls,\n    # the total days needed would be (6x)/y.\n    days_needed_for_y_men_to_build_x_walls = days_for_1_man_to_build_x_walls / y\n    \n    return days_needed_for_y_men_to_build_x_walls\n\nans = solution(6, 4)  # Replace with any values for y (number of men) and x (number of walls)"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men = total_people * 0.25\n    women = total_people * (1/5)\n    children = total_people - men - women\n    return int(children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let x be the number of checked shirts\n    # Then 7x is the number of white shirts\n    # The total number of shirts sold is x + 7x = 72\n    # So we solve the equation 8x = 72 to find the number of checked shirts\n    \n    checked_shirts = 72 // 8\n    white_shirts = 7 * checked_shirts\n    \n    return white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for number in range(1, 100):\n        if number % 3 == 2 and number % 4 == 3 and number % 5 == 4:\n            return number\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for num in range(999, 100, -1):\n        if num % 2 == 1 and num % 9 == 0 and (num // 10) % 10 % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    # List of given numbers\n    numbers = [72, 60, 48, 36, 24, 12]\n    \n    # Calculate the sum of numbers\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Without the actual picture or a description of the pattern, it's impossible to provide a solution.\n    # Please provide the picture or a detailed description of the pattern.\n    raise NotImplementedError(\"Pattern description or image required to solve the problem\")\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    white = 8\n    red = 7\n    green = 5\n    # Applying the Pigeonhole Principle, we must consider the worst-case scenario. \n    # In the worst-case, we could pick all balls of one color and nearly all balls of another \n    # color without getting two balls of the same color.\n\n    # To ensure we get 2 balls of the same color, we must draw one more than the sum of full counts\n    # from two different colors (because we could be unlucky and pick all different colors until then).\n    draws = white + red + 1  # We use white and red because they have the most balls.\n\n    return draws\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    ans = 42 // 6\n    return ans\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq(girls / 3, boys / 2)\n    equation2 = Eq(girls + boys, 390)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are (remainder, modulus)\n    congruences = [(3, 4), (4, 5), (5, 6)]\n\n    # Solve the congruences using the Chinese Remainder Theorem\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(map(int, str(m))) == 5 * sum(map(int, str(m + 1))):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    jan_to_apr = 300 * 4\n    may_to_jul = 250 * 3\n    aug_to_sep = 750\n    oct_to_dec = 300 * 3\n\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = three_quarters_of_number * 4 / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    total_kg_per_5_days = 24\n    kilograms_per_day = total_kg_per_5_days / 5\n    total_kg_per_8_5_days = kilograms_per_day * 8.5\n    return total_kg_per_8_5_days\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    overall_drop = temperature_bottom - temperature_top\n    return overall_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age_now = 10\n    father_age_future = 70\n    # When Tom reaches his father's current age...\n    # Tom's age + (father's current age - Tom's current age) = father's age at that time\n    # We solve for father's current age using the equation:\n    father_age_now = father_age_future - (father_age_future - tom_age_now)\n    return father_age_now\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9/20\n    women_percentage = 30/100\n\n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n\n    children_count = total_passengers - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jordan, evie, emily = symbols('jordan evie emily')\n    \n    equation1 = Eq(jordan, 3* emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n    \n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    train_departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    train_journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n    \n    arrival_time = train_departure_time + train_journey_duration + walk_duration\n\n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    for N in range(200):\n        if sum(int(digit) for digit in format(N, 'b4')) == 5 and \\\n           sum(int(digit) for digit in format(N, 'b6')) == 8 and \\\n           sum(int(digit) for digit in format(N, 'b8')) == 9:\n            ans.append(N)\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    choices_for_first_digit = 2 # 2 or 3, can't be 0 for a three-digit number\n    choices_for_second_digit = 3 # 0, 2, or 3\n    choices_for_third_digit = 3 # 0, 2, or 3\n\n    total_combinations = (choices_for_first_digit * \n                          choices_for_second_digit * \n                          choices_for_third_digit)\n\n    return total_combinations\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_of_six_hotdogs = 1.10\n    cost_of_twelve_hotdogs = cost_of_six_hotdogs * 2\n    return cost_of_twelve_hotdogs\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # in pence\n    total_money = 200  # £2 is 200p (since £1 = 100p)\n\n    num_bags = total_money // price_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    ans = 8.3 * 40\n    return ans\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chip, dale = symbols('chip dale')\n\n    equation1 = Eq(chip - 14, dale + 14)\n    equation2 = Eq(chip + dale, 124)\n\n    solutions = solve((equation1, equation2), (chip, dale))\n\n    return solutions[chip]\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n\n    # Calculate the permutations with repetition\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    return ans\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for number in range(2, 100, 2):  # Even numbers less than 100\n        if number % 4 == 0 and number % 3 == 0:  # Multiple of four and three\n            if int(number**0.5)**2 == number:  # Square number check\n                return number\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(7, 54, 5):\n        if (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "def solution():\n    from sympy import primerange\n\n    # All primes below 51\n    primes = list(primerange(1, 51))\n    \n    # Since we are looking for the smallest number of primes that sum to 51,\n    # we should start checking from the largest primes downwards.\n    primes.sort(reverse=True)\n\n    sum_of_primes = 0\n    prime_count = 0\n    for prime in primes:\n        while sum_of_primes + prime <= 51:\n            sum_of_primes += prime\n            prime_count += 1\n            if sum_of_primes == 51:\n                return prime_count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    return 8 * 'x'\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbol x for our unknown value in the equation\n    x = symbols('x')\n\n    # Set up the equation according to the given problem\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    # Find the solution to the equation\n    solution = solve(equation, x)\n\n    # Return the first (and only) solution\n    return solution[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    trays = 4\n    eggs_per_tray = 26\n\n    total_eggs = trays * eggs_per_tray\n\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (40 - i) for i in range(40))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for penpals_3_pages in range(total_penpals + 1):\n        penpals_4_pages = total_penpals - penpals_3_pages\n        if penpals_3_pages * 3 + penpals_4_pages * 4 == total_pages:\n            return penpals_3_pages\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for num in range(100, 1000):\n        if num // 24 == 36 and num % 24 == 0:\n            return num\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apple_pie_kg = 750 / 1000\n    apple_juice_kg = 1025 / 1000\n\n    remaining_apples_kg = total_apples_kg - (apple_pie_kg + apple_juice_kg)\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 15\n\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    weeks = 4\n\n    growth_per_week = (final_height - initial_height) / weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # To guarantee 3 different colored balls, we need to consider the worst-case scenario.\n    # If we draw balls one by one, we could get all 5 balls of the same color first.\n\n    # So we could draw 5 balls of one color (say red),\n    # then we could draw another 5 balls of another color (say white).\n    # At this point, we have 10 balls, and they could all be red and white.\n\n    # The next ball we draw, no matter what, will guarantee us to have the third color (yellow).\n    # So the minimum number of balls we must draw to ensure 3 different colors is 11.\n\n    ans = 5 + 5 + 1\n    return ans\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    x, y = symbols('x y')\n\n    # Equation representing the sum of lengths\n    equation1 = Eq(x + y, 12.75)\n    \n    # Equation representing one piece is twice as long as the other\n    equation2 = Eq(x, 2 * y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    position_from_left = 14\n    books_to_the_right = 6\n    total_books = position_from_left + books_to_the_right\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1  # Considering the original volume as a unit\n    new_volume = (1/2) ** 3  # Each dimension is halved\n    reduced_content_weight = original_volume * new_volume * 1200  # Content weight is proportional to volume\n    return reduced_content_weight\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the number of coins each received in class\n    x = symbols('x')\n    \n    # after receiving the coins in the class\n    # Gigi's amount is 120 + x\n    # Lily's amount is 24 + x\n    \n    # Gigi has 3 times the amount of Lily\n    equation = Eq(120 + x, 3 * (24 + x))\n    \n    # solve the equation for x\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import primerange\n\n    # Create a set of prime numbers up to 20\n    primes = set(primerange(1, 21))\n    # Count the total numbers from 1 to 20\n    total_numbers = set(range(1, 21))\n\n    # Find the non-prime numbers by subtracting primes from the total set\n    non_primes = total_numbers - primes\n\n    # The answer is the number of non-prime cards\n    ans = len(non_primes)\n\n    return ans\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    age_diff = 41 - 14\n\n    for brian_age in range(15, age_diff):\n        father_age = brian_age + age_diff\n        if str(brian_age).zfill(2) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    result = 8386 // 14\n    return result\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Assuming we can boil only one egg at a time\n    time_to_boil_one_egg = 5\n    total_eggs = 3\n\n    # Total time required to boil 3 eggs one after another\n    total_time = time_to_boil_one_egg * total_eggs\n\n    return total_time\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    capacity = 6\n    cabins = (students + capacity - 1) // capacity\n    return cabins\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough = 11160  # Convert 11.16kg to grams\n    cookie_dough = 45 * 240  # Dough used for cookies in grams\n    brownie_dough = 150 * 2  # Dough used for brownies in grams\n\n    used_dough = cookie_dough + brownie_dough  # Total used dough in grams\n\n    remaining_dough = total_dough - used_dough  # Remaining dough in grams\n    remaining_dough_kg = remaining_dough / 1000  # Convert grams to kilograms\n\n    return remaining_dough_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    calories_today = symbols('calories_today')\n\n    inequality = calories_today < calories_yesterday\n\n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n\n    # Inverse of the second day: adding 2 before doubling\n    second_day = (remaining_biscuits + 2) * 2\n\n    # Inverse of the first day: adding 4 before doubling\n    initial_biscuits = (second_day + 4) * 2\n    \n    return initial_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    bob_money = 100\n    daily_change = [5, -8]\n\n    for day in range(total_days):\n        bob_money += daily_change[day % 2]\n    \n    return bob_money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    \n    # Since we want the 1004th number, we subtract 1 to get the correct index\n    index = (1004 - 1) % pattern_length\n\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    num_children = 5\n    wine_gums_per_child = total_wine_gums // num_children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be 'a' and the common difference be 'd'.\n    a, d, n = symbols('a d n')\n\n    # Create equations based on the given information\n    # Sum of the first 4 terms: a + (a + d) + (a + 2d) + (a + 3d) = 124\n    equation1 = Eq(4*a + 6*d, 124)\n\n    # Sum of the last 4 terms: S_n - S_(n-4) = 156\n    # S_n - (a + (n-1)d) - (a + (n-2)d) - (a + (n-3)d) - (a + (n-4)d) = 156\n    equation2 = Eq(4*a + (4*n-10)*d, 156)\n\n    # The sum of all the numbers is 210\n    # (n/2) * (2*a + (n-1)*d) = 210\n    equation3 = Eq(n*(2*a + (n-1)*d)/2, 210)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (a, d, n))\n\n    # Find the value of 'n'\n    for sol in solutions:\n        # Check if the solution for 'n' is positive\n        if sol[n] > 0:\n            return sol[n]\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n    number_of_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_sequence = (number_of_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num_friends, chocolates = symbols('num_friends chocolates')\n    eq1 = Eq(num_friends * 18 + 41, chocolates)\n    eq2 = Eq(num_friends * 23, chocolates - 34)\n\n    solutions = solve((eq1, eq2), (num_friends, chocolates))\n\n    chocolates_left = solutions[chocolates] - solutions[num_friends] * 20\n\n    return chocolates_left\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    money_spent_on_book = total_money * 0.15\n    money_left_after_book = total_money - money_spent_on_book\n    money_spent_on_dvd = money_left_after_book * 0.30\n    money_left = money_left_after_book - money_spent_on_dvd\n    \n    return money_left\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    ans = 5992 / 7\n    return ans\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = (1 + 2 - 3 + 4 + 5 + 6 - 7 + 8 + 9 + 10 - 11 + 12 + 13 + 14 - 15 + 16 + 17 + 18 - 19 + 20 +\n           21 + 22 - 23 + 24 + 25 + 26 - 27 + 28 + 29 + 30 - 31 + 32 + 33 + 34 - 35 + 36 + 37 + 38 -\n           39 + 40 + 41 + 42 - 43 + 44 + 45 + 46 - 47 + 48 + 49 + 50 - 51 + 52 + 53 + 54 - 55 + 56 +\n           57 + 58 - 59 + 60 + 61 + 62 - 63 + 64 + 65 + 66 - 67 + 68 + 69 + 70 - 71 + 72 + 73 + 74 -\n           75 + 76 + 77 + 78 - 79 + 80 + 81 + 82 - 83 + 84 + 85 + 86 - 87 + 88 + 89 + 90 - 91 + 92 +\n           93 + 94 - 95 + 96 + 97 + 98 - 99 + 100)\n    return ans\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Inequality: Mulan's push-ups (M) > Best boy soldier's push-ups (BBS)\n    # BBS = 50, so Mulan's push-ups (M) > 50\n    return 'M > 50'\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown = 22\n    balloons_burst = 3\n    balloons_remaining = total_balloons_needed - (balloons_blown - balloons_burst)\n    return balloons_remaining\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    # Generate all possible 3-digit numbers.\n    numbers_3_digits = range(100, 1000)\n    \n    # Initialize list to store potential answers that satisfy 3 conditions.\n    potential_answers = []\n    \n    # Loop through all 3-digit numbers to check the given conditions.\n    for number in numbers_3_digits:\n        # Count the number of true statements.\n        true_statements = 0\n        \n        # Check multiple of 27 (Student A condition).\n        if number % 27 == 0:\n            true_statements += 1\n        \n        # Check multiple of 7 (Student B condition).\n        if number % 7 == 0:\n            true_statements += 1\n        \n        # Check sum of digits equals 17 (Student C condition).\n        if sum(int(digit) for digit in str(number)) == 17:\n            true_statements += 1\n        \n        # Check if it's a perfect square (Student D condition).\n        if int(number ** 0.5) == number ** 0.5:\n            true_statements += 1\n        \n        # Check if it's a factor of 89100 (Student E condition).\n        if 89100 % number == 0:\n            true_statements += 1\n        \n        # If exactly three statements are true, add to potential answers.\n        if true_statements == 3:\n            potential_answers.append(number)\n    \n    # The solution is the one that is common among possible answers.\n    if potential_answers:\n        return potential_answers[0]\n    else:\n        # Return a default value if no such block number satisfies the condition,\n        # Assuming there is at least one valid solution based on question's context.\n        return None\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    games_played = 47\n    total_games = (teams - 1)  # In a knockout tournament, the number of games is one less than the number of teams\n    games_remaining = total_games - games_played\n    return games_remaining\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    liters_per_pail = 4\n    liters_left = 7\n\n    original_volume = (pails_filled * liters_per_pail) + liters_left\n\n    return original_volume\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 11) and (ones % 2 != 0):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    girls_to_boys_ratio = 7 / 9\n    more_boys = 16\n\n    # Let's the number of girls be 7x and boys be 9x\n    # According to the problem 9x - 7x = 16\n    x = more_boys / (9 - 7)\n\n    # Total number of pupils is girl's count plus boy's count\n    total_pupils = 7 * x + 9 * x\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    # Calculate the total sum without errors\n    correct_sum = sum(range(1, 37 * 3 + 1, 3))\n    \n    # Calculate the difference, which will be twice the wrong number \n    # (as adding becomes subtracting, it impacts the sum by twice the number)\n    difference = correct_sum - 2011\n    \n    # The mistaken number\n    mistaken_number = difference // 2\n    \n    # Find the position (1-indexed)\n    position = (mistaken_number - 1) // 3 + 1\n    \n    return position\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    return circumference // interval\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # We need to find the minimum value for the child with the most candies\n    # First, each child should get at least one piece\n    # Second, no two children can get the same number of pieces\n    # This means we need to distribute candies in an increasing order\n    \n    # Start by giving each child one candy\n    candies_left = 88 - 8  # 8 children each with one candy initially\n\n    # Now distribute the remaining candies in increasing order\n    # child 1: 1 candy, child 2: 2 candies, ..., child 8: 8 candies\n    # But child 2 cannot have just 2 candies, because then child 1 and child 2 have the same amount\n    # So we must further distribute starting from child 2 as if there is an invisible child 0 with 0 candies\n    for i in range(7, 0, -1):\n        # Give the i-th child (i+1)-th candies\n        candies_left -= i\n\n    # Now, all candies left can be given to the last child\n    # Number of candies for the last child = initial number of candies + remaining candies\n    max_candies_child = 8 + candies_left\n\n    return max_candies_child\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_cake = 10 / 12\n    shortcakes_made = 25 / milk_per_cake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Since the numbers are consecutive, let the middle number be x.\n    # Then the 5 numbers are x-2, x-1, x, x+1, x+2\n    # The sum of these numbers is 5x because the -2 and +2, -1 and +1 cancel out\n    # We have the equation 5x = 160\n    total_balls = 160\n    x = total_balls // 5\n    \n    # The student with the most balls has x+2 balls\n    most_balls = x + 2\n    \n    return most_balls\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds_digit in range(1, 10):     # Hundreds digit must be from 1 to 9\n        for ones_digit in range(10):        # Ones digit must be from 0 to 9\n            M = hundreds_digit * 100 + ones_digit  # Tens digit is 0\n            S = hundreds_digit + ones_digit         # Sum of the digits\n\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1]) # Reverse the digits of M\n                return reversed_M // S         # Return the result of division\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 2 * 100  # convert 2 meters to centimeters\n    piece_length_cm = 6\n    num_pieces = stick_length_cm // piece_length_cm\n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n    ways_of_selecting = comb(total_balls, balls_to_select)\n    \n    return ways_of_selecting\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    from sympy import symbols, Rational, solve\n    \n    a, b, c = symbols('a b c', integer=True)\n    eq = 1 + 1 / (a + 1 / (b + 1 / c))\n    \n    # Set the equation to be equal to the fraction we want to match\n    equation = eq - Rational(13, 10)\n    \n    # Solve the equation with respect to a, b, and c\n    solutions = solve(equation)\n    \n    # Go through the list of solutions to find the one with all whole numbers\n    for sol in solutions:\n        if all(isinstance(val, (int, Integer)) for val in sol.values()):\n            return sol[a] + 2 * sol[b] + 3 * sol[c]\n\n    return None  # if no solution is found\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    exponent = 30\n    ones_digit_sequence = [base % 10]  # Initial ones digit for 8^1\n\n    # Since the ones digit of powers of 8 repeat every 4, we find the pattern\n    for _ in range(3):  # we already added the first digit, so we iterate 3 more times\n        ones_digit_sequence.append((ones_digit_sequence[-1] * base) % 10)\n\n    # The ones digit for 8^30 will be the same as the 30 % 4th element in the sequence\n    # Because the ones digit sequence of the power of 8 repeats every 4 powers\n    ones_digit = ones_digit_sequence[(exponent % 4) - 1]  # index is off by 1\n\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n    days = total_pages / pages_per_day\n    return days\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_wrong = -3\n    \n    # If Justin answers all questions correctly, he will get total points of:\n    max_points = total_questions * points_correct\n    \n    # Let the number of wrong answers be x\n    # Total points will be max_points - (points_wrong * x + points_correct * x)\n    # Because for each wrong answer, he loses points_correct and gets additional points_wrong\n    \n    # Let's find x such that Justin will end up with 52 points\n    for x in range(total_questions + 1):\n        if max_points - (points_wrong * x + points_correct * x) == 52:\n            correct_answers = total_questions - x\n            return correct_answers\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    # Initialize variables\n    total_peaches = 100\n    max_days = 0\n    \n    # Calculate the maximum days such that the monkey can eat\n    # a different number of peaches each day and still finish\n    # eating 100 peaches\n    for day in range(1, total_peaches+1):\n        if day*(day+1)//2 > total_peaches:\n            # Since the sum of an arithmetic sequence where the\n            # difference between each consecutive number is 1\n            # is given by n(n+1)/2, we need to find the largest\n            # n such that n(n+1)/2 is less than or equal to the\n            # number of peaches\n            max_days = day - 1\n            break\n\n    return max_days\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    a1 = 10  # first term\n    an = 155  # last term\n    d = 5  # common difference\n    \n    # Number of terms in the arithmetic sequence\n    n = ((an - a1) // d) + 1\n    \n    # Sum of arithmetic sequence formula: S_n = n/2 * (a1 + a_n)\n    sum_of_sequence = n * (a1 + an) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n\n    ans = right_side / left_side\n\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(girls, boys + 12)  # Girls planted 12 more trees than boys\n    equation2 = Eq(boys + girls, 100)  # Total number of trees planted is 100\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = sum(number for number in range(1, 21) if number % 6 == 1)\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_mass = 600\n    sugar_concentration = 0.48\n    sugar_mass = total_mass * sugar_concentration\n    water_mass = total_mass - sugar_mass\n    return water_mass\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    return 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Since Tom takes 4 stones from Stack B, Stack A is unchanged, and Stack B has 16 stones left.\n    # For Jerry to ensure a win, he must aim to leave the piles in such a state that Tom is forced to take the last stone.\n    # Jerry can take stones to make both stacks have the same number of stones, because this way no matter how many stones\n    # Tom takes from either stack, Jerry can mimic and take the same amount from the other, ensuring he takes the last stone.\n\n    # Stones in Stack A after Tom's turn: 20\n    # Stones in Stack B after Tom's turn: 16\n    # Jerry should take 4 stones from Stack A to make both stacks equal in number.\n    stones_taken = 20 - 16\n    stack_taken_from = 'A'\n\n    return stones_taken, stack_taken_from\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_score = sum(scores)\n    number_of_games = len(scores)\n    mean_score = total_score / number_of_games\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    result = 19 + 199 + 1999 + 19999 + 199999\n    fraction_part = 4/5 * 5\n    result += fraction_part\n    return result\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5/8\n\n    ans = total_pence * fraction\n    return ans\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    # Janice's current age\n    janice_age = 11\n    # Janice's sister's current age (Janice's age + 5 years)\n    sister_age = janice_age + 5\n    \n    # Finding the total current age of Janice and her sister\n    total_current_age = janice_age + sister_age\n    # The target total age in the future\n    target_total_age = 35\n    \n    # Calculating the number of years required to reach the target total age\n    years_until_target = target_total_age - total_current_age\n\n    return years_until_target\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # The youngest three will form an arithmetic sequence with a common difference of 1\n    # Let the age of the youngest dwarf be x\n    # Then the ages of the youngest three would be x, x+1, x+2\n    # The sum of their ages would be x + (x+1) + (x+2) = 3x + 3\n\n    # As given, the sum of the ages of the youngest three dwarfs is 42\n    # So we can find x\n    x = (42 - 3) // 3\n\n    # Now, the oldest three dwarfs will be x+4, x+5, x+6\n    # The sum of their ages would be (x+4) + (x+5) + (x+6) = 3x + 15\n    # We substitute the value of x into this equation to find the sum of ages of the oldest three dwarfs\n    sum_oldest = 3 * x + 15\n\n    return sum_oldest\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_for_3_tests = 75 * 3\n    total_for_2_tests = 172\n    remaining_test_score = total_for_3_tests - total_for_2_tests\n    \n    return remaining_test_score\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    # We start by expanding given equation accounting for place values.\n    # We have 1000a + 100b + 10c + d + 100a + 10b + c + 10a + b + a = 1370\n    # This simplifies to 1111a + 111b + 11c + d = 1370\n    # Since all digits are integers, we can find a range where a can exist by dividing 1370 by 1111.\n    # We then iterate through values of 'a' and use the remaining value after subtracting 1111a from 1370\n    # to find b, c and d by iterating further.\n\n    for a in range(1, 10):  # a must be a non-zero digit\n        rem_after_a = 1370 - 1111 * a\n        if rem_after_a > 0:  # Check if the remaining after subtracting the part from 'a' is positive\n            for b in range(10):\n                rem_after_b = rem_after_a - 111 * b\n                if rem_after_b > 0:  # Check if the remaining after subtracting the part from 'b' is positive\n                    for c in range(10):\n                        rem_after_c = rem_after_b - 11 * c\n                        if rem_after_c >= 0:  # Check if the remaining after subtracting the part from 'c' is non-negative\n                            for d in range(10):\n                                if rem_after_c - d == 0:  # If remaining after 'd' is 0, we have found our number\n                                    return 1000 * a + 100 * b + 10 * c + d\n    return None\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad, son = symbols('dad son')\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    equation2 = Eq(dad + son, 78)\n\n    solutions = solve((equation1, equation2), (dad, son))\n\n    return solutions[dad]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 1  # Start with the first term, which is 1\n    for i in range(2, 9):  # Starting from 2 to 8\n        for j in range(1, i + 1):  # From j=1 to i\n            ans += j / i\n        for j in range(i - 1, 0, -1):  # From j=i-1 to 1 decrementing by 1\n            ans += j / i\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote total number of sweets as 'total' and number of milk chocolates as 'milk_chocolates'\n    total, milk_chocolates = symbols('total milk_chocolates')\n\n    # Given that 6 fruit drops are 2/7 of milk chocolates\n    equation1 = Eq(6, 2/7 * milk_chocolates)\n    \n    # And given that the number of milk chocolates was 3/4 of total sweets\n    equation2 = Eq(milk_chocolates, 3/4 * total)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total, milk_chocolates))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the price of the football as 'f' and the price of the volleyball as 'v'.\n    f, v = symbols('f v')\n\n    # From the problem we have two equations:\n    # 1 football + 2 volleyballs = 60 dollars\n    equation1 = Eq(f + 2*v, 60)\n\n    # 2 footballs = 60 - 16 dollars\n    equation2 = Eq(2*f, 60 - 16)\n\n    # Now, we can solve these equations to find the values of 'f' and 'v'.\n    solutions = solve((equation1, equation2), (f, v))\n\n    # We are interested in the price of one volleyball 'v'.\n    return solutions[v]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    # According to the information given, we can set up the ages of the students.\n    # Since the mode is 7, there should be at least two students who are 7 years old.\n    # Given the range is 6 and the oldest one cannot be older than 7 + 6 = 13,\n    # and the youngest one cannot be younger than 7 - range = 1 (but as the mean is 9, it cannot be 1).\n    # We need to find a combination where the mean is 9 and the median is 8 \n    \n    # Since the median is 8, one of the ages must be 8. \n    # The smallest number to consider is now 2 to maintain the range of 6 (8+6=14, which is impossible; has to be 8-6=2).\n    # The arrangement for the ages satisfying all conditions is [7, 7, 8, x, 13],\n    # where x is the second largest number. Mean is (7+7+8+x+13)/5 = 9, thus x is 10.\n    # We can now solve for the second oldest age.\n\n    second_oldest = 10  # x in the sequence [7, 7, 8, x, 13].\n    return second_oldest\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # Peter's guess, John's response (correct digits, correct position)\n    guesses = [\n        ('1703', (2, True)),  # Two digits and positions are correct\n        ('2745', (2, False)), # Two digits are correct but positions are wrong\n        ('3541', (4, False))  # All digits are correct but positions are all wrong\n    ]\n\n    # All possible 4-digit numbers with distinct digits\n    possible_numbers = [\n        ''.join(str(x) for x in range(1000, 10000))\n        if len(set(str(x))) == 4\n    ]\n\n    # Filter based on John's clues\n    for guess, (correct, right_position) in guesses:\n        new_possible_numbers = []\n        for number in possible_numbers:\n            common_digits = sum(a == b for a, b in zip(number, guess))\n            if right_position:\n                if common_digits == correct:\n                    new_possible_numbers.append(number)\n            else:\n                if common_digits == 0 and sum(a in number for a in guess) == correct:\n                    new_possible_numbers.append(number)\n        possible_numbers = new_possible_numbers\n    \n    # As all digits in the correct number are different and in the responses of John, no correct digits are in the correct positions.\n    # We use process of elimination based on John's hints to determine that there is only one valid number possibility remaining.\n    # Since there is only one answer based on the constraints, we can return the first element in possible_numbers.\n    return possible_numbers[0] if possible_numbers else None\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    result = 1000 - 630\n    return result\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    return 57 + 8\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = num_terms * (first_term + last_term) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    num_books = 3\n    num_arrangements = factorial(num_books)\n    return num_arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # A cannot stand on the first or the last, so A has 3 choices (position 2, 3, or 4)\n    # Once A's position is chosen, there are 4! ways to arrange the remaining people\n    count_A_positions = 3\n    remaining_people_permutations = factorial(4)\n    \n    count = count_A_positions * remaining_people_permutations\n    \n    return count\n\nfrom math import factorial\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "import math\n\ndef solution():\n    num_people = 16\n    rounds = math.ceil(math.log2(num_people))\n    return rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    pink = 3\n    yellow = pink + 7\n    red = 3 * yellow\n\n    total_flowers = red + yellow\n    return total_flowers\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let \"g\" be the number of girls in the morning, and \"b\" be the number of boys\n    g, b = symbols('g b')\n\n    # According to the question,\n    # The number of boys was 50% (1/2) more than the number of girls\n    equation1 = Eq(b, g + (1/2) * g)\n\n    # 12 boys and 12 girls joined later\n    # The ratio of the number of boys to girls became 19:14\n    equation2 = Eq((b + 12) / (g + 12), 19/14)\n\n    # Solving the equations to find the values of b and g\n    solutions = solve((equation1, equation2), (b, g))\n    b = solutions[b]\n    g = solutions[g]\n\n    # The total number of children is the sum of boys and girls in the afternoon\n    total_children = b + 12 + g + 12\n\n    return total_children\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Original scheduled arrival time of the train\n    scheduled_time = datetime.strptime(\"17:30\", \"%H:%M\")\n\n    # Delay duration\n    delay = timedelta(minutes=30)\n\n    # Actual arrival time\n    actual_time = scheduled_time + delay\n\n    # Convert datetime format to hour and minute format\n    ans = actual_time.strftime(\"%H:%M\")\n\n    return ans\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Given ratios\n    original_ratio = Eq(apples / oranges, 3/8)\n    new_ratio = Eq((apples - 1) / oranges, 1/3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit should be from 1 to 9\n        for tens in range(0, 10):  # Tens digit can be from 0 to 9\n            for ones in range(0, 10):  # Ones digit can be from 0 to 9\n                if tens < hundreds and tens < ones and hundreds != ones:  # 'High-Low-High' condition\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    return derangement(6)\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_money = 48\n    total_classmates = 10\n    cost_notebook = 3\n    cost_colour_pencils = 9\n    \n    max_colour_pencils = total_money // cost_colour_pencils\n\n    for num_colour_pencils in range(max_colour_pencils + 1):\n        money_spent_on_pencils = num_colour_pencils * cost_colour_pencils\n        remaining_money = total_money - money_spent_on_pencils\n        if remaining_money % cost_notebook == 0 and remaining_money // cost_notebook <= (total_classmates - num_colour_pencils):\n            ans = num_colour_pencils\n        \n    return ans\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_rows = 9\n    seats_per_row = 36\n    total_students = 500\n\n    first_floor_capacity = first_floor_rows * seats_per_row\n    students_second_floor = total_students - first_floor_capacity\n\n    return students_second_floor\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    last_term = 56\n    ratio = last_term / (last_term // 2)\n    next_term = last_term * ratio\n    return int(next_term)\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    prime_factor_2 = 0\n    prime_factor_5 = 0\n    for i in range(1, 51):\n        while i % 2 == 0:\n            prime_factor_2 += 1\n            i = i // 2\n        while i % 5 == 0:\n            prime_factor_5 += 1\n            i = i // 5\n    count_zeros = min(prime_factor_2, prime_factor_5)\n    return count_zeros\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Let x be the number of rounds played\n    # Helen's cards after x rounds = Helen's original cards - x (since she loses 1 card per round)\n    # Oliver's cards after x rounds = Oliver's original cards + x (since he gains 1 card per round)\n    # According to the problem, Helen has 10 more cards than Oliver after x rounds\n    # So, Helen's cards after x rounds = Oliver's cards after x rounds + 10\n    # We can write the equation:\n    # (Helen's original cards - x) = (Oliver's original cards + x) + 10\n    # Substitute Helen's original cards (18 cards) and Oliver's original cards (22 cards) into the equation\n    # 18 - x = 22 + x + 10\n    # Solve for x\n    x = (18 - 22 - 10) / -2\n\n    # Now calculate the number of cards Helen has after x rounds\n    helen_cards = 18 - x\n\n    return int(helen_cards)\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return int(total_value)\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250  # total weight of the sugar solution\n    concentration = 0.65  # concentration of the sugar solution\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Since there are six consecutive even numbers that sum to 510,\n    # let the first number be x. Then the other five numbers are x+2, x+4, x+6, x+8, x+10\n    # The sum of these six numbers will be: x + (x+2) + (x+4) + (x+6) + (x+8) + (x+10) = 510\n    # To find x, we solve 6x + (2+4+6+8+10) = 510\n    # Simplify: 6x + 30 = 510 => 6x = 480 => x = 80\n    x = (510 - 30) // 6\n\n    # The median is the average of the 3rd and 4th number, since there are 6 numbers\n    # The 3rd number is x+4 and the 4th number is x+6\n    median = (x + 4 + x + 6) / 2\n\n    # The mean is the sum of the numbers divided by the count of the numbers\n    mean = 510 / 6\n\n    # The difference between the mean and median is:\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climb_up_first = 23\n    climb_down = 31\n    climb_up_second = 17\n\n    final_height = initial_height + climb_up_first - climb_down + climb_up_second\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    from math import log10\n\n    N = 5**100\n    # The number of digits in N is given by the floor of log10(N) + 1\n    num_digits = int(log10(N)) + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent the mass of mangoes, and s represent strawberries\n    m, s = symbols('m s')\n\n    # Set up the equation based on the given information\n    equation1 = Eq(m, s + 448)  # 448g more mangoes than strawberries\n    equation2 = Eq(s, 2 * (m - 900))  # mass of strawberries twice the mass of mangoes after giving away 900g\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (m, s))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be x\n    # Then the consecutive numbers are x, x+1, x+2, x+3, x+4\n    # Their sum is 5x + 10 (since 1 + 2 + 3 + 4 = 10)\n    # We know that the sum is 40\n    # So, 5x + 10 = 40\n    # Solving for x, we get 5x = 30\n    # Thus, x = 6\n    # The smallest number is x which is 6\n    return 6\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(int(digit) for digit in str(year)) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n    \n    # All 5-digit numbers with the given digits are permutations of these digits\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    all_numbers = list(permutations(digits, 5))\n    \n    # Filter out numbers which do not start with 0 and are multiples of 9\n    valid_numbers = [int(''.join(map(str, num))) for num in all_numbers if num[0] != 0 and sum(num) % 9 == 0]\n    \n    # Find the difference\n    max_diff = (max(valid_numbers) - min(valid_numbers)) // 9\n    \n    return max_diff\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    initial_sweets = 33\n    given_away = 8\n\n    remaining_sweets = initial_sweets - given_away\n\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    n_fourth = 4\n    n_twelfth = 12\n    a_fourth = 39\n    a_twelfth = 57\n\n    # The difference (common difference) of the arithmetic sequence\n    d = (a_twelfth - a_fourth) / (n_twelfth - n_fourth)\n\n    # The first term of the arithmetic sequence\n    a_first = a_fourth - (n_fourth - 1) * d\n\n    return a_first\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '2']\n    largest_number = max(int(''.join(p)) for p in permutations(digits))\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4000404\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    salt_30 = 30 * 0.3\n    salt_20 = 20 * 0.2\n    total_salt = salt_30 + salt_20\n    target_concentration = 0.1\n    total_mass = total_salt / target_concentration\n    water_to_add = total_mass - (30 + 20)\n    return water_to_add\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    actual_addend = 450\n    incorrect_sum = 987\n\n    correct_sum = incorrect_sum - incorrect_addend + actual_addend\n\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    # Given equation is x * x + x = 380\n    # Simplified to x^2 + x - 380 = 0\n    # This is a quadratic equation of the form ax^2 + bx + c = 0\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = x**2 + x - 380\n\n    # Solve the quadratic equation to find the value of x\n    solutions = solve(equation, x)\n\n    # Filter only the positive integer solutions, as the integer in the boxes must be positive\n    ans = [s for s in solutions if s.is_integer and s > 0]\n\n    # Return the integer in the box\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    sum_odd = sum(range(1, 32, 2))\n    sum_even = sum(range(2, 31, 2))\n    return sum_odd - sum_even\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    # speed of Johnson in m/min\n    speed_johnson = 600\n    # speed of Vicky in m/min\n    speed_vicky = 250\n    # total distance of race in meters\n    total_distance = 3000\n\n    # time taken by Johnson to complete the race in minutes\n    time_johnson = total_distance / speed_johnson\n    # time taken by Vicky to complete the race in minutes\n    time_vicky = total_distance / speed_vicky\n\n    # the difference in time is the time Johnson finishes earlier than Vicky\n    time_difference = time_vicky - time_johnson\n\n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    total_blue = 80\n    total_red = 40\n    total_white = 30\n\n    # We want to ensure we have 29 of one color, 28 of another and 10 of last\n    # Let's assume worst case scenario for each color combination using pigeonhole principle\n    \n    # Case for blue and red as the 29 and 28 colors respectively, and white as 10\n    # This would mean we'd have to pick all white balls, and one less than needed for blue and red to ensure worst case\n    brw = (total_white + (29 - 1) + (28 - 1)) + 1\n\n    # Case for blue and white as the 29 and 28 colors respectively, and red as 10\n    # This would mean we'd have to pick all red balls, and one less than needed for blue and white to ensure worst case\n    bwr = (total_red + (29 - 1) + (28 - 1)) + 1\n\n    # Case for red and white as the 29 and 28 colors respectively, and blue as 10\n    # This would mean we'd have to pick all blue balls, and one less than needed for red and white to ensure worst case\n    rwb = (total_blue + (29 - 1) + (28 - 1)) + 1\n\n    # The maximum of these worst cases would be the answer\n    worst_case_maximum = max(brw, bwr, rwb)\n\n    return worst_case_maximum\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst case, we can draw all different numbers.\n    # So we draw one of each number, there are 13 different numbers in total.\n    max_unique_numbers = 13\n\n    # But the question asks for at least 3 cards of the same number.\n    # if we draw one more card after the 13 unique ones, we'll definitely have 2 cards of the same number\n    # Since we want at least 3 cards of the same number, we would need to draw yet another card.\n\n    # So to ensure at least 3 cards of one number, we need to consider the worst case:\n    # - 13 different numbers (with 2 cards each) = 26 cards (2 of each number)\n    # - 2 cards of a particular number (to make it 3 of the same number) = 2 cards\n\n    # Adding those together gives us 28 cards.\n    # Note that as we're drawing without replacement, the 28th card will guarantee at least 3 of a single number.\n\n    cards_to_draw = max_unique_numbers * 2 + 2\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import isprime\n\n    prime_count = sum(isprime(x) for x in range(1, 21))\n    total_cards = 20\n\n    return prime_count / total_cards\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    mean_value = 8\n    total_numbers = 8\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of lime solution transferred between the bottles\n    x = symbols('x')\n\n    # Bottle A initially has 5 litres of 10% lime solution\n    # After transferring x litres to B and receiving x litres from B, A has (5-x) litres of its original solution\n    # and x litres of B's solution\n    equation1 = Eq((5 - x) * 0.1 + x * 0.2, (5 * 0.1 + 3 * 0.2) / (5 + 3) * (5))\n\n    # Bottle B initially has 3 litres of 20% lime solution\n    # After transferring x litres to A and receiving x litres from A, B has (3-x) litres of its original solution\n    # and x litres of A's solution\n    equation2 = Eq((3 - x) * 0.2 + x * 0.1, (5 * 0.1 + 3 * 0.2) / (5 + 3) * (3))\n\n    # Solve the equations for x\n    solution = solve((equation1, equation2), (x))\n\n    return solution[x]\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    # Using the fact that the sum of the sequence from 2 to 51 is just 1 more than the sum from 1 to 50 for each term\n    # There are 50 whole numbers from 2 to 51\n    # Hence, we add 50*1 to the sum from 1 to 50\n\n    sum_1_to_50 = 1275\n    num_terms = 50\n    ans = sum_1_to_50 + num_terms\n    return ans\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "def solution():\n    from itertools import permutations\n\n    # Total number of students.\n    total_students = 8\n\n    # All possible permutations of ABC, D, E, F, G, and H, where D and E, F and G are next to each other.\n    # Treat DE, FG as single units for permutation, but also need to account for the reverse: ED and GF.\n    all_permutations = list(permutations(['A', 'B', 'C', 'DE', 'ED', 'FG', 'GF', 'H']))\n\n    # Count how many valid line-ups where C is between A and B.\n    count = sum(1 for perm in all_permutations if (perm.index('A') < perm.index('C') < perm.index('B')) or\n                                                   (perm.index('B') < perm.index('C') < perm.index('A')))\n\n    # Multiply by 2, as DE and FG can be swapped in place, which doubles the number of possible arrangements.\n    count *= 2\n\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    \n    prices = set()\n    for notebook in notebooks:\n        for calendar in calendars:\n            prices.add(notebook + calendar)\n    \n    return len(prices)\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    num_primes = 25\n    # Subtracting 1 because 1 is neither prime nor composite\n    num_composite = total_numbers - num_primes - 1\n\n    return num_composite\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    return 546 - 287\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Original dimensions and ratio\n    length_painting = 90\n    ratio_length_breadth = 5/2\n    length_lego_smaller = 70.5\n\n    # Length of the lego\n    length_lego = length_painting - length_lego_smaller\n\n    # Breadth of the lego using the same proportion\n    breadth_lego = length_lego / ratio_length_breadth\n\n    # Since we need the maximum size that is a whole number (size of each lego brick)\n    max_breadth_lego = int(breadth_lego)\n\n    return max_breadth_lego\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    brother_sum = sum(coins) // 3  # As after losing one coin she has twice the amount of her brother\n    for coin in coins:\n        if sum(coins) - coin == 2 * brother_sum:\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n\n    likes_both = likes_bananas + likes_apples - total_people\n\n    return likes_both\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher_value = 1.10\n\n    total_cost = cake_price + milk_price\n    actual_payment = total_cost - voucher_value\n\n    return round(actual_payment, 2)\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for the rates of John (j), Raj (r), and Peter (p)\n    j, r, p = symbols('j r p')\n\n    # The equations represent the work done by the pairs and individually\n    # Since together they finish in 1 hour, the sum of their rates is 1 job per hour\n    equation1 = Eq(j + r + p, 1)\n\n    # John and Raj finish in 72 minutes, which is 1.2 hours, so their combined rate is 1 job per 1.2 hours\n    equation2 = Eq(j + r, 1 / 1.2)\n\n    # Raj and Peter finish in 90 minutes, which is 1.5 hours, so their combined rate is 1 job per 1.5 hours\n    equation3 = Eq(r + p, 1 / 1.5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (j, r, p))\n\n    # We are interested in how long it takes for Raj to finish the job by himself\n    # Since the rate is jobs per hour, we take the reciprocal to find the time in hours, then convert to minutes\n    raj_time = 1 / solutions[r] * 60\n\n    return raj_time\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    # The pattern in the numbers is that each new term adds another '123' on the right.\n    # The expression can be written as:\n    # 123 + 123*10 + 123*100 + 123*1000 + ... + 123*10^(n-1)\n    # This is a geometric series with first term a = 123 and common ratio r = 10.\n    # The sum of the first n terms of a geometric series is given by:\n    # S_n = a * (1 - r^n) / (1 - r) for r != 1\n    # We can simplify the sum by considering mod 1000 to obtain the hundreds digit\n    # (since we are interested in the hundreds place, we do not care about the rest).\n\n    a = 123\n    r = 10\n    modulus = 1000  # To get the last three digits\n\n    # Initialize sum\n    total = 0\n\n    # Calculate sum modulo 1000\n    # Instead of calculating all terms, we stop when the contribution of new terms becomes zero mod 1000\n    term = a\n    while term > 0:\n        total = (total + term) % modulus\n        term = (term * r) % modulus\n\n    # Hundred's digit is the third digit from the right in the sum mod 1000\n    hundreds_digit = (total // 100) % 10\n\n    return hundreds_digit\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1.25\n    normal_hours = 8\n    total_hours_worked = 10\n\n    overtime_hours = total_hours_worked - normal_hours\n    overtime_rate = normal_rate * overtime_multiplier\n\n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n    \n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    num1 = 3.2\n    num2 = 5.6\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    ans = 35 / 100 * 60\n    return ans\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n    \n    # Equation 1: The sum of their current ages\n    equation1 = Eq(elder + younger, 42)\n    \n    # Equation 2: The elder was to the current younger's age, and the younger was half the current elder's age\n    equation2 = Eq(elder - younger, 2 * (younger - (elder - younger)))\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 3 and number % 7 == 3:\n            return number\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # Each section of \"928\" has a sum of digits equal to 19 which is divisible by 9\n    # and leaves a remainder of 1 when divided by 9.\n    # There are 33 such sections in a 99-digit number composed of \"928\" repeated.\n    # Therefore, the remainder of the entire number when divided by 9 \n    # is the same as the remainder of 33 * 1 when divided by 9.\n\n    # Calculate the remainder\n    remainder = (33 * 1) % 9\n\n    # Return the calculated remainder\n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1/x))), 30/43)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # To guarantee 3 balls of the same color, take the worst-case scenario:\n    # Taking all balls of other colors plus two of the target color and one more.\n    # 8 white, 7 blue, 5 green, and 2 orange\n    # Taking 2 white + 2 blue + 2 green + 2 orange guarantees the third ball of any color\n    \n    max_balls_of_each_color = 2\n    number_of_colors = 4\n    total_balls_needed = (max_balls_of_each_color * (number_of_colors - 1)) + 1\n    \n    return total_balls_needed\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    number = 1\n    while True:\n        if all(number % divisor == 1 for divisor in [5, 6, 7]):\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):   # Tens digit must be from 1 to 9\n        for ones in range(0, 10):  # Ones digit must be from 0 to 9\n            original = tens * 10 + ones\n            swapped = ones * 10 + tens\n            if swapped == original / 3 + 3:\n                return original\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of teams in the league\n    n = symbols('n')\n\n    # Each team plays each of the other teams twice (home and away)\n    # Total matches are combinatorial pairs of teams times 2\n    # We know that the total matches are 30, according to the equation:\n    # n * (n - 1) = number of matches in one round\n    # 2 * n * (n - 1) = total matches in the season\n    equation = Eq(n * (n - 1), 30 * 2) \n\n    solutions = solve(equation, n)\n\n    # We're looking for the positive integer solution\n    ans = [s for s in solutions if s.is_real and s > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    total_kg = 66.5\n    boxes_needed = (total_kg * boxes_for_14kg) / 14\n    return boxes_needed\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represent the number of years later\n    x = symbols('x')\n    \n    # Let g represent George's current age and s represent his sister's current age\n    g, s = symbols('g s')\n    \n    # Equation representing the sum of their current ages\n    equation1 = Eq(g + s, 34)\n    \n    # Equation representing the sum of their ages in x years\n    equation2 = Eq(g + x + s + x, 40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, s, x))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the rope and y be the circumference of the tree\n    x, y = symbols('x y')\n\n    # 10 turns around the tree is left 3 meters\n    equation1 = Eq(10 * y, x - 3)\n\n    # 12 turns is missing another 3 meters\n    equation2 = Eq(12 * y, x + 3)\n\n    # Solve the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the length of the rope for 8 turns around the tree\n    length_for_8_turns = 8 * solutions[y]\n    return length_for_8_turns\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    countries = 11\n    people_per_country_to_guarantee = 5\n    participants = (countries - 1) * people_per_country_to_guarantee + 1\n    return participants\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        ""
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    \n    num_rows = (students + tables_per_row - 1) // tables_per_row\n    \n    return num_rows\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    ans = 73 + 28 + 37 + 82\n    return ans\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        ""
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = ben_cards * 3\n    \n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    spent, not_spent = symbols('spent not_spent')\n    equation1 = Eq(spent, (3/7) * (spent + not_spent))\n    equation2 = Eq(spent - not_spent, 12)\n\n    solutions = solve((equation1, equation2), (spent, not_spent))\n\n    return solutions[spent]\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_time = 200 / 8  # Jaan's time to finish the race\n    kane_distance = 200 - 12.5  # The distance Kane covered when Jaan finished\n    kane_speed = kane_distance / jaan_time  # Kane's speed\n\n    return kane_speed\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    final_number = 28\n    initial_number = (final_number - 6) / 2\n    return initial_number\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Given that the ages of the youngest three add up to 42 years and \n    # they are in an arithmetic sequence (consecutive years), \n    # we can denote their ages as x, x+1, x+2 where x is the age of the youngest.\n    # Therefore, x + (x+1) + (x+2) = 42\n    \n    # Solve for x to find the age of the youngest dwarf\n    x = (42 - 3) // 3 # substracting 3 (1 for each year added) and dividing by 3 gives the first term in the sequence\n    \n    # Now, let's find the age of the fourth dwarf, which is also the first of the oldest three.\n    # The fourth age will be x + 3 (since they are born in consecutive years).\n    age_fourth = x + 3\n    \n    # Finally, we need to find the sum of the ages of the oldest three dwarfs,\n    # which would be (age_fourth) + (age_fourth + 1) + (age_fourth + 2)\n    # This is the sum of another arithmetic sequence with three terms.\n    sum_oldest_three = age_fourth + (age_fourth + 1) + (age_fourth + 2)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    result = 111\n    for i in range(1, 7 + 1):\n        result -= i\n    return result\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    total_sum = (1/6)*n*(n+1)*(2*n+1)*(5**2)\n    return int(total_sum)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    A_and_B = 447\n    B_and_C = 335\n    total_toys = 659\n\n    # Let's denote the number of toys made by Factory B as B\n    # Then A = A_and_B - B and C = B_and_C - B\n    # According to the problem, A + B + C = total_toys,\n    # therefore, (A_and_B - B) + B + (B_and_C - B) = total_toys.\n    # Simplifying it gives us: A_and_B + B_and_C - B = total_toys\n\n    B = A_and_B + B_and_C - total_toys\n\n    return B\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    equation1 = Eq(13 * pupils + 190, stickers)\n    equation2 = Eq(17 * pupils + 50, stickers)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    salary_per_month = 1.4\n    debt_in_bitcoin = 5.04\n\n    months_to_work = debt_in_bitcoin / salary_per_month\n\n    return months_to_work\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    factors_sum = sum(i for i in range(1, 73) if 72 % i == 0)\n    return factors_sum\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    ans = sum(numbers) / len(numbers)\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n\n    # Let the number of boys be x\n    # Then, the number of girls will be x + difference\n    # Total pupils is the sum of boys and girls: x + (x + difference) = total_pupils\n    # Solving for x gives us the number of boys, and x + difference gives us the number of girls\n    \n    # 2x + difference = total_pupils\n    # 2x = total_pupils - difference\n    # x = (total_pupils - difference) / 2\n    boys = (total_pupils - difference) // 2\n    \n    # Number of girls\n    girls = boys + difference\n    \n    return girls\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for a file and a storybook\n    file, storybook = symbols('file storybook')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (file, storybook))\n\n    # Calculate the total cost of 1 file and 1 storybook\n    total_cost = solutions[file] + solutions[storybook]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_tray = 1\n    additional_sausages = 21\n    \n    total_sausages_initial = initial_trays * initial_mean\n    total_sausages_now = total_sausages_initial + additional_sausages\n    total_trays_now = initial_trays + additional_tray\n    \n    new_mean = total_sausages_now / total_trays_now\n    \n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(0, 10):\n            for unit in range(0, 10):\n                if hundred > ten and unit > ten:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    mixed_number = 3 + 1/2\n    divisor = 1/4\n\n    ans = mixed_number / divisor\n\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (137 + 263) / 20  # Speed of the train\n    length_of_second_bridge = (speed * 27) - 137  # Total distance covered on the second bridge minus the length of the train\n    return length_of_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    average = (rani + brenda) / 2\n    amount_to_give = brenda - average\n    return amount_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols\n    blue, red = symbols('blue red')\n\n    # create equations based on the problem statement\n    equation1 = Eq(blue + red, 125)                  # total number of balls\n    equation2 = Eq((2/5) * blue, (3/5) * red)        # ratio of blue and red balls\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (blue, red))\n\n    # calculate the difference in the number of blue and red balls\n    difference = solutions[blue] - solutions[red]\n\n    return difference\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "def solution():\n    from math import factorial\n\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n     \n    # Choosing 1 book for the first student in 7 ways,\n    # 1 book for the second student from the remaining 6 in 6 ways, and\n    # 1 book for the third student from the remaining 5 in 5 ways.\n    first_part = combinations(7, 1) * combinations(6, 1) * combinations(5, 1)\n\n    # The remaining books can be arranged among the three students in many ways,\n    # which is equivalent to finding the number of distributions of 4 distinct objects\n    # into 3 distinct boxes, where boxes can be empty.\n    # This can be calculated using the formula of distributing n distinct objects\n    # into r distinct boxes: r ** n.\n    second_part = 3 ** 4\n\n    # Multiply both parts to get the total number of ways.\n    return first_part * second_part\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the cost of one watch and one handbag\n    watch, handbag = symbols('watch handbag')\n\n    # Equations based on the given problem\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # Calculate total cost of 2 watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # The least possible number of pieces for the child with the most.\n    # The seven children receive at least one piece each.\n    # We distribute the minimum and calculate what's left.\n    remaining = 88 - (1+2+3+4+5+6+7)\n    \n    # The last child will receive the remaining pieces plus the piece already counted for him/her (8).\n    max_pieces = remaining + 8\n\n    return max_pieces\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_2008 = 80\n    daughter_age_1996 = 40\n\n    # Number of years between 1996 and 2008\n    years_difference = 2008 - 1996\n\n    # Age of grandmother in 1996\n    grandmother_age_1996 = grandmother_age_2008 - years_difference\n\n    # Age of grandmother when her daughter was born\n    grandmother_age_at_birth = grandmother_age_1996 - daughter_age_1996\n\n    return grandmother_age_at_birth\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are 4 individuals, let's denote them as A, B, C, D.\n    # A starts with the ball and after 3 passes the ball needs to be back to A.\n\n    # Let's denote the passes with a tuple (first_pass, second_pass, third_pass)\n    # Each value in the tuple represents the person who has the ball after the corresponding pass.\n    \n    # A cannot be the receiver of the first pass, and whoever receives the first pass\n    # can't pass the ball back to A directly as that would only be two passes.\n    # Hence, there are 3 options for the first pass.\n    \n    # Whoever receives the first pass has to pass it to one of the other two people \n    # (not back to A and not themselves), so there are 2 options for the second pass.\n\n    # Finally, the third pass must be to A.\n    \n    # The number of different methods is simply the product of the options for each pass.\n    \n    return 3 * 2 * 1\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nicole, eddy = symbols('nicole eddy')\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    import math\n\n    # Total permutations with no restrictions: 8!\n    total_permutations = math.factorial(8)\n\n    # Considering A and B as a single person: (7! because we have now 7 entities)\n    ab_together = math.factorial(7)\n\n    # AB can switch places in 2 ways\n    ab_positions = ab_together * 2\n\n    # Considering C and D always together: (7! for 7 entities)\n    cd_together = math.factorial(7)\n\n    # CD can switch places in 2 ways\n    cd_positions = cd_together * 2\n\n    # Subtracting when C and D are together from total number of permutations without restriction\n    cd_not_together = total_permutations - cd_positions\n\n    # Final answer is when AB are together and CD are not together\n    ans = ab_positions * cd_not_together // total_permutations\n\n    return ans\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_amount = 200  # grams\n    leroy_concentration = 0.35  # 35%\n\n    lenny_amount = 300  # grams\n    lenny_concentration = 0.50  # 50%\n\n    total_amount = leroy_amount + lenny_amount\n    total_salt = (leroy_amount * leroy_concentration) + (lenny_amount * lenny_concentration)\n\n    concentration_of_resulting_solution = total_salt / total_amount\n\n    return concentration_of_resulting_solution\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n\n    # Valeria's current candies minus the amount both eat equals 22\n    equation1 = Eq(valeria - mike, 22)\n    # Mike's current candies minus the amount both eat equals 6\n    equation2 = Eq(mike - valeria, -6)\n    # The total amount of candies is 36\n    equation3 = Eq(mike + valeria, 36)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_mass = 300\n    sugar_concentration = 0.35\n    sugar_mass = total_mass * sugar_concentration\n    water_mass = total_mass - sugar_mass\n    return water_mass\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Calculate 12 to the power of 50\n    power_12 = 12**50\n    \n    # To find the largest whole number k such that 12^50 > k^75\n    # we take the 75th root of 12^50\n    k = power_12**(1/75)\n    \n    # Since we need the largest whole number, we floor the result\n    ans = int(k)\n    \n    return ans\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    oranges_thrown_away = 34\n    oranges_bought = 25\n    oranges_end = 133\n\n    oranges_start = oranges_end + oranges_thrown_away - oranges_bought\n\n    return oranges_start\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi_operation(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n    \n    ans = psi_operation(psi_operation(14, 13), 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    # Calculate the number of digits in the sequence\n    ans = sum(len(str(i)) for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n    \n    # Let the number of girls be x\n    # Then the number of boys would be total_students - x\n    # Setting up equation based on average scores\n    # (girls_average * x + boys_average * (total_students - x)) / total_students = total_average\n    # Simplify to get the number of girls (x)\n    \n    x = (boys_average - total_average) * total_students / (boys_average - girls_average)\n    \n    return int(x)\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # number of legs for cats, dogs, and rabbit\n    legs_cats = 2 * 4\n    legs_dogs = 2 * 4\n    legs_rabbit = 4\n    \n    # subtract the known number of legs from the total\n    legs_remaining = 28 - (legs_cats + legs_dogs + legs_rabbit)\n    \n    # birds have 2 legs, divide the remaining legs by 2 to find the number of birds\n    num_birds = legs_remaining // 2\n    \n    return num_birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Given: 5 people take 6 hours to paint the fence.\n    # We need to find the number of people required to paint a fence twice the\n    # length in less than 5 hours.\n    \n    # If 5 people take 6 hours to paint the fence, then one person would take 5 * 6 = 30 hours to paint it.\n    # For a fence twice the length, one person would take 2 * 30 = 60 hours to paint it.\n    \n    # We want the fence painted in less than 5 hours.\n    # If one person can do it in 60 hours, then 'x' people doing it together would be 60 / x hours.\n    # We want to find the smallest integer 'x' for which 60 / x is less than 5.\n    # So we solve: 60 / x < 5\n    \n    x = 60 // 5  # Integer division to satisfy the condition of taking less hours, get the upper bound\n    if 60 % 5 == 0:\n        # Since we just need to employ more than 60 / 5 people to complete in less than 5 hours\n        x += 1\n\n    return x\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    ans = 694 + 888\n    return ans\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_set = 12 / 4  # Time taken to walk one flight of stairs\n    number_of_sets_in_30_min = 30 / time_for_one_set  # Number of flights of stairs in 30 minutes\n\n    return int(number_of_sets_in_30_min)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_21_6_grams = cookies_per_gram * 21.6\n    return round(cookies_with_21_6_grams)\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    N_base8 = '12345654321'\n    N_base10 = int(N_base8, 8)\n\n    remainder_7 = N_base10 % 7\n    remainder_9 = N_base10 % 9\n\n    sum_of_remainders = remainder_7 + remainder_9\n\n    return sum_of_remainders\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    # wallet costs $54 more than the belt\n    equation1 = Eq(wallet, belt + 54)\n    # handbag costs $300 more than the wallet\n    equation2 = Eq(handbag, wallet + 300)\n    # total cost is $840\n    equation3 = Eq(handbag + wallet + belt, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_past = 7\n    years_passed = 3 + 4  # From three years ago to four years into the future\n    return combined_age_past + (2 * years_passed)\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    # 2 books and 3 magazines cost $24.90\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    # 1 book and 1 magazine cost $10\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_of_n = (n * (n + 1)) // 2\n    ans = sum_of_squares + sum_of_n\n    return ans\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    import math\n    count = 0\n    for i in range(1, math.isqrt(2016) + 1):\n        if 2016 % (i*i) == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    total_sum = 60\n    # Since the numbers are consecutive, we can represent them as x, x+1, x+2\n    # Their sum will be 3x + 3, which should be equal to 60\n    # We solve for x to find the smallest number, then x+2 would be the largest\n    x = (total_sum - 3) // 3\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n    \n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            if B == A: continue\n            for C in range(10):\n                if C in [A, B]: continue\n                for D in range(10):\n                    if D in [A, B, C]: continue\n                    if (A*101 + C*101 + B*10 + D*10) == 726:\n                        return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # To guarantee that Annabella gets 1 yellow shirt for sure regardless of the order\n    # she takes out the shirts, she needs to consider the worst-case scenario.\n    # In this worst-case scenario, she could take all the shirts that are not yellow first.\n    # So she would take all the orange, pink, and brown shirts.\n    \n    # Calculate the total of non-yellow shirts\n    non_yellow_shirts = 6 + 4 + 12\n    \n    # To then get one yellow shirt, she needs to take out just one more shirt, \n    # which is the first yellow shirt.\n    total_shirts_to_take = non_yellow_shirts + 1\n\n    return total_shirts_to_take\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    ans = 249 * 31\n    return ans\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    mixed_numbers = [9 + 4/5, 99 + 4/5, 199 + 4/5, 2999 + 4/5, 39999 + 4/5, 1]\n    ans = sum(mixed_numbers)\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Given sequence: 94, □, 80, 73, 66\n    # Find the common difference between consecutive terms\n    # The difference between 80 and 73 is 7 and between 73 and 66 is also 7\n    \n    common_difference = 7\n    \n    # The second term (unknown) can be found by subtracting the common difference from the third term (80)\n    second_term = 80 + common_difference\n    \n    return second_term\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100 \n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age, _ = solve_congruence(*congruences)\n    return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n\n    total_wine_glass_ml = 25 * wine_glass_ml\n    total_tumbler_ml = 12 * tumbler_ml\n    \n    total_ml_sold = total_wine_glass_ml + total_tumbler_ml\n    ml_per_carton = 1000\n\n    cartons_needed = total_ml_sold / ml_per_carton\n    \n    return int(cartons_needed) if cartons_needed.is_integer() else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of fruits\n    avocados, peaches, lemons = symbols('avocados peaches lemons', positive=True, integer=True)\n\n    # Set up the equations based on the given ratios and changes\n    ratio1 = Eq(2 * lemons, 9 * avocados)\n    ratio2 = Eq(9 * peaches, 8 * lemons)\n    ratio_change = Eq((peaches - 12) / (lemons - 60), 6/5)\n\n    # Solve the system of equations\n    solutions = solve((ratio1, ratio2, ratio_change), (avocados, peaches, lemons))\n\n    # Calculate the total number of fruits after selling the specified amounts\n    total_fruits_left = solutions[avocados] - 52 + solutions[peaches] - 12 + solutions[lemons] - 60\n\n    return total_fruits_left\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    position_from_end = total_people - position_from_front + 1\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of powers of 2 cycle every 4 powers:\n    # 2^1 = 2 -> Last digit '2'\n    # 2^2 = 4 -> Last digit '4'\n    # 2^3 = 8 -> Last digit '8'\n    # 2^4 = 16 -> Last digit '6'\n    # 2^5 = 32 -> Last digit '2', and the cycle repeats.\n\n    # Therefore, to find the last digit of 2 raised to any power,\n    # we only need to find where that power falls within the cycle of 4.\n\n    cycle_length = 4\n    power = 859433\n\n    # Find the remainder when the power is divided by the cycle length.\n    position_in_cycle = power % cycle_length\n\n    # Match the position within the cycle to the last digit of 2 at that power.\n    if position_in_cycle == 1:\n        return 2\n    elif position_in_cycle == 2:\n        return 4\n    elif position_in_cycle == 3:\n        return 8\n    elif position_in_cycle == 0:\n        return 6\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    students_facing_teacher = 60\n    for i in range(1, 61):\n        if i % 3 == 0 or i % 5 == 0:\n            students_facing_teacher -= 1\n        if i % 3 == 0 and i % 5 == 0:\n            students_facing_teacher += 1\n    return students_facing_teacher\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from math import lcm\n\n    # Least common multiple for 2, 4, and 6\n    least_mul = lcm(2, 4, 6)\n\n    # Start checking from the least common multiple + 1 (since remainder is always 1)\n    # Also check for when divided by 7 gives remainder 5\n    age = least_mul + 1\n    while age % 7 != 5:\n        age += least_mul\n\n    return age\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n\n    max_number = 0\n    for i in range(7, 0, -1):\n        for digits in permutations(range(1, 8), i):\n            if all(digits[j-1] % j == 0 for j in digits):\n                number = int(''.join(map(str, digits)))\n                max_number = max(max_number, number)\n                \n    return max_number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    ans = 0\n    for i in range(1, 900, 2):\n        sum_seq = 0\n        for j in range(i, 900, 2):\n            sum_seq += j\n            if sum_seq == 900:\n                ans = max(ans, (j - i) // 2 + 1)\n                break\n            elif sum_seq > 900:\n                break\n    return ans\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let A = Adam's weight, B = Ben's weight, C = Carl's weight\n    # From the problem we have:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Add all three equations to get the sum of all pairs:\n    # 2(A + B + C) = 102 + 97 + 93\n    sum_of_pairs = 102 + 97 + 93\n    total_weight = sum_of_pairs / 2  # Divide by 2 to get the total weight of A, B and C\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    smallest_number = divisor + remainder\n\n    while smallest_number <= 120:\n        smallest_number += divisor\n\n    return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jess_sweets be the number of sweets Jess originally has\n    # Let jill_sweets be the number of sweets Jill originally has\n    jess_sweets, jill_sweets = symbols('jess_sweets jill_sweets')\n\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill_sweets, 6/5 * jess_sweets)\n\n    # Jill gives eight sweets to Jess\n    new_jess_sweets = jess_sweets + 8\n    new_jill_sweets = jill_sweets - 8\n\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(new_jill_sweets * 7, new_jess_sweets * 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess_sweets, jill_sweets))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jess_sweets] + solutions[jill_sweets]\n\n    return total_sweets\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest_value = min(numbers)\n    return smallest_value\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    metres = 2\n    centimetres = 2\n    conversion_factor = 0.01\n\n    height_in_metres = metres + (centimetres * conversion_factor)\n    \n    return height_in_metres\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * 1.25\n    third_test_score = second_test_score * 0.8\n\n    total_score = first_test_score + second_test_score + third_test_score\n\n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n    \n    amount = principal * ((1 + rate) ** time)\n    \n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(bookmarks - 6*pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    from sympy import isprime\n\n    # Chocolate bars\n    chocolate_bars = 233\n\n    # Michael is correct if and only if the number of chocolate bars is prime,\n    # which means it cannot be divided evenly among students.\n    michael_is_correct = isprime(chocolate_bars)\n\n    return michael_is_correct\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_squares = sum((7 * i)**2 for i in range(1, 16))\n    return sum_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum_of_money = 4.22 + 31.49 + 0.76\n    return sum_of_money\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(130, 151))\n    \n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    start = 56\n    end = 92\n    multiple = 4\n    \n    first_multiple_after_start = (start + multiple - 1) // multiple * multiple\n    last_multiple_before_end = end // multiple * multiple\n    \n    num_multiples = (last_multiple_before_end - first_multiple_after_start) // multiple + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    # Since the number is positive and less than 100, we can use a brute-force method.\n    for number in range(1, 100):\n        if (number % 3 == 2) and (number % 4 == 3) and (number % 5 == 4):\n            return number\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    distance = 144\n    hours_downstream = 8\n    speed_still_water = 15\n\n    # Determine the speed of the current\n    speed_current = (distance / hours_downstream) - speed_still_water\n\n    # Calculate the total speed of the ship going upstream\n    speed_upstream = speed_still_water - speed_current\n\n    # Determine how long it takes to go back upstream\n    hours_upstream = distance / speed_upstream\n\n    return hours_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    return comb(15, 2)\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let h represent the total amount of food the hippo eats in 20 days\n    # Let k represent the total amount of food the kangaroo eats in 20 days\n    h, k = symbols('h k')\n\n    # The hippo eats 45 kg more food than the kangaroo\n    equation1 = Eq(h, k + 45)\n\n    # In 20 days, the hippo has eaten 10 times as much food as the kangaroo\n    equation2 = Eq(h, 10 * k)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (h, k))\n\n    # h represents the total amount of food the hippo has consumed in 20 days\n    return solutions[h]\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    waiting_time = timedelta(hours=1, minutes=25)\n    meeting_time = datetime.strptime('15:15', '%H:%M') + waiting_time\n    return meeting_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We want to find a number that leaves a remainder of 1 when divided by 2,\n    # a remainder of 2 when divided by 3, a remainder of 3 when divided by 4,\n    # a remainder of 4 when divided by 5, and a remainder of 5 when divided by 6.\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    \n    # Use the Chinese Remainder Theorem to find the smallest such number\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for j in range(1, 20) for i in range(j + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Calculate the daily work rate of workers A and B\n    rate_A = 1 / 15\n    rate_B = 1 / 20\n\n    # Calculate the amount of work done by both together in 2 days\n    work_done = 2 * (rate_A + rate_B)\n\n    # Calculate the remaining work to be done after 2 days\n    remaining_work = 1 - work_done\n\n    # Calculate the number of days worker A will take to finish the remaining work alone\n    days_for_A_to_finish = remaining_work / rate_A\n\n    return days_for_A_to_finish\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # Considering the worst case scenario to have at least two balls of the same colour,\n    # one should take one ball of each colour first (green and blue). This is because if we are\n    # unlucky, we could take all balls of different colours until we are forced to take a ball\n    # of the same colour as one we have already taken.\n    # After taking one green and one blue, the very next ball we take must be of the same colour\n    # as one we have already taken, guaranteeing that we have two balls of the same colour.\n\n    # So the answer is the number of colours we have (2) plus 1, to ensure the same colour match.\n    return 2 + 1\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # Pigeonhole principle states: if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n    # For our case, we want at least 11 students with the same zodiac sign,\n    # which means every zodiac sign can have at most 10 students before we hit the 11 mark.\n    # So, we distribute 10 students per each of the 12 zodiac signs first.\n    zodiac_signs = 12\n    students_per_sign_before_hitting_11 = 10\n\n    # Now, we add one more student to guarantee the 11th student for any zodiac sign.\n    students_needed = (zodiac_signs * students_per_sign_before_hitting_11) + 1\n\n    return students_needed\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef count_valid_permutations(permutation):\n    A_index = permutation.index('A')\n    B_index = permutation.index('B')\n    C_index = permutation.index('C')\n    D_index = permutation.index('D')\n    E_index = permutation.index('E')\n    F_index = permutation.index('F')\n    G_index = permutation.index('G')\n  \n    if (A_index > B_index and A_index < C_index) or (A_index < B_index and A_index > C_index):\n        if abs(D_index - E_index) == 1:\n            if abs(F_index - G_index) != 1:\n                return True\n    return False\n\ndef solution():\n    count = 0\n    students = 'ABCDEFG'\n    for permutation in permutations(students):\n        if count_valid_permutations(permutation):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Using the Pigeonhole Principle\n    # To be certain to have 10 balls of the same color, we need to consider the worst case scenario.\n    # That means we take out the following:\n    # - all yellow balls + 1 (5 yellow + 1),\n    # - all but one white balls + 1 (14 white + 1),\n    # If we still don't have 10 balls of the same color, the next ball we take has to complete a set of at least 10.\n    \n    balls_needed = (5 + 1) + (14 + 1) + 1  # yellow + white + 1 more\n    \n    return balls_needed\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    start_seat = 3\n\n    last_seat = (start_seat + total_candies - 1) % total_children\n    return last_seat if last_seat != 0 else total_children\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    num_terms = 60\n\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "from math import lcm\n\ndef solution():\n    cycle_days = lcm(7, 3)  # Least common multiple of the two cycles\n    return cycle_days + 2  # Plus 2 because she eats both on January 2nd\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Using the principle of Inclusion-Exclusion,\n    # Minimum number of children who like both = (Children with dogs) + (Children with cats) - Total Children\n    both = children_with_dogs + children_with_cats - total_children\n\n    return both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # We are going to assume that the description implies an arithmetic sequence represented in the table.\n    # The sum of an arithmetic sequence can be found using the formula:\n    # Sum = n/2 * (first_term + last_term)\n    # Where n is the number of terms, first_term is the first number in the sequence, and\n    # last_term is the last number in the sequence.\n    \n    # Since the question doesn't provide the explicit arithmetic sequence, we'll assume a general case\n    # where we are given the first, last terms and the number of terms n.\n    # For instance, let's assume the sequence starts at 1 (first_term) and ends at 100 (last_term)\n    # with n being 100 terms in the sequence.\n\n    first_term = 1  # This value should be the first term of the sequence\n    last_term = 100  # This value should be the last term of the sequence\n    n = 100  # This should be the number of terms in the sequence\n\n    sum_of_numbers = n/2 * (first_term + last_term)\n    return int(sum_of_numbers)\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    equation1 = Eq(shirts, skirts - 36)\n    equation2 = Eq((2/3) * shirts + (5/6) * skirts, 72)\n\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    months = 3\n    total_saving = monthly_saving * months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    total_length = 100\n    total_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_lengthwise = total_length // cloak_length\n    cloaks_widthwise = total_width // cloak_width\n\n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n  \n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    distance = 120\n    average_speed = 30\n    speed_outbound = 20\n\n    # Time taken to travel to the place at 20 miles per hour\n    time_outbound = distance / speed_outbound\n\n    # Total time for the round trip at an average speed of 30 miles per hour\n    total_time = (2 * distance) / average_speed\n\n    # Time left for the return journey\n    time_return = total_time - time_outbound\n\n    # Speed required for the return journey to maintain the average speed\n    speed_return = distance / time_return\n\n    return speed_return\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    for biscuits in range(400, 801):\n        if biscuits % 5 == 1 and biscuits % 6 == 2 and biscuits % 11 == 7:\n            return biscuits\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_portion = 4\n    joe_portion = 5\n    total_portion = nell_portion + joe_portion\n    nell_sweets = 24\n\n    total_sweets = (nell_sweets * total_portion) / nell_portion\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 35):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make 1 cut.\n    # To cut a rod into 5 pieces, we need 4 cuts.\n    # So, it takes 2 * 4 minutes to make all the cuts.\n    num_cuts = 5 - 1\n    time_per_cut = 2\n    total_time = num_cuts * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    ans = 46 * 37\n    return ans\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    initial_average = 120\n    final_average = 110\n    number_of_initial_numbers = 3\n    number_of_final_numbers = number_of_initial_numbers + 1\n\n    # Calculate the initial total sum of the three numbers\n    initial_total = initial_average * number_of_initial_numbers\n    \n    # Calculate the final total sum needed for the average to be 110\n    final_total = final_average * number_of_final_numbers\n    \n    # Calculate the number that must be added to reach the new average\n    number_to_add = final_total - initial_total\n    \n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jovan, sean, herman = symbols('jovan sean herman')\n    \n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(herman, 3 * jovan)\n    equation3 = Eq(herman - 240, jovan)\n\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, herman))\n    total_marbles = solutions[jovan] + solutions[sean] + solutions[herman]\n    \n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    m = symbols('m')\n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n    solution = solve(equation, m)\n    return solution[m]\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n    \n    # Using the unitary method\n    # If 12 horses can be fed for 15 days,\n    # 1 horse can be fed for 12 * 15 days,\n    # So, 20 horses can be fed for (12 * 15) / 20 days.\n    days_final = (horses_initial * days_initial) / horses_final\n    \n    return days_final\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    a1 = 5  # first term\n    an = 65  # last term\n    d = 4  # common difference\n\n    n = ((an - a1) // d) + 1  # number of terms\n\n    sum_series = (n * (a1 + an)) // 2  # sum of arithmetic series\n\n    return sum_series\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "def solution():\n    from math import gcd\n\n    return gcd(gcd(6, 9), 12)\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    john, andy, charles = symbols('john andy charles')\n\n    # Write the equations based on the given information\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # Calculate the total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_length = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = (total_length / companies) / days\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_set_price = 78\n    sock_price = 12\n    num_legs_per_alien = 5\n    num_aliens = 6\n\n    total_shoe_cost = shoe_set_price * num_legs_per_alien * num_aliens\n    total_sock_cost = sock_price * num_legs_per_alien * num_aliens\n    \n    total_cost = total_shoe_cost + total_sock_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    import numpy as np\n\n    data = np.array([3, 2, 3, 5, 2, 4, 4, 1])\n    mean = np.mean(data)\n    mad = np.mean(np.abs(data - mean))\n\n    return mad\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david_value = 1.5\n    jeremy_50 = symbols('jeremy_50')\n    jeremy_10 = 3/5 * jeremy_50\n    cookies_10_value = 0.10\n    cookies_50_value = 0.50\n\n    equation = Eq(jeremy_50 - (jeremy_10 + 60), 0)\n\n    jeremy_50_cookies = solve(equation, jeremy_50)\n    jeremy_10_cookies = 3/5 * jeremy_50_cookies[0]\n\n    jeremy_cookies_worth = jeremy_10_cookies * cookies_10_value + jeremy_50_cookies[0] * cookies_50_value\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {}\n    \n    for c in combinations(numbers, 2):\n        product = c[0] * c[1]\n        products[product] = products.get(product, []) + [c]\n    \n    for c in combinations(numbers, 3):\n        product = c[0] * c[1] * c[2]\n        if product in products:\n            all_picked = set(c + products[product][0])\n            not_picked = set(numbers) - all_picked\n            return not_picked.pop()\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    for total in possible_totals:\n        if (total - 4) % 7 == 0:  # Each shelf holds 7 books. Subtract 4 leftover books and check divisibility\n            return total\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_first_fifth = 20\n    distance_between_trees = distance_first_fifth / (5 - 1)\n    total_distance = 200\n    num_trees = (total_distance / distance_between_trees) + 1\n    return int(num_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # rate of tap A in tanks per minute\n    rate_b = 1 / 8   # rate of tap B in tanks per minute\n    combined_rate = rate_a + rate_b  # combined rate of taps A and B in tanks per minute\n\n    time_to_fill_half_tank = 0.5 / combined_rate  # time to fill half the tank with both taps open\n    return time_to_fill_half_tank\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "from sympy.functions.combinatorial.numbers import stirling\n\ndef solution():\n    # n = 13 oranges, k = 3 kids, kind = 2 for Stirling numbers of the second kind\n    # This calculates the ways to partition a set of n objects into k non-empty subsets\n    ways = stirling(13, 3, kind=2)\n    \n    # However, since some kids might not get any oranges, we need to consider these possibilities as well\n    # 1. All 13 oranges to one kid: 3 ways (because any of the three kids can get all the oranges)\n    # 2. 13 oranges divided into 2 non-empty subsets: calculating stirling(13, 2, kind=2) and multiply by 3 because there are 3 ways to leave out any one of the kids\n    ways += 3 + stirling(13, 2, kind=2) * 3\n    \n    return ways\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Jason's initial expression: (36 * 21) / (6 * 7)\n    initial_expression = (36 * 21) / (6 * 7)\n    \n    # Working out the correct expression\n    # According to the order of operations (PEMDAS/BODMAS),\n    # division and multiplication have the same precedence,\n    # and must be performed from left to right.\n    correct_expression = 36 / 6 * 21 * 7\n    \n    # Compare the initial and correct expressions\n    if initial_expression == correct_expression:\n        mistake = \"No mistake\"\n    else:\n        mistake = \"Mistake found\"\n    \n    # Return the correct workings\n    return correct_expression, mistake\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5/8\n    number_apples = total_fruit * fraction_apples\n    number_pears = total_fruit - number_apples\n    return int(number_pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    boys = 1\n    while True:\n        total = boys + 17  # Total number of children after girls join\n        if int((total)**0.5)**2 == total and int((boys)**0.5)**2 == boys:\n            return boys\n        boys += 1\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_in_8_years = cousin_age_now + 8\n    return cousin_age_in_8_years\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position_from_end = 2\n    total_people = ann_position + people_between + david_position_from_end\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 22:\n        if '8' in str(page):\n            count += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    sum_of_numbers = 555\n\n    third_number = sum_of_numbers - (first_number + second_number)\n    \n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    return 8 * (9 / 12)\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    day_climb = 3\n    night_slide = 1\n    progress_per_day = day_climb - night_slide\n    \n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n        \n    return days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n    \n    # Applying the Inclusion-Exclusion Principle for two sets\n    both_competitions = maths_competition + art_competition - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate_of_interest = 8 / 100\n    time_in_years = 3\n\n    simple_interest = principal * rate_of_interest * time_in_years\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 150 / 100 + 4 * x, 19)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To guarantee 29 balls of one color we must consider the worst case scenario:\n    # Picking all 40 red and 30 white balls, and then one blue ball to have 29 of the same color.\n    worst_case_for_29_blue = 40 + 30 + 1\n\n    # To guarantee 28 balls of another color, assume we have 29 blue balls.\n    # Now we should pick all 30 white balls and then need 28 red ones.\n    # We already have 40 red picked from the previous step, so no additional picks are needed for 28 red.\n    # So in total, we need to make sure we considered what we have so far for 29 blue and the 30 white already picked.\n    total_picks_for_28_red = worst_case_for_29_blue + 30\n\n    # To guarantee 10 balls of the last color, since we have 29 blue and 28 red,\n    # we only need to pick 10 white balls. However, since we have already picked 30 white, no more picks are needed.\n    total_picks = total_picks_for_28_red\n\n    return total_picks\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england_mountain = 978\n    height_world_highest_mountain = 8848\n\n    difference = height_world_highest_mountain - height_england_mountain\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 50))\n\n    for num in primes:\n        if (num + 2) % 3 == 0 and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the amounts Alicia, Beth, and Casey have initially\n    Alicia, Beth, Casey = symbols('Alicia Beth Casey')\n    \n    # Amount spent by Alicia and Casey\n    Alicia_spent = Alicia / 2\n    Beth_spent = 60\n    Casey_spent = 3 * Alicia_spent\n    \n    # Equations based on the problem statement\n    equation1 = Eq(Alicia + Beth + Casey, 900)\n    equation2 = Eq(Alicia - Alicia_spent, Beth - Beth_spent)\n    equation3 = Eq(Beth - Beth_spent, Casey - Casey_spent)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (Alicia, Beth, Casey))\n    \n    return solutions[Alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since the last digit of any factorial over 4! will always be 0 (due to the multiplication by 10 which comes from 2*5), \n    # the last digit of 2014! will also be 0.\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    factors = [2, 2, 3, 8, 5, 5, 5]\n    product = 1\n    for factor in factors:\n        product *= factor\n    \n    count = 0\n    while product % 10 == 0:\n        count += 1\n        product //= 10\n    \n    return count\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # x * 1000 + y * 100 + z * 10 + w -> original number\n    # w * 1000 + y * 100 + z * 10 + x -> new number\n\n    # Since the new number is 5877 greater than the original number,\n    # w * 1000 + y * 100 + z * 10 + x = (x * 1000 + y * 100 + z * 10 + w) + 5877\n    # Simplifying, we get: 999w + x = 5877\n    # That implies w is 5 and the rest is for x (since w is a digit, the max it could be is 5 to not exceed a digit limit)\n    # Thus, x = 5877 - 999*5\n\n    w = 5\n    x = 5877 - 999 * w\n\n    # Now we know the first and the last digits (x and w), we only need two other digits (y and z)\n    # We can assume y and z are both in the range of 0 to 9\n    # Also since new number is greater than original one y, z and w must be such that \n    # y and z are not limiting the value, which means they would best fit as 0\n    # because they are not affected by the transformation and thus cannot affect the difference in 5877\n\n    y = 0\n    z = 0\n\n    # Original number should then be the following\n    original_number = x * 1000 + y * 100 + z * 10 + w\n\n    return original_number\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 30\n    original_fraction_numerator = 6\n    original_fraction_denominator = 20\n\n    ans = (numerator * original_fraction_denominator) / original_fraction_numerator\n    return ans\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    \n    # Define the equation by performing the inverse operations\n    equation = ((x + 6) * 3) / 8 - 8 - 1\n    \n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = original_number * 10\n    equation = Eq(original_number + new_number, 253)\n\n    ans = solve(equation, original_number)[0]\n    return ans\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number of cookies eaten on the first day\n    first_day_cookies = symbols('first_day_cookies')\n\n    # Define the equation for the sum of the arithmetic sequence\n    # S = n/2 * [2a + (n-1)d]\n    # Here, n=5 (days), d=6 (different cookies each day), S=100 (total cookies)\n    total_days = 5\n    common_difference = 6\n    total_cookies = 100\n    equation = Eq(total_days / 2 * (2 * first_day_cookies + (total_days - 1) * common_difference), total_cookies)\n\n    # Solve the equation to find the number of cookies eaten on the first day\n    first_day_solution = solve(equation, first_day_cookies)\n\n    return first_day_solution[0]\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_up = 70\n    num_boxes = 8\n\n    remaining_seashells = (initial_seashells - given_to_sister - given_to_friend + picked_up)\n    seashells_per_box = remaining_seashells // num_boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for num in range(1, 90):\n        if num % 9 == 0 and (num + 1) % 5 == 0 and is_prime(num + 1):\n            return num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, cayden * 2)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = sum(solutions.values())\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    total_amount = 250\n\n    result = (percentage / 100) * total_amount\n\n    return result\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n    # There are 4 men and 4 women, so we have to alternate their positions.\n    # First we choose the arrangement for men, then for women.\n    # The men can be arranged in 4! ways and the women can be arranged in 4! ways.\n    # The first position can be a man or a woman, so we have 2 choices for the first position.\n    ans = 2 * factorial(4) * factorial(4)\n    return ans\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"HAPPY\")\n    p_count = \"HAPPY\".count(\"P\")\n    \n    ways = factorial(total_letters) // factorial(p_count)\n    return ways\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for page in range(1, 481):\n        count += str(page).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_at_alis = 2.40 / 8\n    cost_per_roll_at_myas = cost_per_roll_at_alis * 2\n    cost_of_three_rolls_at_myas = cost_per_roll_at_myas * 3\n    return cost_of_three_rolls_at_myas\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = sum(solutions.values())\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    total_girls = 12\n    fraction_boys = 2/5\n    fraction_girls = 1 - fraction_boys\n\n    total_children = total_girls / fraction_girls\n    number_of_boys = total_children * fraction_boys\n\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    # Prime factorization of 96 is 2^5 * 3^1\n    exponent_2 = 5\n    exponent_3 = 1\n\n    # The number of factors is (e_2+1)*(e_3+1)\n    factors_2 = exponent_2 + 1\n    factors_3 = exponent_3 + 1\n\n    total_factors = factors_2 * factors_3\n\n    return total_factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    people_between_peter_and_john = 1  # Peter himself, assuming John is not counted since he is behind Peter\n\n    total_people = people_in_front_of_peter + people_between_peter_and_john + people_behind_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    ans = 900 * (10 / 100) * (60 / 100)\n    return ans\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure = datetime.strptime(\"12:00\", \"%H:%M\")\n    duration = timedelta(hours=4)\n    \n    arrival = departure + duration\n    \n    return arrival.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    future_value = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    result = 0\n    for i in range(25, 17, -1):\n        result += (2 * i - 1) - (2 * i)\n    return result\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are only 3 different colors.\n    # To ensure getting at least one pair of the same color,\n    # Cindy must pick one more sock after picking 3 different colored socks.\n    ans = 3 + 1\n    return ans\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kilograms = 2.5\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    boys_fraction = 3 / 8\n    total_sweets = 360\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Let's find the number of boys first\n    boys = (total_sweets * boys_fraction) / sweets_per_boy\n    # Total number of children\n    total_children = total_sweets / (boys_fraction * sweets_per_boy + (1 - boys_fraction) * sweets_per_girl)\n    # Now, find the number of girls\n    girls = total_children - boys\n\n    return int(girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    map_distance_cm = 12\n    scale_cm_per_km = 5\n    ground_distance_km = (map_distance_cm / scale_cm_per_km)\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    # Assuming different letters stand for different digits so O cannot be 0 \n    # N can be any digit from 1 to 9 and O can be any digit from 1 to 9\n    for N in range(1, 10):\n        for O in range(1, 10):\n            if len(set([N, O])) == 2:  # Ensuring N and O are different digits\n                # Convert to two-digit integer NO\n                NO = N * 10 + O\n                # Check if NO and ON are both prime\n                if is_prime(NO) and is_prime(O * 10 + N):\n                    return NO  # Return the first NO found\n\ndef is_prime(n):\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i))\n    return product\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmph = 7.2\n    time_seconds = 24\n\n    # Convert speed from km/h to m/s (1 km/h = 1000 m / 3600 s)\n    speed_mps = speed_kmph * (1000 / 3600)\n    \n    # Calculate distance in meters\n    distance_meters = speed_mps * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Definition check\n    pip_statement = True\n    # According to the definition, 1 is neither prime nor composite\n    if not pip_statement:\n        ans = False  # Pip is not correct\n    else:\n        ans = True   # Pip is correct, following the standard definition\n    \n    return ans\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    maths_students = 70\n    foreign_lang_students = 54\n\n    both_classes_students = (maths_students + foreign_lang_students) - total_students\n\n    only_maths_students = maths_students - both_classes_students\n\n    return only_maths_students\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    ans = 1.5 * 1.33 * 1.25 * 1.2 * 1.16 * 1.14 * 1.12 * 1.11\n    return round(ans, 2)\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the symbol for x\n    x = symbols('x')\n    \n    # create the equation\n    equation = Eq((1/3 - 0.25) * x, 36)\n    \n    # solve the equation for x\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    # Since balloons are identical, we need to count each unique grouping once.\n    for x1 in range(1, 12): # We start from 1 because each group needs to have at least one balloon\n        for x2 in range(1, x1): # x2 must be less than x1 to maintain unique group sizes\n            for x3 in range(1, x2): # x3 must be less than x2 to maintain unique group sizes\n                x4 = 12 - (x1 + x2 + x3) # x4 is the remaining balloons\n                if x4 > 0 and x4 < x3: # x4 must be positive and less than x3 to maintain unique group sizes\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the number we are looking for as 'n'\n    n = symbols('n')\n\n    # Since the number leaves a remainder of 5 when divided by 7, a remainder of 6\n    # when divided by 8, and a remainder of 6 when divided by 10, we can write the\n    # following equations:\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n    \n    # We are also given that the sum of the quotients when the number is divided by 6,\n    # 7, and 8 is 265. So we can write this equation:\n    eq4 = Eq(n // 6 + n // 7 + n // 8, 265)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), n)\n    \n    # The solutions are returned as a list of tuples, we convert it to list to filter positive integer solutions\n    filtered_solutions = [s for s in solutions if s.is_integer and s > 0]\n\n    # As per our setup, there must be only one solution that satisfies all equations\n    return filtered_solutions[0]\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    number = 40309\n    \n    while True:\n        number += 1\n        if str(number) == str(number)[::-1]:\n            return number - 40309\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kasia_keeps = 13\n    sweets_shared = total_sweets - kasia_keeps\n    sweets_each_friend = sweets_shared // 2\n    lucie_gives_to_joan = sweets_each_friend * (2 / 7)\n    lucie_keeps = sweets_each_friend - lucie_gives_to_joan\n\n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let's assume granddad's weekly pension is 1 (whole)\n    weekly_pension = 1\n    \n    # One quarter spent on Friday night out\n    friday_spent = weekly_pension / 4\n    remaining_after_friday = weekly_pension - friday_spent\n    \n    # One third of what remains is spent on Saturday night\n    saturday_spent = remaining_after_friday / 3\n    remaining_after_saturday = remaining_after_friday - saturday_spent\n    \n    # Fraction of his pension left for the rest of the week\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the total litres of water needed for the fish tank.\n    # If he uses a 5-litre pail, 4 litres of water will overflow, so we can write the equation:\n    # x + 4 = 5k where k is an integer representing the number of 5-litre pails used.\n    # If he uses a 3-litre pail, he needs another 4 more pails of water, so we can write the equation:\n    # x = 3n + 4 * 3 where n is an integer representing the number of 3-litre pails used without the additional 4 pails.\n\n    for k in range(1, 1000):  # Iterating through a reasonable range, since we don't expect an extremely large tank.\n        if (5 * k - 4) % 3 == 0:  # The total water (including overflow) must be divisible by 3 to use 3-litre pails.\n            n = (5 * k - 4) // 3 - 4  # Calculate n based on k and subtract the extra 4 pails.\n            if n >= 0:  # Check that n is non-negative, as we can't have a negative number of pails.\n                return 5 * k - 4  # Return the amount of water needed without the overflow.\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n    \n    adults = (ratio_adults / total_ratio) * total_people\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    school_bags = 3\n    pencil_boxes = 4\n    combinations = school_bags * pencil_boxes\n    return combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the number of apples and y be the number of pears initially.\n    x, y = symbols('x y')\n\n    # Given that the ratio of apples to pears is 3:4:\n    # x/y = 3/4 => 4x - 3y = 0 (equation 1)\n\n    # After replacing 36 pears with 36 apples, the number of apples becomes 1.5 times the number of pears:\n    # (x + 36) / (y - 36) = 1.5 => 2*(x + 36) - 3*(y - 36) = 0 (equation 2)\n\n    equations = (\n        4*x - 3*y,\n        2*(x + 36) - 3*(y - 36)\n    )\n    solutions = solve(equations, (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    # Let the side of the square formed by boys be 'b'\n    # Let the side of the square formed by girls be 'g'\n    # Since the difference between the boys and the girls is one layer,\n    # we can say that b = g + 2 (boys form the outer layer)\n    # The total number of boys will then be b^2 and the number of girls g^2\n    # According to the problem b^2 - g^2 = 52\n\n    # We will loop through possible values of 'g' (the inner square) and calculate 'b'\n    # Then we will check if the condition b^2 - g^2 = 52 is satisfied\n    for g in range(1, 100):  # We use a reasonable upper limit for the range\n        b = g + 2\n        if (b**2 - g**2) == 52:\n            # If the condition is satisfied, we calculate the total number of students\n            # which is the sum of the numbers of boys and girls\n            total_students = b**2 + g**2\n            return total_students\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_sequence = \"6129043\"\n    num_str = recurring_sequence * (212 // len(recurring_sequence)) + recurring_sequence[:212 % len(recurring_sequence)]\n    ans = sum(int(digit) for digit in num_str)\n    return ans\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for n in range(1, 100):  # Assuming the original square has a side length less than 100\n        if (n * n + n + n + 1) == (n + 1) * (n + 1):\n            total_soldiers = n * n + 31\n            break\n    return total_soldiers\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1  # a willow tree between every 2 ginkgo trees\n    \n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    # Initialize variables for tracking the number of 2s and 5s\n    # in the prime factorization of the factorial\n    count_2 = 0\n    count_5 = 0\n    n = 1\n\n    # The number of zeros at the end of n! is determined by the number of pairs of (2, 5)\n    # in its prime factorization, since 10 = 2 * 5. Therefore, we just need to count the number\n    # of 5s as there will always be more 2s than 5s.\n    while count_5 <= 28:\n        # Copy the current value to check for multiple factors of 5\n        temp_n = n\n        while temp_n % 5 == 0:\n            count_5 += 1\n            temp_n //= 5\n        n += 1\n\n    # Since the loop will add 1 to n after the while condition is no longer satisfied,\n    # the actual n will be one less than the current value of n in the variable.\n    return n - 1\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    ans = (2 / 3) * 729\n    return ans\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n_people = 12\n    total_handshakes = n_people * (n_people - 1) // 2\n    return total_handshakes\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # In the worst case, Daniel picks socks of all different colors first\n    worst_case_picks = 5  # One of each color (yellow, green, white, red, black)\n    \n    # Then he needs to pick enough socks to be sure to have two pairs of matching socks.\n    # Since he could pick pair of red and then pair of black,\n    # just one more sock would give him two pairs of one of the other colors\n    # yellow, green, or white, whichever he had picked first, because these have more than 2 socks.\n    \n    minimum_picks_needed = worst_case_picks + 3 # Two more to form one pair, plus one to ensure a second pair\n    \n    return minimum_picks_needed\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09\n    chocolate_bar_price = 0.55\n    total_lemonade_cost = lemonade_price * 5\n    total_chocolate_cost = chocolate_bar_price * 6\n    total_cost = total_lemonade_cost + total_chocolate_cost\n    ten_pound_note = 10\n    change = ten_pound_note - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_age_current = symbols('sam_age_current')\n\n    sam_age_future = sam_age_current + 4\n    sam_age_past = sam_age_current - 4\n\n    equation = Eq(sam_age_future, 2 * sam_age_past)\n\n    solved_age = solve(equation, sam_age_current)\n\n    return solved_age[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7     # Number of letters in RAINBOW\n    vowels = 3            # Number of vowels in RAINBOW (A, I, O)\n    consonants = 4        # Number of consonants in RAINBOW (R, N, B, W)\n    \n    # Calculate permutations of all letters\n    total_permutations = factorial(total_letters)\n    \n    # Calculate permutations of vowels\n    vowels_permutations = factorial(vowels)\n    \n    # Calculate permutations with vowels always together\n    vowels_together_permutations = vowels_permutations * factorial(consonants + 1)\n    \n    # Calculate permutations with vowels never together\n    permutations_vowels_never_together = total_permutations - vowels_together_permutations\n    \n    return permutations_vowels_never_together\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits\n    digits = ['3', '7', '2', '8']\n    perms = [''.join(p) for p in permutations(digits)]\n\n    # Convert each permutation to an integer and filter out even numbers\n    odd_numbers = [int(p) for p in perms if int(p) % 2 != 0]\n\n    # Find the smallest odd number\n    n = min(odd_numbers)\n\n    return n\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for number in range(10, 21):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)            # chickens and goats add up to 40\n    equation2 = Eq(3 * chickens, 5 * cows)          # 3 times chickens is 5 times cows\n    equation3 = Eq(2 * goats, 10 * cows)            # 2 times goats is 10 times cows\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    chicken_feet = 2 * solutions[chickens]          # each chicken has 2 feet\n    goat_feet = 4 * solutions[goats]                # each goat has 4 feet\n    cow_feet = 4 * solutions[cows]                  # each cow has 4 feet\n\n    total_feet = chicken_feet + goat_feet + cow_feet\n    \n    return total_feet\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let a be the first term and d be the common difference\n    # The sum of the first n terms of an arithmetic progression can be expressed as: S_n = n/2 * (2a + (n-1)d)\n    # We have the following two equations based on the given information:\n    # S_10 = 10/2 * (2a + (10-1)d) = 20\n    # S_30 = 30/2 * (2a + (30-1)d) = 90\n\n    # From S_10, we can express a in terms of d\n    # 5 * (2a + 9d) = 20\n    # Simplifying, we get: 2a + 9d = 4\n\n    # From S_30, we can express a in terms of d\n    # 15 * (2a + 29d) = 90\n    # Simplifying, we get: 2a + 29d = 6\n    \n    # Now we have a system of two equations:\n    # 1) 2a + 9d = 4\n    # 2) 2a + 29d = 6\n    \n    # Subtracting equation 1 from equation 2 gives us:\n    # (2a + 29d) - (2a + 9d) = 6 - 4\n    # 2a + 29d - 2a - 9d = 2\n    # 20d = 2\n    # d = 2 / 20\n    d = 2 / 20\n\n    return d\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    # Let x be the number of stickers Penny has. Therefore, Amy has (5/4)*x stickers.\n    # According to the given information, we have:\n    # x + (5/4)*x = 117\n\n    total_stickers = 117\n    ratio_sum = 5 + 4  # Sum of the parts of the ratio\n\n    # Find the number of stickers Penny has\n    penny_stickers = (4 / ratio_sum) * total_stickers\n\n    return int(penny_stickers)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    total_words_in_6_days = words_in_9_minutes * days\n\n    return total_words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kph = 3.6  # speed in kilometers per hour\n    speed_mps = speed_kph * (1000 / 3600)  # converting speed to meters per second (1000 m in a km, 3600 s in an hour)\n    time_seconds = 300\n\n    distance_meters = speed_mps * time_seconds  # distance = speed * time\n\n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Number of apples Jack sold yesterday\n    sold_apples = 40\n    # Fraction of apples brought yesterday to the apples he sold\n    fraction_brought_yesterday = 4 / 7\n    # Fraction of all apples he has to the apples he brought yesterday\n    fraction_of_all_apples = 1 / 2\n\n    # Calculate the number of apples he brought yesterday\n    brought_yesterday = sold_apples / fraction_brought_yesterday\n    # Calculate the total number of apples he has\n    total_apples = brought_yesterday / fraction_of_all_apples\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    # Digits to be used\n    digits = ['9', '0', '2', '3']\n    \n    # Generate all possible permutations of these digits\n    all_numbers = [''.join(p) for p in permutations(digits)]\n    \n    # Convert each permutation from string to integer\n    all_numbers = [int(number) for number in all_numbers if number[0] != '0']\n\n    # Find the number which is closest to 2978\n    closest_num = min(all_numbers, key=lambda x: abs(x - 2978))\n    \n    return closest_num\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    ans = 1 # Start with a single region\n    for i in range(1, 11):  # Adding each line one by one\n        ans += i  # Each new line can intersect all previous lines in at most as many points as its index\n    return ans\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    difference = 4\n    last_term = 80\n    \n    # Calculate number of rows using the formula for nth term of arithmetic sequence\n    # last_term = first_term + (num_rows - 1) * difference\n    # num_rows = ((last_term - first_term) / difference) + 1\n    num_rows = ((last_term - first_term) // difference) + 1\n    \n    # Calculate the sum of an arithmetic sequence\n    # sum = (num_rows / 2) * (first_term + last_term)\n    total_seats = (num_rows / 2) * (first_term + last_term)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for num in range(200, 501):\n        if '3' in str(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    original_number = (result + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # The average of the first 2 numbers is 10, so their sum is 20\n    sum_first_2 = 10 * 2\n    \n    # The average of the last 2 numbers is 22, so their sum is 44\n    sum_last_2 = 22 * 2\n    \n    # The average of the first and last numbers is 14, so their sum is 28\n    sum_first_last = 14 * 2\n    \n    # Let the numbers be a, b, c, d\n    # a + b = sum_first_2\n    # b + c = sum_middle_2 (unknown)\n    # c + d = sum_last_2\n    # a + d = sum_first_last\n    \n    # To find the sum of the two middle numbers b and c, we can equate the sum of all numbers and subtract the known sums\n    sum_all = sum_first_2 + sum_last_2  # a + b + c + d\n    sum_first_last = 28  # a + d\n    \n    # Subtract the sum of first and last number from the total sum to get sum_middle_2\n    sum_middle_2 = sum_all - sum_first_last  # (a + b + c + d) - (a + d)\n    \n    # The average of the two middle numbers is then the sum of the two middle numbers divided by 2\n    average_middle_2 = sum_middle_2 / 2\n\n    return average_middle_2\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    # Since the average of A and B is 22, their sum is A + B = 22 * 2\n    sum_AB = 22 * 2\n    \n    # C is given as 19\n    C = 19\n    \n    # The sum of A, B, and C is sum_AB + C\n    sum_ABC = sum_AB + C\n    \n    # The average of A, B, and C is the sum divided by the number of terms, which is 3\n    average_ABC = sum_ABC / 3\n    \n    return average_ABC\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    avg_chinese_english = 34\n    avg_english_math = 36\n    avg_chinese_math = 44\n\n    total_avg_double_counted = (avg_chinese_english + avg_english_math + avg_chinese_math)\n    # Since each individual appears twice in total_avg_double_counted, the average age of the three teachers is:\n    avg_all_three = total_avg_double_counted / 2\n\n    return avg_all_three\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    birth_date = (1533, 9, 7)\n    death_date = (1603, 3, 24)\n\n    years = death_date[0] - birth_date[0]\n    months = death_date[1] - birth_date[1]\n    days = death_date[2] - birth_date[2]\n\n    # If the death month is before the birth month or\n    # if the death day is before the birth day, adjust years and months accordingly\n    if months < 0 or (months == 0 and days < 0):\n        years -= 1\n\n    return years\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n\n    # The Pigeonhole Principle dictates that since we have one more cake than\n    # a multiple of the number of layers, at least one layer must have more\n    # than the average. The average number of cakes per layer when distributing\n    # evenly would be total_cakes // layers.\n    average_cakes = total_cakes // layers\n\n    # Since we cannot have a fractional cake, and we must have at least one more than\n    # the average, the layer with the most cakes will have:\n    max_cakes = average_cakes + 1\n\n    return max_cakes\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    # Factorize 7007 to find the prime factors\n    prime_factors = []\n    n = 7007\n    for i in range(2, n + 1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n            \n    # Find two 2-digit multiples of 7 whose product is 7007\n    for i in prime_factors:\n        for j in prime_factors:\n            if i * j == 7007 and 10 <= i < 100 and 10 <= j < 100:\n                return i + j\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    import math\n    side_length = math.isqrt(23)\n    rope_to_cut = side_length ** 2\n    return 23 - rope_to_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    return (21 + 1)*7 - (20 + (1 * 7))\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    sum_frac_parts = 0\n    for i in range(1, 2019):\n        fractional_part = (2018 + i) / 5 - ((2018 + i) // 5)\n        sum_frac_parts += fractional_part\n    return sum_frac_parts\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = 10  # number of boxes\n    a1 = 11  # number of cookies in the first box\n    an = symbols('an')\n    common_difference = symbols('d')\n    \n    # Sum of arithmetic progression formula: S_n = n/2 * (a1 + an)\n    total_cookies = 425\n    sum_equation = Eq(n/2 * (a1 + an), total_cookies)\n    \n    # an = a1 + (n - 1) * d\n    nth_term_equation = Eq(an, a1 + (n - 1) * common_difference)\n    \n    solutions = solve((sum_equation, nth_term_equation), (an, common_difference))\n\n    return solutions[common_difference]\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Chelsia and Benson's money\n    chelsia, benson = symbols('chelsia benson')\n\n    # Create equations based on the problem statement\n    equation1 = Eq((3/4) * chelsia, (2/3) * benson)\n    equation2 = Eq(benson - chelsia, 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    # Calculate the total sum of Chelsia and Benson's money\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    # In the provided digits we have 1 repeated twice.\n    repetitions_of_one = 2\n    # Calculating the number of permutations for the digits\n    # Taking into account the repetitions for digit 1.\n    permutations_with_repetitions = factorial(total_digits) // factorial(repetitions_of_one)\n\n    return permutations_with_repetitions\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 / 10\n    year_5_girls = year_5_students * 3 / 5\n    \n    return int(year_5_girls)\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A = 1 / sum(1/x for x in range(1995, 2009))\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of each chair as c and each table as t.\n    t, c = symbols('t c')\n\n    # The cost of 5 tables and 12 chairs is $720\n    equation1 = Eq(5 * t + 12 * c, 720)\n\n    # Each table costs $25 more than each chair\n    equation2 = Eq(t, c + 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for number in range(200, 401):\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 5):\n            return number\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the speed of Carter\n    x = symbols('x')\n    \n    # The speed of Martin is 20 metres per minute faster than Carter's speed\n    martin_speed = x + 20\n    \n    # The time taken by Martin and Carter to complete a race is in the ratio 9:13\n    # Which means Martin's time : Carter's time = 9 : 13\n    # Since time = distance / speed, and the distance of the race is the same for both,\n    # We can say Martin's speed : Carter's speed = 13 : 9\n    equation = Eq(martin_speed / x, 13 / 9)\n    \n    # Solve the equation to find Carter's speed\n    solution = solve(equation, x)\n    carter_speed = solution[0]\n    \n    return carter_speed\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Let the first term of the sequence be 'a'.\n    # The common difference 'd' for consecutive odd numbers is 2.\n    # There are 7 terms, hence 'n' is 7.\n    # The sum 'S' of an arithmetic sequence is given by S = n/2 * (2a + (n - 1)d).\n    # Substituted in the problem: S = 357, d = 2, n = 7.\n    # Therefore: 357 = 7/2 * (2a + (7 - 1)2)\n    # Simplifying the equation: 357 = 7/2 * (2a + 12)\n    # 357 * 2 / 7 = 2a + 12\n    # (357 * 2 / 7) - 12 = 2a\n    # a = ((357 * 2 / 7) - 12) / 2\n    a = ((357 * 2 / 7) - 12) / 2\n    return int(a)\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3<=12:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # The number 2 is both even and prime.\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Fred and George painting together\n    fg_rate = 1 / 6\n    \n    # Fred painting alone\n    f_rate = 1 / 9\n    \n    # George painting alone (g_rate)\n    g_rate = fg_rate - f_rate\n    \n    # Time taken by George to paint alone is the reciprocal of his rate\n    g_time = 1 / g_rate\n    \n    return g_time\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    return 18 - x\n\nans = solution(0)  # Replace 0 with the value of x when provided"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # Pigeonhole principle: if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n\n    red_apples = 14\n    yellow_apples = 20\n    # To ensure that there are two apples of the same colour,\n    # we need to pick red_apples + 1 from them, since if we pick one of each color,\n    # we would have red_apples, and then one more ensures there's a pair of at least one color.\n    \n    ans = red_apples + 1\n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let the number of red pens sold be x\n    # Initial ratio of red to black pens is 3:7\n    # Final ratio is 5:13 with 20 red pens left\n    # Therefore, the initial number of red pens is 20 + x\n    # The initial number of black pens is 20 * (7/3) + x (since x red and x black pens were sold)\n    \n    # The final ratio of red to black pens left can be represented as:\n    # (20)/(20 * (7/3) + x - x) = 5/13\n    # Cross multiply to solve for x:\n    # 260 = 100 + 5x => 5x = 160 => x = 32\n    \n    x = 32\n    return x\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Define the total number of legs for each type of pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Calculate the total number of legs for already known pets\n    total_known_legs = (2 * legs_per_cat) + (2 * legs_per_dog) + (1 * legs_per_rabbit)\n\n    # Calculate the remaining number of legs, which are assumed to be of birds\n    remaining_legs = 28 - total_known_legs\n\n    # Calculate the number of birds Tina has\n    number_of_birds = remaining_legs // legs_per_bird\n\n    return number_of_birds\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "from math import factorial\n\ndef solution():\n    ways = factorial(5) // factorial(5 - 4)\n    return ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Initial house value at the end of the first year, increased by 5%\n    value_after_increase = 10500\n    # Calculate the value of the house before the 5% increase\n    original_value_before_increase = value_after_increase / 1.05\n    # Calculate the value at the end of the second year, after losing 5% of its value\n    value_after_decrease = original_value_before_increase * 0.95\n    \n    # Calculate the profit or loss compared with the original price\n    profit_or_loss = value_after_decrease - original_value_before_increase\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // (5 * 7)\n    \n    # Using Inclusion-Exclusion Principle\n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    for num in range(11, 20):\n        if 42 % num == 0:\n            return num\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    desired_average = 6\n    \n    total_numbers_with_square = 4\n    total_sum_needed = desired_average * total_numbers_with_square\n    \n    current_sum = sum(numbers)\n    number_in_square = total_sum_needed - current_sum\n    \n    return number_in_square\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ruler, pen = symbols('ruler pen')\n\n    equation1 = Eq(2 * ruler + 9 * pen, 21.60)\n    equation2 = Eq(ruler, pen + 0.90)\n    \n    solutions = solve((equation1, equation2), (ruler, pen))\n    \n    return solutions[ruler]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = total_weight / bag_weight\n    return int(num_bags) if num_bags.is_integer() else int(num_bags) + 1\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    # Reverse each step\n    step7 = result + 50\n    step6 = step7 / 5\n    step5 = (step6 + 20) / 5\n    step4 = (step5 - 6) / 4\n    \n    # Now we have the month and day in combined form (month * 100 + day)\n    # Extract the month and the day from the number\n    month = step4 // 100\n    day = step4 % 100\n    \n    # Return the birthday as a tuple (month, day)\n    return (int(month), int(day))\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import isprime\n\ndef solution():\n    for n in range(1, 50):\n        if (n + 2) % 3 == 0 and isprime(n) and (n - 2) % 5 == 0 and n < 50:\n            return n\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for perm in permutations(digits):\n        first_num = int(''.join(perm[0:3]))\n        second_num = int(''.join(perm[3:5]))\n        third_num = int(''.join(perm[5:7]))\n        \n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n\n    num_terms = int((last_term - first_term) / difference + 1)\n    sum_forward = (num_terms * (first_term + last_term)) // 2\n\n    # Since the sequence goes forward and then backward, the sum is doubled, but we must subtract the last term as it's not repeated\n    sum_total = 2 * sum_forward - last_term\n\n    return sum_total\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    total_money = 10\n    price_per_cup = 5\n    refill_price = 1\n\n    cups_purchased = total_money // price_per_cup\n    remaining_money = total_money % price_per_cup\n    refills_afforded = remaining_money // refill_price\n\n    total_cups_of_coke = cups_purchased + refills_afforded\n\n    return total_cups_of_coke\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    total_peaches_for_3_monkeys_in_2_days = 96\n    days = 4\n    monkeys = 5\n\n    peaches_per_monkey_per_day = total_peaches_for_3_monkeys_in_2_days / (3 * 2)\n    total_peaches_for_5_monkeys_in_4_days = peaches_per_monkey_per_day * monkeys * days\n    return total_peaches_for_5_monkeys_in_4_days\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial as fact\n\ndef solution():\n    # Total ways to arrange the story books, comic books, and science books amongst themselves:\n    story_book_ways = fact(2)\n    comic_book_ways = fact(3)\n    science_book_ways = fact(4)\n\n    # Total ways to arrange the groups of different kinds of books:\n    group_arrangements = fact(3)\n\n    # The total arrangements is the product of arranging the individual groups and arranging the groups themselves\n    total_arrangements = story_book_ways * comic_book_ways * science_book_ways * group_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # We need to distribute 5 identical ice-creams to 3 friends, with each getting at least one.\n    # Since each must get at least one, we give one ice-cream to each friend first.\n    remaining_ice_creams = 5 - 3  # We have given 3 away, one to each.\n\n    # Now we have 2 identical ice-creams left to distribute to 3 friends.\n    # This problem is equivalent to finding the number of non-negative integer\n    # solutions to the equation x1 + x2 + x3 = 2,\n    # where each xi represents the additional ice-creams given to the i-th friend.\n    # This is a problem of distributing n identical items into r groups,\n    # which can be solved using the combination formula for combinations with repetition:\n    # C(n + r - 1, r - 1), where n is the number of items and r is the number of groups.\n    # Here, n is remaining_ice_creams (2) and r is the number of friends (3).\n\n    from math import comb\n    ans = comb(remaining_ice_creams + 3 - 1, 3 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # average spending from January to March: 450 dollars/month for 3 months\n    jan_to_mar = 450 * 3\n\n    # average spending from April to July: 350 dollars/month for 4 months\n    apr_to_jul = 350 * 4\n\n    # total spending from August to October: 1250 dollars\n    aug_to_oct = 1250\n\n    # average spending from November to December: 400 dollars/month for 2 months\n    nov_to_dec = 400 * 2\n\n    # total spending for the year\n    total_spending = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n\n    # total number of months in a year\n    total_months = 12\n\n    # average spending per month from January to December\n    average_per_month = total_spending / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the price of one serving of ice cream\n    # Sophie wanted to buy 5 servings, so the total cost is 5*x\n    # Sophie was short of $2.30, so the money given by her mother is 5*x - 2.30\n    # Sophie bought 3 servings of ice cream, which is 3*x, and had $0.30 left\n    # So the money given by her mother is also 3*x + 0.30\n    # Therefore, we have the equation: 5*x - 2.30 = 3*x + 0.30\n    # By solving this equation we find x, then we can calculate the money given by Sophie's mother\n    x = (2.30 + 0.30) / (5 - 3)\n    money_given = 3*x + 0.30\n    return money_given\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5/(3*x+2)) + (2/(1.5*x+1)), (4.5/(5-6*x)) - (3/(2.5-3*x)))\n\n    ans = solve(equation, x)\n\n    return ans\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    for M in range(10):\n        total_sweets = int(f\"127{M}\")\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    # Let T be the additional tax rate to be found on the amount above $50,000\n    # Let tax_paid be the total tax the doctor paid which is $10,000\n\n    tax_paid = 10000\n    base_tax = 0.06 * 50000  # Tax for the first $50,000\n\n    # Let x be the amount above $50,000 which is taxed at (6 + T)%\n    # We know that the total income is $120,000, so x = 120,000 - 50,000\n    x = 120000 - 50000\n\n    # The tax_paid is the sum of the base tax and the tax on the amount above $50,000\n    # tax_paid = base_tax + (0.06 + T/100) * x\n    # Simplifying the above:\n    # 10000 = 3000 + (0.06 + T/100) * 70000\n    # 7000 = (0.06 + T/100) * 70000\n    # 0.1 = 0.06 + T/100\n    # T/100 = 0.1 - 0.06\n    # T = (0.1 - 0.06) * 100\n\n    T = (tax_paid - base_tax) * 100 / x\n\n    return T\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # Given proportion equation: 9/x = y/2\n    proportion_equation = Eq(9 / x, y / 2)\n\n    # Solve for y in terms of x\n    y_solution = solve(proportion_equation, y)\n\n    # Find the value of y when x is 3\n    y_value = y_solution[0].subs(x, 3)\n\n    return y_value\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    possible_nums = permutations('2356')\n    odd_numbers = [int(''.join(p)) for p in possible_nums if int(p[-1]) % 2 != 0]\n\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    # speed of Sam walking to the library\n    speed_walk = 40  # in meters per minute\n\n    # speed of Sam cycling back from the library\n    speed_cycle = 60  # in meters per minute\n\n    # Let's assume the distance to the library is d meters.\n    # Time taken to walk to the library is d / speed_walk\n    # Time taken to cycle back is d / speed_cycle\n\n    # The total distance for the trip (to the library and back) is 2d meters.\n    # The total time for the trip is d / speed_walk + d / speed_cycle.\n\n    # The average speed is the total distance divided by the total time.\n    # average_speed = total_distance / total_time\n    # average_speed = (2 * d) / (d / speed_walk + d / speed_cycle)\n    \n    # Simplify the expression by dividing both numerator and denominator by d.\n    # average_speed = 2 / (1 / speed_walk + 1 / speed_cycle)\n\n    average_speed = 2 / (1 / speed_walk + 1 / speed_cycle)\n\n    return average_speed\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # Since we want to ensure at least two balls of the same color,\n    # we can think of the worst case scenario where we try to avoid it.\n    # If you take one green and one blue, you are not guaranteed to have two of the same color.\n    # The next ball you take out, no matter what color, will ensure that you have at least two of the same color.\n    # Therefore, the answer is the number of colors plus one.\n\n    num_colors = 2  # green and blue\n    ans = num_colors + 1  # to ensure at least two of the same color\n\n    return ans\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's assume the number we start with is 'n'.\n    # Follow the steps mentioned in the question.\n    result = n = symbols('n')  \n    result += 3\n    result *= 2\n    result -= 2\n    result += 10\n    result /= 2\n    result -= n\n  \n    # Simplify the expression to find the number left.\n    ans = simplify(result)\n    return ans\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377/6 * 5/3)\n\n    answer = numerator / denominator\n\n    return round(answer, 3)\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = 20 * 4 + 10 * 5 + 20 * 6\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(51, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n    \n    # original relationship between Jack's and Kyle's money\n    equation1 = Eq(jack, 5 * kyle)\n    \n    # after Jack lost $72, new relationship\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n    \n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Count the maximum number of shirts that could be chosen without getting a yellow shirt\n    non_yellow_shirts = 6 + 4 + 12  # orange + pink + brown shirts\n    # To ensure getting at least one yellow shirt, Annabella must take one more than all non-yellow shirts\n    return non_yellow_shirts + 1\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the original number of bracelets Felicia had, and j be Janice's bracelets\n    f, j = symbols('f j')\n\n    # Janice's original number was 96\n    j = 96\n\n    # Felicia sells 3/5th of her bracelets\n    felicia_sold = 3*f/5\n\n    # Janice buys 2/5th of what Felicia sold\n    janice_bought = 2*felicia_sold/5\n\n    # After selling and buying, Felicia has 2/5th of her bracelets left\n    felicia_remain = 2*f/5\n\n    # Janice now has her original bracelets plus what she bought from Felicia\n    janice_after_buying = j + janice_bought\n\n    # The ratio of the number of Felicia's bracelets to Janice's becomes 5:7\n    # Therefore, Felicia's remaining bracelets is to Janice's total bracelets after buying is 5:7\n    ratio_eq = Eq(felicia_remain * 7, janice_after_buying * 5)\n\n    # We know Janice's original number of bracelets, so we can solve for f\n    f_value = solve(ratio_eq, f)\n\n    # Calculate the number of bracelets Janice bought from Felicia\n    bracelets_bought_by_janice = 2 * ((3*f_value[0])/5) / 5\n\n    return bracelets_bought_by_janice.evalf()\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_price = 3.90\n    individual_price = 0.35\n    total_individual_price = individual_price * 15\n    savings = total_individual_price - multipack_price\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    total_amount = principal * (1 + interest_rate * time_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    # Given equation: 3/4 + 3/4 + 3/4 = 1 + box * 1/4\n    # Simplifying the left side: (3/4) * 3 = 9/4\n    # Simplifying the right side: 1 = 4/4\n    # Therefore: (9/4) = (4/4) + box * (1/4)\n    # Solving for the box: box * (1/4) = (9/4) - (4/4)\n    # Simplifying the right side: box * (1/4) = 5/4\n    # Multiplying both sides by 4 to solve for box: box = (5/4) * 4\n    # Simplifying: box = 5\n    \n    box = (5 / 4) * 4\n    return box\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    # Calculate the cases where there are exactly two sevens\n    # Two sevens can be in the following places (_77, 7_7, 77_)\n    # For each case, there are 9 possibilities for the non-seven digit (1-9 for the first digit, 0-9 for others)\n    two_sevens_count = 3 * 9 - 1  # Subtract one for the 777 case as it will be counted in the three sevens\n    \n    # Calculate the cases where all digits are sevens\n    # Only one such case: 777\n    three_sevens_count = 1\n    \n    # Total number of three-digit numbers with at least two sevens\n    total_count = two_sevens_count + three_sevens_count\n    \n    return total_count\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    day_climb = 3\n    night_slip = 2\n    net_distance = day_climb - night_slip\n    days = 0\n    \n    while total_distance > 0:\n        days += 1\n        total_distance -= day_climb\n        if total_distance <= 0:\n            break\n        total_distance += night_slip\n        \n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # Number of pages read in the first four days\n    first_four_days = 25 * 4\n    # Number of pages read in the following six days\n    following_six_days = 40 * 6\n    # Number of pages read in the last five days\n    last_five_days = 80\n\n    # Total number of days\n    total_days = 4 + 6 + 5\n    # Total number of pages read\n    total_pages = first_four_days + following_six_days + last_five_days\n\n    # Average number of pages read per day\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let x be the original number of toys her brother had\n    # Penny has x + 10 toys originally\n    # After giving away some toys, Penny has 14 toys, and her brother has 12 toys\n    # This implies Penny gave away (x + 10 - 14) toys to her brother\n    \n    # Set up the equation based on the information provided:\n    # Original toys of brother (x) + the toys received (x + 10 - 14) = 12\n    \n    # Simplify the equation:\n    # 2x - 4 = 12\n    \n    # Solve the equation for x:\n    x = (12 + 4) / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = chocolate_cookies * 3\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # Perform the calculation explicitly as the operation is simple and out of the multiplication table\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    # Given\n    num_terms = 20\n    sum_seq = 560\n    common_difference = 2\n\n    # Calculation using sum of arithmetic progression formula: S_n = n/2 * (2a + (n-1)d)\n    # Where S_n is the sum of the arithmetic progression, n is the number of terms, a is the first term, and d is the common difference.\n    # Rearranging the formula to solve for the first term (a):\n    # a = (S_n/n - (n-1)d/2) / 2\n    \n    a = (sum_seq / num_terms - (num_terms - 1) * common_difference / 2) / 2\n\n    return a\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1])  # Interchange the digits\n        if reversed_age + 1 == age / 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    sum_of_series = (n * (n + 1)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # To guarantee Tom has 4 cards of the same suit, he might pick 3 cards from each of the other 3 suits first.\n    max_cards_without_four_of_a_kind = 3 * 3  # 3 cards from each of the 3 suits\n\n    # The next card he draws is guaranteed to be the fourth card of one of the suits.\n    cards_to_draw_for_four_of_a_kind = max_cards_without_four_of_a_kind + 1\n\n    return cards_to_draw_for_four_of_a_kind\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_sold = 60 / 100\n    unsold_tickets = 28\n    total_capacity = unsold_tickets / (1 - percent_sold)\n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    spent = symbols('spent')\n    hayden_saved = 1420\n    mitchell_saved = 505\n    \n    equation = Eq((hayden_saved - spent), 4 * (mitchell_saved - spent))\n    solution = solve(equation, spent)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    number = 15 * 4\n    ans = (number * 2) / 3\n    return ans\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    girls_ratio = 1 - 3/8  # The fraction of children who were girls\n    children_ratio = 1 - 3/7  # The fraction of the people who were children\n    total_girls = 45  # Given number of girls\n\n    # If 5/8 of the children are girls and there are 45 girls,\n    # we can find the total number of children.\n    total_children = total_girls / girls_ratio\n\n    # If 4/7 of the people are children, we can find the total number of people.\n    total_people = total_children / children_ratio\n\n    return int(total_people)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Jim's initial amount calculation\n    two_dollar_notes = 5 * 2  # 5 two-dollar notes\n    fifty_cent_coins = 7 * 0.50  # 7 fifty-cent coins\n    total_initial_amount = two_dollar_notes + fifty_cent_coins\n    \n    # File purchase\n    purchase_amount = 11.95\n    # Jim's remaining amount after purchase\n    remaining_amount = total_initial_amount - purchase_amount\n    \n    return remaining_amount\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_all_numbers = (n * (n + 1)) // 2\n    return sum_all_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n\n    total_sales = saturday_sales + sunday_sales\n\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_distance = day_climb - night_slide\n\n    # Calculate the days needed without the final climb\n    days_without_final_climb = (total_distance - day_climb) // net_distance\n\n    # The snail will always come out on the day\n    days_with_final_climb = days_without_final_climb + 1\n\n    return days_with_final_climb\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    n = 18  # Total number of pupils\n    r = 3   # Number of pupils to be seated in a row\n\n    # Calculating the number of permutations: nPr = n! / (n-r)!\n    ans = factorial(n) // factorial(n - r)\n\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between_each = 2\n    \n    # Since there are (ginkgo_trees - 1) intervals between ginkgo trees\n    total_willow_trees = willow_trees_between_each * (ginkgo_trees - 1)\n    \n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_still_water = 28  # Speed of the ship in still water (km/h)\n    speed_current = 3       # Speed of the current (km/h)\n    distance = 150          # Distance to travel upstream (km)\n\n    # Speed of the ship going upstream\n    speed_upstream = speed_still_water - speed_current\n\n    # Time = Distance / Speed\n    time = distance / speed_upstream  # Time to travel 150 km upstream (hours)\n\n    return time\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n    total_money = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Given pairwise weights\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    # Sum of pairwise weights\n    sum_of_pairs = adam_ben + ben_carl + adam_carl\n\n    # Total weight (every person is counted twice in the sum of pairs)\n    total_weight = sum_of_pairs / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    return (26 + 4) // 5\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_cost = (500 / 1000) * 7.48\n    apples_cost = 8 * 0.12\n    yoghurts_cost = 2 * 0.46\n    total_cost = cheese_cost + apples_cost + yoghurts_cost\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    # Total aircrafts to sell\n    total_aircrafts = 1200\n    \n    # Zack's selling rate\n    zack_rate = 150  # per hour\n    \n    # Combined work time\n    combined_time = 6  # hours\n    \n    # Total rate when Andy and Zack work together\n    combined_rate = total_aircrafts / combined_time\n    \n    # Andy's selling rate\n    andy_rate = combined_rate - zack_rate\n    \n    # The time it would take Andy to sell all the aircrafts by himself\n    andy_time = total_aircrafts / andy_rate\n    \n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    people_diff = 80\n    for total_width in range(1, 1000):  # arbitrary upper limit for practicality\n        # Calculate number of students and teachers for a given total_width\n        students = 0\n        teachers = 0\n        for layer in range(total_width):\n            if layer % 2 == 0:  # outer layer with students\n                if layer == total_width - 1:  # single row or column in the middle\n                    students += 1\n                else:\n                    students += (total_width - layer) * 4 - 4  # perimeter without corners\n            else:  # inner layer with teachers\n                teachers += (total_width - layer) * 4 - 4  # perimeter without corners\n        \n        # If the difference matches, return the total number of people\n        if students - teachers == people_diff:\n            return students + teachers\n\n    return \"No solution found\"\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan = 74\n    bilal = 86\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    total_ratio = 2 + 7 + 6\n    orange_ratio = 7\n    \n    orange_volume = (orange_ratio / total_ratio) * total_volume\n    \n    return orange_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    savings = 1 * 7\n    lent_to_brother = 5\n    snacks_cost = 3\n\n    ans = original_amount + savings - lent_to_brother - snacks_cost\n    return ans\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    repay_mum = 10.50\n    remaining_money = total_money - repay_mum\n    spent_on_magazines = remaining_money / 2\n    money_left = remaining_money - spent_on_magazines\n    return money_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import factorint\n\n    # Get the prime factors of 44000\n    prime_factors = factorint(44000)\n    \n    # Determine the power needed to make it a cube, (3 - (power % 3)) % 3\n    q = 1\n    for base, power in prime_factors.items():\n        power_needed = (3 - (power % 3)) % 3\n        q *= base ** power_needed\n    \n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for length and width\n    length, width = symbols('length width')\n\n    # Equations based on the problem statement\n    equation1 = Eq(length, 2 * width)\n    equation2 = Eq(2 * (length + width), 72)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (length, width))\n\n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    ans = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    g = 9.81  # acceleration due to gravity in m/s^2\n    coeff_friction = 0.4  # coefficient of static friction\n    applied_force = 250  # applied force in N\n\n    # Calculate the normal force (force perpendicular to the floor)\n    normal_force = mass * g\n\n    # Calculate the maximum static friction force\n    max_friction_force = coeff_friction * normal_force\n\n    # The actual static friction force will be the minimum of the applied force and \n    # the maximum friction force the floor can provide\n    static_friction_force = min(applied_force, max_friction_force)\n\n    return static_friction_force\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = total_salt / total_solution\n    return concentration * 100\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    n1 = 3    # Position of the first given term\n    a1 = 23   # Value of the first given term\n    n2 = 15   # Position of the second given term\n    a2 = 155  # Value of the second given term\n\n    common_difference = (a2 - a1) / (n2 - n1)\n\n    return common_difference\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the amount of money each person originally had.\n    steve, mark, ryan = symbols('steve mark ryan')\n    meal_cost = symbols('meal_cost')  # The cost of the meal.\n\n    # Given that Steve had $40 more than Mark.\n    eq1 = Eq(steve, mark + 40)\n\n    # Ratios if Steve paid for the meal\n    eq2 = Eq((steve - meal_cost) / (mark - meal_cost), 3 / 8)\n    eq3 = Eq((mark - meal_cost) / (ryan - meal_cost), 8 / 9)\n\n    # Ratios if Ryan paid for the meal\n    eq4 = Eq((steve - meal_cost) / (mark - meal_cost), 5 / 4)\n    eq5 = Eq((mark - meal_cost) / ryan, 4 / 1)\n\n    # Ratios if Mark paid for the meal\n    eq6 = Eq(steve / (mark - meal_cost), 10 / 1)\n    eq7 = Eq((mark - meal_cost) / ryan, 1 / 9)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (steve, mark, ryan, meal_cost))\n\n    # Find the cost of the meal\n    meal_cost_solution = solutions[meal_cost]\n\n    return meal_cost_solution\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A - B, 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n    \n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    n = 1\n    while True:\n        cube = n ** 3\n        square = int(cube ** 0.5)\n        if (square + 1) ** 2 == cube + 1:\n            return (square + 1) ** 2\n        n += 1\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    ans = ((11/30)-(9/20)+(7/12)-(1/3)) * 6 * (7/13) * 9.1\n    return ans\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_worker_per_hour = total_parts / (total_workers * total_hours)\n\n    return parts_per_worker_per_hour\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    day_climb = 5\n    night_slide = 3\n    total_climb = 0\n    burrow_depth = 16\n    day_count = 0\n\n    while total_climb < burrow_depth:\n        day_count += 1\n        total_climb += day_climb\n        if total_climb >= burrow_depth:\n            break\n        total_climb -= night_slide\n\n    return day_count\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Given the situation:\n    # The tax charged is directly proportional to the number of bags used\n    # This implies a linear relationship between the two values\n    # Which can be expressed by the formula for a straight line: y = mx + c\n\n    # In the context given, there's no additional fixed charge (no constant part),\n    # because there's no base fee mentioned. So c = 0.\n\n    # Thus the equation simplifies to: y = mx, where m is the proportionality constant\n\n    # We don't have the value for m (the rate at which tax is charged per bag),\n    # but we can denote it as the coefficient to 'x' in the equation.\n\n    # Since the value of m is not given, we'll represent it with a variable 'k'.\n    # Therefore, the equation is:\n    # y = k * x\n\n    # However, as per the instructions, our task is to return only the equation,\n    # and there's no explicit way to return an equation with an unknown constant in Python.\n    # Instead, we can return a string that represents the equation in the desired format.\n\n    return \"y = k * x\"\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    least_number_of_coins = solve_congruence(*congruences)\n\n    return least_number_of_coins[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    return max(8/100, 0.7)\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    total_buttons = 24\n\n    for nina_buttons in range(total_buttons // 2 + 1, total_buttons):\n        james_buttons = total_buttons - nina_buttons\n        if nina_buttons - 6 == james_buttons + 6:\n            return nina_buttons\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_cost = 275\n    flat_fee = 30\n    daily_fee_under_5 = 25\n    daily_fee_over_5 = 20\n    cost_for_5_days = flat_fee + 5 * daily_fee_under_5\n    \n    if total_cost <= cost_for_5_days:\n        # Rented 5 days or less\n        num_days = (total_cost - flat_fee) // daily_fee_under_5\n    else:\n        # Rented more than 5 days\n        additional_cost = total_cost - cost_for_5_days\n        additional_days = additional_cost // daily_fee_over_5\n        num_days = 5 + additional_days\n    \n    return num_days\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8  # 1 dog weighs as much as 8 rabbits\n    rabbit_to_chicken = 2  # 1 rabbit weighs as much as 2 chickens\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken # Calculate how many chickens weigh as much as one dog\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    ans = 1\n    for i in range(2, 51):\n        ans *= (1/i - 1/(51-i))\n    return ans\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    bounce_ratio = 0.10\n    total_distance = initial_height  # initial fall\n\n    while initial_height > 0:\n        initial_height *= bounce_ratio\n        total_distance += 2 * initial_height  # account for the up and down of each bounce\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # The sum of the pages numbers in a sheet is 4 times the larger inside page number (down right page)\n    # Because the sum is s = n + (n + 1) + (n + 2) + (n + 3) = 4n + 6\n    # To find n we just need to solve 4n + 6 = 58\n    n = (58 - 6) // 4\n\n    # Each sheet contributes 4 pages, thus n//2 is the number of the first page of the sheet in question\n    # And since the sheets are ordered, the number of the first page is also the number of sheets counted\n    ans = n // 2\n    return ans\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n    # Sam had an equal number of green and yellow cars\n    equation1 = Eq(green, yellow)\n    # After giving away some cars, he had thrice as many yellow cars as green cars\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    green_cars_in_the_end = solutions[green] - 60\n\n    return green_cars_in_the_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    # Speeds given in the problem\n    buck_speed = 600  # metres per minute\n    elephant_speed = 250  # metres per minute\n    \n    # Total distance of the race\n    race_distance = 3000  # metres\n    \n    # Time taken for the buck to finish the race\n    buck_time = race_distance / buck_speed  # in minutes\n    \n    # Time taken for the elephant to finish the race\n    elephant_time = race_distance / elephant_speed  # in minutes\n    \n    # The time difference between the buck's and elephant's finish\n    time_difference = elephant_time - buck_time  # in minutes\n    \n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n  \n    num_terms = int((last_term - first_term) / difference + 1)\n  \n    sum_of_first_sequence = (num_terms * (first_term + last_term)) / 2\n  \n    # Since the sequence is the same forward and backward, double the sum of the first sequence\n    ans = 2 * sum_of_first_sequence\n  \n    return int(ans)\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    percentage_bad = 15\n\n    bad_apples = (percentage_bad / 100) * total_apples\n\n    return int(bad_apples)\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Average speeds.\n    simon_speed = 80    # km/h\n    wife_speed = 60     # km/h\n\n    # Difference in speed.\n    difference_speed = simon_speed - wife_speed  # km/h\n\n    # Distance between the offices.\n    distance = 15  # km\n\n    # Time required for Simon to close the gap.\n    time_to_close_gap = distance / difference_speed  # hours\n\n    # Initial time of departure.\n    departure_time = datetime.strptime('18:10', '%H:%M')\n\n    # Calculate the overtake time.\n    overtake_time = departure_time + timedelta(hours=time_to_close_gap)\n\n    return overtake_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    return 123 - 67\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Cost of 12 pencils\n    cost_of_12_pencils = 1.80\n    # Cost of 1 pencil\n    cost_of_1_pencil = cost_of_12_pencils / 12\n    # Ratio of the cost of a pen to the cost of a pencil is 7:3\n    # Therefore, cost of 1 pen\n    cost_of_1_pen = (7 / 3) * cost_of_1_pencil\n    # Work out the cost of 5 pens\n    cost_of_5_pens = 5 * cost_of_1_pen\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Number of choices for one drink (coffee, milk)\n    drinks = 2\n    \n    # Number of choices for one food item (hamburger, burrito, bagel)\n    food_items = 3\n    \n    # Applying the principle of multiplication\n    ans = drinks * food_items\n    \n    return ans\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    # Lockers to be unlocked at the end will be those corresponding to perfect squares\n    # because those lockers are the ones that are toggled an odd number of times\n    # and initially all lockers are unlocked.\n    # The perfect squares between 1 and 100 are: 1^2, 2^2, 3^2, ..., 10^2.\n    # There are 10 perfect squares within this range\n    # because the largest perfect square less than or equal to 100 is 10^2.\n    ans = 10\n    return ans\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    def ways_to_step(n):\n        if n == 1 or n == 0:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return ways_to_step(n - 1) + ways_to_step(n - 2)\n    \n    # Ways to reach the 5th step\n    ways_to_reach_5th_step = ways_to_step(4)\n\n    # Ways to reach the 10th step from the 5th step\n    ways_to_reach_10th_from_5th = ways_to_step(10 - 5)\n    \n    # By the multiplication principle, we multiply the ways to reach the 5th step\n    # and the ways to reach the 10th step from the 5th\n    total_ways = ways_to_reach_5th_step * ways_to_reach_10th_from_5th\n    \n    return total_ways\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    total_minutes = 12\n    total_pancakes = pancakes_per_minute * total_minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "from itertools import combinations, permutations\n\ndef solution():\n    # Time taken by each person\n    times = [5, 5, 9, 7]\n    min_time = float('inf')\n\n    # Generate all possible pairs for initial crossing\n    for pair in combinations(times, 2):\n        first_crossing = max(pair)\n        time_left = list(times)\n        time_left.remove(pair[0])\n        time_left.remove(pair[1])\n\n        # Generate all possible pairs for crossing back\n        for back in time_left:\n            second_crossing = back\n            for final_pair in permutations(time_left):\n                if back not in final_pair:\n                    last_crossing = max(final_pair)\n                    total_time = first_crossing + second_crossing + last_crossing\n                    min_time = min(min_time, total_time)\n                    break\n\n    return min_time\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500  # total length of road in metres\n    total_days = 5      # total days to pave the road\n\n    # Calculate meters paved per day\n    meters_per_day = total_length / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    ans = 8 * 18 + 1\n    return ans\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # Sandra wrote 88 instead of 98 by mistake and got 22.\n    # This means that 88 / A = 22.\n    # So we can solve for A.\n    A = 88 / 22\n    \n    # Now we calculate the correct answer with the correct number 98.\n    correct_answer = 98 / A\n    \n    return A, correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    cost_for_twelve = cost_per_calculator * 12\n    return cost_for_twelve\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Speed of Lucas: 5 laps / 6 minutes = 5/6 laps per minute\n    speed_lucas = 5 / 6\n    # Speed of Miller: 5 laps / 10 minutes = 1/2 laps per minute\n    speed_miller = 5 / 10\n\n    # Relative speed at which Lucas overtakes Miller (lucas speed - miller speed)\n    relative_speed = speed_lucas - speed_miller\n\n    # The time taken for Lucas to overtake Miller the first time would be when he has completed 1 more lap than Miller.\n    # Since Lucas has an initial advantage of this lap (starts together with Miller), we are interested in the second overtaking.\n    # This asks us to find the time taken to complete the number of laps which is the next whole number.\n    # So, we use 1 lap / relative speed to find the time for the second overtaking.\n    time_for_second_overtake = 1 / relative_speed\n\n    return time_for_second_overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_value = 1670\n    greatest_possible_value = rounded_value + 4  # since it's rounded to the nearest 10, the max she could have is 4 less than the next ten\n    return greatest_possible_value\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    ans = 345 * 6\n    return ans\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # since 21+22+23+24 = 90, we verify that this sum equals 90\n    assert 21 + 22 + 23 + 24 == 90\n\n    # The sum of an arithmetic sequence can be found using the formula S = n/2 * (a_1 + a_n)\n    # where a_1 is the first term, a_n is the last term and n is the number of terms\n    # Here, the sum S is given (2014) and n is given (53)\n    # We need to find the last term a_n\n\n    # We can realize that the average number in the sequence is the sum divided by the number of terms,\n    # so the average is 2014 / 53.\n    # In an arithmetic sequence with an odd number of terms, the average number is also the median,\n    # which is the middle number of the sequence. Because the numbers are consecutive, the first number\n    # is median - n//2, and the last number is median + n//2.\n\n    n = 53\n    S = 2014\n\n    median = S // n\n    half_n = n // 2  # integer division\n\n    # Calculate the first and last term of the sequence\n    a_1 = median - half_n\n    a_n = median + half_n\n\n    return a_n\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    return int(hours * minutes_per_hour)\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')\n    \n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/4) * remaining\n    \n    equation = Eq(children - men, 120)\n    \n    visitors = solve(equation, total_visitors)\n    \n    return visitors[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_charge = 80  # Cents for the call up to 15 minutes\n    additional_charge = 5  # Cents for each additional minute\n    total_cost = 140  # Cost in cents\n    \n    # Calculate the cost above the base charge\n    extra_cost = total_cost - base_charge\n    \n    # Calculate the additional minutes\n    additional_minutes = extra_cost // additional_charge\n    \n    # Total minutes is the sum of the initial 15 and the additional minutes\n    total_minutes = 15 + additional_minutes\n    \n    return total_minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    # Let's denote Tim's current age as T and his mother's current age as M.\n    \n    T = 8  # Tim's age\n    # From the problem statement: When Tim is as old as his mother's current age (M), his mother will be 54.\n    # So the difference in age would be the same as it is now.\n    # Therefore, we can express M's future age as her current age plus the difference in their ages.\n    \n    # Future situation:\n    # Tim's age = M (which is his mother's current age)\n    # Mother's age = 54\n    \n    # Time taken for this to happen will be (M - 8) years (since Tim needs to age to M years old, and he is currently 8)\n\n    # Mother's future age is her current age plus the time taken:\n    # M_future = M_current + (M - T)\n    # 54 = M + (M - 8)\n\n    # Now we can solve for M\n    return (54 + 8) // 2  # Simplified equation: 2M = 62, M = 31\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_string_length_m = 5.52  # Length of the orange string in meters\n    orange_string_length_cm = orange_string_length_m * 100  # Convert meters to centimeters\n    \n    purple_string_length_cm = orange_string_length_cm / 9.2  # Calculate the purple string length\n    green_string_length_cm = purple_string_length_cm + 24.9  # Calculate the green string length\n    green_string_length_m = green_string_length_cm / 100  # Convert centimeters to meters\n    \n    return green_string_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Assume that letters correspond to digits in a columnar addition puzzle\n    #   T W O\n    # + T W O\n    # -------\n    # A  B B\n    # Since A + A must result in A or B (with our without carry-over), \n    # and T + T must result in a digit (A or B) with possible carry-over,\n    # A can only be 0 or 1 since those are the only digits that double to themselves\n    # modulo 10.\n    # A cannot be 0, because then T would have to be 5, which would make W + W + 1 (carry) = 11 or 1\n    # which would not be possible.\n    # Therefore, A must be 1.\n    \n    return 1\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 2 == 0 and num % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Work rate for both Ivy and Kevin\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    \n    # Work done by both working together for 18 days\n    work_done = (ivy_rate + kevin_rate) * 18\n    \n    # Work Ivy can do alone in 18 days\n    ivy_work = ivy_rate * 18\n    \n    # Work left for Kevin after taking some days off, which is what Ivy did alone\n    kevin_work_after_days_off = ivy_work\n    \n    # Find total work by Kevin before taking days off\n    total_kevin_work = work_done - kevin_work_after_days_off\n    \n    # Calculating the number of days Kevin actually worked\n    kevin_days_worked = total_kevin_work / kevin_rate\n    \n    # Kevin's days off is the difference between the total days and the days he actually worked\n    kevin_days_off = 18 - kevin_days_worked\n    \n    return kevin_days_off\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two pieces of rope\n    short_piece, long_piece = symbols('short_piece long_piece')\n\n    # Create the two equations based on the problem statement\n    equation1 = Eq(long_piece, 5 * short_piece)\n    equation2 = Eq(short_piece + long_piece, 49.5)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (short_piece, long_piece))\n\n    # Get the length of the longer piece and round it to 1 decimal place\n    longer_piece_length = round(solutions[long_piece], 1)\n\n    return longer_piece_length\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    # Calculate the total amount given by mum and dad each day\n    daily_total_from_mum_and_dad = 60 + 40\n    # Calculate the total amount for three days\n    total_for_three_days = daily_total_from_mum_and_dad * 3\n    return total_for_three_days\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_ratio = 4\n\n    apple_juice_litres = (apple_ratio / total_ratio) * total_litres\n    return apple_juice_litres\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # The percentage of pupils normally in Year 7\n    year_7_percentage = 20 / 100\n\n    # After some Year 7 girls miss school, the proportion of pupils in Year 7\n    reduced_year_7_percentage = 10 / 100\n\n    # Total number of pupils left at school is 400\n    current_total = 400\n\n    # Calculate the original total number of pupils at school\n    # Let original_total be the original number of pupils\n    # And we can derive the equation:\n    # (original_total * year_7_percentage) - (missing_year_7_girls) = \n    # current_total * reduced_year_7_percentage\n    \n    # From the proportion, (missing_year_7_girls) can be derived as\n    # original_total * year_7_percentage - current_total * reduced_year_7_percentage\n    # Combining this with the current total pupils, we can derive the original total:\n    # original_total = current_total / (1 - (year_7_percentage - reduced_year_7_percentage))\n\n    original_total = current_total / (1 - (year_7_percentage - reduced_year_7_percentage))\n    \n    # The answer is the original total number of pupils\n    return int(original_total)\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 0\n    day_counter = 0\n    daily_climb = 4\n    nightly_slide = 1\n    well_depth = 25\n\n    while total_distance < well_depth:\n        day_counter += 1\n        total_distance += daily_climb\n        if total_distance >= well_depth:\n            break\n        total_distance -= nightly_slide\n    \n    return day_counter\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Let's denote the work rate of Nancy as nancy_rate and Tim as tim_rate.\n    # Since Nancy can complete the book in 6 days, her work rate is 1/6 of the book per day.\n    nancy_rate = 1 / 6\n\n    # Together, Nancy and Tim can complete the book in 4 days, so their combined work rate is 1/4 of the book per day.\n    combined_rate = 1 / 4\n\n    # The work rate of Tim is the combined rate minus Nancy's rate.\n    tim_rate = combined_rate - nancy_rate\n\n    # Therefore, it takes Tim 1/tim_rate days to complete the book by himself.\n    tim_days = 1 / tim_rate\n\n    return tim_days\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    cycle_length = 2  # deposit on 1st day, spend on 2nd day.\n\n    cycles_completed = days // cycle_length\n    remaining_days = days % cycle_length\n\n    # Since each cycle has a deposit of £5 and spending of £8, net change is -£3.\n    cycle_net_change = (5 - 8) * cycles_completed\n\n    # Calculate the remaining day's change (if it's a deposit day).\n    remaining_change = 0\n    if remaining_days > 0:\n        remaining_change += 5  # Only deposit happens in the incomplete cycle.\n\n    total_change = cycle_net_change + remaining_change\n\n    # Final amount is the initial amount plus the total change.\n    amount = initial_amount + total_change\n\n    return amount\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = '333' * 4  # 12 digits of the number 333 repeated 4 times (since 333 is non-periodic part)\n    number = int(number_str)\n    ans = number % 7\n    return ans\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    effective_jump = 3 * jump_up - slide_down\n\n    # Each cycle the squirrel effectively climbs (3*m - s) meters\n    # where m is the height it climbs each jump and s is how much it slides down.\n    jumps_needed, remainder = divmod(total_height - jump_up, effective_jump)\n\n    # We subtract one jump_up as that is included in the final jump to reach or exceed the top\n    jumps_needed *= 3 # Each cycle consists of 3 jumps\n\n    # If there is a remainder, the squirrel has to perform a final jump cycle\n    if remainder > 0:\n        jumps_needed += 3\n\n    return jumps_needed\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # Define the function for the general term of the sequence\n    def general_term(n):\n        return n / ( (3*n**2 - 3*n + 1) * (3*n**2 + 1) )\n\n    ans = sum(general_term(n) for n in range(1, 7)) + 1/22\n\n    return ans\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_shoes = 40\n    remaining_after_dress = remaining_after_shoes / (3/5)\n    initial_money = remaining_after_dress / (2/3)\n    return initial_money\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n    \n    def count_fact_zeros(n):\n        count = 0\n        i = 5\n        while (n // i >= 1):\n            count += n // i\n            i *= 5\n        return count\n    \n    zeros_999_fact = count_fact_zeros(999)\n    zeros_300_fact = count_fact_zeros(300)\n    ans = zeros_999_fact - zeros_300_fact\n    \n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Since students form a square, the total number of students will be in\n    # the form of x^2, where x is the total number of students along one side of the square.\n    # The outermost layer has 60 students, but we have to consider that each corner is\n    # counted twice when counting the outermost layer. \n    # Therefore, we subtract 4 (for 4 corners) from the 60 students to correctly count\n    # the number of unique students on one side of the outermost layer, then add 1 to account\n    # for the actual corner student.\n    # Then we add to this 2 times the number of the next internal layer which will be two less for each side,\n    # and continue this logic to add all subsequent layers until we have a single student as the last layer.\n\n    outer_layer = (60 - 4 + 1)  # Adjusting the count for corners\n    total_students = outer_layer ** 2  # Calculate total for the outermost layer\n\n    # Subtract 2 students to move one layer inside and add the square of this number to the total\n    # Repeat this until we reach the center of the square form.\n    next_layer = outer_layer - 2\n    while next_layer > 0:\n        total_students += next_layer ** 2\n        next_layer -= 2  # Move one layer inside\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    # The number of cars is one third more than the number of bikes.\n    equation1 = Eq(cars, bikes + bikes / 3)\n\n    # The number of bikes is one quarter more than the number of lorries.\n    equation2 = Eq(bikes, lorries + lorries / 4)\n\n    # The total number of cars, bikes and lorries is an even number.\n    # Using a symbolic equation to represent that some number n (total number)\n    # is even is tricky, but we can at least represent it's less than 100.\n    # Detailed parity handling would be done in iterative checks.\n\n    # The total number is less than 100\n    equation3 = Eq(cars + bikes + lorries, symbols('n'))\n\n    # First, we solve the system of equations without the even constraint \n    solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries, symbols('n')))\n\n    # Now we check the solutions which result in a total count less than 100 \n    # and is even. Since it's a linear system - if one solution meets the criteria, \n    # other will not because of linearity and continuous increment\n    total_count = solutions[symbols('n')]\n    for count in range(2, 100, 2):\n        trial_solution = solutions.subs(symbols('n'), count)\n        if all(isinstance(val, (int, float)) and val > 0 for val in trial_solution.values()):\n            return dict(trial_solution)\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    common_difference = 4\n    \n    num_terms = ((last_term - first_term) // common_difference) + 1\n    return num_terms\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 0\n    red_tiles = 0\n    green_tiles = 0\n    remaining_tiles = total_tiles\n    \n    while remaining_tiles > 0:\n        tiles_in_layer = (layer * 2 + 1) ** 2 - (layer * 2) ** 2\n        if remaining_tiles >= tiles_in_layer:\n            if layer % 2 == 0:\n                red_tiles += tiles_in_layer\n            else:\n                green_tiles += tiles_in_layer\n            remaining_tiles -= tiles_in_layer\n            layer += 1\n        else:\n            if layer % 2 == 0:\n                red_tiles += remaining_tiles\n            else:\n                green_tiles += remaining_tiles\n            remaining_tiles = 0\n    \n    if red_tiles > green_tiles:\n        ans = ('red', red_tiles - green_tiles)\n    else:\n        ans = ('green', green_tiles - red_tiles)\n    \n    return ans\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    return 18 * 20132013 - 2013 * 180018\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards_won = 24\n    total_rounds = 12\n    cards_per_win = 4\n    cards_per_loss = 2\n\n    # Let x be the number of wins, then (total_rounds - x) will be the number of losses.\n    # Equation: cards_per_win * x - cards_per_loss * (total_rounds - x) = total_cards_won\n    # Solve for x:\n    x = (total_cards_won + cards_per_loss * total_rounds) / (cards_per_win + cards_per_loss)\n\n    # The number of rounds she lost will be the total rounds minus the rounds she won.\n    rounds_lost = total_rounds - x\n\n    return int(rounds_lost)\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length = 300\n    interval = 10\n    bins = (length // interval) + 1  # one on each end\n\n    return bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    current = int(\"2620117\")\n    pattern = \"2011\"  # The repetitive pattern\n    n = 0  # Start with no repetition\n\n    while True:\n        # Check divisibility by 33 (i.e., by 3 and 11)\n        if current % 3 == 0 and current % 11 == 0:\n            return n\n        else:\n            n += 1\n            current = int(str(current)[:-1] + pattern + str(current)[-1])\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of buttons in box A and box B initially\n    A_initial, B_initial = symbols('A_initial B_initial')\n\n    # Given: A_initial = B_initial + 64\n    equation1 = Eq(A_initial, B_initial + 64)\n\n    # Ken adds x buttons to box A and removes 2x buttons from box B\n    # Let's use x as the number of buttons Ken added to box A\n    x = symbols('x')\n\n    # New number of buttons in box A is A_initial + x\n    # New number of buttons in box B is B_initial - 2x\n    # Given: Number of buttons in box B became 28 fewer than before\n    # B_initial - 2x = B_initial - 28\n    equation2 = Eq(B_initial - 2 * x, B_initial - 28)\n\n    # New ratio given: (A_initial + x + B_initial - 2x) : (B_initial - 2x) = 4:1\n    # Simplifies to A_initial - x + B_initial = 4 * (B_initial - 2x)\n    equation3 = Eq(A_initial - x + B_initial, 4 * (B_initial - 2 * x))\n\n    # Solve the system of equations for A_initial, B_initial, and x\n    solutions = solve((equation1, equation2, equation3), (A_initial, B_initial, x))\n\n    # Return the number of buttons in box A at first\n    return solutions[A_initial]\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n    total_flour_needed = flour_per_cake * num_cakes\n    return total_flour_needed\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    count = 0\n    for x in range(8):\n        for y in range(8):\n            if x + y <= 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # Time taken to make one cut\n    time_per_cut = 3 / 3\n\n    # Total cuts needed to get 8 pieces\n    cuts_needed = 8 - 1  # Since cutting a log into n pieces requires (n-1) cuts\n\n    # Total time needed for cuts to get 8 pieces\n    total_time = time_per_cut * cuts_needed\n\n    return total_time\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Rasidah and Chai Seng's initial amounts of money\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(chai_seng, rasidah + 48)  # Chai Seng had $48 more than Rasidah\n    equation2 = Eq(chai_seng * (1 - 6/7), 1/2 * rasidah * (1 - 3/5))  # Chai Seng had 1/2 as much as Rasidah after spending\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    cards_after_selling = initial_cards - duplicates\n    total_cards = cards_after_selling + new_cards\n\n    return total_cards\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Since rotations are considered the same, we first fix one person's position.\n    # Therefore, we have 7 seats left to arrange for the remaining 7 people.\n    # Amy and Judy must sit together, we can treat them as one person.\n    # So we have 6+1 = 7 \"people\" to arrange in 7 seats, which gives us 7! arrangements.\n    arrangements_7_people = factorial(7)\n\n    # However, Amy and Judy can switch places between themselves,\n    # which gives us 2 more arrangements for each of the previous arrangements.\n    arrangements_amy_judy = 2\n    \n    # Total arrangements considering the constraints\n    total_arrangements = arrangements_7_people * arrangements_amy_judy\n\n    return total_arrangements\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote the original amount of cookies that Andy and Ben have as 'a' and 'b', respectively\n    a, b = symbols('a b')\n\n    # setting up the equations based on the problem statement\n    equation1 = Eq(b - a, 84)  # Ben had 84 more cookies than Andy at first\n    equation2 = Eq(a + a/3, b/3)  # After buying more cookies, Andy had 1/3 as many as Ben\n\n    # solving the equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # calculate the number of cookies Andy had in the end, which includes the additional 1/3 he bought\n    cookies_end = solutions[a] + solutions[a]/3\n\n    return cookies_end\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18  # Starting coins for X, Y, and Z respectively\n    rounds = 0\n\n    # Continue the game until one player runs out of coins \n    while min(x, y, z) > 0:\n        max_coins = max(x, y, z)  # Find the player with the most coins\n        \n        # Update the number of coins for each player\n        if x == max_coins:\n            x -= 2  # The player with the most coins gives away 2 coins and keeps 1.\n            y += 1\n            z += 1\n        elif y == max_coins:\n            y -= 2\n            x += 1\n            z += 1\n        elif z == max_coins:\n            z -= 2\n            x += 1\n            y += 1\n        \n        rounds += 1  # Increase the round count\n\n    return rounds\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    result = sum(1 / i for i in range(1, 8))\n    return int(result)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n\n    years = 0\n    amount = initial_amount\n    while amount < final_amount:\n        amount += amount * interest_rate\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n    \n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n    \n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    return 0.7 + 0.04 + 1.006\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    base_pos = 18\n    base_neg = -16\n    seq_pos = [base_pos]\n    seq_neg = [base_neg]\n\n    for i in range(1, 6):  # Assuming we only need the first six terms for the pattern\n        seq_pos.append(base_pos + i)\n        seq_neg.append(base_neg - i)\n\n    n = seq_neg[-1] + 1  # As the sequence increments by one alternatively\n\n    return n\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the four numbers in descending order\n    a, b, c, d = symbols('a b c d', integer=True, positive=True)\n\n    # Using assumption of descending order: a > b > c > d\n    # Equations\n    # d + (a + b + c) / 3 = 39\n    # a + (b + c + d) / 3 = 51\n\n    # Solve the system of equations\n    equations = [\n        Eq(d + (a + b + c) / 3, 39),\n        Eq(a + (b + c + d) / 3, 51)\n    ]\n\n    # Calculate the solutions set. Since we want integers, we include `rational=False` to discard non-integer solutions.\n    solutions = solve(equations, (a, b, c, d), dict=True, rational=False)\n\n    # Extract all possible 'a' from the solutions, 'a' represents the largest number\n    largest_values = [s[a] for s in solutions]\n\n    # Calculate the largest possible value of 'a'\n    largest_a = max(largest_values)\n\n    return largest_a\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    numerator = 12\n    original_numerator = 6\n    original_denominator = 20\n\n    # Calculate the ratio by which the numerator increased\n    ratio = numerator / original_numerator\n\n    # Calculate the new denominator using the same ratio\n    new_denominator = original_denominator * ratio\n\n    return int(new_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # At most how many pupils passed all three tests can be found\n    # by setting the number of students who passed only two tests\n    # or only one test to zero and the rest passed all three.\n    total_passing = 43\n    math_passing = 30\n    science_passing = 28\n    english_passing = 25\n\n    # Total passing is the sum of those who passed each individual subject\n    # So the at most number passing all three is the total minus the sum \n    # of individual subject passing, then we add back the total since they\n    # are double-counted in the individual sums.\n    all_three_passing = (math_passing + science_passing + english_passing) - total_passing\n\n    # However, this could be a negative value if not enough students are passing \n    # at least one to account for all the individual counts, which means 0 students \n    # are the maximum passing all three.\n    return max(0, all_three_passing)\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Tom saw 8 numbers. After the first round, 4 numbers are identified with respect to the unknown number\n    # After the second round, 6 numbers are identified with respect to the number 24\n    # Tom raised his hand in both rounds, which means his number is either divisible by both or not divisible by both.\n    \n    # Hence, all the numbers Tom saw should not be divisible by 24\n    # Let's find those numbers between 10 (smallest two-digit number) and 99 (largest two-digit number)\n    \n    not_div_by_24 = [i for i in range(10, 100) if i % 24 != 0]\n    \n    # Since 4 students raised their hands in the first round, there are at least 4 numbers not divisible by the unknown number\n    # Since Tom also knows his number is not divisible by the unknown number, the unknown number must be a multiple\n    # of the largest common factor of the numbers Tom saw which are not divisible by 24.\n    \n    # Let's find the largest common factor\n    \n    factors = {}\n    for num in not_div_by_24:\n        for factor in range(2, num + 1):\n            if num % factor == 0 and num not in factors:\n                factors[num] = factor\n    \n    highest_factor = max(factors.values())\n    \n    # Now, let's assume Tom's number is the smallest number that's divisible by the highest factor,\n    # which would be just the factor itself, starting the check from the smallest two-digit number.\n    \n    # Let's find the numbers Tom saw, they could not see numbers divisible by 24 or the highest common factor\n    tom_saw = [i for i in not_div_by_24 if (i % highest_factor != 0 and i % 24 != 0)]\n    \n    # The first 8 such numbers would be the numbers that Tom saw\n    return sum(tom_saw[:8])\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('distance')\n\n    # Ahmad's speed in terms of distance per minute\n    ahmad_speed = 80\n    # Younger brother's speed in terms of distance per minute\n    brother_speed = 50\n\n    # Ahmad meets his brother 210 meters from the school, which means his brother has walked (distance - 210) meters.\n    # The time taken for both to meet should be the same\n    # Hence, time = distance_travelled_by_Ahmad / ahmad_speed = distance_travelled_by_brother / brother_speed\n    # Ahmad travels the whole distance to the school and back 210 meters: distance + (distance - 210)\n    # Younger brother travels only: (distance - 210)\n    \n    equation = Eq((distance + (distance - 210)) / ahmad_speed, (distance - 210) / brother_speed)\n\n    solution = solve(equation, distance)\n    return solution[0]\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            if 6 - x1 - x2 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "from fractions import Fraction\n\ndef solution():\n    # Calculate the numerator of the first complex fraction\n    numerator_1 = Fraction(1, 30) + Fraction(1, 6)\n    \n    # Calculate the denominator of the first complex fraction\n    denominator_1 = Fraction(2, 25)\n    \n    # Calculate the first complex fraction\n    complex_fraction_1 = numerator_1 / denominator_1\n    \n    # Calculate the numerator of the second complex fraction\n    numerator_2 = Fraction(2) - Fraction(2, 3)\n    \n    # Calculate the denominator of the second complex fraction\n    denominator_2 = Fraction(8, 3)\n    \n    # Calculate the second complex fraction\n    complex_fraction_2 = numerator_2 / denominator_2\n    \n    # Add the two complex fractions\n    result = complex_fraction_1 + complex_fraction_2\n    \n    # Return the final answer as a simplified fraction\n    return result\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    place_value_first_8 = 8 * 1000  # The first 8 is in the thousands place\n    place_value_second_8 = 8 * 100  # The second 8 is in the hundreds place\n    difference = place_value_first_8 - place_value_second_8\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # A palindromic number with five digits can be represented as abccba\n    # It's a multiple of 45, so it must be a multiple of 5 and 9\n    # For a number to be a multiple of 5, its last digit must be either 0 or 5\n    # Since we need a five-digit number, the last digit cannot be 0, so it must be 5\n    # Hence, the number must be in the form of abcba, where a must be 9 (since it's the largest possible first digit)\n    # Then we need the number to be a multiple of 9, which means the sum of all digits must be a multiple of 9\n\n    largest_palindrome = 0\n    smallest_palindrome = float(\"inf\")\n\n    for b in range(10): # range for the second digit\n        for c in range(10): # range for the middle digit\n            palindromic_number = int(f\"9{b}{c}{c}{b}5\")\n            if palindromic_number % 45 == 0:\n                largest_palindrome = max(largest_palindrome, palindromic_number)\n                smallest_palindrome = min(smallest_palindrome, palindromic_number)\n\n    return largest_palindrome - smallest_palindrome\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        number = int(f\"572{A}\")\n        if number % 4 == 0 and number % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the common supplement\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    \n    # Step 2: Find the LCM of all the divisors\n    lcm = 5 * 6 * 11\n    \n    # Step 3: Solve the congruences\n    biscuits, _ = solve_congruence(*congruences)\n    \n    return biscuits\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    number = 40309\n    while True:\n        number += 1\n        if str(number) == str(number)[::-1]:\n            return number - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    ribbon1 = 16\n    ribbon2 = 24\n    longest_piece_length = gcd(ribbon1, ribbon2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position_from_front = 7\n    sheep_behind_luna = 4\n\n    total_sheep = luna_position_from_front + sheep_behind_luna\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    hours_needed = desired_earnings / hourly_rate\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mean score of all 10 students\n    x = symbols('x')\n    \n    # The total score for the top 3 students\n    total_top_3 = 3 * 92\n    \n    # The mean score for the last 7 students is x - 6\n    # The total score for the last 7 students\n    total_last_7 = 7 * (x - 6)\n    \n    # Equation for the total score of all 10 students\n    equation = Eq(total_top_3 + total_last_7, 10 * x)\n    \n    # Solve the equation\n    mean_score = solve(equation, x)\n    \n    return mean_score[0]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    from itertools import permutations\n    \n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:  # Ensure the digits are unique.\n            digit_list = list(map(int, digits))\n            for num in permutations(digit_list):\n                if num[0] != 0 and sorted(num) == list(range(min(digit_list), max(digit_list)+1)):\n                    count += 1\n                    break  # Found valid permutation for this year, no need check further\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        x_bags = bags[:]\n        x_bags.remove(red_marbles)\n        for jaslin_bags in combinations(x_bags, 3):\n            george_bags = list(set(x_bags) - set(jaslin_bags))\n            if sum(jaslin_bags) == 2 * sum(george_bags):\n                return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let x be the number of sweets Beth originally had,\n    # Then Andre had 24 - x sweets.\n    # After receiving 4 sweets each:\n    # Beth has x + 4 sweets,\n    # Andre has (24 - x) + 4 sweets = 28 - x sweets.\n    # We're given that Andre now has 6 more sweets than Beth, which gives us the equation:\n    # (28 - x) = (x + 4) + 6\n    # Solving for x gives us x = 9.\n    beth_sweets_now = 9 + 4  # Beth's current number of sweets after receiving 4 more.\n    return beth_sweets_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    smallest_number = symbols('smallest_number')\n    \n    # The sum of five consecutive even numbers can be written in terms of the smallest number:\n    # smallest_number + (smallest_number + 2) + (smallest_number + 4) + (smallest_number + 6) + (smallest_number + 8) = 100\n    equation = Eq(smallest_number * 5 + 20, 100)\n    \n    # Solving the equation\n    smallest_number_solution = solve(equation, smallest_number)\n    \n    return smallest_number_solution[0]\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance_travelled_in_5_hours = 550\n    time_for_5_hours = 5\n    time_for_3_hours = 3\n\n    speed = distance_travelled_in_5_hours / time_for_5_hours\n    distance_travelled_in_3_hours = speed * time_for_3_hours\n\n    return distance_travelled_in_3_hours\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_apples = 150\n    remaining_fraction = 1 - 2/5\n\n    total_apples = remaining_apples / remaining_fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\n\ndef has_even_spacing(blocks):\n    for color in set(blocks):\n        indices = [i for i, block in enumerate(blocks) if block == color]\n        if (indices[1] - indices[0]) % 2 != 1:  # Check if not even spacing\n            return False\n    return True\n\ndef solution():\n    blocks = ['R', 'R', 'B', 'B', 'Y', 'Y', 'G', 'G', 'O', 'O', 'P', 'P']\n    total_even_cases = 0\n    total_cases = 0\n    for perm in set(permutations(blocks)):\n        total_cases += 1\n        if has_even_spacing(perm):\n            total_even_cases += 1\n    m = total_even_cases\n    n = total_cases // 2  # divide by 2 because each color pair is indistinguishable\n    # Finding gcd for m and n to get relatively prime m and n\n    from math import gcd\n    d = gcd(m, n)\n\n    return (m // d) + (n // d)\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    # Each jump covers 3 inches\n    jump_length = 3\n    # The number of jumps between the 1st and 15th post is 14 (since we're counting the intervals between posts)\n    num_jumps = 14\n    # Total distance is the number of jumps times the length of each jump\n    total_distance = num_jumps * jump_length\n    \n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    return 342 - (85 - 78) * 15\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of pears, strawberries, and apples\n    friends = 6\n\n    fruits_per_friend = total_fruits // friends  # Dividing the total fruits by the number of friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    A_rate = 1 / 36\n    B_rate = 1 / 48\n    cycle_duration = 1 + 2 + 2 + 1  # Total minutes in a pattern cycle\n    cycle_amount = A_rate * (1 + 2) + B_rate * (2 + 1)  # Total pool filled in one cycle\n\n    # How many complete cycles to fill the pool\n    complete_cycles = int(1 / cycle_amount)\n\n    # Time and fill amount after complete cycles\n    time_elapsed = cycle_duration * complete_cycles\n    amount_filled = cycle_amount * complete_cycles\n\n    # Remaining amount to fill\n    remaining_amount = 1 - amount_filled\n\n    # Time calculation for the remaining amount\n    while remaining_amount > 0:\n        time_elapsed += 1  # Simulate each minute\n        if time_elapsed % cycle_duration in [0, 1, 2]:  # Check for inlet A\n            remaining_amount -= A_rate\n        if time_elapsed % cycle_duration in [3, 4]:  # Check for inlet B\n            remaining_amount -= B_rate\n        if remaining_amount <= 0:\n            break\n\n    return time_elapsed\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # Let 'a' be the time taken by Alan to paint the room alone\n    # Let 'b' be the time taken by Bob to paint the room alone, which is given as 6 hours\n\n    a = symbols('a')\n    b = 6\n\n    # They complete 1/4 of the room per hour together \n    # Alan completes 1/a of the room per hour alone\n    # Bob completes 1/b of the room per hour alone\n\n    # The sum of their individual rates is equal to their combined rate\n    equation = Eq(1/a + 1/b, 1/4)\n\n    # Solve for 'a'\n    solution = solve(equation, a)\n\n    # Return the solution for 'a', which is the time Alan would take on his own\n    return solution[0]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    \n    # Probability that it won't rain on a day is (1 - probability that it will rain)\n    prob_not_rain_saturday = 1 - prob_rain_saturday\n    prob_not_rain_sunday = 1 - prob_rain_sunday\n    \n    # Probability that it won't rain on both days\n    prob_not_rain_both_days = prob_not_rain_saturday * prob_not_rain_sunday\n    \n    # Probability that it will rain at least one day = 1 - Probability that it won't rain on both days\n    prob_rain_at_least_one_day = 1 - prob_not_rain_both_days\n    \n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        score = (correct * 10) - (incorrect * 3)\n        if score == 48:\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def count_trailing_zeros(n):\n    count = 0\n    i = 5\n    while n // i > 0:\n        count += n // i\n        i *= 5\n    return count\n\ndef solution():\n    left, right = 0, 1000  # Arbitrary right bound as factorial grows fast\n    while left < right:\n        mid = (left + right) // 2\n        if count_trailing_zeros(mid) < 28:\n            left = mid + 1\n        else:\n            right = mid\n    return left - 1   # Subtract 1 to get the largest n that gives us 28 zeros\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(henry + fred + richard, 204.56)\n    equation2 = Eq(richard, henry - 3.24)\n    equation3 = Eq(fred, richard + 5.6)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return float(solutions[fred])\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    initial_bottles = 10\n    borrowed_empty = 1\n    total_drinkable = initial_bottles\n\n    empty_bottles = initial_bottles + borrowed_empty\n\n    while empty_bottles >= 2:\n        new_bottles = empty_bottles // 2\n        total_drinkable += new_bottles\n        empty_bottles = new_bottles + (empty_bottles % 2)\n\n    # Subtracting the borrowed empty bottle which should be returned.\n    total_drinkable -= (borrowed_empty // 2)\n\n    return total_drinkable\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n\n    children_between = abs(vanessa_position_from_front - andrea_position_from_front) - 1\n\n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    total_weeks = 7\n    sweets_gained_weekly = 30\n    sweets_sophie_has_after = 348\n\n    sweets_sophie_started_with = 320\n    sweets_sophie_has_bought = sweets_gained_weekly * total_weeks\n    sweets_sophie_has_now = sweets_sophie_started_with + sweets_sophie_has_bought\n\n    sweets_sophie_eats_weekly = (sweets_sophie_has_now - sweets_sophie_has_after) // total_weeks\n\n    return sweets_sophie_eats_weekly\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f'281{digit}')\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "from fractions import Fraction\n\ndef solution():\n    path_length = Fraction(5, 6)\n    fenced_length = Fraction(2, 3)\n    unfenced_length = path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time in minutes after which the height of A is 3 times that of B\n    x = symbols('x')\n\n    # Let h_A and h_B be the initial height of the water in pools A and B respectively\n    # Since they have the same base and height and they start draining at the same time:\n    # h_A = initial height of A's waterline - rate of A * x\n    # h_B = initial height of B's waterline - rate of B * x\n    # h_A is drained in 10 minutes, so the rate for A is h_A / 10\n    # h_B is drained in 6 minutes, so the rate for B is h_B / 6\n    # But h_A = h_B because they have the same initial height.\n    # So we can just call it h for simplicity.\n    h = symbols('h')\n\n    # When h_A is 3 times h_B, we will have:\n    # h_A = h - (h/10) * x\n    # h_B = h - (h/6) * x\n    # And h_A = 3 * h_B\n    # We want to solve for x\n\n    # The equation becomes h - (h/10)*x = 3 * (h - (h/6)*x)\n    equation = Eq(h - (h / 10) * x, 3 * (h - (h / 6) * x))\n\n    # We solve for x and h should cancel out\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let x be the number of sweets Yue Ying has,\n    # then Chenxi has x + 5 sweets.\n\n    # When Chenxi gives 10 sweets to Yue Ying,\n    # Chenxi will have (x + 5 - 10) sweets = x - 5 sweets,\n    # and Yue Ying will have (x + 10) sweets.\n\n    # The difference will be (x + 10) - (x - 5) = x + 10 - x + 5 = 15.\n    difference_after = 15\n\n    return difference_after\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # The given number is '1', which implies the question might have been incomplete or incorrectly pasted.\n    # As there is no clear 'Time Problem' associated with the number '1', we default to returning the value as is.\n    return 1\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Convert minutes to hours as the speed is given in km/h\n    late_time = 12 / 60 \n    early_time = 8 / 60\n\n    # Let the distance be d kilometers.\n    # Time taken at 3 km/h = d / 3\n    # Time taken at 7 km/h = d / 7\n\n    # According to the question, the difference in time is late_time + early_time (12 + 8 minutes converted to hours).\n    # So we get the equation: d / 3 - d / 7 = late_time + early_time\n    # Solve for d\n    d = (3 * 7 * (late_time + early_time)) / (7 - 3)\n\n    return d\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    amount = 200\n    \n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import isprime\n    \n    for prime1 in range(2, 69):\n        prime2 = 69 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime2 - prime1\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Let x be the original number of students in School A\n    # Let y be the original number of students in School B\n    # We have two equations based on the problem statement:\n    # 1) x + y = 1050 (total students)\n    # 2) (x - 20) = (y + 20) + 10 (After transferring, A has 10 more than B)\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(x + y, 1050)\n    eq2 = Eq(x - 20, y + 20 + 10)\n\n    solution = solve((eq1, eq2), (x, y))\n    return solution[x]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Evaluate without any brackets\n    baseline = 15 + 5 * 5 + 15 - 6 + 7\n\n    # Possible ways to insert a single pair of brackets\n    combinations = [\n        (15 + 5) * (5 + 15) - 6 + 7,\n        15 + (5 * 5 + 15) - (6 + 7),\n        15 + 5 * (5 + 15 - 6) + 7,\n        (15 + 5 * 5 + 15) - 6 + 7,\n        15 + ((5 * 5) + 15 - 6) + 7,\n        15 + 5 * (5 + 15) - 6 + 7,\n        15 + 5 * 5 + (15 - 6 + 7),\n        (15 + 5 * 5 + 15 - 6) + 7,\n    ]\n\n    # Find the max value from the combinations\n    max_result = max(combinations)\n\n    return max_result\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_points = 70\n    correct_answer_points = 10\n    incorrect_answer_points = -5\n    total_questions = 10\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if (correct_answers * correct_answer_points) + (incorrect_answers * incorrect_answer_points) == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    maths_students = 20\n    both_classes = 11\n    neither_class = 10\n    only_writing_class = total_students - (maths_students - both_classes) - neither_class\n    \n    return only_writing_class\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    # Extract the digits from the birthday in string\n    digits = '08072003'\n    \n    # Initialize a variable to store the largest prime number\n    largest_prime = 0\n    \n    # Iterate over each number from the maximum down to 2 (first prime)\n    for num in range(50, 1, -1):\n        # If this number is prime and we can construct it from our digits\n        if isprime(num) and all(str(num).count(d) <= digits.count(d) for d in str(num)):\n            # Store the first (thus largest) and terminate the loop\n            largest_prime = num\n            break\n            \n    return largest_prime\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    # total sum of the five numbers\n    total_sum_five_numbers = 54 * 5\n    \n    # total sum of the first two numbers\n    total_sum_first_two_numbers = 48 * 2\n    \n    # total sum of the last three numbers\n    total_sum_last_three_numbers = total_sum_five_numbers - total_sum_first_two_numbers\n    \n    # average of the last three numbers\n    average_last_three_numbers = total_sum_last_three_numbers / 3\n    \n    return average_last_three_numbers\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy_age, father_age = symbols('teddy_age father_age')\n\n    equation1 = Eq(father_age, 7 * teddy_age)\n    equation2 = Eq(teddy_age + (40 - father_age), 5)\n\n    solutions = solve((equation1, equation2), (teddy_age, father_age))\n\n    teddy_future_age = 5 + (40 - solutions[father_age])\n\n    return teddy_future_age\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    # Calculate the sum of the given sequence\n    ans = sum(range(1, 18, 2))\n\n    return ans\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n\n    adults = total_people * 2 / 7\n    remainder = total_people - adults\n    boys = remainder * 4 / 5\n    girls = remainder - boys\n\n    equation = Eq(adults - girls, 80)\n\n    total_people_solution = solve(equation, total_people)\n\n    return total_people_solution[0]\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    max_slices = 1  # Start with one slice (the whole pizza)\n    cuts = 4\n    for i in range(1, cuts + 1):\n        max_slices += i\n    return max_slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    # The position of the elephant from left to right\n    elephant_pos_left_to_right = 10\n\n    # Number of toys between the rabbit and the elephant\n    toys_between = 5\n\n    # The rabbit's position from left to right\n    rabbit_pos_left_to_right = elephant_pos_left_to_right + toys_between\n\n    # Total number of toys\n    total_toys = 40\n\n    # The rabbit's position from right to left\n    rabbit_pos_right_to_left = total_toys - rabbit_pos_left_to_right + 1\n\n    return rabbit_pos_right_to_left\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for page in range(1, 110):  # Iterate from page 1 to 109\n        for digit in str(page):  # Convert page number to string and iterate over each digit\n            total_sum += int(digit)  # Convert digit back to int and add to total_sum\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    for pink_dolphins in range(1, 48):\n        gray_dolphins = 11 * pink_dolphins\n        if pink_dolphins + gray_dolphins == 48:\n            return pink_dolphins\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    # Triangle area formula is 1/2 * base * height\n    # Given area = 54, and base = 9 cm\n    base = 9\n    area = 54\n    \n    # Rearrange the formula to solve for height\n    # height = (2 * area) / base\n    height = (2 * area) / base\n    \n    return height\n    \nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum((3 * i + 2) ** 2 for i in range(11))\n    return ans\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    numerator = 2**2019\n    denominator = 4**982 - 2**1963\n\n    # Since 4^982 is (2^2)^982 = 2^1964 and 2^1963 < 2^1964, we can simplify denominator\n    # by factoring out 2^1963 from 2^1964 - 2^1963 which becomes 2^1963 * (2 - 1) = 2^1963\n    denominator = 2**1963\n\n    # As 2^1963 will cancel out in the numerator and denominator, we have 2^56 left\n    # We want to find the remainder of 2^56 divided by 5\n    remainder = (2**56) % 5\n\n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of tables (and chairs)\n    x = symbols('x')\n\n    # Form the equation according to the problem statement\n    equation = Eq((x + 24), 4 * (x - 42))\n\n    # Solve the equation for x\n    original_chairs = solve(equation, x)\n\n    # Return the original number of chairs\n    return original_chairs[0]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    ans = (35 / 100) * 700\n    return ans\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_candy = 4\n    cabinets_right_of_candy = 7\n    candy_cabinet = 1  # Candy's own cabinet\n\n    total_cabinets = cabinets_left_of_candy + candy_cabinet + cabinets_right_of_candy\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6, 1914 % 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n\n    total_books = first_day_books + second_day_books\n\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0:\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for y in range(10):\n        if int(f\"106{y}\") % 18 == 0:\n            return y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = initial_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    largest_number = 0\n    for d1 in range(10):\n        for d2 in range(10):\n            number = 4900 + d1 * 10 + d2\n            if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n                largest_number = max(largest_number, number)\n    return largest_number\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let motorcycles be m, cars be c, lorries be l\n    m, c, l = symbols('m c l')\n\n    # Total vehicles\n    total_vehicles_eq = Eq(m + c + l, 27)\n\n    # Total wheels\n    total_wheels_eq = Eq(2 * m + 4 * c + 6 * l, 96)\n\n    # Number of cars equal to number of lorries\n    cars_lorries_eq = Eq(c, l)\n\n    # Solve the equations\n    solutions = solve((total_vehicles_eq, total_wheels_eq, cars_lorries_eq), (m, c, l))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    # Calculate the sum of the first 100 natural numbers\n    sum_of_numbers = sum(range(1, 101))\n    # Calculate the sum of cubes of the first 100 natural numbers\n    # using the formula sum_of_cubes = (1+2+3+...+n)^2\n    sum_of_cubes = sum_of_numbers ** 2\n    # Calculate the result of the division\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(ana - olaf, 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    equation3 = Eq(ana, 150)\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    return solutions[kristoff] - solutions[ana]\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears, mangoes = symbols('apples pears mangoes')\n    # Equation for the total amount spent\n    equation1 = Eq(0.6 * apples + (2/3) * 0.6 * pears + (1/5) * 0.6 * pears * 5, 150)\n\n    # Equation for the number of fruits (proportion)\n    # John bought 4/5 as many pears as apples\n    equation2 = Eq(pears, (4/5) * apples)\n\n    # John bought 2/5 as many mangoes as apples\n    equation3 = Eq(mangoes, (2/5) * apples)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apples, pears, mangoes))\n\n    # Calculate total number of fruits\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n\n    return int(total_fruits)\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_mass = 700\n    sugar_percentage = 0.32\n    sugar_mass = total_mass * sugar_percentage\n    water_mass = total_mass - sugar_mass\n    return water_mass\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - (1/10)\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    num_trees = 21\n    intervals = num_trees - 1\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let mass_of_jar represent the empty jar's mass, and mass_of_chocolate represent each chocolate's mass.\n    # Based on the first condition: mass_of_jar + 5 * mass_of_chocolate = 185 grams\n    # Based on the second condition: mass_of_jar + 17 * mass_of_chocolate = 317 grams\n    # Solve the two equations to find the mass of each chocolate and the jar.\n\n    from sympy import symbols, Eq, solve\n\n    mass_of_jar, mass_of_chocolate = symbols('mass_of_jar mass_of_chocolate')\n    equation1 = Eq(mass_of_jar + 5 * mass_of_chocolate, 185)\n    equation2 = Eq(mass_of_jar + 17 * mass_of_chocolate, 317)\n\n    solutions = solve((equation1, equation2), (mass_of_jar, mass_of_chocolate))\n\n    # Now we find the mass of the jar with 10 chocolates using the solved mass of chocolate\n    mass_with_10_chocolates = solutions[mass_of_jar] + 10 * solutions[mass_of_chocolate]\n    \n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_in_three_years = 9\n    hazel_current_age = hazel_in_three_years - 3\n    jessica_current_age = hazel_current_age - 3\n\n    hazel_next_year_age = hazel_current_age + 1\n    jessica_next_year_age = jessica_current_age + 1\n\n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    avg_second_half = 65\n    months_in_half_year = 6\n    \n    total_second_half = avg_second_half * months_in_half_year\n    total_year = total_first_half + total_second_half\n    months_in_year = 12\n    \n    avg_per_month = total_year / months_in_year\n    return avg_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    # The word 'ELEMENT' has a total of 7 letters where\n    # 'E' occurs 3 times, 'L' occurs 1 time, 'M' occurs 1 time, and 'N' occurs 1 time, 'T' occurs 1 time.\n    total_letters = 7\n    e_count = 3\n    l_count = m_count = n_count = t_count = 1\n    \n    # Calculating arrangements = total_letters! / (e_count! * l_count! * m_count! * n_count! * t_count!)\n    arrangements = factorial(total_letters) // (factorial(e_count) * factorial(l_count) * factorial(m_count) * factorial(n_count) * factorial(t_count))\n    \n    return arrangements\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    \n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    # Total score for six assignments\n    total_for_six = 6 * 92\n    \n    # Total score for first five assignments\n    total_for_five = 5 * 94\n    \n    # Score for the sixth assignment\n    score_sixth = total_for_six - total_for_five\n    \n    return score_sixth\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price = 65\n    selling_price = 74\n    remaining_pairs = 5\n    total_profit = 440\n\n    # Let 'x' be the number of shoes initially purchased by the shop.\n    # The profit for one pair of shoes is: selling_price - cost_price.\n    profit_per_pair = selling_price - cost_price\n\n    # The total profit is the profit per pair times the number of shoes sold.\n    # We know there were 5 pairs left, so the number of shoes sold is x - 5.\n    # total_profit = profit_per_pair * (x - remaining_pairs)\n    # 440 = profit_per_pair * (x - 5)\n    # Solve for 'x'.\n    x = (total_profit / profit_per_pair) + remaining_pairs\n\n    return x\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    half_duration = timedelta(hours=1, minutes=45) / 2\n    start_time = end_time - half_duration\n\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_now = 30\n    cars_exit = 10\n    cars_enter = 8\n\n    cars_initial = cars_now + cars_exit - cars_enter\n\n    return cars_initial\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(((2 * x / 4)**2 - 4) / 10, 6)\n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Since the number is divisible by 5, the last digit has to be 0 or 5.\n    # Since it's a seven-digit number and the question asks for the smallest value,\n    # the last digit must be 0 to keep the number as small as possible.\n    \n    # Divisibility by 2 requires the last digit to be even, which aligns with the decision above.\n\n    # Now, we can work from the assumption that the number is \"1992abc0\", where a, b, c are the unknown digits.\n\n    # Divisibility by 3 requires that the sum of the digits must be divisible by 3.\n    # Divisibility by 11 requires that the difference between the sum of the digits in the odd positions and\n    # the sum of the digits in the even positions to be either 0 or divisible by 11.\n\n    # Start with the fixed digits and their positions: 1o 9e 9o 2e + a(o) b(e) c(o) 0(e)\n    # o and e stands for odd and even positions, respectively.\n\n    # Sum of fixed digits for divisibility by 3 rule:\n    fixed_sum = 1 + 9 + 9 + 2\n    \n    # For divisibility by 11 rule, calculate the difference between odd and even positions:\n    fixed_diff = (1 + 9 + 2) - (9 + 0) # (0 is the known last digit)\n\n    # Check for the smallest triplet (a, b, c) that satisfies the criteria\n    smallest_number = float('inf')\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                total_sum = fixed_sum + a + b + c\n                total_diff = fixed_diff + a - b + c\n\n                if total_sum % 3 == 0 and (total_diff == 0 or total_diff % 11 == 0):\n                    number = int(f'1992{a}{b}{c}0')\n                    smallest_number = min(smallest_number, number)\n\n    return smallest_number\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_liters_required = 59\n    fill_rate_per_day = 10\n    leak_rate_per_night = 3\n    net_fill_rate_per_day = fill_rate_per_day - leak_rate_per_night\n\n    # Since 3 liters were filled on the first day\n    liters_filled_first_day = 3\n    current_liters = liters_filled_first_day\n    days_passed = 1  # Counter for days passed, starting from the first day\n    \n    # Loop to calculate the total days required to fill the pool\n    while current_liters < total_liters_required:\n        current_liters += net_fill_rate_per_day\n        days_passed += 1\n\n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visit = 24\n    ginny_visit = 36\n\n    ans = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return ans\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        1/2 * 30,\n        1/3 * 36,\n        1/4 * 40,\n        1/5 * 60,\n        1/6 * 96\n    ]\n\n    min_amount = min(amounts)\n    max_amount = max(amounts)\n\n    difference = max_amount - min_amount\n\n    return difference\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"11:20 PM\", \"%I:%20 %p\")\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n    return start_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Worst case scenario to draw the first green one is to draw all other colors first\n    blue = 5\n    white = 9\n    black = 2\n\n    # Add all the non-green marbles\n    non_green = blue + white + black\n\n    # To ensure Darrell gets the first green one, he must draw all non-green marbles plus one more\n    # which would definitely be green as all non-green ones are already drawn\n    return non_green + 1\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "from math import comb\n\ndef solution():\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    # net distance climbed by the snail on the 7th day\n    net_distance_7th_day = 2\n\n    # net distance climbed by the snail on the other days\n    daily_climb = 6\n    # snail reaches the top on the 7th day, so we calculate the distance climbed until the 6th day\n    distance_climbed_until_6th_day = 20 - net_distance_7th_day\n\n    # since the snail climbs and slides in a cycle, we calculate the net climb for each day\n    # let 'slide' be the distance the snail slides down during the night\n    slide = daily_climb - (distance_climbed_until_6th_day / 6)\n\n    return slide\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for year in range(years):\n        initial_rabbits = 3 * initial_rabbits - initial_rabbits // 2\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    number_of_terms = (last_term - first_term) + 1\n    sum_of_sequence = (number_of_terms / 2) * (first_term + last_term)\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament, each player plays against every other player once.\n    # There are 8 players, so each player plays 7 matches (against each of the other 7 opponents).\n    # Since every player has a different number of wins, the possible number of wins is 0 to 7.\n    # The champion, having the highest number of wins, will have 7 wins because\n    # it is not possible for any player to have the same number of wins.\n    \n    # the number of wins champion has\n    wins_of_champion = 7\n    \n    return wins_of_champion\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    total_hours = 120 / puffs_per_hour\n    return total_hours\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight_metal1 = 6\n    nickel_percent1 = 0.45\n    weight_metal2 = 14\n    nickel_percent2 = 0.60\n    \n    total_nickel = (weight_metal1 * nickel_percent1) + (weight_metal2 * nickel_percent2)\n    total_weight = weight_metal1 + weight_metal2\n    \n    nickel_concentration = (total_nickel / total_weight) * 100\n    \n    return nickel_concentration\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    from itertools import combinations_with_replacement\n    \n    max_product = 0\n    # Generate all possible combinations of four numbers that sum up to 13\n    for combination in combinations_with_replacement(range(1, 14), 4):\n        if sum(combination) == 13:\n            product = 1\n            # Calculate the product of the four numbers\n            for number in combination:\n                product *= number\n            # Determine the maximum product\n            max_product = max(max_product, product)\n    \n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n    \n    while mother_age != 3 * (edward_age + years):\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Distance between Ivy and Candy's house\n    total_distance = 1200\n    \n    # Candy starts after 6 minutes, so when they meet after 12 more minutes,\n    # Candy has walked for 12 minutes and Ivy for 6+12=18 minutes\n    \n    ivy_time = 18  # Ivy's walking time in minutes\n    candy_time = 12  # Candy's walking time in minutes\n    \n    # Let's denote Candy's walking speed as s (meters per minute)\n    # Ivy's walking speed will be s + 20 (meters per minute)\n    \n    # The distance covered by Ivy in 18 minutes is 18 * (s + 20)\n    # The distance covered by Candy in 12 minutes is 12 * s\n    # Both distances should add up to 1200 meters\n    \n    # 18s + 360 + 12s = 1200\n    # 30s = 1200 - 360\n    # 30s = 840\n    s = 840 / 30  # Candy's walking speed\n    \n    return s\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1 cm on the plan is 6 m in reality\n    playground_on_plan = 5  # playground length on the plan in cm\n    real_playground_length = playground_on_plan * scale_ratio  # real length in meters\n\n    return real_playground_length\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    number = 10 # start from the smallest 2-digit number\n    while True:\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n        number += 1  # check the next number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    fraction = 3/5\n    whole_number = 35\n    result = fraction * whole_number\n    return result\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    for i in range(1, 100):  # Assuming number of students will be less than 100*100\n        if (i * i + 11) == ((i + 1) * (i + 1) - 12):\n            return i * i + 11\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cookie_box_price = 6\n    total_money = 250\n\n    num_boxes = total_money // cookie_box_price\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - (4000000 + 800)\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, total_apples = 15, symbols('girls'), 26\n    boys_apples = boys * 30\n    girls_apples = girls * 20\n    \n    # Equation representing total apples picked being average times number of people (boys + girls)\n    equation = Eq((boys_apples + girls_apples) / (boys + girls), total_apples)\n    \n    solutions = solve(equation, girls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_in_tank_A = 673\n    oil_difference = 56\n    oil_in_tank_B = oil_in_tank_A + oil_difference\n    return oil_in_tank_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_cost = 340\n    total_balls = 12\n    cost_basketball = 30\n    cost_volleyball = 25\n\n    for basketballs in range(total_balls + 1):\n        volleyballs = total_balls - basketballs\n        if basketballs * cost_basketball + volleyballs * cost_volleyball == total_cost:\n            return basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15_000_000\n    richie_share = total_wealth * (1 / 3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1 / 2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2 / 5)\n    archie_share = remaining_after_thrifty - bounty_share\n\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    time_limit = 30 * 60  # half an hour in seconds\n    current_number = 1\n    total_digits_written = 0\n\n    while total_digits_written + len(str(current_number)) <= time_limit:\n        total_digits_written += len(str(current_number))\n        current_number += 1\n\n    return current_number - 1\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    to_lily = total_candy * 3/4\n    remaining_after_lily = total_candy - to_lily\n    to_brother = remaining_after_lily * 1/3\n    remaining_candies = remaining_after_lily - to_brother\n    return remaining_candies\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    total_sum = 0\n    for i in range(2, 61):\n        for j in range(1, i):\n            total_sum += j / i\n    return total_sum\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roy, dennis = symbols('roy dennis')\n\n    # Roy and Dennis shared a sum of money totaling $340\n    equation1 = Eq(roy + dennis, 340)\n    # After Roy spent 2/3 of his money, he has 1/3 of his money left\n    # After Dennis spent 1/4 of his money, he has 3/4 of his money left\n    # Dennis had twice as much money left as Roy\n    equation2 = Eq(dennis * 3/4, 2 * (roy * 1/3))\n\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Calculate the amount of money Dennis had in the end after spending 1/4 of it\n    dennis_final = solutions[dennis] * 3/4\n\n    return dennis_final\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday, saturday, sunday = symbols('friday saturday sunday')\n\n    equation1 = Eq(saturday, friday + 27)\n    equation2 = Eq(sunday, friday - 14)\n    equation3 = Eq(friday + saturday + sunday, 475)\n\n    solutions = solve((equation1, equation2, equation3), (friday, saturday, sunday))\n\n    return solutions[friday]\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    ball_cost = 20.45\n    num_balls = 8\n\n    total_ball_cost = num_balls * ball_cost\n    total_hula_hoop_cost = total_cost - total_ball_cost\n    num_hula_hoops = 6\n\n    cost_per_hula_hoop = total_hula_hoop_cost / num_hula_hoops\n\n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 693 to get its prime factors and their powers\n    factors = factorint(693)\n    \n    # A number is a perfect square if all prime factors have even powers.\n    # To make the product a perfect square, make all prime factors' powers even\n    smallest_number = 1\n    for prime, power in factors.items():\n        if power % 2 == 1:  # if the power is odd\n            smallest_number *= prime  # multiply by the prime to make it even\n\n    return smallest_number\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Calculate the unit digit of each term\n    unit_digit_13_242 = (13**242) % 10\n    unit_digit_17_379 = (17**379) % 10\n    unit_digit_4_2012 = (4**2012) % 10\n\n    # Calculate the unit digit of the sum\n    ans = (unit_digit_13_242 + unit_digit_17_379 * unit_digit_4_2012) % 10\n    return ans\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_juice = 8 * 3  # Total juice in liters\n    remaining_juice = total_juice - 9  # Remaining juice after drinking\n    container_volume = 5  # Volume of each container in liters\n    containers_needed = -(-remaining_juice // container_volume) # Divide and round up\n\n    return containers_needed\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    # Initialize the number of digits used\n    total_digits = 0\n    # Initialize the last page number\n    last_page = 0\n    # Initialize the count for pages with different number of digits\n    digits_per_page = 1\n    # While total_digits is less than 300\n    while total_digits < 300:\n        # Calculate the pages with the current digits_per_page\n        pages_with_current_digits = 9 * (10 ** (digits_per_page - 1)) \n        # Calculate the number of digits if we add the current pages\n        if total_digits + pages_with_current_digits * digits_per_page > 300:\n            # If adding the pages will overshoot 300 digits, find the exact number\n            remaining_digits = 300 - total_digits\n            last_page += remaining_digits // digits_per_page\n            break\n        # Add the number of digits used by the pages with current number of digits\n        total_digits += pages_with_current_digits * digits_per_page\n        # Update the last page number seen so far\n        last_page += pages_with_current_digits\n        # Increment the count for pages with digits\n        digits_per_page += 1\n    \n    return last_page\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    weight_of_steak = 3 + 1/2\n    cost_per_kg = 7.50\n    amount_have = 20\n\n    total_cost = weight_of_steak * cost_per_kg\n    additional_amount_needed = total_cost - amount_have\n\n    return additional_amount_needed if additional_amount_needed > 0 else 0\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position = 12\n    \n    eddie_from_end = total_people - eddie_position + 1\n    \n    return eddie_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of a light bowling ball in kg\n    x = symbols('x')\n\n    # Equation: 6x (mass of all light balls) + 12x (mass of all heavy balls, each weighing twice as much) = total mass\n    equation = Eq(6 * x + 12 * x, 65.7)\n\n    # Solve for x\n    mass_light_ball = solve(equation, x)\n\n    # Return the mass of a light bowling ball to the nearest kg\n    return round(mass_light_ball[0])\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    # Benson and Clive initially had a total of $705.\n    equation1 = Eq(benson + clive, 705)\n    # After purchases, Benson and Clive had the same amount of money.\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    mary, alexis, charlotte_initial, charlotte_final = symbols('mary alexis charlotte_initial charlotte_final')\n\n    # Mary had 7/5 as many stickers as Alexis\n    equation1 = Eq(mary, (7/5) * alexis)\n\n    # Mary and Alexis each gave 20% of their stickers to Charlotte\n    mary_gave = mary * 0.20\n    alexis_gave = alexis * 0.20\n    \n    # Charlotte's stickers increased by 80%\n    equation2 = Eq(charlotte_final, charlotte_initial + 0.80 * charlotte_initial)\n    \n    # Total stickers Charlotte received\n    charlotte_received = charlotte_final - charlotte_initial\n\n    # Mary had 20 stickers more than Charlotte in the end\n    equation3 = Eq(charlotte_final + 20, mary - mary_gave)\n\n    # Charlotte received the amount of stickers from Mary and Alexis\n    equation4 = Eq(charlotte_received, mary_gave + alexis_gave)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (mary, alexis, charlotte_initial, charlotte_final))\n    \n    return solutions[alexis]\n    \n# Calling the function\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit can't be 0\n        for j in range(0, 10):  # The second digit can be anything\n            # The number is ijjj where i and j are digits\n            count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    average_abc = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return average_abc\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_A = 42\n    sweets_B = 4 * sweets_A\n    sweets_C = 2 * sweets_B\n    return sweets_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    # let the number of pens Denise has be 'd'\n    # according to the question, Jay will then have '6d' pens\n    # they have a total of 126 pens combined\n    \n    # Therefore, the equation we can form is d + 6d = 126\n    # Solving for 'd' gives us the number of pens Denise has\n    \n    # d + 6d = 126\n    # 7d = 126\n    # d = 126 / 7\n    d = 126 // 7\n    \n    return d\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the candies\n    strawberry, chocolate, mint = symbols('strawberry chocolate mint')\n\n    # Equations based on given ratios\n    eq1 = Eq(strawberry, 2/5 * (strawberry + chocolate + mint))\n    eq2 = Eq(strawberry, 2/7 * (strawberry + chocolate + mint))\n    eq3 = Eq(strawberry, 2/9 * (strawberry + chocolate + mint))\n    eq4 = Eq(strawberry + chocolate + mint, 1371)  # Total mass of all containers\n\n    # Solving the equations\n    # We can infer that chocolate + mint = 3 * mint, since the mint to chocolate is a constant ratio.\n    # Therefore, strawberry = 2/5 * (strawberry + 3 * mint), 2/7 * (strawberry + 3 * mint), 2/9 * (strawberry + 3 * mint)\n    # Let's define 1 mint as 'm' and then chocolate as 2 * m, accordingly\n    m = symbols('m')\n    eq1 = Eq(strawberry, 2 / 5 * (strawberry + 3 * m))\n    eq2 = Eq(strawberry, 2 / 7 * (strawberry + 3 * m))\n    eq3 = Eq(strawberry, 2 / 9 * (strawberry + 3 * m))\n\n    # Since the quantity of mint candies stayed the same, we substitute its weight from one equation into others\n    solutions = solve((eq1, eq2, eq3, eq4), (strawberry, m))\n\n    # Calculate the total mass of strawberry candies\n    # The solution gives us the mass of strawberry candies for each container, we only need to sum them up\n    total_strawberries = solutions[strawberry] * (5 + 7 + 9) / 2\n\n    return total_strawberries.evalf()\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # cost of 5 chocolate bars\n    total_cost_chocolate_bars = 5 * 1.26\n    # since the total cost of 5 chocolate bars is the same as 6 cookies, find the price of one cookie\n    price_per_cookie = total_cost_chocolate_bars / 6\n    # cost of 4 cookies\n    total_cost_4_cookies = 4 * price_per_cookie\n    # initial amount\n    initial_amount = 9.05\n    # money left after buying 4 cookies\n    money_left = initial_amount - total_cost_4_cookies\n    \n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    # Let x be the number of boys and y be the number of girls\n    # Every 3 boys share one ball -> x/3\n    # Every 2 girls share one ball -> y/2\n    # Total number of balls is 250\n    # Total number of children is 650\n    # So we have two equations:\n    # x/3 + y/2 = 250 (1)\n    # x + y = 650 (2)\n    # Multiply equation (1) by 6 to clear the denominators:\n    # 2x + 3y = 1500 (3)\n    # Multiply equation (2) by 2:\n    # 2x + 2y = 1300 (4)\n    # Subtract equation (4) from equation (3):\n    # y = 200\n\n    # Now we just need to return the number of girls, which is y\n    return 200\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    \n    # After 25 girls go outside, girls become 2/3 of boys\n    equation1 = Eq(girls - 25, 2/3 * boys)\n    \n    # After 15 boys leave, boys and girls are equal\n    equation2 = Eq(girls - 25, boys - 15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n    total_students = solutions[girls] + solutions[boys]\n\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    total_value = 75.90\n    ratio_ten = 8\n    ratio_fifty = 3\n    value_ten = 0.10\n    value_fifty = 0.50\n    \n    # Total number of parts in the ratio\n    total_parts = ratio_ten + ratio_fifty\n    # Value of each part\n    value_per_part = total_value / total_parts\n\n    # Total value of 50-cent coins\n    total_value_fifty = value_per_part * ratio_fifty * value_fifty / value_ten\n\n    return total_value_fifty\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for x in range(1000):  # Arbitrarily large range to find the answer\n        if 8 * 11 == x * 9 + 34:\n            return x\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temperature = 8\n    drop_in_temperature = 12\n    midnight_temperature = midday_temperature - drop_in_temperature\n    return midnight_temperature\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    spent = 6400\n    full_price = spent / 0.2\n    saved = full_price - spent\n    return saved\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    # Volume of the prism without the hole\n    base_side_length = 7\n    hole_side_length = 3\n    volume_without_hole = 320\n\n    # Calculate the area of the base including the hole\n    area_base_with_hole = (base_side_length ** 2) - (hole_side_length ** 2)\n\n    # Calculate the height of the prism\n    height = volume_without_hole / area_base_with_hole\n    \n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    total_people = 8\n    # Amy and Judy are treated as a single person plus the 6 others\n    people_minus_pair = total_people - 1\n    # Amy and Judy can switch places, so there are 2! ways for them to seat\n    amy_judy_permutations = factorial(2)\n    # Circular permutations for the remaining places (n-1)!\n    circular_permutations = factorial(people_minus_pair - 1)\n    # The total permutations is the product of permutations for Amy and Judy\n    # and the circular permutations\n    total_permutations = amy_judy_permutations * circular_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    n = 46\n    cuts = 0\n    pieces = 1\n    while pieces < n:\n        pieces = pieces + cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Begin by finding the length of the concatenated sequences of increasing numbers\n    sequence_length = 0\n    current_max = 0\n    while sequence_length < 2008:\n        current_max += 1\n        sequence_length += current_max\n\n    # Calculate how far into the current sequence the 2008th number is\n    position_in_sequence = 2008 - (sequence_length - current_max)\n\n    # The number at this position is the answer\n    return position_in_sequence\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    # 3x = 10y\n    y_weight = 3 * x_weight / 10\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 4\n    # The first term a1 is 6, and we can calculate the number of terms n\n    # by noticing that the last term an is clearly 26.\n    a1 = 6\n    an = 26\n    d = 4\n\n    # The number of terms n can be calculated as: n = ((an - a1) / d) + 1\n    n = ((an - a1) / d) + 1\n\n    # The sum of an arithmetic sequence can be calculated as: S = n/2 * (a1 + an)\n    S = n / 2 * (a1 + an)\n\n    return int(S)\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n    \n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n    \n    # We know the number of tomatoes sold is 27\n    solutions = solve((equation, Eq(tomatoes, 27)), (tomatoes, cucumbers))\n    \n    return solutions[cucumbers]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 5, 9]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):     # Loop over the hundreds place (1-9)\n        for j in range(10):    # Loop over the tens place (0-9)\n            for k in range(10):# Loop over the ones place (0-9)\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    total_sum = 0\n    for num in range(1, 101):\n        if num % 5 == 2:\n            total_sum += num\n    return total_sum\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    n = 31\n    n16 = 100\n    difference = 6\n    \n    # Assuming the first term is a1, we have a16 = a1 + 15*d\n    # We can solve for a1: a1 = a16 - 15*d\n    a1 = n16 - 15 * difference\n\n    # We can use the formula for the sum of an arithmetic sequence: \n    # S_n = n/2 * (2*a1 + (n-1)*d)\n    total_mosquitoes = n / 2 * (2 * a1 + (n - 1) * difference)\n    \n    return int(total_mosquitoes)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    bags_given_away = total_bags // 3\n    bags_left = total_bags - bags_given_away\n    return bags_left\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Chris must ensure that after his turn, the number of matches left\n    # is a multiple of 3 to force Dylan into a losing position.\n    # This is because whatever Dylan takes (1 or 2 matches),\n    # Chris can always take 3 minus that number to keep the multiple of 3.\n    # If the match count is a multiple of 3, Dylan can't win.\n\n    # Total matches is 7\n    # Chris must take either 1 or 2 matches on his first turn\n    # So possible remaining match counts are 6 or 5\n    # To get to a multiple of 3, Chris needs to take away:\n    # Either 1 match to leave 6 (which is a multiple of 3)\n    # or 2 matches to leave 5 (which is not a multiple of 3)\n    # So Chris should take away 1 match to leave 6 matches,\n    # which will ensure his victory\n    matches_taken_by_chris = 1\n    return matches_taken_by_chris\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:  # A cannot be zero as it's a 3-digit number\n            ABC = A * 100 + B * 10 + C\n            return ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):  # 5 different digits\n        A, B, C, D, E = p\n        if A == 0 or D == 0:  # Ensure A and D are not 0 (4-digit number)\n            continue\n        ABAC = 1000 * A + 100 * B + 10 * A + C\n        DBEC = 1000 * D + 100 * B + 10 * E + C\n        ACEDC = 10000 * A + 1000 * C + 100 * E + 10 * D + C\n\n        if ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time_hours = 9\n    morning_time_minutes = 23\n    afternoon_time_hours = 13\n    afternoon_time_minutes = 6\n\n    total_minutes_morning = (morning_time_hours * 60) + morning_time_minutes\n    total_minutes_afternoon = (afternoon_time_hours * 60) + afternoon_time_minutes\n\n    ans = total_minutes_afternoon - total_minutes_morning\n    return ans\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    ans = (64 + 36) * (64 - 36)\n    return ans\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # Sum of the first part of the sequence: 1 to 9\n    first_half = sum(range(1, 10))\n    # Sum of the second part of the sequence: 8 to 1\n    second_half = sum(range(1, 9))\n    # Total sum\n    total_sum = first_half + second_half\n    return total_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the unknowns\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Given equations\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    # Return the price of the pencil case\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    sequence = []\n    for n in range(53, 22, -6):\n        sequence.append(n - (n-3))\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance_to_market = 48\n    walking_speed_per_minute = 8\n    time_taken = distance_to_market / walking_speed_per_minute\n    return time_taken\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, E, _, _ = p\n        if A == 0:  # A cannot be zero as it is the leftmost digit in AEEA\n            continue\n        num = A*1000 + E*110 + A\n        ans = str(num)\n        if len(set(ans)) == 2:  # Check if only two different digits are used\n            return num\n    return None\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_family_age = 4 * 25\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    \n    dad_age = total_family_age - (harry_age + mom_age + sister_age)\n    return dad_age\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assuming from context that \"him\" refers to a person with a number of restaurants to choose from.\n    # Let's assume that the number of restaurants available is 'n'.\n    # If there is no constraint given, he can choose to eat at each restaurant in exactly one way.\n    # Hence, the number of different choices is equal to the number of available restaurants 'n'.\n    # However, since the exact number 'n' is not provided, we cannot compute a numeric answer.\n    # We infer that 'n' is the number of choices, which would be the correct answer.\n    \n    # Without a given value for 'n', we assume 'n' is the answer.\n    ans = 'n'\n    return ans\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    result = 16.4 / 20\n    return result\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    pages = total_digits = 0\n    \n    while total_digits < 450:\n        pages += 1\n        total_digits += len(str(pages))\n\n    return pages if total_digits == 450 else pages - 1\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - 5/12\n    remaining_after_dinner = 1 - 2/7\n    remaining_money = 45\n\n    initial_money = remaining_money / (remaining_after_lunch * remaining_after_dinner)\n\n    return initial_money\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits_per_page = 0\n    page_number = 0\n    total_digits = 1524\n\n    while total_digits > 0:\n        page_number += 1\n        if page_number < 10:\n            digits_per_page = 1\n        elif page_number < 100:\n            digits_per_page = 2\n        elif page_number < 1000:\n            digits_per_page = 3\n        else:\n            digits_per_page = 4\n\n        total_digits -= digits_per_page\n\n    return page_number\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * 4) // 2  # Total games in a round-robin tournament with 5 players\n    games_won_by_others = 2 + 1 + 4 + 3  # Sum of games won by Lily, Eva, Tina, and Emma\n    games_won_by_gina = total_games - games_won_by_others\n\n    return games_won_by_gina\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    difference = largest_number - smallest_number\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Given values\n    angle = 20  # inclination angle in degrees\n    d = 400  # distance along the slope in meters\n    mu = 0.2  # coefficient of kinetic friction\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    angle_radians = math.radians(angle)  # convert angle to radians\n\n    # Calculate the acceleration along the slope\n    # a = g(sin(theta) - mu*cos(theta))\n    a = g * (math.sin(angle_radians) - mu * math.cos(angle_radians))\n\n    # Using the kinematic equation: final velocity squared = initial velocity squared + 2 * acceleration * distance\n    # Since the skier starts from rest, initial velocity (u) is 0\n    v_squared = 2 * a * d\n\n    # Calculate final speed at the bottom (v) by taking square root of v_squared\n    v = math.sqrt(v_squared)\n\n    return v\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    for avril_correct in range(11):\n        avril_points = avril_correct * 10 - (10 - avril_correct) * 5\n        eddie_points = avril_points + 15\n        if avril_points + eddie_points == 155:\n            return avril_correct\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_price = 5\n    bag_price = 10\n    total_spent = 300\n    \n    # Marcus' calculation\n    marcus_shirts = 20\n    \n    # Correct calculation\n    price_one_group = 4 * shirt_price + bag_price\n    number_of_groups = total_spent // price_one_group\n    correct_shirts_bought = number_of_groups * 4\n\n    if marcus_shirts == correct_shirts_bought:\n        is_marcus_correct = True\n    else:\n        is_marcus_correct = False\n\n    return correct_shirts_bought, is_marcus_correct\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # 6 men can complete 1 job in 5 days\n    # So, 1 man can complete 1 job in 6*5 days\n    man_days_per_job = 6 * 5\n    \n    # 5 women can complete 1 job in 6 days\n    # So, 1 woman can complete 1 job in 5*6 days\n    woman_days_per_job = 5 * 6\n    \n    # 10 men and 5 women will do how many jobs in 1 day?\n    rate_of_10_men = 10 / man_days_per_job\n    rate_of_5_women = 5 / woman_days_per_job\n    \n    # Combined rate\n    combined_rate = rate_of_10_men + rate_of_5_women\n    \n    # Time to complete 1 job with combined rate\n    days_to_complete_one_job = 1 / combined_rate\n    \n    return days_to_complete_one_job\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Equation 1: Initially, there were thrice as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n\n    # Equation 2: After 12 boys left and 20 girls joined, there were equal numbers of boys and girls\n    equation2 = Eq(boys - 12, girls + 20)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Answer is the number of boys at the gathering at first\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n    \n    mass_A = 56\n    mass_B = 96\n    mass_C = 120\n\n    # Find the greatest common divisor (GCD) of the three masses\n    gcd_AB = gcd(mass_A, mass_B)\n    gcd_ABC = gcd(gcd_AB, mass_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, bananas, oranges = symbols('apples bananas oranges')\n\n    equation1 = Eq(bananas, 2 * apples)\n    equation2 = Eq(oranges, 3 * apples)\n    equation3 = Eq(apples + bananas + oranges, 24)\n\n    solutions = solve((equation1, equation2, equation3), (apples, bananas, oranges))\n\n    return solutions[bananas]\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    anna_age_now = 8\n    mother_age_now = 44\n    years = 0\n\n    while True:\n        years += 1\n        if (mother_age_now + years) == 3 * (anna_age_now + years):\n            break\n\n    return years\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    may_short = 7\n    nancy_long = 18\n    may_short_length = may_short * 40\n    nancy_long_length = nancy_long * 70\n    \n    total_length_diff = 2.4 * 100  # convert to cm\n    \n    may_total_length = may_short_length + total_length_diff\n    may_long_length = may_total_length - nancy_long_length\n    may_long_pieces = may_long_length / 70\n    \n    may_total_pieces = may_short + may_long_pieces\n    return int(may_total_pieces)\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_animals = 12\n    total_legs = 34\n\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if chickens * 2 + rabbits * 4 == total_legs:\n            return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # Since each of the 6 children must get at least one apple,\n    # we distribute one apple to each child first. This leaves us with 30 - 6 = 24 apples.\n    apples_left = 30 - 6\n    \n    # To minimize the maximum number, we try to distribute the apples as evenly as we can among the children.\n    # Since there are 6 children, we start by giving each child an equal number of the remaining apples.\n    apples_per_child = apples_left // 6\n    \n    # After distributing apples_per_child apples to each of the 5 children (except for the one getting the most),\n    # we will give the remaining apples to the child who gets the most.\n    # This child will also get the one apple that we initially distributed to everyone.\n    max_apples = 1 + apples_per_child + (apples_left % 6)\n    \n    return max_apples\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = (2.4 * 52 / 100) + (7.6 * 52 / 100)\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    # Largest two-digit number is 99\n    for num in range(99, 9, -1):\n        if (num % 4 == 3) and (num % 5 == 3):\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    # Total parts of the mixture\n    total_parts = 3 + 1  # Red paint has 3 parts and blue paint has 1 part\n    \n    # Calculate the amount of red paint needed\n    red_paint_amount = (3 / total_parts) * 1  # 1 litre of 'Purple Fire' paint\n    \n    return red_paint_amount\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Convert all measurements to centimeters for comparison\n    measurements_cm = {\n        '83m': 83 * 100,\n        '200cm': 200,\n        '8cm': 8,\n        '1/2m': 0.5 * 100\n    }\n    \n    # The standard height of a classroom door is around 200cm (or 2 meters)\n    standard_door_height_cm = 200\n    \n    # Find the measurement closest to the height of a classroom door\n    closest_measurement = min(measurements_cm, key=lambda x: abs(measurements_cm[x]-standard_door_height_cm))\n    \n    # Return the representation of the closest measurement\n    return closest_measurement\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    ans = 345 * 67\n    return ans\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    existing_numbers = [9, 7, 5, 8, 4, 1, 8]\n    total_numbers_count = 8\n    mean_value = 6\n    \n    total_sum = mean_value * total_numbers_count\n    missing_number = total_sum - sum(existing_numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    money_given_to_sister = total_money / 4\n    money_left = total_money - money_given_to_sister\n    return money_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of red balls and b represent the number of blue balls\n    r, b = symbols('r b')\n\n    # We have two equations based on the problem statement\n    equation1 = Eq(b, 2 * r)  # Number of blue balls is twice the number of red balls\n    equation2 = Eq(r + b, 18)  # Total number of balls is 18\n\n    # Solve the system of equations for r and b\n    solutions = solve((equation1, equation2), (r, b))\n\n    # Number of blue balls is the value of b in the solutions\n    return solutions[b]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Find the least number of apples for the kid who gets the most\n    # given each child must get a different number and at least 1 apple\n    # We can start by giving the minimum possible apples to each child in ascending order\n    for most_apples in range(1, 50):\n        # starting from one apples, increasing the minimum each time\n        total_apples = sum(range(1, 8)) + most_apples  # sum for the other 7 children plus the most_apples\n        if total_apples <= 50 and sum(range(most_apples + 1, most_apples + 8)) > 50:\n            # if the total is within the available apples and \n            # it's impossible to have another child with more apples\n            return most_apples\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # 8 cows for 10 days (8 * 10 = 80 cow-days)\n    # 4 cows for 15 days (4 * 15 = 60 cow-days)\n    # Let x be the number of cows that can be fed for 5 days.\n    \n    total_grass = 8 * 10  # This is the total amount of cow-days the pasture can support\n    \n    # We want to find x such that x * 5 = total_grass\n    x = total_grass / 5\n    \n    return x\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_of_12_packets = 1.02  # in kilograms\n    mass_of_one_packet = total_mass_of_12_packets / 12\n    total_mass_of_4_packets = mass_of_one_packet * 4\n    return total_mass_of_4_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Number of tapes\n    tapes = 3\n    \n    # Cost of each tape\n    tape_cost = 9\n    \n    # Total cost of tapes\n    total_tape_cost = tapes * tape_cost\n    \n    # Total cost of 4 identical compact discs and 3 identical tapes\n    total_cost = 83\n    \n    # Subtract the cost of tapes from the total cost to find the cost of 4 identical compact discs\n    cost_of_discs = total_cost - total_tape_cost\n    \n    # Divide the cost of discs by 4 to find the cost of each compact disc\n    price_per_disc = cost_of_discs / 4\n\n    return price_per_disc\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Total number of cards is given, let's represent Hisham's cards by h and Melissa's cards by m\n    h, m = symbols('h m')\n\n    # Now we know the following:\n    # 1. Melissa had twice as many cards as Hisham. (m = 2 * h)\n    # 2. Together they had 876 cards. (h + m = 876)\n    equation1 = Eq(m, 2 * h)\n    equation2 = Eq(h + m, 876)\n\n    # We can solve these two equations to find the number of cards Hisham and Melissa had initially\n    solutions = solve((equation1, equation2), (h, m))\n    \n    h_cards = solutions[h]\n    m_cards = solutions[m]\n\n    # To make them equal, the number of cards Melissa should give to Hisham would be:\n    cards_to_give = (m_cards - h_cards) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Define variables for the sequence\n    a, b, c, d, e, f, g = 0, 0, 0, 6, 0, 15, 0\n\n    # Since the fourth number is 6 (d), and the sixth number is 15 (f),\n    # we can deduce the fifth (e) and third (c) numbers in the sequence\n    # e = f - d\n    e = f - d\n    # c = d - e\n    c = d - e\n    # Now, using the third number (c) we can deduce the second (b) number in the sequence\n    # b = d - c\n    b = d - c\n    # Using the second number (b) we deduce the first (a) number in the sequence\n    # a = c - b\n    a = c - b\n\n    # Finally, calculate the seventh number (g) in the sequence\n    # g = e + f\n    g = e + f\n\n    return g\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number Tasha thinks of\n    number = symbols('number')\n\n    # Create the equation according to the problem statement\n    equation = Eq(3 * number + 8, 35)\n\n    # Solve the equation to find the number\n    solved_number = solve(equation, number)\n\n    return solved_number[0]  # Take the first (and only) solution\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n    \n    boys = 28\n    girls = 32\n    \n    ans = gcd(boys, girls)\n    \n    return ans\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # Convert litres to millilitres\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * sum(1 / (i * (i + 5)) for i in range(1, 32, 5))\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    perms = permutations(digits)\n    min_odd = float('inf')\n    for perm in perms:\n        if perm[0] != 0 and perm[-1] % 2 != 0:  # it must be a 5-digit number and odd\n            number = int(''.join(map(str, perm)))  \n            min_odd = min(min_odd, number)\n    return min_odd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    correct_divisor = 1.22\n    incorrect_divisor = 122\n    difference_in_results = 99.396\n\n    # Since the incorrect result is smaller by difference_in_results, we know the equation to solve is:\n    # (correct_result / correct_divisor) - (correct_result / incorrect_divisor) = difference_in_results\n    # Let's call the correct result x\n    # x / 1.22 - x / 122 = 99.396\n    # Solving for x:\n    x = (difference_in_results * correct_divisor * incorrect_divisor) / (incorrect_divisor - correct_divisor)\n\n    return x\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # 24 men can complete the job in 16 days means 1 man can complete the job in 24*16 days.\n    man_days = 24 * 16\n    # 16 women can complete the job in 24 days means 1 woman can complete the job in 16*24 days.\n    woman_days = 16 * 24\n\n    # The job can be considered as 1 unit of work.\n    # Now, we find the work done by 1 man and 1 woman in 1 day.\n    work_per_man = 1 / man_days\n    work_per_woman = 1 / woman_days\n\n    # Work done by 10 men and 6 women in 1 day is the sum of their individual work capacities.\n    daily_work = (10 * work_per_man) + (6 * work_per_woman)\n\n    # We find the total time required to complete 1 unit of work by 10 men and 6 women.\n    total_days = 1 / daily_work\n\n    return total_days\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # The number of regions, R, that n identical rectangles can divide the plane into can be\n    # given by the formula R = n^2 + n + 1.\n    # Here n is the number of rectangles, which is 4.\n    rectangles = 4\n\n    # Apply the formula to find the number of regions.\n    regions = (rectangles ** 2) + rectangles + 1\n\n    return regions\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    julie, marion, ethan = symbols('julie marion ethan')\n    \n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n    \n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n    \n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    # Calculate the total number of ways to line up without condition\n    total_ways = factorial(5)\n\n    # Calculate the number of ways with Eddie in the middle\n    ways_with_eddie_in_middle = factorial(4)\n\n    # Subtract the number of ways with the unwanted condition from the total ways\n    ans = total_ways - ways_with_eddie_in_middle\n\n    return ans\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    ratio = (24 / 96) ** (1/2)\n    n = 96 * ratio\n\n    return int(n)\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbol for the sum of money Hamid had initially\n    initial_sum = symbols('initial_sum')\n\n    # equation for the given condition\n    equation = Eq((1/3) * initial_sum + 56, initial_sum - (3/8) * initial_sum)\n\n    # solve the equation\n    solved_sum = solve(equation, initial_sum)\n\n    # calculate the total amount spent\n    spent = (1/3) * solved_sum[0] + 56\n    \n    return spent\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123456789'\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 11 == 0:\n            return num  # Since permutations are generated lexicographically, the first match is min\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    total_time = 10  # seconds\n\n    relative_speed = train_speed + eddie_speed  # m/s\n    train_length = relative_speed * total_time  # m\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences according to the problem statement\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    \n    # Using Chinese Remainder Theorem to solve the congruences\n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    for operations in product(['+', '*'], repeat=3):\n        expression = f\"1{operations[0]}2{operations[1]}3{operations[2]}4\"\n        value = eval(expression)\n        if value > max_value:\n            max_value = value\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    for correct_answers in range(13):\n        incorrect_answers = 12 - correct_answers\n        total_score = correct_answers * 8 - incorrect_answers * 3\n        if total_score == 63:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    total_distance = 700 + 900\n    speed = 400  # in meters per minute\n    time = total_distance / speed  # time in minutes\n\n    return time\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula: S = n/2 * (a1 + an)\n    # where n is the number of terms, a1 is the first term and an is the last term.\n    \n    # Given, S_first_5 = 10 (sum of the first 5 numbers)\n    # Given, S_last_5 = 120 (sum of the last 5 numbers)\n    # To find the first term a1 and the last term a60, we need the common difference (d)\n    \n    # The sum of first 5 terms: S_first_5 = 5/2 * (2*a1 + (5-1)*d) = 10\n    # The sum of last 5 terms: S_last_5 = 5/2 * (2*(a1 + (60-1)*d) - (5-1)*d) = 120\n    # We can create two equations based on the above formula and solve for a1 and d.\n\n    from sympy import symbols, Eq, solve\n\n    a1, d = symbols('a1 d')\n    eq1 = Eq(5/2 * (2*a1 + 4*d), 10)\n    eq2 = Eq(5/2 * (2*(a1 + 59*d) - 4*d), 120)\n\n    # Solve the system of equations for a1 and d\n    solutions = solve((eq1, eq2), (a1, d))\n\n    # The sum S of all 60 number is:\n    S = 60/2 * (2*solutions[a1] + (60-1)*solutions[d])\n    \n    return S\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1997-2):\n        a, b = b, a+b\n    return b % 3\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Sam's and Peter's initial number of stickers\n    sam, peter = symbols('sam peter')\n    \n    # Sam had 40 stickers more than Peter initially\n    eq1 = Eq(sam, peter + 40)\n    \n    # Sam gives 20% of his stickers to Peter\n    sam_gives = 0.20 * sam\n    \n    # Peter's new amount after receiving stickers from Sam\n    peter_new = peter + sam_gives\n    \n    # Peter gives 25% of his new amount of stickers to Sam\n    peter_gives = 0.25 * peter_new\n    \n    # Sam's final amount after the exchanges\n    sam_final = sam - sam_gives + peter_gives\n    \n    # Peter's final amount after the exchanges\n    peter_final = peter_new - peter_gives\n    \n    # In the end, Sam had 96 stickers more than Peter\n    eq2 = Eq(sam_final, peter_final + 96)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (sam, peter))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Hazel's current age and her mom's current age\n    hazel_current, mom_current = symbols('hazel_current mom_current')\n\n    # The equation representing that Hazel will be 3 times her current age in 12 years\n    equation1 = Eq(hazel_current + 12, 3 * hazel_current)\n\n    # The equation representing that Hazel's mom will be 3 times Hazel's age on Hazel's 18th birthday\n    equation2 = Eq(mom_current + (18 - hazel_current), 3 * 18)\n\n    # Solve the system of equations for Hazel's current age and her mom's current age\n    solutions = solve((equation1, equation2), (hazel_current, mom_current))\n\n    # Return Hazel's mom's current age\n    return solutions[mom_current]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    # Peter's current age\n    peter_age = 45\n    # Pip's current age\n    pip_age = 7\n    # Pit's current age\n    pit_age = 14\n\n    # Initial difference in ages\n    difference = peter_age - (pip_age + pit_age)\n\n    # Since Peter, Pip, and Pit all age at the same rate, the difference remains constant.\n    # We find the number of years needed for the sum of Pip's and Pit's ages to equal Peter's age.\n    # this happens when their combined ages have doubled the difference\n    number_of_years = difference\n\n    # Peter's age when this happens will be his current age plus that number of years\n    return peter_age + number_of_years\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # Since there are 13 different numbers, the worst case to ensure to have 2 cards with consecutive numbers\n    # would be if we pick one card of each number without getting two consecutive numbers.\n    # There are 4 patterns of each number. We can draw all 4 cards of the same number before moving to the next\n    # to ensure we haven't picked 2 consecutive numbers. If we repeat this 12 times (for numbers 1 through 12),\n    # we have 48 cards (4 patterns * 12 numbers) and still no consecutive numbers.\n    # The next card we pick, no matter which number it is, must create a pair of consecutive numbers\n    # either with the previous or the next number. So we must pick 1 additional card beyond the 48.\n    ans = 48 + 1\n    return ans\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    laptops = symbols('laptops')  # number of laptops James bought\n    original_cost_per_laptop = symbols('original_cost_per_laptop')  # original cost per laptop\n\n    # Define equations based on the problem statement\n    original_total_cost = original_cost_per_laptop * laptops\n    original_selling_price = 2000 * laptops\n    original_profit = Eq(original_selling_price - original_total_cost, 60000)\n\n    # New cost and profit calculations after the decrease\n    new_cost_per_laptop = original_cost_per_laptop - (original_cost_per_laptop / 5)\n    new_total_cost = new_cost_per_laptop * laptops\n    new_profit = original_profit.rhs * 1.3\n\n    # Define the equation for new profit\n    new_profit_eq = Eq(original_selling_price - new_total_cost, new_profit)\n\n    # Solve the system of equations\n    solutions = solve((original_profit, new_profit_eq), (laptops, original_cost_per_laptop))\n\n    return solutions[laptops]\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    half_number = 10\n    original_number = half_number * 2\n    return original_number\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    difference = 4\n    last_term = 80\n    number_of_terms = ((last_term - first_term) // difference) + 1\n    total_seats = (number_of_terms * (first_term + last_term)) // 2\n    return total_seats\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # initialize the count of digits\n    digits_count = 0\n    \n    # count the digits from 1 to 129\n    for number in range(1, 130):\n        digits_count += len(str(number))\n\n    return digits_count\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Each sheet has 4 page numbers (front and back, odd and even)\n    sheet_number = 5\n    \n    # Back page number is 36, so there are a total of 18 sheets\n    # because each sheet has two pages (front and back).\n    total_sheets = 36 // 2\n    \n    # The front page number of each sheet is equal to\n    # 2 * (sheet position from the back) - 1\n    # Since we are starting to count sheets from the back,\n    # sheet number from the back is total_sheets - sheet_number + 1\n    front_page_number = 2 * (total_sheets - sheet_number + 1) - 1\n    \n    # The sum of all the page numbers on the sheet will be\n    # front page, back page of the front page, front page of the next sheet\n    # and back page of the front page of the next sheet.\n    # This can be represented as:\n    # front_page_number + (front_page_number + 1) + (front_page_number + 2) + (front_page_number + 3)\n    sum_of_pages = front_page_number + (front_page_number + 1) + (front_page_number + 2) + (front_page_number + 3)\n    \n    return sum_of_pages\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    boys_more_than_girls = 36\n    total_students = 0\n    side_length = 1  # Starting with the smallest possible square\n\n    # Loop to find the difference in the number of boys and girls until it matches the given difference (36)\n    while True:\n        if side_length % 2 == 0:  # If the side length is even, there are more girls\n            boys = ((side_length // 2) * 4) * (side_length // 2)\n            girls = boys - side_length * side_length\n        else:  # If the side length is odd, there are more boys\n            girls = (((side_length // 2) * 4) * (side_length // 2)) + (side_length // 2) * 4\n            boys = girls + (side_length * side_length)\n\n        if boys - girls == boys_more_than_girls:\n            total_students = boys + girls\n            break\n\n        side_length += 1\n\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Number of men in the first scenario\n    men_first_scenario = 3\n    # Number of days in the first scenario\n    days_first_scenario = 2\n    # Length of trench in the first scenario\n    length_first_scenario = 120\n\n    # Work done in the first scenario (men * days = work units)\n    work_first_scenario = men_first_scenario * days_first_scenario\n\n    # Work needed to be done to dig the length of trench in the first scenario \n    # (work units to dig a unit length of trench)\n    work_per_meter_first_scenario = work_first_scenario / length_first_scenario\n\n    # Number of men in the second scenario\n    men_second_scenario = 4\n    # Length of trench in the second scenario\n    length_second_scenario = 880\n    \n    # Total work needed for the second scenario (work units)\n    total_work_second_scenario = work_per_meter_first_scenario * length_second_scenario\n\n    # Number of days in the second scenario\n    days_second_scenario = total_work_second_scenario / men_second_scenario\n\n    return days_second_scenario\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    # Since the remainders form an increasing arithmetic pattern,\n    # we can say there's a common difference 'd'.\n    # Let's assume the remainders are r, r+d, r+2d, r+3d respectively.\n    # Since the remainders when divided by 7, 9, and 28 must be less than those numbers,\n    # and 'a' can be any number, we consider 'a' to be large enough such that r+2d < a.\n    # We can ignore 'a' for the minimum number because it doesn't restrict the minimum M.\n    \n    # We start with minimum possible value of r which is 1 (for division by 7),\n    # the common difference d has to be at least 1 to guarantee an increasing pattern.\n    # We iterate r from 1 to 6 (as the remainder cannot be equal to or greater than the divisor, which is 7)\n    # We also iterate d from 1 to 27 (which is 28 - 1)\n    # M must satisfy the conditions: M % 7 = r, M % 9 = r+d, M % 28 = r+3d\n    for r in range(1, 7):\n        for d in range(1, 28):\n            # Calculate M based on the remainders for each divisor\n            for M in range(r, 7*9*28, 7):\n                if (M % 9 == r + d and M % 28 == r + 3*d):\n                    return M\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60  # Ellie's rate per week\n    combined_time = 4  # weeks they can finish the work together\n    \n    # Total work done by Ellie in 4 weeks\n    ellie_work = ellie_rate * combined_time\n    \n    # Remaining work Gloria has to do\n    gloria_work = total_people - ellie_work\n\n    # Since Gloria and Ellie finish the work together in 4 weeks,\n    # Gloria's work per week is the remaining work divided by 4.\n    gloria_rate = gloria_work / combined_time\n    \n    # The time it takes Gloria to finish the work by herself is the\n    # total number of people divided by her rate per week.\n    time_gloria_alone = total_people / gloria_rate\n\n    return time_gloria_alone\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = (2 * 15) / 5\n    return numerator\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Initial number of books\n    first_shelf = 18\n    second_shelf = 24\n\n    # Let x be the number of books moved from the first shelf to the second\n    # After moving, first shelf will have 18 - x books\n    # and second shelf will have 24 + x books\n\n    # The second shelf should have twice as many books as the first\n    # So, the equation is: 24 + x = 2 * (18 - x)\n    \n    # Solving the equation for x:\n    x = symbols('x')\n    equation = Eq(24 + x, 2 * (18 - x))\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    num1 = 285 + 6/7\n    num2 = 181 + 10/11\n    num3 = 153 + 12/13\n    denom = 1/7 + 1/11 + 1/13\n\n    ans = (num1 + num2 + num3) / denom\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_pupils = symbols('total_pupils')\n    # Equation: 5 + 3/4*(total_pupils - 5) + 2/9*total_pupils = total_pupils\n    equation = Eq(5 + 3/4*(total_pupils - 5) + 2/9*total_pupils, total_pupils)\n    \n    # Solve the equation for total_pupils\n    solutions = solve(equation, total_pupils)\n    \n    # Since we're dealing with pupils, we're interested in the positive integer solution\n    for solution in solutions:\n        if solution.is_integer and solution > 0:\n            return solution\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    # Given values\n    time = 20  # in seconds\n    distance = 300  # in meters\n\n    # Speed is distance divided by time\n    speed = distance / time  # in meters per second\n    \n    # To convert speed to km/h multiply by 3.6 (since 1 m/s is 3.6 km/h)\n    speed_kmh = speed * 3.6\n\n    return speed_kmh\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 // 6\n    return ans\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    leftover_with_4 = 32\n    leftover_last_box_7 = 3\n    lollipops_with_7 = 7\n\n    # Find the first number that when divided by 7 gives a remainder of 3\n    for i in range(lollipops_with_7):\n        if (i % 7 == leftover_last_box_7):\n            first_valid_number_for_7 = i\n            break\n\n    # Now find a common number that gives 32 when divided by 4,\n    # and also gives the valid number previously found for division by 7\n    lollipops = 0\n    while True:\n        if lollipops % 4 == leftover_with_4 and lollipops % 7 == first_valid_number_for_7:\n            break\n        lollipops += 28  # LCM of 4 and 7 is 28, so we increment by 28 to maintain the condition for 7\n\n    return lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for long tubes (lt) and short tubes (st)\n    lt, st = symbols('lt st')\n\n    # Equation representing the total number of tennis balls\n    equation = Eq(8 * lt + 5 * st, 47)\n\n    # Possible combinations for lt and st, assuring natural numbers and lt>0\n    solutions = [(s[lt], s[st]) for s in solve(equation) if s[lt] > 0 and s[st] >= 0]\n\n    # Returning the number of long tubes from the first valid solution\n    return solutions[0][0]\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    # The common difference (d) of an arithmetic sequence can be found by:\n    # d = (a_n - a_m) / (n - m)\n    common_difference = (ninth_term - third_term) / (9 - 3)\n\n    # The nth term (a_n) of an arithmetic sequence can be found using:\n    # a_n = a_m + (n - m) * d\n    eleventh_term = third_term + (n - 3) * common_difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let the total number of Felicia's bracelets initially be F.\n    # Let the number of bracelets Felicia sold be (3/5)*F.\n    # Let the number of bracelets Janice bought be (2/5)*(3/5)*F = (6/25)*F.\n    \n    # Given that Janice had 96 bracelets initially.\n    # After buying, Janice's bracelets will be 96 + (6/25)*F.\n    \n    # According to the problem, after selling and buying, the ratio is 5:7.\n    # The remaining bracelets for Felicia will be F - (3/5)*F = (2/5)*F.\n    # So, the ratio is (2/5)*F / (96 + (6/25)*F) = 5/7.\n    \n    # Cross multiply to solve for F:\n    # (2/5)*F * 7 = 5 * (96 + (6/25)*F)\n    # (2/7)*5*F = 5*96 + (5*6/25)*F\n    # (14/5)*F - (30/25)*F = 5*96\n    # (70/25)*F - (30/25)*F = 480\n    # (40/25)*F = 480\n    # F = 480 * (25/40)\n    # F = 12 * 25\n    # F = 300\n    \n    # Now calculate the number of bracelets Janice bought from Felicia:\n    # Janice bought (6/25)*F = (6/25)*300 = 72 bracelets.\n    \n    F = 480 * (25/40)\n    bracelets_bought = (6/25) * F\n    \n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    ans = sum(x**3 for x in numbers)\n    return ans\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = original_price * (discount_percentage / 100)\n    discounted_price = original_price - discount_amount\n    \n    return discounted_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    incorrect_result = 2138.4\n    missing_decimal_value = 432  # This represents 4.32 without the decimal point.\n    \n    # The incorrect result (2138.4) is 432 times greater than the true result\n    # because Will forgets to put down the decimal point, so the true result is:\n    true_result = incorrect_result / missing_decimal_value\n    \n    # Subtracting true_result from incorrect_result will give us the difference\n    # to be added to the true_result to correct it.\n    difference = incorrect_result - true_result\n    corrected_true_result = true_result + difference\n    \n    return corrected_true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    differences = [2758 - 2017, 3670 - 2758]\n    gcd_value = differences[0]\n\n    # Find the greatest common divisor (GCD) of the differences\n    for diff in differences[1:]:\n        # Compute the GCD\n        gcd_value = math.gcd(gcd_value, diff)\n    \n    # Find the factors of the gcd_value\n    A_values = set()\n    for i in range(1, int(gcd_value**0.5) + 1):\n        if gcd_value % i == 0:\n            A_values.add(i)\n            A_values.add(gcd_value // i)\n    \n    # The sum of possible values of A excluding 1 and gcd_value itself\n    A_values.discard(1)\n    A_values.discard(gcd_value)\n    \n    return sum(A_values)\n\nimport math\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n    total_candies = 448\n    candies_per_boy = 5\n    candies_per_girl = 3\n    more_girls = 8\n    \n    # Equation: (boys * candies_per_boy) + (girls * candies_per_girl) = total_candies\n    equation1 = Eq(boys * candies_per_boy + girls * candies_per_girl, total_candies)\n    \n    # Equation: girls = boys + more_girls\n    equation2 = Eq(girls, boys + more_girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # Calculate the total number of children\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let mc and fc be the initial number of milk candies and fruit candies respectively\n    mc, fc = symbols('mc fc')\n\n    # Initial ratio is 7:9, giving us the equation 9*mc = 7*fc.\n    equation1 = Eq(9 * mc, 7 * fc)\n\n    # After eating 8 milk candies, the ratio of milk candies to fruit candies is 2:3.\n    equation2 = Eq((mc - 8) * 3, 2 * fc)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mc, fc))\n\n    # Return the number of milk candies in the beginning\n    return solutions[mc]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 0\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Calculate the age difference between grandmother and mum\n    # at a specific point in time\n    age_difference = 2008 - 1996  # years between 1st December 2008 and 1st December 1996\n    mums_age_in_2008 = 40 + age_difference  # mum's age in 2008\n\n    # Grandmother's age when mum was born\n    grandmothers_age_when_mum_born = 80 - mums_age_in_2008\n\n    return grandmothers_age_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if '3' in str(i):\n            if str(i)[-1] == '3':\n                ans = count\n    return ans\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    min_1000_plus = None\n    for lemonade_sold in range(351):\n        income_from_lemonade = 4 * lemonade_sold\n        remaining_bottles = 350 - lemonade_sold\n        for plus_sold in range(remaining_bottles + 1):\n            income_from_plus = 7 * plus_sold\n            if income_from_lemonade + income_from_plus == 2012:\n                if min_1000_plus is None or plus_sold < min_1000_plus:\n                    min_1000_plus = plus_sold\n    return min_1000_plus\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    apples_initial = 60\n    apples_per_friend_initial = 4\n    num_friends = apples_initial // apples_per_friend_initial\n    apples_per_friend_new = apples_per_friend_initial + 1\n    total_apples_needed = num_friends * apples_per_friend_new\n    return total_apples_needed\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Assuming the worst case scenario where Yohan picks all the red and black socks before getting a white pair\n    max_red_socks = 10\n    max_black_socks = 10\n    # He needs to pick one more to finally get a white pair (the worst case ensures the next one is white)\n    white_pair = 1\n    # Total socks picked in the worst case before getting a white pair\n    max_socks = max_red_socks + max_black_socks + white_pair\n    \n    return max_socks\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    for groups_of_6 in range(25):\n        groups_of_4 = 24 - groups_of_6\n        if groups_of_6 * 6 + groups_of_4 * 4 == 112:\n            return groups_of_6\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_initial = 60\n    num_numbers_initial = 3\n    sum_initial = average_initial * num_numbers_initial\n\n    average_final = 90\n    num_numbers_final = 4\n    sum_final = average_final * num_numbers_final\n\n    fourth_number = sum_final - sum_initial\n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters = meters * 100\n    return centimeters\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    # Since A, B, and C are distinct digits, we can iterate through all possibilities\n    for A in range(1, 10): # A can't be zero because it's a 3-digit number's first digit\n        for B in range(10): # B can be any digit from 0 to 9\n            if B == A:\n                continue # B must be different from A\n            for C in range(10): # C can be any digit from 0 to 9\n                if C in (A, B):\n                    continue # C must be different from both A and B\n                if 2 * (100 * A + 10 * B + C) == 100 * B + 10 * C + C:\n                    return 100 * A + 10 * B + C # Return the value of the 3-digit number ABC\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen trades 3 fish for 2 rabbits: ratio fish to rabbits is 3:2\n    # Oscar trades 3 rabbits for 4 packs of wheat: ratio rabbits to wheat is 3:4\n    # Dennis wants 8 packs of wheat.\n\n    # Combined ratio for fish to wheat is (3 fish / 2 rabbits) * (3 rabbits / 4 packs of wheat) = 9 fish / 8 packs of wheat\n    # For 8 packs of wheat, Owen needs to give Dennis 9 fish.\n\n    # But as already 3 fish are needed for 2 rabbits, which results in 4 packs of wheat,\n    # for 8 packs of wheat (which is double of 4), we would need double the amount of fish:\n    \n    num_fish = (9 / 8) * 8  # Simplified ratio multiplied by the desired amount of wheat packs\n\n    return int(num_fish)\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_spent = 3 * 1.60 + 2 * 0.62 + 4.50\n    change = 20 - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    handbag_discounted_price = 428\n    total_discount = 121\n    handbag_original_price = handbag_discounted_price / (1 - 0.20)\n    purse_discount = total_discount - (handbag_original_price - handbag_discounted_price)\n    purse_original_price = purse_discount / 0.28\n    return purse_original_price\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    number = 25\n    twos = 0\n    fives = 0\n    \n    for i in range(2, number + 1):\n        while i % 2 == 0:\n            twos += 1\n            i //= 2\n        while i % 5 == 0:\n            fives += 1\n            i //= 5\n    \n    ans = min(twos, fives)\n    \n    return ans\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # the recurring decimal can be written as 0.A22A22A22...\n    # since there are 20 digits, there are 10 occurrences of the two-digit pattern A2\n    \n    # Considering 10 occurrences of A2, the sum would be:\n    sum_recurring_part = 10 * (int('A') + 2)\n    \n    # Since the sum of the first 20 digits is 80, we can write the equation:\n    sum_recurring_part = 80\n    # This simplifies to:\n    # 10 * (A + 2) = 80\n    # A + 2 = 8\n    # A = 6\n    A = 6\n    return A\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    day_distance = 4\n    night_distance = 1\n    well_depth = 25\n\n    current_distance = 0\n    days = 0\n\n    while current_distance < well_depth:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= well_depth:\n            break\n        current_distance -= night_distance\n\n    return days\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    dances_per_week = 2\n    weeks = 2\n    total_dances = dances_per_week * weeks\n    return total_dances\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Speeds in miles per hour\n    jogging_speed = 6\n    walking_speed = 5\n\n    # Time spent jogging in hours (from 6:30 am to 7:00 am)\n    jogging_time = (7 - 6) - (30 / 60)\n\n    # Time spent walking in hours (from 7:00 am to 8:00 am)\n    walking_time = (8 - 7)\n\n    # Calculate the distance covered while jogging and walking\n    distance_jogging = jogging_speed * jogging_time\n    distance_walking = walking_speed * walking_time\n\n    # Total distance covered is the sum of distances covered while jogging and walking\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n    chair_price = 120\n    jacket_percentage = 40 / 100\n    remaining_percentage = 30 / 100\n\n    equation = Eq(original_amount - chair_price - jacket_percentage * (original_amount - chair_price), remaining_percentage * original_amount)\n    ans = solve(equation, original_amount)\n\n    return ans[0]\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import gcd\n\ndef solution():\n    a = 6\n    b = 10\n    lcm = (a * b) // gcd(a, b)\n    return lcm\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # According to the Pigeonhole principle, the least number that the most-filled layer would have\n    ans = (total_books + layers - 1) // layers\n    return ans\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    \n    # Choose the first digit (1, 2, or 3) - can't be 0 for a three-digit number\n    for first_digit in range(1, 4):\n        # Choose the second digit (0, 1, 2, 3) but not the same as the first digit\n        for second_digit in range(0, 4):\n            if second_digit != first_digit:\n                # Choose the third digit (0, 1, 2, 3) different from the first two\n                for third_digit in range(0, 4):\n                    if third_digit != first_digit and third_digit != second_digit:\n                        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 29):\n        for b in range(1, 30 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces, they will have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If both eat 8 pieces, Rachel has 3 times as many as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Total number of candies originally\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    cheese_weight_kg = 1.2\n    piece_weight_g = 30\n    total_pieces = (cheese_weight_kg * 1000) / piece_weight_g\n    return int(total_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liter_to_quart = 1.05669  # 1 liter is approximately 1.05669 quarts\n    coke_in_liters = 2.5\n    cup_capacity_in_quarts = 0.5\n\n    # Convert liters of coke to quarts\n    coke_in_quarts = coke_in_liters * liter_to_quart\n    \n    # Calculate the number of cups she can drink\n    num_cups = coke_in_quarts / cup_capacity_in_quarts\n    \n    # Return the number of cups rounded to the nearest integer\n    return round(num_cups)\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the original number of books\n    # Equation for the total cost of the original books\n    equation1 = Eq(x * 3.5, 3.5 * x)\n    # Equation for the total cost including the additional books\n    equation2 = Eq((x * 3.5 + 2 * 6), (x + 2) * 4)\n\n    solved_x = solve(equation2, x)\n\n    return solved_x[0] + 2  # Adding the additional 2 books to the initial number\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = -4 # since the sequence is decreasing by 4\n\n    # An arithmetic sequence term can be given by: a_n = a_1 + (n - 1) * d\n    # Where a_n is the nth term, a_1 is the first term, n is the term number, and d is the common difference.\n    # For the first negative term, a_n < 0.\n    # Therefore, we need to solve 50 + (n - 1) * (-4) < 0 for n > 0.\n    \n    # Rearrange the inequality:\n    # (n - 1) * (-4) < -50\n    # n - 1 > 50/4\n    # n > 12.5\n    # Since n must be whole, n must be at least 13 for the first negative term.\n\n    num_terms = 13 - 1  # Subtract 1 to find how many terms are there before the first negative term\n\n    return num_terms\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(1, 10):  # F cannot be 0 because it's the leftmost digit\n                    ABCDEF = int(f\"{A}2{0}{C}E{F}\")\n                    EFABCD = int(f\"{E}F{A}2{0}{C}\")\n                    if 5 * ABCDEF == 6 * EFABCD:\n                        return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    ans = 18 // 3\n    return ans\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Star jogs for 1 hour from 6:30am to 7:30am at 6 miles per hour\n    jogging_distance = 6 * 1\n    \n    # Star walks for 2 hours from 7:30am to 9:30am at 5 miles per hour\n    walking_distance = 5 * 2\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n\n    # Angel had 5/6 as many sweet wrappers as Belle\n    equation1 = Eq(angel, 5/6 * belle)\n    # After Angel threw away 58 sweet wrappers, she had 75% as many sweet wrappers as Belle\n    equation2 = Eq(angel - 58, 0.75 * belle)\n\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares / 3\n    triangles = squares * 2\n    \n    total_shapes = squares + circles + triangles\n    \n    return int(total_shapes)\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for current age of dad and son\n    dad, son = symbols('dad son')\n\n    # Create equation based on the information given:\n    # Six years ago, the dad was 5 times older than his son: dad - 6 = 5 * (son - 6)\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n\n    # Sum of the current ages of dad and his son is 78: dad + son = 78\n    equation2 = Eq(dad + son, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dad, son))\n\n    # Return the dad's current age\n    return solutions[dad]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    ans = (4/9) * 36\n    return ans\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children and y be the original amount of money\n    x, y = symbols('x y')\n\n    # Equation 1: y + 20p = 70p * x\n    equation1 = Eq(y + 20, 70 * x)\n    \n    # Equation 2: y - 2.10 = 60p * x\n    equation2 = Eq(y - 210, 60 * x)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remittance_rate = 0.20\n    bank_charge_rate = 0.005\n\n    remittance_amount = salary * remittance_rate\n    bank_charge = remittance_amount * bank_charge_rate\n    \n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for v1 in range(1, 10): # vase 1\n        for v2 in range(1, 10): # vase 2\n            for v3 in range(1, 10): # vase 3\n                # Check if all vases have different carnations, and sum is 10\n                if v1 + v2 + v3 == 10 and len({v1, v2, v3}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    initial_amount = -76.20\n    payment_amount = 120.75\n    current_amount = initial_amount + payment_amount\n    return current_amount\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('2nd March 2023', '%d %B %Y')\n    end_date = datetime.strptime('15th April 2023', '%d %B %Y')\n    \n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for special_number in range(10, 10000):  # Assuming the special number is less than 5 digits\n        if str(special_number)[-1] == '9':  # Check if the units place is 9\n            new_number = int('9' + str(special_number)[:-1])  # Place 9 at left hand end of the number\n            if new_number == 4 * special_number:  # Check if the new number is 4 times the special number\n                return special_number  # Return the special number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    import math\n    # Eddie is fixed on the left end\n    # Avril is next to Eddie, which means there are 2 choices for Avril (right or left side of Eddie)\n    avril_positions = 1\n    # The remaining 5 students can be arranged in any order, which is 5 factorial\n    other_students_permutations = math.factorial(5)\n\n    return avril_positions * other_students_permutations\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Number of gloves to pick to ensure two of the same color\n    same_color_gloves = max(1 + 2, 3 + 4) # Adds one since Dilly can't tell left from right\n    \n    # To ensure a matching pair (same color, different hands), Dilly should pick:\n    # All gloves of the color she has the most of plus one more glove\n    ans = same_color_gloves + 1\n    return ans\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    initial_cost = 200\n    increase_percentage = 45 / 100\n    increased_cost = initial_cost * (1 + increase_percentage)\n    return increased_cost\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    total_known_sum = sum(known_numbers)\n    mean_value = 6\n    total_numbers = 8\n    \n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - total_known_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    def climb_ways(steps):\n        if steps == 1:\n            return 1\n        elif steps == 2:\n            return 2\n        else:\n            return climb_ways(steps - 1) + climb_ways(steps - 2)\n\n    ways_to_step_5 = climb_ways(5)\n    ways_from_step_5_to_10 = climb_ways(10 - 5)\n\n    return ways_to_step_5 * ways_from_step_5_to_10\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # rachel and alice's sweets before any trades\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces of sweet, then they would have the same number of sweets\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If they both eat 8 pieces of sweet, Rachel has 3 times as many pieces of sweet left over as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of sweets they originally had\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_types = 2\n    sauce_types = 3\n    topping_types = 2\n    \n    combinations = pasta_types * sauce_types * topping_types\n    \n    return combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    equation = Eq((number + 3) / 4, 12)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum((i * (16 - i) for i in range(1, 16)))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Since the circumference is 300m, holes were dug every 3m, so they have dug\n    # holes at positions: 0m, 3m, 6m, ..., which are multiples of 3.\n    interval_initial = 3\n    interval_new = 5\n    circumference = 300\n    holes_dug_initially = 30\n\n    # Calculate the position of the last hole dug with the initial interval\n    last_hole_position = (holes_dug_initially - 1) * interval_initial\n\n    # Now we need to calculate the number of holes with a 5m interval.\n\n    # Start from the last hole dug, which is the (last_hole_position + interval_new)\n    # Check if the new position is a multiple of 5 and not yet a hole\n    hole_position = last_hole_position + interval_new\n    additional_holes = 0\n\n    while hole_position < circumference:\n        additional_holes += 1\n        hole_position += interval_new\n\n    return additional_holes\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = sum([i for i in range(1, 51) if '3' in str(i)])\n    return erased_sum\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "from itertools import permutations\n\ndef solution():\n    expressions = [\n        \"(15+5)*(5+15)-6+7\",\n        \"((15+5)*5)+15-6+7\",\n        \"(15+(5*5+15))-6+7\",\n        \"(15+5)*5+(15-6+7)\",\n        \"15+(5*(5+15)-6+7)\",\n        \"15+5*((5+15)-6+7)\",\n        \"15+5*(5+(15-6)+7)\",\n        \"15+5*(5+15)-(6-7)\"\n    ]\n\n    max_value = float('-inf')\n    max_expression = \"\"\n\n    for expr in expressions:\n        value = eval(expr)\n        if value > max_value:\n            max_value = value\n            max_expression = expr\n\n    return max_expression, max_value\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    digits_per_page = 0\n    page_count = 0\n    \n    while total_digits > 0:\n        page_count += 1\n        digits_in_number = len(str(page_count))\n        total_digits -= digits_in_number\n    \n    return page_count\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_total = 80 * 5\n    billy_total = 89 * 4\n    billy_goal_avg = 80 + 10\n    billy_goal_total = billy_goal_avg * 5\n\n    billy_fifth_assignment = billy_goal_total - billy_total\n\n    return billy_fifth_assignment\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    pipe_length = 305\n    each_length = 5\n\n    num_pipes = pipe_length / each_length\n\n    return int(num_pipes) + (1 if pipe_length % each_length != 0 else 0)\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    count = 0\n    # Since we are dividing the number into the sum of two whole numbers, we iterate from 1 to 999\n    for num1 in range(1, 1000):\n        num2 = 1000 - num1\n        # Every valid num1 will have a corresponding num2 to make the sum 1000\n        if num1 >= 1 and num2 >= 1:\n            count += 1\n    # However, since we are considering ordered pairs, each pair is counted twice (e.g., (1,999) and (999,1))\n    # Therefore we divide the count by 2\n    return count // 2\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint, prod\n\n    factors = factorint(1260)\n    \n    # Calculate the necessary powers for each prime factor to make 1260m a perfect square\n    for prime in factors:\n        if factors[prime] % 2 != 0:\n            factors[prime] += 1\n\n    # Calculate m by multiplying the necessary prime factors\n    m = prod([p**factors[p] for p in factors]) // 1260\n\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    remainder_when_divided_by_4 = 3\n    remainder_when_divided_by_7 = 3\n\n    # since the remainders are same when divided by 4 and 7\n    # we can find a number that has a remainder 3 when divided\n    # by both 4 and 7 and that should also be the remainder when\n    # divided by their LCM i.e., 28\n    for i in range(1, 28):\n        if i % 4 == remainder_when_divided_by_4 and i % 7 == remainder_when_divided_by_7:\n            remainder_when_divided_by_28 = i\n            break\n\n    return remainder_when_divided_by_28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8 * 11 # The least common multiple of 8 and 11 is their product since they are coprime\n    remainder = 6\n    \n    for number in range(10, 100): # To find a two-digit number\n        if number % 8 == remainder and number % 11 == remainder:\n            return number  # Return the first number that meets the condition\n    return None\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    digit_sequence = [9 ** i % 10 for i in range(1, 5)]\n    index = 99 % 4\n    ones_digit = digit_sequence[index - 1]\n    return ones_digit\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_cost = 151.25\n    chair_cost = 24.15\n\n    total_cost = table_cost + chair_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    a7 = 39  # The 7th term\n    a8 = 44  # The 8th term\n    \n    # The difference between successive terms in an arithmetic sequence is constant\n    difference = a8 - a7\n\n    # The nth term of an arithmetic sequence is given by a_n = a_1 + (n-1)d\n    # We need to find the first term a1\n    a1 = a7 - (7 - 1) * difference\n\n    # Now we can calculate the 100th term\n    a100 = a1 + (100 - 1) * difference\n\n    return a100\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the total value of the five other ponies\n    x = symbols('x')\n\n    # Equation for the average value of the ponies in the small stable without Rein Beau\n    eq1 = Eq((x / 5), ((x + 250000) / 6) - 10000)  # Avg value increases by £10,000 when Rein Beau enters\n\n    # Solve for the total value of the other five ponies\n    total_value_other_ponies = solve(eq1, x)[0]\n\n    # Add the value of Rein Beau to get the total value of all six ponies\n    total_value_all_ponies = total_value_other_ponies + 250000\n\n    return total_value_all_ponies\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    initial_stickers = 38 + 14\n    stickers_given = 9\n    stickers_left = initial_stickers - stickers_given\n    return stickers_left\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    remainder = pow(2, 2015, 3)\n    return remainder\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n    \n    # Total pupils\n    total_pupils = 8\n    \n    # Four of the pupils want to stand together, we consider them as a single unit.\n    units = total_pupils - 4 + 1  # We subtract 3, not 4, since we're adding them back as one unit.\n    \n    # Calculate arrangements of the units.\n    unit_arrangements = factorial(units)\n    \n    # The 4 pupils who want to stand together can be arranged among themselves in 4! ways.\n    group_arrangements = factorial(4)\n    \n    # Multiply the two arrangement possibilities together to find the total arrangements.\n    total_arrangements = unit_arrangements * group_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    ans = 64 * 42\n    return ans\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    percent_concentration = (sugar / total_mixture) * 100\n    return percent_concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Since they are consecutive numbers, we can represent them as n, n+1, and n+2.\n    # We know that the sum of these three numbers is 60.\n    # So, n + (n + 1) + (n + 2) = 60.\n    # Solving for n, we get 3n + 3 = 60.\n    # Subtract 3 from both sides: 3n = 57.\n    # Divide by 3: n = 19.\n    # Therefore, the largest number, which is n + 2, would be 19 + 2 = 21.\n    \n    n = (60 - 3) // 3\n    largest_number = n + 2\n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let the number of gold medals be g and the number of silver medals be s.\n    # We have two equations based on the given information:\n    # 5g + 4s = 331    (points awarded for gold and silver)\n    # g + s = 80       (total number of medals)\n\n    # We can solve this system of linear equations to find the value of g (number of gold medals).\n    for g in range(81):  # g can be at most 80 since the total number of medals is 80\n        s = 80 - g\n        if 5 * g + 4 * s == 331:\n            return g\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    result += 50  # Step 5: Reverse subtracting 50 by adding 50\n    \n    # Since the day of the birth was added twice, we need to find a remainder when divided by 100\n    day = result % 100\n    result //= 100  # Step 4: Reverse the addition of the day of birth by dividing by 100\n    \n    # Now we need to reverse the earlier steps, starting with dividing by 50 from step 3\n    result //= 50  # Step 3: Reverse multiplying by 50 by dividing by 50\n    result -= 1    # Step 2: Reverse adding 1 by subtracting 1\n    \n    # Lastly, we divide by 4 from step 1 to get the month\n    month = result // 4  # Step 1: Reverse multiplying by 4 by dividing by 4\n    \n    return (month, day)  # James's birthday is on the month and day we just calculated\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "网络故障，请重试"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    fraction_women = 1 - (1 / 3) - (5 / 8)\n    total_spectators = women / fraction_women\n    return int(total_spectators)\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # The elephant doll is at the 10th position from the left.\n    elephant_position_from_left = 10\n    \n    # The rabbit doll is at the 9th position from the right.\n    rabbit_position_from_right = 9\n    \n    # There are 5 dolls counting from the rabbit doll to the elephant doll.\n    dolls_between = 5\n    \n    # The total number of dolls can be found by summing up the number of dolls on the left of the elephant doll,\n    # the dolls between rabbit and elephant, and the number of dolls on the right of the rabbit doll.\n    total_dolls = (elephant_position_from_left - 1) + dolls_between + (rabbit_position_from_right - 1) + 1  # +1 for the rabbit doll itself\n    \n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    ans = 0.4 * ((11 / 52) / (2 + 3 / 4) * (4.3 - 1.8)) * 26\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    students_diff = 32\n    total_students = 0\n\n    for side in range(1, 999, 2):  # The side length of the square arrays will always be an odd number\n        boys = (side * 4) - 4  # Boys occupy the four sides except the overlapping corners\n        girls = ((side - 2) * 4) - 4 if side > 1 else 0  # Inner square when side length is more than 1\n        total_students += boys + girls  # Total students in the current layer\n        if boys - girls == students_diff:\n            break\n            \n    return total_students\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'm' be the work done by a master in a day\n    # Let 'a' be the work done by an apprentice in a day\n    m, a = symbols('m a')\n\n    # 1 master and 3 apprentices take 4 days to complete the task\n    equation1 = Eq(1 * m + 3 * a, 1/4)\n\n    # 2 masters and 1 apprentice take 3 days to complete the task\n    equation2 = Eq(2 * m + 1 * a, 1/3)\n\n    # Find the work done by a master and an apprentice in a day\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Calculate the time taken for 1 apprentice to complete the task alone\n    apprentice_time = 1 / solutions[a]\n\n    return apprentice_time\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of roses, y be the original number of daisies\n    x, y = symbols('x y')\n    \n    # The total number of flowers is 300\n    total_flowers_eq = Eq(x + y, 300)\n\n    # The difference in the number of roses and daisies grows by the same amount each month\n    # After a few months, there are 280 roses and 180 daisies, a difference that increased by 100 (280 - 180)\n    # Since the number of roses and daisies planted each month is the same, the original difference was 100.\n    difference_eq = Eq(x - y, 100)\n\n    # Solving the system of equations\n    solutions = solve((total_flowers_eq, difference_eq), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n\n    primes_sum = sum(primerange(50, 61))\n\n    return primes_sum\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    position_difference = 15 - 10\n\n    common_difference = (fifteenth_number - tenth_number) / position_difference\n    first_number = tenth_number - common_difference * (10 - 1)\n\n    nth_number = first_number + common_difference * (102 - 1)\n    return nth_number\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    remaining_books = total_books - english_books  # Chinese books + Comics\n    # Let the number of comics be x, then Chinese books will be 2x.\n    comics = remaining_books / 3  # Since 2x (Chinese books) + x (Comics) = 3x (Total remaining books)\n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    # The number of parts that correspond to coffee\n    parts_of_coffee = coffee_litres / coffee_ratio\n\n    # Total parts = coffee parts + milk parts\n    total_parts = coffee_ratio + milk_ratio\n\n    # Total litres of latte = parts of coffee * total parts\n    latte_litres = parts_of_coffee * total_parts\n\n    return latte_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n\n    total_accurate_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n\n    average_score = total_accurate_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Start from 1 apple for the child who gets the least, and incrementally distribute the apples\n    # to ensure that each child gets a different number of apples. We aim to minimize the maximum,\n    # which means we should distribute the apples as evenly as possible while satisfying the\n    # different amounts condition.\n    \n    # The minimum distribution will be 1, 2, 3, ..., 7 apples for the first 7 children\n    min_distribution = sum(range(1, 8))\n    remaining_apples = 50 - min_distribution\n    \n    # The 8th child gets the remaining apples\n    max_apples_eighth_child = remaining_apples\n    \n    return max_apples_eighth_child\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    ans = (1/30 + 1/6) / (2/25) + (2 - 2/3) / (8/3)\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "from itertools import combinations\n\ndef solution():\n    # Find all the partitions of the number 8\n    def partitions(n):\n        # Base case: only one way to partition 1\n        if n == 1:\n            return [[1]]\n        # Otherwise, find partitions by reducing the problem\n        result = [[n]]\n        for i in range(1, n):\n            for p in partitions(n - i):\n                if p[0] <= i: # Ensure each partition's integers are in non-decreasing order\n                    result.append([i] + p)\n        return result\n    \n    # All partitions of 8\n    all_partitions = partitions(8)\n    \n    # We need to exclude the partitions that consist of only one number, which is 8 itself\n    partition_counts = len(all_partitions) - 1\n    \n    return partition_counts\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n    \n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_tie_wearers = 18\n    spectacle_wearers = 23\n\n    # The greatest number of men that do not wear bow ties and are not wearing spectacles\n    # would be when there's an overlap of men who wear both bow ties and spectacles.\n    # The overlap can be calculated by adding the number of bow tie wearers and spectacle wearers,\n    # subtracting from the total men, since it is not possible to have more than total men at the party.\n    overlap = bow_tie_wearers + spectacle_wearers - total_men\n\n    # The number of men wearing neither would be the total men minus those wearing bow ties or spectacles plus the overlap.\n    neither = total_men - bow_tie_wearers - spectacle_wearers + overlap\n\n    return neither\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    base_amount = 350\n    twenty_percent = base_amount * 20 / 100\n    fifty_percent_of_twenty = twenty_percent * 50 / 100\n    return fifty_percent_of_twenty\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return (1/3) * 414\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial as fact\n\n    # Treat Ali and Bala as a single unit since they must stand together,\n    # and we also have three other people (Charles, Ella, and Dan who is fixed at the left)\n    # so we have 3! ways to arrange these 'units'\n\n    ali_bala_unit = fact(3)\n\n    # Now, within the Ali-Bala unit, Ali and Bala can switch places, giving us 2! arrangements\n    ali_bala_switch = fact(2)\n\n    # Multiply the possibilities of the unit arrangements and the internal switch\n    total_arrangements = ali_bala_unit * ali_bala_switch\n\n    return total_arrangements\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 140 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # To guarantee 3 different coloured balls, pull all of one color, all of another,\n    # and at least one from the third color.\n    red = 15\n    white = 9\n    yellow = 6\n    \n    # We can take all balls of the color with maximum quantity and one color with the second maximum quantity.\n    # Then we take one from the third to ensure we have all three colors.\n    max_balls = red + white + 1\n    \n    return max_balls\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen trades 3 fishes for 2 rabbits: 3 fishes = 2 rabbits\n    # Oscar trades 3 rabbits for 4 packs of wheat: 3 rabbits = 4 packs of wheat\n    # We can combine these two ratios to find out the direct trade ratio between fishes and packs of wheat.\n    # For every 3 fishes, there are 2 rabbits, and for every 3 rabbits, there are 4 packs of wheat.\n    # Hence, (3 fishes / 2 rabbits) * (3 rabbits / 4 packs of wheat) = (3*3) fishes / (2*4) packs of wheat\n    # Simplifying this ratio, we get: (9 fishes / 8 packs of wheat)\n    \n    # Now, we want to find out how many fishes Owen should give Dennis for 8 packs of wheat.\n    # We have established the ratio of 9 fishes to 8 packs of wheat.\n    # So for 8 packs of wheat, Owen should give Dennis 9 fishes.\n    \n    # If the question asked for a different amount of wheat, we would scale the ratio accordingly.\n    # But since the question asks specifically for 8 packs of wheat, the answer is simply 9 fishes.\n\n    return 9\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Define the custom operation ★ based on the results given\n    # Since 5★2 = 8, it indicates that order matters in operation, and it's not commutative.\n    # Based on provided examples it looks like the operation could be:\n    # a★b = a + (a - b) when b < a\n    # a★b = a when b >= a\n    # However, we need to test this hypothesis with all provided examples:\n    # 6★3 = 15 -> 6 + (6 - 3) = 6 + 3 = 9 (Does not match)\n    # 8★2 = 14 -> 8 + (8 - 2) = 8 + 6 = 14 (Matches)\n\n    # After seeing that 6★3 does not match with the first hypothesis,\n    # we must think of another rule that confirms all provided operations.\n    # It seems that the operation must be dependent on the parity of numbers:\n    # For even numbers a, if a > b: a★b = a + 2*(a - b)\n    # For odd number a, a★b = a + (a - b)\n\n    # We can redefine our custom operation ★ now\n    def star_operation(a, b):\n        if a % 2 == 0:  # Check if 'a' is even\n            return a + 2 * (a - b)\n        else:           # 'a' is odd\n            return a + (a - b)\n\n    # Using the defined custom operation to find the value of 11★10\n    return star_operation(11, 10)\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    terms = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # We need to find two 2-digit numbers A and B such that:\n    # The tens digit of B is 3 instead of 5 and the ones digit of B is 2 instead of 3\n    # A - B = 36, we are looking for A - B' where B' is the correct B\n\n    # We know that the incorrect B is 20 more than the correct B (because of the tens place mistake)\n    # And the incorrect B is 1 less than the correct B (because of the ones place mistake)\n    # Therefore, the incorrect B is 19 more than the correct B\n    # Bincorrect = Bcorrect + 19\n    \n    # So we have A - (Bcorrect + 19) = 36\n    # Therefore A - Bcorrect = 36 + 19\n    # We want the correct difference which is A - Bcorrect\n\n    correct_difference = 36 + 19\n    return correct_difference\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since no two children can get the same number of apples and each child must get at least one apple,\n    # we can first give each child one apple. This will use up 5 apples.\n    # Now we have 19 - 5 = 14 apples left to distribute.\n    apples_left = 19 - 5\n\n    # Now let's distribute the remaining apples in a way where no child gets the same amount.\n    # We can do this by starting from the child with the lowest number of apples and progressively giving more.\n    # After giving each child one apple, the distribution can be: 1, 2, 3, 4, ... (with increasing count)\n    # Since the number of apples increases by 1 for each next child, this is the sum of an arithmetic sequence.\n    # The sum S of an arithmetic sequence with n terms, first term a1, and common difference d is:\n    # S = n/2 * (2*a1 + (n - 1)*d)\n\n    # We want to maximize the number of apples for the child with the most, so we will reverse the sequence\n    # and start distributing the remaining apples from the child who gets the most, to the one who gets the least.\n    # We don't know the maximum number x yet, but we can set up the equation:\n    # x + (x-1) + (x-2) + (x-3) + (x-4) = apples_left.\n\n    # Solving for x gives us the number of apples that the child with the most will get.\n    # This sum of the arithmetic series can also be written as:\n    # 5/2 * (2*x - 4) = apples_left\n    # 5*x - 10 = 2*apples_left\n    # 5*x = 2*apples_left + 10\n    # x = (2*apples_left + 10)/5\n\n    max_apples = (2 * apples_left + 10) // 5\n    \n    return max_apples\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n\n    remaining_length = total_length - (used_for_fences + used_for_woods)\n\n    return remaining_length\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n    \n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n    \n    total_sweets = solutions[ellen] + solutions[lenny]\n\n    return total_sweets\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    first_50000_tax = 0.06 * 50000\n    remaining_income = 120000 - 50000\n    remaining_tax = remaining_income * (0.06 + T / 100)\n    total_tax = first_50000_tax + remaining_tax\n\n    equation = Eq(total_tax, 10000)\n\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    class_totals = [32, 28, 23, 17]\n    average_students = sum(class_totals) / len(class_totals)\n    return average_students\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # For the smallest possible difference, we need to distribute the numbers as evenly as possible.\n    # So what we will do is sort the digits from 0 to 9 and then form 2 five-digit numbers from them.\n    \n    digits = sorted(range(10))\n    \n    # To get the smallest difference, we need to give the second largest number (which is 8 here) to the smaller number\n    # and the largest number (9) to the larger number. We start by picking the smallest non-zero digit for\n    # the smaller number, then alternate between the two numbers.\n    \n    # Let's form the numbers\n    smaller_number = digits[1] * 10000 + digits[3] * 1000 + digits[5] * 100 + digits[7] * 10 + digits[9]\n    larger_number = digits[2] * 10000 + digits[4] * 1000 + digits[6] * 100 + digits[8] * 10 + digits[0]\n    \n    # The difference\n    diff = larger_number - smaller_number\n    \n    return diff\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_presents = 7\n    total_children = 5\n    \n    # Generate all permutations of 7 presents given to 5 children.\n    all_permutations = list(permutations(range(total_presents), total_children))\n    \n    # Remove permutations where both Richard and Kevin don't get either the toy car (0) or the puzzle (1) or the calculator (2).\n    # Assuming toy car, puzzle, and calculator are the first three presents (0, 1, 2).\n    filtered_permutations = [p for p in all_permutations if (0 in p[:2] or 1 in p[:2]) and (0 in p[:2] or 2 in p[:2])]\n    \n    return len(filtered_permutations)\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    distance = train_length + tunnel_length\n    duration = distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # in meters\n    tunnel_length = 500  # in meters\n    speed = 10  # in meters per second\n\n    # The total distance to be covered by the train to completely pass the tunnel is\n    # the length of the train plus the length of the tunnel.\n    total_distance = train_length + tunnel_length\n\n    # The time taken to pass the entire tunnel is the total distance divided by the speed of the train.\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    potatoes_cost_pence = 49 * 2\n    one_pound_in_pence = 100\n\n    change = one_pound_in_pence - potatoes_cost_pence\n\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        # Check if all the numbers are prime\n        if (isprime(n) and \n            isprime(n + 4) and \n            isprime(n + 6) and \n            isprime(n + 132) and \n            isprime(n + 250)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r1, r2, r3 = symbols('r1 r2 r3')\n    equation1 = Eq(r2, r1 + 2)\n    equation2 = Eq(r3, r2 - 0.80)\n    equation3 = Eq(r1 + r2 + r3, 19.70)\n\n    solutions = solve((equation1, equation2, equation3), (r1, r2, r3))\n\n    return solutions[r1]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    sugar_percentage = 15 / 100\n\n    sugar_weight = total_weight * sugar_percentage\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # km per hour\n    rose_speed = 10  # km per hour\n    meeting_time = 10  # hours\n\n    # Since they meet after 10 hours, we can calculate the distance each traveled\n    # and then the distance between Town A and Town B will be the difference between these distances\n    jack_distance = jack_speed * meeting_time\n    rose_distance = rose_speed * meeting_time\n    distance_AB = jack_distance - rose_distance\n\n    return distance_AB\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum([(2 * i + 2) ** 2 - (2 * i) ** 2 for i in range(1009)])\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    count_7 = 5000 // 7\n    count_13 = 5000 // 13\n    count_common = 5000 // (7 * 13)\n    \n    return count_7 + count_13 - count_common\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    num = 48739\n    remainder = num % 3\n    ans = (3 - remainder) % 3\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"SUCCESS\"\n    count = 0\n    distinct_permutations = set(permutations(word))\n    \n    for perm in distinct_permutations:\n        perm_str = ''.join(perm)\n        if \"SS\" not in perm_str:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    difference = boys - teachers\n\n    return difference\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Total days it took to complete the journal\n    total_days = 14\n    \n    # David's work rate per day\n    david_rate = 1/10\n    \n    # Emma's work rate per day\n    emma_rate = 1/18\n    \n    # Let's assume David worked for 'd' days so Emma worked for 'total_days - d' days\n    for d in range(total_days):\n        # The total work done by both is the sum of individual works which should be equal to 1 (complete work)\n        if david_rate * d + emma_rate * (total_days - d) == 1:\n            return total_days - d\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    T_shirts_bought = 138\n    money_left = 56\n    T_shirts_total = 145\n    \n    single_T_shirt_price = money_left / (T_shirts_total - T_shirts_bought)\n    total_money_had = single_T_shirt_price * T_shirts_total\n\n    return total_money_had\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n    ans = sum_of_squares / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # The average of an even number series is the middle term or the average of the two middle terms\n    # Since there are an even number of terms (14), we'll use the average of the two middle terms\n    middle_term1 = 119 - 1\n    middle_term2 = 119 + 1\n    \n    # Since the terms are even and consecutive, we count back 6 terms to get the first term (7 steps including the first middle term)\n    smallest_number = middle_term1 - 6 * 2  # Step back 6 terms, each term is 2 units apart\n    \n    return smallest_number\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    height_diff = 132 - 124 + 1  # +1 includes both the tallest and shortest in the range\n    min_class_size = height_diff * 3 + 1  # We use 3 here since the 4th student will cause an overlap\n\n    return min_class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_percentage = 12 / 100\n    new_pay = original_pay * (1 + increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    perm = permutations(digits, 3)  # Get all permutations where the digits are used once\n    count = len(list(perm))  # Count the number of permutations\n    return count\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel takes 12 minutes to make 4 cuts to get 5 sections\n    time_per_cut = 12 / 4\n\n    # For cutting the wood 5 more times, she needs to make 5 cuts\n    time_for_5_cuts = time_per_cut * 5\n\n    return time_for_5_cuts\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    # Each \"pair\" of coins consists of one 2p and one 5p coin, for a total of 7p\n    # We know the total amount is 126p (since £1.26 is 126 pence)\n    # Therefore, we divide the total amount of pence by the value of each \"pair\"\n\n    total_pence = 126\n    pair_value = 7  # Value of one 2p coin + one 5p coin\n\n    # We calculate the number of pairs\n    num_pairs = total_pence // pair_value\n\n    # Since there are equal numbers of 2p and 5p coins\n    # The total number of coins is twice the number of pairs (one 2p and one 5p per pair)\n    total_coins = num_pairs * 2\n\n    return total_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    power_cycle = [3**i % 10 for i in range(4)]  # Determine the last digit cycle for powers of 3\n    power_index = 2009 % 4  # Find the position in the cycle for 3^2009\n    return power_cycle[power_index - 1]  # Adjust index since cycle starts from 3^0\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    adults = (2/5) * total_people\n    remaining_people = total_people - adults\n    boys = (5/9) * remaining_people\n    girls = remaining_people - boys\n    \n    equation = Eq(girls, 36)\n    total_people_solution = solve(equation, total_people)\n    \n    return total_people_solution[0]\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 2 * 5  # Smallest number that is even and a multiple of 5\n    while True:\n        if (num ** 0.5).is_integer():   # Checks if num is a perfect square\n            return num\n        num += 2 * 5  # Increase by the LCM of 2 and 5 to remain even and a multiple of 5\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 25 / 100\n    adult_price = 30 / (1 - child_discount)\n    \n    senior_discount = 20 / 100\n    senior_price = adult_price * (1 - senior_discount)\n\n    return senior_price\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_initial = 3\n    days_initial = 30\n    men_required = 2\n\n    work_per_man_initial = days_initial / men_initial\n    total_work = work_per_man_initial * men_initial\n\n    days_required = total_work / men_required\n\n    return days_required\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for number in range(10, 100): \n        if number % 3 == 0 and number % 7 == 0: \n            return number\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_current_age = symbols('will_current_age')\n\n    equation = Eq(will_current_age + 8, 4 * (will_current_age - 4))\n\n    will_age_now = solve(equation, will_current_age)\n\n    return will_age_now[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    n = (97 - 1) // 2 + 1\n    sum_of_sequence = n * (1 + 97) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # Using the Law of Addition for independent events\n    ans = trains + cars + boats\n\n    return ans\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    \n    days_needed = total_pages / pages_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "def solution():\n    from math import comb\n\n    # Since each kid must get at least two books, we first give out\n    # two books to each, which will reduce the total number of books to 20\n    remaining_books = 30 - (5 * 2)\n\n    # Now we have to distribute these 20 books among 5 kids with no\n    # restriction. This is a problem of distributing 'n' identical items\n    # into 'r' distinct groups which is computed by comb(n + r - 1, r - 1)\n    # Here, n = remaining_books, r = 5 (number of kids)\n    ways = comb(remaining_books + 5 - 1, 5 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "import math\n\ndef solution():\n    # Using the distribution of distinguishable objects into distinguishable boxes\n    # (books into kids), with some boxes (kids) possibly being empty.\n    # This can be solved using the formula:\n    # (n + k - 1)! / (n! * (k - 1)!)\n    # where n is the number of books and k is the number of kids.\n    # In this problem, n = 20 and k = 4.\n\n    n = 20  # number of books\n    k = 4   # number of kids\n\n    # Calculate the factorial of (n + k - 1), n, and (k - 1) to use in the formula.\n    factorial_n_plus_k_minus_1 = math.factorial(n + k - 1)\n    factorial_n = math.factorial(n)\n    factorial_k_minus_1 = math.factorial(k - 1)\n\n    # Apply the formula.\n    ans = factorial_n_plus_k_minus_1 // (factorial_n * factorial_k_minus_1)\n\n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    ans = 6846 * 8\n    return ans\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the quantities of soup for Mike, Mason and Chewy\n    mike, mason, chewy = symbols('mike mason chewy')\n    \n    # Set up the equations based on the information given\n    equation1 = Eq(mason, 2/3 * chewy)        # Mason's portion is 2/3 of Chewy's\n    equation2 = Eq(chewy, 0.4 * mike)         # Chewy's portion is 40% of Mike's\n    equation3 = Eq(mike - mason, 550)         # Mason's portion is 550ml less than Mike's\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n    \n    # Calculate the total amount in litres\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_litres = total_soup_ml / 1000  # Convert ml to litres\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n    \n    balance = principal * ((1 + rate) ** time)\n    \n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = None\n    second_largest_fraction = None\n\n    # Generate all permutations for the operations\n    operations = list(permutations(\"+-*/\", 4))\n\n    # For each permutation of operations, calculate the sum of the four terms and track the maximum sum\n    for op in operations:\n        terms = [\n            eval(f\"1/2{op[0]}1/9\"),\n            eval(f\"1/3{op[1]}1/8\"),\n            eval(f\"1/4{op[2]}1/7\"),\n            eval(f\"1/5{op[3]}1/6\")\n        ]\n        total_sum = sum(terms)\n        if max_sum is None or total_sum > max_sum:\n            max_sum = total_sum\n            second_largest_fraction = sorted(terms)[-2]\n        \n    # Reduce the second largest fraction to its simplest form\n    from fractions import Fraction\n    fraction = Fraction(second_largest_fraction).limit_denominator()\n    A, B = fraction.numerator, fraction.denominator\n\n    return A + B\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n    \n    # One tree at the beginning of the road and another at the end\n    # The number of intervals is one less than the number of trees\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    # 4 jugs and 5 cups cost $85\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    # 2 jugs and 2 cups cost $40\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # UK currency coins below £1: 1p, 2p, 5p, 10p, 20p, 50p\n    # To minimize the number of coins, Susan should offer an amount that is just over 44p\n    # and can be represented using the least number of coins possible.\n    \n    # Initialize the different coin values.\n    coins = [1, 2, 5, 10, 20, 50]\n    # We want to find the minimum number of coins that can represent 45p (1 more than 44p)\n    # starting from the highest coin value to minimize the number of coins and then subtract 44p.\n    \n    # Start with 50p since it's the largest coin less than 100p (£1).\n    # She pays 50p, receives 6p change. This involves 1 coin each. Total = 2 coins.\n\n    # If she pays with 45p (20p+20p+5p) she will need 3 coins and no change. Total = 3 coins.\n    # We already found a better way with 2 coins, so 3 coins is not the answer.\n    \n    # Therefore, using 2 coins is the smallest number we've found.\n    return 2\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, S\n\n    x = symbols('x')\n    # Define the inequality\n    inequality = ((x + 3) / (2 * x + 5)) > S(505) / 1000\n\n    # Solve the inequality\n    solutions = solve(inequality, x)\n\n    # Find the largest whole number before 47.5\n    ans = int(solutions[0]) - 1\n\n    return ans\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_each_room_after_transfer = total_pupils // 2  # use floor division to get an integer result\n\n    return pupils_each_room_after_transfer\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    remaining = 20.35\n\n    initial_amount = spent + remaining\n\n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # There are 12 points on the circle\n    total_points = 12\n\n    # 4 points on the circle at equal distances will form a rectangle\n    # Two main diagonals of this rectangle will intersect each other at 90 degrees,\n    # So every set of 4 points can form 2 right-angled triangles.\n    # We need to find how many such sets of 4 points are available.\n\n    # Answer is 12 points times the combinations of choosing 1 point as a vertex among the remaining 3 points.\n    # Every 1 out of 3 points chosen as a vertex with the fixed point will form 1 right triangle\n    # And there are 3 choices for the vertex which makes an interior angle of 90 degrees.\n\n    right_angled_triangles = total_points * 3\n\n    return right_angled_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Given values\n    ten_th_num = 23 # The 10th number in the sequence\n    fifteen_th_num = 38 # The 15th number in the sequence\n    ten_th_index = 10 # The index of the 10th number\n    fifteen_th_index = 15 # The index of the 15th number\n    twelve_th_index = 12 # The index of the number we want to find\n\n    # Calculate the common difference\n    common_difference = (fifteen_th_num - ten_th_num) / (fifteen_th_index - ten_th_index)\n\n    # Calculate the 12th number using the common difference and the 10th number\n    twelve_th_num = ten_th_num + common_difference * (twelve_th_index - ten_th_index)\n\n    return twelve_th_num\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    # define the consecutive differences for the denominators\n    differences = [1, 2, 3, 4, 5, 6, 7]\n    \n    # set the initial value for the first denominator\n    denominator = 1\n    \n    # initialize the result\n    ans = 0\n    \n    # iterate over the range of numerators\n    for i in range(len(differences)+1):\n        # if it's the last term, add the fraction with denominator 29\n        if i == len(differences):\n            ans += 1 / denominator\n        else:\n            # calculate the sum of fractions\n            ans += (i+1) / (denominator * (denominator + differences[i]))\n            # update the denominator\n            denominator += differences[i]\n    \n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_a_students = 24\n    class_b_students = 36\n    class_c_students = 42\n\n    # Calculate the gcd of the number of students in each class\n    gcd_ab = gcd(class_a_students, class_b_students)\n    gcd_abc = gcd(gcd_ab, class_c_students)\n\n    # The number of students each group will have\n    group_size = gcd_abc\n\n    return group_size\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = 0\n    sign = 1\n    for i in range(200, 0, -4):\n        ans += sign * (i + (i - 1))\n        sign *= -1\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_cost = 4.36\n    days = 5\n\n    total_cost = children * daily_cost * days\n    \n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_penalty = -3\n\n    # Let x be the number of questions Justin answers correctly, and y be the number answered incorrectly.\n    # We know that x + y = total_questions and 5x - 3y = 76.\n    # Since Justin answers all the questions, y = total_questions - x. We substitute y in the second equation.\n\n    for x in range(total_questions + 1):\n        y = total_questions - x\n        if (correct_points * x) + (incorrect_penalty * y) == 76:\n            return x\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3/8) * 16\n    return result\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return brown_sheep\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    num_people = 38\n    total_cost = cost_per_person * num_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n    \n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n    solutions = solve(equation, x)\n    \n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    import math\n    \n    # For four different colored socks\n    ways_four_different_socks = math.factorial(4)\n    \n    # For two different colored pairs of socks\n    # First, we choose the arrangement for two pairs (2! ways),\n    # then we arrange the socks within each pair (2! for each pair)\n    ways_two_pairs = math.factorial(2) * math.factorial(2) * math.factorial(2)\n    \n    return ways_four_different_socks, ways_two_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    num1 = 13.8\n    num2 = 18.6\n\n    halfway_number = (num1 + num2) / 2\n\n    return halfway_number\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # a can't be 0 because then it wouldn't be a two-digit number\n        for b in range(0, 10):\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'cp' be the cost price of the product\n    cp = symbols('cp')\n    \n    # The product is marked at 20% above the cost price\n    marked_price = cp * 1.20\n    \n    # The product is sold at 90% of the selling price (which is the marked price)\n    selling_price = marked_price * 0.90\n    \n    # The profit is the selling price minus the cost price\n    profit = selling_price - cp\n    \n    # We know the profit is $120, so we create an equation\n    equation = Eq(profit, 120)\n    \n    # Solve the equation to find the cost price\n    cost_price = solve(equation, cp)[0]\n    \n    return cost_price\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    people = 4\n    handshakes = people * (people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    points_needed = 3\n    num_triangles = comb(num_points, points_needed)\n    return num_triangles\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n    # Andre and Beth both had a total of 24 sweets before receiving extra sweets from the teacher\n    equation1 = Eq(andre + beth, 24)\n    # After receiving 4 extra sweets each, Andre has 6 more sweets than Beth\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n    beth_sweets_now = solutions[beth] + 4  # Adding the 4 extra sweets Beth received\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3  # Each term increases by 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # With 18 apples, Anthea should aim to leave Ben with a number of apples\n    # that is a multiple of 4 after her turn. That way, no matter what Ben does,\n    # she can always keep the count at a multiple of 4 until down to 4 apples,\n    # then leave 1 apple for Ben and win the game.\n    # To do that, Anthea should take (18 % 4) apples in her first turn.\n    \n    apples_to_take = 18 % 4\n    \n    return apples_to_take\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n    \n    friends = 5  # Judy has five friends\n    positions = 2  # Judy can stand on either end of the line\n    ways_for_Judy = positions  \n    ways_for_friends = factorial(friends)  # The number of ways to arrange her friends\n    \n    total_ways = ways_for_Judy * ways_for_friends\n    \n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n    \n    equation1 = Eq(andre + beth, 24)  # Before receiving sweets from teacher\n    equation2 = Eq(andre + 4 - (beth + 4), 6)  # After receiving sweets from teacher\n    \n    solutions = solve((equation1, equation2), (andre, beth))\n\n    return solutions[beth] + 4  # Return Beth's sweets after getting 4 more from the teacher\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    overtaken_cars = 5\n    finished_place = 2\n    # If he finished in 2nd place and overtook 5 cars,\n    # then before overtaking, he was in position 7th (2 + 5)\n    # And since he started last, there were 6 cars ahead of him initially\n    # Adding one for his own car gives us the total number of cars.\n    total_cars = overtaken_cars + finished_place\n\n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # given: (number - 6) / 12 = 2\n    # inverse operations to solve for the number\n    # multiply both sides by 12: number - 6 = 2 * 12\n    # add 6 to both sides: number = 2 * 12 + 6\n    number = 2 * 12 + 6\n    return number\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let ym be the minutes the younger sister spent on maths\n    # Let ye be the minutes the younger sister spent on English\n    ym, ye = symbols('ym ye')\n\n    # The elder sister spent ym + 10 minutes on maths\n    # The younger sister spent ye + 4 minutes more on English than the elder\n    # It is known that the elder sister spent 88 minutes in total\n    # The younger sister spent 12 minutes less on her maths than on her English\n\n    equations = (\n        Eq(ym + 10 + ye, 88),\n        Eq(ym, ye - 12)\n    )\n\n    solutions = solve(equations, (ym, ye))\n\n    return solutions[ye]\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_sum = 4 * 130\n    remaining_sum = 3 * 110\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import gcd\n    lcm_12_15 = (12 * 15) // gcd(12, 15) # lcm for 12s and 15s, converts 1.5 minutes to 90 seconds\n    for i in range(30, 9*60, 30): # start from 30s and go up to 9 minutes, with 30s increments\n        if (lcm_12_15 // gcd(lcm_12_15, i)) * i == 9*60:\n            return i // 60 if i % 60 == 0 else i / 60\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n    \n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n    \n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # Leo can ensure his victory by leaving a number of apples that is a multiple\n    # of 3 for Mia. In this case, he should leave 12 apples for Mia, as no matter\n    # what Mia takes (1 or 2 apples), Leo can always take a number that makes\n    # the total taken (by both players in the round) 3 apples.\n\n    # To leave 12 apples for Mia, Leo should take away 14 - 12 = 2 apples.\n    leo_takes_first_turn = 14 % 3\n    if leo_takes_first_turn == 0:\n        # If it's already a losing position (multiple of 3), Leo should take 1.\n        leo_takes_first_turn = 1\n    return leo_takes_first_turn\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # let x be the value of 1 silver spoon\n    # let y be the value of 1 gold ring\n    # 12x = (3/4) * 6y -> Nick's 12 silver spoons have three quarters the value of Pilpha's 6 gold rings\n    # We want to find z such that z * x = (1/2) * 6y -> The value of z silver spoons is the same as 3 gold rings\n    \n    # From the first equation, solving for x in terms of y we get:\n    # 12x = 4.5y -> x = (4.5/12)y -> x = (3/8)y\n\n    # Now substituting x in the second equation we get:\n    # z * (3/8)y = (1/2) * 6y -> z * (3/8) = 3\n    # Now solve for z:\n    z = (3 * 8) / 3\n    \n    return int(z)\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    front_to_cora = 5\n    back_to_cora = 7\n    left_to_cora = 2\n    right_to_cora = 4\n\n    total_rows = front_to_cora + back_to_cora - 1\n    total_columns = left_to_cora + right_to_cora - 1\n\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    # Assume all items are paintbrushes which cost $1 each.\n    total_paintbrushes = 28  # Because $28 worth of $1 items is 28 items.\n    total_items = 12\n\n    # Calculate the number of items that are not paintbrushes, i.e., whiteboard markers,\n    # by \"converting\" some of the paintbrushes into whiteboard markers until the cost matches.\n    # Each \"conversion\" from a paintbrush to a whiteboard marker adds $2 to the cost (since a marker costs $3 and a paintbrush costs $1).\n    additional_cost_needed = total_paintbrushes - 28  # Initial assumption minus actual cost.\n    # Since each marker adds $2 more to the cost, divide the additional cost needed by 2 to find the number of markers.\n    number_of_markers = additional_cost_needed / 2\n\n    return int(number_of_markers)\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_average_weight = 65\n    male_teachers = 3\n    male_average_weight = 75\n    female_average_weight = 60\n    female_teachers = symbols('female_teachers')\n\n    # Equation for the total weight of teachers\n    total_weight = (male_teachers * male_average_weight) + \\\n                   (female_teachers * female_average_weight)\n    \n    # Equation for the average weight \n    total_teachers = male_teachers + female_teachers\n    average_weight_equation = Eq(total_weight / total_teachers, total_average_weight)\n    \n    solutions = solve(average_weight_equation, female_teachers)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from math import sqrt\n\n    # Decompose 33 and 55 into prime factors\n    # 33 = 3 * 11\n    # 55 = 5 * 11\n    # Product = 33 * 55 * m = 3 * 11^2 * 5 * m\n    # For the product to be a square, m must include 3 and 5 to complete their pairing\n    # The smallest m would be the product of these primes\n    m = 3 * 5\n    \n    # No need to check if the product is a square because m guarantees paired primes\n    return m\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    # Let's assign n to the number of layers of boys and m to the number of layers of girls.\n    # Because the outermost layer is boys starting from 1, the total of boys will be:\n    # (1^2 + 3^2 + 5^2 + ... + (2n - 1)^2) and\n    # the total number of girls will be (2^2 + 4^2 + 6^2 + ... + (2m)^2).\n    # We know there are 55 more boys than girls, so we need to find n and m such that:\n    # sum(i^2 for i in range(1, 2*n, 2)) - sum(i^2 for i in range(2, 2*m+1, 2)) = 55\n    # This difference is also equal to (1 + 2 + ... + (2n-1 + 2m))^2 - (1 + 2 + ... + 2m)^2\n    # Simplifying this, we get (2n + 2m)*(2n - 2m - 1) = 55\n    # We notice that 55 has prime factors 5 and 11.\n\n    # We loop through possible values of n (number of boy layers) and m (number of girl layers)\n    # to find a pair that satisfies the above equation.\n    ans = 0\n    for n in range(1, 100):\n        for m in range(0, n):\n            if (2*n + 2*m)*(2*n - 2*m - 1) == 55:\n                # since n > m, and we have alternating layers, total layers of students is n+m\n                # and since the layers form a square with equal number of rows and columns\n                # the total number of students is the square of the number of layers\n                ans = (n + m) ** 2\n                break\n        \n        if ans != 0:\n            break\n            \n    return ans\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    \n    total_teammates = 4  # since Star is already the first\n    # Calculate the number of ways to arrange the remaining 4 teammates\n    arrangements = factorial(total_teammates)\n    \n    return arrangements\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def find_pattern(a, b):\n        return (a * b) + (a + b)\n    \n    ans = find_pattern(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    time_for_31_segments = 60  # time in minutes to cut into 31 segments\n    cuts_for_31_segments = 31 - 1  # number of cuts needed for 31 segments\n    cuts_for_50_segments = 50 - 1  # number of cuts needed for 50 segments\n\n    time_per_cut = time_for_31_segments / cuts_for_31_segments  # time for one cut\n    time_for_50_segments = time_per_cut * cuts_for_50_segments  # total time for 50 segments\n\n    return time_for_50_segments\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since each plate must have at least 2 pieces, we subtract these 2 pieces from each plate initially.\n    total_candy = 8 - 2 * 3\n    # Now we need to find the number of ways to distribute the remaining 2 candies among 3 plates.\n    # This is a problem of distributing 'n' identical items into 'r' distinct groups and can be solved \n    # using combinations with repetition, also known as stars and bars method.\n    # The formula is C(n + r - 1, r - 1) or C(n + r - 1, n), where C is the binomial coefficient (combinations).\n    # Here, n = 2 (remaining candies) and r = 3 (plates).\n    \n    from math import comb\n    ways = comb(total_candy + 3 - 1, 3 - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans = solve_congruence(*congruences)\n\n    while ans[0] < 100:\n        ans = (ans[0] + ans[1], ans[1])\n\n    return ans[0]\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    original_number = 210 / (1 - 0.3)\n    return original_number\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of flowers they have after the exchange\n    candy_now, nancy_now = symbols('candy_now nancy_now')\n    \n    # Given: Candy starts with 11 flowers, and Nancy starts with 9 flowers\n    candy_initial = 11\n    nancy_initial = 9\n    \n    # Equation 1: The sum of flowers after exchange remains the same\n    equation1 = Eq(candy_now + nancy_now, candy_initial + nancy_initial)\n    \n    # Equation 2: After the exchange, Nancy has 8 more flowers than Candy\n    equation2 = Eq(nancy_now, candy_now + 8)\n    \n    # Solve the equations \n    solutions = solve((equation1, equation2), (candy_now, nancy_now))\n    \n    # Solution for how many flowers Candy has now\n    return solutions[candy_now]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ARRANGE\")\n    a_count = 2\n    r_count = 2\n    n_count = 1\n    g_count = 1\n    e_count = 1\n\n    total_ways = factorial(total_letters) // (factorial(a_count) * factorial(r_count) * factorial(n_count) * factorial(g_count) * factorial(e_count))\n    \n    return total_ways\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_price = 200\n    increase_percentage = 45 / 100\n    increased_price = initial_price * (1 + increase_percentage)\n    return increased_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n    days = 3  # Monday, Tuesday, and Wednesday\n\n    total_money = (money_from_mum + money_from_dad) * days\n    \n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for num in range(100, 1000):  # Iterate through all 3-digit numbers\n        if num % 24 == 0 and num // 24 == 36:  # Check division condition\n            return num  # Return the missing number\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # Let the digits of the first integer be a, b, c, d such that a < b < c < d\n    # Then the first integer is 1000*a + 100*b + 10*c + d\n    # The second integer (reverse order) is 1000*d + 100*c + 10*b + a\n    # The third integer (different order) can be represented as 1000*w + 100*x + 10*y + z\n    # where w, x, y, z is a permutation of a, b, c, d\n    \n    # The sum of the three numbers is 26352.\n    # We can set up equations for each digit place based on the above:\n    # 1000s place: a + d + w = 26 - (b + c + x + y + z) // since the max for a set of digits is 9, we can assume that the max sum of (b + c + x + y + z) is 45\n    # 100s place: b + c + x\n    # 10s place: c + b + y\n    # 1s place: d + a + z\n    \n    # Because the digits are increasing from left to right in the first integer, a is the smallest digit, so we want to find a\n    # Since the maximum value a can take is 9 we will search through all possibilities\n    \n    for a in range(1, 10):\n        for b in range(a+1, 10):\n            for c in range(b+1, 10):\n                for d in range(c+1, 10):\n                    # w, x, y, z represent the digits of the third number\n                    for w in range(1, 10):\n                        for x in range(1, 10):\n                            for y in range(1, 10):\n                                for z in range(1, 10):\n                                    if len(set([a, b, c, d, w, x, y, z])) == 4: # ensure no digit is repeated\n                                        if 1000 * (a + d + w) + 100 * (b + c + x) + 10 * (c + b + y) + (d + a + z) == 26352:\n                                            first_number = 1000*a + 100*b + 10*c + d\n                                            return first_number\n    return None\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2*x - 5), 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_friday = -5\n    midday_saturday = 17\n    overall_change = midday_saturday - midnight_friday\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    difference = 1\n    while term <= 50:\n        difference += 1\n        term += difference\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43  # cost of one pen in pence\n    booklet_cost_p = 185  # cost of one booklet in pence\n    \n    total_cost_p = (3 * pen_cost_p) + (4 * booklet_cost_p)  # total cost in pence\n    total_cost_pounds = total_cost_p / 100  # convert pence to pounds\n    \n    amount_given_pounds = 10  # amount given in pounds\n    \n    change = amount_given_pounds - total_cost_pounds\n    \n    return change\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    sibel_place_from_back = 14\n    total_people = people_in_front + sibel_place_from_back - 1\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    population = 5384342\n    return population\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x + 7) / 9), 9)\n    \n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # If the 4th child is opposite the 22nd child,\n    # then the number of children that fit between them\n    # is the same as the number fitting between the 22nd and the 4th child,\n    # wrapping around the circle. Hence, the circle consists of twice\n    # the number of children between the 4th and 22nd child.\n\n    # Calculate children between the 4th and 22nd child\n    children_between = 22 - 4\n\n    # Total children in the circle is twice the children between plus these two children.\n    total_children = 2 * children_between + 2\n\n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_week_coins = 10\n    common_difference = 4\n    num_weeks = 10\n\n    # The sum of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    total_coins = num_weeks / 2 * (2 * first_week_coins + (num_weeks - 1) * common_difference)\n    \n    return int(total_coins)\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily = 24\n    gina = lily // 2\n    fiona = gina // 4\n\n    total_dresses = gina + fiona\n\n    return total_dresses\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    digits_sets = [\n        set(\"5648\"),\n        set(\"3628\"),\n        set(\"3147\"),\n        set(\"5629\"),\n        set(\"1258\"),\n    ]\n    correct_digits = set(\"0123456789\") - digits_sets[-1]\n    \n    # Dict to hold the frequency of each digit\n    digit_frequency = {d: 0 for d in correct_digits}\n    \n    # Increase frequency if digit appears in each trial\n    for trial_set in digits_sets[:-1]:\n        for d in correct_digits:\n            if d in trial_set:\n                digit_frequency[d] += 1\n\n    # The correct digits are those with frequency of 3\n    correct_code = [digit for digit, freq in digit_frequency.items() if freq == 3]\n\n    # Finding correct order\n    for d1 in correct_code:\n        for d2 in correct_code:\n            if d2 != d1:\n                for d3 in correct_code:\n                    if d3 != d1 and d3 != d2:\n                        for d4 in correct_code:\n                            if d4 != d1 and d4 != d2 and d4 != d3:\n                                test_code = d1 + d2 + d3 + d4\n                                if (test_code[0] not in digits_sets[0] or test_code[1] not in digits_sets[0] or\n                                    test_code[2] not in digits_sets[0] or test_code[3] not in digits_sets[0]) and \\\n                                   (test_code[0] not in digits_sets[1] or test_code[1] not in digits_sets[1] or\n                                    test_code[2] not in digits_sets[1] or test_code[3] not in digits_sets[1]) and \\\n                                   (test_code[0] not in digits_sets[2] or test_code[1] not in digits_sets[2] or\n                                    test_code[2] not in digits_sets[2] or test_code[3] not in digits_sets[2]) and \\\n                                   (test_code[0] not in digits_sets[3] or test_code[1] not in digits_sets[3] or\n                                    test_code[2] not in digits_sets[3] or test_code[3] not in digits_sets[3]):\n                                       return test_code\n    return \"\"\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    return 0.8 * 3 * 10\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknown marks of A, B, C, and D\n    A, B, C, D = symbols('A B C D')\n\n    # Given average marks\n    average_ABC = Eq((A + B + C) / 3, 95)\n    average_BCD = Eq((B + C + D) / 3, 94)\n\n    # E's mark is given and ranks as the second highest\n    E = 96\n\n    # A has the highest mark\n    highest_mark_condition = Eq(A, max(A, B, C, D, E))\n\n    # B and D have the same score\n    same_score_condition = Eq(B, D)\n\n    # Since A is the highest mark, it means A > E and A > 96\n    A_condition = Eq(A > 96, True)\n\n    # Solve for A, B, C, and D\n    solutions = solve((average_ABC, average_BCD, same_score_condition, A_condition), (A, B, C, D))\n\n    # Since we know B and D have the same score, we only need to find one of them\n    D_mark = solutions[B]\n\n    return D_mark\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n    # Using the formula for simple interest: A = P(1 + rt)\n    # We can rearrange the formula to solve for t: t = (A/P - 1) / r\n    years = (final_amount / principal - 1) / rate\n    return round(years)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    quarter_full_mass = 250\n    three_quarters_full_mass = 350\n    half_full_mass = (quarter_full_mass + three_quarters_full_mass) / 2\n    empty_jar_mass = quarter_full_mass - (half_full_mass - quarter_full_mass)\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_fill_liters = 9.1 / 7\n    # 350 ml is 0.35 liters\n    cup_fill_liters = 4 * 0.35\n\n    remaining_soda = total_soda_liters - bottle_fill_liters - cup_fill_liters\n\n    return remaining_soda\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for father's current age and son's current age\n    father, son = symbols('father son')\n\n    # Equation 1: Father's age 6 years ago is 5 times son's age 6 years ago\n    equation1 = Eq(father - 6, 5 * (son - 6))\n\n    # Equation 2: The sum of their current ages is 78\n    equation2 = Eq(father + son, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (father, son))\n\n    # Return the father's current age\n    return solutions[father]\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let x be the number of female teachers\n    # Let the total number of teachers be (x + 3), because there are 3 male teachers\n    # Average weight of all teachers is 65, so the total weight is 65 * (x + 3)\n    # Average weight of male teachers is 75, so the total weight of male teachers is 3 * 75\n    # Average weight of female teachers is 60, so the total weight of female teachers is 60 * x\n    \n    # Now, we can write an equation based on the total weight\n    # Total weight of all teachers = Total weight of male teachers + Total weight of female teachers\n    # 65 * (x + 3) = 3 * 75 + 60 * x\n    \n    # Solving for x\n    total_weight = 65 * (x + 3)\n    male_weight = 3 * 75\n    female_weight = 60 * x\n    \n    # 65x + 65*3 = 3*75 + 60x\n    # 65x + 195 = 225 + 60x\n    # 65x - 60x = 225 - 195\n    # 5x = 30\n    # x = 30 / 5\n    x = (225 - 195) / 5\n    \n    return int(x)  # the number of female teachers should be an integer\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # If Rose wants to ensure her victory, she needs to leave 13 marbles in such a way that\n    # no matter whether Kylie picks 1 or 2 marbles, Rose can always adjust her following moves\n    # to end up with a situation where she picks the last marble.\n    # The strategy is to always keep the number of marbles after her turn to be a multiple of 3.\n    # This way, she can always counter Kylie's move and be the one to pick the last marble.\n    # Therefore, Rose should ensure that after her turn, the number of marbles remaining is:\n    # 12 (4 turns of 3 for Rose to win)\n    # 9 (3 turns of 3 for Rose to win)\n    # 6 (2 turns of 3 for Rose to win)\n    # 3 (1 turns of 3 for Rose to win)\n    # To reduce 14 to the nearest lower multiple of 3, Rose should pick 2 marbles.\n\n    marbles_to_pick = 14 % 3\n    return marbles_to_pick\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023 ** 0.5\n    b = -a\n\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import pi, sqrt\n\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    amplitude = 0.08  # amplitude in meters (converted from cm)\n    displacement = 0.04  # displacement from equilibrium in meters (converted from cm)\n    \n    # Total energy (E) in the system is given by the formula E = (1/2) * k * amplitude^2\n    total_energy = 0.5 * k * amplitude**2\n\n    # Maximum speed (v_max) of the mass is given at the equilibrium position (x=0)\n    # And can be calculated as v_max = sqrt(k/m) * amplitude\n    v_max = sqrt(k / m) * amplitude\n\n    # Using conservation of energy, the kinetic energy at displacement x is given by\n    # E_kinetic = (1/2) * m * v^2 = total_energy - potential energy at x\n    # potential energy at x = (1/2) * k * x^2\n    potential_energy_at_x = 0.5 * k * displacement**2\n\n    # Therefore, E_kinetic = total_energy - potential_energy_at_x\n    kinetic_energy_at_x = total_energy - potential_energy_at_x\n\n    # Solve for speed (v) at x using kinetic energy formula E_kinetic = (1/2) * m * v^2\n    # v^2 = (2 * kinetic_energy_at_x) / m\n    # v = sqrt((2 * kinetic_energy_at_x) / m)\n    speed_at_x = sqrt((2 * kinetic_energy_at_x) / m)\n\n    ans = {\n        'Total Energy': total_energy,\n        'Speed at 4cm': speed_at_x\n    }\n\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pounds = 45\n    coin_value_p = 5\n    \n    # Since there are 100p in a £1, we convert £45 to pence\n    total_pence = total_pounds * 100\n    \n    # Calculate the number of 5p coins by dividing the total value in pence by the coin's value\n    num_coins = total_pence // coin_value_p\n    \n    return num_coins\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    # Loop through the hundreds place (1-9)\n    for i in range(1, 10):\n        # Loop through the tens place (0-9)\n        for j in range(0, 10):\n            # Loop through the ones place (0-9)\n            for k in range(0, 10):\n                # Check the difference between the digits\n                if abs(i - j) >= 7 and abs(j - k) >= 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(5001, 10000): # Iterate through all 4-digit numbers larger than 5000\n        digits = [int(d) for d in str(i)] # Split the integer into its digits\n        thousands_digit = digits[0]\n        if 0 not in digits[1:] and all(thousands_digit % d == 0 for d in digits[1:]):  # Check divisibility\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    \n    # Each minute \n    equation1 = Eq(pip, bud + 20)\n    # Total distance\n    equation2 = Eq(3 * pip + 3 * bud, 540)\n    \n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    # Distance Pip runs in 3 minutes\n    distance_pip = 3 * solutions[pip]\n\n    return distance_pip\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    num1 = int(\"2A3\", 16)\n    num2 = int(\"17B\", 16)\n\n    result = num1 + num2\n    ans = hex(result).upper()[2:]\n\n    return ans\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    result = (25 / 100) * (30 / 100) * (40 / 100) * 300\n    return result\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_revenue = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_price = total_revenue / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of coins in Box B at the beginning\n    # So, 4x is the number of coins in Box A at the beginning\n    # Let y be the original number of coins in Box C\n    # After transactions, Box C has 1220 coins, which is 22% more than y\n    # Hence, y + 0.22y = 1220 => 1.22y = 1220 => y = 1220 / 1.22\n    # Also, 0.06 * 4x (from Box A) + 0.20 * x (from Box B) = 0.22y\n\n    x, y = symbols('x y')\n    equation1 = Eq(1.22 * y, 1220)\n    equation2 = Eq(0.24 * x + 0.20 * x, y)\n\n    # We only need the value of x which is the number of coins in Box B at the beginning\n    # And then we return 4 * x because we want the number of coins in Box A at the beginning\n\n    solution_x = solve((equation1, equation2), (x, y))\n    return 4 * solution_x[x]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let initial total number of drinks be t.\n    # Initial number of coffee drinks = 60% of t = 0.6 * t.\n    # Initial number of tea drinks = 40% of t = 0.4 * t.\n    \n    # After adding more bottles of tea, the number of coffee drinks remained the same.\n    # Final percentage of coffee drinks = 40%\n    # This means that the final total number of drinks is now 1.5 times the initial number of coffee drinks.\n    \n    # Let final total number of drinks be f.\n    # f = 1.5 * initial number of coffee drinks = 1.5 * (0.6 * t) = 0.9 * t.\n    \n    # Let the number of bottles of tea added be x.\n    # So, (0.4 * t) + x = f - (0.6 * t) [since final number of coffee drinks = initial number of coffee drinks]\n    # (0.4 * t) + x = (0.9 * t) - (0.6 * t)\n    # x = (0.9 * t) - (0.6 * t) - (0.4 * t)\n    # x = -0.1 * t\n    # x = 0.1 * t [taking absolute value since x represents the number of bottles added]\n    \n    # Percentage increase in number of bottles of tea = (number of bottles of tea added / initial number of bottles of tea) * 100\n    # = (x / (0.4 * t)) * 100\n    # = ((0.1 * t) / (0.4 * t)) * 100\n    # = (0.1 / 0.4) * 100\n    # = 0.25 * 100\n    \n    percentage_increase = (0.1 / 0.4) * 100\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # Define the time for each activity\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    # Sum up the time for all activities\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money = 60  # pence\n    james_money = 110  # since £1.10 is equivalent to 110 pence\n    total_money = lewis_money + james_money  # total money in pence\n    \n    return total_money  # return the total in pence\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    word = 'WINNING'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_letters = len(word)\n    ways = factorial(total_letters)\n    for count in letter_counts.values():\n        ways //= factorial(count)\n    return ways\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):\n        for x2 in range(3, 13):\n            x3 = 13 - x1 - x2\n            if x3 >= 3 and len({x1, x2, x3}) == 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from itertools import permutations\n    \n    total_ways = 0\n    for perm in permutations(range(6)):\n        if all(perm[i] != i for i in range(6)):\n            total_ways += 1\n    return total_ways\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    total_vehicles = 24\n    total_wheels = 86\n    tricycle_wheels = 3\n    car_wheels = 4\n\n    # Let the number of tricycles be 't' and the number of cars be 'c'\n    # We have two equations:\n    # t + c = total_vehicles  => Equation 1: t + c = 24\n    # tricycle_wheels*t + car_wheels*c = total_wheels  => Equation 2: 3*t + 4*c = 86\n\n    # From Equation 1, we can express c in terms of t: c = 24 - t\n    # We substitute the value of c in Equation 2\n    # 3*t + 4*(24 - t) = 86\n\n    # Now, we solve for t\n    t = (total_wheels - car_wheels * total_vehicles) / (tricycle_wheels - car_wheels)\n    \n    return int(t)\n\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    total_bottles = 350\n    total_income = 2012\n    price_lemonade = 4\n    price_plus = 7\n\n    # Using integer linear programming for optimization\n    from scipy.optimize import linprog\n\n    # Coefficients for the objective function (negative because linprog does minimization)\n    c = [-1, 0]\n\n    # Coefficients for the inequality constraints (Ax <= b)\n    A = [[price_lemonade, price_plus], [1, 0]]\n    b = [total_income, total_bottles]\n\n    # Bounds for each variable (number of drinks cannot be negative)\n    x0_bounds = (0, total_bottles)\n    x1_bounds = (0, total_bottles)\n\n    # Solve the problem\n    res = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds], method='highs')\n\n    # Minimum number of bottles of \"1000 Plus\" sold\n    min_plus_bottles = res.x[0]\n\n    return int(min_plus_bottles)\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Initial proportions are 3:5 for blue:red pens,\n    # which totals to 3 + 5 = 8 parts\n    initial_total_parts = 3 + 5\n    \n    # Initially there are 96 pens, so each part equals 96 / 8 pens\n    part_value = 96 // initial_total_parts\n    \n    # Calculate the initial number of blue and red pens\n    initial_blue = 3 * part_value\n    initial_red = 5 * part_value\n    \n    # 60 red pens are added\n    new_red = initial_red + 60\n    \n    # 40% of the total pens are now blue, so 60% are red\n    # Calculate the total number of pens after the new pens are added\n    total_pens_after_addition = new_red * 100 // 60\n    \n    # Calculate the number of blue pens after the addition\n    new_blue = total_pens_after_addition * 40 // 100\n    \n    # The number of blue pens added is the new amount minus\n    # the initial amount of blue pens\n    blue_pens_added = new_blue - initial_blue\n    \n    return blue_pens_added\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # in kilograms\n    final_velocity = 8  # in meters per second\n    time = 4  # in seconds\n\n    # Using the formula F = ma, where 'a' is acceleration\n    # And using the formula for acceleration a = (final_velocity - initial_velocity) / time\n    # Since the object is initially at rest, initial_velocity = 0\n\n    acceleration = final_velocity / time\n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for number in range(101):\n        if (number % 4 == 0) and (number % 7 == 6) and (number % 5 == 0):\n            return number\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # This problem relates to the Frobenius coin problem,\n    # which finds the largest number that cannot be formed\n    # with a given set of coin denominations.\n    # For our case, the two \"coin denominations\" are 3 and 7.\n    # The formula for the largest number that cannot be formed is:\n    # (a*b) - a - b, where a and b are coprime (no common factors other than 1).\n    a = 3\n    b = 7\n    \n    # Since 3 and 7 are coprime, we can apply the formula directly.\n    ans = (a * b) - a - b\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from sympy import divisors\n\ndef solution():\n    factors_count = {i: len(divisors(i)) for i in range(1, 14)}\n\n    # Identifying unique factors count that could let the two students know their numbers\n    unique_factors_count = [count for count in set(factors_count.values()) if list(factors_count.values()).count(count) == 1]\n\n    # Find numbers with unique factors count\n    known_numbers = [number for number, count in factors_count.items() if count in unique_factors_count]\n\n    # Since Alice sees 8 numbers and knows her number has an odd number of factors, Alice cannot see both 1 and 9 or 4 and 12\n    # Find the odd numbers Alice could have\n    poss_alice_numbers = [number for number in range(1, 14, 2) if number not in known_numbers]\n\n    # May's number is smaller than Alice's by 2 and bigger than Mark by 1\n    possible_combinations = []\n    for alice_number in poss_alice_numbers:\n        may_number = alice_number - 2\n        # Since May knows her number and it's smaller than Alice's by 2, May's & Mark's number can't have unique factors count\n        if may_number not in known_numbers and (may_number - 1) not in known_numbers:\n            possible_combinations.append((alice_number, may_number, may_number - 1))\n\n    # Determine the 4 numbers not picked by elimination\n    not_picked_numbers = set(range(1, 14)) - set(known_numbers)\n    for alice, may, mark in possible_combinations:\n        not_picked_numbers.discard(alice)\n        not_picked_numbers.discard(may)\n        not_picked_numbers.discard(mark)\n\n    # Calculate the product of the four numbers not picked\n    product_not_picked = 1\n    for number in not_picked_numbers:\n        product_not_picked *= number\n\n    return product_not_picked\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n\n    # Jane would gain 5 points for each correct answer\n    # and lose 2 points for each incorrect answer.\n    equation1 = Eq(5 * correct - 2 * incorrect, 151)\n\n    # The number of correct answers that Jane got is 12 more than three times the number of incorrect answers.\n    equation2 = Eq(correct, 3 * incorrect + 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    distance_km = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * distance_km\n    cost_per_person = total_cost / num_friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    num1 = int(\"45\", 7)\n    num2 = int(\"66\", 7)\n    sum_base10 = num1 + num2\n    ans = ''\n    \n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n        \n    return ans if ans else '0'\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Each match involves two players, so we will find the total number of matches played\n    # by summing up the matches played by each student (excluding F) and then dividing by 2\n    total_matches_excluding_F = 4 + 6 + 2 + 1 + 3 + 5  # Sum of matches played by A,B,C,D,E,G\n    # Since each match involves two players, we divide by 2 to get the total match count\n    total_matches = total_matches_excluding_F / 2\n    \n    # Now, we calculate the number of matches F has played\n    # We assume that F has played with each of the other students at least once,\n    # hence F has played 6 matches (since there are 7 students and we exclude F)\n    F_matches = 6 - total_matches\n\n    return int(F_matches)\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    from sympy import gcd\n\n    for i in range(1, 20):\n        if i + 1 <= 20:\n            seq = list(range(1, 21))\n            seq.remove(i)\n            seq.remove(i + 1)\n\n            lcm = 1\n            for number in seq:\n                lcm = lcm * number // gcd(lcm, number)\n\n            if len([x for x in range(1, 21) if lcm % x == 0]) == 18:\n                return i + (i + 1)\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cici_age_now, linda_age_now = symbols('cici_age_now linda_age_now')\n    \n    # Equation based on given information about Linda's age when Cici was born\n    equation1 = Eq(cici_age_now, linda_age_now - 11)\n    # Equation based on the sum of their ages 4 years later being 37\n    equation2 = Eq(cici_age_now + 4 + linda_age_now + 4, 37)\n\n    # Solve the system of equations\n    ages_now = solve((equation1, equation2), (cici_age_now, linda_age_now))\n\n    # Calculate Linda's age 3 years later\n    linda_age_later = ages_now[linda_age_now] + 3\n\n    return linda_age_later\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let the number of Natasha's stamps be n\n    # Then the number of Jamie-Anne's stamps would be n + 18\n    # According to the problem, the ratio is 5:3, so\n    # (n + 18) / n = 5 / 3\n    # Solving for n we get:\n    n = 18 * 3 // (5 - 3)\n\n    # Now calculate Jamie-Anne's stamp count\n    jamie_anne_stamps = n + 18\n\n    # Finally, calculate the total number of stamps\n    total_stamps = jamie_anne_stamps + n\n    return total_stamps\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = 0\n    for i in range(161, 15 * 15):  # The pairs end at 15*15 because beyond that quotient changes\n        if i % 15 == i // 15:\n            ans += i\n    return ans\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    return min_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    uphill_distance = 300\n    downhill_distance = 300\n    uphill_speed = 10\n    downhill_speed = 30\n    \n    # Time = Distance / Speed\n    uphill_time = uphill_distance / uphill_speed\n    downhill_time = downhill_distance / downhill_speed\n    \n    total_time = uphill_time + downhill_time\n    total_distance = uphill_distance + downhill_distance\n    \n    # Average speed = Total distance / Total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    num_people = 4\n    num_entrances = 5\n    \n    # each person can choose from 5 entrances independently, so we simply \n    # raise the number of entrances to the power of the number of people\n    ways = num_entrances ** num_people\n    \n    return ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches / peaches_per_bag\n    \n    return int(num_bags)\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Calculate number of distributable apples, pears, and oranges\n    distributable_apples = 226 - 10\n    distributable_pears = 352 - 28\n    distributable_oranges = 157 - 13\n\n    # Calculate gcd of distributable apples, pears, and oranges\n    greatest_common_divisor = gcd(gcd(distributable_apples, distributable_pears), distributable_oranges)\n\n    # The greatest possible number of students is the gcd\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    import math\n    \n    # Judy can stand in 2 places, either the first or the last place.\n    judy_positions = 2\n    \n    # Remaining spots for the five friends to stand.\n    friends_spots = math.factorial(5)\n    \n    # Apply the multiplication principle.\n    total_ways = judy_positions * friends_spots\n    \n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    import math\n    \n    number_given = 6\n    lcm = 12\n\n    for i in range(1, lcm + 1):\n        if math.gcd(number_given, i) in [1, 2] and lcm == math.lcm(number_given, i):\n            return i\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    current_number = 1\n    current_digit_count = 0\n\n    while True:\n        current_number_str = str(current_number)\n        num_digits = len(current_number_str)\n\n        if current_digit_count + num_digits >= 200:\n            return int(current_number_str[200 - current_digit_count - 1])\n\n        current_digit_count += num_digits\n        current_number += 1\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_produced_per_day = 500\n    days = 4\n    total_produced = total_produced_per_day * days\n    \n    points_per_qualified = 5\n    points_per_unqualified = -18\n    \n    # Total points after four days\n    total_points = 9931\n    \n    # Let's assume all products are qualified, we get the maximum possible points\n    max_points = total_produced * points_per_qualified\n    \n    # The difference between the maximum points and actual points gives us\n    # the total negative points due to unqualified products.\n    # This difference divided by the loss per unqualified product plus the total negative \n    # points per qualified product gives us the number of unqualified products.\n    unqualified_products = (max_points - total_points) / (points_per_qualified - points_per_unqualified)\n    \n    # The difference between total produced products and unqualified products\n    # gives us the number of qualified products.\n    qualified_products = total_produced - unqualified_products\n\n    return int(qualified_products)\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost = symbols('cost')\n    original_price = cost + 40\n    discounted_price = original_price * 0.8\n    profit = discounted_price - cost\n    \n    equation = Eq(profit, 12)\n    cost_value = solve(equation, cost)\n    \n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = (6.25 * 8.27 * 16) + (1.25 * 0.827 * 8)\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Daniel and his daughter's current age\n    daniel, daughter = symbols('daniel daughter')\n    \n    # Equation 1: Two years ago, Daniel's age was 6 times his daughter's age\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    \n    # Equation 2: Two years from now, Daniel's age will be 4 times his daughter's age\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, daughter))\n    \n    # Return Daniel's current age\n    return solutions[daniel]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let's denote the initial speed of April as A and of Baye as B.\n    # April covers 1800 metres initially.\n    # The time it takes for April to cover 1800 metres would be the same time\n    #  Baye covers (1800 - 800) = 1000 metres.\n    # Thus A/B = 1800/1000 = 9/5.\n    # When April meets Baye after turning back, they both have covered\n    #  an additional 800 metres total distance at their respective initial speeds.\n    # When April reaches P, she would have covered 1800 (initial) + 800 (back to meeting) + 800 (to P) = 3400 metres.\n    # In the same time, Baye would have covered (3400 / 9) * 5 meters.\n\n    # Calculate the distance Baye has covered\n    baye_covered_distance = (3400 / 9) * 5\n\n    # The distance Baye would still be away from Q when April reaches P\n    distance_from_q = 1800 - baye_covered_distance\n\n    return distance_from_q\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    # Original relationship: hens = 6 * roosters\n    eq1 = Eq(hens, 6 * roosters)\n    # After addition: hens + 60 = 4 * (roosters + 60)\n    eq2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    # Solve the system of equations\n    solved_values = solve((eq1, eq2), (hens, roosters))\n\n    # Total number of chickens before = hens + roosters\n    total_chickens = solved_values[hens] + solved_values[roosters]\n\n    return total_chickens\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    # Original sum of seven numbers\n    original_sum = 7 * 12\n    # New sum with an eighth number included\n    new_sum = 8 * 11\n    # Find the eighth number\n    eighth_number = new_sum - original_sum\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    seq_sum = sum(range(1, 9)) + sum(range(7, 0, -1)) + sum([1, 2])\n    return seq_sum\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_sequence = '538462'\n    index = 2020  # Indexing starts from 0, so the 2021st digit is at index 2020\n    digit_position = index % len(recurring_sequence)\n    return int(recurring_sequence[digit_position])\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count_nines = 0\n    for number in range(1, 101):\n        count_nines += str(number).count('9')\n    return count_nines\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # For two-digit palindromic numbers\n    for i in range(1, 10):\n        count += 1  # 11, 22, ..., 99\n    \n    # For three-digit palindromic numbers\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # 101, 111, ..., 191, 202, ..., 292, ..., 909, 919, 929, ..., 999\n\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    total_cost = 132\n    fraction_book = 1/3\n    fraction_bag = 2/5\n\n    # Total cost is the sum of costs of book and bag\n    # Let x be the total money Bud had initially\n    # (1/3)x + (2/5)x = 132\n    # To find x, we solve the equation for x: x = 132 / ((1/3) + (2/5))\n\n    x = total_cost / (fraction_book + fraction_bag)\n\n    return x\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    a = 1 + 0.23 + 0.34\n    b = 0.23 + 0.34 + 0.45\n    c = 1 + 0.23 + 0.34 + 0.45\n    d = 0.23 + 0.34\n\n    ans = (a * b) - (c * d)\n    return ans\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b = symbols('b')\n    a = 5 * b\n    c = b - 75\n    \n    equation = Eq(a + b + c, 835)\n    mass_b = solve(equation, b)[0]\n    mass_a = 5 * mass_b\n\n    return mass_a\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Darrell could draw all the blue and white beads first before getting 5 green beads.\n    # This is the worst case scenario for getting 5 green beads.\n    # Therefore, Darrell must draw all the blue and white beads and 5 green beads.\n    blue_beads = 5\n    white_beads = 6\n    beads_to_get_5_green = 5\n\n    # Calculating the number of beads Darrell must draw to guarantee 5 green beads.\n    beads_drawn = blue_beads + white_beads + beads_to_get_5_green\n\n    return beads_drawn\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    divisible_by_5 = 105 // 5\n    divisible_by_7 = 105 // 7\n    divisible_by_5_and_7 = 105 // (5 * 7)\n\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    book_pages = 215\n    count_digits = 0\n    \n    for number in range(1, book_pages + 1):\n        count_digits += len(str(number))\n        \n    return count_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(\"1\" + str(num)) * 3 == int(str(num) + \"1\"):\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for page_number in range(1, 82):\n        total_digits += len(str(page_number))\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # Time to walk from first floor to fourth floor (3 intervals) is given as 12 minutes\n    time_for_3_intervals = 12\n    # Number of intervals from first floor to eighth floor (7 intervals)\n    number_of_intervals = 7\n    # Calculate time per interval by dividing the time for 3 intervals by 3\n    time_per_interval = time_for_3_intervals / 3\n    # Multiply the time per interval by the number of intervals to get the total time\n    total_time = time_per_interval * number_of_intervals\n    return total_time\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio values for birds and squirrels\n    birds = 8\n    squirrels = 5\n\n    # Total number of birds and squirrels before change\n    total_initial = birds + squirrels\n\n    # Squirrels increase by 20%\n    squirrels *= 1.20\n\n    # Total number of birds and squirrels remains the same\n    # Therefore, new number of birds = total_initial - new number of squirrels\n    new_birds = total_initial - squirrels\n\n    # Calculate the percentage decrease in the number of birds\n    birds_flown_away_percentage = ((birds - new_birds) / birds) * 100\n\n    return birds_flown_away_percentage\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    divisor_dividend_quotient_sum = 40 - remainder\n    possible_values = set()\n\n    for divisor in range(1, divisor_dividend_quotient_sum):\n        for quotient in range(1, divisor_dividend_quotient_sum // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient == divisor_dividend_quotient_sum:\n                possible_values.add(dividend / quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Calculate the number of days using the formula for the nth term of an arithmetic sequence:\n    # last_day_pages = first_day_pages + (num_days - 1) * difference\n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Define the custom operation based on the patterns observed\n    def custom_operation(a, b):\n        return (a % 3) + b - (b % 3)\n\n    # Use the custom operation to find the result for 9 ◈ 20\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice = 8 * 3  # Total juice in liters\n    juice_remaining = total_juice - 9  # Remaining juice after drinking 9 liters\n    containers_needed = -(-juice_remaining // 5)  # Ceil division to find number of containers\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 15 - 7\n    n = 5  # Next term position\n\n    next_term = first_term + (n - 1) * common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # There are three unknowns, representing the number of apples in each basket\n    # Since the baskets are identical, we only need to consider the combinations once.\n    x, y, z = symbols('x y z')\n\n    # Equation representing total apples\n    equation = Eq(x + y + z, 6)\n\n    count = 0\n    # Since the baskets can be empty, we start the range from 0 to 6\n    for i in range(7):\n        for j in range(7):\n            for k in range(7):\n                if solve(equation.subs({x:i, y:j, z:k})) == {x: i, y: j, z: k}:\n                    # Avoid counting permutations of the same combination multiple times\n                    count += 1 / 6 if i == j == k else (1 / 2 if i == j or j == k or i == k else 1)\n    \n    return int(count)\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(10, int(9/(5/9)) + 1):  # A starts from 10 to ensure 9/A < 1, and the upper bound is determined by the inverse of 5/9\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    needed_loafs = 35\n    cups_needed = needed_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    num_friends = 4\n    cards_sent = num_friends * (num_friends - 1)\n    return cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    total_students = 39\n    for boys in range(total_students + 1):\n        girls = total_students - boys\n        if boys / 4 == girls / 5:\n            return boys - girls\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_Tanya = 3\n    members_right_of_Tanya = 5\n    Tanya = 1\n    total_members = members_left_of_Tanya + Tanya + members_right_of_Tanya\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n\n    # Starting from the largest four-digit number, we find the largest prime factor\n    for i in reversed(list(primerange(1000, 10000))):\n        if 87878 % i == 0:\n            return i\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Calculate the time for each segment of the race\n    time_first_segment = 280 / 7  # time = distance / speed\n    time_middle_segment = 400 / 5\n    time_final_segment = (800 - 280 - 400) / 8\n\n    # Sum of times for all segments to get the total time\n    total_time = time_first_segment + time_middle_segment + time_final_segment\n\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_crate_weight = 24 * 5\n    max_load_per_van = 12\n    vans_needed = -(-total_crate_weight // max_load_per_van)\n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n    \n    # Equation representing the relationship after Daniel gave away and Patrick bought stickers\n    equation = Eq(patrick + 10, 2 * (daniel - 24))\n    \n    # Since Daniel and Patrick started with an equal number of stickers \n    # we can replace 'patrick' with 'daniel' in the equation\n    solutions = solve(equation.subs(patrick, daniel), daniel)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) // 5) * 2\n    return ans\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    # Starting from the smallest two-digit number that can be divided by the LCM of 3 and 7\n    lcm = 3 * 7  # Since 3 and 7 are prime numbers, their LCM is simply their product\n    for number in range(10, 100):\n        if number % lcm == 0:\n            return number\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth_below_sea = -82\n    plane_height_above_sea = 569\n    \n    vertical_distance = plane_height_above_sea - whale_depth_below_sea\n    \n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n\n    # Since there are 21 right-handed students out of 30\n    # At most, 30 - 21 = 9 students can be left-handed\n    # There are 16 girls, so the minimum number of girls who can be right-handed is\n    # the total number of girls minus the maximum possible number of left-handed students\n    min_right_handed_girls = total_girls - (total_pupils - right_handed)\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    return 1  # The smallest difference is between successive numbers like 123456789 and 123456790\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    total_fruit = symbols('total_fruit')\n\n    # Create the equations based on the problem\n    apple_fraction = 2/3\n    banana_fraction = 1/9\n    # Since 1 - (2/3 + 1/9) = 2/9, the fraction of lemons is:\n    lemon_fraction = 2/9\n    \n    # Equation for the relationship between apples and lemons\n    equation = Eq((apple_fraction - lemon_fraction) * total_fruit, 12)\n\n    # Solve the equation\n    total_fruit_solution = solve(equation, total_fruit)[0]\n\n    # Number of lemons\n    lemons = lemon_fraction * total_fruit_solution\n\n    return lemons\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def count_partitions(n, max_value):\n        if n == 0:\n            return 1  # There's one way to sum up to zero: use no numbers at all\n        elif n < 0 or max_value == 0:\n            return 0  # No way to sum up to a negative number, or to sum up to anything with no numbers\n        else:\n            # Sum of two quantities:\n            #   1. The number of partitions of `n` using numbers at most `max_value - 1`\n            #   2. The number of partitions of `n - max_value` - effectively, the number\n            #      of ways to reach `n` by using `max_value` at least once.\n            return count_partitions(n, max_value - 1) + count_partitions(n - max_value, max_value)\n\n    # We're looking for the number of ways to split the number 5,\n    # where any number of terms are allowed. The maximum number we can use is `5`.\n    ans = count_partitions(5, 5)\n    return ans\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_worker = 6\n    total_skirts = sum([(skirts_per_worker * worker_count) for worker_count in range(1, 10)])\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3 / probability_over_20\n\n    return probability_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Calculate the rate of the 5 taps\n    rate_per_tap = 1 / 5  # Litres per minute\n\n    # Calculate the time for one tap to fill 1 litre\n    time_for_one_litre = 2 / rate_per_tap  # 2 minutes for 5 taps, so 1/rate for 1 tap\n\n    # Since the question asks for 500ml or 0.5 litre\n    time_for_half_litre = time_for_one_litre * 0.5  # half the time for half the volume\n\n    return time_for_half_litre\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from itertools import permutations\n\n    max_sum_art = 0  # Initialize the max sum to 0\n\n    # Loop through all possible permutations of digits 1 to 9 (ensuring no digit is 0)\n    for digits in permutations(range(1, 10), 4):\n        D, A, R, T = digits  # Unpack the digits into variables representing each letter\n        \n        # Check if the equations are satisfied\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            # If the equations are satisfied, calculate the sum of A, R, T\n            sum_art = A + R + T\n            # Update maximum value of A + R + T\n            max_sum_art = max(max_sum_art, sum_art)\n    \n    return max_sum_art\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    difference = 20\n    sally_height = ben_height + difference\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/2) * remaining\n    equation = Eq(children - men, 140)\n\n    ans = solve(equation, total_visitors)\n\n    return ans[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    max_sum = 0\n    \n    for perm in permutations(digits, 6):\n        num1 = perm[0]*100 + perm[1]*10 + perm[2]\n        num2 = perm[3]*100 + perm[4]*10 + perm[5]\n        max_sum = max(max_sum, num1 + num2)\n    \n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume = 2000  # the initial volume in millilitres\n    volume_drank = 350     # the volume drank in millilitres\n\n    remaining_volume = initial_volume - volume_drank  # the remaining volume\n\n    return remaining_volume\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    result = 3280 * 0.4\n    return result\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    pattern = [1, 8, 16, 23, 46, 53]\n    differences = [pattern[i] - pattern[i-1] for i in range(1, len(pattern))]\n    # Observed pattern in differences: +7, +8, +7, +23, +7\n    # The rule seems to be +7, then double the previous unique number (not +7)\n    \n    # find the last unique number used before the last +7\n    last_unique = differences[3]  # since the fourth position is +23, which is double 11\n    next_unique = last_unique + 1  # increment by 1 to find the next unique number\n    \n    # since last difference is +7, now we will double the unique number\n    next_diff = 2 * next_unique  \n    \n    # add this difference to the last number in the pattern to find the next number\n    next_number = pattern[-1] + next_diff\n    \n    return next_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of tons of water A can fill per hour\n    # Let 2x be the number of tons of water B can fill per hour\n    # Let y be the number of tons of water C can fill per hour\n    # Let z be the total number of tons the pool can hold\n    x, y, z = symbols('x y z')\n\n    # If A and C are turned on, the pool fills with z tons and includes 18 tons from A\n    equation1 = Eq(x + y, z)\n    # From A's contribution\n    equation2 = Eq(18, x)\n\n    # If B and C are turned on, the pool fills with z tons and includes 27 tons from B\n    equation3 = Eq(2 * x + y, z)\n    # From B's contribution\n    equation4 = Eq(27, 2 * x)\n\n    # Since the rate of B is twice that of A, we have equation4.\n    # We can now solve for x, y, and z\n    solutions = solve((equation1, equation2, equation3, equation4), (x, y, z))\n\n    return solutions[z]\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    matches = 20\n    goals_per_game = 2\n    goals = matches * goals_per_game\n\n    match_earnings = matches * 500\n    goal_earnings = goals * 100\n\n    total_earnings = match_earnings + goal_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kilograms = 8\n    cost_per_kilogram = total_cost / total_kilograms\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        M, A, T, H = p\n        if M == 0 or H == 0:  # M and H cannot be 0 because they are the first digit in a four-digit number\n            continue\n        num1 = M * 1000 + A * 100 + T * 10 + H\n        num2 = H * 1000 + T * 100 + A * 10 + M\n        if num1 + num2 == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    def operation_sun(a, b):\n        return sum(range(a, a + 2 * b, 2))\n\n    ans = operation_sun(1, 10)\n    return ans\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let's denote the daily grass growth as G units,\n    # the amount of grass that a horse eats per day as H units,\n    # and the amount of grass that a sheep eats per day as S units.\n    # According to the problem, 1 horse eats as much as 4 sheep: H = 4 * S\n\n    # If there are 20 horses, the total grass they eat in 12 days is 20 * H * 12.\n    # Since this amount is equal to the total amount of new grass that grows in 12 days,\n    # we can set up the equation: 20 * H * 12 = G * 12\n\n    # Similarly for 60 sheep, the total grass they eat in 24 days is 60 * S * 24,\n    # which is also equal to the total amount of new grass that grows in 24 days:\n    # 60 * S * 24 = G * 24\n\n    # We're looking for how many days (d) it takes for 12 horses and 88 sheep\n    # to eat all the grass that grows: 12 * H * d + 88 * S * d = G * d\n\n    # Now we can solve for H, G and S from the first two equations, and then find d.\n\n    # From the first equation, we know that H = G / 20\n    # From the second equation, we know that S = G / (4 * 60) because H = 4 * S\n    # Hence, S = G / 240\n\n    # Let's replace H and S in the third equation:\n    # 12 * (G / 20) * d + 88 * (G / 240) * d = G * d\n    # Simplifying it:\n    # (12/20 + 88/240) * d = d\n    # We can solve for d by dividing both sides by (12/20 + 88/240)\n\n    d = 1 / (12/20 + 88/240)\n    return d\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Numbers from 100 to 999 (no leading zeros)\n\n    # Exclude cases with no '7's: 8 options for the first digit (no '0' or '7'),\n    # 9 options for the second digit (cannot be '7'), and 9 options for the third\n    no_sevens = 8 * 9 * 9\n\n    # Exclude cases with exactly one '7': 2 options for the position of the '7',\n    # 8 options for the first digit if it's not in the first position (no '0' or '7'),\n    # and 9 options for the other digit\n    one_seven = 2 * (8 * 9) + (9 * 9)  # Add extra '7' in the first position\n\n    # At least two sevens are the total minus cases with no sevens and exactly one seven\n    at_least_two_sevens = total_three_digit_numbers - no_sevens - one_seven\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    quantity = 16\n\n    cost_per_ball = total_cost / quantity\n\n    return cost_per_ball\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $2 notes and y be the number of $5 notes\n    x, y = symbols('x y')\n    \n    # Total number of notes\n    eq1 = Eq(x + y, 55)\n    \n    # She spent 1/3 of the number of $2 notes\n    # So she now has 2/3x $2 notes left and the $5 notes become y + 8\n    # The number of $5 notes she had is 3/7 of the remaining number of notes\n    eq2 = Eq(y + 8, (3/7)*(2/3*x + y + 8))\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # Calculate the total amount of money Cindy had at first\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n    \n    return total_money\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    final_sweets_left = sweets_left - sweets_given_away\n\n    return int(final_sweets_left)\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    first_number = 1.9\n    second_number = 1.99\n\n    halfway_number = (first_number + second_number) / 2\n\n    return halfway_number\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    for correct in range(6+1):\n        wrong = 6 - correct\n        score = (correct * 5) - (wrong * 2)\n        if score == 23:\n            return correct\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    divisors_A = []\n    divisors_C = []\n    \n    # Find the divisors of 24\n    for i in range(1, 25):\n        if 24 % i == 0:\n            divisors_A.append(i)\n    \n    # Find the divisors of 52\n    for i in range(1, 53):\n        if 52 % i == 0:\n            divisors_C.append(i)\n    \n    # B must be a common factor of 24 and 52, B = 4 is the greatest common factor\n    B = 4\n    \n    # Find corresponding values of A and C\n    A = 24 // B\n    C = 52 // B\n    \n    return A + C\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56\n    speed = 7\n    time = distance / speed\n    return time\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial\n    \n    # Mr Spencer and his 2 children can be treated as a single unit plus 3 individual units\n    # This is because Mr Spencer wants to sit between his 2 children which means they will always be together\n    total_units = 4  # One unit of Mr. Spencer and his children, three other individuals\n    unit_permutations = factorial(total_units)  # Permutating these units\n    \n    # Mr Spencer (S) and his two children (C1, C2) can be arranged in 2! ways since S has to be in the middle.\n    children_permutations = factorial(2)\n    \n    # Total arrangements is the product of unit_permutations and children_permutations\n    arrangements = unit_permutations * children_permutations\n\n    return arrangements\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    final_result = 18\n    subtracted_value = 7\n    divided_by = 3\n\n    original_number = (final_result - subtracted_value) * divided_by\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let x be the number of sweets Mr. Lim has,\n    # y be the number of students.\n\n    # From the problem,\n    # x + 26 = 6y ...(1) (short by 26 sweets when giving 6 sweets per student)\n    # x + 5 = 5y ...(2) (short by 5 sweets when giving 5 sweets per student)\n\n    # Subtracting equation (2) from (1) we get\n    # (x + 26) - (x + 5) = 6y - 5y\n    # 26 - 5 = y\n    y = 21\n\n    # Now, substituting y in equation (2)\n    x = 5 * y - 5\n    ans = x\n    return ans\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    # Let b be the original number of boys and g be the original number of girls.\n    # We know that b/g = 5/3 and (b - 15)/g = 5/6.\n\n    # Let's assume the original number of boys is 5k and girls is 3k for some positive integer k.\n    # So we have: b = 5k, g = 3k\n\n    # From the second ratio (b - 15)/g = 5/6 we get:\n    # (5k - 15)/3k = 5/6\n    # Cross-multiplying we get:\n    # 6(5k - 15) = 5 * 3k\n    # 30k - 90 = 15k\n    # 15k = 90\n    # k = 90 / 15\n    # k = 6\n\n    # Now we find the original number of boys and girls:\n    # b = 5k = 5 * 6 = 30\n    # g = 3k = 3 * 6 = 18\n\n    # And the total number of pupils in the band originally is b + g\n    total_pupils = 30 + 18\n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):  # to ensure x2 is different from x1.\n            for x3 in range(x2 + 1, 15):  # to ensure x3 is different from x1 and x2.\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "from math import factorial\n\ndef solution():\n    # A,B,C can be grouped as a single unit, and so can E,F.\n    # We then have 6 units to arrange: {ABC}, D, G, H, I, {EF}.\n    units = 6\n    unit_permutations = factorial(units)\n    \n    # Within the {ABC} group, A, B, C can be arranged in 3! ways.\n    # Within the {EF} group, E and F can be arranged in 2! ways.\n    ABC_permutations = factorial(3)\n    EF_permutations = factorial(2)\n    \n    # Multiplying the number of permutations of the groups\n    # by the permutations within the groups gives the total.\n    total_permutations = unit_permutations * ABC_permutations * EF_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 16, 2))\n    return series_sum\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "from sympy import factorint\n\ndef solution():\n    # Factorize 675 into its prime factors\n    prime_factors = factorint(675)\n\n    # Initialize B as 1 (multiplicative identity)\n    B = 1\n\n    # To make the product a perfect square, each prime factor's power needs to be even\n    for prime, power in prime_factors.items():\n        # If the power is odd, multiply B by the prime to make it even\n        if power % 2 != 0:\n            B *= prime\n\n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount = 1/3\n    original_price = sale_price / (1 - discount)\n    \n    return original_price\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    # Let x be the number of scarfs produced per day originally.\n    # Let total be the total number of scarfs she needs to produce.\n    from sympy import symbols, Eq, solve\n    \n    x, total = symbols('x total')\n    \n    # The original schedule: she finishes in 6 days.\n    original_schedule = Eq(x * 6, total)\n    \n    # The new schedule: she produces 24 more scarfs per day and finishes in 4 days.\n    new_schedule = Eq((x + 24) * 4, total)\n    \n    # Solve the system of equations for x and total.\n    solutions = solve((original_schedule, new_schedule), (x, total))\n    \n    # We need to find the total number of scarfs.\n    return solutions[total]\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    josh_age_5_years_ago = (3/5) * (shelby_current_age - 5)\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price_pence = 695\n    single_can_price_pence = 65\n    cost_of_12_individual_cans_pence = 12 * single_can_price_pence\n    savings_pence = cost_of_12_individual_cans_pence - multipack_price_pence\n    \n    return savings_pence\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total_count = 0\n    \n    # Count all 4 digit numbers\n    for thousands in range(1, 6): # 1 to 5, since the number must start with one of these to be within the given range\n        for hundreds in range(1, 7):\n            for tens in range(1, 7):\n                for ones in range(1, 7):\n                    # Ensure all digits are unique\n                    if len({thousands, hundreds, tens, ones}) == 4:\n                        number = thousands*1000 + hundreds*100 + tens*10 + ones\n                        # Check if the number is in the given range\n                        if 3267 <= number <= 5120:\n                            total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Adam + Ben = 102\n    # Ben + Carl = 97\n    # Adam + Carl = 93\n\n    # Summing all equations \n    # 2 * (Adam + Ben + Carl) = 102 + 97 + 93\n    total_sum = 102 + 97 + 93\n\n    # Divide by 2 to find the total weight of Adam, Ben, and Carl\n    total_weight = total_sum / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations according to the problem statement\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Return the cost of one banana\n    return solutions[banana]\n\n# Call the function and store the result in 'ans'\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Let A be the time it takes for Alan to paint the room on his own\n    # Alan's work rate is 1/A\n    # Bob's work rate is 1/6\n    # Combined work rate is 1/4\n\n    # Since they can finish together in 4 hours, we have:\n    # 1/A + 1/6 = 1/4\n\n    # Clearing the fraction by finding a common denominator:\n    # 6 + A = 3/2 * A\n    # A = 12\n\n    # Alan would take 12 hours to paint the room on his own\n    A = 12\n    return A\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    percentage = 55\n    number = 80\n\n    ans = (percentage / 100) * number\n\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n\n    amount = principal * (1 + rate) ** time\n\n    return amount\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n    \n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    num1 = 10000 + 24\n    num2 = 3000 + 968\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food_kg = 15\n    num_weeks = 26\n    total_food_kg = weekly_food_kg * num_weeks\n    return total_food_kg\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    original_score = solve(equation, score)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n\n    remaining_votes = total_votes - (mark_votes + nicole_votes + peter_votes)\n    votes_needed = (total_votes // 2) + 1\n\n    peter_additional_votes = votes_needed - peter_votes\n    \n    # Peter needs at least half the total votes plus one to win without fail\n    # So if he already has more than that, he does not need any additional votes\n    if peter_additional_votes < 0:\n        return 0\n    else:\n        return peter_additional_votes\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, nicholas = symbols('alex nicholas')\n\n    # Alex spent $58 on a toy\n    equation1 = Eq(alex - 58, nicholas - (6 * (alex - 58)))\n\n    # Alex and Nicholas have the same amount of money at first\n    equation2 = Eq(alex, nicholas)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (alex, nicholas))\n\n    # The total amount they had at first\n    total = solutions[alex] + solutions[nicholas]\n\n    return total\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - 6*6 - 8*6\n    return ans\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n    used_flour = total_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    return 9 ** (3/2)\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    # The value of the digit 6 in 54.016 is in the thousandths place value\n    # This means that the value of the 6 is 6 * 1/1000\n    value_of_6 = 6 * (1/1000)\n    \n    # Return the value\n    return value_of_6\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    # Knowing today is Monday (0 = Sunday, 1 = Monday, etc.)\n    today_index = 1\n    \n    # 28 days later will have a remainder of 0 when divided by 7 (since there are 7 days in a week)\n    days_later = 28 % 7\n    \n    # The index of the day 28 days later will be the same since 28 is a multiple of 7\n    future_day_index = (today_index + days_later) % 7\n    \n    # According to the format given in the question\n    # and knowing that today is Monday and 28 days later would be Monday as well\n    # Here's the mapping: Sunday -> 0004, Monday -> 0001, etc.\n    day_mapping = {\n        0: \"0004\",\n        1: \"0001\",\n        2: \"0002\",\n        3: \"0003\",\n        4: \"0005\",\n        5: \"0006\",\n        6: \"0007\"\n    }\n    \n    # Get the corresponding code for the day 28 days later\n    return day_mapping[future_day_index]\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_items = 52\n    difference = 10\n\n    # Let the number of rulers be x\n    # Then the number of pencils would be x + difference\n    # x + (x + difference) = total_items\n    # 2x + difference = total_items\n    x = (total_items - difference) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean_value = 11\n    total_numbers = len(numbers) + 1  # including x\n    total_sum = mean_value * total_numbers\n    x = total_sum - sum(numbers)\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    first_seven_value = 7 * 10**3  # The value of the first '7' in the ten thousands place\n    second_seven_value = 7 * 10  # The value of the second '7' in the tens place\n    ans = first_seven_value - second_seven_value\n    return ans\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return float(solutions[blue])\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # To ensure we have 4 marbles of the same color,\n    # we have to consider the worst case scenario where\n    # we keep picking marbles of different colors.\n    \n    # Maximum marbles we can have without having 4 of the same color:\n    # 3 marbles of each color.\n    \n    # So, if we pick 3 marbles of each color, we still don't have 4 of the same color.\n    # Red: 3, Yellow: 3, Blue: 3, Total: 9\n    \n    # To ensure the 10th marble will give us 4 of a kind,\n    # we have to pick one more (because in the worst case\n    # we will pick a marble of a color that we already have 3 of).\n    \n    # Hence, we need to pick 1 marble more after picking 9 (3 of each color).\n    worst_case_picking = (3 * 3) + 1\n    \n    return worst_case_picking\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    total_ratio = boys_ratio + girls_ratio\n    boys_count = 200\n\n    girls_count = (girls_ratio * boys_count) / boys_ratio\n\n    return int(girls_count)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # The decimal expansion of 1/3 is 0.333...\n    # Since each digit is 3, the sum of the first 1000 digits is simply 1000 times 3.\n    sum_digits = 1000 * 3\n    return sum_digits\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15 / 100\n    amount = 29\n    result = percentage * amount\n    return result\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    max_number = 100\n    start_number = 2\n    multiple = 2\n    ans = max_number // multiple - start_number // multiple + 1\n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    # Linear equation: 4 * x - 13 = 55\n    # Add 13 to both sides: 4 * x = 68\n    # Divide both sides by 4: x = 17\n    x = (55 + 13) // 4\n    return x\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n    \n    return ans\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    # Let x be the concentration (in percent) of the solution added to container A.\n    # The amount of the substance in the solution added to A is 0.1 * x grams.\n    # After adding to A and then moving to B, container A has 40 grams in total,\n    # so the concentration in A becomes (0.1 * x) / 40.\n    # When moving 10 grams from A to B, B receives (10 * (0.1 * x) / 40) grams\n    # of the substance, which is (0.1 * x) / 4 grams of the substance.\n    # Then, container B has a total mass of 50 grams, so the concentration \n    # becomes ((0.1 * x) / 4) / 50 = (0.1 * x) / 200.\n    # Moving 10 grams from B to C adds (10 * (0.1 * x) / 200) grams of the \n    # substance to C, which is (0.1 * x) / 20 grams of the substance.\n    # Container C then has a total of 60 grams, and we know that the final \n    # concentration of C is 0.5%. Therefore:\n    # ((0.1 * x) / 20) / 60 = 0.005\n    # Solving for x gives us the original concentration of the solution added to A.\n\n    # Now we can solve for x.\n    x = (0.005 * 20 * 60) / 0.1\n    return x\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "from math import factorial\n\ndef solution():\n    # Consider the two people who want to stand next to each other as a single entity.\n    # So, we have 4 entities to arrange: (person1_person2), person3, person4, person5.\n    # We can arrange these 4 entities in 4! ways.\n    entities_arrangement = factorial(4)\n\n    # Now we have to consider the 2 people who can switch places within their entity.\n    # They can be arranged in 2! ways.\n    people_arrangement = factorial(2)\n\n    # The total number of ways is the product of the two possibilities.\n    total_ways = entities_arrangement * people_arrangement\n\n    return total_ways\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240 - 12  # No poles at either end, so we subtract one interval\n    interval_length = 12\n\n    num_poles = road_length // interval_length  # Number of whole intervals in the remaining road length\n\n    return num_poles\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    # The total number of boxes sold in the first three days is given as 33\n    total_first_three_days = 33\n\n    # The average number of boxes sold per day in the last four days is given as 18\n    average_last_four_days = 18\n\n    # To find the total boxes sold in the last four days, we multiply the average by the number of days\n    total_last_four_days = average_last_four_days * 4\n\n    # Total boxes sold for the entire week is the sum of the first three days and the last four days\n    total_week = total_first_three_days + total_last_four_days\n\n    # There are 7 days in a week, so we calculate the average per day by dividing the total by 7\n    average_per_day = total_week / 7\n\n    return average_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12  # mg\n    nickel_percent1 = 40  # %\n\n    weight_metal2 = 13  # mg\n    nickel_percent2 = 60  # %\n\n    nickel_metal1 = (nickel_percent1 / 100) * weight_metal1\n    nickel_metal2 = (nickel_percent2 / 100) * weight_metal2\n\n    total_nickel = nickel_metal1 + nickel_metal2\n    total_weight = weight_metal1 + weight_metal2\n\n    nickel_concentration = (total_nickel / total_weight) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    # Prime factorization of 2016\n    prime_factors_2016 = {2: 5, 3: 2, 7: 1}  # 2016 = 2^5 * 3^2 * 7\n    # Prime factorization of 1377\n    prime_factors_1377 = {3: 1, 229: 1}  # 1377 = 3 * 229\n\n    # Each cousin's age last year was a product of some of the prime factors of 1377.\n    # Since the ages are integers, and from this year to last year, each cousin aged by 1,\n    # we can deduce that one of the cousin's age last year was 3 (from the prime factor of 1377),\n    # and the other two cousins' age product must be 229.\n    # One cousin could be 229 years which is unreasonable for a human age.\n    # Therefore, the only possibility is that ages of other two cousins differ by one\n    # and their product is a prime number. Let's find two consecutive numbers whose\n    # product is 229\n\n    for age in range(1, 229):\n        if age * (age + 1) == 229:\n            age_1_cp = age\n            age_2_cp = age + 1\n\n    # Find the age of the third cousin which is 3 last year.\n    # To get the product of 2016 one of the ages must have been multiplied by an extra 2^4 (since 2016 has four more factors of 2 than 1377)\n    # The cousin whose age was a factor of 2 (i.e. even) last year must have been the one who aged by another factor of 2.\n    # So his/her age 2 years ago must have been age_1_cp / 2 (since it was doubled from 2 years ago to last year)\n\n    if age_1_cp % 2 == 0:\n        age_1_cp_twice = age_1_cp\n        age_2_cp_twice = age_2_cp\n    else:\n        age_1_cp_twice = age_2_cp\n        age_2_cp_twice = age_1_cp\n\n    # Now we find the ages two years ago\n    age_1_2yrs_ago = age_1_cp_twice // 2\n    age_2_2yrs_ago = age_2_cp_twice - 1\n    age_3_2yrs_ago = 3 - 1\n\n    # Their product two years ago\n    product_2yrs_ago = age_1_2yrs_ago * age_2_2yrs_ago * age_3_2yrs_ago\n\n    return product_2yrs_ago\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # Since there are 8 players and everyone scores a different number of wins,\n    # The possible number of wins are: 0, 1, 2, 3, 4, 5, 6, 7\n    # The champion must have the highest number of wins, which is 7\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    sum_to_n = lambda n: n * (n + 1) // 2\n    n = 1\n    \n    while True:\n        if sum_to_n(n) > 3405:\n            break\n        n += 1\n    \n    n -= 1\n    duplicate = 3405 - sum_to_n(n)\n    return duplicate\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    possibilities = set()\n    remainder = 3\n    for divisor in range(1, 40 - remainder):  # Divisor can be at most 36 (37+3=40)\n        for quotient in range(1, (40 - remainder) // divisor):  # Dividend = divisor * quotient + remainder\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possibilities.add(dividend / quotient)\n\n    ans = len(possibilities)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math = 146 + 94\n    ratio_math = 8\n    ratio_history = 7\n\n    total_history = (total_math * ratio_history) // ratio_math\n\n    return total_history\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Convert the numbers to the representation on planet Zog\n    # by reversing the order of the digits in the numbers\n    initial_num = int(str(729)[::-1])\n    subtracted_num = int(str(26)[::-1])\n    \n    # Perform the subtraction\n    result_zog = initial_num - subtracted_num\n    \n    # As we want to know what Pluto wrote down, we don't need to convert it back\n    # We present it as it is\n    return result_zog\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    lcm = 45 * 60 // gcd(45, 60)\n    return gcd(45, 60)\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    difference = ashley_age - 3 - 2\n    brother_age = ashley_age - difference\n\n    return brother_age\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # S_n = n/2 * (2a + (n - 1)d)\n    # S_6 = 64 => 6/2 * (2a + (6 - 1)d) = 64\n    # S_12 = 156 => 12/2 * (2a + (12 - 1)d) = 156\n    \n    # Let's solve for a (first term) and d (common difference)\n    # from the equations representing S_6 and S_12:\n\n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')\n    equation1 = Eq(6/2 * (2*a + (6 - 1)*d), 64)\n    equation2 = Eq(12/2 * (2*a + (12 - 1)*d), 156)\n\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Now find the sum of the first 18 terms using the derived a and d\n    a_value = solutions[a]\n    d_value = solutions[d]\n    S_18 = 18/2 * (2*a_value + (18 - 1)*d_value)\n\n    return S_18\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of chickens per pen before adding new pens.\n    # Let y be the total number of chickens.\n    x, y = symbols('x y')\n\n    # Initial number of pens\n    initial_pens = 24\n\n    # New number of pens\n    new_pens = initial_pens + 6\n\n    # There are six fewer chickens in each pen after building new pens.\n    fewer_chickens = 6\n    \n    # The total number of chickens doesn't change, only the distribution changes.\n    # Initial situation: initial_pens * x = total number of chickens (y)\n    # New situation: new_pens * (x - fewer_chickens) = total number of chickens (y)\n    equation1 = Eq(initial_pens * x, y)\n    equation2 = Eq(new_pens * (x - fewer_chickens), y)\n    \n    # We can solve the two equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    time = 30\n    speed = 20\n\n    # The distance covered by the train in 30 seconds is the length of the train plus the length of the bridge\n    distance_covered = speed * time\n\n    # Deduct the length of the train to get the length of the bridge\n    bridge_length = distance_covered - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n\n    return difference\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Star's jogging time from 6:30 a.m. to 7:00 a.m. is 0.5 hours (30 minutes)\n    jogging_time = 0.5\n    \n    # Star's walking time from 7:00 a.m. to 8:00 a.m. is 1 hour\n    walking_time = 1.0\n    \n    # Star's jogging speed is 9 km/h\n    jogging_speed = 9\n    \n    # Star's walking speed is 7.5 km/h\n    walking_speed = 7.5\n    \n    # Distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Distance covered while walking\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    return 0.23 + 1.9 + 0.083\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the first digit (3 or 4, cannot be 0)\n    first_digit_choices = 2\n    # There are 3 choices for the second digit (0, 3, or 4)\n    second_digit_choices = 3\n    # There are 3 choices for the third digit (0, 3, or 4)\n    third_digit_choices = 3\n    \n    # Total number of different three-digit numbers\n    total_numbers = first_digit_choices * second_digit_choices * third_digit_choices\n    \n    return total_numbers\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n\n    equation1 = Eq(wins, 2 * losses)\n    equation2 = Eq(wins + losses, 63)\n\n    solutions = solve((equation1, equation2), (wins, losses))\n\n    return solutions[losses]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    difference_in_multiplicands = 55 - 44\n    ans = common_factor * difference_in_multiplicands\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows and g be the initial number of goats.\n    c, g = symbols('c g')\n    \n    # 65% of the animals were cows, which means 35% were goats.\n    # Therefore, c + g = 100% of the animals.\n    equation1 = Eq(c, 0.65 * (c + g))\n    \n    # Adding 240 animals increases the percentage of cows to 85% of the total.\n    # The number of goats doubles.\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n    equation3 = Eq(2 * g, g + 240)\n\n    # Solve the systems of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n    return ans\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "def solution():\n    from math import factorial\n\n    # Calculate the ways to arrange 3 girls as a single unit, 3 boys and 3 teachers\n    grouped_girls = factorial(3)  # 3 girls can be arranged amongst themselves in 3! ways\n    arrangements_with_grouped_girls = factorial(7)  # The group of girls, 3 boys and 3 teachers can be arranged in 7! ways\n\n    # Calculate the ways to arrange 3 boys with spaces in between them\n    # 4 positions (_ B _ B _ B _), 4! arrangements for 3 teachers in those positions\n    teacher_arrangements = factorial(4)\n\n    # Multiply arrangements for grouped girls, arrangements with grouped girls and teacher arrangements\n    total_arrangements = grouped_girls * arrangements_with_grouped_girls * teacher_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # The area of an equilateral triangle is (sqrt(3)/4) * a^2,\n    # where a is the side length of the triangle.\n\n    # Import sqrt function from math module\n    from math import sqrt\n\n    # Calculate the area of Triangle X\n    area_x = (sqrt(3) / 4) * (3 ** 2)\n\n    # Calculate the area of Triangle Y\n    area_y = (sqrt(3) / 4) * (9 ** 2)\n\n    # Calculate how many times Triangle X fits into Triangle Y\n    num_times = area_y / area_x\n\n    return int(num_times)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_spent = Eq(5*x*12 + 3*x*5, 120)\n    \n    solution = solve(total_spent, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_choose = 2\n\n    return comb(total_students, students_to_choose)\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    product1 = 8 * 9 * 10\n    product2 = 1 * 2 * 3\n    difference = product1 - product2\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetizers = 2\n    main_courses = 3\n    soup_options = 2  # Considering soup is optional (0 or 1)\n    desserts_options = 3  # Considering dessert is optional (0 or 1)\n\n    ans = appetizers * main_courses * soup_options * desserts_options\n    return ans\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Create congruences based on the problem statement:\n    # x ≡ 3 (mod 8) and x ≡ 1 (mod 9)\n    congruences = [(3, 8), (1, 9)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    x, _ = solve_congruence(*congruences)\n\n    # Find the solution in the range 100 to 200\n    while x < 100:\n        x += 8 * 9  # Increase by the least common multiple of 8 and 9\n\n    ans = x\n    return ans\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue_balls = symbols('blue_balls')\n    \n    # Number of possible ways to choose 2 balls out of 4 red balls\n    red_combinations = 4 * 3 / 2\n    \n    # Number of possible ways to choose 2 balls out of all balls in the bag\n    total_combinations = (4 + blue_balls) * (3 + blue_balls - 1) / 2\n    \n    # Equation for the probability\n    probability = Eq(red_combinations / total_combinations, 2/7)\n    \n    # Solve for the number of blue balls\n    solutions = solve(probability, blue_balls)\n    \n    # Filter out the negative solution as the number of balls cannot be negative\n    num_blue_balls = [sol for sol in solutions if sol.is_real and sol > 0]\n    \n    return num_blue_balls[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # This is an arithmetic sequence where a1 = 6 (first term), d = 5 (common difference)    \n    a1 = 6\n    d = 5\n    # to find out the number of terms, one can check the last term \n    # which is 41 and is also equal to a1 + (n - 1) * d where n is the number of terms\n    an = 41\n    n = ((an - a1) / d) + 1\n    \n    # The sum of an arithmetic sequence is given by (n / 2) * (a1 + an)\n    sum_seq = (n / 2) * (a1 + an)\n    \n    return int(sum_seq)\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let x be the total number of slices initially.\n    # According to the problem, 3/5 of the x slices were eaten, 2 were given away,\n    # and 4 were left. Therefore:\n    # (3/5) * x + 2 + 4 = x\n    # We can now solve for x.\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3/5) * x + 2 + 4, x)\n    initial_slices = solve(equation, x)\n    \n    return initial_slices[0]\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    sequence = [51, 50, -45, 40, -35, 30, -25, 20, -15]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    thousands_3 = 3 * 10**3  # the 3 in the thousands place\n    millions_3 = 3 * 10**6  # the 3 in the millions place\n    difference = millions_3 - thousands_3\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n    min_pencils = (total_pencils + pencil_cases - 1) // pencil_cases\n    return min_pencils\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_oplus(a, b):\n        return sum(a + i for i in range(b + 1))\n\n    for m in range(100):  # Arbitrary range limit, assuming m is a reasonable integer\n        if custom_oplus(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    spacing = 3\n\n    # Calculate the number of chess pieces per side.\n    # Subtracting 1 because the corner will be counted twice if we don't.\n    chess_per_side = (side_length // spacing) - 1\n\n    # Four sides of the square board\n    # Multiplying by 4 and adding 4 because we subtracted the corners initially,\n    # so we need to add them back.\n    total_chess = (chess_per_side * 4) + 4\n    \n    return total_chess\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from math import factorial\n\ndef solution():\n    # Since the product of the 10 digits is 2^27, we can only have the digits 2, 4, and 8 since they are powers of 2.\n    # 2 = 2^1, 4 = 2^2, and 8 = 2^3.\n    #\n    # Let n2 be the number of 2s, n4 the number of 4s, and n8 the number of 8s in the number.\n    # Hence, n2 + n4 + n8 = 10 and 1*n2 + 2*n4 + 3*n8 = 27.\n    #\n    # We need to find all such non-negative integral solutions for n2, n4, n8.\n    # For each solution of n2, n4, n8, we can permute these in 10!/(n2! * n4! * n8!) ways.\n    \n    count = 0\n    \n    # Generate all possible combinations of n2, n4, and n8.\n    for n8 in range(0, 10):\n        for n4 in range(0, 10 - n8):\n            n2 = 10 - n4 - n8\n            if (n2 + 2 * n4 + 3 * n8 == 27):\n                count += factorial(10) // (factorial(n2) * factorial(n4) * factorial(n8))\n\n    return count\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # Since each digit can appear at most 4 times to avoid painting red,\n    # we have 10 digits, therefore 10 * 4 = 40 squares can avoid being painted red.\n    # The smallest number of red squares would then be the total squares minus\n    # the maximum number that can avoid being painted.\n    total_squares = 100\n    max_non_red_squares = 10 * 4  # Each digit can appear 4 times without painting red\n    min_red_squares = total_squares - max_non_red_squares\n    return min_red_squares\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the time that Danny takes to finish the work by himself\n    d = symbols('d')\n\n    # The work done is equivalent, so we set up the equation considering their rates\n    # Mike's rate + Danny's rate = 1 job/10 hours\n    # Mike's rate * 8 + Danny's rate * 13 = 1 complete job\n    equation1 = Eq(1/10 + 1/d, 1/10)\n    equation2 = Eq(8/10 + 13/d, 1)\n\n    # Solve the system of equations for d\n    solutions = solve((equation1, equation2), d)\n\n    # Since there might be multiple solutions, filter out the positive one, which is the time Danny needs\n    danny_time = [sol for sol in solutions if sol > 0]\n    return danny_time[0]\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # second term minus first term\n    term = first_term\n    count = 0\n    \n    while term > 0:\n        term += common_difference\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent_on_folder = 2.89\n    received_from_father = 4/5\n\n    remaining_money = initial_money - spent_on_folder + received_from_father\n\n    return remaining_money\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    # Start with the smallest 2-digit number where first two digits are equal\n    start = 11\n    # End at the largest 2-digit number where first two digits are equal\n    end = 99\n    # Iterate over the range\n    for i in range(start, end + 1):\n        # Check if the number where last two digits are equal to the first two is a perfect square\n        number = int(str(i) + str(i))\n        if (int(number**0.5))**2 == number:\n            return number\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    # Initialize the count of 2s and 5s as they will combine to form zeros\n    count_2 = 0\n    count_5 = 0\n\n    # Loop will go up to a large number, ensuring we pass the point of 28 zeros\n    for i in range(1, 1000):\n        # we check each number i for prime factors of 2 and 5\n        tmp = i\n        while tmp % 2 == 0:\n            count_2 += 1\n            tmp /= 2\n        while tmp % 5 == 0:\n            count_5 += 1\n            tmp /= 5\n\n        # Consecutive trailing zeros are determined by pairs of 2s and 5s factors\n        # As there are always more 2s than 5s, the count of 5s determines the number of zeros\n        if min(count_2, count_5) >= 28:\n            return i  # This value of i will have 28 pairs of 2s and 5s\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = 3 * m - 1 + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    reduced_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n    combined_speed = tim_speed + bob_speed\n    \n    distance_covered = initial_distance - reduced_distance\n    time = distance_covered / combined_speed\n    \n    return time\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    day_progress = day_climb - night_slide\n    day_count = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n\n    return day_count\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    numbers = [3, 4, 6, 10]\n    mean_value = 5\n    total_numbers = 5\n    total_sum = mean_value * total_numbers\n    fifth_number = total_sum - sum(numbers)\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    akon = 4\n    ben = 7\n    cris = 8\n    \n    ans = lcm(akon, ben, cris)\n    \n    return ans\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = [int(d) for d in str(year)]\n        if len(set(digits)) == 4:\n            if max(digits) - min(digits) == 3:\n                if len(set(permutations(digits))) == 24:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_sequence = '8354'\n    sum_of_digits = 0\n    sequence_length = len(recurring_sequence)\n\n    for i in range(84):\n        sum_of_digits += int(recurring_sequence[i % sequence_length])\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    ans = 56 * 23\n    return ans\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Let x be the time between strikes\n    # The total time for 6 strikes is the sum of the gaps between strikes plus the duration of each strike\n    # There are 5 gaps between 6 strikes, so the equation is: 5 * x + 6 * 3 = 43\n    \n    # Solve for x\n    x = (43 - 6 * 3) / 5\n    \n    # Now calculate the total time for 12 strikes\n    # There are 11 gaps between 12 strikes\n    total_time = 11 * x + 12 * 3\n    \n    return total_time\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import comb\n\ndef solution():\n    # Each kid must get at least one pen, so we give one pen to each kid first, leaving us with 20-6=14 pens\n    # Now, we need to distribute the remaining 14 pens to the 6 kids\n    # This is a problem of distributing n identical items into r distinct groups\n    # which can be calculated using combinations with repetition: comb(n+r-1, r-1) or comb(n+r-1, n)\n    # Here we consider the 14 pens (n) and the 6-1 separators (r-1), as we need one less separator than the number of kids\n    # The separators represent the divisions between how many pens each child receives\n    remaining_pens = 14\n    kids = 6\n    separators = kids-1  # We need 5 separators to divide 14 pens among 6 kids\n\n    ways = comb(remaining_pens + separators, separators)\n\n    return ways\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz_minutes = 30\n    total_quizzes = 4\n    minutes_per_hour = 60\n\n    total_time_minutes = time_per_quiz_minutes * total_quizzes\n    total_time_hours = total_time_minutes / minutes_per_hour\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Numbers from 100 to 999\n    non_zero_three_digit_numbers = 9 * 9 * 9  # Numbers without zero\n    numbers_with_at_least_one_zero = total_three_digit_numbers - non_zero_three_digit_numbers\n    return numbers_with_at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    speed = 30   # in meters per second\n    kinetic_energy = 0.5 * mass * speed**2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 201):\n        if all(num % div == rem for div, rem in [(3, 1), (4, 1), (5, 1), (7, 2)]):\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7  # We want to find the 7th term\n\n    # The formula for the nth term of an arithmetic sequence is:\n    # a_n = a_1 + (n - 1) * d, where a_n is the nth term, a_1 is the first term, and d is the common difference \n    \n    seventh_term = first_term + (n - 1) * common_difference\n    \n    return seventh_term\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    import math\n\n    # Let m^2 be the largest possible square with students\n    # Let n^2 be the next square when 18 students join\n    # Hence, n^2 = m^2 + 5 + 18\n    # Our goal is to find the value of m^2 + 5, which is the original number of students\n    \n    # Start with an assumption, and iterate until we find the correct values\n    m = 0\n    while True:\n        # calculate the current m^2\n        current_square = m**2\n        # calculate the next square number after adding 5 and 18 students\n        next_square = current_square + 5 + 18\n        \n        # Check if next_square is a perfect square\n        if math.isqrt(next_square)**2 == next_square:\n            # If so, we have found our n and m\n            # The original number of students is m^2 + 5\n            return current_square + 5\n        \n        # If not, increment m to check the next possible square\n        m += 1\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(100, 300):\n        if all(num % m == 2 for m in [5, 6, 7]):\n            return num\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Initialize the greatest odd number for the ones place\n    ones_place = 9\n\n    # Loop through possible values for hundreds and tens place\n    for hundreds_place in range(1, 10):\n        for tens_place in range(10):\n            # The digits in the hundreds place and the tens place add up to 13\n            if (hundreds_place + tens_place == 13):\n                # All the digits are different and ones_place is already 9\n                if (hundreds_place != ones_place and tens_place != ones_place and hundreds_place != tens_place):\n                    # Since we need the smallest 4-digit number, the thousands place should be the smallest\n                    # possible which is not equal to other digits. We loop from 1 to 9 to find the smallest\n                    # possible thousands place digit.\n                    for thousands_place in range(1, 10):\n                        if (thousands_place != hundreds_place \n                            and thousands_place != tens_place \n                            and thousands_place != ones_place):\n                            # Concatenate and return the smallest 4-digit number\n                            return int(f\"{thousands_place}{hundreds_place}{tens_place}{ones_place}\")\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let's denote Jerry's speed as J and Kevin's speed as 1.5J.\n    # They are driving towards each other, so their relative speed is J + 1.5J = 2.5J.\n    # Since they start 225 miles apart, they will meet after covering this distance at their relative speed.\n    # The time it takes for them to meet is the same for both drivers.\n    # Thus, Jerry's distance will be the fraction of the total speed that Jerry is responsible for.\n    # Jerry's fraction of the speed is J / (J + 1.5J) = J / 2.5J = 1 / 2.5 = 2 / 5.\n    # Jerry's distance when they meet is 2/5 of the total distance.\n    total_distance = 225\n    jerry_fraction = 2 / 5\n    jerry_distance = total_distance * jerry_fraction\n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    number_of_pieces = 8 + 1  # After 8 cuts, there will be 8 + 1 pieces\n\n    length_per_piece = total_length / number_of_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    wall_width = 4800 # mm\n    picture_width = 210 # mm\n    total_pictures = 10\n    \n    # Width of the wall excluding the pictures on the extreme ends\n    spacing_width = wall_width - 2 * picture_width\n    \n    # There will be 9 spaces between the remaining 8 pictures\n    spaces = total_pictures - 1 \n    \n    # Width of each space\n    space_width = spacing_width / spaces\n    \n    # Central line\n    center_line = wall_width / 2\n    \n    # Centre of the third picture will include one picture width and one and a half space widths from the left\n    center_of_third_picture = picture_width + (1.5 * space_width)\n    \n    # Distance from the center line\n    distance_from_center_line = abs(center_line - center_of_third_picture)\n    \n    return distance_from_center_line\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    initial_height = 100  # Assume original height is 100 for simplicity\n    percentage_bounce = 75\n    target_height = 25\n    bounce_count = 0\n    current_height = initial_height\n\n    while current_height >= target_height:\n        current_height *= (percentage_bounce / 100)\n        bounce_count += 1\n\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Doris's age (d) and her uncle's current age (u)\n    d, u = symbols('d u')\n\n    # Equation based on the uncle's statement\n    # When Doris reaches her uncle's current age (u), let's assume it will take x years\n    # After x years her uncle's age will be u + x\n    # According to the uncle, he will be 40 years old when Doris is his current age\n    equation1 = Eq(u + d - 10, 40)\n\n    # Now we solve the equation to find u (uncle's current age)\n    solution = solve(equation1, u)\n\n    return solution[0]\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    interest_rate = 2.25 / 100\n\n    principal = interest / interest_rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers for each person\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    for i in range(10):\n        if 8 + i == 15:\n            return i\n    return None\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    return 1348 - 234 - 76 + 2234 - 48 - 24\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n\n    equation = Eq(original_amount - 200 - (2/7) * (original_amount - 200), (1/3) * original_amount)\n\n    solution = solve(equation, original_amount)\n\n    return solution[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Consider Tom and Harry as a single entity because they must stand together\n    # Ronda will take one specific position on the furthest right\n    # We now have 5 entities to arrange: TomHarry, Student3, Student4, Student5, Student6\n    arrangements_entities = factorial(5)\n    \n    # Tom and Harry can switch places within their own entity\n    switch_places_within_TomHarry = factorial(2)\n    \n    # Total arrangements\n    total_arrangements = arrangements_entities * switch_places_within_TomHarry\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_period = 0.05  # 5%\n    interest_second_period = 0.08 # 8%\n    first_period_years = 3\n    second_period_years = 2\n\n    # Compound interest for the first three years\n    amount_after_first_period = initial_investment * (1 + interest_first_period) ** first_period_years\n\n    # Compound interest for the last two years\n    final_amount = amount_after_first_period * (1 + interest_second_period) ** second_period_years\n    \n    # Round the result to the nearest tenth\n    ans = round(final_amount, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    # The price of the car is $125000 when rounded off to the nearest $100\n    # To round to the nearest $100, a number has to be within the range of x50 below or above the rounding target\n\n    # Ryna thinks that the lowest possible price is $125001\n\n    # We calculate the lowest price that would round to $125000 to the nearest $100\n    rounding_point = 125000\n    rounding_margin = 50\n\n    lowest_possible_price = rounding_point - rounding_margin + 1  # Add 1 because we want the price to the nearest dollar\n\n    # Check if Ryna is correct\n    is_ryna_correct = lowest_possible_price == 125001\n\n    return (is_ryna_correct, lowest_possible_price)\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    original_hours = 15\n    target_hours = 2\n    people_needed = (6 * original_hours) / target_hours\n    return people_needed\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_total = 4 * 89  # total marks Paul has right now\n    target_average = 95\n\n    additional_tests = 0  # counter for additional tests needed\n    while True:\n        new_total_tests = 4 + additional_tests\n        new_total_score = current_total + 100 * additional_tests\n        new_average = new_total_score / new_total_tests\n        if new_average >= target_average:\n            break\n        additional_tests += 1\n\n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # First segment distance and speed\n    distance1 = 540\n    speed1 = 9\n    \n    # Second segment distance and speed\n    distance2 = 300\n    speed2 = 6\n    \n    # Third segment distance, total distance minus distance of the first two segments\n    total_distance = 1000\n    distance3 = total_distance - (distance1 + distance2)\n    \n    # Speed for third segment\n    speed3 = 10\n    \n    # Time for each segment = distance / speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    # Total time\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    doris_future_age = 40\n\n    # When Doris reaches her uncle's current age, she will be 40 years old.\n    # This means the uncle's current age is Doris' future age minus Doris' current age.\n    uncle_age = doris_future_age + (doris_future_age - doris_age)\n    \n    return uncle_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # in meters per second\n\n    total_distance = train_length + bridge_length\n    time_taken = total_distance / speed  # time = distance/speed\n\n    return time_taken\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of sheep and cows\n    sheep, cows = symbols('sheep cows')\n\n    # Initial condition: sheep = (5/7) * cows\n    initial_condition = Eq(sheep, (5 / 7) * cows)\n\n    # After adding/removing animals: cows - 7 = (3/4) * (sheep + 21)\n    final_condition = Eq(cows - 7, (3 / 4) * (sheep + 21))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the usual speed be s (km/h) and the usual time be t (hours).\n    s, t = symbols('s t')\n\n    # Distance = Speed * Time\n    # Distance is the same in both cases.\n\n    # First case: If the speed increases by 20%, the time decreases by 1 hour.\n    # New speed = s + 0.2s = 1.2s\n    # Distance = 1.2s * (t - 1)\n    \n    # Second case: The car travels the first 200 km at usual speed  s,\n    # then increases speed by 25% for the remaining distance.\n    # New speed = s + 0.25s = 1.25s\n    # Remaining time after 200 km = t - (200/s)\n    # Remaining time at increased speed = remaining time - 12/60 hour\n    # Remaining distance at increased speed = 1.25s * (t - 200/s - 12/60)\n\n    # We set up two equations based on the two scenarios above:\n    # Eq1: s * t = 1.2s * (t - 1)\n    # Eq2: s * t = 200 + 1.25s * (t - 200/s - 12/60)\n\n    eq1 = Eq(s * t, 1.2 * s * (t - 1))\n    eq2 = Eq(s * t, 200 + 1.25 * s * (t - 200/s - 12/60))\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (s, t))\n\n    # Since distance = speed * time, distance = s * t\n    # We can choose the positive real solutions as speed and time can't be negative.\n    distance = [s * t for s, t in solutions if s > 0 and t > 0][0]\n\n    return distance.evalf()\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for price of one book and one pencil box\n    book_price, pencil_box_price = symbols('book_price pencil_box_price')\n\n    # two similar books and three identical pencil boxes cost $42\n    equation1 = Eq(2 * book_price + 3 * pencil_box_price, 42)\n    \n     # two similar books and six identical pencil boxes cost $60\n    equation2 = Eq(2 * book_price + 6 * pencil_box_price, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book_price, pencil_box_price))\n\n    return solutions[pencil_box_price]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    time1 = (8 * 60) + 30  # 08:30 in minutes\n    time2 = (9 * 60) + 25  # 09:25 in minutes\n\n    n = time2 - time1\n\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    a_efficiency = 1 / 6\n    b_efficiency = a_efficiency / 2\n    together_efficiency = a_efficiency + b_efficiency\n    days_to_complete = 1 / together_efficiency\n    return days_to_complete\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let's denote Geoff's current age as 'g' and his sister's age as 's'.\n    # According to the problem, g + s = 22 (equation 1).\n    \n    # We need to find out after how many years the sum of their ages will be 30.\n    # Let's say after 'x' years, the sum of their ages will be 30.\n    # So, (g + x) + (s + x) = 30 (equation 2).\n    \n    # Substituting g + s from equation 1 into equation 2 we get:\n    # (22 + x) + x = 30 -> 22 + 2x = 30 -> 2x = 30 - 22 -> 2x = 8.\n    # Solving for 'x', the number of years from now, we get x = 8 / 2 -> x = 4.\n    \n    # So after 4 years, the sum of their ages will be 30.\n    return 4\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_to_work = debt / monthly_salary\n\n    return months_to_work\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 0.50\n    mamee_cost = haribo_cost - 0.30\n    big_jelly_cost = 6 * mamee_cost\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    return float(solutions[banana] + solutions[apple])\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n\n    anna = 3/8 * total_candies\n    belle = 1/4 * total_candies\n    cathy_and_dawn = total_candies - (anna + belle)\n    equation = Eq(anna + belle, cathy_and_dawn + 90)\n\n    solutions = solve(equation, total_candies)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    return (18/36) * 32\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_after_joel = 4\n    before_joel = (remaining_after_joel + 2) * 2\n\n    remaining_after_valerie = before_joel\n    before_valerie = (remaining_after_valerie + 3) * 2\n\n    remaining_after_ethan = before_valerie\n    original_plants = (remaining_after_ethan + 1) * 2\n\n    return original_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of fish balls Mr Tan made at first.\n    x = symbols('x')\n    \n    # Equation representing the problem\n    # (1 - 3/4)x - (1/3)(1 - 3/4)x + 506 = 2x\n    # Simplifies to (1/4)x - (1/3)(1/4)x + 506 = 2x\n    equation = Eq((1/4)*x - (1/3)*(1/4)*x + 506, 2*x)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate / 6 + 2 * vanilla / 3 + 7 * blueberry / 9, 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes Sally sold\n    chocolate_cupcakes_sold = solutions[chocolate] / 6\n\n    return chocolate_cupcakes_sold\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    ans = 0.23 * 200\n    return ans\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    beck_gives = (beck_books - chris_books) // 2\n    return beck_gives\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    result = (5/8) * 92 + 7 * 0.625 + 62.5 * 0.01\n    return result\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys_to_girls = 2 / 7\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_price = 3\n    marble_price = strawberry_price + 2\n    cheese_price = marble_price * 3\n    price_for_2_cheese_cakes = 2 * cheese_price\n\n    return price_for_2_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6 * 6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for number in range(400, 501):\n        if number % 3 == 1 and number % 5 == 3 and number % 7 == 5:\n            return number\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    from math import sqrt\n\n    n = 36\n    ans = sum(2 for i in range(1, int(sqrt(n)) + 1) if n % i == 0)\n    return ans\n    \nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    # Number of pigs\n    pigs = 8\n    # One green apple per pig\n    green_apples = pigs\n    # One red apple shared by every two pigs\n    red_apples = pigs // 2\n\n    # Total apples is the sum of green and red apples\n    total_apples = green_apples + red_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    seeds_died = total_seeds / 4\n    seeds_grown = total_seeds - seeds_died\n\n    return int(seeds_grown)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are:\n    # x ≡ 3 (mod 5)\n    # x ≡ 4 (mod 7)\n    # x ≡ 5 (mod 9)\n    congruences = [(3, 5), (4, 7), (5, 9)]\n\n    # Using the Chinese Remainder Theorem to find the smallest x that satisfies \n    # all the congruences\n    x = solve_congruence(*congruences)\n\n    # x[0] contains the smallest possible value of the number\n    return x[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the price of a shirt (s) and the price of a pair of pants (p)\n    s, p = symbols('s p')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(3 * s + 2 * p, 81)\n    equation2 = Eq(5 * s + 4 * p, 147)\n\n    # Solve the system of equations for s and p\n    solutions = solve((equation1, equation2), (s, p))\n\n    # Compute the total price of 1 shirt and 1 pair of pants\n    total_price = solutions[s] + solutions[p]\n\n    return int(total_price)\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    deposit_days = (days + 1) // 2\n    spend_days = days // 2\n    total_deposits = deposit_days * 10\n    total_spends = spend_days * 8\n    ans = initial_amount + total_deposits - total_spends\n    return ans\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n\n    durians_left = total_durians - sold_durians\n    return int(durians_left)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((x * 2 + 178) / 4, 54)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the distance be 'd', and the original speed be 's'.\n    d, s = symbols('d s')\n\n    # Speed needed to arrive one hour earlier is 's + 5'.\n    # Original time to arrive: 8 hours\n    # Time to arrive at increased speed: 8 - 1 = 7 hours\n\n    # Original speed equation: d = s * 8\n    # Increased speed equation: d = (s + 5) * 7\n\n    equation1 = Eq(d, s * 8)\n    equation2 = Eq(d, (s + 5) * 7)\n\n    # Solving the system of equations to find the value of 'd'.\n    solution = solve((equation1, equation2), (d, s))\n    \n    # Getting the distance 'd'.\n    distance = solution[d]\n\n    return distance\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4 * 3 * 2 * 1  # All possible arrangements for 4 people\n    opposite_ways = 2 * 1 * 2 * 1  # Claire and Tony sitting opposite each other\n    result = total_ways - opposite_ways  # Subtracting the unwanted arrangements\n    return result\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]\n    \n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    import math\n\n    # We need to find the minimum number of test tubes required, which is equivalent to finding the smallest number\n    # of binary digits (bits) that can represent 1000 distinct items, as each test tube can represent a binary state (presence or absence of a reaction).\n\n    num_bottles = 1000\n    \n    # Calculate the minimum number of bits (test tubes) needed to represent all bottles,\n    # which is the smallest number k such that 2^k >= num_bottles\n    num_test_tubes = math.ceil(math.log(num_bottles, 2))\n\n    return num_test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs = 10\n    removed_chairs = 3\n    new_total_chairs = total_chairs - removed_chairs\n    total_distance = 36\n\n    # The distance covered by the chairs is divided into segments (number of chairs - 1)\n    segments_with_all_chairs = total_chairs - 1\n    segments_with_removed_chairs = new_total_chairs - 1\n\n    # The distance between each chair before removing\n    distance_between_chairs = total_distance / segments_with_all_chairs\n\n    # The new distance between chairs after removing 3 chairs\n    new_distance_between_chairs = distance_between_chairs * (segments_with_all_chairs / segments_with_removed_chairs)\n\n    return new_distance_between_chairs\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    # Let x be the initial number of stickers Charlotte has\n    # Let y be the initial number of stickers Alexis has\n    # According to the question, the ratio of Marry's and Alexis' stickers is 7:5, so Marry has (7/5)*y stickers\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    # Therefore, Charlotte receives 0.2 * ((7/5)*y) + 0.2 * y = 0.2 * ((7/5) + 1) * y stickers from both\n\n    # Charlotte's stickers increased by 80%, so the number of stickers she received is equal to 80% of her initial amount\n    # 0.8 * x = 0.2 * ((7/5) + 1) * y => x = 0.2 * ((7/5) + 1) * y / 0.8\n\n    # In the end, Marry had 20 stickers more than Charlotte, so\n    # ((7/5)*y - 0.2 * ((7/5)*y)) - (x + 0.2 * ((7/5) + 1) * y) = 20\n\n    # Substitute the value of x from the previous expression\n    # ((7/5)*y - 0.2 * ((7/5)*y)) - (0.2 * ((7/5) + 1) * y / 0.8 + 0.2 * ((7/5) + 1) * y) = 20\n    # Solve this equation for y (Alexis' initial number of stickers)\n\n    # Simplify and solve for y\n    y = (20 * 1.6) / (0.8 + 0.2 * (12/5) - 0.2 * (7/5) - (7/5) * 0.8)\n    return y\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Since each brother has at least 2 books, we start from 2 books for each.\n    for first_brother in range(2, 10 - 2*2 + 1):\n        for second_brother in range(2, 10 - first_brother - 2 + 1):\n            third_brother = 10 - first_brother - second_brother\n            if third_brother >= 2:\n                count += 1 \n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle4 = symbols('angle4')\n    angle3 = 5 * angle4  # One angle is five times larger than the fourth angle\n    right_angles_sum = 90 * 2  # Sum of two right angles in degrees\n\n    # The sum of angles in a quadrilateral is always 360 degrees\n    equation = Eq(right_angles_sum + angle3 + angle4, 360)\n\n    solutions = solve(equation, angle4)\n    \n    angle4_value = solutions[0]\n    angle3_value = 5 * angle4_value\n\n    return max(angle3_value, right_angles_sum)\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 / 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    # Initialize the minimum number of boxes to a large number\n    min_boxes = float('inf')\n\n    # Maximum number of each box type one might need\n    max_small_boxes = 54 // 5\n    max_medium_boxes = 54 // 7\n    max_large_boxes = 54 // 10\n\n    # Try all possible combinations of box numbers to see which one gives a sum of 54\n    for small_boxes in range(max_small_boxes + 1):\n        for medium_boxes in range(max_medium_boxes + 1):\n            for large_boxes in range(max_large_boxes + 1):\n                total_apples = small_boxes * 5 + medium_boxes * 7 + large_boxes * 10\n                if total_apples == 54:\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            factors.append(i)\n    for i in range(len(factors) // 2):\n        if factors[i] * factors[-(i+1)] == 7007:\n            return factors[i] + factors[-(i+1)]\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence += [i] * i\n\n    median_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        ans = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        ans = sequence[median_index]\n\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 6) / 3, 5)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6 / 7) * 42\n    return ans\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # Initialise array to store the number of ways to get to each step\n    # step[0] is the start point before the first step, so it's 1 way to stand there.\n    steps = [0] * 11\n    steps[0] = 1\n\n    # Calculate the number of ways to get to steps 1 through 4\n    for i in range(1, 5):\n        steps[i] = steps[i-1] + (steps[i-2] if i - 2 >= 0 else 0) + (steps[i-3] if i - 3 >= 0 else 0)\n    \n    # Calculate the number of ways to get to steps 6 to 10\n    # We start from step 6 because we have to skip step 5.\n    for i in range(6, 11):\n        # Since we can't step on 5, the number of ways to reach i is the same as the number\n        # of ways to reach i-1 (one step), i-2 (two steps), and i-3 (three steps) combined.\n        steps[i] = steps[i-1] + steps[i-2] + steps[i-3]\n    \n    return steps[10]  # The number of ways to reach the 10th step\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    total_time_single = 16\n\n    # Calculate the total number of visitors during 16 minutes\n    total_visitors = visitors_per_minute * total_time_single\n\n    # Since there are now 2 entrances, the combined check-in rate per minute is:\n    check_in_rate_two_entrances = 2 * check_in_per_entrance\n\n    # Calculate the time taken for two entrances to check in all visitors\n    time_two_entrances = total_visitors / check_in_rate_two_entrances\n\n    return time_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour_to_km_per_hour = 1.60934\n    speed_limit_mph = 65\n    time_hours = 15 / 60\n\n    distance_km = speed_limit_mph * miles_per_hour_to_km_per_hour * time_hours\n    return distance_km\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of frogs and dragonflies\n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n\n    # Formulate the system of equations based on the problem statement\n    equation1 = Eq(frogs_initial - dragonflies_initial, 9)        # initial count difference\n    equation2 = Eq(frogs_initial - (11 - 10), dragonflies_initial) # After turning one dragonfly into a frog\n    equation3 = Eq(11 + 10, frogs_initial + dragonflies_initial)  # total animals after the magic show\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (frogs_initial, dragonflies_initial))\n\n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    day_distance = 5\n    night_distance = -3\n    total_distance = 0\n    day = 0\n\n    while total_distance < 16:\n        day += 1\n        total_distance += day_distance\n        if total_distance >= 16:\n            break\n        total_distance += night_distance\n\n    return day\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n\n    cookies_left = total_cookies - cookies_given_away\n    num_bottles = cookies_left / cookies_per_bottle\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, muffins = symbols('cookies muffins')\n    \n    # cookies = muffins + 24\n    equation1 = Eq(cookies, muffins + 24)\n    # sold 3/4 of muffins, so 1/4 of muffins are left\n    # sold 5/8 of cookies, so 3/8 of cookies are left\n    # together they make 74\n    equation2 = Eq(1/4 * muffins + 3/8 * cookies, 74)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (cookies, muffins))\n    \n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    # Since we're looking for the greatest multiple of 25 with 3 digits,\n    # we start at the largest 3 digit number, which is 999.\n    # We then subtract the remainder of 999 when divided by 25 to find the\n    # largest multiple of 25 that is less than or equal to 999\n    return 999 - (999 % 25)\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Defines the costs in dollars\n    metro_ride_cost = 2  # Cost of the metro ride both ways for a person\n    coffee_cost = 3      # Cost of a cup of coffee per person\n    ticket_cost = 12     # Entry fee to the game per person\n\n    # Calculate the cost for Richard alone\n    richard_cost = metro_ride_cost + coffee_cost + ticket_cost\n\n    # Remaining money after deducting Richard's expenses\n    remaining_money = 40 - richard_cost\n\n    # Calculate the cost per friend\n    friend_cost = metro_ride_cost + coffee_cost + ticket_cost\n    \n    # Calculate the number of friends he can treat\n    number_of_friends = remaining_money // friend_cost\n\n    return number_of_friends\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Speed ratio of the driver to the cyclist\n    speed_ratio_driver_to_cyclist = 13 / 2\n\n    # Extra time taken by the cyclist in minutes\n    extra_time_cyclist = 143\n\n    # Let's denote the time taken by the driver to reach the destination as t (in minutes)\n    # Time taken by the cyclist will be t + extra_time_cyclist\n    # Since distance is the same, we can use the ratio of speeds to set up a proportion for time\n    # (Time taken by driver) / (Time taken by cyclist) = (Speed of cyclist) / (Speed of driver)\n\n    # Using the proportion, we can set up the equation:\n    # t / (t + extra_time_cyclist) = 1 / speed_ratio_driver_to_cyclist\n    # Solving for t:\n    t = (extra_time_cyclist / (speed_ratio_driver_to_cyclist - 1))\n\n    return t\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum([i**3 for i in range(2, n+1)])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = (4 * 24) + (5 * 81) + (7 * 20)\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # If statement 1 is correct, then all statements are correct, which contradicts the premise that only one statement is correct.\n    # If statement 2 is correct, then none of the statements are correct, which is a contradiction because it means that statement 2 itself is not correct.\n    # If statement 3 is correct, then one of the statements above it is correct which means either statement 1 or 2 is correct, leading to a contradiction.\n    # If statement 4 is correct, then all the above statements are correct, which contradicts the premise.\n    # If statement 5 is correct, that means none of the above statements (1-4) is correct, which satisfies the condition that only one statement is correct.\n    # Therefore, the correct statement is number 5.\n    return 5\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins\n    x = symbols('x')\n\n    # According to the problem, one quarter of the coins are heads initially\n    # After flipping two coins, one third of the coins are heads\n    equation = Eq(1/4 * x + 2, 1/3 * x)\n\n    # Solve the equation for x\n    total_coins = solve(equation, x)\n\n    return total_coins[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    # Total number of shows\n    total_shows = 5 + 3\n\n    # The number of ways to arrange 5 singing shows\n    singing_permutations = factorial(5)\n\n    # The number of slots between singing shows where comedy shows can be placed\n    # is 5 + 1 (before the 1st show, between each singing show, and after the last show)\n    comedy_slots = 5 + 1\n\n    # The number of ways to choose 3 slots out of 6 to place comedy shows\n    comedy_combinations = factorial(comedy_slots) // (factorial(3) * factorial(comedy_slots - 3))\n\n    # The number of ways to arrange the comedy shows once the slots are chosen\n    comedy_permutations = factorial(3)\n\n    # Total arrangements\n    total_arrangements = singing_permutations * comedy_permutations * comedy_combinations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    # Since the number is not divisible by 5 and it is even, A cannot be 5 or 0.\n    # We need to find A such that the sum of digits is divisible by 9.\n    # Sum of known digits: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n    sum_of_known_digits = 45\n    \n    # Loop through possible values of A from 1 to 9 (if it's even and not divisible by 5, A cannot be 0)\n    for A in range(1, 10):\n        if A % 2 == 0:  # The number is even, so A must be even.\n            if (sum_of_known_digits + 3 * A) % 9 == 0:\n                return A\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    ways_train = 4\n    ways_car = 3\n    ways_flight = 2\n    total_ways = ways_train + ways_car + ways_flight\n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_length = 500\n    total_days = 5\n    per_day_paving = total_length / total_days\n    return per_day_paving\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    recurring_sum = 2  # Because only the first digit in the sequence 2,3,4,5,6... will contribute to the first 2100 digits\n    digits = 2100\n    sequence_length = 1  # 0.2 is the first in the sequence with sequence_length of 1\n\n    # Starting with 3, as we've already counted the first term which is 2\n    for i in range(3, 10):  \n        num_repeats = (digits - sequence_length) // (sequence_length + 1)\n        remaining_digits = (digits - sequence_length) % (sequence_length + 1)\n\n        recurring_sum += (i * num_repeats)\n\n        if remaining_digits > 0:\n            recurring_sum += i\n            break\n\n        sequence_length += 1\n\n    return recurring_sum\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    numbers = [2/5, 1/4, 0.45, 0.35, 7/20]\n    numbers.sort()\n    middle_index = len(numbers) // 2\n    return numbers[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq((number / 2) - 9, 12)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    # There are 6 people and 8 chairs, we leave out 2 chairs to calculate the arrangements.\n    # Circular permutation for n distinct objects is (n-1)!\n    # Here the number of distinct objects (people) is 6.\n    num_ways = factorial(6 - 1)\n\n    return num_ways\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    min_even_num = float('inf')\n    \n    for perm in permutations(digits, 4):\n        if perm[-1] % 2 == 0:  # Check if number is even\n            num = int(''.join(map(str, perm)))\n            if num < min_even_num:\n                min_even_num = num\n    \n    return min_even_num\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    \n    return solve(equation, x)[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of steps the escalator has\n    x = symbols('x')\n    \n    # Speed of escalator in steps per second\n    escalator_speed = (x - 10) / 10\n    \n    # Equation when Peter walks at 2 steps per second\n    # Peter's speed relative to ground = Peter's speed relative to escalator + escalator's speed\n    # Time taken for Peter to reach at 2 steps per second = (number of steps of escalator) / Peter's speed relative to ground\n    equation = Eq(((x - 16) / 2), escalator_speed)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n\n    quarters = total_dollars * quarters_in_one_dollar\n\n    return int(quarters)\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    # Find the least common multiple of 3, 4, and 10\n    smallest_number = lcm(3, 4, 10)\n    return smallest_number\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_distance = 2000\n\n    ans = (percentage / 100) * total_distance\n\n    return ans\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "import math\n\ndef solution():\n    students = 17\n    capacity_per_kayak = 4\n    kayaks_needed = math.ceil(students / capacity_per_kayak)\n    return kayaks_needed\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_amount = 243\n    fraction_spent = 2 / 9\n    \n    # Calculate the money Mark spent\n    spent = total_amount * fraction_spent\n    \n    # Remaining money\n    remaining = total_amount - spent\n    \n    # Ratio of the cost of 3 slices of pizza to the cost of 2 cupcakes is 1:1\n    # Therefore, the cost for 1 cupcake is same as 1.5 slices of pizza\n    cost_per_cupcake = spent / (5 + (6 * (2/3)))\n    \n    # Calculate the number of cupcakes that Mark can buy with the remaining money\n    cupcakes_possible = remaining // cost_per_cupcake\n    \n    return int(cupcakes_possible)\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    a = 4 * (3**0.5)\n    x = (3 * a)**2 / 3\n    return x\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let the age of the youngest dwarf be x years.\n    # Then ages of the youngest three will be x, x+1, and x+2.\n    # Given that x + (x+1) + (x+2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13\n    youngest_age = 42 // 3\n    \n    # The oldest three will have ages x+4, x+5, and x+6.\n    # Now we will calculate their total age: (x+4) + (x+5) + (x+6)\n    oldest_three_sum = (youngest_age + 4) + (youngest_age + 5) + (youngest_age + 6)\n    \n    return oldest_three_sum\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):  # 199 inclusive\n        str_number = str(number)\n        if len(set(str_number)) == len(str_number):  # Check if all digits are distinct\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    common_difference = 24 - 15\n\n    # Using arithmetic progression formula to find the number of terms:\n    # last_term = first_term + (num_terms - 1) * common_difference\n    num_terms = ((last_term - first_term) / common_difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5]\n    all_combinations = list(permutations(digits, 3))  # Generate all 3-digit permutations\n\n    return len(all_combinations)\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from math import sqrt\n\n    count = 0\n    for i in range(1, 11):\n        number = int('2' + '5' * (i - 1))\n        if sqrt(number).is_integer():\n            count += 1\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    initial_pieces = 10\n    total_pieces = 16\n\n    # Let x be the number of pieces cut into three parts.\n    # Each piece cut into three parts adds 2 more pieces.\n    # initial_pieces + 2x = total_pieces\n    x = (total_pieces - initial_pieces) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Number of parts that one worker can produce in one minute\n    parts_per_worker_per_minute = (120 / 6) / 4\n    \n    # Total number of parts that three workers can produce in 10 minutes\n    total_parts = parts_per_worker_per_minute * 3 * 10\n    \n    return int(total_parts)\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    initial_value = 98\n    final_value = 44.1\n\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "from sympy import divisors\n\ndef solution():\n    # Find all divisors of 2240\n    d = divisors(2240)\n    for divisor in d:\n        # Check if (2240 / divisor) is a square number\n        if (2240 // divisor)**0.5 % 1 == 0:\n            n = divisor\n            break\n    return n\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swim_pupils = total_pupils * 70 / 100\n    swim_girls = 200\n\n    swim_boys = swim_pupils - swim_girls\n    non_swim_boys = swim_boys * (40 / (100 - 40))  # As 40% of the boys cannot swim, this implies the ratio\n\n    total_boys = swim_boys + non_swim_boys\n    total_girls = total_pupils - total_boys\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_fraction = 1/4\n\n    total_apples = total_trees * apples_per_tree\n    rotten_apples = total_apples * rotten_fraction\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n\n    percentage_increase = ((final_value - initial_value) / initial_value) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice, oatmeal = symbols('rice oatmeal')\n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n\n    solutions = solve((equation1, equation2), (rice, oatmeal))\n\n    return solutions[rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_series = (n * (n + 1) // 2) ** 2\n    return sum_of_series\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation representing the total amount of sugar from both solutions\n    sugar_4kg_30 = 4 * 0.30\n    sugar_xkg_10 = x * 0.10\n    total_sugar = sugar_4kg_30 + sugar_xkg_10\n\n    # The total weight of the mixture\n    total_weight = 4 + x\n\n    # The concentration of the mixture is 26%\n    concentration = 0.26\n\n    # Create an equation based on total sugar and concentration\n    equation = Eq(total_sugar, concentration * total_weight)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    discounted_price = 32 - 4\n    total_discount = original_price - discounted_price\n    total_percentage_discount = (total_discount / original_price) * 100\n    \n    return total_percentage_discount\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    jar_plus_5choco = 185\n    jar_plus_17choco = 317\n    choco_diff = 17 - 5\n    mass_diff = jar_plus_17choco - jar_plus_5choco\n    mass_per_choco = mass_diff / choco_diff\n\n    jar_empty = jar_plus_5choco - (5 * mass_per_choco)\n    jar_plus_10choco = jar_empty + (10 * mass_per_choco)\n\n    return jar_plus_10choco\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    num = 200\n    count = 0\n\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n\n    # Subtract 1 to exclude the case where 200 is written as itself, since\n    # the question asks for equal parts, and 200 = 200 is not a sum of equal parts.\n    return count - 1\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_price = 72  # pence\n    balloon_price = 20    # pence\n    total_paid = 1000     # pence (10 GBP in pence)\n    change_received = 388 # pence\n\n    money_spent = total_paid - change_received\n    money_spent_on_balloons = money_spent - chocolate_price\n    \n    num_balloons = money_spent_on_balloons // balloon_price\n\n    return int(num_balloons)\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - a - b + 1\n\n    result = custom_op(custom_op(2, 3), 4)\n    return result\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    perimeter = 2 * (144 + 204)\n    num_wheat = 116\n\n    # Subtracting the 4 corner wheat as they are not part of the intervals\n    num_intervals = num_wheat - 4\n    \n    distance_between_wheat = perimeter / num_intervals\n    \n    return distance_between_wheat\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lana, mark = symbols('lana mark')\n    \n    equation1 = Eq(lana + mark, 674)\n    equation2 = Eq(lana - lana / 3, mark - 34)\n    \n    solutions = solve((equation1, equation2), (lana, mark))\n    \n    return solutions[lana] - solutions[mark]\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    equation1 = Eq(dorothy, 96)  # Dorothy has 96 stickers\n    equation2 = Eq(dorothy, 8 * timmy)  # Dorothy has 8 times as many stickers as Timmy\n    equation3 = Eq(kevin, timmy + 45)  # Kevin has 45 more stickers than Timmy\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the total number of days in Robert's summer holiday\n    x = symbols('x')\n\n    # He spent half of it working\n    working = x / 2\n\n    # He spent half of the remaining time reading and relaxing at home\n    reading_relaxing = working / 2\n\n    # 4 days at a friend's house\n    friends_house = 4\n\n    # 2 weeks left for summer camp, which is 14 days\n    summer_camp = 14\n\n    # Equation for the total holiday time\n    equation = Eq(working + reading_relaxing + friends_house + summer_camp, x)\n\n    # Solve for x\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon - pineapple, 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Total perimeter of the field\n    perimeter = (144 + 204) * 2  # in meters\n\n    # There are 4 corners with a wheat, so we subtract them\n    # Then divide the perimeter by the number of intervals (which is the number of wheats - 1)\n    distance = perimeter / (116 - 1)\n\n    return distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    number = (result / 9) * 4 - 3\n    return number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2 / 7) * total_bracelets\n    remainder = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3 / 5) * remainder\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    bracelets_needed = total_bracelets - bracelets_made\n    return int(bracelets_needed)\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_weekly = 40\n    together_weeks = 4\n\n    together_weekly = total_people / together_weeks\n\n    gloria_weekly = together_weekly - ellie_weekly\n    gloria_time = total_people / gloria_weekly\n\n    return gloria_time\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations('1356789', 4):\n        A, C, E, F = perm\n        num1 = int(f'5{2}0{A}{C}{E}{F}')\n        num2 = int(f'{E}{F}{A}{2}0{C}')\n        if 5 * num1 == 6 * num2:\n            return int(f'{F}{A}{C}{E}')\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    result = (3/8) * 48\n    return result\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    rice_A = 0.40 * 15\n    rice_B_percent = symbols('rice_B_percent')\n    \n    rice_B = rice_B_percent / 100 * 60\n    total_rice = rice_A + rice_B\n    \n    equation = Eq(total_rice, 0.28 * total_weight)\n    rice_B_solution = solve(equation, rice_B_percent)\n    \n    return rice_B_solution[0]\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve, Rational\n\n    a, b, c, d = symbols('a b c d', integer=True, positive=True)\n    \n    # Let's assume a > b > c > d (descending order)\n    # We have the following equations based on the question\n    equation1 = Eq(d + (a + b + c) / 3, 39)\n    equation2 = Eq(a + (b + c + d) / 3, 51)\n\n    # Solving the two equations to express a in terms of d\n    solutions = solve((equation1, equation2), (a, b, c))\n\n    # Now let's find the maximum value of a with respect to d.\n    a_expr = solutions[a]  # Expression for a in terms of d\n    # Since b > c > d in descending order, let's substitute smallest values for b, c assuming they are consecutive\n    a_max = a_expr.subs({d: 1})\n    \n    return int(a_max)\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # in milliliters\n    time_in_minutes = 2 * 60  # convert 2 hours to minutes\n    total_ml = rate_per_minute * time_in_minutes\n    total_litres = total_ml / 1000  # convert milliliters to liters\n    return total_litres\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    num_trees = (road_length // distance_between_trees) + 1\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Barbara's speed (in metres per minute)\n    barbara_speed = 60\n    # Catherine's speed (in metres per minute)\n    catherine_speed = 45\n    # Catherine still has 60 metres to go when Barbara reaches the mall\n    remaining_distance_for_catherine = 60\n\n    # Since Barbara has reached the shopping mall, and Catherine still has 60 metres to go,\n    # we calculate how long Barbara has been walking for this to happen\n    # Let 't' be the time in minutes they both have been walking\n    # The distance Barbara walked is 'barbara_speed * t'\n    # The distance Catherine walked is 'catherine_speed * t'\n    # Using the additional 60 metres that Catherine still needs to walk, we get:\n    # barbara_speed * t = catherine_speed * t + 60\n    # We solve for 't' to get the time they both have been walking\n    t = remaining_distance_for_catherine / (barbara_speed - catherine_speed)\n\n    # Since we now have the time 't', we can calculate the distance to the mall\n    # which is the distance Barbara walked for time 't'\n    distance_to_mall = barbara_speed * t\n\n    return distance_to_mall\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pens, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_received = 2 * 10 + 5 * 5 + 4 * 0.20\n    total_spent = 100 - total_received\n    return total_spent\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2*(0.5*y + x))\n    solutions = solve((equation), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3\n    total_time = 18\n    num_plates = total_time // time_per_plate\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Nini's age and her dad's age\n    nini_age, dad_age = symbols('nini_age dad_age')\n\n    # Equation 1: Dad is 25 years older than Nini\n    equation1 = Eq(dad_age, nini_age + 25)\n\n    # Equation 2: After five years, dad's age will be 8 less than two times Nini's age\n    equation2 = Eq(dad_age + 5, 2 * (nini_age + 5) - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (nini_age, dad_age))\n\n    return solutions[nini_age]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    count = 50\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            count -= 1\n    return count\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * 2 / 5\n    remaining_pears = total_pears - first_day_sold\n    second_day_sold = remaining_pears * 7 / 9\n\n    return int(second_day_sold)\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # One cat takes 10 minutes to catch one fish.\n    # Therefore, five cats can catch five fish in the same 10 minutes,\n    # since each cat catches one fish independently in 10 minutes.\n    ans = 10\n    return ans\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    total_money = 200\n    ratio_A_B = 4 / 3\n    extra_A_over_C = 20\n\n    # A = ratio_A_B * B\n    # A + B + C = total_money\n    # A = C + extra_A_over_C\n\n    equation1 = Eq(A, ratio_A_B * B)\n    equation2 = Eq(A + B + C, total_money)\n    equation3 = Eq(A, C + extra_A_over_C)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    fraction = 3 / 4\n    percentage = 30 / 100\n    number = 120\n\n    result = fraction * percentage * number\n\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    for students in range(1, 30):\n        if 29 - (3 * students) < 0:\n            return students - 1\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    ways_to_pick = boys * girls\n\n    return ways_to_pick\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reverse_num = int(str(num)[::-1])\n            if num != reverse_num and isprime(reverse_num):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g and b be the number of green and blue balls respectively\n    g, b = symbols('g b')\n    \n    # Equation representing the remaining number of each color after removal\n    equation1 = Eq(g - 28, b - (2/5)*b)\n    \n    # Equation representing the initial total number of balls\n    equation2 = Eq(g + b, 140)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    probability_of_not_being_at_two_bars = 1 - 0.9\n    probability_of_being_at_third_bar = 1 - probability_of_not_being_at_two_bars\n    return probability_of_being_at_third_bar\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n\n    # Eliot is now twice his cousin's age\n    equation1 = Eq(eliot, 2 * cousin)\n\n    # In 4 years, Eliot will be 16\n    equation2 = Eq(eliot + 4, 16)\n\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    # How old will his cousin be then? We add 4 years to the cousin's current age.\n    cousin_age_then = solutions[cousin] + 4\n\n    return cousin_age_then\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_fish = 16\n    sample_size = 100\n    total_caught = 100\n    estimated_fish_population = (total_caught * sample_size) / marked_fish\n    return estimated_fish_population\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the distance Nancy walks, then Randy walks x + 10\n    nancy, randy = symbols('nancy randy')\n\n    # Set up the equations based on the problem statement\n    # the ratio of their walking is 2:3, so 2 * randy = 3 * nancy\n    # Also, Randy walks 10m more than Nancy, so randy = nancy + 10\n    equation1 = Eq(2 * randy, 3 * nancy)\n    equation2 = Eq(randy, nancy + 10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (nancy, randy))\n\n    nancy_walked = solutions[nancy]\n    randy_walked = solutions[randy]\n\n    # Total distance is the sum of distances that Nancy and Randy walked\n    total_distance = nancy_walked + randy_walked\n\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    elaine_future_age = 12\n    \n    age_difference = mandy_current_age - elaine_current_age\n    mandy_future_age = elaine_future_age + age_difference\n    \n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = 1 + 3/99 + 3 + 3/33 + 9 + 3/11\n    denominator = 1 + 1/99 + 3 + 1/33 + 9 + 1/11\n\n    return numerator / denominator\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Define the repeating decimal value as a fraction\n    fraction_value = 2014 / 9999\n    # Find the value of x by multiplying the repeating decimal by 9900\n    x = fraction_value * 9900\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    eq1 = Eq(bronson, 2 * ali)\n    eq2 = Eq(ali, ((bronson + charlie) / 2) - 5)\n\n    solutions = solve((eq1, eq2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum_even = sum(range(10, 21, 2))\n    sum_odd = sum(range(9, 20, 2))\n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    eq1 = Eq(alice, 2 * sister)  # Alice is twice as old as her sister\n    eq2 = Eq(alice + 10 + sister + 10, 53)  # In 10 years, their total age is 53\n    \n    solved = solve((eq1, eq2), (alice, sister))\n    \n    return solved[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(10):\n            for one in range(10):\n                if hundred + ten + one == 8 and len({hundred, ten, one}) == 3 and one % 2 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(100000, 1000000):\n        if i % 10 == 2 and int(str(2) + str(i)[:-1]) == i // 3:\n            return i\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    # Using the Inclusion-Exclusion Principle\n    # Total students = Passed first exam + Failed second exam - Passed second but failed first + Neither passed nor failed both.\n    passed_only_first_exam = passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The congruences are x ≡ 3 (mod 5), x ≡ 6 (mod 8), x ≡ 7 (mod 9)\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    x, _ = solve_congruence(*congruences)\n\n    # Ensure that the number is between 500 and 1000\n    while x < 500:\n        x += 5 * 8 * 9  # LCM of 5, 8, and 9\n    \n    return x\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    num_people = 4\n\n    remainder = total_bars % num_people\n\n    return remainder\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):  # tens digit 'a' must be in [1, 9]\n        for b in range(10): # units digit 'b' can be in [0, 9]\n            number = 10 * a + b         # creating the number 'ab'\n            reverse_number = 10 * b + a # creating the number 'ba'\n            product = number * reverse_number\n            if product % 100 == 0:  # check if ones and tens digit are both 0\n                return number\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    hours_for_300 = 300 / hourly_rate\n    return hours_for_300\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    small_sack, large_sack = symbols('small_sack large_sack')\n\n    equation1 = Eq(large_sack, small_sack * 1.2)\n    equation2 = Eq(large_sack + small_sack, 77)\n\n    solutions = solve((equation1, equation2), (small_sack, large_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Equation 1: oranges + apples = 125\n    equation1 = Eq(oranges + apples, 125)\n\n    # Equation 2: oranges - 35 = (apples / 2)\n    equation2 = Eq(oranges - 35, apples / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    fraction = 5 / 9\n    ans = round(fraction, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome can be obtained by considering that in a palindrome\n    # of odd length (like a 5-digit number), the center digit doesn't matter much because\n    # it doesn't need a 'mirror' digit.\n    \n    # Therefore we start with the smallest digit (1) for the first and last digits of the\n    # 5-digit palindrome because those are mirrored, and any digit in the center.\n    # The smallest digit for the second and second to last digits has to be 0 (since they are\n    # mirrored as well). This makes the palindrome: 10001.\n    least_5_digit_palindrome = 10001\n\n    # The greatest 6-digit palindrome uses the largest digit (9) at both ends of the number,\n    # and similarly we place the largest possible digits 'mirrored' inwards.\n    # This makes the palindrome: 999999.\n    greatest_6_digit_palindrome = 999999\n\n    # The difference between the greatest 6-digit palindrome and the least 5-digit palindrome\n    # is what the question is asking for.\n    ans = greatest_6_digit_palindrome - least_5_digit_palindrome\n    return ans\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Each digit a, b, c will appear once at every position (hundreds, tens, ones)\n    # Thus each digit will contribute the same amount to the sum, and we can calculate\n    # the sum by multiplying the individual digit sum with the number of times it appears at each position.\n    \n    # Sum of the digits at the hundreds position: (100a + 100b + 100c) = 100 * (a + b + c)\n    # Sum of the digits at the tens position:     (10a + 10b + 10c) = 10 * (a + b + c)\n    # Sum of the digits at the ones position:     (a + b + c)\n    \n    # Each digit appears in each position 2 times (3! / 3 = 2) \n    # because there are: 3! = 3*2*1 = 6 permutations and 3 positions (hundreds, tens, ones)\n    \n    digit_sum = a + b + c\n    sum_of_numbers = 2 * (100 + 10 + 1) * digit_sum\n\n    return sum_of_numbers\n\n# Assuming a, b, and c are given as inputs since they're not defined in this function\na = 1  # Example digit for 'a'\nb = 2  # Example digit for 'b'\nc = 3  # Example digit for 'c'\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    total_students = 35\n    capacity_per_cabin = 6\n    num_cabins = (total_students + capacity_per_cabin - 1) // capacity_per_cabin\n    return num_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    num_digits = 0\n    for i in range(1, 59):\n        num_digits += len(str(i))\n    return num_digits\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    digit_count = 0\n    number = 1200\n    \n    while digit_count < 2011:\n        digit_count += len(str(number))\n        if digit_count < 2011:\n            number -= 1\n            \n    # Count back to the 2011th digit from the right\n    excess_digits = digit_count - 2011\n    return int(str(number)[excess_digits])\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    # If the picture book is the 14th book from the left, and there are 6 books to the right of it,\n    # it means there are 13 books to the left of the picture book.\n    left_of_picture_book = 14 - 1\n    right_of_picture_book = 6\n    \n    # To find the total number of books, add the number of books to the left of the picture book,\n    # the picture book itself, and the books to the right of it.\n    total_books = left_of_picture_book + 1 + right_of_picture_book\n    \n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    max_val = 50\n    multiple_of = 5\n\n    num_terms = max_val // multiple_of\n    \n    sum_multiples = multiple_of * num_terms * (num_terms + 1) // 2\n\n    return sum_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # in km per minute\n    speed_planet2 = 40  # in km per minute\n\n    # Total distance travelled by both planets in 5 minutes\n    total_distance = 5 * (speed_planet1 + speed_planet2)\n\n    return total_distance\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let the number of cars be 'c' and the number of motorbikes be 'm'.\n    # Every car has 4 tyres and every motorbike has 2 tyres.\n    # We have two equations based on the given information:\n    # c + m = 140 (total number of vehicles)\n    # 4c + 2m = 490 (total number of tyres)\n    \n    # From the first equation, we can express m in terms of c: m = 140 - c\n    # Substitute m in the second equation:\n    # 4c + 2(140 - c) = 490 -> 4c + 280 - 2c = 490 -> 2c = 490 - 280 -> 2c = 210\n    # Solve for c:\n    c = 210 // 2\n    \n    return c\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # We need to form two-digit numbers where the first digit cannot be 0.\n    # There are 5 possibilities for the first digit (1-5)\n    first_digit_options = 5\n    \n    # There are 6 possibilities for the second digit (0-5) including 0 this time\n    second_digit_options = 6\n    \n    # The total number of two-digit numbers is the product of the possibilities\n    total_numbers = first_digit_options * second_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    sale_price = 64\n    discount_rate = 0.20\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of coins as 'x'\n    x = symbols('x')\n    \n    # One quarter of the coins are showing heads initially\n    heads_initial = x / 4\n    \n    # Turning over two more coins\n    heads_after = heads_initial + 2\n    \n    # Then one third of the coins are showing heads\n    heads_final = x / 3\n\n    # Setting up the equation based on the above information\n    equation = Eq(heads_after, heads_final)\n\n    # Solving the equation\n    solutions = solve(equation, x)\n\n    # We need a positive number of coins, filtering negative or non-integer solutions\n    num_coins = next(sol for sol in solutions if sol.is_integer and sol > 0)\n\n    return num_coins\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_litres = 36\n    ratio_apple_to_total = 4 / (4 + 5)  # 4 parts apple out of 9 parts total\n    apple_juice = total_litres * ratio_apple_to_total\n    return apple_juice\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    a = symbols('a')\n    n = symbols('n')\n    \n    # Set up the congruence equations\n    eq1 = Eq(190 % n, a)\n    eq2 = Eq(137 % n, a + 4)\n    eq3 = Eq(101 % n, a + 6)\n\n    # Solve the equations to find n\n    sol = solve((eq1, eq2, eq3), (a, n))\n\n    # Get the valid solution for n (discarding negative or zero results)\n    n_value = next(val[1] for val in sol if val[1] > 0)\n\n    # Compute the remainder when 299 is divided by n\n    remainder = 299 % n_value\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = distance_per_day - slide_per_night\n\n    day = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += distance_per_day\n        if current_distance < total_distance:\n            current_distance -= slide_per_night\n\n    return day\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_weight = 960\n    box_capacity = 8\n\n    num_boxes = total_weight // box_capacity\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    added_number = 12\n\n    original_number = (result - added_number) / 2\n\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    # Start with 1 as it is the initial remainder\n    x = 1\n\n    # Loop until the number meets both conditions\n    while True:\n        # If x%2 == 1 and x%13 == 1, we've found the number\n        if x % 2 == 1 and x % 13 == 1:\n            break\n        x += 1\n\n    return x\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    result = (9/5) * (25/100) + (1/4) * 2.2 - 0.25\n    return result\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    students_per_class = 100\n    classes = 5\n    donation_per_student = 5.78\n\n    total_donation = students_per_class * classes * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    max_sum = 0\n    for y in range(2, 200):\n        if all(y % i != 0 for i in range(2, int(y ** 0.5) + 1)): # y is prime\n            x = (200 + y) / (2 + y)\n            if x.is_integer() and all(x % i != 0 for i in range(2, int(x ** 0.5) + 1)): # x is prime\n                x = int(x)\n                prime_sum = x + y\n                if prime_sum > max_sum:\n                    max_sum = prime_sum\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    repetitions = factorial(2)**2   # because 2 and 3 each repeat twice\n    \n    total_permutations = factorial(total_digits) // repetitions\n    \n    return total_permutations\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2\n    fraction_spent = 1 / 4\n    initial_money = spent / fraction_spent\n    return initial_money\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each dwarf\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    # Given conditions\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sleepy, 80)\n    equation4 = Eq(doc + sleepy, dopey + sneezy)\n\n    # Since Dopey, Sneezy, Bashful and Grumpy are all the same height\n    equation5 = Eq(dopey, sneezy)\n    equation6 = Eq(sneezy, bashful)\n    equation7 = Eq(bashful, grumpy)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    # Calculate the total height\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    # In a round-robin with 8 teams, each team plays 7 games, and each game is counted twice for the two teams playing.\n    total_games = (teams * (teams - 1)) // 2\n    \n    return total_games\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    result = a * 3 + b - 4\n    return result\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    # Convert mixed fractions to improper fractions\n    num1 = 5 + 1/6\n    num2 = 6 + 1/5\n    denom1 = 1/6\n    denom2 = 1/5\n\n    # Perform addition of the numerators\n    numer_sum = num1 + num2\n    # Perform addition of the denominators\n    denom_sum = denom1 + denom2\n\n    # Divide the sum of numerators by the sum of denominators\n    result = numer_sum / denom_sum\n\n    # Return final answer\n    return result\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    fraction = (7 / 9)\n    number = 27\n    ans = fraction * number\n    return ans\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_travelled_in_5_hours = 250\n    time_in_5_hours = 5\n    time_in_3_hours = 3\n\n    speed = distance_travelled_in_5_hours / time_in_5_hours\n    distance_travelled_in_3_hours = speed * time_in_3_hours\n\n    return distance_travelled_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60):\n        if num % 8 == 3 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variables q, r, and s represent the numbers on Qiang's, Rory's, and Sophia's hats, respectively.\n    q, r, s = symbols('q r s')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(r + s, 11)  # Qiang's total\n    equation2 = Eq(q + s, 17)  # Rory's total\n    equation3 = Eq(q + r, 22)  # Sophia's total\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (q, r, s))\n\n    # Find the largest number on a hat\n    largest_number = max(solutions[q], solutions[r], solutions[s])\n\n    return largest_number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    num_trees = 30\n    distance_apart = 5\n    \n    # The total distance is 5m less than the product of (number of trees * distance between them)\n    # since the first tree is at the start of the road and there's no distance before it.\n    road_length = (num_trees - 1) * distance_apart\n    return road_length\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    # define the relationship between meters and days for a 1000-meter highway construction\n    meters_per_day = 1000 / 5\n    \n    # calculate how many days it would take for a 2600-meter highway\n    days_for_2600_meters = 2600 / meters_per_day\n    \n    return days_for_2600_meters\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    product = 1.5  # Starting with the first value, 1 1/2\n\n    # Multiply the product by each term in the sequence\n    for denominator in range(3, 10):  # Start from 3 as 1 1/2 is already included\n        product *= (1 + 1 / denominator)\n\n    return product\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for prime in range(2, 21):\n        if isprime(prime) and isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first_term = 12\n    last_term = 90\n    # Calculate the number of terms in the sequence.\n    num_terms = last_term - first_term + 1\n\n    # The sum of an arithmetic sequence can be calculated using the formula:\n    # sum = (first_term + last_term) * num_terms / 2\n    # However, because we only want to know if the sum is odd or even, we can take advantage\n    # of some properties of odd and even numbers.\n\n    # If the number of terms is odd, the sum is the result of adding an odd number of even numbers\n    # together, which will produce an even result since even + even = even.\n\n    # If the number of terms is even, the sum involves adding an odd number and an even number\n    # so their parity (odd or even) depends on the sum of first and last terms being odd or even.\n\n    # In this problem, first and last terms are both even numbers.\n    # Consequently, if num_terms is even, sum is even (even + even = even).\n    # If num_terms is odd, sum is even (adding an even number of odd numbers). \n\n    # Therefore the sum is always even regardless of num_terms being odd or even.\n\n    return \"even\"\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Convert minutes to hours\n    first_time = 30 / 60\n    second_time = 30 / 60\n    third_time = 30 / 60\n\n    # Equation for the total distance\n    equation = Eq(first_time * x + second_time * (x - 20) + third_time * (x + 10), 70)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    digits = 0\n    for i in range(1, 346):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_capacity = 25\n\n    buses_needed = (total_people + max_capacity - 1) // max_capacity\n\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize = symbols('total_prize')\n    \n    denise_singles = 1/5 * total_prize\n    denise_doubles = 1/15 * total_prize\n    total_denise = 360\n\n    equation = Eq(denise_singles + denise_doubles, total_denise)\n    solution = solve(equation, total_prize)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # Total number of players excluding the coach is 6 (since including the coach would make it 7)\n    # The coach has to stand in the middle, so there are 3 positions on either side\n    # The captain can be either on the left or the right of the coach\n\n    # For the captain, there are 2 choices (left or right of the coach)\n    captain_choices = 2\n\n    # For the remaining 5 players, they can be arranged in any order in the remaining 5 spaces\n    other_players_arrangements = factorial(5)\n    \n    # Use the principle of multiplication to find the total number of arrangements\n    total_arrangements = captain_choices * other_players_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Let the side length of the square be n, starting with boys\n    n = 1  # starting with smallest possible square\n    while True:\n        boys = (n * n + (n - 2) * (n - 2)) // 2\n        girls = n * n - boys\n        if boys - girls == 20:\n            return n * n\n        n += 2  # increase by 2 to maintain alternate boy-girl layers\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    penguins = 1\n    while True:\n        if (penguins * 3 + 25) == (penguins * 6 - 5):\n            return penguins\n        penguins += 1\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cubic_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cubic_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_terms = 0\n    i = 1\n    term_count = 0\n    while term_count < 30:\n        for j in range(i):\n            if term_count < 30:\n                sum_terms += i\n                term_count += 1\n            else:\n                break\n        i += 1\n    return sum_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n    total_votes = 140\n\n    votes_remaining = total_votes - (alice_votes + betty_votes + cindy_votes)\n    max_other = max(alice_votes, betty_votes)\n    \n    # Cindy needs one more vote than the maximum to ensure victory\n    necessary_votes_for_cindy = max_other + 1 - cindy_votes\n\n    # In the worst case scenario, all the remaining votes go to the maximum other\n    # So we need to ensure Cindy still has more after all votes are cast\n    if necessary_votes_for_cindy <= votes_remaining:\n        ans = necessary_votes_for_cindy\n    else:\n        ans = votes_remaining\n\n    return ans\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Calculate the first fraction\n    num1 = 7 / -3.333333333333333  # -3.\\dot{3} is a repeating decimal, which is -3 1/3 or -10/3\n    den1 = (-0.027) ** (1/3)  # The cube root of -0.027\n    fraction1 = num1 / den1\n\n    # Calculate the second fraction\n    num2 = 2**3 / 4**2  # 2^3 divided by 4^2\n    den2 = 0.125 * (1.8 - (0.2 * 7))  # 0.125 times the expression in brackets\n    fraction2 = num2 / den2\n\n    # Calculate the expression within the square brackets\n    inner_bracket = (0.1 / 0.142857)  # 0.\\dot{1}\\dot{4}\\dot{2}\\dot{8}\\dot{5}\\dot{7} is a repeating decimal, which is 1/7\n    inner_bracket += (2 * 0.3)  # Adding 2 times 0.3 to the previous result\n\n    # Combine all calculated parts to get the result\n    ans = fraction1 + fraction2 - inner_bracket\n\n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Calculate the difference in years between the two given dates\n    years_diff = 2005 - 1997  # Gina's and James's reference years\n\n    # James's age on his reference date\n    james_age = 20\n\n    # Gina's age on her reference date\n    gina_age = 50\n\n    # Calculate Gina's age when James was born by subtracting the years_diff from Gina's age\n    # and adding James's age on his reference date\n    gina_age_when_james_born = gina_age - (years_diff + james_age)\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_perms = [''.join(p) for p in permutations(digits)]\n    all_perms.sort()\n    fifth_number = all_perms[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    base_salary = 2500\n    total_salary = 3300\n    commission_1_rate = 0.02\n    commission_2_rate = 0.05\n    threshold = 25000\n    \n    commission = total_salary - base_salary\n    \n    if commission <= threshold * commission_1_rate:\n        sales = commission / commission_1_rate\n    else:\n        commission_remain = commission - threshold * commission_1_rate\n        sales = threshold + (commission_remain / commission_2_rate)\n    \n    return sales\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_of_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n\n    total_height_of_other_two = total_height_of_six - total_height_of_four\n    average_height_of_other_two = total_height_of_other_two / 2\n\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    pages = 0\n    digits_per_page = 1\n\n    while total_digits > 0:\n        possible_pages = 9 * 10**(digits_per_page - 1)\n        used_digits = possible_pages * digits_per_page\n        \n        if total_digits >= used_digits:\n            total_digits -= used_digits\n            pages += possible_pages\n        else:\n            pages += total_digits // digits_per_page\n            total_digits = 0\n        \n        digits_per_page += 1\n\n    return pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n\n    total_ways = ways_A_to_B * ways_B_to_C\n\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    num_terms = 30\n    common_diff = -1\n\n    last_term = first_term + (num_terms - 1) * common_diff\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n    \n    # Initial ratio equation: 2/7 = ryan/audrey\n    initial_ratio_eq = Eq(ryan/audrey, 2/7)\n\n    # New ratio after transactions: 1/3 = (ryan+20)/(audrey-80)\n    new_ratio_eq = Eq((ryan + 20)/(audrey - 80), 1/3)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio_eq, new_ratio_eq), (ryan, audrey))\n    \n    # Extract the solution for the number of marbles Audrey had at first\n    return solutions[audrey]\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p1 = 0.4\n    # Probability of failing the first attempt (1 - probability of passing)\n    f1 = 1 - p1\n    # Probability of passing on the second attempt given failing the first\n    p2 = 0.5\n    # Probability of failing the first and second attempt (f1 * (1 - probability of passing on second))\n    f2 = f1 * (1 - p2)\n    # Probability of passing on the third attempt given failing the first two\n    p3 = 0.3\n    \n    # Probability of passing the test before the fourth attempt is the sum of\n    # probabilities of passing on the first, second or third attempt\n    # P(passing before fourth attempt) = P(first) + P(second | failed first) + P(third | failed first two)\n    prob_pass_before_fourth = p1 + (f1 * p2) + (f2 * p3)\n\n    return prob_pass_before_fourth\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq(age / 4 + 32, age - 22)\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum((-1)**(i+1) * i**2 for i in range(1, 90))\n    return ans\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    boys_more_than_girls = 44\n    total_students = 0\n    \n    # The difference between the number of boys and the number of girls would be 4 times the side of the innermost boy's square.\n    # Since the difference is 44, the side of the innermost boy's square is 44 / 4 = 11.\n    # This means that there's a square of 11 boys at the center.\n\n    # Starting from the innermost square of boys, which is 11x11,\n    # We add girls and boys in layers till we can't add another complete layer of students.\n    side_length = 11\n    while True:\n        # For each layer, we add a row and column of girls or boys to the outer layer.\n        # Therefore, the square's side increases by 2 (1 for each side: left/right or top/bottom).\n        # So we calculate the total students by adding the square of the side length.\n        total_students += side_length ** 2\n        \n        # Then we look to add the next layer, starting with girls.\n        side_length += 2\n        \n        # Check if adding another layer of boys would exceed the difference.\n        # Since each layer adds 4 * side_length to the difference, we need to ensure that\n        # 4 * (side_length - 1) does not exceed the 44 difference limit.\n        if 4 * (side_length - 1) > boys_more_than_girls:\n            break\n    \n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    # Total metres to climb out of the burrow\n    total_distance = 18\n    # Metres climbed during the day\n    day_climb = 7\n    # Metres climbed on the 6th day\n    day_six_climb = 3\n    # Calculate the distance climbed after 5 days, before the special 6th day\n    distance_after_five_days = day_climb * 5\n    \n    # If the snail is still in the burrow after 5 days, calculate the remaining distance\n    if distance_after_five_days < total_distance:\n        remaining_distance_after_sixth_day = total_distance - (distance_after_five_days + day_six_climb)\n        # Since the snail gets out on the 6th day, the remaining distance is equal\n        # to the distance it slides down during the night\n        night_slide = remaining_distance_after_sixth_day\n    else:\n        # If the snail would have climbed out already after 5 days, the slide down is\n        # the excess distance\n        night_slide = distance_after_five_days - total_distance\n    \n    return night_slide\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_for_second_student = 0\n\n    # Since there are 4 students and each must get a positive number of apples,\n    # the first student will get at least 1 apple, the second - at least 2 apples, and so on.\n    # Hence, we start distribution from 1 to the first student, 2 to the second, etc.\n    # The remaining apples after this distribution will be 48 - 1 - 2 - 3 = 42 apples.\n    total_apples = 48\n    min_apples_distributed = 1 + 2 + 3\n    remaining_apples = total_apples - min_apples_distributed\n\n    # Now we distribute the remaining apples starting from the last student in reverse.\n    for fourth_student_apples in range(1, remaining_apples - 2):\n        for third_student_apples in range(2, remaining_apples - fourth_student_apples):\n            second_student_apples = remaining_apples - fourth_student_apples - third_student_apples\n            if (second_student_apples > fourth_student_apples and\n                second_student_apples > third_student_apples and\n                second_student_apples > max_apples_for_second_student):\n                max_apples_for_second_student = second_student_apples\n\n    # Finally, add the initial 2 apples that were reserved for the second student.\n    max_apples_for_second_student += 2\n    return max_apples_for_second_student\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # To solve this puzzle, we need to determine the optimal order of crossing.\n    # Assume Eddie has the flashlight initially as he is the fastest.\n    min_time = 0  # Total time starts at 0\n\n    # First trip: Eddie and Jack cross, Eddie comes back\n    # Time taken: 2 (Jack's time) + 1 (Eddie's return)\n    min_time += 2 + 1\n\n    # Second trip: Mary and Rose cross, Jack comes back\n    # Time taken: 10 (Mary's time) + 2 (Jack's return)\n    min_time += 10 + 2\n\n    # Final trip: Eddie and Jack cross\n    # Time taken: 2 (Jack's time)\n    min_time += 2\n\n    return min_time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let x be the original length of the rectangle\n    # Let y be the width of the rectangle\n\n    # After increasing the length by 12 cm\n    # The new length will be (x + 12) and the width will remain y\n    # The perimeter of the new rectangle will be 2 * (x + 12) + 2y = 38\n\n    # Let's set the equation for the new perimeter\n    # 2(x + 12) + 2y = 38\n    # Simplify the equation: 2x + 24 + 2y = 38\n    # 2x + 2y = 14\n    # x + y = 7\n\n    # The perimeter of the original rectangle is 2x + 2y\n    # Since we have found that x + y = 7, the original perimeter is 2 * (x + y)\n    # Therefore, the original perimeter is 2 * 7 = 14 cm\n\n    original_perimeter = 2 * 7\n    return original_perimeter\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    num = 2**19 - 1\n    remainder = num % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    students = 4\n    ways_to_line_up = factorial(students)\n    return ways_to_line_up\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # The possible choices for each day\n    choices = ['chocolate', 'peaches', 'strawberries']\n    \n    # Starting with chocolate on the first day\n    first_day = 'chocolate'\n    \n    # Count the different ways of eating for the next two days\n    count = 0\n    for second_day in choices:\n        if second_day != first_day:  # She can't eat the same food on adjacent days\n            for third_day in choices:\n                if third_day != second_day:  # She can't eat the same food on adjacent days\n                    count += 1  # This combination is a valid way to eat\n    \n    return count  # Return the total count of different ways to eat\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    total = 8\n    count = 0\n    for i in range(1, total):\n        if total - i > i:  # Ensure we're not counting duplicates like 1+7 and 7+1\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from fractions import Fraction\n\n    money_left = 160\n    fraction_table_spent = Fraction(3, 4)\n\n    # Let's find the remainder after spending on the television\n    remainder_after_tv = money_left / (1 - fraction_table_spent)\n\n    # Let's find the total salary\n    fraction_tv_spent = Fraction(5, 9)\n    total_salary = remainder_after_tv / (1 - fraction_tv_spent)\n\n    # Television cost\n    television_cost = total_salary * fraction_tv_spent\n\n    return television_cost\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "from math import factorial\n\ndef solution():\n    # Since rotating the table results in the same order, it is a circular permutation.\n    # The formula for circular permutations is (n-1)! for n objects.\n    num_people = 7\n    num_seats = 8  # Not relevant since we always have one empty seat after seating all people.\n\n    num_ways = factorial(num_people - 1)\n    return num_ways\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    numerator = 50\n    denominator = 5 / 3\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, emma = symbols('john emma')\n    \n    future_sum = Eq(john + emma + 3 + 3, 27)\n    age_difference = Eq(emma, john - emma)\n    \n    solutions = solve((future_sum, age_difference), (john, emma))\n    \n    return solutions[emma]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_days_worked = 6\n    \n    total_earnings = average_daily_earnings * number_of_days_worked\n    \n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    ans = comb(15, 3)\n    return ans\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    sheets_per_ream = sheets_per_quire * quires_per_ream\n    total_sheets = sheets_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom travels at 48 km/h\n    tom_speed = 48\n    # Jack travels at 50 km/h\n    jack_speed = 50\n    # Time difference between Tom and Jack's departure is 3 hours\n    time_difference = 3\n    # After total 5 hours from Jack's start, they are 15 km apart\n    total_time_jack = 5\n    # Calculate distance traveled by Tom until they are 15 km apart\n    distance_tom = tom_speed * (time_difference + total_time_jack)\n    # Calculate distance traveled by Jack until they are 15 km apart\n    distance_jack = jack_speed * total_time_jack\n    # Calculate the distance between A and B\n    distance_AB = distance_tom + distance_jack + 15\n\n    return distance_AB\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Since the water section is 36 degrees, in a pie chart, it represents 36/360 of the total.\n    water_fraction = 36 / 360  # fraction of people who chose water\n\n    # Assume total number of people is 'total'\n    # From the question, we have the following information:\n    # 1/4 chose tea, 7 chose coffee, and 30% (0.3) chose cola.\n\n    # Let 'total' be the number of people\n    # We can create an equation based on the fractions and percentages given:\n    # total/4 (tea) + 7 (coffee) + 0.3 * total (cola) + water_fraction * total (water) = total\n\n    # Simplifying the equation gives us:\n    # (total/4) + 7 + (0.3 * total) + (water_fraction * total) = total\n    # (1/4) * total + 0.3 * total + water_fraction * total + 7 = total\n    # (1/4 + 0.3 + water_fraction) * total + 7 = total\n    # total * (1 - (1/4 + 0.3 + water_fraction)) = 7\n\n    # Solve for 'total':\n    total = 7 / (1 - (1/4 + 0.3 + water_fraction))\n\n    return int(total)\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    n = 15\n    two_count = five_count = 0\n\n    for i in range(2, n + 1):\n        while i % 2 == 0:\n            two_count += 1\n            i //= 2\n        while i % 5 == 0:\n            five_count += 1\n            i //= 5\n\n    ans = min(two_count, five_count)\n    return ans\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    total_legs = 56\n    legs_per_child = 2\n    legs_per_dog = 4\n    dogs_per_child = 3\n\n    # Since each child is associated with 3 dogs, let's create a group:\n    # 1 child + 3 dogs = 4 legs per child + 12 legs per dog = 16 legs per group\n    legs_per_group = legs_per_child + dogs_per_child * legs_per_dog\n\n    # Now, we find out how many such groups (children) there could be by dividing\n    # the total number of legs by the number of legs per group:\n    number_of_children = total_legs // legs_per_group\n\n    return number_of_children\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_pupils = 18\n    fraction_present = 1 - 2/5\n\n    total_pupils = present_pupils / fraction_present\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10 ** 5) / (5 ** 5)\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the number of cookies baked on Saturday, u on Sunday\n    s, u = symbols('s u')\n\n    # 4 times cookies baked on Sunday minus 5\n    equation1 = Eq(s, 4 * u - 5)\n\n    # Saturday cookies are 43 more than Sunday cookies\n    equation2 = Eq(s, u + 43)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, u))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    # Trees on the length sides (subtracting the corner twice, as it will be counted in width sides)\n    trees_on_length = (length // spacing) * 2 - 2\n\n    # Trees on the width sides (subtracting the corner twice, as it is already counted in length sides)\n    trees_on_width = (width // spacing) * 2 - 2\n\n    # The total number of trees needed\n    total_trees = trees_on_length + trees_on_width\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_in_m = 1.36\n    height_in_cm = height_in_m * 100\n    return height_in_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_amount = 500\n    income_tax_percentage = 3\n    tax_amount = initial_amount * (income_tax_percentage / 100)\n    final_amount = initial_amount - tax_amount\n    return final_amount\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10**4):\n            original_num = j * 10 + 9  # My special number with a 9 in the units column\n            new_num = int('9' + str(j))  # The new number with 9 in the beginning\n            if new_num == 4 * original_num:\n                return original_num\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    orange_squash = 750\n    total_parts = 1 + 9\n    total_mixture = (orange_squash / 1) * total_parts\n    bottle_capacity_ml = 1000\n\n    full_bottles = total_mixture // bottle_capacity_ml\n\n    return int(full_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    result = 0.6 * 100\n    ans = 180 / result\n    return ans\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n\n    # Simplify the base modulo 7\n    base_mod = base % divisor\n\n    # Use the property of exponents of mod, (a^b)%c = ((a%c)^b)%c\n    remainder = pow(base_mod, exponent, divisor)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # We observe that for large powers the last two digits repeat with a certain cycle given by the totient of 100 (which is 40).\n    # Also, the last two digits are not affected by any hundreds, thousands, etc.\n    last_two_digits_6_pow = pow(6, 2015 % 40, 100)\n    last_two_digits_2015_mul_6 = (2015 * 6) % 100\n    last_two_digits_2015_pow = pow(2015, 6, 100)\n\n    ans = (last_two_digits_6_pow + last_two_digits_2015_mul_6 + last_two_digits_2015_pow) % 100\n    return ans\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    # Let's denote the number of adults as 'a' and the number of children as 'c'.\n    # According to the problem, we have the following equation:\n    # 20a + 15c = 110, with the constraint that a >= 2.\n    \n    # Initialize the number of children to zero\n    children_count = 0\n\n    # The maximum number of adults possible, given that each ticket costs £20 and there must be at least £110 in total.\n    max_adults = 110 // 20\n\n    # We try every possible number of adults from 2 to the maximum, to find the number of children.\n    for adults in range(2, max_adults + 1):\n        total_cost_for_adults = 20 * adults\n        remaining_cost_for_children = 110 - total_cost_for_adults\n        \n        # If the remaining cost is divisible by the cost of a children's ticket\n        # and non-negative, which means a valid number of children\n        if remaining_cost_for_children >= 0 and remaining_cost_for_children % 15 == 0:\n            children_count = remaining_cost_for_children // 15\n            break\n\n    return children_count\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    # Skip if numbers are not unique\n                    if len({A, 2, 0, C, E, F}) != 6:\n                        continue\n                    \n                    ABCDEF = A * 100000 + 2 * 10000 + 0 * 1000 + C * 100 + E * 10 + F\n                    EFABCD = E * 100000 + F * 10000 + A * 1000 + 2 * 100 + 0 * 10 + C\n                    \n                    # Check the equation\n                    if 5 * ABCDEF == 6 * EFABCD:\n                        return C * 1000 + A * 100 + C * 10 + E\n                        \nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Given factors 1, 2, 4, 7, 8, the last three factors are unknown.\n    # One of the factors must be the number itself, let's denote it as N.\n    # Given that the product of the factors in pairs equals N, we can find the last factors.\n    # The first and last factor when multiplied should give N.\n    # Similarly, the second last and second factors when multiplied should give N, and so on.\n    # Therefore, the 6th factor would be N/2, 7th factor would be N/4, and 8th factor would be N/7.\n    # The product of the 1st and 8th factor would be N = 1 * N/7, which gives us 7.\n    # The product of the 2nd and 7th factor would be N = 2 * N/4, which gives us 8.\n    # Thus, the number N = 7 * 8 = 56.\n    \n    N = 7 * 8\n    return N\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Thomas's logic is incorrect. His addition does not take into account that the half is of the remainder, not of the initial amount.\n    # Let x be the amount of money Li Yan had originally.\n    # She spent 1/3 of it on a book, so she had 2/3 of it left.\n    # Then she spent 1/2 of the remainder on a bag.\n    # So the cost of the book is (1/3)x and the cost of the bag is (1/2)(2/3)x = (1/3)x.\n    # Together, the book and the bag cost (1/3)x + (1/3)x = (2/3)x.\n    # This total is given as $132, so we need to solve (2/3)x = 132 for x.\n\n    # Calculate how much 1 unit is\n    one_unit = 132 / (2/3)\n    \n    # Calculate the original amount of money (6 units)\n    original_money = one_unit\n    \n    return original_money\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    return 8234 - 909\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percentage = 10\n    discount_amount = original_price * (discount_percentage / 100)\n    sale_price = original_price - discount_amount\n    \n    return sale_price\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    cookies_sold_first_month = 1680\n    # Calculate the fraction of cookies kept after the first month\n    fraction_kept_first_month = 1 - (cookies_sold_first_month / 1680)\n\n    # Calculate the number of cookies sold in the second month, which is 7/20 more\n    cookies_sold_second_month = cookies_sold_first_month * (1 + 7/20)\n\n    # Calculate the new fraction of cookies kept after the second month\n    # This is decreased by 3/20\n    fraction_kept_second_month = fraction_kept_first_month - 3/20\n\n    # The amount of cookies kept is the same in both months\n    # so the fraction of cookies kept relative to the total number of cookies\n    # should be the same\n    # Therefore, we can set up an equation cookies_sold_second_month / x = fraction_kept_second_month\n    # where x is the total number of cookies in the box\n    x = cookies_sold_second_month / fraction_kept_second_month\n\n    return int(x)\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position = 6\n    amy_position = 8\n    total_children = jolene_position + amy_position - 1\n\n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    distance_per_cycle = (5 * 2) - 3  # Two jumps up and one fall down\n    distance_after_full_cycles = 40 - 5  # Need to subtract the last jump to avoid fall down\n    full_cycles_needed = distance_after_full_cycles // distance_per_cycle\n    remaining_distance = distance_after_full_cycles % distance_per_cycle\n\n    jumps = full_cycles_needed * 2  # Two jumps per full cycle\n    if remaining_distance > 0:\n        jumps += 1  # Additional jump for the remaining distance\n\n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (1, 5),  # remainder 1 when divided by 5\n        (2, 6),  # remainder 2 when divided by 6\n        (9, 11)  # remainder 9 when divided by 11\n    ]\n\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    spacing = 4\n    \n    # Total length of the pentagon's perimeter\n    perimeter = 5 * side_length\n    \n    # Number of sunflowers along the sides, excluding the corners\n    sunflowers_on_sides = (perimeter // spacing) - 5\n    \n    # Total sunflowers, including the corners\n    total_sunflowers = sunflowers_on_sides + 5\n    \n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the number of cows and 'g' be the number of goats initially.\n    c, g = symbols('c g')\n\n    # 65% of the animals in the farm were cows. Therefore, the number of cows is 0.65 times the total number of animals.\n    # So, the number of goats is the total number of animals minus the number of cows.\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 more cows and goats were added, the total number of animals became c + g + 240.\n    # The percentage of cows increased by 20%, so it became 65% + 20% = 85% of the new total.\n    # The number of goats doubled, so it became 2 * g.\n    equation2 = Eq(0.85 * (c + g + 240), c + 240)\n    equation3 = Eq(2 * g, g + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    money_pounds = 3\n    money_pence = money_pounds * 100  # convert pounds to pence\n    num_stamps = money_pence // stamp_cost_pence\n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    capacity = 7\n    trip_time = 2  # time for one-way trip across the river\n\n    # Count how many groups of 7 can be made\n    full_trips = adventurers // capacity\n\n    # We need one less return trip than the number of full trips\n    # because on the final trip, the boat doesn't need to return\n    total_time = (full_trips * trip_time * 2) - trip_time\n\n    # Check if there are any adventurers left for a partial trip\n    if adventurers % capacity > 0:\n        total_time += trip_time  # for the final trip with the remaining adventurers\n\n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let the usual time taken by Ryan to drive to London be t hours.\n    # Therefore, distance = speed * time, which should be the same regardless of the speed.\n\n    # Usual speed distance = 45 * t\n    # Reduced speed distance = 30 * (t + 2)\n\n    # Since the distances are equal we have:\n    # 45 * t = 30 * (t + 2)\n    \n    # Solving for t gives us:\n    t = (30 * 2) / (45 - 30)\n\n    # Return the usual time taken by Ryan to drive to London\n    return t\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(100) // factorial(98)\n\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    # Loop through the digits 0 to 9 to find the smallest possible digit\n    for digit in range(10):\n        number = int(f'976{digit}3')\n        if number % 3 == 0:  # Check for divisibility by 3\n            return digit  # Return the smallest digit that makes the number divisible by 3\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Calculate the sum twice (ascending + descending) minus the peak value to avoid counting it twice\n    # 3+4+5+...10 = sum(range(3, 11))\n    # 10+9+...+3 = sum(range(3, 11)) again, but we will subtract 10 because it's counted twice\n    total_sum = 2 * sum(range(3, 11)) - 10\n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    ways = [[0] * (5 + 1) for _ in range(5 + 1)]\n    ways[0][0] = 1\n\n    for i in range(1, 5 + 1):\n        for j in range(0, 5 + 1):\n            ways[i][j] = ways[i - 1][j]\n            if j >= i:\n                ways[i][j] += ways[i][j - i]\n\n    return ways[5][5] - 1 # Subtracting 1 as we have to exclude the number itself.\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for i in range(1995):\n        a, b = b, (a + b) % 3  # We only need the remainder when dividing by 3\n    return a\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    import math\n\n    numerator = 4.219**2 / (4 + 2/3 + 38/59)\n    denominator = 2.501**3\n\n    result = numerator / denominator\n    ans = round(result, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students and y be the total number of sweets\n    x, y = symbols('x y')\n\n    # Based on the problem, set up two equations\n    equation1 = Eq(6 * x - y, 26)\n    equation2 = Eq(5 * x - y, 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The solution for the number of sweets is y\n    return solutions[y]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    for first_tree in range(1, 225):\n        # Calculate the sum based on the first tree's fruits\n        # The difference between the neighboring trees is 1\n        total_sum = 0\n        for i in range(8):\n            total_sum += first_tree + i\n\n        # If the total_sum matches the desired sum, return the equation\n        if total_sum == 225:\n            return (first_tree, first_tree + 1, first_tree + 2, first_tree + 3,\n                    first_tree + 4, first_tree + 5, first_tree + 6, first_tree + 7)\n\n    # If no solution found, return explanation: the sum of fruits cannot be an odd number\n    return \"It is not possible, because the sum of an even number of consecutive integers is even.\"\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, blue = symbols('white blue')\n    equation1 = Eq(white, 6 * blue)\n    equation2 = Eq(white + blue, 63)\n\n    solutions = solve((equation1, equation2), (white, blue))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let leo_age represent Leo's current age, \n    # son_age represent his son's current age\n    leo_age, son_age = symbols('leo_age son_age')\n\n    # Create equations based on the problem statement\n    # When Leo was son_age, his son was 4\n    equation1 = Eq(leo_age - son_age, son_age - 4)\n    \n    # When his son reaches leo_age, Leo will be 70\n    equation2 = Eq(leo_age + (leo_age - son_age), 70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo_age, son_age))\n    \n    # Return Leo's current age\n    return solutions[leo_age]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    heidi_age = 8\n    dad_age = 50\n    years_later = 0\n\n    while (dad_age + years_later) != 4 * (heidi_age + years_later):\n        years_later += 1\n\n    return years_later\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    ans = 554 + 479\n    return ans\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    prime_factor_5 = 0\n    for i in range(1, 61):\n        while i % 5 == 0:\n            prime_factor_5 += 1\n            i //= 5\n    \n    ans = prime_factor_5 \n    return ans\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    initial_average = 120\n    new_average = 150\n    num_numbers_initial = 3\n    \n    # Calculate initial total\n    initial_total = initial_average * num_numbers_initial\n    num_numbers_new = num_numbers_initial + 1\n    \n    # Calculate new total\n    new_total = new_average * num_numbers_new\n    \n    # Find the fourth number which is the difference between new total and initial total\n    fourth_number = new_total - initial_total\n    \n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    square = symbols('square')\n    equation = Eq(square * 15, 11 * 14 + 26)\n    ans = solve(equation, square)[0]\n    return ans\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    r = symbols('r')\n    equation = Eq(216 * r, r**2)\n    solved_r = solve(equation, r)\n\n    # We want only the positive solution since r representing a number should be positive\n    ans = max(solved_r)\n    return ans\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # They are 4 singing performances (S) and 3 dancing (D)\n    # So the possible arrangements where at least 1 S is between every D are:\n    # D S D S D S S S, D S D S S S D S, D S S S D S D S\n    # This means, we can think of the 3 D's as forming 4 slots (one at the beginning,\n    # one at the end, and two in the middle) where S performances can be placed.\n    # This is similar to the idea of arranging books in bookshelves.\n    \n    # Calculate the number of ways to put 4 S into these 4 slots.\n    # This is like finding the number of ways to distribute 4 indistinguishable items (S)\n    # into 4 distinguishable bins (slots between D's), where each bin must contain at least 1 item.\n    # This is equivalent to a \"stars and bars\" problem\n    # We have 4 S and 3 separations (the D's), so we have to choose 3 positions from these 7 to place the D's.\n    # Number of ways to choose 3 positions out of 7\n    ways_to_distribute_S = factorial(7) // (factorial(3) * factorial(4))\n\n    # Now for each of these distributions, we need to arrange the S's and D's in order.\n    # The S's are indistinguishable and so are the D's.\n    # However, each distribution is a specific order, so we don't have to consider permutations within the distributions.\n    \n    return ways_to_distribute_S\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    return 10.5 * 4\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    fraction = 3 / 13\n    total = 52\n    ans = fraction * total\n    return ans\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    climbing_per_day = 8\n    sliding_at_night = 3\n    total_days = 9\n    \n    # Depth of the well before the last day climb\n    # since on the last day it climbs out of the well\n    well_depth_before_last_day = (total_days - 1) * (climbing_per_day - sliding_at_night)\n    \n    # Adding the last climb which enables the snail to get out of the well\n    total_well_depth = well_depth_before_last_day + climbing_per_day\n    \n    return total_well_depth\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount = 15\n    discount_amount = (discount / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    # Applying Inclusion-Exclusion Principle\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n    \n    return only_french\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for a bag of sweets and a can of drink\n    sweets, drink = symbols('sweets drink')\n\n    # Rachel's purchase equation: 3 bags of sweets + 5 cans of drink = £4.90\n    equation1 = Eq(3 * sweets + 5 * drink, 4.90)\n    \n    # Rosie's purchase equation: 1 bag of sweets + 3 cans of drink = £2.70\n    equation2 = Eq(sweets + 3 * drink, 2.70)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sweets, drink))\n    \n    # Return the cost of a bag of sweets\n    return solutions[sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n    # There are six friends, including Teddy.\n    total_people = 6\n\n    # Teddy can be in any of the 5 positions, except the furthest left.\n    teddy_positions = total_people - 1\n\n    # The remaining 5 people can be arranged in any order\n    # in the remaining 5 positions.\n    arrangements_without_teddy = factorial(total_people - 1)\n    \n    # Total number of ways they can line up.\n    total_arrangements = teddy_positions * arrangements_without_teddy\n\n    return total_arrangements\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    n = 1  # term count starts at 1\n\n    while first_term > 0:\n        first_term += common_difference\n        if first_term > 0:\n            n += 1\n\n    return n\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    return int(963 * (4/9))\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if (i // 10 + i % 10) % 7 == 0:  # Sum the digits and check if it's a multiple of 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Each of the seven numbers forms an arithmetic sequence.\n    # Let the middle number be 'x'. The numbers are (x-3), (x-2), (x-1), x, (x+1), (x+2), (x+3)\n    # The sum of these numbers is 7x because the -3, -2, -1, 0, 1, 2, 3 cancel each other out.\n    # So we have 7x = 280.\n    # Solving for x gives us the middle number.\n    x = 280 // 7\n    \n    # The largest number is 3 more than the middle number.\n    largest_number = x + 3\n    \n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    def difference_of_squares(a, b):\n        return a**2 - b**2\n\n    ans = sum(difference_of_squares(1000 - 10 * i, 990 - 10 * i) for i in range(5))\n\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]  # Since x is the bigger number\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = 0\n    for i in range(2, 21, 2):\n        if i % 4 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # The given series contains terms of the form (2n)^2\n    # where n = 1, 2, 3, ..., 9. We need to calculate the sum\n    # of squares of these numbers.\n    n_max = 9\n    sum_squares = sum([(2*n)**2 for n in range(1, n_max+1)])\n    return sum_squares\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n    \n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n    \n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n    \n    return solutions[angel]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    from math import gcd\n\n    # Find all 3-digit numbers that are multiples of 75.\n    # Since A and B have a GCD of 75, they must both be multiples of 75.\n    # 3-digit multiples of 75 range from 100 to 999.\n    multiples_of_75 = [i for i in range(100, 1000) if i % 75 == 0]\n\n    # Check if a number has two equal digits.\n    def has_two_equal_digits(number):\n        number_str = str(number)\n        for i in range(len(number_str)):\n            for j in range(i + 1, len(number_str)):\n                if number_str[i] == number_str[j]:\n                    return True\n        return False\n\n    largest_sum = 0\n\n    # Check each pair of multiples to find the largest sum where each number has two equal digits.\n    for i in range(len(multiples_of_75)):\n        for j in range(i + 1, len(multiples_of_75)):\n            A = multiples_of_75[i]\n            B = multiples_of_75[j]\n            if has_two_equal_digits(A) and has_two_equal_digits(B) and gcd(A, B) == 75:\n                largest_sum = max(largest_sum, A + B)\n\n    return largest_sum\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    space = 0\n    skip_next = False\n    \n    for throw in throws:\n        if skip_next:\n            space -= throw # go back the number on the next throw\n            skip_next = False\n        elif throw == 6:\n            skip_next = True # throw a 6, do not move this turn\n        else:\n            space += throw\n        \n    return space\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    # Equation before the transaction\n    equation1 = Eq(alex + brayden, 756)\n    \n    # Equation after Alex gives $65 to Brayden\n    # Alex will have alex - 65 and Brayden will have brayden + 65\n    # After this transaction, Alex has three times as much as Brayden\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):       # Let's start with a reasonable upper limit.\n        left = gums - 2               # Ate 2 in Music lesson\n        shared = left // 3            # Shared one third with friends\n        if left % 3 != 0:             # Can only share a whole number of gums\n            continue                  # Skip to next number of gums\n      \n        left_after_sharing = left - shared  # Gums left after sharing\n        if left_after_sharing % 4 != 0:     # Must be able to eat an equal amount in next lessons\n            continue                        # Skip to next number of gums\n          \n        return gums  # Return the smallest number of gums that satisfies all conditions\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate_initial = 13\n    james_initial = 28\n\n    # After James gives Kate some money, they have the same amount of money.\n    # Let x be the amount James gives to Kate.\n    # Kate's new amount will be (13 + x) and James's new amount will be (28 - x).\n    # These two must be equal.\n    # 13 + x = 28 - x\n    # Solving for x gives us x = (28 - 13) / 2\n    x = (james_initial - kate_initial) / 2\n\n    # James gives Kate amount x.\n    return x\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # Tom must start and end with a storybook because he wants at least one magazine between every two storybooks.\n    # So, we have spots for magazines like this (where S is a storybook and _ is a spot for a magazine): \n    # S _ S _ S _ S _ S.\n    # We can place at most one magazine in each spot, and since there are 5 magazines and 4 spots, one magazine\n    # must be placed at either end with the storybooks, which gives us 5 choices for which magazine it will be.\n    # Now, we have 4 magazines to place in 4 spots, which is a straight permutation since the magazines are distinct.\n    \n    # Total arrangements for 4 remaining magazines in 4 spots\n    magazine_arrangements = factorial(4)  # Which is equal to 4!\n    \n    # For the storybooks, there are distinct spots for each one, and we have 5 storybooks\n    storybook_arrangements = factorial(5)  # Which is equal to 5!\n    \n    # The number of ways to choose which magazine will go with the storybooks at either end\n    choices_for_end_magazine = 5\n    \n    # Total different ways to arrange books\n    total_arrangements = choices_for_end_magazine * magazine_arrangements * storybook_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    # The smallest dividend can be found by the smallest divisor that is greater than the remainder.\n    smallest_divisor = remainder + 1\n    \n    # Calculate the dividend with the formula: dividend = divisor * quotient + remainder\n    dividend = smallest_divisor * quotient + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = int(f\"42{A}28{B}\")\n            if number % 99 == 0:\n                return int(f\"{A}{B}\")\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum_initial = 10 * 10\n    total_sum_remaining = 9 * 9\n    number_removed = total_sum_initial - total_sum_remaining\n    return number_removed\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kph = 3.6  # Lucy's speed in kilometers per hour\n    speed_mps = speed_kph * (1000 / 3600)  # Convert speed to meters per second\n    time_seconds = 300  # Time in seconds\n\n    distance_meters = speed_mps * time_seconds  # Distance in meters\n\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money, each_with_sister, each_without_sister = symbols('total_money each_with_sister each_without_sister')\n    \n    # When the sister is included\n    equation1 = Eq(each_with_sister, total_money / 4)\n    \n    # When the sister is not included\n    equation2 = Eq(each_without_sister, total_money / 3)\n    \n    # The amount is increased by 20 when the brothers share without the sister\n    equation3 = Eq(each_without_sister, each_with_sister + 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (total_money, each_with_sister, each_without_sister))\n\n    return solutions[total_money]\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # We know that the sum of squares of the first n odd numbers can be computed using the formula:\n    # 1^3 + 3^3 + 5^3 + ... + (2n-1)^3 = (n(2n-1))^2 / 4\n    n = (21 + 1) // 2  # (last_odd + 1) / 2 gives us the number of odd numbers in the sequence\n    ans = (n * (2 * n - 1)) ** 2 // 4\n    return ans\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    totals = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]  # Sum of each set of 4 numbers\n    grand_total = sum(totals)  # Sum of totals will include each number 4 times\n    individual_sum = grand_total // 4  # Correct sum of all 5 numbers\n    largest_number = max(totals) - individual_sum + (grand_total // 20)  # The largest number\n    \n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_multiplier = 5 / 4\n    science_books = (art_books / 3) * science_books_multiplier\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for Katelyn and Jared's stickers\n    katelyn, jared = symbols('katelyn jared')\n    \n    # Equation for the ratio\n    equation1 = Eq(katelyn / jared, 2 / 5)\n    # Equation for the difference in the number of stickers\n    equation2 = Eq(jared - katelyn, 60)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (katelyn, jared))\n    \n    # Calculate the total number of stickers\n    total_stickers = solutions[katelyn] + solutions[jared]\n    \n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    principal = 10000\n    rate_first_three_years = 0.05\n    rate_last_two_years = 0.10\n\n    # Compound interest for the first three years\n    amount_after_three_years = principal * (1 + rate_first_three_years) ** 3\n\n    # Compound interest for the last two years with the new principal\n    final_amount = amount_after_three_years * (1 + rate_last_two_years) ** 2\n\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # To minimize the number of cuts, we need to stack the sausages in groups\n    # where each person would get the same amount after a single cut\n    # The greatest common divisor (GCD) is the highest number of pieces\n    # each person can get with equal distribution.\n    from math import gcd\n\n    # Calculate the GCD of sausages and people\n    common_divisor = gcd(16, 24)\n\n    # The number of pieces each person gets\n    pieces_per_person = 24 // common_divisor\n\n    # The number of cuts needed is one less than the number of pieces per person\n    cuts_needed = pieces_per_person - 1\n\n    return cuts_needed\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, blue = symbols('red green blue')\n    total_beads_left = 350\n    blue_beads_left = blue - 112\n    \n    equation1 = Eq(red, 2 * green)\n    equation2 = Eq(blue_beads_left, red - 50)\n    equation3 = Eq(red + green + blue_beads_left, total_beads_left)\n    equation4 = Eq(red, green)\n    equation5 = Eq(red, blue)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (red, green, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    textbooks = [42, 63, 28]\n    stack_size = gcd(gcd(textbooks[0], textbooks[1]), textbooks[2])\n\n    return stack_size\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    star_per_hour, nini_per_hour = symbols('star_per_hour nini_per_hour')\n    \n    equation1 = Eq(5 * star_per_hour + 20 * nini_per_hour, 1)\n    equation2 = Eq(20 * star_per_hour + 8 * nini_per_hour, 1)\n    \n    solutions = solve((equation1, equation2), (star_per_hour, nini_per_hour))\n    \n    nini_time = 1 / solutions[nini_per_hour]\n    \n    return nini_time\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # If 4 construction companies can build a 900m expressway in 5 days,\n    # then 1 construction company will take 4 times as long, which is 20 days\n    # to build the same 900m expressway.\n    days_for_900m = 4 * 5 # because work is inversely proportional to number of companies\n    \n    # If 1 construction company takes 20 days to build a 900m expressway,\n    # then it will take 3 times as many days to build a 2700m expressway,\n    # since the length of the expressway is directly proportional to the time taken.\n    days_for_2700m = days_for_900m * 3 # because time is directly proportional to the length of the expressway\n    \n    return days_for_2700m\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    # Assume Isobel's flight duration is 'x' hours\n    # St Petersburg is 3 hours ahead of Manchester\n    # The plane arrives at 12 noon St Petersburg time, which corresponds to 9 AM Manchester time\n    # Thus, to find when the plane left Manchester, we subtract 'x' hours from 9 AM Manchester time\n    \n    # If we assume the flight took 'x' hours and based on the information, 'x' hours before 9 AM is the departure time.\n    # Since 'x' is not provided in the question, we cannot calculate the actual departure time.\n    # There is not enough given information to find a solution for 'x'.\n    \n    # Since we can't define 'x', we can return a placeholder value like None to indicate that the solution is indeterminate.\n    return None\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    ans = kg * kg_to_lbs\n    return ans\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    height_difference = 45\n    ben_height = jane_height - height_difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben's position from the front of the queue\n    ben_position = 6\n    # Frank's position from the back of the queue\n    frank_reverse_position = 9\n    # Number of people between Ben and Frank\n    people_between = 10\n\n    # Calculate the total number of people in the queue\n    # This includes the people before Ben, between Ben and Frank, Frank,\n    # and the people behind Frank in the queue.\n    total_people = (ben_position - 1) + people_between + 1 + (frank_reverse_position - 1)\n\n    # Check if Ben's answer is correct\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_liters = 6\n    \n    total_liters = (coffee_liters / coffee_ratio) * (coffee_ratio + milk_ratio)\n    \n    return total_liters\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 8 == 2 and i % 11 == 2:\n            return i\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(32, 1, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    red_fraction = 2/5\n    green_fraction = 1/3\n    yellow_count = 96\n    # Let's denote the total number of marbles in the jar as 'total_marbles'.\n\n    # According to the problem, yellow marbles account for the remaining fraction of the total marbles.\n    # The fraction of yellow marbles is thus 1 - (red_fraction + green_fraction).\n    \n    yellow_fraction = 1 - red_fraction - green_fraction\n    \n    # So we set up an equation based on fractions to find out the total number of marbles:\n    # total_marbles * yellow_fraction = yellow_count\n    total_marbles = yellow_count / yellow_fraction\n    \n    return int(total_marbles)\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09  # 9%\n    years = 5\n    \n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    number = 42663\n    divisor = 9\n\n    remainder = (number % divisor) ** 2 % divisor\n\n    return remainder\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Given speeds\n    speed_qiqi = 60  # in m/min\n    speed_weiling = 72  # in m/min\n\n    # Time delay of Weiling's start\n    time_delay_weiling = 2  # in minutes\n\n    # Weiling arrives 4 minutes earlier\n    time_difference_arrival = 4  # in minutes\n\n    # Let's denote the time taken by Qiqi to reach the school as t minutes\n    # Then the time taken by Weiling is (t - time_delay_weiling - time_difference_arrival)\n    # They cover the same distance, so\n    # speed_qiqi * t = speed_weiling * (t - time_delay_weiling - time_difference_arrival)\n    \n    # Solving for t gives us the time taken by Qiqi\n    t = (speed_weiling * (time_delay_weiling + time_difference_arrival)) / (speed_weiling - speed_qiqi)\n\n    # Now we can find the distance, which is speed_qiqi * t\n    distance = speed_qiqi * t\n\n    return distance\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    sum_of_series = 0\n    for i in range(1, 2016):\n        sum_of_series += int(\"1\" * i)\n    \n    return sum_of_series % 10000  # Return the last 4 digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    # Loop through all three-digit numbers starting with 1 and ending with 9 for the hundreds place\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                # Check if the digits add up to 8\n                if hundreds + tens + ones == 8:\n                    # Check if the number is even\n                    if ones % 2 == 0:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    last_digit_13 = pow(13, 242, 10)\n    last_digit_17 = pow(17, 379, 10)\n    last_digit_4 = pow(4, 2012, 10)\n    \n    total_last_digit = (last_digit_13 + (last_digit_17 * last_digit_4)) % 10\n    \n    return total_last_digit\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # There are only 2 colors: blue and yellow.\n    # Worst case scenario, we might pick one marble of each color before picking 2 marbles of the same color.\n    # So, we need to pick 3 marbles to be sure that at least 2 of them are of the same color.\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3  # As the sequence is decreasing\n    n = 7  # We are looking for the 7th term\n\n    # The nth term of an arithmetic sequence can be found by the formula:\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let the original sum of money be x\n    # Mrs. Chen spent $36 on plates, so she has x - 36 left\n    # Then she spends 3/4 of (x - 36) on cups, so she has 1/4 of (x - 36) left\n    # According to the problem, she has 1/6 of the original x left\n    # So, we set up the equation 1/4 * (x - 36) = 1/6 * x\n    # Solving for x gives us the original sum of money\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Original sum of money\n    equation = Eq(1/4 * (x - 36), 1/6 * x)\n    solution = solve(equation, x)\n\n    return solution[0]  # Return the original sum of money\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "def solution():\n    from itertools import permutations\n    \n    max_sum_A = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        abc = a * 100 + b * 10 + c\n        bcd = b * 100 + c * 10 + d\n        cde = c * 100 + d * 10 + e\n        def_ = d * 100 + e * 10 + f  # Using def_ instead of def because def is a keyword in Python\n        efg = e * 100 + f * 10 + g\n        fgh = f * 100 + g * 10 + h\n        ghi = g * 100 + h * 10 + i\n        sum_A = abc + bcd + cde + def_ + efg + fgh + ghi\n        \n        max_sum_A = max(max_sum_A, sum_A)\n    \n    return max_sum_A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile_in_minutes = 2 + 30 / 60\n    hours_to_minutes = 1 * 60\n\n    miles_in_an_hour = hours_to_minutes / time_per_mile_in_minutes\n\n    return miles_in_an_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0 # Current count of numbers\n    current = 8 # Starting number\n    while True:\n        if str(current)[0] == '8':\n            count += 1\n        if count == 2012:\n            return current\n        current += 1\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # n = number of balls for the middle student\n    # in an arithmetic sequence of 5 terms with a difference of 1,\n    # the sum is given by 5n\n    # The sum of five consecutive numbers is 160.\n    \n    # Because they are consecutive, we can express them as:\n    # n-2, n-1, n, n+1, n+2\n    # The sum is then (n-2) + (n-1) + n + (n+1) + (n+2) = 5n\n    # 5n = 160, the total number of balls\n    n = 160 // 5\n    \n    # The student with the most balls has n+2 balls\n    ans = n + 2\n    \n    return ans\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    total_envelopes = 15\n    ways = 0\n    \n    # Iterate over the possible number of letters in box A (at least 2)\n    for boxA in range(2, total_envelopes - 4 - 3 + 1):\n        for boxB in range(4, total_envelopes - boxA - 3 + 1):\n            for boxC in range(3, total_envelopes - boxA - boxB + 1):\n                boxD = total_envelopes - boxA - boxB - boxC\n                if boxD >= 0:\n                    ways += 1\n    \n    return ways\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    max_age = 50  # Assumption for upper bound of age for practical search\n    solutions = []\n\n    for j in range(1, max_age):  # John's age\n        m = j - 1  # Mary's age, John is one year older than Mary\n\n        for c1 in range(1, max_age):  # Oldest child's age\n            for c2 in range(c1-2, 0, -1):  # Second child's age, two years apart\n                c3 = c2 - 2  # Youngest child's age, two years apart\n\n                # Product of ages this year\n                prod_this_year = j * m * c1 * c2 * c3\n                # Product of ages next year\n                prod_next_year = (j + 1) * (m + 1) * (c1 + 1) * (c2 + 1) * (c3 + 1)\n\n                # Check if the condition meets\n                if prod_this_year < 2019 and prod_next_year > 2020:\n                    # Calculate the sum of all five ages\n                    sum_of_ages = j + m + c1 + c2 + c3\n                    solutions.append(sum_of_ages)\n\n    # It's expected we will find only one solution satisfying all constraints\n    return solutions[0] if solutions else None\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total_amount = 80\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    income = symbols('income')\n    \n    tax = Eq(0.15 * 20000 + 0.20 * (income - 20000), 7000)\n\n    solutions = solve(tax, income)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(47 - 2*(x + 3), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 / 10\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Find the recurring cycle of 1/13\n    decimal = []\n    remainder = 1\n    remainders_seen = {}\n\n    # Keep going until we see a remainder that we've seen before\n    while remainder not in remainders_seen:\n        remainders_seen[remainder] = len(decimal)\n        remainder *= 10\n        decimal.append(remainder // 13)\n        remainder %= 13\n    \n    # Identify the cycle length\n    cycle_start = remainders_seen[remainder]\n    cycle_length = len(decimal) - cycle_start\n    \n    # Find the index in the cycle for the 2022th decimal place\n    index_in_cycle = (2022 - 1) % cycle_length  # -1 because we start counting from 0\n    \n    # Return the digit at that cycle index\n    return decimal[cycle_start + index_in_cycle]\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n    \n    length1 = 28\n    length2 = 14\n    length3 = 56\n    \n    # Calculate the greatest common divisor of the three lengths\n    gcd_12 = gcd(length1, length2)\n    longest_piece_length = gcd(gcd_12, length3)\n    \n    return longest_piece_length\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of packs of potato chips each store had initially\n    x = symbols('x')\n\n    # After store A sold 290 packs, store B had 3 times as many as store A had left\n    equation = Eq(x - 290, 3 * (x - 290))\n\n    # Solve the equation for x\n    store_initial_amount = solve(equation, x)[0]\n\n    # The total number of packs initially is twice the amount one store had\n    total_initial_amount = store_initial_amount * 2\n\n    return total_initial_amount\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    boys_packed_lunch = 4\n    \n    girls = total_students - boys\n    girls_school_lunch = 7\n    \n    students_home_lunch = 5\n    boys_home_lunch = 3\n    girls_home_lunch = students_home_lunch - boys_home_lunch\n    \n    girls_packed_lunch = girls - girls_school_lunch - girls_home_lunch\n    total_packed_lunch = boys_packed_lunch + girls_packed_lunch\n    \n    return total_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolate_cost = 20 * 6\n    total_milk_chocolate_cost = 20 * 5\n    total_stawberry_chocolate_cost = 20 * 4\n\n    total_cost = total_dark_chocolate_cost + total_milk_chocolate_cost + total_stawberry_chocolate_cost\n    \n    total_chocolates = 20 + 20 + 20\n    \n    average_cost = total_cost / total_chocolates\n    \n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_to_make = 3600\n    days_for_initial_sets = 5\n\n    rate_per_day = sets_made_in_5_days / days_for_initial_sets\n    total_days_needed = total_sets_to_make / rate_per_day\n\n    return total_days_needed\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    last_number = 100 - 1  # We subtract 1 because we want numbers less than 100\n    first_divisible = 12   # First number divisible by 12\n    last_divisible = last_number - (last_number % 12)  # Last number less than 100 divisible by 12\n    num_terms = (last_divisible - first_divisible) // 12 + 1  # Compute the number of terms\n    \n    return num_terms\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10*(x+1) - 5*(x+1) - 28, 2)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in meters per second\n    time = 19   # time in seconds to pass a tree\n\n    # Distance = speed * time\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    man_rate = 1 / 15\n    together_rate = 1 / 12\n    wife_rate = together_rate - man_rate\n    wife_time = 1 / wife_rate\n    return wife_time\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1 / i)\n    ans = int(result)\n    return ans\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_items = 18 + 30 + 18  # total number of pears, strawberries, and boxes of chocolate\n    num_friends = 6  # number of friends\n    items_per_friend = total_items // num_friends  # integer division to find items per friend\n\n    return items_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n    total_wheels = wheels_per_tricycle * num_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    # Price for each book\n    price_per_book = 16\n\n    # Special offer: Buy 3, get 1 free\n    free_books_with_purchase_of = 3\n\n    # Number of books Subhan wants to get\n    books_wanted = 5\n\n    # Number of free books Subhan gets\n    free_books_received = books_wanted // (free_books_with_purchase_of + 1)\n\n    # Number of books Subhan needs to pay for\n    books_to_pay_for = books_wanted - free_books_received\n\n    # Total price to be paid\n    total_price = books_to_pay_for * price_per_book\n    \n    return total_price\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    b = symbols('b')  # Number of boys\n    g = 40 - b  # Number of girls, since total pupils are 40\n\n    # b * average_boys + g * average_girls = total_pupils * average_total\n    equation = Eq(b * 20 + g * 60, 40 * 35)\n\n    solutions = solve(equation, b)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n\n    distance = mount_fuji_tip - turpan_depression_base\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    ans = (4 - remainder) % 4\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for number in range(1, 201):\n        count += str(number).count(\"1\")\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    for i in range(1, 51):\n        total += int(\"1\" * i)\n    ans = total % 100\n    return ans\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the symbols represent the number of children, men, and women.\n    children = symbols('children')\n\n    # As per the question, we are given the following relationships:\n    men = 3 * children              # there were thrice as many men as children\n    women = children + 190          # there were 190 more women than children\n\n    # Fraction of women given is 2/5, implying that 2/5 of the total is equal to women\n    total = symbols('total')\n    fraction_women_eq = Eq(women, 2/5 * total)\n\n    # Compute the total in terms of children using the equation derived from fraction of women\n    total_in_terms_of_children = solve(fraction_women_eq, total)[0]\n\n    # Substitute the expression for women into total\n    total_eq = Eq(total_in_terms_of_children.subs(women, children + 190), men + women + children)\n\n    # Solve for the number of children from the derived equation\n    number_of_children = solve(total_eq, children)[0]\n\n    # Calculate the total number of people using the number of children\n    ans = total_in_terms_of_children.subs(children, number_of_children)\n\n    return ans\n\n# Call the function to get the answer\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n\n    total_students = coding_only + math_only + both\n\n    return total_students\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    # Let x be the dividend (the number being divided)\n    # The incorrect division result is x / 211\n    # The correct division result is x / 2.11\n    # According to the problem statement:\n    # (x / 2.11) - (x / 211) = 98.01\n    \n    # Solve for x using algebra\n    x = symbols('x')\n    equation = Eq((x / 2.11) - (x / 211), 98.01)\n    solution = solve(equation, x)\n\n    # Find the true result\n    true_result = solution[0] / 2.11\n    return true_result\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John's and Choon Mui's original amount of money\n    john, choon_mui = symbols('john choon_mui')\n\n    # Since they had the same amount of money originally\n    equation1 = Eq(john, choon_mui)\n\n    # After spending money, John's amount is four times Choon Mui's amount left\n    equation2 = Eq(john - 30, 4 * (choon_mui - 150))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, choon_mui))\n\n    # Calculate how much John had left\n    john_left = solutions[john] - 30\n\n    return john_left\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    return seconds_per_week\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the price of an apple, and b be the price of a banana\n    a, b = symbols('a b')\n\n    # Two equations based on the problem statement\n    eq1 = Eq(6*a + 7*b, 8*a + 4*b)\n    eq2 = Eq(a, b)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a, b))\n\n    # The amount of money Einstein has can be calculated using either equation\n    total_money = 8 * solutions[a] + 4 * solutions[b]\n\n    # The number of bananas he can buy with the total money\n    number_of_bananas = total_money / solutions[b]\n\n    return number_of_bananas\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    male_first_day = symbols('male_first_day')\n    female_first_day = male_first_day - 450\n\n    # Equations for the second day\n    male_second_day = male_first_day * 0.82\n    female_second_day = female_first_day * 1.15\n\n    # Total visitors on the second day\n    total_second_day = male_second_day + female_second_day\n\n    # Set up the equation for the total and solve for the number of male visitors on the first day\n    equation = Eq(total_second_day, 1354)\n    solution = solve(equation, male_first_day)\n\n    # Return the number of male visitors on the first day\n    return solution[0]\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "from math import comb\n\ndef solution():\n    # There are at least 2 envelopes in A, 4 in B, and 3 in C, accounting for 9 envelopes.\n    # This means we only have 15 - 9 = 6 envelopes left to distribute.\n    \n    # We now calculate the number of ways to distribute these 6 envelopes into 4 mailboxes\n    # with no restrictions. This is equal to the number of ways to put 6 indistinguishable \n    # items into 4 distinguishable bins, which is a problem of combinations with repetitions.\n    # The formula for this is comb(n + r - 1, r), where n is the number of items and r \n    # is the number of bins.\n    \n    # In our case, n = 6 (envelopes left) and r = 4 (mailboxes), so we get:\n    ways = comb(6 + 4 - 1, 6)\n    return ways\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume x is the initial number of eggs in the basket\n    x = symbols('x')\n\n    # He sold 5 eggs more than half the number of eggs in his basket\n    eggs_sold_first = (x / 2) + 5\n\n    # Remaining eggs after the first sale\n    remaining_eggs = x - eggs_sold_first\n\n    # He then sold 4 eggs fewer than half of the remaining eggs\n    eggs_sold_second = (remaining_eggs / 2) - 4\n\n    # Remaining eggs after the second sale, which is 15\n    remaining_eggs_final = remaining_eggs - eggs_sold_second\n\n    # Set up the equation using the remaining eggs and solve for x\n    equation = Eq(remaining_eggs_final, 15)\n\n    solution = solve(equation, x)\n\n    # Return the initial number of eggs in the basket\n    return solution[0]\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    distance_miles = miles_per_hour * hours\n    \n    miles_to_kilometers = 1.60934\n    distance_km = distance_miles * miles_to_kilometers\n    \n    return distance_km\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10  # expressed as a percentage\n    increase_amount = original_amount * (percentage_increase / 100)\n    final_amount = original_amount + increase_amount\n    return final_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8\n    scale_ratio = 1 / 20\n    model_length_m = actual_length_m * scale_ratio\n    model_length_cm = model_length_m * 100  # converting meters to centimeters\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            if dice1 + dice2 == 8:\n                ways.append((dice1, dice2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    net_distance = day_distance - night_distance\n    \n    # Days to reach one day's climb away from the top\n    days_to_reach_last_climb = (total_distance - day_distance) // net_distance\n    \n    # Adding one because on the last day, the snail climbs out before sliding down\n    # Adding another one for the last day of climbing\n    days = days_to_reach_last_climb + 1 + 1\n    \n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95*x - (2/5)*x, 55)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # congruences: x ≡ 2 (mod 7) and x ≡ 2 (mod 13), x should be less than 100\n    congruences = [(2, 7), (2, 13)]\n    \n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    x, _ = solve_congruence(*congruences)\n\n    # Find the smallest positive solution less than 100\n    while x < 100:\n        ans = x\n        x += 7 * 13\n\n    return ans\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    # Derangements (subfactorials) of 4 items can be calculated as\n    # !n = (n - 1) * (!(n - 1) + !(n - 2))\n    # For n = 4, we calculate as follows:\n    # !4 = 3 * (!3 + !2)\n    # !3 = 2 * (!2 + !1)\n    # !2 = 1 * (!1 + !0)\n    # !1 = 0 and !0 = 1\n    # Calculating from base cases !1 and !0\n    subfactorial_1 = 0\n    subfactorial_0 = 1\n    subfactorial_2 = 1 * (subfactorial_1 + subfactorial_0)  # !2 = 1\n    subfactorial_3 = 2 * (subfactorial_2 + subfactorial_1)  # !3 = 2\n    subfactorial_4 = 3 * (subfactorial_3 + subfactorial_2)  # !4 = 9\n\n    return subfactorial_4\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    weekly_earnings = hourly_rate * 8 * 7\n    remaining_debt = 700 - weekly_earnings\n\n    if remaining_debt > 0:\n        return True  # He still could not pay off his debt.\n    else:\n        return False  # He could pay off his debt.\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n\n    ans = start_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n    return ans\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # Since the question is incomplete without details on what A represents, we cannot provide\n    # a specific answer. We'll assume A is a placeholder for a number puzzle we need to solve,\n    # but without the actual puzzle, the solution will return None.\n    A = None\n    return A\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        num_str = str(i)\n        if num_str.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_period = 14 # Arjun gets hair cut every 2 weeks, so 14 days\n    yahya_period = 10 # Yahya gets hair cut every 10 days\n\n    # The lcm function from the math module will give us the least common multiple\n    days_until_same_day = lcm(arjun_period, yahya_period)\n\n    return days_until_same_day\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Calculate time for each part of the race\n    time_280m = 280 / 7  # Time taken to complete 280 meters at 7 m/s\n    time_400m = 400 / 5  # Time taken to complete 400 meters at 5 m/s\n    time_120m = 120 / 8  # Time taken to complete 120 meters at 8 m/s (800m - 280m - 400m = 120m)\n\n    # Calculate total time\n    total_time = time_280m + time_400m + time_120m\n\n    return total_time\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    tree_spacing = 7\n    # Subtracting two spacings from the total length because no trees are planted at the ends\n    num_trees = (highway_length - (2 * tree_spacing)) // tree_spacing\n    \n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_left = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    # Applying inverse operations\n    initial_stamps = stamps_left + stamps_used - stamps_bought + stamps_given\n\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    shoe_cost = 30\n    fake_note_value = 50\n    loss = shoe_cost + fake_note_value\n    return loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n\n    sum_of_series = (first_term + last_term) * num_terms // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5/7) * 112\n    return result\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    sum_all = 0\n    # Since the number is divisible by 5, the last digit must be either 0 or 5\n    for last_digit in [0, 5]:\n        # The number also needs to be divisible by 3, meaning the sum of digits must\n        # be divisible by 3. We already know two of the digits, 2 and 9 (summing to 11),\n        # so we find the second digit such that 11 + second_digit + last_digit is divisible by 3.\n        for second_digit in range(10):\n            if (11 + second_digit + last_digit) % 3 == 0:\n                number = 2090 + (second_digit * 100) + last_digit\n                sum_all += number\n    return sum_all\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Create the initial string of numbers from 1 to 30 concatenated\n    number_string = ''.join(str(i) for i in range(1, 31))\n\n    # Since we want the smallest number, we start removing from the left (the highest value)\n    # We remove 46 digits\n    smallest_number_string = number_string[46:]\n\n    # Convert the resulting string back to a number\n    smallest_number = int(smallest_number_string)\n\n    return smallest_number\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, we need to consider the worst case scenario:\n    # That is, we could draw all blue balls first.\n    blue_balls = 6\n    \n    # Therefore, we must draw one more after all blue balls to guarantee a white ball.\n    balls_needed = blue_balls + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    num_pupils = 7\n\n    balloons_per_pupil = total_balloons // num_pupils\n\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    sum_first_part = sum(range(1, 5))\n    sum_second_part = sum(range(2018, 2021))\n    ans = (sum_first_part * 1) - (sum_second_part * 0)\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    # Define the length of each short ruler\n    short_ruler_length = 20\n    \n    # Define the overlapping length between each pair of rulers\n    overlap_length = 3\n    \n    # The total length of the bundle is the sum of the lengths of\n    # three short rulers minus twice the overlapping length\n    # because there are two overlaps when three rulers are tied together\n    total_length = (3 * short_ruler_length) - (2 * overlap_length)\n    \n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Time spent jogging: 1 hour (from 6:30 am to 7:30 am)\n    # Time spent walking: 2 hours (from 7:30 am to 9:30 am)\n\n    # Jogging speed: 6 miles per hour\n    # Walking speed: 5 miles per hour\n\n    jogging_distance = 1 * 6  # distance = time * speed\n    walking_distance = 2 * 5  # distance = time * speed\n\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    new_cups = 0\n    \n    while total_used_cups >= 7:\n        new = total_used_cups // 7\n        new_cups += new\n        total_used_cups = total_used_cups - new * 7 + new\n        \n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    total_number = 2000\n    number_to_subtract = 222\n    ans = total_number - number_to_subtract\n    return ans\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # convert plot length to cm\n    space_between_cauliflowers_cm = 15\n    first_cauliflower_distance_cm = 20\n    cauliflower_width_cm = 45\n\n    available_length_cm = plot_length_cm - first_cauliflower_distance_cm\n    total_space_needed_per_cauliflower_cm = space_between_cauliflowers_cm + cauliflower_width_cm\n\n    number_of_cauliflowers = available_length_cm // total_space_needed_per_cauliflower_cm\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    pages_first_3_days = 14 * 3\n    pages_next_2_days = 9 * 2\n    pages_sixth_day = 12\n    total_days = 6\n    \n    total_pages = pages_first_3_days + pages_next_2_days + pages_sixth_day\n    average_pages = total_pages / total_days\n\n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # meters per second\n    distance_km = 1.5  # kilometers\n    distance_m = distance_km * 10**3  # convert kilometers to meters\n    time_seconds = distance_m / speed_of_sound  # time = distance / speed\n\n    return time_seconds\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    n = 72\n    ans = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    badminton, bowling = symbols('badminton bowling')\n\n    # Define the equations based on the problem description\n    equation1 = Eq(badminton, 3 * bowling)\n    equation2 = Eq(badminton - 36, bowling - 4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (badminton, bowling))\n\n    # Get the number of members in each club after the members left\n    badminton_end = solutions[badminton] - 36\n    bowling_end = solutions[bowling] - 4\n\n    # Return the number of members in the end for both clubs\n    return badminton_end, bowling_end\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    difference = number1 - number2\n    return difference\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average_value = 126\n    difference = 6\n\n    # Number of cards\n    num_cards = total_value // average_value\n\n    # Since the difference between the greatest and the smallest is 6,\n    # and the numbers are in arithmetic sequence (because they are odd and consecutive),\n    # we know that the numbers are equally spaced around the average.\n    # Therefore, we can find the smallest number by subtracting half of the (num_cards - 1) * difference from the average.\n    smallest_number = average_value - (num_cards - 1) * difference // 2\n    \n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Define equations based on the problem\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    # Wendy's age in 5 years\n    wendy_future_age = solutions[wendy] + 5\n\n    return wendy_future_age\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial\n\n    # Treat A, B, and C as a single unit, so we have 8 units to arrange.\n    units_to_arrange = 8\n    arrangements_of_units = factorial(units_to_arrange)\n    \n    # Now arrange A, B, and C internally.\n    internal_arrangements = factorial(3)\n\n    # The total arrangements is the product of the two.\n    total_arrangements = arrangements_of_units * internal_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    def count_factors(n, factor):\n        count = 0\n        while n % factor == 0:\n            n //= factor\n            count += 1\n        return count\n\n    count_2s = 0\n    count_5s = 0\n    for i in range(301, 1000):\n        count_2s += count_factors(i, 2)\n        count_5s += count_factors(i, 5)\n\n    ans = min(count_2s, count_5s)\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_frac = sum(1/d for d in range(10, 20))\n    return int(sum_frac)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / (3 - 2)\n    return x\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if i % 6 == 0 and (i - 1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n\n    total_marbles = james + linda + ben\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n    total_students = english_classes + math_classes - both_classes\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    percentage_increase_per_year = 0.10\n    num_years = 2020 - 2018\n\n    initial_amount = final_amount / ((1 + percentage_increase_per_year) ** num_years)\n\n    return initial_amount\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n\n    # The total number of students is the sum of boys and girls\n    total_pupils_eq = Eq(g + b, 1690)\n\n    # There are 90 more boys than girls\n    boys_girls_eq = Eq(b - g, 90)\n\n    # The ratio of the number of girls who can swim to the number of girls who cannot swim is 31:49\n    # If x is the number of girls who can swim, then g = x + (49/31)*x\n    x = symbols('x')\n    girls_swim_ratio_eq = Eq(g, x + (49/31)*x)\n\n    # Solve for the number of girls\n    girls_solution = solve(girls_swim_ratio_eq, x)[0]\n    number_of_girls = girls_solution + (49/31)*girls_solution\n\n    # Solve for the number of boys using the total number of pupils and the 90 extra boys\n    number_of_boys = solve((total_pupils_eq, boys_girls_eq), (g, b))[b]\n\n    # The number of boys who can swim is 120 less than the number of boys who cannot swim\n    # Let y be the number of boys who cannot swim, then b = y + (y - 120)\n    y = symbols('y')\n    boys_swim_ratio_eq = Eq(b, y + (y - 120))\n\n    # Solve for the number of boys who cannot swim\n    boys_cannot_swim = solve(boys_swim_ratio_eq, y)[0]\n\n    # The number of girls who cannot swim is (49/31) times the number of girls who can swim\n    girls_cannot_swim = (49/31) * girls_solution\n\n    # The total number of pupils who cannot swim is the sum of boys and girls who cannot swim\n    total_cannot_swim = boys_cannot_swim + girls_cannot_swim\n\n    return total_cannot_swim\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(7) # Total ways to arrange 7 people\n    together_ways = factorial(3) * factorial(5) # Ways to arrange 3 people together and the rest\n    \n    # Subtract the cases where the 3 people are together from the total ways\n    ans = total_ways - together_ways \n    return ans\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speed of the golden rabbit and the sea turtle\n    speed_rabbit = 330  # m/min\n    speed_turtle = 30   # m/min\n\n    # Distance of the race\n    race_distance = 6990  # meters\n\n    # Golden rabbit runs for 10 minutes before sleeping\n    rabbit_distance_before_sleep = speed_rabbit * 10  # distance traveled by rabbit before sleep\n\n    # Time the turtle travels while the rabbit is sleeping (215 minutes + 10 minutes)\n    turtle_travel_time_during_rabbit_sleep = 215 + 10  # time in minutes\n\n    # Distance traveled by turtle during this time\n    turtle_distance_during_rabbit_sleep = speed_turtle * turtle_travel_time_during_rabbit_sleep\n\n    # Check if the turtle finishes the race during rabbit's sleep\n    if turtle_distance_during_rabbit_sleep >= race_distance:\n        # Turtle reaches the finish line first\n        winner = \"turtle\"\n        # Distance between them would be the remaining distance for the rabbit\n        distance_between = race_distance - rabbit_distance_before_sleep\n    else:\n        # Time the rabbit needs to finish the race after waking up\n        rabbit_time_after_sleep = (race_distance - rabbit_distance_before_sleep) / speed_rabbit\n\n        # Total time the turtle has been traveling when the rabbit finishes\n        total_turtle_travel_time = turtle_travel_time_during_rabbit_sleep + rabbit_time_after_sleep\n\n        # Distance traveled by the turtle when the rabbit finishes\n        turtle_distance_when_rabbit_finishes = speed_turtle * total_turtle_travel_time\n\n        if turtle_distance_when_rabbit_finishes >= race_distance:\n            # Turtle also reaches the finish line before the rabbit catches up\n            winner = \"rabbit\"\n            # Distance between them would be zero since turtle finished as well\n            distance_between = 0\n        else:\n            # Rabbit reaches the finish line first\n            winner = \"rabbit\"\n            # Distance between them would be the remaining distance for the turtle\n            distance_between = race_distance - turtle_distance_when_rabbit_finishes\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "网络故障，请重试"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    # Define the maximum factorial number\n    maximum_num = 789\n\n    # Initialize count of zeros\n    count_zeros = 0\n    \n    # Loop to find the power of 5 in the factorial because\n    # the number of zeros at the end is determined by the number of 5*2 pairs.\n    # Since there are always more 2s than 5s in a factorial, we only count 5s.\n    i = 5\n    while (maximum_num // i >= 1):\n        count_zeros += maximum_num // i\n        i *= 5\n\n    return count_zeros\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term + 1)\n    sum_sequence = (first_term + last_term) * num_terms // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let x be the number of students in Team B.\n    # Total score for Team A = average score of Team A * number of students in Team A\n    total_score_A = 76 * 20\n    # Total score for both teams = combined average score * (number of students in Team A + number of students in Team B)\n    # To find total combined score, we need the total number of students, \n    # which is (20 + x), and multiply it by the combined average score (70).\n    combined_average = 70\n    \n    # Equation based on the above logic:\n    # total_score_A + (average score of Team B * x) = combined average * (20 + x)\n    # 76 * 20 + 67 * x = 70 * (20 + x)\n    # Solve the equation for x to find the number of students in Team B.\n    # Rearrange the equation to isolate x.\n    \n    x = (combined_average * 20 - total_score_A) / (67 - combined_average)\n    return int(x)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    min_participants_in_top_school = 4\n    # According to the Pigeonhole Principle, we divide the total participants by the\n    # minimum number in the school with the most participants, and take the ceiling\n    # of that number to ensure at least 4 participants in the school with the most students.\n    max_schools = (participants - 1) // (min_participants_in_top_school - 1) + 1\n\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = \"{:02d}{:02d}\".format(hour, minute)\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_dice_roll = 6  # Maximum number achievable on a regular die\n\n    # Sam needs to get to the 25th position, subtract the 1st position\n    distance_to_travel = 25 - 1\n\n    # Calculate the minimum number of rolls needed\n    min_rolls = -(-distance_to_travel // max_dice_roll)\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 19\n    last_term = 2019\n    difference = 50\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = num_terms * (first_term + last_term) // 2\n    return total_sum\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(10):\n            if i + j == 15:\n                return i * 10 + j\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    return 2 - (-2 - 2) - (-2 - (-2 - 2))\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = list(permutations(digits, 3))\n    products = []\n\n    for perm1 in perms:\n        # The remaining digits for the second number once we've chosen the first number\n        remaining_digits = [d for d in digits if d not in perm1]\n        \n        # Now find all 3-digit permutations of the remaining digits\n        perms2 = list(permutations(remaining_digits, 3))\n        for perm2 in perms2:\n            # Convert the tuples to integers\n            num1 = int(''.join(map(str, perm1)))\n            num2 = int(''.join(map(str, perm2)))\n            products.append(num1 * num2)\n\n    return min(products)\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all permutations of digits from 1 to 9\n    digits = range(1, 10)\n    perms = permutations(digits, 7)\n    \n    max_product = 0\n    min_product = float('inf')\n    \n    # Iterate over each permutation\n    for perm in perms:\n        # Construct the 4-digit and 3-digit numbers from the permutation\n        ABCD = perm[0] * 1000 + perm[1] * 100 + perm[2] * 10 + perm[3]\n        EFG = perm[4] * 100 + perm[5] * 10 + perm[6]\n        \n        # Check if the sum matches the required total\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n    \n    ans = max_product - min_product  # Compute the difference between max and min products\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    result = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return result\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    # The net gain each hour before the final climb.\n    gain_per_hour = 40 - 10\n    \n    # Depth of the hole to reach in the final attempt\n    # Here we subtract the gain_per_hour because in the final climb, the mouse won't slip back\n    final_depth = 220 - 40\n    \n    # The number of hours it takes to reach the final attempt, not counting the final climb\n    hours = final_depth // gain_per_hour\n    \n    # Adding the final hour for the successful climb out of the hole\n    hours += 1\n    \n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    primes_less_than_30 = [i for i in range(2, 30) if isprime(i)]\n    return max(primes_less_than_30)\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    missing_number = 3989 - (3000 + 80 + 9)\n    return missing_number\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    total_typists = 5\n    words_typed = 6000\n    time_taken_minutes = 20\n    words_to_type = 9000\n    sick_typists = 2\n    remaining_typists = total_typists - sick_typists\n    \n    # Words per typist per minute\n    words_per_typist_per_minute = (words_typed / total_typists) / time_taken_minutes\n    \n    # Now we calculate time taken for remaining typists to type 9000 words\n    total_time_taken = words_to_type / (words_per_typist_per_minute * remaining_typists)\n    \n    return total_time_taken\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    price_per_cabbage = 0.96\n    total_cabbages = 8\n    total_lettuces = 6\n\n    total_amount_spent = price_per_cabbage * total_cabbages\n    price_per_lettuce = total_amount_spent / total_lettuces\n\n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    initial_plants = 11\n    remaining_plants = 11 - 8\n    \n    initial_intervals = initial_plants - 1\n    new_intervals = remaining_plants - 1\n    \n    new_spacing = total_distance / new_intervals\n\n    return new_spacing\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    n = 20\n    factors = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    total_numbers = 2 ** 3  # Total numbers with 2s and 3s\n    both_two_and_three = 2  # Numbers with both 2 and 3 in them (i.e., 232, 323)\n    only_twos_or_threes = 2 * (1 ** 3)  # Numbers with only 2s or only 3s (i.e., 222, 333)\n    ans = total_numbers - only_twos_or_threes - both_two_and_three \n    return ans\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 10, 17)  # Assuming the year is the current year 2023\n    end_date = datetime(2023, 12, 20)\n\n    sunday_count = 0\n    current_date = start_date\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:\n            sunday_count += 1\n        current_date += timedelta(days=1)\n\n    return sunday_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_payment = pen_price + ruler_price\n    return total_payment\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from math import gcd\nfrom fractions import Fraction\n\ndef lcm(a, b):\n    return int(a * b / gcd(int(a*100), int(b*100)))\n\ndef solution():\n    time1 = 0.5  # 30 seconds\n    time2 = 0.75  # 45 seconds\n\n    # Given that 3 lights change every 9 minutes (540 seconds), find the LCM of time1 and time2\n    lcm_two_lights = lcm(time1, time2)\n\n    # Find the smallest common time for the third light that is a divisor of 540 and\n    # greater than or equal to the LCM of the first two lights\n    # Since the times are in minutes, convert lcm_to_seconds to minutes\n    nine_minutes = 9  # 540 seconds in minutes\n    \n    i = Fraction(lcm_two_lights).limit_denominator()\n    while True:\n        # Convert i to seconds for comparison with nine_minutes in seconds\n        i_seconds = i.numerator / i.denominator * 60\n        if 540 % i_seconds == 0 and i_seconds >= 30:\n            break\n        i += lcm_two_lights\n\n    # time for the third light in minutes\n    third_light_time = i\n\n    return third_light_time.numerator / third_light_time.denominator\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    # 5 people picking from 5 unique skiboards\n    # is a permutation of 5 items taken 5 at a time (5!)\n    from math import factorial\n    ans = factorial(5)  # 5! = 5*4*3*2*1\n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of apple and strawberry tarts\n    num_apple_tarts, num_strawberry_tarts, price_apple_tart = symbols('num_apple_tarts num_strawberry_tarts price_apple_tart')\n    \n    # Equation 1: She bought twice as many apple tarts as strawberry tarts\n    equation1 = Eq(num_apple_tarts, 2 * num_strawberry_tarts)\n    \n    # Equation 2: She spent an equal amount of money on each type of item\n    # Cost of apple tarts = Cost of strawberry tarts\n    # (price_apple_tart * num_apple_tarts) = (price_apple_tart + 0.40) * num_strawberry_tarts\n    equation2 = Eq(price_apple_tart * num_apple_tarts, (price_apple_tart + 0.40) * num_strawberry_tarts)\n    \n    # Equation 3: Total cost is $40\n    # price_apple_tart * num_apple_tarts + (price_apple_tart + 0.40) * num_strawberry_tarts = 40\n    equation3 = Eq(price_apple_tart * num_apple_tarts + (price_apple_tart + 0.40) * num_strawberry_tarts, 40)\n    \n    # Solve the system of equations for the variables\n    solutions = solve((equation1, equation2, equation3), (num_apple_tarts, num_strawberry_tarts, price_apple_tart))\n    total_tarts = solutions[num_apple_tarts] + solutions[num_strawberry_tarts]\n    \n    return total_tarts\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_left = 18\n    tony_position_right = 17\n\n    henry_position_right = total_children - henry_position_left + 1\n    children_between_henry_tony = abs(henry_position_right - tony_position_right) - 1\n\n    return children_between_henry_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    metres = 2\n    millimetres_per_metre = 1000\n\n    ans = metres * millimetres_per_metre\n\n    return ans\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_10 = total_numbers // 10\n    not_multiples_of_10 = total_numbers - multiples_of_10\n    percentage = (not_multiples_of_10 / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    original_amount = 4\n    payment_percentage = 30 / 100\n    paid_amount = original_amount * payment_percentage\n    remaining_amount = original_amount - paid_amount\n    return remaining_amount\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces = symbols('total_pieces')\n    first_day_pieces = 0.2 * total_pieces  # 20% of the total number of pieces\n    second_day_pieces = 60\n\n    # After the second day, the ratio of the number of fitted pieces to the number of unfitted pieces is 2:5\n    # Thus, fitted_pieces / (total_pieces - fitted_pieces) = 2 / 5\n    # fitted_pieces = first_day_pieces + second_day_pieces\n    # So, (first_day_pieces + second_day_pieces) / (total_pieces - (first_day_pieces + second_day_pieces)) = 2 / 5\n    equation = Eq((first_day_pieces + second_day_pieces) / (total_pieces - (first_day_pieces + second_day_pieces)), 2/5)\n\n    solutions = solve(equation, total_pieces)\n    ans = solutions[0]\n    return ans\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Number of legs for each animal\n    legs_cat = 4\n    legs_dog = 4\n    legs_rabbit = 4\n    legs_bird = 2\n    \n    # Given the total number of legs\n    total_legs = 28\n    \n    # Given number of each pet except birds\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n    \n    # Calculate the total number of legs for cats, dogs, and rabbits\n    total_legs_others = (legs_cat * num_cats) + (legs_dog * num_dogs) + (legs_rabbit * num_rabbits)\n    \n    # Subtract this from the total to find the number of legs birds have\n    legs_birds = total_legs - total_legs_others\n    \n    # Since each bird has 2 legs, divide by 2 to find the number of birds\n    num_birds = legs_birds / legs_bird\n    \n    return int(num_birds)\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    meeting_time = 10  # Time in hours for them to meet\n\n    # Total distance covered by both Jack and Rose\n    total_distance = (jack_speed + rose_speed) * meeting_time\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "from sympy import primefactors\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    possible_products = {}\n\n    # Calculate the products and factorize them\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            product = cards[i] * cards[j]\n            factors = primefactors(product)\n            possible_products[product] = (cards[i], cards[j], factors)\n    \n    # Compare products of Candy's 2 cards vs Candice's 3 cards\n    for product1 in possible_products:\n        for product2 in possible_products:\n            if product1 != product2:\n                factors1 = possible_products[product1][2]\n                factors2 = possible_products[product2][2]\n                # Check if the factors are identical, indicating equal products\n                if sorted(factors1) == sorted(factors2):\n                    picked = set(possible_products[product1][:2] + possible_products[product2][:2])\n                    non_picked = [card for card in cards if card not in picked]\n                    return non_picked[0]\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25, 2):  # 1 to 24, only odd numbers\n        if 24 % i == 0:\n            n += i\n    return n\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "网络故障，请重试"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let Polly's age be x\n    # The children's ages will be (x-20), (x-22) and (x-24) respectively\n    # According to the problem, her age is equal to the sum of her three children's ages\n    # Therefore, we have the equation: x = (x-20) + (x-22) + (x-24)\n    \n    # Simplify the equation\n    # x = 3x - 66\n    # 2x = 66\n    x = 66 // 2\n    \n    return x\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    percentage = 40\n    total_value = 320\n\n    ans = (percentage / 100) * total_value\n\n    return ans\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    common_difference = 2\n    num_of_terms = int((last_term - first_term) / common_difference + 1)\n    sum_of_series = (num_of_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = 2 * 5\n    part2 = 1 * 5\n    part3 = (2 + 1) * 5\n\n    ans = part1 + part2 + part3\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20\n    multiple_factor = 5\n\n    weight_without_presents = total_weight_with_presents / multiple_factor\n    \n    return weight_without_presents\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes >= 0 and big_boxes + small_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n\n    total_age = richard_age + adam_age + will_age\n    \n    return total_age\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the number of cards each person had initially.\n    melvin_initial, nelson_initial, oliver_initial = symbols('melvin_initial nelson_initial oliver_initial')\n    \n    # Melvin's gains and losses\n    melvin_gain_from_nelson = 5/8 * melvin_initial\n    melvin_loss_to_oliver = 1/4 * melvin_initial\n    melvin_final_gain_from_nelson = 1/8 * melvin_initial\n\n    # Nelson's and Oliver's gains and losses (they only get cards from Melvin or lose to Melvin)\n    nelson_loss_to_melvin = melvin_gain_from_nelson\n    nelson_loss_to_oliver = melvin_loss_to_oliver  # Nelson loses the same amount of cards to Oliver as Melvin\n    nelson_final_loss_to_melvin = melvin_final_gain_from_nelson\n\n    oliver_gain_from_melvin_nelson = 2 * melvin_loss_to_oliver  # Oliver gains from both Melvin and Nelson equally\n\n    # Equations based from the problem statement\n    equation1 = Eq(melvin_initial + melvin_gain_from_nelson - melvin_loss_to_oliver + melvin_final_gain_from_nelson, nelson_initial - nelson_loss_to_melvin - nelson_loss_to_oliver - nelson_final_loss_to_melvin)\n    equation2 = Eq(melvin_initial + melvin_gain_from_nelson - melvin_loss_to_oliver + melvin_final_gain_from_nelson, oliver_initial + oliver_gain_from_melvin_nelson)\n    equation3 = Eq(melvin_initial + nelson_initial + oliver_initial, melvin_initial + melvin_gain_from_nelson - melvin_loss_to_oliver + melvin_final_gain_from_nelson + nelson_initial - nelson_loss_to_melvin - nelson_loss_to_oliver - nelson_final_loss_to_melvin + oliver_initial + oliver_gain_from_melvin_nelson)\n    \n    # Add an assumption that the initial number of cards for each person is positive\n    solutions = solve((equation1, equation2, equation3), (melvin_initial, nelson_initial, oliver_initial), dict=True)\n\n    # Use the positive solution\n    for sol in solutions:\n        if all(value > 0 for value in sol.values()):\n            total_cards_initially = sol[melvin_initial] + sol[nelson_initial] + sol[oliver_initial]\n            return total_cards_initially\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(14 * 10 + m, 8 * (10 + m) - 3)\n\n    m_value = solve(equation, m)\n\n    return m_value[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    A_times_B = 30\n    B_times_C = 35\n    C_times_A = 42\n    \n    ABC = A_times_B * B_times_C * C_times_A\n    \n    # Since A*B*C is squared when we multiplied A*B, B*C, C*A together,\n    # we need to take the square root to get the product A*B*C\n    import math\n    ABC_sqrt = int(math.sqrt(ABC))\n    \n    # Prime factorization will reveal that A, B, and C are the unique prime factors\n    # of the A*B*C product. We can use this to find the individual values of A, B, and C\n    # and then sum them up\n    \n    A = math.gcd(A_times_B, C_times_A)\n    C = math.gcd(B_times_C, C_times_A)\n    B = ABC_sqrt // (A * C)\n    \n    return A + B + C\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\nans = solution # Note: 'ans' is a reference to the function 'solution', not a direct answer. \n               # To get the answer, 'solution' must be called with specific values for 'x' and 'y'."
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    combined_age_4_years_ago = 10\n    combined_age_now = combined_age_4_years_ago + 2 * 4  # Each dog ages 4 years in 4 years\n    combined_age_in_2_years = combined_age_now + 2 * 2  # Each dog ages 2 years in 2 years\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the smaller number be x and the larger number be y.\n    # We have two equations derived from the given conditions:\n    # y - x = 39 (difference between the numbers)\n    # x + y = 59 (sum of the numbers)\n    # Solving these two equations:\n    # Adding both the equations we get:\n    # 2y = 98  => y = 49\n    # Substituting the value of y in the sum equation: 59 - 49 = x => x = 10\n    return 10\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percent = 15\n    total_amount = 340\n\n    ans = (percent / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of years from now when Justin's mother is 3 times as old as Justin\n    x = symbols('x')\n\n    # Justin's age in x years will be 8 + x\n    justins_age_in_x_years = 8 + x\n\n    # Justin's mother's age in x years will be 32 + x\n    mothers_age_in_x_years = 32 + x\n\n    # The equation that represents the situation in the future\n    equation = Eq(mothers_age_in_x_years, 3 * justins_age_in_x_years)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    import math\n    ans = math.factorial(10)\n    return ans\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n    equation2 = Eq(cora - qingle, qingle + 8 - (cora - 8))\n\n    solutions = solve((equation1, equation2), (cora, qingle))\n\n    return solutions[cora] - solutions[qingle]\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(0, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # since the line passes through the origin (0, 0),\n    # the y-intercept b is 0 (because y = m*0 + b => y = 0)\n    # We use the point (4,8) to find the slope m (y = mx + b => 8 = m*4 + 0)\n    x, y = 4, 8\n    m = y / x  # slope of the line\n\n    # since b is 0, the linear equation is y = mx\n    equation = f\"y = {m}x\"\n\n    return equation\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, eric = symbols('jane eric')\n\n    original_ratio = Eq(jane, 5/7 * eric)\n    new_ratio = Eq((jane + 6) / (eric - 6), 11/13)\n\n    solutions = solve((original_ratio, new_ratio), (jane, eric))\n\n    total_seashells = solutions[jane] + solutions[eric]\n\n    return int(total_seashells)\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n\n    warren_add = 20\n    naida_subtract = 1\n\n    while warren_add > 0:\n        current_number += warren_add\n        largest_number = max(largest_number, current_number)\n        \n        current_number -= naida_subtract\n        warren_add -= 1\n        naida_subtract += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucets_rate = 3 * first_faucet_rate\n    combined_rate = first_faucet_rate + other_faucets_rate * 3\n\n    hours_to_fill = 1 / combined_rate\n\n    return hours_to_fill\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "def solution():\n    from itertools import permutations\n\n    digits = [5, 3, 9, 4, 8]\n    even_numbers = filter(lambda x: x[-1] % 2 == 0, permutations(digits))\n    smallest_even_number = min(int(''.join(map(str, num))) for num in even_numbers)\n\n    return smallest_even_number\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_players = 52\n    violin_players = 38\n    \n    piano_and_violin = piano_players // 4\n    \n    total_instrument_players = piano_players + violin_players - piano_and_violin\n    neither = total_pupils - total_instrument_players\n\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    total_amount = principal * (1 + interest_rate * time_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    from sympy import pi, integrate, symbols\n\n    # Define variables\n    r = symbols('r')\n    # Given an isosceles right triangle with waist length 2, the area of the triangle\n    # A = 1/2 * base * height = 2 * 2 / 2 = 2\n    triangle_area = 2\n\n    # Integration over the quarter circle with radius 1 (for points within distance 1 from the origin)\n    # The quarter circle's area represents the favorable outcomes,\n    # since we are looking for points within the distance of 1 from the origin (right angle vertex).\n    quarter_circle_area = integrate(r, (r, 0, 1)) * pi / 4\n\n    # The probability that the distance from the right angle vertex is less than 1\n    probability = quarter_circle_area / triangle_area\n    \n    return float(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "出错啦，请重试"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from sympy import factorint\n    \n    # Prime factorize each number in the product and combine them\n    factors = {}\n    for num in [48, 925, 38, 435]:\n        num_factors = factorint(num)\n        for prime, power in num_factors.items():\n            if prime in factors:\n                factors[prime] += power\n            else:\n                factors[prime] = power\n    \n    # The number of zeros at the end of a product is determined by the number of 10s we can make\n    # Since 10 is the product of 2 and 5, we calculate the minimum of the number of 2s and 5s in the prime factors\n    num_twos = factors.get(2, 0)  # number of 2's in the factorization\n    num_fives = factors.get(5, 0) # number of 5's in the factorization\n    \n    # The number of 0's at the end will be the number of pairs of 2 and 5\n    num_zeros = min(num_twos, num_fives)\n    \n    return num_zeros\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime\n\n    school_leave_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    bus_catch_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_trip_duration = 18  # minutes\n    home_arrival_time = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    walking_to_bus_duration = (bus_catch_time - school_leave_time).total_seconds() / 60\n    bus_dropoff_time = bus_catch_time + timedelta(minutes=bus_trip_duration)\n    walking_home_duration = (home_arrival_time - bus_dropoff_time).total_seconds() / 60\n\n    total_walking_time = walking_to_bus_duration + walking_home_duration\n\n    return total_walking_time\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "出错啦，请重试"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    n = 8\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # Including the unknown number a\n    total_sum = mean_value * total_numbers  # Total sum for all numbers including a\n    sum_known_numbers = sum(numbers)  # Sum of the known numbers\n    a = total_sum - sum_known_numbers  # Value of the unknown number a\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    total = 2030452\n    subtracted = total - 30000 - 452\n    missing_number = subtracted // 2\n\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    original_length_cm = 150\n    length_per_piece_cm = original_length_cm / 2\n    length_per_piece_m = length_per_piece_cm / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Pigeonhole principle ensures that after choosing one sock of each color (3 socks),\n    # the next sock must match at least one of them, creating a pair guaranteed.\n    # So, we need to take 3 + 1 = 4 socks at minimum.\n    \n    return 4\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    # Calculate the number of pupils in Victoria's row\n    pupils_in_victorias_row = 6 + 1 + 7  # 6 to the left, Victoria herself, 7 to the right\n    \n    # Calculate the total number of rows\n    total_rows = 1 + 1 + 8  # The row she is in, the row in front of her, 8 rows behind her\n    \n    # Calculate the total number of pupils\n    total_pupils = pupils_in_victorias_row * total_rows\n    \n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(9 * ((x + 3) / 4), 81)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    return numerator_sum / denominator_sum\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    candy_to_lily = total_candy * 3/4\n    remaining_candy = total_candy - candy_to_lily\n    candy_to_brother = remaining_candy * 1/3\n    final_candy = remaining_candy - candy_to_brother\n    return final_candy\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_10 = 10\n    kenny_age, brother_age = symbols('kenny_age brother_age')\n    \n    # Equation based on info: The sum of ages of Kenny and his brother when May is 10 will be 3 times May's age\n    equation1 = Eq(kenny_age + brother_age, 3 * may_age_10)\n    \n    # Kenny is 2 years older than his brother\n    equation2 = Eq(kenny_age, brother_age + 2)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (kenny_age, brother_age))\n    \n    # May's current age is 7, calculate Kenny's current age\n    kenny_current_age = solutions[kenny_age] - (10 - 7)\n    \n    # Calculate how much older Kenny is than May this year\n    kenny_older_than_may = kenny_current_age - 7\n    \n    return kenny_older_than_may\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n\n    total_pancakes = pancakes_per_minute * minutes\n\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Cost of 5 kg of sweets\n    cost_price = 10\n    \n    # Total weight in grams\n    total_weight_in_grams = 5 * 1000  # 5 kg converted to grams\n    \n    # Number of bags\n    num_bags = total_weight_in_grams / 250  # 250g per bag\n    \n    # Selling price per bag in pounds\n    selling_price_per_bag = 0.65\n    \n    # Total revenue\n    total_revenue = num_bags * selling_price_per_bag\n    \n    # Profit\n    profit = total_revenue - cost_price\n    \n    # Profit percentage\n    profit_percentage = (profit / cost_price) * 100\n\n    return profit_percentage\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    # distance covered from 8.00 am to 8.30 am\n    distance_covered = 6300 - 1800\n    \n    # time taken to cover that distance in hours (30 minutes is 0.5 hours)\n    time_taken = 0.5\n\n    # speed in meters per hour\n    speed = distance_covered / time_taken\n    \n    # remaining distance to cover\n    remaining_distance = 1800\n\n    # time to cover the remaining distance in hours\n    time_to_cover_remaining = remaining_distance / speed\n\n    # calculating the time he will reach his friend's house in hours after 8.00 am\n    time_of_arrival_after_8 = time_taken + time_to_cover_remaining\n\n    # time of arrival in hours and minutes\n    hours = int(time_of_arrival_after_8)\n    minutes = int((time_of_arrival_after_8 - hours) * 60)\n\n    # final time of arrival (considering 8.00 am as the starting time)\n    arrival_hour = 8 + hours\n    arrival_minute = 0 + minutes\n\n    ans = (arrival_hour, arrival_minute)\n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    mr_smith_sugar = 300 * 0.50 + 600 * 0.20\n    mr_smith_total = 300 + 600\n\n    mrs_smith_sugar = 700 * 0.10 + 300 * (x / 100)\n    mrs_smith_total = 700 + 300\n\n    equation = Eq(mr_smith_sugar/mr_smith_total, mrs_smith_sugar/mrs_smith_total)\n    solved_x = solve(equation, x)\n\n    return round(solved_x[0], 2)\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    \n    # Each child gets at least one apple\n    apples_left = total_apples - children\n    \n    # The most apples one child can get while others get at least one:\n    max_apples = apples_left + 1  # +1 because this child also got at least one apple initially\n    \n    return max_apples\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "出错啦，请重试"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate the age difference between grandmother and mum\n    age_difference = 80 - 40\n    \n    # Mum's age when she was 25\n    mum_age_25 = 25\n    \n    # Grandmother's age when mum was 25\n    grandmother_age_when_mum_25 = mum_age_25 + age_difference\n    \n    return grandmother_age_when_mum_25\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Let 'x' be the total amount of money Amy had at first\n    # She bought (7y) donuts and (3z) muffins\n    # According to the information given:\n    # 10y is the money spent on donuts (price_per_7_donuts * number_of_sets_of_7_donuts)\n    # 6z is the money spent on muffins (price_per_3_muffins * number_of_sets_of_3_muffins)\n    # Therefore:\n    # (1/2)x = 10y (money spent on donuts)\n    # (1/2)x = 6z (money spent on muffins)\n    # and y - z = 54/7 (because she bought 54 more donuts than muffins, dividing by 7 because each set of purchase contains 7 donuts)\n    # Now we can express y in terms of z:\n    # y = z + 54/7 (number of donuts is 54 more than the number of muffins, in sets)\n    # Substitute y in terms of z into the money equations:\n    # (1/2)x = 10z + (10 * 54/7)\n    # (1/2)x = 6z\n    # Equate both expressions for (1/2)x:\n    # 10z + (10 * 54/7) = 6z => 4z = (10 * 54/7) => z = (10 * 54) / (4 * 7)\n    # Calculate z:\n    z = (10 * 54) / (28)\n    # Then calculate x using the equation for muffins:\n    # (1/2)x = 6z\n    x = 2 * 6 * z\n    return int(x)\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    import math\n\n    # Total ways without restriction\n    total_ways = math.factorial(5)\n\n    # Ways two people can stand next to each other\n    # They can be considered a single unit, with 4 units to arrange (the pair and the other 3 individuals)\n    # This unit can be in 2 arrangements (person A next to B or B next to A)\n    pair_ways = math.factorial(4) * 2\n\n    # Subtract the ways the pair are together from total ways\n    ans = total_ways - pair_ways\n\n    return ans\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # 15 is the maximum number of different balls before we are guaranteed a 16th of the same color\n    max_diff_balls_of_one_color = 15\n    # 12 is the maximum number of different balls before we are guaranteed a 13th of the same color\n    max_diff_balls_of_another_color = 12\n    # Calculate the worst case scenario where we have the maximum number of different balls\n    # from the rest of the colors before guaranteeing 16 balls of one color and 13 of another\n    total_balls = (max_diff_balls_of_one_color * 4) + (max_diff_balls_of_another_color * 1)\n\n    # We add 1 to the total as we need the next ball to guarantee the condition is met\n    ans = total_balls + 1\n    return ans\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum_positive = sum(range(5, 856, 10))\n    sum_negative = sum(range(10, 851, 10))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_away = total_biscuits / 4\n    left_biscuits = total_biscuits - given_away\n    return left_biscuits\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    A, B, C = symbols('A B C')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the value of B\n    return solutions[B]\n\n# Call the function and store the answer\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Since each friend must get at least 1 ice-cream cone, we give one to each to start with.\n    # This leaves us with 2 ice-cream cones to distribute freely among the 3 friends.\n    remaining_cones = 5 - 3  # 3 friends, 1 cone each initially\n\n    # The problem now reduces to finding the number of solutions to the equation:\n    # x + y + z = 2 where x, y, z are non-negative integers representing the remaining cones given to each friend.\n    \n    # This is a problem of distributing 'remaining_cones' indistinguishable items into 3 categories.\n    # It is equivalent to placing two dividers into the remaining + (friends - 1) spaces.\n    # The formula for such problems is combinations(n + r - 1, r), where n is the number of items and r is the categories.\n    from math import comb\n\n    # Here, n is remaining_cones and r is 3 (the number of friends).\n    num_ways = comb(remaining_cones + 3 - 1, remaining_cones)\n\n    return num_ways\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    \n    # 2 tables and 5 chairs cost £220\n    equation1 = Eq(2 * table + 5 * chair, 220)\n    \n    # 1 table costs the same as 3 chairs\n    equation2 = Eq(table, 3 * chair)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4/5\n    initial_money = spent / (1 - remaining_fraction)\n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n    \n    final_amount = principal * (1 + rate * time)\n    \n    return final_amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 75 * 0.40\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann_coins = 3\n    sana_coins = 6\n    nancy_coins = 8\n\n    total_coins = joann_coins + sana_coins + nancy_coins\n\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    initial_distance = 20\n    remaining_distance = 4\n    ratio_lucas = 3\n    ratio_mother = 5\n    total_ratio = ratio_lucas + ratio_mother\n\n    # total distance covered is initial_distance - remaining_distance\n    distance_covered = initial_distance - remaining_distance\n\n    # calculate distance walked by Lucas based on the ratio of their speeds\n    distance_lucas = (distance_covered * ratio_lucas) / total_ratio\n\n    return distance_lucas\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P, Q + 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    num_terms = 30\n    difference = -1\n\n    sum_first_n_terms = (num_terms / 2) * (2 * first_term + (num_terms - 1) * difference)\n\n    return int(sum_first_n_terms)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n\n    unit_rate = pizzas_initial / people_initial\n    pizzas_needed = unit_rate * people_final\n\n    return int(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    num_teams = 16\n    num_rounds = 0\n    \n    while num_teams > 1:\n        num_teams /= 2\n        num_rounds += 1\n    \n    return num_rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n    \n    julie_salary = solve(equation, julie)\n    \n    total_salary = julie_salary[0] + marion.subs(julie, julie_salary[0]) + ethan.subs(julie, julie_salary[0])\n    \n    return total_salary\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let b represent the number of students in the big class and s the number of students in the small class\n    b, s = symbols('b s')\n    \n    # each student from the big class received 2 apples and 3 oranges\n    # each student from the small class received 2 apples and 2 oranges\n    # in total, the kindergarten gave out 48 apples and 55 oranges\n    # equation1 represents the total number of apples\n    # equation2 represents the total number of oranges\n    \n    equation1 = Eq(2*b + 2*s, 48)\n    equation2 = Eq(3*b + 2*s, 55)\n    \n    # solving the equations for b and s\n    solutions = solve((equation1, equation2), (b, s))\n    \n    return solutions[s]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    for i in range(1, 2017):\n        if math.sqrt(i * 72).is_integer():\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sold = total_vegetables * 2 / 3\n    tuesday_sold = (total_vegetables - monday_sold) * 2 / 5\n    total_sold = monday_sold + tuesday_sold\n\n    return total_sold\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement.\n    # x ≡ 0 (mod 5), x ≡ 6 (mod 7), x ≡ 7 (mod 8).\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    \n    # Using the Chinese Remainder Theorem to find the smallest such number.\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial_value = 160\n    final_value = 40\n    \n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    \n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40  # grams\n    desired_cookies = 150\n\n    butter_needed = (butter_used / cookies_made) * desired_cookies\n\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create variables for Danny's age, Efron's age, and the number of years.\n    danny_age, efron_age, years = symbols('danny_age efron_age years')\n\n    # Use the given ratio to write the equations.\n    ratio_now = Eq(danny_age / efron_age, 8/3)\n    age_diff = Eq(danny_age - efron_age, 30)\n\n    # Solve the current ages of Danny and Efron.\n    current_ages = solve((ratio_now, age_diff), (danny_age, efron_age))\n\n    # Update the given ratio for future ages.\n    ratio_future = Eq((danny_age + years) / (efron_age + years), 5/3)\n\n    # Solve for the number of years.\n    years_until_ratio = solve((ratio_future.subs({danny_age: current_ages[danny_age],\n                                                  efron_age: current_ages[efron_age]})), years)\n\n    return years_until_ratio[0]\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    num_pencils = 15\n    num_rulers = 20\n    num_pens = 10\n\n    # Choosing a pencil and a ruler\n    pencil_ruler_combinations = num_pencils * num_rulers\n    # Choosing a ruler and a pen\n    ruler_pen_combinations = num_rulers * num_pens\n    # Choosing a pen and a pencil\n    pen_pencil_combinations = num_pens * num_pencils\n\n    total_combinations = pencil_ruler_combinations + ruler_pen_combinations + pen_pencil_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Group stage games calculation: each team plays with the other 3 teams in their group.\n    group_stage_games = 8 * (4 * 3 / 2)  # 8 groups, each having 4 choose 2 matches\n\n    # Knockout round games calculation:\n    round_of_16 = 8  # 16 teams, 8 matches where 8 teams will be eliminated\n    quarter_finals = 4  # 8 teams, 4 matches where 4 teams will be eliminated\n    semi_finals = 2  # 4 teams, 2 matches where 2 teams will be eliminated\n    final = 1  # 2 teams, 1 match to decide the winner\n    third_place_playoff = 1  # 2 teams, 1 match to decide the third place\n\n    # Total games calculation by summing all the games from above\n    total_games = group_stage_games + round_of_16 + quarter_finals + semi_finals + final + third_place_playoff\n\n    return int(total_games)\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for first_digit in range(1, 10):\n        for second_digit in range(0, 10):\n            if first_digit == 1 + 2*second_digit:\n                for third_digit in range(0, 10):\n                    if 9 < first_digit + second_digit + third_digit < 14:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana = symbols('apple banana')\n    \n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    n = 1\n    while n * (n - 1) // 2 != 15:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    factors_dict = factorint(224)\n    num_factors = 1\n\n    for power in factors_dict.values():\n        num_factors *= (power + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / 0.7\n    return number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n    \n    ways = pencils * rulers * pens\n    return ways\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirt = symbols('shorts tshirt')\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n\n    third_term = second_term + common_difference\n\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Rachel's sweets as r and Alice's sweets as a\n    r, a = symbols('r a')\n    \n    # After Rachel gives Alice 10 sweets, they have the same amount\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If they both eat 8 sweets, Rachel has 3 times the amount of Alice\n    equation2 = Eq(r - 8, 3 * (a - 8))\n    \n    # Solving the equations to find the number of sweets rachel and alice have\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # The total amount of sweets is the sum of r and a\n    total_sweets = solutions[r] + solutions[a]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_each = 25\n    number_of_gaps = 3  # Since there are 4 posts, there are 3 gaps between them\n\n    total_distance = distance_between_each * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    # Let x be the number of correct answers.\n    # Each correct answer gives 6 points, and each wrong answer subtracts 2 points.\n    # Eddie answered all 10 questions and got 44 points in total.\n    \n    # Correct answers give (x * 6) points, incorrect answers give (10 - x) * (-2)\n    # The total points Eddie got can be calculated as:\n    # (x * 6) + (10 - x) * (-2) = 44\n    \n    # Now we solve for x:\n    for x in range(11):  # We use 11 because the range function is non-inclusive on the upper bound, and there are 10 questions max.\n        if (x * 6) + (10 - x) * (-2) == 44:\n            return x\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of triangles, quadrilaterals, and pentagons\n    triangles, quadrilaterals, pentagons = symbols('triangles quadrilaterals pentagons')\n\n    # We know the numbers of pentagons\n    pentagons = 2\n\n    # Equation 1: The number of sides from all the polygons\n    sides_total = triangles * 3 + quadrilaterals * 4 + pentagons * 5\n\n    # Equation 2: The relationship between the number of quadrilaterals and triangles\n    quadrilaterals = triangles + 82\n\n    # Create the equation based on the total number of sides\n    equation = Eq(sides_total, 394)\n\n    # Solve for the number of triangles\n    solutions = solve((equation.subs(quadrilaterals, triangles + 82)), triangles)\n\n    # Calculate the number of quadrilaterals using the found number of triangles\n    num_quadrilaterals = solutions[0] + 82\n\n    return num_quadrilaterals\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    return 63 - (55 - 27)\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for weights of apples, peaches, and pears\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    # Create the equations based on the problem description\n    equation1 = Eq(apples, 5 + 6 * pears) # apples weigh 5 kg more than 6 times the weight of the pears\n    equation2 = Eq(peaches, 3 * pears - 2) # peaches weigh 2 kg less than 3 times the weight of the pears\n    equation3 = Eq(apples + peaches + pears, 73) # total weight is 73 kg\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    digits_sum = sum(int(digit) for digit in str(product))\n    return digits_sum\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Total number of students\n    total_students = 150\n\n    # Total number of teams\n    total_teams = total_students // 3  # Each team has 3 students\n\n    # Given conditions\n    teams_with_1_boy = 15\n    teams_with_2_or_more_boys = 27\n\n    # The number of all-boy teams is twice the number of all-girl teams\n    # Let the number of all-girl teams be x, then all-boy teams will be 2x\n    all_girl_teams = symbols('x')\n    all_boy_teams = 2 * all_girl_teams\n\n    # The remaining teams will have mixed boys and girls\n    mixed_teams = total_teams - (all_boy_teams + all_girl_teams)\n\n    # We know the mixed_teams are the teams with 1 boy and the teams with 2 or more boys\n    # mixed_teams = teams_with_1_boy + teams_with_2_or_more_boys\n    equation = Eq(mixed_teams, teams_with_1_boy + teams_with_2_or_more_boys)\n\n    # Solve for x to find the number of all-girl teams\n    solutions = solve(equation, all_girl_teams)\n\n    num_all_girl_teams = solutions[0]\n\n    # We can now find the number of girls in all these all-girl teams\n    num_girls = num_all_girl_teams * 3\n\n    return num_girls\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    # Since the number is divisible by 3, 5, and 7, we find the least common multiple (LCM) of these numbers\n    # As 5 requires the last digit to be 0 or 5, and the number is divisible by 5, the last digit must be 0.\n    # We have a three-digit number starting with 6 and ending with 0.\n    # The number is 6x0, where x is a single digit that makes the number divisible by 3 and 7\n    # The least common multiple of 3 and 7 is 21 (3 * 7), since 5 requires the last digit to be 0,\n    # we need to find a multiple of 21 that has 6 in the hundreds place and 0 in the units place.\n    # We start with 210 (the smallest three-digit multiple of 21) and keep adding 210 until the hundreds \n    # digit is 6. The first such multiple will be the desired number.\n    \n    lcm = 3 * 5 * 7 # Least common multiple of 3, 5, and 7\n    num = 0\n    \n    # we start looking at for multiples of lcm from 600 to 699\n    for last_digit in range(10): # possible last digit could be from 0 to 9\n        candidate_num = 600 + last_digit\n        if candidate_num % lcm == 0:\n            num = candidate_num\n            break\n\n    return num\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # Defining the relationship between the animals' weights\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    \n    # One dog weighs as much as 8 rabbits,\n    # and one rabbit weighs as much as 2 chickens.\n    # Therefore, one dog weighs as much as 8 * 2 chickens.\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let the distance between Town A and Town B be d km\n    \n    # If Ben cycles at 10 km/h, he arrives at 10 am\n    # If he cycles at 15 km/h, he arrives at 8 am\n    # We know the difference in time is 2 hours (from 8 am to 10 am)\n    \n    # Now, we can set up the following equations:\n    # Time taken when cycling at 10 km/h: t_10 = d / 10\n    # Time taken when cycling at 15 km/h: t_15 = d / 15\n    \n    # The difference in time is t_10 - t_15 = 2\n    # So, d / 10 - d / 15 = 2\n    # Solving for d, we get: (3d - 2d) / 30 = 2\n    # Simplifying further: d / 30 = 2\n    # d = 2 * 30 = 60 km\n\n    # Now we know that the distance d is 60 km\n    # We need to find out the speed required to reach at 9 am\n    # If he wants to arrive at 9 am, which is 1 hour earlier than 10 am,\n    # he should travel the distance in (t_10 - 1) hours\n    # So, the time taken should be t_9 = (60 / 10) - 1 = 6 - 1 = 5 hours\n    \n    # Now we can calculate the speed required to cover 60 km in 5 hours\n    # Speed = Distance / Time\n    speed = 60 / 5\n    \n    return speed\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    original_students = 5\n    original_candies_per_student = 12\n    new_students = original_students + 1\n    \n    total_candies = original_students * original_candies_per_student\n    new_candies_per_student = total_candies // new_students\n    \n    return new_candies_per_student\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cards = symbols('cards')\n    \n    equation1 = Eq(cards % 4, 3)\n    equation2 = Eq(cards % 5, 4)\n    equation3 = Eq(cards % 7, 6)\n    \n    solutions = solve((equation1, equation2, equation3), (cards))\n    \n    # Since we're looking for the minimum number of cards that Jason could have,\n    # we're interested in the smallest positive integer solution.\n    return min(solutions)\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert the base 10 numbers to base 7\n    num1_base7 = int(str(61), 7)\n    num2_base7 = int(str(34), 7)\n    \n    # Subtract the two numbers in base 10\n    difference_base10 = num1_base7 - num2_base7\n    \n    # Convert the result back to base 7\n    ans = ''\n    while difference_base10 > 0:\n        ans = str(difference_base10 % 7) + ans\n        difference_base10 //= 7\n    if ans == '':\n        ans = '0'\n    \n    return ans\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    num_students = 0\n    boys = 0\n    girls = 0\n    layer = 0\n\n    # Since the difference between boys and girls is given by layers, start with a minimum square size\n    # and incrementally check for squares satisfying the condition of 52 more boys than girls.\n    while True:\n        num_students = (layer * 2 + 1) ** 2\n\n        # In a square array, boys are on the outer layer and then alternate.\n        # Total boys = sum of perimeters (4n) of all boy layers minus 4 corners for each since they are counted twice\n        boys = sum(4 * (2 * i + 1) for i in range(0, layer + 1, 2)) - 4 * ((layer + 1) // 2)\n        # Total girls = total number of students - boys\n        girls = num_students - boys\n\n        if boys - girls == 52:\n            break\n        else:\n            layer += 1\n\n    return num_students\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # If Dilly picks up gloves one by one, the worst case scenario\n    # to guarantee a matching pair (same color) is considered.\n    # Picking up one of each of the left-hand gloves guarantees no matching pair.\n    # There are 1 left-hand blue glove and 2 left-hand green gloves\n    worst_case_left_hand = 1 + 2\n\n    # Now, no matter which glove Dilly picks, it will be a right-hand glove,\n    # and because there are only two colors, it will match with the left-hand blue\n    # or green glove already picked.\n    # But we also need to consider the right-hand gloves picked before getting the matching color.\n    # There are 3 right-hand blue gloves and 4 right-hand green gloves.\n    # Dilly can pick all the right-hand blue gloves and still not match the green one,\n    # and the next glove will be a right-hand green which matches the left green picked earlier.\n    # So the worst case is picking all three right-hand blue gloves, then one right-hand green glove.\n    worst_case_right_hand = 3 + 1\n\n    # Total gloves picked is the sum of the worst cases for left-hand and right-hand gloves.\n    total_gloves_picked = worst_case_left_hand + worst_case_right_hand\n    return total_gloves_picked\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene_initial, yuna_initial = symbols('eugene_initial yuna_initial')\n\n    # Eugene had 3 times as many pins as Yuna initially\n    equation1 = Eq(eugene_initial, 3 * yuna_initial)\n\n    # After Yuna bought 76 pins, Yuna had 7/9 as many pins as Eugene\n    equation2 = Eq(yuna_initial + 76, (7/9) * eugene_initial)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (eugene_initial, yuna_initial))\n\n    return solutions[eugene_initial]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    letters = \"REVISE\"\n    letter_counts = {letter: letters.count(letter) for letter in set(letters)}\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    return factorial(len(letters)) // denominator\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    number = 2 * 100 + 8 * 10 + 5\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_percentage = 35\n    sale_price = normal_price - (normal_price * (discount_percentage / 100))\n    \n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # Kelly needs to leave an even number of matches after her turn.\n    # This way, no matter if Dan takes 1 or 2 matches, Kelly can always bring\n    # the total matches left to a multiple of 3 by taking 2 or 1 match respectively.\n    # Eventually, Dan will be forced to pick from 3 matches, and Kelly will take the last one.\n    # To ensure this, Kelly should take away 1 match on her first turn, leaving 10 matches,\n    # which is an even number and not a multiple of 3.\n\n    # Number of matches Kelly should take away on her first turn to ensure victory\n    matches_to_take = 1\n    return matches_to_take\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    # Let the total number of flowers be x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # red flowers\n    red_flowers = (1/2) * x\n    # remaining flowers after the red ones are counted\n    remaining_flowers = x - red_flowers\n    # pink flowers\n    pink_flowers = (4/7) * remaining_flowers\n    # equation representing the relationship between red and pink flowers\n    equation = Eq(red_flowers, pink_flowers + 6)\n    \n    # solve the equation\n    total_flowers = solve(equation, x)[0]\n    \n    return total_flowers\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    numerator = 5 + 1/7 + 3 + 3/11 + 1 + 13/23\n    denominator = 3 + 3/7 + 2 + 2/11 + 1 + 1/23\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = n * (n + 1) * (2 * n + 1) // 6\n    return ans\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    square = symbols('square')\n    equation = Eq(4 * square - 3, 65)\n    solutions = solve(equation, square)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n    for cars in range(total_vehicles + 1):\n        motorcycles = total_vehicles - cars\n        wheels = cars * 4 + motorcycles * 2\n        if wheels == total_wheels:\n            return cars\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    jason_stickers = 20\n    jason_stickers_after = jason_stickers + 18\n    nicole_stickers_after = jason_stickers_after + 5\n    nicole_stickers_before = nicole_stickers_after - 18\n    \n    return nicole_stickers_before\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original dimensions of the cuboid let be l, b, h\n    # It is given that:\n    # New length = 110% of original length = 1.1 * l\n    # New breadth = 4/5 of original breadth = (4/5) * b\n    # New height = 11/10 of original height = (11/10) * h\n\n    # New volume / Original volume = (New length * New breadth * New height) / (Original length * Original breadth * Original height)\n    #                              = (1.1 * l * (4/5) * b * (11/10) * h) / (l * b * h)\n    #                              = (1.1 * 4/5 * 11/10) * (l * b * h) / (l * b * h)\n    #                              = (1.1 * 4 * 11) / (5 * 10)\n    #                              = 0.88\n    # Convert to percentage = 0.88 * 100\n\n    new_vol_percentage = (1.1 * 4/5 * 11/10) * 100\n    return new_vol_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    count = 0\n    for two_grams in range(0, 77 // 2 + 1):\n        for three_grams in range(0, 77 // 3 + 1):\n            if 2 * two_grams + 3 * three_grams == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To be divisible by 9, the sum of the digits must be divisible by 9.\n    # The sum of the first five digits 1+2+3+4+5 = 15.\n    # If we let A be the last digit, then the sum with A must be a multiple of 9.\n    # The closest multiple of 9 after 15 is 18, so A must be 3 to make the sum 18.\n    digit_A = 3\n    \n    # The remainder when divided by 4 only depends on the last two digits of the number.\n    # Therefore, we only need to consider the number 45A.\n    last_two_digits = 453  # The last two digits of the number with A = 3.\n\n    # Calculate the remainder when this number is divided by 4.\n    remainder_when_divided_by_4 = last_two_digits % 4\n\n    return remainder_when_divided_by_4\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    ans = factorial(num_kids)\n\n    return ans\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_distance_m = total_distance_km * 1000  # convert km to m\n    number_of_intervals = 9\n    distance_between_marshals = total_distance_m / (number_of_intervals + 1)\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_fast = 180\n    time_fast = 6\n    speed_slow = 120\n    time_slow = 8\n\n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n\n    total_distance = distance_fast + distance_slow\n\n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    # The total score calculated by Teacher Jay incorrectly\n    incorrect_total = 74 * 7\n    \n    # The score that was written incorrectly (81 instead of 18)\n    incorrect_score = 81\n    correct_score = 18\n    \n    # The correct total score\n    correct_total = incorrect_total - incorrect_score + correct_score\n    \n    # The correct average score\n    correct_average = correct_total / 7\n    \n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    interest_rate = 0.03\n    \n    # Calculate interest for the first year\n    first_year_interest = principal * interest_rate\n    # Amount after first year\n    first_year_amount = principal + first_year_interest\n    \n    # Calculate interest for the second year (compound interest)\n    second_year_interest = first_year_amount * interest_rate\n    \n    # Total interest earned at the end of the second year\n    total_interest = first_year_interest + second_year_interest\n    \n    return total_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # minutes to paint one picture\n    total_time_available = 80  # one hour and twenty minutes in total\n\n    num_pictures = total_time_available // time_for_one_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    decimal = 1 + (4/7)\n    return round(decimal, 1)\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of widgets Megacorp sold in 2014\n    # Let y be the number of widgets Megacorp sold in 2015\n    x, y = symbols('x y')\n    \n    # Vastco sold 68% more widgets than Megacorp in 2014\n    vastco_2014 = x * 1.68\n    \n    # Vastco sold 44% more widgets than Megacorp in 2015\n    vastco_2015 = y * 1.44\n    \n    # Vastco's widget sales rose by 32% from 2014 to 2015\n    eq_vastco_increase = Eq(vastco_2015, vastco_2014 * 1.32)\n    \n    # Solving the above equation for y in terms of x\n    solution = solve(eq_vastco_increase, y)\n    \n    # y is now the expression for Megacorp's 2015 sales in terms of its 2014 sales x\n    y_expression = solution[0]\n    \n    # Calculate the percentage increase for Megacorp's sales from 2014 to 2015\n    percent_increase_megacorp = ((y_expression - x) / x) * 100\n\n    return percent_increase_megacorp\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    # The recurring part of the fraction 3/7 is \"428571\"\n    recurring_part = \"428571\"\n    \n    # The 69th digit after the decimal point is found by taking (69 - 1) module length of the recurring part\n    position = (69 - 1) % len(recurring_part)\n\n    # Return the digit at the calculated position\n    return int(recurring_part[position])\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    total_planned_profit = 1.5\n    sold_first_day_profit = 0.7 * total_planned_profit\n    total_actual_profit = 0.82 * total_planned_profit\n    \n    remaining_goods_fraction = 1 - 0.7\n    remaining_goods_profit = total_actual_profit - sold_first_day_profit\n    \n    # Calculate the ratio of the profit made by selling the remaining goods to the planned profit for those goods.\n    remaining_goods_profit_ratio = remaining_goods_profit / (remaining_goods_fraction * total_planned_profit)\n    \n    # The discount rate on the second day is the complement to 1 of the profit made on the remaining goods.\n    discount_rate = 1 - remaining_goods_profit_ratio\n    \n    return discount_rate * 100  # Convert to percentage\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Initial number of tiles\n    total_tiles = 400\n    # The number of tiles on one side of the square wall\n    side_length = int(total_tiles ** 0.5)\n    red_tiles = 0\n    green_tiles = 0\n\n    # Loop through each layer\n    for layer in range(side_length // 2):\n        # Calculate the number of tiles in the current outer layer\n        if layer % 2 == 0:  # Red Tiles\n            red_tiles += (side_length - layer * 2) ** 2 - ((side_length - (layer + 1) * 2) ** 2 if layer + 1 < side_length // 2 else 0)\n        else:  # Green Tiles\n            green_tiles += (side_length - layer * 2) ** 2 - ((side_length - (layer + 1) * 2) ** 2 if layer + 1 < side_length // 2 else 0)\n\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    more_tiles = abs(red_tiles - green_tiles)\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    # Calculate the amount of salt in Dylan's solution\n    dylan_salt = 300 * 0.35\n    # Calculate the amount of salt in Daisy's solution\n    daisy_salt = 200 * 0.50\n    # Calculate the total amount of salt\n    total_salt = dylan_salt + daisy_salt\n    # Calculate the total weight of the mixed solution\n    total_weight = 300 + 200\n    # Calculate the concentration of salt in the resulting solution\n    concentration = (total_salt / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y) # Replace 'y' with the actual number of sweets to get a numerical result"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    digits_for_single_digits = 9 * 1\n    digits_for_double_digits = (99 - 10 + 1) * 2\n    digits_for_triple_digits = (113 - 100 + 1) * 3\n    \n    total_digits = digits_for_single_digits + digits_for_double_digits + digits_for_triple_digits\n    \n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let the original number of pearls be x\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    # Half of the pearls fell onto the floor: x/2\n    # A fourth rolled under a chair: x/4\n    # A sixth fell into her lap: x/6\n    # Three pearls remained on the strand: 3\n    # Equation representing the situation\n    equation = Eq(x / 2 + x / 4 + x / 6 + 3, x)\n\n    # Solve the equation for x\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days_for_workers = 3\n    work_done = workers * days_for_workers\n    days_for_one_worker = work_done / 1\n    \n    return days_for_one_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    return 124 - 76\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "def solution():\n    from itertools import permutations\n    \n    people = \"LJAJ\"  # Use a string where each letter represents a person\n    entrances = \"123\"  # Use a string where each number represents a different entrance\n    all_combinations = set(permutations(people + entrances, 4))  # Generate all permutations including people and entrances\n    valid_combinations = [comb for comb in all_combinations if 'L' in comb and 'J' in comb and 'A' in comb and 'J' in comb]\n\n    return len(valid_combinations)\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48  # Initial number of bottles\n    empty_bottles = 48  # Initially, all bottles are full, so no empties\n\n    while empty_bottles >= 4:\n        # Exchange every set of 4 empty bottles for a new one\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        \n        # Update the count of empty bottles\n        # Subtracting the used bottles and adding the new empty ones from the exchange\n        empty_bottles = empty_bottles - new_bottles * 4 + new_bottles\n    \n    # If Phoebe has 3 empty bottles, she can borrow 1 and exchange for a full bottle\n    if empty_bottles == 3:\n        total_bottles += 1\n\n    return total_bottles\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, brother = symbols('john brother')\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n    \n    solutions = solve((equation1, equation2), (john, brother))\n    \n    return solutions[brother]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    total_earnings = 92\n\n    # Let x be the number of glasses broken\n    x = symbols('x')\n    \n    # Since he earns $1 for each glass delivered safely and pays $1 for each broken,\n    # his earnings are (total_glasses - x) - x = total_earnings\n    equation = Eq((total_glasses - x) - x, total_earnings)\n    \n    # Solve for x, the number of glasses broken\n    num_broken_glasses = solve(equation, x)[0]\n\n    return num_broken_glasses\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # The number of games played in a round-robin tournament with n teams is n*(n-1)/2\n    # We have the total number of games (rounds) and we need to find n.\n    n = symbols('n', integer=True)\n    equation = Eq(n*(n-1)/2, 45)\n    num_teams = solve(equation, n)\n\n    # solve returns two solutions because it's a quadratic equation.\n    # We need to return the positive integer solution because the number of teams cannot be negative.\n    ans = [team for team in num_teams if team.is_positive][0]\n    return ans\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    # Let x be the number Mayank thinks of\n    # According to the problem, we have the equation: 2 * x + 4 = 40\n\n    # We'll calculate x by performing inverse operations.\n    # Subtract 4 from both sides of the equation\n    result_after_subtracting = 40 - 4\n    \n    # Divide by 2 to find x\n    mayanks_number = result_after_subtracting / 2\n    return mayanks_number\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of boats as b and the number of people as p\n    b, p = symbols('b p')\n    \n    # If one boat is reduced, each boat will carry exactly 9 people\n    equation1 = Eq((b - 1) * 9, p)\n    \n    # If one boat is added, each boat will carry exactly 6 people\n    equation2 = Eq((b + 1) * 6, p)\n    \n    # Solve the system of equations for b and p\n    solutions = solve((equation1, equation2), (b, p))\n    \n    return solutions[p]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 15 * cost_per_banana\n    \n    change = 1200 - total_cost\n    return change / 100\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # Let the smallest odd integer be x.\n    # Then the next two consecutive odd integers are x+2 and x+4.\n    # Their sum is given as 57.\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + (x + 2) + (x + 4), 57)\n    smallest_integer = solve(equation, x)[0]\n\n    return smallest_integer\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # Since the division by 3 results in 2, the underscored part must be a\n    # number that when divided by 3 equals 2, i.e., it must be 6.\n    # We can choose 6 from the given numbers, and since it's mentioned that\n    # we can use each number more than once, we can use 6 for this operation.\n    # Therefore, the missing number is 6.\n    missing_number = 6\n    return missing_number\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            for x3 in range(3, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cookies\n    john_cookies, peter_cookies = symbols('john_cookies peter_cookies')\n    \n    # Equation representing the initial difference in cookies\n    equation1 = Eq(john_cookies, peter_cookies + 180)\n    \n    # Equation representing the condition after selling some cookies\n    equation2 = Eq((4/5) * john_cookies, (1/2) * (peter_cookies - (3/10) * peter_cookies))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_cookies, peter_cookies))\n    \n    return solutions[john_cookies]\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n    \n    num_pencils = 32\n    num_pens = 40\n    \n    max_students = gcd(num_pencils, num_pens)\n    \n    return max_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')\n\n    for perm in permutations(digits, 4):\n        num1 = perm[0]*10 + perm[1]\n        num2 = perm[2]*10 + perm[3]\n        min_sum = min(min_sum, num1 + num2)\n\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    initial_tests = 4\n    initial_average = 60\n    new_test_score = 70\n    \n    total_initial_score = initial_tests * initial_average\n    new_total_score = total_initial_score + new_test_score\n    new_average = new_total_score / (initial_tests + 1)\n    \n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    # Number of animals\n    horses = 6\n    pigs = 12\n    rabbits = 12\n\n    # Total amount of apples eaten by each type of animal\n    total_horses_apples = horses * 20\n    total_pigs_apples = pigs * 15\n    total_rabbits_apples = rabbits * 5\n\n    # Total animals and total apples eaten\n    total_animals = horses + pigs + rabbits\n    total_apples = total_horses_apples + total_pigs_apples + total_rabbits_apples\n\n    # Average amount of apples eaten by each animal\n    average_apples = total_apples / total_animals\n    \n    return average_apples\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for first_digit in range(1, 10):  # The first digit ranges from 1 to 9\n        for second_digit in range(0, 10):  # The second digit ranges from 0 to 9\n            third_digit = first_digit + second_digit\n            if third_digit < 10:  # The third digit must be a single digit\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n\n    # Sale plan A: Buy 2 get 1 free. So for every 3 cups, Pip pays for 2.\n    sale_A_cups_paid_for = (total_cups // 3) * 2 + (total_cups % 3)\n    sale_A_cost = sale_A_cups_paid_for * full_price_per_cup\n\n    # Sale plan B: 30% off on total. So Pip gets a 0.7 discount on each cup.\n    sale_B_cost = total_cups * full_price_per_cup * 0.7\n\n    # Choosing the cheaper sale plan\n    ans = min(sale_A_cost, sale_B_cost)\n    \n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of peaches Eddie gets\n    # Let a and b be the number of students in Class A and Class B respectively\n    x, a, b = symbols('x a b')\n    \n    # All peaches given to Class A: x = 5a + 10\n    eq1 = Eq(x, 5*a + 10)\n\n    # All peaches given to Class B: x = 8b - 2\n    eq2 = Eq(x, 8*b - 2)\n\n    # Class A has 3 more students than Class B: a = b + 3\n    eq3 = Eq(a, b + 3)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (x, a, b))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    benson_spent = 74\n    jayden_spent = 120\n    \n    # Let's denote jayden_left as the money Jayden had left.\n    # We know that (590 - benson_spent - jayden_spent) is the total money both had left.\n    # Also, we know that benson_left is three times jayden_left.\n    # benson_left + jayden_left = 590 - benson_spent - jayden_spent\n    # benson_left = 3 * jayden_left\n    \n    # Now we can solve for jayden_left.\n    jayden_left = (590 - benson_spent - jayden_spent) / 4\n    return jayden_left\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    # Since the question involves simultaneous equations and we know the relationships\n    # and sum of ages, we can represent the problem as a set of equations and solve it.\n    \n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each child's age\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Equations based on the description\n    equation1 = Eq(older_son - younger_son, 3)                    # older son is 3 years older than younger\n    equation2 = Eq(older_daughter - younger_daughter, 2)          # older daughter is 2 years older than younger\n    equation3 = Eq(younger_son, 2 * older_daughter)               # younger son is twice as old as the older daughter\n    equation4 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55) # sum of ages\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Return the age of the youngest child\n    youngest_child_age = min(solutions.values())\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    s = sum(int('2' * i) for i in range(1, 2018))\n    return s % 100000\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3/4\n    litres_water = total_orange_drink * fraction_water\n    return litres_water\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    units_digit_547 = 7\n    units_digit_479 = 9\n    product_units = units_digit_547 * units_digit_479\n    n = product_units % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres_per_metre = 100\n    \n    ans = metres * centimetres_per_metre\n    \n    return ans\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for num in range(1, 380):\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n\n    return neither_owners\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for number in range(6, 16):  # The number must be between 5 and 15\n        if number % 4 == 0 and 36 % number == 0:  # The number is a multiple of 4 and a factor of 36\n            return number\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_part = 1\n    total_volume = 300\n    \n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n    \n    return raspberry_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Speed of Betty and Kevin\n    betty_speed, kevin_speed = symbols('betty_speed kevin_speed')\n\n    # After 6 minutes, Betty reaches the store while Kevin is 150m away\n    # This implies that Betty has walked for 6 minutes at her speed\n    # Kevin has walked 150m in the same 6 minutes at his speed\n    equation1 = Eq(6 * betty_speed, 6 * kevin_speed + 150)\n\n    # After another 3 minutes, Kevin reaches the store while Betty is 900m away from cinema\n    # Kevin walks 3 minutes at his speed\n    # Betty reaches 900m away from cinema after (6 minutes previously + 3 minutes now)\n    # which is 9 * betty_speed\n    equation2 = Eq(3 * kevin_speed, (9 * betty_speed) - 900)\n\n    # Solve the equations\n    speeds = solve((equation1, equation2), (betty_speed, kevin_speed))\n    \n    # betty_speed would be Betty's speed; we can find how far Betty could travel in 6 minutes\n    betty_distance_in_6_min = speeds[betty_speed] * 6\n\n    # Define another variable for the time Betty leaves earlier\n    time_difference = symbols('time_difference')\n\n    # The distance Betty travels when she leaves earlier is the same as Kevin in 6 + 3 minutes\n    # Here we create an equation based on the distance Betty would have traveled in the time difference\n    equation3 = Eq((time_difference + 9) * speeds[betty_speed], 9 * speeds[kevin_speed])\n\n    # Now solve for time_difference\n    time_solution = solve(equation3, time_difference)\n\n    return time_solution[0]\n\nans = solution()"
    ]
}