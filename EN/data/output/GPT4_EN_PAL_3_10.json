{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    first_term = 5\n    ans = sum([i**2 for i in range(first_term, n+1)])\n    return ans\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 # the class starts at 9:00\n    end_time = 10 # the class ends at 10:00\n    duration = end_time - start_time # calculate the duration\n    return duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / 0.6\n    original_amount = remaining_after_bag / 0.8\n    return original_amount\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_of_hand = 14 / 27\n    \n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n    \n    return int(finger_bones)\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for n in range(1, 100):  # let's assume the number of students will be less than 10000 for simplicity\n        if (n * n + 5) + 26 == (n + 1) * (n + 1):\n            return n * n + 5\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_initial = 37\n    john_initial = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy_initial - x) apples\n    # John will have (john_initial + x) apples\n    # Amy wants to have 4 more apples than John\n    # (amy_initial - x) = (john_initial + x) + 4\n    # Solve for x\n    x = (amy_initial - john_initial - 4) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total potted plants\n    r = 4  # potted plants to arrange\n    arrangements = factorial(n) // factorial(n - r)\n    return arrangements\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n    profit_percent = 0.10\n    loss_percent = 0.10\n    \n    # Calculate the original purchase price of each house\n    cost_price_profit = sale_price / (1 + profit_percent)\n    cost_price_loss = sale_price / (1 - loss_percent)\n    \n    # Calculate the total cost price\n    total_cost_price = cost_price_profit + cost_price_loss\n    \n    # Calculate the total sale price\n    total_sale_price = 2 * sale_price\n    \n    # Calculate profit or loss\n    profit_or_loss = total_sale_price - total_cost_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # Winning positions are when the number of oranges is 4n+1\n    # Fred needs to leave 13 oranges on the table after his first move\n    # to ensure he can always return to a winning position.\n    # Thus, Fred should take two oranges (15 - 13 = 2) on his first move.\n    \n    oranges_to_leave = (15 - 1) % 4\n    fred_move = 15 - oranges_to_leave\n\n    return fred_move\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    # Combinations of shirts, pants, and shoes\n    shirt_pants_shoes_combinations = shirts * pants * shoes\n    # Combinations of dresses and shoes\n    dresses_shoes_combinations = dresses * shoes\n    # Combinations of dresses and heels\n    dresses_heels_combinations = dresses * heels\n    \n    # Total combinations\n    total_combinations = shirt_pants_shoes_combinations + dresses_shoes_combinations + dresses_heels_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    return 66666 * 66666\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    toms_age = symbols('toms_age')\n    dads_age = 43\n    equation = Eq(dads_age, 4 * toms_age - 5)\n\n    age = solve(equation, toms_age)\n\n    return age[0]\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    frac_value = 3 / 20\n    decimal_value = 0.16\n\n    ans = frac_value > decimal_value\n    return ans\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = skipping_rope + long_jump - 2 * both_events\n\n    return only_one_event\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDE'):\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C'):\n            count += 1\n        elif p.index('A') < p.index('B') and p.index('A') > p.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    # Loop through all the 3-digit numbers\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:  # Check for palindrome\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Sara jogs from 6:30 AM to 8:30 AM, which is 2 hours\n    jogging_time = 2  # in hours\n\n    # Sara walks from 8:30 AM to 9:30 AM, which is 1 hour\n    walking_time = 1  # in hours\n\n    jogging_speed = 8  # in km/h\n    walking_speed = jogging_speed / 2  # half the jogging speed\n\n    # distance travelled while jogging\n    distance_jogging = jogging_speed * jogging_time\n\n    # distance travelled while walking\n    distance_walking = walking_speed * walking_time\n\n    # total distance travelled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # The last digit of a number in multiplication only depends on the last digits of the numbers being multiplied\n    last_digit_2 = (2 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n    \n    # Multiply the last digits to find the last digit of the final expression\n    last_digit = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    # Let the number of each note be n\n    # The total amount can be represented by the equation:\n    # 5n + 10n + 20n = 280\n    # This simplifies to 35n = 280\n    # Solving for n gives us the number of each note\n    n = 280 // 35\n    \n    # Because there are an equal number of £5, £10, and £20 notes,\n    # the total number of notes will be 3 times n\n    return 3 * n\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    # Define the new operations ◆ and □\n    def diamond(M, N):\n        return M * N + N + 1\n\n    def square(M, N):\n        return 8 * M - N * N\n    \n    # Use the defined operations to compute (7 ◆ 6) □ 9\n    result = square(diamond(7, 6), 9)\n    \n    return result\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2  # The smallest prime number to start with\n    while not (isprime(p) and isprime(p + 107)):\n        p += 1\n\n    return p\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    # Calculating the sum of the fractions\n    sum_of_fractions = sum([Fraction(1, d) for d in range(1, 6)])\n    \n    # Converting to a common denominator\n    common_denominator = 60\n    sum_with_common_denominator = sum_of_fractions * common_denominator\n    \n    # Extracting the numerator to get the value of A\n    A = sum_with_common_denominator.numerator\n    \n    return A\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 // 2) + 1  # since the last term is 19 and we're counting only odd squares, 19 is the 10th odd number\n    ans = (1 / 6) * n * (n + 1) * (2 * n + 1)  # using the formula for the sum of squares of first n natural numbers\n    return int(ans)\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    import math\n    students = 92\n    capacity = 6\n    minibusses_needed = math.ceil(students / capacity)\n    return minibusses_needed\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Since Danny takes 12 minutes from the first to the fourth floor,\n    # he passes through three intervals (1st to 2nd, 2nd to 3rd, 3rd to 4th).\n    # Assuming each interval takes the same amount of time,\n    # we divide the total time by the number of intervals.\n    total_time = 12\n    intervals = 3\n    time_per_interval = total_time / intervals\n\n    return time_per_interval\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    sum_series = 0\n    for n in range(1, 2008):\n        sum_series += (n**2 + (n+1)**2) / (n * (n+1))\n    return round(sum_series)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "网络故障，请重试"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = (24 / 100) * 25\n    return ans\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # We need to find the smallest number for the largest pile under the condition\n    # that all piles have a different number of marbles and the sum is 16.\n    # Let's start with the largest pile and go downwards.\n    \n    # Since we cannot have zero marbles in a pile, the smallest pile should have at least 1 marble.\n    # We need to minimize the largest pile, so we will distribute the rest starting from 1 upward.\n\n    # Start with 1 marble in the smallest pile, then 2 in the next, and so on.\n    for largest_pile in range(16, 0, -1):\n        for second_largest in range(largest_pile - 1, 0, -1):\n            for third_largest in range(second_largest - 1, 0, -1):\n                smallest_pile = 16 - (largest_pile + second_largest + third_largest)\n                # Since each pile should have different number of marbles, smallest_pile\n                # needs to be less than third_largest and greater than 0 to be a valid pile.\n                if 0 < smallest_pile < third_largest:\n                    return largest_pile\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = 123456789 * 987654321\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_operation(a, b):\n        return a * b - 2 * a + 4\n\n    ans = 200\n    for i in range(199, 0, -1):\n        ans = hash_operation(ans, i)\n    \n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    result = (3/2) * (4/3) * (5/4) * (6/5) * (7/6) * (8/7) * (9/8) * (10/9)\n    return result\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # Given the formula for the sum of cubes: 1³ + 2³ + 3³ + ...... + n³ = (1 + 2 + 3 + ...... + n)²\n    # We are only considering odd numbers, so we calculate the sum of the first 7 odd numbers and square it\n\n    # Calculate the sum of the first 7 odd numbers\n    n = 7  # There are 7 odd numbers from 1 to 13\n    sum_of_odds = sum(range(1, 2*n, 2))\n    \n    # Square the sum to get the result\n    ans = sum_of_odds**2\n    \n    return ans\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n\n    num_containers = (apples + container_capacity - 1) // container_capacity\n\n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    ribbon_lengths = [56, 42, 84]\n    greatest_length = gcd(gcd(ribbon_lengths[0], ribbon_lengths[1]), ribbon_lengths[2])\n\n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, 50):\n        cube_number = cube_root**3\n        square_number = cube_number - 2\n        if (int(square_number ** 0.5) ** 2) == square_number:\n            return square_number\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_notes = 40\n    spent_percent_10 = 40 / 100\n    spent_percent_2 = 25 / 100\n\n    ten_notes, two_notes = symbols('ten_notes two_notes')\n\n    equation1 = Eq(ten_notes + two_notes, total_notes)\n    equation2 = Eq(ten_notes * (1 - spent_percent_10), two_notes * (1 - spent_percent_2) * (4 / 5))\n\n    solutions = solve((equation1, equation2), (ten_notes, two_notes))\n\n    ten_notes_spent = solutions[ten_notes] * spent_percent_10\n    two_notes_spent = solutions[two_notes] * spent_percent_2\n\n    gift_cost = ten_notes_spent * 10 + two_notes_spent * 2\n\n    return gift_cost\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    # Let x and y be the original numbers; x + y = 11.63\n    # Oliver shifted the decimal in x or y, so we have two cases:\n    # Case 1: x was shifted, so (x / 10) + y = 5.87\n    # Case 2: y was shifted, so x + (y / 10) = 5.87\n\n    # Case 1 equation: x + y = 11.63 and x/10 + y = 5.87, solve for x and y\n    y = (5.87*10 - 11.63) / (10 - 1)\n    x = 11.63 - y\n\n    # Calculate the difference between the two original numbers and multiply by 100\n    difference = abs(x - y) * 100\n    return difference\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    total_oranges = 13\n    min_oranges_per_kid = 2\n    kids = 3\n\n    # Give each kid two oranges to satisfy the at least two condition\n    oranges_left = total_oranges - (min_oranges_per_kid * kids)\n\n    # The problem now reduces to finding the number of partitions of the remaining oranges\n    # into 3 parts, which can be done using combinations with repetition\n    # Number of ways to divide m = oranges_left items into n = kids parts\n    # is given by comb(m + n - 1, n - 1)\n    ways = comb(oranges_left + kids - 1, kids - 1)\n\n    return ways\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    result = (7 / 8) * 32\n    return result\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # On the right-hand side, we have the term (1 - (1/2^(2^n)))\n    # which needs to match the product of the terms on the left.\n\n    # If we consider the pattern of the product on the left-hand side,\n    # we can see that each factor is of the form (1 + (1/2^(2^k)))\n    # for k = 0, 1, 2, ..., 2009\n\n    # Multiplying the factors on the left-hand side together pairwise,\n    # We get that each pair multiplies to exactly 2, because:\n    # (1 + (1/2^(2^k))) * (1 + (1/2^(2^(k+1)))) = 1 + (1/2^(2^k)) + (1/2^(2^(k+1))) + (1/(2^(2^k)*2^(2^(k+1))))\n    # Simplifying the last term: (1/2^(2^k + 2^(k+1))) = (1/2^(2^k * (1+2^k))) = (1/2^(2^(k+1)))\n    # Therefore the second and third terms cancel out and the result is 2 * (1 + 0) = 2\n\n    # So, the product of all terms on the left will be 2^(2009+1), because we have 2010 factors of 2\n    # Simplifying 2^(2009+1) to 2^2010, which on the right side should match 2 * (1 - (1/2^(2^n)))\n\n    # Therefore, 2^(2^n) must equal 2^2010 (since the right side is 2 times a value less than 2)\n    # So, 2^n = 2010\n    # Therefore, n = 2010 (since the base of both exponents is 2 and the values must match)\n\n    n = 2010\n    return n\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bill, son, father = symbols('bill son father')\n    \n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n    \n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n    \n    return solutions[bill]\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken, beth = symbols('ken beth')\n\n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq(4 / 5 * beth, 2 / 5 * ken)\n\n    solutions = solve((equation1, equation2), (ken, beth))\n\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n\n    # In 3 years' time, Sally will be 6 times as old as John\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    # Their total age now is 50 years\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "def solution():\n    for P in range(1, 10):\n        for A in range(0, 10):\n            for S in range(0, 10):\n                for O in range(0, 10):\n                    if len(set([P, A, S, O])) == 4:\n                        PASO = 1000*P + 100*A + 10*S + O\n                        if P*A*S*O == 4*P + 3*A + 2*S + O:\n                            return PASO\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the amount of water Harry and Liam have with 'harry' and 'liam' respectively.\n    harry, liam = symbols('harry liam')\n\n    # Total amount of water they have before the transfer\n    equation1 = Eq(harry + liam, 640)\n\n    # After transferring 90ml from Liam to Harry, Harry has thrice the amount of Liam\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    # Solving the linear equations to find the amount Harry initially had\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # Initial number of questions\n    initial_questions = 3\n    # Number of days from Monday to Sunday\n    num_days = 7\n    # The total number of questions is the sum of an arithmetic sequence\n    # First term (a1) is 3, common difference (d) is 3\n    # The nth term (an) is given by a + (n-1)d\n    # So, we need to find the sum of the first 7 terms\n    sum_questions = sum(initial_questions + (i - 1) * 3 for i in range(1, num_days + 1))\n    \n    return sum_questions\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    man_rate = 1/15  # The man can finish the barrel in 15 days so his rate is 1/15 per day.\n    combined_rate = 1/12  # Together, they can finish the barrel in 12 days, so their combined rate is 1/12 per day.\n\n    wife_rate = symbols('wife_rate')  # Let's denote the wife's rate of drinking as an unknown.\n\n    # Since their rates add up to the combined rate, we have the following equation:\n    equation = Eq(man_rate + wife_rate, combined_rate)\n\n    # Solve for the wife's rate\n    solution = solve(equation, wife_rate)\n\n    # The wife's time to finish the barrel on her own is the inverse of her rate.\n    wife_time = 1 / solution[0]\n\n    return wife_time\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n\n    for white_left in range(3, 9):\n        for red_left in range(2, 6):\n            for black_left in range(0, 4):\n                white_picked = 9 - white_left\n                red_picked = 5 - red_left\n                black_picked = 6 - black_left\n                if white_picked + red_picked + black_picked == 10:\n                    total_ways += comb(9, white_picked) * comb(5, red_picked) * comb(6, black_picked)\n\n    return total_ways\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # Hundreds place should be from 1 to 9\n        for j in range(10):  # Tens place can be from 0 to 9\n            for k in range(10):  # Ones place can be from 0 to 9\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    return 2**10 % 3\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # The sequence of the number of peeled beans is an arithmetic sequence.\n    # Based on the given information:\n    # 20 beans from 9 to 10, difference d is the same for each hour.\n    # 28 beans from 10 to 11, which means the second term a2 = 20 + d.\n    # 36 beans from 11 to 12, which means the third term a3 = a2 + d = 20 + 2d.\n\n    # Now we can find the common difference d as follows:\n    # a3 - a2 = d\n    # (20 + 2d) - (20 + d) = 28 - 20\n    d = 28 - 20\n\n    # Once we have the common difference, we can calculate the first term a1:\n    # a2 = a1 + d\n    # 20 = a1 + d\n    a1 = 20 - d\n\n    return a1\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5  # insect length in cm\n    snake_length_m = 1    # snake length in meters\n    snake_length_cm = snake_length_m * 100  # converting snake length to cm\n\n    times_smaller = snake_length_cm / insect_length_cm\n\n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    diff = 2\n    while term < 100:\n        term += diff\n        diff += 2\n        if term >= 100:\n            return prev_term\n        prev_term = term\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    from fractions import Fraction\n\n    total = Fraction(1, 2) + Fraction(1, 4) + Fraction(1, 6) + Fraction(3)\n    # Get the lcm of the denominators to find the original total number of pearls\n    lcm_of_denoms = 12  # LCM of 2, 4, and 6\n\n    # Since the sum of the fractions and the 3 remaining pearls should equal 1 strand,\n    # we set up the following equation where `strand` is the original number of pearls:\n    # (1/2 + 1/4 + 1/6) * strand + 3 = strand\n    # To find the strand, just solve for strand with total fractions accounted for and 3 pearls remaining\n    strand = 3 * lcm_of_denoms / (lcm_of_denoms - (lcm_of_denoms/2 + lcm_of_denoms/4 + lcm_of_denoms/6))\n\n    return int(strand)\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    mean_of_three = 120\n    mean_of_four = 150\n\n    sum_of_three = mean_of_three * 3\n    sum_of_four = mean_of_four * 4\n\n    fourth_number = sum_of_four - sum_of_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front and Bud is 6th from the end.\n    # There are 5 children between Pip and Bud.\n    # The total number is the sum of the position of Pip, the 5 children in between, and the position of Bud from the end.\n    total_children = 6 + 5 + 6 - 1  # -1 because we counted Pip twice, as the first in the 5 and as the 6th from front.\n    return total_children\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Using the Chinese Remainder Theorem to solve the problem\n    # The first number is a multiple of 7, so it has the form 7x\n    # The second number is two more than the first, and a multiple of 8: 7x + 2\n    # The third number is four more than the first, and a multiple of 9: 7x + 4\n    \n    # The three congruences we need to solve are:\n    # x ≡ 0 (mod 7), x ≡ -2 (mod 8), and x ≡ -4 (mod 9)\n    congruences = [(0, 7), (-2, 8), (-4, 9)]\n    \n    x = solve_congruence(*congruences)[0]\n    \n    # The three numbers are then x, x + 2, and x + 4, respectively\n    first_number = x\n    second_number = first_number + 2\n    third_number = first_number + 4\n    \n    return first_number + second_number + third_number\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    last_term = first_term + (total_rows - 1) * common_difference\n\n    total_athletes = (total_rows * (first_term + last_term)) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    paintings_done = 35\n    days_taken = 5\n    total_paintings = 56\n\n    paintings_per_day = paintings_done / days_taken\n    remaining_paintings = total_paintings - paintings_done\n    more_days_needed = remaining_paintings / paintings_per_day\n\n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    ans = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    return ans // 3\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    pieces_of_paper = 18\n    leaf_every = 3\n\n    leaves = pieces_of_paper // leaf_every\n\n    return leaves\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80  # The weight of the basket when full of mangoes\n    half_full_weight = 60  # The weight of the basket when half full of mangoes\n\n    # Since half of the mangoes weigh 20 grams (80 - 60), the full mangoes would weigh 40 grams.\n    # Subtract the weight of full mangoes from the full weight to find the weight of the empty basket.\n    empty_basket_weight = full_weight - 2 * (full_weight - half_full_weight)\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    term5 = 8\n    term12 = 50\n\n    common_difference = (term12 - term5) / (12 - 5)\n    \n    return common_difference\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations\n\ndef time_taken(times, strategy):\n    # time taken for the current strategy\n    time = 0\n    while len(times) > 3:\n        a, b = strategy[0], strategy[1]\n        time += times[b]\n        times = [times[0]] + times[2:]  # remove the fastest and the one who just crossed\n        time += times[0]  # fastest goes back\n        strategy = strategy[2:] + (a,)  # last one to have crossed goes back eventually\n    return time + max(times)  # last crossing\n\ndef solution():\n    times = [7, 9, 4, 10]\n    shortest_time = float('inf')\n    \n    # Generate all possible crossing strategies\n    # Each element in strategies is a tuple representing the order of crossings\n    strategies = list(combinations(range(4), 2)) * ((len(times) - 1) // 2)\n    \n    for strategy in strategies:\n        sorted_strategy = sorted(strategy)\n        if sorted_strategy[1] < len(times):  # valid strategy\n            t = time_taken(list(times), sorted_strategy)\n            if t < shortest_time:\n                shortest_time = t\n    \n    return shortest_time\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    ans = 95 * (37 + 42 + 21)\n    return ans\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud, bob = symbols('pip bud bob')\n\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_family_age = 29 * 6\n    total_age_parents = total_family_age - 64\n    # There are four family members whose age we consider 3 years ago, since children do not count for the parents' average age 3 years ago\n    average_age_parents_3_years_ago = (total_age_parents - 3 * 2) / 2\n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    last_term = 242\n    difference = 3\n    # Find the number of terms in the original arithmetic progression\n    num_terms = ((last_term - first_term) / difference) + 1\n    # Initialize the three variables as the first three terms of the original sequence\n    term1, term2, term3 = first_term, first_term + difference, first_term + 2 * difference\n    # Keep track of the current number of terms\n    current_terms = num_terms\n    \n    while current_terms > 3:\n        # Calculate the new term to be added at the end of the sequence\n        new_term = term1 + term2 + term3\n        # Update the term values to simulate erasing the first three terms and adding the new term\n        term1, term2, term3 = term2, term3, new_term\n        # Decrease the current number of terms by 2\n        current_terms -= 2\n    \n    # Return the second number of the final three numbers\n    return term2\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_number = min(numbers, key=lambda x: abs(x - 0.1))\n    return closest_number\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    ans = 29 + 37 + 76 + 63 + 24 + 45 + 61 + 55\n    return ans\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n\n    total_children = jacob + sisters + brothers\n\n    return total_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_people = 5\n    original_days = 15\n    target_days = 7\n\n    # Calculate the total amount of work (in man-days) to build the bridge\n    total_work = original_people * original_days\n\n    # Calculate the number of people needed to complete the total amount of work in target_days\n    people_needed = total_work / target_days\n\n    # Calculate how many more people are needed in addition to the original 5\n    additional_people = people_needed - original_people\n\n    # Return the least number of additional people needed (rounded up as you can't have a fraction of a person)\n    from math import ceil\n    return ceil(additional_people)\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total length of the journey in meters\n    x = symbols('x')\n\n    # Maria's usual time to cover the distance is 30 minutes (convert to seconds)\n    usual_time = 30 * 60\n\n    # The speed reduction is 20%, so her reduced speed is 80% or 0.8 of the usual speed\n    reduced_speed_ratio = 0.8\n\n    # The time Maria arrives late is 5 minutes (convert to seconds)\n    late_time = 5 * 60\n\n    # Therefore, the time Maria spent on running at reduced speed is the usual time + late time\n    time_reduced_speed = usual_time + late_time\n\n    # Let v be Maria's usual speed, so the total length of the journey x is v * usual_time\n    # At reduced speed, she runs 2400 meters, so the time spent is 2400 / (0.8 * v)\n    # The remaining distance she runs at reduced speed is x - 2400\n    # And the time spent on this remaining distance is (x - 2400) / (0.8 * v)\n    # The total time spent at reduced speed is the sum of the times for 2400 meters and the remaining distance\n    # Which is equal to the time_reduced_speed\n\n    # Equation: 2400 / (0.8 * v) + (x - 2400) / (0.8 * v) = time_reduced_speed\n    # Simplify the equation: (2400 + x - 2400) / (0.8 * v) = usual_time + late_time\n    # Further simplify: x / (0.8 * v) = usual_time + late_time\n    # We know that x = v * usual_time\n    # Substitute x: v * usual_time / (0.8 * v) = usual_time + late_time\n    # The v cancels out: usual_time / 0.8 = usual_time + late_time\n    # Solve for usual_time and get x\n\n    equation = Eq((usual_time / reduced_speed_ratio), (usual_time + late_time))\n    solutions = solve(equation, usual_time)\n\n    # Calculate the length of the journey x\n    x = solutions[0] * reduced_speed_ratio\n\n    return x\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # before the transfer\n    a = symbols('a')  # a represents the original number of students in school A\n    b = 1050 - a      # b represents the original number of students in school B\n\n    # after the transfer, a-20 represents the students in school A after the transfer\n    # b+20 represents the students in school B after the transfer\n    # solve for the equation a-20 = (b+20) + 10\n    equation = Eq(a - 20, (b + 20) + 10)\n\n    # solving the equation gives us the original number of students in school A\n    ans = solve(equation, a)[0]\n\n    return ans\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3\n    temp_rise_per_hour = 2\n    time_elapsed_hours = 5.5  # From 5:00 am to 10:30 am is 5 hours and 30 minutes\n\n    # Calculate the temperature rise\n    temperature_rise = temp_rise_per_hour * time_elapsed_hours\n\n    # Calculate the final temperature at 10:30 am\n    final_temp = initial_temp + temperature_rise\n\n    return final_temp\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    # Let x be the initial amount Mrs Chan had.\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # After spending at shop A\n    remaining_after_A = (x / 2) - 1\n    # After spending at shop B\n    remaining_after_B = (remaining_after_A / 2) - 2\n    # After spending at shop C\n    remaining_after_C = (remaining_after_B - (remaining_after_B / 3)) - 3\n    \n    # She had $49 left\n    equation = Eq(remaining_after_C, 49)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    ans = 12321 // 37\n    return ans\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Darrell can draw all blue and white pencils without getting a green one\n    max_without_green = 3 + 3 \n    # So to ensure getting at least 1 green pencil, Darrell must draw one more\n    return max_without_green + 1\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    boys_fraction = 3/4\n    boys_count = total_students * boys_fraction\n    girls_count = total_students - boys_count\n    return int(girls_count)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n\n    ans = []\n    for d in divisors(2240):\n        if is_square(2240 // d):\n            ans.append(d)\n    \n    return max(ans)\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    total_books = 280\n    num_shelves = 7\n    common_difference = 3\n\n    # Let's denote the number of books on the top shelf as 'top_shelf_books'.\n    # Given that each shelf has 3 fewer books than the one below it, we can express the number of books on each shelf in terms of 'top_shelf_books':\n    # Top shelf has 'top_shelf_books' books.\n    # Second shelf has 'top_shelf_books + 3' books.\n    # Third shelf has 'top_shelf_books + 6' books.\n    # ...\n    # Seventh (bottom) shelf has 'top_shelf_books + 3 * 6' books.\n    # There are a total of 7 shelves.\n    # The total number of books is the sum of an arithmetic sequence starting with 'top_shelf_books' and ending with 'top_shelf_books + 3 * 6', with a common difference of 3.\n\n    # We need to find 'top_shelf_books'. The sum of an arithmetic series is given by:\n    # Sum = n/2 * (first_term + last_term)\n    # Where n is the number of terms.\n\n    # We can set up an equation:\n    # total_books = num_shelves / 2 * (top_shelf_books + top_shelf_books + 3 * (num_shelves - 1))\n    # 280 = 7 / 2 * (2 * top_shelf_books + 3 * 6)\n    # 2 * 280 = 7 * (2 * top_shelf_books + 18)\n    # 560 = 14 * top_shelf_books + 126\n    # 14 * top_shelf_books = 560 - 126\n    # 14 * top_shelf_books = 434\n    # top_shelf_books = 434 / 14\n\n    top_shelf_books = (total_books - (num_shelves * (num_shelves - 1) // 2) * common_difference) // num_shelves\n    return top_shelf_books\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    import math\n\n    # Given cycles for the chores\n    sweep_cycle = 3  # days\n    mop_cycle = 5  # days\n    cook_cycle = 9  # days\n    clean_cycle = 3 * 7  # converting weeks to days\n\n    # Least Common Multiple (LCM) of all cycles will give the day\n    # when Aaron does all 4 chores together again\n    lcm = math.lcm(sweep_cycle, mop_cycle, cook_cycle, clean_cycle)\n    return lcm\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the total number of candies\n    # Let 'k' be the number of kids\n    c, k = symbols('c k')\n\n    # If every kid eats 18 candies then 12 more candies are needed\n    equation1 = Eq(c, k * 18 + 12)\n\n    # If every kid eats 15 candies, then there are exactly enough candies for k + 2 kids\n    equation2 = Eq(c, (k + 2) * 15)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (c, k))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 311):\n        total_sum += sum(int(digit) for digit in str(i))\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n\n    avril_age_2_years_ago = avril_age_now - 2\n    dad_age_2_years_ago = dad_age_now - 2\n\n    age_difference_2_years_ago = dad_age_2_years_ago - avril_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = cost_per_item * 11\n    return total_cost\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    import math\n\n    # Calculate the value inside the cube root\n    cube_root_value = ((-4.56) ** 2 - (8.1) ** 3) / (7.2 ** 3)\n    # Calculate the value inside the square root\n    sqrt_value = math.sqrt(6 + 3 / 4)\n    # Calculate the value of the expression under the cube root\n    expr_value = cube_root_value / (-sqrt_value - (-30.15))\n    # Calculate the cube root\n    cube_root_result = expr_value ** (1 / 3)\n    # Final calculation\n    result = 16.7 - cube_root_result\n    # Round off to nearest 3 decimal places\n    ans = round(result, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let's denote x as the number of years later.\n\n    # Ages right now:\n    oliver_age_now = 20\n    lin_age_now = 26\n\n    # Their ages x years later:\n    oliver_age_later = oliver_age_now + x\n    lin_age_later = lin_age_now + x\n\n    # We want their ages to sum up to 48 x years later:\n    # equation: oliver_age_later + lin_age_later = 48\n    #           (oliver_age_now + x) + (lin_age_now + x) = 48\n    # Simplifying the equation:\n    #           2x + oliver_age_now + lin_age_now = 48\n\n    # Solving for x:\n    x = (48 - (oliver_age_now + lin_age_now)) / 2\n\n    return x\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Speed ratio of Jayden to Carter is 7:4\n    speed_ratio_jayden_to_carter = 7 / 4\n\n    # Total distance between A and B\n    total_distance = 440\n\n    # Since they walk towards each other and meet, the total distance\n    # they cover together is the distance between A and B.\n    # Let the distance travelled by Jayden before the meeting be d.\n    # Then the distance travelled by Carter before the meeting is (total_distance - d).\n    # From the speed ratio, we get the equation:\n    # 7/4 * d = (total_distance - d)\n    # Solving for d:\n    d = total_distance / (1 + speed_ratio_jayden_to_carter)\n    \n    # The distance of the meeting place from place A is d.\n    return d\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_age, mrs_age = symbols('mr_age mrs_age')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq((mr_age - 7) / (mrs_age - 7), 6/5)\n    equation2 = Eq(mr_age + mrs_age, 69)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n\n    return solutions[mr_age]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    mean_of_5 = 87\n    mean_of_6 = 88\n    total_of_5 = mean_of_5 * 5\n    total_of_6 = mean_of_6 * 6\n    jims_score = total_of_6 - total_of_5\n    return jims_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    return 58+63+59+62+63+56+61\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of stickers that Sam and Peter originally had be 7x and 5x respectively\n    # Let the original number of stickers that John had be y\n    sam, peter, john = symbols('sam peter john')\n\n    # Sam and Peter gave 20% of their stickers to John, so they are left with 80% of their original stickers\n    # John's stickers increased by 80%, which is the total amount he received from Sam and Peter (0.20 * 7x + 0.20 * 5x)\n    # Sam has 20 stickers more than John in the end, so sam - 0.20 * sam = john + 0.20 * (7x + 5x) + 20\n\n    # Write the equations based on the above information\n    equation1 = Eq(john + 0.80 * john, john + 0.20 * (7 * sam + 5 * peter))\n    equation2 = Eq(sam - 0.20 * sam, john + 20)\n\n    # Use the fact that sam : peter = 7 : 5 to write the third equation\n    equation3 = Eq(5 * sam, 7 * peter)\n\n    # Solve the system of equations for the number of stickers Sam, Peter, and John originally had\n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n\n    # Get the number of stickers Peter had originally\n    return solutions[peter]\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n    \n    first_reduction = initial_price * first_discount\n    price_after_first_discount = initial_price - first_reduction\n    \n    second_reduction = price_after_first_discount * second_discount\n    final_price = price_after_first_discount - second_reduction\n    \n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    num_bats = symbols('num_bats', integer=True)\n\n    # Cost price of each bat\n    cost_price_per_bat = 135\n\n    # Selling price of each bat\n    selling_price_per_bat = 185\n\n    # Profit after selling (total_bats - 3) bats\n    profit = 2945\n\n    # Equation representing the cost and the profit\n    equation = Eq((num_bats - 3) * selling_price_per_bat, num_bats * cost_price_per_bat + profit)\n\n    # Solve the equation to find the number of bats\n    solution = solve(equation, num_bats)\n\n    # Return the solution (number of bats)\n    return solution[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Raja and Kumar's original amounts\n    raja, kumar = symbols('raja kumar')\n\n    # Equation representing the money left after Raja spent $286\n    equation1 = Eq(raja - 286, raja)\n\n    # Equation representing the money left after Kumar spent $109\n    equation2 = Eq(kumar - 109, kumar)\n\n    # Equation representing that Kumar has 4 times as much money as Raja\n    equation3 = Eq(kumar - 109, 4 * (raja - 286))\n\n    # Raja and Kumar had the same amount of money at first\n    equation4 = Eq(raja, kumar)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    bus_capacity = 6\n\n    num_buses = -(-total_boys // bus_capacity)  # Ceiling division\n\n    return num_buses\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for table and chair costs\n    table_cost, chair_cost = symbols('table_cost chair_cost')\n    \n    # Define the equations based on the problem statement\n    eq1 = Eq(table_cost, chair_cost + 160)  # the table cost is $160 more than the chair\n    eq2 = Eq(table_cost + 5 * chair_cost, 328)  # the total cost for one table and 5 chairs\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (table_cost, chair_cost))\n\n    return solutions[chair_cost]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the hot tap to fill the bath alone\n    hot_time = symbols('hot_time')\n    \n    # Given that the cold tap fills at twice the rate, it would take half the time\n    # Therefore, time for cold tap to fill the bath alone is hot_time / 2\n    \n    # The combined rate of both taps fills the bath in 10 minutes, so:\n    # 1/hot_time (portion filled by hot tap in one minute) +\n    # 2/hot_time (portion filled by cold tap in one minute) = 1/10 (portion filled by both in one minute)\n    \n    equation = Eq(1/hot_time + 2/hot_time, 1/10)\n    \n    # solving for hot_time\n    solutions = solve(equation, hot_time)\n\n    # The time to fill the bath with just the cold tap is the hot_time divided by 2\n    cold_time = solutions[0] / 2\n\n    return cold_time\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    mean_diff = 240\n    \n    # Let's denote the mean of the first 4 numbers as x.\n    # Then the mean of the last 6 numbers is x + mean_diff.\n    # We have 4x + 6(x + mean_diff) = total_sum\n    # Simplifying, we get 10x + 6 * mean_diff = total_sum\n    # x = (total_sum - 6 * mean_diff) / 10\n\n    x = (total_sum - 6 * mean_diff) / 10\n    mean_last_six = x + mean_diff\n\n    return mean_last_six\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    # Convert Bud's amount to pence\n    bud_pence = 110 # since £1.10 is equivalent to 110 pence\n\n    # Pip's amount is already in pence\n    pip_pence = 60\n\n    # The total amount in pence\n    total_pence = bud_pence + pip_pence\n\n    return total_pence\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(10):\n                if P != I and P != S and I != S:\n                    if (I + I + I + I == P) and ((S + S + S + S) % 10 == I):\n                        return P*10 + I\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances in meters\n    distance1 = 280\n    distance2 = 400\n    # The total distance is 800 meters, so the distance for the sprint stage can be calculated\n    distance3 = 800 - distance1 - distance2\n\n    # Time = Distance / Speed\n    time1 = distance1 / speed1 \n    time2 = distance2 / speed2 \n    time3 = distance3 / speed3 \n    \n    # The total time is the sum of times for each stage \n    total_time = time1 + time2 + time3 \n\n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio = 3 / 2  # The ratio of Joyce's speed to Lori's speed\n    \n    joyce_speed = lori_speed * ratio  # Joyce's speed in meters per second\n    time = 10  # time in seconds\n    \n    distance_joce_runs = joyce_speed * time  # distance Joyce runs in 10 seconds\n\n    return distance_joce_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "网络故障，请重试"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    num_teams = 5\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits_used, pages = 0, 0\n    while digits_used < 792:\n        pages += 1\n        digits_used += len(str(pages))\n    return pages - 1 if digits_used > 792 else pages\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    total_weight_grams = (1 * 1000 + 500) + (1 * 1000 + 200) + 900\n    weight_per_tin = total_weight_grams / 8\n    return weight_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j / i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    from math import factorial\n\n    # A and B have two choices, either at the start or at the end.\n    # C and D have 2 factorial ways to arrange themselves in the remaining two spots.\n    ways_AB = 2  # A and B can either be (A,B) or (B,A) in the two extreme positions\n    ways_CD = factorial(2)  # C and D can be arranged in 2! ways\n\n    # Total number of ways A, B, C, and D can line up\n    total_ways = ways_AB * ways_CD\n\n    return total_ways\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    frac1_numerator = 20\n    frac1_denominator = 30\n    frac2_denominator = 27\n\n    frac2_numerator = (frac1_numerator / frac1_denominator) * frac2_denominator\n\n    return frac2_numerator\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set(permutations(digits, 2))\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Worst case: Janice takes out all marbles for the colors she doesn't get 4 of the same color.\n    # She could take 3 red, 3 blue, and 3 green without having 4 of the same color.\n    worst_case_same_color = 3\n    \n    # To ensure 4 marbles of the same color, she needs to take out one more marble.\n    # Since she could have taken 3 of each of the 3 colors, the next marble ensures she has 4 of at least one color.\n    min_marbles = (worst_case_same_color * 3) + 1\n    \n    return min_marbles\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    min_even_num = float('inf')  # Start from infinity to minimize.\n    \n    for perm in permutations(digits, 4):  # Generate all permutations of the four digits\n        num = int(''.join(map(str, perm)))  # Combine digits to form an integer\n        \n        if num % 2 == 0 and num < min_even_num:  # Check for evenness and if it's smaller than the current minimum\n            min_even_num = num  # Update minimum even number\n    \n    return min_even_num\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    distance_met = 360  # distance from their house where Don and Danny meet\n    distance_library = 780  # total distance from their house to the library\n\n    # Time taken for Don to meet Danny\n    time = distance_met / don_speed\n\n    # Remaining distance for Danny to reach the meeting point\n    # This is the distance from the library to the meeting point\n    danny_to_meet_distance = distance_library - distance_met\n\n    # Danny's speed\n    danny_speed = danny_to_meet_distance / time\n\n    return danny_speed\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    # Starting from the highest possible two-digit number, 99.\n    # We decrement by 1 until we find a number that fits both conditions.\n    for number in range(99, 9, -1):\n        if number % 7 == 5 and number % 13 == 11:\n            return number\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n\n    days_for_one_worker = total_work / 1\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = 10*x + y\n            B = 200 + 10*x + y\n            if B == 6*A + 25:\n                return A\n    return None\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Brackets can be inserted in different ways that change the order of operations.\n    # Let's try all possible combinations and count the distinct results\n    \n    # Original equation: 285 + 15 / 5 - 2\n    # Possible ways of adding brackets: \n    # 1. ((285 + 15) / 5) - 2 \n    # 2. (285 + 15) / (5 - 2) \n    # 3. 285 + (15 / 5) - 2 \n    # 4. 285 + (15 / (5 - 2)) \n    # 5. 285 + ((15 / 5) - 2) \n    \n    # Compute the results considering the operator precedence\n    a = ((285 + 15) / 5) - 2\n    b = (285 + 15) / (5 - 2)\n    c = 285 + (15 / 5) - 2\n    d = 285 + (15 / (5 - 2))\n    e = 285 + ((15 / 5) - 2)\n\n    # Count the number of distinct results\n    results = {a, b, c, d, e}\n    count = len(results)\n\n    return count\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n    pupils_per_row = total_pupils // num_rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    a, b = symbols('a b')\n\n    # Define the two equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    # Initialize the lockers list with False, representing unlocked lockers\n    lockers = [False] * 101  # 0 index is not used, lockers numbered from 1 to 100\n\n    # Process lockers divisible by 3 (locker numbers 3, 6, 9, ..., 99)\n    for i in range(3, 101, 3):\n        lockers[i] = not lockers[i]  # Boys lock their lockers\n\n    # Process lockers divisible by 5 (locker numbers 5, 10, 15, ..., 100)\n    for i in range(5, 101, 5):\n        lockers[i] = not lockers[i]  # Boys change the state of their lockers\n\n    # Count the unlocked lockers at the end\n    ans = sum(not locker for locker in lockers[1:])  # Skip the 0 index\n\n    return ans\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        if perm.index('A') in range(perm.index('B') + 1, perm.index('C')) or \\\n           perm.index('A') in range(perm.index('C') + 1, perm.index('B')):\n            if abs(perm.index('D') - perm.index('E')) != 1:\n                if abs(perm.index('F') - perm.index('G')) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # Nicolas to Yiding ratio when Nicolas is at level 4\n    ratio = 4 / 3\n    \n    # When Nicolas is at level 16, to find Yiding's level\n    yiding_level = 16 / ratio\n\n    return int(yiding_level)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one cake, y be the amount of money Lucy has.\n    x, y = symbols('x y')\n    \n    # If she buys 10 cakes, she borrows $11, which means 10x - y = 11\n    equation1 = Eq(10 * x - y, 11)\n\n    # If she buys 13 cakes, she borrows $26, which means 13x - y = 26\n    equation2 = Eq(13 * x - y, 26)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are only interested in the cost of one cake\n    return solutions[x]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_children = 4 + 6\n\n    total_mass = total_mass_boys + total_mass_girls\n    average_mass = total_mass / total_children\n\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = (divisor * quotient) + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_scores = 5 * 40\n    known_scores_sum = 37 + 53 + 29 + 41\n    x = total_scores - known_scores_sum\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"CHEESE\")\n    c_count = 1\n    h_count = 1\n    e_count = 3\n    s_count = 1\n    \n    ans = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n    return ans\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_numbers = 0\n    \n    # Case 1: When we have 77 at any two positions\n    total_numbers += 9  # Because we can place any digit (1-9) at the hundred's place excluding 0\n    \n    # Case 2: When we have 7 at either of the first two positions and not at the third\n    total_numbers += 2 * 9 * 9  # Two possible positions for the first 7, and 9 options for the other two digits\n\n    # Case 3: When we have 7 at the third position and one of the first two positions\n    total_numbers += 2 * 8 * 10  # Two possible positions for the second 7, 8 options for the first (1-8),\n                                 # and 10 options for the other digit (0-9)\n    \n    # Correct for duplicates: we counted the numbers with three 7s in both Case 2 and Case 3\n    duplicates = 2 * 9  # Two ways to arrange three 7s with one other digit (9 options for that digit). \n    \n    return total_numbers - duplicates\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, goats = symbols('cows goats')\n\n    # 65% were cows; so 35% were goats initially\n    initial_eq = Eq(cows, 0.65 * (cows + goats))\n\n    # When 240 more animals are added, 85% are cows (20% increase)\n    new_eq = Eq(cows + 240, 0.85 * (cows + goats + 240))\n\n    # The number of goats doubled\n    goats_eq = Eq(2 * goats, goats + 240)\n\n    # Solve the system of equations\n    solutions = solve((initial_eq, new_eq, goats_eq), (cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    # Start with the largest possible five-digit number\n    # and iterate downwards until the number satisfying\n    # the condition is found.\n    for i in range(99999, 10000, -1):  # five-digit numbers with nonzero leading digit\n        original_num = int(f'{i}9')  # append the 9 to form the original six-digit number\n        new_num = int(f'9{i}')       # prepend the 9 to the five-digit part to form the new number\n        \n        # Check if the new number is four times the original number\n        if new_num == 4 * original_num:\n            return original_num  # return the special six-digit number\n        \n    return None  # if no solution is found\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # Since the divisor is at its smallest value when it is 1, we multiply\n    # the quotient by the smallest divisor and add the remainder.\n    return (quotient * 1) + remainder\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, jonathan = symbols('abigail jonathan')\n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    alice_rate = 1/40\n    bob_rate = 1/60\n    total_days = 27\n    fraction_work_done = total_days / (1 / alice_rate + 1 / bob_rate)\n    alice_days_off = 40 - fraction_work_done\n    \n    return alice_days_off\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n\n    return new_operation(4, 3) - new_operation(3, 4)\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A != 0 and C != 0 and 100 * A + 10 * B + A + 100 * C + 10 * D + C == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pip, bud = symbols('pip bud')\n    \n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n    \n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages_per_day_slow, days_late, pages_per_day_fast, days_early = 30, 2, 39, 4\n    deadline, total_pages = symbols('deadline total_pages')\n    \n    equation1 = Eq(pages_per_day_slow * (deadline + days_late), total_pages)\n    equation2 = Eq(pages_per_day_fast * (deadline - days_early), total_pages)\n\n    solutions = solve((equation1, equation2), (deadline, total_pages))\n\n    return solutions[deadline], solutions[total_pages]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = [2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2]\n    total_digits = 535\n    sequence_length = len(sequence)\n    \n    full_sequences = total_digits // sequence_length\n    remaining_digits = total_digits % sequence_length\n    \n    total_twos = full_sequences * sequence.count(2)\n    total_twos += sequence[:remaining_digits].count(2)\n    \n    return total_twos\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    operations = [(4, 1, 17), (5, 4, 29), (8, 16, 80)]\n    \n    # Trying to find the pattern in the given operations\n    for a, b, result in operations:\n        # Check if the pattern follows (a + b) * (some constant)\n        c = result / (a + b)\n        if c == int(c):\n            # Found a consistent pattern\n            pattern = int(c)\n            break\n            \n    # Apply the found pattern to calculate 10 Δ 9\n    ans = (10 + 9) * pattern\n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    cookies_baked_morning = 85\n    cookies_baked_afternoon = 135\n    cookies_given_away = 55\n\n    cookies_left = (cookies_baked_morning + cookies_baked_afternoon) - cookies_given_away\n\n    return cookies_left\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_fifty, original_one = symbols('original_fifty original_one')\n    final_fifty = original_fifty + (5/0.5) # Owen's mother gave him five-dollars’ worth of fifty-cent coins (10 more)\n    final_one = original_one + 10 # Owen's mother gave him $10 one-dollar coins (10 more)\n\n    # According to the problem, 2/7 of his coins were fifty-cent coins.\n    equation1 = Eq(original_fifty, (2/7) * (original_fifty + original_one))\n\n    # In the end, Owen had twice as many one-dollar coins as fifty cent coins.\n    equation2 = Eq(final_one, 2 * final_fifty)\n\n    solutions = solve((equation1, equation2), (original_fifty, original_one))\n\n    # The total number of coins Owen had at first\n    total_coins_at_first = solutions[original_fifty] + solutions[original_one]\n\n    return total_coins_at_first\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - (men + children)\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        total = 5 * adults + 3 * children\n        if total == 75:\n            return adults\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for amounts of dress, shirt and belt\n    dress, shirt, belt = symbols('dress shirt belt')\n\n    # Equation representing \"A dress costs thrice as much as a belt\"\n    equation1 = Eq(dress, 3 * belt)\n\n    # Equation representing \"The shirt costs twice as much as a dress\"\n    equation2 = Eq(shirt, 2 * dress)\n\n    # Equation representing \"The difference between the cost of the shirt and the cost of the belt is $155\"\n    equation3 = Eq(shirt - belt, 155)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (dress, shirt, belt))\n\n    # Calculate \"How much more does the dress cost than the shirt?\"\n    dress_more_than_shirt = solutions[shirt] - solutions[dress]\n\n    return dress_more_than_shirt\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person has after the transactions\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Define the equations based on the problem\n    transaction1 = Eq(charlene - 15, betsy + 15)  # Charlene gave 15 marbles to Betsy\n    transaction2 = Eq(betsy + 15 - 8, anna + 8)  # Then Betsy gave 8 marbles to Anna\n    total_marbles = Eq(anna + 8 + betsy + 15 - 8 + charlene - 15, 168)  # Total number of marbles is 168\n    ratio = Eq((anna + 8) / (betsy + 15 - 8) / (charlene - 15), 2 / 5 / 7)  # The final ratio 2:5:7\n\n    # Solve the equations to find the number of marbles each person has\n    solutions = solve((transaction1, transaction2, total_marbles, ratio), (anna, betsy, charlene))\n\n    # Since we want the number of marbles Betsy had at first\n    betsy_at_first = solutions[betsy] + 15 - 8\n\n    return betsy_at_first\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_savings = 7\n    brenda_daily_savings = 6\n    andy_total_savings = 378\n\n    days_andy_saved = andy_total_savings / andy_daily_savings\n    brenda_total_savings = brenda_daily_savings * days_andy_saved\n\n    return brenda_total_savings\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    # total number of questions\n    total_questions = 10\n\n    # points for a correct and wrong answer\n    correct_points = 6\n    wrong_points = -2\n\n    # total points Eddie got\n    total_points = 44\n\n    # let's denote the number of correct answers as x and wrong answers as y\n    # we know that x + y = total_questions\n    # and also that correct_points*x + wrong_points*y = total_points\n\n    # we can find x from these two equations\n\n    # x + y = total_questions\n    # y = total_questions - x\n\n    # correct_points*x + wrong_points*y = total_points\n    # 6*x -2*(total_questions - x) = total_points\n    # 6*x - 20 + 2*x = total_points\n    # 8*x = total_points + 20\n    # x = (total_points + 20) / 8\n\n    x = (total_points + 20) / 8\n\n    return int(x)\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original dimensions: l, b, h\n    # New dimensions: 1.1 * l, 4/5 * b, 11/10 * h\n    # Original volume = l * b * h\n    # New volume = (1.1 * l) * (4/5 * b) * (11/10 * h)\n    # New volume as percentage of the original volume:\n    # ((1.1 * l) * (4/5 * b) * (11/10 * h)) / (l * b * h) * 100%\n\n    new_volume_percentage = (1.1 * (4/5) * (11/10)) * 100\n    return new_volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n    return factorial(8) // factorial(8 - 3)\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    total_points = 10\n    points_in_triangle = 3\n\n    ans = comb(total_points, points_in_triangle)\n    return ans\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_sequence = 30 + 40 + 50 + 30 + 40 + 50 + 30 + 40 + 50\n    return sum_sequence\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60  # Percentage of work that's still left\n    remaining_masks = 360  # Number of masks still to make\n\n    total_masks = remaining_masks * 100 / remaining_work_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    more_mushrooms = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total_mushrooms, more_mushrooms), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # Since we need to maximize the number of questions Noa can solve,\n    # we should minimize the number of questions solved by other classmates.\n    # Since there are 5 students in total including Noa,\n    # and everyone should solve at least 1 question, we can start by\n    # giving the minimum number of questions to the 4 classmates.\n    # Let's distribute 1 question to each classmate first.\n\n    # We distribute 1 to the first classmate, 2 to the second, 3 to the third,\n    # and so on until there are no students left.\n    # To find the largest number Noa can solve, we minimize the others' numbers.\n    # Start by giving 1 question to one classmate, 2 to the second, and so on\n\n    classmates = 4  # Noa's 4 classmates\n    total_questions = 40  # Total number of questions\n\n    # The distribution of questions to his classmates will be in increasing order\n    # starting with 1, hence 1, 2, 3, .... We find the sum of these numbers\n    # using the formula for the sum of the first n natural numbers.\n    # sum = n * (n + 1) // 2\n\n    # We find the sum for 4 students (classmates)\n    sum_classmates = classmates * (classmates + 1) // 2\n\n    # Subtract the sum of questions solved by classmates from total questions\n    # to find the maximum questions Noa can solve.\n    max_questions_noa = total_questions - sum_classmates\n\n    return max_questions_noa\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scan, ted = symbols('scan ted')\n\n    # Current age ratio\n    ratio_now = Eq(scan / ted, 1/4)\n    # Age ratio after 4 years\n    ratio_future = Eq((scan + 4) / (ted + 4), 1/3)\n\n    # Solve for current ages\n    current_ages = solve((ratio_now, ratio_future), (scan, ted))\n    scan_age = current_ages[scan]\n    ted_age = current_ages[ted]\n\n    # Backtrack to find when the ratio was 1:9\n    years_ago = symbols('years_ago')\n    ratio_past = Eq((scan - years_ago) / (ted - years_ago), 1/9)\n\n    # Find the years ago\n    years_ago = solve(ratio_past.subs({scan: scan_age, ted: ted_age}), years_ago)\n\n    return years_ago[0]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    ans = round(278, -1)\n    return ans\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    ans = 52.8 * 7\n    return ans\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    hottest = 58\n    coldest = -89\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Star jogs from 6:30 am to 7:30 am, which is 1 hour\n    jogging_time = 1  # hours\n    jogging_speed = 6.5 # miles per hour\n    jogging_distance = jogging_time * jogging_speed # distance = speed * time\n\n    # Star walks from 7:30 am to 9:30 am, which is 2 hours\n    walking_time = 2  # hours\n    walking_speed = 4.5 # miles per hour\n    walking_distance = walking_time * walking_speed # distance = speed * time\n\n    # Total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    result = 9 * 100  # 1 metre = 100 centimetres\n    return result\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    foldable, non_foldable = symbols('foldable non_foldable')\n    total_bicycles = 476\n    sold_bicycles = 208\n\n    # Equations based on the problem statement\n    # Equation for the total number of bicycles\n    eq1 = Eq(foldable + non_foldable, total_bicycles)\n\n    # Equation after selling 208 bicycles\n    eq2 = Eq(foldable * (4/7) + non_foldable * (5/9), total_bicycles - sold_bicycles)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (foldable, non_foldable))\n    \n    # The number of foldable bicycles sold is calculated by the initial number minus the remaining foldable bikes\n    foldable_bikes_sold = solutions[foldable] - solutions[foldable] * (4/7)\n\n    return foldable_bikes_sold\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    daily_climb = 10\n    nightly_slide = 0\n    total_climbed = 0\n    day = 0\n    \n    while total_climbed < height:\n        day += 1\n        total_climbed += daily_climb\n        if total_climbed >= height:\n            break\n        nightly_slide += 1\n        total_climbed -= nightly_slide\n    \n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies // 2\n    guppies = goldfish // 2\n\n    more_mollies_than_guppies = mollies - guppies\n    return more_mollies_than_guppies\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    real_tree_height = 12 # in meters\n    scale_ratio_cm_per_meter = 2 / 3 # 2 cm for every 3 meters\n\n    # The height of the model tree in cm is the real tree height in meters \n    # times the scale ratio in cm per meter\n    model_tree_height_cm = real_tree_height * scale_ratio_cm_per_meter\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    num = 20\n    factors = set()\n\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    ans = 5 * 34\n    return ans\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_mark = 8\n    wrong_mark = -4\n    total_score = 100\n\n    for correct_answers in range(0, total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + wrong_answers * wrong_mark\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # According to the Pigeonhole Principle,\n    # if Valeria distributes n candies to 20 students,\n    # to guarantee at least one student gets at least 3 candies,\n    # the minimum number of candies must be such that when each of the\n    # 19 other students gets 2 candies, the remaining candies can go to\n    # one student to make sure they have at least 3 candies.\n\n    # Number of students\n    students = 20\n    \n    # Max number of candies such that no one gets 3 (pigeonhole setup)\n    # Each student can get at most 2 candies before someone must receive 3\n    max_distributed_without_3 = (students - 1) * 2\n    \n    # The next piece of candy will ensure someone gets at least 3 candies\n    minimum_candies = max_distributed_without_3 + 1\n    \n    return minimum_candies\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_fraction = 3 / 8  # which is 1 - 5/8\n    remaining_grams = 6000\n    original_grams = remaining_grams / remaining_fraction\n    return original_grams\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # In the worst case scenario, he could take out all red and black socks without picking a white pair.\n    max_white_socks_without_pair = 1\n    max_other_socks = 10 + 10  # all red and all black socks\n    \n    # Now add the next white sock to ensure he gets a pair of white socks.\n    max_socks_for_white_pair = max_white_socks_without_pair + max_other_socks + 1 \n\n    return max_socks_for_white_pair\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    result = 0.60 * 765\n    return result\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n    \n    # Calculate the number of intervals between lamp posts\n    # There is one more interval than the number of groups of flowers\n    intervals = (total_flowers // flowers_between_lamps) + 1\n    \n    # Calculate the length of the road\n    road_length = 50\n    \n    # Calculate the distance between every 2 lamp posts\n    distance_between_posts = road_length / intervals\n    \n    return distance_between_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_books = 6\n    right_position = 14\n    \n    total_books = left_books + right_position\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temperature = 8\n    temperature_difference = 17\n\n    final_temperature = initial_temperature - temperature_difference\n\n    return final_temperature\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    # Since trees are planted at both ends, subtract one tree's space from the total length\n    effective_length = road_length - distance_between_trees\n\n    # Calculate the number of trees, not forgetting the one at the end\n    num_trees = (effective_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 * (5/4)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1 / 4\n    n = 5\n\n    fifth_number = first_number * (ratio ** (n - 1))\n\n    return fifth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    return (13.8 * 10**7) * (5.4 * 10**-12)\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    reserved_sweets = 6\n    num_friends = 6\n    \n    sweets_per_friend = (total_sweets - reserved_sweets) // num_friends\n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # If all children must get at least one apple and no two can get the same number, \n    # then we can start by assigning the minimum number of apples to each child.\n    # Let's give 1 apple to the first child, 2 to the second, and so on.\n    # This is the smallest sequence of distinct natural numbers such that the sum is minimum.\n    \n    # The sum of the first n natural numbers is given by the formula n*(n+1)/2. \n    # For 5 children, the minimum distribution would be 1+2+3+4+5 apples which equals 15 apples.\n    # 19 - 15 leaves us with 4 apples, which we can distribute to the child who gets the most.\n    # Since we started with 5 apples for the child who initially got the most, \n    # we will have 4 additional apples to give to that child.\n    \n    # So, for the child who gets the most apples:\n    max_apples_initially = 5\n    remaining_apples = 4\n\n    # The largest possible number of apples the child can get is the sum of these two amounts\n    max_apples = max_apples_initially + remaining_apples\n    \n    return max_apples\n\n# Call the function and assign the result to ans\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    # Calculate the effective length of each side after leaving 1.5 meters from the edges\n    effective_length = 12 - 2 * 1.5\n    # Calculate the number of rosebushes that can be planted along one side\n    # Each rosebush requires 3 meters, so we divide the effective length by 3\n    bushes_per_side = effective_length // 3\n    # Since rosebushes are planted on the edge of the square, we have 4 sides\n    # Minus the 4 corners, because they are only counted once\n    total_bushes = 4 * bushes_per_side - 4\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # P's work rate per hour\n    p_work_rate = 1 / (12 * 8)\n    \n    # Q's work rate per hour\n    q_work_rate = 1 / (8 * 10)\n    \n    # Combined work rate per hour when P and Q work together\n    combined_work_rate = p_work_rate + q_work_rate\n    \n    # Total hours required when P and Q work together for 8 hours a day\n    total_hours_together = 1 / combined_work_rate\n    \n    # Total days required when working 8 hours a day\n    days_together = total_hours_together / 8\n    \n    return days_together\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van1 = 132  # speed of the faster van in km/h\n    speed_van2 = 78   # speed of the slower van in km/h\n    time = 8          # time after which we want to find the distance apart\n\n    # since they are traveling in opposite directions, we add up their speeds\n    relative_speed = speed_van1 + speed_van2\n\n    # distance = speed * time\n    distance_apart = relative_speed * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work = 360\n    completed_percentage = 0.60\n    total_masks = remaining_work / (1 - completed_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    result = (2 - 1.8) / (1/2) * (5/2)\n    return result\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent Pinkie's original score\n    x = symbols('x')\n\n    # Create the equation according to the problem statement\n    equation = Eq(x - 30, (x / 2) + 10)\n    \n    # Solve the equation\n    original_score = solve(equation, x)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    from sympy import divisors\n\n    apple_count = 78\n\n    # Finding all divisors of the number of apples\n    # The number of bags can't be 1 or the number itself because the number of bags needs to be even.\n    divs = [d for d in divisors(apple_count) if d != 1 and d != apple_count and d % 2 == 0]\n\n    # The number of ways to divide the apples is the number of even divisors excluding 1 and the number itself\n    return len(divs)\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given that 9 rabbits can be exchanged for 3 goats,\n    # this means that 1 goat is equivalent to 3 rabbits.\n    rabbits_per_goat = 9 / 3\n\n    # Given that 2 goats can be exchanged for 4 cows,\n    # this means that 1 goat is equivalent to 2 cows.\n    goats_per_cow = 2 / 4\n\n    # Therefore, 2 cows can be exchanged for 2 goats times the number of rabbits per goat.\n    rabbits_exchange_for_2_cows = (1 / goats_per_cow) * 2 * rabbits_per_goat\n\n    return rabbits_exchange_for_2_cows\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted = 3\n    attempted = total_questions - unattempted\n    score = 168\n\n    # Let x be the number of correct answers,\n    # then attempted - x will be the number of wrong answers\n    # 4x - (attempted - x) = score\n\n    # Solve for x\n    x = (score + attempted) / 5\n\n    return int(x)\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    pencils, pens = symbols('pencils pens')\n    # Original ratio\n    equation1 = Eq(pencils / pens, 4 / 5)\n    # New ratio after taking out a pen and adding a pencil\n    equation2 = Eq((pencils + 1) / (pens - 1), 7 / 8)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pencils, pens))\n    total_items = solutions[pencils] + solutions[pens]\n    return total_items\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    number_of_terms = 10\n\n    # Using the formula for the sum of an arithmetic series: n/2 * (2*a + (n-1)*d)\n    total_seats = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n\n    result = custom_operation(10, 9)\n    for number in [8, 7, 6, 5, 4]:\n        result = custom_operation(result, number)\n    \n    return result\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    girls_percentage = 100 - 40\n    total_children = girls * 100 / girls_percentage\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n    \n    return remaining_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # The pages in newspapers are consecutive\n    # For every sheet of newspaper, there are two pages, one on the front and one on the back\n    # The last page number before the missing pages is 14, implying pages 13-14 are on one sheet\n    # The first page number after the missing pages is 35, implying pages 35-36 are on a subsequent sheet\n    # Pages are missing from 15 to 34 inclusive\n    \n    # Number of missing pages\n    num_pages_missing = 35 - 14 - 1\n\n    # Number of missing sheets is half the number of missing pages since there are two pages per sheet\n    num_sheets_missing = num_pages_missing // 2\n\n    return num_sheets_missing\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    # Let's denote the cost price of the books as C.\n    # He wants to make a 60% profit, so the total selling price should be 1.6 * C.\n\n    # On the first day, he sold 70% of his books at a 60% profit.\n    # So the selling price for the books on the first day should be 1.6 * 0.7 * C.\n\n    # On the second day, all remaining books (30% of his books) are sold at a discount.\n    # Let's denote the discount rate on the second day as D.\n\n    # He only made 80% of the planned profit, so his selling price should be 1.6 * 0.8 * C.\n\n    # Therefore, on the second day, the revenue from the remaining books should be:\n    # Selling price on the second day (with discount) = (Total planned selling price) - (Selling price on the first day)\n    # (1 - D) * 0.3 * C = (1.6 * 0.8 * C) - (1.6 * 0.7 * C)\n\n    # We solve for D using the equation above.\n    \n    D = (1 - ((1.6 * 0.8) - (1.6 * 0.7)) / 0.3)\n    \n    # Convert discount rate to percentage\n    discount_rate = D * 100\n\n    return discount_rate\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    return 8**2 + 27\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n    \n    equation1 = Eq(curry_puff_price, tuna_puff_price - 0.20)\n    equation2 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n    \n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    for tens_place in digits:\n        for ones_place in digits:\n            if tens_place != ones_place:  # The two digits must be different.\n                number = tens_place * 10 + ones_place\n                if number % 2 != 0:  # The number must be odd.\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (4, 8), (5, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    boys_balloons = 2\n    girls_balloons = 4\n\n    # Let x be the number of boys, then (total_children - x) is the number of girls\n    for x in range(total_children + 1):\n        if boys_balloons * x + girls_balloons * (total_children - x) == total_balloons:\n            return x\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    count = end - start + 1\n    return count\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_minute = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_minute * time_minutes\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of cows and g be the number of goats initially\n    c, g = symbols('c g')\n\n    # According to the problem, 65% of the animals were cows initially\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After 240 animals were added, cows percentage increased by 20%\n    # This makes it 85% since 65% + 20% = 85%\n    # Also, the number of goats doubled, which means 2 * g\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    product = 1\n    for i in range(3, 21, 2):\n        product *= 1 + 2/i\n\n    return product\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_needed_cm = 400 * 85  # Total string needed in cm\n    roll_length_cm = 20 * 100    # One roll length in cm\n\n    rolls_needed = string_needed_cm / roll_length_cm\n    \n    return int(rolls_needed) if rolls_needed.is_integer() else int(rolls_needed) + 1\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma_age, john_age = symbols('emma_age john_age')\n    \n    equation1 = Eq(john_age, emma_age + 7)\n    equation2 = Eq(emma_age + john_age + 3*2, 27)  # In 3 years' time, each will be 3 years older\n    \n    solutions = solve((equation1, equation2), (emma_age, john_age))\n\n    return solutions[emma_age]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for num_cookies in range(40):\n        if (num_cookies - 5) % 6 == 0 and (num_cookies + 3) % 5 == 0:\n            return num_cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    donation = salary / 4\n    spent_on_food = 5 / 6 * (salary - donation)\n    saving = salary - donation - spent_on_food\n\n    equation = Eq(spent_on_food - donation, 78)\n\n    salary_value = solve(equation, (salary))\n    \n    return salary_value[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of powers of 2 repeats every 4 cycles: 2, 4, 8, 6\n    # The last digit of powers of 3 repeats every 4 cycles: 3, 9, 7, 1\n    last_digit_2 = [2, 4, 8, 6]\n    last_digit_3 = [3, 9, 7, 1]\n\n    # Find the last digit of the 2017th power for 2 and 3\n    last_digit_2_power = last_digit_2[(2017 - 1) % 4]\n    last_digit_3_power = last_digit_3[(2017 - 1) % 4]\n\n    # Multiply the last digits and get the last digit of the product\n    last_digit_product = (last_digit_2_power * last_digit_3_power) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    # Let t be the time (in minutes) David walks at the increased speed.\n    # Consequently, t + 10 is the total walking time.\n\n    # Total distance walked at the first speed (150m/min for 10 min):\n    distance1 = 150 * 10\n    \n    # Total distance walked at the increased speed (200m/min for t min):\n    distance2 = 200 * t\n\n    # The sum of these distances should equal the total distance walked, which is 3700m.\n    # Solve for t using the equation: distance1 + distance2 = 3700.\n    t = ((3700 - distance1) / 200)\n    \n    # Now, calculate the total time walked by adding the initial 10 minutes.\n    total_time = t + 10\n\n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    a7 = 57\n    a15 = 89\n    n7 = 7\n    n15 = 15\n\n    common_difference = (a15 - a7) / (n15 - n7)\n\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Chinese Remainder Theorem\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n\n    number, _ = solve_congruence(*congruences)\n\n    while number < 400:\n        # Assess if the number is less than 400\n        if number < 400:\n            return number\n        number -= 420\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "from itertools import permutations\n\ndef solution():\n    # All digits 0-9 excluding the known digits 4, 7, 1, 9\n    remaining_digits = [0, 2, 3, 5, 6, 8]\n\n    # Find all permutations of the remaining digits\n    for perm in permutations(remaining_digits, 3):\n        A, B, C = perm\n        # Construct the number with the given digits\n        number = 4700000 + A*10000 + 1000 + B*10 + 9 + C\n        # Check divisibility by 9\n        if number % 9 == 0:\n            return A + B + C, number\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_left = 240\n    sweets_per_week = 45 - 60\n\n    weeks = (150 - sweets_left) / sweets_per_week\n    \n    return abs(int(weeks))\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the price of an apple and the price of an orange\n    apple, orange = symbols('apple orange')\n    \n    # Create equations based on the given problem\n    equation1 = Eq(2 * apple + orange, 40)  # Jessie buys two apples and an orange for 40p\n    equation2 = Eq(apple + 2 * orange, 35)  # Bella buys one apple and two oranges for 35p\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (apple, orange))\n    \n    # Calculate how much Carrie pays for one apple and one orange\n    carrie_pays = solution[apple] + solution[orange]\n\n    return carrie_pays\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    possibilities_per_position = 3  # Since each digit (5, 6, 7) can be used in each position\n    total_numbers = possibilities_per_position ** 3  # Three positions: hundreds, tens, and ones\n    return total_numbers\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    # Applying the Inclusion-Exclusion Principle for two sets\n    both_classes_students = sport_class_students + reading_class_students - total_students\n\n    return both_classes_students\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    total_money = 140\n    racket_price = 49\n    tennis_ball_price = 1.5\n    \n    # Calculate the total amount spent on rackets for two pairs (which means 4 rackets)\n    total_racket_cost = 4 * racket_price\n    \n    # Calculate the remaining money after buying the rackets\n    remaining_money = total_money - total_racket_cost\n    \n    # Calculate the number of tennis balls he can buy\n    num_tennis_balls = remaining_money // tennis_ball_price\n\n    return int(num_tennis_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # There are 3 unique colors and we want to ensure 3 different colors\n    # In the worst-case scenario, we might pick all balls of one color, then all balls of another\n    # Since we have 4 balls of each color, we could pick up to 4 + 4 balls without having 3 different colors\n    # To ensure we have 3 different colors, we need to pick one more ball after this\n    # Therefore, the minimum number of balls we have to draw is 4 (purple) + 4 (white) + 1 (any)\n    ans = 4 + 4 + 1\n    return ans\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_rate = 4\n    jed_chocolates = 137\n    jed_rate = -6\n    \n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_rate\n        jed_chocolates += jed_rate\n        week += 1\n\n    return week\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # The total number of ways to choose 3 points out of 12 to form a triangle\n    total_ways = (12 * 11 * 10) // (3 * 2 * 1)\n    \n    # The number of ways to choose 3 consecutive points, which cannot form a right-angled triangle\n    ways_consecutive = 12\n    \n    # The number of ways to choose points to form an isosceles right-angled triangle\n    # For each point, we have 2 such triangles, so since there are 12 points, we have 12 * 2 ways\n    ways_isosceles_right = 12 * 2\n    \n    # Subtracting the number of ways to form consecutive points and isosceles right-angled triangles\n    # from the total ways gives us the number of right-angled triangles\n    right_angled_triangles = total_ways - ways_consecutive - ways_isosceles_right\n    \n    return right_angled_triangles\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    total_boxes = 6\n    eaten_donuts = 3\n\n    total_donuts = donuts_per_box * total_boxes\n    remaining_donuts = total_donuts - eaten_donuts\n\n    return remaining_donuts\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n    return int(durians_left)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    # Create the equations based on the problem\n    eq1 = Eq(racket + 5 * shuttlecock, 205)\n    eq2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    \n    solutions = solve(equation, c)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # Since the tiger is the 11th from both ends, the total number of animals in the line is:\n    total_animals = (11 - 1) * 2 + 1\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n    months = debt / monthly_salary\n    return months\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    result = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return result\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    # Three-digit numbers start from 100 to 999\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    roses_first = 24\n    vases_first = 3\n    roses_per_vase = roses_first // vases_first\n\n    vases_second = 4\n    total_roses = roses_per_vase * (vases_first + vases_second)\n\n    return total_roses\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 50  # in cents\n    mamee_cost = haribo_cost - 30  # Mamee costs 30 cents less than Haribo\n    big_jelly_cost = 6 * mamee_cost  # A big packet of jelly costs 6 times as much as Mamee\n\n    # Convert the cost from cents to dollars\n    big_jelly_cost_dollars = big_jelly_cost / 100\n\n    return big_jelly_cost_dollars\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    total = 2405 + 1827\n    return num2words(total)\n\nfrom num2words import num2words\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans_tuple = solve_congruence(*congruences)\n\n    return ans_tuple[0]\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n    candies_will_hates = mint_candies  # Will hates only mint candies\n\n    max_candies_will_can_eat = lemon_candies + cherry_candies  # he can eat all but mint\n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + (-2)) / 2\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    # Iterate over all 4-digit numbers to find a number satisfying all conditions\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    AB = 10 * A + B\n                    BC = 10 * B + C\n                    CD = 10 * C + D\n                    ABC = 100 * A + 10 * B + C\n                    BCD = 100 * B + 10 * C + D\n                    if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n                        if len(set([A, B, C, D])) == 4:\n                            ans = 1000 * A + 100 * B + 10 * C + D\n                            return ans\n    return None\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    total_price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return total_price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    num_games = num_teachers - 1  # In a single elimination tournament, the number of games is always one less than the number of participants\n    return num_games\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 80:\n        return num\n        num += 2 * 3 * 4 * 5\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the children\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Sum of the children's ages is 55\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    # The two sons were born three years apart\n    equation2 = Eq(younger_son, older_son + 3)\n    # The two daughters were born two years apart\n    equation3 = Eq(younger_daughter, older_daughter + 2)\n    # The younger son is twice the age of the older daughter\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Find the youngest child's age from the solutions\n    youngest_age = min(solutions.values())\n\n    return youngest_age\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = 20 + 19 + 18 + 17 + 16 - 15 - 14 - 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the symbols for the price of a wallet and the price of a watch\n    wallet, watch = symbols('wallet watch')\n\n    # create equations based on the given information\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    # solve the system of equations for the price of a wallet and watch\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    # return the price of one wallet\n    return solutions[wallet]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # Given ratio of height to width is 3:4.\n    # So for every 3cm of height, there's 4cm of width.\n    \n    # Given height of the television screen is 21cm.\n    # To find width, we first determine how many times 3cm fits into 21cm.\n    times = 21 // 3  # this is the number of \"3cm\" segments in the height\n    \n    # Using the ratio, for every 3cm of height, we have 4cm of width:\n    width = times * 4\n    \n    # Perimeter of a rectangle is 2 times the sum of its width and height\n    perimeter = 2 * (21 + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    # Since 3/7 = 0.428571 repeating,\n    # the sequence of digits that will repeat is 428571\n    recurring_sequence = [4, 2, 8, 5, 7, 1]\n    \n    # We want to find the sum of the first 58 digits after the decimal point\n    num_digits = 58\n    \n    # Calculate how many full repetitions of the recurring sequence this corresponds to\n    full_repetitions, remaining_digits = divmod(num_digits, len(recurring_sequence))\n    \n    # Sum for full repetitions\n    full_repetition_sum = sum(recurring_sequence) * full_repetitions\n    \n    # Sum for the remaining digits\n    remaining_sum = sum(recurring_sequence[:remaining_digits])\n    \n    # The total sum is the sum of the full repetitions plus the sum of the remaining digits\n    total_sum = full_repetition_sum + remaining_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_runners = 3\n    average_distance = total_distance / number_of_runners\n    return average_distance\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    tom_string = 13\n    nick_string = tom_string + 25\n    difference = nick_string - tom_string\n    return difference\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    same_biographies = 3\n    same_science_fictions = 4\n    same_magazines = 2\n    same_practice_books = 2\n\n    # Calculate the total number of permutations\n    total_permutations = factorial(total_books)\n    \n    # Divide by the permutations of the indistinguishable books\n    ans = total_permutations // (factorial(same_biographies) * factorial(same_science_fictions) * factorial(same_magazines) * factorial(same_practice_books))\n        \n    return ans\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken = 18\n    total_students = 50\n\n    percent = (students_choosing_chicken / total_students) * 100\n\n    return percent\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution exchanged from A to B and vice versa\n    x = symbols('x')\n\n    # Create the equation representing the concentration balance after exchange\n    equation = Eq(0.11 * (50 - x) + 0.47 * x, 0.47 * (50 - x) + 0.11 * x)\n\n    # Solve the equation for x\n    x_value = solve(equation, x)[0]\n\n    return x_value\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    ans = 0.2 * 0.3\n    return ans\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # There are 3 choices for the first digit, 3 choices for the second digit and 3 choices for the third digit\n    # Since repetition is allowed and digits can be rotated, we simply need to find the product of the number of choices for each position\n    num_ways = 3 * 3 * 3\n    return num_ways\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert plot length from meters to centimeters\n    cauliflower_spacing_cm = 40\n    first_cauliflower_offset_cm = 20\n\n    # Calculate the space left for planting after placing the first cauliflower\n    planting_space_cm = plot_length_cm - first_cauliflower_offset_cm\n\n    # Divide this space by the spacing of cauliflowers to get the number of gaps\n    number_of_gaps = planting_space_cm // cauliflower_spacing_cm\n    \n    # Add the first cauliflower to the count\n    number_of_cauliflowers = number_of_gaps + 1\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n    \n    candies = 15\n    piles = 4\n    ways = set()\n    \n    for combo in combinations(range(1, candies), piles - 1):\n        if sum(combo) < candies:\n            way = tuple(sorted((combo + (candies - sum(combo),))))\n            ways.add(way)\n    \n    return len(ways)\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes = []\n    for num in range(2, 51): \n        if isprime(num) and isprime(num + 6):\n            primes.append(num)\n        if isprime(num) and isprime(num - 6):\n            primes.append(num)\n    return sorted(set(primes)) \n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    base_value = 250\n\n    result = (percentage / 100) * base_value\n    return result\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64 / 100  # Convert 64 cm to metres and add to 3.7 metres\n    total_metres -= (2 + 7 / 100)  # Convert 2 metres 7 cm to metres and subtract from total\n    return total_metres\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    sequence = [1, 2, 3, 5, 8, 13, 21]\n    next_number = sequence[-1] + sequence[-2]\n    return next_number\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruits = 48\n    fraction_of_apples = 5 / 8\n    apples = total_fruits * fraction_of_apples\n    pears = total_fruits - apples\n    return int(pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # The given sequence is a geometric sequence with the common ratio 2\n    # and the first term is 1.\n    # To find the 20th term:\n    term_20 = 1 * (2 ** (20 - 1))\n    \n    # To find the 17th term:\n    term_17 = 1 * (2 ** (17 - 1))\n    \n    # Dividing the 20th term by the 17th term:\n    ans = term_20 / term_17\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    # Let's denote the two positive integers as x and y.\n    # We have x + y = 35, and we want to maximize x * y\n    # The maximum product occurs when x and y are as close as possible to each other\n    # because of the AM-GM inequality: the Arithmetic Mean is greater than or equal to the Geometric Mean.\n    # We have (x + y) / 2 >= sqrt(x * y), with equality when x = y\n    # Since both x and y are integers and their sum is 35, they can't be equal\n    # The closest they can be is 17 and 18.\n    x = 17\n    y = 35 - x\n    max_product = x * y\n    return max_product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    daily_earnings = 70\n    number_of_days = 6 # From Monday to Saturday\n\n    total_earnings = daily_earnings * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Let A, B, C be the number of books Alice, Becky, and Crystal have respectively\n    # Let D be the number of books Dennis has\n    # According to the problem, we have the following:\n    # (A + B + C) / 3 = 60\n    # => A + B + C = 180\n    # Also, the new average after including Dennis is 70, so:\n    # (A + B + C + D) / 4 = 70\n    # => A + B + C + D = 280\n\n    # From the above, we can find D by subtracting the total books without Dennis from the total with Dennis:\n    D = 280 - 180\n\n    return D\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    distance_climbed_per_day = 5\n    slide_down_per_night = 3\n    net_distance_per_day = distance_climbed_per_day - slide_down_per_night\n    burrow_depth = 16\n    days = 0\n\n    while True:\n        days += 1\n        height_after_climb = days * net_distance_per_day\n        if height_after_climb + distance_climbed_per_day >= burrow_depth:\n            break\n\n    return days\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    smallest_two_digit_prime = 11\n    largest_two_digit_square = 81  # The square of 9\n\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9  # Distance from the 1st to the 4th flag\n    number_of_intervals_1_to_4 = 4 - 1  # Number of intervals between 1st and 4th flag\n\n    # Calculate the distance for one interval\n    interval_distance = distance_1_to_4 / number_of_intervals_1_to_4\n\n    # Calculate the distance from the 1st to the 9th flag\n    number_of_intervals_1_to_9 = 9 - 1  # Number of intervals between 1st and 9th flag\n    distance_1_to_9 = interval_distance * number_of_intervals_1_to_9\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n    \n    full_necklaces = total_beads // beads_per_necklace\n    \n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n\n    return mike_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    from sympy import isprime\n\n    # If the number of chocolate bars is a prime number, it cannot be divided evenly\n    # among any number of students greater than 1 and less than 233.\n    is_michael_correct = isprime(233)\n\n    return is_michael_correct\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    return 4 + 0.6 + 0.07\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_ship = 22\n    speed_current = 3\n    distance = 200\n\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    peaches, students_B = symbols('peaches students_B')\n\n    # Class A has 3 more students than Class B\n    students_A = students_B + 3\n\n    # Equations based on the problem statement\n    # If all peaches are given to Class A, each can get 5 peaches and 10 are left\n    equation1 = Eq(peaches, 5 * students_A + 10)\n    # If all peaches are given to Class B, each can get 8 peaches and 2 more are needed\n    equation2 = Eq(peaches, 8 * students_B - 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (peaches, students_B))\n\n    # Return the number of peaches\n    return solutions[peaches]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    pencils_for_a_pen = pen_cost // pencil_cost\n    \n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_questions = 10\n    score_for_correct = 6\n    score_for_wrong = -2\n    final_score = 36\n\n    # Let x be the number of correct answers\n    # Then, total_questions - x is the number of wrong answers\n    # The equation for the final score is:\n    # x * score_for_correct + (total_questions - x) * score_for_wrong = final_score\n    # Simplify the equation to find x\n    # x * 6 - 2 * (10 - x) = 36\n    # 6x - 20 + 2x = 36\n    # 8x = 56\n    # x = 56 / 8\n\n    x = (final_score + score_for_wrong * total_questions) / (score_for_correct + abs(score_for_wrong))\n    return int(x)\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n    ways = trains + buses + flights\n    return ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    result = 9.95 - 2.6 - 3.412\n    return result\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    return 78.2 - 31.45 + 5.245 - 2.3\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # There are 4 slots to insert the playing a sketch between the dancing performances\n    # There must be at least 1 dancing performance between every 2 playing a sketch, so we use 4 - 1 = 3\n    # P(3 playing a sketch slots, 3) is the number of ways to place 3 playing a sketch in 3 slots\n    \n    sketch_slots = 4\n    total_sketches = 3\n    \n    # Calculate the permutations for the 3 playing a sketch performances in the 4 slots\n    sketch_permutations = factorial(sketch_slots) // factorial(sketch_slots - total_sketches)\n    \n    # Calculate the permutations for the 7 dancing performances\n    dancing_permutations = factorial(7)\n    \n    # Total permutations is the product of sketch_permutations and dancing_permutations\n    total_permutations = sketch_permutations * dancing_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    h = 1\n    while True:\n        if round((28512 / h) ** (1/3)) ** 3 == 28512 / h:\n            return h\n        h += 1\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "from sympy import factorial\n\ndef solution():\n    # Number of derangements for 7 people can be calculated using !n = (n-1)(!(n-1) + !(n-2))\n    # Where !n is the subfactorial or derangement number for n items\n\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    ans = subfactorial(7)\n    return ans\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # To guarantee 2 M&M's chips of different colours, we have to consider the worst-case scenario.\n    # If Bart takes all chips of the most frequent colour (brown), he gets 5 chips of the same colour.\n    # He then also has to take all chips of the second most frequent colour (yellow), which adds 4 more.\n    # Now having taken all brown and yellow chips, the next chip he takes must be red, giving him a different colour.\n    # So the number of M&Ms to be sure of getting 2 different colours is all yellow and all brown, plus 1 more.\n    return 5 + 4 + 1  # Brown + Yellow + 1 more to guarantee a red chip.\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    # Applying the difference of squares formula reversely\n    a = 31415926\n    b = a - 1  # which is 31415925\n\n    ans = a**2 - a * b\n    return ans\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    # fathers shake hands with everyone except their own family (9 other families each with 3 members)\n    father_handshakes = families * (families - 1) * 3\n    # mothers shake hands with fathers and children of 9 other families (9 other fathers + 9 other children)\n    mother_handshakes = families * ((families - 1) + (families - 1))\n    # children shake hands with fathers and mothers of 9 other families (9 other fathers + 9 other mothers)\n    child_handshakes = families * ((families - 1) + (families - 1))\n    # total handshakes\n    total_handshakes = father_handshakes + mother_handshakes + child_handshakes\n\n    return total_handshakes\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits (1, 3, 5, 7, 9)\n    odd_digits_count = 5\n    \n    # For a 3-digit number, each digit place (hundreds, tens, units) can have one of these 5 digits.\n    # So, for each of the 3 places, there are 5 choices.\n    # According to the multiplication principle, the total number of combinations is:\n    total_numbers = odd_digits_count * odd_digits_count * odd_digits_count\n    \n    return total_numbers\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = '85274'\n    sequence_length = len(recurring_sequence)\n    index = (79 - 1) % sequence_length  # Subtract 1 because index starts from 0\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_number = 0\n    for i in range(999, 99, -1):\n        if ((i + 2009) % 17 == 0) and ((i + 2009) % 19 == 0):\n            max_number = i\n            break\n    return max_number\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    bill_after_free = bill\n    total_hours = free_hours\n\n    # Calculate hours after free hours but less than 50 hours\n    if bill_after_free > 0:\n        if bill_after_free <= (10 * 5):\n            total_hours += bill_after_free / 5\n            return total_hours\n        else:\n            total_hours += 10\n            bill_after_free -= (10 * 5)\n\n    # Calculate hours after 50 hours but less than 60 hours\n    if bill_after_free > 0:\n        if bill_after_free <= (10 * 8):\n            total_hours += bill_after_free / 8\n            return total_hours\n        else:\n            total_hours += 10\n            bill_after_free -= (10 * 8)\n\n    # Calculate hours after 60 hours\n    if bill_after_free > 0:\n        total_hours += bill_after_free / 15\n\n    return total_hours\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    expected_sum = sum(range(1, 63))\n    actual_sum = 1939\n    missing_page = expected_sum - actual_sum\n    return missing_page\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket1 in range(1000):\n        ticket2 = ticket1 + 1  # The next ticket\n        if ticket1 + ticket2 == 777:\n            return ticket2\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    future_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return future_value\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # By the pigeonhole principle, in the worst-case scenario, Jane could draw all of one color, then all of another, and so on.\n    # She needs to draw 1 less than the total number of each color to ensure she does not get 4 of any color.\n    # But once she has drawn 3 colors completely, the next draw, regardless of the color, will ensure she has 4 different colors.\n    ans = (green + blue + orange - 3) + 1  # The minus 3 accounts for not needing the 4th red marble, +1 for the next draw\n\n    return ans\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    ans = 5 / 16\n    return ans\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def count_ways(steps):\n        if steps < 0:\n            return 0\n        if steps == 0:\n            return 1\n        return count_ways(steps - 1) + count_ways(steps - 2) + count_ways(steps - 3)\n\n    # Find the number of ways to reach the 4th step\n    ways_to_4 = count_ways(4)\n\n    # Find the number of ways to go from the 6th step to the 10th step\n    ways_from_6_to_10 = count_ways(4)\n\n    # Total number of ways is the product of the ways to the 4th step and\n    # the ways from the 6th step to the 10th step.\n    # Jimmy can step on 4th or on 6th, so he can choose(2 options)\n    total_ways = ways_to_4 * ways_from_6_to_10 * 2\n\n    return total_ways\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    return 2 * (length + width)\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_earnings_per_day = 60\n    days_in_a_week = 7\n    total_earnings = average_earnings_per_day * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    ans = solve(equation, x)\n    return ans[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    number = 3016\n    ans = number - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # The smallest odd positive numbers are 1, 3, 5, 7, and 9\n    # We will keep these as our base numbers and distribute the\n    # remaining difference (85 - sum of base numbers) among them,\n    # trying to maximize the largest number.\n\n    base_numbers = [1, 3, 5, 7, 9]\n    # Calculate the sum of the base numbers\n    sum_base = sum(base_numbers)\n    # Calculate the remaining sum that needs to be distributed\n    remaining_sum = 85 - sum_base\n\n    # Distribute the remaining sum to maximize the largest number\n    # The remaining sum will be always distributed starting from the largest base number\n    # while ensuring that each number remains odd and different\n    for i in range(4, -1, -1):\n        # We can add a maximum of (remaining_sum - (4-i)*2) to the ith number,\n        # to keep it larger than the others and maintain the odd property.\n        add_to_ith = remaining_sum - (4-i)*2\n        if add_to_ith > 0:\n            base_numbers[i] += add_to_ith\n            remaining_sum -= add_to_ith\n    \n    # The largest number is now the last element in the base_numbers list\n    ans = base_numbers[-1]\n    return ans\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    distance = 500\n\n    # Calculate the effective speed downstream\n    effective_speed = speed_ship + speed_current\n\n    # Calculate the time taken to travel 500 km downstream\n    time = distance / effective_speed\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes = 2.5\n    seconds_per_minute = 60\n    n = minutes * seconds_per_minute\n    return int(n)\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol T for the tax rate and I for the annual income\n    T, I = symbols('T I')\n    \n    # Tax for the first 30,000\n    tax_first_30000 = T / 100 * 30000\n    \n    # Tax for the amount above 30,000, only applies if income is above 30,000\n    tax_above_30000 = (T + 3) / 100 * (I - 30000)\n    \n    # Condition to ensure tax_above_30000 applies only when income is above 30,000\n    total_tax = tax_first_30000 + (tax_above_30000 if I > 30000 else 0)\n    \n    # Ryan's observation: total tax paid is (T + 1) % of his income\n    observation_eq = Eq(total_tax, (T + 1) / 100 * I)\n    \n    # Solve for I (Ryan's annual income) given T and the observation\n    solutions = solve((observation_eq, I>30000), (T, I))\n    \n    # Get Ryan's annual income from the solutions\n    income = [sol[I] for sol in solutions if sol[I] > 0]  # Take only positive income values\n    \n    return income[0]\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, v_p be Phillip's speed, v_a be Alan's speed.\n    # Phillip arrives at B 3 minutes earlier than Alan.\n    d, v_p, v_a = symbols('d v_p v_a')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(d/v_p, 12) # Time taken by Phillip to reach B is 12 minutes.\n    equation2 = Eq(d/v_a, 12 + 3) # Time taken by Alan to reach B, which is 12 + 3 minutes.\n    equation3 = Eq(v_p, v_a + 15) # Phillip walks 15 meters more than Alan per minute.\n\n    # Solve the system of equations for d, v_p, and v_a\n    solutions = solve((equation1, equation2, equation3), (d, v_p, v_a))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(8, 4) * comb(12, 3)\n    return total_ways\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the number of coins\n    coins_20, coins_50 = symbols('coins_20 coins_50')\n\n    # equation1: sum of 20-cent and 50-cent coins\n    equation1 = Eq(coins_20 + coins_50, 21)\n    # equation2: total value in cents\n    equation2 = Eq(20*coins_20 + 50*coins_50, 630)\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (coins_20, coins_50))\n\n    return solutions[coins_50]\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    import math\n    \n    count = 0\n    num = 2\n    \n    for i in range(1, 6):\n        if math.sqrt(num).is_integer():\n            count += 1\n        num = num * 10 + 5\n    \n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom = 68.10\n    difference = 25.40\n    alice_spent = 36\n\n    alice_after = tom - difference\n    alice_before = alice_after + alice_spent\n\n    return alice_before\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    total_sum_first_set = 28 * 5\n    total_sum_second_set = 11 * 12\n    combined_sum = total_sum_first_set + total_sum_second_set\n    total_numbers = 5 + 12\n    mean_of_all_numbers = combined_sum / total_numbers\n    return mean_of_all_numbers\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount = 20 / 100\n    reduced_price = original_price * (1 - discount)\n    return reduced_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance_apart = 7 * (9 - 1)\n    bench_length = 74 - total_distance_apart\n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the number of students in class B\n    # Let y represent the total number of candies Miss Jenny has\n    x, y = symbols('x y')\n\n    # If each student in class A gets 4 candies, and class A has twice the number of students as class B (2x), then:\n    # 4 * (2x) = y - 20\n    equation1 = Eq(4 * (2 * x), y - 20)\n\n    # If each student in class B can get 6 candies, then:\n    # 6 * x = y + 16\n    equation2 = Eq(6 * x, y + 16)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (x, y))\n\n    return solution[y]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    total_cuts = 21\n    regrowth = 5\n    original_arms = total_cuts - (total_cuts // regrowth)\n\n    return original_arms\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Worst case: taking out all coins of one color first\n    same_color_coins = 6\n    # To guarantee 2 different colored coins, you need one more than all of one color\n    ans = same_color_coins + 1\n    return ans\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    trees_between_1_and_5 = 5 - 1\n    distance_per_interval = 20 / trees_between_1_and_5\n\n    trees_between_8_and_14 = 14 - 8\n    distance_between_8_and_14 = trees_between_8_and_14 * distance_per_interval\n\n    return distance_between_8_and_14\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # Mutual exclusivity implies that for two adjacent numbers, they shouldn't have a common divisor other than 1.\n    # Therefore, adjacent numbers cannot both be even, as they would share 2 as a common divisor.\n    # Hence, we're looking for the maximum set of numbers from 1-24 where even numbers are not adjacent.\n    # We can alternate between even and odd numbers to achieve this.\n\n    # Get all even numbers from 1 to 24 (Since 2 can't be next to any other even number)\n    even_numbers = list(range(2, 25, 2))\n    \n    # Get all odd numbers from 1 to 24\n    odd_numbers = list(range(1, 25, 2))\n    \n    # Combine even and odd numbers alternatively to create the circle.\n    # Since there are more odd numbers than even, we prioritize placing odd numbers.\n    circle = []\n    while odd_numbers or even_numbers:\n        if odd_numbers:\n            circle.append(odd_numbers.pop(0))\n        if even_numbers:\n            circle.append(even_numbers.pop(0))\n    \n    # The number of selected numbers will be the length of the circle.\n    return len(circle)\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    sum_numbers = 2021\n    third_greatest = 246\n    remaining_sum = sum_numbers - third_greatest\n\n    # Placeholders for the greatest and second greatest number, which must be at least one more than the third\n    greatest = third_greatest + 1\n    second_greatest = third_greatest + 2\n\n    remaining_sum -= (greatest + second_greatest)  # Subtracting the greatest and second greatest numbers\n\n    # Since we want the minimum value of the fourth greatest number,\n    # we need to maximize the sum of the numbers from 5 to 10.\n    # This can be done by setting number 5 to 10 each to be the smallest possible integer (1),\n    # because we are told the numbers are different whole numbers (they cannot be zero).\n    num_elements = 10 - 4  # Five through ten equals six elements\n    remaining_sum -= num_elements  # Subtracting six 1's (minimum values)\n\n    # The fourth greatest number is then the rest of the remaining sum.\n    fourth_greatest = remaining_sum\n\n    return fourth_greatest\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    return 38 * 32 + 37 * 33 + 36 * 34\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age = symbols('grey_age father_age')\n    # At birth, Grey's age was 0 and father's age was 30\n    equation1 = Eq(father_age - grey_age, 30)\n    # Father is now 3 times Grey's age\n    equation2 = Eq(father_age, 3 * grey_age)\n\n    solutions = solve((equation1, equation2), (grey_age, father_age))\n\n    return solutions[father_age]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n\n    # You want to draw a \"parts\" graph, which is typically represented in a bar graph format.\n    # Assuming Bud has \"x\" number of apples, Pip has \"5x\" number of apples.\n\n    bud_apples = 1    # Let Bud's apples be the unit part, 1\n    pip_apples = 5    # Pip has 5 times the apples Bud has\n\n    # Name of the individuals\n    names = ['Bud', 'Pip']\n\n    # Values corresponding to their number of apples\n    values = [bud_apples, pip_apples]\n\n    # Create the bar graph\n    plt.figure(figsize=(8, 4))\n    plt.bar(names, values, color=['blue', 'red'])\n\n    # Add title and labels for clarity\n    plt.title(\"Number of Apples\")\n    plt.xlabel(\"Individuals\")\n    plt.ylabel(\"Parts (where Bud's apples = 1 part)\")\n    \n    # Display the graph\n    plt.show()\n\n    # Since this is a drawing problem without a numerical answer, we return None.\n    return None\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    fraction = numerator / denominator\n    result = 10 * fraction\n    return result\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    # Using the pigeonhole principle, we divide the books across the minimum possible layers evenly\n    min_books_per_layer = total_books // layers\n    \n    # To find the least number of books in the layer with the most books,\n    # we add 1 to the result of integer division if there is a remainder\n    if total_books % layers != 0:\n        min_books_per_layer += 1\n\n    return min_books_per_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    total_seats = (num_terms * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 6, 9]\n    perm = permutations(digits)\n\n    return len(list(perm))\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    sum_of_fractions = 0.12 + 0.345 + 0.6789\n    return sum_of_fractions\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for i in range(1, 3): # The first digit can be 1 or 2\n        for j in range(3): # The second digit can be 0, 1, or 2\n            for k in range(3): # The third digit can be 0, 1, or 2\n                if i != j and i != k and j != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    ans = cows - pigs\n    return ans\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Our equations are x = 1 (mod 3), x = 3 (mod 5), and x = 5 (mod 7)\n    congruences = [(1, 3), (3, 5), (5, 7)]\n\n    # Solve the system of congruences\n    x, _ = solve_congruence(*congruences)\n\n    # The solution x is the smallest number that satisfies all congruences. \n    # We need to find the smallest x within the range 100 to 200.\n    # We increment x by the product of the moduli (3*5*7 = 105) until we find the solution in our range\n    while x < 100:\n        x += 105\n\n    return x\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # Since the problem is essentially asking for the minimum dividend which is when divisor is minimum (which is 1 more than remainder).\n    divisor = remainder + 1\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_now = symbols('hazel_now') # Hazel's current age\n    jessica_now = hazel_now - 3 # Jessica's current age, 3 years younger than Hazel\n\n    # In three years\n    hazel_future = hazel_now + 3\n    jessica_future = jessica_now + 3\n\n    # Next year\n    hazel_next_year = hazel_future + 1\n    jessica_next_year = jessica_future + 1\n\n    total_age_next_year = hazel_next_year + jessica_next_year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume initially there were x animals in total.\n    cows, goats, x = symbols('cows goats x')\n    \n    # Initially, 65% of the animals were cows, thus 35% were goats.\n    initial_cows = Eq(cows, 0.65 * x)\n    initial_goats = Eq(goats, 0.35 * x)\n    \n    # When 240 more animals were added, the percentage of cows became 65% + 20% = 85%.\n    # Also, the number of goats doubled.\n    # The total number of animals then becomes x + 240.\n    new_total_animals = x + 240\n    new_cows = Eq(cows, 0.85 * new_total_animals)\n    new_goats = Eq(goats * 2, 0.15 * new_total_animals)\n    \n    # Solve the system of equations.\n    solutions = solve((initial_cows, initial_goats, new_cows, new_goats), (cows, goats, x))\n    \n    # Extract and return the number of goats in the farm initially.\n    return solutions[goats]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    first_section_cm = 30\n    second_section_cm = 1.5 * 100\n    third_section_cm = 150 / 10\n\n    total_width_cm = first_section_cm + second_section_cm + third_section_cm\n\n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    # Let's define Melanie's age as M and her uncle's age as U\n    M = 8\n\n    # We know that when Melanie reaches her uncle's current age, her uncle will be 38\n    # This means the difference in their ages is how much older her uncle will be than Melanie's current age when she reaches his age:\n    # U - M = 38 - U\n    # This leads to the equation: 2 * U = M + 38\n\n    # Solving for U\n    U = (M + 38) / 2\n\n    return U\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    pounds_to_pence = pounds * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # Degree of the monomial is the sum of the exponents of all its variables.\n    # Since the degree of the monomial is given as 5 and we have -x^3,\n    # we need to find the exponent n for y such that 3 + 2n = 5.\n\n    # Let's solve for n:\n    # 2n = 5 - 3\n    # 2n = 2\n    # n = 2 / 2\n    # n = 1\n    n = 1\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_3_years_later = amy_age_5_years_ago\n    sister_age_now = sister_age_3_years_later - 3\n\n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Since there are 13 different ranks (1-10, J, Q, K) in each of 4 suits,\n    # you need to draw one more than the number of ranks to ensure that\n    # you have at least two cards of the same number or letter.\n\n    num_ranks = 13\n    # Apply the Pigeonhole Principle, with one card per rank\n    # Drawing one more card than there are ranks ensures a match\n    cards_to_draw = num_ranks + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    smallest_number = None\n    for i in range(100, 1000, 2):  # 3-digit even numbers start from 100 and end at 998\n        if sum(map(int, str(i))) == 21:\n            smallest_number = i\n            break\n    return smallest_number\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    total = 0\n    for i in range(1, 20):\n        for j in range(i + 1, 21):\n            total += i / j\n    return total\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        # Student turns backward if their number is multiple of 4 or 6 after two turns\n        if i % 4 == 0 or i % 6 == 0:\n            continue\n        # If not, student is still facing the teacher\n        count += 1\n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    ans = result.numerator // result.denominator + Fraction(result.numerator % result.denominator, result.denominator)\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18\n    fraction = 3/5\n    whole_amount = part / fraction\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cacti, sunflowers = symbols('cacti sunflowers')\n    \n    # Equation for total cost\n    equation1 = Eq(2 * cacti + 7 * sunflowers, 156)\n    # Equation for difference in quantity\n    equation2 = Eq(cacti, sunflowers + 6)\n\n    solutions = solve((equation1, equation2), (cacti, sunflowers))\n    \n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')\n    pencil_price = 0.40  # given, 40p which is £0.40\n\n    # equation for the cost comparison between Sarah and Rebecca\n    equation = Eq(8 * book_price + 3 * pencil_price, 3 * book_price + 8 * pencil_price + 1)\n\n    book_cost = solve(equation, book_price)\n    \n    return book_cost[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_sum = sum((2 * i) ** 2 for i in range(1, 11))\n    odd_sum = sum((2 * i - 1) ** 2 for i in range(1, 11))\n    return even_sum - odd_sum\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured = 2 * 6\n    remaining_water = total_water - water_poured\n    return remaining_water\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    liverpool_initial, manutd_initial = symbols('liverpool_initial manutd_initial')\n\n    equation1 = Eq(liverpool_initial, manutd_initial + 1000)\n    equation2 = Eq(manutd_initial + 4836, 3 * (liverpool_initial + 472))\n\n    solutions = solve((equation1, equation2), (liverpool_initial, manutd_initial))\n\n    return solutions[liverpool_initial]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price, pencil_price = symbols('book_price pencil_price')\n    pencils_cost = 3 * pencil_price\n\n    sarah_paid = 8 * book_price + 3 * pencils_cost\n    rebecca_paid = 3 * book_price + 8 * pencils_cost\n\n    equation1 = Eq(sarah_paid - rebecca_paid, 1)\n    equation2 = Eq(pencil_price, 0.40)\n\n    solutions = solve((equation1, equation2), (book_price, pencil_price))\n\n    return float(solutions[book_price])\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_additional_points = 18\n    jack_points = andrew_points + jack_additional_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n\n    ways = comb(total_players, players_needed)\n\n    return ways\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    final_amount = 3 + 2\n\n    nini_amount = final_amount * 2\n    bob_amount = nini_amount * 2\n    mother_amount = bob_amount * 2\n    original_amount = mother_amount * 2\n\n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    ans = 4867 + 285\n    return ans\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * x + 3 * (x + 5), 45)\n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of students in Class A as A and in Class B as B. Peaches is the total number of peaches.\n    A, B, Peaches = symbols('A B Peaches')\n\n    # Class A has 3 more students than Class B -> A = B + 3\n    equation1 = Eq(A, B + 3)\n\n    # If all peaches are given to Class A, each student can get 5 peaches and there will be 10 peaches left -> 5 * A + 10 = Peaches\n    equation2 = Eq(5 * A + 10, Peaches)\n\n    # If all peaches are given to Class B, each student can get 8 peaches, we will need 2 more peaches -> 8 * B = Peaches - 2\n    equation3 = Eq(8 * B, Peaches - 2)\n\n    # Solve the system of equations to find the number of peaches\n    solutions = solve((equation1, equation2, equation3), (A, B, Peaches))\n\n    return solutions[Peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    digit_count = 0\n    number = 1  # Counter starting from 1\n\n    while digit_count < 2023:\n        digits_in_number = len(str(number))\n        digit_count += digits_in_number\n        if digit_count >= 2023:\n            return int(str(number)[digits_in_number - (digit_count - 2023) - 1])\n        number += 1\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the total number of T-shirts and c be the total number of caps\n    t, c = symbols('t c')\n\n    # Given ratio of T-shirts to caps is 8:5\n    ratio_eq = Eq(t / c, 8 / 5)\n\n    # Siti sold 1/4 of T-shirts and 1/5 of caps\n    # The total money collected from selling T-shirts and caps is $132\n    money_eq = Eq((1/4) * t * 3 + (1/5) * c * 5, 132)\n\n    # Now we need to solve for t and c\n    # We'll use the two equations we formed above\n    solutions = solve((ratio_eq, money_eq), (t, c))\n\n    # We want the number of T-shirts Siti had at first, which is t\n    t_shirts_at_first = solutions[t]\n\n    return t_shirts_at_first\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 98\n    current_age_on_birthday = 11\n    target_year = 1\n    \n    # Calculate age at year 01\n    age_on_01 = current_age_on_birthday + (target_year + (100 - birth_year))\n\n    return age_on_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '6', '2', '5']\n    all_combinations = sorted([''.join(p) for p in permutations(digits) if int(''.join(p)) % 2 != 0])\n    smallest_odd_number = int(all_combinations[0])\n    return smallest_odd_number\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    boat_capacity = 6\n    trips = students // boat_capacity\n    if students % boat_capacity > 0:\n        trips += 1\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    ordinal_number = (36 - first_term) // 2 + 1\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let's denote the number of game cards Eric originally has as x.\n    # Thus, Joe originally has 7x game cards.\n    # After giving away some game cards, Joe and Eric will both have 168 game cards.\n    # This means Joe gives Eric (7x - 168) game cards and will be left with 168 himself.\n    # So, 168 = 7x - (7x - 168)\n    # x = 168 / 7 = 24\n    # Joe originally has 7 * 24 = 168 game cards.\n    # To find out how many cards Joe must give to Eric,\n    # we calculate the difference between Joe's original amount and the final amount (168).\n    eric_original_cards = 168 / 7\n    joe_original_cards = 7 * eric_original_cards\n    cards_to_give = joe_original_cards - 168\n\n    return cards_to_give\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            N = tens_digit * 10 + ones_digit\n            if isprime(N):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    run_away = 5\n    library_catch = 9\n\n    total_catch = initial_catch - run_away + library_catch\n\n    return total_catch\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n\n    third_number = sum_of_numbers - (first_number + second_number)\n    \n    return third_number\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes_available = 1 * 60 + 20  # converting 1 hour and 20 minutes to minutes\n    number_of_pictures = total_minutes_available // minutes_per_picture\n\n    return number_of_pictures\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # Assuming that person number 1 starts at position 0 in the circle, then person number 6 is at position 5.\n    # Also, person number 19 is directly opposite to person number 6.\n    # This means that the distance around the circle from number 6 to number 19 is half the number of people in the game.\n    \n    # Let total number of people be n, then (19 - 6) places forward is half the circle.\n    # (19 - 6) * 2 = n -> 13 * 2 = n -> n = 26\n    \n    return 26\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    # Mina has to split the 10 apples into two groups with different numbers.\n    # If one group has 1 apple, the other must have 9 apples, and so on.\n    # Effectively, Mina can choose any number of apples from 1 to 9 for the first group,\n    # and the second group will have the remaining apples.\n    # Therefore, there are 9 possible splits.\n\n    return 9\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    import math\n    num_students = 5\n    return math.factorial(num_students)\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    for anne in range(1, 38):\n        charlie = 38 - anne\n        if anne - 6 == charlie + 6:\n            return anne\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming_times = 14\n    joanne_swimming_times = 5\n    difference = amy_swimming_times - joanne_swimming_times\n    return difference\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n    \n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n    \n    solutions = solve(equation, (a, b, c, d))\n    \n    # Ensure the solution is a single digit integer for each variable\n    for sol in solutions:\n        if all(map(lambda x: 0 <= x < 10, sol)):\n            a, b, c, d = sol\n            break\n\n    return 1000*a + 100*b + 10*c + d\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of stamps Isaac and Joseph originally have\n    isaac, joseph = symbols('isaac joseph')\n    \n    # Create the equation based on the problem statement\n    # Before Joseph receives stamps from his father\n    equation1 = Eq(isaac, 5 * joseph)\n    \n    # After Joseph receives stamps from his father\n    equation2 = Eq(joseph + 154, (9/10) * isaac)\n    \n    # Solve the system of equations for the original number of stamps\n    solutions = solve((equation1, equation2), (isaac, joseph))\n    \n    # Since we only need the number of stamps Isaac had, return that value\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from sympy import factorial\n\n    # Factorial of 29\n    fact_29 = factorial(29)\n\n    # Convert the factorial to a string\n    fact_29_str = str(fact_29)\n\n    # Reverse the string to start checking for zeroes from the end\n    reverse_fact_29_str = fact_29_str[::-1]\n\n    # Initialize a count of consecutive zeroes\n    zero_count = 0\n    for char in reverse_fact_29_str:\n        if char == '0':\n            zero_count += 1\n        else:\n            # Break the loop if a non-zero character is encountered\n            break\n\n    return zero_count\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    N_base8 = '12345654321'\n    N_base10 = int(N_base8, 8)\n    \n    remainder_7 = N_base10 % 7\n    remainder_9 = N_base10 % 9\n\n    ans = remainder_7 + remainder_9\n    return ans\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let x be the length of the path\n    # Given the speed ratio Linda: Ted = 3:4, we can assume Linda's speed is 3 units\n    # and Ted's speed is 4 units.\n    # When Linda has jogged 1200m, let's assume Ted has jogged y meters.\n    # Because Linda and Ted meet at this point, we have:\n    # Linda's distance + Ted's distance = x\n    # 1200 + y = x\n    # Also, since they have jogged for the same amount of time and their speed ratio is 3:4:\n    # Linda's speed / Ted's speed = Linda's distance / Ted's distance\n    # 3 / 4 = 1200 / y\n    # Solving for y gives us y = 1600.\n    # Now we can find the length of the path (x):\n    # x = 1200 + y\n    y = (4 / 3) * 1200\n    x = 1200 + y\n    return x\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must be divisible by 9.\n    # The sum of the digits in 2018A will be 2 + 0 + 1 + 8 + A.\n    # To find A, we look for a number that makes the sum divisible by 9: 2 + 0 + 1 + 8 + A = 11 + A.\n    # The smallest value for A that makes this sum divisible by 9 is 7 since 11 + 7 = 18, and 18 is divisible by 9.\n    A = 7\n    five_digit_number = 20180 + A\n\n    # To find the remainder when this number is divided by 8,\n    # we only need to consider the last three digits of the number since\n    # the divisibility by 8 of a number depends only on its last three digits.\n    last_three_digits = int(str(five_digit_number)[-3:])\n\n    # Calculate the remainder\n    remainder = last_three_digits % 8\n\n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_front = 5\n    elvis_behind = 7\n    between_ryan_and_elvis = 1\n\n    total_squirrels = ryan_front + between_ryan_and_elvis + elvis_behind + 2  # Ryan and Elvis themselves\n\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    # Total work done is the product of workers and the days they work\n    total_work = workers * days\n    # If only one worker is building the wall, divide the total work by the number of workers\n    days_for_one_worker = total_work / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25 / 100\n    weight_kg = 64\n\n    ans = percentage * weight_kg\n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p and q be the number of pupils in School P and Q initially\n    p, q = symbols('p q')\n\n    # The initial ratio of the pupils in School P to the pupils in School Q is 2:3\n    equation1 = Eq(p/q, 2/3)\n\n    # 240 pupils were added to both schools\n    new_p = p + 240\n    new_q = q + 240\n\n    # The new ratio becomes 3:4\n    equation2 = Eq(new_p/new_q, 3/4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (p, q))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    return 45 * 0.30\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Jack's current age\n    jack_now = symbols('jack_now')\n\n    # Equation representing the age relationship\n    equation = Eq(jack_now - 5, (jack_now + 8) / 2)\n\n    # Solve the equation for Jack's current age\n    jack_current_age = solve(equation, jack_now)\n\n    return jack_current_age[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Initially, Nora spent 70% of her money on a bag\n    spent_on_bag_percentage = 70\n\n    # The remainder after buying the bag\n    remainder_percentage = 100 - spent_on_bag_percentage\n\n    # Nora spent 3/8 of the remainder on a purse\n    spent_on_purse_fraction = 3 / 8\n\n    # Calculate the percentage of the original amount spent on the purse\n    spent_on_purse_percentage = remainder_percentage * spent_on_purse_fraction\n\n    return spent_on_purse_percentage\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(9)\n    vowel_count = factorial(5)\n    consonant_count = factorial(4)\n    \n    vowels_together = vowel_count * factorial(5)\n    \n    ways_with_vowels_never_together = total_letters - vowels_together\n    \n    return ways_with_vowels_never_together\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candy = 5 * 12\n    new_total_students = 6\n    candies_each = total_candy // new_total_students\n    return candies_each\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Given angles in triangle ABC\n    angle_A = 50\n    # In triangle ABC, sum of angles is 180 degrees\n    # Since BP bisects angle ABC and CP bisects angle ACB, they both are divided into two equal parts.\n    # Let x be the measure of each of the bisected angles at B and C\n    # So we have angle_A + 2x + 2x = 180\n    angle_sum_ABC = 180\n    # Solving for x we get x = (180 - angle_A) / 4\n    x = (angle_sum_ABC - angle_A) / 4\n    # Angle BPC is then the sum of the two bisected angles, which are x each\n    angle_BPC = 2 * x\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    sweets = 11\n    wrappers = 11\n\n    while wrappers >= 3:\n        new_sweets = wrappers // 3\n        sweets += new_sweets\n        wrappers = wrappers % 3 + new_sweets\n    return sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let the number of each bird type be x, y, z, w for two-tailed, three-tailed, six-tailed, and eight-tailed respectively.\n    x, y, z, w = symbols('x y z w')\n    \n    # The number of two-talied birds is 5 more than twice as many as the number of eight-tailed birds.\n    eq1 = Eq(x, 2 * w + 5)\n    \n    # The number of three-tailed birds is 2 more than half the number of six-talied bird.\n    eq2 = Eq(y, z / 2 + 2)\n    \n    # Total tails = 2x + 3y + 6z + 8w\n    # Total heads = x + y + z + 2w\n    # Total number of their tails is 2 less than four times as many as the total number of their heads.\n    eq3 = Eq(2 * x + 3 * y + 6 * z + 8 * w, 4 * (x + y + z + 2 * w) - 2)\n    \n    # The difference between the total number of their heads and their tails is 241.\n    eq4 = Eq((x + y + z + 2 * w) - (2 * x + 3 * y + 6 * z + 8 * w), 241)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (x, y, z, w))\n    \n    # Return the number of three-tailed birds\n    return solutions[y]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n    leaving_time = arrival_time + duration\n    return leaving_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for i in range(10, 100):  # Smallest two-digit number is 10 and largest is 99\n        if i % 5 == 4 and i % 7 == 4:\n            return i\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    cost_price = 10\n    selling_price_per_bag = 0.65\n    \n    total_weight_kg = 5\n    weight_per_bag_kg = 0.250\n\n    number_of_bags = total_weight_kg / weight_per_bag_kg\n    total_revenue = number_of_bags * selling_price_per_bag\n\n    profit = total_revenue - cost_price\n    profit_percentage = (profit / cost_price) * 100\n    \n    return profit_percentage\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    ans = 421 * 11\n    return ans\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    ayton_beeton = 4\n    beeton_ceeton = 5\n    ceeton_deeton = 6\n    ayton_deeton_direct = 3\n\n    # Using the multiplication principle for the first three routes\n    ayton_to_deeton_indirect = ayton_beeton * beeton_ceeton * ceeton_deeton\n\n    # Adding the direct route possibilities\n    total_ways = ayton_to_deeton_indirect + ayton_deeton_direct\n\n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator = 15\n    denominator = 20\n    constant_num = 3\n\n    ans = (denominator * constant_num) / numerator\n    return int(ans)\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    # Calculate the common difference (d) of the arithmetic sequence\n    d = (38 - 23) // (15 - 10)\n    \n    # Calculate the 10th term (a_10) and use it to find the first term (a_1)\n    a_10 = 23\n    a_1 = a_10 - d * (10 - 1)\n    \n    # Calculate the 12th term (a_12) using the common difference and the first term\n    a_12 = a_1 + d * (12 - 1)\n    \n    return a_12\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    ans = 1003.67 + 108.98 + 9.08 + 102.33 + 32.02 - 3.08\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    \n    for number in range(1, 2017):\n        underline_count = 0\n        \n        # Check for multiples of 2 (red) and 4 (green) (multiples of 4 are also multiples of 2)\n        if number % 2 == 0:\n            underline_count += 1\n        if number % 4 == 0:\n            underline_count -= 1  # Subtract one count as this was already counted as a multiple of 2\n            \n        # Check for multiples of 3 (blue)\n        if number % 3 == 0:\n            underline_count += 1\n        \n        # Check for double underlining\n        if underline_count == 2:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Joe's initial amount of money as 'joe'\n    joe = symbols('joe')\n    \n    # Sally had $3.75 initially\n    sally_initial = 3.75\n    \n    # Both spent $2.50 on an ice-cream cone\n    sally_spent = 2.50\n    joe_spent = 2.50\n    \n    # After spending, they had a total of $5 left\n    total_left = 5\n    \n    # Equation representing the remaining total money after spending on ice-creams\n    equation = Eq((sally_initial - sally_spent) + (joe - joe_spent), total_left)\n    \n    # Solve the equation to find the initial amount Joe had\n    solution = solve(equation, joe)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_days = 3\n    last_days = 5\n    first_avg = 135\n    last_avg = 151\n\n    total_trees_first = first_days * first_avg\n    total_trees_last = last_days * last_avg\n\n    total_days = first_days + last_days\n    total_trees = total_trees_first + total_trees_last\n\n    overall_avg = total_trees / total_days\n\n    return overall_avg\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the magic number as a symbol\n    magic_number = symbols('magic_number')\n\n    # Equation represents that (149 + magic_number) is 5 times (21 + magic_number)\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    # Solve the equation to find the value of the magic number\n    solution = solve(equation, magic_number)\n\n    # Get the value of the magic number from the solution\n    return solution[magic_number]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "def solution():\n    from math import comb\n\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Calculate the possible combinations for each pair of choices\n    salad_soup_comb = comb(salads, 1) * comb(soups, 1)\n    salad_vegetable_comb = comb(salads, 1) * comb(vegetables, 1)\n    salad_sandwich_comb = comb(salads, 1) * comb(sandwiches, 1)\n    soup_vegetable_comb = comb(soups, 1) * comb(vegetables, 1)\n    soup_sandwich_comb = comb(soups, 1) * comb(sandwiches, 1)\n    vegetable_sandwich_comb = comb(vegetables, 1) * comb(sandwiches, 1)\n\n    # Sum all the combinations\n    ans = (salad_soup_comb + salad_vegetable_comb + salad_sandwich_comb +\n           soup_vegetable_comb + soup_sandwich_comb + vegetable_sandwich_comb)\n\n    return ans\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10):  # hundreds digit must be between 1 and 9 (inclusive)\n        for tens_digit in range(10):      # tens digit must be between 0 and 9 (inclusive)\n            for ones_digit in range(0, 10, 2):  # ones digit must be even, hence between 0 and 9 stepping by 2\n                if hundreds_digit + tens_digit + ones_digit == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    \n    new_num1 = 202 + magic_number\n    new_num2 = 22 + magic_number\n    \n    equation = Eq(new_num1, 6 * new_num2)\n    \n    solution = solve(equation, magic_number)\n    \n    return solution[magic_number]\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n    \n    n = 0\n    while True:\n        # Check if all numbers are prime\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and \n            isprime(n + 106) and isprime(n + 308)):\n            break\n        n += 1\n        \n    return n\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters / 20\n    return days_last\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    # Initialize the total number of students and the surplus of boys to girls\n    surplus_boys = 32\n\n    # We will iterate through possible side lengths of the square array\n    # and calculate the number of boys and girls for each square\n    for side_length in range(1, 100):  # We can safely assume there are less than 100 students per side\n        if side_length % 2 == 0:  # Even side length\n            boys = (side_length * 4 - 4) + (side_length - 2) * 4 * (side_length // 2 - 1) / 2\n            girls = (side_length - 2) * 4 * (side_length // 2) / 2\n        else:  # Odd side length\n            boys = (side_length * 4 - 4) * (side_length // 2 + 1) / 2\n            girls = (side_length - 2) * 4 * (side_length // 2) / 2\n\n        # Check if the difference between boys and girls equals the surplus\n        if boys - girls == surplus_boys:\n            # Total number of students is the sum of boys and girls\n            total_students = boys + girls\n            return int(total_students)\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be the initial mass of strawberries\n    s = symbols('s')\n\n    # Initial mass of mangoes is s + 448\n    m = s + 448\n\n    # After giving away 900g of mangoes\n    m_after = m - 900\n\n    # The mass of strawberries being twice as much as the mass of mangoes after\n    equation = Eq(s, 2 * m_after)\n\n    # Solve the equation\n    sol = solve(equation, s)\n\n    return sol[0]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the count of each fruit and the total\n    total, apples, bananas, lemons = symbols('total apples bananas lemons')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(apples, 2/3 * total)\n    equation2 = Eq(bananas, 1/9 * total)\n    equation3 = Eq(apples, lemons + 12)\n    \n    # Since apples, bananas, and lemons make up the total, we set up this equation\n    equation4 = Eq(apples + bananas + lemons, total)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total, apples, bananas, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount of money Max had, and y be the original amount Anthony had.\n    x, y = symbols('x y')\n\n    # If Max buys the chocolates, the remaining amount of money for Max is x - 12.\n    # The ratio of the remaining amount of Max to Anthony is 2:5\n    # So (x - 12) / y = 2 / 5\n    equation1 = Eq((x - 12) / y, 2 / 5)\n\n    # If Anthony buys the chocolates, the remaining amount of money for Anthony is y - 12.\n    # The ratio of the remaining amount of Max to Anthony is 8:13\n    # So x / (y - 12) = 8 / 13\n    equation2 = Eq(x / (y - 12), 8 / 13)\n\n    # Solve the system of equations to find the values of x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the original number of red stickers and b represent blue stickers\n    # We know that initially r = b because she has an equal number of red and blue stickers\n    # She gave away 2/3 of her red stickers, so she is left with r - 2/3 * r of red stickers\n    # Let x be the fraction of her blue stickers that Liz gave away\n    # Then she is left with b - x * b of blue stickers\n    # In the end, she was left with 1/4 of her stickers, which is (1/4) * (r + b)\n    # This gives us the equation: r - 2/3*r + b - x*b = (1/4) * (r + b)\n    # Since r = b, we can simplify this equation.\n\n    r, x = symbols('r x')\n    equation = Eq(r - 2/3*r + r - x*r, (1/4) * (2*r))\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "def solution():\n    from math import factorial\n\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # to ensure each kid gets at least one pen, we give each kid 1 pen\n    # we are left with 20 - 6 = 14 pens to distribute\n    pens_left = 20 - 6\n\n    # Now, this is a problem of dividing 'pens_left' pens to 6 kids\n    # which is equivalent to putting 'pens_left' identical items into 6 different bins\n    # the number of ways to do this is \"pens_left + 6 - 1 choose 6 - 1\" or \"n + r - 1 choose r - 1\"\n    # this is also known as a combination with repetition problem.\n    ans = nCr(pens_left + 6 - 1, 6 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # The unit's digit of a power of an integer repeats in a certain pattern.\n    # For the number 4, the unit's digit pattern is: 4, 6, 4, 6, ...\n    # This pattern has a cycle length of 2.\n    # Therefore, to find the unit's digit of 444^2022, we need to find the unit's digit of 4^(2022 mod 2).\n    \n    # Calculate the remainder of 2022 when divided by the cycle length 2.\n    remainder = 2022 % 2\n\n    # Choose the unit's digit based on the remainder.\n    # If remainder is 0, the unit's digit is the first in the cycle (4).\n    # If remainder is 1, the unit's digit is the second in the cycle (6).\n    # Since the remainder is 0, we know the unit's digit of 444^2022 is the same as 4^0, which is 4.\n    unit_digit = 4 if remainder == 0 else 6\n\n    return unit_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Since we want the smallest number of marbles in the biggest pile,\n    # starting from 1 marble in the first pile, we keep adding marbles to the next pile.\n\n    # Assuming the piles have a, b, c, d number of marbles, where a < b < c < d.\n    # We use loop to find the smallest d satisfying the constraints.\n    \n    for d in range(1, 17):\n        for c in range(1, d):\n            for b in range(1, c):\n                for a in range(1, b):\n                    if a + b + c + d == 16:\n                        return d\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    lengths_in_metres = {\n        '10 millimetres': 10 / 1000,\n        '100 centimetres': 100 / 100,\n        '10 metres': 10,\n        '2 kilometres': 2 * 1000,\n        '2800 centimetres': 2800 / 100,\n        '2500 metres': 2500,\n        '100 millimetres': 100 / 1000,\n        '100 metres': 100\n    }\n\n    smallest_length = min(lengths_in_metres, key=lengths_in_metres.get)\n    return smallest_length\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    total_pages = (first_term + last_term) * num_terms // 2\n\n    return total_pages\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n    return smallest_6_digit - largest_5_digit\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # For a three-digit odd number using 1, 2, 3, 4, 5, 6 without repeating digits:\n    # The hundreds place can have 5 choices (1, 2, 3, 4, 5)\n    # (Note: it would lead to an even number if 6 is chosen, which is not acceptable for an odd number)\n    # The tens place can have 5 remaining choices (since one digit was used in the hundreds place)\n    # The ones place can have 2 choices, only odd numbers 1, 3, 5 are suitable (since we want the number to be odd)\n\n    # Number of combinations = choices for hundreds place * choices for tens place * choices for ones place\n    count = 5 * 5 * 2\n\n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    can_swim = 20\n    can_play_basketball = 25\n    can_both = 10\n    can_neither = 9\n\n    total_students = (can_swim + can_play_basketball - can_both + can_neither)\n    \n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    sequence = [3, 7, 11, 15, 19]\n    return sum(sequence)\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    current_steps = 1991\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            break\n    return current_steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, (2/3) * B)\n    equation2 = Eq(B, (4/5) * C)\n    equation3 = Eq(C - A, 21)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    return 34.2 + 2.96 + 0.0364\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of bookmarks be b and pupils be p\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    # If Mr Wong gives each pupil 4 bookmarks, he will have 8 left\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n\n    # If he gives each pupil 6 bookmarks, he will be short of 10 bookmarks\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    ans = 608 * 56\n    return ans\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    # Assuming all are ducks, they have 2 legs, so\n    total_duck_legs = total_animals * 2\n    # Excess legs are due to cows (4 legs)\n    excess_legs = total_legs - total_duck_legs\n    # Each cow contributes 2 extra legs compared to a duck\n    cows = excess_legs // 2\n    # Remaining are ducks\n    ducks = total_animals - cows\n    \n    return ducks\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    \n    boys = 70 - girls\n    total_score = 70 * 66\n    girls_score = 70 * girls\n    boys_score = 63 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    # variables to store the term positions and their values\n    n1, a_n1 = 32, 157\n    n2, a_n2 = 108, 537\n\n    # Calculate the common difference (d) of the arithmetic sequence\n    d = (a_n2 - a_n1) / (n2 - n1)\n\n    # Calculate the first term (a1) using the formula a_n = a1 + (n - 1) * d\n    a1 = a_n1 - (n1 - 1) * d\n\n    return int(a1)\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    # Let the average height of the boys be x\n    # Then the average height of the girls will be x + 3.2\n    # The total height of the group is the average height times the number of children\n    # So, the total height of the group is 122.5 * (11 + 5)\n    \n    # The total height of the boys is 5 * x\n    # The total height of the girls is 11 * (x + 3.2)\n    # The total height of the group is the sum of total heights of boys and girls\n    # Which means: 5 * x + 11 * (x + 3.2) = 122.5 * (11 + 5)\n    \n    # We can solve for x, the average height of the boys\n    total_group_height = 122.5 * (11 + 5)\n    num_girls = 11\n    num_boys = 5\n    \n    # Equation: num_boys * x + num_girls * (x + 3.2) = total_group_height\n    # Solve for x:\n    x = (total_group_height - num_girls * 3.2) / (num_girls + num_boys)\n    \n    # The average height of the girls is x + 3.2\n    avg_height_girls = x + 3.2\n    \n    return avg_height_girls\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # The maximum number of regions created by n lines in a plane is (n * (n + 1) / 2) + 1.\n    # Since every triangle has 3 lines and we have 5 triangles, we can have at most 5 * 3 lines.\n    # However, to maximize the number of different parts, we should ensure that no more than 2 lines intersect at a single point.\n    # Thus, the triangles need to be positioned in such a way that their sides coincide with the existing lines whenever possible.\n    \n    # By positioning the triangles to share lines and not having more than two lines intersecting at one point,\n    # it follows a recursive pattern\n    # base case: 1 triangle divides the plane into 2 regions.\n    # recursive case: each additional triangle can cut all existing regions into at most 2 more parts than before\n    # meaning triangle i can add at most i new regions (denoted as triangle(i) = triangle(i-1) + i).\n\n    # Start with one triangle causing 2 divisions.\n    regions = 2\n\n    # We already have 1 triangle placed (causing 2 divisions), so we start with the 2nd triangle.\n    for i in range(2, 5 + 1):  # from the 2nd triangle to the 5th.\n        regions += i\n\n    return regions\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Total number of terms, n\n    n = 9\n    \n    # Sum of the arithmetic sequence, S\n    S = 1503\n    \n    # The sum S of n terms of an arithmetic sequence is given by:\n    # S = n/2 * (a1 + an)\n    # where a1 is the first term and an is the nth term\n    # For a sequence of consecutive odd numbers, the difference d between terms is 2.\n    # We can also express S as:\n    # S = n/2 * (2a1 + (n-1)d)\n    # Since it is an arithmetic sequence of odd numbers, d = 2\n    # 1503 = 9/2 * (2a1 + (9-1)*2)\n    # 1503 = 9/2 * (2a1 + 16)\n    # 1503 = 9 * a1 + 72\n    # 1503 - 72 = 9 * a1\n    # a1 = (1503 - 72) / 9\n    \n    a1 = (S - (n-1)*2) // n\n    return a1\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    kate_left = 42\n    # Reverse the process where Kate ate candies\n    kate_had_before_eating = kate_left * 4 / 3\n    # Reverse the process where Jane gave candies to Kate\n    jane_had_before_giving_to_kate = kate_had_before_eating + 4\n    # Reverse the process where Jane ate candies\n    jane_had_initially = jane_had_before_giving_to_kate * 3 / 2\n    # Reverse the process where Donna gave candies to Jane\n    donna_had_before_giving_to_jane = jane_had_initially + 3\n    # Reverse the process where Donna kept candies\n    donna_had_initially = donna_had_before_giving_to_jane * 2\n\n    return donna_had_initially\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    count = 0\n    for second in range(1, 5):  # A cannot pass the ball to himself\n        if second == 1:  # A is player 1, so we skip this option\n            continue\n        for third in range(1, 5):  # The player who received the ball from A now passes it to another\n            if third == 1 or third == second:  # Cannot pass back to A or to himself\n                continue\n            for fourth in range(1, 5):  # The third person passes the ball\n                # The fourth player must pass to A, but cannot be A or the same as the second or third player\n                if fourth == 1 or fourth == second or fourth == third:\n                    continue\n                count += 1  # This sequence is a valid passing method\n    return count\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 2):\n        q, p = p\n        if q != 0:\n            qp = q * 10 + p\n            pq = p * 10 + q\n            if qp - pq == 27:\n                return qp\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let x be the number of storybooks Anthea originally has\n    # If Jason gives 4 storybooks to Anthea, they will have equal amount\n    # Jason originally has 30 storybooks\n    # After giving away 4, he will have 30 - 4 = 26 storybooks\n    # At this point, Anthea will have x + 4 storybooks\n    # The condition for them to have the same number after the exchange is:\n    # 26 (Jason's books after giving) = x + 4 (Anthea's books after receiving)\n    # So, the number of books Anthea had originally is:\n    x = 26 - 4\n    \n    # The difference between the storybooks that Jason and Anthea originally had is therefore:\n    diff = 30 - x\n\n    return diff\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    from math import lcm\n    return lcm(4, 10)\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2  # meters per second\n    time_in_minutes = 12\n    time_in_seconds = time_in_minutes * 60  # converting minutes to seconds\n    \n    distance = speed * time_in_seconds\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    return 2020 * 68 + 505 * 128\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n    \n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n    \n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    # A's efficiency is twice B's, so if B takes x days to finish the job, A takes x/2 days\n    # It is given that A takes 12 days less than B, so we have the equation: x/2 = x - 12\n    # Solving for x, we get x = 24 days for B to finish the job\n    # Therefore, A takes 24/2 = 12 days to finish the job\n    \n    # The portion of the job A can do in one day is 1/12 and for B it is 1/24\n    # Together they can do in one day is 1/12 + 1/24 = 3/24 = 1/8\n    # Hence, they can complete the whole job in 8 days if they work together\n    days_together = 8\n    return days_together\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n\n    tissues_cost = total_paid - (newspaper_cost + change_received)\n\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, girls)\n    equation2 = Eq(boys - (3/5)*boys, girls - 42 + 12)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    initial_count = solutions[boys] * 2  # Since boys and girls were equal initially\n\n    return initial_count\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 * baskets_of_tomatoes + 3\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Let the distance be 'd' kilometers\n    speed1 = 3  # speed when Mike is late\n    speed2 = 5  # speed when Mike is early\n    time_diff = (12 + 4) / 60  # difference in time in hours (12 late + 4 early)\n\n    # Time to cover distance 'd' with speed1 is 'd/speed1'\n    # Time to cover distance 'd' with speed2 is 'd/speed2'\n    # The difference of these times is equal to time_diff\n    # d/speed1 - d/speed2 = time_diff\n    # Solving for d: \n    # d = time_diff * (speed1 * speed2) / (speed2 - speed1)\n    \n    d = time_diff * (speed1 * speed2) / (speed2 - speed1)\n    return d\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 11111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    all_numbers = []\n\n    # Generate all possible permutations for each possible length\n    for r in range(1, len(digits) + 1):\n        for number_tuple in permutations(digits, r):\n            number = ''.join(number_tuple)\n            all_numbers.append(int(number))\n\n    # The answer is simply the count of unique numbers we can form\n    ans = len(set(all_numbers))\n    return ans\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost_for_12_cases = cost_per_case * 12\n    return total_cost_for_12_cases\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temp = -8\n    today_temp = 13\n    increase_in_temp = today_temp - last_night_temp\n    return increase_in_temp\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)  # Rachel gives Alice 10 candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)  # Alice gives Rachel 10 candies\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return sum(solutions.values())  # Total number of candies they originally had\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial ratio equation: boys/girls = 3/2\n    initial_ratio = Eq(boys/girls, 3/2)\n\n    # After 12 boys and 12 girls joined\n    # New ratio equation: (boys + 12)/(girls + 12) = 19/14\n    new_ratio = Eq((boys + 12)/(girls + 12), 19/14)\n\n    # Solve the equations\n    solutions = solve((initial_ratio, new_ratio), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls] + 12 + 12\n\n    return total_children\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    import math\n    # Four different colored socks can be arranged in 4! (factorial) ways\n    ways_different_socks = math.factorial(4)\n\n    # Two different colored pairs of socks can be arranged as 2! (factorial) for each pair and 2! for the arrangement of the pairs\n    ways_same_color_pairs = math.factorial(2) * math.factorial(2)\n\n    ans = (ways_different_socks, ways_same_color_pairs)\n    return ans\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # Given period on Earth\n    T_earth = 1  # in seconds\n\n    # Acceleration due to gravity on Earth\n    g_earth = 9.8  # in m/s^2\n\n    # Acceleration due to gravity on the Moon\n    g_moon = g_earth / 6\n\n    # The formula for the period T of a simple pendulum is T = 2 * pi * sqrt(l / g),\n    # where l is the length of the pendulum and g is the acceleration due to gravity.\n    # The length of the pendulum does not change, so we are looking for the ratio\n    # of the periods:\n    # T_moon / T_earth = sqrt(g_earth / g_moon)\n\n    T_moon = T_earth * sqrt(g_earth / g_moon)\n\n    return T_moon\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length1 = 23\n    length2 = 37\n    welded_length = 3\n\n    total_length = length1 + length2 - welded_length\n\n    return total_length\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    pupils_P = 112\n    pupils_Q = 1098\n    total_pupils = pupils_P + pupils_Q\n    pupils_each_room = total_pupils // 2\n    \n    return pupils_each_room\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1 Mar 2023\", \"%d %b %Y\")\n    end_date = datetime.strptime(\"15 Apr 2023\", \"%d %b %Y\")\n\n    duration = end_date - start_date\n    return duration.days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared * x_squared\n    return x_fourth\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    # Let j be the number of questions Justin answers correctly\n    # Let w be the number of questions William answers correctly\n    for j in range(11):\n        for w in range(11):\n            # Justin's points: 6 * j - 2 * (10 - j) = 6j - 20 + 2j = 8j - 20\n            # William's points: 6 * w - 2 * (10 - w) = 6w - 20 + 2w = 8w - 20\n            # Together they have 96 points: (8j - 20) + (8w - 20) = 96\n            # Justin has 24 more points than William: (8j - 20) - (8w - 20) = 24\n            if (8*j - 20) + (8*w - 20) == 96 and (8*j - 20) - (8*w - 20) == 24:\n                return w\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    # Find the size of the square for the total number of tiles\n    side_length = int(total_tiles ** 0.5)\n    \n    red_tiles = 0\n    green_tiles = 0\n    # Iterate over the layers\n    for layer in range((side_length + 1) // 2):\n        if layer % 2 == 0:  # Even layers (0, 2, ...), red tiles\n            # Each layer contributes to the perimeter of the layer, with each side having side_length - 2 * layer tiles\n            red_tiles += 4 * (side_length - 2 * layer) - 4\n        else:               # Odd layers (1, 3, ...), green tiles\n            green_tiles += 4 * (side_length - 2 * layer) - 4\n        \n    # Count the center tile if the side length is odd\n    if side_length % 2 == 1:\n        red_tiles += 1\n\n    # Find out which color has more tiles\n    if red_tiles > green_tiles:\n        dominant_color = \"red\"\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = \"green\"\n        more_tiles = green_tiles - red_tiles\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    work_done_by_A_per_day = 1 / 15\n    work_done_by_B_per_day = 1 / 10\n    \n    work_done_in_3_days = 3 * (work_done_by_A_per_day + work_done_by_B_per_day)\n    remaining_work = 1 - work_done_in_3_days\n    \n    days_for_B_to_finish = remaining_work / work_done_by_B_per_day\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    people = 100\n    side_length = int(people ** 0.5)  # Calculate the side length of the square\n    outermost_people = 4 * side_length - 4  # Each side contributes side_length people, but the 4 corners are counted twice\n    return outermost_people\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Since it's a number puzzle, likely we need to consider each position in the vertical form\n    # and solve for the unknown A. From the puzzle's context, we would normally expect\n    # something like a simple addition, subtraction, or multiplication that equals a known value.\n    # However, as the actual puzzle is missing, there's no direct context to solve it from.\n    # We would need the exact puzzle details to provide a proper solution.\n    \n    # Assuming A is part from a basic addition problem like so\n    #   A\n    # + B\n    # ----\n    #   C\n    #\n    # We can write an equation like A + B = C, and we would need values for B and C,\n    # and then we can solve for A. But since we don't have the problem detail, we cannot solve it.\n    \n    A = None\n    # As we can't solve without the puzzle, A remains undefined\n    return A\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = -4\n    term = first_term\n    count = 0\n\n    while term > 0:\n        count += 1\n        term += difference\n\n    return count\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 280 / (1 - 1/8)  # Calculate how much he had after giving to his sister\n    initial_amount = remaining_after_sister / (1 - 3/7)  # Calculate the initial amount before giving to his sister\n    return initial_amount\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    needed_loafs = 24\n    cups_needed = needed_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    apples = 80\n    min_apples = 3\n    \n    # Since at least one student gets at least 3 apples, we can subtract those apples\n    remaining_apples = apples - min_apples\n    \n    # Using the Pigeonhole Principle, find minimum number of students (pigeonholes)\n    # Each student can get at least 1 apple (after the first student gets 3)\n    # Therefore, the number of students is the number of leftover apples + 1 (for the first student)\n    class_size = remaining_apples + 1\n\n    return class_size\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(4 * cheesecake, 3 * logcake)\n    equation2 = Eq(6 * cheesecake + 7 * logcake, 1426)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    total_cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return total_cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n    return amount_per_person\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote red balls as r, white as w, and black as b\n    r, w, b = symbols('r w b')\n    \n    # Equation from the given ratios\n    equation1 = Eq(r, w / 2)\n    equation2 = Eq(w, 3 * b / 4)\n    equation3 = Eq(r + w + b, 34)  # Total number of balls\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, w, b))\n    return solutions[r]\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5  # area of the square base in cm^2\n    hole_area = 1 * 1  # area of the square hole in cm^2\n    effective_base_area = base_area - hole_area  # subtract area of hole from base area\n    height = 480 / effective_base_area  # volume divided by effective base area gives the height\n    return height\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # For any number greater than 10, \n    # the last digit of its factorial will be 0 because the factorial \n    # will contain the factors 2 and 5, which when multiplied produce 10.\n    # So the last digit of 2014! would be 0.\n    return 0\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total = sum(i * (2*i - 1) for i in range(1, 11))\n    return total\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    # Cost of a pencil and a pen\n    pencil_cost = 5\n    pen_cost = 15\n\n    # The number of pencils per pen\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # In this game, the winning strategy is to make sure that the opponent is always faced with a nim-sum (i.e., the XOR of the pile sizes in binary) of 0. When the nim-sum is 0, no matter what move the opponent makes, they will leave a non-zero nim-sum, which can then be returned to zero by the player with the winning strategy.\n\n    # Calculate the nim-sum of the piles:\n    nim_sum = 88 ^ 52  # XOR operation\n\n    # Winning strategy for Tom (assuming he goes first):\n    # - If the nim-sum is 0 initially, Tom can only hope Jane makes a mistake, as every move he makes will leave a non-zero nim-sum.\n    # - If the nim-sum is non-zero, Tom's move should result in a nim-sum of 0.\n    \n    # Tom should check which pile contributes to the highest order bit in the nim-sum, \n    # and reduce that pile such that after his move, the nim-sum becomes zero.\n    \n    # If the nim_sum is already 0, Tom can't guarantee a win unless Jane makes a mistake.\n    if nim_sum == 0:\n        return -1  # Tom has no guaranteed winning strategy\n\n    # Find Tom's move to force a nim-sum of 0\n    for cards_to_take in range(1, 53):  # Maximum of 52 cards can be taken from B\n        if (88 ^ (52 - cards_to_take)) == 0:\n            return (\"B\", cards_to_take)\n\n    # If we didn't return earlier, Tom should take cards from A to make nim-sum 0.\n    for cards_to_take in range(1, 89):  # Maximum of 88 cards can be taken from A\n        if ((88 - cards_to_take) ^ 52) == 0:\n            return (\"A\", cards_to_take)\n\n    # In an unusual case where no such number exists (should never happen in this game), return None.\n    return None\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    return 12 + 102 + 1002 + 10002\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - (x1 + x2)\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 6 # because each combination is counted 3! (6) times\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_sisters = 13 * 2  # Two sisters\n    marbles_left = 16\n\n    initial_marbles = marbles_given_to_brother + marbles_given_to_sisters + marbles_left\n\n    return initial_marbles\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, green = symbols('yellow green')\n\n    initial_ratio = Eq(yellow/green, 3/2)\n    new_yellow = yellow + 5\n    new_green = green + 20\n    new_ratio = Eq(new_green / new_yellow, 3/2)\n\n    solutions = solve((initial_ratio, new_ratio), (yellow, green))\n\n    return solutions[yellow] + solutions[green]\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum(2 * n - 1 for n in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    # Amy's speed is 60 mph and Christen's speed is 40 mph.\n    amy_speed = 60\n    christen_speed = 40\n\n    # They meet after 4 hours, so the distance they've covered together when they meet is:\n    total_distance_covered = (amy_speed + christen_speed) * 4\n\n    # Time taken for Christen to reach Amy's starting point is the total distance divided by Christen's speed.\n    time_for_christen_to_reach_amy = total_distance_covered / christen_speed\n\n    return time_for_christen_to_reach_amy\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n\n    for p in permutations(digits, 4):\n        if p[-1] in ['0', '6', '8'] and p[0] != '0':\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2/7) * total_cakes\n    banana_cakes = (35/100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    # The ratio of lemon to chocolate cakes is 4:5, let's assume 4x lemon and 5x chocolate cakes\n    # So, 4x + 5x = remaining_cakes => 9x = remaining_cakes\n    x = remaining_cakes / 9\n    lemon_cakes = 4 * x\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    score_correct = 4\n    score_wrong = -1\n    total_score = 110\n\n    # Let x be the number of correct answers\n    # Then, (total_questions - x) will be the number of wrong answers\n    # We can set up the equation:\n    # (score_correct * x) + (score_wrong * (total_questions - x)) = total_score\n\n    # Solve for x\n    for x in range(total_questions + 1):\n        if (score_correct * x) + (score_wrong * (total_questions - x)) == total_score:\n            return x\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # First pass: Lily has 2 choices, either Cici or April\n    first_pass_ways = 2\n\n    # Second pass: Whoever receives the ball first has 2 choices (excluding the person who passed the ball)\n    second_pass_ways = 2\n\n    # Total different passing ways is the product of the two\n    ans = first_pass_ways * second_pass_ways\n\n    return ans\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    # Average score for the first four assignments\n    avg_first_four = 89\n    # Total score for the first four assignments\n    total_first_four = avg_first_four * 4\n    # Score of the fifth assignment\n    fifth_assignment_score = 94\n    # Total score including the fifth assignment\n    total_five_assignments = total_first_four + fifth_assignment_score\n    # Average score for all five assignments\n    avg_five_assignments = total_five_assignments / 5\n    \n    return avg_five_assignments\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the books Lily sends to Judy\n    # Let L represent the initial number of books Lily has\n    # Let J represent the initial number of books Judy has\n    x, L, J = symbols('x L J')\n\n    # Lily sends x books to Judy: (L - x)\n    # Judy receives x books from Lily: (J + x)\n    # After the exchange, they both have the same amount of books: L - x = J + x\n    \n    equation1 = Eq(L - x, J + x)\n\n    # The number of books Lily had more than Judy originally is L - J\n\n    # We are interested in the difference in the number of books, which does not depend on x\n    # Therefore, we can arbitrarily set x, for example, x = 1\n\n    solutions = solve((equation1.subs(x, 1)), (L, J))\n\n    # The difference in the number of books is L - J\n    difference = solutions[L] - solutions[J]\n\n    return difference\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    # There are 9 options for the first digit (1-9), because it can't be 0\n    # There are 9 options for the second digit (0-9 excluding the first digit)\n    # There are 2 options for the third digit (either the first or the second digit)\n\n    # Calculation for numbers where the second and third digits are the same: 9 * 1 * 9\n    # However, for numbers like 11X, the third digit can't be 1, so for these cases: 9 * 1 * 8\n    # Total for the second and third digits being the same is (9 * 1 * 9) - (9 * 1 * 1) + (9 * 1 * 8)\n\n    # Calculation for numbers where the first and third digits are the same: 9 * 9 * 1\n    # However, for numbers like X11, the second digit can't be 1, so for these cases: 9 * 8 * 1\n    # Total for the first and third digits being the same is (9 * 9 * 1) - (1 * 9 * 1) + (1 * 8 * 1)\n\n    # Therefore, the total number is the sum of both cases:\n    # (9 * 1 * 9) - (9 * 1) + (9 * 1 * 8) + (9 * 9 * 1) - (9 * 1) + (8 * 1)\n    count = (9 * 1 * 9) - (9 * 1) + (9 * 1 * 8) + (9 * 9 * 1) - (9 * 1) + (8 * 1)\n    return count\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibbles = 11\n    wibble_arms = wibbles * 6\n    total_arms = 81\n    wobble_arms = total_arms - wibble_arms\n    wobbles = wobble_arms // 5\n    return wobbles\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    amount = 420\n    percentage = 15\n    ans = (amount * percentage) / 100\n    return ans\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 180):\n        if isprime(a):\n            b = (179 - 7 * a) / 9\n            if b.is_integer() and isprime(int(b)):\n                return int(a + b)\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10): # Loop through possible hundreds place values\n        for ones in range(10): # Loop through possible ones place values\n            tens = 2 * hundreds # Tens place is twice the hundreds place\n            if (hundreds == ones + 1) and (hundreds + tens + ones == 15): # Check the conditions\n                return 100 * hundreds + 10 * tens + ones # Return the 3-digit number\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32\n    fraction_of_time = (1/4) * (1/6) * (1/8)\n    total_seconds = total_minutes * 60\n    result = total_seconds * fraction_of_time\n    return int(result)\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    def custom_op(a, b):\n        return a + b - (a * b / 910)\n    \n    ans = 1\n    for num in range(2, 2017):\n        ans = custom_op(ans, num)\n    \n    return ans\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_lead_singers = boys * girls\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    # Let the numbers be x and y.\n    # According to the problem, we know:\n    # x + y = 80 (sum of the numbers)\n    # x - y = 40 (difference of the numbers)\n    \n    # To find the two numbers, we'll solve the two equations:\n    # Adding both equations, we get:\n    # 2x = 120\n    x = (80 + 40) / 2\n    \n    # We can now find the smaller number by substituting x back into one of the equations:\n    # x + y = 80\n    # y = 80 - x\n    y = 80 - x\n    \n    return y\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # Maverick's speed in km/h\n    kelvin_speed = 10    # Kelvin's speed in km/h\n    kelvin_lead = 10     # Kelvin is 10 km ahead\n    maverick_time = 24 / 60  # Maverick's time in hours (24 minutes)\n\n    # The distance Maverick travels in the given time\n    maverick_distance = maverick_speed * maverick_time\n    \n    # The distance Kelvin travels in the given time\n    kelvin_distance = kelvin_speed * maverick_time\n    \n    # The relative distance covered by Maverick in the given time\n    relative_distance = maverick_distance - kelvin_distance\n\n    if relative_distance >= kelvin_lead:\n        # Maverick catches up to Kelvin in the given 24 minutes\n        ans = 24\n    else:\n        # Calculate the time it actually takes for Maverick to catch up\n        # The time needed is the lead distance divided by the relative speed\n        relative_speed = maverick_speed - kelvin_speed\n        time_to_catch_up = kelvin_lead / relative_speed\n        ans = time_to_catch_up * 60  # Convert hours to minutes\n\n    return ans\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    correct_score = 5\n    wrong_penalty = 2\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if (correct_answers * correct_score - wrong_answers * wrong_penalty) == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    count = 0\n    for x1 in range(1, 6):  # First kid must get at least one eraser\n        for x2 in range(1, 6):  # Second kid must get at least one eraser\n            x3 = 6 - x1 - x2  # Remaining erasers go to third kid\n            if 1 <= x3 <= 6 - 1:  # Third kid must get at least one eraser\n                count += 1\n    return count\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # The total length of the road can be calculated by (number of plum trees - 1) * distance between plum trees\n    total_road_length = (41 - 1) * 4\n\n    # Calculate the number of pine trees by dividing the total road length by the distance between pine trees\n    # plus 1 because trees are planted at opposite ends\n    num_pine_trees = (total_road_length // 5) + 1\n\n    return int(num_pine_trees)\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the age of the younger person and y as the age of the older person.\n    x, y = symbols('x y')\n\n    # From the problem we have two equations:\n    # 1. When the older was as young as the younger is now, the younger was 4 years old: y - x = x - 4 -> y = 2x - 4\n    # 2. When the younger will be as old as the older is now, the younger will be 61: y - x = 61 - x -> y = 61\n\n    # Constructing the equations based on the above analysis\n    equation1 = Eq(y, 2*x - 4)\n    equation2 = Eq(y, 61)\n\n    # Solving the system of equations\n    solution = solve((equation1, equation2), (x, y))\n\n    # We want to find the age of the younger person\n    return solution[x]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    return sum(range(1, 7))\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people_initial = 10\n    hours_initial = 9\n    hours_required = 3\n\n    work_rate_initial = people_initial / hours_initial\n    work_required = work_rate_initial * hours_initial\n\n    people_required = work_required / hours_required\n    return int(people_required)\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.6)\n    total_watermelons = remaining_after_first_day / (1 - 1/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    from fractions import Fraction\n\n    cost_of_bag = 120\n\n    # Since the bag costs 2/5 of the remaining money after buying the book,\n    # let's find the remaining money after buying the book.\n    remaining_after_book = cost_of_bag * (5/2)\n\n    # Now we find the original amount of money before buying the book.\n    # She spent 1/3 of her original money on the book.\n    original_money = remaining_after_book / (1 - Fraction(1, 3))\n\n    return original_money\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    last_term = n\n    sum_squares = sum([i**2 for i in range(first_term, last_term + 1)])\n    return sum_squares\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):\n            for x3 in range(x2 + 1, 9):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # 5 desks in front of Jessica = number of desks before Jessica sits\n    desks_in_front_of_jessica = 5\n    \n    # 7 desks behind Judy = number of desks after Judy sits\n    desks_behind_judy = 7\n    \n    # Since Jessica and Judy's desks are adjacent, the total number of desks\n    # is the sum of the desks in front of Jessica, behind Judy, and their own desks.\n    total_desks = desks_in_front_of_jessica + 1 + 1 + desks_behind_judy\n    \n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    # Fast multiplication without library functions\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    total_students = 152\n\n    # Let the original number of boys be x\n    for x in range(total_students + 1):\n        girls = total_students - x  # original number of girls\n        boys_after_removal = x - x / 11\n        girls_after_removal = girls - 5\n        \n        if boys_after_removal == girls_after_removal:\n            return x\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = (9 - 8) + (7 - 6) + (5 - 4) + (3 - 2) + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.75 * x - 5, 2.5)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_value = 1000\n    difference = -11\n    n = 1  # Starting from the first term\n    \n    while True:\n        current_value = initial_value + (n - 1) * difference\n        if current_value < 0:\n            break\n        n += 1\n        \n    return current_value\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    # Calculating the last two digits of the product\n    product = 888 * 999\n    last_two_digits = product % 100  # modulus to get the last two digits\n    \n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    midpoint = 0.126\n    known_number = 0.11\n\n    distance = midpoint - known_number\n    other_number = midpoint + distance\n\n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n\n    sweets_per_person = total_sweets // classmates\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates_per_toffee = 12 / 7\n    num_chocolates = 72\n\n    num_toffees = num_chocolates / chocolates_per_toffee\n\n    return int(num_toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for i in range(28, 41):\n        if i % 4 == 0 and 9 in set(factor for factor in range(1, i + 1) if i % factor == 0):\n            return i\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    # Number of cases of mangoes\n    mangoes_cases = 24\n    # Number of cases of lychees\n    lychees_cases = 19\n    # Total cost\n    total_cost = 2826\n    # Cost per box of mangoes\n    mangoes_cost_per_case = 56\n    \n    # Total cost of mangoes\n    total_mangoes_cost = mangoes_cases * mangoes_cost_per_case\n    # Total cost of lychees\n    total_lychees_cost = total_cost - total_mangoes_cost\n    # Cost per box of lychees\n    lychees_cost_per_case = total_lychees_cost / lychees_cases\n\n    return lychees_cost_per_case\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                totals.add(c1 + c2 + c3)\n\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        a, b, c = p\n        if a == 0 or b == 0:\n            continue\n        num1 = int(f\"{a}52\")\n        num2 = int(f\"{b}6\")\n        result = num1 * num2\n        str_result = f\"{result}\"\n        if len(str_result) == 5 and str_result[2] == '4' and str_result[-1] == f\"{c}\":\n            return a + b + c\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    interest_rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + interest_rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24 * x - 5 * (3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal = 0.507\n    fraction = 1 / 4\n\n    ans = percentage + decimal + fraction\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    perm_set = set(permutations(cards, 3))  # Get all permutations of length 3\n    \n    # Filter out permutations that start with '0' and count unique numbers\n    count = len(set(int(''.join(p)) for p in perm_set if p[0] != '0'))\n    return count\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # The problem likely requires us to fill in the digits for P, Q, and R to satisfy a multiplication condition.\n    # No direct puzzle is given, but assuming a general case of a single digit multiplication like:\n    #   PQR (three different single-digit numbers)\n    # x   R\n    # -----\n    #  RRR (The result is three of the same digit, which also happens to be R)\n\n    # To find a number between 100 and 999 (PQR), that when multiplied by a single digit number (R),\n    # results in a number consisting of three repeating digits (RRR)\n\n    for P in range(1, 10):\n        for Q in range(0, 10):\n            for R in range(1, 10):  # R cannot be 0 as then RRR would be 000 which is not a valid number\n                PQR = P * 100 + Q * 10 + R\n                RRR = int(f\"{R}{R}{R}\")  # Assemble a number with three repeating Rs\n                if PQR * R == RRR:\n                    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children who bought the £10 shirt,\n    # and y be the number of children who bought the £15 shirt.\n    x, y = symbols('x y')\n\n    # We have two equations based on the problem statement.\n    # Eq1: The total number of children is 50.\n    equation1 = Eq(x + y, 50)\n    # Eq2: The total amount paid by the children is £555.\n    equation2 = Eq(10 * x + 15 * y, 555)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are asked for the number of children who paid £15, which is y.\n    return solutions[y]\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Calculate the time Susan spends jogging before she starts walking.\n    # She jogs from 7:30 AM to 8:30 AM, which is 1 hour.\n    jogging_time = 1  # hours\n\n    # Calculate the distance Susan travels while jogging.\n    jogging_speed = 5  # miles per hour\n    jogging_distance = jogging_speed * jogging_time  # miles\n\n    # Calculate the time Susan spends walking after jogging and before she finishes her exercise.\n    # She walks from 8:30 AM to 10:30 AM, which is 2 hours.\n    walking_time = 2  # hours\n\n    # Calculate the distance Susan travels while walking.\n    walking_speed = 3  # miles per hour\n    walking_distance = walking_speed * walking_time  # miles\n\n    # Calculate the total distance Susan travels by adding the jogging and walking distances.\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    n = symbols('n')\n    equation = Eq(n + (n + 1) + (n + 2) + (n + 3) + (n + 4), 100)\n    solutions = solve(equation, n)\n    return min(solutions)\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(44000)\n    q = 1\n\n    for prime, exponent in factors.items():\n        if exponent % 3 != 0:\n            q *= prime ** (3 - (exponent % 3))\n\n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 3 * 10\n    oranges_in_small_boxes = 7 * 5\n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    bags_used = (total_balls - 2) // balls_per_bag\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    max_draws_without_same_three = 2 * 4  # 2 cards of each pattern\n    ans = max_draws_without_same_three + 1  # Add one to guarantee three cards with the same number\n    return ans\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800  # length of the road in meters\n    total_trees = 21    # total number of trees\n\n    # Since there are trees at both ends, the number of intervals between the trees\n    # is one less than the number of trees\n    intervals = total_trees - 1\n    \n    # The distance between one tree and another is the total length\n    # divided by the number of intervals\n    distance_between_trees = total_length / intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n\n    # Correct the steps for Joey's calculation\n    # Andy's final count = Andy's notebooks - notebooks given to his sister\n    # Sister's final count = Sister's initial count + notebooks received from Andy\n    # Since both end up with the same number, we have:\n    # Andy's final count = Sister's final count\n    # ==> andy_notebooks - andy_gives = sister_initial + andy_gives\n    # Therefore, we solve for sister_initial:\n    sister_initial = (andy_notebooks - andy_gives) - andy_gives\n\n    return sister_initial\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # The possible cards James could have are:\n    possible_cards = {'Spades': ['A', 'J', 'K'],\n                      'Hearts': ['3', '5', 'K'],\n                      'Diamonds': ['2', '7', 'J'],\n                      'Clubs': ['A', '7']}\n    \n    # After Eddie's statement, it is known that the card is not one with a unique suit or number\n    not_unique_suit_or_number = {suit: nums for suit, nums in possible_cards.items() if len(nums) > 1}\n\n    # After Avril's statement, we know that the card has to be uniquely identifiable\n    # by its number, since now she knows for sure what the card is.\n    numbers_with_unique_suits = {}\n    for suit, nums in not_unique_suit_or_number.items():\n        for num in nums:\n            numbers_with_unique_suits[num] = numbers_with_unique_suits.get(num, []) + [suit]\n\n    unique_number = next(num for num, suits in numbers_with_unique_suits.items() if len(suits) == 1)\n    suit_with_unique_number = numbers_with_unique_suits[unique_number][0]\n\n    # The card is the one with the unique number that has not been eliminated by the previous reasoning.\n    return (suit_with_unique_number, unique_number)\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3 / 4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_trees = 9\n\n    # The trees are planted in between, so there are 9 + 1 intervals\n    intervals = number_of_trees + 1\n\n    distance_between_each_tree = distance_between_buildings / intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # Let's denote the smaller number as x.\n    # According to the problem, the other number is twice the smaller one, so it is 2x.\n    # We are given that their sum is 72.\n    # Therefore, we have the equation: x + 2x = 72\n\n    # Solving for x:\n    x = 72 / 3\n\n    return int(x)\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    total_sum_for_5_numbers = 5 * 5\n    sum_of_four_numbers = 3 + 4 + 6 + 10\n    fifth_number = total_sum_for_5_numbers - sum_of_four_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    emily_position_from_front = 25 + 1  # Emily is directly behind Danny\n    danny_position_from_back = 14\n    total_people = emily_position_from_front + danny_position_from_back\n    return total_people\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "def solution():\n    from sympy import isprime\n    \n    # Initialize a count of prime numbers\n    prime_count = 0\n\n    # The number 200 can change its digits in three places: hundreds, tens, or ones.\n    # A prime number's last digit can only be 1, 3, 7, 9 (except for number 2 and 5)\n    # We will therefore look for primes in the following ranges:\n    # For the hundreds place, we'll range from 100 to 200 (excluding 200 itself)\n    # For the tens place, we'll range from 200 to 290\n    # For the ones place, we'll check 201, 203, 207, and 209\n\n    # Hundreds place change (100-199)\n    for i in range(100, 200):\n        if isprime(i):\n            prime_count += 1\n\n    # Tens place change (210-290)\n    for i in range(210, 300, 10):\n        if i == 200:  # Exclude the original number itself\n            continue\n        if isprime(i):\n            prime_count += 1\n\n    # Ones place change, check only prime candidate endings\n    for digit in [1, 3, 7, 9]:\n        if isprime(200 + digit):\n            prime_count += 1\n\n    return prime_count\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count_5 = 0\n    page = 1\n\n    while count_5 < 30:\n        if '5' in str(page):\n            count_5 += str(page).count('5')\n        page += 1\n\n    return page - 1\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n    \n    cost_per_cup = total_cost / num_cups\n    \n    return cost_per_cup\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Emma cuts one piece of wood into 4 sections in 12 minutes\n    # This means she makes 3 cuts because 1 piece of wood gives 2 sections when cut once\n    # Therefore, 3 cuts take 12 minutes\n    # Emma needs to make 5 cuts to cut the wood 5 times (5 sections need 4 cuts)\n    # Calculate the time taken for one cut\n    time_per_cut = 12 / 3\n\n    # Calculate the time for 5 cuts\n    time_for_5_cuts = time_per_cut * 4  # 4 cuts to get 5 sections\n\n    return time_for_5_cuts\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pages_per_day_slow, days_late = 30, 2\n    pages_per_day_fast, days_early = 39, 4\n    \n    deadline, total_pages = symbols('deadline total_pages')\n    \n    # Equation when Vanessa reads 30 pages a day\n    equation_slow = Eq(pages_per_day_slow * (deadline + days_late), total_pages)\n    # Equation when Vanessa reads 39 pages a day\n    equation_fast = Eq(pages_per_day_fast * (deadline - days_early), total_pages)\n    \n    # Solve system of equations\n    solutions = solve((equation_slow, equation_fast), (deadline, total_pages))\n    \n    return solutions[deadline], solutions[total_pages]\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    x = symbols('x')\n\n    # Define the equation based on Celeste's working\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the correct solution\n    return solution[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_worker_per_day = 2\n    total_rooms = 4\n    workers = 2\n    \n    days = (total_rooms / (rooms_per_worker_per_day * workers))\n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(apple + 2 * orange, 48)\n    equation2 = Eq(apple + orange, 31)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's use symbol to represent the unknowns\n    money = symbols('money')\n    price_per_ball = symbols('price_per_ball')\n    \n    # We then set up our equations based on the problem statement\n    # In the first week, after buying 4 balls, $27p is left. The equation is:\n    # money - 4 * price_per_ball = 27 (pounds to pence)\n    equation1 = Eq(money - 4 * price_per_ball, 27)\n    \n    # In the second week, after buying 2 balls, £1.51 is left.\n    # The equation is:\n    # money - 2 * price_per_ball = 151 (pounds to pence)\n    equation2 = Eq(money - 2 * price_per_ball, 151)\n\n    # We solve the system of equations\n    solutions = solve((equation1, equation2), (money, price_per_ball))\n\n    # We get the pocket money amount and convert pence back to pounds\n    pocket_money = solutions[money] / 100\n    \n    return pocket_money\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    total_pages = 30\n    time_per_hour = 3/4\n    seconds_per_hour = 3600\n\n    seconds_per_page = (time_per_hour * seconds_per_hour) / total_pages\n    \n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given = total_badges * (3/8)\n    badges_left = total_badges - badges_given\n    return badges_left\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    # Check numbers from 100 to 999\n    for number in range(100, 1000):\n        # Convert number to string to check for zero digits\n        str_number = str(number)\n        # Count the number of zeros in the number\n        zero_count = str_number.count('0')\n        # If exactly one zero, increment the count\n        if zero_count == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    equation1 = Eq(elias, 5 * aileen)\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    return solutions[elias] - 88, solutions[aileen] - 8\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    louis_position = total_people - people_behind - 1\n\n    return louis_position\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = list(range(11, 32, 2))\n    return sum(numbers)\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    return 730 / 1000\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    # Let's denote the number of pieces Gerald eats as 'g'.\n    # According to the problem, Thomas eats 5 pieces for every 3 pieces Gerald eats.\n    # So, the number of pieces Thomas eats is (5/3) * g.\n    # Together, they eat 104 pieces.\n    # Therefore, g + (5/3) * g = 104.\n    # Solving for g, we get g * (1 + (5/3)) = 104 => g * (8/3) = 104.\n    \n    g = 104 * (3/8)\n    t = (5/3) * g\n\n    # The number of more pieces Thomas ate than Gerald is t - g.\n    ans = t - g\n\n    return int(ans)\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    number1 = int('25', 8)  # Convert base 8 number to base 10\n    number2 = int('37', 8)  # Convert base 8 number to base 10\n    sum_base10 = number1 + number2  # Sum the numbers in base 10\n    ans = oct(sum_base10)  # Convert the sum back to base 8\n    return ans[2:]  # Remove the '0o' prefix\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of boys be b, and the number of girls be g.\n    # Let the number of children be c, and the number of adults be a.\n    # According to the problem, there were 2/7 as many boys as girls:\n    # b = (2/7) * g  =>  g = (7/2) * b\n    # There were 2/3 as many adults as children:\n    # a = (2/3) * c  =>  c = (3/2) * a\n    # The number of adults is 1228 more than the number of boys:\n    # a = b + 1228\n    # The number of children is the sum of boys and girls: c = b + g\n\n    # Replace a in the last equation with b + 1228:\n    # c = (3/2) * (b + 1228)\n    # c = b + g\n    # Replace g with (7/2) * b:\n    # b + (7/2) * b = (3/2) * (b + 1228)\n    # (9/2) * b = (3/2) * (b + 1228)\n    # Multiply both sides by 2 to get rid of fractions:\n    # 9 * b = 3 * (b + 1228)\n    # 9 * b = 3 * b + 3684\n    # Solve for b:\n    # 9b - 3b = 3684\n    # 6b = 3684\n    b = 3684 / 6\n\n    # Now we have the number of boys. Use the equations to find the number of girls and adults:\n    # g = (7/2) * b\n    g = (7/2) * b\n    # a = b + 1228\n    a = b + 1228\n    # Total number of people at the park is the sum of children (boys and girls) and adults:\n    total_people = g + b + a\n\n    return int(total_people)\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Let x be the number of tennis rackets initially purchased\n    # Each racket is bought for $150 and sold for $175, hence making a profit of $25 per racket\n    # When 8 rackets are left, the shop would have sold (x - 8) rackets\n    # The profit made from selling (x - 8) rackets must be $525, in addition to covering initial cost\n    # So, the equation is: (x - 8) * $25 = $525\n    # Solving this equation will give us the value of x\n    \n    profit_per_racket = 175 - 150\n    remaining_rackets = 8\n    extra_profit = 525\n\n    # Equation: profit_per_racket * (x - remaining_rackets) = extra_profit\n    # 25 * (x - 8) = 525\n    # 25x - 200 = 525\n    # 25x = 525 + 200\n    x = (extra_profit + (profit_per_racket * remaining_rackets)) / profit_per_racket\n    \n    return int(x)\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let x be the amount both Chloe and Gordon had at first\n    # Chloe spent 20 dollars each day and Gordon spent 25 dollars each day\n    # When Chloe had 157 dollars left, Gordon had 82 dollars left\n    \n    # Create an equation based on the problem statement.\n    # The number of days each has been spending (d) is the same for both Chloe and Gordon\n    # Chloe's amount after spending 20 dollars d times: x - 20 * d = 157\n    # Gordon's amount after spending 25 dollars d times: x - 25 * d = 82\n    # Subtract the two equations to find d:\n    # (x - 20 * d) - (x - 25 * d) = 157 - 82\n    # -20d + 25d = 157 - 82\n    # 5d = 75\n    # d = 75 / 5\n    d = 75 / 5\n    \n    # Now that we know the number of days (d), we can find out how much money Gordon had at first (x)\n    # We use Gordon's equation: x - 25 * d = 82\n    # x = 82 + 25 * d\n    x = 82 + 25 * d\n    \n    return x\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    ans = 813 * 72\n    return ans\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n + (n * (n - 1) // 2) + (n * (n - 1) * (n - 2) // 6)\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    ans = bags * pens_per_bag\n    return ans\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    from math import factorial\n\n    # Calculate factorial of 10\n    num = factorial(10)\n    \n    # Convert into string for ease of trailing zero counting\n    num_str = str(num)\n    \n    # Reverse the string to count zeros from the end\n    reversed_num_str = num_str[::-1]\n    \n    # Count consecutive zeros from the end (ones digit)\n    zero_count = 0\n    for digit in reversed_num_str:\n        if digit == '0':\n            zero_count += 1\n        else:\n            break\n    \n    return zero_count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_per_melon = 15 / total_melons\n    bad_melons = total_melons // 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.50\n    income = remaining_melons * selling_price_per_melon\n    expense = total_melons * cost_per_melon\n    profit = income - expense\n    \n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    # The number of neighbors is the common number at which both 150 and 100,\n    # when divided by it, leave a remainder of 17 and 5 respectively.\n    # We subtract the remainders from the total quantity of fruits to\n    # find complete divisibility.\n    \n    oranges_after_leftover = 150 - 17\n    apples_after_leftover = 100 - 5\n    \n    # We are looking for the greatest common divisor (GCD) of these two quantities.\n    from math import gcd\n\n    # The GCD of two numbers also divides their difference.\n    # We will compute the GCD of the differences, since it will be the same for the original quantites.\n    difference = oranges_after_leftover - apples_after_leftover\n\n    # Now we find the GCD of the differences and either of the original quantities adjusted for leftovers.\n    neighbors = gcd(difference, apples_after_leftover)\n\n    return neighbors\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let x be the original average value of jewels in box P\n    # Then x+1000 is the new average value in box P after transferring one jewel\n    \n    # Since the total number of jewels in box P decreases from 3 to 2,\n    # the total value of the jewels in box P after transferring is 2*(x+1000)\n\n    # Before transferring, the total value in box P was 3*x,\n    # therefore the jewel transferred is worth 3*x - 2*(x+1000)\n\n    # This transferred jewel increases the average value in box Q from\n    # (3*x + 5000)/3 to (3*x + 5000 + 1000)/3 which is (x + 2000)\n    \n    # Set up the equation:\n    # 3*x - 2*(x+1000) = (x + 2000)\n    \n    # Solve for x\n    # 3x - 2x - 2000 = x + 2000\n    # x - 2000 = x + 2000\n    # -4000 = 0 (which is a contradiction, hence we made a mistake in the setup)\n\n    # Correcting the setup:\n    # Let's denote the transferred jewel's value by J.\n    # Before the transfer, box P's average value is (3x - J)/3, box Q's average value is (3x + J)/3.\n    # After the transfer, box P's average value is (3x - J - 5000)/2, box Q's average value is (3x + J + 5000)/4.\n    \n    # The condition given is that both averages increase by £1000 after the transfer.\n    # Hence:\n    # (3x - J - 5000)/2 = (3x - J)/3 + 1000\n    # (3x + J + 5000)/4 = (3x + J)/3 + 1000\n\n    # Solving these two equations will give us x and J,\n    # and the total value is 6x which is what we need to find.\n    \n    from sympy import symbols, Eq, solve\n    \n    x, J = symbols('x J')\n    equation1 = Eq((3*x - J - 5000)/2, (3*x - J)/3 + 1000)\n    equation2 = Eq((3*x + J + 5000)/4, (3*x + J)/3 + 1000)\n    \n    solutions = solve((equation1, equation2), (x, J))\n    \n    # Total value of all jewels is 6x\n    total_value = 6 * solutions[x]\n    \n    return total_value\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10\n    cross_interval = 1\n\n    num_crosses = (line_length // cross_interval) + 1\n\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    ans = 6.23 - 5.72\n    return ans\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    # Red, red, green, yellow, yellow, green makes a pattern of 6 balloons\n    pattern_length = 6\n    # There are 2 green balloons in each pattern\n    green_per_pattern = 2\n\n    # Calculate how many complete patterns there are\n    full_patterns = 75 // pattern_length\n    green_balloons = full_patterns * green_per_pattern\n\n    # Remaining balloons after full patterns\n    remaining_balloons = 75 % pattern_length\n\n    # Green balloons appear at the 3rd and 6th position in the pattern\n    # If remaining balloons are more or equal to 3 but less than 6, add one\n    if 3 <= remaining_balloons < 6:\n        green_balloons += 1\n    # If remaining balloons are 6, add two\n    elif remaining_balloons == 6:\n        green_balloons += 2\n\n    return green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of marbles Sandra had originally\n    # Let y be the number of marbles Jessica had originally\n    x, y = symbols('x y')\n\n    # After giving 13 marbles, Sandra has (x - 13) and Jessica has (y + 13)\n    # Sandra then has 6 fewer marbles than Jessica: (x - 13) = (y + 13) - 6\n    equation1 = Eq(x - 13, y + 13 - 6)\n\n    # Solve the equation to find the difference in the number of marbles originally\n    solution = solve(equation1, (x, y))\n\n    # Calculate the difference in the number of marbles originally\n    # Sandra had more marbles than Jessica\n    ans = solution[x] - solution[y]\n\n    return ans\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1st_and_6th = 60\n    number_of_intervals_1st_to_6th = 6 - 1\n    interval_distance = distance_between_1st_and_6th / number_of_intervals_1st_to_6th\n\n    number_of_intervals_1st_to_9th = 9 - 1\n    distance_between_1st_and_9th = interval_distance * number_of_intervals_1st_to_9th\n\n    return distance_between_1st_and_9th\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    teams = 3\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    remaining_strawberries = total_strawberries % 8\n    return remaining_strawberries\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    digit_count_1 = 15\n    digit_count_2 = 14\n    number = 1\n    ones_count = 0\n    twos_count = 0\n\n    while ones_count < digit_count_1 or twos_count < digit_count_2:\n        str_num = str(number)\n        ones_count += str_num.count('1')\n        twos_count += str_num.count('2')\n        number += 1\n\n    return number - 1\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Kate shared the candy with her seven friends, each receiving 26 pieces\n    shared_candy = 7 * 26\n    \n    # Kate left with 22 pieces after sharing\n    kate_left_candy = 22\n    \n    # Total candy she brought to school\n    total_candy_at_school = shared_candy + kate_left_candy\n    \n    # Since she ate 1/3 at home, she brought 2/3 to school\n    # So, 2/3 of the total is the amount she brought to school\n    # We can find the total by dividing the school amount by 2/3\n    total_candy = total_candy_at_school * (3/2)\n\n    return int(total_candy)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_floor_when_bob_at_5th = 9\n    andy_speed_to_bob_speed = andy_floor_when_bob_at_5th / 5\n    total_floors = 25\n    bob_final_floor = total_floors / andy_speed_to_bob_speed\n    return int(bob_final_floor)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (12 * 10 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    words, speed = symbols('words speed')\n\n    original_time = 3  # in minutes\n    increased_speed = speed + 30\n    reduced_time = original_time - 1  # in minutes\n\n    # Original speed equation: words = speed * original_time\n    # Increased speed equation: words = increased_speed * reduced_time\n\n    equation1 = Eq(words, speed * original_time)\n    equation2 = Eq(words, increased_speed * reduced_time)\n\n    solutions = solve((equation1, equation2), (words, speed))\n\n    return solutions[words]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # Start with all lights off\n\n    # Ms. Lily presses every other switch starting from 1\n    for i in range(1, 11, 2):\n        lights[i-1] = not lights[i-1]\n\n    # Sam presses each even numbered switch 7 times\n    for i in range(2, 11, 2):\n        presses = 7\n        while presses > 0:\n            lights[i-1] = not lights[i-1]\n            presses -= 1\n\n    # Count the number of lights that are on\n    num_lights_on = sum(lights)\n\n    return num_lights_on\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of water in A and B\n    A, B = symbols('A B')\n\n    # Define the equation representing the initial state\n    initial_state = Eq(A, 2/3 * B)\n\n    # Define the equation after pouring 4 liters from B to A\n    new_state = Eq(A + 4, 7/8 * (B - 4))\n\n    # Solve the system of equations\n    solution = solve((initial_state, new_state), (A, B))\n\n    # Calculate the total amount of water\n    total_water = solution[A] + solution[B]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    day_climb = 3\n    night_slip = 2\n    net_progress = day_climb - night_slip\n    well_depth = 8\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < well_depth:\n        day += 1\n        total_climbed += day_climb  # Climb up in the daytime\n        if total_climbed >= well_depth:\n            break  # The worm is out of the well\n        total_climbed -= night_slip  # Slips down at night\n\n    return day\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    total_volume = 900\n    initial_sugar_percentage = 0.06\n    final_sugar_percentage = 0.10\n\n    initial_sugar_content = total_volume * initial_sugar_percentage\n    final_sugar_content = total_volume * final_sugar_percentage\n\n    additional_sugar_needed = final_sugar_content - initial_sugar_content\n\n    return additional_sugar_needed\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_made = 20\n    hours_spent = 2\n    total_parts_needed = 100\n\n    parts_per_hour = parts_made / hours_spent\n    remaining_parts_needed = total_parts_needed - parts_made\n    hours_needed = remaining_parts_needed / parts_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_of_one_bar = 50\n    number_of_bars = 4\n    total_cost = cost_of_one_bar * number_of_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # In the worst case, we might draw all balls of two colors before we draw a ball of the third color.\n    max_balls_same_color = 5\n    # We need at least one more ball to ensure we have a ball of the third color.\n    balls_needed_for_third_color = 1\n    # Calculate the number of balls drawn to have 3 different colored balls.\n    min_balls_drawn = (max_balls_same_color * 2) + balls_needed_for_third_color\n    return min_balls_drawn\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # There are 5 different colors\n    # Each person can take out any combination of two colors\n    # Calculate the number of possible combinations\n    color_combinations = comb(5, 2) + 5  # Combinations of 2 different colors + 5 same color pairs\n    \n    # To guarantee that at least two people have the same combination,\n    # there should be one more person than the number of color combinations\n    people_count = color_combinations + 1\n    \n    return people_count\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # To ensure a product divisible by 4, we need at least one even number\n    # Numbers divisible by 4 will fulfill this condition by themselves\n    # As there are only 31 numbers that are not divisible by 4 (10-41, exclude 12, 16, ..., 40)\n    # We need to draw 32 numbers to ensure at least two numbers whose product is divisible by 4\n\n    return 32\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    # Let x be the number of cards Hisham has, then Melissa has 2x.\n    # Together, they have x + 2x = 876 cards.\n    # Solving for x gives us the number of cards Hisham has.\n    x = total_cards / 3\n    \n    # Melissa has twice as many cards as Hisham, so she has 2 * x cards.\n    melissa_cards = 2 * x\n    \n    # To have the same number of cards, we find the difference between Melissa's\n    # and Hisham's cards and divide it by 2, because she needs to give Hisham half\n    # of that difference to equalize their amounts.\n    difference = melissa_cards - x\n    cards_to_give = difference / 2\n    \n    return int(cards_to_give)\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    common_difference = (third_term - first_term) / (3 - 1)\n    \n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert the length from 2 m 20 cm to cm\n    each_piece_length = total_length_cm / 2  # Cut the rope into two equal pieces\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    expr1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    expr2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n\n    ans = expr1 - expr2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = 0\n    for i in range(46, 51):\n        ans += i * (100 - i)\n\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from math import sqrt\n    from sympy import isprime\n\n    # Find the smallest two-digit prime number\n    smallest_prime = next(i for i in range(10, 100) if isprime(i))\n\n    # Find the largest two-digit square number\n    largest_square_root = int(sqrt(99))\n    largest_square = largest_square_root ** 2\n\n    # Multiply them together\n    ans = smallest_prime * largest_square\n\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(40 / (x + 5), 5)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    coffee_cost_euros = 4.8\n    \n    coffee_cost_usd = coffee_cost_euros * euro_to_usd\n\n    return coffee_cost_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = None\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        N = a + (b/c) + ((d/e)*f) - (g + (h/j))\n        if N % 1 == 0:  # Check if N is a whole number\n            if max_N is None or N > max_N:\n                max_N = N\n    return int(max_N)\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian is 14, father is 41, so the difference in their ages is 41 - 14 = 27 years\n    age_difference = 27\n\n    # The next time Brian's age is the reverse of his father's age,\n    # it will be when both ages are two-digit numbers.\n    # We need to find a number where if you add the age difference, the digits are reversed\n    \n    # Let's denote Brian's age as 'ab' (not multiplication, but 'a' and 'b' being digits)\n    # Brian's father's age will then be 'ba'\n    # Our goal is to find 'a' and 'b' such that (10a + b) + 27 = 10b + a\n    \n    for b in range(1, 10):  # Brian's age's tens digit must be from 1 to 9 (as he is older than 14)\n        for a in range(10):  # Brian's age's unit digit can be from 0 to 9\n            brians_age = 10 * b + a\n            fathers_age = 10 * a + b\n            if fathers_age - brians_age == age_difference:\n                return brians_age\n\n# call the function to retrieve the answer\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_initially = 3900\n    total_ratio = 4 + 3 + 6\n    chinese_books_initially = (4 / total_ratio) * total_books_initially\n    malay_books_initially = (3 / total_ratio) * total_books_initially\n    english_books_initially = (6 / total_ratio) * total_books_initially\n\n    # Calculate the new number of Chinese and Malay books after their respective increases\n    chinese_books_new = chinese_books_initially * 1.20\n    malay_books_new = malay_books_initially * 1.10\n\n    # Since total number of books is increased by 510, we find the new total\n    total_books_new = total_books_initially + 510\n\n    # New number of English books is the new total minus the sum of the new Chinese and Malay books\n    english_books_new = total_books_new - (chinese_books_new + malay_books_new)\n\n    # Calculate the percentage increase for English books\n    increase_english_books = english_books_new - english_books_initially\n    percent_increase_english_books = (increase_english_books / english_books_initially) * 100\n\n    return percent_increase_english_books\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    # Total juniors is 12 and their average score is 10\n    total_junior_score = 12 * 10\n    \n    # Total participants is 20 and their average score is 14\n    total_score = 20 * 14\n    \n    # Calculate the total senior score\n    total_senior_score = total_score - total_junior_score\n    \n    # Total seniors is 8, find the average score of the seniors\n    average_senior_score = total_senior_score / 8\n    \n    return average_senior_score\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    # When a number is rounded to the nearest hundred, it means that the number is halfway between two hundreds.\n    # The number has to be at least halfway from the lower hundred (9650) for it to round up to 9700.\n    # The smallest number that rounds to 9700 when rounded to the nearest hundred\n    # is 9650 + 50 = 9700 - 50.\n    \n    return 9700 - 50\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    combined_age_4_years_ago = 10\n    # Each dog ages 1 year for every year that passes, so together they age 2 years for every year that passes.\n    # 4 years have already passed and 2 more years will pass, making it 6 years in total from the time when their combined age was 10.\n    total_years_passed = 4 + 2\n    age_increase = 2 * total_years_passed\n\n    combined_future_age = combined_age_4_years_ago + age_increase\n\n    return combined_future_age\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    score_unattempted = 0\n    rex_score = 66\n    questions_attempted = total_questions - 1  # Rex answered all but one question\n    \n    # Let Rex have x correct answers, so he must have (24 - x) incorrect answers\n    # Equation: 4x - 2(24 - x) = 66\n    \n    for correct_answers in range(questions_attempted + 1):\n        incorrect_answers = questions_attempted - correct_answers\n        score = (correct_answers * score_correct) + (incorrect_answers * score_incorrect)\n        if score == rex_score:\n            return correct_answers\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # According to the Pigeonhole Principle, if n+1 items are put into n containers,\n    # then at least one container must contain more than one item.\n    # In this case, with 10 containers, to guarantee that one container has at least\n    # 2 apples, we need at least 1 apple in each of the other 9 containers,\n    # plus the 2 apples in the one container.\n\n    containers = 10\n    apples_per_container = 1\n    extra_apples_for_one_container = 1\n\n    # Total apples needed is 9 containers with 1 apple each, plus one container with 2 apples\n    total_apples = (containers - 1) * apples_per_container + (apples_per_container + extra_apples_for_one_container)\n    return total_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * (10 ** (-2022))\n    denominator = 92 * (10 ** (-2023))\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50  # in grams\n    desired_cookies = 300\n\n    butter_needed = (butter_used * desired_cookies) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = 90\n    correct_percentage = 0.60\n    correct_marks = 5\n    wrong_marks = -2\n    unanswered_marks = 1\n    total_score = 264\n\n    correct_questions = symbols('correct_questions')\n\n    # Mochi answered 60% of all questions correctly\n    answered_questions = total_questions * correct_percentage\n\n    # The remaining questions Mochi answered incorrectly\n    wrong_questions = symbols('wrong_questions')\n\n    # The questions that Mochi didn't answer\n    unanswered_questions = total_questions - answered_questions\n\n    # Equation based on the scoring system\n    equation = Eq(correct_marks * correct_questions + wrong_marks * wrong_questions + unanswered_marks * unanswered_questions, total_score)\n\n    # Additional condition (Mochi answered 60% of the total questions)\n    condition_equation = Eq(correct_questions, answered_questions)\n\n    # solved for the number of wrong questions\n    wrong_questions_solution = solve(equation.subs(correct_questions, answered_questions), wrong_questions)\n\n    # Substitute the number of wrong questions to solve for correct answers\n    solutions = solve(condition_equation.subs(wrong_questions, wrong_questions_solution[0]), correct_questions)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    Dedra, Timm = symbols('Dedra Timm')\n    \n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(Dedra, 4 * Timm)\n    # Both received $72 each.\n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(Dedra + 72, 2 * (Timm + 72))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Dedra, Timm))\n    \n    return solutions[Dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    length = 0\n    num = 1\n    while length < 1000:\n        length += len(str(num))\n        if length >= 1000:\n            break\n        num += 1\n    return int(str(num)[-(length - 1000) - 1])\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) // 3\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    \n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    # Using Inclusion-Exclusion Principle\n    total = A + C + E - AC - AE - CE + ACE\n    return total\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    return 6.91 - 0.13\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    n = 18  # Total number of pupils\n    r = 3   # Number of pupils to seat in a row\n\n    # Since order matters (a row) we use permutations.\n    # P(n, r) = n! / (n - r)!\n    ans = factorial(n) // factorial(n - r)\n\n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    salary_per_month = 1.4\n    total_debt = 5.04\n    months_needed = total_debt / salary_per_month\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the ages of Jack, Jason, Bruce and Willie as J, A, B, and W respectively\n    J, A, B, W = symbols('J A B W')\n    # We know that Jack is 4 years old.\n    equation1 = Eq(J, 4)\n    # We know that Jason is older than Jack, but we don't have a specific equation for it.\n    # We know that Bruce and Willie are of the same age as Jason, so their ages equal A.\n    equation2 = Eq(B, A)\n    equation3 = Eq(W, A)\n    # We know that the total age of the 4 children is 19 years.\n    equation4 = Eq(J + A + B + W, 19)\n    \n    # Since we know Jack's age, we substitute it directly into the total age equation.\n    equation4 = equation4.subs(J, 4)\n    \n    # Now we solve the equations for the ages of Jason, Bruce, and Willie\n    solutions = solve((equation2, equation3, equation4), (A, B, W))\n    \n    # Return the age of Jason\n    return solutions[A]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    for erasers in range(1, 1000):  # Assuming a reasonable upper bound for erasers\n        friends = (erasers - 3) // 5\n        if friends * 6 == erasers - 2:\n            return erasers\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jake, john = symbols('jake john')\n    equation1 = Eq(jake + john, 44)\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    solutions = solve((equation1, equation2), (jake, john))\n\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n\n    return rachel_money\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the youngest child's age be 'y'\n    y = symbols('y')\n    # The difference in age between each child is 15 months\n    # The oldest child is now six times as old as the youngest\n    equation = Eq(y + 8 * 15, 6 * y)\n\n    # Solve for y\n    youngest_age = solve(equation, y)\n\n    # Return the youngest child's age as integer\n    return int(youngest_age[0])\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # List of all possible bracket insertions for two pairs of brackets\n    expressions = [\n        '((15+5)*5+(15-6)+7)',\n        '(15+(5*5)+(15-6)+7)',\n        '(15+5)*(5+(15-6)+7)',\n        '15+(5*(5+(15-6)+7))',\n        '15+(5*5)+(15-(6+7))',\n        '15+((5*5+15)-6+7)',\n        '15+(5*(5+15)-6+7)',\n        '15+(5*5+(15-6)+7)',\n        '(15+5)*5+((15-6)+7)',\n        '(15+5)*5+(15-(6+7))'\n    ]\n    # Evaluate each expression and find the minimum result\n    min_result = eval(expressions[0])\n    for expr in expressions[1:]:\n        result = eval(expr)\n        if result < min_result:\n            min_result = result\n\n    return min_result\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total = 0\n    for n in range(1, 2008):\n        total += (n**2 + (n + 1)**2) / (n * (n + 1))\n    ans = round(total)\n    return ans\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # There is a unique solution since the problem defines a unique increment (5877)\n    # and a positional change that affects the thousands and ones places.\n    for i in range(1000, 10000):\n        # Form the new number by replacing the ones digit with the thousands digit of i\n        new_num = (i // 1000) + ((i % 1000) * 10)\n        # Check if the new number is greater than the original by 5877.\n        if new_num - i == 5877:\n            return i  # Return the original number \n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cayden, jiaxiang = symbols('cayden jiaxiang')\n    \n    # Cayden has 5 more sweets than Jiaxiang originally\n    original_condition = Eq(cayden, jiaxiang + 5)\n    \n    # Cayden gives Jiaxiang 10 sweets\n    cayden_new = cayden - 10\n    jiaxiang_new = jiaxiang + 10\n    \n    # Calculate the new difference in number of sweets they have\n    new_difference = abs(cayden_new - jiaxiang_new)\n    \n    # Solve for the new difference\n    solutions = solve((original_condition), (cayden, jiaxiang))\n    \n    # Substitute the solutions into the new difference\n    ans = new_difference.subs(solutions).evalf()\n    \n    return ans\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = (2.5 * 7.7) + (0.25 * 23)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n\n    ans = (last_multiple - first_multiple) // 11 + 1\n    return ans\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 * 0.01) * 74 - 0.3 / (2/15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Number of students present before Mary, total scores before Mary\n    students_before = 5\n    total_before = students_before * 72\n    \n    # New average with Mary, thus aiming to find the new total scores with Mary\n    new_average = 75\n    total_with_mary = (students_before + 1) * new_average\n    \n    # Mary's score is the difference between total scores with and without her\n    mary_score = total_with_mary - total_before\n    \n    return mary_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n\n    # The time it takes for the train to cross the bridge completely is the time it takes to move its own length plus the bridge's length.\n    total_length = train_length + bridge_length\n\n    # Time = Distance / Speed\n    time = total_length / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return afternoon_cookies\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    greatest_number = 0\n    \n    # Iterate through all 3-digit odd numbers divisible by 9\n    for num in range(999, 99, -18):  # Step by -18 because we need divisible by 9 and odd number\n        tens_digit = (num // 10) % 10  # Extract tens digit\n        if tens_digit % 4 == 0:\n            greatest_number = num\n            break\n            \n    return greatest_number\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    from math import comb\n    \n    # Number of doughnuts to distribute after each student gets one doughnut\n    doughnuts_left = 11 - 4\n    \n    # Number of students (excluding the first as we will consider doughnuts as distinguishable)\n    students = 4 - 1\n    \n    # This is a problem of distributing identical objects into distinct boxes\n    # which is equivalent to the problem of putting n identical items into k distinct bins (stars and bars method)\n    ans = comb(doughnuts_left + students, students)\n\n    return ans\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    \n    minutes_taken = distance / speed\n\n    return int(minutes_taken)\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # To guarantee 4 different colored marbles, Jane must go \n    # through the worst-case scenario where she picks all of \n    # one color, then all of another, and so on.\n    \n    # So, she would pick:\n    # All 4 reds + all 7 greens + all 6 blues\n    # That guarantees that the next marble she picks \n    # has to be orange (the 4th color).\n    num_marbles = 4 + 7 + 6 + 1  # +1 for the next one to guarantee the 4th color\n\n    return num_marbles\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Available coins in pence (all multiples of 5)\n    coins = [5, 10, 20, 50, 100, 200]\n\n    # Five pound note value in pence\n    five_pound_in_pence = 500\n    \n    # Find all combinations of 5 different coins\n    from itertools import combinations\n    for combo in combinations(coins, 5):\n        if sum(combo) == five_pound_in_pence:\n            return five_pound_in_pence - sum(combo)\n    \n    return None\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    temp_drop = 11\n    midnight_temp = midday_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    hives_for_50kg = 5\n    honey_per_hive = 50 / hives_for_50kg\n    hives_needed_for_90kg = 90 / honey_per_hive\n    additional_hives_needed = hives_needed_for_90kg - hives_for_50kg\n    return additional_hives_needed\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    student_position = 23\n\n    problems_solved = first_term + (student_position - 1) * difference\n\n    return problems_solved\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    import math\n\n    east_west_distance = 15 - 9  # Since she went east by 15 km and then west by 9 km\n    north_distance = 3 + 5  # She went north by 3 km first and then 5 km\n\n    # The shortest distance from A to B is the hypotenuse of the right-angled triangle formed by east-west and north distances\n    shortest_distance = math.sqrt(east_west_distance ** 2 + north_distance ** 2)\n\n    return shortest_distance\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define symbols for the number of country erasers Ali and Kumar initially have\n    ali_initial, kumar_initial = symbols('ali_initial kumar_initial')\n    \n    # Equation based on the initial ratio 7:5\n    equation1 = Eq(ali_initial / kumar_initial, 7/5)\n    \n    # Equation based on the final ratio 1:5 after Ali gives Kumar 10 erasers\n    equation2 = Eq((ali_initial - 10) / (kumar_initial + 10), 1/5)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (ali_initial, kumar_initial))\n    \n    # the total number of country erasers they have altogether\n    total_erasers = solutions[ali_initial] + solutions[kumar_initial]\n    \n    return total_erasers\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase: 1 banana + 3 pears = 84p\n    equation1 = Eq(banana + 3 * pear, 84)\n    # Emily's purchase: 1 banana + 1 pear = 48p\n    equation2 = Eq(banana + pear, 48)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = 8 * 60 + 20  # Convert total duration to minutes\n    activity_duration = 45\n    break_duration = 20\n\n    # Let n be the number of activities. Each activity is followed by a break, except the last one.\n    # So the total time is given by: n * activity_duration + (n - 1) * break_duration = total_minutes\n    # Solve for n:\n    \n    # Rearrange the equation: n * (activity_duration + break_duration) - break_duration = total_minutes\n    # Then: n = (total_minutes + break_duration) / (activity_duration + break_duration)\n    \n    # Calculate the number of activities\n    activities = (total_minutes + break_duration) / (activity_duration + break_duration)\n    \n    return int(activities)  # We return the integer part of the activities because we cannot have a fraction of an activity\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Define the system of equations\n    # Let a = Adam's weight, b = Ben's weight, c = Carl's weight\n    # From the problem, we have the following equations:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 92\n\n    # Sum all the equations to get 2 * (a + b + c)\n    # 2a + 2b + 2c = 102 + 97 + 92\n    # The total weight is then (a + b + c), which is half of the above sum\n    total_weight = (102 + 97 + 92) // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 3, 5, 8]\n    count = 0\n    for perm in permutations(digits, 4):\n        if perm[0] != 0 and int(''.join(map(str, perm))) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    total_notes = 38\n    spent_percentage_10 = 0.8\n    spent_percentage_2 = 0.75\n\n    # Let x be the number of $10 notes and (total_notes - x) be the number of $2 notes.\n    for x in range(total_notes + 1):\n        # Calculate the number of notes left after spending.\n        notes_left_10 = x * (1 - spent_percentage_10)\n        notes_left_2 = (total_notes - x) * (1 - spent_percentage_2)\n\n        # Check if the remaining $10 notes is thrice the number of remaining $2 notes.\n        if notes_left_10 == 3 * notes_left_2:\n            # Calculate the cost of the fan.\n            cost = (x * spent_percentage_10 * 10) + ((total_notes - x) * spent_percentage_2 * 2)\n            return cost\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(a, b/2)\n    equation2 = Eq(b - a, 5)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    # Apply the divisibility rule for 11: Subtract the sum of the digits at odd\n    # positions from the sum of the digits at even positions. The number is divisible by 11\n    # if the result is 0 or divisible by 11.\n    digits = [int(d) for d in str(number)]\n    odd_sum = sum(digits[::2])\n    even_sum = sum(digits[1::2])\n    difference = abs(odd_sum - even_sum)\n    \n    is_divisible = difference % 11 == 0\n    remainder = difference % 11\n    \n    if is_divisible:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    start_length_m = 2.06  # start length in meters\n    end_length_m = 78 / 100  # end length converted from cm to meters\n\n    melted_length_m = start_length_m - end_length_m  # length melted in meters\n    melted_length_cm = melted_length_m * 100  # converting melted length back to cm\n\n    return melted_length_cm\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    return 650 * 0.40\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Define a function to calculate ways recursively\n    # Memoization to optimize recursive calls\n    memo = {0: 1, 1: 1, 4: 1}  # Base cases\n    \n    def calculate_ways(steps):\n        if steps in memo:\n            return memo[steps]\n        ways = 0\n        if steps >= 1: \n            ways += calculate_ways(steps - 1)\n        if steps >= 4:\n            ways += calculate_ways(steps - 4)\n        memo[steps] = ways\n        return ways\n    \n    ans = calculate_ways(9)\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    ans = 3549 // 7\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    first_stop_off = initial_passengers * 2 // 5\n    first_stop_on = 7\n    remaining_after_first_stop = initial_passengers - first_stop_off + first_stop_on\n    \n    second_stop_off = remaining_after_first_stop // 4\n    second_stop_on = 13\n    passengers_after_second_stop = remaining_after_first_stop - second_stop_off + second_stop_on\n    \n    return passengers_after_second_stop\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Use the formula 1³ + 2³ + 3³ + ...... + n³ = (1 + 2 + 3 + ...... + n)²\n    # Create a list of terms by iterating from 0.5 to 10 in steps of 0.5\n    terms = [x * 0.5 for x in range(1, int(10 / 0.5) + 1)]\n    \n    # Sum the terms\n    sum_terms = sum(terms)\n    \n    # Square the sum to get the result according to the formula\n    ans = sum_terms ** 2\n    \n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    approximation_error = 5 / 2  # Nearest £5 means an error range of £2.50 either side\n\n    min_actual_price = estimated_price - approximation_error\n\n    return min_actual_price\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let 'x' be the number of years it will take for their ages to sum to 40\n    # Current sum of ages is 22\n    current_sum = 22\n    # Future sum of ages desired is 40\n    future_sum = 40\n    \n    # In 'x' years, Geoff's age will increase by 'x' and his sister's age will increase by 'x'\n    # So the future sum of their ages will be (current_sum + x + x), which we want to be equal to future_sum\n    # Therefore, we have the equation current_sum + 2x = future_sum\n    \n    # Solve for 'x'\n    x = (future_sum - current_sum) / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for school1 in range(98, 103):\n        for school2 in range(98, 103):\n            school3 = 300 - school1 - school2\n            if 98 <= school3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between_rabbit_and_elephant = 5\n\n    rabbit_position_from_left = elephant_position_from_left - toys_between_rabbit_and_elephant - 1\n    rabbit_position_from_right = total_toys - rabbit_position_from_left\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time it takes for Tim to complete the book by himself\n    t = symbols('t')\n\n    # Nancy's work rate per day is 1/6 of the book (since she can complete in 6 days alone)\n    # Tim's work rate per day is 1/t of the book\n    # Together, their combined work rate is 1/4 of the book per day (since they complete in 4 days together)\n    equation = Eq(1/6 + 1/t, 1/4)\n\n    # Solve for t\n    solution = solve(equation, t)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1) and (pencils % 3 == 2) and (pencils % 4 == 3) and (pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 3 + 1  # Ewan and his 3 sisters\n    biscuits_per_person = total_biscuits // people_count\n    return biscuits_per_person\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_sum = mean_value * (len(numbers) + 1)\n    a = total_sum - sum(numbers)\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for calculations\n    light1_cycle = 1 * 60  # Every minute\n    light2_cycle = 1.5 * 60  # Every 1.5 minutes\n    lights_sync = 9 * 60  # Every 9 minutes\n\n    # Calculate the least common multiple of the first two lights\n    lcm_first_two = lcm(light1_cycle, light2_cycle)\n\n    # Find the third light cycle by iterating over possible cycles times starting from 30 seconds\n    for light3_cycle in range(30, lights_sync + 1):\n        if lcm(lcm_first_two, light3_cycle) == lights_sync:\n            return light3_cycle\n\n    return None\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    pink_ribbon = 2.5 * 100  # convert meters to centimeters\n    blue_ribbon = 220        # already in centimeters\n    orange_ribbon = 30.5     # already in centimeters\n\n    longest_ribbon_length = max(pink_ribbon, blue_ribbon, orange_ribbon)\n    \n    if longest_ribbon_length == pink_ribbon:\n        return \"pink\"\n    elif longest_ribbon_length == blue_ribbon:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert total mass from kg to g\n    total_mass_g = 172000\n    \n    # Mass of packets for ingredients P, Q, R\n    mass_P = 300\n    mass_Q = 400\n    mass_R = 500\n    \n    # Ratio of the number of packets P, Q and R\n    ratio_P = 7\n    ratio_Q = 3\n    ratio_R = 2\n    \n    # Since the total mass is the sum of masses of all ingredients,\n    # we have: total_mass = (mass_P * number_P) + (mass_Q * number_Q) + (mass_R * number_R)\n    # But number_P/number_Q/number_R is also given as a ratio 7:3:2\n    # Let's find out the common multiplier for the ratio that gives us the number of packets\n    \n    # mass_P * ratio_P * x + mass_Q * ratio_Q * x + mass_R * ratio_R * x = total_mass_g\n    # Solve for x, which is our common multiplier\n    # x = total_mass_g / (mass_P * ratio_P + mass_Q * ratio_Q + mass_R * ratio_R)\n    \n    x = total_mass_g / (mass_P * ratio_P + mass_Q * ratio_Q + mass_R * ratio_R)\n    \n    # The total number of packets is the sum of the packets for P, Q, and R\n    # Which is ratio_P * x + ratio_Q * x + ratio_R * x\n    total_packets = (ratio_P + ratio_Q + ratio_R) * x\n    \n    return int(total_packets)\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    prep_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = prep_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount = 0.50  # 50% discount\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_red_car_capacity = 3 * 10\n    total_blue_car_capacity = 12 * 15\n    total_green_car_capacity = 15 * 20\n    total_cars = 3 + 12 + 15\n    total_capacity = total_red_car_capacity + total_blue_car_capacity + total_green_car_capacity\n\n    average_capacity = total_capacity / total_cars\n\n    return average_capacity\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    result = 0\n    for i in range(1, 4):\n        result += int(str(4) * i)\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    cad_to_usd = 1 / 1.25  # conversion rate from Canadian dollars to U.S. dollars\n    book_price_cad = 64\n    book_price_usd = book_price_cad * cad_to_usd\n    return book_price_usd\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Given values\n    rachel_speed = 84  # km/h\n    rachel_travel_time = 1.5  # hours\n    eleanor_travel_time = 4  # hours\n\n    # Distance Rachel travels in 1.5 hours\n    rachel_distance = rachel_speed * rachel_travel_time\n\n    # The distance that remains for Rachel to travel to reach City F is 39 km\n    # Therefore, Rachel's total distance to City F is her travel distance plus 39 km\n    total_distance_rachel = rachel_distance + 39\n\n    # Eleanor takes 4 hours to travel from City F to City G, in 1.5 hours she would have 2.5 hours left\n    eleanor_remaining_time = eleanor_travel_time - rachel_travel_time\n\n    # Eleanor travels the same distance as Rachel to meet her in 1.5 hours, and then travels the remaining distance to City G\n    # Their combined distances in 1.5 hours are equal\n    # Also, Eleanor's remaining distance to City G can be found by her speed multiplied by remaining time\n    # Hence, the total distance between the cities is the sum of Rachel's distance and Eleanor's remaining distance\n    eleanor_remaining_distance = total_distance_rachel - rachel_distance\n\n    # Eleanor's speed\n    eleanor_speed = eleanor_remaining_distance / eleanor_remaining_time\n\n    # Total distance between the cities is Eleanor's speed multiplied by her travel time\n    total_distance = eleanor_speed * eleanor_travel_time\n\n    return total_distance\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # If the book is on the 8th shelf from the front and 10th from the back,\n    # there must be 7 shelves before it and 9 shelves after it.\n    total_shelves = 7 + 1 + 9  # 7 shelves before, 1 is the shelf with the book, 9 shelves after\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    # Assuming everyone scores a different whole number and they want an average of 90\n    # for 5 students, the total score has to be 90 * 5\n    total_score = 90 * 5\n    \n    # Since everyone has to have a different score, let's find the minimum sum of 4 different\n    # whole numbers (for the highest 4 scores), so we can subtract from the total to find the lowest score\n    high_scores_sum = 0\n    for i in range(1, 5):\n        high_scores_sum += (100 - i)  # Starting from the highest possible scores: 100, 99, 98, 97\n\n    # Now, calculate the lowest score\n    lowest_score = total_score - high_scores_sum\n\n    return lowest_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the lengths of ropes A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Set up the equations\n    eq1 = Eq(A, 3 * B)\n    eq2 = Eq(C, B + 56)\n    eq3 = Eq(A, C + 130) # 1 m 30 cm is 130 cm\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n\n    # Calculate the total length of the ropes (in cm)\n    total_length = solutions[A] + solutions[B] + solutions[C]\n\n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    result = (2 * largest_number) - (3 * smallest_number)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    # Define a list with the given letters\n    letters = ['A', 'B', 'C', 'D', 'E']\n\n    # Calculate all possible combinations of 3 letters from the set of 5 letters\n    all_combinations = list(combinations(letters, 3))\n\n    # Filter combinations that contain both \"A\" and \"B\"\n    ab_combinations = [comb for comb in all_combinations if \"A\" in comb and \"B\" in comb]\n\n    # Calculate probability\n    prob = len(ab_combinations) / len(all_combinations)\n\n    return prob\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    students_males = male_members * 0.16\n    students_females = female_members * 0.10\n    total_students = students_males + students_females\n    total_members = male_members + female_members\n\n    percentage_students = (total_students / total_members) * 100\n\n    return percentage_students\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    volume_one = 200\n    concentration_one = 35 / 100\n\n    volume_two = 300\n    concentration_two = 50 / 100\n\n    total_volume = volume_one + volume_two\n    total_fruit_juice = (volume_one * concentration_one) + (volume_two * concentration_two)\n\n    new_concentration = (total_fruit_juice / total_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * 48 / 4\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_initial = 37\n    john_initial = 15\n\n    # Let x be the number of apples Amy gives to John\n    # Amy will have amy_initial - x apples left\n    # John will have john_initial + x apples\n    # We want amy_initial - x to be 4 more than john_initial + x\n\n    # Set up the equation\n    # amy_initial - x = john_initial + x + 4\n    # Solve for x\n    x = (amy_initial - john_initial - 4) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "def solution():\n    # Total pies of each type\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) Fraction of the chicken pies more than vegetable pies\n    chicken_more_than_vegetable = chicken_pies - vegetable_pies\n    fraction_chicken_more_than_vegetable = chicken_more_than_vegetable / chicken_pies\n    \n    # (2) Fraction of the vegetable pies less than fruit pies\n    vegetable_less_than_fruit = fruit_pies - vegetable_pies\n    fraction_vegetable_less_than_fruit = vegetable_less_than_fruit / fruit_pies\n\n    # Return the results as a tuple (answer for (1), answer for (2))\n    return (fraction_chicken_more_than_vegetable, fraction_vegetable_less_than_fruit)\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n    bags = markers_left // 5\n    return bags\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of papers the teacher originally planned to mark per hour\n    x = symbols('x')\n\n    # After working for one hour, she has 4 hours left and needs to mark 6 more papers per hour than originally planned.\n    # This is the same amount of work as the original plan of 5 hours:\n    # 4 * (x + 6) papers = 5 * x papers\n\n    # If she can mark 10 more papers per hour, she will finish the work in 4 hours since she already worked for 1 hour\n    # 4 * (x + 10) papers is the total amount of papers\n\n    equation1 = Eq(4 * (x + 6), 5 * x)\n    equation2 = Eq(4 * x + 1 * (x + 10), 5 * x)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x))\n\n    # Now we have the value of x, we can find the total number of papers she needs to mark,\n    # which is given by the equation: 5 * x (originally planned to finish in 5 hours)\n    total_papers = 5 * solutions[x]\n\n    return total_papers\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one jug and one cup\n    jug, cup = symbols('jug cup')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(4 * jug + 5 * cup, 85)     # 4 jugs and 5 cups cost £85\n    equation2 = Eq(2 * jug + 2 * cup, 40)     # 2 jugs and 2 cups cost £40\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jug, cup))\n    \n    # Return the cost of one cup\n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' is the tens digit and can't be zero\n        for b in range(10):  # 'b' is the units digit and can range from 0 to 9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8  # The greatest 1-digit even number\n    smallest_2_digit_odd = 11  # The smallest 2-digit odd number\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = 0\n    for i in range(1, 208):\n        total_sum += sum_of_digits(i)\n\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    designs_made = 24\n    fraction_completed = 3/4\n    total_designs = designs_made / fraction_completed\n    return total_designs\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the unknowns\n    total_money = symbols('total_money')\n    wristband_cost = symbols('wristband_cost')\n    \n    # Caleb spends 2/5 of his money on 4 caps and 6 wristbands\n    # cost of cap is 3 times the wristband\n    # Equation for the total spent on caps and wristbands\n    eq1 = Eq((2/5) * total_money, 4 * (3 * wristband_cost) + 6 * wristband_cost)\n    \n    # He then spends 1/3 of remaining money (which is now 3/5 of the total) on caps\n    # Equation for money spent on additional caps\n    eq2 = Eq((1/3) * (3/5) * total_money, (3 * wristband_cost))  # he buys only one cap with 1/3 of remaining money\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (total_money, wristband_cost))\n    \n    # Calculate number of caps bought altogether\n    # He had initially bought 4 caps and now he buys 1/3 of the remaining money worth of caps\n    # We'll solve for the cost of a cap, which is 3 * wristband cost\n    cap_cost = 3 * solutions[wristband_cost]\n    \n    # Calculate the number of additional caps bought\n    additional_caps = ((1/3) * (3/5) * solutions[total_money]) / cap_cost\n    \n    # Total caps = initial caps + additional caps\n    total_caps = 4 + additional_caps\n    \n    return total_caps\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    v1, v2, h1, h2, g = symbols('v1 v2 h1 h2 g')\n    h1 = 3000  # initial height in meters\n    h2 = 2000  # final height in meters\n    g = 9.80665  # acceleration due to gravity in m/s^2\n\n    # Using the law of conservation of energy:\n    # Initial potential energy = Final potential energy + Final kinetic energy\n    # m * g * h1 = m * g * h2 + 0.5 * m * v2**2\n    # We can cancel out the mass m from both sides of the equation:\n    # g * h1 = g * h2 + 0.5 * v2**2\n    # Then we solve for v2:\n    equation = Eq(g * h1, g * h2 + 0.5 * v2**2)\n    solutions = solve(equation, v2)\n\n    # Because we are looking for the speed (not velocity), we take the positive solution\n    return max(solutions)\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    max_consecutive = 4\n    cards_per_suit = 13\n\n    # Calculate the worst case based on the pigeonhole principle\n    # At worst, each drawn card is the start of a new sequence of consecutive cards.\n    # To ensure at least one complete sequence of 4 consecutive cards, draw 3 more than the product of max consecutive and cards_per_suit.\n    # Add one because we need at least one set of 4 consecutive cards.\n    cards_needed = (max_consecutive - 1) * cards_per_suit + 1\n\n    return cards_needed\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    brother_age_three_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    page_count = 89\n    actual_page = 0\n    for i in range(page_count):\n        actual_page += 1\n        if actual_page % 3 == 0:\n            actual_page += 1\n    return actual_page\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        total = adults * 5 + children * 3\n        if total == 75:\n            return adults\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef is_divisible(num, div):\n    return int(num) % div == 0\n\ndef solution():\n    digits = '0245689'  # A is already 3, C is 1, and G is 7 (0 is excluded because it can't be at the start)\n    for perm in permutations(digits):\n        B, D, E, F, H, I, J = perm\n        A, C, G = '3', '1', '7'\n        if is_divisible(A, 1) and \\\n           is_divisible(A+B, 2) and \\\n           is_divisible(A+B+C, 3) and \\\n           is_divisible(A+B+C+D, 4) and \\\n           is_divisible(A+B+C+D+E, 5) and \\\n           is_divisible(A+B+C+D+E+F, 6) and \\\n           is_divisible(A+B+C+D+E+F+G, 7) and \\\n           is_divisible(A+B+C+D+E+F+G+H, 8) and \\\n           is_divisible(A+B+C+D+E+F+G+H+I, 9) and \\\n           is_divisible(A+B+C+D+E+F+G+H+I+J, 10):\n            ABCDEFGHIJ = [A, B, C, D, E, F, G, H, I, J]\n            ans = {letter: int(digit) for letter, digit in zip('ABCDEFGHIJ', ABCDEFGHIJ)}\n            return ans\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    ans = 459 + 3762\n    return ans\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    # Count the multiples of 3\n    multiples_of_3 = 600 // 3\n    \n    # Count the multiples of 5\n    multiples_of_5 = 600 // 5\n    \n    # Count the multiples of both 3 and 5 (i.e., multiples of 15)\n    multiples_of_15 = 600 // 15\n    \n    # Apply the inclusion-exclusion principle\n    ans = multiples_of_3 + multiples_of_5 - multiples_of_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_then = 20\n    grandma_age_then = 60\n    \n    # Calculate the difference in years between \"now\" and the future time point\n    years_difference = tom_age_then - tom_age_now\n    # Grandma will be 60 years old when Tom is 20, which means that \n    # the current age of Grandma is \"60 - years_difference\".\n    grandma_age_now = grandma_age_then - years_difference\n    \n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_B = symbols('candies students_B')\n    students_A = 2 * students_B\n\n    equation1 = Eq(students_A * 4 + 20, candies)\n    equation2 = Eq(students_B * 6 - 16, candies)\n\n    solutions = solve((equation1, equation2), (candies, students_B))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    # Initialize the count of ways to zero\n    count = 0\n    \n    # Consider all possible combinations of ten-pence, twenty-pence, and fifty-pence\n    for ten_pence in range(0, 6):  # Jeremy has 5 ten-pence coins\n        for twenty_pence in range(0, 4):  # Jeremy has 3 twenty-pence coins\n            for fifty_pence in range(0, 2):  # Jeremy has 1 fifty-pence coin\n                # Calculate the total value\n                total = ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50\n                \n                # Check if the total value is equal to 70 pence\n                if total == 70:\n                    count += 1  # If so, increment the count of ways\n    \n    return count\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    return 4\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    blue_balls = 5\n    orange_balls = 4\n    yellow_balls = 2\n\n    # One for each color not picked\n    draw_until_last_of_a_color = min(blue_balls, orange_balls, yellow_balls) - 1\n    \n    # She needs to take out all but 3 balls of the other two colors to ensure she has 4 of the same color\n    max_other_two_colors = max(blue_balls, orange_balls, yellow_balls) - 3\n    \n    # Total draws needed\n    ans = draw_until_last_of_a_color * 2 + max_other_two_colors + 1\n    \n    return ans\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duck_legs = 4 * 2  # Each duck has 2 legs, so 4 ducks have 4*2 legs\n    geese_legs = 2 * 2  # Each goose has 2 legs, so 2 geese have 2*2 legs\n    total_bird_legs = duck_legs + geese_legs  # Total number of bird legs\n    lamb_legs = 36 - total_bird_legs  # Total lamb legs\n    lambs = lamb_legs // 4  # Each lamb has 4 legs\n    return lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_number = int(''.join(map(str, sorted(digits))))\n    \n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Top layer has 1 box\n    top_layer = 1**2\n    # Second layer has a square of 2 boxes on each side, so 2^2 boxes\n    second_layer = 2**2\n    # Third layer has a square of 3 boxes on each side, so 3^2 boxes\n    third_layer = 3**2\n    \n    # Total number of boxes is the sum of the boxes in each layer\n    total_boxes = top_layer + second_layer + third_layer\n    \n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change_from_5 = 5 - total_cost\n    return round(change_from_5, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_A = 600 * (3/5)\n    good_copies_needed_B = 600 * (2/5)\n\n    total_copies_A = good_copies_needed_A * (5/4)\n    total_copies_B = good_copies_needed_B * (6/5)\n\n    total_copies_needed = total_copies_A + total_copies_B\n\n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    # Perform the given arithmetic calculation\n    num = 1.2 + 1.23 + 1\n    ans = (num * num) - (num * (1.2 + 1.23))\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    palindromic_count = 0\n    for number in range(100, 201):\n        if str(number) == str(number)[::-1]:\n            palindromic_count += 1\n    return palindromic_count\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    total_smiles = smiles_per_day * days_in_january\n    return total_smiles\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "import math\n\ndef solution():\n    num_students = 40\n    side_length = math.isqrt(num_students)  # Get the integer square root\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    total_solution = 300 + 400 + 300\n\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's call the rate at which the farmer works F, and the son's rate S\n    F, S = symbols('F S')\n    \n    # The farmer needs 24 hours to do the job alone, so his work rate times time equals 1 job\n    eq1 = Eq(F * 24, 1)\n    \n    # The son has a work rate S, and we don't know how many hours he would take, so let's call this T\n    T = symbols('T')\n    \n    # If the son worked alone, his work rate times time also equals 1 job\n    eq2 = Eq(S * T, 1)\n    \n    # When they work together for 16 hours, they complete 1 job\n    eq3 = Eq(16 * (F + S), 1)\n    \n    # The son works for 6 hours\n    eq4 = Eq(6 * S, 1 - (16 * F))  # This represents the part of the work done by the son\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (F, S, T))\n    \n    # We are interested in the time it takes for the son alone, which is represented by T\n    return solutions[T]\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + 2 * bounce_height\n\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n\n    expected_number_of_5s = total_rolls * probability_of_5\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_children = 5\n    # Total permutations without restrictions\n    total_permutations = factorial(total_children)\n    \n    # Count permutations where Hugh is between Louise and Richard\n    # Consider Louise, Hugh, and Richard as one unit and permute, then permute within the unit\n    permutations_when_hugh_between = factorial(total_children - 2) * factorial(3)\n    \n    # Subtracting the unwanted scenarios from total permutations\n    count = total_permutations - permutations_when_hugh_between\n    \n    return count\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    from fractions import Fraction\n    \n    total_matches = Fraction(1, 1) - (Fraction(2, 5) + Fraction(7, 20))\n    total_matches = total_matches.denominator  # to get the common number of matches\n    lost_matches = 10\n    won_matches = Fraction(2, 5) * total_matches\n    drawn_matches = Fraction(7, 20) * total_matches\n    points = won_matches * 3 + drawn_matches * 1 + lost_matches * 0\n    \n    return int(points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Given division is ~~~~~~~~ divided by 4 equals 9 with remainder 2\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # To find the dividend (the missing number), use the formula:\n    # dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n\n    # Check Johnny's solution\n    johnnys_dividend = (quotient * remainder) + divisor  # This is the incorrect step\n\n    # Verify if Johnny's solution is correct:\n    is_correct = dividend == johnnys_dividend\n\n    # Return the correct dividend and whether Johnny's solution is correct\n    return (dividend, is_correct)\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    ans = sum((-1)**((i+1)%2) * (40 - 2*i) for i in range(20))\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_shirts = 13\n    sister_shirts = sophie_shirts - 5\n    return sister_shirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost_chocolate = 4 * 75\n    total_cost_pens = 3 * 95\n    total_cost = total_cost_chocolate + total_cost_pens\n\n    # Convert pence to pounds\n    total_cost_in_pounds = total_cost / 100\n    \n    change = 10 - total_cost_in_pounds\n    return change\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_mean = 555\n    difference = 296\n    # total_sum represents the sum of all 8 numbers\n    total_sum = total_mean * 8\n    \n    # mean_first_3 represents mean of first 3 numbers\n    # mean_last_5 represents mean of last 5 numbers\n    mean_first_3, mean_last_5 = symbols('mean_first_3 mean_last_5')\n\n    # Equation for the sum of the first 3 numbers and their mean\n    equation1 = Eq(mean_first_3 * 3, mean_last_5 * 5 - total_sum)\n    # Equation for the difference in means\n    equation2 = Eq(mean_last_5 - mean_first_3, difference)\n\n    solutions = solve((equation1, equation2), (mean_first_3, mean_last_5))\n\n    return solutions[mean_last_5]\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    last_number = 100\n    count_by_twos = 2\n    multiples_of_twos = last_number // count_by_twos\n    return multiples_of_twos\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vicky = 99\n    timmy = symbols('timmy')\n    kevin = symbols('kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n\n    timmy_stickers = solve(equation1, timmy)[0]\n    kevin_stickers = solve(equation2.subs(timmy, timmy_stickers), kevin)[0]\n\n    return kevin_stickers\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    # Calculate work rate of the initial group\n    work_rate_initial = initial_people / initial_days\n\n    # Calculate work rate needed for the target days\n    work_rate_target = 1 / target_days\n\n    # Calculate the number of people needed for the target work rate\n    people_needed = work_rate_target / work_rate_initial\n\n    # Calculate additional people required\n    additional_people = people_needed - initial_people\n    \n    return int(additional_people)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n\n    total_footballs = footballs_per_basket * number_of_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    bud_from_front = pip_position + children_between + 1\n    bud_from_end = total_children - bud_from_front + 1\n    return bud_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng - (6/7)*chai_seng, (1/2)*(rasidah - (3/5)*rasidah))\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    # Let's denote the number of years ago as 'x'\n    isaac_current_age = 53\n    mother_current_age = 81\n\n    # Setting the equation based on the information provided.\n    # (Isaac's age x years ago) = 1/3 * (Mother's age x years ago)\n    # (53 - x) = 1/3 * (81 - x)\n\n    # Rearrange the equation and solve for x\n    x = (81 - 3 * 53) / 2  # Here we get the equation 2x = 81 - 159, which simplifies to 2x = -75\n\n    return int(x)\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    grandma_age, _ = solve_congruence(*congruences)\n    return int(grandma_age)\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    lb_to_kg_conversion_factor = 2.2\n    pounds = 154\n    kilograms = pounds / lb_to_kg_conversion_factor\n    return kilograms\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        return sum(range(a, b)) - b\n\n    result = custom_op(5, 10) - custom_op(4, 9)\n    return result\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_behind = 500\n\n    relative_speed = elena_speed - cat_speed\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3]\n    all_permutations = list(permutations(digits, 3))  # Get all permutations of length 3\n    return len(all_permutations)\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(20):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i + 1] - differences[i] for i in range(len(differences) - 1)]\n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_difference\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(58 - (6 * x + 2), 20)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from itertools import permutations\n\n    digits = '12345'\n    even_digits = '024'\n\n    # Generate all permutations of the 5 digits\n    all_permutations = list(permutations(digits))\n\n    count = 0\n    for perm in all_permutations:\n        if perm[-1] in even_digits:  # Check if the last digit is even\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for digit1 in range(1,10):\n        for digit2 in range(10):\n            if digit1 + digit2 == 15:\n                return digit1 * 10 + digit2\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_mean = 50\n    new_mean = 52\n    initial_apples_count = 8\n    new_apples_count = initial_apples_count + 1\n    \n    total_initial_weight = initial_mean * initial_apples_count\n    total_new_weight = new_mean * new_apples_count\n    \n    extra_apple_weight = total_new_weight - total_initial_weight\n    \n    return extra_apple_weight\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    count = 0\n    for i in range(1, 251):\n        if int(i**0.5)**2 == i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -4**2\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    # The sum of an arithmetic series S = n/2 * (a1 + an)\n    # where n is the number of terms, a1 is the first term, and an is the last term\n    n = 4            # number of terms\n    a1 = 96          # first term\n    an = 99          # last term\n    \n    sum_series = n/2 * (a1 + an)\n    return int(sum_series)\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pages = symbols('pages')\n    original_time = pages / 50\n    faster_time = pages / (50 + 20)\n    \n    equation = Eq(original_time - faster_time, 2)\n    \n    ans = solve(equation, pages)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    num_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Setting the given date\n    initial_date = datetime(2013, 1, 28)\n\n    # Check day of week for the same date in following years\n    current_year = initial_date.year\n    while True:\n        current_year += 1\n        future_date = datetime(current_year, 1, 28)\n        if future_date.weekday() == 0:  # 0 represents Monday\n            break\n\n    return future_date.year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n    \n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 10000):  # Arbitrary upper limit for divisor\n        dividend = divisor * 8 + 7\n        if dividend % divisor == 7:\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Time spent jogging: 1 hour, speed: 6 miles/hour\n    jogging_distance = 1 * 6\n\n    # Time spent walking: 2 hours (from 7:30 to 9:30), speed: 5 miles/hour\n    walking_distance = 2 * 5\n\n    # Total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_amount = 20\n    saved_each_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = initial_amount + (saved_each_day * days_saved)\n    money_left = total_saved - lent_to_brother - spent_on_snacks\n\n    return money_left\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_companies = 4\n    total_days = 5\n    total_length = 900\n\n    meters_per_company_per_day = total_length / (total_companies * total_days)\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    original_cost = 400\n    discount_rate = 0.10\n    num_members = 30\n    \n    discounted_cost = original_cost * (1 - discount_rate)\n    cost_per_member = discounted_cost / num_members\n    \n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_rate = 80  # cents for 15 minutes\n    additional_rate = 5  # cents for each additional minute\n    total_cost = 140  # cents (1.4 dollars)\n\n    if total_cost > base_rate:\n        additional_minutes_cost = total_cost - base_rate\n        additional_minutes = additional_minutes_cost / additional_rate\n        total_minutes = 15 + additional_minutes\n    else:\n        total_minutes = 15\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # Since we're only interested in the last digit of the product,\n    # we can consider the pattern of last digits of powers of 2 and 3.\n\n    # For 2: the pattern is 2, 4, 8, 6, and then it repeats every 4 powers.\n    # Thus, the last digit for 2^2017 is the same as for 2^(2017 mod 4) = 2^1.\n    last_digit_2 = 2\n\n    # For 3: the pattern is 3, 9, 7, 1, and then it repeats every 4 powers.\n    # So the last digit for 3^2017 is the same as for 3^(2017 mod 4) = 3^1.\n    last_digit_3 = 3\n\n    # The last digit of the product will be the product of the last digits of 2^2017 and 3^2017.\n    last_digit_product = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    ans = (55 + 13) // 4\n    return ans\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Assuming ◈ operates with a pattern that can be determined from given equations\n    # Define a function based on the pattern observed from the given examples\n    def custom_operation(x, y):\n        return (y % x) + int(y / x)\n    \n    # Now apply this operation to find 9 ◈ 20\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n   \n    number = symbols('number')\n    equation = Eq((number - 4) / 2 + 11, 37)\n   \n    solution = solve(equation, number)\n   \n    return solution[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5) * 5\n    if first_multiple < 56:\n        first_multiple += 5\n    last_multiple = (120 // 5) * 5\n\n    ans = (last_multiple - first_multiple) // 5 + 1\n    return ans\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = (35 - 10) / (7 - 2)\n    return x\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    gina_2005_age = 50\n    james_1997_age = 20\n\n    # Calculate the years when Gina was 35\n    gina_35_year = 2005 - (gina_2005_age - 35)\n    # Calculate the difference in years between Gina's 35 year and James's 20 year\n    years_difference = gina_35_year - 1997\n\n    # Calculate James's age when Gina was 35\n    james_age_when_gina_35 = james_1997_age + years_difference\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    return 10034\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_quarters = 2.5 * 4\n    return int(total_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    # Lucy is the 5th in line counting from the front\n    # Eddie is the 9th in line counting from the back\n    # There are 2 people standing between Lucy and Eddie\n    \n    # Since Lucy is in front of Eddie, the total number of people is:\n    # Lucy's position + people between + Eddie's position from the back\n    total_people = 5 + 2 + 9\n    \n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    prime_numbers = [2, 3, 5, 7]  # list of prime numbers that can be remainders\n    for number in range(8, 1000):  # we start checking from 8 as 7 is the highest prime remainder we expect\n        remainders = [number % 3, number % 5, number % 7, number % 8]\n        valid_remainders = set(remainders)\n        if len(valid_remainders) == 4 and all(remainder in prime_numbers for remainder in valid_remainders):\n            return number\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to centimeters\n    dress_length_cm = 5 * 100 + 8   # Convert meters to centimeters\n\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm // 9\n\n    # Convert back to meters and centimeters\n    stripe_length_m = stripe_length_cm // 100\n    stripe_length_extra_cm = stripe_length_cm % 100\n\n    return (stripe_length_m, stripe_length_extra_cm)\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n    \n    solved_value = solve(equation, x)\n    \n    return solved_value[0]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    total_flowers = 3616\n    flowers_left = 2644\n    # Given ratios\n    equation1 = Eq(orchids / tulips, 3 / 5)\n    # Total flowers\n    equation2 = Eq(orchids + tulips + roses, total_flowers)\n    # Flowers left after selling\n    equation3 = Eq(orchids * (1 - 40/100) + tulips * (1 - 1/5) + roses * (1 - 25/100), flowers_left)\n\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # The minimum number of right-handed girls occurs when all non-right-handed pupils are girls.\n    # This means that all non-girls are right-handed.\n    non_right_handed = total_pupils - right_handed\n    boys = total_pupils - girls\n\n    # Therefore, the smallest number of right-handed girls would be:\n    right_handed_girls_min = girls - non_right_handed\n\n    # In case non-right-handed girls are fewer than the total girls, which means some boys are also not right-handed.\n    # So we make the minimum 0 if we get a negative result.\n    right_handed_girls_min = max(0, right_handed_girls_min)\n\n    return right_handed_girls_min\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    equation1 = Eq(12*books + 9*files, 336)\n    equation2 = Eq(books, files + 14)\n\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    # The number of chickens and rabbits combined is 10.\n    # Chickens have 2 legs, and rabbits have 4 legs.\n\n    # Let's denote the number of chickens as c and rabbits as r.\n    # We have two equations based on the given information:\n    # c + r = 10  (equation for the count of animals)\n    # 2c + 4r = 34 (equation for the count of legs)\n\n    # We can solve these equations to find the number of chickens (c) and rabbits (r).\n\n    for c in range(11):  # c can be from 0 to 10\n        r = 10 - c      # because c + r must equal 10\n        if 2 * c + 4 * r == 34:\n            return c      # Return the number of chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    return 60.2 / 7\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    # Ones' digit of powers cycle after a certain length, typically 4\n    # So, we'll take the exponent modulo 4\n    exponent_mod_4 = 2013 % 4\n\n    # Compute ones' digit of each term using the remaining part of the exponent\n    ones_digits = [(base ** exponent_mod_4) % 10 for base in range(1, 10)]\n\n    # Sum the ones' digits and get the ones' digit of the sum\n    ans = sum(ones_digits) % 10\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # In the worst case, Peter picks each time a sock of a different color.\n    # After picking 1 red, 1 blue, and 1 black sock (total of 3),\n    # the next sock he picks must match one of the ones he has already picked.\n    return 4\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Given departure time in Japan timezone\n    departure_time_japan = datetime(year=2023, month=7, day=2, hour=20) # 8pm of 2nd July\n\n    # Given arrival time in France timezone\n    arrival_time_france = datetime(year=2023, month=7, day=3, hour=1) # 1am of 3rd July\n    \n    # France is 7 hours behind Japan\n    time_difference = timedelta(hours=7)\n\n    # Adjusting the arrival time to Japan's timezone\n    arrival_time_japan = arrival_time_france + time_difference\n\n    # Calculate the duration of the flight\n    flight_duration = arrival_time_japan - departure_time_japan\n\n    # Return the total hours as the answer\n    return flight_duration.seconds // 3600\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    square, triangle, diamond = symbols('square triangle diamond')\n    \n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n    \n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n    \n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    digits = 0\n    for i in range(1, 10):\n        if 131 >= 10**i:\n            digits += i * (10**i - 10**(i-1))\n        else:\n            digits += i * (131 - 10**(i-1))\n            break\n    return digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    score_for_correct = 4\n    score_for_incorrect = -1\n    not_attempted = 3\n    total_score = 168\n\n    attempted_questions = total_questions - not_attempted\n\n    # Let x be the number of correct answers, then (attempted_questions - x) is the number of incorrect answers.\n    # We have the equation: 4x - (attempted_questions - x) = total_score\n    # Simplify the equation to find the value of x (number of correct answers).\n    # 4x - attempted_questions + x = total_score\n    # 5x - attempted_questions = total_score\n    # 5x = total_score + attempted_questions\n    # x = (total_score + attempted_questions) / 5\n\n    correct_answers = (total_score + attempted_questions) // score_for_correct\n    \n    return correct_answers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for necklace and earrings\n    necklace, earring = symbols('necklace earring')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Calculate the total cost of 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    sum_numbers = 71\n    diff_numbers = 9\n\n    bigger_number = (sum_numbers + diff_numbers) / 2\n\n    return bigger_number\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # There are 3 choices for each digit place\n    # However, we cannot use 0 for the first digit as it's a 2-digit number\n    # Hence, there are 2 choices for the first digit (1 or 2) \n    # And there are still 3 choices for the second digit (0, 1, or 2)\n    \n    first_digit_choices = 2\n    second_digit_choices = 3\n    \n    total_combinations = first_digit_choices * second_digit_choices\n    \n    return total_combinations\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the smallest even number be x. The others will be x+2, x+4, x+6, and x+8\n    # The sum will be x + (x+2) + (x+4) + (x+6) + (x+8) = 200\n    # Simplifying that gives 5x + 20 = 200\n    # 5x = 180\n    # x = 36\n    return 36\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of sugar solution transferred in grams\n    x = symbols('x')\n\n    # Concentration of sugar in container A after transfer\n    concentration_A = Eq((50 * 0.10 - x * 0.10 + x * 0.20) / (50 - x + x), (30 * 0.20 - x * 0.20 + x * 0.10) / (30 - x + x))\n\n    # Solve for x\n    x_val = solve(concentration_A, x)\n    return x_val[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    from math import factorial\n\n    ans = sum(factorial(100) // (factorial(97) * factorial(i)) for i in range(4))\n    return ans / factorial(97)\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    time_for_5_sections = 8\n    sections_needed = 6\n    time_per_section = time_for_5_sections / (5 - 1)\n    time_for_6_cuts = time_per_section * sections_needed\n    return time_for_6_cuts\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    votes_mark = 22\n    votes_nicole = 27\n    votes_peter = 35\n\n    remaining_votes = total_votes - (votes_mark + votes_nicole + votes_peter)\n    \n    # To ensure Peter wins, he needs one vote more than half of the total votes,\n    # if all other candidates were to get the remaining votes.\n    votes_needed_for_majority = (total_votes // 2) + 1 - votes_peter\n\n    # If the remaining votes are fewer than needed for a majority, then it's\n    # impossible for Peter to win. Otherwise, Peter needs at least the number of votes\n    # to reach a majority.\n    additional_votes_needed = max(0, votes_needed_for_majority)\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls, boys - 7)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    num1 = 31\n    num2 = 32\n        \n    if num1 % 10 > num2 % 10:\n        ans = num1\n    else:\n        ans = num2\n        \n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # Total amount in pence\n\n    # Let x be the number of each type of coin\n    for x in range(1, total_amount):\n        # Calculate the total value of the coins if there are x of each type\n        value = 5 * x + 10 * x + 20 * x\n        \n        # Check if the total value matches the amount in the money box\n        if value == total_amount:\n            # If it matches, return the total number of coins\n            return x * 3  # Total coins since there are 3 types of coins\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    discount = 189\n    percentage_reduction = (discount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    total_sweets = 135\n    days = 9\n    common_difference = 3\n\n    # Calculate the first term (number of sweets eaten on the first day)\n    # Using the sum of arithmetic sequence formula: total_sweets = n/2 * (2a + (n-1)d)\n    # n is days, d is common_difference, and a is the first term we want to find.\n    # We rearrange the formula to solve for a.\n    a = (2 * total_sweets / days - common_difference * (days - 1)) / 2\n\n    # Now we calculate the last term which is the number of sweets eaten on the last day\n    last_day_sweets = a + (days - 1) * common_difference\n\n    return int(last_day_sweets)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    spent_on_book = initial_money * 0.10\n    remaining_money = initial_money - spent_on_book\n    spent_on_DVD = remaining_money * 0.20\n    final_money = remaining_money - spent_on_DVD\n    \n    return final_money\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money = 28  # Annie's initial amount in dollars\n    gift_cost = 20    # Cost of the gift in dollars\n\n    # Convert both amounts to cents\n    total_money_cents = total_money * 100\n    gift_cost_cents = gift_cost * 100\n\n    # Calculate the remaining money in cents\n    remaining_money_cents = total_money_cents - gift_cost_cents\n\n    return remaining_money_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    initial_amount = 1000\n    interest_rate = 0.06\n    years = 5\n    balance = initial_amount * (1 + interest_rate) ** years\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    pages = 185\n    digits = 0\n    for i in range(1, pages + 1):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    percentage_increase = 10\n    \n    new_annual_salary = annual_salary * (1 + percentage_increase / 100)\n    new_monthly_salary = new_annual_salary / 12\n    \n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    return 704 - 457\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month * 31 + day * 12 == 376:\n                # Format the date as \"ddmm\"\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    return 4.08 - 1.08\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    total = 0\n    sign = 1\n    for num in range(119, 98, -2):\n        total += sign * num\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    total_numbers = range(1, 2023)\n    divisible_by_7_or_17 = [num for num in total_numbers if num % 7 == 0 or num % 17 == 0]\n    ans = 2022 - len(divisible_by_7_or_17)\n    return ans\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = price_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6\n    protractor_original_price = 0.30\n\n    # Calculate the reduced prices\n    calculator_reduced_price = calculator_original_price * (1 - 0.25)\n    protractor_reduced_price = protractor_original_price * (1 - 0.50)\n\n    # Calculate the total cost for the calculators and the protractors\n    total_calculators_cost = calculator_reduced_price * 8\n    total_protractors_cost = protractor_reduced_price * 20\n\n    # Calculate the total amount paid\n    total_amount_paid = total_calculators_cost + total_protractors_cost\n\n    return total_amount_paid\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_needed = 40\n    milk_needed = 80\n    tom_flour = 25\n\n    tom_milk = (milk_needed / flour_needed) * tom_flour\n\n    return tom_milk\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n\n    initial_sweets = sweets_taken + sweets_left\n\n    return initial_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    younger, older = symbols('younger older')\n    difference = older - 18  # The difference in age between the older and younger elephant\n\n    # When the younger elephant is as old as the older is now, the older will be 62.\n    equation = Eq(older + difference, 62)\n\n    # Solving for the older elephant's age using the information given.\n    older_age = solve(equation, older)\n\n    return older_age[0]\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # The amount of grass G can be calculated from the number of oxen and the time they take\n    # Oxen * weeks = Constant (G), so we have two equations:\n    # 27 * 6 = G\n    # 23 * 9 = G\n    # The amount of grass G should be the same\n    # So, we can solve for G:\n    G = 27 * 6  # This is the constant amount of grass the farm grows\n\n    # Now we find out how many weeks (w) it will take for 21 oxen to finish eating G \n    # We use the equation:\n    # 21 * w = G\n    w = G / 21\n\n    return w\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = 1/denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds = 2 / 3\n    kilograms_per_tonne = 1000\n\n    two_thirds_of_tonnes = tonnes * two_thirds\n    ans = two_thirds_of_tonnes * kilograms_per_tonne\n    return ans\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen leaves home at 7:30 AM and rides to the train station for 1 hour\n    bike_speed = 10  # bike speed in miles per hour\n    bike_time = 1  # time in hours\n    bike_distance = bike_speed * bike_time\n\n    # Ellen gets on the train at 8:30 AM and arrives in the town at 10:30 AM\n    train_speed = 50  # train speed in miles per hour\n    train_time = 2  # time in hours\n    train_distance = train_speed * train_time\n\n    # Total distance Ellen travels every Saturday\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # Five identical balls can be put into three different boxes (A, B, C).\n    # This is a problem of distributing n identical objects into r distinct boxes.\n    # It is equivalent to placing two dividers among the five balls to separate into boxes:\n    # Example: ||OOOOO - all five in box C, O|OOO|O - one in A, three in B, one in C.\n    # The number of ways to place two dividers in seven slots (five balls + two dividers) is C(7,2).\n    from math import comb\n    ways = comb(5 + 3 - 1, 3 - 1)\n    return ways\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02)**2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 / 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    total_marbles = 112\n    blue = red = green = 0\n    \n    # Let's represent the blue marbles as \"blue\"\n    # According to the problem red = blue + 25\n    # and green = red + 32\n    # Also, blue + red + green = total_marbles which is 112\n    \n    # We can represent red in terms of blue and replace its value in the equation of green in terms of red\n    red = blue + 25\n    green = (blue + 25) + 32\n    \n    # Now we can substitute both red and green in terms of blue in the total number of marbles\n    total_blue_equation = blue + (blue + 25) + ((blue + 25) + 32)\n    \n    # Now we can solve for blue\n    blue = (total_marbles - 25 - 32) / 3\n    \n    return int(blue)\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    # The word TEENAGE has 7 letters with the following counts of each letter: \n    # E: 3, T: 1, N: 1, A: 1, G: 1.\n    # To find the number of different ways to arrange the letters, we use the formula for permutations of\n    # a multiset: n! / (n1! * n2! * ... * nk!)\n    # where n is the total number of items, and n1, n2, ..., nk are the counts of each unique item.\n    n = factorial(7) # Total number of letters in \"TEENAGE\"\n    n1 = factorial(3) # Count of letter E\n    # There is only one of each other letter, so their factorial is 1 and doesn't need to be included in the formula.\n    \n    # Calculate the number of different arrangements.\n    num_arrangements = n // n1\n    \n    return num_arrangements\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Number of people from front to back\n    front_to_back = 3 + 2 - 1  # Subtracting 1 because Lucas is counted twice\n    \n    # Number of people from left to right\n    left_to_right = 4 + 3 - 1  # Subtracting 1 because Lucas is counted twice\n    \n    # Total number of students\n    total_students = front_to_back * left_to_right\n\n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    ema, keng_wee = symbols('ema keng_wee')\n    \n    # Set up the equations\n    ema_keng_wee_diff = Eq(ema + 360, keng_wee)  # Ema has $360 less than Keng Wee\n    both_have_same = Eq(ema - ema/4, keng_wee - (4/7)*keng_wee)  # Both have same amount after spending\n\n    # Solve the system of equations\n    solutions = solve((ema_keng_wee_diff, both_have_same), (ema, keng_wee))\n\n    # Return the amount of money Keng Wee had at first\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60  # The price paid after the discount\n    discount_rate = 25 / 100  # The discount rate expressed as a decimal\n\n    # Original price = Sale price / (1 - discount rate)\n    original_price = sale_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    num = 217\n    while sum(int(digit) for digit in str(num)) != 9:\n        num += 1\n    return num\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    return 284 + 69 - 271\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    square_value = one_fourth_of_36 * 10\n    return square_value\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas was the 3rd counting from front to back and 2nd counting from back to front\n    # That means there are 3 + 2 - 1 students from front to back, because Lucas is counted twice\n    rows = 3 + 2 - 1\n\n    # Lucas was the 4th counting from left to right and 3rd counting from right to left\n    # That means there are 4 + 3 - 1 students from left to right, because Lucas is counted twice\n    columns = 4 + 3 - 1\n\n    # Total number of students is the product of the number of rows and columns\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of boys (b) and girls (g)\n    g, b = symbols('g b')\n\n    # Equation for the initial number of girls as a fraction of boys\n    equation1 = Eq(g, 9/11 * b)\n\n    # Equation for the new number of girls as a fraction of boys after 2 girls are transferred in\n    equation2 = Eq(g + 2, 10/11 * b)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Calculate the total number of students after 2 girls are transferred in\n    total_students = solutions[g] + 2 + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    sum_of_numbers = 37 + 38 + 40 + 43 + 42 + 41\n    return sum_of_numbers\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = sum(1/n for n in range(1, 11)) + sum(2*(n-1)/n for n in range(2, 11))\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # Set up the equation according to the question\n    equation = Eq(2 * (3 * x - y), 2 * x + 4)\n    \n    # Solve the equation for (2x - y)\n    solution = solve(equation, (x, y))\n    \n    # Extract the value of (2x - y)\n    term_value = 2 * solution[x] - solution[y]\n    \n    return term_value\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    # prices in pence\n    milk_price_per_litre = 31\n    crisps_price_per_packet = 17\n    bread_price = 78\n    magazine_price_pence = 105  # converting pounds to pence\n\n    total_cost_pence = (3 * milk_price_per_litre +\n                        2 * crisps_price_per_packet +\n                        bread_price +\n                        magazine_price_pence)\n\n    # converting 5 pounds to pence\n    money_given_pence = 500\n\n    # change in pence\n    change_pence = money_given_pence - total_cost_pence\n\n    # converting change back to pounds\n    change_pounds = change_pence / 100\n\n    return change_pounds\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    trevor, siobhan = symbols('trevor siobhan')\n    \n    eq1 = Eq(trevor, 5 * siobhan)\n    eq2 = Eq(siobhan, trevor - 24)\n    \n    solutions = solve((eq1, eq2), (trevor, siobhan))\n    \n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lim, tan = symbols('lim tan')\n    \n    equation1 = Eq(lim, 5 * tan)\n    equation2 = Eq(lim + tan, 390)\n    \n    solutions = solve((equation1, equation2), (lim, tan))\n    \n    return solutions[lim] - solutions[tan]\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbol for Zehan's current age\n    zehan_age_now = symbols('zehan_age_now')\n\n    # Equation representing the future age condition\n    equation = Eq(zehan_age_now + 12, 3 * zehan_age_now)\n\n    # Solve the equation for Zehan's current age\n    zehan_current_age = solve(equation, zehan_age_now)\n\n    return zehan_current_age[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Total number of ways to choose 5 students out of 15\n    total_ways = comb(15, 5)\n    \n    # Number of ways to choose 5 students when none of A, B, or C is chosen\n    ways_without_ABC = comb(12, 5)\n    \n    # Number of ways to choose 5 students when exactly two of A, B, or C are chosen\n    ways_with_two_ABC = 3 * comb(12, 3)\n\n    # Number of ways to choose 5 students when all A, B, and C are chosen\n    ways_with_ABC = comb(12, 2)\n\n    # Calculate the number of ways when exactly one of A, B, or C is chosen\n    ans = total_ways - ways_without_ABC - ways_with_two_ABC - ways_with_ABC\n    return ans\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    tickets = 7\n    price_per_ticket = total_cost / tickets\n    return round(price_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    ans = 3 * 6\n    return ans\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_part = 6\n    total_parts = 5 + 6\n    shaila_sweets = 36\n\n    total_sweets = shaila_sweets * total_parts // shaila_part\n    return total_sweets\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_lemon_juice, water = symbols('original_lemon_juice water')\n\n    # Equation representing the initial ratio 2 parts lemon juice to 3 parts water\n    equation1 = Eq(original_lemon_juice / water, 2 / 3)\n\n    # Equation representating the new ratio (original lemon juice + 80) ml to water being 6 to 5\n    equation2 = Eq((original_lemon_juice + 80) / water, 6 / 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_lemon_juice, water))\n\n    return solutions[original_lemon_juice]\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_savings = symbols('initial_savings')\n\n    equation = Eq(initial_savings - (1/3) * initial_savings - 177 - 129, (1/2) * (1/3) * initial_savings)\n\n    solutions = solve(equation, initial_savings)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    for number in range(-1000, 1001):  # Define a range to search for the number\n        if ((number + 8) * 8 - 8) / 8 == 80:\n            return number\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n    num_red = None\n\n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        if 2 * red_ropes + 3 * blue_ropes == total_length:\n            num_red = red_ropes\n            break\n\n    return num_red\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.3  # 30% increase\n    time_delay = 9 / 60  # 9 minutes converted to hours\n\n    # Distance = speed * time\n    # Usual time to reach destination = distance / usual speed\n    # Increased time to reach destination due to delay = distance / increased speed\n    \n    # Therefore, usual_time - time_delay = increased_time\n    # (distance / usual_speed) - time_delay = distance / increased_speed\n    # Solving for distance gives us the following equation:\n\n    distance = (usual_speed * increased_speed * time_delay) / (increased_speed - usual_speed)\n    return distance\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    \n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, v be the original speed, and t be the original time.\n    d, v, t = symbols('d v t')\n\n    # When the cyclist increases his speed by 25%, he covers the distance in 20 minutes less.\n    equation1 = Eq(d, v * t)\n    equation2 = Eq(d, v * 1.25 * (t - 20/60))\n\n    # When the cyclist decreases his speed by 45 meters per minute, time taken increases by 75%.\n    equation3 = Eq(d, (v - 45) * t * 1.75)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (d, v, t))\n\n    # Get the distance.\n    return solutions[d]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    # Number of students participating in skipping rope\n    skipping_rope = 40\n\n    # Number of students participating in the long jump\n    long_jump = 31\n\n    # Number of students participating in both events\n    both_events = 21\n    \n    # Using the Inclusion-Exclusion Principle\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = 21 / 0.30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_in_second_half = 6\n    total_second_half = average_second_half * months_in_second_half\n    total_year = total_first_half + total_second_half\n    months_in_year = 12\n    average_per_month = total_year / months_in_year\n\n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 9*7):  # the upper limit is the least common multiple of 7 and 9, which is 63\n        if i % 7 == 0 and i % 9 == 2:  # the child number modulo 7 should be 0 and modulo 9 should be 2\n            return i\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for i in range(1, 22//2 + 1):\n        if i != 22 - i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    used_flour = brownies + cookies + muffins\n\n    return used_flour.simplify()\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for a in range(2, 42):\n        if 41 % a == 0:\n            small_factor = a\n            large_factor = 41 // a + small_factor\n            A = small_factor * large_factor\n            break\n    seventh_multiple = A * 7\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given height of the screen and the ratio\n    height = 21  # in cm\n    ratio_height = 3\n    ratio_width = 4\n    \n    # Calculate the width based on the ratio\n    width = (ratio_width / ratio_height) * height\n    \n    # Calculate perimeter of the screen\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "from fractions import Fraction\n\ndef solution():\n    product = 1\n    for i in range(2, 12):\n        product *= Fraction(1, 1) + Fraction(1, i)\n    return product\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n    \n    # The system of equations according to the problem description\n    equation1 = Eq(nathan/2, rosephine/5)\n    equation2 = Eq(rosephine/5, 3*sheena/5)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n    \n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    # Let x be the weight of Jessie\n    # Buzz's weight will be 3 times Jessie's, which is 3x\n    # Buzz is also 450g heavier than Jessie: 3x = x + 450\n    # Solving for x gives us Jessie's weight: 2x = 450 -> x = 225\n    # Therefore, Buzz's weight is 3x, which is 3 * 225 = 675g\n    \n    jessie_weight = 450 / 2\n    buzz_weight = 3 * jessie_weight\n    return buzz_weight\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    number_of_terms = (last_term - first_term) // 2 + 1\n    sum_of_series = (first_term + last_term) * number_of_terms // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Equation for the difference between the two numbers\n    equation1 = Eq(x - y, 36)\n\n    # Equation for the sum of the two numbers\n    equation2 = Eq(x + y, 98)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The smaller number will be the second value in the tuple\n    smaller_number = min(solutions[x], solutions[y])\n\n    return smaller_number\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Calculate the last digit of each expression\n    last_digit_4 = (4 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n    last_digit_11 = (11 ** 100) % 10\n\n    # Multiply the last digits to get the last digit of the entire expression\n    ans = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    return ans\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    return 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_marks = 3\n    wrong_marks = -1\n    total_score = 78\n    \n    correct_answers = total_questions * 70 // 100\n    wrong_answers = total_questions - correct_answers\n    \n    # Let x be the number of wrong answers Meng actually had, so the rest of the correct_answers are correct\n    for x in range(wrong_answers + 1):\n        score = (correct_answers - x) * correct_marks + x * wrong_marks\n        if score == total_score:\n            return correct_answers - x\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    files_cost, rulers_cost = symbols('files_cost rulers_cost')\n\n    # Equation based on given cost of files and rulers\n    equation = Eq(6 * files_cost + 10 * rulers_cost, 40)\n\n    # Solve for the cost of one file and one ruler\n    solutions = solve(equation, (files_cost, rulers_cost))\n\n    # Calculate the cost for 9 files and 15 rulers\n    total_cost = 9 * solutions[files_cost] + 15 * solutions[rulers_cost]\n\n    return total_cost\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n\n    equation1 = Eq(john, 5/13 * jessie)\n    equation2 = Eq(john + 600, 1/2 * (jessie - 600))\n\n    solutions = solve((equation1, equation2), (john, jessie))\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    count_1 = 0\n    count_2 = 0\n    N = 0\n\n    while count_1 < 15 or count_2 < 14:\n        N += 1\n        count_1 += str(N).count('1')\n        count_2 += str(N).count('2')\n\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime\n\ndef solution():\n    time_format = '%H:%M'\n    start_time = datetime.strptime('10:30', time_format)\n    end_time = datetime.strptime('11:00', time_format)\n\n    # Calculate the time difference in minutes\n    time_diff = (end_time - start_time).total_seconds() / 60\n\n    return time_diff\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    # Calculate the total cost of bananas and apples\n    total_cost_bananas = 3 * 12  # in pence\n    total_cost_apples = 5 * 11   # in pence\n    total_cost = total_cost_bananas + total_cost_apples  # in pence\n\n    # Convert £2 to pence\n    amount_paid = 200  # in pence\n\n    # Calculate change in pence\n    change_in_pence = amount_paid - total_cost\n\n    # Convert change to pounds and pence\n    change_in_pounds = change_in_pence // 100\n    remaining_pence = change_in_pence % 100\n\n    return change_in_pounds + remaining_pence / 100\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_siblings = 7\n\n    harvirs_age = youngest_age + age_difference * (number_of_siblings - 1)\n\n    return harvirs_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    cost_calendar = 6.97\n    cost_ball = 2.99\n    total_spent = cost_calendar + cost_ball\n    return total_spent\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of T-shirts and c be the number of caps\n    t, c = symbols('t c')\n    \n    # Convert the ratio to equations\n    ratio_equation = Eq(t/c, 8/5)\n\n    # Each T-shirt costs $3, each cap costs $5, 1/4 T-shirts and 1/5 caps sold collected $132\n    money_equation = Eq(3*(t/4) + 5*(c/5), 132)\n\n    # As we are given a ratio, we can express c in terms of t or vice-versa and solve only one variable.\n    c_in_terms_of_t = solve(ratio_equation, c)[0]\n\n    # Substitute c in terms of t in the money equation and solve for t\n    money_equation_substituted = money_equation.subs(c, c_in_terms_of_t)\n    t_shirts_at_first = solve(money_equation_substituted, t)[0]\n\n    return t_shirts_at_first\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_left = 0.36  # 360g in kg\n    flour_used = (1 / 5) + (1 / 2)  # The sum of flour used in kg\n    flour_initial = flour_used + flour_left\n\n    return flour_initial\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let o represent the number of oranges and l represent the number of lemons\n    o, l = symbols('o l')\n\n    # 1 orange cost 26p, which is 0.26 pounds\n    # 1 lemon costs 30p, which is 0.3 pounds\n    # Gordon spent exactly 5 pounds\n    equation = Eq(0.26 * o + 0.3 * l, 5)\n\n    # Find solutions where number of oranges and lemons are whole numbers\n    solutions = [(sol[o], sol[l]) for sol in solve(equation, (o, l)) if sol[o].is_integer and sol[l].is_integer and sol[o] >= 0 and sol[l] >= 0]\n\n    # Return the total number of oranges and lemons for the first valid solution found\n    total_fruits = sum(solutions[0]) if solutions else 0\n\n    return total_fruits\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    # Number of people\n    n = 4\n    \n    # In circular permutations, (n-1)! is the number of ways to arrange n objects\n    num_ways = factorial(n - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n    \n    equation = Eq(original_eggs * 3, original_eggs + 24)\n    solution = solve(equation, original_eggs)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3*a + 2*b\n\n    def star(a, b):\n        return 3*a - 2*b\n\n    part1 = delta(3, 4)\n    part2 = star(part1, 5)\n    ans = delta(part2, 6)\n    \n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = -(-cookies // box_capacity)  # Ceiling division\n    return boxes_needed\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2\n    arrangements = factorial(total_books) // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    return arrangements\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of male and female visitors on the first day\n    male, female = symbols('male female')\n    \n    # On the first day, the number of male visitors was 450 more than female visitors\n    equation1 = Eq(male, female + 450)\n    \n    # On the second day, the number of female visitors increased by 15%\n    # and the number of male visitors decreased by 18%\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(female * 1.15 + male * 0.82, 1354)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male, female))\n    \n    # The total number of visitors on the first day is the sum of male and female\n    total_first_day = solutions[male] + solutions[female]\n    \n    return total_first_day\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0:  # A cannot be 0 because it's a digit in a thousand's place\n            continue\n        F = E - 4\n        if F not in perm and 0 <= F <= 9:\n            H = F + 1\n            if H not in perm and 0 <= H <= 9:\n                EFCBH = E * 10000 + F * 1000 + C * 100 + B * 10 + H\n                return EFCBH\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Leo and Jason's initial amounts\n    leo_initial, jason_initial = symbols('leo_initial jason_initial')\n    \n    # Leo had $220 more than Jason initially\n    equation1 = Eq(leo_initial, jason_initial + 220)\n    \n    # Leo's and Jason's new amounts after receiving their salaries\n    leo_final = leo_initial + 180\n    jason_final = jason_initial + 1100\n    \n    # Jason now has 2 times as much money as Leo\n    equation2 = Eq(jason_final, 2 * leo_final)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo_initial, jason_initial))\n\n    # Jason's amount after receiving the salary\n    jason_now = solutions[jason_initial] + 1100\n    \n    return jason_now\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    ways = 0\n    for x1 in range(8):  # 0 to 7 pencils in the first case\n        for x2 in range(8 - x1):  # remaining pencils split between the other two cases\n            ways += 1  # since the cases are identical, any distribution is a new way\n    return ways\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_a_week = 7\n\n    robots_per_week = robots_per_day * days_in_a_week\n\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    initial_number = 345\n    decrement = 9\n\n    # last positive number before passing 0\n    remainder = initial_number % decrement\n    last_positive_number = initial_number - remainder\n\n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000\n    num_friends = 5\n    \n    cost_per_person = total_cost / num_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    male_first, female_first = symbols('male_first female_first')\n    \n    # Equation 1: male_first = female_first + 450\n    equation1 = Eq(male_first, female_first + 450)\n    \n    # Equation 2: male_second = male_first * (1 - 18%)\n    # Equation 3: female_second = female_first * (1 + 15%)\n    # Equation 4: male_second + female_second = 1354\n    equation2 = Eq(male_first * 0.82 + female_first * 1.15, 1354)\n    \n    solutions = solve((equation1, equation2), (male_first, female_first))\n    \n    return solutions[male_first]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_amount = 555\n    price_with_name = 15\n    price_without_name = 10\n\n    # Let x be the number of children who paid for the shirt with their name\n    # and y be the number of children who paid for the shirt without their name.\n    \n    # We have two equations based on the problem statement:\n    # x + y = 50 (total number of children)\n    # 15x + 10y = 555 (total amount paid)\n    \n    # We can solve for x using these equations:\n    # From the first equation, we get y = 50 - x.\n    # Substitute y in the second equation:\n    # 15x + 10(50 - x) = 555\n    # 15x + 500 - 10x = 555\n    # 5x = 555 - 500\n    # 5x = 55\n    # x = 55 / 5\n    # x = 11\n    \n    x = (total_amount - 50 * price_without_name) // (price_with_name - price_without_name)\n\n    return x\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for time after speed increase\n    time_after_increase = symbols('t')\n\n    # Speed before increase (150 m/min), time before increase (10 min)\n    speed_before_increase = 150\n    time_before_increase = 10\n    \n    # Speed after increase is speed_before_increase + 50 m/min\n    speed_after_increase = speed_before_increase + 50\n\n    # Total distance covered is equal to distance covered before speed increase\n    # plus distance covered after speed increase\n    total_distance = 3700\n\n    # Equation: total_distance = (time_before_increase * speed_before_increase)\n    #                          + (time_after_increase * speed_after_increase)\n    equation = Eq(\n        (time_before_increase * speed_before_increase) +\n        (time_after_increase * speed_after_increase),\n        total_distance\n    )\n\n    # Solve the equation for time_after_increase\n    time_after_increase_solution = solve(equation, time_after_increase)[0]\n\n    # Total time spent walking is the sum of time before and after the speed increase\n    total_time_spent = time_before_increase + time_after_increase_solution\n\n    return total_time_spent\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Define the time difference between Singapore and London\n    time_difference = 7\n    \n    # Define the departure and arrival times in hours using 24-hour format\n    departure_time_singapore = 5\n    arrival_time_london = 11\n    \n    # Calculate the time of arrival in Singapore time by adding the time difference\n    arrival_time_singapore = (arrival_time_london + time_difference) % 24\n    \n    # Calculate the duration of the flight\n    if arrival_time_singapore < departure_time_singapore:\n        # If the arrival time is earlier than departure time, it means the flight crossed midnight\n        duration = (24 - departure_time_singapore) + arrival_time_singapore\n    else:\n        duration = arrival_time_singapore - departure_time_singapore\n    \n    return duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "def solution():\n    from math import factorial\n\n    num_hearts = 4\n    num_spades = 3\n    num_diamonds = 7\n    total_cards = num_hearts + num_spades + num_diamonds\n\n    ways_to_arrange = factorial(total_cards) // (factorial(num_hearts) * factorial(num_spades) * factorial(num_diamonds))\n    \n    return ways_to_arrange\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # smallest multiple of 5 that is not 0\n    second_digit = 1  # smallest odd number among the natural numbers\n    third_digit = 9  # largest single digit odd number\n    fourth_digit = 2  # smallest even number in nature (natural numbers)\n    fifth_digit = 8  # largest single digit that is a multiple of 2\n    sixth_digit = 3  # smallest odd number greater than 1\n    seventh_digit = 0  # must be a multiple of 2 and 5, so it ends in 0\n\n    phone_number = (first_digit * 10**6 +\n                    second_digit * 10**5 +\n                    third_digit * 10**4 +\n                    fourth_digit * 10**3 +\n                    fifth_digit * 10**2 +\n                    sixth_digit * 10 +\n                    seventh_digit)\n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "from fractions import Fraction\n\ndef solution():\n    almonds = Fraction(4, 9)\n    cashew_nuts = Fraction(1, 3)\n    difference = almonds - cashew_nuts\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Checking Johnny's mistake\n    johnny_initial_computation = quotient * remainder\n    johnny_final_computation = johnny_initial_computation + divisor\n\n    # Correct way to find the dividend\n    actual_dividend = quotient * divisor + remainder\n    # Verifying Johnny's answer\n    ans = johnny_final_computation == actual_dividend\n    \n    return ans, actual_dividend\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    # initial conditions\n    first_day_pages = 20\n    increase_per_day = 5\n    last_day_pages = 80\n\n    # calculate total pages read until the day before the last day\n    # this forms an arithmetic sequence with first term as `first_day_pages`\n    # and common difference as `increase_per_day`\n    # let n be the total days excluding the last day\n    # the n-th term of this sequence can be found by summing the geometric sequence\n    # and will be equal to last_day_pages when the last day is reached.\n    \n    # sum of arithmetic sequence S_n = n/2 * (2*a_1 + (n-1)*d)\n    # where S_n is the sum of first n terms, a_1 is the first term and d is the common difference\n    # we have S_n + last_day_pages = total pages in the book\n    \n    # to find n we first assume that the sum up to the (n-1)-th day (excluding the last day)\n    # is one term less than the last_day_pages (since on the last day he finishes the book)\n    # thus the sum till the (n-1)-th day is (last_day_pages - first_day_pages)\n    # so we solve the arithmetic sequence sum formula for n with this sum\n    # (last_day_pages - first_day_pages) = (n-1)/2 * (2*first_day_pages + (n-2)*increase_per_day)\n    # we can solve this quadratic equation for n\n\n    # we will get a quadratic equation of form An^2 + Bn + C = 0\n    # calculate coefficients of the quadratic equation\n    A = 0.5 * increase_per_day\n    B = increase_per_day - (2 * first_day_pages) - 0.5 * increase_per_day\n    C = first_day_pages - last_day_pages\n\n    # quadratic formula n = (-B + sqrt(B^2 - 4AC)) / (2A)\n    # we only consider the positive value of n because the number of days cannot be negative\n    delta = B**2 - 4*A*C\n    n = (-B + delta**0.5) / (2*A)\n\n    # round n up since you can't have a fraction of a day\n    # and n was calculated for (n-1) days, add 1 to include the last day\n    n = int(n) + 1\n\n    # now that we have total number of days, we can calculate the total number of pages\n    total_pages = n/2 * (2*first_day_pages + (n-1)*increase_per_day) + last_day_pages\n    return int(total_pages)\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys\n    b = symbols('b')\n    # The total number of students is 40, so the number of girls is 40 - b\n    g = 40 - b\n\n    # Equation: 4 * the number of boys - 3 * the number of girls = 62\n    equation = Eq(4 * b - 3 * g, 62)\n\n    # Solve for b\n    num_boys = solve(equation, b)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # The first 11 appears after a sequence of 1, 2x2, 3x3, ... 10x10 numbers.\n    # To find the total number of elements before the first 11 appears, we sum up these numbers.\n    total_elements = sum([i * i for i in range(1, 11)])\n    \n    # The median will be in the middle of this sequence. Since there are an odd number of elements,\n    # the median will be the middle number.\n    # Since the last complete number before 11 is 10, and there are 10x10 = 100 such numbers. \n    # Thus, the median is simply 10.\n    median = 10\n\n    return median\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    # Since SASMO x 4 = OGAMS, O must be an even digit [0, 2, 4, 6, 8].\n    # S cannot be zero since it's the left-most digit of a 5-digit number.\n    # A, S, M, and O must all be unique digits.\n    for S in range(1, 10):\n        for A in range(10):\n            for M in range(10):\n                for O in range(0, 10, 2):  # O should be even\n                    if len({S, A, M, O}) == 4:  # Ensure all letters are different digits\n                        SASMO = int(f\"{S}{A}{S}{M}{O}\")\n                        OGAMS = int(f\"{O}{G}{A}{M}{S}\")\n                        if SASMO * 4 == OGAMS:\n                            return SASMO\n    return None\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    part = symbols('part')  # Define the variable for the part length cut from the ropes\n\n    equation = Eq(65 - part, 3 * (29 - part))  # Equation based on given information\n\n    solution = solve(equation, part)\n\n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    expected_value_per_roll = 1 / 6  # Probability of getting a 5 on a fair die\n    expected_times_getting_5 = total_rolls * expected_value_per_roll\n    return expected_times_getting_5\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12\n    denominator_original = 18\n    denominator_new = 6\n\n    fraction_original = numerator / denominator_original\n    ans = fraction_original * denominator_new\n\n    return ans\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Given ratios\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n\n    # Given the average condition\n    equation3 = Eq((A + B + C) / 3, 45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum = 0\n    add = True\n    for i in range(2, 55, 2):\n        if add:\n            sum += i\n            add = False\n        else:\n            sum -= i\n            add = True\n    return sum\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_cost = Eq(6 * (7 * x) + 3 * 35, 441)  # total cost of dresses and skirts equals $441\n    dress_cost = solve(total_cost, x)\n    \n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits = 5  # There are 5 odd digits: 1, 3, 5, 7, 9\n    # For a 3-digit number, there are 5 options for each digit since the digit must be odd\n    # Use the multiplication principle to get the total number of such numbers\n    ans = odd_digits ** 3\n    return ans\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it takes for the lazy one to paint the house on his own\n    x = symbols('x')\n\n    # The energetic one's work rate is 1/12 houses per day\n    # The lazy one's work rate is 1/x houses per day\n    # Together, their work rate is 1/8 houses per day\n    # The equation representing their combined work rates is (1/12) + (1/x) = (1/8)\n    equation = Eq((1/12) + (1/x), 1/8)\n\n    # Solve the equation for x\n    days_for_lazy_one = solve(equation, x)\n\n    # Return the number of days it would take the lazy one to paint the house on his own\n    return days_for_lazy_one[0]\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i ** 2) % 3\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    total_ratio = nell_ratio + joe_ratio\n\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the length and width of the original rectangle\n    length, width = symbols('length width')\n    \n    # Equation for the perimeter of the modified rectangle (length increased by 12)\n    equation = Eq((length + 12) * 2 + width * 2, 38)  \n    \n    # We assume that the width does not change, so we can find the original length\n    # by subtracting 12 from the length in this equation after we find the pair of values that satisfy it.\n    \n    # Solving the equations with the geometric constraints of a rectangle\n    solutions = solve(equation, (length, width))\n    \n    original_perimeter = 0\n    \n    # There might be more than one solution, but we need the one that makes sense for a rectangle (positive lengths)\n    for solution in solutions:\n        if solution[0] > 0 and solution[1] > 0:\n            # Calculate the original perimeter\n            original_length = solution[0]\n            original_perimeter = ((original_length) * 2 + solution[1] * 2)\n    \n    return original_perimeter\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jamie_anne, natasha = symbols('jamie_anne natasha')\n    equation1 = Eq(jamie_anne, natasha + 18)\n    equation2 = Eq(jamie_anne / natasha, 5/3)\n    \n    solutions = solve((equation1, equation2), (jamie_anne, natasha))\n    \n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be 1-9 because it's the hundred's place in aab\n        for b in range(10):  # 'b' can be 0-9\n            if (10 * a + b) + (10 * b + a) + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n    \n    # Initial condition: Sana had 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n    # Together, they had 234 coins\n    equation2 = Eq(sana + mina, 234)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n    \n    # Mina gave away 12 coins\n    mina_left = solutions[mina] - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3 / 7) * total_grapes\n    remainder_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3 / 8) * remainder_after_monday\n    remainder_after_tuesday = remainder_after_monday - sold_tuesday\n    grapes_per_bag = (3 / 4)\n    number_of_bags = remainder_after_tuesday / grapes_per_bag\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11  # the term number we want to find\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    pence_in_one_pound = 100\n    \n    total_pence = pounds * pence_in_one_pound\n    percentage = (pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # The number of lampposts Uncle Sam cycles past in 50 seconds is 11.\n    # Given that lampposts are spaced uniformly, we can calculate the time\n    # it takes to cycle from one lamppost to the next.\n    time_per_lamppost = 50 / (11 - 1)  # subtracting 1 because we need the intervals\n    \n    # Now we calculate how many lampposts he'll pass after 80 seconds.\n    lampposts_passed = 80 / time_per_lamppost\n    \n    # Uncle Sam starts at the first lamppost, so we add 1 to include it.\n    total_lampposts = int(lampposts_passed) + 1  # Using int() to round down\n\n    return total_lampposts\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Jill counts the corner flowers four times each since they are on every side.\n    # Since there are 4 corners, and each corner has one flower, she should subtract\n    # 3 flowers for each of the 4 corners from her total count to adjust for the overlap.\n    flowers_per_side = 6\n    total_sides = 4\n    corner_flowers = 4\n\n    # Calculate flowers on all sides without subtracting the corners\n    total_flowers = flowers_per_side * total_sides\n    # Subtract the overlapping corner flowers\n    total_flowers_corrected = total_flowers - (corner_flowers * 3)\n\n    return total_flowers_corrected\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    lemons_symbol = symbols('lemons')\n    total_fruits = 3/2*lemons_symbol + lemons_symbol + 1/9*3/2*lemons_symbol\n    apples_minus_lemons_eq = Eq(3/2*lemons_symbol - lemons_symbol, 12)\n    solution = solve((apples_minus_lemons_eq, lemons_symbol))\n    \n    return solution[lemons_symbol]\n  \nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # The digit in the hundreds place has a value of 800, \n    # so the digit in the hundreds place is 8\n\n    # The digit in the ones place is the sum of all factors of 4\n    # Factors of 4 are 1, 2, and 4\n    ones_place = sum([1, 2, 4])\n\n    # The digit in the thousands place is 1 more than the digit in the hundreds place, which is 8\n    thousands_place = 8 + 1\n\n    # The digit in the tens place is the difference between 8 and the digit in the ones place\n    tens_place = 8 - ones_place\n\n    # Assemble the number\n    ans = 40000 + thousands_place * 1000 + 800 + tens_place * 10 + ones_place\n    \n    return ans\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n    football_field_length = basketball_court_length + additional_length\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = original_price - 67.50\n    ana_discount_percent = (ana_discount / original_price) * 100\n    \n    return ana_discount_percent\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    from fractions import Fraction\n\n    min_value = 3/10\n    max_value = 5/16\n    s = 1\n\n    while True:\n        r_min = s * min_value\n        r_max = s * max_value\n\n        # Find the smallest integer greater than r_min\n        r = -(-int(r_min) // 1)\n\n        # Check if the obtained r/s is less than the max_value\n        if r / s < max_value:\n            break\n\n        # Increment s if no valid r is found for current s\n        s += 1\n\n    return s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    fraction = 5 / 6\n    total_two_days = first_day + second_day\n\n    total_wheels = total_two_days / fraction\n\n    return total_wheels\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # One adult takes the place of 40/24 children\n    adult_as_children = 40 / 24   \n    # Calculate the number of children's places occupied by 15 children\n    occupied_by_children = 15\n    # Calculate the number of remaining children's places\n    remaining_places_as_children = 40 - occupied_by_children\n    # Convert the remaining children's places to the equivalent number of adults\n    remaining_places_as_adults = remaining_places_as_children / adult_as_children\n    \n    return int(remaining_places_as_adults)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint\n    # find the prime factors of 28\n    factors = factorint(28)\n    # To form a perfect square, each prime factor must have an even power\n    # We calculate the smallest number by multiplying the factors that are not already to an even power\n    smallest_number = 1\n    for factor, power in factors.items():\n        if power % 2 != 0:\n            smallest_number *= factor\n    return smallest_number\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_3_minutes = 2\n    total_minutes = 12\n\n    pancakes_in_12_minutes = (pancakes_per_3_minutes / 3) * total_minutes\n\n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5 * x - 8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    num_students = 35\n    num_uniform_sizes = 3\n    \n    min_students_same_size = (num_students // num_uniform_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle_op(a, b):\n        return (a + 2) / b\n    \n    inner_triangle = triangle_op(6, 4)\n    ans = triangle_op(8, inner_triangle)\n    \n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    dvd_cost = 740\n    remaining_after_dvd = salary - dvd_cost\n    tv_cost = (3 / 4) * remaining_after_dvd\n    remaining_after_tv = remaining_after_dvd - tv_cost\n    remaining_fraction = 1 / 5\n    \n    equation = Eq(remaining_after_tv, remaining_fraction * salary)\n    \n    solution_salary = solve(equation, salary)\n    \n    return solution_salary[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent Russell's current age\n    r = symbols('r')\n\n    # Create the equation based on the problem statement\n    equation = Eq(r + 32, 4 * (r - 16))\n\n    # Solve the equation for r\n    age_now = solve(equation, r)\n\n    # Return Russell's current age\n    return age_now[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total = 120\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    for people_count in range(1, 100):  # Assuming less than 100 people for practicality\n        if (19 - 6) == people_count / 2 or (people_count - (19 - 6)) == people_count / 2:\n            return people_count\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pip_number = int(f\"{A}{B}{C}{A}\")\n                bud_number = int(f\"{A}{C}{B}{A}\")\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make one cut, so to create 5 pieces,\n    # he would need to make 4 cuts in total.\n    # Because each cut takes 2 minutes, the total time is:\n    total_time = 4 * 2\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Total spelling books given\n    total_spelling_books = 72\n    # Number of spelling books per shelf\n    spelling_books_per_shelf = 9\n    # Total shelves\n    total_shelves = 15\n\n    # Calculate number of shelves with spelling books\n    shelves_with_spelling_books = total_spelling_books // spelling_books_per_shelf\n    # Calculate number of shelves with math books\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n\n    # Math books per shelf\n    math_books_per_shelf = 4\n    # Calculate total number of math books\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n\n    return total_math_books\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    first_floor_to_fourth_time = 6  # time taken to walk from first to fourth floor\n    floors_walked_1_to_4 = 4 - 1  # number of floors passed between 1st and 4th\n\n    # Assuming the time taken to walk each floor is constant, we can calculate the time/floor\n    time_per_floor = first_floor_to_fourth_time / floors_walked_1_to_4\n\n    # Calculate total floors from first to tenth\n    total_floors_1_to_10 = 10 - 1\n\n    # Calculate the time to walk from first to tenth floor using the time/floor\n    time_first_to_tenth = time_per_floor * total_floors_1_to_10\n\n    return time_first_to_tenth\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    students_6A_original, students_6B_original, students_6A_now, students_6B_now = symbols('students_6A_original students_6B_original students_6A_now students_6B_now')\n    \n    # Initial condition\n    equation1 = Eq(students_6A_original, 4/9 * students_6B_original)\n    # After moving 3 students from 6A to 6B and 18 students from 6B to 6A, they are equal\n    equation2 = Eq(students_6A_original - 3 + 18, students_6B_original + 3 - 18)\n    # Now the numbers are equal\n    equation3 = Eq(students_6A_now, students_6B_now)\n\n    # We only need to solve for 2 equations since the last one is just stating the current equality, which is the same as equation2\n    solutions = solve((equation1, equation2), (students_6A_original, students_6B_original))\n\n    return solutions[students_6A_original]\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    chocolate_per_biscuit = 40 / 100\n    required_chocolate = chocolate_per_biscuit * 75\n    return required_chocolate\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_earnings_per_day = 90\n    days_in_a_week = 7  # Monday to Sunday\n    total_earnings = average_earnings_per_day * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    for n in range(1, 33):\n        if (32 / n) == (n / 2):\n            return n\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # The student 8 standing directly opposite student 16 implies there are 16-8 = 8 students\n    # spaced between them and therefore the circle consists of 2 * 8 = 16 students initially.\n    initial_students = 2 * 8\n\n    # The student 8 standing directly opposite student 22 implies there are 22-8 = 14 students\n    # spaced between them and therefore the circle now consists of 2 * 14 = 28 students.\n    new_total_students = 2 * 14\n\n    # The number of new students = New total students - Initial students\n    new_students = new_total_students - initial_students\n\n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances in meters\n    distance1 = 280\n    distance2 = 400\n    # Total distance minus the sum of the first two distances\n    distance3 = 800 - distance1 - distance2\n\n    # Time = Distance / Speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time in seconds\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each girl had initially\n    anna, betsy, charlene = symbols('anna betsy charlene')\n    \n    # After the exchanges, define the final amounts of marbles\n    final_anna = anna + 8\n    final_betsy = betsy - 8 + 15\n    final_charlene = charlene - 15\n\n    # Set up the equations based on the problem description\n    equation1 = Eq(final_anna + final_betsy + final_charlene, 168)\n    equation2 = Eq(final_anna/final_betsy, 2/5)\n    equation3 = Eq(final_betsy/final_charlene, 5/7)\n\n    # Solve for the initial amounts of marbles\n    solutions = solve((equation1, equation2, equation3), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n\n    ways = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n    return ways\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of lollipops and y be the original number of gum drops.\n    x, y = symbols('x y')\n\n    # Setting up the equations based on the given ratio information.\n    equation1 = Eq(x/y, 5/7)\n    equation2 = Eq((x + 120)/(y + 120), 4/5)\n\n    # Solving the system of equations\n    result = solve((equation1, equation2), (x, y))\n\n    # Calculate the total pieces of candy now by summing the new amounts of lollipops and gum drops.\n    total_candy = result[x] + 120 + result[y] + 120\n\n    return total_candy\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 268 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Dimensions of the white paper in meters\n    length = 1.36\n    width = 0.8\n\n    # Find the greatest common divisor of the two sides, it will be the side length of the square\n    side_of_square = gcd(int(length * 100), int(width * 100)) / 100 # Convert to meters\n\n    # Calculate the number of squares for each dimension\n    num_squares_length = length / side_of_square\n    num_squares_width = width / side_of_square\n\n    # Total number of squares is the product of squares in each dimension\n    total_squares = num_squares_length * num_squares_width\n\n    return int(total_squares)\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    digits = [4, 5, 7]\n    count = 0\n    \n    # Iterate over all possible three-digit numbers using the given digits\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                # Form the three-digit number\n                number = i * 100 + j * 10 + k\n                # Check if the number is odd\n                if number % 2 == 1:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    numbers_less_than_201 = range(1, 201)\n    divisible_by_5 = [num for num in numbers_less_than_201 if num % 5 == 0]\n    divisible_by_7 = [num for num in numbers_less_than_201 if num % 7 == 0]\n    divisible_by_both = [num for num in numbers_less_than_201 if num % 5 == 0 and num % 7 == 0]\n\n    # Inclusion-Exclusion Principle\n    num_divisible_by_5_or_7 = len(divisible_by_5) + len(divisible_by_7) - len(divisible_by_both)\n\n    return num_divisible_by_5_or_7\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    d, p, w = symbols('d p w')\n\n    # Chris's purchase\n    equation1 = Eq(d + 2*p + 3*w, 440)\n    # Dylan's purchase\n    equation2 = Eq(4*d + 6*p + 9*w, 1625)\n\n    solutions = solve((equation1, equation2), (d, p, w))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # n * (n - 1) matches in total, where n is the number of teams\n    # Each match is played twice, so divide total matches by 2 to get the total number of unique matches\n    # Solve for n in the equation n * (n - 1) / 2 = total_matches/2\n    \n    total_matches = 30\n    unique_matches = total_matches / 2\n\n    # Let's use quadratic formula to solve for n\n    # x^2 - x - 2*unique_matches = 0\n    # (a quadratic equation in form of ax^2 + bx + c, where a = 1, b = -1, c = -2*unique_matches)\n\n    a = 1\n    b = -1\n    c = -2 * unique_matches\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Quadratic formula: (-b ± sqrt(discriminant)) / (2*a)\n    # We only care about the positive root because the number of teams can't be negative.\n    n = (-b + discriminant**0.5) / (2 * a)\n\n    return int(n)\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    sum_positive = sum(range(2, 101, 2))\n    sum_negative = sum(range(1, 100, 2))\n    return sum_positive - sum_negative\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for num in range(1000, 9999):  # The original number must be at least four digits\n        if num - int(str(num)[:-1]) == 135:\n            return num\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    percent_A = 80\n    percent_B = 35\n    percent_neither = 10\n    percent_both = percent_A + percent_B - (100 - percent_neither)\n    \n    percent_both_decimal = percent_both / 100\n    num_students_both = 75\n    total_students = num_students_both / percent_both_decimal\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    return int(str(3) + str(2) + str(7))\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    # There is only one boat that can carry 5 people at a time.\n    # We want to minimize the trips across the river.\n\n    # To calculate the least number of trips, we can use the strategy that\n    # each trip across the river can carry 5 people and each trip back can carry 0.\n    # Therefore each round trip can effectively move 5 people to other side of river,\n    # but one person must return with the boat to bring it back.\n    # Hence, each round trip moves 5 - 1 = 4 people.\n\n    students = 37\n    boat_capacity = 5\n    # Since 4 people effectively cross the river in each round trip, we calculate how many full round trips are needed.\n    full_round_trips = (students - boat_capacity) // (boat_capacity - 1)\n    # Calculate how many students are left to cross the river after full round trips.\n    remaining_students = (students - boat_capacity) % (boat_capacity - 1) + boat_capacity\n    # Now we have to account for the final trip(s). If there's boat_capacity or less students remaining,\n    # they all can go in one final trip without anyone returning. Otherwise, it takes two more trips\n    # (one trip across with 5 students, and one final return trip).\n    if remaining_students <= boat_capacity:\n        final_trips = 1\n    else:\n        final_trips = 2\n\n    # Total trips are the round trips plus the final trips.\n    total_trips = (full_round_trips * 2) + final_trips\n\n    return total_trips\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\nimport math\n\ndef factors_count(number):\n    count = 0\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            count += 2 if number // i != i else 1\n    return count\n\ndef solution():\n    # Get all possible 9 number combinations from the 13 numbers\n    combos = list(combinations(range(1, 14), 9))\n    possibilities = []\n\n    for combo in combos:\n        factors = [factors_count(num) for num in combo]\n        # Find if exactly two numbers have the number of factors known\n        if factors.count(2) == 1 and factors.count(3) == 1:\n            alice_numbers = [num for num in combo if num % 2 != 0]\n            for alice in alice_numbers:\n                if alice - 2 in combo and alice - 3 in combo:\n                    remaining_numbers = set(range(1, 14)) - set(combo)\n                    product = math.prod(remaining_numbers)\n                    possibilities.append(product)\n\n    # Since we expect a unique solution\n    if len(possibilities) == 1:\n        return possibilities[0]\n    else:\n        return \"Ambiguous\"\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(100) / (factorial(99) + factorial(98))\n\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frank, alex, paul = symbols('frank alex paul')\n    \n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1469'\n    permut = permutations(digits)\n    total_sum = 0\n    num_of_permut = 0\n\n    for perm in permut:\n        num = int(''.join(perm))\n        total_sum += num\n        num_of_permut += 1\n\n    average = total_sum / num_of_permut\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # originally, an equal number of boys and girls\n    original_condition = Eq(girls, boys)\n    \n    # after 60 boys and 12 girls leave\n    leave_condition = Eq(girls - 12, 2 * (boys - 60))\n\n    # solve the equations\n    solutions = solve((original_condition, leave_condition), (girls, boys))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for hundreds in range(9, 10):  # greatest 1-digit number\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if tens != ones and tens != hundreds and ones != hundreds:  # all digits are different\n                    if (tens + ones) == 15 and (hundreds * 100 + tens * 10 + ones) % 2 == 0:  # sum to 15 and even number\n                        return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope_length = 20\n    long_rope_length = 5 * short_rope_length\n    total_length = short_rope_length + long_rope_length\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # km/h\n    car_speed = 120 # km/h\n\n    # Van's head start in kilometers after 3 hours\n    head_start = van_speed * 3\n\n    # Relative speed between car and van in km/h\n    relative_speed = car_speed - van_speed\n\n    # Time for car to catch up with van\n    catch_up_time = head_start / relative_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    hats = 5  # 4 hats + 1 option not to wear any hat\n    shirts = 3\n    pants = 2\n    skirt = 1\n    \n    return hats * shirts * pants * skirt\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Calculate pages per minute for each printer\n    pages_per_minute_A = 300 / 12\n    pages_per_minute_B = 300 / 10\n    \n    # Combined pages per minute when both printers are used\n    combined_pages_per_minute = pages_per_minute_A + pages_per_minute_B\n    \n    # Convert half an hour to minutes\n    half_hour_in_minutes = 30\n    \n    # Calculate the total number of pages printed by both printers in half an hour\n    total_pages = combined_pages_per_minute * half_hour_in_minutes\n    \n    return total_pages\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    ans = 72 * 43\n    return ans\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    apples = 2 * total_items / 3\n    bananas = total_items / 9\n    lemons = total_items - apples - bananas\n    \n    equation = Eq(apples - lemons, 12)\n    \n    total_items_solution = solve(equation, total_items)\n    \n    lemons_number = total_items_solution[0] - 2 * total_items_solution[0] / 3 - total_items_solution[0] / 9\n    \n    return lemons_number\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x = 0.010101...\n    # Then 100x = 1.010101...\n    # Subtracting these yields 99x = 1, so x = 1/99\n    x = 1 / 99\n\n    # Now we find the square of x\n    square_x = x * x\n\n    # The period of the product of two repeating decimals with periods a and b is at most lcm(a, b).\n    # For x * x, it's the least common multiple of the period of 1/99 squared.\n    # Since 99 is 3^2 * 11, the period of 1/99 is the lcm of periods of 1/3^2 and 1/11.\n    # 1/3^2 has a period of 1 (since 0.1 is the repeating part) and 1/11 has a period of 2,\n    # so the lcm of 1 and 2 is 2. Therefore, the period of 1/99 squared is 2^2 = 4.\n\n    period = len(str(99**2))  # the repetend length is equal to the number of digits in 99^2\n\n    return period\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month in [4, 6, 9, 11] and day > 30:\n                continue\n            if month == 2 and (day > 28):\n                continue\n            \n            date = f'{day:02d}/{month:02d}/2019'\n            count += date.count('3')\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n\n    # Create equations based on the problem statement\n    ratio_eq = Eq(durian/chocolate, 3/4) & Eq(chocolate/strawberry, 4/2)\n    price_eq = Eq(5*durian + 3*chocolate + 4*strawberry, 560)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, price_eq), (durian, chocolate, strawberry))\n\n    return solutions[durian] * 5  # Amount collected from the sale of durian puffs\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Each small cube must be 1x1x1 to have 490 of them in a 7x5x14 cuboid.\n    # The only cubes with exactly 3 painted faces are the corner cubes.\n    # Since the cuboid has 8 corners, and each corner will have exactly 3 painted faces,\n    # the answer here is straightforward.\n\n    # Number of corners in a cuboid\n    num_corners = 8\n\n    return num_corners\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(0, 10):\n            original_number = 10 * tens + ones\n            swapped_number = 10 * ones + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    interest_first_period = 1.191  # approximately 1.06^3\n    interest_second_period = 1.166  # approximately 1.08^2\n\n    # Calculate the amount after the first three years\n    amount_after_first_period = initial_investment * interest_first_period\n\n    # Calculate the total amount after the last two years\n    total_amount = amount_after_first_period * interest_second_period\n\n    # Round to the nearest hundredth\n    ans = round(total_amount, 2)\n\n    return ans\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the level of each person be A, B, C, and D\n    # Let the names be associated to the levels as follows: Z = Zachary, Y = Yvonne, X = Xavier, W = Waylon\n    A, B, C, D, Z, Y, X, W = symbols('A B C D Z Y X W')\n\n    # Setting up the equations based on the provided information:\n    # (1) A is higher than C but lower than D -> A > C, A < D\n    eq1 = A - C > 0\n    eq2 = D - A > 0\n\n    # (2) B is lower than Xavier's level -> B < X\n    eq3 = B - X < 0\n\n    # (3) D is 5 times Yvonne's level -> D = 5Y\n    eq4 = Eq(D, 5 * Y)\n\n    # (4) Z + 2 - X = Z - W -> Z - X = W - Z - 2 -> Z = (X + W) / 2\n    # (5) The level that Zachary stays is the sum of the level Yvonne and Xavier stay -> Z = Y + X\n    eq5 = Eq(Z, Y + X)\n    eq6 = Eq(Z, (X + W) / 2)\n\n    # Adding the condition that each person stays within the 18 levels\n    conditions = [\n        A > 0, A <= 18,\n        B > 0, B <= 18,\n        C > 0, C <= 18,\n        D > 0, D <= 18,\n        Z > 0, Z <= 18,\n        Y > 0, Y <= 18,\n        X > 0, X <= 18,\n        W > 0, W <= 18\n    ]\n\n    # Solving the equations together with the conditions for levels being within the apartment limits\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6) + tuple(conditions), (A, B, C, D, Z, Y, X, W), dict=True)\n\n    # Find the solution that satisfies all conditions\n    valid_solutions = [s for s in solutions if all(s[v] > 0 and s[v] <= 18 for v in [A, B, C, D])]\n\n    # There should only be one valid solution based on the problem constraints\n    if len(valid_solutions) == 1:\n        level_A = valid_solutions[0][A]\n    else:\n        level_A = \"Cannot determine\"\n\n    return level_A\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n    \n    students_school1 = 24\n    students_school2 = 36\n    students_school3 = 42\n    \n    gcd12 = gcd(students_school1, students_school2)\n    gcd123 = gcd(gcd12, students_school3)\n    \n    return gcd123\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Let the first term be 'a1' and the common difference be 'd'\n    # The sum of the first 'n' terms in an arithmetic sequence is given by:\n    # S_n = n/2 * (2*a1 + (n-1)*d)\n    # We have two equations based on the question:\n    # S_9 = 9/2 * (2*a1 + 8*d) = 99\n    # S_27 = 27/2 * (2*a1 + 26*d) = 540\n    \n    # Solving these equations for 'a1' and 'd'\n    from sympy import symbols, Eq, solve\n    \n    a1, d = symbols('a1 d')\n    \n    equation1 = Eq(9/2 * (2*a1 + 8*d), 99)\n    equation2 = Eq(27/2 * (2*a1 + 26*d), 540)\n    \n    solutions = solve((equation1, equation2), (a1, d))\n    \n    # Using the found 'a1' and 'd' to calculate the sum of first 16 terms\n    # S_16 = 16/2 * (2*a1 + 15*d)\n    \n    S_16 = 16/2 * (2*solutions[a1] + 15*solutions[d])\n    return S_16\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Each item price equation\n    eq1 = Eq(notebook + pencil_case, 6)\n    eq2 = Eq(pencil_case + eraser, 9)\n    # Total cost equation\n    eq3 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    \n    # Solving the equations\n    solved_prices = solve((eq1, eq2, eq3), (notebook, pencil_case, eraser))\n\n    return solved_prices[pencil_case]\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    donut, raisin_roll = symbols('donut raisin_roll')\n\n    # 5 raisin rolls and 6 donuts cost $14.70\n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    \n    # Each raisin roll costs 3 times as much as each donut\n    equation2 = Eq(raisin_roll, 3 * donut)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (donut, raisin_roll))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '5', '8']\n    all_permutations = list(permutations(digits))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # Method:\n    # To find the median, we first need to know the total number of terms in the sequence up to 12\n    # Each number n appears n times in the sequence\n    # The total number of terms is the sum of n from 1 to 12 which is n(n+1)/2 when n=12\n    \n    n = 12\n    total_terms = (n * (n + 1)) // 2\n    \n    # The median will be the middle number(s)\n    # If total_terms is odd, the median is the middle number\n    # If total_terms is even, the average of the two middle numbers is the median\n    # Since the pattern is consecutive numbers, and we're looking for the median of up to 12\n    # If total_terms is odd, the median is 12\n    # If total_terms is even, the median is the average of the two middle values, which would be 12\n    # The sequence is symmetric around the median in this particular setup\n\n    if total_terms % 2 == 0:\n        # If there are even number of terms, the median is the average of two middle values, which in this pattern\n        # will always be 12 as it is the highest number reached and will be the middle value in the sequence\n        median = 12\n    else:\n        # If there are odd number of terms, the median is the middle value, which is also 12\n        median = 12\n    \n    return median\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    digits = 0\n    for number in range(7, 41):\n        digits += len(str(number))\n    return digits\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let x be the number\n    # According to the problem statement:\n    # 3 * x + 1 = 22\n    # We are solving for x:\n    # x = (22 - 1) / 3\n    \n    x = (22 - 1) / 3\n    return x\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Calculate the number of games in the group stage\n    games_in_group_stage = 0\n    teams_per_group = 4\n    for group in range(8):\n        # Each team plays with each other once in a round-robin format \n        # within the group (4 choose 2 for each group)\n        games_in_group_stage += (teams_per_group * (teams_per_group - 1)) // 2\n        \n    # Calculate the number of games in the knockout stage\n    # There are 16 teams, so 15 games are needed (single elimination)\n    games_in_knockout_stage = 15\n    \n    # Total games played in the World Cup\n    total_games = games_in_group_stage + games_in_knockout_stage\n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Calculate the least common multiple (LCM) of the red and green light flashing rates\n    from math import lcm\n    flashes_per_minute_lcm = lcm(4, 6)\n\n    # Since both lights flash together every time the LCM of their flashing rates occurs,\n    # we need to count how many such instances occur in one hour.\n    minutes_in_an_hour = 60\n    flashes_together_per_hour = minutes_in_an_hour // flashes_per_minute_lcm\n\n    # Including the first and the last time they flash together\n    total_flashes_together = flashes_together_per_hour + 1\n\n    return total_flashes_together\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780\n    max_volume_per_glass = total_volume // 9\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_weight = 100 + 400\n    rice_in_first_mix = 100 * 0.50\n    rice_in_second_mix = 400 * 0.80\n    total_rice = rice_in_first_mix + rice_in_second_mix\n    concentration = total_rice / total_weight\n    return concentration * 100  # convert to percentage\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes_percent = 40 / 100\n    landscapes = total_paintings * landscapes_percent\n    still_lifes = total_paintings - landscapes\n    french_artists_landscapes = 25\n    total_french_artists = 40\n    still_lifes_french_artists = total_french_artists - french_artists_landscapes\n    still_lifes_not_french = still_lifes - still_lifes_french_artists\n    \n    return int(still_lifes_not_french)\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_in_meters_per_minute = 24\n    time_in_seconds = 300\n    time_in_minutes = time_in_seconds / 60\n\n    distance = speed_in_meters_per_minute * time_in_minutes\n\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    sum_last_5_digits = 0\n    current_term = \"2\"\n    \n    for _ in range(2017):\n        sum_last_5_digits = (sum_last_5_digits + int(current_term)) % 100000  # Keep only the last 5 digits\n        current_term += \"2\"  # Add another 2 for the next term\n    \n    return sum_last_5_digits\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    # Number of horses initially\n    horses_initial = 12 \n    # Number of days the hay can last for initial number of horses\n    days_for_initial_horses = 15 \n    # Total amount of hay (considering hay per horse per day as one unit)\n    total_hay_units = horses_initial * days_for_initial_horses \n\n    # Number of horses after change\n    horses_after = 20 \n    # Calculating the number of days the same pile can feed the new number of horses\n    # Using the unitary method, dividing the total hay units by number of horses after change\n    days_for_new_horses = total_hay_units / horses_after \n\n    # Returning the number of days \n    return days_for_new_horses \n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        first_digit = i // 1000\n        remaining = i % 1000\n        new_number = remaining * 10 + first_digit\n        if new_number - i == 4707:\n            return i\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n    years_later = 0\n\n    while oliver_current_age + lin_current_age < target_sum_age:\n        years_later += 1\n        oliver_current_age += 1\n        lin_current_age += 1\n\n    return years_later\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    difference_in_age_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n\n    return difference_in_age_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    # Initialize the smallest multiple we look for.\n    smallest_multiple = 35\n    while True:\n        # Convert the multiple to a string to check the conditions.\n        str_mult = str(smallest_multiple)\n        # Check if it ends with '35' and if the sum of its digits equals 35.\n        if str_mult.endswith('35') and sum(int(digit) for digit in str_mult) == 35:\n            return smallest_multiple\n        # Move to the next multiple of 35.\n        smallest_multiple += 35\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n\n    # Total amount had by Mrs Lim\n    total_amount = 8 * y\n\n    # Amount spent on watch\n    watch_cost = 4 * y\n\n    # Amount spent on handbag\n    handbag_cost = 20\n\n    # Amount given to each child\n    per_child = y - 5\n\n    # Equation for the amount given to the 2 children combined\n    amount_given_to_children = 2 * per_child\n\n    # Setting up the equation based on the information given:\n    # Total amount = Amount spent on watch + Amount spent on handbag + Amount given to children\n    equation = Eq(total_amount, watch_cost + handbag_cost + amount_given_to_children)\n\n    # Solve for y\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    total_days = 0\n    for year in range(1901, 2000 + 1):\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            total_days += 366\n        else:\n            total_days += 365\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    money = 100\n    for day in range(1, 16):\n        if day % 2 == 0:\n            money -= 8\n        else:\n            money += 10\n    return money\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # The strikes form an arithmetic sequence: 1, 2, 3, ..., 12\n    first_term = 1\n    last_term = 12\n    num_terms = 12\n    \n    # Sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    total_strikes = num_terms / 2 * (first_term + last_term)\n    \n    return int(total_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_value = 40  # total value in pence\n    value_per_coin = 10  # value of one ten-pence coin in pence\n\n    number_of_coins = total_value / value_per_coin\n    total_weight = weight_per_coin * number_of_coins\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # Total number of buttons they have\n    equation1 = Eq(james + nina, 22)\n    \n    # After Nina gave 4 buttons to James, they have the same number of buttons\n    equation2 = Eq(nina - 4, james + 4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for a mango, a pear and an apple\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    # Get the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    marks_per_correct = 5\n    deduct_per_wrong = 2\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * marks_per_correct - wrong * deduct_per_wrong == 23:\n            return correct\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults_to_children = 1 / 4\n\n    adults = total_people / (1 + ratio_adults_to_children)\n    return int(adults)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    g = 9.81  # acceleration due to gravity (m/s^2)\n    angle = 37  # angle in degrees\n    v0 = 10  # initial speed (m/s)\n\n    # Convert angle from degrees to radians for math functions\n    angle_radians = math.radians(angle)\n\n    # Calculate the vertical component of the initial velocity\n    v0y = v0 * math.sin(angle_radians)\n\n    # Use the energy conservation principle (kinetic energy converted to potential energy)\n    # 0.5 * m * (v0y)^2 = m * g * height (mass cancels out)\n    # height = (v0y)^2 / (2 * g)\n    height = (v0y ** 2) / (2 * g)\n\n    # Use trigonometry to find the distance along the ramp (hypotenuse)\n    # Since sin(angle) = height / hypotenuse\n    # hypotenuse = height / sin(angle)\n    hypotenuse = height / math.sin(angle_radians)\n\n    # Return the computed height and distance along the ramp\n    return (height, hypotenuse)\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    candies = 35\n    last_seat_number = (candies - 1 + 3) % 9\n    return last_seat_number if last_seat_number != 0 else 9\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 3 != 0 and num % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # By Pigeonhole Principle, in the worst case scenario, Sheila takes out\n    # all 5 blue balls, then all 4 orange balls. At this point, she has\n    # neither 2 groups of 4 balls of the same colour. The next ball she\n    # takes out must either create a group of 4 blue balls or 4 orange balls\n    # along with the existing balls or be a yellow ball. Therefore, she needs\n    # to take out 5 (blue) + 4 (orange) + 1 (the next one, which ensures at\n    # least 4 of one color) = 10 balls to ensure 2 groups of 4 balls of the\n    # same colour.\n\n    return 10\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + (30 * 30) + (30 * 30 * 30)\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    total_players = 64\n    players_per_match = 4\n\n    # Since 3 players get knocked out in each match, we need 1 match for every 3 eliminations\n    # to eventually have 1 player left (the winner). Hence, matches required are:\n    matches_required = (total_players - 1) // (players_per_match - 1)\n\n    return matches_required\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for i in range(1000, 10000):\n        s = str(i)\n        new_number = int(s[1:] + s[0])\n        if new_number - i == 4707:\n            return i\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    number_of_flour_bags = 4\n\n    flour_bags_weight = total_weight - cheese_weight\n    weight_per_bag = flour_bags_weight / number_of_flour_bags\n\n    return weight_per_bag\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # Given sum of the first 9 terms (S9) and sum of the first 23 terms (S23)\n    S9 = 72\n    S23 = 736\n    \n    # The sum of an arithmetic sequence can be found using the formula:\n    # S_n = n/2 * (2a + (n - 1)d) where n is the term, a is the first term,\n    # and d is the common difference.\n    \n    # From the given, we can set up two equations:\n    # 72 = 9/2 * (2a + (9 - 1)d)\n    # 736 = 23/2 * (2a + (23 - 1)d)\n    \n    # We will use the facts that S23 - S9 gives us the sum of terms 10 to 23,\n    # which is 14 terms. So S14 = S23 - S9.\n    S14 = S23 - S9\n    \n    # Now we know the sum of the first 14 terms and we can use this to find\n    # the sum of the first 16 terms, which includes the first 9 terms and\n    # the next 7 terms (from 10 to 16).\n    # S16 = S9 + 7/2 * (2a + 9d + 6d)\n    # S16 = S9 + 7/2 * (2a + (16 - 1)d)\n    # But we can also get this sum directly from S14 and the next two terms:\n    # S16 = S14 + [a + (14-1)d] + [a + (15-1)d]\n    \n    # We can find 'a' and 'd' from our first two equations:\n    # 72 = (9*2a + 8d)/2 * 9\n    # 736 = (23*2a + 22d)/2 * 23\n    # Simplifying both equations, we get:\n    # 72 = 9*a + 36*d\n    # 736 = 23*a + 253*d\n    \n    # By solving these two equations we can find 'a' and 'd':\n    a = (736*9 - 72*23) / (9*22 - 8*23)\n    d = (72 - 9*a) / 36\n\n    # Now we calculate the sum of the first 16 terms using our derived values for a and d:\n    S16 = 16/2 * (2*a + (16 - 1)*d)\n\n    return S16\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assuming you want to know how to convert currencies\n    # and we need the conversion rate from £ to Russian Ruble (RUB)\n    # For the sake of this example, let's assume the conversion rate is\n    # £1 = 90 RUB (Please replace with the current conversion rate)\n    conversion_rate = 90  # This should be updated with the current rate\n    pounds_spent = 14\n    rubles_spent = pounds_spent * conversion_rate\n    \n    # Assuming a CD in St Petersburg costs 500 RUB (Please replace with the current price)\n    cd_price_st_petersburg = 500  # This should be updated with the current price\n    number_of_cds = rubles_spent // cd_price_st_petersburg\n    \n    return int(number_of_cds)\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solution():\n    possible_ages = [28, 39, 52, 84]\n    for age in possible_ages:\n        if is_prime(age + 1) and (age - 3)**0.5 % 1 == 0 and ((age + 12)**(1/3) % 1 == 0):\n            return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    result = 168 * 91\n    return result\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Worst case scenario is taking all M&M's of the most frequent color first.\n    # In this case, it is the brown M&M's, which are 5 in number.\n    # After taking all brown M&M's, we take one more and we are guaranteed to have\n    # at least 2 different colors because only red and yellow will be left to pick from.\n    brown = 5\n    ans = brown + 1  # Take all brown ones and one more to guarantee second color.\n    return ans\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Ratio of speeds of Andrew and Bernice when Andrew is at level 5 and Bernice at level 3\n    # Since they started at the same time and Bernice is 2 levels behind, the ratio of speeds is 5:3\n    speed_ratio_andrew_bernice = 5 / 3\n    \n    # Ratio of speeds of Bernice and Cassandra when Bernice is at level 6 and Cassandra at level 10\n    # Since they started at the same time and Cassandra is 4 levels ahead, the ratio of speeds is 6:10 or 3:5\n    speed_ratio_bernice_cassandra = 3 / 5\n    \n    # To find the ratio of speeds of Andrew and Cassandra, we multiply the two ratios\n    speed_ratio_andrew_cassandra = speed_ratio_andrew_bernice * speed_ratio_bernice_cassandra\n    \n    # When Cassandra is at level 19, we use the ratio to find which level Andrew will be at\n    # Level of Andrew = Speed ratio of Andrew:Cassandra * Level of Cassandra\n    level_andrew = speed_ratio_andrew_cassandra * 19\n    \n    return int(level_andrew)\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n\n    for x in range(100):  # Arbitrary range limit for practical reasons\n        if new_operation(2, new_operation(x, 4)) == 59:\n            return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    num_repetitions = 43 // len(pattern)\n    extra_digits = 43 % len(pattern)\n    \n    sum_repetitions = sum(int(digit) for digit in pattern) * num_repetitions\n    sum_extra = sum(int(digit) for digit in pattern[:extra_digits])\n    \n    total_sum = sum_repetitions + sum_extra\n    \n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    minutes_per_quiz = 30\n    num_quizzes = 4\n    total_minutes = minutes_per_quiz * num_quizzes\n    hours = total_minutes / 60\n    return hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres_per_kilometre = 100000\n    centimetres = kilometres * centimetres_per_kilometre\n    return centimetres\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    # Let x be the number of years after which the sum of the ages of grandsons \n    # will be equal to the age of grandpa.\n    grandpa_current_age = 61\n    grandsons_ages = [4, 7, 12]\n\n    # Assume after x years the condition holds true\n    # Then, we have the formula: grandpa_current_age + x = sum(grandsons_ages) + 3*x\n    # Simplifying, we get: 2 * x = grandpa_current_age - sum(grandsons_ages)\n    x = (grandpa_current_age - sum(grandsons_ages)) / 2\n    \n    return x\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    count = 0\n    # We can only have from 0 to 8 pieces of 5p since 8 * 5p is 40p and that's the max we need\n    for num_5p in range(0, int(40 / 5) + 1):\n        remaining = 40 - num_5p * 5\n        # If the remaining amount is divisible by 10, we have a valid combination\n        if remaining % 10 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # which is -4\n\n    # The first negative term is when the term is less than 0.\n    # This follows the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * difference\n    # 0 > first_term + (n - 1) * difference\n    # -first_term > (n - 1) * difference\n    # -(first_term/difference) - 1 > n - 1 \n    # n < -(first_term/difference) - 1 + 1\n    # n < -(first_term/difference)\n    \n    # Since we're interested in full terms, we take the floor of the value\n    n = -(first_term // difference)\n\n    return n\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n\n    vases_needed = -(-flowers // vase_capacity)  # Using ceiling division for at least number\n\n    return vases_needed\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_driven_before_turning_back = 40 / 60\n\n    # Given speeds in km/h\n    speed_shafur = 54\n    speed_samuel = 66\n\n    # Distance driven by Samuel before turning back\n    distance_samuel_before_turning_back = speed_samuel * time_driven_before_turning_back\n    \n    # Time taken by Shafur to reach Town Y after Samuel has turned back\n    time_shafur_reaches_Y = distance_samuel_before_turning_back / speed_shafur\n\n    # Time taken by Samuel to return to Town X and then reach Y\n    # Since time to refill is negligible, we ignore it\n    time_samuel_returns_and_reaches_Y = (2 * time_driven_before_turning_back) + time_shafur_reaches_Y\n\n    # Distance Town X to Town Y using Samuel's travel\n    distance_X_to_Y = speed_samuel * time_samuel_returns_and_reaches_Y\n\n    return distance_X_to_Y\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_price, table_price = symbols('chair_price table_price')\n    # equation for total cost\n    equation1 = Eq(4 * table_price + 9 * chair_price, 504)\n    # equation for the price relationship\n    equation2 = Eq(table_price, 3 * chair_price)\n\n    solutions = solve((equation1, equation2), (chair_price, table_price))\n\n    return solutions[chair_price]\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Calculate each term of the expression\n    term1 = (7 / -3.333333333333333) / (-0.027 ** (1/3))\n    term2 = (2**3 / 4**2) / (0.125 * (1.8 - (0.2 * 7)))\n    term3 = (0.1 / 0.142857) + (2 * 0.3)\n    \n    # Sum the terms to get the result\n    ans = term1 + term2 - term3\n  \n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + (3 - (38 % 3)) % 3)  # first multiple of 3 >= 38\n    last_multiple = 81 - (81 % 3)  # last multiple of 3 <= 81\n\n    num_multiples = (last_multiple - first_multiple) // 3 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip, bud + 50)\n    equation2 = Eq((pip - 0.8 * pip) / (bud - (3/4) * bud), 6/5)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "from itertools import product\n\ndef solution():\n    # Start from 100 to get the smallest 3-digit number\n    for i in range(100, 1000):\n        # Compute the product of the digits\n        digits = [int(d) for d in str(i)]\n        product_of_digits = digits[0] * digits[1] * digits[2]\n        # Check if the product of the digits is also a 3-digit number\n        if 100 <= product_of_digits <= 999:\n            return i\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_in_morning = morning_fruit - afternoon_fruit\n    return more_fruit_in_morning\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    # Remaining phones after February sales\n    remaining_after_feb = 78\n    # Solve for remaining phones before February sales\n    remaining_after_jan = (remaining_after_feb - 13) * 2\n    # Solve for initial number of phones\n    initial_phones = (remaining_after_jan + 22) * 2\n    return initial_phones\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    games_played = num_people - 1  # In a knockout tournament, each game eliminates one person\n    \n    return games_played\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    pencils = (total_items - more_pens) // 2\n    return pencils\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    jan_to_apr = 500 * 4\n    may_to_jul = 300 * 3\n    aug_to_sep = 400\n    oct_to_dec = 300 * 3\n    \n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    avg_per_month = total_spent / 12\n    \n    return avg_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    apples_in_boxes = 5 * 9\n    apples_from_bud = 16\n\n    total_apples = apples_in_boxes + apples_from_bud\n\n    return total_apples\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Evaluate the sum of the full pyramid without missing elements\n    # Sum of sequence from 3 to 10 is ((first_term + last_term) * number_of_terms) / 2\n    first_half_sum = ((3 + 10) * (10 - 3 + 1)) // 2\n    \n    # Sum of sequence from 10 back to 3 is the same as from 3 to 10\n    second_half_sum = first_half_sum\n\n    # Substract the missing 10 at the peak\n    total_sum = first_half_sum + second_half_sum - 10\n\n    return total_sum\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            ans = count\n    return ans\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament, every game eliminates one player.\n    # With 5 players, to determine a single winner, we will need 4 games,\n    # because after each game one player is knocked out.\n    # Hence, the total number of games is one less than the number of players.\n    \n    num_players = 5\n    num_games = num_players - 1\n    \n    return num_games\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # After transactions\n    equation1 = Eq(anna + 8, 2 * (betsy - 8 + 15))\n    equation2 = Eq(betsy - 8 + 15, 5 * (charlene - 15))\n    equation3 = Eq(anna + 8 + (betsy - 8) + (charlene - 15), 168)\n\n    solutions = solve((equation1, equation2, equation3), (anna, betsy, charlene))\n\n    # Betsy's marbles at first (before transactions)\n    betsy_initial = solutions[betsy] - 8 + 15\n\n    return betsy_initial\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths = 18\n    whole_number = (three_sevenths * 7) / 3\n    five_sixths = (whole_number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # The 8th shelf from the front implies there are 7 shelves before it.\n    # The 10th shelf from the back implies there are 9 shelves after it.\n    shelves_before = 7\n    shelves_after = 9\n\n    # Total number of shelves is the sum of shelves_before, shelves_after, and the shelf itself.\n    total_shelves = shelves_before + shelves_after + 1\n\n    return total_shelves\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n    \n    # Factor 2016 into its prime factors\n    factors = factorint(2016)\n    factor_list = []\n\n    # Expand the prime factors into a list\n    for prime, occ in factors.items():\n        factor_list.extend([prime] * occ)\n    \n    # Find all ways to split the factors into four groups (ages of the children)\n    # Ensuring each child has an age under 10\n    ages = []\n    for a in factor_list:\n        for b in factor_list:\n            for c in factor_list:\n                for d in factor_list:\n                    if a * b * c * d == 2016 and \\\n                       len(set([a, b, c, d])) == 4 and \\\n                       all(x < 10 for x in [a, b, c, d]):\n                        ages.append((a, b, c, d))\n    \n    # Account for distinct permutations by using a set\n    unique_ages = set(ages)\n    # Since we need the sum of ages, we just need one of the unique sets\n    age_sum = sum(unique_ages.pop())\n    \n    return age_sum\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    total_rows = 7 + 4 - 1\n    total_columns = 3 + 7 - 1\n    total_students = total_rows * total_columns\n    return total_students\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    # Let x be the amount of money Mrs Koh had.\n    # If she wanted to put $70 into each of the four red packets, the total required would be 4 * $70.\n    # Since she would be short of $15, the equation is: x + $15 = 4 * $70\n    \n    # Calculate how much money Mrs Koh had by rearranging the equation: x = 4 * $70 - $15\n    money_needed_for_packets = 4 * 70\n    short_by = 15\n    money_mrs_koh_had = money_needed_for_packets - short_by\n    \n    return money_mrs_koh_had\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Let x be the current combined age of the 2 dogs\n    # Four years ago, the combined age was (x - 4 * 2) = 10\n    # We solve for x: x - 8 = 10 => x = 10 + 8 => x = 18\n    \n    current_combined_age = 18  # The current combined age of the 2 dogs\n    \n    # In 2 years, the combined age will be current_combined_age + 2 * 2\n    future_combined_age = current_combined_age + 2 * 2\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    return 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for number of 5p, 10p, and 20p coins.\n    n5p, n10p, n20p = symbols('n5p n10p n20p')\n\n    # Given relationships between the number of coins.\n    equation1 = Eq(n20p, 2 * n10p)\n    equation2 = Eq(n5p, n10p / 2)\n\n    # The total value in pence (100 pence = £1).\n    total_value_pence = 15.75 * 100\n\n    # Total value equation.\n    equation3 = Eq(5 * n5p + 10 * n10p + 20 * n20p, total_value_pence)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (n5p, n10p, n20p))\n\n    # Return the number of 20p coins.\n    return solutions[n20p]\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy has as many sisters as brothers, which means:\n    # sisters for a boy = boys - 1\n    # brothers for a boy = girls\n    equation1 = Eq(girls, boys - 1)\n    \n    # Each girl has half as many sisters as brothers, which means:\n    # sisters for a girl = girls - 1\n    # brothers for a girl = boys\n    # (girls - 1) is half of boys, so 2*(girls - 1) = boys\n    equation2 = Eq(2 * (girls - 1), boys)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Andy's speed for the first 30 minutes is x (in mph), so he drives x/2 miles\n    # Andy's speed for the second 30 minutes is (x-20) mph, so he drives (x-20)/2 miles\n    # Andy's speed for the last 30 minutes is (x+10) mph, so he drives (x+10)/2 miles\n    # The total miles driven is 70\n\n    equation = Eq((x/2) * 0.5 + ((x-20)/2) * 0.5 + ((x+10)/2) * 0.5, 70)\n\n    solution = solve(equation, x)\n\n    return solution[0]  # Return the value of x\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    fraction_eaten = 3/5\n    remaining = 60\n    original_mass = remaining / (1 - fraction_eaten)\n    \n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    end_date = start_date + timedelta(weeks=3)\n\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) / difference) + 1\n\n    return int(num_students)\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = 12 + sally\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base10_number = 96\n    base6_number = ''\n    \n    while base10_number > 0:\n        remainder = base10_number % 6\n        base10_number //= 6\n        base6_number = str(remainder) + base6_number\n    \n    ans = int(base6_number)\n    return ans\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    apples = 27\n    children = 5\n\n    # To minimize the number of apples for the kid who gets the most,\n    # we need to distribute the apples as evenly as possible to the other children first.\n    # Start with giving each of the other children one apple.\n    remaining_apples = apples - children\n\n    for apples_for_most in range(1, remaining_apples):\n        # Distribute remaining apples to the other 4 children.\n        # Since each child gets a different amount, try distributing\n        # the apples in a sequence: 1, 2, ... with a minimum of 1 apple per child.\n        \n        min_apples_for_others = sum(range(1, children))  # Sum of sequence 1 to 4.\n        if remaining_apples - apples_for_most >= min_apples_for_others \\\n            and len(set(range(1, children)) | {apples_for_most}) == children:\n            # We have found a valid distribution where each child has a different amount.\n            # apples_for_most will be the lowest possible amount for the child with most apples.\n            return apples_for_most\n\n    return 0   # If no solution is found, but there should be one.\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_meal_cost = 6 * 5.50\n    tip_amount = total_meal_cost * 0.10\n    total_cost = total_meal_cost + tip_amount\n    change_received = 50 - total_cost\n    return round(change_received, 2)\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    depth = 10\n    climb = 4\n    slide = 2\n    day = 0\n    current_height = 0\n    \n    while current_height < depth:\n        day += 1\n        current_height += climb\n        \n        if current_height >= depth:\n            break\n        current_height -= slide\n\n    return day\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # Since the one who takes out the last marble loses,\n    # reverse calculate the best scenario such that Belinda is forced to take the last marble.\n    # This would happen if Jason leaves 4 marbles to Belinda, since whatever she takes (1, 2, or 3),\n    # Jason can take the remaining and make sure Belinda gets the last one.\n    # From there, we calculate backwards by multiples of 4 (the maximum difference that can be created in a turn)\n    # to find out what the best first move is.\n\n    total_marbles = 26\n\n    # Find the marble count that leads Belinda to pick the last one\n    # starting from a count that Jason could leave to Belinda on his turn before the final round\n    # and stepping backwards by 4 (since each round removes at most 3 marbles)\n    # until you reach a count that is reachable in the first turn (1-3)\n    for marbles_left in range(total_marbles - 4, 0, -4):\n        if 1 <= total_marbles - marbles_left <= 3:\n            return total_marbles - marbles_left\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total_sum = 0\n    n = 1\n    while True:\n        total_sum += 5 * n\n        if total_sum % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "import itertools\n\ndef solution():\n    result = []\n    for numbers in itertools.combinations(range(1, 25), 7):\n        if sum(numbers) == 25:\n            result.append(numbers)\n    return len(result), result\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # The probability that the alcoholic is not at one bar is 10% (since he drinks 90% of the day).\n    # Therefore, the probability that he is not at two bars is 10% * 10%.\n    # The probability that he is at the third bar is the remaining probability.\n    not_at_two_bars = 0.1 * 0.1\n    at_third_bar = 1 - not_at_two_bars\n\n    return at_third_bar\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths_of_number = 18\n    number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let g be the growth of grass per week and c be the capacity of the pasture for 6 weeks.\n    # 120 cows eating for 12 weeks + the grass that grows in 12 weeks = pasture capacity\n    # 150 cows eating for 8 weeks + the grass that grows in 8 weeks = pasture capacity\n    # We need to find the number of cows x that eat for 6 weeks + the grass that grows in 6 weeks = pasture capacity\n    # So, we have the following equations:\n    # 120 * 12 + 12 * g = c\n    # 150 * 8 + 8 * g = c\n    # x * 6 + 6 * g = c\n    # We solve the system of linear equations to find g and then x.\n    \n    # The difference between the two scenarios gives us g.\n    # 120 * 12 - 150 * 8 = 4 * g\n    g = (120 * 12 - 150 * 8) / 4\n    \n    # Now we can determine the total capacity c of the pasture.\n    c = 120 * 12 + 12 * g\n    \n    # And finally, we calculate the number of cows (x) that the pasture can sustain for 6 weeks.\n    x = c / 6 - g\n    \n    return int(x)\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    ans = end_date.strftime('%d/%m/%Y')\n    return ans\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers, trees = symbols('volunteers trees')\n\n    equation1 = Eq(volunteers * 4 + 5, trees)\n    equation2 = Eq((volunteers - 1) * 7, trees)\n\n    solutions = solve((equation1, equation2), (volunteers, trees))\n\n    return solutions\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    boys_more_than_girls = 55\n    total_students = 0\n\n    # Start with a square of boys and incrementally check for the condition\n    # where there are 55 more boys than girls as we increase the square size.\n    side_length = 1\n    while True:\n        boys = side_length * side_length\n        if side_length > 1:\n            girls = (side_length - 2) * (side_length - 2)\n        else:\n            girls = 0\n        if boys - girls == boys_more_than_girls:\n            total_students = boys + girls\n            break\n        side_length += 2  # Increase by 2 for the next full layer of boys and girls\n\n    return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of stickers in Bag A, then (270 - x) will be in Bag B\n    x = symbols('x')\n    # After moving 56 stickers from Bag A to Bag B, we have the equation\n    # (Bag B stickers + 56) / (Bag A stickers - 56) = 3/2\n    # That is: (270 - x + 56) / (x - 56) = 3/2\n    equation = Eq(((270 - x + 56) / (x - 56)), 3/2)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Since we are looking for the initial number of stickers in Bag A\n    return solution[0]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    cross_multiply = 14 * 10\n    missing_number = cross_multiply / 21\n    return missing_number\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    current_term = 41\n    difference = 6\n\n    next_term = current_term + difference\n\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    total_children = 74\n    bars_per_packet = 8\n\n    packets_needed = (total_children + bars_per_packet - 1) // bars_per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 5 / 100 * 180\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(number):\n        return sum(i for i in range(1, number) if number % i == 0)\n\n    num = 2  # start from the smallest positive integer\n    while True:\n        if sum_of_factors(num) == num:  # comparing sum of factors to the number itself\n            return num\n        num += 1  # try next number\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    sum_even = sum(range(14, 31, 4))  # Calculate the sum of 14, 18, 22, 26, 30\n    sum_odd = sum(range(16, 29, 4))   # Calculate the sum of 16, 20, 24, 28\n    ans = sum_even - sum_odd          # Subtract the sum_odd from sum_even\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term = 10\n    last_shown_term = 31\n    difference = 3\n\n    first_term = last_shown_term - (term - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    num_boxes = (total_cakes + cakes_per_box - 1) // cakes_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_remaining = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_remaining // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    total_muffins = 3998\n    lovelle_sold = 462\n    makayla_sold_fraction = 2/5\n\n    # Lovelle's muffins after selling\n    lovelle_after = lovelle - lovelle_sold\n    # Makayla's muffins after selling 2/5th of her muffins\n    makayla_after = makayla - makayla * makayla_sold_fraction\n\n    # Equation 1: The sum of Lovelle's and Makayla's muffins initially\n    equation1 = Eq(lovelle + makayla, total_muffins)\n    # Equation 2: Lovelle and Makayla have the same number of muffins after selling\n    equation2 = Eq(lovelle_after, makayla_after)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total amount of money Irene had initially as 'x'.\n    x = symbols('x')\n\n    # According to the problem, she spent 1/4 on a book\n    book_cost = x / 4\n\n    # and 2/7 on a bag.\n    bag_cost = 2 * x / 7\n\n    # Together, the book and bag cost $225.\n    equation = Eq(book_cost + bag_cost, 225)\n\n    # Now we solve for x.\n    initial_amount = solve(equation, x)\n\n    return initial_amount[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # In order to maximize the number of different positive integers that add up to 30,\n    # we need to start from 1 and keep adding the next integer until we cannot add the next integer without exceeding 30.\n    # This is because using the smallest numbers will allow us to use more numbers.\n\n    total = 0  # This will keep the running total sum of all integers.\n    i = 1  # This will represent the current smallest integer we can add.\n    \n    # We loop until the next integer to add would exceed the total of 30.\n    while total + i <= 30:\n        total += i  # Add the integer to the total sum.\n        i += 1  # Move to the next integer by incrementing i.\n    \n    # When the loop exits, i-1 will represent the number of unique positive integers we've added that equals or is below 30.\n    return i - 1\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Cards are in the ratio 4:8:12:16, so the maximum without getting 10 of the same colour would be:\n    # 4 (4 cards of 1st colour) + 8 (8 cards of 2nd colour) + 9 (9 cards of 3rd colour) before getting the 10th card.\n    max_without_ten = 4 + 8 + 9\n\n    # To ensure we have 10 cards of the same colour, we must take one more card.\n    at_least_cards = max_without_ten + 1\n\n    return at_least_cards\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    number_of_daffodils = 8\n    gap_between_daffodils = 1.1\n    number_of_gaps = number_of_daffodils - 1  # one less gap than daffodils\n    \n    length_of_row = (number_of_daffodils * gap_between_daffodils) + (gap_between_daffodils * number_of_gaps)\n    return length_of_row\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    number_of_pieces = 30\n\n    length_per_piece = total_length / number_of_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    num_boxes = 1450\n    books_per_box = 258\n    total_books = num_boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    # Since the boxes are identical and cannot contain the same number of stickers,\n    # we only need to consider unique distributions (a, b, c) where a < b < c\n    # and a + b + c = 9. `a` starts at 1 because each box needs at least one sticker.\n    for a in range(1, 9):\n        for b in range(a + 1, 9):\n            c = 9 - (a + b)\n            if c > b:  # Ensure c is strictly greater than b to maintain uniqueness\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let's assume Jane drinks x ml. Then Alex drinks x + 0.5*x = 1.5*x ml.\n    # Since they finish the bottle together, x + 1.5*x = total_juice\n    # Solving for x, we get 2.5*x = total_juice\n    jane_drinks = total_juice / 2.5\n    alex_drinks = jane_drinks * 1.5\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    minutes_taken = distance / speed\n    return int(minutes_taken)\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(12, 4)  # Total ways to choose 4 students out of 12\n    ways_with_girls_only = comb(5, 4)  # Ways to choose 4 students out of 5 girls only\n    ways_with_at_least_one_boy = total_ways - ways_with_girls_only  # Subtracting the ways with only girls\n    return ways_with_at_least_one_boy\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    missing_number = one_fourth_of_16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n\n    fruits_each_friend = (pears + strawberries) / friends\n\n    return fruits_each_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    bag_cost = 60\n    remaining_fraction = 1 - 2/5\n    initial_fraction_of_bag = 1/4 * remaining_fraction\n\n    initial_money = bag_cost / (2/5) / initial_fraction_of_bag\n\n    return initial_money\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    # Initialize variables\n    total_digits = 157\n    pages = 0\n    digits_used = 0\n\n    # Loop through page number sizes by number of digits\n    for digit_count in range(1, 4):  # 1 for 1-9, 2 for 10-99, 3 for 100-999\n        # Number of pages that can be represented with digit_count digits\n        num_pages = 9 * 10**(digit_count - 1)\n        # Number of digits needed to represent those pages\n        needed_digits = digit_count * num_pages\n\n        # Check if we have enough digits for the current digit_count\n        if digits_used + needed_digits < total_digits:\n            # If we have enough digits, add the number of pages and update the digits used\n            pages += num_pages\n            digits_used += needed_digits\n        else:\n            # If not enough digits, calculate the remaining pages and break the loop\n            remaining_digits = total_digits - digits_used\n            pages += remaining_digits // digit_count\n            break\n\n    return pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Iterate through odd numbers between 200 and 241\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = ((70 // 7) - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total length of the road = (number of gaps) * (distance between trees)\n    # Since there's a tree at each end, the number of gaps between the trees is (number_of_trees - 1)\n    total_length = (41 - 1) * 3\n    \n    # Since there's a lamp post at each end of the road, we need to calculate the number of 8m intervals along the total length\n    # Number of gaps between lamp posts = total_length // distance_between_lamp_posts\n    # The number of lamp posts = (number of gaps between lamp posts) + 1\n    number_of_lamp_posts = (total_length // 8) + 1\n\n    return number_of_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            price = int(f\"{i}679{j}\")\n            if price % 72 == 0:\n                return price // 72\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_B = symbols('candies students_B')\n    students_A = 2 * students_B\n\n    equation1 = Eq(students_A * 4 + 20, candies)\n    equation2 = Eq(students_B * 6 - 16, candies)\n\n    solutions = solve((equation1, equation2), (candies, students_B))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # The length of the train in meters\n    speed = 40          # The speed of the train in meters per second\n\n    time = train_length / speed  # Time taken to pass the pole in seconds\n\n    return time\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # loop through all 2-digit numbers\n        if (number % 10 + number // 10) % 5 == 0:  # if the sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    plants = intervals + 1\n    return plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    money_spent_on_dvd = total_money / 3\n    remaining_money = total_money - money_spent_on_dvd\n    money_spent_on_book = remaining_money * 0.25\n    money_left = remaining_money - money_spent_on_book\n    \n    return money_left\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbit_count = 32\n    years = 3\n    \n    for year in range(years):\n        # Rabbits multiply by 3 every year\n        initial_rabbit_count *= 3\n        # Wolves eat half the rabbits\n        initial_rabbit_count /= 2\n\n    return int(initial_rabbit_count)\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Speeds are given in miles per hour\n    speed1 = 60\n    speed2 = 30\n\n    # Distance traveled at each speed\n    distance1 = 1  # miles\n    distance2 = 1  # miles\n    \n    # Time taken to travel each distance\n    time1 = distance1 / speed1  # time in hours\n    time2 = distance2 / speed2  # time in hours\n\n    # Total distance and total time\n    total_distance = distance1 + distance2\n    total_time = time1 + time2\n\n    # Average speed formula: total distance / total time\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    desired_amount = 12\n    num_washes = desired_amount // amount_per_wash + 1\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    return 2 ** 4\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for number in range(121, 136):\n        if number % 4 == 0 and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    natural_number = symbols('natural_number')\n\n    # Set up the equations based on the given information\n    # We set each division as (dividend - remainder) which should be divisible by the natural number\n    equation1 = Eq(natural_number * (symbols('x1')) - (290 - a), 0)\n    equation2 = Eq(natural_number * (symbols('x2')) - (235 - (a + 2)), 0)\n    equation3 = Eq(natural_number * (symbols('x3')) - (200 - (a + 5)), 0)\n\n    # As we are looking for a common number, we can use the gcd function from sympy\n    from sympy import gcd\n\n    # The expressions we are interested in are those which represent the subtracted remainders.\n    # We subtract the remainders from the given numbers and calculate the gcd.\n    expr1 = 290 - a\n    expr2 = 235 - (a + 2)\n    expr3 = 200 - (a + 5)\n\n    # Using SymPy's solve to find the value of 'a' that satisfies gcd condition (all expressions divisible by the same number)\n    solutions = solve([expr1 - expr2, expr2 - expr3], a)\n    a_value = solutions[a]\n\n    # Now compute the gcd of the three expressions, substituting 'a' with our solution\n    natural_num = gcd(expr1.subs(a, a_value), gcd(expr2.subs(a, a_value), expr3.subs(a, a_value)))\n\n    return natural_num\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    daily_earnings = 70\n    days_worked = 6\n\n    total_earnings = daily_earnings * days_worked\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the smaller angle, so 2*x will be the larger unknown angle\n    x = symbols('x')\n    \n    # Equation representing the sum of angles in a triangle is 180 degrees\n    # Since one angle is a right angle (90 degrees), we subtract it from 180\n    # We then equal to the sum of the two unknown angles x and 2x\n    equation = Eq(x + 2*x, 180 - 90)\n\n    # Solve for x\n    angle = solve(equation, x)\n    \n    # The largest angle is 2 times the smaller angle\n    largest_angle = 2 * angle[0]\n\n    return largest_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        I, S, P = perm[0], perm[1], perm[2]\n        if P == 0 or I == 0:  # Disallow leading zero\n            continue\n        IS = 10 * I + S\n        PI = 10 * P + I\n        if 4 * IS == PI:\n            return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula: sum = n/2 * (first_term + last_term)\n    # where n is the number of terms. Here, n = 9 (consecutive natural numbers), and sum = 765.\n    # We need to find the middle term, which in an ordered arithmetic sequence of odd count is also the average.\n    \n    sum_of_ages = 765\n    num_elderly_members = 9\n    \n    # Calculate the average age which would also be the middle term's age\n    # average_age = sum_of_ages / num_elderly_members\n    average_age = sum_of_ages / num_elderly_members\n    \n    return int(average_age)\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    # Equation for 9 necklaces and 5 earrings\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n\n    # Equation for 3 necklaces and 1 earring\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Calculate the total cost of 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    # number of days from Monday to Saturday\n    days_mon_to_sat = 6\n    # average hours of sunshine from Monday to Saturday\n    avg_sunshine_mon_to_sat = 3\n    # total sunshine hours from Monday to Saturday\n    total_sunshine_mon_to_sat = days_mon_to_sat * avg_sunshine_mon_to_sat\n    # hours of sunshine on Sunday\n    sunshine_sunday = 10\n    # total days in the week\n    total_days = 7\n    \n    # total sunshine hours for the whole week\n    total_sunshine_week = total_sunshine_mon_to_sat + sunshine_sunday\n    \n    # calculate the average amount of sunshine per day for the whole week\n    avg_sunshine_week = total_sunshine_week / total_days\n    \n    return avg_sunshine_week\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # m/min\n    walking_time = 24  # min\n\n    # Calculate the total distance to school\n    total_distance = walking_speed * walking_time  # m\n\n    # Distance for half the journey\n    half_distance = total_distance / 2  # m\n\n    # Time taken to walk half the journey\n    half_journey_walking_time = half_distance / walking_speed  # min\n\n    # Time taken to run the other half of the journey\n    half_journey_running_time = half_distance / running_speed  # min\n\n    # Total time for half walking and half running journey\n    total_time = half_journey_walking_time + half_journey_running_time\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_length = 320  # in meters\n    trees = 79\n\n    distance_between_each_tree = total_length / (trees + 1)\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = 0.50 * boys\n    girls_saw_movie = 0.60 * girls\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n    return total_saw_movie\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    # let x be the total savings Kim originally had\n    # she gave 1/3 of her savings to her mother: (1/3)x\n    # she bought dresses for $177\n    # she spent $129 on earrings\n    # the money left is 1/2 of what she gave her mother: (1/2) * (1/3)x\n    # we set up the equation: x - (1/3)x - 177 - 129 = (1/2) * (1/3)x\n    # solving for x gives us the original savings\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - (1/3)*x - 177 - 129, (1/2) * (1/3)*x)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    count = 0\n    for x1 in range(0, 7):  # Basket 1 can have from 0 to 6 apples\n        for x2 in range(0, 7 - x1):  # Basket 2 can have from 0 to 6 - x1 apples\n            x3 = 6 - x1 - x2  # The rest of the apples go into Basket 3\n            count += 1  # Count each valid combination\n    return count\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n    num_lengths, remainder = divmod(total_length, cut_length)\n    return remainder\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    decimal_value = 1 + 3/100\n    return decimal_value\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    candidates = []\n    for N in range(12, 2018):\n        if 2018 % N == 11:\n            candidates.append(N)\n    ans = sum(candidates)\n    return ans\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    total_animals = 8\n    total_legs = 26\n    \n    for chickens in range(total_animals + 1):\n        cows = total_animals - chickens\n        if (chickens * 2) + (cows * 4) == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    # The given sequence is an arithmetic progression with a difference of 3\n    first_term = 11\n    common_difference = 3\n    \n    ans = []\n    # Check numbers in the range 30 to 60 to see which belong to the sequence\n    for num in range(30, 61):\n        # Check if the number can be expressed as an arithmetic sequence term\n        if (num - first_term) % common_difference == 0:\n            ans.append(num)\n    \n    return ans\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    digit_count = 0\n    num = 1\n    \n    while True:\n        next_number_len = len(str(num))\n        if digit_count + next_number_len < 2023:\n            digit_count += next_number_len\n            num += 1\n        else:\n            return int(str(num)[2023 - digit_count - 1])\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    # Since the sweets are distributed evenly, the class size would be the total number of sweets\n    # divided by the minimum sweets each student gets. No remainder means evenly distributed.\n    class_size = total_sweets // min_sweets_per_student\n\n    return class_size\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker = 6\n    total_skirts = sum((skirts_per_worker * workers) for workers in range(1, 10))\n    return total_skirts\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    income = 150000\n    tax_paid = 15000\n    first_50k_tax = 0.08 * 50000\n    remaining_income = income - 50000\n    remaining_tax = tax_paid - first_50k_tax\n    \n    tax_rate_equation = Eq(remaining_tax, (0.08 + T/100) * remaining_income)\n    \n    T_value = solve(tax_rate_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    unanswered = 1\n    answered_questions = total_questions - unanswered\n    points_correct = 4\n    points_incorrect = -2\n    target_score = 66\n\n    for correct in range(answered_questions + 1):\n        incorrect = answered_questions - correct\n        if points_correct * correct + points_incorrect * incorrect == target_score:\n            return correct\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    num_boys = 432\n    days_in_january = 31\n    \n    min_boys_per_day = num_boys // days_in_january\n    remaining_boys = num_boys % days_in_january\n\n    ans = min_boys_per_day + (1 if remaining_boys > 0 else 0)\n    \n    return ans\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    count = 0\n    for hundred in range(1, 4):  # First digit cannot be 0, so it can only be 2 or 3\n        for ten in range(0, 4):\n            for one in range(0, 4):\n                if hundred != ten and ten != one and one != hundred:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    number_of_other_cars = 30\n    space_between_cars = 5\n    \n    total_length = first_car_length + (other_cars_length * number_of_other_cars) + space_between_cars * (31 + 1)\n    \n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    n = 100  # The nth term we want to find\n    # Since 105, 120, 135 are the 7th, 8th, and 9th terms respectively\n    # We can find the common difference (d) of the sequence\n    a8 = 120  # The 8th term\n    a7 = 105  # The 7th term\n    d = a8 - a7  # Common difference\n\n    # We also know the first term (a1) by using the formula for the nth term: an = a1 + (n-1)*d\n    # 105 = a1 + (7-1)*d\n    a1 = a7 - (7 - 1) * d\n\n    # Now find the 100th term (a100) using the formula: an = a1 + (n-1)*d\n    a100 = a1 + (n - 1) * d\n    return a100\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_to_Helen = 23\n    chocolates_left = total_chocolates - chocolates_given_to_Helen\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        number = int(''.join(perm))\n        if number > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all possible arrangements for 7 people\n    for perm in permutations('ABCDEFG'):\n        perm_str = ''.join(perm)\n        # Check if D and E are next to each other\n        if 'DE' in perm_str or 'ED' in perm_str:\n            # Check if A stands in the middle of B and C (not necessarily next to each other)\n            a_index = perm_str.index('A')\n            b_index = perm_str.index('B')\n            c_index = perm_str.index('C')\n            if b_index < a_index < c_index or c_index < a_index < b_index:\n                count += 1  # If both conditions are satisfied, count the arrangement\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # The ratio is 2:3:5, and Sarah received 12 sweets which corresponds to the 3 in the ratio.\n    # Calculate the number of sweets that correspond to a single unit in the ratio\n    single_unit_sweets = 12 / 3\n    \n    # Calculate the total number of sweets by multiplying the single unit number of sweets by the sum of the ratio parts (2 + 3 + 5)\n    total_sweets = single_unit_sweets * (2 + 3 + 5)\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_biscuits_cost = 7 * 73  # cost in pence\n    total_cakes_cost = 9 * 113  # cost in pence (1 pound = 100 pence)\n\n    total_cost_pence = total_biscuits_cost + total_cakes_cost\n    total_cost_pounds = total_cost_pence / 100  # converting pence to pounds\n\n    change = 20 - total_cost_pounds\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1 / 5\n    initial_length = current_length / (1 + growth_rate)\n    return initial_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_litres = week1 + week2 + week3\n    return total_litres\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n\n    total_apples = piles * apples_per_pile\n\n    return total_apples\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for Sam's and Peter's original number of stickers\n    sam, peter = symbols('sam peter')\n    \n    # Equation 1: Sam had 40 stickers more than Peter at first\n    equation1 = Eq(sam, peter + 40)\n    \n    # Equation 2: After transactions, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam - 0.20 * sam + 0.25 * peter, peter - 0.25 * peter + 0.20 * sam + 96)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n    \n    # Peter's original number of stickers\n    return solutions[peter]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # The total time Benson spent after reaching home and until he finished lunch\n    total_minutes_after_home = 10 + 20 + 20 # minutes\n\n    # Convert the string time to a datetime object\n    lunch_finish_time = datetime.strptime('2:50 PM', '%I:%M %p')\n    \n    # Calculate when Benson reached home by subtracting the total time from lunch finish time\n    home_reach_time = lunch_finish_time - timedelta(minutes=total_minutes_after_home)\n    \n    # Format the time to the desired output format\n    return home_reach_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "def solution():\n    arrival_time = 12 * 60 + 40  # Convert arrival time to minutes past midnight\n    stay_duration = 2 * 60 + 40  # Convert stay duration to minutes\n\n    leaving_time_in_minutes = arrival_time + stay_duration\n    leaving_hour = leaving_time_in_minutes // 60\n    leaving_minute = leaving_time_in_minutes % 60\n    \n    # Adjust for 24h format if time passes 12 PM\n    if leaving_hour >= 24:\n        leaving_hour -= 24\n\n    return \"{hour}:{minute:02d} {ampm}\".format(\n        hour=leaving_hour if leaving_hour <= 12 else leaving_hour - 12,\n        minute=leaving_minute,\n        ampm=\"p.m.\" if leaving_hour >= 12 else \"a.m.\"\n    )\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 3 * (x - 5) - 3 - 6\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    num = 1\n    while True:\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = (6 + 1/2) / (1/2)\n    return result\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "def solution():\n    from math import factorial\n\n    # Function to calculate permutations\n    def perm(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # Calculate 3-digit numbers that can be formed\n    # Choose any 3 digits out of the 4 (ignoring the 0 initially for the first position)\n    # and then permutation of these 3 digits for the 3 places.\n    # _ _ _ (3 places)\n    # 3 options for the first place (can't be 0), then 3 permutation of the remaining 3 digits\n    three_digit_with_non_zero_first = 3 * perm(3, 2)\n\n    # Now, consider when the first digit is 0, we have 2 positions and 3 possibilities\n    # 0 _ _ (3 places)\n    # 3 permutation of the remaining non-zero 3 digits\n    three_digit_with_zero_first = perm(3, 2)\n\n    # Total 3-digit numbers\n    three_digit_total = three_digit_with_non_zero_first + three_digit_with_zero_first\n\n    # 4-digit numbers that can be formed are simply permutations of the given 4 digits\n    four_digit_total = perm(4, 4)\n\n    # Adding them together gives us the total number of 3 and 4 digit numbers\n    ans = three_digit_total + four_digit_total\n    return ans\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    difference = 3\n    num_terms = 14\n\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def count_nines(page):\n    return str(page).count('9')\n\ndef solution():\n    page = 1\n    total_nines = 0\n\n    while True:\n        total_nines += count_nines(page)\n        if total_nines == 181:\n            return page\n        page += 1\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number of crystals Jason originally had\n    original_crystals = symbols('original_crystals')\n\n    # Create an equation based on the problem statement\n    # Jason sold (original_crystals / 2) + 10 crystals to Yvonne\n    # Then, he mined 20 more crystals in Singapore\n    # After that, he sold 14 crystals to Cherlyn\n    # He has 35 crystals in the end\n    equation = Eq(((original_crystals / 2) + 10 + 20 - 14), original_crystals - 35)\n\n    # Solve the equation\n    solution = solve(equation, original_crystals)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_rabbits = 14\n    pattern_grey = 2\n\n    # Since the pattern is 1 black, 2 white, 2 grey, we can find the complete patterns first\n    complete_patterns = grey_rabbits // pattern_grey\n\n    # Each complete pattern has 5 rabbits (1 black, 2 white, 2 grey)\n    rabbits_in_complete_patterns = complete_patterns * (1 + 2 + 2)\n\n    # Check if there are any remaining grey rabbits that do not form a complete pattern\n    remaining_grey = grey_rabbits % pattern_grey\n\n    # If there are remaining grey rabbits, we need at least one more pattern to accommodate them\n    if remaining_grey > 0:\n        rabbits_in_complete_patterns += (1 + 2 + remaining_grey)\n\n    return rabbits_in_complete_patterns\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    min_value = float('inf')\n    max_value = -float('inf')\n\n    # Iterate through all possible combinations of the three numbers\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            for k in range(len(numbers)):\n                # Make sure the digits are different\n                if i != j and j != k and i != k:\n                    if numbers[i] != 0:  # The first digit cannot be 0\n                        value = numbers[i] * 100 + numbers[j] * 10 + numbers[k]\n                        min_value = min(min_value, value)\n                        max_value = max(max_value, value)\n\n    return max_value - min_value\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "from math import gcd\n\ndef solution():\n    students_class_A = 12\n    students_class_B = 15\n    students_class_C = 18\n\n    # Find the greatest common divisor (GCD) of the three class sizes\n    ans = gcd(gcd(students_class_A, students_class_B), students_class_C)\n\n    return ans\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    even_digits = '24'\n    count = 0\n    for perm in permutations(digits):\n        if perm[-1] in even_digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    n = 180\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 9 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    \n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solutions = solve(equation, u)\n    return solutions[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    # The sum of the digits of a number must be divisible by 9 for the number to be divisible by 9\n    # For the number 26a539, the sum of the other digits is 2+6+5+3+9 = 25\n    # To find 'a', we need to find a value such that (25 + a) is divisible by 9\n    sum_other_digits = 25\n    # Loop through 0 to 9 to find the digit 'a' that makes the number divisible by 9\n    for a in range(10):\n        if (sum_other_digits + a) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    # Compound Interest formula: A = P(1 + r/n)^(nt)\n    # Since it's yearly compounding, n (number of times interest applied per time period) is 1.\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    number_of_boxes = 12\n\n    total_cost = cost_per_box * number_of_boxes\n\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    total_pence = 200  # total pence in £2\n    cost_single = 12  # cost of a single sweet in pence\n    cost_triple = 30  # cost of three sweets in pence\n    max_sweets = 0  # initial number of sweets\n\n    # First, buy sweets in sets of three until we cannot afford another set\n    max_sweets += (total_pence // cost_triple) * 3\n    remaining_pence = total_pence % cost_triple\n\n    # Then, buy remaining sweets one by one\n    max_sweets += remaining_pence // cost_single\n\n    return max_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let k represent Kenny's current age and b represent Kenny's brother's age\n    may_age_now, k, b = symbols('may_age_now k b')\n    \n    # When May is 10, according to Kenny's statement\n    may_age_future = 10\n    kenny_age_future = k + (may_age_future - may_age_now)\n    brother_age_future = b + (may_age_future - may_age_now)\n    \n    # Kenny is 2 years older than his brother now\n    eq1 = Eq(k, b + 2)\n    \n    # When May is 10, sum of Kenny's and his brother's age is 3 times May's age\n    eq2 = Eq(kenny_age_future + brother_age_future, 3 * may_age_future)\n    \n    # The current age of Kenny and his younger brother can be found by solving equations\n    solutions = solve((eq1, eq2), (k, b))\n    \n    # Calculate how much older Kenny is than May\n    kenny_age_difference = solutions[k] - may_age_now\n    \n    # May is currently 7 years old\n    ans = kenny_age_difference.subs(may_age_now, 7)\n\n    return ans\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # To place 10 identical balls into 7 different boxes with at least 1 ball in each box,\n    # we can use the \"stars and bars\" method for combinatorics.\n    # We have 10 balls to put into 7 - 1 \"separators\" (since there should be at least 1 ball in each box).\n    # So we have 10 - 7 balls to distribute freely among 7 boxes, which is equivalent to 3 balls.\n    # The problem then becomes the number of ways to put 3 identical items into 7 different containers.\n    \n    # Why minus 7? Because we are ensuring each box gets a ball first.\n\n    # We can think of this as 3 stars and 6 bars (to make 7 sections).\n    # The number of ways to organize 3 stars among 6 bars is C(3 + 6, 3).\n    count = comb(3 + 6, 3)\n\n    return count\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Strategy: To ensure victory, Felix should aim to leave a multiple of 3 candies for John every turn. \n    # If Felix goes first and leaves 9 candies (by eating 1), no matter if John eats 1 or 2 candies next, \n    # he will leave 8 or 7 candies for Felix. Felix can then eat 2 or 1 candy respectively to leave 6 candies (multiple of 3).\n    # This strategy can be repeated until Felix gets to eat the last candy.\n    # Felix's moves: 1 -> (opponent) -> 2 or 1 to leave 6 -> ... -> wins last candy.\n    # If there are 10 candies and Felix goes second, and if John follows the strategy to always leave a multiple of 3, \n    # Felix cannot win. Therefore, Felix should go first to ensure the strategy can be implemented.\n\n    felix_turn = True  # Felix should go first\n\n    return felix_turn\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let the total litres required to fill the fish tank be x\n    # According to the problem\n    # x - 5 = 4 (Overflow when using a 5-litre pail)\n    # x + (3 * 4) = 4 * 5 (4 more 3-litre pails are needed to fill, when compared to 5-litre pails)\n    # Simplifying the above equations:\n    # x = 5 + 4\n    # x + 12 = 20\n    # Solving for x\n    x = 20 - 12\n    \n    return x\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    \n    num_pipes = total_length // pipe_length\n    \n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    total_numbers = 2016\n\n    # Numbers underlined in two colors are multiples of lcm(2,3)=6 and lcm(2,4)=4\n    # Except for those that are multiples of lcm(2,3,4)=12, \n    # which are underlined in all three colors\n    multiples_of_6 = total_numbers // 6\n    multiples_of_4 = total_numbers // 4\n    multiples_of_12 = total_numbers // 12\n\n    # Numbers underlined exactly twice\n    twice_underlined = (multiples_of_6 + multiples_of_4) - 2 * multiples_of_12\n\n    return twice_underlined\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count_3 = 0  # Counter for the number of times '3' appears\n    page = 1     # Start with page 1\n    \n    # While we haven't found the page where '3' appears 28 times\n    while count_3 < 28:\n        # Count the appearances of '3' in each page number\n        count_3 += str(page).count('3')\n        page += 1\n        # If we have reached the count equal to 28, break\n        if count_3 == 28:\n            break\n    # Subtract one because we added one after counting the '3's of the last page\n    return page - 1\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    total_value = 50 + 20 + 10 + 5\n    brother_value = total_value // 4\n\n    for lost_coin in [50, 20, 10, 5]:\n        if (total_value - lost_coin) == 2 * brother_value:\n            return lost_coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(8, 4) * comb(12, 3)\n    return total_ways\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # The average of four of the five numbers (sum/4) is given, so we can find the sum of these four numbers.\n    sum_of_4_numbers_36 = 36 * 4\n    sum_of_4_numbers_38 = 38 * 4\n    sum_of_4_numbers_39 = 39 * 4\n    sum_of_4_numbers_45 = 45 * 4\n    sum_of_4_numbers_49 = 49 * 4\n\n    # The sum of all five numbers would include the missing number for each average calculation.\n    # To find the total sum, choose the largest sum_of_4_numbers and add the largest average to it.\n    # All the other sums including the lower averages would produce a lower total sum.\n    total_sum = sum_of_4_numbers_36 + 49\n\n    # The largest number is the total sum minus the smallest sum_of_4_numbers, \n    # because including the largest number in the calculation would produce the smallest sum of the remaining four.\n    largest_number = total_sum - sum_of_4_numbers_36\n    \n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = (15 * 60) + 55  # Convert first bus time to minutes past midnight\n    first_bus_missed_time = first_bus_time + 4  # 4 minutes late\n    second_bus_time = (16 * 60) + 35  # Convert second bus time to minutes past midnight\n\n    wait_time = second_bus_time - first_bus_missed_time  # Time to wait for the second bus in minutes\n\n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    return 456 - (170 - 144)\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls', integer=True)\n    \n    # 1/11 of the boys are removed\n    boys_removed = boys / 11\n    # 5 girls are removed\n    girls_removed = 5\n\n    # After removal, number of boys and girls are equal\n    equation = Eq((boys - boys_removed), (girls - girls_removed))\n\n    # Total number of students is the sum of boys and girls\n    total_students = Eq(boys + girls, 152)\n\n    # Solving the equations to find the number of boys\n    solutions = solve((equation, total_students), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_apart = 5\n\n    num_trees = (road_length // distance_apart) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n\n    num_lorries = (workers + lorry_capacity - 1) // lorry_capacity\n\n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, louise = symbols('andrew louise')\n    \n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n    \n    solutions = solve((equation1, equation2), (andrew, louise))\n    \n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_three_days = 40\n    average_pages_next_four_days = 20\n    pages_last_two_days = 60\n\n    total_pages = pages_first_three_days + average_pages_next_four_days * 4 + pages_last_two_days\n\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The number should satisfy the conditions: n % 4 == 3, n % 5 == 3, and n % 9 == 3\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    number = solve_congruence(*congruences)\n\n    # The number should be a positive three-digit number less than 200\n    # So, we look for the number in the solutions provided by solve_congruence\n    for num in number[0]:\n        if 100 <= num < 200:\n            return num\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # Let's assume the total number of students is x\n    # According to the given conditions:\n    # If 4 students live in one room, x % 4 = 6 (6 students left without room)\n    # If 5 students live in one room, (x + 1) % 5 = 0 (1 room left without students)\n    \n    # Search for x in the range of possible values where both conditions satisfy\n    x = 0\n    while True:\n        if x % 4 == 6 and (x + 1) % 5 == 0:\n            ans = x\n            break\n        x += 1\n\n    return ans\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice2 != dice3 and dice1 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    while sum(grandsons_ages) != bill_age:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n    return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_g\n    \n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_initial = 7 * 9\n    total_sum_after_removal = 6 * 10\n    removed_number = total_sum_initial - total_sum_after_removal\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    fraction_leaving = 1 / 3\n    people_leaving = total_people * fraction_leaving\n    people_remaining = total_people - people_leaving\n\n    return people_remaining\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_mark = -2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Maximum possible number of students who play exactly two sports\n    max_two_sports = (swimmers + cyclists + table_tennis_players) - total_students\n    \n    # Minimum possible number of students who play all three sports\n    # min_three_sports = max(swimmers + cyclists + table_tennis_players - 2 * total_students, 0)\n    # However, since each pair must contribute at least one to max_two_sports, we adjust the formula:\n    min_three_sports = max(swimmers + cyclists + table_tennis_players - max_two_sports - 2 * total_students, 0)\n    \n    return min_three_sports\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    # Distribute the common factor (3999 * 2014) from the two terms in the numerator\n    common_factor = 3999 * 2014\n    ans = (common_factor * (1 + 0.2014 + 0.3999)) / 12.0012\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_to_pass_tree = 30  # seconds\n    length_of_train = 360   # meters\n\n    speed_of_train = length_of_train / time_to_pass_tree  # meters per second\n\n    return speed_of_train\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    net_distance_per_day = climb_distance - slide_distance\n    days = 0\n\n    while True:\n        days += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slide_distance\n\n    return days\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Accumulate the maximum marbles drawn for each color without getting a set of 4 different colors.\n    # Start with the maximum number for the most abundant color,\n    # then keep adding one less than the number of each subsequent color, because we need to ensure one color is always missing.\n    # Therefore:\n    # Red (most) -> take all 12 (but we still lack one color at least)\n    # Blue       -> take 8 (one less than 9 to not complete the set of 4 different colors)\n    # Yellow     -> take 7 (one less than 8)\n\n    # Now we have 12 red, 8 blue, and 7 yellow without having 4 different colors.\n    # The next marble we take, no matter the color, will ensure we have at least 4 different color marbles.\n    # So we add 1 to complete the set.\n\n    marbles_drawn = 12 + 8 + 7 + 1 # The '+ 1' accounts for the draw that ensures the 4 different colors\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return choices\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    aytown_interval = 15\n    beeville_interval = 12\n    ceeford_interval = 8\n\n    # Calculate the least common multiple (LCM) of the intervals\n    lcm_intervals = lcm(aytown_interval, beeville_interval, ceeford_interval)\n\n    # Convert the LCM in minutes into hours and minutes\n    hours = lcm_intervals // 60\n    minutes = lcm_intervals % 60\n\n    # Starting from 10:00 am, calculate the next time three trains arrive together\n    next_arrival_hour = 10 + hours\n    next_arrival_minute = minutes\n\n    # To handle scenarios where the minutes add up to or exceed 60\n    if next_arrival_minute >= 60:\n        next_arrival_hour += next_arrival_minute // 60\n        next_arrival_minute = next_arrival_minute % 60\n\n    # Converting to 24h format if needed\n    next_arrival_hour = next_arrival_hour % 24\n\n    # Form the next arrival time as a string\n    if next_arrival_hour < 10:\n        hour_str = '0' + str(next_arrival_hour)\n    else:\n        hour_str = str(next_arrival_hour)\n\n    if next_arrival_minute < 10:\n        minute_str = '0' + str(next_arrival_minute)\n    else:\n        minute_str = str(next_arrival_minute)\n\n    # The next time that three trains will arrive together\n    return hour_str + ':' + minute_str\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_and_stationery = 0.2 * pocket_money\n    food_plus_transport = pocket_money - books_and_stationery  # Total spent on food and transport\n    \n    # Let the amount spent on transport be 'x'\n    # Then the amount spent on food is '3x'\n    # And the money saved is '3x - 6'\n    # food + transport + savings = pocket_money - books_and_stationery\n    # => 3x + x + (3x - 6) = food_plus_transport\n    # Solve for 'x':\n    x = (food_plus_transport + 6) / 7  # Adding the 6 from both sides and dividing by 7\n    \n    # Calculate savings\n    savings = (3 * x) - 6\n    savings_percent = (savings / pocket_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Starting point is the person with number 2\n    starting_number = 2\n    # We know the opposite position has person with number 24\n    opposite_number = 24\n    # The difference between adjacent numbers\n    number_difference = 2\n    \n    # Find the minimal number of people that makes person 10 and 24 opposites\n    # The difference between opposite positions must be half the total number of people\n    for total_people in range(1, 50):\n        # Positions are zero based, so person 10 and 24 will have position numbers 4 and 12 respectively\n        position_number_10 = (10 - starting_number) / number_difference\n        position_number_24 = (24 - starting_number) / number_difference\n\n        # If the position of number 10 is half the total people away from the position of number 24\n        if (position_number_24 - position_number_10) % total_people == total_people / 2:\n            return total_people\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    return max(possible_ages)\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    import math\n    return math.lcm(24, 64)\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for num in permutations('123456', 4):\n        number = int(''.join(num))\n        if 3267 <= number <= 5120:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [i for i in range(1, 76) if 75 % i == 0]\n    for number in factors_of_75:\n        if 10 <= number <= 99 and number % 6 == 3:\n            return number\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Little Miss Careless saw the subtrahend wrongly\n    # Incorrect subtraction: minuend - wrong_subtrahend = incorrect_difference\n    # Correct subtraction: minuend - correct_subtrahend = correct_difference\n\n    incorrect_difference = 50\n    wrong_subtrahend = 41\n    correct_subtrahend = 14\n\n    # Calculate the minuend using the incorrect subtrahend and incorrect_difference\n    minuend = incorrect_difference + wrong_subtrahend\n\n    # Calculate the correct difference using the actual subtrahend\n    correct_difference = minuend - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum(40 - i if i % 2 == 0 else -(40 - i) for i in range(0, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    sisters_count = 4\n    apples_left = 20\n\n    total_apples_eaten = justin_apples + sisters_apples_each * sisters_count\n    initial_apples = total_apples_eaten + apples_left\n\n    return initial_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount = 7320.5\n    years = 4\n\n    rate = (amount / principal) ** (1 / years) - 1\n\n    return rate\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # Let's assume the original square array have a side of n.\n    # Initially, there are n*n soldiers.\n    # After adding 31 soldiers, one row and column are added, making the array (n+1)*(n+1).\n    # We have the equation: (n+1)^2 = n^2 + 31\n    # Simplify the equation: n^2 + 2n + 1 = n^2 + 31\n    # So, 2n = 30 ==> n = 15\n    # Now the total number of soldiers in the array is (n+1)^2 = 16^2 = 256\n\n    n = 15\n    total_soldiers_now = (n + 1) ** 2\n    return total_soldiers_now\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    return 56 / 21\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2\n    b = 6.77\n    c = 8.88\n    d = 6.3\n    ans = (a + b + c) * (b + c + d) - (a + b + c + d) * (b + c)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n\n    february_saved = total_saved - january_saved - march_saved\n\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # minutes (1 hour and 20 minutes)\n    \n    num_pictures = total_time_available / time_for_one_picture\n    \n    return int(num_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n    total_seconds = minutes * seconds_per_minute\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    annual_interest_rate = 0.08\n    years = 4\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n    return initial_deposit\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    total_apples = 30\n    apples_for_ann = total_apples - 5  # As each of the other five children gets at least one apple\n    return apples_for_ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first_num = int(''.join(perm[:3]))\n        second_num = int(''.join(perm[3:5]))\n        third_num = int(''.join(perm[5:]))\n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combination when she chooses shirt and pants\n    shirt_pants_combinations = shirts * pants * shoes\n\n    # Combination when she chooses dress with shoes or heels\n    dress_combinations = (dresses * shoes) + (dresses * heels)\n\n    # Total combinations\n    total_combinations = shirt_pants_combinations + dress_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy = symbols('book teddy')\n\n    equation1 = Eq(4 * book + 8 * teddy, 164)\n    equation2 = Eq(2 * book + 3 * teddy, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    from sympy import divisors\n\n    # Since M and N only have prime factors 3 and 5, and their HCF is 75,\n    # we can express them as powers of 3 and 5.\n\n    # 75 as a product of primes is 3^1 * 5^2\n    # To have 12 factors, M must be of the form 3^n * 5^m with (n+1)*(m+1) = 12\n    # Possible pairs (n, m) that satisfy the condition are (11, 0), (5, 1), (3, 2)\n    # However, n must be greater than 1 and m greater than 2 since HCF with N is 75 (3^1 * 5^2)\n\n    # Possible values for M based on the given conditions are for n=3, m=2 and n=5, m=1\n    M_values = [3**3 * 5**2, 3**5 * 5**1]\n\n    # For N with 10 factors, N must be of the form 3^a * 5^b with (a+1)*(b+1) = 10\n    # Possible pairs (a, b) that satisfy the condition are (9, 0), (4, 1), (1, 3)\n    # Again, a must be greater than 1 and b greater than 2 to satisfy the HCF condition with M\n\n    # Possible values for N based on the given conditions are for a=4, b=1 and a=1, b=3\n    N_values = [3**4 * 5**1, 3**1 * 5**3]\n\n    # Filter combinations where M and N have a highest common factor of 75,\n    # this implies that the lower powers of 3 and 5 should be in HCF i.e., 3^1 * 5^2\n    valid_combinations = [(M, N) for M in M_values for N in N_values if divisors(75) == divisors(M, generator=True) and divisors(75) == divisors(N, generator=True)]\n\n    # Calculate the sum of the valid M and N pairs\n    sums = [M + N for M, N in valid_combinations]\n\n    # Return the sum of M and N, ensuring we have the correct pairing that satisfies all conditions\n    return min(sums)  # We choose min because the higher powers will exceed the number of divisors allowed.\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9             # total mass in kilograms\n    total_mass_g = 5              # total mass in grams\n    total_mass_g += total_mass_kg * 1000 # convert total mass to grams\n\n    soil_mass_kg = 4              # soil mass in kilograms\n    soil_mass_g = 50              # soil mass in grams\n    soil_mass_g += soil_mass_kg * 1000   # convert soil mass to grams\n\n    sand_mass_g = total_mass_g - soil_mass_g # calculate sand mass in grams\n    \n    # Find the difference between soil and sand masses\n    difference_g = abs(soil_mass_g - sand_mass_g)\n    \n    return difference_g\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let n be the number of buttons Nina originally has\n    # Let j be the number of buttons James originally has\n    # According to the question:\n    # n + j = 22 (total number of buttons)\n    # n - 4 = j + 4 (after Nina gives James 4 buttons, they have the same number)\n    # By solving these equations we find n (the number of buttons Nina originally has)\n    \n    # Nina's buttons before and after giving 4 away\n    n = symbols('n')\n    \n    # Equation 1: Nina's buttons + James' buttons = 22\n    equation1 = Eq(n + (22 - n), 22)\n    \n    # Equation 2: After giving 4 buttons away, Nina and James have the same number of buttons\n    equation2 = Eq(n - 4, (22 - n) + 4)\n    \n    # Solve the two equations for n\n    solutions = solve((equation1, equation2), n)\n    \n    # solutions[n] gives the number of buttons Nina originally had\n    return solutions[0]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1/i for i in range(1, 101) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    correct_points = 4\n    incorrect_points = -2\n    total_score = 29\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = (correct_answers * correct_points) + (incorrect_answers * incorrect_points)\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_length = 5\n    total_digits = 52\n    pattern_sum = sum(range(1, pattern_length + 1))\n    full_patterns = total_digits // pattern_length\n    remaining_digits = total_digits % pattern_length\n    remaining_sum = sum(range(1, remaining_digits + 1))\n    total_sum = (full_patterns * pattern_sum) + remaining_sum\n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_needed_per_kite = 0.36\n    total_paper_available = 4.8\n\n    num_kites = total_paper_available / paper_needed_per_kite\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    num_trees = 79\n    road_length = 320\n    \n    distance_between_trees = road_length / (num_trees + 1)\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Ratios given by the trades\n    fish_per_rabbit = 10 / 4\n    rabbits_per_wheat_pack = 5 / 6\n\n    # Calculate the fish per wheat pack ratio by multiplying individual ratios\n    fish_per_wheat_pack = fish_per_rabbit * rabbits_per_wheat_pack\n\n    # Calculate how many fish are needed for 12 packs of wheat\n    fish_for_12_wheat_packs = fish_per_wheat_pack * 12\n\n    return fish_for_12_wheat_packs\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    long_rod_length = 10 + 4/5\n    short_rod_length = 3/10\n    \n    number_of_short_rods = long_rod_length / short_rod_length\n    \n    return int(number_of_short_rods)\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_laptops_cost = 2800\n    deal_laptops_count = 30\n\n    cost_without_deal = 20 * single_laptop_cost\n    cost_per_laptop_on_deal = deal_laptops_cost / deal_laptops_count\n    cost_with_deal = 20 * cost_per_laptop_on_deal\n\n    savings = cost_without_deal - cost_with_deal\n\n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n        \n    # There must be a singing performance between two dancing performances.\n    # With 4 dancing performances, we can have a maximum of 3 pairs of adjacent dancing performances.\n    # Therefore, we have 3 slots from these pairs and 2 additional slots at the beginning and the end of the performances.\n    # We need to choose 3 out of the 5 slots for the dancing performances.\n    \n    # Choosing slots for the dancing performances\n    dance_slots = combinations(5, 3)\n    \n    # Arranging the 4 dancing performances in the chosen slots\n    arrangements_dances = permutations(4, 4)\n    \n    # Arranging the 6 singing performances around the dancing performances\n    arrangements_songs = permutations(6, 6)\n    \n    # The total number of ways to arrange performances\n    total_arrangements = dance_slots * arrangements_dances * arrangements_songs\n    \n    return total_arrangements\n\ndef combinations(n, r):\n    return permutations(n, r) // factorial(r)\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    # 3 fish per penguin plus 5 fish left\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    penguins_number = solve(equation1, penguins)\n\n    return penguins_number[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    total_earnings = hourly_rate * hours_worked\n    return total_earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    original_number = -14 + 26  # Since she obtained -14 by subtracting 26, we undo that operation\n    correct_result = original_number + 26 + 26  # Now we add the 26 twice: once to get the original number, once for the intended operation\n\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    return 322 - (95 - 87) * 16\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    # Given Matthew's height\n    matthew_height = 120\n    # Given ratio of Matthew's height to Kelly's height\n    matthew_to_kelly_ratio = 4 / 5\n\n    # Calculate Kelly's height\n    kelly_height = matthew_height / matthew_to_kelly_ratio\n    \n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35\n    total = 80\n\n    return (percentage / 100) * total\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Possible scores for the home team by half-time\n    for home_ht in range(4):\n        # Possible scores for the away team by half-time\n        for away_ht in range(3):\n            # Check if it is possible to reach the final score from the half-time score\n            home_ft = 3  # Final score for home team\n            away_ft = 2  # Final score for away team\n            if home_ht <= home_ft and away_ht <= away_ft:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n\n    cards_lost = original_cards * fraction_lost\n\n    return cards_lost\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # The first digit can't be 0 so starting from 1\n        for b in range(10):  # The second digit can be 0\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    clara, emma = symbols('clara emma')\n    equation1 = Eq(clara, 5 * emma)\n    equation2 = Eq(clara + emma, 1002)\n\n    solutions = solve((equation1, equation2), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    students = 6\n    monitors_to_choose = 2\n\n    ans = comb(students, monitors_to_choose)\n\n    return ans\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the total number of girls, b be the total number of boys\n    g, b = symbols('g b', integer=True)\n\n    # According to the problem statement\n    cannot_swim_girls = (3/8) * g  # Number of girls who can swim\n    cannot_swim_boys = (3/5) * b  # Number of boys who can swim\n\n    # 20 pupils cannot swim and this number is divided equally among boys and girls\n    equation1 = Eq(g - cannot_swim_girls, 20 / 2)\n    equation2 = Eq(b - cannot_swim_boys, 20 / 2)\n    equation3 = Eq(g - b, 0)  # Equal number of boys and girls\n\n    # Solving the system of equations for g and b\n    solutions = solve((equation1, equation2, equation3), (g, b))\n\n    # The total number of pupils in the class is the number of girls plus the number of boys\n    total_pupils = solutions[g] + solutions[b]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Since Mike can be the 2nd in line from any direction in a rectangular array,\n    # The number of students in one of the dimensions must be Mike's position + 1,\n    # which is 3 (he can either be the second from the start or the second from the end).\n    # Let's find all possible pairs of factors of the total number of students\n    # such that one of the factors is 3.\n\n    # Initialize answer variable\n    ans = set()\n\n    # The maximum possible number of students assuming a maximum class size of 1000 for reasonable search.\n    max_students = 1000\n    for num_students in range(3, max_students + 1):\n        for factor in range(1, int(num_students ** 0.5) + 1):\n            if num_students % factor == 0:\n                other_factor = num_students // factor\n                if factor == 3 or other_factor == 3:\n                    # If one of the dimensions of the array is 3, add the total number of students to the answer set.\n                    ans.add(num_students)\n\n    # We only need one answer since all valid answers would be a multiple of 3.\n    return min(ans) if ans else None\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    # Weight of the mangoes when the basket is half full\n    mangoes_half_full_weight = half_full_weight - (full_weight - half_full_weight)\n\n    # Weight of the empty basket\n    empty_basket_weight = full_weight - 2 * mangoes_half_full_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85 / 100\n    amount = 400\n    ans = percentage * amount\n\n    return ans\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n    sol = solve(equation, x)\n    ans = sol[0]\n    return ans\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_sweets = 16\n    pip_fraction = 3/5\n    total_sweets = bud_sweets / (1 - pip_fraction)\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    product = 6 * 5\n    number = product / 40 * 100\n    return number\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_per_cup = 30 / 3\n    total_cost_for_5_cups = cost_per_cup * 5\n    return total_cost_for_5_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    total_rabbits = 38\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n\n    # Each big mushroom house can accommodate 4 rabbits\n    big_mushroom_capacity = 4 * big_mushroom_houses\n\n    # Rabbits remaining after occupying big mushroom houses\n    remaining_rabbits = total_rabbits - big_mushroom_capacity\n\n    # Since each small mushroom house accommodates the same number of rabbits\n    # Divide the remaining rabbits by the number of small mushroom houses\n    rabbits_per_small_mushroom = remaining_rabbits / small_mushroom_houses\n\n    return rabbits_per_small_mushroom\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_income_per_day = 60\n    number_of_days = 7  # Monday to Sunday is 7 days\n    total_income = average_income_per_day * number_of_days\n    return total_income\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 9, 2))\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    # Initialize the number of ways to reach each step with 0 steps\n    # Note that dp[0] is the starting point, and there is 1 way to start (by standing still)\n    dp = [0] * (6 + 1)\n    dp[0] = 1\n    \n    # Calculate the number of ways to reach each step\n    for i in range(1, 7):\n        dp[i] = dp[i - 1] + (dp[i - 2] if i - 2 >= 0 else 0) + (dp[i - 3] if i - 3 >= 0 else 0)\n    \n    # The answer is the number of ways to reach the 6th step\n    return dp[6]\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    total_sum = 21 + 22 + 23\n    result = total_sum // (2 * 3)\n    return result\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Abigail and Ryan's current age\n    abigail, ryan = symbols('abigail ryan')\n\n    # Equation 1: Abigail is three times as old as Ryan\n    equation1 = Eq(abigail, 3 * ryan)\n\n    # Equation 2: In 6 years, Abigail will be 42 years old\n    equation2 = Eq(abigail + 6, 42)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    # Calculate Ryan's age in 2 years\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    return 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_still_water = 33\n    speed_current = 3\n    distance = 150\n\n    speed_upstream = speed_still_water - speed_current\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    for number in range(1, 100):\n        if number % 3 == 2 and number % 4 == 3 and number % 5 == 4:\n            return number\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = 56 if 56 % 4 == 0 else (56 // 4 + 1) * 4\n    last_multiple = 92 if 92 % 4 == 0 else (92 // 4) * 4\n\n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    midpoint = (3.5 + 6.9) / 2\n    return midpoint\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = int((last_term - first_term) / difference + 1)\n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum([i if i % 4 in [0, 1] else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # Find the ones digit of 9^1, 9^2, 9^3, 9^4\n    # The pattern of the ones digit for powers of 9 repeats every 2: 9, 1, 9, 1, ...\n    \n    # Determine the cycle of 99 modulo 2 to find the relevant ones digit\n    cycle_position = 99 % 2\n    \n    # Since the pattern repeats every 2, we only need to check if the cycle_position is 0 or 1\n    # If cycle_position is 1, the ones digit is 9 (as with 9^1, 9^3, ...)\n    # If cycle_position is 0, the ones digit is 1 (as with 9^2, 9^4, ...)\n    if cycle_position == 1:\n        # Return the ones digit for the case of the cycle position being 1\n        return 9\n    else:\n        # Return the ones digit for the case of the cycle position being 0\n        return 1\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the current age of Claire and future age of Claire after 6 years\n    current_age, future_age = symbols('current_age future_age')\n\n    # Equation representing that in 6 years, Claire will be three times her current age\n    equation = Eq(future_age, 3 * current_age)\n\n    # The relation between current age and future age in 6 years\n    age_difference = Eq(future_age, current_age + 6)\n\n    # Solve the system of equations\n    solutions = solve((equation, age_difference), (current_age, future_age))\n\n    # Claire's age two years from now will be the current age plus 2\n    age_in_two_years = solutions[current_age] + 2\n\n    return age_in_two_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    # Let x be the actual journey time\n    # It took 11/12 of the time it should have\n    # It arrived 5 minutes late despite leaving 15 minutes late\n    # So, the time spent was x*(11/12) = x - 15 + 5\n    # x*(11/12) = x - 10\n    # Solving for x\n    # We multiply both sides by 12 to clear the denominator\n    # 11x = 12x - 120\n    # 12x - 11x = 120\n    # x = 120\n    return 120\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    result = (4/15) - (7/10) + (11/15) - (3/10)\n    return result\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    current_year = 2022\n    while True:\n        current_year += 1\n        if set(str(current_year)) <= {'0', '2'}:\n            return current_year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_number = (total_product - known_product) / 5.42\n    return missing_number \n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # List of UK coin denominations, no longer in use but assuming this for the exercise\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n\n    fare = 44\n    paid_amount = min([coin for coin in coins if coin > fare]) # finding the smallest coin denomination larger than fare\n\n    change_amount = paid_amount - fare\n    coin_count = 1  # Susan initially pays with a single coin\n\n    for coin in coins:\n        while change_amount >= coin:\n            change_amount -= coin\n            coin_count += 1  # Counting each coin given as change\n\n    return coin_count\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Counts of marbles of each color\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # Maximum of one color can be picked such that the next pick guarantees a new color\n    # Hence in the worst-case scenario, Jane can pick all but one of each color before getting all four colors\n    must_draw = (green - 1) + (blue - 1) + (red - 1) + (orange) # The last color doesn't need the minus 1 because we'll pick the last marble from the fourth color\n\n    return must_draw\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return total_legs\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    daily_progress = 3\n    nightly_slip = 1\n    net_progress = daily_progress - nightly_slip\n    goal = 9\n    day = 0\n\n    current_position = 0\n\n    while current_position < goal:\n        day += 1\n        current_position += daily_progress\n        if current_position >= goal:\n            break\n        current_position -= nightly_slip\n\n    return day\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from itertools import combinations\n\ndef solution():\n    # Total books\n    books = 19\n    # Each kid must get at least one book\n    books -= 4\n\n    # Now we have to divide the remaining 15 books among 4 kids\n    # We can consider this as placing 3 dividers among the 15 books\n    # This is equivalent to choosing 3 positions from 18 positions (15 books + 3 dividers)\n    ways = len(list(combinations(range(books + 3), 3)))\n\n    return ways\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a = 2\n    b = 3\n    while b < 100:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    ways = 0\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            x3 = 6 - x1 - x2\n            if x3 > 0:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m represent the number of motorbikes, t represent tricycles, and v represent vans.\n    m, t, v = symbols('m t v')\n    \n    # Each motorbike has 2 wheels, each tricycle has 3 wheels, and each van has 4 wheels.\n    # The total number of wheels is the sum of the number of wheels for each type of vehicle.\n    total_wheels_eq = Eq(2*m + 3*t + 4*v, 101)\n    \n    # There are 35 more motorbike and van wheels than tricycle wheels.\n    more_motor_van_eq = Eq((2*m + 4*v) - 3*t, 35)\n    \n    # There are 13 more tricycle and van wheels than motorbike wheels.\n    more_tricy_van_eq = Eq((3*t + 4*v) - 2*m, 13)\n    \n    # Use sympy's solve function to solve the system of equations.\n    solutions = solve((total_wheels_eq, more_motor_van_eq, more_tricy_van_eq), (m, t, v))\n    \n    # The number of motorbikes (m) minus the number of vans (v) gives the difference.\n    motorbike_van_difference = solutions[m] - solutions[v]\n\n    return motorbike_van_difference\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D = symbols('A B C D')\n    D = 41\n    \n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(B, C + 5)\n    equation3 = Eq(C + D, A)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = 0\n    for i in range(2, 41, 4):\n        ans += i**2 - (i-2)**2\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_per_cup = 1 / 6\n    total_cups = 30\n    gallons_needed = milk_per_cup * total_cups\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    pip_and_bud = 2 # Pip and Bud themselves are two people\n\n    total_people = people_in_front_of_pip + people_behind_bud + pip_and_bud\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Given numbers\n    numbers = [4, 5, 6, 9, 3, 9]\n    # Total of given numbers\n    total_given_numbers = sum(numbers)\n    # Calculate the sum of all 8 numbers based on the average\n    total_sum = 8 * 6\n    # Calculate the sum of p and q\n    sum_p_q = total_sum - total_given_numbers\n    \n    # Finding p and q using the given condition\n    # Since p < q, the lowest p could be the value after the smallest number 3\n    # And because the difference between the highest and lowest is 6 (q - 3 = 6), q would then be 9\n    # Compute p based on the sum of p and q\n    p = sum_p_q - 9\n    \n    # If we consider the condition and want to minimize p, we have to maximize q\n    # p should still be an integer and at least one unit less than q\n    while p >= q: \n        q -= 1\n        p = sum_p_q - q\n    \n    # However, the lowest p assuming 3 is the smallest can be 4, so adjust q if p can be reduced.\n    p = 4\n    q = sum_p_q - p\n\n    return q\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    common_difference = 3\n\n    term_number = ((last_term - first_term) // common_difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    # Let x be the number of students who like both sports\n    # Then the number of students who like football is 3x\n    # And the number of students who like basketball is 4x\n    # According to the Inclusion-Exclusion Principle:\n    # Total = Football + Basketball - Both\n    # 36 = 3x + 4x - x\n    # Solve for x\n    x = 36 / (3 + 4 - 1)\n    return int(x)\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from math import comb\n\ndef solution():\n    ans = 0\n    \n    # Count for two scenarios:\n    # - When '2014' is fixed at the beginning.\n    # - When '2014' is not fixed at the beginning (other combinations with '2014')\n    \n    # Case 1: '2014' is fixed at the beginning.\n    # We need to distribute 2 zeros, 1 one, and 1 two in the last four digits (mmdd)\n    # There are comb(4,2) ways to place 2 zeros, then comb(2,1) ways to place the 1.\n    ans += comb(4, 2) * comb(2, 1)\n    \n    # Case 2: '2014' is not fixed at the beginning.\n    # We have '0', '1', '2', '4' remaining and must be arranged in the year field 'yyyy'\n    # there should be 2 zeros, 2 ones, 2 twos and 1 four.\n    # As we arrange them, the month and day must be valid dates.\n    # Here we deal with the possibility of counting invalid dates, which is hard to count directly.\n\n    # Valid months with '0', '1', '2' are '01', '02', '10', '11', '12', '20', '21'\n    # For each valid month, count the valid days.\n    for month in ['01', '02', '10', '11', '12', '20', '21']:\n        if month[0] == '0':\n            zeros, ones, twos = 1, 2, 2\n        elif month[0] == '1':\n            zeros, ones, twos = 2, 1, 2\n        else:  # month[0] == '2'\n            zeros, ones, twos = 2, 2, 1\n        \n        if month[1] == '1':\n            ones -= 1\n        elif month[1] == '2':\n            twos -= 1\n\n        # Months '01', '03', '05', '07', '08', '10', '12' have 31 days,\n        # '04', '06', '09', '11' have 30 days, and '02' has 28 days in 2014 since it's not a leap year.\n        if month in ['01', '03', '05', '07', '08', '10', '12']:\n            max_day = 31\n        elif month in ['04', '06', '09', '11']:\n            max_day = 30\n        else:  # month == '02'\n            max_day = 28\n        for day in range(1, max_day + 1):\n            day_str = '{:02d}'.format(day)\n            if day_str[0] == '0' and zeros > 0:\n                ans += comb(zeros - 1, 1)  # choose placement for the remaining '0'\n            elif day_str[0] == '1' and ones > 0:\n                ans += comb(ones - 1, 1)  # choose placement for the remaining '1'\n            elif day_str[0] == '2' and twos > 0:\n                ans += comb(twos - 1, 1)  # choose placement for the remaining '2'\n\n    return ans\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    for number in range(10000, 100000):\n        if (number % 7 == 3) and (number % 11 == 7) and (number % 13 == 9):\n            return number\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # speed of Adam\n    speed_adam = 60 # in km/h\n    # speed of Jacob\n    speed_jacob = 80 # in km/h\n    \n    # Jacob reached home after 3 hours\n    distance_jacob = 3 * speed_jacob  # Distance = speed * time\n    \n    # Adam still had 30 minutes to reach home, thus he has driven for 3 hours too\n    distance_adam = (3 * speed_adam) + (speed_adam * 0.5)  # last 30 minutes converted to hours (0.5 hour)\n    \n    # The distance between their homes is the sum of the distances each one of them drove\n    distance_apart = distance_adam + distance_jacob\n    \n    return distance_apart\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    term_index = 21\n\n    nth_term = first_term + (term_index - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def new_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result_1_and_2 = new_operation(1, 2)\n    result_up_to_3 = new_operation(result_1_and_2, 3)\n    result_up_to_4 = new_operation(result_up_to_3, 4)\n    final_result = new_operation(result_up_to_4, 5)\n    return int(final_result)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    prime_factors = [2, 3, 7]  # 252 = 2^2 * 3^2 * 7\n    exponents = [2, 2, 1]  # The exponents of the prime factors in the prime factorization\n    \n    # The number of factors is the product of (exponent + 1) for each prime factor\n    num_factors = 1\n    for exp in exponents:\n        num_factors *= (exp + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n    max_cakes_in_layer = (total_cakes + (total_layers - 1)) // total_layers\n\n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 7 / 100\n    total_paid = 0.91\n    original_cost = total_paid / (1 + gst_rate)\n    return original_cost\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # To guarantee 2 marbles of the same color,\n    # Lucy needs to take out 1 more than the number of colors present.\n    # There are 2 colors, so she needs to take out 2 + 1 marbles.\n    ans = 2 + 1\n    return ans\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    # Convert all the weights to grams\n    weight_1 = 2.49 * 1000  # Converting kilograms to grams\n    weight_2 = 670  # Already in grams\n    weight_3 = (3 * 1000) + 80  # 3 kg to grams and adding the 80 grams\n\n    # Add up all the weights in grams\n    total_weight = weight_1 + weight_2 + weight_3\n\n    # The answer should be in grams, which it already is.\n    return total_weight\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "def solution():\n    from math import lcm\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Find the least common multiple of the times taken by each to complete a lap\n    meet_time_seconds = lcm(ashley_time, ben_time, charlie_time)\n\n    # Convert the meet time to hours and minutes\n    meet_time_minutes = meet_time_seconds // 60\n    hours = meet_time_minutes // 60\n    minutes = meet_time_minutes % 60\n    \n    # Calculate the new time when they meet\n    initial_hour = 10  # Given that they start at 10.00 a.m.\n\n    new_time_hours = initial_hour + hours\n    new_time_minutes = minutes\n\n    # Adjust for 24-hour time if the hours exceed or equals 24\n    new_time_hours %= 24\n\n    return f\"{new_time_hours:02d}:{new_time_minutes:02d}\"\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_exercise_minutes = 60\n    cycling_fraction = 1 / 3\n    jogging_time = total_exercise_minutes * (1 - cycling_fraction)\n\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solutions = solve(equation, justin)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    # Given sequence: 22, 18, 14, 10, 6, 2\n    # This is an arithmetic sequence with a common difference.\n    \n    # Calculate the common difference\n    difference = 18 - 22\n    \n    # Last term in the given sequence\n    last_term = 2\n    \n    # Next term in the sequence using the common difference\n    next_term = last_term + difference\n\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    max_apples = 30 - sum(range(1, 6))  # Take 1 apple for each of the other 5 children and rest for the 6th child\n    return max_apples\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    # Sam's average rate is 72.8 miles per gallon.\n    sam_miles_per_gallon = 72.8\n    \n    # Total distance travelled by both Sam and Tom.\n    total_distance = 273\n    \n    # Total gallons consumed by Sam's car.\n    sam_gallons = total_distance / sam_miles_per_gallon\n    \n    # Tom's car consumes 6 + 3/4 gallons more than Sam's car.\n    tom_additional_gallons = 6 + 3/4\n    \n    # Total gallons consumed by Tom's car.\n    tom_gallons = sam_gallons + tom_additional_gallons\n    \n    # Calculate Tom's average rate of consumption (miles per gallon).\n    tom_miles_per_gallon = total_distance / tom_gallons\n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # To guarantee two M&Ms of different colors we use the Pigeonhole Principle.\n    # If Bart picks one M&M of each color, in the worst case scenario, he has three M&Ms of the same color.\n    # To ensure he gets a different color on the next pick, he should pick one more M&M (the fourth pick).\n    # Thus, the total minimum number of picks he needs to make is 4.\n    return 4\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    return 77.5 * 52 / 100 + 5.2 * 2.25\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        num = int(f\"24572{digit}\")\n        if num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    # Linda can choose any of the two shirts to go with any of the two skirts\n    shirts = 2\n    skirts = 2\n    \n    # Using the principle of multiplication for independent events\n    outfit_combinations = shirts * skirts\n    \n    return outfit_combinations\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count_6 = sum(str(page).count('6') for page in range(1, 101))\n    return count_6\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # The given sequence shows a pattern of multiplying by 3.\n    # 1 * 3 = 3, 3 * 3 = 9, 9 * 3 = 27, 27 * 3 = 81\n    # Therefore, the missing term is 9.\n\n    return 9\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Given the 7th, 8th, and 9th terms\n    term7 = 105\n    term8 = 120\n    term9 = 135\n    \n    # Calculate the common difference\n    common_difference = term8 - term7\n    \n    # Calculate the first term using the 7th term and common difference\n    term1 = term7 - (common_difference * (7 - 1))\n    \n    # Calculate the 100th term\n    term100 = term1 + (common_difference * (100 - 1))\n    \n    return term100\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    num1 = int(str(45), 7)\n    num2 = int(str(66), 7)\n    sum_base10 = num1 + num2\n    ans = ''\n    \n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    \n    return ans or '0'\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    oranges, lemons = symbols('oranges lemons')\n    equation1 = Eq(oranges / lemons, 3/5)\n    equation2 = Eq((oranges - 48) / lemons, 1/2)\n    \n    solutions = solve((equation1, equation2), (oranges, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    rabbits = 8\n    days = 5\n    carrots_per_day_per_rabbit = 4\n\n    total_carrots = rabbits * days * carrots_per_day_per_rabbit\n\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Rates at which each animal eats a bale of hay\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n\n    # Combined rate at which all animals eat the bales of hay\n    combined_rate = horse_rate + cow_rate + sheep_rate\n    \n    # Total number of days the bales will last\n    days = 22 / combined_rate\n\n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5 / 8) * 160\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    mother_current_age, daughter_current_age = symbols('mother_current_age daughter_current_age')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(mother_current_age + (mother_current_age - daughter_current_age), 75)\n    equation2 = Eq(daughter_current_age - (mother_current_age - daughter_current_age), 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mother_current_age, daughter_current_age))\n\n    # Return the mother's current age\n    return solutions[mother_current_age]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef count_valid_dates(year):\n    valid_dates = 0\n    for month in range(1, 13):\n        day_limit = 31\n        if month in [4, 6, 9, 11]:\n            day_limit = 30\n        elif month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                day_limit = 29\n            else:\n                day_limit = 28\n\n        for day in range(1, day_limit + 1):\n            date_str = '{:04d}{:02d}{:02d}'.format(year, month, day)\n            if date_str.count('0') == date_str.count('1') == date_str.count('2'):\n                valid_dates += 1\n\n    return valid_dates\n\ndef solution():\n    return count_valid_dates(2014)\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Maximum number of apples to pick without guaranteeing 3 red apples would be:\n    # all green apples + all yellow apples + 2 red apples\n    max_non_3_red_apples = 11 + 7 + 2\n    \n    # The smallest number needed to ensure 3 red apples\n    # is one more than the maximum number that does not ensure 3 red apples.\n    min_apples_for_3_red = max_non_3_red_apples + 1\n    \n    return min_apples_for_3_red\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n    \n    solution_ = solve(equation, x)\n\n    return solution_[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    original_value = 200\n    new_value = 204\n\n    percentage_change = ((new_value - original_value) / original_value) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Assuming all boys are right-handed, we subtract the number of boys\n    # from the total number of right-handed students to find the minimum\n    # number of right-handed girls\n    boys = total_pupils - girls\n    min_right_handed_girls = right_handed - boys\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    total_spent = 6400\n    discount_percentage = 0.80\n    savings = total_spent / (1 - discount_percentage) * discount_percentage\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a single round-robin tournament, each team plays every other team once.\n    # Total matches will be combination of 6 teams taken 2 at a time\n    total_matches = (6 * 5) // 2\n    \n    # Each match results in a total of 2 points (win and lose) or (tie and tie)\n    # Therefore, total points for all the matches will be 2 times the total matches\n    total_points = total_matches * 2\n\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    minibus_capacity = 8\n    minibuses_needed = (children + minibus_capacity - 1) // minibus_capacity\n    \n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    return 101 + 97 + 102 + 99 + 98 + 103 - 100\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # To ensure Jane gets 4 different colored marbles, she must go through the worst case scenario\n    # of picking all marbles of one color, then all of another color, and so on.\n    # Since one color has only 2 marbles, she could pick those last to guarantee the fourth color.\n    ans = (red - 1) + (green - 1) + (blue - 1) + 1  # Subtract 1 from each color except the one with the smallest number\n\n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols(\n        'boys girls girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # equations based on the problem\n    equation1 = Eq(boys, girls + 90)\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)\n    equation3 = Eq(girls_swim + girls_not_swim, girls)\n    equation4 = Eq(boys_swim, boys_not_swim - 120)\n    equation5 = Eq(boys_swim + boys_not_swim, boys)\n    equation6 = Eq(boys + girls, 1690)\n\n    # solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6),\n                      (boys, girls, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # calculating the number of pupils who cannot swim\n    non_swimmers = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return non_swimmers\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    count_of_twos = 0\n    count_of_fives = 0\n    n = 1\n    \n    # Calculate number of 2s and 5s in prime factorization\n    while True:\n        n += 1\n        temp_n = n\n        while temp_n % 2 == 0:\n            count_of_twos += 1\n            temp_n = temp_n // 2\n        \n        temp_n = n\n        while temp_n % 5 == 0:\n            count_of_fives += 1\n            temp_n = temp_n // 5\n        \n        # Since zeros are created by pairs of 2 and 5, we find which count limits the number of zeros.\n        if min(count_of_twos, count_of_fives) >= 28:\n            break\n\n    return n - 1  # We subtract 1 because we went one step too far in the last n increment\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    ans = 789 * 6\n    return ans\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import primerange\n\n    # Get all primes less than 41 (since 3a and 7b must be less than 41)\n    primes = list(primerange(2, 41))\n\n    # Iterate over all primes and check which pair satisfies the equation\n    for a in primes:\n        for b in primes:\n            if 3*a + 7*b == 41:\n                return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    # Calculate cost per piece for 4pc\n    cost_per_piece_4pc = 7 / 4\n    \n    # Calculate cost per piece for 6pc\n    cost_per_piece_6pc = 8.5 / 6\n    \n    # Determine which one is a better buy\n    if cost_per_piece_4pc < cost_per_piece_6pc:\n        ans = '4pc is a better buy'\n    else:\n        ans = '6pc is a better buy'\n    \n    return ans\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    bet = 1\n    payout = 10\n    possible_rolls = [(i, j) for i in range(1, 7) for j in range(1, 7)]\n    \n    winning_rolls = [roll for roll in possible_rolls if sum(roll) > 10]\n    num_winning_rolls = len(winning_rolls)\n    num_possible_rolls = len(possible_rolls)\n    \n    expected_winning = (num_winning_rolls / num_possible_rolls) * payout\n    expected_loss_per_roll = bet - expected_winning\n    \n    total_expected_loss = expected_loss_per_roll * total_rolls\n    return total_expected_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    phone_expense = 740\n    remaining_after_phone = 1 - 0.75 # 75% spent on rent, so 25% is remaining which is 1/4 of remaining salary.\n    remaining_salary_fraction = 1/5\n    salary = phone_expense / (1 - remaining_salary_fraction * remaining_after_phone)\n    return salary\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    apples_taken_out = 3\n    weight_of_basket = total_weight_with_apples - weight_with_two_apples - 3 * (weight_with_two_apples / 2)\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    numbers = [2, 3, 4]\n    perm = permutations(numbers)\n    count = 0\n    for _ in perm:\n        count += 1\n    return count\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    def all_digits_appear(hour, minute):\n        return all(str(digit) in f\"{hour:02d}{minute:02d}\" for digit in range(4))\n\n    current_hour, current_minute = 2, 31\n    minutes_passed = 0\n\n    while True:\n        current_minute += 1\n        minutes_passed += 1\n\n        if current_minute == 60:\n            current_minute = 0\n            current_hour += 1\n            if current_hour == 24:\n                current_hour = 0\n    \n        if all_digits_appear(current_hour, current_minute):\n            break\n\n    return minutes_passed\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    remaining_after_class = 150 + 100  # since he drank 100ml after class, we add it back to find the amount before class\n    original_amount = remaining_after_class * 2  # as he drank half of it before class, we multiply by 2 to find the original amount\n    \n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    # Let the number of mushrooms gathered in the second hour be x\n    # Then the number of mushrooms gathered in the first hour is x - 26\n    # Total number of mushrooms gathered is 40\n    # So, x + (x - 26) = 40\n    # 2x - 26 = 40\n    # 2x = 66\n    # x = 33\n    # Judy's dad gathered 33 mushrooms in the second hour\n    \n    # Solve for x\n    x = (40 + 26) // 2\n    return x\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the amount of money Lynn and Mary originally had\n    original_amount = symbols('original_amount')\n\n    # Set up the equation based on the problem statement\n    equation = Eq((original_amount - 58), 3 * (original_amount - 160))\n\n    # Solve the equation\n    solutions = solve(equation, original_amount)\n\n    # Calculate Lynn's remaining amount\n    lynn_left = solutions[0] - 160 \n\n    return lynn_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n    \n    def triangle(A, B):\n        return 5 * A - B * B\n    \n    ans = triangle(diamond(4, 2), 6)\n    \n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = 3 / 7 * total_grapes\n    remainder_after_monday = total_grapes - sold_monday\n    sold_tuesday = 3 / 8 * remainder_after_monday\n    remainder_after_tuesday = remainder_after_monday - sold_tuesday\n    weight_per_bag = 3 / 4\n    number_of_bags = remainder_after_tuesday / weight_per_bag\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_sold = 60\n    tickets_left = 28\n    total_capacity = tickets_left / (1 - (percent_sold / 100))\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n\n    total_students = fifth_grade_students + sixth_grade_students\n\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1\n    \n    dividend = (quotient * divisor) + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Deⅵ's and Jerry's ages\n    devi, jerry = symbols('devi jerry')\n\n    # Set up equations based on the problem statement\n    equation1 = Eq(devi, jerry + 8)              # Deⅵ is 8 years older than Jerry\n    equation2 = Eq((devi + 4)/(jerry + 4), 5/7)  # Ratio of their ages in 4 years is 5:7\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    # jerry's current age is what we're interested in\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([64-62, 60-58, 56-54, 52-50, 48-46, 44])\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Correct tens place: 3\n    # Correct ones place: 2\n    # Incorrect tens place: 5\n    # Incorrect ones place: 3\n    # Incorrect difference: 36\n    # The mistake in the tens place contributes an additional 20 \n    # The mistake in the ones place subtracts 1\n    # Correct difference = Incorrect difference - Additional from tens + Correction from ones\n    correct_difference = 36 - 20 + 1\n    return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    equation = Eq(5 * number - 4, 41)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n    num_jugs = (total_ml + jug_capacity - 1) // jug_capacity\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50  # 49 red + 1 blue ball\n    target_percentage = 0.90\n    target_red_balls = target_percentage * total_balls\n    initial_red_balls = 49\n    red_balls_to_remove = initial_red_balls - target_red_balls\n\n    return int(red_balls_to_remove)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    from math import factorial\n    from fractions import Fraction\n\n    result = sum(Fraction(100, factorial(i)) for i in range(97, 0, -1))\n    \n    return float(result)\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    weight_of_empty_box = 12\n    number_of_matches = 220\n    \n    weight_of_all_matches = total_weight_with_matches - weight_of_empty_box\n    weight_of_one_match = weight_of_all_matches / number_of_matches\n    \n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, birds = symbols('cows birds')\n\n    # Each cow has 4 legs and each bird has 2 legs\n    # There are a total of 1300 cows and birds\n    equation1 = Eq(cows + birds, 1300)\n    # There are a total of 3440 legs\n    equation2 = Eq(4 * cows + 2 * birds, 3440)\n\n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    import math\n    \n    n = 96\n    ans = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            ans += 2 if i != n // i else 1\n    return ans\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    v_final = symbols('v_final')\n    \n    # Masses and velocities\n    m1, v1_north = 500, 20  # car 1 mass and velocity due north\n    m2, v2_west = 500, -30  # car 2 mass and velocity due west (negative for west direction)\n    \n    # Using conservation of momentum\n    # For north/south direction\n    equation1 = Eq(m1 * v1_north, (m1 + m2) * v_final)\n    \n    # For east/west direction\n    equation2 = Eq(m2 * v2_west, (m1 + m2) * v_final)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), v_final)\n    \n    # Since the cars stick together, they move with the same velocity vector after the collision\n    # Calculate the combined velocity using the Pythagorean theorem\n    combined_velocity = (solution[v_final]**2 + solution[v_final]**2)**0.5\n    \n    return combined_velocity\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    max_num = 0\n    for num in range(999, 100, -1):\n        if num % 2 != 0 and num % 9 == 0:\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                max_num = num\n                break\n    return max_num\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    # Initial number of pens Jenny has\n    jenny_pens_initial = 83\n    \n    # Number of pens Jenny gives to Ben\n    pens_given_to_ben = 28\n    \n    # Calculate the number of pens Jenny has after giving to Ben\n    jenny_pens_after = jenny_pens_initial - pens_given_to_ben\n    \n    # Since they have the same number of pens after Jenny gives away some,\n    # Ben's initial number of pens is the same as Jenny's after giving away\n    ben_pens_initial = jenny_pens_after\n\n    return ben_pens_initial\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    total_trees = 21\n    distance_between_trees = 2\n    distance_between_lamp_posts = 10\n\n    total_distance = (total_trees - 1) * distance_between_trees\n    num_lamp_posts = (total_distance // distance_between_lamp_posts) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    return 15.05 - 14.84\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the price of one laptop and one DVD player\n    price_laptop, price_dvd = symbols('price_laptop price_dvd')\n    \n    # Equation 1: 5 laptops and 4 DVD players cost $14438\n    equation1 = Eq(5 * price_laptop + 4 * price_dvd, 14438)\n    \n    # Equation 2: 1 laptop and 1 DVD player cost $2960\n    equation2 = Eq(price_laptop + price_dvd, 2960)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (price_laptop, price_dvd))\n    \n    return solutions[price_dvd]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colours = 5  # black, white, red, yellow, purple\n\n    combinations = sizes * colours\n\n    return combinations\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the average weight before Aaron joined.\n    # Let n be the original number of people in the group.\n    x, n = symbols('x n')\n\n    # Equation representing the average after Aaron joined.\n    equation1 = Eq(((n * x) + 45) / (n + 1), 61)\n\n    # Equation representing the average after Ben joined.\n    equation2 = Eq(((n * x) + 45 + 71) / (n + 2), 62)\n\n    # Solve the system of equations for x and n.\n    solution = solve((equation1, equation2), (x, n))\n\n    # Return the original average weight x.\n    avg_weight_before = solution[x]\n\n    return avg_weight_before\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        square, circle, triangle = p\n        if (10 * square + circle) - (10 * circle + triangle) == square:\n            return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_length = len(\"12345\")\n    total_patterns, remaining_digits = divmod(2000, pattern_length)\n    sum_of_pattern = sum(int(digit) for digit in \"12345\")\n    sum_of_remaining = sum(int(\"12345\"[i]) for i in range(remaining_digits))\n    total_sum = total_patterns * sum_of_pattern + sum_of_remaining\n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15  # pounds\n    coffee_cost = 3.69  # pounds\n    milk_cost = 0.89  # pounds, converted from pence to pounds\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        past_hours = hour\n        remaining_hours = 12 - hour\n        if past_hours == 2 * remaining_hours:\n            return hour\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # In the worst case, Sheila could take out 3 blue balls, 3 orange balls, and 2 yellow balls and still not have 4 of one color.\n    # To guarantee 4 of the same color, she must take out one more ball after the worst case scenario.\n    worst_case = 3 + 3 + 2\n    # One more ball ensures 4 balls of at least one color due to the pigeonhole principle.\n    total_balls = worst_case + 1\n    return total_balls\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    cost_oranges = 1.5 * 4.1\n    cost_mangoes = 2.3 * 2\n    total_cost = cost_oranges + cost_mangoes\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # Including 'a'\n\n    # Sum of numbers\n    sum_of_numbers = mean_value * total_numbers  # Total sum including 'a'\n\n    # Calculate 'a'\n    a = sum_of_numbers - sum(numbers)\n\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # A's work rate per day\n    work_rate_A = 1 / 15\n    # B's work rate per day\n    work_rate_B = 1 / 10\n\n    # Work done by A and B together in 4 days\n    work_done_4_days = 4 * (work_rate_A + work_rate_B)\n\n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_4_days\n\n    # Days for B to finish the remaining work\n    days_for_B_to_finish = remaining_work / work_rate_B\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    base_sum = sum(range(1, 14))\n    pyramid_sum = base_sum * 2 - 13\n    return pyramid_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction = original_price - reduced_price\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    # Let n be the size of the square array (width of the square)\n    # Boys occupy the outer layer and every other layer going inwards\n    # Girls occupy the layers in between the boys' layers\n    # Total number of students (boys + girls) will be n^2\n    # Total boys: 4k + (4(k-2) + 4) + (4(k-4) + 8) + ...\n    # Total girls: (4(k-1) + 4) + (4(k-3) + 8) + ...\n    # The difference in number of boys and girls is 52.\n    # We need to find the value of n such that this condition is satisfied.\n\n    # The boys and girls will be arranged in concentric squares with boys on the outside\n    # For a square of size n, there will be (n+1)//2 layers of boys and n//2 layers of girls\n\n    # The difference between boys and girls for each layer is 4 (for the four corners)\n    # So the total difference will be 4 * number of boy layers - 4 * number of girl layers\n    # This difference is given to be 52\n    \n    # We are going to iterate over potential sizes of the square (since we're looking for \n    # positive integers this is the most straightforward approach)\n    \n    n = 1\n    while True:\n        # Calculate the number of boy and girl layers based on n\n        boy_layers = (n + 1) // 2\n        girl_layers = n // 2\n        \n        # Calculate the total number of boys and girls\n        boys = n * n - (girl_layers * girl_layers)\n        girls = girl_layers * girl_layers\n        \n        # Check if the difference matches the given condition\n        if boys - girls == 52:\n            break\n        n += 1  # Search the next number\n        \n    # Total number of students will be n^2\n    total_students = n * n\n    return total_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "import math\n\ndef solution():\n    # Number of bottles\n    bottles = 1000 \n    # It takes 6 hours for the result, but this doesn't affect the calculation of the number \n    # of test tubes as we are interested in the minimum number of test tubes, not the time.\n    \n    # Find the minimum number of test tubes needed using logarithm base 2\n    # because we're essentially looking for how many binary digits (bits) it takes\n    # to represent the number of bottles uniquely, each test tube being one \"bit\".\n    test_tubes = math.ceil(math.log(bottles, 2))\n    \n    return test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for num in range(100, 1000):\n        if (num % 5 == 1) and (num % 6 == 1) and (num % 7 == 1):\n            return num\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Ducklings have 2 legs each.\n    duckling_legs = 4 * 2\n    \n    # Baby geese have 2 legs each.\n    geese_legs = 2 * 2\n    \n    # Total legs counted by the teacher owl.\n    total_legs = 36\n    \n    # Calculate the remaining number of legs after ducklings' and geese's legs are subtracted.\n    remaining_legs = total_legs - duckling_legs - geese_legs\n    \n    # Lambs have 4 legs each.\n    # Divide the remaining legs by the number of legs a lamb has to find the number of lambs.\n    number_of_lambs = remaining_legs / 4\n    \n    return int(number_of_lambs)\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Converting litres to millilitres\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    remaining_after_day4 = remaining_sweets / (1 - 1/4)\n    remaining_after_day3 = remaining_after_day4 / (1 - 1/5)\n    remaining_after_day2 = remaining_after_day3 / (1 - 1/6)\n    initial_sweets = remaining_after_day2 / (1 - 1/7)\n    return int(initial_sweets)\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let total_cookies represent the total number of cookies Charlene had at first.\n    total_cookies = symbols('total_cookies')\n    \n    # From the problem, we can establish the following equation:\n    # Charlene kept: 1/2 * total_cookies + 8\n    # Emerald received: total_cookies - (1/2 * total_cookies + 8)\n    # Emerald ate: 1/3 of what she received + 4\n    # Emerald gave to Hebe: her cookies - (1/3 of her cookies + 4)\n    # Hebe ate 1/4 of what she got and had 42 left: (her cookies - 42) * 4 = her cookies\n\n    # Using the equations, we can setup the final equation for Hebe's cookies:\n    hebe_cookies = 42\n    \n    # Emerald gave to Hebe: her cookies = 42 (Hebe's leftover) * 4\n    emerald_gave_hebe = 4 * hebe_cookies\n    \n    # Emerald ate and had the above amount left: her_cookies / 3 + 4 + emerald_gave_hebe = her_cookies\n    emerald_her_cookies = symbols('emerald_her_cookies')\n    equation1 = Eq(emerald_her_cookies / 3 + 4 + emerald_gave_hebe, emerald_her_cookies)\n    \n    # Solve for emerald_her_cookies using the equation derived:\n    solutions1 = solve(equation1, emerald_her_cookies)\n    emerald_her_cookies_value = solutions1[0]\n    \n    # Charlene gave to Emerald: total_cookies - (1/2 * total_cookies + 8) = emerald_her_cookies_value\n    equation2 = Eq(total_cookies - (total_cookies / 2 + 8), emerald_her_cookies_value)\n    \n    # Solve for total_cookies using the equation derived:\n    solutions2 = solve(equation2, total_cookies)\n    total_cookies_value = solutions2[0]\n    \n    return total_cookies_value\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of teams be 'n'.\n    n = symbols('n')\n    \n    # In a round-robin tournament each team plays each other team twice (home and away),\n    # which results in n*(n-1) matches. However, because there are 2 matches against each team,\n    # we divide by 2 to find the number of matches: n*(n-1)/2 = 30 (total matches)\n    equation = Eq(n*(n-1)/2, 30)\n\n    # Solve the equation for 'n'.\n    solutions = solve(equation, n)\n\n    # Since the number of teams cannot be negative, we take the positive solution.\n    ans = [s for s in solutions if s > 0][0]\n\n    return ans\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    daily_output = 720 // 5\n    total_days = 3600 // daily_output\n    return total_days\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Define a function to calculate the number of ways to reach a step\n    def number_of_ways(step):\n        if step == 1:\n            return 1\n        elif step == 2:\n            return 2\n        else:\n            return number_of_ways(step - 1) + number_of_ways(step - 2)\n            \n    # Number of different ways to reach the 5th step (since he must step on it)\n    ways_to_5th_step = number_of_ways(5)\n    \n    # Number of different ways to reach the 10th step from the 5th step\n    ways_from_5th_to_10th = number_of_ways(10 - 5)\n    \n    # Total different ways to reach the 10th step via the 5th step\n    total_ways = ways_to_5th_step * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Return the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 45\n    equation = Eq(girls, 3 * boys - 21)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    from sympy import factorint\n\n    # The product of the given numbers\n    product = 2*2*2*3*8*5*5*25\n    \n    # Prime factorization\n    factors = factorint(product)\n    \n    # Number of 0s at the end of the product is determined by the powers of 2 and 5\n    # Each pair of 2 and 5 contributes to one trailing 0\n    num_zeros = min(factors[2], factors[5])\n\n    return num_zeros\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(40, 51):\n        if (i**0.5).is_integer():\n           return int(i)\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    number_of_cups = 3\n    water_poured = cup_volume * number_of_cups\n    remaining_water = initial_volume - water_poured\n    \n    return remaining_water\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a represent Alice's current age and s represent her sister's current age\n    a, s = symbols('a s')\n    \n    # Alice is twice as old as her sister now\n    equation1 = Eq(a, 2 * s)\n    \n    # In 10 years, the sum of their ages will be 53\n    equation2 = Eq(a + 10 + s + 10, 53)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, s))\n\n    # Alice's current age is the solution for 'a'\n    return solutions[a]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from sympy import factorial, solve\n    from sympy.abc import n\n\n    # n * (n + 1) * (n + 2) * (n + 3) = 3024\n    eq = n*(n + 1)*(n + 2)*(n + 3) - 3024\n    roots = solve(eq, n)\n\n    # Filter only the natural number root\n    natural_root = [root for root in roots if root.is_real and root > 0][0]\n\n    # Largest of the four consecutive natural numbers\n    largest_number = natural_root + 3\n    return int(largest_number)\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    Alan, Bob = symbols('Alan Bob')\n    \n    original_relationship = Eq(Bob, Alan + 15)  # Bob has $15 more Match Dfex cards than Alan.\n    after_colin_relationship = Eq(Bob + 25, 3 * Alan)  # Colin gives Bob $25 cards. Bob now has $3 times as many as Alan.\n    \n    solutions = solve((original_relationship, after_colin_relationship), (Alan, Bob))\n    \n    return solutions[Alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "from math import lcm\n\ndef solution():\n    packs = lcm(6, 8, 9, 15)  # Least common multiple of pack sizes\n    min_packs = 1000 // packs  # Minimum number of packs to reach at least 1000 markers\n    if 1000 % packs != 0:      # If there is remainder, add one more pack\n        min_packs += 1\n    return min_packs * 4  # Total number of packs, times 4 for each pack size\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    total_students = 10\n    handshakes_per_student = total_students - 1\n    total_handshakes = (total_students * handshakes_per_student) // 2\n    return total_handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    numbers = [678, 6798, 6879, 9876, 6987]\n    target = 6789\n    differences = [abs(num - target) for num in numbers]\n    closest_number = numbers[differences.index(min(differences))]\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    # calculate 20% of 90\n    twenty_percent_of_ninety = 0.20 * 90\n    \n    # calculate 90% of 20\n    ninety_percent_of_twenty = 0.90 * 20\n    \n    # find the difference\n    difference = twenty_percent_of_ninety - ninety_percent_of_twenty\n\n    return difference\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert recurring decimals to fractions\n    def recurring_to_fraction(integer_part, non_recurring, recurring):\n        # Calculate length of non-recurring and recurring parts\n        len_non_rec = len(non_recurring)\n        len_rec = len(recurring)\n        \n        # Create the fractions for the non-recurring and the recurring parts\n        non_recurring_fraction = int(non_recurring) if non_recurring else 0\n        recurring_fraction = int(recurring)\n        \n        # Create the fraction for the whole recurring decimal\n        fraction = (integer_part * (10 ** (len_non_rec + len_rec)) + non_recurring_fraction * (10 ** len_rec) + recurring_fraction) - (integer_part * (10 ** len_non_rec) + non_recurring_fraction)\n        denominator = (10 ** len_rec - 1) * (10 ** len_non_rec)\n\n        # Simplify the fraction by calculating the greatest common divisor\n        gcd = lambda a, b: gcd(b, a % b) if b else a\n        common_divisor = gcd(fraction, denominator)\n        \n        return fraction // common_divisor, denominator // common_divisor\n    \n    # First recurring decimal 0.1[1]99251[7]\n    frac1 = recurring_to_fraction(0, '1', '1992517')\n\n    # Second recurring decimal 0.2[3]456[7]\n    frac2 = recurring_to_fraction(0, '23', '4567')\n\n    # Calculate the positions where the 7's occur in the recurring parts\n    # For the first number, subtract the length of the non-recurring part \n    position1 = len(\"19925\") + 1 - len(\"1\")\n    # For the second number, subtract the length of the non-recurring part\n    position2 = len(\"456\") + 1 - len(\"23\")\n\n    # Find the difference in positions between the two 7's \n    # to find the smallest common multiple and simulate their alignment\n    diff = position2 - position1\n\n    # Assuming the search starts from the second occurrence of a 7\n    # in the recurring part of the first number\n    start = len(\"1992517\") + position1\n\n    # Start checking from the alignment position, increment by the \n    # length of recurring parts to find the common occurrence of 7 as nth digit\n    nth_digit = start\n    while True:\n        if (nth_digit - position1) % len(\"1992517\") == 0 and (nth_digit - position2) % len(\"4567\") == 0:\n            break\n        nth_digit += len(\"1992517\")\n\n    return nth_digit\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Total pages and read pages on the first and last day\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n    \n    # Let d be the common difference and n the number of days\n    d, n = symbols('d n', integer=True)\n    \n    # Sum of an arithmetic sequence formula: n/2 * (2*a1 + (n-1)*d)\n    # where a1 is the first term and n is the number of terms\n    equation = Eq(n/2 * (2*first_day_pages + (n-1)*d), total_pages)\n    # The last term equals the first term plus (n-1)*d\n    last_term_eq = Eq(first_day_pages + (n-1)*d, last_day_pages)\n    \n    # Solve the system of equations\n    solutions = solve((equation, last_term_eq), (d, n))\n    \n    return solutions[d]\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_weight = 10  # in grams\n\n    water_weight = (orange_weight / orange_ratio) * water_ratio\n    return water_weight\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    target_average = 8.5\n    required_total = target_average * 5\n    current_total = sum(scores)\n    \n    final_score = required_total - current_total\n    \n    return final_score\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the interest rate per year\n    r = symbols('r')\n    \n    # The compound interest formula for 2 years is P * (1 + r) ** n\n    # where P is the principal, r is the annual interest rate, and n is the number of years\n    # We can set up the equation as: 10000 * (1 + r) ** 2 - 10000 = 816\n    equation = Eq(10000 * (1 + r) ** 2 - 10000, 816)\n    \n    # Solve for the interest rate\n    solution = solve(equation, r)\n    \n    # Since we want the interest rate as a percentage, we multiply by 100\n    interest_rate_per_year = solution[0] * 100\n    \n    return float(interest_rate_per_year)\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    \n    incorrect_product = quotient * 2\n    incorrect_sum = incorrect_product + divisor\n    \n    johnny_answer = incorrect_sum\n    \n    correct_product = quotient * divisor\n    correct_answer = correct_product + remainder\n    \n    is_johnny_correct = johnny_answer == correct_answer\n    \n    return correct_answer\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    result = (43 - 7) / 2\n    return result\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hannah_speed = symbols('hannah_speed')\n    peter_speed = hannah_speed + 15  # Peter's speed is 15 cm/s more than Hannah's\n    ratio = 3 / 4\n\n    # time = distance / speed; Since distance is equal for both, their times are in the ratio 3:4\n    # Hence, we have the equation 3 / hannah_speed = 4 / peter_speed\n    equation = Eq(3 / hannah_speed, 4 / peter_speed)\n\n    # solving the equation to find the value of hannah_speed\n    solution = solve(equation, hannah_speed)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for mango, pear, and apple\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # Define the equations based on the information given\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n    \n    # Solve the system of equations for mango, pear, and apple\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    # Get the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n    \n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let f be the number of fifty-cent coins Owen had at first\n    # let d be the number of one-dollar coins Owen had at first\n    f, d = symbols('f d')\n\n    # Owen's mother gave him 10 one-dollar coins and 5 dollars worth of fifty-cent coins (which is 10 fifty-cent coins)\n    # In the end, he has d + 10 one-dollar coins and f + 10 fifty-cent coins\n    # According to the final condition: d + 10 is twice the number of f + 10\n    equation1 = Eq(d + 10, 2 * (f + 10))\n\n    # Initially, 2/7 of his coins were fifty-cent coins, so the rest (5/7) were one-dollar coins\n    # That gives us the equation: f / (f + d) = 2/7\n    equation2 = Eq(f / (f + d), 2 / 7)\n    \n    # Solving the equations for f and d\n    solutions = solve((equation1, equation2), (f, d))\n    \n    # Owen's initial number of coins is the sum of the fifty-cent coins and one-dollar coins he had at first\n    initial_coins = solutions[f] + solutions[d]\n\n    return initial_coins\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    multiple_choice_time = 23\n    fill_in_the_blank_time = 35\n\n    short_answer_time = total_time - multiple_choice_time - fill_in_the_blank_time\n\n    return short_answer_time\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # meters per second\n    time_to_cross = 45  # seconds\n    train_length = 850  # meters\n\n    tunnel_length = (train_speed * time_to_cross) - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    parts = 1 + circles * (1 + circles) // 2 + line * (circles + 1)\n\n    return parts\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    # Total number of entrances\n    total_entrances = 4\n    # Since Joe and Mike cannot enter through the same entrance,\n    # we can consider Joe as already having entered through one of the entrances.\n    # So we have 3 entrances left for Mike and Tina to choose from.\n    remaining_entrances = total_entrances - 1\n    \n    # Calculate all possible permutation for Mike and Tina considering the remaining entrances.\n    mike_tina_permutations = permutations(range(remaining_entrances), 2)\n    \n    # Joe can enter any of the 4 entrances and for each choice of Joe's entrance,\n    # Mike and Tina have permutation options among the remaining entrances.\n    count = total_entrances * len(list(mike_tina_permutations))\n    \n    return count\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    spent_money = total_money - saved_money\n\n    transportation_money = spent_money / 3\n    food_money = transportation_money * 2\n\n    return food_money\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n\n    equation1 = Eq(bala, daniel + 320)\n    equation2 = Eq(bala, 0.5 * (amelia + carl + daniel))\n    equation3 = Eq(carl, 0.75 * (amelia + bala + daniel))\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n    equation5 = Eq(amelia, 160)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    fixed_fee = 4\n    first_3_ton_rate = 4\n    additional_ton_rate = 3\n    total_amount = 109\n\n    # Calculate the cost for the first 3 tons\n    cost_for_first_3_tons = fixed_fee + (first_3_ton_rate * 3)\n\n    # Subtract the fix and first 3 ton cost from total to find how much is left for additional tons\n    remaining_amount = total_amount - cost_for_first_3_tons\n\n    # Divide the remaining amount by the rate for additional tons to find the number of additional tons\n    additional_tons = remaining_amount // additional_ton_rate\n\n    # Total tons = 3 first tons + additional tons\n    total_tons = 3 + additional_tons\n\n    return int(total_tons)\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = remainder + 1\n    smallest_dividend = quotient * smallest_divisor + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the lazy gardener to mow the lawn on his own\n    x = symbols('x')\n\n    # If the quick gardener takes 12 hours, his work rate is 1/12 lawn per hour\n    quick_work_rate = 1/12\n\n    # Let the lazy gardener's work rate be 1/x lawn per hour\n    lazy_work_rate = 1/x\n\n    # Both together take 8 hours, so their combined work rate is 1/8 lawn per hour\n    combined_work_rate = 1/8\n\n    # Set up the equation: quick_work_rate + lazy_work_rate = combined_work_rate\n    equation = Eq(quick_work_rate + lazy_work_rate, combined_work_rate)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples/3 + oranges/2, 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9\n    girls = 3\n    candy_per_girl = total_candy / girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    # Let x be the number of tomatoes Matthew had initially\n    # After giving away 7 tomatoes, Belinda has 36 - 7 tomatoes\n    belinda_after = 36 - 7\n    # Since they now have the same number of tomatoes\n    # Matthew initially had belinda_after - x = x\n    # Solving the equation for x gives us:\n    x = belinda_after / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, solve\n    x = symbols('x')\n    equation = 5*x + 3*x + 5*x - 182\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import lcm\n\n    green_line_interval = 5\n    red_line_interval = 6\n\n    least_common_multiple = lcm(green_line_interval, red_line_interval)\n\n    hours = least_common_multiple // 60\n    minutes = least_common_multiple % 60\n\n    start_hour = 5  # Trains start at 5 am\n    next_common_time_hour = start_hour + hours\n    next_common_time_minute = minutes\n\n    # Adjust for next_common_time_hour if minutes exceed 60, which is not required here\n    return f\"{next_common_time_hour % 24:02d}:{next_common_time_minute:02d}\"\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    # Initialize the sum\n    ans = 0\n    \n    # Initialize multiplier for the current term\n    multiplier = 1\n    \n    # Start with 2, and increment each term by 2 to get the odd numbers and add the last even number\n    for i in range(2, 15, 2):\n        if i < 14:\n            multiplier *= (i + 1)  # Multiply with the next odd number\n        else:\n            multiplier *= i  # When i is 14, multiply by 14 itself\n        ans += multiplier  # Add the current term to the sum\n        \n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    total_capacity_ml = 990\n    half_capacity_ml = total_capacity_ml / 2\n    capacity_per_cup_ml = half_capacity_ml / 3\n    \n    return capacity_per_cup_ml\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Olivia walks from the first tree to the 101th tree\n    # It implies she walks past 100 intervals (since we start counting from the first tree)\n    # Each interval is 3 meters, hence she walks 100 * 3 meters in 3 minutes\n    distance_walked = 100 * 3\n    \n    # Time Olivia takes to walk distance_walked\n    time_taken = 3 \n\n    # Olivia's walking speed is distance_walked per time_taken\n    walking_speed = distance_walked / time_taken # in meters per minute\n    \n    # The total distance between the school and Olivia's home is 4000 meters\n    total_distance = 4000\n    \n    # The time it takes for Olivia to travel from school to home is:\n    time_to_travel = total_distance / walking_speed # in minutes\n\n    return time_to_travel\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_position_from_front = 8\n    blue_car_position_from_back = total_cars - blue_car_position_from_front + 1\n    return blue_car_position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    rounded = round(number, -3)\n\n    return rounded\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    price_per_gram = 80 / 100\n    cost_of_250_grams = price_per_gram * 250\n    return cost_of_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Calculate the number of terms in the sequence\n    n_terms = 124 // 4\n\n    # Using the formula for the sum of squares of an arithmetic sequence\n    # Sum of squares = (n/6)(2n+1)(2n-1)\n    sum_squares = (n_terms * (2 * n_terms + 1) * (2 * n_terms - 1)) // 6\n\n    # Because the actual sequence is 4^2, 8^2, ..., the formula needs to be multiplied by 4^2\n    return sum_squares * (4**2)\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_of_squares = sum([i**2 for i in range(6, 52, 5)])\n    return sum_of_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen trades 5 fish for 2 rabbits.\n    # Oscar trades 4 rabbits for 7 packs of wheat.\n    # Therefore, for each rabbit, Owen has given 5 / 2 fish.\n\n    # For one pack of wheat, the ratio of rabbits to wheat is 4 rabbits to 7 packs of wheat.\n    # Hence, for one pack of wheat, it is 4 / 7 rabbit.\n\n    # For 14 packs of wheat, Dennis would need 2 * (14 * (4 / 7)) rabbits (since 14 packs is twice of 7 packs).\n    # So, we can calculate the number of rabbits for 14 packs.\n    rabbits_for_14_packs = 2 * (14 * (4 / 7))\n\n    # Now, we find how many fish Owen should give for these rabbits using the fish to rabbit ratio.\n    fish_for_rabbits = (5 / 2) * rabbits_for_14_packs\n\n    return int(fish_for_rabbits)\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    # Since the order matters, we will use permutations instead of combinations\n    people = ['Len', 'Joe', 'Angle', 'Jack']\n    entrances = [1, 2, 3]\n    count = 0\n    \n    # Generate all permutations of people\n    for perm in permutations(people):\n        # For each permutation, try all possible entrance distributions\n        for e1 in entrances:\n            for e2 in entrances:\n                for e3 in entrances:\n                    if e1 != e2 or e2 != e3 or e1 != e3:  # At least one person per entrance\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    # Let's denote x as the number of questions answered correctly\n    # and y as the number of questions answered incorrectly.\n    # Therefore, we have x + y as the total number of questions, which is 6.\n\n    # Since we have 6 questions in total:\n    # Hence, we can write two equations based on the problem statement:\n    # 5x - 2y = 23 (total score)\n    # x + y = 6 (total questions)\n    \n    # Now we can solve these two equations to find the value of x, y.\n    for x in range(7):  # Since she can only answer from 0 to 6 questions correctly.\n        y = 6 - x\n        if 5*x - 2*y == 23:\n            return x\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the number of cows and 'g' be the number of goats initially.\n    c, g = symbols('c g')\n\n    # According to the problem, 'c' is 65% of the total initial number of animals.\n    # Therefore, 'g' is (100% - 65%) of the total initial number of animals.\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 more animals are added, the number of cows becomes 'c + 240'.\n    # The number of goats doubles, so it becomes '2 * g'.\n    # Now cows are 85% of the total number, and goats are 15% of the total.\n    equation2 = Eq(c + 240, 0.85 * (c + 240 + 2 * g))\n\n    # Solve the system of equations for 'c' and 'g'.\n    solutions = solve((equation1, equation2), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n    solutions = solve(equation, justin)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    total_time = time_per_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    # start searching from 1 cookie, since the minimum number of cookies cannot be 0\n    cookies = 1\n    \n    # iterate until the conditions are met\n    while True:\n        # check if the current number of cookies satisfies both conditions\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            break  # found the least number of cookies\n        cookies += 1  # increment and try the next number\n    \n    return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    num, _ = solve_congruence(*congruences)\n    while num < 100:\n        return num\n        num += 4 * 5 * 6  # Skipping to the next solution which is a multiple of lcm(4, 5, 6) away\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    num1 = 2.6\n    num2 = 4.8\n    halfway = (num1 + num2) / 2\n    return halfway\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n\n    final_payment = total_cost - discount\n\n    return final_payment\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    return 828 + 191\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to arrange two boys at the ends is 2! (since there are 2 boys)\n    ways_to_arrange_boys = factorial(2)\n\n    # Number of ways to arrange three girls in the middle is 3! (since there are 3 girls)\n    ways_to_arrange_girls = factorial(3)\n\n    # Apply the multiplication principle: number of arrangements for boys times number of arrangements for girls\n    total_arrangements = ways_to_arrange_boys * ways_to_arrange_girls\n\n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    # Given ages\n    ages = [6, 9, 10]\n    # Sort the ages to ensure Tom is the oldest (since Jason is younger than Tom)\n    ages.sort(reverse=True)\n    # Tom's age is a multiple of 3, Adam is not the youngest or the oldest\n    # so Adam's age must be 9, as Tom's age being a multiple of 3 and the oldest must be 10.\n    adam_age = ages[1]\n\n    return adam_age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Drawing 5 balls of the same color occurs twice in the worst case before drawing the third color\n    # First 5 balls could be all red, next 5 could be all white or all yellow\n    # The next draw, however, has to be a different color\n    return (5 + 5 + 1)\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    num_str = '2023'\n    while True:\n        if int(num_str) % 11 == 0:\n            return len(num_str)\n        num_str += '2023'\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    # Writing the number eighty thousand and forty in figures.\n    return 80040\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 // 21\n    return ans\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Given 28 apples and 6 children including Avril\n    total_apples = 28\n    children = 6\n\n    # To find the largest number for Avril, we need to distribute the minimum apples to the other 5\n    # Since they all need to get different numbers and at least one apple, we start with 1\n    # and continue incrementing, hence 1, 2, 3, 4, 5 for the other children.\n    min_for_others = sum(range(1, children))\n\n    # Remaining apples for Avril after giving out the minimum distinct amounts \n    # to the other children would be the largest possible for Avril\n    apples_for_avril = total_apples - min_for_others\n\n    return apples_for_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    # Define the symbols for the shapes\n    triangle = symbols('triangle')\n    square = symbols('square')\n    circle = symbols('circle')\n    diamond = symbols('diamond')\n\n    # Define the equations based on the provided information\n    equation1 = Eq(2 * triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Get the number of triangles that are equal to the diamond\n    triangles_equal_to_diamond = solutions[diamond] / solutions[triangle]\n\n    return triangles_equal_to_diamond\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for number in range(1, 401):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_used = 5 / 8\n    cost_of_laptop = total_money * fraction_used\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio_jocye_lori = 3 / 2  # Jocye's speed : Lori's speed\n    jocye_speed = lori_speed * ratio_jocye_lori  # Calculate Jocye's speed\n    time = 10  # Time in seconds\n    distance_jocye_runs = jocye_speed * time  # Calculate distance Jocye can run in 10 seconds\n    \n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    initial_average = 60\n    new_average = 70\n    initial_total = initial_average * 2\n    new_total = new_average * 3\n    added_number = new_total - initial_total\n\n    return added_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime\n\n    # Times are given in HH:MM format\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_caught_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    time_bus_trip = 18  # 18 minutes\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    # Calculate the walking time before bus trip\n    walking_time_before_bus = (time_caught_bus - time_left_school).seconds // 60\n\n    # Calculate the time she got off the bus\n    time_off_bus = time_caught_bus + timedelta(minutes=time_bus_trip)\n\n    # Calculate the walking time after bus trip\n    walking_time_after_bus = (time_got_home - time_off_bus).seconds // 60\n\n    # Total walking time is the sum of before and after bus trip\n    total_walking_time = walking_time_before_bus + walking_time_after_bus\n\n    return total_walking_time\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    common_diff = second_term - first_term\n    last_term = 79\n\n    # Explicit formula for the n-th term in an arithmetic sequence: a_n = a_1 + (n-1)d\n    # Here, a_n is the last term, a_1 is the first term and d is the common difference.\n    # We need to find n such that a_n = last_term\n    # Hence, we solve for n: last_term = first_term + (n-1)*common_diff\n\n    num_terms = ((last_term - first_term) // common_diff) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken_initial, lisa_initial, amount_given = symbols('ken_initial lisa_initial amount_given')\n    \n    # Ken had $15 more than Lisa initially\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n    \n    # After giving away some money, Ken has $21 less than Lisa\n    equation2 = Eq(ken_initial - amount_given, lisa_initial + amount_given - 21)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ken_initial, lisa_initial, amount_given))\n    \n    # Extract the amount given\n    return solutions[amount_given]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    first_segment = sum(range(1, 6))  # Sum of trophies from question 1 to 5\n    second_segment = sum(range(5, 2, -1))  # Sum of trophies from question 6 to 9\n    total_trophies = first_segment + second_segment\n    return total_trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the cookies eaten on the first day as x\n    x = symbols('x')\n    \n    # Since he eats 6 more than the previous day, the cookies eaten follow an arithmetic sequence\n    # The 5 days' cookie consumption is x, x+6, x+12, x+18, x+24, respectively.\n    # Total cookies eaten over 5 days is the sum of the arithmetic sequence with 5 terms\n    # The sum of an arithmetic sequence with n terms is given by S_n = n/2 * (a_1 + a_n)\n    \n    # The sum of cookies eaten over the 5 days must equal 100\n    equation = Eq(x + (x + 6) + (x + 12) + (x + 18) + (x + 24), 100)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Calculate the total number of terms\n    total_terms = sum(range(2, 9))\n    \n    # Find the midpoint index\n    mid_point = (total_terms + 1) // 2\n\n    # Find which number corresponds to the midpoint index\n    count = 0\n    for i in range(1, 9):\n        count += i\n        if count >= mid_point:\n            median = i\n            break\n\n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # Calculate the worst scenario: pick all marbles except 1 red marble\n    total_marbles = 18 + 6 + 8  # Total number of marbles\n    marbles_without_1_red = total_marbles - 1  \n    \n    # The next marble picked must be a red marble\n    marbles_to_ensure_2_red = marbles_without_1_red + 1\n    \n    return marbles_to_ensure_2_red\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_number = int(''.join(map(str, sorted(digits))))\n    \n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 31):\n        # Count how many times a student has turned around\n        turns = (i % 2 == 0) + (i % 3 == 0)\n        # If they've turned an odd number of times, they'll be facing the teacher\n        if turns % 2 == 1:\n            facing_teacher += 1\n    return facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    n = 25\n    d = (25 - 10) / (4 - 1)  # Common difference\n    \n    total_athletes = (n / 2) * (2 * first_term + (n - 1) * d)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Initial probability for car behind each gate\n    p_car_gate1 = 1/3\n    p_car_gate2 = 1/3\n    p_car_gate3 = 1/3\n\n    # Host opens gate 3 and shows a goat, so the probability of gate 3 becomes 0\n    p_car_gate3 = 0\n\n    # The probability that the car is behind gate 2 doubles because gate 3 is now known to have a goat\n    p_car_gate2 *= 2\n\n    # Returning final probabilities - we want to switch if probability of gate 2 higher than gate 1\n    switch = p_car_gate2 > p_car_gate1\n\n    return 2 if switch else 1\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    times = 6\n    x = symbols('x')\n    total_spent = times * x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    total = sum(i * (i + 1) for i in range(1, 32))\n    return total\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the original sum of money David had\n    x = symbols('x')\n\n    # David spent $75 on CDs; remaining money is x - 75\n    # Then he spent 1/4 of the remaining money on batteries;\n    # the equation for the money left after buying batteries: x - 75 - 1/4 * (x - 75)\n    # He is left with 1/3 of the original sum of money: 1/3 * x\n    # Setting up the equation:\n    equation = Eq(x - 75 - 1/4 * (x - 75), 1/3 * x)\n\n    # Solving the equation for x\n    original_sum = solve(equation, x)[0]\n\n    return original_sum\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # rate of one trainer\n    rate_per_trainer = 7 / (7 * 7)\n    # total rate needed to catch 49 pokemon in 49 minutes\n    total_rate_needed = 49 / 49\n    # number of trainers required to achieve the total rate \n    num_trainers = total_rate_needed / rate_per_trainer\n    return int(num_trainers)\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    ways = factorial(7) // (factorial(3) * factorial(7-3))\n    return ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    total_people = 13\n    minutes_per_person = 142\n    total_minutes = total_people * minutes_per_person\n    return total_minutes\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The number 928 repeated 33 times to form a 99-digit number\n    # The remainder of 928 divided by 9 is the same as the remainder of the 99-digit number divided by 9\n    remainder_928 = 928 % 9\n    # Each group of \"928\" contributes the same remainder, so we multiply this remainder by the number of groups\n    total_remainder = remainder_928 * 33\n    # We then take the remainder of this total when divided by 9\n    ans = total_remainder % 9\n    return ans\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value\n    op_sym = symbols('oplus')\n\n    # Write the equation based on the problem\n    # After rearranging: oplus * 9 + 47 - oplus = 84+27\n    # It can be simplified to: oplus * 8 + 47 = 111\n    equation = Eq(op_sym * 9 + 47 - op_sym, 84 + 27)\n\n    # Solve the equation\n    solution = solve(equation, op_sym)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_answers = 1500\n\n    percentage_incorrect = (incorrect_answers / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the numbers be x, y, z such x <= y <= z\n    x, y, z = symbols('x y z')\n    \n    # Given: The sum of the three numbers (x + y + z = 56)\n    equation1 = Eq(x + y + z, 56)\n    \n    # Given: The average of the smallest two numbers (x + y) / 2 = 14\n    equation2 = Eq((x + y) / 2, 14)\n    \n    # Given: The average of the largest two numbers (y + z) / 2 = 22\n    equation3 = Eq((y + z) / 2, 22)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Since we want the median number, return y\n    return solutions[y]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda x: abs(x - 2.5))\n    return closest\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Sour Sweets bar cost\n    sour_sweets_cost = 12\n    # Chocolate Drops bar cost\n    chocolate_drops_cost = 17\n    \n    # Eliot's payment in pence\n    eliot_payment = 300\n    # Maya's payment in pence\n    maya_payment = 400\n    \n    # We are going to iterate over the possible number of bars that Eliot and Maya could buy\n    # starting from 1 to the point where the cost surpasses Eliot's payment (since it's the lower one)\n    for bars in range(1, eliot_payment // sour_sweets_cost):\n        eliot_cost = sour_sweets_cost * bars\n        maya_cost = chocolate_drops_cost * bars\n        \n        # Calculate the change for both\n        eliot_change = eliot_payment - eliot_cost\n        maya_change = maya_payment - maya_cost\n        \n        # If they receive the same amount of change, we found the answer\n        if eliot_change == maya_change:\n            return bars\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [3, 1, 7, 8]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n\n    # smallest 4-digit even number has smallest even digit at the end\n    smallest_even_digit = min(even_digits)\n    \n    # remove the smallest even digit from the list\n    digits.remove(smallest_even_digit)\n    \n    # sort the remaining digits to find the smallest combination\n    digits.sort()\n\n    # join the digits and append the smallest even digit at the end\n    smallest_number = int(''.join(map(str, digits)) + str(smallest_even_digit))\n    return smallest_number\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10  # total litres of orange juice\n    container_volume = 2  # litres each container can hold\n    number_of_containers = total_volume / container_volume\n    return int(number_of_containers)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    jackson, chloe = symbols('jackson chloe')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(jackson + chloe, 54)  # The sum of their ages is 54\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))  # In 3 years, Jackson will be 5 times as old as Chloe\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jackson, chloe))\n    \n    # Jackson's age 3 years later\n    jackson_age_later = solutions[jackson] + 3\n    \n    return jackson_age_later\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n\n    return equation1 == equation2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dumpling, bun = symbols('dumpling bun')\n    \n    equation1 = Eq(6*dumpling + 4*bun, 92)\n    equation2 = Eq(3*dumpling + 1*bun, 41)\n    \n    solutions = solve((equation1, equation2), (dumpling, bun))\n\n    return solutions[dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_fare = 8.5\n    base_distance = 1.8\n\n    # Subtract the base fare to find the fare for additional kilometers\n    additional_fare = total_fare - base_fare\n\n    # Find the number of additional kilometers\n    additional_km = additional_fare / additional_fare_per_km\n\n    # Calculate the total distance\n    total_distance = base_distance + additional_km\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "import math\n\ndef solution():\n    # Given at least one student gets at least 3 apples,\n    # we can first give 3 apples away to 1 student.\n    remaining_apples = 80 - 3\n\n    # If each of the remaining students gets at least 1 apple,\n    # the class size can be deduced by giving 1 apple to each student.\n    # This is the maximum number of students that can receive the remaining apples.\n    max_students_with_1_apple = remaining_apples\n\n    # Hence, the total class size is max_students_with_1_apple + 1 (the student who received 3 apples)\n    class_size = max_students_with_1_apple + 1\n\n    return class_size\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    yellow, red, blue = symbols('yellow red blue')\n    \n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n    \n    solutions = solve((equation1, equation2, equation3), (yellow, red, blue))\n    \n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_chocolates = 8\n    original_chocolates = received_chocolates * 2\n    return original_chocolates\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n\n    children_per_big_car = 4\n    children_per_small_car = 2\n\n    big_cars_needed = boys_in_big_cars // children_per_big_car\n    small_cars_needed = girls_in_small_cars // children_per_small_car\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    total_years = 100\n\n    current_sum = mother_age + father_age + julia_age\n    years = 0\n    while current_sum < total_years:\n        years += 1\n        current_sum += 3  # Each year, all three of them grow older by one year\n    \n    return years\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_per_pound = 16\n    pounds_per_kg = 2.2\n    weight_ounces = 56\n    \n    weight_pounds = weight_ounces / ounces_per_pound\n    weight_kg = weight_pounds / pounds_per_kg\n    \n    return round(weight_kg, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25*x, 200)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculate sum of the sequence from 5 to 80\n    sum_to_80 = sum(range(5, 81))\n    # Calculate sum of the sequence from 5 to 78\n    sum_to_78 = sum(range(5, 79))\n    # The final sum is twice the sum to 78 (as it includes the ascending and descending parts), plus 79 and 80\n    ans = (2 * sum_to_78) + 79 + 80\n    return ans\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "def solution():\n    # Since each digit from 1 to 9 is used exactly once and we want to maximize A\n    # we should put the largest digits in the positions that are counted most often.\n    # The digits 'b', 'c', 'd', 'e', 'f', 'g' each appear three times in the sum A,\n    # while 'a', 'h', 'i' appear only once.\n\n    # Thus, the largest digits, 9, 8, 7, 6, 5, 4, should be in the 'b'..'g' positions\n    # and the smallest digits, 1, 2, 3, should be in the 'a', 'h', 'i' positions.\n\n    # We can assign the highest value to 'd' since it's in the middle and affects 3 terms\n    # then we assign the next highest values to 'c' and 'e', and so on.\n\n    # A can hence be maximized as follows:\n    # A = 123 + 234 + 345 + 456 + 567 + 678 + 789\n\n    # Calculate A based on the above assignment\n    A = (123 + 234 + 345 + 456 + 567 + 678 + 789) * 3  # Multiply by 3 because every inner digit is repeated 3 times\n    \n    return A\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.2)\n    discounted_price = 32 - 4\n    total_discount = original_price - discounted_price\n    total_percentage_discount = (total_discount / original_price) * 100\n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "def solution():\n    from math import factorial\n\n    # A must be to the left of B, and B must be to the left of C.\n    # There are 3! ways to arrange A, B, and C.\n    abc_permutations = factorial(3)\n\n    # There are 2 other people which can be arranged in the remaining 2 positions in 2! ways.\n    others_permutations = factorial(2)\n\n    # The total number of ways is the product of these permutations.\n    total_ways = abc_permutations * others_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    total_sum = 0\n    for numerator in range(3, 2019, 7):\n        total_sum += (2019 / (numerator * (numerator + 7)))\n\n    return total_sum\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    def pattern(x):\n        return (x % 10)**2\n    \n    return pattern(55)\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_six_digit_numbers = sorted([''.join(p) for p in permutations(digits, 6)])\n    return int(all_six_digit_numbers[504])  # indexing starts from 0, so 505th number is at index 504\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    count = 0\n    digits = ['0', '2', '3']\n    \n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and i != k and j != k and i != '0':\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Equation 1: Total students\n    equation1 = Eq(girls + boys, total_students)\n\n    # Equation 2: Total average score (sum of all girls' scores + sum of all boys' scores)\n    equation2 = Eq(girls * girls_average + boys * boys_average, total_students * total_average)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    alice_rate = 1/40\n    bob_rate = 1/60\n    total_days_together = 27\n    work_done = total_days_together * (alice_rate + bob_rate)\n    days_off = (1 - work_done) / alice_rate\n    return int(days_off)\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples_of_6_and_9 = []\n    for number in range(21, 50):  # start from 21 since we want numbers larger than 20\n        if number % 6 == 0 and number % 9 == 0:\n            multiples_of_6_and_9.append(number)\n    return multiples_of_6_and_9\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red, white / 2)\n    equation2 = Eq(white, 3 / 4 * black)\n    equation3 = Eq(red + white + black, 136)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    a7 = 105  # 7th term\n    a8 = 120  # 8th term\n    a9 = 135  # 9th term\n\n    # Calculate the common difference\n    d = a8 - a7\n\n    # Calculate the 1st term, a1 using the 7th term and common difference\n    a1 = a7 - 6 * d\n\n    # Calculate the 100th term\n    a100 = a1 + 99 * d\n\n    return a100\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # We are guaranteed to have at least one pair if we take one more than the number of colors.\n    # Since we have two colors, the smallest number we need to take is 2 colors + 1 sock = 3 socks.\n    return 3\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    total_dogs = 3\n    years_since_then = 4\n    years_ahead = 2\n\n    combined_age_now = combined_age_4_years_ago + (years_since_then * total_dogs)\n    combined_age_in_2_years = combined_age_now + (years_ahead * total_dogs)\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = 4**2 // 2\n    return n\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    ryan, audrey = symbols('ryan audrey')\n\n    # Create equations based on the problem\n    ratio_initial = Eq(ryan / audrey, 2/7)\n    ratio_after = Eq((ryan + 20) / (audrey - 80), 1/3)\n\n    # Solve the system of equations\n    solutions = solve((ratio_initial, ratio_after), (ryan, audrey))\n\n    # Extract Audrey's initial number of marbles\n    audrey_initial = solutions[audrey]\n\n    return audrey_initial\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hours = 8\n    minutes = 30\n    # Each hour mark on the clock represents 30 degrees (360 degrees / 12 hours)\n    hour_angle = (hours % 12) * 30 + (minutes / 60) * 30\n    # Each minute mark on the clock represents 6 degrees (360 degrees / 60 minutes)\n    minute_angle = minutes * 6\n    # The angle between the hands is the absolute difference between their angles\n    difference = abs(hour_angle - minute_angle)\n    # The smaller angle is what we're looking for, so if the difference is greater than 180 degrees,\n    # we subtract it from 360 degrees\n    angle = min(difference, 360 - difference)\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4\n    remaining_apples = 20\n\n    total_apples_before = justin_apples + sisters_apples + remaining_apples\n\n    return total_apples_before\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano = 30\n    violin = 41\n    both = 15\n\n    # Using the inclusion-exclusion principle\n    total_students = (piano + violin) - both\n\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    sequence_length = 65\n    sequence_pattern_length = 3 + 2 + 2\n    full_sequences, remaining_beads = divmod(sequence_length, sequence_pattern_length)\n    black_beads_in_full_sequence = 3 * 2  # Two groups of 3 black beads in each full sequence\n\n    # Count black beads in the remaining part\n    remaining_black_beads = min(remaining_beads, 3) if remaining_beads > 0 else 0\n\n    total_black_beads = full_sequences * black_beads_in_full_sequence + remaining_black_beads\n\n    return total_black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    total_time_needed = timedelta(minutes=13 + 23 + 8 + 27)\n    school_start_time = datetime.strptime(\"7:45\", \"%H:%M\")\n    wake_up_time = school_start_time - total_time_needed\n    return wake_up_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    total_sum = 0\n    for i in range(60, 0, -4):\n        total_sum += (i + (i - 1)) - ((i - 2) + (i - 3))\n    return total_sum\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for i in range(len(coins)):\n        for j in range(len(coins)):\n            for k in range(len(coins)):\n                total = coins[i] + coins[j] + coins[k]\n                totals.add(total)\n\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "def solution():\n    from itertools import permutations\n\n    # Total entrances\n    total_entrances = 4\n    \n    # Total people\n    total_people = 3\n    \n    # Joe and Mike cannot join the same entrance, so we consider entrances for Joe and Mike to be independent\n    # Tina can choose any of the 4 entrances\n\n    # Joe has 4 options\n    joe_options = total_entrances\n    \n    # Mike has 3 options (excluding the one that Joe has chosen)\n    mike_options = total_entrances - 1\n    \n    # Tina has 4 options (she can choose any entrance)\n    tina_options = total_entrances\n    \n    # Now we need to consider the permutations of their entering order\n    # There are permutations of total_people as the order matters\n    order_permutations = len(list(permutations(range(total_people))))\n    \n    # Multiply the options and permutations together\n    total_ways = joe_options * mike_options * tina_options * order_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    # Let x be the number of chickens/ducks and y be the number of cows.\n    # Since the number of chickens is equal to the number of ducks, we can say:\n    # x + x + y = 51 (heads)\n    # 2x(chickens) + 2x(ducks) + 4y(cows) = 160 (legs)\n\n    # Simplify equations:\n    # 2x + y = 51\n    # 4x + 4y = 160 => Simplifying gives us x + y = 40\n\n    # Now we solve the system of equations:\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(2*x + y, 51)\n    equation2 = Eq(x + y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice * (1/5)\n    abigail_drank = 200\n    anna_drank = 120\n    juice_left = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n    ans = (percentage / 100) * quantity\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    distance = 3000  # nautical miles\n    time_days = 13\n    time_hours = 22\n    total_time_hours = time_days * 24 + time_hours  # converting days to hours and adding the rest of the hours\n\n    average_speed = distance / total_time_hours\n\n    return round(average_speed)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # in liters\n    concentration1 = 40  # in percent\n\n    volume2 = 3  # in liters\n    concentration2 = 70  # in percent\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1 / 100) + (volume2 * concentration2 / 100)\n\n    new_concentration = (total_juice / total_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    return 8.4 - 4.7 + 2.6 - 3.3\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    ans = 2136 // 8\n    return ans\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) + 1\n    last_multiple = 150 // 11\n\n    num_multiples = last_multiple - first_multiple + 1\n    return num_multiples\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's call W the total number of women and M the total number of men at first\n    W, M = symbols('W M')\n    \n    # After 36 women left, the number of women became W-36\n    # According to the first condition, (W-36) = (3/5)M\n    eq1 = Eq(W - 36, (3/5) * M)\n    \n    # After 48 men left, the number of men became M-48\n    # According to the second condition, W-36 = M-48, because the number of men equals the number of women\n    eq2 = Eq(W - 36, M - 48)\n    \n    # Now, let's solve these equations to find the values of W and M\n    solutions = solve((eq1, eq2), (W, M))\n    \n    # The total number of people at the bus stop at first is W + M\n    total_people = solutions[W] + solutions[M]\n    \n    return total_people\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away_again = 777\n\n    final_stamps = initial_stamps - gave_to_sister + bought_stamps - gave_away_again\n    \n    return final_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2\n\n    total_people = people_in_front_of_Bella + people_behind_Albert + Albert_and_Bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(20, 31):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Fatouma's current age as 'f'\n    f = symbols('f')\n\n    # Equation: In 2 years, Fatouma's age will be f + 2\n    # Five years ago, her age was f - 5\n    # In 2 years, she will be twice as old as she was 5 years ago: f + 2 = 2*(f - 5)\n    \n    # Setting the equation based on the information given\n    equation = Eq(f + 2, 2 * (f - 5))\n\n    # Solving the equation to find Fatouma's age\n    solution = solve(equation, f)\n\n    return solution[0]  # Extracting the age from the solution as there is only one solution to the equation\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    solutions = []\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # ensure x2 is different and greater than x1\n            x3 = 14 - x1 - x2\n            if x3 > x2:  # ensure x3 is different and greater than x2\n                solutions.append((x1, x2, x3))\n    return solutions\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1 * 3 * 8 + 2 * 6 * 16 + 3 * 9 * 24\n    denominator = 1 * 2 * 4 + 2 * 4 * 8 + 3 * 6 * 12\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    min_height = 124\n    max_height = 132\n    # There are 9 different heights possible (124 through 132, inclusive)\n    # According to the Pigeonhole Principle, to ensure at least 4 students have the same height,\n    # the minimum class size = number of heights * (4 - 1) + 1.\n    class_size = (max_height - min_height + 1) * (4 - 1) + 1\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    pen_cost = 0.5  # Cost of one pen in pounds\n    num_pens = 3    # Number of pens\n    total_paid = 5  # Total amount paid in pounds\n\n    total_cost = pen_cost * num_pens  # Total cost of pens\n    change = total_paid - total_cost  # Change received\n\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # To ensure the win, Fred must leave 4n+1 oranges after his turn since this would force George to leave 4n oranges.\n    # Ultimately leading to Fred always be in a position to take the last orange\n    # Let's try removing 1, 2, or 3 oranges and see which one leaves a multiple of 4 + 1\n\n    for oranges_taken in range(1, 4):\n        remaining_oranges = 15 - oranges_taken\n        if remaining_oranges % 4 == 1:\n            return oranges_taken\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"19:15\", \"%H:%M\")\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = end_time - cook_duration\n    return start_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n\n    go_checkers_chess = 5\n\n    total_students = (go + checkers + chess) - (go_checkers + go_chess + checkers_chess) + go_checkers_chess\n    \n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let x be the number of years later\n    # Current ages: Oliver = 20, Lin = 26\n    # After x years: Oliver = 20 + x, Lin = 26 + x\n    # Sum of ages after x years: (20 + x) + (26 + x) = 48\n    # Solving for x: 46 + 2x = 48\n    x = (48 - 46) / 2\n    return int(x)\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3  # in meters\n\n    # The number of intervals between the poles is one less than the number of poles\n    num_intervals = num_poles - 1\n    \n    # Total distance is the number of intervals multiplied by the distance between each interval\n    total_distance = num_intervals * distance_between_poles\n    \n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    from sympy import factorint\n\n    # Factor 245 and check if each exponent is a multiple of 3\n    factors = factorint(245)\n    \n    # A set of the exponents in the prime factorization of 245\n    factor_powers = set(factors.values())\n\n    # For a number to be a cube, all the exponents in its prime factorization\n    # must be multiples of 3.\n    # Find p such that 245p has all exponents as multiples of 3.\n    p = 1\n    for prime, power in factors.items():\n        p *= prime**(3 - power%3 if power%3 != 0 else 0)\n\n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from itertools import permutations\n\n    # ESSE + 2018 = SASMO\n    # All the letters stand for distinct digits, ESSE and SASMO are 5-digit numbers, E and S cannot be 0.\n    # The search space can be limited, as 2018 + minimum ESSE (1000) = 3018 and maximum ESSE (19876) + 2018 = 21894.\n    # Thus S, A, S, M, O ranges from 3 to 2, 0 to 8, 1 to 9, 8 to 9, 4 to 9 respectively.\n    # First digit E ranges from 1 to 9 and S from 1 to 9 because leading zeros are not allowed in ESSE and SASMO.\n    \n    for e, s, a, m, o in permutations(range(10), 5):\n        if e == 0 or s == 0:  # E and S can't be zero\n            continue\n        \n        esse = e * 1000 + s * 110 + e\n        sasmo = s * 10000 + a * 1000 + s * 100 + m * 10 + o\n        if esse + 2018 == sasmo:\n            # Satisfy the condition, get the sum S+A+S+M+O\n            return s + a + s + m + o\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_m = 100\n    cm_value = 736\n\n    m_value = cm_value / cm_in_m\n\n    return m_value\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    sum = 0\n    for i in range(64, 45, -2):\n        sum += i - (i-2)\n    return sum\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year = 36000\n    fraction = 1 / 4\n    last_year = this_year * (1 + fraction)\n\n    return int(last_year)\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    present_students = total_students - 1 - 1  # subtracting the one on sick leave and one on personal leave\n    attendance_rate = (present_students / total_students) * 100\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    numerator = 5 * 8\n    denominator = 15\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    total_sum = 0\n    for n in range(2, 2018):\n        total_sum += sum([i/n for i in range(1, n)])\n    return total_sum\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 0.30 * 270\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Given Tim's position in the array, we can deduce that:\n    # From front to back, there are at least 3 people in front of Tim, and Tim is the 4th.\n    # From back to front, there are at least 2 people behind Tim, and Tim is the 3rd.\n    # Total rows = 3 (people in front of Tim) + 1 (Tim) + 2 (people behind Tim) = 6 rows\n    \n    # From left to right, Tim is the 1st, so no one is to his left.\n    # From right to left, there are at least 3 people to the right of Tim, and Tim is the 4th.\n    # Total columns = 1 (Tim) + 3 (people to the right of Tim) = 4 columns\n    \n    # The total number of band members is therefore the number of rows times the number of columns.\n    total_members = 6 * 4\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    original_ratio = Eq(apples / oranges, 3/8)\n    new_ratio = Eq((apples - 1) / oranges, 1/3)\n\n    solution = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solution[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_to_100 = min(numbers, key=lambda x: abs(x - 100))\n\n    return closest_to_100\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "from math import ceil\n\ndef solution():\n    daily_savings = 2.40\n    total_required = 150\n    days_to_save = total_required / daily_savings\n    weeks_to_save = days_to_save / 7\n    return ceil(weeks_to_save)\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    # Calculate the sum of the first 14 natural numbers\n    sum_of_first_14 = sum(range(1, 15))\n\n    # Add 2019 to the sum\n    new_sum = sum_of_first_14 + 2019\n\n    # The sum of any n consecutive numbers starting with m is: n * (2m + (n - 1)) / 2\n    # We need to find m and n where n = 8 and m is the smallest number among the 8 consecutive numbers\n    # The equation simplifies to: 8 * (2m + 7) / 2 = new_sum\n    # Solving for m\n    n = 8\n    for m in range(1, new_sum):\n        if (n * (2*m + (n - 1))) == 2 * new_sum:\n            return m\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    ans = 6.5 / 0.25\n    return ans\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the animals\n    rabbit, chicken, kangaroo = symbols('rabbit chicken kangaroo')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(2 * rabbit, 6 * chicken)\n    equation2 = Eq(3 * kangaroo, 4 * rabbit)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rabbit, chicken, kangaroo))\n    \n    # Substitute the value of rabbit in terms of chicken into kangaroo equation\n    kangaroo_in_chickens = solutions[kangaroo].subs(solutions)\n\n    return kangaroo_in_chickens\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = 'STATISTICS'\n    frequency = {letter: word.count(letter) for letter in set(word)}\n\n    num_ways = factorial(len(word))\n    for letter, freq in frequency.items():\n        num_ways //= factorial(freq)\n\n    return num_ways\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # List all the activities and their durations.\n    activities = {\n        'cut_wood': 3,\n        'weave_grass': 1,\n        'dry_wood': 5,\n        'mow_grass': 1,\n        'prepare_food': 1,\n        'soak_grass': 1,\n        'choose_wood': 1,\n    }\n    \n    # Sort activities by duration to maximize parallel tasks (longest tasks first)\n    sorted_activities = sorted(activities.items(), key=lambda item: item[1], reverse=True)\n    \n    # Calculate the total minimum days needed\n    total_days = sorted_activities[0][1]  # start with the duration of the longest task\n    \n    # Keep track of the end day of each task\n    end_days = {activity: duration for activity, duration in sorted_activities}\n    \n    # Organize tasks to minimize total time by starting with the longest and overlapping where possible\n    for i in range(1, len(sorted_activities)):\n        activity, duration = sorted_activities[i]\n        \n        # Check if current activity can be done in parallel with any already scheduled\n        # If so, no need to add to total days\n        parallel = False\n        for prev_activity, prev_end_day in end_days.items():\n            if prev_end_day <= total_days - duration:\n                parallel = True\n                break\n\n        # If no parallel is possible, add duration to total days\n        if not parallel:\n            total_days += duration\n        \n    return total_days\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    factor1 = 836\n    factor2 = 162\n    factor3 = 2\n    \n    ans = common_factor * (factor1 + factor2 + factor3)\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n    num_notes = total_amount / note_value\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    brother_age_three_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    left_side = 9 * 5 + 15 * 5\n    return int(left_side / 5)\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Since Snow White is in the middle and also 7th from the front,\n    # there must be 6 people in front of her and 6 people behind her.\n    # Therefore, the total number of dwarves is 6 (in front) + 6 (behind) + 1 (Snow White)\n\n    total_dwarves = 6 + 6\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    # To guarantee at least 4 per school, divide the number of participants by 4\n    # and take the ceiling value to get the maximum number of schools.\n    max_schools = -(-participants // 4)\n\n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        frac_part = (2018 + i) / 5 - (2018 + i) // 5\n        total += frac_part\n    ans = total\n    return ans\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for num in range(1000, 10000):\n        if (num * 6) ** (1 / 3) % 1 == 0 and (num / 6) ** (1 / 2) % 1 == 0:\n            return num\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Speed of the faster train\n    speed_fast = 48\n    \n    # Speed of the slower train\n    speed_slow = 36\n    \n    # The faster train travels 70 km more than the slower train\n    extra_distance = 70\n    \n    # Let the time taken for the trains to meet be t hours\n    # Distance covered by the faster train = speed_fast * t\n    # Distance covered by the slower train = speed_slow * t\n    # According to the problem, distance covered by faster train is\n    # 70 km more than the distance covered by the slow train\n    # Therefore, speed_fast * t = speed_slow * t + 70\n\n    # To find t, we can set up the equation and solve for t\n    # (speed_fast - speed_slow) * t = 70\n    t = extra_distance / (speed_fast - speed_slow)\n\n    # To find the total distance between two stations, we sum the distances\n    # covered by both the trains when they meet\n    total_distance = (speed_fast * t) + (speed_slow * t)\n\n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3, 1) + Fraction(5, 9) + Fraction(6, 1) + Fraction(4, 9)\n    ans = result.numerator // result.denominator, Fraction(result.numerator % result.denominator, result.denominator)\n    return ans\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # From front to back, Tim is the 4th. Counting from the back, he is the 3rd.\n    # This means there are 4 - 1 people in front of him and 3 - 1 people behind him.\n    # Thus, the total vertical number of people is 4 + 3 - 1.\n\n    vertical_count = 4 + 3 - 1\n\n    # From left to right, Tim is the 4th. Counting from the right, he is the 7th.\n    # This means there are 4 - 1 people to his left and 7 - 1 people to his right.\n    # Thus, the total horizontal number of people is 4 + 7 - 1.\n\n    horizontal_count = 4 + 7 - 1\n\n    # Total number of band members is the product of the number of people vertically and horizontally.\n\n    return vertical_count * horizontal_count\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 3 and num % 7 == 1 and num % 9 == 5:\n            break\n    return num\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lily, gigi = symbols('lily gigi')\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n \n    solutions = solve((equation1, equation2), (lily, gigi))\n \n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total = sum(coins)\n    for coin in coins:\n        if (total - coin) == 2 * (total - (total - coin)):\n            return coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (4/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    # Let's call the number of boats b and the number of students s.\n    # According to the given conditions, we have the following equations:\n    # (b + 1) * 6 = s -> Equation 1 (one more boat, each holds 6)\n    # (b - 1) * 9 = s -> Equation 2 (one less boat, each holds 9)\n    # Both should equal the number of students, so they are equal to each other:\n    # (b + 1) * 6 = (b - 1) * 9\n    # Let's solve for b:\n    \n    b = symbols('b')\n    equation = Eq((b + 1) * 6, (b - 1) * 9)\n    solution_b = solve(equation, b)\n    \n    # Having the number of boats, we can now solve for s using either equation:\n    s = (solution_b[0] + 1) * 6\n    \n    return s\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friends, total_chocolates = symbols('friends total_chocolates')\n\n    # If gives each friend 18 chocolates, she will have 41 chocolates in excess\n    equation1 = Eq(total_chocolates - friends * 18, 41)\n    \n    # If gives each friend 23 chocolates, she will be short of 34 chocolates\n    equation2 = Eq(friends * 23 - total_chocolates, 34)\n\n    solutions = solve((equation1, equation2), (friends, total_chocolates))\n\n    total_chocolates = solutions[total_chocolates]\n\n    # If she gives each friend 20 pieces of chocolate\n    remaining_chocolates = total_chocolates - friends * 20\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng - (6/7) * chai_seng, (1/2) * (rasidah - (3/5) * rasidah))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):  # Since it's the thousands digit, it can't be 0\n        for hundreds in range(thousands + 1, 10):  # It must be greater than thousands digit\n            for tens in range(hundreds + 1, 10):  # It must be greater than hundreds digit\n                ones = tens - (hundreds + thousands)  # ones digit is the sum of other three\n                if ones >= tens or ones < 0:  # Ones should be less than tens and non-negative\n                    continue\n                if thousands + hundreds + tens + ones == 16:\n                    return ones\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = [0, 2, 4]\n    count = 0\n    for i in digits:\n        for j in digits:\n            if i != j and i != 0:  # ensure two-digit and different digits\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007) ** 2\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_val = 0\n    for num in permutations([2, 4, 6, 8], 4):\n        current_val = int(''.join(map(str, num)))\n        if current_val % 4 == 0:\n            max_val = max(max_val, current_val)\n    return max_val\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # distance uphill = speed uphill * time uphill\n    distance_uphill = 5 * 3  # Amy's speed uphill is 5 mph and she walks for 3 hours\n    \n    # distance downhill = speed downhill * time downhill\n    distance_downhill = 10 * 2  # Amy's speed downhill is 10 mph and she walks for 2 hours\n    \n    # total distance = distance uphill + distance downhill\n    total_distance = distance_uphill + distance_downhill\n    \n    # total time = time uphill + time downhill\n    total_time = 3 + 2\n    \n    # average speed = total distance / total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Fixed variables\n    fixed_fee = 3\n    initial_rate = 2  # dollars per kwh for the first 5 kwh\n    additional_rate = 1  # dollars per kwh after the first 5 kwh\n    total_cost = 63  # total dollars available\n    \n    # Calculating the cost of the first 5 kwh\n    initial_cost = 5 * initial_rate\n    \n    # Calculating the remaining budget after the fixed fee and the first 5 kwh\n    remaining_budget = total_cost - fixed_fee - initial_cost\n    \n    # Calculating the total kwh including the first 5 kwh and additional kwh\n    total_kwh = 5 + remaining_budget / additional_rate\n\n    return total_kwh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    # We know that 54 is 7/7 of 63 (since 63 divided by itself is 1)\n    # Therefore, we can calculate what 1/7 of 63 is, and then find the fraction that gives us 54.\n    one_seventh_of_63 = 63 / 7\n    # Now we divide 54 by the value of one_seventh_of_63 to find the numerator\n    numerator = 54 / one_seventh_of_63\n    \n    return int(numerator)\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(value_after_years, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    # Using Chinese Remainder Theorem (CRT) for a system of congruences\n    from sympy.ntheory.modular import solve_congruence\n\n    # Given the following congruences:\n    # n ≡ 2 (mod 3)\n    # n ≡ 6 (mod 7)\n    # n ≡ 10 (mod 11)\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    \n    # Finding the smallest n that satisfies the system of congruences\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = int(f\"{x}{y}\")\n            B = int(f\"4{x}{y}\")\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    prime_factors_of_4320 = 2**5 * 3**3 * 5\n    count = 0\n\n    # In order for the expression to be an integer, \n    # n should be such that the powers of 3 in the expression are non-negative integers.\n    # Let's take the power of 3 from the expression:\n\n    # For each power of (3/2)^n to be cancelled out with the power of 3 in 4320,\n    # it has to be less than or equal to 3^3, i.e., n has to be less or equal to 3\n    for n in range(4):  # Since it includes 0, which is a valid power for 1\n        # As long as n is 0 to 3, (3/2)^n doesn't introduce a factor that would make the product non-integer\n        count += 1\n        \n    return count\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    small_boxes_needed = -(-total_cookies // small_box_capacity)  # Ceiling division\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 + 8)\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Total number of pupils who passed at least one test\n    total_passed_at_least_one = 43\n\n    # Number of pupils who passed individual tests\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n\n    # Sum of pupils who passed each test\n    sum_passed_each_test = passed_math + passed_science + passed_english\n\n    # Maximum number of pupils who passed all three tests\n    # is the excess number of pupils over the total who passed at least one,\n    # because this excess represents the pupils counted multiple times\n    max_passed_all_three = sum_passed_each_test - total_passed_at_least_one\n\n    return max(0, max_passed_all_three)  # Ensure value is not negative\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    juice_in_first_punch = 0.35 * 20\n    juice_in_second_punch = 0.60 * 30\n    total_juice = juice_in_first_punch + juice_in_second_punch\n    \n    concentration = (total_juice / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' be the original tons of grain in warehouse B\n    b = symbols('b')\n\n    # Warehouse A original + shipment in = 2 times (Warehouse B original - shipment out)\n    equation = Eq(50 + 12, 2 * (b - 16))\n\n    # Solve the equation for 'b'\n    solution = solve(equation, b)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    # Since we are looking for a prime number, and we know that the sequence is increasing\n    # The next prime after 31 and before 41 is:\n    ans = 37\n    return ans\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n\n    boxes_needed = (total_cookies // cookies_per_box) + (total_cookies % cookies_per_box > 0)\n\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    return total_permutations\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    fish_per_rabbit = 3\n    rabbit_per_wheat = 2 / 3\n\n    fish_per_wheat = fish_per_rabbit / rabbit_per_wheat\n    return fish_per_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # Define variables for people and benches\n    people = 0\n    benches = 0\n    \n    # Iterate to find the correct number of people and benches\n    while True:\n        # If 3 people are sitting on one bench, there will be 7 people with no seat\n        if (people % 3 == 0) and ((people // 3) + 7 == people - 7):\n            # If 7 people are sitting on one bench, there will be 3 extra benches left\n            benches = people // 7\n            if people - benches * 7 == 3 * benches:\n                break\n        people += 1\n    \n    return people\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_payment = 120\n    booking_fee = 30\n    hourly_rate = 10\n\n    hours_hired = (total_payment - booking_fee) / hourly_rate\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    # We search for the number that satisfies the following conditions:\n    # x % 4 = 1, x % 5 = 2, x % 7 = 4 and 400 <= x <= 500\n\n    for x in range(400, 501):\n        if x % 4 == 1 and x % 5 == 2 and x % 7 == 4:\n            return x\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10 - x1):\n            x3 = 9 - x1 - x2\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell_stickers = 32\n    ginnie_stickers = dell_stickers // 2\n    lyn_stickers = ginnie_stickers // 4\n    total_stickers = ginnie_stickers + lyn_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount * 3) / ratio_sum\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    empty_bottle, apple_juice = symbols('empty_bottle apple_juice')\n\n    equation1 = Eq((5/6) * apple_juice + empty_bottle, 4.6)\n    equation2 = Eq((2/3) * apple_juice + empty_bottle, 4.45)\n\n    solutions = solve((equation1, equation2), (empty_bottle, apple_juice))\n\n    return solutions[empty_bottle] * 1000 # convert kg to grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    # Applying inverse operations in reverse to solve for Lisa's favourite number\n    result_after_subtraction = 19\n    result_after_multiplication = result_after_subtraction + 3  # Inverse of subtraction\n    lisa_fav_number = result_after_multiplication / 2           # Inverse of multiplication\n    \n    return lisa_fav_number\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10): # 3-digit number can't have 0 in hundreds place\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2): # To ensure the number is odd, ones place should be even (0,2,4,6,8)\n                if hundreds + tens + ones == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    digits = 1101\n    pages = 0\n    digit_count = 0\n    page_length = 1\n\n    while digit_count < digits:\n        pages += 1\n        digit_count += page_length\n        if pages == 10 ** page_length - 1:\n            page_length += 1\n\n    return pages\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Multiplication of numbers outside the standard multiplication table we use a multiplication algorithm.\n    # In Python, you can simply use the `*` operator to achieve this.\n\n    # Let's multiply the two whole numbers as per the question\n    result = 123 * 321\n\n    return result\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    term = 1\n    diff = 2\n    while term < 100:\n        prev_term = term\n        term += diff\n        diff += 2\n    return prev_term\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    # price of a book\n    book = 3.40\n    # price of a magazine\n    magazine = 1.60\n    # total amount spent by Clara\n    total = 23\n\n    # find the maximum number of books Clara could buy\n    # as the price of a book is higher than a magazine, buying less books would allow buying more magazines\n    max_books = total // book\n\n    # iterate over the number of books to find how many magazines can be bought\n    for books in range(int(max_books) + 1):\n        # calculate the cost of the books\n        cost_of_books = books * book\n        # calculate the remaining money for magazines\n        remaining = total - cost_of_books\n        # check if the remaining amount is divisible by the cost of a magazine\n        if remaining % magazine == 0:\n            # calculate the number of magazines\n            magazines = remaining / magazine\n            return int(magazines)\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_notebooks = andy_notebooks - 38\n    sister_notebooks_initial = sister_notebooks - 38\n\n    return sister_notebooks_initial\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age is below 100\n        age_base3 = int(str(age) + '0', 3)\n        if age_base3 == age:\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for orchids, tulips, and roses\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    \n    # Given total flowers\n    total_flowers = 3616\n    \n    # Equations based on the problem statement\n    equation1 = Eq(orchids + tulips + roses, total_flowers)\n    \n    # Ratio of orchids to tulips is 3:5\n    equation2 = Eq(orchids * 5, tulips * 3)\n    \n    # Flowers left after selling\n    flowers_left = 2644\n    \n    # Calculate flowers sold\n    flowers_sold = total_flowers - flowers_left\n    \n    # Equations based on the amount of flowers sold\n    equation3 = Eq(orchids * 0.40 + tulips * 1/5 + roses * 0.25, flowers_sold)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n    \n    # Return the number of orchids\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    prime_factors = [7, 7, 11, 13]  # Prime factorization of 7007\n    num_1 = prime_factors[0] * prime_factors[2]  # Smaller multiple of 7\n    num_2 = prime_factors[1] * prime_factors[3]  # Larger multiple of 7\n    ans = num_1 + num_2\n    return ans\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    num_people = 7\n    num_seats = 8\n\n    # Since the table can be rotated, we fix one person's position to remove symmetrical configurations,\n    # and then arrange the remaining people. This is a permutation problem with (num_people - 1)! arrangements.\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # Since the pins are identical, we can use the \"stars and bars\" method,\n    # which is a common technique to solve such problems in combinatorics.\n    # For splitting n identical items into k piles, the formula is C(n+k-1, k-1).\n    from math import comb\n\n    n = 10  # number of pins\n    k = 3   # number of piles\n\n    # Applying the formula:\n    ans = comb(n + k - 1, k - 1)\n\n    return ans\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n    \n    for prime1 in range(2, 55):\n        prime2 = 55 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime1 * prime2\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = (379 * 0.00038) + (159 * 0.00621) + (3.79 * 0.121)\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_cost = 9\n    cheesecake_to_cookie_ratio = 3 / 5\n    chocolate_to_cheesecake_ratio = 3 / 2\n\n    cheesecake_cost = cookie_cost * cheesecake_to_cookie_ratio\n    chocolate_cost = cheesecake_cost * chocolate_to_cheesecake_ratio / 3\n\n    return chocolate_cost\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    basketball, volleyball = symbols('basketball volleyball')\n    \n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                if len(set([2, 0, A, M, C, 1, 9])) == 7:\n                    num = 20000000 + A*1000000 + M*100000 + C*10000 + 1900\n                    if num % 9 == 0:\n                        return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    A, B, C = symbols('A B C')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n    \n    # Solve for the variables\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Get the solution for B\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    # Let's denote the amount of candy Mike has as M and the amount Valeria has as V.\n    # The total number of candies is 36, which leads to the equation M + V = 36\n    # If they both eat the same amount of candy, Mike will have 6 left and Valeria will have 22 left. \n    # This gives us two more equations: M - x = 6 and V - x = 22 where x is the amount they both eat.\n    \n    # From the second set of equations, we can solve for M and V:\n    # M = 6 + x and V = 22 + x\n    # Now let's substitude the M and V in the total equation:\n    # (6 + x) + (22 + x) = 36\n    # Simplify the equation we get:\n    # 28 + 2x = 36\n    # Solve for x:\n    x = (36 - 28) / 2\n    \n    # Now we can find out how many pieces Valeria has now:\n    V = 22 + x  # we use the equation V = 22 + x\n    \n    return V\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    fraction_per_day = 1/4 / 3\n    total_days = 1 / fraction_per_day\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Melissa's age now as m and her mother's age now as M.\n    m, M = symbols('m M')\n\n    # We have two equations based on the problem statement:\n    # When Melissa was 8, her mother was 32, so M - m = 32 - 8 = 24.\n    equation1 = Eq(M - m, 24)\n    \n    # Now, Melissa's mother is three times as old as Melissa: M = 3m.\n    equation2 = Eq(M, 3 * m)\n\n    # Solving both equations to find the value of m (Melissa's current age).\n    solutions = solve((equation1, equation2), (m, M))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    return 42 // (2 * 7)\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # Since the recurring decimal of 6/7 is 0.857142 repeating,\n    # we know the sequence of digits that repeat are 857142.\n    recurring_sequence = [8, 5, 7, 1, 4, 2]\n    \n    # We want to sum the first 58 digits. Since the length of the\n    # recurring sequence is 6, the first 58 digits will consist of 58 // 6\n    # full sequences and 58 % 6 digits from the next sequence.\n    full_sequences = 58 // 6\n    remaining_digits = 58 % 6\n    \n    # Sum of digits in one full sequence\n    sum_full_sequence = sum(recurring_sequence)\n    \n    # Total sum for full sequences\n    total_sum = sum_full_sequence * full_sequences\n    \n    # Add the sum of the remaining digits\n    for i in range(remaining_digits):\n        total_sum += recurring_sequence[i]\n    \n    return total_sum\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n    \n    # Convert recurring decimals to fractions\n    frac_473 = Fraction(473, 100) + Fraction(3, 990)\n    dec_473 = frac_473.numerator / frac_473.denominator\n    \n    # Compare other decimals\n    dec_4_73 = 4.73\n    dec_4_77 = 4.77\n    dec_4_737 = 4.737\n    \n    # Find the smallest decimal\n    smallest = min(dec_473, dec_4_73, dec_4_77, dec_4_737)\n    \n    return smallest\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    # Joel removes 2 less than half of the remaining plants, and 4 are left.\n    # So before Joel removed plants, the number of plants was (4 + 2) * 2\n    before_joel = (remaining_plants + 2) * 2\n\n    # Valerie removes 3 less than half of those plants, and before_joel are left.\n    # So before Valerie removed plants, the number of plants was (before_joel + 3) * 2\n    before_valerie = (before_joel + 3) * 2 \n\n    # Ethan first removes 1 less than half of the original plants, and before_valerie are left.\n    # So the initial number of plants was (before_valerie + 1) * 2\n    initial_plants = (before_valerie + 1) * 2\n\n    return initial_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # length of the train in meters\n    tunnel_length = 544  # length of the tunnel in meters\n    speed = 52  # speed of the train in meters/second\n\n    # The total distance to be covered is the length of the train + length of the tunnel\n    total_distance = train_length + tunnel_length\n\n    # The total time in seconds is the total distance divided by the speed of the train\n    total_time = total_distance / speed\n\n    return total_time\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of eggs in the basket at first\n    x = symbols('x')\n\n    # Equation based on the problem statement\n    equation = Eq(x - (16 + x/2) - (7 + (x - (16 + x/2))/2), 18)\n\n    # Solve the equation for x\n    number_of_eggs_at_first = solve(equation, x)[0]\n\n    return number_of_eggs_at_first\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    return 33 + 29 + 34 + 28 + 27 + 30\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, solve, sqrt\n\n    # Let x be the edge of the cube\n    x = symbols('x', real=True, positive=True)\n\n    # Given distances, using the Pythagorean theorem in 3D:\n    eq_PB = 60*sqrt(10)           # B is opposite to A\n    eq_PC = 60*sqrt(5)            # C is adjacent face to A\n    eq_PD = 120*sqrt(2)           # D is adjacent edge to A\n    eq_PG = 36*sqrt(7)            # G is diagonal through the center\n\n    # Equations based on the distances from P to points B, C, D and G\n    eq_B = Eq(x*sqrt(3), eq_PB)   # Pythagorean theorem for B (AB is a space diagonal)\n    eq_C = Eq(x*sqrt(2), eq_PC)   # Pythagorean theorem for C (AC is a face diagonal)\n    eq_D = Eq(x, eq_PD / 2)       # Pythagorean theorem for D (AD is an edge)\n    eq_G = Eq(x*sqrt(3)/2, eq_PG) # Pythagorean theorem for G (AG is half the space diagonal)\n\n    # Solve the system of equations\n    solutions = solve((eq_B, eq_C, eq_D, eq_G), x)\n\n    # The positive solution gives the edge of the cube\n    edge_of_cube = solutions[0]\n\n    # PA is the same as PD (as P lies on the space diagonal AG extended)\n    PA = edge_of_cube * 2\n\n    return PA\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    # Let x be the number of P6 students and y be the number of P1 students\n    # According to the problem, we have two equations:\n    # x + y = 120 (total number of students)\n    # 2x + 0.5y = 180 (total number of buckets, since each P6 student carried 2 buckets and 2 P1 students carried 1 bucket)\n    # We can solve this system of equations to find the values of x and y\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 120)\n    equation2 = Eq(2*x + 0.5*y, 180)\n\n    solutions = solve((equation1, equation2), (x, y))\n    p1_students = solutions[y]\n\n    return p1_students\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_for_one_coin = 2  # Heads or Tails\n    total_outcomes = outcomes_for_one_coin ** 2  # Two coins tossed\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    basketball_price, volleyball_price = symbols('basketball_price volleyball_price')\n    equation1 = Eq(2 * basketball_price + 3 * volleyball_price, 195)\n    equation2 = Eq(4 * basketball_price + 5 * volleyball_price, 355)\n    \n    solutions = solve((equation1, equation2), (basketball_price, volleyball_price))\n    \n    return solutions[volleyball_price]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    num_pencils = 55\n    num_pens = 143\n\n    max_students = gcd(num_pencils, num_pens)\n    \n    return max_students\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen --> Oscar: 3 fish for 1 rabbit, so the ratio of fish to rabbits is 3:1\n    fish_to_rabbit_ratio = 3 / 1\n\n    # Oscar --> Dennis: 2 rabbits for 3 packs of wheat, so the ratio of rabbits to wheat packs is 2:3\n    rabbits_to_wheat_ratio = 2 / 3\n\n    # To find out how many fish Owen should give Dennis for a pack of wheat,\n    # we need to multiply these ratios (3/1) * (1/3) because 2 rabbits will be Oscar --> Dennis, and 1 rabbit will be Owen --> Oscar according to the previous trade.\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * (1 / rabbits_to_wheat_ratio)\n\n    return fish_to_wheat_ratio\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's first step should be multiplying the quotient by the divisor and not the remainder\n    correct_first_step = quotient * divisor\n\n    # Then adding the remainder to this product\n    correct_answer = correct_first_step + remainder\n\n    # We return True if Johnny's answer is correct or False if it is not, followed by the correct answer\n    johnnys_answer = 22\n    is_correct = johnnys_answer == correct_answer\n\n    return (is_correct, correct_answer)\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    count = 0\n    combinations = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                combinations.append((die1, die2))\n                count += 1\n    ans = (count, combinations)\n    return ans\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes = 66.5 / apples_per_box\n    return int(total_boxes)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    eddie_age_now = 8\n    mike_age_now = 48\n    age_difference = mike_age_now - eddie_age_now\n    eddie_age_future = 18\n    mike_age_future = eddie_age_future + age_difference\n    return mike_age_future\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_students = symbols('total_students')\n    \n    boys_initial = 0.4 * total_students  # 40% of the students\n    girls_initial = total_students - boys_initial\n    \n    boys_after = boys_initial - 16  # 16 boys left\n    girls_after = girls_initial + 16  # 16 girls entered\n    \n    # After the changes, boys make up 2/15 of the students in the canteen\n    equation = Eq(boys_after, (2/15) * (total_students))\n    \n    solved_students = solve(equation, total_students)\n    total_students_value = solved_students[0]\n    \n    girls_after_value = girls_after.subs(total_students, total_students_value)\n    return girls_after_value\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for n in range(2, int(num**0.5)+1):\n        if num % n == 0:\n            return False\n    return True\n\ndef solution():\n    digits = '279'\n    primes = set()\n\n    # Generate all possible combinations with 1 to 3 digits\n    for i in range(1, 4):\n        for comb in permutations(digits, i):\n            number = int(''.join(comb))\n            if number < 100 and is_prime(number):\n                primes.add(number)\n    \n    # Return count of unique prime numbers found\n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    numerator = (3 + 1/3) * 1.9 + 19.5 / (4 + 1/2)\n    denominator = (62/75) - 0.16\n    left_term = numerator / denominator\n\n    right_numerator = 3.5 + (4 + 2/3) + (2 + 2/15)\n    right_denominator = 0.5 * (1 + 1/20 + 4.1)\n    right_term = right_numerator / right_denominator\n\n    ans = left_term / right_term\n    return ans\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n    \n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n    \n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Loop over each potential original four-digit number N\n    for N in range(1000, 10000):\n        str_N = str(N)\n        # Loop over each position where the digit could be removed\n        for i in range(4):\n            # Remove the digit at position i to form a three-digit number M\n            M = int(str_N[:i] + str_N[i+1:])\n            # Check if the difference between N and M is 2021\n            if N - M == 2021:\n                # Return the original number N as the answer\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a banana and a pear\n    banana, pear = symbols('banana pear')\n\n    # Max buys 1 banana and 2 pears for 94p\n    equation1 = Eq(banana + 2 * pear, 94)\n\n    # Emily buys 1 banana and 1 pear for 62p\n    equation2 = Eq(banana + pear, 62)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swim = 0.82 * total_students  # Students who like swimming\n    jog = 0.54 * total_students   # Students who like jogging\n    neither = 0.16 * total_students  # Students who like neither\n\n    # Students who like both\n    both = swim + jog - (total_students - neither)\n\n    return int(both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    work_rate_A = 1 / 15\n    # B's work rate per day\n    work_rate_B = 1 / 10\n    # Total work done by A and B in 4 days\n    work_done_4_days = 4 * (work_rate_A + work_rate_B)\n    # Remaining work \n    remaining_work = 1 - work_done_4_days\n    # Days for B to finish the remaining job\n    days_for_B = remaining_work / work_rate_B\n    return days_for_B\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34)\n    part2 = (0.23 + 0.34 + 0.65)\n    part3 = (1 + 0.23 + 0.34 + 0.65)\n    part4 = (0.23 + 0.34)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    tickets_bought = 16\n    ticket_cost = 112\n    total_cost = tickets_bought * ticket_cost\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    distance_between_trees = 10\n    length_of_road = 150\n\n    num_trees = (length_of_road // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Linda's rate is 1 problem every 5 minutes\n    linda_rate = 1 / 5\n    # Cici's rate is 1 problem every 6 minutes\n    cici_rate = 1 / 6\n    # Total rate working together\n    total_rate = linda_rate + cici_rate\n    # Total time in minutes (2 hours)\n    total_time = 2 * 60\n    # Total number of problems they can do working together\n    total_problems = total_rate * total_time\n    \n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let x be the number of apples Amy gives to John.\n    # After the exchange, Amy will have (amy - x) apples.\n    # After the exchange, John will have (john + x) apples.\n    # Amy wants to have 4 more apples than John, so we can set up the following equation:\n    # amy - x = john + x + 4\n\n    x = (amy - john - 4) // 2  # Simplifying the equation to solve for x\n\n    return x\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    for num in range(13, 17):\n        if num % 2 != 0:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n\n    wait_time = (bus_interval - (late_time % bus_interval)) % bus_interval\n\n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    goat_days = 14 * 15\n    rabbit_days = 70 * 8\n    \n    # As 1 goat eats as much as 4 rabbits\n    rabbit_equivalent_of_one_goat = 4\n    \n    # Convert all animals' consumption to the equivalent number of rabbits\n    rabbit_equivalent_for_goats = 17 * rabbit_equivalent_of_one_goat\n    total_rabbit_equivalents = rabbit_equivalent_for_goats + 20\n    \n    # Calculate days the pasture can feed the total rabbit equivalents\n    days = rabbit_days / total_rabbit_equivalents\n\n    return int(days)\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    mean = 37\n    total_sum = mean * 10\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the equation\n    x, y, z = symbols('x y z')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Extract the solution for Prize Y\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    num_people = 67\n    total_cost = cost_per_person * num_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10     # 10 tens\n    tenths = 35 * 0.1  # 35 tenths\n    hundredths = 8 * 0.01  # 8 hundredths\n    # Sum the values\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    equation1 = Eq(chan / 4 - toh / 3, 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of erasers each person has\n    sandras_erasers, tashas_erasers, rileys_erasers = symbols('sandras_erasers tashas_erasers rileys_erasers')\n\n    # Equation for Sandra's erasers being 1/3 of Tasha's\n    equation1 = Eq(sandras_erasers, tashas_erasers / 3)\n\n    # Equation for Riley's erasers being 3/5 of Sandra's\n    equation2 = Eq(rileys_erasers, 3 * sandras_erasers / 5)\n\n    # Equation for Tasha having 60 more erasers than Riley\n    equation3 = Eq(tashas_erasers, rileys_erasers + 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sandras_erasers, tashas_erasers, rileys_erasers))\n\n    return solutions[rileys_erasers]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height, day_climb = 45, 10\n    night_slide, total_climb, day_count = 0, 0, 0\n\n    while True:\n        day_count += 1\n        total_climb += day_climb\n        if total_climb >= height:\n            break\n        night_slide += 1\n        total_climb -= night_slide\n\n    return day_count\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    n1 = 4\n    n2 = 3\n    \n    ans = 0\n    number_str = str(n1)\n    for i in range(n2):\n        ans += int(number_str)\n        number_str += str(n1)\n    \n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    savings = [13, 18, 5]\n    mean_savings = sum(savings) / len(savings)\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "网络故障，请重试"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel = '0141705021'\n    devil = '4005220912'\n\n    angel_dict = {char: str(angel.count(char)) for char in set(angel)}\n    devil_dict = {char: str(devil.count(char)) for char in set(devil)}\n\n    angel_password = ''.join([angel_dict[char] for char in 'Angel' if char in angel_dict])\n    devil_password = ''.join([devil_dict[char] for char in 'Devil' if char in devil_dict])\n\n    can_unlock = angel_password == devil_password\n\n    correct_password = ''.join([str(devil.count(char)) for char in \"Devil\"])\n\n    if can_unlock:\n        return \"Yes, Andy can unlock the treasure chest.\"\n    else:\n        return \"No, Andy cannot unlock the treasure chest. The correct password is \" + correct_password\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    # Since we are looking for sums of two or more positive numbers,\n    # we can start from 2 numbers and go up to 5 (as 1 would be the minimum number we can add)\n    for total_numbers in range(2, 6):\n        # We can use the combinations_with_replacement function here,\n        # but since the numbers need to be positive and different from each other,\n        # we will instead manually iterate through each possible combination.\n        for i in range(1, 6):\n            for j in range(1, 6):\n                if i != j and i + j == 6:\n                    count += 1\n    # Since each combination was counted twice (e.g., 1+5 and 5+1),\n    # we divide the count by 2 to get the correct number of combinations\n    return count // 2\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "from fractions import Fraction\n\ndef repeating_decimal_to_fraction(repeating):\n    non_repeating_part, repeating_part = repeating.split('.')\n    repeating_part, non_repeating_digit = repeating_part.split('dot')\n    if not repeating_part:\n        non_repeating_part = int(non_repeating_part)\n        repeating_length = len(non_repeating_digit)\n        repeating_fraction = Fraction(int(non_repeating_digit), 10**repeating_length - 1)\n\n        return non_repeating_part + repeating_fraction\n    else:\n        whole_number_part = int(non_repeating_part + repeating_part)\n        non_repeating_length = len(repeating_part)\n        repeating_length = len(non_repeating_digit)\n        repeating_fraction = Fraction(int(non_repeating_digit), 10**repeating_length - 1)\n\n        return (whole_number_part * (10**repeating_length - 1) + repeating_fraction) / (10**non_repeating_length * (10**repeating_length - 1))\n\n\ndef solution():\n    numbers = [\n        \"0.dot1\",\n        \"0.1dot2\",\n        \"0.2dot3\",\n        \"0.3dot4\",\n        \"0.4dot5\",\n        \"0.5dot4\",\n        \"0.7dot8\"\n    ]\n\n    total_fraction = sum(repeating_decimal_to_fraction(num) for num in numbers)\n    return float(total_fraction)\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n    \n    a = symbols('a', positive=True)\n    x = sqrt(a) - 2/sqrt(a)\n    \n    expression = sqrt(x**2 + 8*x)\n    \n    simplified_expr = simplify(expression)\n    \n    return simplified_expr\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "from itertools import combinations\n\ndef solution():\n    nums = list(range(2017, 2036))  # From 2017 to 2035 inclusive\n    count = 0\n    for comb in combinations(nums, 3):\n        if sum(comb) % 4 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    sheep = 23\n    pens = 11\n\n    # Applying the Pigeonhole Principle formula: ceil(total items / number of containers)\n    from math import ceil\n    min_sheep_in_max_pen = ceil(sheep / pens)\n\n    return min_sheep_in_max_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    # Given values\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    total_choir = 45\n\n    # Calculate the total age of boys and girls separately\n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    \n    # Calculate the combined total age of boys and girls\n    total_age = total_age_boys + total_age_girls\n    \n    # Calculate the mean age of all boys and girls\n    mean_age = total_age / total_choir\n    \n    return mean_age\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    from itertools import permutations\n\n    # Original password representation\n    original_password = '0141705021'\n    # Password entered by Andy\n    entered_password = '4005220912'\n\n    # Create a set of all possible permutations of the original password\n    possible_passwords = set([''.join(p) for p in permutations(original_password)])\n\n    # Check if the entered password is one of the permutations\n    if entered_password in possible_passwords:\n        # Password is correct\n        return (True, \"Andy can unlock the treasure chest.\")\n    else:\n        # Password is incorrect, so return the correct password\n        return (False, \"The correct password is not provided by Andy.\")\n    \nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    # Using the Chinese Remainder Theorem to find a solution\n    # x = 1 (mod 6)\n    # x = 8 (mod 13)\n    \n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [(1, 6), (8, 13)]\n    lcm = 6 * 13  # Least common multiple of the moduli\n    ans, modulus = solve_congruence(congruences)\n    \n    # Find the specific answer within 200 and 300\n    while ans < 200:\n        ans += lcm\n\n    return ans if ans < 300 else None\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    from math import lcm\n    return lcm(6, 12, 16)\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # The worst-case scenario is that Sara keeps picking out the balls without getting 5 of the same color.\n    # Since there are fewer red and yellow balls, it is possible to pick out all of them without getting 5 of the same color.\n    # Therefore, Sara could take out all the red and yellow balls.\n\n    # Number of red balls\n    red_balls = 2\n    # Number of yellow balls\n    yellow_balls = 5\n    # To be sure to get 5 balls of the same color, Sara needs to get all red and yellow balls plus 1 more (which will be green for sure).\n    certain_balls = red_balls + yellow_balls + 1\n\n    return certain_balls\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the mass of a table and a chair.\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n\n    # Set up the equations based on the problem.\n    equation1 = Eq(3 * table_mass, 4 * chair_mass) # total mass of tables is equal to total mass of chairs\n    equation2 = Eq(table_mass, chair_mass + 2)     # table is 2kg heavier than chair\n\n    # Solve the equations.\n    solutions = solve((equation1, equation2), (table_mass, chair_mass))\n\n    return solutions[table_mass]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 10  # The position of the last number shown in the sequence\n    last_shown_term = 31  # The last number shown in the sequence\n    common_difference = 3  # The difference between consecutive terms in the sequence\n\n    # Formula to find the first term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # Rearrange the formula to solve for a_1 (the first term): a_1 = a_n - (n - 1) * d\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30  # Length of the swimming pool in meters\n    sam_speed = 1     # Sam's speed in meters per second\n    ben_speed = 0.6   # Ben's speed in meters per second\n    total_time = 600  # Total swimming time in seconds (10 minutes)\n\n    # Relative speed is the sum of both speeds since they are moving towards each other\n    relative_speed = sam_speed + ben_speed\n\n    # They meet each time they cover a distance equal to the length of the pool\n    times_met = total_time * relative_speed / pool_length\n\n    return int(times_met) # Since they can't meet a fractional number of times\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # For the operation \"89*75\"\n    ab = 89\n    cd = 75\n    # Splitting the numbers into their digits\n    a, b = divmod(ab, 10)\n    c, d = divmod(cd, 10)\n    # Performing the operation as defined by Peter\n    ans = a * b + c * d\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    diff = max(temperatures) - min(temperatures)\n    return diff\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_height_bob_cindy = 120\n    height_doris = 126\n    total_height_bob_cindy = average_height_bob_cindy * 2\n\n    total_height_three_children = total_height_bob_cindy + height_doris\n    average_height_three_children = total_height_three_children / 3\n\n    return average_height_three_children\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    destin, nephew = symbols('destin nephew')\n    \n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n    \n    solutions = solve((equation1, equation2), (destin, nephew))\n    \n    destin_age_in_10_years = solutions[destin] + 10\n    nephew_age_in_10_years = solutions[nephew] + 10\n    \n    age_sum_in_10_years = destin_age_in_10_years + nephew_age_in_10_years\n    \n    return age_sum_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of boys be x and the number of girls be y.\n    x, y = symbols('x y')\n\n    # The total number of pencils is the average multiplied by the total number of pupils.\n    total_pencils = 35 * 40\n\n    # The total number of pencils owned by boys and girls.\n    boys_pencils = 20 * x\n    girls_pencils = 60 * y\n\n    # There are 40 pupils in the class.\n    equation1 = Eq(x + y, 40)\n\n    # The total number of pencils is the sum of pencils owned by boys and girls.\n    equation2 = Eq(boys_pencils + girls_pencils, total_pencils)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the number of pies Mrs Tan and Mrs Lim had at first as a symbol\n    pies_initial = symbols('pies_initial')\n    \n    # Create equations based on the given information\n    equation = Eq(pies_initial + 12, 2 * (pies_initial - 4))\n    \n    # Solve the equation for the number of pies they initially had\n    num_pies_initial = solve(equation, pies_initial)\n    \n    # Return the solution\n    return num_pies_initial[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = '135'\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    return count\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time = 6 * 60 + 35  # Converts departure time to minutes past midnight\n    arrival_time = 10 * 60 + 22   # Converts arrival time to minutes past midnight\n\n    travel_time = arrival_time - departure_time\n\n    return travel_time\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '3456'\n    full_repeats = 50 // len(pattern)\n    partial_pattern_length = 50 % len(pattern)\n    \n    sum_full_repeats = sum(map(int, pattern)) * full_repeats\n    sum_partial_pattern = sum(map(int, pattern[:partial_pattern_length]))\n    \n    total_sum = sum_full_repeats + sum_partial_pattern\n    \n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    numerator = 3 * 5 * 7 * 9 * 13\n    denominator = 3 * 5 * 7 * 9 * 13 * 15\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n    fraction_second_group = 1/4\n\n    students_first_group = (total_sweets * fraction_first_group) / sweets_first_group\n    remainder_sweets = total_sweets - (students_first_group * sweets_first_group)\n    students_second_group = (remainder_sweets * fraction_second_group) / 4\n    remainder_after_second = remainder_sweets - (students_second_group * 4)\n    students_third_group = remainder_after_second / 5\n\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    import math\n    from itertools import combinations\n\n    # Define the card numbers and sort them for better combinations ordering\n    card_numbers = sorted([6, 12, 35, 175, 245, 300])\n\n    # Find all possible combinations for Candy (2 cards) and Candice (3 cards)\n    candy_combinations = list(combinations(card_numbers, 2))\n    candice_combinations = list(combinations(card_numbers, 3))\n\n    # Dictionary to store the product of numbers for each combination\n    products_map = {}\n\n    # Calculate product for Candy's combinations\n    for combo in candy_combinations:\n        product = math.prod(combo)\n        if product not in products_map:\n            products_map[product] = []\n        products_map[product].append(combo)\n\n    # Calculate product for Candice's combinations and compare\n    for combo in candice_combinations:\n        product = math.prod(combo)\n        if product in products_map:\n            products_map[product].append(combo)\n\n            # We are looking for exactly one 2-card combo and one 3-card combo with the same product\n            if len(products_map[product]) == 2:\n                # If we find such a product, we get the numbers from the combinations\n                chosen_numbers = set(combo).union(set(products_map[product][0]))\n\n                # Find the number that was not picked from the original list\n                for number in card_numbers:\n                    if number not in chosen_numbers:\n                        return number\n\n    return None\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    # Define the current age of Tom and the age of his father when Tom reaches his father's current age\n    tom_age_now = 10\n    father_age_when_tom_reaches_fathers_age = 70\n\n    # The difference in age between the father and Tom is constant\n    age_difference = father_age_when_tom_reaches_fathers_age - tom_age_now\n\n    # Father's current age is his age when Tom reaches it minus the age difference\n    father_age_now = father_age_when_tom_reaches_fathers_age - age_difference\n\n    return father_age_now\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    packet_one = 25\n    packet_two = 20\n\n    least_common_multiple = lcm(packet_one, packet_two)\n\n    # Calculate the number of days after 1st March\n    days_after = least_common_multiple - 1\n\n    day = 1 + days_after\n    month = 3\n\n    # days in each month from March to December (ignoring leap years for simplicity)\n    days_in_month = [31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # adjust the day and month to the actual date\n    for days_in_current_month in days_in_month:\n        if day > days_in_current_month:\n            day -= days_in_current_month\n            month += 1\n        else:\n            break\n\n    return (day, month)\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) // 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    first_number = 3 + 1/4\n    second_number = 1 + 3/4\n    difference = first_number - second_number\n    \n    return round(difference, 2)\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    # Let number of girls be g and number of boys be b\n    # b = 3g\n    # 8b + 5g = 580\n    # Replace b with 3g in the equation\n    # 8(3g) + 5g = 580\n    # 24g + 5g = 580\n    # 29g = 580\n    # g = 580 / 29\n    # g = 20\n    # b = 3g = 3*20\n    # b = 60\n    # Therefore, the number of boys who participated in the match is 60\n    g = 580 / 29\n    b = 3 * g\n    return int(b)\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    first_term = 3\n    last_term = 99\n    difference = 4\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = (num_terms * (first_term + last_term)) // 2\n    \n    return total_sum\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 13):\n        for b in range(a, (12 - a) // 2 + 1):\n            if 2 * b + a == 12:  # Perimeter condition\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n    \n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n\n    equation1 = Eq(elder + younger, 42)\n    equation2 = Eq(younger - (elder - younger), elder / 2)\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # Using the inclusion-exclusion principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    for n in range(1000, 1, -2):  # start from 999, then decrement by 2 (to keep it odd)\n        found = False\n        for i in range(2, n):\n            if is_composite(i):\n                for j in range(i+1, n):\n                    if is_composite(j) and is_composite(n - i - j):\n                        found = True\n                        # Break out of both loops since we've found a split.\n                        break\n                if found:\n                    break\n        if not found:\n            return n\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    return 104 // 4\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    initial_strawberries = 86\n    given_away = 29\n    final_strawberries = 100\n\n    strawberries_received = final_strawberries - (initial_strawberries - given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    # Calculate the greatest common divisor for class A and B\n    gcd_ab = gcd(class_a, class_b)\n    \n    # Using gcd_ab calculate GCD with class C\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    # Using the Inclusion-Exclusion Principle\n    passed_only_first = passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n\n    return passed_only_first\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # From A to D directly\n    A_to_D = 6\n    \n    # From A to B to C to D\n    A_to_B_to_C_to_D = 7 * 5 * 2\n    \n    # From A to C to D\n    A_to_C_to_D = 4 * 2\n    \n    # The total ways from A to D\n    total_ways = A_to_D + A_to_B_to_C_to_D + A_to_C_to_D\n    \n    return total_ways\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    for chocolate in range(256):\n        cheese = 255 - chocolate\n        if chocolate - 0.4 * chocolate == cheese - 0.75 * cheese:\n            return int(chocolate - 0.4 * chocolate)\n    \nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    total_cost = 20\n    pencil_cost = 2\n    num_pencils = 3\n    num_pens = 2\n\n    total_pencil_cost = pencil_cost * num_pencils\n    total_pen_cost = total_cost - total_pencil_cost\n    cost_per_pen = total_pen_cost / num_pens\n\n    return cost_per_pen\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300  # total kilograms of hay\n    total_cattle = 5  # total number of cattle\n    total_days = 10  # total number of days\n\n    hay_per_day_per_cattle = total_hay / (total_cattle * total_days)\n    \n    return hay_per_day_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    for youngest in range(1, 10):\n        for middle in range(youngest + 1, 10):\n            for eldest in range(middle + 1, 10):\n                if youngest * middle * eldest == 210:\n                    return youngest\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    total_students = 39\n\n    # 1/4 of boys equals 2/5 of girls\n    equation1 = Eq(boys / 4, 2 * girls / 5)\n    \n    # total number of boys and girls equals total students\n    equation2 = Eq(boys + girls, total_students)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    more_boys = solutions[boys] - solutions[girls]\n\n    return more_boys\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    number_of_boxes = total_avocados // per_box\n\n    return number_of_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3 / 8\n    seedlings_killed = total_seedlings * fraction_killed\n    seedlings_survive = total_seedlings - seedlings_killed\n\n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n    \n    full_days = total_locusts // daily_consumption\n    remaining_locusts = total_locusts % daily_consumption\n    \n    if remaining_locusts == 0:\n        ans = daily_consumption\n    else:\n        ans = remaining_locusts\n\n    return ans\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = (77.5 * (52 / 100)) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of $5 notes (n5) and $10 notes (n10)\n    n5, n10 = symbols('n5 n10')\n\n    # Equation for the total number of notes\n    total_notes_eq = Eq(n5 + n10, 116)\n\n    # Equations for the remaining notes after spending\n    remaining_10_eq = Eq(n10 * (1 - 0.60), (4/7) * (n5 * (1 - 0.25)))\n    remaining_5_eq = Eq(n5 * (1 - 0.25), n5 - n5 * 0.25)\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, remaining_10_eq, remaining_5_eq), (n5, n10))\n\n    # Calculate the initial amount of money from the $10 and $5 notes before spending\n    initial_amount = solutions[n5] * 5 + solutions[n10] * 10\n\n    # Calculate the amount of money spent\n    spent_10 = solutions[n10] * 10 * 0.60\n    spent_5 = solutions[n5] * 5 * 0.25\n    total_spent = spent_10 + spent_5\n\n    # Calculate the cost of the bag\n    cost_of_bag = initial_amount - (solutions[n5] * 5 + solutions[n10] * 10 - total_spent)\n\n    return cost_of_bag\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    return 12 * 92 + 22 * 82 + 32 * 72\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    don, ben = symbols('don ben')\n    # Original ratio\n    equation1 = Eq(don/ben, 2/3)\n    # New ratio after changing numbers\n    equation2 = Eq((don+10)/(ben-5), 6/7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (don, ben))\n    # Since we are looking for the number of stickers Don had at first\n    return solutions[don]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # calculate number of terms\n    number_of_terms = (2016 - 2) // 2 + 1  # every two terms make a pair (positive, negative)\n    \n    # calculate sum of all positive terms which are even numbers starting from 2\n    positive_sum = sum(range(2, 2017, 4))\n    \n    # calculate sum of all negative terms which are odd numbers starting from 3\n    negative_sum = sum(range(3, 2016, 4))\n    \n    # subtract negative sum from positive sum\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    number_to_subtract = remainder if remainder == 0 else 25 - remainder\n    return number_to_subtract\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    difference = amy_toys - sally_toys\n    toys_to_give = difference // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31-a):\n            c = 31 - a - b\n            max_product = max(max_product, a*b*c)\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather_saved = 12.15\n    zach_saved = 3 * heather_saved\n    serena_saved = zach_saved + 24.50\n    jason_saved = serena_saved / 5\n    william_saved = jason_saved - 1.54\n    return william_saved\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # The given expression can be seen as the sum of products of consecutive odd numbers\n    # from 1 to 39 inclusive. This pattern can be simplified by noticing that each term in\n    # the pattern is the product of two consecutive odd numbers, which can also be written as:\n    # (2n - 1) * (2n + 1) = 4n^2 - 1, where n ranges from 1 to 20 (as there are 20 odd numbers from 1 to 39).\n\n    # We know the sum of squares of the first 20 natural numbers,\n    # so we can use it to calculate the required sum:\n    sum_of_squares = 2870\n\n    # Compute the required sum of products of odd numbers using the sum of squares\n    required_sum = 4 * sum_of_squares - 20  # Subtracted 20 because each term has -1, and there are 20 terms\n\n    return required_sum\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # Total number of students (excluding the constraint)\n    total_students = 7\n\n    # Number of ways to arrange 5 distinct entities (3 girls as 1 entity and 2 boys and 2 other individual students)\n    ways_to_arrange_5 = factorial(5)\n\n    # Number of ways to arrange 3 triplet sisters among themselves\n    ways_to_arrange_triplets = factorial(3)\n\n    # Now, consider the twins as a single entity first, and find positions where they don't stand together\n    # There are 4 positions where \"twins\" can be placed such that they are not together (after 1st, after 2nd, after 3rd, after 4th)\n    ways_for_twins_not_together = 4\n\n    # Calculate the total ways\n    total_ways = ways_to_arrange_5 * ways_to_arrange_triplets * ways_for_twins_not_together\n\n    return total_ways\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    order_cups = 30\n    milk_needed = milk_per_cup * order_cups\n    return milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"21{i}{j}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n    \n    min_students_most_born = (total_students // days_in_week) + 1\n\n    return min_students_most_born\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Maximum Fridays = (Total days // 7) + 1 (if the first day is a Friday)\n    # Find out if there's a starting Friday in the remaining days after full weeks\n    max_fridays = (55 // 7) + (1 if 55 % 7 >= 1 else 0)\n    \n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - (1 / 2))\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage_wearing_glasses = 20\n    total_girls = 25\n    \n    num_girls_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls\n    \n    return int(num_girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    # A number N that is divisible by each of the integers 2, 3, 4, 5, 6, 8, and 9\n    # is also divisible by the least common multiple (LCM) of these integers.\n    from math import gcd\n\n    def lcm(x, y):\n        return x * y // gcd(x,y)\n    \n    # Calculate the LCM of the numbers\n    nums = [2, 3, 4, 5, 6, 8, 9]\n    LCM = nums[0]\n    for i in nums[1:]:\n        LCM = lcm(LCM,i)\n    \n    # Since N gives a remainder of 5 when divided by 7,\n    # the smallest N can be represented as LCM * k + 5,\n    # where k is an integer, we need to find the smallest k such that (LCM * k + 5) % 7 == 0\n    k = 0\n    while True:\n        N = LCM * k + 5\n        if N % 7 == 0:\n            return N\n        k += 1\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n\n    total_cost = (7 * cost_per_mug) + (5 * cost_per_pen)\n    change_from_10 = 10 - total_cost\n\n    return round(change_from_10, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    away_fraction = 1/5\n    pupils_away = total_pupils * away_fraction\n    pupils_going_to_cathedral = total_pupils - pupils_away\n    return pupils_going_to_cathedral\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3  # minutes for one child to sing a song\n    num_songs = 2  # number of songs to sing\n    total_time = time_per_song * num_songs  # total time for one child to sing all songs\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - weight_with_2_apples\n\n    weight_per_apple = weight_of_3_apples / 3\n    basket_weight = weight_with_2_apples - 2 * weight_per_apple\n\n    return basket_weight\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    # Convert 25% to decimal\n    decimal_25_percent = 25 / 100\n\n    # Compare with 0.3\n    ans = \"25%\" if decimal_25_percent > 0.3 else \"0.3\"\n    \n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    rate = 0.015\n    final_amount = 37100\n    years = (final_amount / principal) ** (1/rate) - 1\n    actual_years = int(years) if years.is_integer() else round(years)\n    return actual_years\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes times 6 donuts per box\n    eaten_donuts = 3\n    remaining_donuts = total_donuts - eaten_donuts\n    return remaining_donuts\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # LCM of 3 and 7\n    ans = lcm\n    while True:  # Loop until we find a number that ends in 2\n        if str(ans).endswith('2'):\n            return ans\n        ans += lcm\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies + cakes - 39 - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_one_week = 7\n    weeks = 2\n    ans = days_in_one_week * weeks\n    return ans\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    place_value1 = 3 * 10**2  # The first 3 is in the hundreds place\n    place_value2 = 3 * 10**5  # The second 3 is in the hundreds of thousands place\n    \n    difference = place_value2 - place_value1\n    return difference\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time John takes to build the wall alone.\n    # Let J, Jo, A represent the work rate of John, Jonah and Angus respectively.\n    J, Jo, A = symbols('J Jo A')\n\n    # Equation 1: John, Jonah, and Angus together take 27 hours to build the wall.\n    # So their combined work rate times time equals 1 job, i.e., 1 wall.\n    equation1 = Eq(J + Jo + A, 1/27)\n\n    # Equation 2: Jonah and Angus together take 36 hours to build the wall.\n    equation2 = Eq(Jo + A, 1/36)\n\n    # We need the work rate of John only, solve for J.\n    solutions = solve((equation1, equation2), (J, Jo, A))\n\n    # The time John takes to build the wall on his own is the reciprocal of his work rate.\n    time_john = 1 / solutions[J]\n\n    return time_john\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    ans = (2 ** 17) % 10\n    return ans\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # This problem is known as the coin problem\n    # According to the Chicken McNugget Theorem or Frobenius Coin Problem, \n    # for two relatively prime positive integers a and b,\n    # the greatest amount that cannot be obtained by any non-negative integer \n    # combination of a and b is a*b - a - b.\n\n    # Coins of 4z and 5z are relatively prime (have no common divisors)\n    a = 4\n    b = 5\n\n    largest_total = a * b - a - b\n    \n    return largest_total\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    max_d = 1\n    for d in range(1, 1002):\n        if 1001 % d == 0:\n            max_d = d\n    return max_d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let x be the combined current age of Claire and Daniel.\n    # According to the problem, five years ago, their combined age was 14. \n    # So, five years ago the combined age equation would be: x - 2*5 = 14\n    combined_age_5_years_ago = 14\n    years_passed = 5\n    combined_current_age = combined_age_5_years_ago + 2 * years_passed\n    \n    # We need to find the combined age in 3 years,\n    # which means we need to add 3 to the current age of each person.\n    years_ahead = 3\n    combined_future_age = combined_current_age + 2 * years_ahead\n\n    return combined_future_age\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            number = 108200 + a * 10 + b\n            if number % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    apple, pear = symbols('apple pear')\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n    solutions = solve((equation1, equation2), (apple, pear))\n    weight = 4 * solutions[apple] + 4 * solutions[pear]\n    return float(weight)\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n    length1 = 45\n    length2 = 30\n\n    max_length = gcd(length1, length2)\n\n    return max_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    total_students = 152\n    # Let x be the original number of boys\n    # Let y be the original number of girls\n    # According to the problem, after removing 1/11 of boys and 5 girls, \n    # the number of boys and girls will be the same. Therefore:\n    # (x - x/11) = (y - 5)\n    # Also, we know that the total number of students is the sum of boys and girls:\n    # x + y = 152\n    # We can solve these two equations to find the value of x (number of boys).\n\n    # Equation 1: x - x/11 - y = -5\n    # Equation 2: x + y = 152\n\n    # Rearrange Equation 1:\n    # 10x/11 - y = -5  =>  Multiply by 11 to clear the denominator:\n    # 10x - 11y = -55  =>  Equation 1 in the form of 10x - 11y = -55\n\n    # Using numpy.linalg.solve to solve the system\n    import numpy as np\n\n    # Coefficients matrix for the variables x and y\n    A = np.array([[10, -11], [1, 1]])\n    # The constants on the right-hand side of the equations\n    B = np.array([-55, 152])\n\n    # Using numpy's solve function to solve for x and y\n    solution = np.linalg.solve(A, B)\n\n    # Since x represents the original number of boys, return that\n    return int(solution[0])\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    num1 = 475\n    num2 = 138\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils // pencils_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_per_day = 50\n    adult_in_days = 30\n    total_days = 40\n    \n    # Since new fleas become adults in 30 days, we have to consider the eggs\n    # laid only in the first 10 days, because the eggs from day 11 to day 40\n    # won't become adults by the 40th day.\n    days_when_eggs_become_adults = total_days - adult_in_days\n\n    # Only the eggs laid in the first 10 days will become adult fleas\n    new_adult_fleas = days_when_eggs_become_adults * eggs_per_day\n\n    return new_adult_fleas\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3) + 24\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    total = (french + japanese + italian - french_japanese - french_italian - japanese_italian + all_three)\n\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    orange_drink_total = 12\n    water_fraction = 3 / 4\n    water_litres = orange_drink_total * water_fraction\n    return water_litres\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    common_difference = 3\n    num_rows = 22\n    \n    ans = num_rows * (2 * first_term + (num_rows - 1) * common_difference) // 2\n    return ans\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    fraction1 = 21 + Fraction(21, 286)\n    fraction2 = 6 + Fraction(647, 2530)\n    fraction3 = 1 + Fraction(1370, 2829)\n\n    # Perform the specified operations\n    result = fraction1 / fraction2 * fraction3\n\n    # Simplify the final fraction\n    ans = result.numerator, result.denominator\n\n    return ans\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Each dimension of the cuboid is cut into n parts to form the small cubes\n    # The total number of small cubes is the product of these parts\n    # 6 * 10 * 12 = 720, let's find the number of cuts for each dimension\n    n1, n2, n3 = 6, 10, 12\n    total_cubes = 720\n    cubes_per_side = total_cubes // (n1 * n2 * n3)  # Number of small cubes along each edge\n\n    # For small cubes with exactly one face painted\n    # We exclude the cubes at the edges along the depth (6 and 12 sides)\n    # since those edges have two or three painted faces\n    # There are two faces for the 6x10 side and two for the 10x12 side which are visible\n    # Hence we will have 4 * (n1 - 2) * (n2 - 2) such cubes at the two 6x10 sides\n    # And 4 * (n2 - 2) * (n3 - 2) such cubes at the two 10x12 sides\n    # And 4 * (n1 - 2) * (n3 - 2) such cubes at the two 6x12 sides\n\n    # Finding the cut length to ensure each small cube is the same size\n    cuts_length = (n1 * n2 * n3) // total_cubes\n\n    # Calculating the number of cubes with one face painted \n    # (by multiplying painted face with number of cubes that fit excluding the corners)\n    face_6_10 = (n1 // cuts_length - 2) * (n2 // cuts_length - 2)\n    face_10_12 = (n2 // cuts_length - 2) * (n3 // cuts_length - 2)\n    face_6_12 = (n1 // cuts_length - 2) * (n3 // cuts_length - 2)\n\n    # Since each dimension will have two painted faces\n    num_cubes_one_painted = 2 * face_6_10 + 2 * face_10_12 + 2 * face_6_12\n\n    return num_cubes_one_painted\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 30 / 100 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 385  # pence, since 3.85 pounds is 385 pence\n    cost_pencil = 38  # price of pencil in pence\n    cost_ruler = 59  # price of ruler in pence\n    remainder = total_money - cost_pencil - cost_ruler\n    return remainder / 100  # convert pence back to pounds\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star, nini = symbols('star nini')\n\n    equation1 = Eq((5/star) + (20/nini), 1)\n    equation2 = Eq((20/star) + (8/nini), 1)\n\n    solutions = solve((equation1, equation2), (star, nini))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    # Maria has $20 apples more than Anne.\n    equation1 = Eq(maria, anne + 20)\n\n    # Altogether they have $44 apples.\n    equation2 = Eq(anne + maria, 44)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "from sympy import divisors\n\ndef solution():\n    # Given number of pieces of candy\n    candies = 140\n    # Find all odd divisors since each pile must have an odd number of candies\n    odd_divisors = [d for d in divisors(candies) if d % 2 == 1]\n    # The number of ways to distribute is equal to the number of odd divisors\n    num_ways = len(odd_divisors)\n    return num_ways\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for number in range(10, 100):  # Loop through all 2-digit numbers\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    keys = 20\n    # In the worst case, the warden would try each key for each room, minus the tries for the last key (which would be obvious)\n    # He tries 19 keys for the 1st lock, 18 keys for the 2nd lock ... 1 key for the 19th lock\n    ans = sum(range(1, keys))\n    return ans\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Tom starts by taking 4 stones from Stack B\n    stack_a = 20\n    stack_b = 20 - 4\n    \n    # Jerry needs to balance the stacks to guarantee a win.\n    # Jerry should take stones from Stack A so that both stacks have an equal number of stones.\n    stones_to_take = stack_a - stack_b\n\n    return (stones_to_take, 'A')\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    sheet_number = 3  # The third sheet\n    first_page_number = 2*(sheet_number-1) + 1  # First page of the third sheet\n    second_page_number = first_page_number + 1  # Second page of the third sheet\n    \n    # Sum of page numbers on the third sheet\n    total_page_numbers = first_page_number + second_page_number\n    \n    return total_page_numbers\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3/7\n    girls = total_students * fraction_girls\n    return int(girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n    \n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits_per_page = [9, 180, 2700]  # Digits for 1-9, 10-99, 100-999\n    digits_used = 0\n    total_pages = 0\n    \n    for i in range(len(digits_per_page)):\n        if digits_used + digits_per_page[i] < 933:\n            digits_used += digits_per_page[i]\n            total_pages += 10 ** (i + 1) - 10 ** i\n        else:\n            remaining_digits = 933 - digits_used\n            pages_in_this_range = remaining_digits // (i + 1)\n            total_pages += pages_in_this_range\n            break\n\n    return total_pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    pages_with_3 = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            pages_with_3 += 1\n    return pages_with_3\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    # Define the prices for each juice\n    apple_price = 5\n    orange_price = 3\n    peach_price = 10\n    \n    # Define the quantity of each juice\n    apple_quantity = 30\n    orange_quantity = 50\n    peach_quantity = 20\n    \n    # Calculate the total cost of each juice type\n    total_apple_cost = apple_price * apple_quantity\n    total_orange_cost = orange_price * orange_quantity\n    total_peach_cost = peach_price * peach_quantity\n    \n    # Calculate the total cost of all juices\n    total_cost = total_apple_cost + total_orange_cost + total_peach_cost\n    \n    # Calculate the total quantity of all juices\n    total_quantity = apple_quantity + orange_quantity + peach_quantity\n    \n    # Calculate the average cost per cup of the blended juice\n    average_cost_per_cup = total_cost / total_quantity\n    \n    return average_cost_per_cup\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert 9:15 PM to minutes\n    end_time = (11 * 60) + 6    # Convert 11:06 PM to minutes\n\n    duration = end_time - start_time  # Calculate the duration in minutes\n\n    return duration\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initially, Box A has at least 15 pens of each color\n    # After moving 20 pens from Box A to Box B, we need to return pens to Box A\n    # so that Box A again has at least 15 pens of each color.\n    \n    # Number of pens of each color in Box A after moving 20 pens to Box B:\n    blue_A, red_A, black_A, green_A = (10 - 5, 15 - 5, 20 - 5, 25 - 5)\n    # We moved 5 pens of each color since the problem doesn't specify pen colors\n\n    # Pens to return to Box A so that it has at least 15 pens of each color\n    pens_to_return = 0\n    \n    # Function to calculate how many pens to return for a specific color\n    def pens_needed_to_return(pens_in_A):\n        if pens_in_A < 15:\n            return 15 - pens_in_A\n        else:\n            return 0\n\n    # Calculate for all colors\n    pens_to_return += pens_needed_to_return(blue_A)\n    pens_to_return += pens_needed_to_return(red_A)\n    pens_to_return += pens_needed_to_return(black_A)\n    pens_to_return += pens_needed_to_return(green_A)\n\n    return pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    digits = 0\n    \n    for number in range(1, 92):\n        digits += len(str(number))\n        \n    return digits\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    boys_more = 32\n    total_students = 0\n    side = 0\n\n    # since the boys are in the outermost layer and then alternate with girls\n    # we can try to find the side of the square starting with boys (even side)\n    # side of square with boys = side of square with girls + 2\n    while True:\n        boys = (side + 2) ** 2 - side ** 2\n        girls = side ** 2\n        if boys - girls == boys_more:\n            total_students = boys + girls\n            break\n        side += 2\n\n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    return 1 / 8\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage_of_violin_players = 12.5\n    number_of_violin_players = 11\n\n    total_pupils = (number_of_violin_players * 100) / percentage_of_violin_players\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution # Note: the function expects a parameter n to calculate C"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centre_chocolates = 16\n    \n    # Since all plain chocolates together are less than the number of soft-centre chocolates,\n    # every plain chocolate can have a soft centre.\n    # The remaining soft-centre chocolates must be milk chocolates.\n    \n    max_plain_soft_centre = min(plain_chocolates, soft_centre_chocolates)\n    min_plain_soft_centre = soft_centre_chocolates - milk_chocolates\n\n    # The number of plain chocolates with soft-centres must be at least the minimum and at most the maximum.\n    return f\"At least {min_plain_soft_centre} and at most {max_plain_soft_centre} plain chocolates have soft-centres.\"\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    # Let the divisor be x and the dividend be y\n    # From the question, we know that y = 29x + 11\n    # Also, from the question we have x + y = 431\n    # We have to solve these two equations to find x and y and then return the difference y - x\n    \n    # Let's denote quotient as q, remainder as r, dividend as d, and divisor as dv\n    q = 29\n    r = 11\n    sum_d_dv = 431\n\n    # From the remainder theorem: d = dv * q + r\n    # And we also have d + dv = sum_d_dv\n    # We can rewrite d from the first equation: dv * q + r + dv = sum_d_dv\n    # And find dv: (q + 1) * dv + r = sum_d_dv\n    # This simplifies to: dv = (sum_d_dv - r) / (q + 1)\n    \n    dv = (sum_d_dv - r) / (q + 1)\n    \n    # Now we find d using the first equation: d = dv * q + r\n    d = dv * q + r\n    \n    # The difference between dividend and divisor is: d - dv\n    ans = d - dv\n    return int(ans)\n\nans = solution()"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of coins of each type.\n    x = symbols('x')\n    \n    # The total sum is made of 1p, 2p, 5p, and 10p coins.\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n\n    # Solve for x.\n    number_of_each_coin = solve(equation, x)\n\n    # The total number of coins is the sum of all coins of each type.\n    total_coins = 4 * number_of_each_coin[0]\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n    \n    # Equation 1: Total number of fruits\n    equation1 = Eq(apples + pears, 105)\n    \n    # Equation 2: Relation between apples and pears after selling\n    equation2 = Eq((apples - (apples / 3)) / (pears - (2 * pears / 5)), 5/6)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (apples, pears))\n    \n    apples_sold = solutions[apples] / 3\n    pears_sold = 2 * solutions[pears] / 5\n    \n    total_sold = apples_sold + pears_sold\n    \n    return total_sold\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Declare symbols for A, B, and C\n    A, B, C = symbols('A B C')\n    \n    # Given the ratio and the fact that C = A + 10\n    equation1 = Eq(A / B, 4 / 5)\n    equation2 = Eq(B / C, 5 / 6)\n    equation3 = Eq(C, A + 10)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Sum A, B, and C\n    total_sum = solutions[A] + solutions[B] + solutions[C]\n    \n    return total_sum\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, C, D as one group plus the 8 individual students\n    total_groups = 8 + 1  # The group ABDC + Individuals E-L\n    \n    # Find the permutations of these 9 entities\n    permutations_groups = factorial(total_groups)\n\n    # Inside the group, A, B, C, and D can be arranged in 4! ways\n    permutations_within_group = factorial(4)\n    \n    # Total permutations is the product of permutations of groups and within the group\n    total_permutations = permutations_groups * permutations_within_group\n    \n    return total_permutations\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    total_games = (6 * 5) // 2  # Each student plays with 5 others, and we divide by 2 to avoid double counting.\n    total_points = total_games * 2  # Each game has 2 points to distribute.\n\n    points_taken = sum([7, 6, 5, 4, 3])  # Sum of points for 5 students.\n    remaining_points = total_points - points_taken  # Points for the remaining student.\n\n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    # Original weight ratio\n    equation1 = Eq(A/B, 5/3)\n    # New weight ratio after transferring 10 grams\n    equation2 = Eq((A - 10)/(B + 10), 7/5)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Calculate the total weight\n    total_weight = solutions[A] + solutions[B]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    girls_per_boy = 5 / 3\n    number_of_girls = number_of_boys * girls_per_boy\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n\n    # The sum of an arithmetic sequence is given by the formula\n    # sum = n/2 * (a1 + an), where n is the number of terms,\n    # a1 is the first term, and an is the last term.\n    \n    # We need to find the number of terms (n) first\n    # total_players = n/2 * (first_line_players + last_line_players)\n    # n = 2 * total_players / (first_line_players + last_line_players)\n    \n    n = 2 * total_players // (first_line_players + last_line_players)  # integer division because n must be an integer\n    \n    # The difference (d) between any two adjacent lines can be found by the formula\n    # d = (last_line_players - first_line_players) / (n - 1)\n    \n    difference = (last_line_players - first_line_players) // (n - 1)  # integer division because d must be an integer\n  \n    return difference\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if (num % 3 == 2) and (num % 5 == 2) and (num % 7 == 2):\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    # Calculate the product\n    product = 48 * 925 * 38 * 435\n    \n    # Convert the product into string to count trailing zeros\n    product_str = str(product)\n    \n    # Count trailing zeros by reversing the string and counting leading zeros\n    zeros_count = len(product_str) - len(product_str.rstrip('0'))\n    \n    return zeros_count\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # Convert all masses to grams\n    max_mass = max(masses)\n    return max_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from math import comb\n\n    days_in_week = 7\n    weeks_in_1000_days = 1000 / days_in_week\n    barking_times_in_1000_days = 3 * weeks_in_1000_days\n    theft_occurrences = 2\n    dog_barks_with_theft_probability = 0.9\n\n    # Calculate number of barking events not associated with theft\n    barking_without_theft = barking_times_in_1000_days - theft_occurrences\n\n    # Calculate the probability of the dog barking due to theft vs. total barks\n    theft_barks_probability = (theft_occurrences * dog_barks_with_theft_probability) / barking_times_in_1000_days\n\n    return theft_barks_probability\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of each candy\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(apple, orange + 7)        # 7 more apple candies than orange candies\n    equation2 = Eq(apple, grape + 3)         # 3 more apple candies than grape candies\n    equation3 = Eq(pineapple, orange + 2)    # 2 more pineapple candies than orange candies\n    equation4 = Eq(apple + orange + grape + pineapple, 25)  # Total candies bought\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    # Get the number of apple candies\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_girls = 6 / 11\n    number_of_girls = total_children * fraction_girls\n    number_of_boys = total_children - number_of_girls\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    # If Mr. Ya gives 13 stickers to each pupil, he has an excess of 190 stickers.\n    equation1 = Eq(stickers - 13 * pupils, 190)\n\n    # If he gives 17 stickers to each pupil, he has an excess of 50 stickers.\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    # Return the total number of stickers\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # The smallest difference would be achieved by minimizing one number and maximizing the other\n    # For the smallest number, we sort the digits in ascending order (123456789)\n    min_num = int(''.join(map(str, sorted(range(1, 10)))))\n  \n    # For the largest number, we sort the digits in descending order (987654321)\n    max_num = int(''.join(map(str, sorted(range(1, 10), reverse=True))))\n  \n    # The difference between the two\n    ans = max_num - min_num\n  \n    return ans\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Equation based on the information given\n    eq1 = Eq(b, g - 65)  # there were 65 fewer boys than girls\n    eq2 = Eq(b - (2/5)*b, g - (3/7)*g)  # after a fraction of both left, the numbers were the same\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (b, g))\n\n    # Calculate total students left in the hall\n    boys_left = solutions[b] - (2/5)*solutions[b]\n    girls_left = solutions[g] - (3/7)*solutions[g]\n\n    # Sum of boys and girls left\n    total_left = boys_left + girls_left\n\n    return total_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    quotient = 2412 // 9\n    return quotient\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for page_number in range(1, 131):\n        count += str(page_number).count('1')\n    return count\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    remaining_after_third = 25  # 25 bricks were still unmoved\n    moved_third = 68  # moved 68 bricks on third trip\n\n    # After moving 68 bricks on the third trip, the remaining bricks were 25\n    # Therefore, before the third trip they had (remaining_after_third + moved_third) bricks\n    before_third_trip = remaining_after_third + moved_third\n\n    # On the second trip, they moved 11 more than half of the remaining number of bricks\n    # Let's denote the remaining bricks after the first trip as `x`.\n    # Then, on the second trip they moved (x / 2) + 11\n    # And after the second trip, they had `before_third_trip` bricks left\n    # This gives us the equation (x / 2) + 11 + before_third_trip = x\n    # Solving for `x` will give us the number of bricks remaining after the first trip\n    x = before_third_trip * 2 - 11\n\n    # On the first trip, they moved 26 less than half the number of bricks\n    # Let the total number of bricks at first be `total_bricks`.\n    # Therefore, they moved (total_bricks / 2) - 26 on the first trip, and `x` remains\n    # Hence, (total_bricks / 2) - 26 + x = total_bricks\n    # Solving for `total_bricks` will give us the initial number of bricks\n    total_bricks = x + 26 * 2\n\n    return total_bricks\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the unknowns\n    boys, girls, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('boys girls girls_swim girls_not_swim boys_swim boys_not_swim')\n    \n    # Equations based on the problem statement\n    total_pupils_eq = Eq(boys + girls, 1690)\n    boys_girls_diff_eq = Eq(boys - girls, 90)\n    girls_ratio_eq = Eq(girls_swim / girls_not_swim, 31/49)\n    boys_swim_diff_eq = Eq(boys_not_swim - boys_swim, 120)\n    total_girls_eq = Eq(girls, girls_swim + girls_not_swim)\n    total_boys_eq = Eq(boys, boys_swim + boys_not_swim)\n    \n    # Solve the system of equations\n    solutions = solve((total_pupils_eq, boys_girls_diff_eq, girls_ratio_eq, boys_swim_diff_eq, total_girls_eq, total_boys_eq), \n                      (boys, girls, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n                      \n    # Calculate the total number of pupils who cannot swim\n    cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n    \n    return cannot_swim\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # Let x represent the number of years it will take for the sum of their ages to be 40.\n    # Now we can express the sum of their ages in x years as 22 + 2x\n    # We set this equal to 40 and solve for x.\n    \n    # 22 + 2x = 40\n    # 2x = 40 - 22\n    # 2x = 18\n    # x = 9\n    \n    x = (40 - 22) // 2\n\n    return x\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n    \nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n\n    for i in range(1, 21):\n        total_digits += len(str(i))\n\n    return total_digits\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # We are finding a perfect square number as Mike says it can line up in a square array\n    # Since Mike is always 2nd, the square root of the number of students must be an integer plus 1\n    # We are looking for a square where the root minus 1 is divisible by 4 (to ensure Mike is 2nd on any side)\n    # Start checking from 2x2 square, which means n must be >= 4\n    \n    n = 4  # Starting with the smallest possible square size where Mike can be 2nd\n  \n    while True:\n        root = int(n ** 0.5)\n        if root**2 == n and (root - 1) % 4 == 0:\n            # Found the square where Mike is 2nd in line from any side\n            return n\n        n += 1\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    ways = [0] * 11  # There are 0 ways to reach the i-th step initially, with an extra base case for 0 steps.\n    ways[0] = 1  # There is 1 way to be at the 0th step (do nothing)\n\n    for i in range(10 + 1):\n        if i >= 2:\n            ways[i] += ways[i-2]  # If we can reach the (i-2)th step, we can reach the ith step in the same number of ways by taking 2 steps\n        if i >= 3:\n            ways[i] += ways[i-3]  # If we can reach the (i-3)th step, then we can reach the ith step in the same number of ways by taking 3 steps\n\n    return ways[10]  # The answer is the number of ways to reach the 10th step\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Starting loop from 1000 as the lock has 4 digits so the number has to be greater than or equal to 1000.\n    # Maximum possible value will be 9000s because exceeding that will not meet the criteria.\n    \n    for original_number in range(1000, 10000):\n        # swap the last and first digit\n        str_num = str(original_number)\n        new_number = int(str_num[-1] + str_num[1:3] + str_num[0])\n        \n        if new_number - original_number == 5877:\n            return original_number\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number_str = '1998'\n    n = 0\n    while True:\n        n += len(number_str)\n        repeated = int(number_str * (n // len(number_str)))\n        if repeated % 33 == 0:\n            break\n    return n\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    sum_of_numbers = group_number * (1 + group_number + group_number**2)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_round = 1/4\n    total_distance = 3.75\n    num_rounds = total_distance / distance_per_round\n    return int(num_rounds)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    number = 3_000_000 + 30_000 + 30\n    return number\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    cross_multiply = 10 * 21\n    missing_value = cross_multiply / 14\n    return missing_value\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    # Loop through the possible two-digit numbers that end with 0\n    for num in range(10, 100, 10):\n        if num % 6 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_more = 7 * 10\n\n    correct_answer = original_number + tens_more \n\n    return correct_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # Since we are looking for the maximum number of distinct positive integers that sum up to 27,\n    # we should start by using the smallest positive integers possible,\n    # which are 1, 2, 3, and so on.\n\n    # The sum of the first n natural numbers is given by n*(n+1)/2\n    # We need to find the largest n such that n*(n+1)/2 <= 27\n\n    # Let's start with a simple loop to find the maximum n\n    n = 1\n    while (n * (n + 1)) // 2 <= 27:\n        n += 1\n\n    # When the loop exits, n is too large, so we subtract 1 to get the correct number\n    return n - 1\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # convert 3 m to cm\n    piece_1 = 147\n    piece_2 = 32.5\n    piece_3 = 67\n\n    piece_4 = total_length_cm - (piece_1 + piece_2 + piece_3)\n\n    return piece_4\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    return 308 - 197\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    papers = 18\n    interval = 3\n    leaves_needed = papers // interval\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    first_bracket = 101 + 234 + 567\n    second_bracket = 234 + 567 + 89\n    third_bracket = 101 + 234 + 567 + 89\n    fourth_bracket = 234 + 567\n\n    ans = (first_bracket * second_bracket) - (third_bracket * fourth_bracket)\n    return ans\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from itertools import product\n\ndef solution():\n    probabilities = [(0.5, 'A'), (0.4, 'B'), (0.2, 'C')]\n    \n    # Compute probability for all possible combinations of passing and failing\n    pass_combinations = list(product(*[(1-p, p) for p, _ in probabilities]))\n    \n    # Calculate the total probability of each number of people passing\n    pass_counts = {0: 0, 1: 0, 2: 0, 3: 0}\n    for combination in pass_combinations:\n        pass_count = sum(1 for i, pass_prob in enumerate(combination) if pass_prob == probabilities[i][0])\n        pass_counts[pass_count] += combination[0] * combination[1] * combination[2]\n\n    # Find the pass count with the maximum probability\n    most_likely_pass_count = max(pass_counts, key=pass_counts.get)\n    \n    return most_likely_pass_count\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # Start with the first term, which is 1\n\n    # Loop from 2 to 10, since the fractions start from 1/2 up to 9/10\n    for denominator in range(2, 11):\n        ans += (denominator - 1) * (1 / denominator) * 2\n\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    # Let the original number of watches be 8x and the number of caps be 11x.\n    # After selling 88 caps, the number of caps becomes (11x - 88).\n    # According to the new ratio 12:11, we have:\n    # (Number of watches) / (Number of caps after selling) = 12 / 11.\n    # So, (8x) / (11x - 88) = 12 / 11\n    # Cross multiply to get 88x = 12 * (11x - 88)\n    # 88x = 132x - 12 * 88\n    # 44x = 12 * 88\n    # x = (12 * 88) / 44\n    x = (12 * 88) // 44\n    \n    # Number of watches is 8 times x\n    num_watches = 8 * x\n\n    return num_watches\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    houses_to_cover_initially = 6 - 1  # from the first to the sixth house, he passes 5 intervals\n    total_time_initially = 30  # time spent in minutes\n\n    time_per_interval = total_time_initially / houses_to_cover_initially # time to cover one interval\n\n    total_houses = 10\n    houses_to_cover_totally = total_houses - 1  # intervals between ten houses\n\n    total_time_needed = time_per_interval * houses_to_cover_totally # total time needed for ten houses\n\n    return total_time_needed\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):      # A can't be 0, it must be between 1 and 9\n        for D in range(1, 10):  # D can't be 0 because 1/4 of it would be less than 1\n            if A == D * 1/4:\n                for B in range(10):  # B can be 0-9\n                    if B == A - 1:\n                        for C in range(10):  # C can be 0-9\n                            if len(set([A, B, C, D])) == 4:  # making sure all digits are different\n                                ABCD = A*1000 + B*100 + C*10 + D\n                                DCBA = D*1000 + C*100 + B*10 + A\n                                if ABCD * 4 == DCBA:\n                                    return ABCD\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length = 1.05  # in meters\n    total_length_cm = total_length * 100  # convert to centimeters\n\n    longer_length_cm = (2/3) * total_length_cm  # The longer piece is 2 parts of the 3 parts total\n\n    return longer_length_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    gallons_to_litres = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * gallons_to_litres\n    total_cost = litres_used * cost_per_litre\n    \n    return round(total_cost, 2)\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    total = 2015\n    # The number Jack needs to pick to make sure the remaining\n    # coins are a multiple of (11 + 1) = 12.\n    # This way, no matter how many coins Ken picks, Jack can always pick \n    # a number that makes the total picked by both of them equal to 12.\n    # Eventually, Ken will be forced to pick the last coin.\n    for m in range(1, 12):\n        if (total - m) % (11 + 1) == 0:\n            return m\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    number = 1200000000 + 31000 + 93\n    return number\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def count_ones_in_binary(n):\n        return bin(n).count('1')\n\n    return count_ones_in_binary(2015)\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # Define the period of the pattern as \"black, white, white\"\n    pattern_length = 3  # ●○○\n\n    # Since there were 92 white balls, and in each pattern \"white\" occurs twice,\n    # we calculate the number of full patterns by dividing the white balls by 2\n    full_patterns = 92 // 2\n\n    # Now calculate the total number of balls by multiplying the full patterns by the pattern length\n    total_balls = full_patterns * pattern_length\n\n    # Add any remaining white balls that don't complete a full pattern\n    remaining_white_balls = 92 % 2\n\n    # If there's a remaining white ball, it means there was an extra pattern started that wasn't completed\n    if remaining_white_balls > 0:\n        total_balls += remaining_white_balls + 1  # Add the remaining white ball and the single black ball before it\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(0, 24):  # loop through all hours of the day (0 to 23)\n        for minute in range(0, 60):  # loop through all minutes in an hour (0 to 59)\n            hour_digits = [int(d) for d in str(hour).zfill(2)] # add leading zero if necessary and split into digits\n            minute_digits = [int(d) for d in str(minute).zfill(2)] # add leading zero if necessary and split into digits\n            all_digits = hour_digits + minute_digits\n            if all_digits.count(4) >= 2: # if there are at least two fours\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let the age of the youngest dwarf be x.\n    # Then, the ages of the youngest three are x, (x+1), and (x+2) respectively.\n    # Their total age is 42, so x + (x+1) + (x+2) = 42\n    \n    # Using the sum of these three ages, we solve for x\n    x = (42 - 3) // 3  # 3 is subtracted because we are adding 1 and 2 to x in the consecutive terms.\n    \n    # The age of the oldest dwarf would be x + 6, since they are born in seven consecutive years\n    oldest = x + 6\n    \n    return oldest\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if pears % 6 == 2 and (pears + 3) % 7 == 0:\n            break\n    return pears\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    shortened_length_mm = 4\n    new_length_cm = original_length_cm - (shortened_length_mm / 10)\n    return new_length_cm\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    # Let's call the original number of passengers x.\n    # According to the problem:\n    # After the first stop, the number of passengers remaining on the bus is (3/5)x \n    # because two fifths got off.\n    # After the second stop, the number of passengers got off is (1/3) of the remaining passengers.\n    # Therefore, there are (2/3) of the remaining passengers left on the bus.\n    # According to the problem, this is equal to 22.\n\n    # We can set up the equation:\n    # (2/3) * (3/5) * x = 22\n    # Which simplifies to:\n    # (2/5) * x = 22\n    # Now we can solve for x:\n    x = 22 / (2/5)\n    return int(x)\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, we know that b = 0.\n    # We can use the point (4, 8) to calculate the slope m.\n    # Slope m is given by the change in y divided by the change in x for two points on the line.\n    \n    x1, y1 = 0, 0  # coordinates of the origin\n    x2, y2 = 4, 8  # coordinates of the given point\n\n    # Calculate the slope m\n    m = (y2 - y1) / (x2 - x1)\n\n    # Since the line passes through the origin, b is 0. Therefore, the linear equation is y = mx\n    ans = f\"y={m}x\"\n    \n    return ans\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    sam, peter, john_start, john_end = symbols('sam peter john_start john_end')\n\n    # Sam and Peter give 20% of their stickers to John\n    sam_gives = sam * 0.2\n    peter_gives = peter * 0.2\n    john_receives = sam_gives + peter_gives\n\n    # John's stickers increase by 80%\n    equation1 = Eq(john_end, john_start * 1.8)\n\n    # After giving out stickers, Sam has 20 more stickers than John\n    equation2 = Eq(sam - sam_gives, john_end + 20)\n\n    # Connection between Sam's and Peter's initial amount (in the ratio 7:5)\n    equation3 = Eq(sam, (7/5) * peter)\n\n    # Connecting John's initial and final amount\n    equation4 = Eq(john_receives, john_end - john_start)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter, john_start, john_end))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total_score = 4 * 89\n    desired_average = 95\n\n    additional_tests = 0\n    while True:\n        additional_tests += 1\n        new_total_score = current_total_score + 100 * additional_tests\n        new_average = new_total_score / (4 + additional_tests)\n        if new_average >= desired_average:\n            break\n    \n    return additional_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of $2 notes and $10 notes\n    notes_2, notes_10 = symbols('notes_2 notes_10')\n\n    # Equation for the total number of notes\n    total_notes_equation = Eq(notes_2 + notes_10, 72)\n\n    # Equations for the amount spent from each type of notes\n    spent_notes_2_equation = Eq(notes_2 * 0.25 * 2, notes_10 * 2 * 10)\n\n    # Total amount remaining after spending\n    remaining_amount_equation = Eq(notes_10 * 10 * 0.1 + notes_2 * 2 * 0.25, (notes_2 + notes_10) * 10 - notes_10 * 10 * 0.9 - notes_2 * 2 * 0.75)\n\n    # Solve the system of equations\n    solutions = solve((total_notes_equation, spent_notes_2_equation, remaining_amount_equation), (notes_2, notes_10))\n\n    # Calculate the cost of the gift\n    cost_of_gift = 90 / 100 * solutions[notes_10] * 10 + 75 / 100 * solutions[notes_2] * 2\n\n    return cost_of_gift\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    distance1 = 420\n    speed1 = 7\n    time1 = distance1 / speed1\n\n    distance2 = 620\n    speed2 = 5\n    time2 = distance2 / speed2\n\n    distance3 = 1200 - (distance1 + distance2)  \n    speed3 = 8\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    # 1/A represents the work rate of Hose A (pool/hours)\n    # 1/B represents the work rate of Hose B\n    # 1/C represents the work rate of Hose C\n\n    # We know that (1/A + 1/B) * 9 = 1 (full pool)\n    # (1/A + 1/C) * 12 = 1\n    # (1/B + 1/C) * 18 = 1\n\n    # From these equations, we can solve for 1/A, 1/B, and 1/C\n\n    one_over_A_plus_one_over_B = 1 / 9\n    one_over_A_plus_one_over_C = 1 / 12\n    one_over_B_plus_one_over_C = 1 / 18\n\n    # by adding all three we get 2*(1/A + 1/B + 1/C)\n    two_over_sum = (one_over_A_plus_one_over_B + one_over_A_plus_one_over_C + one_over_B_plus_one_over_C)\n    \n    # 1/A + 1/B + 1/C is the combined work rate of all three hoses\n    one_over_sum = two_over_sum / 2\n    \n    # To find the time taken by all three hoses, we take the reciprocal of the combined work rate\n    time_taken_by_all_three_hoses = 1 / one_over_sum\n    \n    return time_taken_by_all_three_hoses\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # You have 3 colors: red, yellow, and blue.\n    # To ensure you have at least 2 markers of the same color,\n    # you need to consider the worst-case scenario.\n    # If you take one marker of each color, you still can't be sure to have 2 of the same color.\n    # After picking one marker of each color (3 markers), the next marker you pick must match one of them.\n    # Therefore, you need to pick a total of 4 markers to be sure to have 2 of the same color.\n    \n    return 4\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    for five_notes in range(59):\n        two_notes = 58 - five_notes\n        if (5 * five_notes) + (2 * two_notes) == 164:\n            return five_notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    term_7 = 105 \n    term_8 = 120\n    term_9 = 135\n    diff = term_8 - term_7\n    \n    term_100 = term_7 + diff * (100 - 7)\n    \n    return term_100\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    from fractions import Fraction\n\n    total_spent_cupcakes = 187.5\n    fraction_spent_initially = Fraction(5, 9) + Fraction(1, 6)\n    total_spent_initially = total_spent_cupcakes / fraction_spent_initially\n\n    # Total number of cupcakes bought initially\n    cupcakes_initially = 36\n    # Price per cupcake\n    price_per_cupcake = total_spent_cupcakes / cupcakes_initially\n\n    # Price per muffin\n    price_per_muffin = price_per_cupcake / 3\n\n    # Number of muffins\n    muffins = 32\n    # Total spent on muffins\n    spent_on_muffins = muffins * price_per_muffin\n\n    return spent_on_muffins\n\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Start from the smallest multiple of 2 greater than 2 which is 4.\n    # We need 9 different numbers since 2 boxes have the same number of marbles.\n    # So we take the first 9 even numbers starting from 4 and then add an additional 4 for the 10th box.\n    \n    marbles = [i * 2 for i in range(2, 11)]\n    marbles.append(4)  # Adding the 10th box with the same number as the first box\n    \n    return sum(marbles)\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    sequence_sum = sum(range(1, 10)) + sum(range(4, 9))\n    return sequence_sum\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    pigeons = 75\n    cages = 20\n    # Applying Pigeonhole Principle\n    min_pigeons_in_one_cage = (pigeons + cages - 1) // cages\n    return min_pigeons_in_one_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    return 1007 - 1\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    first_number = 387\n    second_number = 729\n\n    ans = (first_number + second_number) / 2\n\n    return ans\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte_original, charlotte_after = symbols('marry alexis charlotte_original charlotte_after')\n\n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry, (7/5) * alexis)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    equation2 = Eq(charlotte_after, charlotte_original + 0.2 * marry + 0.2 * alexis)\n\n    # As a result, Charlotte's stickers increased by 80%\n    equation3 = Eq(charlotte_after, 1.8 * charlotte_original)\n\n    # If Mary had 20 stickers more than Charlotte in the end\n    equation4 = Eq(marry - charlotte_after, 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte_original, charlotte_after))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    # Let total_length be the total length of the road\n    # First day, paved 8 thousand feet\n    # Second day, paved total_length/6 + 4 thousand feet\n    # Total paved in first two days: 8 + total_length/6 + 4\n\n    # They paved 5/12 of the road in the first two days\n    equation = Eq(8 + total_length / 6 + 4, 5 / 12 * total_length)\n\n    # Solve for total_length\n    solution = solve(equation, total_length)[0]\n\n    return solution\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    num_combinations = len(list(permutations(digits, 3)))\n    return num_combinations\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Given the part of the collection Justin is left with\n    remaining_fraction = 5 / 9\n    # Given the number of bottle caps he gave away\n    given_away = 440\n\n    # Since the remaining fraction represents the collection he is left with after giving away 440 caps\n    # initial_collection * remaining_fraction = initial_collection - given_away\n    # initial_collection = given_away / (1 - remaining_fraction)\n\n    initial_collection = given_away / (1 - remaining_fraction)\n\n    return int(initial_collection)\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        if sum(int(digit) for digit in str(num)) == 35 and str(num).endswith('35'):\n            return num\n        num += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # Since the corners are included,\n    # we want to find the number of intervals on the longer side (204m)\n    # and the shorter side (144m) which will give us 116 wheats.\n\n    # Calculate the number of wheats on the longer side.\n    # One wheat at each corner means there are 116 - 2 = 114 wheats left to distribute \n    # between the longer side and the shorter side.\n    \n    # Let n be the number of intervals on the longer side, \n    # m be the number of intervals on the shorter side.\n    # We have (n + 1) + (m + 1) = 116 (wheats on the two longer sides and two shorter sides)\n    # which simplifies to n + m = 114\n    \n    # Since wheats are distributed evenly, the distance between two wheats is the side \n    # length divided by the number of intervals on that side.\n    \n    # We solve for n and m such that 144 / m = 204 / n, i.e., 144n = 204m\n    # which simplifies to 18n = 26m or m = (18/26) * n = (9/13) * n\n    \n    # Substituting m into n + m = 114, we get n + (9/13) * n = 114, which simplifies to\n    # (1 + 9/13) * n = 114, i.e., (22/13) * n = 114\n    \n    # Now we find n:\n    n = (114 * 13) // 22\n\n    # As m = (9/13) * n, we can find m:\n    m = (9 * n) // 13\n\n    # Now we can calculate the distance between two wheats on the longer side,\n    # which will be the same for both sides since the distribution is even.\n    distance = 204 // n\n\n    return distance\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    for rainy_days in range(9):\n        sunny_days = 8 - rainy_days\n        total_nuts = rainy_days * 12 + sunny_days * 20\n        if total_nuts == 112:\n            return rainy_days\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each round eliminates half of the participants.\n    # Therefore, with 4 people, 2 matches in the first round will reduce the players to 2. \n    # The final match between these 2 players will determine the winner.\n    # Hence, a total of 3 matches (rounds) are necessary.\n    \n    num_people = 4\n    rounds = 0\n    \n    while num_people > 1:\n        rounds += num_people // 2\n        num_people //= 2\n     \n    return rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n\n    only_one_question_correct = (first_question_correct + second_question_correct) - (2 * both_questions_correct)\n    \n    return only_one_question_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    return (end_date - start_date).days\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pence\n    price_1 = 15\n    price_2 = 28\n    price_5 = 60\n\n    # Bottle counts for 17 bottles\n    total_bottles = 17\n    min_cost = float('inf')  # Introduce a variable to hold the minimum cost \n    \n    # Calculate all possible combinations of packs\n    for pack_5 in range(total_bottles // 5 + 1):  # Number of 5-packs\n        for pack_2 in range((total_bottles - 5 * pack_5) // 2 + 1):  # Number of 2-packs\n            pack_1 = total_bottles - 5 * pack_5 - 2 * pack_2  # Remaining bottles as 1-packs\n            \n            # Calculating the total cost for the current combination\n            current_cost = pack_5 * price_5 + pack_2 * price_2 + pack_1 * price_1\n            \n            # Compare with the known minimum and update it if the current cost is lower\n            if current_cost < min_cost:\n                min_cost = current_cost\n\n    # Convert the minimum cost to pounds\n    min_cost_in_pounds = min_cost / 100\n    \n    return min_cost_in_pounds\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # Speed of the train in m/s\n    time = 5    # Time in seconds\n\n    # Distance = Speed * Time\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for i in range(6):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    expressions = set()\n\n    a, b, c, d = 285, 15, 5, 2\n    \n    # No brackets\n    expressions.add(a + b / c - d)\n\n    # Single pair of brackets\n    expressions.add((a + b) / c - d)\n    expressions.add(a + (b / c) - d)\n    expressions.add(a + b / (c - d))\n\n    # Two pairs of brackets\n    expressions.add((a + b) / (c - d))\n    expressions.add(((a + b) / c) - d)\n\n    return len(expressions)\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Rachel's candy as r and Alice's as a\n    r, a = symbols('r a')\n\n    # Create two equations based on the information given\n    equation1 = Eq(r - 10, a + 10)\n    equation2 = Eq((r - 8) / (a - 8), 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # Sum up the values of r and a to get total candies\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    # Total mushrooms gathered in two hour\n    equation1 = Eq(first_hour + second_hour, 40)\n    \n    # 26 more mushrooms in the first hour make it equal to the second hour\n    equation2 = Eq(first_hour + 26, second_hour)\n    \n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    for brushes in range(1, 10//3 + 1):\n        if (59 - brushes * 3) % 10 == 0:\n            return brushes\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * x + 8, 71)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    morty, rick = symbols('morty rick')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    # Let the number of teddy bears made on the first day be x.\n    # Then each subsequent day, she makes 2 more bears than the previous day.\n    # The number of bears made each day forms an arithmetic sequence: x, x+2, x+4, x+6, x+8\n    # The sum of this arithmetic sequence over 5 days should be equal to 35.\n    # Sum of an arithmetic sequence formula: sum = n/2 * (2a + (n-1)d)\n    # where n is the number of terms, a is the first term, and d is the common difference.\n    # In this case: n = 5, sum = 35, a = x, d = 2\n    # 35 = 5/2 * (2x + (5-1)*2)\n    # 35 = 5/2 * (2x + 8)\n    # 14 = 2x + 8\n    # 6 = 2x\n    # x = 3\n    \n    # If x is 3, then on the fifth day she made x + 8 teddy bears\n    fifth_day_bears = 3 + 8 * 4  # x + 4*2\n    \n    return fifth_day_bears\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    from itertools import permutations\n\n    # Create a list of numbers\n    numbers = ['0', '1', '8']\n    \n    # Generate all possible permutations of the numbers of length 3\n    perm = permutations(numbers, 3)\n    \n    # Filter out permutations that have '0' as the first element\n    valid_numbers = [int(''.join(p)) for p in perm if p[0] != '0']\n    \n    # Return the number of valid permutations\n    return len(valid_numbers)\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    # Number of pink, grey, and blue marbles\n    pink = 9\n    grey = 7\n    blue = 11\n    \n    # To be certain to draw at least one blue marble, draw all the pink and grey marbles first\n    draw_without_blue = pink + grey\n    \n    # Then draw one more marble to ensure it's blue\n    draw_to_get_blue = draw_without_blue + 1\n    \n    return draw_to_get_blue\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n    \n    price_of_computer = sales_tax_paid / sales_tax_rate\n    \n    return price_of_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        if all(gcd(perm[i], perm[i + 1]) == 1 for i in range(len(perm) - 1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    fraction_one = 6 / 7\n    fraction_two = 3 / 10\n\n    percentage = (fraction_two / fraction_one) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n\n    # Given conditions\n    equation1 = Eq(boys, girls - 30)\n    equation2 = Eq(boys - (3/5)*boys, girls - (5/8)*girls)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    # Let x be the number of dragonflies at the beginning\n    # Then x + 9 is the number of frogs at the beginning\n    # According to the problem, after the magic show, there are 11 frogs and 10 dragonflies\n    # No matter how the wizard switches them, the total number of animals remain constant\n    # Thus, the equation is set up as follows:\n    # (initial number of dragonflies) + (initial number of frogs) = 11 frogs + 10 dragonflies\n    \n    x = symbols('x')\n    initial_frogs = x + 9\n    animals_after_show = 11 + 10\n    equation = Eq(x + initial_frogs, animals_after_show)\n    initial_dragonflies = solve(equation, x)\n\n    # Since initial_frogs = initial_dragonflies + 9, we calculate initial_frogs\n    initial_frogs_count = initial_dragonflies[0] + 9\n    return initial_frogs_count\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n\n    # Let 's' be the number of apples Amy has to give to John\n    # After giving 's' apples, Amy will have (26 - s) apples,\n    # and John will have (8 + s) apples.\n    # They will have the same number of apples when 26 - s = 8 + s.\n\n    s = (amy_apples - john_apples) // 2\n    \n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(1, 25):\n        if (24 - i) / 4 == 4:\n            return i\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # define the expression as a function to allow for insertion of brackets\n    def evaluate_expression(a, b, c, d, e):\n        return eval(f\"{a}+{b}/{c}-{d}\")\n\n    results = set()\n    # inserting no brackets is the base case\n    results.add(evaluate_expression(285, 15, 5, 2, 0))  \n\n    # insert one pair of brackets in different positions\n    results.add(evaluate_expression(285, (15 / 5), 1, 2, 0))  # (15/5)\n    results.add(evaluate_expression((285 + 15), 1, 5, 2, 0))  # (285+15)\n    results.add(evaluate_expression(285, 15, 5, (2+0), 0))    # (2+0)\n\n    # insert two pairs of brackets in different positions\n    results.add(evaluate_expression((285 + 15), (1 / 5), 1, (2+0), 0))  # ((285+15)/5)-(2+0)\n\n    # total number of different results\n    return len(results)\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let the work rates of worker A, B, and C be a, b, and c respectively\n    a, b, c = symbols('a b c')\n\n    # Equations based on the given conditions about work rates of pairs:\n    # 1/a + 1/b is the combined work rate of A and B, which completes the job in 3 hours\n    # 1/b + 1/c is the combined work rate of B and C, which completes the job in 4 hours\n    # 1/a + 1/c is the combined work rate of A and C, which completes the job in 8 hours\n    eq1 = Eq(1/a + 1/b, 1/3)\n    eq2 = Eq(1/b + 1/c, 1/4)\n    eq3 = Eq(1/a + 1/c, 1/8)\n\n    # Solve the system of equations to find a, b, and c\n    solutions = solve((eq1, eq2, eq3), (a, b, c))\n    a_val, b_val, c_val = solutions[a], solutions[b], solutions[c]\n\n    # The combined work rate of all three workers A, B, and C working together\n    work_rate_all = a_val + b_val + c_val\n\n    # Time taken for all three workers to complete the job together is the reciprocal of their combined work rate\n    time_together = 1 / work_rate_all\n\n    return time_together\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation for the sugar content from the two mixtures\n    # 45% of 2kg sugar solution + 15% of x kg sugar solution = 25% of (2kg + x kg) mixture\n    equation = Eq(0.45 * 2 + 0.15 * x, 0.25 * (2 + x))\n\n    # Solve the equation for x\n    x_solution = solve(equation, x)\n\n    return x_solution[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    # If Johnson gives Vicky 8 coins\n    johnson_gives = johnson - 8\n    vicky_receives = vicky + 8\n\n    # Vicky will still have 2 fewer coins than Johnson\n    equation1 = Eq(vicky_receives, johnson_gives - 2)\n\n    # Together they have 48 coins\n    equation2 = Eq(johnson + vicky, 48)\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let kids be the number of kids and candies be the number of candies\n    kids, candies = symbols('kids candies')\n\n    # If every kid eats 18 candies, then 12 more candies are needed\n    equation1 = Eq(kids * 18, candies + 12)\n\n    # If every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids\n    equation2 = Eq((kids + 2) * 15, candies)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (kids, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3/2\n    girls = (boys / 3) * 2\n    return int(girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(S)[-5:]\n    ans = sum(int(digit) for digit in last_five_digits)\n    return ans\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = (77 - 6) / 7\n    return result\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of cookies Sam and Tim initially had\n    sam, tim = symbols('sam tim')\n\n    # Equation 1: Sam and Tim had 1170 cookies\n    equation1 = Eq(sam + tim, 1170)\n\n    # Equation 2: After eating 1/4 of her cookies, Sam had sam - sam/4 cookies\n    # After buying 1/5 more cookies, Tim had tim + tim/5 cookies\n    # Sam had 663 fewer cookies than Tim\n    equation2 = Eq(sam - sam/4, tim + tim/5 - 663)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    # The number of cookies Sam ate is 1/4 of her initial amount\n    cookies_eaten = solutions[sam] / 4\n\n    return cookies_eaten\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    return 297 + 196 + 388 + 199\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    cost_per_kilogram = 11.4 / 0.6\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick = 24 / 6\n    total_pick = daily_pick * 8\n    return total_pick\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for number in range(200, 301):\n        if all(number % x == 1 for x in [2, 3, 4, 6]) and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let x be the number of stamps Sally gave to Ting.\n    # Then the new number of stamps Sally has, s_new = 40 - x.\n    # The new number of stamps Ting has, t_new = 32 + x.\n    # According to the problem, the ratio of Sally's to Ting's stamps is 1:2.\n    # So, s_new / t_new = 1 / 2.\n    \n    # s_new = 40 - x\n    # t_new = 32 + x\n    # s_new / t_new = 1 / 2\n    # (40 - x) / (32 + x) = 1 / 2\n    \n    # Solving for x gives:\n    # 2*(40-x) = 1*(32+x)\n    # 80 - 2*x = 32 + x\n    # 80 - 32 = 2*x + x\n    # 48 = 3*x\n    # x = 48 / 3\n    # x = 16\n    \n    x = 48 // 3\n    # Now we find t_new:\n    t_new = 32 + x\n    \n    return t_new\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_time = 18\n    together_time = 6\n    tom_rate = 1 / together_time - 1 / jerry_time\n    tom_time = 1 / tom_rate\n\n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let t be the time (in minutes) David walks at the increased speed\n    t = symbols('t')\n    # For 10 minutes, David walks at 150 meters per minute\n    distance_initial = 10 * 150\n    # Then David walks at (150 + 50) meters per minute for t minutes\n    distance_increased = (150 + 50) * t\n    # Total distance walked\n    total_distance = Eq(distance_initial + distance_increased, 3700)\n    # Solve for t\n    time_increased_speed = solve(total_distance, t)[0]\n    # Total time spent walking is the sum of time at initial speed and increased speed\n    total_time = 10 + time_increased_speed\n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # Price of each packet\n    packet_price = 4\n    # Number of sweets in each packet\n    sweets_per_packet = 8\n    # Total amount of money to spend\n    total_money = 20\n    # Number of packets that can be bought\n    packets_bought = total_money // packet_price\n    # Number of free sweets for every two packets bought\n    free_sweets = packets_bought // 2\n    # Total number of sweets obtained\n    total_sweets = (packets_bought * sweets_per_packet) + free_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # The least amount of candies the child with the most pieces can get\n    # if 88 candies are distributed to 8 children in different amounts\n    # can be found by first giving each child at least one piece (which uses 8 candies),\n    # then distributing the remaining candies in such a way that each child gets one more candy than the previous.\n    # The distribution will be in an increasing arithmetic sequence.\n    \n    # Start by giving each child one candy\n    total_candies = 88 - 8  # Subtract the minimum candies given to each child\n    \n    # Now we add candies to children in an increasing sequence\n    n = 7  # We consider only 7 children for sequence because the 8th will get the most\n    min_most_candies = 1  # Start with the minimum allocation for the child with the most\n    \n    # Keep allocating candies to the sequence until we don't have enough left for a full sequence\n    # Each step in the sequence increases by 1 from the previous term\n    while total_candies >= (n * (n + 1)) // 2:  # Summation of first 'n' natural numbers\n        min_most_candies += 1\n        total_candies -= (n * (n + 1)) // 2\n        n -= 1\n    \n    # Add the remaining candies to the child with the most\n    min_most_candies += total_candies\n    \n    return min_most_candies\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initial number of pink counters\n    pink = 5\n    # Total number of counters initially\n    total_counters = 5 + 7 + 8\n\n    # The probability of choosing a pink counter\n    initial_probability = pink / total_counters\n\n    # New probability which is double the initial probability\n    desired_probability = 2 * initial_probability\n\n    # Let x be the number of extra pink counters to add\n    # Setting up the equation: (pink + x) / (total_counters + x) = 2 * (pink / total_counters)\n    # Solve for x\n\n    # The equation simplifies to:\n    # pink + x = 2 * pink + (2 / total_counters) * x\n    # x - (2 / total_counters) * x = pink\n    # x * (1 - (2 / total_counters)) = pink\n\n    # Final step to find x\n    x = pink / (1 - (2 / total_counters))\n\n    # Round x to the nearest whole number since we can't add a fraction of a counter\n    ans = round(x)\n\n    return ans\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - 1/4\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, 1.4 * girls)\n    equation2 = Eq(boys - 24, 1.5 * (girls - 24))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    num_zeros = 0\n    factorial = 16\n    divisor = 5\n    while factorial >= divisor:\n        num_zeros += factorial // divisor\n        divisor *= 5\n\n    return num_zeros\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # She needs to take out at least 2 pairs of socks of the same color.\n    # In the worst case, she picks socks in such a way that no two are of the same color.\n    \n    # She can take one of each color: 1 black, 1 grey, 1 red (total 3 socks)\n    # Now whatever color of sock she takes, she will have a pair of that color (total 4)\n    # She can repeat the same process for the next color: take one of each remaining socks (total 7)\n    # Now the next sock ensures she has at least 2 pairs of the same color (total 8)\n    \n    num_socks_needed = 8\n\n    return num_socks_needed\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    equation1 = Eq(cupcakes, muffins)\n    equation2 = Eq(muffins - 12, 2 * (cupcakes - 60))\n\n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n\n    return solutions[cupcakes] + solutions[muffins]\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the pocket money Helen and George receive each day\n    helen, george = symbols('helen george')\n\n    # Create equations from the problem statement\n    equation1 = Eq(george, helen + 3)\n    equation2 = Eq(helen - 5, 60 / (george - helen - 90))\n    equation3 = Eq(george - 5, (george - helen - 90) + 60 / (george - helen - 90))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (helen, george))\n\n    # Find the solution where Helen's pocket money is a positive value\n    helen_pocket_money = next(sol[helen] for sol in solutions if sol[helen] > 0)\n\n    return helen_pocket_money\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_la = 12.25\n    la_to_shanghai = shanghai_to_la + 90 / 60\n    round_trip_time = shanghai_to_la + la_to_shanghai\n    return round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eddi, wiya = symbols('eddi wiya')\n    initial_ratio = Eq(eddi/wiya, 3/2)\n    new_ratio = Eq((eddi + 4)/wiya, 8/5)\n    \n    solutions = solve((initial_ratio, new_ratio), (eddi, wiya))\n    \n    return solutions[wiya]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    sum_to_30 = sum(range(1, 31))\n    sum_to_29 = sum(range(1, 30))\n    return sum_to_30 + sum_to_29\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes_students = (sport_class_students + reading_class_students) - total_students\n    \n    return both_classes_students\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Calculate the distance driven in the first 2 hours.\n    distance_first_part = 2 * 40  # Distance = Speed * Time\n\n    # The distance for the remaining part of the trip is given as 280 km.\n    distance_second_part = 280\n\n    # Calculate the time taken to drive the remaining 280 km at 70 km/h.\n    time_second_part = distance_second_part / 70  # Time = Distance / Speed\n\n    # Calculate the total distance driven.\n    total_distance = distance_first_part + distance_second_part\n\n    # Calculate the total time taken for the trip.\n    total_time = 2 + time_second_part  # 2 hours for the first part and the time for the second part\n\n    # Calculate the average speed for the whole trip.\n    average_speed = total_distance / total_time  # Average Speed = Total Distance / Total Time\n\n    return average_speed\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    # a is the first term, d is the common difference\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a + (n-1)*d\n    # 9th term is a + 8*d\n    # 15th term is a + 14*d\n    # 20th term is a + 19*d\n    # 12th term is a + 11*d\n\n    # Given that 9th term is 18 larger than the 15th term\n    equation1 = Eq(a + 8*d, a + 14*d + 18)\n\n    # Given that sum of the 20th term and the 12th term is 88\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Now that we have a and d, find the 32nd term\n    a32 = solutions[a] + 31*solutions[d]\n\n    return a32\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    count = 0\n    \n    # Count numbers with exactly two sevens\n    for i in range(1, 10):\n        if i != 7:\n            # Two sevens could be in hundreds and tens place\n            count += 1\n            # In hundreds and ones\n            count += 1\n            # In tens and ones\n            count += 1\n    \n    # Count numbers with three sevens\n    count += 1  # 777 is the only number with three sevens\n    \n    return count\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    num_three_page = 0\n\n    for i in range(total_penpals + 1):\n        num_four_page = total_penpals - i\n        if (3 * i + 4 * num_four_page) == total_pages:\n            num_three_page = i\n            break\n\n    return num_three_page\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    digit_str = str(number)\n    place_value = 10 ** (len(digit_str) - digit_str.index('8') - 1)\n    return place_value\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n    \n    packet_25 = 25\n    packet_20 = 20\n    \n    days_to_new_packets = lcm(packet_25, packet_20)\n    \n    day = 1\n    month = 3  # March\n    year = 2023  # assuming current year\n    \n    # Assuming no leap year\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    while days_to_new_packets > 0:\n        days_this_month = days_in_month[month - 1]\n        if day + days_to_new_packets <= days_this_month:\n            day += days_to_new_packets\n            break\n        else:\n            days_to_new_packets -= days_this_month - day + 1\n            day = 1\n            month += 1\n            if month > 12:\n                month = 1\n                year += 1\n    \n    return (day, month, year)\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of different ways to arrange 4 dancing performances with spaces between them\n    # There will be 5 spaces (including ends) where we can put 6 singing performances with at least\n    # 1 singing performance between every 2 dancing performances. Thus, we treat each space as a \"bin\"\n    # where singing can be placed. We need to distribute singing performances to the 5 bins with each bin\n    # getting at least one singing performance, and then order them.\n    \n    # Calculate the ways to distribute 6 singing performances into 5 non-empty bins (stars and bars approach)\n    # We have to distribute (6 - 5) stars amongst 5 bars where each bin has at least 1 star (singing performance)\n    num_ways_to_distribute_singing = factorial(6 - 1) // (factorial(5 - 1) * factorial(6 - 5))\n\n    # Calculate permutations of dance performances (4! ways to arrange the dances themselves)\n    num_ways_to_arrange_dancing = factorial(4)\n    \n    # The product of the two gives total arrangements satisfying the condition\n    total_arrangements = num_ways_to_distribute_singing * num_ways_to_arrange_dancing\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from fractions import Fraction\n\ndef solution():\n    # Initial sum A = 1\n    A = Fraction(1, 1)\n    # Apply the operation delta and solve for each a_i\n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n    \n    # Calculate a0 using the given formula\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # Convert to simplest form\n    a0_simplified = a0.limit_denominator()\n    \n    # Get numerator (m) and denominator (n)\n    m = a0_simplified.numerator\n    n = a0_simplified.denominator\n\n    # Return the value of m + n\n    return m + n\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number be 'n'\n    n = symbols('n')\n\n    # Mistaken calculation: (n / 4) - 25 = 2021\n    mistaken_eq = Eq((n / 4) - 25, 2021)\n\n    # Solve for 'n' using the mistaken calculation\n    mistaken_solution = solve(mistaken_eq, n)\n\n    # Retrieve the value of 'n' from the solution\n    n_value = mistaken_solution[0]\n\n    # Correct calculation: (n * 4) + 25\n    correct_ans = (n_value * 4) + 25\n\n    return correct_ans\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from math import factorial\n\n    # Prime factorization of the given numbers\n    # 75 = 3 * 5^2\n    # 56 = 2^3 * 7\n    # 12 = 2^2 * 3\n    # 105 = 3 * 5 * 7\n\n    # Count the number of 2s and 5s in the prime factorizations\n    num_twos = (3 + 2)  # 3 from 56 and 2 from 12\n    num_fives = (2 + 1)  # 2 from 75 and 1 from 105\n\n    # The number of zeros at the end of the product is the minimum of the number of 2s and 5s\n    zeros = min(num_twos, num_fives)\n\n    return zeros\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let the number of books Donna has be d\n    # Then Chloe has 4 times more books than Donna\n    \n    # Form the equation based on the problem statement\n    # Chloe's books - Donna's books = 816\n    # 4d - d = 816\n    # Simplify the equation to find d\n    d = 816 / 3\n    \n    return int(d)\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # Based on the information given:\n    # 8765: Two correct digits, wrong positions\n    # 1023: Two correct digits, wrong positions\n    # 8642: Two correct digits, right positions\n    # 5430: No correct digit\n    \n    # Candidates for each digit position based on elimination from the fourth guess\n    candidates = [\n        [1, 2, 6, 7, 8, 9], # 5 and 4 are not possible for the first digit\n        [1, 2, 6, 7, 8, 9], # 5, 4, 3 are not possible for the second digit\n        [1, 2, 6, 7, 8, 9], # 5, 4, 3, 0 are not possible for the third digit\n        [1, 2, 6, 7, 8, 9]  # 5, 4, 3, 0 are not possible for the fourth digit\n    ]\n    \n    # Determining the possible digits based on the guesses\n    # 8642: Digits 6 and 4 are correct and in the right position\n    candidates[1] = [6]   # 6 is correct\n    candidates[3] = [2]   # 2 is correct\n\n    # 8765 and 1023: 8 and 0 cannot be in the first and third positions\n    # They must be in either the second or fourth positions.\n    # However, since position 2 is already occupied by the confirmed digit 6,\n    # 8 cannot be in the second position, leaving only the fourth position for 8.\n    candidates[0].remove(8) # 8 is not in the first position\n    candidates[2].remove(8) # 8 is not in the third position\n    candidates[3] = [8]    # 8 is confirmed in the fourth position\n\n    # digit 0 must be in the first position now, as positions 2 and 4 are taken and it cannot be in position 3.\n    candidates[0] = [0]    # 0 is in the first position\n\n    # We have confirmed all positions except for the third one\n    # 1023 includes a 0 (which is confirmed in the first position) and 2 (which is confirmed in the fourth position),\n    # so the remaining digit that must occupy the third position (since 5, 4, 3 are not possible) is 1.\n    candidates[2] = [1]    # 1 is now confirmed for the third position\n    \n    # The number is formed by combining the remaining candidates in each position\n    ans = int(''.join(str(candidates[i][0]) for i in range(4)))\n    return ans\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    # Linear Equation (equation in the form ax + b = c format)\n    # from the given equation: (~~~~~+4)/8 = 3\n    # Simplifying the equation step by step\n    # Step 1: Multiply both sides by 8 to get rid of the division\n    # Step 2: Subtract 4 from both sides to isolate the ~~~~~ (variable)\n    \n    result = (3 * 8) - 4  # Applying Step 1 and Step 2\n    return result\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, adults, boys, girls = symbols('children adults boys girls')\n\n    equation1 = Eq(adults, 3 * children)\n    equation2 = Eq(boys, 2 * girls)\n    equation3 = Eq(adults - girls, 176)\n    equation4 = Eq(children, boys + girls)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (adults, boys, girls, children))\n\n    total_people = solutions[children] + solutions[adults]\n\n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # Calculate the ones digit of 999^99 using the pattern in the powers of 9.\n    # The pattern repeats every 10th power (1, 9, 81, 729 ... the ones digit cycles through 1->9->1...)\n    # We only need the ones digit of 9^99\n    # 9^1 has a ones digit of 9\n    # 9^2 has a ones digit of 1\n    # as 99 is an odd number, 9^99 would also end in 9\n    ones_digit = 9 \n    return ones_digit\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 193 // 3 + 1):  # Start from the smallest prime number 2\n        if isprime(a):\n            # since 3a must be prime, solve for b\n            b = (193 - 3 * a) / 11\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be a non-zero digit\n        for b in range(10):  # 'b' can be any digit including zero\n            ab = 10 * a + b\n            a0b = 100 * a + b\n            if ab * 7 == a0b:\n                return ab\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Alison's pencils when divided by 4 leaves a remainder of 1: x ≡ 1 (mod 4)\n    # Alison's pencils when divided by 5 leaves a remainder of 2: x ≡ 2 (mod 5)\n    # Alison's pencils when divided by 7 leaves a remainder of 4: x ≡ 4 (mod 7)\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    banana, apple = symbols('banana apple')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    # Calculate the cost for 1 banana and 1 apple\n    cost = solutions[banana] + solutions[apple]\n    \n    return cost\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    # Given data\n    workers_given = 3\n    houses_built_given = 14\n    days_given = 4\n    \n    # New data\n    workers_needed = 9\n    days_needed = 2\n    \n    # Find the number of houses 1 worker can build in 1 day\n    houses_per_worker_per_day = (houses_built_given / workers_given) / days_given\n    \n    # Calculate the number of houses 9 workers can build in 2 days\n    houses_built_needed = houses_per_worker_per_day * workers_needed * days_needed\n    \n    return int(houses_built_needed)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    gcf = gcd(12, gcd(15, 60))  # Find GCD of the three numbers\n    return gcf\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    min_product = None\n    for bob_age in range(1, 28):\n        for rex_age in range(1, 28):\n            for fido_age in range(1, 28):\n                if (bob_age != rex_age != fido_age != bob_age and\n                    fido_age == bob_age - 10 and\n                    bob_age + rex_age + fido_age == 28):\n                    product = bob_age * rex_age * fido_age\n                    if min_product is None or product < min_product:\n                        min_product = product\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total = symbols('total')\n    children = 2/5 * total\n    women = 1/4 * total\n    men = total - children - women\n    equation = Eq(children, men + 20)\n    \n    total_people = solve(equation.subs(children, 2/5 * total).subs(women, 1/4 * total).subs(men, total - 2/5 * total - 1/4 * total), total)\n\n    return total_people[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the unknowns\n    total_money, price_per_ball = symbols('total_money price_per_ball')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(total_money - 5*price_per_ball, 15)\n    equation2 = Eq(total_money - 8*price_per_ball, -12)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_money, price_per_ball))\n    \n    # Extract the price of one ball\n    return solutions[price_per_ball]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    for i in range(100, 1000):\n        for j in range(i, 1000):  # start from i to avoid duplicate pairs\n            if i != j and set(str(i)) & set(str(j)) and len(set(str(i))) < 3:\n                if len(set(str(j))) < 3:\n                    if (i % 75 == 0) and (j % 75 == 0):\n                        max_sum = max(max_sum, i + j)\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    initial_height = height_after_second_bounce * (3 ** 2)\n\n    return initial_height\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Calculate the value of the complex fraction\n    ans = (1/30 + 1/6) / (2/25) + (2 - 2/3) / (8/3)\n    # return the final result\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n    \n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let L be the work Lee does per hour\n    # Let N be the work Nancy does per hour\n    L, N = symbols('L N')\n\n    # Equation 1: Together they finish the job in 10 hours\n    eq1 = Eq(L + N, 1/10)\n\n    # Equation 2: Lee types for 6 hours and Nancy types for 20 hours to finish the job\n    eq2 = Eq(6*L + 20*N, 1)\n\n    # Solve the simultaneous equations for L and N\n    solutions = solve((eq1, eq2), (L, N))\n\n    # Nancy's rate is N, to find the time for Nancy to do 1 job, we take the reciprocal of N\n    nancy_time_to_finish = 1 / solutions[N]\n\n    return nancy_time_to_finish\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    # total number of students in A and B\n    total_students = 40 + 30\n\n    # total number of marks scored by students in both classes\n    total_marks = total_students * 90\n\n    # Let the average score of Class A be 'a'\n    # Therefore, the average score of Class B will be 'a + 7'\n    # Number of marks for class A will be 40 * a\n    # Number of marks for class B will be 30 * (a + 7)\n\n    # Total marks is sum of marks of A and B\n    # 40a + 30(a + 7) = total_marks\n    # 40a + 30a + 210 = total_marks\n    # 70a + 210 = total_marks\n    # 70a = total_marks - 210\n    # a = (total_marks - 210) / 70\n\n    average_class_A = (total_marks - 210) / 70\n\n    # Add 7 to Class A's average to get Class B's average\n    average_class_B = average_class_A + 7\n\n    return average_class_B\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Denominators of the complex fraction components\n    d1 = 2007 * 2008\n    d2 = 2008 * 2009\n    d3 = 2009\n\n    # The least common multiple (LCM) of the denominators\n    lcm = d1 * d3\n\n    # Express each fraction with the common denominator (LCM)\n    # Simplify by dividing out the common factors in each term's denominator\n    numerator = (lcm // d1) + (lcm // d2) + (lcm // d3)\n\n    # The value of the complex fraction is the LCM divided by the sum of the numerators\n    ans = lcm / numerator\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    count = 0\n    for ten_pences in range(6):  # Jeremy can use from 0 to 5 ten-pence coins\n        for twenty_pences in range(4):  # Jeremy can use from 0 to 3 twenty-pence coins\n            for fifty_pences in range(2):  # Jeremy can use 0 or 1 fifty-pence coin\n                total = ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50\n                if total == 70:  # Check if the total amount is exactly 70 pence\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define congruences based on the problem statement\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    # Solve the congruences using the Chinese Remainder Theorem\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    if students % boat_capacity == 0:\n        ans = students // boat_capacity\n    else:\n        ans = (students // boat_capacity) + 1\n    return ans\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    a = 250250\n    b = 250249\n    c = 250251\n\n    ans = (a**2) - (b * c)\n\n    return ans\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    aaron, becky, chris = symbols('aaron becky chris')\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n    people_in_front_of_mark = total_people - people_behind_mark - 1  # Subtract 1 for Mark himself\n    \n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    ans = 0\n    for i in range(1, 201):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int('9{}8{}'.format(a, a))\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # A number is divisible by 4 if its last two digits form a number that is divisible by 4\n    for J in range(10):\n        number = int(f\"125{J}6\")\n        if number % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of an apple and a peach\n    cost_apple, cost_peach = symbols('cost_apple cost_peach')\n    \n    # Equation representing the cost of 4 apples and 3 peaches\n    equation1 = Eq(4 * cost_apple + 3 * cost_peach, 10)\n    # Equation representing the cost of 4 apples and 6 peaches\n    equation2 = Eq(4 * cost_apple + 6 * cost_peach, 16)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_apple, cost_peach))\n    \n    return solutions[cost_peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    final_number = 66\n    original_number = (final_number / 6) - 7\n    return original_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*9 - 2*x, 33)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    sum_of_squares = lambda n: n * (n + 1) * (2 * n + 1) // 6\n    sum_of_cubes = lambda n: (n * (n + 1) // 2) ** 2\n\n    total = 0\n    for i in range(0, 24):\n        total += i * (i + 1) ** 2\n    \n    ans = total\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    return 36 + 17 + 18 + 24 + 33\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    ans = 476 // 17\n    return ans\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time = 360  # total time spent in minutes\n    ratio_up = 5\n    ratio_down = 4\n    ratio_total = ratio_up + ratio_down\n\n    # Calculate the time spent going up and down\n    time_up = (ratio_up / ratio_total) * total_time\n    time_down = (ratio_down / ratio_total) * total_time\n\n    # Let the speed going down be x m/min, then speed going up is (x - 10) m/min\n    # We can set up the equation based on distance = speed * time for both up and down\n    # Since the distances up and down are the same, we have\n    # (x - 10) * time_up = x * time_down\n    # Solving for x gives us the speed going down\n    x = (10 * time_up) / (time_down - time_up)\n\n    # Calculate the speed going up\n    speed_up = x - 10\n\n    # Calculate total distance\n    distance_up = speed_up * time_up\n    distance_down = x * time_down\n\n    # Since the distance up and distance down should be the same, we can take either\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    # Find the least common multiple of 25 (packets of one type) and 20 (packets of the other type)\n    days_until_new_packets = lcm(25, 20)\n\n    # Since she starts new packets on the 1st of March, we need to add the LCM to this date\n    # 1st March is the day 0, so we need to subtract 1 day to get the correct date\n    date_to_start_new_packets = days_until_new_packets - 1\n    \n    # Calculate how many days are in each month (assuming non-leap year)\n    days_in_february = 28\n    days_in_march = 31\n    total_days_until_april = days_in_march + days_in_february\n\n    # If the start date goes past March, subtract the number of days until April to get the date in April\n    if date_to_start_new_packets > total_days_until_april:\n        day = date_to_start_new_packets - total_days_until_april\n        month = 'April'\n    else:\n        day = date_to_start_new_packets\n        month = 'March'\n\n    # Form the date string. The year isn't relevant for the answer,\n    # so we return just the day and month\n    next_start_date = \"{} {}\".format(day, month)\n    \n    return next_start_date\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    used_per_day_watermelons = 9\n    used_per_day_pineapples = 9\n    \n    for days in range(1, min(watermelons, pineapples) + 1):\n        remaining_watermelons = watermelons - days * used_per_day_watermelons\n        remaining_pineapples = pineapples - days * used_per_day_pineapples\n        \n        if remaining_pineapples == 3 * remaining_watermelons:\n            return days\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_by_each = num_friends - 1\n    total_cards = num_friends * cards_sent_by_each\n    \n    return total_cards\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    first_bus_time = (9 * 60) + 15  # convert 9:15 to minutes\n    arrival_time = (9 * 60) + 22    # convert 9:22 to minutes\n    if arrival_time <= first_bus_time:\n        # If Aiden arrives before the first bus, he just waits for it\n        wait_time = first_bus_time - arrival_time\n    else:\n        # Calculate time since last bus departed\n        time_since_last_bus = arrival_time - first_bus_time\n        # Calculate time till next bus\n        wait_time = 35 - (time_since_last_bus % 35)\n    \n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_week = 7\n    weeks_until_birthday = days_until_birthday // days_in_week\n\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define Tom's current age as a symbol\n    tom = symbols('tom')\n\n    # The first equation represents Tom's age in 4 years being twice the current age\n    equation1 = Eq(tom + 4, 2 * tom)\n\n    # Solve for Tom's current age\n    tom_age = solve(equation1, tom)[0]\n\n    # We know the sum of Tom's and Jerry's age three years ago was 10\n    # This translates to: (Tom's age - 3) + (Jerry's age - 3) = 10\n    # We know Tom's age, so we can solve for Jerry's age\n    jerry = symbols('jerry')\n\n    # The second equation represents the sum of Tom and Jerry's age three years ago\n    equation2 = Eq((tom_age - 3) + (jerry - 3), 10)\n\n    # Solve for Jerry's current age\n    jerry_age = solve(equation2, jerry)[0]\n\n    # Now we need to find out in how many years Jerry's age will be doubled\n    years = symbols('years')\n\n    # The equation representing Jerry's age doubled in some years from now\n    equation3 = Eq(jerry_age + years, 2 * jerry_age)\n\n    # Solve for the years\n    years_to_double_jerry = solve(equation3, years)[0]\n\n    return years_to_double_jerry\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # Eddie's speed in metres per minute\n    brother_speed = 70  # Brother's speed in metres per minute\n    time_to_meet = 5  # Time in minutes when they meet\n    \n    # Total distance covered by both Eddie and his brother when they meet\n    total_distance = (eddie_speed + brother_speed) * time_to_meet\n    \n    # Distance from house to mall is the distance covered by Eddie\n    distance_to_mall = eddie_speed * time_to_meet\n    \n    return distance_to_mall\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import isprime\n\ndef solution():\n    # Starting ages and year\n    current_year = 2017\n    my_age = 7\n    brother_age = 5\n    mother_age = 29\n    father_age = 31\n    \n    # Search for the next year when all family members are prime ages\n    while True:\n        # Increment the year and each person's age\n        current_year += 1\n        my_age += 1\n        brother_age += 1\n        mother_age += 1\n        father_age += 1\n        \n        # Check if all ages are prime\n        if all(isprime(age) for age in [my_age, brother_age, mother_age, father_age]):\n            return father_age\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n    difference = fruits_per_truck - fruits_per_car\n    return difference\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((-1 if i % 2 == 0 else 1) * (i ** 2) for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n\n    # Number of gaps between lamp posts is total_flowers divided by flowers_between_lamps\n    num_gaps = total_flowers // flowers_between_lamps\n\n    # The total length of the road is 50m, so the distance between each lamp post is total road length divided by the number of gaps\n    road_length = 50\n    distance_between_lamps = road_length / (num_gaps + 1)\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n = 7\n    ans = 1 + n * (n + 1) // 2 + (n * (n - 1) * (n - 2)) // 6\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_each_friend = 15\n    number_of_friends = 8\n\n    books_given_away = books_given_each_friend * number_of_friends\n    books_remaining = total_books - books_given_away\n\n    return books_remaining\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    pattern = [base_unit_digit]\n    \n    # Generate pattern of unit digits for powers of 4\n    for _ in range(3):\n        next_unit_digit = (pattern[-1] * base_unit_digit) % 10\n        pattern.append(next_unit_digit)\n    \n    # Since the pattern repeats every 4 iterations, find the position in the pattern for 44^2008\n    pos_in_pattern = 2008 % len(pattern)  # We subtract 1 because lists are 0-indexed\n    unit_digit = pattern[pos_in_pattern - 1] if pos_in_pattern != 0 else pattern[-1]\n    \n    return unit_digit\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = 90009\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n\n    males = total_adults * fraction_male\n    return int(males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Paths from home to audio shop, book shop and chapel\n    paths_home_audio = 6\n    paths_home_book = 4\n    paths_home_chapel = 5\n\n    # Paths from audio shop, book shop and chapel to school\n    paths_audio_school = 2\n    paths_book_school = 2\n    paths_chapel_school = 3\n\n    # Total paths from home to school\n    total_paths = (paths_home_audio * paths_audio_school +\n                   paths_home_book * paths_book_school +\n                   paths_home_chapel * paths_chapel_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Combine equations:\n    # Adam + Ben = 102 kg\n    # Ben + Carl = 97 kg\n    # Adam + Carl = 93 kg\n    \n    # Adding all the equations, we get:\n    # 2 * (Adam + Ben + Carl) = 102 + 97 + 93\n    \n    total_combined_weight = 102 + 97 + 93\n    total_weight = total_combined_weight / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    arrival_hour = 12\n    arrival_minute = 40\n    stay_duration_hours = 2\n    stay_duration_minutes = 40\n\n    departure_hour = arrival_hour + stay_duration_hours\n    departure_minute = arrival_minute + stay_duration_minutes\n\n    if departure_minute >= 60:\n        departure_hour += departure_minute // 60  # Increment hours if minutes are more than 60\n        departure_minute = departure_minute % 60  # Keep the remainder of minutes after hour increment\n\n    # Adjust for 24 hour time format if needed\n    if departure_hour >= 24:\n        departure_hour -= 24\n\n    ans = (departure_hour, departure_minute)\n    return ans\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins / 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = (one_pound_coins * 1) + (fifty_pence_coins * 0.50) + (twenty_pence_coins * 0.20)\n\n    return total_value\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    total_money = 705\n    price_calculator = 34\n    price_racket = 63\n\n    equation1 = Eq(benson + clive, total_money)\n    equation2 = Eq(benson - price_calculator, clive - price_racket)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belle_sticks = 49\n    belle_sticks += 11  # After Eddie gave her 11 sticks\n    eddie_sticks = symbols('eddie_sticks')\n\n    # Equation: Belle's sticks after receiving 11 = Eddie's original amount of sticks\n    equation = Eq(belle_sticks, eddie_sticks)\n\n    eddie_original = solve(equation, (eddie_sticks))\n    \n    return eddie_original[0]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    number_of_lamps = 50\n    distance_between_lamps = 2  # in meters\n    road_length = (number_of_lamps - 1) * distance_between_lamps  # Total length of the road\n    return road_length\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temperature = -7\n    difference = 12\n    exeter_temperature = glasgow_temperature + difference\n    return exeter_temperature\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5 / 11) + (2 / 27)) * 11 + (5 / 27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n    \n    solutions = solve((equation1, equation2), (chelsia, brian))\n    \n    total_money = solutions[chelsia] + solutions[brian]\n    \n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    num_boxes = 6\n    total_weight = weight_per_box * num_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    for john_coins in range(1, 25):\n        kofi_coins = 25 - john_coins\n        if (kofi_coins + 4) == (john_coins - 4) - 3:\n            return john_coins\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    equal_volume = total_tea // 2\n    tea_to_give = equal_volume - 179\n\n    return tea_to_give\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n    \n    digits = '246'\n    perm = permutations(digits)\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of normal and special rabbits\n    normal, special = symbols('normal special')\n    \n    # Equations based on the problem statement\n    # normal rabbits have 1 head and special rabbits have 3 heads\n    equation_heads = Eq(normal + 3 * special, 53)\n    # normal rabbits have 4 feet and special rabbits have 2 feet\n    equation_feet = Eq(4 * normal + 2 * special, 102)\n    \n    # Solve the system of equations\n    solutions = solve((equation_heads, equation_feet), (normal, special))\n    \n    # Total number of rabbits is the sum of normal and special rabbits\n    total_rabbits = solutions[normal] + solutions[special]\n    \n    return total_rabbits\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    cost_for_13_bananas = cost_per_banana * 13\n    change_from_10_pounds = (10 * 100) - cost_for_13_bananas\n    return change_from_10_pounds\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return -16 - 18 - 2\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # The decimal representation of 1/70 is a repeating decimal that repeats every 6 digits\n    repeat_sequence = \"014285\"\n    \n    # The 500th digit after the decimal point will be the remainder of 500 divided by 6,\n    # because the sequence repeats every 6 digits.\n    index = (500 - 1) % len(repeat_sequence)\n    \n    # The -1 is because we start counting the digits from 0.\n    return int(repeat_sequence[index])\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_left = 4\n    neelesh_ate = 1\n    neelesh_initial = neelesh_left + neelesh_ate\n    ayesha_total = neelesh_initial * 6\n    ayesha_left = ayesha_total - neelesh_initial\n    return ayesha_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the weight of one copper ball and one iron ball\n    weight_copper, weight_iron = symbols('weight_copper weight_iron')\n\n    # Equation 1: 8 copper balls + 9 iron balls = 135 kg\n    equation1 = Eq(8 * weight_copper + 9 * weight_iron, 135)\n\n    # Equation 2: 6 copper balls + 3 iron balls = 75 kg\n    equation2 = Eq(6 * weight_copper + 3 * weight_iron, 75)\n\n    # Solving the equations to find the weights of one copper ball and one iron ball\n    solutions = solve((equation1, equation2), (weight_copper, weight_iron))\n\n    # Return the weight of one copper ball\n    return solutions[weight_copper]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / (1 / 3)\n    ans = Fraction(result).limit_denominator()\n    return ans\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    # Calculate the numerator sum\n    numerator_sum = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    \n    # Calculate the denominator sum\n    denominator_sum = sum(1/((11+i)*(20-i)) for i in range(10))\n    \n    # Calculate the final result\n    result = numerator_sum / denominator_sum\n\n    return result\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g and l represent the original number of gummy bears and lollipops\n    g, l = symbols('g l')\n\n    # Set up the initial ratio equation\n    ratio_original = Eq(g/l, 5/7)\n\n    # Set up the new ratio equation after adding 120 pieces to each pile\n    ratio_new = Eq((g + 120)/(l + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((ratio_original, ratio_new), (g, l))\n\n    # Calculate the total number of pieces of candy now\n    total = solutions[g] + 120 + solutions[l] + 120\n\n    return total\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if gcd(a, b) == 1 and a < b:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    return 4.5 / 5\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    box_a = 80\n    box_c = symbols('box_c')\n\n    # Equation based on the problem statement\n    equation = Eq(box_a + 2 * box_c + box_c, 560)\n\n    # Solve the equation\n    sol = solve(equation, box_c)\n\n    # Get the value of box_c\n    return sol[0]\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    stone_to_pounds = 14\n\n    david_weight_pounds = david_weight_stone * stone_to_pounds\n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n    \n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    tenth_term = 31\n    common_difference = 28 - 25\n    nth_term = 10\n\n    first_term = tenth_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    return (5 + 15 + 17 + 23) * 3\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    return sum(a + 10*b for a, b in zip(range(1, 10, 2), range(3, 10)))\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    num1 = int('12101', 3)\n    num2 = int('2210', 3)\n    difference = num1 - num2\n    ans = format(difference, 'o')\n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andy, bella, carl = symbols('andy bella carl')\n    \n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n    \n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the variables\n    cake, biscuit = symbols('cake biscuit')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cake, biscuit))\n    \n    return solutions[biscuit]\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Initialize an array to represent the first 20 positive integers\n    numbers = [0] * 20  # 0 means unchosen, 1 means chosen\n\n    # The strategy is to always pick the smallest available number,\n    # and marking the numbers that are not eligible for selection\n    # because they would differ by 5 with an already chosen number.\n    for i in range(20):\n        if numbers[i] == 0:\n            # Choose this number\n            numbers[i] = 1\n            # Mark numbers that are not eligible for selection\n            if i + 5 < 20: \n                numbers[i + 5] = -1\n            if i - 5 >= 0: \n                numbers[i - 5] = -1\n\n    # Count the number of selected numbers, which are marked by 1\n    ans = numbers.count(1)\n    return ans\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    # Since the total number of pencils is denoted by B1B, where B is in tens place and 1 is in ones place\n    # This number should be divisible by the number of pupils (44) without a remainder.\n    for B in range(1, 10):  # B can be any digit from 1 to 9\n        total_pencils = int(str(B) + \"1\" + str(B))\n        if total_pencils % 44 == 0:\n            pencils_per_student = total_pencils // 44\n            return pencils_per_student\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'j' be John's current age and 'm' be his mother's current age\n    j, m = symbols('j m')\n\n    # Given conditions:\n    # In 8 years, John's age will be equivalent to his mother's age 20 years ago:\n    equation1 = Eq(j + 8, m - 20)\n\n    # The age difference will remain the same, so we can find this from the equation above\n    age_difference = solve(equation1, m)[0] - j\n\n    # When John's mother is 5 times his age\n    equation2 = Eq(m, 5*j)\n\n    # Solve for 'j' using the obtained age_difference\n    equation3 = Eq(m, j + age_difference)\n\n    # Solve equations to find John's age\n    john_age = solve((equation2, equation3), (j, m))[j]\n\n    # John's age when his mother is 5 times older is therefore:\n    john_age_when_five_times = john_age - age_difference\n\n    return john_age_when_five_times\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_questions = correct_answers + wrong_answers\n\n    total_marks = correct_answers * marks_per_correct\n    average_mark = total_marks / total_questions\n\n    return average_mark\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    kevin, sara, james = symbols('kevin sara james')\n\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    # Convert the mixed numbers to improper fractions\n    num1 = 2017 * 8/8 + 7/8 # 2017 7/8\n    num1 *= 3 * 3/3 + 2/3 # 3 2/3\n\n    num2 = 2016.875 * 11/3\n\n    # Calculate the numerator of the complex fraction\n    numerator = num1 - num2\n\n    # Convert the mixed number to improper fraction\n    denom1 = 2017 * 3/3 + 1/3 # 2017 1/3\n    # Calculate the denominator of the complex fraction\n    denominator = (denom1 - 2016.875) * 17\n\n    # Calculate the whole complex fraction\n    complex_fraction = numerator / denominator\n\n    # Convert the mixed number to improper fraction\n    num3 = 3 * 32/32 + 23/32 # 3 23/32\n\n    # Final result\n    ans = complex_fraction * num3\n    \n    return ans\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "def solution():\n    from math import lcm\n    ans = lcm(4, 6, 7)\n    return ans\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = set()\n        for divisor in range(2, 11):\n            remainder = M % divisor\n            if remainder == 0 or remainder in remainders:\n                break\n            remainders.add(remainder)\n        if len(remainders) == 9:\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    # Calculate the least common multiple (LCM) of Tom and William's lap times\n    from math import lcm\n    tom_time = 24\n    william_time = 8\n    meet_time = lcm(tom_time, william_time)\n    \n    return meet_time\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n    \n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n    \n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n\n    equation = Eq(romily, reema + 10)\n    total_collected = romily + reema\n\n    # Assume total_collected as the provided total collection amount\n    total_collection_amount = 100  # Assuming the total collected amount is £100\n    # Since the amount isn't given, it's assumed as per the instructions.\n    \n    equation2 = Eq(total_collected, total_collection_amount)\n\n    solutions = solve((equation, equation2), (romily, reema))\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    allison, ben, eunice = symbols('allison ben eunice')\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n    \n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    \n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    \n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    import math\n\n    def smallest_multiplier_for_perfect_square(n):\n        prime_factors = {}\n        # Find prime factors of n and count their occurrences\n        for i in range(2, int(math.sqrt(n)) + 1):\n            while n % i == 0:\n                prime_factors[i] = prime_factors.get(i, 0) + 1\n                n //= i\n        if n > 1:\n            prime_factors[n] = 1\n\n        # For a perfect square, each prime factor must occur an even number of times\n        multiplier = 1\n        for prime, count in prime_factors.items():\n            if count % 2 == 1:  # if the count of prime is odd, multiply by prime to make it even\n                multiplier *= prime\n\n        return multiplier\n\n    return smallest_multiplier_for_perfect_square(28)\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    length_of_field = 480\n    distance_between_posts = 4\n\n    # Including a post at each end, the number of posts is one more than the number of intervals\n    num_posts = (length_of_field // distance_between_posts) + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be in the range 1-9 as it is the first digit of a two-digit number\n        for b in range(10):  # 'b' can be in the range 0-9\n            ab = 10 * a + b  # This forms the two-digit number 'ab'\n            ba = 10 * b + a  # This forms the two-digit number 'ba'\n            if 8 * ab == 3 * ba:  # According to the given condition\n                return ab  # If condition satisfies, return the number 'ab'\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Andrew and Louise's ages\n    andrew, louise = symbols('andrew louise')\n\n    # Define the equations based on the problem statement\n    # Andrew is three times as old as Louise\n    equation1 = Eq(andrew, 3 * louise)\n    # The sum of their ages is 84\n    equation2 = Eq(andrew + louise, 84)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    # Return Louise's age\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    return 612 // 34 * 25\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    return (10 + 20 + 30 + 50 + 60 + 70) - (6 + 16 + 26 + 46 + 56 + 66)\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n\n    reaching_home_time = lunch_end_time - lunch_duration - tv_duration - play_duration\n\n    return reaching_home_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Since A and B are always next to each other, consider them as one unit.\n    # Thus, we have 5 units to arrange (A&B, C, D, E, F)\n    units_perm = factorial(5)\n\n    # A and B can be arranged in 2! ways since they can swap places\n    ab_perm = factorial(2)\n\n    # The total number of ways is the product of the two permutations\n    total_ways = units_perm * ab_perm\n\n    return total_ways\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_population = 64\n    years = 5\n    growth_rate = 5\n    death_rate = 0.5\n    population = initial_population\n    for year in range(1, years + 1):\n        population = population * growth_rate * death_rate\n    return int(population)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    fare_per_mile = 6\n    # Total fare y = fare_per_mile * distance x\n    y = fare_per_mile * symbols('x')\n    return y\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for number in range(99, 9, -1):\n        if (number - 3) % 4 == 0 and (number - 3) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple')\n\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, (3 / 5) * purple)\n    equation3 = Eq(red * 4 + green * 5 + purple * 7, 642)\n\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    sweets_per_student = 5\n\n    # Since each student gets at least 5 sweets, we need to find the largest class size\n    # where when the total sweets are divided, each student gets at least 5 sweets.\n    class_size = total_sweets // sweets_per_student\n\n    return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # We know that 246 x 135 = 33210\n    \n    # Multiplying 246 x 135 is essentially doing:\n    # (240 + 6) x 135 = (240 x 135) + (6 x 135)\n    \n    # If we want to find out 248 x 135, we have:\n    # (240 + 8) x 135 = (240 x 135) + (8 x 135)\n    \n    # From the first equation, we can deduce that '240 x 135' equals: 33210 - (6 x 135)\n    mult_240 = 33210 - (6 * 135)\n    \n    # Now we need to add (8 x 135) to '240 x 135' to get '248 x 135'\n    ans = mult_240 + (8 * 135)\n    \n    return ans\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let x be the number of steps of the escalator\n    # When Peter walks at 1 step per second, he takes 10 steps, so the escalator moves 10 - x steps\n    # Since he takes 10 seconds to reach the top, the escalator moves at x/10 steps per second\n    # When Peter walks at 2 steps per second, he takes 16 steps, so the escalator moves 16 - x steps\n    # Since he takes 8 seconds to reach the top (16/2), the escalator moves at x/8 steps per second\n\n    # Set up the equations: (rate of Peter + rate of escalator) * time = total steps\n    # Equation 1: (1 + x/10) * 10 = x\n    # Equation 2: (2 + x/8) * 8 = x\n    \n    # Solving Equation 1 for x gives us x = 10 + x\n    # This is impossible since x cannot equal x + 10, this is the wrong interpretation.\n    \n    # The correct interpretation is the relative speed between Peter and the escalator\n    # If we take the speed of escalator as e steps per second, we have:\n    # Equation 1: 10 seconds * (1 step/second + e steps/second) = x steps\n    # Equation 2: 8 seconds * (2 steps/second + e steps/second) = x steps\n    \n    # 10 + 10e = x (1)\n    # 16 + 16e = x (2)\n    \n    # Equate (1) and (2):\n    # 10 + 10e = 16 + 16e\n    # 6 = 6e\n    e = 1 # steps per second\n\n    # Place the value of e into any of the equations to find x\n    x = 10 + 10 * e # Using equation (1)\n    \n    return x\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    # Since trees are planted on both ends, we add one additional tree\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n    ans = tens + hundredths + thousandths\n    return ans\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    return 1200 * 0.25\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation = Eq(jon, miguel + 0.3 * miguel)\n    total_money_eq = Eq(jon + miguel, 46)\n\n    solutions = solve((equation, total_money_eq), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    blocks_given = total_blocks * 1/4\n    blocks_left = total_blocks - blocks_given\n    \n    return int(blocks_left)\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # Even digits that can be hundreds are 2, 4, 6, 8. But since ones is twice hundreds, limit is 1-4\n        for tens in range(0, 10, 2):  # Any even digit can be tens\n            for ones in range(0, 10, 2):  # Any even digit can be ones\n                if ones == 2 * hundreds and hundreds < tens and (hundreds * 100 + tens * 10 + ones) % 18 == 0:\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # We assign symbols to represent the original number of chocolates Sally and Ken had\n    sally, ken = symbols('sally ken')\n\n    # Original ratio of chocolates between Sally and Ken\n    eq1 = Eq(sally/ken, 5/7)\n\n    # After Ken gives Sally 24 chocolates\n    eq2 = Eq(sally + 24, 2 * (ken - 24))\n\n    # Solve for 'sally' and 'ken'\n    solutions = solve((eq1, eq2), (sally, ken))\n\n    # Ken's chocolates after giving 24 to Sally\n    ken_chocolates_end = solutions[ken] - 24\n    \n    # Return the number of chocolates Ken has in the end\n    return ken_chocolates_end\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n    \n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    return solutions[pencil] + solutions[notebook]\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    extra_bill = bill\n\n    # Calculate hours between 50 and 60 hrs range\n    if extra_bill > 10 * 8:\n        extra_bill -= 10 * 8\n    else:\n        return 40 + (extra_bill // 8)\n\n    # Calculate hours for bill at $5 per hour rate\n    if extra_bill > 10 * 5:\n        extra_bill -= 10 * 5\n    else:\n        return 50 + (extra_bill // 5)\n\n    # Calculate hours beyond 60 hours at rate of $15 per hour\n    return 60 + (extra_bill // 15)\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percent = 20 / 100\n    tax_percent = 10 / 100\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_in_triangle = 3\n    sides_in_square = 4\n    thought_number = (sides_in_square * 2) - sides_in_triangle\n    return thought_number\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 0.12\n    new_pay = original_pay * (1 + increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n\n    total_water = audrey_water + jane_water\n\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits = 1014\n    pages = 0\n    digit_count = 0\n\n    while digit_count < digits:\n        pages += 1\n        digit_count += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    ans = 89 * 19\n    return ans\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent_weekly) * weeks\n\n    difference = joanna_total - amy_total\n\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    \n    first_number = 57 + magic_number\n    second_number = 9 + magic_number\n\n    equation = Eq(first_number, 4 * second_number)\n\n    solved_magic_number = solve(equation, magic_number)\n\n    return solved_magic_number[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    total_male_students = 7\n    total_female_students = 6\n    \n    # Total ways to pick any 4 students without restriction\n    total_ways_any_students = comb(total_male_students + total_female_students, 4)\n    \n    # Total ways to pick 4 male students (no female student)\n    total_ways_all_male_students = comb(total_male_students, 4)\n    \n    # Total ways to have at least 1 female student = Any - All male\n    at_least_one_female = total_ways_any_students - total_ways_all_male_students\n    \n    # Multiply by the ways to pick a teacher\n    total_ways = at_least_one_female * total_teachers\n    \n    return total_ways\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum(10 * i - (6 * i - 6) for i in range(1, 8)) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Alice and her sister's current ages\n    alice, sister = symbols('alice sister')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    terms_apart = 15 - 10\n    \n    # Calculate the common difference\n    common_difference = term_difference / terms_apart\n    \n    # Calculate the 12th term\n    twelfth_term = tenth_term + (2 * common_difference)\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # The degree of the monomial -x^3y^(2n) is the sum of the exponents of x and y.\n    # Since the given degree is 5 and we know the exponent of x is 3,\n    # we can set up the equation 3 + 2n = 5 to find n.\n\n    # Solve for n\n    n = (5 - 3) / 2\n\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    cups = 45\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n\n    total_milk = cups * milk_per_cup\n    total_tea = cups * tea_per_cup\n\n    total_amount = total_milk + total_tea\n\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    nth_term = lambda n: 5 * n\n    return nth_term(10)\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_cost, pencil_cost = symbols('book_cost pencil_cost')\n\n    equation1 = Eq(8 * book_cost + 3 * pencil_cost, 3 * book_cost + 8 * pencil_cost + 1)\n\n    # providing the cost of pencil as given in the problem\n    pencil_cost_value = 0.4\n\n    # substitute the known pencil cost into the first equation\n    equation1_substituted = equation1.subs(pencil_cost, pencil_cost_value)\n\n    # solving the equation for the cost of the book\n    book_cost_value = solve(equation1_substituted, book_cost)[0]\n\n    return book_cost_value\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of gummy bears each person buys\n    angela, bernice, candice = symbols('angela bernice candice')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq(angela * 6 + bernice * 6 + candice * 6, 342)  # Multiply by 6 to convert to pence\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since it's given that the median is 20, \n    # and the median of this list with an even number of terms is the average of the two middle terms,\n    # we can say that (n+8 + n+11)/2 = 20.\n    n = symbols('n')\n    median_eq = Eq((n + 8 + n + 11)/2, 20)\n    n_value = solve(median_eq, n)[0]\n\n    # The mean is the sum of all terms divided by the number of terms.\n    sum_of_terms = n_value + (n_value + 2) + (n_value + 3) + (n_value + 5) + \\\n                   (n_value + 7) + (n_value + 8) + (n_value + 11) + \\\n                   (n_value + 14) + (n_value + 16) + (n_value + 19)\n    mean = sum_of_terms / 10\n\n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    return sum(range(1, 101))\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let the weights of the apples be a, b, and c, where a is the lightest and c is the heaviest.\n    # Let x be the weight difference we are looking for.\n    # If Tim eats the largest apple (c), the mean of the two remaining apples is 70g:\n    # (a + b) / 2 = 70  => a + b = 140  (1)\n    # If Tim eats the lightest apple (a), the mean of the two remaining apples is 105g:\n    # (b + c) / 2 = 105 => b + c = 210  (2)\n    # Subtracting equation (1) from equation (2) gives us:\n    # (b + c) - (a + b) = 210 - 140\n    # c - a = 70\n    # So the weight difference x between the heaviest apple and the lightest apple is 70 grams.\n    x = 70\n    return x\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    for x in range(1, 60):\n        if x + (x + 1) + (x + 2) == 60:\n            return x + 2\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n    containers_needed = total_juice / per_container\n    return containers_needed\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    excluding_members = 4\n    included_members = total_members - excluding_members\n\n    # Calculate the handshakes between the included members first\n    handshakes_included = (included_members * (included_members - 1)) // 2\n\n    # Now calculate handshakes including each of the excluded members\n    # with the included members (but not with other excluded members)\n    handshakes_excluded = excluding_members * included_members\n\n    # Add them up for the final answer\n    total_handshakes = handshakes_included + handshakes_excluded\n\n    return total_handshakes\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "网络故障，请重试"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    for A in range(10):\n        if (A + A + A) == 6:\n            return A\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    # Loop through possible original single digit numbers\n    for original_number in range(1, 10):\n        # Add a '0' on the right to get a two-digit number\n        new_number = int(str(original_number) + '0')\n        # Check if the condition is met\n        if new_number - original_number == 27:\n            return original_number\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    \n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # If Bob finds that he is always the 3rd in line no matter the direction\n    # he counts from, then the array has 3 - 1 = 2 animals in each direction\n    # before him and 2 animals after him in each direction. Since the array is\n    # two-dimensional, we have to consider both dimensions.\n\n    animals_before = 2\n    animals_after = 2\n\n    # Animals in one row (including Bob)\n    row_count = animals_before + 1 + animals_after\n    \n    # Animals in one column (including Bob)\n    column_count = animals_before + 1 + animals_after\n\n    # Total number of animals\n    total_animals = row_count * column_count\n\n    return total_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of one-cent, two-cent, and five-cent coins\n    one, two, five = symbols('one two five')\n\n    # Since 6 one-cent coins equals 5 two-cent coins in height, set their ratio\n    eq1 = Eq(6 * one, 5 * two)\n\n    # Since 4 one-cent coins equals 3 five-cent coins in height, set their ratio\n    eq2 = Eq(4 * one, 3 * five)\n\n    # Sam uses a total of 124 coins\n    eq3 = Eq(one + two + five, 124)\n\n    # Solve for the number of each coin\n    solutions = solve((eq1, eq2, eq3), (one, two, five))\n    \n    # Calculate total value using the number of each coin type\n    total_value = solutions[one] + 2 * solutions[two] + 5 * solutions[five]\n\n    return total_value\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Total length of the road with plum trees\n    total_length = (41 - 1) * 4  # Number of intervals is number of trees minus 1\n\n    # Since trees are planted at both ends, the length will be divided by the interval of pine trees\n    # to get the number of intervals plus one for the tree at the end.\n    pine_trees = (total_length // 5) + 1\n\n    return pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 / 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11 \n    sum_multiples = smallest_multiple + largest_multiple\n    return sum_multiples\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    correct_salary = 3040\n    mistaken_salary = 2800\n    correct_total_salary = incorrect_total_salary - mistaken_salary + correct_salary\n    correct_average_salary = correct_total_salary / 12\n\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n    \n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 350)\n    equation2 = Eq(B, 2 * (A - 500))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    spent_on_books = initial_money * 0.25\n    remaining_after_books = initial_money - spent_on_books\n    spent_on_dvd = remaining_after_books * 0.20\n    remaining_after_dvd = remaining_after_books - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m // 12\n\nans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for i in range(999999, 100000, -1):\n        if str(i) == str(i)[::-1] and i % 6 == 0:\n            return i\n            \nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    # Given ratios\n    bg_ratio = 2 / 5\n    gr_ratio = 4 / 1\n    \n    # Find the least common multiple of denominators (5 and 4) to have a common base for green pens\n    green_base = 5 * 4\n    \n    # Adjust blue and red pens based on the common base for green pens\n    blue_base = green_base * bg_ratio  # Based on blue:green = 2:5\n    red_base = green_base // gr_ratio  # Based on green:red = 4:1\n\n    # Now iterate through multiples to find maximum red pens\n    # while keeping the total count under 100\n    max_red_pens = 0\n    for i in range(1, 100):\n        blue = blue_base * i\n        green = green_base * i\n        red = red_base * i\n        if (blue + green + red) < 100:\n            max_red_pens = max(max_red_pens, red)\n        else:\n            break\n\n    return max_red_pens\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys_initial = 216\n    girls_initial = 153\n    children_joined = 37\n\n    total_children_after_hour = boys_initial + girls_initial + children_joined\n    \n    return total_children_after_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # desired length in meters\n    shortage_cm = 10  # shortage in centimeters\n\n    # Convert the shortage to meters\n    shortage_m = shortage_cm / 100.0\n\n    # Calculate the original length\n    original_length_m = desired_length_m - shortage_m\n\n    # Convert the result to centimeters if needed\n    original_length_cm = original_length_m * 100\n\n    return original_length_cm\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define a symbol for the original number of marbles Wei Yan had\n    original_marbles = symbols('original_marbles')\n    \n    # Wei Yan first gives away 3/8 of his marbles\n    marbles_after_giving_friends = original_marbles - 3/8 * original_marbles\n    \n    # Then he gives away 5/7 of the remaining marbles to his brother\n    marbles_after_giving_brother = marbles_after_giving_friends - 5/7 * marbles_after_giving_friends\n    \n    # His cousin gives him 408 marbles\n    final_marbles = marbles_after_giving_brother + 408\n    \n    # In the end, he has twice as many marbles as he had at first\n    equation = Eq(final_marbles, 2 * original_marbles)\n    \n    # Solve the equation to find the original number of marbles\n    solution_dict = solve(equation, original_marbles)\n    \n    return solution_dict[0]\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    # total number of pins and needles\n    total_pins_needles = 2540\n    # number of pins sold\n    sold_pins = 1820\n    # fraction of needles sold\n    sold_needles_fraction = 4/5\n    # Paul's calculation of needles left\n    paul_needles_left = 455\n\n    # number of pins left after selling\n    pins_left = total_pins_needles - sold_pins\n\n    # using algebra to find the total number of needles initially\n    # let the initial number of needles be n\n    # then the initial number of pins is total_pins_needles - n\n    # the number of needles left after selling some is n - (sold_needles_fraction * n)\n    # according to the problem the number of pins and needles left is the same\n    # thus, total_pins_needles - sold_pins = n - (sold_needles_fraction * n)\n    # solving for n we get:\n    \n    n = symbols('n')\n    needles_left = n - (sold_needles_fraction * n)\n    needles_left_equation = Eq(pins_left, needles_left)\n\n    # solving the equation\n    needles_solution = solve((needles_left_equation), (n))\n\n    return needles_solution[n]\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_length = len(pattern)\n    total_sum = 0\n\n    for i in range(41):\n        total_sum += pattern[i % pattern_length]\n    \n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    frac = 2 / 7\n    total = 315\n    ans = frac * total\n    return ans\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    for two_p_coin in range(0, 24):  # 47 // 2 + 1 = 24, maximum possible 2p coins is 23\n        for five_p_coin in range(0, 10):  # 47 // 5 + 1 = 10, maximum possible 5p coins is 9\n            if (two_p_coin * 2 + five_p_coin * 5) == 47:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = ((9+10+11)/8 - (10+11+12)/9 + (11+12+13)/10 - (12+13+14)/11)\n    denominator = (1/8 - 1/9 + 1/10 - 1/11)\n\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Brian's age when his father was 41\n    b_age_at_14 = 14\n    f_age_at_14 = 41\n    age_difference = f_age_at_14 - b_age_at_14\n\n    # Iterate over possible ages until the next time their ages are the reverse\n    for i in range(b_age_at_14 + 1, 100):\n        # Calculate Brian's and his father's ages\n        b_age = i\n        f_age = i + age_difference\n        \n        # Check if the ages are reverse of each other\n        if str(b_age).zfill(2) == str(f_age).zfill(2)[::-1]:\n            return b_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(52 - (4 * x - 3), 47)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Extract the solution\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            x3 = 11 - (x1 + x2)\n            if x1 < x2 < x3: \n                count += 1\n    return count\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    number1 = round(654876, -2)\n    number2 = round(279745, -2)\n\n    ans = number1 - number2\n    return ans\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for x in range(1, 8):\n        for y in range(1, 8 - x + 1):\n            if x != y and x + y == 8:\n                count += 1\n    # Since each pair is counted twice we divide by 2\n    return count // 2\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time = 16  # time in seconds for the train to pass a tree\n    distance = 480  # length of the train in meters\n    speed = distance / time  # speed of the train in meters per second\n    return speed\n \nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    ans = sum(range(1, 6)) + sum(range(1, 5))\n    return ans\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    ans = (2/5) * 30\n    return ans\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    return (5/8) * 4000\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n\n    road_length = (total_lampposts - 1) * distance_between_lampposts\n\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10**5) // (5**5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_students = 40\n    students_failed = 14\n\n    percentage_failed = (students_failed / total_students) * 100\n\n    return percentage_failed\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    total = sum(page for page in range(1, 51) if '3' in str(page))\n    return total\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pasta_types = 4\n    sauce_types = 3\n    topping_types = 3\n\n    combinations = pasta_types * sauce_types * topping_types\n\n    return combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # Using the Pigeonhole Principle in the worst case scenario.\n    # To guarantee matching each key to the correct classroom, the \n    # warden may have to try each key in each lock.\n    # For the first classroom, he may try up to 10 keys.\n    # For the second classroom, he may try up to 9 keys (since one key is already matched).\n    # This continues down to the last classroom, for which he will only have to try 1 key.\n    # So the maximum number of attempts is the sum of the first 10 natural numbers minus 1.\n    \n    max_attempts = sum(range(1, 11)) - 1\n    return max_attempts\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    guests = 153\n    bag_size = 12\n\n    poppers_needed = guests % bag_size\n\n    poppers_left = bag_size - poppers_needed\n\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    return (7 ** 2023) % 10\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n    from sympy import root, Rational\n\n    # Set the precision for decimal calculations\n    getcontext().prec = 6\n\n    # Calculate the cubic root of -13.333... (which is -13 + 1/3)\n    cubic_root = root(Decimal(-13) + Decimal('1')/Decimal('3'), 3)\n    \n    # Calculate 4.090909... (which is 4 + 1/22)\n    four_point_oh = Decimal(4) + Decimal('1')/Decimal('22')\n    \n    # Square the value of 4.090909...\n    squared_value = four_point_oh ** 2\n    \n    # Calculate the square root of 11.111... (which is 11 + 1/9)\n    sqrt_value = root(Decimal(11) + Decimal('1')/Decimal('9'), 2)\n    \n    # Calculate the denominator value\n    denominator = Decimal('59.24') - sqrt_value\n    \n    # Final calculation as per the given expression\n    final_result = (cubic_root * squared_value) / denominator\n    \n    # Round off to the nearest 3 decimal places\n    ans = round(final_result, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    number_string = ''.join(str(i) for i in range(1, 31))\n    smallest_number = number_string[46:]\n    ans = int(smallest_number)\n    return ans\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome number\n    least_5_digit_palindrome = int('10001')\n    \n    # The greatest 6-digit palindrome number\n    greatest_6_digit_palindrome = int('999999')\n    \n    # The difference between the least 5-digit palindrome and the greatest 6-digit palindrome\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    num_children = 10\n    num_selected = 2\n    ans = comb(num_children, num_selected)\n    return ans\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    girls = 3 * boys  # Since three quarters are girls, for every boy there are 3 girls\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabella_cost = solutions[banana] + solutions[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    years_later = 0\n    \n    while sara_age + lucy_age < 60:\n        sara_age += 1\n        lucy_age += 1\n        years_later += 1\n    \n    return years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n\n    total_seating = (two_seater_benches * 2) + (three_seater_benches * 3)\n\n    return total_seating\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    paid_in_coins = 16  # Since we can only pay with 1 pound coins, we must pay at least £16.\n\n    change = paid_in_coins - book_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    numbers = range(99, 120, 2)\n    ans = sum(n if i % 2 == 0 else -n for i, n in enumerate(numbers))\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 + 1/7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    footballs, basketballs = symbols('footballs basketballs')\n    \n    # Initial ratio of footballs to basketballs\n    initial_ratio = Eq(footballs, 2/5 * basketballs)\n    \n    # Ratio after selling 16 basketballs\n    after_selling_ratio = Eq(footballs, 2/3 * (basketballs - 16))\n    \n    # Solve the equations\n    solutions = solve((initial_ratio, after_selling_ratio), (footballs, basketballs))\n    \n    # Total footballs and basketballs at first\n    total = solutions[footballs] + solutions[basketballs]\n    \n    return total\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_now, younger_now = symbols('older_now younger_now')\n\n    # When the older brother was the younger's current age, the younger was 12\n    equation1 = Eq(older_now - younger_now, 12)\n    \n    # When the younger becomes the older's current age, the older will be 27\n    equation2 = Eq(older_now + (younger_now - older_now), 27)\n\n    solutions = solve((equation1, equation2), (older_now, younger_now))\n\n    return solutions[older_now]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Since there are 5 colours, to ensure getting a pair of gloves of the same colour,\n    # Rona must take out at least 1 glove from each colour plus one more glove.\n    # This is because in the worst-case scenario, she will take each glove from a different colour.\n\n    # Number of colours\n    colours = 5\n    # To ensure a pair, she must take out one from each colour and one more\n    gloves_needed = colours + 1\n\n    return gloves_needed\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = -(-30 // 8) * 8  # Smallest multiple of 8 greater than or equal to 30, using ceiling division\n    last_multiple = 82 // 8 * 8  # Largest multiple of 8 less than or equal to 82\n\n    # Compute the number of multiples by subtracting and dividing by 8 then add 1\n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of stickers Peter originally had as 'p'.\n    p = symbols('p')\n    \n    # According to the question, Sam originally had 'p + 40' stickers.\n    \n    # Sam gave 20% of his stickers to Peter, so he gave away 0.2 * (p + 40).\n    # After giving away, Sam has 'p + 40 - 0.2 * (p + 40)' stickers left.\n    \n    # Peter gave 25% of his stickers after receiving from Sam to Sam, which is 0.25 * (p + 0.2 * (p + 40)).\n    # After giving back to Sam, Peter has 'p + 0.2 * (p + 40) - 0.25 * (p + 0.2 * (p + 40))' stickers left.\n    \n    # In the end, Sam has 'p + 40 - 0.2 * (p + 40) + 0.25 * (p + 0.2 * (p + 40))' stickers,\n    # and Peter has 'p + 0.2 * (p + 40) - 0.25 * (p + 0.2 * (p + 40))' stickers.\n    \n    # The difference in the number of stickers they each have in the end is 96.\n    equation = Eq((p + 40 - 0.2 * (p + 40) + 0.25 * (p + 0.2 * (p + 40))) -\n                  (p + 0.2 * (p + 40) - 0.25 * (p + 0.2 * (p + 40))), 96)\n    \n    # Solving for 'p'\n    solution = solve(equation, p)\n    \n    # Peter's original number of stickers is the solution to the equation\n    return solution[0]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    lines = 13\n    max_junctions = lines * (lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    spring_festival_increase = original_price * 0.10\n    spring_festival_price = original_price + spring_festival_increase\n    lantern_festival_decrease = spring_festival_price * 0.10\n    lantern_festival_price = spring_festival_price - lantern_festival_decrease\n    \n    return lantern_festival_price\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert the total time spent from minutes to hours\n    total_time_hours = 7.2 / 60\n    \n    # Relative speed when the teacher is running towards the front of the line\n    speed_towards = 12 + 8\n    \n    # Relative speed when the teacher is running back to the end of the line\n    speed_back = 12 - 8\n    \n    # Calculate the total distance traveled by the teacher\n    distance = total_time_hours * (speed_towards + speed_back) / 2\n    \n    # The length of the line is the distance the teacher ran towards the front\n    # since that equates to the time the line moved plus the length of the line\n    length_of_line = distance / 2  # because the distance includes the trip towards and back\n    \n    return length_of_line\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    flora_age_2_years_ago = flora_age_now - 2\n    fathers_age_2_years_ago = 9 * flora_age_2_years_ago\n    fathers_age_now = fathers_age_2_years_ago + 2\n\n    return fathers_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate number of games in each group stage\n    # Using formula for single round-robin: n * (n - 1) / 2 for each group of n people\n    group_games = 4 * (4 * (4 - 1) // 2)  # There are 4 groups of 4 people each\n    \n    # Calculate number of games in knockout stages:\n    # 8 in the first round (top 8), 4 in the second round (top 4), 2 in the semi-finals (top 2)\n    # And 1 final match, 1 match for third place\n    knockout_games = 8 + 4 + 2 + 1 + 1  # Sum of all knockout stage games\n    \n    # Total games is the sum of group stage games and knockout stage games\n    total_games = group_games + knockout_games\n    \n    return total_games\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    return 122.55 + 9.45 + 13.21 - 3.21\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Convert minutes to hours for uniformity\n    late_time = 20 / 60\n    early_time = -10 / 60\n\n    # Speeds in km/h\n    speed1 = 4\n    speed2 = 6\n\n    # Let the distance be d km (which we need to find)\n    # Using the formula time = distance/speed\n    # Actual time to travel = d/speed1 - late_time = d/speed2 + early_time\n\n    # Set up the equations\n    # d/4 - 1/3 = d/6 + 1/6\n    # Multiply everything by 12 to remove the denominators\n    # 3d - 4 = 2d + 2\n    # Solve the equation for d\n    d = 4 + 2 # d = 6 km is the distance\n\n    return d\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = i * 2\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence = 1.25 * 100 # 1 pound is 100 pence\n    return pounds_to_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Reverse Ken's action\n    ken = (remaining + 1) * 2\n    remaining += ken\n    # Reverse Nini's action\n    nini = (remaining - 3) * 2\n    remaining += nini\n    # Reverse Ivy's action\n    ivy = (remaining + 2) * 2\n    remaining += ivy\n    # Reverse Eddie's action\n    eddie = (remaining - 1) * 2\n    return eddie\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    # Total distance the snail needs to climb\n    total_distance = 18\n    # Distance climbed during the day\n    daily_climb = 7\n    # Special climb distance on the 6th day\n    special_climb_day_6 = 3\n\n    # Calculate the net climb by the end of 5th day before the special day\n    net_climb_before_day_6 = daily_climb * 5\n    # Since the snail reaches or exceeds the top on the 6th day, we can find the net distance left\n    distance_left_day_6 = total_distance - net_climb_before_day_6\n\n    # The distance climbed on the 6th day exceeds or meets the remaining distance\n    # The night slide distance will be the special day climb minus the distance left\n    night_slide = special_climb_day_6 - distance_left_day_6\n\n    return night_slide\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    distinct_permutations = set(permutations(\"CYZZ\"))\n    count = len(distinct_permutations)\n    return count\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all heights to centimeters for comparison\n    heights_cm = [\n        500,         # 5 m in cm\n        120,         # 120 cm\n        50 / 10,     # 50 mm in cm (10 mm in 1 cm)\n        8 * 30.48    # 8 feet in cm (1 foot = 30.48 cm)\n    ]\n    \n    # Average height range for children aged 10-11 is around 130cm to 160cm.\n    # Determine which height estimates might be correct based on this range\n    ans = [height for height in heights_cm if 130 <= height <= 160]\n    \n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    # 3 times as many girls as boys\n    equation1 = Eq(girls, 3 * boys)\n    # Each girl took 2 paintbrushes and each boy took 3 paintbrushes. Total 99 paintbrushes.\n    equation2 = Eq(2 * girls + 3 * boys, 99)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n    \n    num_students_A = 12\n    num_students_B = 16\n    num_students_C = 20\n    \n    gcd_AB = gcd(num_students_A, num_students_B)\n    gcd_ABC = gcd(gcd_AB, num_students_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12 ** 2\n    n = 3 ** 2 * 2 ** 3\n    return m + n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n    average_all = 82\n\n    # Calculate the total score for all participants\n    total_score_all = (total_boys + total_girls) * average_all\n\n    # Calculate the total score for boys\n    total_score_boys = total_boys * average_boys\n\n    # Calculate the remaining score for girls\n    total_score_girls = total_score_all - total_score_boys\n\n    # Calculate the average score for girls\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    n = 15\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Capture-recapture method for estimating population size\n    marked_fish_first_catch = 100\n    total_fish_second_catch = 200\n    marked_fish_second_catch = 25\n    \n    # Using the proportion of marked fish in the second catch to estimate total population\n    estimated_total_fish = (marked_fish_first_catch * total_fish_second_catch) / marked_fish_second_catch\n    \n    return estimated_total_fish\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_food = 12 * 15\n    days_for_20_rabbits = total_food / 20\n\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    # Chloe, Maggie, and Lily have $187 sweets in total.\n    equation1 = Eq(chloe + maggie + lily, 187)\n    # Maggie, Lily, and George have $327 sweets in total.\n    equation2 = Eq(maggie + lily + george, 327)\n    # George has 5 times the sweets Chloe has.\n    equation3 = Eq(george, 5 * chloe)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    # Sums all the number of sweets they have together\n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(girls + boys, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gave = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gave\n    more_money_needed = dress_cost - total_money\n\n    return more_money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    get_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    breakfast_start_time = get_up_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    arrival_time = breakfast_end_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n\n    total_salt = salt_per_packet * packets\n\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    count = 0\n    # We will try every possible number of 2-gram weights from 0 up to 77 // 2\n    for two_gram_weights in range(0, 77 // 2 + 1):\n        remainder = 77 - 2 * two_gram_weights\n        # If the remainder is divisible by 3, we have a valid combination\n        if remainder % 3 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Calculate the sum of cubes from 1 to 20\n    sum_cubes_1_to_20 = (sum(range(1, 21)) ** 2)\n    # Calculate the sum of cubes from 1 to 9\n    sum_cubes_1_to_9 = (sum(range(1, 10)) ** 2)\n    # Substract the sum of cubes from 1 to 9 from the sum of cubes from 1 to 20\n    ans = sum_cubes_1_to_20 - sum_cubes_1_to_9\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    num_quarters = total_amount * quarters_in_one_dollar\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score_for_5_assignments = 90 * 5\n    total_score_for_4_assignments = 96 + 85 + 89 + 92\n    score_for_5th_assignment = total_score_for_5_assignments - total_score_for_4_assignments\n\n    return score_for_5th_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 4 == 3 and number % 5 == 4 and number % 7 == 6:\n            break\n    return number\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # Since we need at least 10 pencils for each of the 5 different colours,\n    # we can try to get 10 pencils from 4 different colours,\n    # and then we will definitely get 10 pencils of the 5th colour in the worst-case scenario.\n    \n    # So we calculate the pencils drawn like this:\n    # 10 pencils from each of the first 4 colours and\n    # then we add 1 to guarantee the 5th different colour.\n    # We do not need to go further because it is already ensured that whatever\n    # colour we pick we will have at least 10 pencils from 5 different colours.\n\n    # Calculate the minimum pencils needed:\n    pencils = 10 * 4 + 1\n\n    return pencils\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n\n    num_coaches = -(-total_pupils // pupils_per_coach)  # Ceiling division\n\n    return num_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    ratio_before = Eq(pip / bud, 4/7)\n    ratio_after = Eq((pip / (bud + 5)), 8/15)\n\n    solutions = solve((ratio_before, ratio_after), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # The total perimeter of the field\n    perimeter = (144 + 204) * 2\n    \n    # Since each corner has a wheat, we subtract the count for the corners\n    wheat_count = 116 - 4\n    \n    # The distance between each wheat is the perimeter divided by the remaining number of wheats\n    distance_between_wheat = perimeter / wheat_count\n    \n    return distance_between_wheat\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5  # The last digit of powers of 5 is always 5\n    last_digit_7 = 7**30 % 10  # Calculate the last digit of 7^30\n\n    ans = (last_digit_5 * last_digit_7) % 10  # Calculate the last digit of the product\n    return ans\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes = list(primerange(2, 46))\n    for A in primes:\n        for B in primes:\n            for C in primes:\n                if A != B and B != C and A != C:\n                    if not isprime(A + B) and not isprime(A + C) and not isprime(B + C):\n                        if B - 1 != A and B - 1 != C and abs(B - 1 - A) == 7 or abs(B - 1 - C) == 7:\n                            if isprime(A + (C * 2)) or isprime(B + (C * 2)) or isprime((C * 2) + A) or isprime((C * 2) + B):\n                                return A + B + C\n    return None\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # G = number of girls, B = number of boys\n    G, B = symbols('G B')\n    \n    # total pupils equation\n    total_pupils_eq = Eq(G + B, 1690)\n    \n    # boys to girls ratio equation\n    boys_girls_ratio_eq = Eq(B, G + 90)\n    \n    # solve for G and B\n    pupils_solution = solve((total_pupils_eq, boys_girls_ratio_eq), (G, B))\n    \n    # number of girls and boys\n    num_girls = pupils_solution[G]\n    num_boys = pupils_solution[B]\n    \n    # G_swim = girls who can swim, G_no_swim = girls who cannot swim\n    G_swim, G_no_swim = symbols('G_swim G_no_swim')\n    \n    # girls swimming ratio\n    girls_swim_ratio_eq = Eq(G_swim / G_no_swim, 31/49)\n    girls_total_eq = Eq(G_swim + G_no_swim, num_girls)\n    \n    # solve for number of girls who can swim and who cannot swim\n    girls_swim_solution = solve((girls_swim_ratio_eq, girls_total_eq), (G_swim, G_no_swim))\n    \n    # B_swim = boys who can swim, B_no_swim = boys who cannot swim\n    B_swim, B_no_swim = symbols('B_swim B_no_swim')\n    \n    # boys swimming condition\n    boys_swim_condition_eq = Eq(B_swim, B_no_swim - 120)\n    boys_total_eq = Eq(B_swim + B_no_swim, num_boys)\n    \n    # solve for number of boys who can swim and who cannot swim\n    boys_swim_solution = solve((boys_swim_condition_eq, boys_total_eq), (B_swim, B_no_swim))\n    \n    # total pupils who cannot swim\n    total_no_swim = girls_swim_solution[G_no_swim] + boys_swim_solution[B_no_swim]\n\n    return total_no_swim\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n\n    cloth1 = 39\n    cloth2 = 52\n\n    longest_piece_length = gcd(cloth1, cloth2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the points for A as x and for B as y.\n    x, y = symbols('x y')\n\n    # Simon's score equation: 4A + 4B = 36\n    equation1 = Eq(4 * x + 4 * y, 36)\n    # Peter's score equation: 2A + 3B = 22\n    equation2 = Eq(2 * x + 3 * y, 22)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Now we calculate the score for 3 A's and 5 B's using the values of x and y found\n    score = 3 * solutions[x] + 5 * solutions[y]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    joe_share = total_squares // 2\n    \n    return joe_share\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    half_of_999 = 999 / 2\n    return half_of_999\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_position_from_end\n    \n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Define the variable A as the smallest prime number\n    A = 2\n\n    # Define the variable B as the smallest composite number\n    B = 4\n\n    # Define the variable C as neither a prime number, nor a composite number, nor zero\n    C = 1\n\n    # Define the variable D as 2 less than the smallest prime number\n    D = A - 2\n\n    # Define the variable E as the largest composite number up to 10\n    E = 9\n\n    # Define the variable F as a number that only has factors 1 and 5\n    F = 5\n\n    # Define the variable G as the greatest factor of 8\n    G = 4\n\n    # Define the variable H as the lowest multiple of 6\n    H = 6\n\n    # Concatenate the variables to form the phone number\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n\n    return phone_number\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_off = 42\n    people_on = 60\n    people_after = 322\n\n    people_before = people_after - people_on + people_off\n\n    return people_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_per_day = 24 * 60 * 60  # 24 hours, 60 minutes per hour, 60 seconds per minute\n    fraction_of_day = 1/4 * 1/6 * 1/8\n\n    ans = seconds_per_day * fraction_of_day\n    return int(ans)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the original number of stickers Mary and Alexis had\n    mary_original, alexis_original, charlotte_original = symbols('mary_original alexis_original charlotte_original')\n\n    # Mary and Alexis each gave 20% of their stickers to Charlotte\n    mary_after = mary_original - 0.2 * mary_original\n    alexis_after = alexis_original - 0.2 * alexis_original\n    charlotte_after = charlotte_original + 0.2 * (mary_original + alexis_original)\n\n    # Charlotte's stickers increased by 80%\n    equation1 = Eq(charlotte_after, charlotte_original * 1.8)\n\n    # In the end, Mary had 20 stickers more than Charlotte\n    equation2 = Eq(mary_after, charlotte_after + 20)\n    \n    # Mary and Alexis had stickers in the ratio 7:5\n    equation3 = Eq(mary_original / alexis_original, 7 / 5)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (mary_original, alexis_original, charlotte_original))\n\n    # We want Alexis's original stickers\n    return solutions[alexis_original]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    family_members = 3  # Eddie, mom, dad\n    family_permutations = math.factorial(family_members)\n\n    other_people = 5  # Excluding the family\n    total_people = other_people + 1  # Including the family as a single unit\n\n    total_permutations = math.factorial(total_people)\n\n    ans = family_permutations * total_permutations\n    return ans\n\nimport math\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5  # Total number of digits to choose from\n    digit_2_count = 3 # The digit 2 appears thrice\n    digit_3_count = 2 # The digit 3 appears twice\n    total_4_digit_numbers = 4  # The total number of positions\n\n    # Since the digits can repeat and we have to form 4 digit numbers,\n    # this becomes a problem of permutations with repetitions.\n    # The formula to calculate this is:\n    # Total permutations = factorial(n) / (factorial(n1) * factorial(n2) * ... * factorial(nk))\n    # Where n is the total number of items, and n1, n2, ..., nk are the repeating items counts.\n\n    permutations_with_repetitions = factorial(total_4_digit_numbers) / (factorial(digit_2_count - 1) * factorial(digit_3_count))\n    \n    return int(permutations_with_repetitions)\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    # Pip's number is in the form of \"abba\"\n    # Bud's number then has to be in the form of \"abab\"\n    # Given that their sum is 5510, then \"abba\" + \"abab\" = 5510\n\n    for a in range(1, 10):  # Thousands (and units) digit cannot be 0\n        for b in range(0, 10):  # Tens and hundreds digit can range from 0 to 9\n            pips_number = 1000 * a + 100 * b + 10 * b + a  # Construct Pip's number\n            buds_number = 1000 * a + 100 * b + 10 * a + b  # Construct Bud's number\n            if pips_number + buds_number == 5510:  # Check if their sum is 5510\n                return pips_number  # Return Pip's number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Total amount of grass is the same in both scenarios.\n    # Therefore, we can set up the equation: 25 cows * 10 days = 15 cows * 20 days.\n    # Let x be the number of cows that can be fed for 50 days.\n    # We want to find x such that: 25 cows * 10 days = x cows * 50 days.\n    # Solving for x gives us: x = (25 * 10) / 50.\n\n    x = (25 * 10) / 50\n    return x\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    total_pages = 95\n    max_days = 0\n\n    while (max_days * (max_days + 1)) // 2 <= total_pages:\n        max_days += 1\n    \n    return max_days - 1\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    # Let's denote the number of oranges originally as 3x and lemons as 5x.\n    # After selling 48 oranges, we have (3x - 48) oranges left.\n    # The new ratio 1:2 gives us the equation:\n    # (3x - 48) / 5x = 1 / 2\n    # Solving for x will tell us the number of lemons as we will multiply the solution by 5.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3 * x - 48) / (5 * x), 1/2)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    # Since we need the number of lemons, we multiply the solution by 5.\n    num_lemons = 5 * x_value[0]\n    \n    return num_lemons\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    mistaken_minuend = 116\n    mistaken_difference = 81\n\n    correct_minuend = 166\n    correct_difference = correct_minuend - mistaken_minuend + mistaken_difference\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = 3 * first_day\n    third_day = (5 / 3) * second_day\n    total_sold = first_day + second_day + third_day\n    \n    return total_sold\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Treat the 3 maths books as a single book (mb) and 2 English books as a single book (eb)\n    # Now, there are a total of 3 (mb, eb, other) + 1 other book = 4 books to arrange\n    total_books = 4 + 1  # The other 3 books are considered as separate entities\n    \n    # Calculate permutations for these 4 books\n    perm_books = factorial(total_books)\n    \n    # Calculate permutations for 3 maths books amongst themselves\n    perm_maths_books = factorial(3)\n    \n    # Calculate permutations for 2 English books amongst themselves\n    perm_english_books = factorial(2)\n    \n    # Multiply the permutations together to get the final answer\n    return perm_books * perm_maths_books * perm_english_books\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    additional_discount = 100\n    tax_rate = 0.10\n\n    price_after_first_discount = original_price * (1 - discount)\n    price_after_additional_discount = price_after_first_discount - additional_discount\n    final_price = price_after_additional_discount * (1 + tax_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1  # Counting Judy herself\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes_with_flour = 250 / flour_per_cake\n    return int(cakes_with_flour)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    combined_rate = ivy_rate + kevin_rate\n    \n    # Calculate how much work is done by both in one day\n    work_done_in_12_days = 12 * combined_rate\n    \n    # Divide the work done by Ivy's rate to find the total time Ivy would need alone\n    total_time_ivy = work_done_in_12_days / ivy_rate\n    \n    # The difference in time is the time Kevin took off\n    kevin_days_off = total_time_ivy - 12\n    \n    return kevin_days_off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represent the initial number of diamonds Ophelia had (since we want to find out this)\n    # Let y represent the initial number of diamonds Penelope had\n    x, y = symbols('x y')\n    \n    # Given that Ophelia had 4 times as many diamonds as Penelope\n    equation1 = Eq(x, 4 * y)\n    \n    # After buying 21 more diamonds, Penelope had y + 21 diamonds\n    # And is now 5/8 of what Ophelia has\n    equation2 = Eq(y + 21, 5 * x / 8)\n    \n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Return the number of diamonds Ophelia had\n    return solutions[x]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 * 8) // 20\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = maths_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    dividend = 379\n    divisor = 6\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Worst case: Cindy picks 1 sock of each color without getting a pair\n    worst_case_black = 4  # All black socks\n    worst_case_red = 4    # All red socks\n    # To ensure she gets a pair of at least one color, she needs to pick\n    # 1 more sock after the worst case scenario\n    socks_needed = worst_case_black + worst_case_red + 1\n\n    return socks_needed\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n\n    n = 9  # total number of statues\n    r = 4  # number of statues to arrange in a row\n\n    # Calculate the number of ways using permutations since order matters\n    num_ways = factorial(n) // factorial(n - r)\n\n    return num_ways\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price = 100      # in pence, £1.00 = 100p\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    original_price = 80\n    gst_rate = 0.08\n    final_price = original_price * (1 + gst_rate)\n    return final_price\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of bicycles and t represent the number of tricycles\n    b, t = symbols('b t')\n\n    # Equation representing the total number of bicycles and tricycles\n    equation1 = Eq(b + t, 300)\n\n    # Equation representing the number of wheels (bicycles have 2 wheels, tricycles have 3 wheels)\n    equation2 = Eq(2*b + 3*t, 2*300 + 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, t))\n\n    # Return the number of bicycles\n    return solutions[b]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    future_value = 2360\n    interest_rate = 0.06\n    years = 3\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n    \n    return present_value\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation_factor = 0.8154\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    final_value_approx = initial_value * approximate_depreciation_factor\n\n    return round(final_value_approx, 2)\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # Since the remainder is less than the divisor\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_pattern_count = 2  # In each pattern, there are 2 grey rabbits\n    total_patterns = 14 // grey_pattern_count  # Each complete pattern adds to a total of 5 rabbits\n\n    # Total number of rabbits in complete patterns\n    total_rabbits = total_patterns * (1 + 2 + 2)\n\n    # Check if there are any remaining grey rabbits that do not make up a complete pattern\n    remaining_grey = 14 % grey_pattern_count\n    if remaining_grey > 0:\n        if remaining_grey == 1:  # 1 black and 2 white will come before the remaining 1 grey rabbit\n            total_rabbits += 1 + 2 + remaining_grey\n        else:\n            total_rabbits += 1 + 2 + remaining_grey\n\n    return total_rabbits\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015 * 2015 - 2016 * 2014\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    not_choco_not_foil = 9\n\n    choco_or_foil = foil_wrappers + chocolate_with_foil - chocolate_with_foil\n    only_chocolate = total_biscuits - choco_or_foil - not_choco_not_foil\n\n    return only_chocolate\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    original_speed, original_time, distance = symbols('original_speed original_time distance')\n\n    # Equation for speed increase\n    equation1 = Eq((original_speed * 1.25) * (original_time - 20/60), distance)\n\n    # Equation for speed decrease\n    equation2 = Eq((original_speed - 45) * (original_time * 1.75), distance)\n\n    # Equation for original speed and time relation\n    equation3 = Eq(original_speed * original_time, distance)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (original_speed, original_time, distance))\n\n    return solutions[distance]\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number_with_decimals = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number_with_decimals, 1)\n    tongtong_is_correct = rounded_number == 9764.0\n\n    if tongtong_is_correct:\n        return 9764.0\n    else:\n        return rounded_number\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    value = 398\n    ans = value / 4\n    return ans\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')  # x represents the initial number of crystals Jason had\n\n    # Equation that represents the scenario\n    equation = ((x / 2) + 10) + 20 - 14 + (x / 2) - x - 35\n\n    # Solve the equation\n    initial_crystals = solve(equation, x)\n\n    return initial_crystals[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Number of 5s in A\n    num_fives = 15\n    # Number of 2s in A\n    num_twos = 10\n    \n    # Number of zeros at the end of A is determined by the number of 10s in its prime factorization.\n    # Since 10 is composed of one 5 and one 2, the number of pairs of 5s and 2s will determine this.\n    # In this case, we have less 2s than 5s, so the number of zeros is equal to the number of 2s\n    num_zeros = min(num_fives, num_twos)\n\n    return num_zeros\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    perms = permutations(digits)\n    count = 0\n    for perm in perms:\n        for i in range(1, len(perm)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n    Ali_and_Bala = 2\n\n    total_people = people_in_front_of_Ali + Ali_and_Bala + people_behind_of_Bala\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    olaf, anna = symbols('olaf anna')\n    \n    # At first, Olaf had thrice as many carrots as Anna.\n    equation1 = Eq(olaf, 3 * anna)\n    \n    # After Olaf gave away 335 carrots, Anna had twice as many carrots as Olaf.\n    equation2 = Eq(anna, 2 * (olaf - 335))\n    \n    solutions = solve((equation1, equation2), (olaf, anna))\n    \n    return solutions[anna]\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    # convert pounds to pence\n    budget_pence = 30 * 100\n    plant_cost_pence = 85\n    \n    # calculate the maximum number of plants that can be bought\n    max_plants = budget_pence // plant_cost_pence\n    \n    return max_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    # Let x be the smaller number and y be the larger number.\n    # According to the problem, we have two equations:\n    # x + y = 80\n    # y - x = 40\n\n    # We can solve for x by adding the two equations:\n    # (x + y) + (y - x) = 80 + 40\n    # 2y = 120\n    # y = 120 / 2\n    # y = 60\n\n    # Now we use the first equation to solve for x:\n    # x + y = 80\n    # x + 60 = 80\n    # x = 80 - 60\n    x = 80 - 60\n\n    return x\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Since there are only black or blue cars,\n    # the number of black cars can be calculated as follows:\n    black_cars = total_cars - blue_cars\n\n    # All cars are either Fords or Dodges\n    # We already know the number of black Dodges and Fords\n    # The remaining black cars must be Fords\n    black_fords = black_cars - black_dodges\n\n    # Therefore, blue Fords must be the total number of Fords minus black Fords\n    blue_fords = fords - black_fords\n\n    return blue_fords\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    num = 4\n    while True:\n        composite_numbers = [num, num+1, num+2, num+3]\n        if all(any(i % factor == 0 for factor in range(2, i)) for i in composite_numbers):\n            return sum(composite_numbers)\n        num += 1\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst case,\n    # the magician could pick all but one of each color before getting one of each.\n    total_balls = 8 + 10 + 13  # Total number of balls\n    # The worst case scenario for each color (all but one)\n    worst_case_blue = 8 - 1\n    worst_case_red = 10 - 1\n    worst_case_green = 13 - 1\n    # To guarantee picking one of each, add 1 to the total worst case scenario\n    minimum_picks = worst_case_blue + worst_case_red + worst_case_green + 1\n    ans = minimum_picks\n    return ans\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    # Start with the remainder when divided by 11\n    num = 5\n\n    # Keep adding 11 until it also has a remainder of 1 when divided by 7\n    while num % 7 != 1:\n        num += 11\n\n    # Return the smallest number that satisfies both conditions\n    return num\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_earnings = 120\n    num_workdays = 5  # from Monday to Friday\n\n    total_earnings = daily_earnings * num_workdays\n\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    # If each child gets at least one apple, remove 7 apples (one for each of the other children)\n    remaining_apples = total_apples - (children - 1)\n  \n    # Divide the remaining apples among the children\n    least_apples_for_most = remaining_apples // children\n    \n    # Since we are looking for the least possible number for the child who gets the most,\n    # we need to check if the division is perfect\n    if remaining_apples % children == 0:\n        # If the division is perfect, give one more apple to the child to ensure they have the most\n        least_apples_for_most -= 1\n    \n    return least_apples_for_most\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    score_correct = 3\n    score_incorrect = -2\n    total_score = 125\n\n    # Let x be the number of correct answers, then (total_questions - x) will be the number of wrong answers\n    # Build the equation based on the problem statement:\n    # score_correct * x + score_incorrect * (total_questions - x) = total_score\n\n    for x in range(total_questions + 1):\n        if score_correct * x + score_incorrect * (total_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "from math import gcd\n\ndef solution():\n    numbers = [60, 72, 84]\n    ans = gcd(gcd(numbers[0], numbers[1]), numbers[2])\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    for start in range(1, 13):\n        if (start - 1 + 30) % 12 == 10 - 1:\n            return start\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    seq = [2, 2]  # start of the sequence\n    for i in range(2, 2011):\n        next_num = (seq[-1] + seq[-2]) % 10  # get the last digit of sum\n        seq.append(next_num)\n\n    ans = seq[2010]  # get the 2011th number\n    return ans\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    whole_number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (whole_number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    equation1 = Eq(bob, alan + 15)  # Bob has $15 more Match Dfex cards than Alan\n    equation2 = Eq(bob + 25, 3 * alan)  # After Colin gives Bob $25 cards, Bob has 3 times as many as Alan\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    # Since we have an arithmetic sequence, we can find the sum using the formula:\n    # sum = n/2 * (first_term + last_term), and we know the sum is m^2\n    # where n is the number of terms in the sequence\n    # Here, first_term is 23, and last_term is (2k-1)\n    # Also, n = k - 11 since the sequence starts at 23 which is the 12th odd number (11 odd numbers before it)\n    # We need to find the k such that the sum is a perfect square\n    \n    # Define an initial m value\n    m = 0\n    # Define a reasonably large range for k, since k > 30\n    for k in range(31, 10000):\n        n = k - 11\n        sum_seq = n // 2 * (23 + (2 * k - 1))\n        # We check if sum_seq is a perfect square\n        if (sum_seq ** 0.5) % 1 == 0:\n            m = int(sum_seq ** 0.5)\n            break\n    return m\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Calculate the distance covered in the first 2 hours\n    first_distance = 2 * 40\n    # The remaining distance is given\n    remaining_distance = 280\n    # Calculate the time taken to cover the remaining distance\n    remaining_time = remaining_distance / 70\n\n    # Total distance covered is the sum of the first and remaining distances\n    total_distance = first_distance + remaining_distance\n    # Total time is the sum of the first 2 hours and the remaining time\n    total_time = 2 + remaining_time\n\n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_saving = 1\n    number_of_days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = original_amount + daily_saving * number_of_days_saved - lent_to_brother - spent_on_snacks\n\n    return current_amount\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    parts_per_cow_per_day = 1\n\n    total_parts = cows * days * parts_per_cow_per_day\n\n    return total_parts\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's transaction\n    equation1 = Eq(2 * banana + 3 * apple, 3)\n    # Beth's transaction\n    equation2 = Eq(3 * banana + 2 * apple, 4)\n    \n    # Solving for the price of a banana and an apple\n    prices = solve((equation1, equation2), (banana, apple))\n    \n    # Calculate the cost for Annabella\n    cost_annabella = 10 * prices[banana] + 10 * prices[apple]\n\n    return cost_annabella\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the amount of oil sold from each bucket\n    x = symbols('x')\n    \n    # Equation for the big bucket after selling x kilograms\n    big_bucket = 89 - x\n    # Equation for the small bucket after selling x kilograms\n    small_bucket = 45 - x\n    \n    # The equation describing the relationship after oil is taken out\n    equation = Eq(big_bucket, 12 * small_bucket)\n    \n    # Solve for x\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    total_visitors = 100  # Let's assume 100 for easier percentage calculations\n    men_percentage = 37\n    men = (men_percentage * total_visitors) / 100\n    women_and_children = total_visitors - men\n    children = (men - 12)  # There are 12 more men than children\n    women_and_children_ratio = 9  # 4 (women) + 5 (children)\n    women_ratio = 4\n    \n    # Calculate ratio for one part\n    one_part = women_and_children / women_and_children_ratio\n    women = one_part * women_ratio\n    \n    # Calculate actual number of women based on the assumed total_visitors\n    actual_women = (women / total_visitors) * (100 + men - children)\n    \n    return int(actual_women)\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    # Probability that at least one train is late is \n    # 1 minus the probability that neither train is late\n    prob_neither_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n    \n    prob_at_least_one_late = 1 - prob_neither_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    result = 6.6 + 13.5\n    return result\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # Since they range from 10 to 99 inclusive\n    numbers_without_six = 8 * 8   # Digits can be from 0-9 except '6', resulting in 8 options for each place\n\n    # Subtract the count of numbers without a '6' from the total two-digit numbers\n    count_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n\n    return count_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_power_2023 = pow(2023, 2, 10)  # Calculate the last digit of 2023^2\n    last_digit_power_2 = pow(2, 2023, 10)     # Calculate the last digit of 2^2023\n    sum_last_digit = (last_digit_power_2023 + last_digit_power_2) % 10 # Sum of last digits and mod 10\n    ans = pow(sum_last_digit, 3, 10)          # Calculate the last digit of the sum's cube\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    # Speed of car A\n    speed_a = 48\n    # Speed of car B\n    speed_b = 72\n    # Distance between the two cars\n    distance = 360\n    # Relative speed of approach\n    relative_speed = speed_a + speed_b\n    \n    # Time taken to meet\n    time = distance / relative_speed\n\n    return time\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, orange = symbols('mango pear orange')\n    \n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4*mango + 2*pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, orange))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    max_intersections = num_lines * (num_lines - 1) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    # Since we only need the last digit of the expression,\n    # we can utilize the property that the last digit of a product\n    # depends solely on the last digits of the factors.\n    \n    # Calculating last digit of (5^20)\n    last_digit_of_5 = 5 ** 20 % 10  # Since 5^x always ends in 5\n    \n    # Calculating last digit of (7^20)\n    # We can use the fact that powers of 7 repeat last digit in a cycle of 4:\n    # 7^1 = 7, 7^2 = 49, 7^3 = 343, 7^4 = 2401 (last digit back to 1), then repeats.\n    # Since 20 is a multiple of 4, the last digit is the same as the last digit of 7^4\n    last_digit_of_7 = 7 ** 4 % 10  # Last digit is the same as that of 7^4\n    \n    # The last digit of the product is the product of the last digits\n    last_digit = (last_digit_of_5 * last_digit_of_7) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given values\n    AB = CD = 14  # lengths of straight lines (in cm)\n    pi = 22 / 7   # value of pi\n    \n    # Each quadrant arc length is a quarter of the circumference of a circle with radius AB\n    quadrant_arc_length = (pi * AB) / 2\n    \n    # Each semicircle length is half the circumference of a circle with radius AB/2\n    semicircle_length = pi * (AB / 2)\n    \n    # The perimeter is composed of 2 quadrant arcs and 2 semicircles\n    perimeter = (2 * quadrant_arc_length) + (2 * semicircle_length)\n    \n    # Add the straight lines AB and CD\n    perimeter += (AB + CD)\n    \n    return perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n    pencils = 28\n    pens = 63\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    # 1/3 of the total watermelons sold the first day\n    # 3/5 of the remaining watermelons sold the second day\n    # Remaining watermelons after both days is 48\n\n    # Let total watermelons be x\n    # After first day: x - x/3 = 2x/3 remaining\n    # After second day: 2x/3 - 3/5 * 2x/3 = 2x/3 * (1 - 3/5) = 2x/3 * 2/5 remaining\n\n    # We set up the equation 2x/3 * 2/5 = 48 to find the total x:\n    # x = 48 * 3/2 * 5/2\n\n    total_watermelons = 48 * (3/2) * (5/2)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, sam, jim = symbols('ahmad sam jim')\n    \n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n    \n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n    \n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pasta_price = 95  # price of each pasta packet in pence\n    pasta_packets = 6\n    total_spent = 1170  # Total spent in pence\n    rice_packets = 5\n\n    rice_price = symbols('rice_price')\n\n    # Equation: Total spent = (pasta packet price * number of pasta packets) + (rice packet price * number of rice packets)\n    equation = Eq(pasta_price * pasta_packets + rice_price * rice_packets, total_spent)\n\n    solution = solve(equation, rice_price)\n\n    return solution[rice_price]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm_3_5_7 = 3*5*7  # Calculate the least common multiple of 3, 5 and 7\n    for x in range(100, 1000):  # Iterate through all three-digit numbers starting with 6\n        if x % lcm_3_5_7 == 0 and x // 100 == 6:  # Check divisibility and the first digit\n            return x  # Return the number once found\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    ways = comb(10, 6)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c', integer=True)\n    \n    # Define the equation based on the complex fraction given\n    equation = Eq(1 + 1 / (a + 1 / (b + 1 / c)), 13/10)\n\n    # Solve the equation\n    solutions = solve(equation, (a, b, c))\n\n    # Assuming there's a unique solution in integers\n    a_val, b_val, c_val = solutions[0]\n\n    return a_val + 2 * b_val + 3 * c_val\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lazy, energetic = symbols('lazy energetic')\n\n    # Productivity equation for energetic worker\n    equation_energetic = Eq(1 / energetic, 1 / 20)\n\n    # Combined productivity equation for both workers\n    equation_combined = Eq(1 / lazy + 1 / energetic, 1 / 12)\n\n    # Solve for lazy worker's productivity\n    solutions = solve((equation_energetic, equation_combined), (lazy, energetic))\n\n    return solutions[lazy]\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    ans = 0.30 * (2/3) * 45\n    return ans\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # The average of the numbers is the total sum divided by the number of terms.\n    average = 1650 / 15\n\n    # The largest number in the series is average + 7 (since there are 15 numbers\n    # and the series is symmetric about the average)\n    largest = average + 7\n\n    # The smallest number is average - 7\n    smallest = average - 7\n\n    # The sum of the largest and smallest numbers\n    sum_of_largest_and_smallest = largest + smallest\n\n    return sum_of_largest_and_smallest\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while pies % 4 != 0 or pies % 6 != 0:\n        pies += 1\n    return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys_per_line = 3\n    girls_per_line = 2\n    total_boys = 42\n\n    # Find the ratio of boys to girls\n    ratio = boys_per_line / girls_per_line\n\n    # Calculate the total number of girls based on the ratio\n    total_girls = total_boys / ratio\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def is_oddtastic(n):\n    return all(int(digit) % 2 != 0 for digit in str(n))\n\ndef solution():\n    return sum(is_oddtastic(n) for n in range(1, 1000))\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # For a to have a remainder of 6 when divided by 8, a could be 8k + 6 for some integer k.\n    # For b to have a remainder of 7 when divided by 8, b could be 8k + 7 for some integer k.\n    # Here k is not necessary to specify as we're interested in remainders only.\n    \n    a_remainder = 6\n    b_remainder = 7\n\n    # Adding the remainders of a and b\n    total_remainder = (a_remainder + b_remainder) % 8  # using modulo operation to find the final remainder\n    \n    return total_remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n    num_blouses = 2\n\n    cloth_used_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth_for_blouses = total_cloth - cloth_used_for_skirts\n    cloth_used_per_blouse = remaining_cloth_for_blouses / num_blouses\n\n    return round(cloth_used_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    digit_count = 0\n    num = 1\n    while True:\n        num_length = len(str(num))\n        digit_count += num_length\n        if digit_count >= 2019:\n            break\n        num += 1\n    \n    diff = digit_count - 2019\n    ans = int(str(num)[num_length - diff - 1])\n    \n    return ans\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # Assuming the worst case scenario where each time the guard tries a key, it does not fit,\n    # which means he has to try another key until he finds the right one for each room.\n    \n    # For the first room, he may have to try all 11 keys.\n    # For the second room, he may have to try the remaining 10 keys.\n    # This pattern continues until the last room, where he only has 1 key left to try.\n    \n    # This forms a sequence where the number of tries is 11 + 10 + 9 + ... + 1\n    # This is the sum of an arithmetic sequence.\n    \n    # The sum of an arithmetic sequence can be calculated by the formula:\n    # Sum = n/2 * (first_term + last_term)\n    # where `n` is the number of terms, `first_term` is the first term of the sequence,\n    # and `last_term` is the last term of the sequence.\n    \n    # For this sequence, n = 11 (the number of keys), first_term = 1, and last_term = 11.\n    \n    n = 11\n    first_term = 1\n    last_term = n\n    sum_of_tries = n * (first_term + last_term) // 2\n\n    return sum_of_tries\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Creating congruences based on the remainder problem conditions\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    # Solving the congruences using Chinese Remainder Theorem\n    n, _ = solve_congruence(*congruences)\n\n    ans = n\n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 2, 2, 3, 3]\n    perms = set(permutations(digits, 4))\n    return len(perms)\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # basket mass converted from grams to kilograms\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    num_kittens = 4  # number of kittens\n\n    # total mass of kittens\n    total_kittens_mass_kg = kitten_mass_kg * num_kittens\n\n    # mass of the cat\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + total_kittens_mass_kg)\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    return 412 / 1000\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return float(\"%.2f\" % cost_per_person)\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20 / 100\n    new_price = original_price + original_price * increase_percentage\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 3 + 4 + 1  # Mary's brothers + Mary's sisters + Mary\n    eggs_bought = (family_members - 1) * family_members  \n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    departure_time = 7 * 60 + 50  # Convert 7:50 AM to minutes\n    arrival_time = 8 * 60 + 40    # Convert 8:40 AM to minutes\n\n    journey_duration = arrival_time - departure_time  # Calculate the duration in minutes\n\n    return journey_duration\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana = symbols('apple banana')\n    \n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    term1 = 3\n    term2 = 6\n    term3 = 10\n    term4 = 15\n    \n    # The differences between the terms are increasing by a constant amount\n    difference1 = term2 - term1  # 3\n    difference2 = term3 - term2  # 4\n    difference3 = term4 - term3  # 5\n    \n    # Next difference should be 6 since it's increasing by 1\n    difference4 = difference3 + 1  # 6\n\n    # The missing number will be term5\n    term5 = term4 + difference4\n\n    return term5\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_money_after_handbag = 80 / (1 - 3/5)\n    initial_money = remaining_money_after_handbag / (1 - 1/5)\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47  # Total volume of oil in the barrel\n    poured_into_bottle = 5  # Volume of oil poured into the bottle\n    number_of_tanks = 6  # Number of tanks\n\n    remaining_volume = total_volume - poured_into_bottle  # Volume of oil remaining after pouring into bottle\n    volume_per_tank = remaining_volume / number_of_tanks  # Volume of oil in each tank\n\n    return volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    # Let x be the number of years it will take for the grandpa's age to be 5 times Johnny's age.\n    # grandpa's current age = 72, Johnny's current age = 8\n    grandpa_age = 72\n    johnny_age = 8\n\n    # In x years, grandpa's age will be 72 + x and Johnny's age will be 8 + x.\n    # We need to find a value of x such that 72 + x = 5 * (8 + x)\n    # Equating and rearranging the equation: 72 + x = 5 * (8 + x) => 72 + x = 40 + 5x\n    # Solve for x: 72 - 40 = 5x - x => 32 = 4x => x = 8\n    x = (grandpa_age - 5 * johnny_age) / (5 - 1)\n\n    return x\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the initial amount of money Samuel had\n    initial_amount = symbols('initial_amount')\n    \n    # Calculate the money spent on DVD\n    spent_on_dvd = initial_amount / 6 + 5\n    \n    # Calculate the remaining money after buying DVD\n    remaining_after_dvd = initial_amount - spent_on_dvd\n    \n    # Calculate the money spent on magazines\n    spent_on_magazines = remaining_after_dvd * 2 / 5 + 12\n    \n    # Calculate the remaining money after buying magazines\n    remaining_after_magazines = remaining_after_dvd - spent_on_magazines\n    \n    # Equation for the money left\n    equation = Eq(remaining_after_magazines, 24)\n    \n    # Solve the equation\n    solution = solve(equation, initial_amount)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Pip's position from front\n    pip_position_from_front = 8\n    \n    # Bud's position from back\n    bud_position_from_back = 10\n    \n    # Children between them\n    children_between = 4\n    \n    # Total number of children in the queue\n    # Pip position + children between + Bud position (converted to from front)\n    total_children = pip_position_from_front + children_between + bud_position_from_back\n    \n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    \n    # Colin gives Bob 25 cards\n    # Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 2000\n    amount = 2519.42\n    years = 3\n    rate = symbols('rate')\n    equation = Eq(principal * (1 + rate) ** years, amount)\n    rate_solution = solve(equation, rate)[0]\n    return round(rate_solution * 100, 1)\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    odd_sum = sum(range(1, 51, 2))\n    even_sum = sum(range(2, 51, 2))\n    ans = even_sum - odd_sum\n\n    return ans\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Equations based on the problem statement\n    # If she gave 20 oranges to each elderly, 10 elderly will not receive any oranges\n    # x = total elderly, y = total oranges\n    # 20*(x-10) = y\n    \n    # If she gave 16 oranges to each elderly, she would have enough oranges to pack\n    # 25 boxes of oranges, each containing 2 dozen oranges (48 oranges per box)\n    # 16*x = 25*48\n    \n    # Let's find the total number of elderly (x) and total oranges (y)\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')\n    equation1 = Eq(20*(x-10), y)\n    equation2 = Eq(16*x, 25*2*12)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (x, y))\n    total_elderly = solutions[x]\n    total_oranges = solutions[y]\n    \n    # The number of oranges Janice should give to each elderly so that she gives out\n    # all her oranges and that each elderly receives the same number of oranges\n    # is the total number of oranges divided by the total number of elderly\n    oranges_per_elderly = total_oranges / total_elderly\n\n    return oranges_per_elderly\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Given the operation m~Δ~n = 5m + 3n\n    # We apply the operation to x~Δ~9 and set it equal to 37\n    # 5x + 3*9 = 37\n    # 5x + 27 = 37\n    # 5x = 37 - 27\n    # 5x = 10\n    # x = 10 / 5\n    x = 10 / 5\n    return x\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # The worst case scenario for Sheila to not get 4 balls of the same color is when she takes out:\n    # - All 4 orange balls, and\n    # - All 2 yellow balls, and\n    # - 3 blue balls (because taking a fourth would mean she has 4 of the same color)\n    # This represents the maximum number of balls she can take without being sure to have 4 of the same color.\n    \n    # Therefore, the next ball she takes out, no matter what, will be the fourth ball of the same color.\n    max_balls_without_4_same_color = 4 + 2 + 3\n    \n    # The next ball Sheila takes out will guarantee her 4 balls of the same color\n    balls_to_ensure_4_same_color = max_balls_without_4_same_color + 1\n    \n    return balls_to_ensure_4_same_color\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    total_weight_full = 31  # Full of soil\n    part_removed = 1 / 5\n    weight_after_removal = 27  # After removing 1/5 of the soil\n\n    # Calculate the weight of the removed soil.\n    removed_soil_weight = total_weight_full - weight_after_removal\n\n    # Calculate the total weight of the soil when the wheel barrow was full.\n    soil_weight_full = removed_soil_weight / part_removed\n\n    # Calculate the weight of the empty wheel barrow.\n    empty_wheel_barrow_weight = total_weight_full - soil_weight_full\n\n    return empty_wheel_barrow_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tim, tyler = symbols('tim tyler')\n    \n    equation1 = Eq(tim / 6, tyler * 3 / 8)\n    equation2 = Eq(tim, (tyler - 96) * 9)\n    solutions = solve((equation1, equation2), (tim, tyler))\n    \n    total_cookies = solutions[tim] + solutions[tyler]\n    \n    return total_cookies\n    \nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the different types of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate / 6 + 2 * vanilla / 3 + 7 * blueberry / 9, 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate how many chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    platform1_interval = 24\n    platform2_interval = 30\n\n    next_common_time = lcm(platform1_interval, platform2_interval)\n\n    # 9 am is equal to 540 minutes from 0:00\n    time_in_minutes = 540 + next_common_time\n    hours = time_in_minutes // 60\n    minutes = time_in_minutes % 60\n\n    return f'{hours:02d}:{minutes:02d}'\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    \n    missed_marks = total_marks - scored_marks\n    \n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    three_quarters_tank = 24\n    full_tank = three_quarters_tank * 4 / 3\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of red and white balls be 3k and 2k respectively\n    k = symbols('k', integer=True)\n    red_orig, white_orig = 3 * k, 2 * k\n\n    # Pip puts p red balls, so the new ratio is 5/3\n    p = symbols('p', integer=True)\n    red_after_pip = red_orig + p\n    white_after_pip = white_orig\n    equation1 = Eq(red_after_pip / white_after_pip, 5 / 3)\n    \n    # Bud puts b white balls and b = p + 100\n    b = p + 100\n    red_after_bud = red_after_pip\n    white_after_bud = white_after_pip + b\n    equation2 = Eq(red_after_bud / white_after_bud, 5 / 4)\n\n    # Solve the system of equations for p and k\n    solutions = solve((equation1, equation2), (p, k))\n\n    # There might be multiple solutions, but we need the one where k and p are positive\n    solution = next(value for key, value in solutions if value[k] > 0 and value[p] > 0)\n\n    # Calculate the initial number of white balls\n    white_initial = 2 * solution[k]\n    return white_initial\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Since a divided by 8 leaves a remainder of 6, we can express a as 8k + 6\n    # Similarly, for b divided by 8 leaves a remainder of 7, we can express b as 8m + 7\n    a_remainder = 6\n    b_remainder = 7\n\n    # Calculating the remainder of the sum (a + b) divided by 8\n    # We only need to consider the remainders of a and b since the division parts (8k and 8m) will not affect the remainder\n    total_remainder = (a_remainder + b_remainder) % 8\n\n    return total_remainder\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Jessica's position from the front is 5 + 1 (her own desk)\n    jessica_front = 5 + 1\n    # Judy's position from the back is 7 + 1 (her own desk)\n    judy_back = 7 + 1\n    # Total number of desks is Jessica's from front + Judy's from back - 1, because Jessica sits in front of Judy\n    total_desks = jessica_front + judy_back - 1\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the average weight before Aaron joined.\n    # Let n be the number of people in the group before Aaron joined.\n    x, n = symbols('x n')\n\n    # Equation 1: The total weight before Aaron joined is n * x.\n    # Equation 2: After Aaron joined, the total weight became (n * x + 45), and the average is 61.\n    #             The new number of people is (n + 1).\n    # Equation 3: After Ben joined, the new total weight is (n * x + 45 + 71), and the average is 62.\n    #             The new number of people is (n + 2).\n    \n    equation1 = Eq((n * x + 45) / (n + 1), 61)\n    equation2 = Eq((n * x + 45 + 71) / (n + 2), 62)\n\n    # Solve the simultaneous equations to find the values for x and n.\n    solutions = solve((equation1, equation2), (x, n))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    agnes, george, jack = symbols('agnes george jack')\n    \n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n    \n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n    \n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    bagA_white = 1991\n    bagA_black = 1000\n    bagB_black = 0  # Bag B is starting as empty\n\n    for _ in range(2989):\n        # Since the color drawn does not matter for the count, just decrement by 2\n        bagA_white -= 1\n        bagA_black -= 1\n\n        # Now check what to do based on the event\n        # if both are the same color\n        if bagB_black > 0:\n            bagA_black += 1  # Add one black ball from Bag B to Bag A\n            bagB_black -= 1  # Remove that ball from Bag B\n\n        # if both are different colors, we put back a white ball into Bag A\n        else:\n            bagA_white += 1\n            \n    # Now return the result\n    white_left = \"white\" if bagA_white > bagA_black else \"black\"\n    return (bagA_white + bagA_black, white_left)\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    # The provided pattern suggests a 3-digit number multiplied by a 2-digit number.\n    # Using permutations of all digits from 0-9 for both numbers, avoiding leading zeros.\n    for perm in permutations('123456789', 3):\n        for perm2 in permutations('123456789', 2):\n            multiplicand = int(''.join(perm))\n            multiplier = int(''.join(perm2))\n            product = multiplicand * multiplier\n            # Check if the product is a 4-digit number, as suggested by the underline pattern.\n            if 1000 <= product <= 9999:\n                # Check if all digits are unique across multiplicand, multiplier, and product.\n                all_digits = ''.join(perm) + ''.join(perm2) + str(product)\n                if len(set(all_digits)) == len(all_digits):\n                    return product  # Return the unique 4-digit product.\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n\n    work_done = initial_people * initial_hours\n    required_people = work_done / target_hours\n\n    return required_people\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_n = n * (n + 1) // 2\n    return sum_n\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    meters = 2.1\n    centimeters_per_meter = 100\n    n = meters * centimeters_per_meter\n    return int(n)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30\n    sweets_cost = 3.99\n    magazine_cost = 2.50\n    stickers_cost = 0.70\n    pizza_cost = 10.99\n    orange_juice_cost = 1.50 * 4\n\n    total_spent = sweets_cost + magazine_cost + stickers_cost + pizza_cost + orange_juice_cost\n    change_left = initial_amount - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    # We will iterate through all possible sums that have 2 to 4 terms\n    # because we cannot have more than 4 terms (1+1+1+1+1 = 5, max terms)\n    \n    # Case 1: Split as two numbers\n    for x in range(1, 5):  # iterate from 1 to 4 (the second term will be 5-x)\n        if 5 - x != x:  # the two numbers must be different \n            count += 1\n            \n    # Case 2: Split as three numbers\n    for x in range(1, 5):\n        for y in range(1, 5 - x): # iterate s.t. x+y<5, y<x to avoid repetition\n            z = 5 - x - y\n            if z != x and z != y:\n                count += 1\n                \n    # Case 3: Split as four numbers (fixed: 1+1+1+2 = 5)\n    # Only one way to do this, since all numbers must be different and\n    # there's only one combination that sums to 5 with four distinct non-zero\n    # natural numbers (which are 1, 1, 1 and 2).\n    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for digit in range(2, 10):\n        for middle_digit in range(0, 10):\n            if (digit - 2) >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    han, daughter = symbols('han daughter')\n    equation1 = Eq(han, 3 * daughter)\n    equation2 = Eq(han + daughter, 91.2)\n\n    solutions = solve((equation1, equation2), (han, daughter))\n\n    return float(solutions[han])\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - 2/5)\n    initial_chocolates = remaining_after_students / (1 - 0.8)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Since the question asks for the least number of votes Samantha could have\n    # to be the one with more votes than anyone else, we use the pigeonhole principle.\n    # We assume the other two candidates split the remaining votes evenly. If they have the same number of votes,\n    # say x, then Samantha must have x + 1 votes to have more than either of them.\n    # Hence, for Samantha to have more votes and considering there are 25 votes total, the other two can have at most\n    # 24 // 3 = 8 votes each (since 25 - 1 for Samantha = 24, then distributed equally among 2 gives 24 // 2).\n    # With 8 votes each for the other two candidates, Samantha must have at least 8 + 1 = 9 votes.\n\n    votes_for_others = (25 - 1) // 3  # -1 for Samantha's minimum vote\n    min_votes_for_samantha = votes_for_others + 1\n    return min_votes_for_samantha\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    # There are three types of coins\n    coins = [1, 2, 5]\n    # Set to keep track of different totals\n    unique_totals = set()\n\n    # Try every combination of three coins\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                # Add the sum of the three coins to the set\n                unique_totals.add(c1 + c2 + c3)\n\n    # The number of unique totals is the length of the set\n    return len(unique_totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for page in range(1, 131):\n        count += str(page).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # defining the principal, final amount and number of years\n    P = 6000\n    A = 8029.35\n    n = 5\n    \n    # defining the symbol for the unknown variable x (the interest rate)\n    x = symbols('x')\n    \n    # compound interest formula: A = P * (1 + r/n)^(nt), here r = x/100, n = 1 for annually compounded\n    equation = Eq(P * (1 + x/100)**n, A)\n    \n    # solving for x\n    interest_rate = solve(equation, x)\n    \n    return interest_rate[0]\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits_used = 0\n    \n    while digits_used < 291:\n        pages += 1\n        digits_used += len(str(pages))\n    \n    if digits_used > 291:\n        pages -= 1\n        \n    return pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money = 1500\n    chairs_money = 360\n\n    percent_spent_on_chairs = (chairs_money / total_money) * 100\n\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pages = symbols('total_pages')\n    # Let the initial number of pages read be x,\n    # then total_pages - x is the number of pages not read,\n    # and according to the ratio, x = (total_pages - x) / 5 \n    # After reading another 80 pages, x + 80 = 0.7 * total_pages\n    # We now set these into equations and solve for total_pages\n\n    x = (total_pages - 80) / 6  # x is redefined here representing the original pages read\n    \n    # Set up the equations based on the problem statement\n    equation = Eq(x + 80, 0.7 * total_pages)\n\n    # Solve the equation\n    solution = solve(equation, total_pages)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of correct answers for Vivi and y be the number for CC\n    # 10x - 5(10 - x) + 10y - 5(10 - y) = 95\n    # 10x - 50 + 5x + 10y - 50 + 5y = 95\n    # 15x + 15y = 195\n    # x + y = 13 (1)\n\n    # Vivi got 15 more points than CC\n    # 10x - 5(10 - x) = 10y - 5(10 - y) + 15\n    # 10x - 50 + 5x = 10y - 50 + 5y + 15\n    # 15x = 15y + 15\n    # x = y + 1 (2)\n\n    # Solve the system of equations\n    # x + y = 13\n    # x = y + 1\n\n    # Using substitution\n    # (y + 1) + y = 13\n    # 2y + 1 = 13\n    # 2y = 12\n    y = 12 // 2\n\n    # y is the number of correct answers for CC\n    return y\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one book and y be the cost of one magazine\n    x, y = symbols('x y')\n\n    # Equation based on the given information\n    equation1 = Eq(2*x + 3*y, 24.90)\n    equation2 = Eq(x + y, 10)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teacher_rooms = 3\n\n    # Calculate the number of rooms required for the girls\n    rooms_for_girls = girls // girls_per_room\n\n    # Calculate the total number of rooms used by both teachers and girls\n    total_rooms = rooms_for_girls + teacher_rooms\n    \n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_for_15 = 650\n    people = 18\n\n    flour_per_person = flour_for_15 / 15\n    flour_for_18 = flour_per_person * people\n\n    return flour_for_18\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n\n    total_cost = (2 * adult_ticket_price) + (3 * child_ticket_price)\n    \n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    num_str = '2581953752'\n    min_sum = float('inf')\n\n    # Iterate through all combinations of two cuts on the number sequence\n    for i in range(1, len(num_str) - 1):\n        for j in range(i + 1, len(num_str)):\n            # Cut the number into three parts and convert to int\n            part1 = int(num_str[:i])\n            part2 = int(num_str[i:j])\n            part3 = int(num_str[j:])\n            \n            # Calculate the sum of the parts and check if it's the smallest found\n            current_sum = part1 + part2 + part3\n            min_sum = min(min_sum, current_sum)\n\n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x and y be the two original numbers\n    x, y = symbols('x y')\n    \n    # The sum of x and y is 11.63\n    equation1 = Eq(x + y, 11.63)\n    \n    # After the accidental shift of the decimal point to the left in y\n    equation2 = Eq(x + y/10, 5.87)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate one hundred times the difference between the two original numbers\n    difference = abs(solutions[x] - solutions[y])*100\n    \n    return float(difference)\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_in_m = 1000\n    ans = 7000000 / mm_in_m\n    return ans\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    # let the common ratio multiplier for science to literature be x\n    # hence, the ratio for science will be 9x\n    # and for literature it will be 10x\n    # For literature to math the common ratio multiplier shall be y\n    # hence, for literature it will be 5y which is also equal to 10x from the above\n    # and for math it will be 7y\n    # Adding all members gives us 9x + 10x + 7y = 99 members in total\n    # Additionally, we have 10x = 5y, which results from the members of literature being the same in both ratios\n    # from 10x = 5y, we get y = 2x\n    # replacing y in the total members equation gives us 9x + 10x + 7(2x) = 99\n    # simplifying we get 9x + 10x + 14x = 99\n    # and even further, 33x = 99\n    # from which we get x = 99 / 33 = 3\n    # now if x is 3, then from y = 2x, we get y = 2 * 3 = 6\n    # so members of math club = 7y = 7 * 6 = 42\n    # and members of literature club = 10x = 10 * 3 = 30\n    # the difference is members of math club - members of literature club = 42 - 30 = 12\n    members_difference = (7 * (99 / 33 * 2)) - (10 * (99 / 33))\n    return int(members_difference)\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # If we take one marble of each color, we will have taken 3 marbles, \n    # but this does not guarantee 3 of the same color.\n    # To be sure to have 3 of the same color, we must consider the worst case scenario:\n    # - We could take all 3 yellow marbles, this gives us only 2 marbles of the same color.\n    # - To be sure to have 3 of the same color, we must then take at least 1 blue marble.\n    # - At this point, we have at least 2 blue and 3 yellow, but we still can't be sure to have 3 of the same color.\n    # - Taking one more marble ensures that we will either have 3 blues or 3 yellows. \n    \n    # So in the worst case, we first take 3 yellows, then 2 blues, \n    # and one more marble will guarantee 3 of the same color.\n    # That's a total of 3 + 2 + 1 = 6 marbles.\n\n    return 3 + 2 + 1\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n\n    # When Melissa was 8, her mother was 32\n    equation1 = Eq(mother_now - melissa_now, 32 - 8)\n    # Now, Melissa's mother is three times as old as Melissa\n    equation2 = Eq(mother_now, 3 * melissa_now)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n\n    # Returning Melissa's current age\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    flowers_per_side = 6\n    corner_flowers = 4\n\n    # Subtracting the corner flowers since they are counted on two sides\n    flowers_per_side_excluding_corners = (flowers_per_side - 1) * 4\n\n    # Adding the corner flowers back to get the total\n    total_flowers = flowers_per_side_excluding_corners + corner_flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    factors = [i for i in range(1, 49) if 48 % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    initial_length = 10.0\n    pieces = [4.8, 2.73]\n    remaining_length = initial_length - sum(pieces)\n    pieces.append(remaining_length)\n    longest_piece = max(pieces)\n    shortest_piece = min(pieces)\n    difference = longest_piece - shortest_piece\n    return difference\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of a volleyball\n    x = symbols('x')\n    # A basketball costs $10 more than a volleyball (x+10)\n    # 5 basketballs and 6 volleyballs cost $325\n    equation = Eq(5 * (x + 10) + 6 * x, 325)\n    # Solve for the price of a volleyball\n    volleyball_price = solve(equation, x)[0]\n    # Calculate the price of a basketball\n    basketball_price = volleyball_price + 10\n    \n    return basketball_price\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    total_digits = 47\n\n    full_repeats = total_digits // len(pattern) \n    partial_pattern_length = total_digits % len(pattern)\n    \n    sum_full_repeats = sum(map(int, pattern)) * full_repeats\n    sum_partial_pattern = sum(map(int, pattern[:partial_pattern_length]))\n\n    total_sum = sum_full_repeats + sum_partial_pattern\n\n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    cost_for_nine_bottles = cost_per_bottle * 9\n    return cost_for_nine_bottles\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Let the initial amount of money Li Yan had be x.\n    # Money spent on the book = 1/3 * x\n    # Remainder after buying the book = x - (1/3 * x) = 2/3 * x\n    # Money spent on the bag = 1/2 * (2/3 * x) = 1/3 * x\n    # Total cost of book and bag = 132\n    # According to the problem: (1/3 * x) + (1/3 * x) = 132\n    # Simplifying the equation: (2/3 * x) = 132\n    # Find initial amount of money x\n    x = 132 / (2/3)\n    return x\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    total_pencils = 35 * total_pupils\n    boy_average = 20\n    girl_average = 60\n    \n    # Let b be the number of boys\n    # Total number of pencils by boys = b * boy_average\n    # Total number of pencils by girls = (total_pupils - b) * girl_average\n    # We can set up the following equation based on average pencils per pupil:\n    # b * boy_average + (total_pupils - b) * girl_average == total_pencils\n    \n    b = symbols('b')\n    equation = Eq(b * boy_average + (total_pupils - b) * girl_average, total_pencils)\n    boy_count = solve(equation, b)\n    \n    return boy_count[0]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_points = 61\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -1\n\n    # Assume Jack got x questions correct, and did not answer y questions. \n    # Then, Johnson got (x-1) questions correct and also did not answer y questions,\n    # because we know that Jack answered more questions correctly than Johnson.\n\n    # From the problem, we have the equation for Jack:\n    # 4x - (25 - x - y) = 61\n    # Simplifying, we get 5x - 25 + y = 61\n    # Hence, x - y = 17       ---- (1)\n\n    # Now, for Johnson we have a similar equation:\n    # 4(x-1) - (25 - (x-1) - y) = 61\n    # Simplifying, we get 5x - 29 + y = 61\n    # Hence, x - y = 18       ---- (2)\n\n    # Subtracting equation (1) from (2), we get:\n    # (x - y) - (x - y) = 18 - 17\n    # 0 = 1, which is a contradiction, suggesting a mistake in our assumptions.\n\n    # We reconsider our equations for Jack and Johnson:\n    # Jack: 4x - (25 - x - y) = 61 gives 5x + y = 86    ---- (3)\n    # Johnson must have answered at least one question less correctly than Jack,\n    # so, we consider he answered x-2 correctly and still did not answer y questions.\n    # Johnson: 4(x-2) - (25 - (x-2) - y) = 61 gives 5x + y = 90    ---- (4)\n\n    # From (3) and (4) we get that y = 90 - 86 = 4\n\n    # So Jack did not answer 4 questions.\n    y = 4\n\n    return y\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Constants for the problem\n    base_price_per_cupcake = 4.50\n    shipping_handling = 12.00\n    discount_rate = 0.20\n    total_bill = 120.00\n    \n    # Calculate the number of cupcakes if there were no discount applied\n    # Total bill for 20 or fewer cupcakes is price per cupcake * number of cupcakes + shipping\n    max_cupcakes_without_discount = (total_bill - shipping_handling) // base_price_per_cupcake\n    \n    # If max_cupcakes_without_discount is <= 20, that's the answer\n    if max_cupcakes_without_discount <= 20:\n        return int(max_cupcakes_without_discount)\n    \n    # Otherwise, calculate the number of cupcakes when more than 20 cupcakes are ordered\n    # The price for the first 20 cupcakes\n    base_cost = 20 * base_price_per_cupcake + shipping_handling\n    \n    # Price per cupcake after discount for additional cupcakes over 20\n    discounted_price_per_cupcake = base_price_per_cupcake * (1 - discount_rate)\n    \n    # Calculate the number of additional cupcakes by subtracting base_cost from total bill and\n    # dividing by the discounted price per cupcake\n    additional_cupcakes = (total_bill - base_cost) / discounted_price_per_cupcake\n    \n    # The total number of cupcakes is 20 (base) plus any additional cupcakes\n    total_cupcakes = 20 + additional_cupcakes\n    \n    return int(total_cupcakes)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n\n    equation1 = Eq(3 * pigs + goats, 440)\n    equation2 = Eq(pigs + 2 * goats, 280)\n\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    total_cost = 5 * solutions[pigs] + 5 * solutions[goats]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds = 1.28\n    pence_to_pounds = 57 / 100\n    total = pounds + pence_to_pounds\n    return total\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    frac_value = 1 / (1/3)\n    return frac_value\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) * 3 == int(str(num) + '1'):\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n\n    total_people = people_in_front + position_from_back - 1  # Subtract 1 because Rose is counted twice\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    # Let x be the time it takes for the lazy decorator to paint the house alone\n    # 1/x is the work rate of the lazy decorator, 1/10 is the work rate of the energetic one\n    # 1/6 is their combined work rate when working together\n    # As work rate is additive, we have 1/x + 1/10 = 1/6\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/x + 1/10, 1/6)\n    \n    days_lazy = solve(equation, x)[0]\n    \n    return days_lazy\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the unknown number\n    x = symbols('x')\n\n    # Create the equation based on the problem statement\n    equation = Eq((x + 45) / 3, 2 * x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result_number = 52\n    thought_number = (result_number - 10) // 2\n    return thought_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Since each brother has at least two books, we start from 2 books for each\n    for x1 in range(2, 11):\n        for x2 in range(2, 11):\n            for x3 in range(2, 11):\n                if x1 + x2 + x3 == 10:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Drawing the maximum number of marbles without ensuring 4 different colors:\n    # All 3 red marbles, all 8 yellow marbles, and all 9 blue marbles. Total = 3 + 8 + 9\n    max_without_4_colors = 3 + 8 + 9\n\n    # Drawing one more marble will ensure the fourth color\n    ans = max_without_4_colors + 1\n\n    return ans\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    num = int('5' * 19 + '0' + '9' * 19)\n    for digit in range(10):\n        if (num + digit * 10**19) % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1/5\n\n    total_pages = pages_first_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Since children are sorted by height and no two children have the same height,\n    # Tom's maximum possible height would be just below the last child's height.\n    # As the last child is 131cm tall, and there are 31 children,\n    # the height of children must start from at least 131 - 30 = 101 to ensure all are of different height.\n    # Tom is the 10th in line, so the maximum height he could have while maintaining the condition\n    # would be his position plus the starting height minus 1 (since height are whole numbers and unique).\n    tom_position = 10\n    starting_height = 131 - (31 - 1)\n    tom_maximum_height = starting_height + tom_position - 1\n    return tom_maximum_height\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    return 9  # 16, 26, ..., 96\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    last_purchase = 105.6 - 14.4\n    total_spent = last_purchase + 105.6\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let x be the original number of storybooks Anthea has.\n    # Then Jason has 30 storybooks.\n    # According to the problem, if Jason gives Anthea 4 storybooks:\n    # Jason will have 30 - 4 = 26 storybooks left.\n    # Anthea will have x + 4 storybooks.\n    \n    # Since both will have the same number after transferring the books:\n    # 26 = x + 4\n    # Therefore, x = 26 - 4\n    x = 26 - 4\n    \n    # The difference between Jason and Anthea's original number of storybooks:\n    difference = 30 - x\n    \n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2023 - 2):\n        a, b = b, a + b\n        # Reduce the large number to its remainder when divided by 3\n        a %= 3\n        b %= 3\n    ans = a % 3\n    return ans\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 208\n    second_number = 136\n\n    equation = Eq((first_number - magic_number), 9 * (second_number - magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    students = symbols('students')\n\n    equation1 = Eq(5 * students + 3, 4 * students + 9)\n\n    sol = solve((equation1), (students))\n\n    return sol[0]\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    num = 840\n    count = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bella, chloe = symbols('alan bella chloe')\n\n    equation1 = Eq(alan / bella, 4 / 3)\n    equation2 = Eq(alan - chloe, 20)\n    equation3 = Eq(alan + bella + chloe, 200)\n    \n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    chocolate_bar_each = 1.83\n    total_cost = box_of_chocolates + (2 * chocolate_bar_each)\n    paid = 20\n    change = paid - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    import math\n    # There are 3 positions between Lily (fixed on the left end) and her mother (fixed on the right end).\n    # We need to arrange the other 3 family members in those places.\n    \n    # Number of ways to arrange 3 people in 3 positions is 3! (factorial of 3)\n    num_ways = math.factorial(3)\n    \n    return num_ways\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    digits = range(1, 9)  # 1 to 8\n    all_numbers = [10 * a + b for a, b in permutations(digits, 2)]  # All 2-digit numbers with no repetition\n    \n    # Smallest number: ones digit is twice the tens digit.\n    smallest_numbers = {n for n in all_numbers if n % 10 == 2 * (n // 10)}\n    \n    # Largest number: sum of digits is 9.\n    largest_numbers = {n for n in all_numbers if (n % 10) + (n // 10) == 9}\n    \n    # Second largest number: tens digit is 5 more than the ones digit.\n    second_largest_numbers = {n for n in all_numbers if (n // 10) == 5 + (n % 10)}\n    \n    # Only 1 odd number among the 4 numbers. \n    odd_numbers = {n for n in all_numbers if n % 2 == 1}\n    even_numbers = {n for n in all_numbers if n % 2 == 0}\n\n    # Find the set of four numbers with one odd and meeting all conditions.\n    for num1 in smallest_numbers:\n        for num4 in largest_numbers:\n            if num1 >= num4:  # Smallest must be less than largest\n                continue\n            for num3 in second_largest_numbers:\n                if num3 <= num1 or num3 >= num4:\n                    continue\n                # Now ensure there's only one odd number among the 3 we've chosen\n                odds = len({num1, num3, num4} & odd_numbers)\n                if odds != 1:  # There can be only one odd number\n                    continue\n                for num2 in even_numbers:\n                    if num2 <= num1 or num2 >= num3 or num2 >= num4 or num2 in {num1, num3, num4}:\n                        continue\n                    return num2  # Our second smallest number\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    diff = 4\n    last_term = 99\n    num_rows = ((last_term - first_term) // diff) + 1\n    total_seats = (num_rows * (first_term + last_term)) // 2\n    \n    return total_seats\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for i in range(10, 100):  # Smallest two-digit number is 10, largest is 99.\n        if i % 5 == 4 and i % 7 == 4:\n            return i\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Initial average and number of values\n    initial_average = 120\n    num_values_initial = 3\n\n    # New average with the additional number\n    new_average = 150\n    num_values_new = 4\n\n    # Using the formula:\n    # initial_average * num_values_initial + fourth_number = new_average * num_values_new\n    fourth_number = new_average * num_values_new - initial_average * num_values_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    correct_sum = sum([i**2 for i in range(5, 16)])\n    kimmy_sum = (15*16*31)//6\n    return correct_sum if correct_sum != kimmy_sum else kimmy_sum\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of visitors\n    x = symbols('x')\n\n    # Calculate the number of children\n    children = (3/5) * x\n\n    # Remaining visitors are\n    remaining = x - children\n\n    # Out of the remaining, half were men\n    men = (1/2) * remaining\n\n    # Given that there were 140 more children than men\n    equation = Eq(children, men + 140)\n\n    # Solve equation for the total number of visitors x\n    total_visitors = solve(equation, x)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the number of stickers Sam originally had, and p be the number Peter originally had\n    s, p = symbols('s p')\n\n    # We create two equations based on the problem statement\n    equation1 = Eq(s, p + 40)              # Sam had 40 stickers more than Peter initially\n    equation2 = Eq(s - 0.20 * s + 0.25 * p, p + 0.20 * s - 0.25 * p + 96)   # The final comparison after exchange\n\n    # Solve the equations for s and p\n    solutions = solve((equation1, equation2), (s, p))\n\n    # Since we're interested in Peter's initial number of stickers, we return the value of p\n    return solutions[p]\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    total_questions = 20\n    score_for_correct = 5\n    score_for_wrong = -2\n\n    # Let x be the number of questions Olivia answers correctly, then (total_questions - x) will be the number of wrong answers.\n    \n    # Set up the equation based on the total score\n    for x in range(total_questions + 1):  # x can be from 0 to total_questions\n        if (x * score_for_correct) + ((total_questions - x) * score_for_wrong) == 51:\n            return x\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount of money Amy had\n    x = symbols('x')\n\n    # After spending 6/11 of her money and an additional $5, the remainder is (5/11)x - 5\n    remainder_after_highlighters = (5/11)*x - 5\n    \n    # She then spends 3/10 of the remainder and an additional $12\n    # So the final amount she has is: remainder_after_highlighters - (3/10)*remainder_after_highlighters - 12\n    final_amount = remainder_after_highlighters - (3/10)*remainder_after_highlighters - 12\n\n    # But we know the final amount is $30, so we set up the equation final_amount = 30\n    equation = Eq(final_amount, 30)\n\n    # We solve for x\n    original_amount = solve(equation, x)[0]\n    \n    return original_amount\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n\n    actual_subtrahend = 75\n    minuend = mistaken_subtrahend + mistaken_result\n\n    correct_result = minuend - actual_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = (3 * 4) // math.gcd(3, 4)  # Least common multiple of 3 and 4\n    count = 40 // lcm  # Number of customers that received both\n    return count\n\nimport math\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Sally's and Gillian's current ages\n    sally, gillian = symbols('sally gillian')\n\n    # Given present age ratios and future ratio after 15 years\n    present_ratio = Eq(sally / gillian, 2 / 7)\n    future_ratio = Eq((sally + 15) / (gillian + 15), 1 / 2)\n\n    # Solve the system of equations\n    solutions = solve((present_ratio, future_ratio), (sally, gillian))\n\n    # Sally's age is the first variable in the solution tuple\n    return int(solutions[sally])\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    weight_per_apple = 1 / 9 \n    total_apples = 8 / weight_per_apple\n    cakes_baked = total_apples / 4\n    return int(cakes_baked)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    # Given that (box/9)*45 = 35,\n    # we can isolate 'box' in the equation by multiplying both sides by the reciprocal of 45/9.\n\n    box = 35 * (9/45)\n    # Simplifying this gives us the value in the box.\n    return box\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    number_of_seeds = 12\n    total_distance = distance_between_seeds * number_of_seeds\n\n    # The total distance around the circle is the circumference\n    circumference = total_distance\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    result = (3/8) * 32\n    return result\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    avg_boys_score = 10\n    total_participants = total_boys + 8\n    avg_total_score = 14\n    \n    total_score_boys = total_boys * avg_boys_score\n    total_score_all = total_participants * avg_total_score\n    \n    total_score_girls = total_score_all - total_score_boys\n    avg_girls_score = total_score_girls / 8\n    \n    return avg_girls_score\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Let x be the number of pieces of paper that were cut into three parts\n    # Initially, there were 10 pieces of paper\n    # After cutting x pieces into three parts, each piece becomes 3 pieces\n    # So we have 10 - x pieces that were not cut, and 3x pieces that were cut\n    # Total pieces after cutting = (10 - x) + 3x = 10 + 2x\n    # We know that the total pieces of paper after cutting is 16\n    # So, setting up the equation: 10 + 2x = 16\n    # Solving for x gives us the number of pieces that were cut into three parts\n    \n    x = (16 - 10) // 2\n    return x\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # The number of students before adding a row and a column can be expressed as n^2 + 9,\n    # where n is the number of students in one row or column of the square array.\n\n    # After adding a row and a column, the new number of students can be expressed as (n+1)^2, \n    # and we need 16 more students for this, so we have (n + 1)^2 = n^2 + 9 + 16.\n\n    # Now we will find the value of n that satisfies this equation\n    n = 1\n    while True:\n        if (n + 1)**2 == n**2 + 9 + 16:\n            break\n        n += 1\n    \n    # The total number of students before adding a row and column is n^2 + 9.\n    total_students = n**2 + 9\n\n    return total_students\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # The first division has 5 envelopes of equal number of postcards\n    # Let the number of postcards in each envelope be x\n    # Total postcards after the first division = x * 5 = 50\n\n    # After receiving more postcards, Lily divides the new postcards into 2 envelopes\n    # These 2 envelopes should have the same number of postcards as the earlier 5 envelopes\n    # So, the new envelopes will also contain x postcards each\n\n    # Since the total postcards initially were 50, and they filled 5 envelopes, we can find x\n    x = 50 / 5\n\n    # The final total number of postcards will be the initial 50 plus the additional postcards in 2 envelopes\n    # The total number of postcards will then be 50 + 2 * x\n    total_postcards = 50 + 2 * x\n\n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]  # Representing pence\n\n    for smallest_coin in coins:\n        for second_smallest in coins:\n            # The change must be composed of pairs of coins with at least one being the smallest.\n            if smallest_coin <= second_smallest:\n                count = 2 * (smallest_coin + second_smallest)\n                if count == 250:\n                    return smallest_coin / 100\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 80 / 100  # Convert pence to pounds\n    cost_per_1g = cost_per_100g / 100  # Cost for 1 gram\n    cost_for_250g = cost_per_1g * 250  # Cost for 250 grams\n\n    return cost_for_250g\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    # Let's denote the initial number of cookies as x.\n    # According to the problem:\n    # (3/5)x cookies were burnt\n    # (2/5)x cookies remained\n    # 75% of the remaining cookies were sold, that is 0.75 * (2/5)x = (3/10)x\n    # The burnt cookies are 42 more than the sold cookies.\n    # So, (3/5)x = (3/10)x + 42\n    # Solve for x\n\n    # (3/5)x - (3/10)x = 42\n    # (6/10)x - (3/10)x = 42\n    # (3/10)x = 42\n    # x = 42 / (3/10)\n    # x = 42 * (10/3)\n    # x = 14 * 10\n    # x = 140\n\n    x = (42 * 10) / 3\n    return int(x)\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2) ** 2) / (-1.8) - (41.08 - (-2/5) ** 2) / (3 + (-2) ** 3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n\n    containers_needed = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return containers_needed\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10**5):  # a reasonably large upper limit to search for the number\n        original_number = i\n        units_digit = original_number % 10\n        if units_digit != 9:\n            continue\n        new_number = int(str(units_digit) + str(original_number)[:-1])\n        if new_number == original_number * 4:\n            return original_number\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        number = int(\"107\" + str(y))\n        if number % 6 == 0:\n            return y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):  # 2-digit numbers start at 10 and end at 99\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "from math import factorial\n\ndef solution():\n    # Laura must stand in the front, so there is only 1 way for Laura.\n    # There are 6 students in total, 1 spot is taken by Laura, so there are 5 spots left.\n    # Rita cannot stand at the end, so she has 4 spots to choose from.\n    # The remaining 4 students can be arranged in any order in the remaining 4 spots.\n    \n    rita_options = 4\n    other_students_arrangements = factorial(4)  # The arrangements of the other 4 students\n    \n    total_ways = rita_options * other_students_arrangements\n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Jerry travels three-sevenths of the distance, which means Kevin travels four-sevenths of the distance\n    # Their time of travel before meeting is the same, and so their speeds ratio should be reciprocal of the distance ratio\n    # Speed ratio of Kevin to Jerry is 4/3 (since Kevin travels four-sevenths and Jerry three-sevenths of the road)\n\n    kevin_speed = 80  # Kevin's speed in mph\n    # Calculate Jerry's speed using the ratio of speeds (4/3)\n    jerry_speed = kevin_speed * (3 / 4)\n\n    # Jerry travels the road in 1 hour\n    # Since Jerry travels 3/7 of the road in the same time Kevin travels 4/7\n    # Let x be the length of the road. Then jerry_speed = (3/7)*x, and time is 1 hour\n    # To find x, we rearrange the equation: x = (7/3) * jerry_speed\n\n    road_length = (7/3) * jerry_speed\n\n    return road_length\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    def new_operation(a, b):\n        return (a + b) * a\n\n    ans = new_operation(4, 7)\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    first_discount = 0.50 # 50% discount\n    additional_discount = 0.20 # Extra 20% discount if at least 5 items are bought\n\n    # Calculate the price after the first discount\n    price_after_first_discount = regular_price * (1 - first_discount)\n\n    # Calculate the price after the additional discount\n    final_price = price_after_first_discount * (1 - additional_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    # Buzz is three times as heavy as Jessie\n    equation1 = Eq(buzz, 3 * jessie)\n    # Buzz is 450g heavier than Jessie\n    equation2 = Eq(buzz - jessie, 450)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction = 4 / 7\n\n    total_apples = sold_apples / fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Singapore time when the plane took off\n    sg_departure = datetime(year=2023, month=8, day=24, hour=5, minute=0)\n    \n    # London time when the plane landed\n    london_arrival = datetime(year=2023, month=8, day=24, hour=11, minute=0)\n    \n    # Convert Singapore departure time to London time\n    london_departure = sg_departure - timedelta(hours=7)\n    \n    # Calculate flight duration\n    flight_duration = london_arrival - london_departure\n    \n    # Get the total flight duration in hours\n    ans = flight_duration.total_seconds() / 3600\n    \n    return ans\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    prob_win = 0.3\n    prob_draw = 0.1\n    prob_lose = 1 - (prob_win + prob_draw)\n\n    # Probability of winning exactly one game can happen in two ways:\n    # 1. Sally wins the first and loses/draws the second\n    # 2. Sally loses/draws the first and wins the second\n\n    # Using the law of addition for mutually exclusive events:\n    prob_win_one = (prob_win * (prob_lose + prob_draw)) + (prob_lose + prob_draw) * prob_win\n\n    return prob_win_one\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # Let x be the number of lollipops Jonathan has\n    for x in range(1, 1000):  # Adjust the range as needed\n        if (x - 32) % 4 == 0 and (x - 3) % 7 == 0:\n            return x\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys  # Since there are 40 pupils total\n\n    # The total number of pencils for boys and girls\n    total_pencils = 35 * 40\n    # The total number of pencils owned by boys\n    total_boys_pencils = 20 * boys\n    # The total number of pencils owned by girls\n    total_girls_pencils = 60 * girls\n\n    # Equation based on the total pencils owned by boys and girls\n    equation = Eq(total_boys_pencils + total_girls_pencils, total_pencils)\n\n    solution = solve(equation, boys)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    recurring_cycle = \"076923\"  # The recurring cycle of 1/13 in decimal\n    position_in_cycle = (2012 - 1) % len(recurring_cycle)\n    return int(recurring_cycle[position_in_cycle])\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n\n    a = 2010\n    b = 2377\n    c = 3111\n\n    # Calculate the differences between the numbers\n    ab_diff = abs(a - b)\n    bc_diff = abs(b - c)\n    ca_diff = abs(c - a)\n\n    # Calculate the greatest common divisor of the differences\n    # The GCD of the differences gives the largest D\n    D = gcd(ab_diff, gcd(bc_diff, ca_diff))\n\n    # Since the remainder is the same when each number is divided by D,\n    # we can just take one number and calculate the remainder.\n    R = a % D\n\n    return D + R\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if (i // 10 + i % 10) % 5 == 0:  # i // 10 is the first digit, i % 10 is the second digit\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_marbles = (5 / 6) * blue_marbles\n    green_marbles = red_marbles / 2\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    # Let's represent Eddi's original number of cards as 8x and Wiya's as 7x\n    # After Eddi gives Wiya 4 cards, Eddi has 8x - 4 cards and Wiya has 7x + 4\n    # The new ratio should be 18:17, hence (8x - 4) / (7x + 4) = 18 / 17\n    # Solving this equation will give us the value of x\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((8*x - 4) / (7*x + 4), 18/17)\n\n    solution = solve(equation, x)\n\n    # Eddi's original number of cards is 8 times x\n    eddis_cards = 8 * solution[0]\n\n    return eddis_cards\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    from fractions import Fraction\n\n    result = ((Fraction(16159, 8) * Fraction(11, 3)) -\n              (Fraction(80755, 40) * Fraction(11, 3))) / \\\n             ((Fraction(6051, 3) - Fraction(80755, 40)) * 17) * \\\n             Fraction(119, 32)\n\n    return float(result)\n\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students originally in Class B\n    # Therefore, Class A has x + 47 students\n    # After moving y students from Class A to Class B, we get the following equations:\n    # New number of students in Class A: x + 47 - y\n    # New number of students in Class B: x + y\n    # According to the problem, Class A has 9 more students than Class B, we get:\n    # x + 47 - y = x + y + 9\n    # Solving for y gives us y = (47 - 9) / 2 = 19\n    y = (47 - 9) // 2\n    return y\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - (piece1 + piece2)\n    return piece3\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 31):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * (120 / 100)\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let's denote the smaller number as x and the larger as y.\n    # According to the given, y - x = 57 (difference)\n    # and x + y = 77 (sum)\n\n    # We can now express y in terms of x using the first equation: y = x + 57\n    # Now we substitute y in the second equation:\n    # x + (x + 57) = 77 -> 2x + 57 = 77 -> 2x = 20 -> x = 10\n\n    # So the smaller number is 10.\n    return 10\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    # Initialize the count to 0.\n    count = 0\n    \n    # The numbers range from 1 to 999.\n    for number in range(1, 1000):\n        # Convert the number to string to examine its digits.\n        number_str = str(number)\n        # Check if all digits are odd using all() function.\n        if all(int(digit) % 2 == 1 for digit in number_str):\n            count += 1  # It's an oddtastic number.\n    \n    return count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(1, 10, 2):  # step of 2 to ensure it's an odd number\n                if hundreds + tens + ones == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_cost_pence = total_cost_pounds * 100 # Convert pounds to pence\n    total_avocados = total_pairs * 2  # Each pair contains 2 avocados\n\n    cost_per_avocado = total_cost_pence / total_avocados\n\n    return cost_per_avocado\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    # Speed of the golden rabbit (m/min)\n    speed_rabbit = 330\n    # Speed of the sea turtle (m/min)\n    speed_turtle = 30\n    # Total distance of the race (m)\n    race_distance = 6990\n    # Time when the rabbit starts to sleep (min)\n    sleep_start_time = 10\n    # Duration of the rabbit's sleep (min)\n    sleep_duration = 215\n    \n    # Distance the rabbit ran before sleeping (m)\n    distance_rabbit_before_sleep = speed_rabbit * sleep_start_time\n    \n    # Time the turtle needs to finish the race (min)\n    total_time_turtle = race_distance / speed_turtle\n    \n    # Time the rabbit needs to finish the race without sleeping (min)\n    total_time_rabbit_without_sleep = race_distance / speed_rabbit\n    \n    # Time the rabbit actually spent running (not sleeping, min)\n    actual_running_time_rabbit = total_time_rabbit_without_sleep - sleep_duration\n    \n    # If the rabbit finishes the race in less time than the turtle,\n    # we need to calculate the distance between them when the rabbit finishes.\n    if actual_running_time_rabbit < total_time_turtle:\n        # The time when the rabbit reaches the finish line:\n        rabbit_finish_time = sleep_start_time + sleep_duration + actual_running_time_rabbit\n        # The distance the turtle ran when the rabbit finishes (m)\n        distance_turtle_when_rabbit_finishes = speed_turtle * rabbit_finish_time\n        # Calculate the distance between them (m)\n        distance_between_them = race_distance - distance_turtle_when_rabbit_finishes\n        \n        return (\"Rabbit\", distance_between_them)\n    \n    # If the turtle finishes the race in less time than the rabbit,\n    # we need to calculate the distance between them when the turtle finishes.\n    else:\n        # The time when the turtle reaches the finish line:\n        turtle_finish_time = total_time_turtle\n        # The time the rabbit was actually running when the turtle finishes (min)\n        actual_rabbit_running_time_when_turtle_finishes = turtle_finish_time - sleep_start_time - sleep_duration\n        # The distance the rabbit ran when the turtle finishes (m)\n        distance_rabbit_when_turtle_finishes = distance_rabbit_before_sleep + speed_rabbit * actual_rabbit_running_time_when_turtle_finishes\n        # Calculate the distance between them (m)\n        distance_between_them = race_distance - distance_rabbit_when_turtle_finishes\n        \n        return (\"Turtle\", distance_between_them)\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    # Initialize a Counter to store the frequency of each total score\n    score_frequency = Counter()\n\n    # Loop over all possible outcomes of the first die\n    for die1 in range(1, 7):\n        # Loop over all possible outcomes of the second die\n        for die2 in range(1, 7):\n            # Calculate the total score and update its frequency\n            total_score = die1 + die2\n            score_frequency[total_score] += 1\n\n    # Find the total score with the maximum frequency\n    most_likely_total_score = max(score_frequency, key=score_frequency.get)\n\n    return most_likely_total_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    total_score = 36 * 89\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n    \n    num_girls = solve(equation, girls)[0]\n    \n    return num_girls\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    # Let's denote the number of rhinos as r, the number of deer as d, and the number of ostriches as o.\n    # We know from the problem statement that:\n    # r = d\n    # The total number of heads is 28, which gives us:\n    # r + d + o = 28 -> (1)\n    # Rhinos and deer have 4 legs each, and ostriches have 2 legs each. The total number of legs is 88:\n    # 4r + 4d + 2o = 88 -> (2)\n    # Using the fact that r = d, we can substitute d for r:\n    # 4r + 4r + 2o = 88\n    # 8r + 2o = 88 -> (3)\n    # We have two equations (1) and (3) with two unknowns r and o:\n    # From equation (1) -> o = 28 - 2r\n    # Substituting o from equation (1) into equation (3):\n    # 8r + 2(28 - 2r) = 88\n    from sympy import symbols, Eq, solve\n\n    r, o = symbols('r o')\n    equation1 = Eq(r + r + o, 28)\n    equation3 = Eq(8*r + 2*o, 88)\n    solutions = solve((equation1, equation3), (r, o))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # Each square table has 4 people sitting, one on each side\n    people_per_table = 4\n\n    # Eight square tables are put together in a row\n    total_tables = 8\n\n    # People at the ends are not shared by any two tables\n    people_at_the_ends = 2\n\n    # Maximum number of people sitting around the long table\n    max_people = people_per_table * total_tables + people_at_the_ends\n\n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n\n    # Andrew has 30 marbles less than the average of Boris, Jeffery and Xavier\n    equation1 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n\n    # Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(xavier, 3 * andrew)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n\n    # we express Boris and Jeffery in terms of Andrew and solve for Andrew using equation2\n    boris_jeffery_sum = solutions[boris] + solutions[jeffery]\n\n    # Since we have two variables (boris and jeffery) and one equation, we return the expression in terms of andrew\n    return boris_jeffery_sum.subs(andrew, solutions[andrew])\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    pages = 0\n    digits = 0\n\n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    # To have 15 factors, the prime factorization of the number must be in the form of p^14 or p^4 * q^1.\n    # Because 15 is a factor of the number, the prime factorization of the number must include 3 and 5.\n    # So we need to check numbers of the form 3^x * 5^y to determine if they have exactly 15 factors.\n    \n    from sympy import divisors\n\n    # We start with 15 itself and check multiples of 15\n    start = 15\n    count = 0\n\n    # We will only consider powers up to 14 for 3 and 4 for 5 as per the explanation above.\n    for x in range(15):  # For power of 3\n        for y in range(5):  # For power of 5\n            num = (3 ** x) * (5 ** y)\n            if num >= start:  # Check only multiples of 15\n                factors = divisors(num)\n                if len(factors) == 15:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_time = timedelta(hours=3, minutes=50)\n\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    ones_digit_32_pow_33 = (32**33) % 10\n    ones_digit_22_pow_29 = (22**29) % 10\n    ans = (ones_digit_32_pow_33 - ones_digit_22_pow_29) % 10\n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Initialize variables for students, teachers, and total people\n    students = 0\n    teachers = 0\n    total_people = 0\n\n    # Start with an initial square size of 1 and increase the size while checking the difference\n    size = 1\n    while True:\n        # Calculate the amount of people in the outer layer (size-2 for the inner part)\n        outer_layer = size * 4 - 4 if size > 1 else 1\n        inner_layer = (size - 2) * 4 - 4 if size > 3 else 0\n\n        # Alternating between students and teachers based on the current size\n        if size % 2 == 1:\n            students += outer_layer\n            teachers += inner_layer\n        else:\n            students += inner_layer\n            teachers += outer_layer\n\n        # Check if we have the correct difference in students and teachers\n        if students - teachers == 52:\n            # Calculate the total number of people (students + teachers)\n            total_people = students + teachers\n            break\n\n        size += 1  # Increase the size of the square for the next iteration\n\n    return total_people\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_difference = 0\n    for A in range(10, 100):  # A is a 2-digit number\n        for B in range(1000, 10000):  # B is a 4-digit number\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_difference = max(max_difference, B - A)\n    return max_difference\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n\n    ways_to_choose = comb(total_players, players_needed)\n\n    return ways_to_choose\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of apples and oranges\n    apples, oranges = symbols('apples oranges')\n    \n    # Equation 1: Initially, Danny bought 5/7 as many apples as oranges\n    equation1 = Eq(apples, (5/7) * oranges)\n    \n    # Equation 2: After buying 12 more oranges, he had 2/3 as many apples as oranges\n    equation2 = Eq(apples, (2/3) * (oranges + 12))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    # Extract the solution for the number of apples\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # Express the given multiplication in exponent form\n    # For 8 * 8 we know that 8 is 2^3, so 8 * 8 equals to 2^6.\n    # Now we need to express 80 * 100 in terms of a square number.\n    # We can rewrite 80 * 100 as 8 * 10 * 10 * 10 = 2^3 * 10^3.\n    # We notice that 2^3 multiplied with 10^3 is (2 * 10)^3 = 20^3.\n    # Therefore, the final expression is 8^2 * 20^3.\n    # The missing number in the box is the base of 20 raised to the power of 3\n    return 20**3\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    # Convert the given fraction to its continued fraction representation.\n    from sympy import Rational\n\n    fraction = Rational(2014, 37)\n    continued_fraction = fraction.as continued_fraction()\n\n    # The first element of the continued fraction is 54, which is given.\n    # So, we need to extract the next three elements from the continued fraction.\n    x, y, z = continued_fraction[1], continued_fraction[2], continued_fraction[3]\n\n    return x + y + z\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    final_position = 10  # 10 o'clock is the 10th number on the clock\n    counting_stops = 30  # Eddie counts up to 30\n    total_numbers = 12   # There are 12 numbers on the clock\n\n    # Since the clock is circular, we use modular arithmetic to find the starting position\n    starting_position = (final_position - (counting_stops % total_numbers)) % total_numbers\n    if starting_position == 0:\n        starting_position = total_numbers  # If the result is 0, it means he started at 12\n\n    return starting_position\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of oil sold from each bucket\n    amount_sold = symbols('amount_sold')\n\n    # Define the equations based on the problem statement\n    equation = Eq(89 - amount_sold, 12 * (45 - amount_sold))\n\n    # Solve for the amount_sold\n    solution = solve(equation, amount_sold)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    total_jackpot = 131112\n    num_people = 9\n\n    amount_per_person = total_jackpot / num_people\n\n    return int(amount_per_person)\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    shoes_price_per_pack = 78\n    shoes_packs_needed = 6  # For the alien and his 5 brothers\n    socks_price_per_pair = 12\n    socks_per_alien = 5  # Each alien has five legs, so they need 5 socks, or 2.5 pairs\n    socks_pairs_needed = socks_per_alien * 6  # For all 6 aliens\n\n    total_shoe_cost = shoes_price_per_pack * shoes_packs_needed\n    total_sock_cost = socks_price_per_pair * socks_pairs_needed\n\n    return total_shoe_cost + total_sock_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    number = 100  # Start from the smallest three-digit number\n    while True:\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    # From the given equations:\n    # 31 + a = 26 + b => a - b = -5\n    # 26 + b = 20 + c => b - c = 6\n    # Since a, b, and c are prime numbers,\n    # and the difference between two prime numbers has to be even (except for 2),\n    # it's clear that one of these primes must be 2.\n    # If a were 2, then b would be a - 5 = -3, which is not prime.\n    # If b were 2, then a = b + 5 = 7 and c would be b - 6 = -4, which is not prime.\n    # Thus, c must be 2, then b = c + 6 = 8 (not prime), which is impossible,\n    # so there's no valid set of prime numbers a, b, c that satisfies the conditions.\n    # we can conclude there's no solution. Thus the return value will be None or 0\n    # to signify that there are no such primes. For the purpose of having an \"answer\"\n    # we shall return 0.\n\n    return 0\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time = 54 / 60  # Convert minutes to hours\n    speed_to_park = 5     # Speed from home to park: 5 km/h\n    speed_back_home = 4    # Speed from park to home: 4 km/h\n\n    # Let the distance between her home and the park be d km\n    # Total time taken = Time to park + Time back home = d/5 + d/4\n    # Solve for d using the equation total_time = d/5 + d/4\n\n    # Multiplying both sides by 20 (LCM of 4 and 5) to clear the denominators\n    d = total_time * (speed_to_park * speed_back_home) / (speed_to_park + speed_back_home)\n\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    joleen, rennie = symbols('joleen rennie')\n    equation1 = Eq(joleen, rennie + 5)\n    equation2 = Eq(3/4 * rennie, 2/3 * joleen)\n\n    solutions = solve((equation1, equation2), (joleen, rennie))\n\n    total_pies = solutions[joleen] + solutions[rennie]\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    difference = 8\n\n    boys = (total_pupils - difference) / 2\n    girls = boys + difference\n\n    return int(girls)\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time Nancy takes to finish the job by herself\n    # Let y be the time Lee takes to finish the job by herself\n    x, y = symbols('x y')\n\n    # Together, they finish 1 job in 10 hours (1/x + 1/y = 1/10)\n    equation1 = Eq(1/x + 1/y, 1/10)\n\n    # Nancy works 20 hours, so she does 20/x of the job\n    # Lee works 6 hours, so he does 6/y of the job\n    # Together they finish the job (20/x + 6/y = 1)\n    equation2 = Eq(20/x + 6/y, 1)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return float(solutions[x])\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    used_for_pie_kg = 550 / 1000\n    used_for_juice_kg = 1050 / 1000\n\n    remaining_oranges_kg = total_oranges_kg - (used_for_pie_kg + used_for_juice_kg)\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n\n    total_cost = price_per_computer * number_of_students\n\n    return total_cost\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both apples and bananas.\n    # Then 3x is the number of students who like apples,\n    # and 5x is the number of students who like bananas.\n    # According to the Inclusion-Exclusion Principle:\n    # Total = only_apples + only_bananas + both - neither\n    # But since there are no students that like neither,\n    # Total = only_apples + only_bananas + both\n    # Here only_apples is (3x - x), only_bananas is (5x - x),\n    # and both is x,\n    # thus Total = (3x - x) + (5x - x) + x\n    # 35 (Total number of students) = 3x + 5x - x\n    # Solve for x:\n    x = symbols('x')\n    equation = Eq(3*x + 5*x - x, 35)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 as it's the first digit of A\n        for y in range(10):  # y can be 0\n            A = 10 * x + y   # Value of A -> xy\n            B = 20 * x + 2 * y  # Value of B -> 2xy\n            \n            if B == 6 * A + 25:\n                return A  # Return A if the condition is satisfied\n    \n    return \"No solution found\"\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    common_difference = 3\n    number_of_days = 5\n\n    total_chairs = sum([first_day_chairs + common_difference * (day - 1) for day in range(1, number_of_days + 1)])\n\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):  # Iterate from 1 to 415\n        count += str(i).count('2')  # Count the occurrences of '2' in each number\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence_in_pound = 100\n    pence = 15\n    total_pounds = 3\n\n    total_pence = total_pounds * pence_in_pound\n    percentage = (pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # Choose one pencil and one ruler\n    pencil_ruler_ways = pencils * rulers\n    # Choose one pencil and one pen\n    pencil_pen_ways = pencils * pens\n    # Choose one ruler and one pen\n    ruler_pen_ways = rulers * pens\n\n    # Total ways of choosing two items\n    total_ways = pencil_ruler_ways + pencil_pen_ways + ruler_pen_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Maximum number marbles of different colors without having 3 of the same color\n    max_diff_color = 2 * 3 # Two each of the other colors (blue and yellow)\n\n    # One more marble ensures we have 3 of the same color\n    ans = max_diff_color + 1\n\n    return ans\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # children put into groups of 4, 3 had to sit out -> remainder of 3 when divided by 4\n    # children put into groups of 13, 1 had to sit out -> remainder of 1 when divided by 13\n    # Between 100 and 190 children, inclusive\n\n    # The two congruences we are solving are:\n    # x ≡ 3 (mod 4)\n    # x ≡ 1 (mod 13)\n\n    # Using the Chinese Remainder Theorem to find a common solution\n    congruences = (3, 4), (1, 13)\n    x, mod = solve_congruence(*congruences)\n\n    # Find the smallest x within the range of 100 to 190\n    while x < 100:\n        x += mod\n\n    return x\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    return sum(numbers)\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Sum of their ages now\n    current_sum = 45\n    # In 5 years, each of them will be 5 years older\n    sum_in_5_years = current_sum + 5 + 5  # Mary will be 5 years older, and so will her son\n    return sum_in_5_years\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # The total cost in pence\n    amount_paid = 100     # Amount paid in pence (£1 = 100p)\n    change = amount_paid - total_cost  # Calculate the change in pence\n    \n    return change\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    paid_tax = 90\n\n    price = paid_tax / tax_rate\n\n    return price\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n    number_of_people = 4\n    number_of_days = 7\n\n    total_travel_cost = travel_cost_per_person * number_of_people\n    total_hotel_cost = hotel_cost_per_day_per_person * number_of_days * number_of_people\n    total_spending_money = spending_money_per_person * number_of_people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Sebastian's and Garrett's current ages\n    sebastian, garrett = symbols('sebastian garrett')\n\n    # Equation 1: Garrett is 24 years older than Sebastian\n    equation1 = Eq(garrett, sebastian + 24)\n\n    # Equation 2: In 10 years, Garrett will be three times as old as Sebastian\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original state: boys + 65 = girls\n    equation1 = Eq(boys + 65, girls)\n\n    # After leaving: boys - (2/5)*boys = girls - (3/7)*girls\n    equation2 = Eq(boys - (2/5)*boys, girls - (3/7)*girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    boys_remain = boys - (2/5)*boys\n    girls_remain = girls - (3/7)*girls\n\n    total_remain = boys_remain.subs(boys, solutions[boys]) + girls_remain.subs(girls, solutions[girls])\n\n    return int(total_remain)\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n\n    total_earnings = march_earnings + april_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    term_number = 20\n    \n    nth_term = first_term + (term_number - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Consider 4 math books as 1 unit, 3 chemistry books as 1 unit, and 2 physics books as 1 unit\n    num_units = 1 + 1 + 1 + 1  # 1 unit for math, 1 for chemistry, 1 for physics, and 1 biology book\n\n    # Now we have 4 units, we have to arrange these on the shelf.\n    # This can be done in factorial(num_units) ways.\n    ways_to_arrange_units = factorial(num_units)\n\n    # Now we need to arrange books within their respective units\n    ways_to_arrange_math_books = factorial(4)\n    ways_to_arrange_chemistry_books = factorial(3)\n    ways_to_arrange_physics_books = factorial(2)\n\n    # Since the biology book is a single book, it remains in its own place (1 way to arrange it)\n\n    # Total number of ways will be the product of the arrangements of the units and the arrangements within the units\n    total_ways = (ways_to_arrange_units * ways_to_arrange_math_books *\n                  ways_to_arrange_chemistry_books * ways_to_arrange_physics_books)\n\n    return total_ways\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_ways = factorial(7)  # Total permutations for the word 'ORANGES'\n    vowel_ways = factorial(3) * factorial(5)  # Permutations when vowels are together as a block\n    \n    # Calculate the difference\n    ans = total_ways - vowel_ways\n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges = symbols('oranges')\n    apples = oranges + 150\n    bananas = oranges + 50\n\n    total_fruits = Eq(oranges + apples + bananas, 1400)\n\n    number_of_oranges = solve(total_fruits, oranges)\n\n    return number_of_oranges[0]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_017_007\n    return number\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_metres = 8850\n    metres_to_kilometres = 1000\n\n    height_kilometres = height_metres / metres_to_kilometres\n    \n    return height_kilometres\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n\n    total_ways = category1 * category2 * category3\n\n    return total_ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import Eq, solve, isprime\n\n    # Create equations from the given conditions\n    a, b, c = symbols('a b c')\n    equation1 = Eq(31 + a, 26 + b)\n    equation2 = Eq(26 + b, 20 + c)\n\n    # Solve the equations to find a relationship between a, b, and c\n    solutions = solve((equation1, equation2), (a, b, c))\n    \n    # Extract the values of a, b, and c\n    a_val = solutions[a]\n    b_val = solutions[b]\n    c_val = solutions[c]\n\n    # Find prime numbers that satisfy the equations\n    prime_result = None\n    for a_prime in range(2, 31):\n        if isprime(a_prime) and isprime(a_prime + 5) and isprime(a_prime + 11):\n            prime_result = a_prime * (a_prime + 5) * (a_prime + 11)\n            break\n\n    return prime_result\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    # Let the repeated side of the isosceles triangle be 'a', and the base be 'b'.\n    # The perimeter is a + a + b = 2a + b = 12\n    # For an isosceles triangle, two sides must be equal and the sum of the lengths of any two sides must be greater than the third side.\n    # Hence, a + a > b and a + b > a, which implies b < 2a and b > 0\n    # Since the perimeter is 12, a can be at most 5 (as for a = 6, b would have to be zero, which is not possible for a triangle).\n    for a in range(1, 6):\n        # Given 2a + b = 12, we can find the maximum and minimum values for b\n        b_max = 12 - 2*a\n        # Since b has to be less than 2a, we iterate through the possible values for b from 1 to b_max\n        for b in range(1, b_max):\n            if 2*a > b:  # This satisfies the triangle inequality\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, melvin, david = symbols('eugene melvin david')\n    total_stickers = 260\n\n    # After Eugene gives Melvin twice as many stickers as Melvin had\n    melvin_final = melvin + 2 * melvin\n    eugene_after_giving_melvin = eugene - 2 * melvin\n\n    # After Melvin gives David as many stickers as David had\n    david_final = david + david\n    melvin_after_giving_david = melvin_final - david\n\n    # After David gives Eugene as many stickers as Eugene had left\n    eugene_final = eugene_after_giving_melvin + eugene_after_giving_melvin\n    david_after_giving_eugene = david_final - eugene_after_giving_melvin\n\n    # Equations based on the final ratio and total stickers\n    equation1 = Eq(eugene_final, 46)\n    equation2 = Eq(melvin_after_giving_david, 12)\n    equation3 = Eq(david_after_giving_eugene, 7)\n    equation4 = Eq(eugene + melvin + david, total_stickers)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (eugene, melvin, david))\n\n    # Return Eugene's original number of stickers\n    return solutions[eugene]\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    # The number of ways to arrange 6 people around an 8-seater table,\n    # not counting rotations.\n    # Since rotations are not considered different, we fix one person's \n    # position and arrange the remaining people.\n    num_ways = factorial(5)\n\n    return num_ways\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    # Let the initial number of boys (and girls) be x.\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Create equations based on the problem statement\n    # Initial situation: the number of boys = the number of girls = x\n    # After changes: boys = x + 12, girls = x - 8\n    # Final situation: twice as many boys as girls => 2 * (x - 8) = x + 12\n    equation = Eq(2 * (x - 8), x + 12)\n    \n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # The total number of students at first (boys + girls)\n    initial_students = 2 * solutions[0]\n\n    return initial_students\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Since the game is about piles of matches, we will use the concept of Nim Game strategy.\n    # The strategy is based on the XOR sum of the number of matches in the piles.\n    # If Eddie has the first move and the XOR sum of the pile sizes is not 0, \n    # then Eddie has a winning strategy provided that he follows the strategy optimally.\n    \n    pile_a = 35\n    pile_b = 24\n\n    # Calculate the XOR sum of the two piles\n    xor_sum = pile_a ^ pile_b\n    \n    # Winning strategy:\n    # If xor_sum is not zero, then there is a winning strategy for Eddie.\n    # Eddie needs to make a move such that the XOR sum of the two piles turns to zero.\n    # Which means, Eddie needs to reduce the number of matches in one of the piles \n    # to a certain number that the pile_a XOR pile_b equals zero.\n    # Eddie can always do this because xor_sum is not zero.\n    # Finding the pile to reduce and to what count is done as follows:\n    \n    winning_strategy = {}\n    \n    if xor_sum != 0:\n        winning_pile = 'A' if pile_a > pile_b else 'B'\n        winning_number = (max(pile_a, pile_b) ^ xor_sum)\n        winning_strategy['pile_A'] = pile_a if winning_pile == 'B' else winning_number\n        winning_strategy['pile_B'] = pile_b if winning_pile == 'A' else winning_number\n        winner = \"Eddie\"\n    else:\n        # If xor_sum is zero, then Eddie will lose given both players play optimally\n        winner = \"Wei\\'er\"\n    \n    # Return both the winner and the winning strategy, if it exists\n    return winner, winning_strategy\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([(-1)**(i%2) * (80 - 2*i) for i in range(13)])\n    return ans\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Calculate the time for each section of the race.\n    time_first_part = 280 / 7\n    time_middle_part = 400 / 5\n    time_last_part = (800 - 280 - 400) / 8\n\n    # Sum the time for all sections to find the total time.\n    total_time = time_first_part + time_middle_part + time_last_part\n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2/7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 5, 7]\n    all_permutations = set(permutations(digits, 3))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import isprime\n\ndef solution():\n    for prime1 in range(2, 25):\n        prime2 = 25 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime1 * prime2\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n\n    length_ribbon1 = 15\n    length_ribbon2 = 45\n\n    largest_possible_length = gcd(length_ribbon1, length_ribbon2)\n\n    return largest_possible_length\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time = (6 * 60) + 52  # Convert start time (6:52 pm) to minutes\n    end_time = (8 * 60) + 24    # Convert end time (8:24 pm) to minutes\n    time_spent = end_time - start_time   # Find the difference in minutes\n\n    return time_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    return 150 - 12 * 12\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between = 2\n\n    road_length = (num_lamp_posts - 1) * distance_between\n\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n\n    # By using the Pigeonhole principle, we get the minimum number\n    # of peaches the student with the most peaches can get by dividing\n    # the total number of peaches by the number of students and then\n    # taking the ceiling of that number (since we can't have a fraction of a peach).\n    # Then we add one to ensure that there is at least one student with more\n    # peaches than this quotient.\n    peaches_per_student = (total_peaches // total_students) + 1\n\n    return peaches_per_student\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    return 48 + 84\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Sally had 72 more chocolate cupcakes than vanilla cupcakes\n    equation1 = Eq(chocolate, vanilla + 72)\n\n    # She had 36 lesser blueberry cupcakes than vanilla cupcakes\n    equation2 = Eq(blueberry, vanilla - 36)\n\n    # After selling some of the cupcakes, she had 427 cupcakes left altogether\n    # 1/6 of chocolate, 2/3 of vanilla, and 7/9 of blueberry are sold\n    # This means she has 5/6 of chocolate, 1/3 of vanilla, and 2/9 of blueberry left\n    equation3 = Eq((5/6)*chocolate + (1/3)*vanilla + (2/9)*blueberry, 427)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    chocolate_cupcakes = solutions[chocolate]\n    chocolate_sold = chocolate_cupcakes / 6  # because 1/6 of chocolate cupcakes were sold\n\n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    ans = (18 + 52) / 2\n    return ans\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    total_sum = 140\n    n = 7\n    # Sum of n consecutive numbers starting from a is given by n*(2a + (n-1)*d)/2, here d=1\n    # So, 2a + n - 1 = 2*total_sum/n\n    a = (2*total_sum/n - n + 1) // 2\n    return int(a)\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    return (2/9) * 36\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    least_number_of_children = solve_congruence(*congruences)\n    return least_number_of_children[0]\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    postcards_cost = 10 * 45  # cost in pence\n    stamps_cost = 10 * 27     # cost in pence\n    total_cost_pence = postcards_cost + stamps_cost\n    total_cost_pounds = total_cost_pence / 100  # convert pence to pounds\n    change = 10 - total_cost_pounds\n    return change\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    total_ways_fixed_seat = 3 * 2 * 1  # Claire's seat is fixed, others can be permuted.\n    ways_with_tony_opposite = 2        # If Tony sits opposite, only rest can be permuted.\n\n    # Subtract the ways in which Tony is opposite to Claire, since those are not allowed.\n    ans = total_ways_fixed_seat - ways_with_tony_opposite\n\n    return ans\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank makes 180 tables in 10 days\n    tables_per_day_frank = 180 / 10\n\n    # Ryan makes 180 tables in 15 days\n    tables_per_day_ryan = 180 / 15\n\n    # Calculate the difference in the number of tables they make per day\n    difference = tables_per_day_frank - tables_per_day_ryan\n\n    return difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of questions Miss Atkinson had to mark.\n    x = symbols('x')\n    \n    # If she marked 4 questions in a minute, she would take x / 4 minutes to finish marking.\n    # She would leave 5 minutes late, so actual time taken is x / 4 - 5 (which should be her intended time to leave).\n    \n    # If she marked 6 questions in a minute, she would take x / 6 minutes to finish marking.\n    # She would leave 5 minutes early, so actual time taken is x / 6 + 5 (which should be her intended time to leave).\n    \n    # Therefore, the two equations for the time taken to mark all questions are equal.\n    equation = Eq(x / 4 - 5, x / 6 + 5)\n\n    # Solve the equation to find the number of questions.\n    questions_marked = solve(equation, x)\n\n    return questions_marked[0]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    mass_rounded = 7.4\n    smallest_mass = mass_rounded - 0.05  # Subtract half of the precision of the rounding\n    return smallest_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Start at the smallest 2-digit number, 10, and end at 94 because we are looking for consecutive numbers\n    for i in range(10, 95):\n        first_set = [i, i + 1, i + 2]\n        second_set = [i + 1, i + 2, i + 3]\n        third_set = [i + 2, i + 3, i + 4]\n\n        # Check if any of the sets is divisible by 37 and 60\n        if sum(first_set) % 37 == 0 or sum(second_set) % 37 == 0 or sum(third_set) % 37 == 0:\n            if sum(first_set) % 60 == 0 or sum(second_set) % 60 == 0 or sum(third_set) % 60 == 0:\n                return i + 4  # The largest number of the five\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    for correct in range(21):\n        incorrect = 20 - correct\n        if 5 * correct - 2 * incorrect == 79:\n            return correct\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75  # in pounds\n\n    num_cakes = total_money_raised / price_per_cake\n\n    return int(num_cakes)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    initial_money = 1440\n    spent_at_restaurant = (3/7) * initial_money\n    remainder_after_restaurant = initial_money - spent_at_restaurant\n    spent_on_fees = (2/9) * remainder_after_restaurant\n    money_left = remainder_after_restaurant - spent_on_fees\n    return money_left\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_to_be_shared = total_candies // 2\n    amy_should_give = amy_candies - candies_to_be_shared\n    \n    return amy_should_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution(1, 1)  # This is just a placeholder, x and y will be provided in the actual scenario"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Time taken to chime 3 times (we subtract 2, because we need to consider only the intervals between chimes)\n    time_for_3_chimes = 6 - 2\n    \n    # Time taken for 1 chime (interval)\n    time_for_1_chime = time_for_3_chimes / 2\n    \n    # Time taken to chime 6 times (we add 5 intervals between chimes, plus 1 for the chime itself)\n    time_for_6_chimes = (time_for_1_chime * 5) + 6\n\n    return time_for_6_chimes\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # P's daily work amount\n    work_p = 1 / (12 * 8)\n    # Q's daily work amount\n    work_q = 1 / (8 * 10)\n    \n    # Combined daily work amount when working 8 hours per day\n    combined_daily_work = (work_p + work_q) * 8\n    \n    # Total number of days required to complete the work\n    total_days = 1 / combined_daily_work\n\n    # Since we need whole days, we take the ceiling of the total_days\n    from math import ceil\n    whole_days = ceil(total_days)\n    \n    return whole_days\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    difference = (3.2 * 100) - 30\n    return difference\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    # Using the formula for the sum of squares of the first n natural numbers\n    # sum = n * (n + 1) * (2n + 1) / 6\n    n = 10  # because we have the squares from 1^2 to 10^2 multiplied by 3\n    sum_squares = n * (n + 1) * (2 * n + 1) // 6\n    ans = 3 * sum_squares  # multiply the sum by 3, as per Pip's answer\n    \n    return ans\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 41):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    price_per_kg = 56 / 100    # Convert pence to pounds\n    cost = 5 * price_per_kg    # The total cost for 5 kg\n    change = 10 - cost         # Change from 10 pounds\n    \n    return round(change, 2)    # Round the result to 2 decimal places\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    factors_dict = factorint(120)\n    factors_count = 1\n\n    for exponent in factors_dict.values():\n        factors_count *= (exponent + 1)\n\n    return factors_count\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    factors_pairs = [(i, 180 // i) for i in range(1, int(180**0.5) + 1) if 180 % i == 0]\n    differences = [abs(pair[0] - pair[1]) for pair in factors_pairs]\n    return min(differences)\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temperature_midnight_thursday = -8\n    temperature_midday_friday = 13\n    \n    overall_change = temperature_midday_friday - temperature_midnight_thursday\n    \n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(5, 16):\n        if num % 3 == 0 and 27 % num == 0:\n            return num\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    num_people = 85\n    price_per_person = 1.30\n    total_collected = num_people * price_per_person\n    return total_collected\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let the speed of Luca be 2x and Max be 3x (x is their common speed unit)\n    # Let the time taken by Max to cover the distance be t\n    # Luca takes t + 10 minutes to cover the same distance\n    \n    # The distance covered by Max is speed * time = 3x * t\n    # The distance covered by Luca is speed * time = 2x * (t + 10)\n    # Since the distances are equal we have 3x * t = 2x * (t + 10)\n    # Now we solve for t: \n    # 3t = 2(t + 10)\n    # 3t = 2t + 20\n    # t = 20 (time taken by Max)\n    \n    # If Luca walked at double his usual speed, the new speed would be 2 * 2x = 4x\n    # The time taken by Luca at this new speed to cover the same distance is\n    # distance/speed: (2x * (t + 10))/4x\n    # Simplifying we get (t + 10)/2\n    # Substituting the value of t, we get (20 + 10) / 2 = 30 / 2\n    ans = 30 / 2\n    return ans\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    import math\n    return math.gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_weight = total_weight_durian + total_weight_watermelon\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    score = 71\n    deductions_for_wrong = 1\n    marks_for_correct = 2\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        total_score = correct * marks_for_correct - incorrect * deductions_for_wrong\n        if total_score == score:\n            return incorrect  # This will give the correct number of incorrect answers\n\n    return None\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pencils_given_to_ali = 5\n    additional_pens_bought = 18\n\n    # Let the original number of pens (and pencils) be x.\n    # After giving Ali 5 pencils, Mrs Rajoo has x - 5 pencils left\n    # She had twice as many pens as pencils, so she had 2(x - 5) pens at that point\n    # Then she bought another 18 pens, ending up with 2(x - 5) + 18 pens in total\n\n    # Now we can set up an equation where the number of pens originally\n    # equals the number of pencils after giving away 5 and being twice as much\n    # x = 2(x - 5)\n    # Solve for x (the original number of pens and pencils)\n    # x = 2x - 10\n    # 10 = x\n    original_number = 10\n\n    # Now use this number to find out how many pens she had in the end\n    pens_in_the_end = 2 * (original_number - pencils_given_to_ali) + additional_pens_bought\n    return pens_in_the_end\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 4 patterns of cards in a deck, each with an 'A'.\n    # To ensure we draw at least one 'A', we have to consider the worst-case scenario,\n    # where we draw all the cards without an 'A' first from each pattern.\n    # There are 12 cards without an 'A' in each pattern.\n    \n    # If we draw all non-'A' cards from 3 patterns, we still don't have a guaranteed 'A'.\n    worst_case_without_A = 12 * 3\n\n    # The next card we draw, no matter from which pattern, must be an 'A'.\n    # So we add 1 to the worst case scenario without 'A' to get an 'A'.\n    return worst_case_without_A + 1 \n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_still_water = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_still_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Time spent jogging from 6:30 A.M. to 7:30 A.M. is 1 hour.\n    jogging_time = 1  # in hours\n    \n    # Time spent walking from 7:30 A.M. to 9:30 A.M. is 2 hours.\n    walking_time = 2  # in hours\n\n    # Speed at which Star jogs.\n    jogging_speed = 6.5  # in miles per hour\n    \n    # Speed at which Star walks.\n    walking_speed = 4.5  # in miles per hour\n\n    # Calculate the distance traveled while jogging.\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the distance traveled while walking.\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled is the sum of jogging and walking distances.\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for num in range(1, 226):\n        count += str(num).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    num_piles = 10\n    books_per_pile = total_books // num_piles \n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    lengths_cut_off = 2 * 45\n    remainder_length = total_length - lengths_cut_off\n\n    number_of_40cm_lengths = remainder_length // 40\n\n    return number_of_40cm_lengths\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_left_handed_tennis = 1 / 10\n    proportion_left_handed = 0.25\n\n    total_left_handed = left_handed_tennis_players / proportion_left_handed_tennis\n    total_students = total_left_handed / proportion_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_made_with_20g = 80\n    desired_cookies = 100\n\n    butter_per_cookie = 20 / cookies_made_with_20g\n    required_butter = butter_per_cookie * desired_cookies\n\n    return required_butter\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_time\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    digit_options = 3  # digits 6, 7, 8 can be used\n    positions = 3      # three positions for three-digit numbers\n\n    # Each position can be filled with 3 options since digits can be reused\n    total_numbers = digit_options ** positions\n\n    return total_numbers\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count_zeros = 0\n    current_number = 1\n\n    while count_zeros < 100:\n        number_str = str(current_number)\n        count_zeros += number_str.count('0')\n        if count_zeros >= 100:\n            break\n        current_number += 1\n\n    return current_number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drank = 9\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal_amount = 3600\n    interest_rate = 0.02\n    time_years = 10\n\n    interest_earned = principal_amount * interest_rate * time_years\n\n    return interest_earned\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's sweets\n    bud, pip, tom = symbols('bud pip tom')\n\n    # Bud has three times as many sweets as Pip\n    equation1 = Eq(bud, 3 * pip)\n    # Tom has twice as many sweets as Bud\n    equation2 = Eq(tom, 2 * bud)\n    # Total sweets between Bud, Pip, and Tom\n    equation3 = Eq(bud + pip + tom, 50)\n\n    # Solve equations\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180  # speed in meters per minute before Bob feels tired\n    time_fast = 6  # time in minutes Bob spends at the faster speed\n\n    speed_slow = 120  # speed in meters per minute after Bob feels tired\n    time_slow = 8  # time in minutes Bob spends at the slower speed\n\n    distance_fast = speed_fast * time_fast  # distance covered at the faster speed\n    distance_slow = speed_slow * time_slow  # distance covered at the slower speed\n\n    total_distance = distance_fast + distance_slow  # total distance from home to the cinema\n\n    return total_distance\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_behind_danya = 14 - 1  # Since Danya is the 14th from the back, there are 13 people behind him\n    total_people = people_behind_danya + 25 + 2  # 25 people in front of Elias, and Danya and Elias themselves\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # sum of an arithmetic sequence S = n/2 * (a1 + an)\n    # Here, n = 8 (eight consecutive whole numbers), S = 2012\n    # Since the numbers are consecutive, an = a1 + 7*d, where d = common difference\n    # In a sequence of consecutive whole numbers, the common difference d = 1\n    # So, an = a1 + 7\n    # Substitute the known values into the arithmetic sum formula: 2012 = 8/2 * (a1 + a1 + 7)\n    # Simplify the equation: 2012 = 4 * (2 * a1 + 7)\n    # Solve for a1: a1 = (2012 / 4 - 7) / 2\n    # Then the largest number an = a1 + 7\n\n    a1 = (2012 / 4 - 7) / 2\n    an = a1 + 7  # Largest number in the sequence\n    return int(an)\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    return 42 / 35 * 100\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')  # A and B are the number of students in class A and B respectively\n\n    # Initial condition: A = (5/7) * B\n    equation1 = Eq(A, (5/7) * B)\n    \n    # After transferring 3 students: A + 3 = (4/5) * (B - 3)\n    equation2 = Eq(A + 3, (4/5) * (B - 3))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Return the number of students in class A \n    return solutions[A]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye has at first.\n    # To find x, we need to set up an equation based on the given information:\n    # Every time Faye exchanges 3 bottles, she gets 1 new bottle.\n    # We know she swapped 5 times, and she should've gotten 3 new bottles plus her 5 empty bottles left.\n    # But she actually got 4 new bottles and 5 empty bottles left, which is 1 more than expected.\n    # So the equation will be: 5 swaps * (3 exchanged bottles per swap) +  5 remaining bottles - (4 received bottles + 1 extra bottle) = x\n    \n    # After each swap, Faye gets one new bottle and loses three bottles\n    # 3 exchanged bottles * 5 swaps + 5 remaining bottles = x + 4 received bottles + 1 extra bottle\n    # 3*5 + 5 = x + 4 + 1\n    # 15 + 5 = x + 5\n    # 20 = x + 5\n    # x = 20 - 5\n    x = 20 - 5\n    \n    return x\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    return 52248 // 12\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let x be the side of the smaller square (boys only).\n    # then, (x+1) will be the side of the larger square (boys and girls).\n    # The difference in the number of students between the larger and smaller squares will be 17 (girls only).\n    # The equation will be: (x + 1) ** 2 - x ** 2 = 17\n    # Simplify to find x: 2 * x + 1 = 17, which gives us x = 8.\n    # The total number of boys will be the area of the smaller square: x ** 2.\n    x = (17 - 1) // 2 # from rearranged eq: 2x + 1 = 17 \n    total_boys = x ** 2\n    \n    return total_boys\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    # Let the original speed be s km/h, thus original distance d = s * 6 (for the 6 hours from 1pm to 7pm).\n    # If she wants to arrive one hour earlier at 6pm, the distance d will be the same, and the time will be 5 hours.\n    # She must travel at speed (s + 2) km/h to cover the same distance in 5 hours.\n    # Therefore, we can equate the two expressions for distance to find s: d = 6s = 5(s + 2)\n    \n    from sympy import symbols, Eq, solve\n\n    s = symbols('s')\n    equation = Eq(6 * s, 5 * (s + 2))\n    \n    # Solve for s\n    original_speed = solve(equation, s)[0]\n    \n    # Now, calculate the distance using the original speed and time\n    distance = original_speed * 6\n\n    return distance\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    volume_in_litres = 40\n    flow_rate_ml_per_second = 125\n    volume_in_ml = volume_in_litres * 1000  # Convert litres to millilitres\n\n    time_taken_seconds = volume_in_ml / flow_rate_ml_per_second  # Calculate time in seconds\n\n    return time_taken_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    # Initialize the count of digits and pages\n    digit_count = 0\n    page_count = 0\n\n    # Calculate the count of digits for each range of page numbers\n    while digit_count < 237:\n        page_count += 1\n        digit_count += len(str(page_count))\n\n    # Since the loop goes one page over, subtract one to get the correct page count\n    return page_count - 1\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total = 1468 - 1462  # Difference caused by the incorrect recording per day\n    incorrect_day_savings = 1268 - 1082  # The difference between the incorrect and correct saving for that day\n\n    days = incorrect_day_savings / incorrect_total  # The number of days is the total difference divided by the daily difference\n\n    return int(days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Mr. Tung cuts 1 rope into 4 pieces in 12 minutes\n    # Which means he makes 3 cuts (since 1 initial rope becomes 4 pieces with 3 cuts)\n    minutes_per_cut = 12 / 3\n\n    # To cut the rope into 12 pieces, we need 11 cuts\n    total_cuts_needed = 11\n    total_time = minutes_per_cut * total_cuts_needed\n\n    return total_time\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    oak_tree_age_in_2011 = 2011 - birth_year\n    return oak_tree_age_in_2011\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the first term and d be the common difference of the arithmetic progression\n    a, d = symbols('a d')\n\n    # Based on the given information, set up the equations\n    equation1 = Eq(a + 8*d, a + 14*d + 18)  # 9th term is 18 larger than 15th term\n                                             # a+8d = a+14d+18 -> -6d = 18 -> d = -3\n    equation2 = Eq(a + 19*d + a + 11*d, 88) # Sum of 20th and 12th terms is 88\n                                             # 2a+30d = 88 -> 2a-90 = 88 -> 2a = 178 -> a = 89\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Find the 32nd term using the first term and common difference found\n    a32 = solutions[a] + 31*solutions[d]     # a+31d -> 89-93 -> -4\n\n    return a32\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    last_term = 31\n    position = 10\n    difference = 3\n    \n    first_term = last_term - (position - 1) * difference\n    \n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    lily, marry, carol = symbols('lily marry carol')\n    \n    equation1 = Eq(4 * lily * marry * carol, 2240)\n    equation2 = Eq(carol, marry + 2)\n    equation3 = Eq(marry, lily + 1)\n    \n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n    \n    # Since we need the age which has to be a positive integer, filter out non-integer or negative solutions\n    for s in solutions:\n        if all(isinstance(age, int) and age > 0 for age in s):\n            return s[carol]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    x = symbols('x')\n    incorrect_expression = (8*x + 8) / 2 - 3 * (x + 6)\n    correct_expression = simplify(incorrect_expression)\n    \n    return correct_expression\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2*x), 8 + 10*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_fraction = 2/5\n    purple_fraction = 1/8\n    \n    red_flowers = total_flowers * red_fraction\n    purple_flowers = total_flowers * purple_fraction\n    \n    return int(red_flowers + purple_flowers)\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Since we want to split 10 identical marbles into 2 piles and the piles can be of any size including zero,\n    # Each different sum where one pile can contain from 0 to 10 marbles represents a unique distribution.\n    return 10 + 1\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # 1 liter is approximately 1.05669 quarts\n    cups_per_quart = 2  # 1 quart is equal to 2 cups (0.5 quart each)\n    total_cups = liters_to_quarts * cups_per_quart\n    return round(total_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # To ensure he gets 3 toy cars of the same color, we have to consider the worst case scenario.\n    # That is, picking the maximum number of cars without getting 3 of the same color.\n    # Pick 2 red, 2 blue, and 2 white, which will total 6 cars with no three of the same color\n    # The next car he picks could be of any color, guaranteeing 3 of the same color.\n    # So, he needs to pick 6 cars plus 1 more to be sure to get 3 toy cars of the same color.\n    return 2 + 2 + 2 + 1\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    # Convert all lengths to metres\n    length1 = 85 / 100\n    length2 = 2 \n    length3 = 147 / 100\n\n    # Calculate total length in metres\n    total_length = length1 + length2 + length3\n\n    return total_length\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fraction_part = 34 / 100\n    ans = whole_number + fraction_part\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    # Start by maximizing the number of ants, which have the fewer number of legs (6),\n    # gradually replace them with spiders (with 8 legs).\n    # We can start by setting the number of ants' legs to 64 (assuming all legs belong to ants),\n    # and then decrease by 2 each time to switch one 'ant' for a 'spider'.\n    for ant_legs in range(64, 0, -2):\n        spider_legs = 64 - ant_legs\n        ants = ant_legs // 6\n        spiders = spider_legs // 8\n        # Check if the current count of legs adds up to the total legs.\n        if ants * 6 + spiders * 8 == 64:\n            max_ants = ants\n            break\n            \n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, vivian = symbols('justin vivian')\n\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (justin, vivian))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    initial_stamps = 34 + 2 - 11 + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres_conversion_factor = 1000\n    litres = 7.5\n    millilitres = litres * litres_to_millilitres_conversion_factor\n    return millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let x be the height from which the ball was dropped\n    # After the first bounce, it reaches a height of 3x\n    # After the second bounce, it reaches a height of 3(3x) = 9x\n    # After the third bounce, it reaches a height of 1/2(9x) = 4.5x\n    # After the fourth bounce, it reaches a height of 1/2(4.5x) = 2.25x\n    # It is given that after the fourth bounce the height is 36 m\n    # So, we can write the equation: 2.25x = 36\n    # Now we solve for x\n\n    # Height after fourth bounce\n    height_after_fourth_bounce = 36\n\n    # Calculate initial height (x)\n    initial_height = height_after_fourth_bounce / 2.25\n\n    return initial_height\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # The correct sum equation\n    equation1 = Eq(x + y, 11.63)\n    \n    # The incorrect sum equation\n    equation2 = Eq(x + y/10, 5.87)\n    \n    # Solve the two equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate 100 times the absolute difference\n    difference = abs(solutions[x] - solutions[y]) * 100\n    \n    return difference\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = (2 * 9) + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent = initial_amount / 2\n    remaining = initial_amount - spent\n    return remaining\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if b == a or b == 8: continue\n            for c in range(10):\n                if c in (a, b, 8): continue\n                for d in range(10):\n                    if d in (a, b, c, 8) or d % 2 != 0: continue\n                    for e in range(10):\n                        if e in (a, b, c, d, 8) or e != 5: continue\n                        number = int(f\"8{a}{b}{c}{d}{e}\")\n                        if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                            return number\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    num_trays = 40\n    \n    total_eggs = eggs_per_tray * num_trays\n    \n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original = str(i)\n        reversed_num = original[::-1]\n        difference = abs(int(original) - int(reversed_num))\n        results.add(difference)\n    ans = results\n    return ans\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = []\n\n    # Generate all possible two-digit numbers using the given digits\n    for i in range(len(digits)):\n        for j in range(len(digits)):\n            if i != j: # Ensure that the two digits are different\n                two_digit_numbers.append(digits[i] + digits[j])\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    smallest = '01234'  # Smallest 5-digit number using 0 to 4\n    largest = '98765'   # Largest 5-digit number using 5 to 9\n    \n    smallest = int(smallest)\n    largest = int(largest)\n    \n    ans = largest - smallest\n    \n    return ans\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of stickers Sam and Peter originally have\n    sam, peter = symbols('sam peter')\n    \n    # Original relationship between Sam's and Peter's stickers\n    equation1 = Eq(sam, peter + 40)\n    \n    # After Sam gives 20% of his stickers to Peter\n    sam_gives = sam * 0.20\n    peter_after_sam_gives = peter + sam_gives\n    \n    # After Peter gives 25% of his stickers (after receiving from Sam) to Sam\n    peter_gives = peter_after_sam_gives * 0.25\n    sam_final = sam - sam_gives + peter_gives\n    peter_final = peter_after_sam_gives - peter_gives\n    \n    # Final relationship between Sam's and Peter's stickers\n    equation2 = Eq(sam_final, peter_final + 96)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (sam, peter))\n    \n    # Return the number of stickers Peter had initially\n    return solutions[peter]\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_to_pass = 15  # seconds\n    length_of_train = 450  # meters\n    \n    # speed = distance / time\n    speed_of_train = length_of_train / time_to_pass\n    \n    return speed_of_train\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # in pence\n    cost_whole_cd = 899  # in pence, 1 pound = 100 pence\n\n    total_cost_individual_songs = 12 * cost_per_song\n    savings = total_cost_individual_songs - cost_whole_cd\n\n    return savings  # in pence, to convert to pounds divide by 100\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    # Calculating the factorial of 10 directly\n    ans = 1\n    for i in range(1, 11):\n        ans *= i\n    return ans\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt_weight = 8\n    water_weight = 32\n    total_weight = salt_weight + water_weight\n    \n    concentration = (salt_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    ans = 70 / 100 * 40\n    return ans\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n    Ali_and_Bala = 2\n\n    total_people = people_in_front_of_Ali + Ali_and_Bala + people_behind_of_Bala\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1\n    total_cards = friends * cards_sent_by_each\n\n    return total_cards\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    return (18 - 17) + (16 - 15) + (14 - 13)\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    num_jugs = 4\n\n    water_added = jug_capacity * num_jugs\n    total_water = initial_water + water_added\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chloe, david, emily = symbols('chloe david emily')\n    alan = 74\n    bilal = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    # Number of cookies eaten in the first 3 days:\n    first_period = 9 * 3\n    # Number of cookies eaten in the following 2 days:\n    second_period = 15 * 2\n    # Number of cookies eaten in the last 2 days:\n    last_period = 10 * 2\n    # Total number of cookies eaten:\n    total_cookies = first_period + second_period + last_period\n    # Total number of days:\n    total_days = 3 + 2 + 2\n    # Average number of cookies eaten per day:\n    average_cookies_per_day = total_cookies / total_days\n    # Return the result\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # Symbol for the number of days David takes off\n    david_off = symbols('david_off')\n    \n    # Candy's work rate (job per day)\n    candy_rate = 1 / 20\n    \n    # David's work rate (job per day)\n    david_rate = 1 / 25\n    \n    # Total work done by Candy = rate * days\n    candy_work = candy_rate * 12\n    \n    # Total work done by David = rate * (days worked)\n    david_work = david_rate * (12 - david_off)\n    \n    # Equation to solve: Candy's work + David's work = 1 job\n    equation = Eq(candy_work + david_work, 1)\n    \n    # Solve for the days David takes off\n    days_off = solve(equation, david_off)\n    \n    return days_off[0]\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book is the normal force.\n    # According to Newton's third law, this normal force is equal in magnitude and opposite in direction to the force of gravity on the book.\n    # Since the mass of the book is given as a force (20N), which implies the force due to gravity, \n    # the magnitude of the normal force exerted by the table will be equal to this value.\n    normal_force = 20  # in Newtons\n\n    return normal_force\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 140000\n    base_tax = 0.05 * 50000\n    additional_income = income - 50000\n    total_tax_paid = 15100\n\n    additional_tax_rate = 0.08 + T\n    additional_tax = additional_tax_rate * additional_income\n\n    equation = Eq(base_tax + additional_tax, total_tax_paid)\n\n    solved_T = solve(equation, T)\n\n    return float(solved_T[0])\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(y)  # y would be replaced with Lemar's age when calling the function"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    fruits = symbols('fruits')\n    # Let 'fruits' be the total number of fruits in the box initially\n\n    apples = 4/5 * fruits  # the number of apples\n    pears = fruits - apples  # the number of pears\n\n    # After 3/4 of the fruits were removed\n    fruits_removed = 3/4 * fruits\n    remaining_fruits = fruits - fruits_removed\n\n    # There were 1/8 of the apples and 30 pears left\n    remaining_apples = 1/8 * apples\n    remaining_pears = 30\n\n    # Set up the equations based on the conditions given in the problem\n    equation1 = Eq(remaining_apples + remaining_pears, remaining_fruits)\n\n    # Solve for the total number of fruits initially in the box\n    solutions = solve((equation1), (fruits))\n\n    return int(solutions[0])\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Number of balls that are needed to ensure Lily gets 6 balls of the same type\n    # Let's use the pigeonhole principle. In the worst-case scenario, Lily takes out\n    # all of the balls of the other two types before getting 6 balls of the same type.\n    # For this worst-case scenario, she would have taken out 5 basketballs and 5 volleyballs\n    # because upon taking the 6th of either type, she would have 6 of the same.\n    # Therefore, before reaching the 6th of any type, she would have taken out\n    # at most 5 basketballs + 5 volleyballs + 5 footballs = 15.\n    # And the next ball she takes out has to make 6 of the same type,\n    # So the total number of balls she needs to take out is 15 + 1 = 16.\n    \n    return 16\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    g = 9.8  # acceleration due to gravity in m/s^2\n    h = 5.0  # height in meters\n\n    # Using the formula v = sqrt(2gh) to calculate the final velocity\n    v = sqrt(2 * g * h)\n\n    return v\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    number_of_cakes_6 = 6\n    \n    time_per_cake = time_for_6_cakes / number_of_cakes_6\n    number_of_cakes_10 = 10\n\n    total_time_for_10_cakes = time_per_cake * number_of_cakes_10\n\n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip_amount = bill * tip_percentage\n    tax_amount = bill * tax_percentage\n\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    stickers, pupils = symbols('stickers pupils')\n    \n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Initial conditions\n    v0 = 5  # initial velocity in m/s\n    h = 30  # height of the building in meters\n    angle = 45  # launch angle in degrees\n    g = 9.81  # acceleration due to gravity in m/s^2\n    \n    # Convert angle to radians for calculation\n    angle_rad = math.radians(angle)\n    \n    # Calculate the vertical and horizontal components of the initial velocity\n    v0x = v0 * math.cos(angle_rad)  # horizontal component\n    v0y = v0 * math.sin(angle_rad)  # vertical component\n    \n    # Calculate the time it takes for the arrow to reach the ground\n    # We'll use the quadratic formula to solve for t: v0y*t - 0.5*g*t^2 = h\n    a = -0.5 * g\n    b = v0y\n    c = -h\n    \n    # Use the quadratic formula to find the positive root only\n    t = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    \n    # Calculate the final vertical velocity before hitting the ground.\n    # Since we're only interested in the speed (not the velocity vector),\n    # we will consider the magnitude of the vertical and horizontal components.\n    vy = v0y - g * t  # vertical velocity component at t\n    \n    # The horizontal velocity component remains unchanged\n    vx = v0x  # horizontal velocity component at t\n    \n    # Calculate the final speed of the arrow\n    final_speed = math.sqrt(vx**2 + vy**2)\n    \n    return final_speed\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # Since each child must get at least one orange, we give one to each first.\n    # Now we have 13 - 3 = 10 oranges left to distribute.\n    # We use the stars and bars method to distribute the remaining oranges.\n    # Here, we need 2 bars to create 3 sections for the 3 kids and 10 stars for the oranges.\n    # Total positions = 10 (stars) + 2 (bars) = 12\n    # We choose 2 positions for the bars out of these 12, the rest are automatically stars.\n    return comb(12, 2)\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    # Function to check if the number is divisible by 11 using the divisibility rule\n    def is_divisible_by_11(n):\n        str_n = str(n)\n        odd_sum = sum(int(str_n[i]) for i in range(0, len(str_n), 2))\n        even_sum = sum(int(str_n[i]) for i in range(1, len(str_n), 2))\n        return (odd_sum - even_sum) % 11 == 0\n\n    # Function to get the sum of the digits of the number\n    def digit_sum(n):\n        return sum(map(int, str(n)))\n\n    # Start with the smallest 2-digit number (since 1-digit numbers have a digit sum < 20)\n    min_val = 10\n    \n    while True:\n        # Generate all combinations of the current number length that sum up to 20\n        for combo in combinations_with_replacement(range(10), len(str(min_val))):\n            if sum(combo) == 20:\n                # Join the digits to form numbers and check divisibility by 11\n                for perm in set(combinations_with_replacement(combo, len(combo))):\n                    num = int(''.join(map(str, perm)))\n                    if digit_sum(num) == 20 and num >= min_val and is_divisible_by_11(num):\n                        return num\n        # Increment the minimum value to the next number length (e.g., from 99 to 100)\n        min_val = (min_val * 10) + 0 # Adding 0 keeps the same digit, incrementing its length by 1\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    for S in range(1, 10):\n        for A in range(10):\n            for M in range(10):\n                for O in range(10):\n                    for G in range(1, 10):\n                        if len({S, A, M, O, G}) == 5:  # ensure all digits are different\n                            SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n                            OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n                            if SASMO * 4 == OGAMS:\n                                return SASMO\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2  # sandwiches, burgers\n    drink_options = 3  # coffee, milk, tea\n    dessert_options = 4  # cake, pudding, ice-cream, pie\n\n    total_combinations = food_options * drink_options * dessert_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    water_to_transfer_from_A = 48 - equal_volume\n    return water_to_transfer_from_A\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elephants, cows, horses, pigs = symbols('elephants cows horses pigs')\n\n    equation1 = Eq(2 * elephants, 5 * cows)\n    equation2 = Eq(4 * cows, 3 * horses)\n    equation3 = Eq(3 * horses, 5 * pigs)\n\n    solutions = solve((equation1, equation2, equation3), (elephants, cows, horses, pigs))\n    \n    # Substitute the relation found for one elephant into the equation for 8 elephants\n    pigs_per_elephant = solutions[pigs] / solutions[elephants]\n    pigs_for_8_elephants = 8 * pigs_per_elephant\n    \n    return pigs_for_8_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    interest_rate = (amount / principal) ** (1 / years) - 1\n\n    return round(interest_rate * 100, 2)\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.50\n    total_change = 0.40\n    total_cost = total_paid - total_change\n    cost_per_cup = total_cost / 4\n    \n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the symbols for the price per box of mangoes and lychees\n    mango_price, lychee_price = symbols('mango_price lychee_price')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(24 * mango_price + 20 * lychee_price, 1160)\n    equation2 = Eq(lychee_price, 2 * mango_price - 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mango_price, lychee_price))\n\n    return solutions[lychee_price]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    result = 0.60 * (2/5) * 75\n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_rate = 0.18\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # Total number of singing performances\n    sing = 6\n    # Total number of dancing performances\n    dance = 4\n    \n    # The number of ways to arrange the singing performances\n    sing_ways = factorial(sing)\n    \n    # Places available between singing performances to insert dancing performances\n    places_for_dance = sing - 1\n    \n    # Since at least 1 singing performance has to be between 2 dancing performances,\n    # we cannot have more than 'places_for_dance + 1' dancing performances\n    # The +1 accounts for the possibility of having a dancing performance at either end\n    if dance > places_for_dance + 1:\n        return 0\n    else:\n        # The number of ways to choose where to put the dancing performances\n        dance_ways = factorial(places_for_dance + 1) // factorial(places_for_dance + 1 - dance)\n    \n        # Total number of ways to arrange\n        return sing_ways * dance_ways\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_for_5_boxes = 350\n    weight_per_box = total_weight_for_5_boxes / 5\n    total_weight_for_3_boxes = weight_per_box * 3\n    return total_weight_for_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Calculate permutations for comics as one group\n    comics_permutations = factorial(4)\n    # Calculate permutations for fictions as one group\n    fictions_permutations = factorial(6)\n    # Calculate permutations for arranging two groups\n    groups_permutations = factorial(2)\n\n    # Total permutations is the product of the permutations of each group and the permutations of the groups themselves\n    total_permutations = comics_permutations * fictions_permutations * groups_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let's assume Dora's correct answers are x, so she has 10-x wrong/skipped answers\n    # Justin's correct answers are y, so he has 10-y wrong/skipped answers\n    # According to the problem, the following system of equations must hold:\n    # 10*x - 5*(10-x) + 10*y - 5*(10-y) = 155\n    # and\n    # 10*y - 5*(10-y) = 10*x - 5*(10-x) + 15\n    # We can solve this system using simple linear algebra\n\n    for x in range(11): # Dora can have between 0 and 10 correct answers\n        for y in range(11): # Justin can have between 0 and 10 correct answers\n            dora_points = 10 * x - 5 * (10 - x)\n            justin_points = 10 * y - 5 * (10 - y)\n            if dora_points + justin_points == 155 and justin_points == dora_points + 15:\n                return x\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n\n    # Total candies sold by Class A\n    total_A = 3 * 12\n\n    # Total candies sold by Class A and Class B\n    total_AB = (3 + 4) * 8\n\n    # Total candies sold by Class B\n    total_B = total_AB - total_A\n\n    # Average number of candies sold by each group in Class B\n    average_B = total_B / 4\n\n    return average_B\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    remaining_length = total_length - used_length\n    pieces = 10\n    length_per_piece = remaining_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    final_passengers = 22\n    remaining_after_second_stop = final_passengers * 3\n    initial_passengers = remaining_after_second_stop * 5 // 2\n    return initial_passengers\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    percentage = 45 / 100\n    number = 80\n\n    ans = percentage * number\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    return comb(7, 2)\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "def solution():\n    from math import gcd\n\n    # Use gcd from the math library to compute the greatest common factor\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the time Lee takes to finish the job alone\n    # Let n be the time Nancy takes to finish the job alone\n    l, n = symbols('l n')\n\n    # Lee and Nancy together finish the job in 10 hours\n    # 1/l + 1/n = 1/10\n    equation1 = Eq((1 / l) + (1 / n), 1 / 10)\n\n    # If Lee works for 6 hours and then Nancy works for 20 hours, they finish the job\n    # 6/l + 20/n = 1\n    equation2 = Eq(6 / l + 20 / n, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, n))\n\n    # We want the time Nancy takes to finish the job by herself, which is 'n'\n    return solutions[n]\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    num_handshakes = comb(num_people, 2) # 10 choose 2\n    return num_handshakes\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # initial number of red and green balls\n    red_balls = 5\n    green_balls = 10\n\n    # let x be the number of red balls to be added\n    # the probability of getting a green ball should be 1/3, thus \n    # we have green_balls / (red_balls + green_balls + x) = 1/3\n\n    # solve for x\n    x = (3 * green_balls) - red_balls - green_balls\n\n    return x\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n\n    num_small_squares = (large_square_side // small_square_side) ** 2\n\n    return num_small_squares\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n\n    ratio_white_to_milk_to_dark = Eq(white / milk, 3 / 7)\n    ratio_milk_to_dark = Eq(milk / dark, 7 / 5)\n    dark_white_difference = Eq(dark - white, 8)\n\n    solutions = solve((ratio_white_to_milk_to_dark, ratio_milk_to_dark, dark_white_difference), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    total_students = symbols('total_students')\n\n    # Let's call the total number of students \"total_students\"\n\n    # 1/4 of the students like badminton\n    badminton_lovers = total_students / 4\n\n    # In addition to 1/4 of the total, there are 3 more badminton lovers\n    badminton_lovers += 3\n\n    # The remaining students after removing those who like badminton\n    remaining_students = total_students - badminton_lovers\n\n    # 1/3 of the remaining students less 3 like table tennis\n    table_tennis_lovers = (remaining_students / 3) - 3\n\n    # Rest of the students, which is 25 students in total, like football\n    football_lovers = 25\n\n    # The total number of students is the sum of students that like badminton, table tennis and football\n    equation = Eq(badminton_lovers + table_tennis_lovers + football_lovers, total_students)\n\n    students_in_class = solve(equation)\n\n    return students_in_class[0]\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    metres = 70.24\n    centimetres_per_metre = 100\n    centimetres = metres * centimetres_per_metre\n    return centimetres\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    # If 5p is one-quarter of her money, then her total money is 4 times 5p\n    total_money = 5 * 4\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_spent = 25 + 10\n    change = 50 - total_spent\n    return change\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d2 != d3 and d1 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Ones digit pattern for powers of 2: 2, 4, 8, 6, ...\n    # Since 2^4 has the same ones digit as 2, 32^4 will have the same ones digit as 32.\n    # 33 (mod 4) is 1, so 32^33 has the same ones digit as 32^1, which is 2.\n\n    # Ones digit pattern for powers of 2: 2, 4, 8, 6, ...\n    # Ones digit pattern for powers of 22: 2, 4, 8, 6, ...\n    # 22^4 has the same ones digit as 22, 22^29 will have the same ones digit as 22^1.\n    # 29 (mod 4) is 1, so 22^29 has the same ones digit as 22^1, which is 2.\n    \n    # The final ones digit is (ones digit of 32^33) - (ones digit of 22^29)\n    # Which is 2 - 2 = 0\n\n    return 0\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_sixes(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n    \n    # Since we know that 6 appears 18 times, we will iteratively find the number of pages\n    # Start from 1 and go up until the count of 6's is 18\n    max_pages = 1\n    while True:\n        if count_sixes(max_pages) == 18:\n            break\n        max_pages += 1\n    \n    # Decrease in case the count of 6's has exceeded 18\n    while count_sixes(max_pages - 1) == 18:\n        max_pages -= 1\n\n    return max_pages\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n    num_combinations = num_fruits * num_vegetables\n    return num_combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Ratio 4:9 is equivalent to 81:x (x being the unknown)\n    # Therefore, 4/9 = 81/x\n    \n    # Cross-multiply to find the value of x\n    x = (4 * 81) / 9\n\n    # Return the answer\n    return x\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Sam had 40 stickers more than Peter.\n    # Let the number of stickers Peter originally had be x.\n    # Thus, Sam originally had x + 40 stickers.\n    peter, sam = symbols('peter sam')\n\n    # Sam gave 20% of his stickers to Peter.\n    # Peter now has x + 0.20 * (x + 40).\n    # Sam now has (x + 40) - 0.20 * (x + 40).\n\n    # Peter gave 25% of his stickers to Sam.\n    # Sam now has (x + 40) - 0.20 * (x + 40) + 0.25 * (x + 0.20 * (x + 40)).\n    # Peter now has x + 0.20 * (x + 40) - 0.25 * (x + 0.20 * (x + 40)).\n\n    # In the end, Sam had 96 stickers more than Peter.\n    # ((x + 40) - 0.20 * (x + 40) + 0.25 * (x + 0.20 * (x + 40))) = (x + 0.20 * (x + 40) - 0.25 * (x + 0.20 * (x + 40))) + 96\n\n    # We need to set up an equation based on the above description and solve for x.\n    equation = Eq(sam - 0.20 * sam + 0.25 * (peter + 0.20 * sam), peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam) + 96)\n\n    # Replace sam with (peter + 40) as Sam had 40 more stickers initially.\n    modified_equation = equation.subs(sam, peter + 40)\n\n    # Solve the equation to find the original number of stickers Peter had.\n    solutions = solve(modified_equation, peter)\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height_reached_after_two_jumps = (5 + 5) - 3  # Jump up twice, fall down once\n    total_height = 40\n    jumps = 0\n    current_height = 0\n    \n    # Keep jumping in pairs and falling down until within one jump from the top\n    while current_height + height_reached_after_two_jumps < total_height:\n        current_height += height_reached_after_two_jumps\n        jumps += 2\n\n    # Take the final jump(s) to reach the top\n    if current_height + 5 >= total_height:\n        jumps += 1\n    else:\n        jumps += 2\n    \n    return jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = 0\n    for n in range(1, 2013, 2):\n        ans += ((n + 1) ** 3) / (n * (n + 1) * (n + 2))\n    ans += 1 / 4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for n in range(1, 100):\n        if n % 16 == 0 and (n + 1) % 5 == 0 and (n**0.5).is_integer():\n            return n\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    common_difference = 21 - 15\n    last_term = 39\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_for_9_days = cans_per_day * 9\n    return cans_for_9_days\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    marks_for_correct = 4\n    deduction_for_wrong_or_unanswered = 2\n    total_score = 152\n\n    # Let x be the number of correct answers\n    # Every wrong/unanswered question contributes to -2 marks from the score that could be obtained\n    # if the question would have been answered correctly, as we get -2 instead of +4, which is a difference of 6\n    # Hence, the equation for the total score is:\n    # 4x - 2(80 - x) = 152\n    # Simplify and solve for x:\n    # 4x - 160 + 2x = 152\n    # 6x = 152 + 160\n    # 6x = 312\n    # x = 312 / 6\n    correct_answers = (total_score + deduction_for_wrong_or_unanswered * total_questions) // (marks_for_correct + deduction_for_wrong_or_unanswered)\n\n    return correct_answers\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # To share 16 sausages among 24 people, each person should get 16/24 of a sausage.\n    # This fraction simplifies to 2/3 of a sausage per person.\n    # To accomplish this with the least number of cuts, we consider cutting each sausage into thirds.\n    # This would require 16 * 2 cuts (since each sausage is cut into 3 pieces, but the last cut of each sausage is unnecessary).\n    # Then, each person can get 2 pieces (which equals to 2/3 of a sausage).\n    \n    # However, we need to cut the minimum number of times. Since we can rearrange the pieces after cutting,\n    # we can cut all sausages at once by aligning them and then making two cuts across all sausages.\n    \n    # In summary, we need only 2 cuts to get 2/3 of a sausage for each person, with pieces being rearranged as necessary.\n    \n    # The logic:\n    # 1. Align all sausages together.\n    # 2. Make one cut to divide each sausage into one third and two thirds. This is the first cut.\n    # 3. Make another cut to divide the two third pieces again into one third and one third. This is the second cut.\n    # Now we have 3 pieces per sausage, with a total of 48 pieces, which is enough for 24 people to have 2 pieces each, equivalent to 2/3 of a sausage.\n    \n    return 2\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"RAINBOW\")  # Total number of letters in RAINBOW\n    total_vowels = len(\"AI\")  # Total vowels in RAINBOW\n\n    total_ways_all = factorial(total_letters)  # Total ways to arrange all letters\n    total_ways_vowels_together = factorial(total_vowels) * factorial(total_letters - total_vowels + 1)\n    # The above calculates the number of ways vowels can be together. We treat the group of vowels as a single unit\n    # and arrange with the other letters, then multiply by the arrangements of vowels within that group.\n\n    ans = total_ways_all - total_ways_vowels_together  # Subtract the number of ways vowels can be together from total ways\n\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy / 4) - 10)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from sympy import gcd\n\n    a = 39\n    b = 51\n    c = 147\n\n    # Calculate the differences between the numbers\n    diff1 = b - a\n    diff2 = c - a\n\n    # Find the greatest common divisor of the differences\n    ans = gcd(diff1, diff2)\n\n    return ans\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # A contains 350 mL more water than B initially\n    equation1 = Eq(A, B + 350)\n\n    # After spilling 500 mL, B has twice as much water as A\n    equation2 = Eq(B, 2 * (A - 500))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    return 3 / 8\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Let's denote the total number of team members as \"total_members\".\n    # According to the problem:\n    # Lovelle spoke 3 sentences to each of the 5 other team members.\n    # Hence, there are 5 members that Lovelle spoke to.\n    spoke_to_lovelle = 5\n\n    # Additionally, there are 12 members that did not speak to Lovelle.\n    did_not_speak_to_lovelle = 12\n\n    # Therefore, if we consider Lovelle as well, we add 1 to the sum of members who spoke and did not speak to her.\n    total_members = spoke_to_lovelle + did_not_speak_to_lovelle + 1  # Adding Lovelle\n\n    return total_members\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from itertools import permutations\nfrom collections import Counter\n\ndef solution():\n    word = \"STATISTIC\"\n    total_length = len(word)\n    # Generate all unique permutations of the word\n    all_perms = set(permutations(word))\n    count = 0\n    # Iterate over all permutations and check the 'TT' condition\n    for perm in all_perms:\n        if 'TT' not in ''.join(perm):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n    total_tickets_sold = first_week_tickets + second_week_tickets + third_week_tickets\n    return total_tickets_sold\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # Count digits for pages 1-9 (1 digit each)\n    digits_1_to_9 = 9\n    \n    # Count digits for pages 10-99 (2 digits each)\n    digits_10_to_99 = (99 - 10 + 1) * 2  # (90 pages * 2 digits)\n\n    # Count digits for pages 100-325 (3 digits each)\n    digits_100_to_325 = (325 - 100 + 1) * 3  # (226 pages * 3 digits)\n    \n    # Sum all counts\n    total_digits = digits_1_to_9 + digits_10_to_99 + digits_100_to_325\n    \n    return total_digits\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    return 58 + 127\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    # We are looking for the smallest number x such that (x - 2) / 3 is an integer,\n    # and (x - 2) * (2 / 3) is divisible by 4\n    x = 3 # Starting from the smallest number that can be divided into 3 parts.\n    while True:\n        if (x - 2) % 3 == 0 and ((x - 2) * 2 // 3) % 4 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n\n    # Sarah had $20 more Pokemon cards than Mark\n    equation1 = Eq(sarah, mark + 20)\n    \n    # Sarah bought $16 extra Pokemon cards today\n    sarah_new = sarah + 16\n    \n    # she had $3 times more Pokemon cards than Mark had\n    equation2 = Eq(sarah_new, 3 * mark)\n    \n    # Solve the equations for sarah and mark\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    return solutions[sarah]\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) // 8\n    return ans\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # Maximum attempts = Number of ways to pick one key per chest\n    # For the first chest, there are 9 possible keys\n    # For the second chest, there are 8 remaining keys (one key has been tried on the first chest)\n    # For the third chest, there are 7 remaining keys\n    # For the fourth chest, there are 6 remaining keys\n    # Use the multiplication law for independent events\n    max_attempts = 9 * 8 * 7 * 6\n\n    return max_attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    differences = [3445 - 2945, 3245 - 3445, 3745 - 3245, 4045 - 3745, 3845 - 4045]\n    pattern_diff = set(differences)\n\n    if len(pattern_diff) == 1:  # If all differences are the same\n        next_diff = differences[0]\n    else:\n        # Identify the pattern in the differences\n        next_diff = differences[2] if len(pattern_diff) > 2 else differences[-1]\n\n    missing_number = 3745 + next_diff\n    return missing_number\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    round_to_nearest = 10\n    ans = round(number / round_to_nearest) * round_to_nearest\n    return ans\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    sum_of_squares = 0\n    for i in range(1, 26, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    return 15 * (1/ (1/7))\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of mushrooms gathered in the first hour\n    # let y be the number of mushrooms gathered in the second hour\n    x, y = symbols('x y')\n\n    # create equations based on the problem statement\n    equation1 = Eq(x + y, 40)           # Total mushrooms gathered in two hours\n    equation2 = Eq(x + 26, y)           # If 26 more mushrooms were gathered in the first hour, the number would be equal to the second hour\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    # Let the number of men be x\n    # Then the number of women will be 4x\n    # Total cupcakes eaten = women's cupcakes + men's cupcakes\n    # 2 * (4x) + 5 * x = 182\n    # Solve for x and then find the number of women (4x)\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    cupcakes_by_women = 2 * 4 * x\n    cupcakes_by_men = 5 * x\n    equation = Eq(cupcakes_by_women + cupcakes_by_men, 182)\n\n    num_men = solve(equation, x)[0]\n    num_women = 4 * num_men\n\n    return num_women\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    num_coins = 11\n    coin_diameter = 1.85\n    total_length = coin_diameter * (num_coins - 1) + coin_diameter\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    difference = 3\n    num_terms = 14\n    \n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number / 100) * 100\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20 / 12\n    return int(numerator)\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    people = 7  # We consider one person as fixed and arrange the remaining 7 people\n    arrangements = factorial(people)  # Calculate the permutations for the 7 people\n    return arrangements\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    temp_difference = night_temp - morning_temp\n\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # Calculate the last digit of 2^2017 and 3^2017 separately\n    last_digit_2 = pow(2, 2017, 10)\n    last_digit_3 = pow(3, 2017, 10)\n    \n    # Multiply the last digits and get the last digit of the product\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of ants in the kitchen as x.\n    x = symbols('x')\n\n    # Jerome swept 3/4 of the ants into his neighbour's house.\n    ants_after_sweeping = x * (1 - 3/4)\n\n    # 2/5 of the remaining ants ran out of the kitchen in fear.\n    ants_after_running = ants_after_sweeping * (1 - 2/5)\n\n    # Then, 185 hungry ants crawled into the kitchen afterwards.\n    ants_after_crawling = ants_after_running + 185\n\n    # The number of ants in Jerome's kitchen in the end was twice the number at first.\n    equation = Eq(ants_after_crawling, 2 * x)\n\n    # Solve for x, the initial number of ants.\n    initial_ants = solve(equation, x)\n\n    return initial_ants[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago \n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    return 25 * 123 * 0.4\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_price = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_cost = book_price * (books_day1 + books_day2)\n    \n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    ans = 6342 // 7\n    return ans\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    # Assuming the sequence is a square number sequence where each term is n^2\n    # The next term after 49 (7^2) would be (7+1)^2\n    \n    next_term = (7 + 1) ** 2\n\n    return next_term\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def next_number(n):\n        next_n = 2 * n + 4\n        if next_n >= 100:\n            next_n %= 100 \n        return next_n\n\n    current_number = 1\n    for _ in range(1, 2022):\n        current_number = next_number(current_number)\n    \n    return current_number\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import primerange\n    \n    # Generate a list of prime numbers less than 41 because 3a + 7b must be less than 41\n    primes = list(primerange(1, 41))\n    \n    # Iterate through all pairs of primes\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                return a + b\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    # Find the least common multiple (LCM) of the two flashing rates\n    red_flash_rate = 4  # red light flashes 4 times a minute\n    green_flash_rate = 6  # green light flashes 6 times a minute\n\n    # You can use the gcd function from the math module to find the LCM\n    from math import gcd\n    lcm = (red_flash_rate * green_flash_rate) // gcd(red_flash_rate, green_flash_rate)\n\n    # Calculate how many times the lights flash at the same instant in one minute\n    flashes_per_minute = lcm // red_flash_rate\n\n    # Calculate how many times the lights flash at the same instant in one hour (60 minutes)\n    flashes_per_hour = flashes_per_minute * 60\n\n    # Including the first time they flash together\n    ans = flashes_per_hour + 1\n\n    return ans\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    return (4.5 + 10.3) / 2\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    # Jalen sold the sofa at $6500 making a profit of 30%\n    selling_price = 6500\n    profit_percent = 30\n\n    # Calculate the cost price based on the profit percentage\n    cost_price = selling_price / (1 + profit_percent / 100)\n\n    # Another scenario where the profit is $5000\n    new_profit = 5000\n\n    # Calculate the new selling price\n    new_selling_price = cost_price + new_profit\n\n    # Calculate the new profit percentage\n    new_profit_percent = (new_profit / cost_price) * 100\n\n    return new_profit_percent\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    \n    solution = solve(equation, n)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    # Fraction of the drink that is water\n    frac_water = 3/5\n    \n    # Total volume of one bottle (assuming the rest is water)\n    total_volume_one_bottle = 120 / (1 - frac_water)\n    \n    # Volume of water in one bottle\n    water_volume_one_bottle = total_volume_one_bottle * frac_water\n    \n    # Total volume of water needed for 6 bottles\n    total_water_volume_six_bottles = water_volume_one_bottle * 6\n    \n    return total_water_volume_six_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # Convert kilograms to grams\n    return n\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the first term of the sequence as 'a' and common difference as 'd'.\n    a, d = symbols('a d')\n    \n    # Based on the arithmetic progression sum formula for n terms:\n    # Sum of the first four terms: S_4 = n/2 * (2*a + (n-1)*d).\n    # Sum of the last four terms: S_4' = n/2 * [2*(a + (n-1)*d) + (n-1)*d].\n    # It's given that S_4' - S_4 = 32, hence we get the equation:\n    # (8/2) * [2*(a + 7*d) + 3*d] - (4/2) * (2*a + 3*d) = 32\n\n    equation = Eq(4 * (2 * (a + 7*d) + 3*d) - 2 * (2*a + 3*d), 32)\n\n    # Solve the equation for 'd'.\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    letters = \"EARTH\"\n    total_letters = len(letters)\n    return factorial(total_letters)\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    # Simon's original speed\n    simon_speed = 150\n    # Friend's speed\n    friend_speed = 200\n    # Time walked before Simon realizes\n    time_walked = 10\n    # Distance walked by Simon before he realizes\n    distance_simon = simon_speed * time_walked\n    # Distance walked by Simon's friend in the same time\n    distance_friend = friend_speed * time_walked\n    # Simon's speed when he runs back\n    simon_run_speed = 2 * simon_speed\n    # Time taken by Simon to run back to school\n    time_to_run_back = distance_simon / simon_run_speed\n    # Distance covered by Simon's friend in the time Simon takes to run back\n    distance_friend_while_simon_runs = friend_speed * time_to_run_back\n    # Total distance between Simon and his friend when Simon reaches the school\n    total_distance = distance_friend + distance_friend_while_simon_runs\n\n    return total_distance\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = perm\n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y\n        if send + more == money and s != 0 and m != 0:\n            return money\n    return None\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_bells_stars_balls = factorial(7) # Total permutation of 7 items\n    identical_bells = factorial(2)         # Permutations for 2 identical bells\n    identical_stars = factorial(2)         # Permutations for 2 identical stars\n    identical_red_balls = factorial(2)     # Permutations for 2 identical red balls\n    \n    # Divide by permutations of identical items to account for indistinguishability\n    ans = total_bells_stars_balls // (identical_bells * identical_stars * identical_red_balls)\n    \n    return ans\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Based on the problem constraints and searching for the most optimal solution:\n    # The two fastest people (Eddie and Jack) will be the ones moving the flashlight across the bridge.\n    # Strategy:\n    # 1. Eddie (1m) and Jack (2m) cross together: 2 minutes\n    # 2. Eddie (1m) goes back with the flashlight: 1 minute\n    # 3. Rose (5m) and Mary (10m) cross together: 10 minutes\n    # 4. Jack (2m) goes back with the flashlight to bring Eddie: 2 minutes\n    # 5. Eddie (1m) and Jack (2m) cross together again: 2 minutes\n    # Total time = 2 + 1 + 10 + 2 + 2 = 17 minutes\n    return 17\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # Litres\n    container_fraction = 0.25\n    cup_volume_ml = 150  # Millilitres\n    cups_count = 14\n    \n    container_volume = initial_volume * container_fraction\n    cups_volume_litres = (cup_volume_ml * cups_count) / 1000\n    \n    remaining_water = initial_volume - container_volume - cups_volume_litres\n    \n    return remaining_water\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"2{digit1}{digit2}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 0\n    for i in range(100):\n        if i % 7 == 0:\n            n = i\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let p be the number of pages Anny writes per day originally\n    p = symbols('p')\n    \n    # Original rate: p pages/day for 8 days\n    original_total_pages = p * 8\n    \n    # Increased rate: (p+2) pages/day for (8-2) days\n    increased_total_pages = (p + 2) * (8 - 2)\n    \n    # Since the total number of pages to finish the homework doesn't change,\n    # set the two expressions equal to each other and solve for p\n    equation = Eq(original_total_pages, increased_total_pages)\n    pages_per_day_solution = solve(equation, p)\n    \n    # Since we're looking for total pages, use the solution in either expression\n    total_pages = pages_per_day_solution[0] * 8\n\n    return total_pages\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Calculate the rate at which Pip bakes the bread\n    pip_rate = 5 / 20  # loaves per minute\n\n    # Calculate the rate at which Bud bakes the bread\n    bud_rate = 3 / 15  # loaves per minute\n\n    # Calculate the total number of loaves baked in 40 minutes\n    total_loaves = (pip_rate * 40) + (bud_rate * 40)\n\n    return total_loaves\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    increase_percentage = 0.1\n    decrease_percentage = -0.1\n\n    value_after_increase = 11000 / (1 + increase_percentage)\n    original_price = value_after_increase\n    value_after_decrease = original_price * (1 + decrease_percentage)\n    profit_or_loss = value_after_decrease - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Yohan must take at most this number of socks to guarantee a pair of white socks\n    # Taking the worst-case scenario into account, Yohan could take all red and black socks first\n    max_socks_without_white = 10 + 10 # All red and black socks\n    white_socks_to_get_a_pair = 2 # After having all the other socks, the next two must be white for sure\n\n    # Maximum number of socks Yohan must take to get a pair of white socks\n    max_socks = max_socks_without_white + white_socks_to_get_a_pair\n    return max_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expr = (12*a)/4 + 2*a*5\n    simplified_expr = expr.simplify()\n    return simplified_expr\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = 1  # Placeholder for algebraic simplification\n    ans = (6 * d) + (5 * d) - d\n    return ans / d  # To return the coefficient of d in its simplest form\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    eq = Eq(cookies * (1 - 3/8 - 1/6), 33)\n    initial_cookies = solve(eq, cookies)\n\n    return initial_cookies[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    # Store the numbers as described in the sequence pattern\n    sequence = []\n    for i in range(1, 10):\n        sequence += [i] * (i + 2)\n    \n    # Calculate the median\n    total_numbers = len(sequence)\n    if total_numbers % 2 == 1:\n        # If the total number of terms is odd, the median is the middle number\n        median = sequence[total_numbers // 2]\n    else:\n        # If the total number of terms is even, the median is the average of the two middle numbers\n        median = (sequence[total_numbers // 2 - 1] + sequence[total_numbers // 2]) / 2\n    \n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jemma_number = symbols('jemma_number')\n    equation = Eq((jemma_number + 3) * 5, 35)\n\n    solution = solve(equation, jemma_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    start_date = datetime(2021, 5, 5)  # year is arbitrary, not specified in question\n    end_date = datetime(2021, 6, 7)\n    one_day = timedelta(days=1)\n    \n    sundays_count = 0\n    current_date = start_date\n    \n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # 6 is Sunday\n            sundays_count += 1\n        current_date += one_day\n    \n    return sundays_count\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let r and w be the initial number of red and white balls, respectively\n    r, w = symbols('r w', integer=True)\n    # let p be the number of red balls added by Pip\n    p = symbols('p', integer=True)\n    \n    # Initial condition: ratio of red to white is 3:2\n    initial_condition = Eq(r / w, 3 / 2)\n    \n    # After Pip adds red balls, the ratio becomes 5:3\n    pip_condition = Eq((r + p) / w, 5 / 3)\n    \n    # Then Bud adds white balls (w + 100), and the ratio becomes 5:4\n    bud_condition = Eq((r + p) / (w + 100), 5 / 4)\n    \n    # Solving the system of equations\n    solutions = solve((initial_condition, pip_condition, bud_condition), (r, w, p))\n    \n    # Return the number of white balls initially\n    return solutions[w]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_volume = 120\n    bucket_volume = 8\n\n    num_buckets = barrel_volume // bucket_volume\n\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed_fraction = 1/4\n    left_handed_pupils = total_pupils * left_handed_fraction\n    not_left_handed_pupils = total_pupils - left_handed_pupils\n    \n    return int(not_left_handed_pupils)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # kg\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for k in range(10):\n        number = int(f'5{k}27{k}')\n        \n        # Divisibility rule for 3: The sum of the digits must be divisible by 3\n        if sum(int(digit) for digit in str(number)) % 3 != 0:\n            continue\n\n        # Divisibility rule for 4: The last two digits must form a number divisible by 4\n        if int(str(number)[-2:]) % 4 != 0:\n            continue\n        \n        return k\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the factor increase for the cookies and brownies.\n    # Initially, 4x cookies and 3x brownies were baked.\n    # After giving away 6 brownies, it became 12y cookies and 7y brownies.\n    x, y = symbols('x y')\n\n    # Set up the equations based on the ratios given and the change in brownies.\n    equation1 = Eq(4 * x, 12 * y)  # Ratio of cookies remains the same\n    equation2 = Eq(3 * x - 6, 7 * y)  # Ratio of brownies after giving away 6\n\n    # Solve the system of equations for x and y\n    solution = solve((equation1, equation2), (x, y))\n\n    # Compute the total number of cookies and brownies baked initially\n    cookies_baked = 4 * solution[x]\n    brownies_baked = 3 * solution[x]\n    total_baked = cookies_baked + brownies_baked\n\n    return total_baked\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Number of days taken by 4 companies to build 900m expressway\n    days_for_4_companies = 5\n\n    # Number of days needed for 6 companies to build the same 900m expressway\n    # Since 4 companies take 5 days, 6 companies would take (4/6) * 5 days because work done is inversely proportional to the number of companies\n    days_for_6_companies_900m = (4/6) * days_for_4_companies\n\n    # Total length of expressway to be built by 6 companies\n    total_length = 5400\n\n    # Number of days needed for 6 companies to build 5400m expressway is proportional to the length of expressway\n    # Which is (total_length / 900m) times the days needed for 900m\n    days_for_6_companies_5400m = (total_length / 900) * days_for_6_companies_900m\n\n    return days_for_6_companies_5400m\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    buy1 = 10\n    sell1 = 20\n    buy2 = 30\n    sell2 = 40\n\n    profit = (sell1 - buy1) + (sell2 - buy2)\n\n    return profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n\n    ticket_price = adam_spent / adam_tickets\n    claire_tickets = claire_spent / ticket_price\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25\n\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    cards = set(range(1, 9))\n    for player_one_cards in itertools.combinations(cards, 4):\n        if sum(player_one_cards) == 23:\n            player_two_cards = cards - set(player_one_cards)\n            return max(player_two_cards)\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    # Total number of shoes is 9 pairs times 2 shoes per pair\n    total_shoes = 9 * 2\n    # Since 2 cobblers are working simultaneously\n    # The total time taken will be half the time it would take for one cobbler\n    time_per_cobbler = total_shoes * 2 / 2\n    return time_per_cobbler\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(1, 21))\n    ans = sum(sum(j**2 for j in range(1, i+1)) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    total_score = 168\n\n    # Correct + Incorrect = Attempted Questions\n    # 4*Correct - Incorrect = Total Score\n\n    # Let's represent the number of incorrect answers by \"inc\"\n    # Then, the number of correct answers is \"attempted_questions - inc\"\n    # We can then represent the score equation as:\n    # 4*(attempted_questions - inc) - inc = total_score\n    # Simplifying it gives us:\n    # 4*attempted_questions - 5*inc = total_score\n    # Now we solve for \"inc\".\n\n    inc = (4*attempted_questions - total_score) // 5\n    correct_answers = attempted_questions - inc\n\n    return correct_answers\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "def solution():\n    from math import comb\n    num_players = 6\n    num_handshakes = comb(num_players, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    total_dumplings = 17 + 11\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = 17 - dumplings_each\n\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    number = two_thirds_of_number * (3/2)\n    three_quarters_of_number = number * (3/4)\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    # Sum up all odd numbers between 0 and 20.\n    # Since odd numbers are 2 units apart (e.g., 1, 3, 5, ...),\n    # we can use a list comprehension to create a list of these numbers and sum them up.\n    ans = sum([i for i in range(1, 20, 2)])\n    return ans\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        CBCD = 1000 * C + 100 * B + 10 * C + D\n        CDBC = 1000 * C + 100 * D + 10 * B + C\n        BDEC = 1000 * B + 100 * D + 10 * E + C\n\n        if CBCD + CDBC == BDEC and C != 0 and B != 0:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n    # Calculate the least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n    \n    # Find the minimum multiple of the LCM that is greater than or equal to 1000\n    min_packs = (1000 // pack_lcm) * pack_lcm\n    if min_packs < 1000:\n        min_packs += pack_lcm\n    \n    return min_packs\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Treating the three vowels AEE as a single unit, we'll have the letters: [AEE]CHLLNG\n    # There are a total of 6 + 1 = 7 'items' to arrange (since AEE is a single unit now).\n    items_to_arrange = 7\n    \n    # Number of ways to arrange these 7 'items' is 7!.\n    item_arrangements = factorial(items_to_arrange)\n\n    # Now, within AEE, E's can be rearranged in 2! ways, because there are 2 E's which are identical.\n    vowel_arrangements = factorial(2)\n    \n    # However, the two L’s in CHLLNG are identical, so we divide by the 2! permutations of the L’s.\n    identical_l_arrangements = factorial(2)\n    \n    # Total number of ways to arrange the word is then the product of the item arrangements\n    # and the vowel arrangements, divided by the identical l arrangements.\n    total_arrangements = (item_arrangements * vowel_arrangements) // identical_l_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Total spending from January to March (3 months)\n    jan_to_mar = 450 * 3\n\n    # Total spending from April to July (4 months)\n    apr_to_jul = 350 * 4\n\n    # Total spending from August to October (already given)\n    aug_to_oct = 1250\n\n    # Total spending from November to December (2 months)\n    nov_to_dec = 400 * 2\n\n    # Total spending for the whole year\n    total_spending_year = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n\n    # Average spending per month from January to December\n    average_per_month = total_spending_year / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 50\n    while n % 13 != 0:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_revenue = (4 * 5) + (1 * 10) + (5 * 12)\n    \n    average_selling_price = total_revenue / total_cakes\n    return average_selling_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    divisor_quotient = 1  # Start testing from the possible lowest non-zero divisor/quotient\n    while True:\n        dividend = divisor_quotient ** 2 + 7  # Calculate dividend using the formula dividend = divisor * quotient + remainder\n        if dividend % divisor_quotient == 7:  # Check if the remainder is 7 when divided by the divisor_quotient\n            return dividend\n        divisor_quotient += 1  # Increment the value and try again for the next possible divisor/quotient\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve, simplify\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n    equation1 = Eq(cars, 4 / 3 * bikes)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n\n    # Now, we write a loop that checks each combination of bikes and lorries for a solution.\n    for lorries_count in range(1, 100):\n        for bikes_count in range(1, 100):\n            if simplify(equation1.subs(bikes, bikes_count)) and simplify(equation2.subs(lorries, lorries_count)):\n                cars_count = 4 / 3 * bikes_count\n                bikes_count = lorries_count + lorries_count / 4\n                # Verify if the total count is even and less than 100\n                if (cars_count + bikes_count + lorries_count) % 2 == 0 and (cars_count + bikes_count + lorries_count) < 100:\n                    return (int(cars_count), int(bikes_count), int(lorries_count))\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n\n    value_after_2_years = initial_value * ((1 - depreciation_rate) ** 2)\n\n    return value_after_2_years\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    n = 12\n\n    # formula for the nth term of an arithmetic progression: a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    entrance_capacity = 25\n    total_time_one_entrance = 16\n    \n    # Calculate the total number of visitors that joined the line in 16 minutes\n    total_visitors = visitors_per_minute * total_time_one_entrance\n    \n    # Calculate the capacity per minute with 2 entrances\n    capacity_two_entrances = 2 * entrance_capacity\n    \n    # Calculate the time it takes for all visitors to check in with 2 entrances\n    time_with_two_entrances = total_visitors / capacity_two_entrances\n    \n    return time_with_two_entrances\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days_needed = total_pages / pages_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    result = 6**2 - 4**2\n    return result\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(245)\n    # To make 245p a cube, each prime factor's power must be a multiple of 3\n    # The prime factorization of 245 is 5^1 * 7^2\n    # To make it a cube, we need two more 5's and one more 7\n    p = 5**2 * 7**1\n\n    return p\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    total_money = 100\n    spent_on_book = 0.10 * total_money\n    left_after_book = total_money - spent_on_book\n    spent_on_DVD = 0.20 * left_after_book\n    money_left = left_after_book - spent_on_DVD\n    \n    return money_left\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # Since 1/3 is 0.333.... recurring\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    day_distance = 5\n    night_distance = 3\n    net_distance = day_distance - night_distance\n    current_distance = 0\n    days = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n    \n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    original_number = (final_number - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    # Let x be the original number of oranges and y be the original number of lemons\n    # Then we have the following system of equations:\n    #   3/5 = x/y  (original ratio)\n    #   1/2 = (x-48)/y  (new ratio after selling 48 oranges)\n\n    # From the first equation: x = (3/5)y\n    # Substitute x in the second equation: 1/2 = ((3/5)y-48)/y\n    # Rearrange the second equation: (1/2)y = (3/5)y - 48\n    # Solve for y: y = 2 * ((3/5)y - 48)\n    # y = (6/5)y - 96\n    # y - (6/5)y = -96\n    # y - (6/5)y + (1/5)y = -96\n    # (1/5)y = 96\n    # y = 96 * 5\n    y = 96 * 5\n\n    return y\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    ans = 8102 - 2018\n    return ans\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits: apples, pears, and cherries.\n    # Students can choose 1 fruit, 2 different fruits, or all 3 fruits.\n    # We use the pigeonhole principle to find the minimum number of students.\n    \n    # Choosing 1 fruit, there are 3 possibilities (apple, pear, cherry)\n    one_fruit = 3\n    \n    # Choosing 2 fruits, there are C(3, 2) = 3 combinations (apple-pear, apple-cherry, pear-cherry)\n    two_fruits = 3\n    \n    # Choosing all 3 fruits, there is 1 possibility\n    three_fruits = 1\n    \n    # Total different ways students can choose the fruits\n    total_ways = one_fruit + two_fruits + three_fruits\n    \n    # To ensure two students choose the same combination, we need one more student than the total ways.\n    # This is because if each student chooses a different combination, the (total_ways + 1)-th student will have to choose a combination that's already been chosen.\n    students_needed = total_ways + 1\n    \n    return students_needed\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "from math import comb\n\ndef solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # 10p spent\n    fraction_spent = 1 / 4  # one-quarter\n    initial_money = spent / fraction_spent  # calculate the initial money\n    return initial_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Number of legs for each animal\n    duck_legs = 2\n    parrot_legs = 2\n    rabbit_legs = 4\n\n    # Given number of animals\n    ducks = 3\n    parrots = 2\n    rabbit = 1\n\n    # Total legs of ducks, parrots, and rabbit\n    total_legs_of_known_animals = (ducks * duck_legs) + (parrots * parrot_legs) + (rabbit * rabbit_legs)\n\n    # Remaining legs are of the cats\n    remaining_legs = 32 - total_legs_of_known_animals\n\n    # Number of legs of a cat\n    cat_legs = 4\n\n    # Number of cats\n    cats = remaining_legs // cat_legs\n\n    return cats\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "from math import gcd\n\ndef solution():\n    students_class_A = 45\n    students_class_B = 75\n    students_class_C = 210\n\n    # Find the Greatest Common Divisor (GCD) for all three classes\n    gcd_AB = gcd(students_class_A, students_class_B)\n    gcd_ABC = gcd(gcd_AB, students_class_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy, father = symbols('judy father')\n    equation1 = Eq(judy + father, 63)\n    equation2 = Eq(father - judy, 33)\n    \n    current_ages = solve((equation1, equation2), (judy, father))\n    \n    judy_current = current_ages[judy]\n    father_current = current_ages[father]\n    \n    years_ago = symbols('years_ago')\n    equation3 = Eq(father_current - years_ago, 4 * (judy_current - years_ago))\n\n    years_ago_value = solve(equation3, years_ago)\n    \n    return years_ago_value[0]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n            \n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the older brother\n    # Let y be the current age of the younger brother\n    \n    x, y = symbols('x y')\n\n    # When the older brother was y years old, the younger brother was 12\n    equation1 = Eq(x - (y - 12), y)\n\n    # When the younger brother is x years old, the older brother will be 27\n    equation2 = Eq(y + (x - y), 27)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    lcm = 6*8*9*15 // (2*3*3) # Least common multiple of 6, 8, 9, 15 without common prime factors\n    min_markers = (1000 // lcm) * lcm\n    if min_markers < 1000:\n        min_markers += lcm\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rooms = symbols('rooms')\n    \n    # If 4 people in each room, 40 students don't have dormitories: 4*rooms + 40 = students\n    # If 6 people in each room, 24 beds will be vacated: 6*(rooms - 24/6) = students\n    equation1 = Eq(4*rooms + 40, 6*(rooms - 24/6))\n    \n    solutions = solve(equation1, rooms)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    position_difference = 15 - 10\n    common_difference = (fifteenth_number - tenth_number) / position_difference\n    n = 102\n\n    first_term = tenth_number - common_difference * (10 - 1)\n    nth_number = first_term + common_difference * (n - 1)\n\n    return int(nth_number)\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    sweets_eaten_fraction = 3/5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / sweets_eaten_fraction\n    sweets_left_over = total_sweets - sweets_eaten\n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    age_difference = 9 - 5\n    john_age_when_jane_15 = 15 - age_difference\n    return john_age_when_jane_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    for x in range(13 + 1):  # we only need to check numbers up to 13, since 13-x has to be non-negative\n        if (13 - x) ** 2 == 25:\n            return x\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    marked_price = 1.2 * cost_price\n    selling_price = 0.8 * marked_price\n    loss = marked_price - selling_price - 40\n    \n    solutions = solve(Eq(loss, 40), cost_price)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    value1 = 7 + (3 * 11)\n    value2 = (7 + 3) * 11\n    ans = value2 - value1\n    return ans\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Let the fill rate of Tap X be 1/10 tank per minute (since it fills the tank in 10 minutes)\n    fill_rate_x = 1 / 10\n    # Let the combined fill rate of Taps X and Y be 1/6 tank per minute (since they fill the tank together in 6 minutes)\n    combined_fill_rate = 1 / 6\n    # The fill rate of Tap Y can be found by subtracting Tap X's rate from the combined rate\n    fill_rate_y = combined_fill_rate - fill_rate_x\n    # The time it takes for Tap Y alone to fill the tank is the inverse of its fill rate\n    time_y = 1 / fill_rate_y\n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    like_apples = 20\n    like_strawberries = 30\n    like_both = 10\n    like_neither = 5\n\n    total_students = (like_apples + like_strawberries - like_both) + like_neither\n\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x for Xuanrui, y for Yaokuan\n    \n    # Xuanrui and Yaokuan had 708 markers altogether\n    equation1 = Eq(x + y, 708)\n    \n    # After Xuanrui gave away 532 markers\n    x_new = x - 532\n    \n    # Yaokuan sold 3/7 of his markers, so he is left with 4/7\n    y_new = y * (4/7)\n    \n    # They had an equal number of markers left\n    equation2 = Eq(x_new, y_new)\n    \n    # Solve the system of equations\n    solution_dict = solve((equation1, equation2), (x, y))\n    \n    # Return number of markers Xuanrui had at first\n    return solution_dict[x]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percent = 12\n    discount_amount = usual_price * (discount_percent / 100)\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    points_for_correct = 6\n    points_for_wrong = -2\n    total_points = 44\n    \n    # Let the number of correctly answered questions be x.\n    # Then, the number of incorrect questions is (total_questions - x).\n    # Based on the point system:\n    # x * points_for_correct + (total_questions - x) * points_for_wrong = total_points\n    # Solve for x\n    \n    x = (total_points - total_questions * points_for_wrong) / (points_for_correct - points_for_wrong)\n    \n    return int(x)\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum([1, 2*1, 3*2*1, 4*3*2*1, 5*4*3*2*1, 6*5*4*3*2*1, 7*6*5*4*3*2*1, 8*7*6*5*4*3*2*1])\n    ans = factorial_sum % 100\n    return ans\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    volume_a = 300  # mL\n    concentration_a = 0.20  # 20%\n\n    volume_b = 300  # mL\n    concentration_b = 0.30  # 30%\n\n    total_volume = volume_a + volume_b\n    total_sugar = (volume_a * concentration_a) + (volume_b * concentration_b)\n\n    mixture_concentration = total_sugar / total_volume\n\n    return mixture_concentration\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Ahmad and Ryan's marbles\n    ahmad, ryan = symbols('ahmad ryan')\n\n    # Equation 1: total number of marbles Ahmad and Ryan have\n    total_marbles_eq = Eq(ahmad + ryan, 1442)\n    # Equation 2: Ahmad has 6 times as many marbles as Ryan\n    ahmad_marbles_eq = Eq(ahmad, 6 * ryan)\n\n    # Solve the system of equations\n    solutions = solve((total_marbles_eq, ahmad_marbles_eq), (ahmad, ryan))\n\n    # Calculate the number of marbles Ahmad must give to Ryan for them to have equal number\n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    exchange_rate = 2.50  # 1 pound = 2.50 dollars\n    pounds = dollars / exchange_rate\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    two_notes, ten_notes = symbols('two_notes ten_notes')\n\n    # Equation 1: The total number of notes\n    equation1 = Eq(two_notes + ten_notes, 95)\n\n    # Equation 2: The total number of $2-notes after exchanging $10-notes\n    equation2 = Eq(two_notes + 5 * ten_notes, 175)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (two_notes, ten_notes))\n\n    return solutions[two_notes]\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    space_between = 1\n    \n    remaining_length = total_length - head_length  # Subtract the head of the train length\n    carriage_total_length = carriage_length + space_between  # Length of a carriage including the space after it\n    \n    # The number of carriages including the head of the train\n    num_carriages = 1 + remaining_length // carriage_total_length\n    \n    return num_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    count_ones = 0\n    count_tens = 0\n    count_hundreds = 0\n    for i in range(1, 289):\n        ones = i % 10\n        tens = (i // 10) % 10\n        hundreds = i // 100\n        if ones == 8:\n            count_ones += 1\n        if tens == 8:\n            count_tens += 1\n        if hundreds == 8:\n            count_hundreds += 1\n    ans = count_ones + count_tens + count_hundreds\n    return ans\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    # Define symbols for the shapes\n    delta, square, circle, diamond = symbols('delta square circle diamond')\n\n    # Define equations according to the question\n    equation1 = Eq(delta + delta, square)\n    equation2 = Eq(square + delta, circle)\n    equation3 = Eq(diamond, circle + square + delta)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (delta, square, circle, diamond))\n\n    # Find the solution for how many deltas are equal to diamond\n    ans = solutions[diamond] / solutions[delta]\n\n    return ans\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_points = 2\n    wrong_points = -1\n    target_score = 82\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = (correct_answers * correct_points) + (wrong_answers * wrong_points)\n        \n        if score == target_score:\n            return correct_answers\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 0\n    while True:\n        if (24 * x - 8) % 25 == 0:\n            y = (24 * x - 8) // 25\n            if isinstance(y, int):\n                break\n        x += 1\n    return x\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 because A is a two-digit number\n        for y in range(10):  # y can be 0-9\n            A = 10 * x + y  # Calculate the value of A\n            B = 20 * x + y  # Calculate the value of B\n            \n            if B == 25 + 6 * A:  # Check if B is 25 more than six times A\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    price_after_discount = original_price * (1 - discount_rate)\n    final_price = price_after_discount * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    cost_per_kg_bag1 = 5 / 2.5\n    cost_per_kg_bag2 = 7.70 / 4\n    return \"Bag 1\" if cost_per_kg_bag1 < cost_per_kg_bag2 else \"Bag 2\"\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inv = sum(1 / i for i in range(2001, 2011))\n    S = 1 / S_inv\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    num_books = 5\n    price_per_book = 4.50\n    total_cost = num_books * price_per_book\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # congruences are based on the equations:\n    # x ≡ 2 (mod 4)\n    # x ≡ 2 (mod 5)\n    # x ≡ 8 (mod 9)\n\n    # The Chinese Remainder Theorem helps to find a solution to these types of equations\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    x, _ = solve_congruence(*congruences)\n    return x\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    amount = 1\n    fraction1 = 2/5\n    fraction2 = 3/4\n\n    result = amount * fraction1 * fraction2\n    return result\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_one_fourth_full = 250  # Mass of the jar 1/4 full\n    mass_three_fourths_full = 350  # Mass of the jar 3/4 full\n\n    # The difference in mass corresponds to the mass of half the marmite\n    mass_half_marmite = mass_three_fourths_full - mass_one_fourth_full\n    \n    # Since the mass difference is for half the marmite, the mass of a full jar of marmite is double this difference\n    mass_full_marmite = 2 * mass_half_marmite\n    \n    # Now subtract the mass of the full marmite from the mass of the jar when 3/4 full to get the mass of the empty jar\n    mass_empty_jar = mass_three_fourths_full - mass_full_marmite * (3/4)\n    \n    return mass_empty_jar\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages_read = monday_pages + tuesday_pages\n    return total_pages_read\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    return 365 - (19 + 65)\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Since trees are planted at both ends, add one more tree for each end\n    trees_per_side = (road_length // interval) + 1\n\n    # Trees on both sides\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm  # Least Common Multiple function\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (bus_length * number_of_buses) + (distance_between_buses * (number_of_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    # Aiden's mistaken calculation is (x / 4) - 25 = 2021\n    # Let's solve for x\n    mistaken_quotient = 2021 + 25\n    mistaken_number = mistaken_quotient * 4\n    \n    # The correct answer should be 4 * x + 25\n    correct_answer = 4 * mistaken_number + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    total_height_28_blocks = 182\n    number_of_blocks_28 = 28\n    number_of_blocks_42 = 42\n\n    height_per_block = total_height_28_blocks / number_of_blocks_28\n    total_height_42_blocks = height_per_block * number_of_blocks_42\n\n    return total_height_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    ans = 4.8 * 5\n    return ans\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must be divisible by 9\n    for e in range(10):\n        if (2 + e + 3 + e + 2) % 9 == 0:\n            return e\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # Given x:5 = y:3, it indicates a directly proportional relationship.\n    # We need to find y when x = 5.\n    # We know that x/y = 5/3\n    # so when x = 5, y = (5/5) * 3 = 3\n    y_when_x_equals_5 = (5/5) * 3\n    return y_when_x_equals_5\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # To find the seventh number in the sequence, we need to first identify the first two numbers\n    # Since we know the fourth and sixth numbers, let's use variable a for the first number and b for the second number\n    # The sequence so far looks like this: a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # From the information given: a+2b = 6 and 3a+5b = 15\n    \n    # Now we solve these two equations for a and b\n    # Let's form the system of equations\n    # a + 2b = 6\n    # 3a + 5b = 15\n    # Multiply the first equation by 3 to eliminate a\n    # 3a + 6b = 18\n    # Subtract the second original equation from this new equation\n    # (3a + 6b) - (3a + 5b) = 18 - 15\n    # Simplify and solve for b\n    # b = 3\n\n    b = (18 - 15) / (6 - 5)\n    # Use b to solve for a in the first equation\n    # a + 2 * b = 6\n    # a + 2 * 3 = 6\n    # a + 6 = 6\n    # a = 6 - 6\n\n    a = 6 - 2 * b\n    \n    # Now we have the first two numbers a and b, we can find the seventh number\n    # a, b, a+b, a+2b, 2a+3b, 3a+5b, 5a+8b\n    # The seventh number is the sum of the fifth and sixth numbers: (2a+3b) + (3a+5b)\n    # Simplify to get the formula for the seventh number: 5a+8b\n\n    seventh_number = 5 * a + 8 * b\n    \n    return seventh_number\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price_before_discount = cost_price * 1.50  # 50% above cost\n    selling_price_after_discount = selling_price_before_discount * 0.90  # 10% Christmas discount\n\n    profit = selling_price_after_discount - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m_squared_plus_5 = n_squared = 0\n    m = 0\n    while True:\n        m_squared_plus_5 = m**2 + 5\n        n = int(m_squared_plus_5**0.5)\n        if n**2 == m_squared_plus_5 + 18:\n            break\n        m += 1\n    ans = m_squared_plus_5 - 5\n    return ans\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x+3)/4 + (6+4*x)/3, (7*x+22)/8)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "from math import gcd\n\ndef solution():\n    group_size_A = 12\n    group_size_B = 15\n    group_size_C = 18\n\n    ans = gcd(gcd(group_size_A, group_size_B), group_size_C)\n    return ans\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 5 * 60  # convert 5 p.m. to minutes\n    badminton_duration = 45  # badminton duration in minutes\n    jogging_duration = 30  # jogging duration in minutes\n\n    # Calculate the time after playing badminton and jogging\n    end_time = start_time + badminton_duration + jogging_duration\n\n    # Convert minutes back to hours and minutes format\n    end_hour = end_time // 60\n    end_minutes = end_time % 60\n\n    # Since times are in p.m., we need to adjust if hours exceed 12\n    if end_hour > 12:\n        end_hour -= 12  # Adjust to 12-hour time format if required\n        end_hour += 12  # Convert to PM hours\n\n    ans = f'{end_hour}:{end_minutes:02d} PM'\n    return ans\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    # Initial average and number of numbers\n    initial_average = 25\n    num_numbers = 3\n    new_average = 22\n\n    # Calculate the initial total sum of the numbers\n    initial_total_sum = initial_average * num_numbers\n\n    # Calculate the new total sum after changing one number to 16\n    new_total_sum = new_average * num_numbers\n\n    # Find the difference between the initial sum and new sum\n    difference = initial_total_sum - new_total_sum\n\n    # Find the original number by adding the difference to the changed number 16\n    original_number = 16 + difference\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 3 and number % 6 == 5:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of girls as 'g'. Hence, the number of boys would be 36 - g.\n    g = symbols('g')\n    \n    # We set up the equation:\n    # The total score is the sum of the girls' and boys' scores:\n    # (number_of_girls * average_score_of_girls) + (number_of_boys * average_score_of_boys) = total_students * average_score_of_class\n    equation = Eq(g * 88 + (36 - g) * 91, 36 * 89)\n    \n    # Solving the equation for 'g'\n    number_of_girls = solve(equation, g)[0]\n    \n    return number_of_girls\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3) ** 2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    skipped_questions = 1\n    answered_questions = total_questions - skipped_questions\n    correct_points = 4\n    incorrect_points = -2\n    total_score = 66\n\n    for correct_answers in range(answered_questions + 1):\n        incorrect_answers = answered_questions - correct_answers\n        score = correct_answers * correct_points + incorrect_answers * incorrect_points\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # Represent the vertices of the 3D shape as nodes in a graph and edges as connections.\n    # For a cube (which is a regular 3D shape with 6 faces), there are 8 vertices and 12 edges.\n    # Every vertex connects to 3 edges, forming a cycle.\n    \n    # If we remove 3 edges to try to remove a vertex, we will still have a structure with cycles.\n    # We must break all the cycles to have a tree (acyclic graph), and for a cube like 3D shape\n    # we know that a tree with 8 vertices (nodes) will have exactly 7 edges (one less than the number of vertices).\n    \n    # Therefore, from 12 edges, we need to remove 5 edges to get 7 edges, which makes the shape a tree (acyclic).\n    # Since there's only one way to create an acyclic graph, or tree, with all vertices connected from a cube shape\n    # by removing exactly 5 edges, the answer is 1.\n    \n    return 1\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # David's solution amount of sugar in grams\n    david_sugar = 800 * 0.05\n    # Eugene's solution amount of sugar in grams\n    eugene_sugar = 200 * 0.30\n    # Felix's solution amount of sugar in grams\n    felix_sugar = 300 * 0.10\n\n    # Total sugar in the mixed solution\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    # Total weight of the mixed solution\n    total_weight = 800 + 200 + 300\n\n    # Concentration of the resulting solution\n    concentration = (total_sugar / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    ans = 715 - 364\n    return ans\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    number_of_black_pens = 9\n    number_of_blue_pens = 4 * number_of_black_pens\n    number_of_green_pens = 2 * number_of_black_pens\n    total_pens = number_of_black_pens + number_of_blue_pens + number_of_green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(gill, andrew + 18)\n    equation2 = Eq(andrew + gill, 62)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    num_people = 4\n    ans = comb(num_people, 2)\n    return ans\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    return 58 + 74\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    volume1 = 20  # volume of first punch (in litres)\n    concentration1 = 35  # percentage of fruit juice in first punch\n    volume2 = 30  # volume of second punch (in litres)\n    concentration2 = 60  # percentage of fruit juice in second punch\n\n    fruit_juice1 = volume1 * (concentration1 / 100)  # actual volume of fruit juice in first punch\n    fruit_juice2 = volume2 * (concentration2 / 100)  # actual volume of fruit juice in second punch\n\n    total_fruit_juice = fruit_juice1 + fruit_juice2  # total volume of fruit juice in the new mixture\n    total_volume = volume1 + volume2  # total volume of the new mixture\n\n    percent_concentration = (total_fruit_juice / total_volume) * 100  # percentage concentration of the new mixture\n\n    return percent_concentration\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # There are 4 players in a knockout tournament\n    # In a knockout tournament, each game eliminates one player.\n    # To determine a single winner, we need to have 3 games:\n    # - Two quarter-finals (4 players -> 2 winners)\n    # - One semi-final (2 winners -> 1 winner)\n    # So, we need at least 3 rounds of games to determine the winner.\n\n    rounds = 3\n    return rounds\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # A three-digit number with a digit 7 and the difference between any two digits is 4 or less\n    # So the possible digits can range from 7-4=3 to 7+4=11 (but 11 is not a valid single digit)\n    # Hence, the possible digits are 3, 4, 5, 6, 7, 8, 9, 10 (excluding 10 because it's two digits)\n    possible_digits = [3, 4, 5, 6, 7, 8, 9]\n\n    # To find the smallest such number, we want to minimize the hundreds digit,\n    # then the tens, and finally the unit's digit.\n    # We start from the smallest possible hundreds digit, which is 3.\n    # Since we need to have one digit as 7, and we look for the smallest number,\n    # we place 7 in the tens place which is the middle position.\n    # The unit's digit would then be the next smallest digit after 7 which is 3.\n        \n    # Thus, the smallest three-digit number with these conditions is 373.\n    return int(\"\".join(map(str, [3, 7, 3])))\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel_to_number = {'A': 0, 'n': 1, 'g': 4, 'e': 7, 'l': 5}\n    devil_to_number = {'D': 0, 'e': 4, 'v': 0, 'i': 2, 'l': 5}\n\n    angel = \"Angel\"\n    devil = \"Devil\"\n\n    # Convert angel password to its numeral representation\n    angel_password_num = ''.join(str(angel_to_number[letter]) for letter in angel)\n\n    # Attempted password for devil\n    devil_attempt = \"4005220912\"\n\n    if angel_password_num == devil_attempt:\n        # Andy can unlock the chest because the password is the same\n        ans = (True, \"Andy can unlock the treasure chest because the password is the same as 'Angel'.\")\n    else:\n        # Andy cannot unlock the chest because the password is different\n        # Create the correct devil password based on angel_to_number mapping\n        correct_devil_password_num = ''.join(str(devil_to_number[letter]) for letter in devil)\n        ans = (False, correct_devil_password_num)\n\n    return ans\n    \nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_A = 266\n    not_B = 178\n    both = (not_A + not_B) - total_exhibits\n\n    return both\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4  # The temperature at noon\n    temp_drop = 10  # The drop in temperature by midnight\n    midnight_temp = noon_temp - temp_drop  # The temperature at midnight\n    return midnight_temp\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # At minimum, to guarantee one ball of each color, we must pick all the balls of one color,\n    # plus one more to ensure we have at least one ball of another color, and then one more to ensure\n    # we have a ball of the last color.\n\n    # The maximum balls of one color is 13 (green balls).\n    # So we need to pick all 13 green balls + 1 to guarantee a red or blue ball and\n    # +1 more to guarantee the last color ball.\n\n    ans = 13 + 1 + 1\n    return ans\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, skirt = symbols('blouse skirt')\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n\n    solutions = solve((equation1, equation2), (blouse, skirt))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # The value after the first year increase by 10%\n    value_after_increase = 110000\n\n    # The original value before the increase\n    original_value = value_after_increase / 1.1\n\n    # The value after the second year decrease by 10%\n    value_after_decrease = value_after_increase * 0.9\n\n    # The profit or loss comparing with the original price\n    profit_or_loss = value_after_decrease - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Since A and B are primes and 8A - 3B is a multiple of 3,\n    # either A or B must be 3 because for two primes, one of them\n    # must be 3 to have a multiple of 3 after the operation 8A - 3B.\n    # if B was 3, then 8A - 9 would need to be a multiple of 3.\n    # For that to be true, A must also be a multiple of 3, which\n    # cannot happen as the only prime multiple of 3 is 3 itself.\n    # Hence, A is 3.\n\n    A = 3\n    return A\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2  # Since we want to divide them equally\n    return pupils_each_room\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_badges = symbols('initial_badges')\n\n    first_day_sold = 5/7 * initial_badges\n    remaining_after_first_day = initial_badges - first_day_sold\n    second_day_sold = 1/3 * remaining_after_first_day\n    remaining_after_second_day = remaining_after_first_day - second_day_sold\n\n    final_badges = remaining_after_second_day + 354\n\n    equation = Eq(final_badges, 3 * initial_badges)\n\n    solution = solve(equation, initial_badges)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    multiple = 1 * 2 * 3 * 4 * 5 * 6\n    factor = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8\n\n    # Find all factors of the larger number that are also multiples of the smaller number\n    # A factor of 'factor' must also be a multiple of 'multiple'\n    count = 0\n    for i in range(multiple, factor + 1):\n        if factor % i == 0 and i % multiple == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Calculate number of ways to arrange the groups of flowers\n    groups_arrangement = factorial(3)  # 3! for the three different groups (roses, jasmines, daisy)\n\n    # Calculate permutations for roses and jasmines within their groups\n    roses_permutations = factorial(3)  # 3! for 3 different colors of roses\n    jasmines_permutations = factorial(4)  # 4! for 4 different colors of jasmines\n\n    # Since there's only one daisy, it has only 1 permutation\n\n    # Multiply the permutations together to get the total\n    total_permutations = groups_arrangement * roses_permutations * jasmines_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 100):  # search within a reasonable range of custard pies\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # In order to maximize the number of different positive integers\n    # that add up to a sum, we should start with the integer 1\n    # and continuously add the next integer until the sum is reached\n    # or exceeded. Each time we add an integer, that counts as one\n    # distinct positive integer, and we try to count as many as possible.\n\n    current_sum = 0\n    number = 0\n    while current_sum + (number + 1) <= 60:\n        number += 1\n        current_sum += number\n\n    return number\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount = 0.20\n    discounted_amount = original_price * discount\n    new_price = original_price - discounted_amount\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_min = 20  # in ml\n    minutes_per_hour = 60\n    ml_per_litre = 1000\n\n    leaked_water_per_hour = leak_rate_per_min * minutes_per_hour\n    leaked_water_per_hour_in_litres = leaked_water_per_hour / ml_per_litre\n\n    return leaked_water_per_hour_in_litres\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        s, e, n, d = perm\n        send = s*1000 + e*100 + n*10 + d\n        more = m*1000 + o*100 + r*10 + e\n        money = m*10000 + o*1000 + n*100 + e*10 + y\n        if send + more == money:\n            return e*100 + e*10 + e\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n\n    return mark_height\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are three colors - so to guarantee a pair of the same color,\n    # Cindy must take out one more than three times the number of colors.\n    num_colors = 3\n    socks_to_get_a_pair = num_colors + 1\n\n    return socks_to_get_a_pair\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    # Let the number of pieces cut into three parts be x.\n    # Initially, there are 10 pieces of paper.\n    # Cutting a piece into three parts increases the total count by 2.\n    # So, x pieces cut into three parts will result in an additional 2x pieces.\n    # The total pieces of paper after cutting is 16.\n    # Therefore, the equation to solve is: initial_pieces + additional_pieces = total_pieces\n    # 10 + 2*x = 16\n    # Solve for x:\n    initial_pieces = 10\n    total_pieces = 16\n    additional_pieces = total_pieces - initial_pieces\n    pieces_cut_into_three = additional_pieces / 2\n\n    return int(pieces_cut_into_three)\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # You may take 1 red and 1 green, still not having 2 apples of the same colour.\n    # The worst case is taking 1 red, 1 green, then another red, and another green.\n    # Now, regardless of the next apple you take, it will guarantee you have 2 of the same colour.\n    return 5\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    result = 6.3 + 8.7 + 9.6 - 2.6\n    return result\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    water_each_pail = 4  \n    water_left = 7\n\n    original_volume = (pails_filled * water_each_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 47)])\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solutions = solve(equation, c)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    # Richard's age\n    richard_age = 12\n    \n    # Adam's age is twice Richard's age\n    adam_age = 2 * richard_age\n    \n    # Will's age is 2/3 of Adam's age\n    will_age = (2/3) * adam_age\n    \n    # The total age is the sum of all ages\n    total_age = richard_age + adam_age + will_age\n    \n    return int(total_age)\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    # Initialize the product as 1 and the counter for trailing zeros\n    product = 1\n    trailing_zeros = 0\n    \n    for i in range(1, 2011):\n        product *= i\n\n        # Remove trailing zeros\n        while product % 10 == 0:\n            product //= 10\n            trailing_zeros += 1\n        \n        # Retain only the last non-zero digit\n        product %= 10\n\n    return product\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Given x^20 * y^15 * z^5 = 243\n    # We know that 243 is 3^5\n    # So, x^20 * y^15 * z^5 = (3^5)\n    # Assumption: x, y, z all have the same base which is 3.\n    # Let's find the powers of x, y, and z in terms of 3.\n    # x^4 * y^3 * z = 3^5\n    # x^4 = 3^5 / (y^3 * z)\n    # Since we only need to know x^8 * y^6 * z^2, we can write:\n    # (x^4)^2 * (y^3)^2 * z^2\n    # This simplifies to (3^5)^(2) * z^2 since x and y's powers cancel out.\n    # So, x^8 * y^6 * z^2 = (3^5)^2 * z^2\n\n    # As 3^5 = 243, let's calculate 243 raised to power 2\n    base_value = 243\n    exponent_value = 2\n\n    result = (base_value**exponent_value)\n\n    # Now we multiply by z^2, but z equals 3.\n    z = 3\n    z_exponent = 2\n\n    ans = result * (z**z_exponent)\n\n    return ans\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the cost of one book, and p represent the cost of one pencil box.\n    b, p = symbols('b p')\n\n    # We have two systems of equations based on the problem statement\n    equation1 = Eq(2 * b + 3 * p, 42)\n    equation2 = Eq(2 * b + 6 * p, 60)\n\n    # Use sympy's solve function to solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    # We are interested in the cost of each pencil box, which is represented by p\n    return solutions[p]\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    num_participants = 10\n    num_handshakes = comb(num_participants, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Create a list to store the sequence\n    sequence = []\n    \n    # Follow the pattern to add numbers to the sequence\n    for i in range(1, 9):  # As per problem statement, we go up to 8.\n        sequence.extend([i] * (i + 1))\n        \n    # Calculate the length of the sequence\n    sequence_length = len(sequence)\n\n    # Find the median\n    if sequence_length % 2 == 1:\n        # If length is odd, median is the middle number\n        median = sequence[sequence_length // 2]\n    else:\n        # If length is even, median is the average of the two middle numbers\n        median = (sequence[sequence_length // 2 - 1] + sequence[sequence_length // 2]) / 2\n    \n    return median\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_length = 50\n\n    days = total_length // daily_length\n\n    return days\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_6_players = 6 * 150\n    average_height_4_players = 150 - 2\n    total_height_4_players = 4 * average_height_4_players\n    total_height_2_players = total_height_6_players - total_height_4_players\n    average_height_2_players = total_height_2_players / 2\n    \n    return average_height_2_players\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    x = 42\n    y = 1\n    for factor_exp in prime_factors(42 * y):\n        if factor_exp[1] != 1:\n            y *= factor_exp[0]\n    return x + y\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factor_count = 1\n            while n % i == 0:\n                n //= i\n                factor_count += 1\n            factors.append((i, factor_count))\n    if n > 1:\n        factors.append((n, 1))\n    return factors\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    daily_fodder_per_cattle = 10\n    number_of_cattles = 8\n    number_of_days = 4\n\n    total_fodder = daily_fodder_per_cattle * number_of_cattles * number_of_days\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    rabbit_weight = 2  # 1 rabbit weigh as much as 2 chickens\n    dog_weight = 8 * rabbit_weight  # 1 dog weighs as much as 8 rabbits\n\n    return dog_weight\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let x be the total number of marbles Larry had at first\n    # We can set up the equation: x - 5/12 * x - 30 - 26 = 35\n    # Simplifying the equation: 7/12 * x = 35 + 30 + 26\n    # Solving the equation for x\n    x = (35 + 30 + 26) * 12 / 7\n    \n    # The result is the number of marbles Larry had at first\n    return int(x)\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600\n    sugar_concentration = 0.22\n    sugar_weight = total_weight * sugar_concentration\n    \n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 100):\n        digits = [int(digit) for digit in str(number)]\n        total_sum += sum(digits)\n    return total_sum\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of sweets Jess originally has, and y be the number Jill originally has.\n    jess, jill = symbols('jess jill')\n    \n    # Jill has six sweets for every five sweets Jess has.\n    equation1 = Eq(jill, (6/5) * jess)\n    \n    # After Jill gives eight sweets to Jess, Jill has four sweets for every seven sweets Jess has.\n    # New amount of sweets Jess has -> jess + 8\n    # New amount of sweets Jill has -> jill - 8\n    equation2 = Eq(jill - 8, (4/7) * (jess + 8))\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (jess, jill))\n    \n    # Calculate the total number of sweets.\n    total_sweets = solutions[jess] + solutions[jill]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    money_given = total_money * (1/4)\n\n    return money_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for number in range(10000, 100000):\n        number_with_one_at_start = int('1' + str(number))\n        number_with_one_at_end = int(str(number) + '1')\n\n        if number_with_one_at_start * 3 == number_with_one_at_end:\n            return number\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the price of one pie as 'p' and number of cakes sold as 'c'.\n    p, c = symbols('p c')\n\n    # According to the given ratios and information:\n    # Money collected from pies to cakes is 15:7, so:\n    # 15p * (4c) / 7p * c = 1848\n\n    # The price of a cake is $13 more than a pie, so the price of a cake will be (p + 13)\n    # Number of pies to cakes sold is 4:1, so the number of pies will be 4c\n\n    # Formulating equations based on the information:\n    equation1 = Eq((15 * p * (4 * c)) , (7 * (p + 13) * c))\n    equation2 = Eq((15 * p * (4 * c)) + (7 * (p + 13) * c), 1848)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (p, c))\n\n    # We need numbers of cakes which is 'c'\n    return solutions[c]\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    current_date = datetime.now()\n    years_back = timedelta(days=(38 * 365.25 + 6 * 30.4375))  # approximately 6 months in days\n    birth_date = current_date - years_back\n    return birth_date.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n\n    remaining_length = original_length - cut_length\n\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    sum_of_powers = sum(i**4 for i in range(1, 20))\n    return sum_of_powers\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_money = symbols('initial_money')\n    \n    # After spending 1/4 of his money and an additional $3 on CDs\n    remaining_after_CDs = initial_money - initial_money/4 - 3\n    \n    # Then, he spent 3/5 of the remaining money and an additional $6 on batteries\n    remaining_after_batteries = remaining_after_CDs - 3/5*remaining_after_CDs - 6\n    \n    # He was left with $24\n    equation = Eq(remaining_after_batteries, 24)\n    \n    # Solve for initial money\n    solution = solve(equation, initial_money)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n\n    for perm in permutations(digits, 4):\n        if perm[3] in even_digits and perm[0] != '0':\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads.append(i)\n    ans = beads[0]\n    return ans\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Speed of Qiqi\n    qiqi_speed = 60  # m/min\n    # Speed of Weiling\n    weiling_speed = 72  # m/min\n    \n    # Since Weiling starts 2 minutes later and arrives 4 minutes earlier,\n    # the difference in travel time between Qiqi and Weiling is 6 minutes.\n    time_difference = 6  # minutes\n    \n    # Weiling catches up to Qiqi in the time difference. \n    # During this time, Qiqi travels at her speed for those extra minutes.\n    qiqi_travel_time_during_difference = time_difference * qiqi_speed\n    \n    # Weiling's speed is more than Qiqi's speed by:\n    speed_difference = weiling_speed - qiqi_speed\n    \n    # The distance between the library and the school can be found by\n    # Weiling's extra speed multiplied by the difference in time they travelled.\n    distance = qiqi_travel_time_during_difference * weiling_speed / speed_difference\n\n    return distance\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Simplify the expression by factoring out 9^2015\n    # 9^2015 + 9^2016 = 9^2015(1 + 9) = 9^2015 * 10\n    # We only need the units digit of 9^2015 * 10\n    # The units digit of any number multiplied by 10 is 0\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial\n\n    # Calculate the number of ways to arrange 5 men\n    num_ways_men = factorial(5)\n    # There are 6 possible spaces where we can insert the women (between and at ends of men)\n    num_spaces_for_women = 6\n    # We choose 3 of these spaces for 3 women, without two women standing next to each other\n    num_ways_women_spaces = factorial(num_spaces_for_women) // (factorial(num_spaces_for_women - 3) * factorial(3))\n    # Calculate the number of ways to arrange 3 women in the chosen spaces\n    num_ways_women = factorial(3)\n    # The total arrangement is the product of the arrangements of men and women\n    total_arrangements = num_ways_men * num_ways_women_spaces * num_ways_women\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n\n    # Length of ropes\n    length1 = 45\n    length2 = 30\n\n    # Calculate Greatest Common Divisor\n    longest_piece_length = gcd(length1, length2)\n\n    # Check Candy's statement\n    is_correct = longest_piece_length == 180\n\n    return longest_piece_length, is_correct\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    marcs_time = datetime.strptime('11:50 AM', '%I:%M %p') \n    # Marc's watch is 15 minutes slow, so actual time is 15 minutes ahead\n    actual_time = marcs_time + timedelta(minutes=15) \n    # In half an hour's time, which is 30 minutes later\n    half_hour_later = actual_time + timedelta(minutes=30)\n    # George's watch is 7 minutes fast, so subtract 7 minutes\n    georges_time = half_hour_later - timedelta(minutes=7)\n    \n    return georges_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T, income = symbols('T income')\n    base_tax_rate = T / 100\n    additional_tax_rate = (T + 3) / 100\n    effective_tax_rate = (T + 1) / 100\n    \n    # Calculate tax for the first 30000 and above 30000 separately\n    tax_equation = Eq(base_tax_rate * 30000 + additional_tax_rate * (income - 30000), effective_tax_rate * income)\n    \n    # Since we have two variables, we need another equation, which is tax for the first 30000\n    # This is equal to T% of 30000\n    base_tax_equation = Eq(base_tax_rate * 30000, T * 300)\n    \n    # Solve the system of equations\n    solutions = solve((tax_equation, base_tax_equation), (T, income))\n    \n    # Return the second value of the solution which is the income\n    return solutions[income]\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    return 0.45 * 540\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[h]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_distance = 31\n    jump_up = 3\n    slide_down = 2\n    jump_count = 0\n    current_height = 0\n\n    while current_height < total_distance:\n        jump_count += 1\n        current_height += jump_up\n        if current_height >= total_distance:\n            break\n        if jump_count % 3 == 0:\n            current_height -= slide_down\n\n    return jump_count\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    for correct in range(31):\n        wrong = 30 - correct\n        if correct * 5 - wrong * 1 == 90:\n            return correct\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    rate_a = 1 / 10\n    rate_b = 1 / 15\n    combined_rate = rate_a + rate_b\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # By drawing one less of each color, we are not yet ensured to have four of different colors:\n    # 3 reds, 8 blues and 7 yellows can be picked without picking 4 of different colors.\n    # We need to add 1 more to ensure the fourth color, which is another red in the worst case.\n    draws_without_ensuring_fourth_color = (3 - 1) + (9 - 1) + (8 - 1)\n    \n    # We add one to ensure the fourth color\n    draws_to_ensure_fourth_color = draws_without_ensuring_fourth_color + 1\n    \n    return draws_to_ensure_fourth_color\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for i in range(1, 101):\n        if i % 3 == 0 and i % 7 == 0 and (i - 2) % 8 == 0:\n            return i\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate the year when Gigi was 22\n    year_gigi_was_22 = 2002 - (45 - 22)\n\n    # Calculate the difference in years between Gigi and Jenny\n    years_between_gigi_and_jenny = 2002 - 1995 + (45 - 22)\n\n    # Calculate how old Jenny was when Gigi was 22\n    age_jenny_when_gigi_was_22 = 22 - years_between_gigi_and_jenny\n\n    # Jenny was 22 years old in 1995, thus we need to calculate her age in the\n    # year when Gigi was 22\n    age_jenny = 22 + (year_gigi_was_22 - 1995)\n\n    return age_jenny\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # common difference from second term to first term\n    # The loop will get the smallest term larger than 0, then we subtract with 1\n    term = first_term\n    count = 0\n    while term > 0:\n        term += difference\n        count += 1\n    return count - 1  # Exclude the term that goes beyond non-positive\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum(int(digit) for digit in \"20190406\")\n    # a 9-digit number is divisible by 9 if the sum of its digits is divisible by 9\n    for A in range(10):\n        if (digits_sum + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    # Starting from the smallest possible number that ends in 2 greater \n    # than the least common multiple of 3 and 8 since\n    # the number needs to be a multiple of both 3 and 8,\n    # and checking in increments of 10 since ending in 2\n    # requires that the last digit is always 2.\n    lcm_of_3_and_8 = 24  # least common multiple of 3 and 8\n    number = lcm_of_3_and_8\n    while str(number)[-1] != '2':\n        number += lcm_of_3_and_8\n\n    return number\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for d in range(10):\n        if (4510 + d) % 3 == 0 and (4510 + d) % 5 != 0 and (4510 + d) % 9 != 0:\n            return d\n            \nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    result = numerator / denominator\n\n    return round(result, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    # The task is equivalent to choosing a number for the first group and the rest goes to the second group.\n    # Since the groups need to have different numbers of apples, we cannot give exactly half to each group.\n    # So possible choices for the first group range from 1 to (total_apples-1)/2\n    # We subtract by 1 because we cannot divide equally into two groups.\n    \n    # The number of ways to divide the apples is the same as the number of choices for the first group.\n    num_ways = (total_apples - 1) // 2\n    \n    return num_ways\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25\n    speed_of_current = 3\n    downstream_speed = speed_in_still_water + speed_of_current\n    distance = 140\n\n    time = distance / downstream_speed\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    cost_bracelets = 5 * 0.99\n    cost_cards = 2 * 1.98\n    total_cost = cost_bracelets + cost_cards\n    \n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost = 3.25\n    num_cupcakes = 3\n    num_cans = 2\n\n    total_cupcake_cost = cupcake_cost * num_cupcakes\n    total_can_cost = total_cost - total_cupcake_cost\n    cost_per_can = total_can_cost / num_cans\n\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    total_questions = 20\n    # Let x be the number of correct answers and 20-x be the number of wrong answers\n    # The total score equation will be:\n    # 5x - 2(20 - x) = 51\n    correct_answers = (51 + 2 * (total_questions)) // (5 + 2)\n    \n    return correct_answers\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]  # Calculate differences between terms\n    second_diff = [differences[i+1] - differences[i] for i in range(len(differences)-1)]  # Calculate second differences\n    next_diff = differences[-1] + second_diff[-1]  # Next difference is the last difference plus the constant second difference\n    next_term = 50 + next_diff  # Next term in sequence is the last term plus the next difference\n\n    return next_term\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n    \n    # Convert minutes to seconds\n    total_time_seconds = 9 * 60\n\n    # Times for the first two lights in seconds\n    light1_time_seconds = 0.5 * 60\n    light2_time_seconds = 0.75 * 60\n\n    # The LCM of the first two lights\n    lcm_two_lights = lcm(int(light1_time_seconds), int(light2_time_seconds))\n\n    # Now find the minimum time for the third light which is a divisor of the total time\n    for i in range(int(lcm_two_lights), total_time_seconds+1):\n        if total_time_seconds % i == 0:\n            return i\n        \nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%B %d')\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]  # missing the unknown number\n    mean_value = 5\n    total_sum = mean_value * (len(numbers) + 1)  # including the missing number\n    sum_of_known_numbers = sum(numbers)\n    missing_number = total_sum - sum_of_known_numbers\n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # There are 3 other individuals that can catch the ball first from A (B, C, D)\n    first_pass_options = 3\n    \n    # For the second pass, A cannot receive the ball, and the person who caught it first also can't pass it back to themselves,\n    # so there are 2 options for the second pass.\n    second_pass_options = 2\n    \n    # For the final pass, only A should receive the ball,\n    # and the player who has the ball cannot pass back to the person who passed it to them,\n    # so they also have 2 options (except the last person who got the ball from A).\n    final_pass_options = 1\n    \n    # The total number of methods is the product of options for each pass.\n    total_methods = first_pass_options * second_pass_options * final_pass_options\n    \n    return total_methods\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Assume group A has x members and group B has y members \n    # x + 11 people filled the last bus, so x must be a multiple of 36 minus 11.\n    # Group A took pictures with every member of group B, i.e. x * y photographs were taken.\n\n    # Each roll of film can take 36 pictures, so we will find the remainder when x * y is divided by 36.\n    # This remainder will give us the number of pictures that the last roll of film can take more than if all rolls were used perfectly.\n\n    # As x is a multiple of 36 minus 11, let's find the smallest x such that (x + 11) is a multiple of 36\n    x = 36 - 11  # This is the first possible value for x that fills the last bus completely when combined with 11 from group A\n    while (x + 11) % 36 != 0:\n        x += 36  # Continue to check for the next multiples of 36\n\n    # Now we have x, we need to find y such that x * y leaves a remainder when divided by 36\n    # We're looking for the maximum y that can completely fill rolls of film\n    y = 0  # Start with 0 members in group B\n    while (x * (y + 1)) % 36 == 0:\n        y += 1  # Keep adding to group B until adding another member would not fill a roll completely\n\n    # Calculate the number of pictures taken\n    pictures_taken = x * y\n\n    # Find out how many more pictures the last roll of film can take after all have taken the photograph\n    remainder = pictures_taken % 36\n    # Since each roll takes 36 pictures, the number of extra pictures is (36 - remainder) from the last roll\n    ans = 36 - remainder\n\n    return ans\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Daniel's and Ming's ages\n    daniel, ming = symbols('daniel ming')\n\n    # Given conditions\n    equation1 = Eq(daniel, 4 * ming)  # Daniel is four times older than Ming\n    equation2 = Eq(daniel + 6 + ming + 6, 62)  # After six years, the sum of their ages will be 62\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    # Daniel's age this year\n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    paper_weight_g = 25\n    number_of_girls = 250\n    total_weight_g = paper_weight_g * number_of_girls\n    total_weight_kg = total_weight_g / 1000\n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        max_product = max(max_product, product)\n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Speed of the line is calculated using the first bridge's information\n    line_length = 3\n    first_bridge_length = 9\n    time_first_bridge = 8  # in seconds\n\n    # Total distance covered by the line when it has just crossed the bridge is\n    # the length of the bridge plus the length of the line\n    total_distance_first_bridge = first_bridge_length + line_length\n\n    # Speed is distance divided by time\n    speed = total_distance_first_bridge / time_first_bridge\n\n    # Given that time taken to cross the second bridge is 10 seconds\n    time_second_bridge = 10  # in seconds\n\n    # Using the speed found, calculate the total distance covered on the second bridge\n    # which is the length of the second bridge plus the length of the line\n    total_distance_second_bridge = speed * time_second_bridge\n\n    # The length of the second bridge is the total distance minus the length of the line\n    second_bridge_length = total_distance_second_bridge - line_length\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum([(2*i)**2 - (2*i-2)**2 for i in range(1, 501)])\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    product = 2688\n    for i in range(1, int(product ** (1/3)) + 1, 2):  # Check only even numbers (step 2)\n        if product % i == 0:\n            mid_num = i + 2\n            if mid_num * (mid_num - 2) * (mid_num + 2) == product:\n                return mid_num + 2\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time_hour = 11\n    start_time_minute = 55\n    end_time_hour = 13 # Since 1 pm is the same as 13 in 24-hour format\n    end_time_minute = 40\n\n    time_played_in_minutes = (end_time_hour * 60 + end_time_minute) - (start_time_hour * 60 + start_time_minute)\n    \n    return time_played_in_minutes\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left = 11\n    right = 7\n    # We add 1 for Crystal herself\n    total_in_row = left + right + 1\n    # Since there are 2 rows, we multiply by 2\n    total_in_class = total_in_row * 2\n    \n    return total_in_class\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    ways = 0\n    \n    for group1 in range(1, total_cupcakes):\n        group2 = total_cupcakes - group1\n        if group1 < group2:\n            ways += 1\n            \n    return ways\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    number = 224\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    start_time = 8 * 60 + 30  # convert start time 8.30 am to minutes\n    total_lesson_time = 3 * 45  # total time of 3 lessons\n    total_moving_time = 2 * 5   # total time of 2 moving periods\n\n    break_start_time = start_time + total_lesson_time + total_moving_time\n\n    # Convert back to hours and minutes\n    hours = break_start_time // 60\n    minutes = break_start_time % 60\n    return f\"{hours}:{str(minutes).zfill(2)} am\"\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):        # Hundreds digit cannot be 0\n        for b in range(0, 10):    # Tens digit\n            for c in range(0, 10):    # Ones digit\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return int(f\"{a}{b}{c}\")\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    \n    ans = gcd(28, gcd(84, 126))\n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    \n    full_boxes = total_eggs // eggs_per_box\n    \n    return full_boxes\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n\n    # Troy had 5 times as many coins as Adam initially\n    equation1 = Eq(troy, 5 * adam)\n    # After Adam took 24 more coins, Adam had 1/3 as many coins as Troy\n    equation2 = Eq(adam + 24, troy / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # Calculate the total number of coins they had at first\n    total_coins_initially = solutions[troy] + solutions[adam]\n\n    return total_coins_initially\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_winning = 12018\n    jasmine_winning = 309\n    total_winning = neha_winning + jasmine_winning\n    return total_winning\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    \n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solved_values = solve((equation1, equation2), (wands, cards))\n\n    return solved_values[wands]\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols\n    fives, tens = symbols('fives tens')\n\n    # equations based on the problem statement\n    total_notes_eq = Eq(fives + tens, 57)  # total number of notes\n    spent_tens_eq = Eq(tens * 0.6, tens - fives * 2)  # number of 10 notes left\n    spent_fives_eq = Eq(fives * 0.25, tens * 0.6/2)  # number of 5 notes spent compared to 10 notes spent\n\n    # solve the equations\n    solutions = solve((total_notes_eq, spent_tens_eq, spent_fives_eq), (fives, tens))\n\n    # calculate the cost of the bag\n    fives_spent = solutions[fives] * 0.25\n    tens_spent = solutions[tens] * 0.6\n    cost_of_bag = fives_spent * 5 + tens_spent * 10\n\n    return cost_of_bag\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Hanson's initial amount of money\n    initial_money = symbols('initial_money')\n    \n    # Money left after buying CDs\n    money_after_CDs = initial_money - (1/4 * initial_money + 3)\n    \n    # Money left after buying batteries\n    money_left = money_after_CDs - (3/5 * money_after_CDs + 6)\n    \n    # Equation representing the money left\n    equation = Eq(money_left, 24)\n    \n    # Solve the equation to find the initial amount of money Hanson had\n    solution = solve(equation, initial_money)\n\n    # Return Hanson's initial amount of money\n    return solution[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        digits = [int(digit) for digit in str(num)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # hundreds place can't be zero\n        for j in range(0, 10):\n            for k in range(0, 10, 2):  # units place must be even\n                if i + j + k == 8 and len({i, j, k}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # To ensure getting 5 green beads for sure, Darrel must take all beads of the other colors first.\n    blue_beads = 5\n    white_beads = 6\n    # Once Darrel has taken all blue and white beads, he needs to take 5 green beads.\n    beads_needed_for_5_green = 5\n\n    # Total number of beads Darrel must draw to get 5 green beads for sure\n    total_beads_needed = blue_beads + white_beads + beads_needed_for_5_green\n\n    return total_beads_needed\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    one_half_of_x = one_fourth_of_16\n    x = one_half_of_x * 2\n    return x\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Number of games in a single round-robin tournament for n players\n    # Formula: n * (n - 1) / 2\n    def round_robin_games(n):\n        return n * (n - 1) // 2\n\n    group_stage_games = 4 * round_robin_games(4)  # there are 4 groups of 4 players each\n    \n    # In knockout rounds, number of games is 1 less than number of players (since it's a binary tree of games)\n    knockout_rounds_games = (8 - 1)  # top 8 to final winner\n    \n    total_games = group_stage_games + knockout_rounds_games\n    return total_games\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    ans = permutations(9, 4)\n    return ans\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Using the Inclusion-Exclusion Principle\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given = 76\n    stickers_bought = 65\n\n    stickers_start = stickers_end - stickers_given + stickers_bought\n\n    return stickers_start\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_A, days_B = symbols('days_A days_B')\n    # A can finish the job in days_A days, so his work rate is 1/days_A\n    # B takes 12 more days than A to finish the job, so B can finish in days_A + 12 and his work rate is 1/(days_A + 12)\n    equation1 = Eq(days_A, days_B - 12)\n    # If A and B work together, their combined work rate is 1/days_A + 1/(days_A + 12)\n    # The combined work rate will complete the job in 1 day, so we can create the equation: 1/days_A + 1/(days_A + 12) = 1/combined_days\n    combined_days = symbols('combined_days')\n    equation2 = Eq(1/days_A + 1/(days_A + 12), 1/combined_days)\n\n    # Solve the system for days_A and combined_days\n    solutions = solve((equation1, equation2), (days_A, combined_days))\n\n    # We return the value of combined_days which is how many days they can complete the whole job when working together\n    return solutions[combined_days]\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n    \n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solution = solve((equation1, equation2), (pineapple, apple))\n\n    return solution[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    # Given that the left most digit is 8, so start with that\n    digits = '123456790'  # All digits except 8, as 8 is already used\n    # Since the last digit has to be divisible by 10, it should be 0\n    # Since the 8th number should be divisible by 9, it should be 9 because only 9 is left and also 0 is used\n    # Hence, we only need to permute the remaining seven digits\n    for perm in permutations(digits, 7):\n        number = '8' + ''.join(perm) + '90'  # Construct number with 8 at beginning and 90 at the end\n        # Check the divisibility for each prefix of the number\n        if all(int(number[:i]) % i == 0 for i in range(2, 10)):\n            return int(number)  # As soon as we find a valid permutation, return it\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36 \n    belinda_gave = 7\n\n    matthew_tomatoes = belinda_tomatoes - belinda_gave - (belinda_tomatoes - 2*belinda_gave)\n\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    increased_rate = original_rate * (1 + 50 / 100)\n    return increased_rate\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import sqrt\n\n    # Since 15 and 21 are factors of the number, their least common multiple is also a factor.\n    lcm_15_21 = 15 * 21 // 5  # 5 is the greatest common divisor of 15 and 21\n\n    # The least common multiple of 15 and 21 must be the number itself or a multiple of the number.\n    # Since the number has exactly 8 factors, we find these factors by considering the prime factorization\n    # of the least common multiple.\n\n    # Prime factorization of lcm_15_21: 3 * 5 * 3 * 7 = 3^2 * 5 * 7\n    # The exponent of 3 in prime factorization implies the number could have (2 + 1) factors of 3,\n    # The exponents of 5 and 7 imply the number could have 2 factors of 5 and 7 each (1+1 for each prime).\n    # 3 factors from 3, 2 factors from 5 and 7 each gives us 3 * 2 * 2 = 12 factors, which is more than 8.\n    # This means that 3^2 * 5 * 7 is not our number, but a multiple of our number.\n\n    # The correct number should have one less power of 3 in its prime factors (to give 8 factors in total),\n    # which should be 3^1 * 5 * 7. We divide lcm_15_21 by 3 to get our number:\n    number = lcm_15_21 // 3\n\n    # Now, we calculate the sum of all factors of this number.\n    # A number n = p1^e1 * p2^e2 * ... * pk^ek has the sum of factors given by:\n    # (1 + p1 + p1^2 + ... + p1^e1) * (1 + p2 + p2^2 + ... + p2^e2) * ... * (1 + pk + pk^2 + ... + pk^ek)\n    # For 3^1 * 5 * 7, this is (1 + 3) * (1 + 5) * (1 + 7)\n    sum_of_factors = (1 + 3) * (1 + 5) * (1 + 7)\n\n    return sum_of_factors\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # Calculate the difference between the two numbers\n    difference = 2012 - 1274\n\n    # Initialize the maximum value for D - R\n    max_d_minus_r = 0\n\n    # Iterating through possible divisors\n    for d in range(1, difference + 1, 2):  # D must be an odd number\n        if difference % d == 0:  # Check if d is a divisor of the difference\n            r = 2012 % d  # Calculate remainder\n            max_d_minus_r = max(max_d_minus_r, d - r)\n    \n    return max_d_minus_r\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4) + (ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # State of the game is losing if its modulo 8 is 0\n    # We start from 1 to 7 which are the winning positions for the player who reaches them\n    # and map the rest according to the playable moves (1, 3, 4, 6)\n\n    # Memoization for the states (0 for losing state, 1 for winning state)\n    dp = [-1] * 53  # Using 53 because we want to consider the state when the board is empty\n\n    # Initial states, where 0 is a losing state as there are no numbers to write\n    dp[0] = 0\n\n    # Define the function to calculate the game state\n    def game_state(x):\n        # Use memoization to avoid recomputation\n        if dp[x] != -1:\n            return dp[x]\n\n        # Try all possible moves, if any move leads to a losing state for the opponent,\n        # then the current state is winning\n        for move in [1, 3, 4, 6]:\n            if x - move >= 0 and game_state(x - move) == 0:\n                dp[x] = 1\n                return 1\n        \n        # If no move leads to a losing state for the opponent, current state is losing\n        dp[x] = 0\n        return 0\n\n    # Calculate all states\n    for i in range(1, 53):\n        game_state(i)\n\n    # The strategy is to always move to a state that is multiple of 8,\n    # since all those states are losing states for the opponent\n    # Decide if Betty should go first or second\n    if game_state(52) == 1:\n        return 'First', 'Betty should always reduce the game state to a multiple of 8'\n    else:\n        return 'Second', 'Betty should let Abby reduce the game state to one more than a multiple of 8'\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    juice_to_grace = (5 / 7) * total_juice\n    remaining_juice = total_juice - juice_to_grace\n    juice_to_evelyn = (1 / 9) * remaining_juice\n    juice_left = remaining_juice - juice_to_evelyn\n    \n    return juice_left\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # The last digit of a power of 4 cycles every 2 steps: 4^1 = 4, 4^2 = 16, 4^3 = 64, 4^4 = 256, etc. (4, 6, 4, 6, ...)\n    # Therefore, 4^2009 has the same last digit as 4^1, which is 4.\n\n    # The last digit of a power of 6 is always 6 because 6^1 = 6, 6^2 = 36, 6^3 = 216, etc. (6, 6, 6, ...)\n    # Therefore, 6^2010 has the same last digit as 6^1, which is 6.\n\n    # The last digit of the sum of 4^{2009} + 6^{2010} is therefore the last digit of 4 + 6, which is 0.\n    \n    return 0\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    count = 0\n    for i in range(32):  # i is the number of 2-gram weights\n        if (63 - 2*i) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let the first term of the arithmetic sequence be a and the common difference be d.\n    # The sum of the first n terms of an arithmetic sequence is given by: S_n = n/2 * (2a + (n-1)d)\n\n    # Equations based on the sum of first 8 terms and sum of first 22 terms:\n    # S_8 = 8/2 * (2a + (8-1)d) = 32\n    # S_22 = 22/2 * (2a + (22-1)d) = 44\n\n    # From S_8 equation:\n    # 4 * (2a + 7d) = 32 => 2a + 7d = 8\n\n    # From S_22 equation:\n    # 11 * (2a + 21d) = 44 => 2a + 21d = 4\n\n    # Solving the two equations:\n    # Subtract the first equation from the second to get:\n    # (2a + 21d) - (2a + 7d) = 4 - 8 => 14d = -4 => d = -4/14 => d = -2/7\n\n    # Now substitute the value of d into the first equation:\n    # 2a + 7(-2/7) = 8 => 2a - 2 = 8 => 2a = 10 => a = 5\n\n    # Now that we have a and d, we can find the sum of the first 15 terms:\n    # S_15 = 15/2 * (2*5 + (15-1)*(-2/7))\n    # S_15 = 15/2 * (10 + 14*(-2/7))\n    # S_15 = 15/2 * (10 - 4)\n    # S_15 = 15/2 * 6\n    # S_15 = 15 * 3\n    # S_15 = 45\n\n    # Return the sum of first 15 terms\n    return 45\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_other_two = total_height_for_six - total_height_of_four\n    average_height_of_other_two = total_height_of_other_two / 2\n\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the flow rate of A, then the flow rate of B is 2x,\n    # and let y be the flow rate of C.\n    # The time taken to fill the pool with both A and C is the same as with B and C,\n    # and that's when the pool is filled.\n    # So, the total amount of water provided by A and C is 18 tons from A and the rest from C,\n    # and similarly with B and C, 27 tons from B and the rest from C.\n    \n    x, y, t = symbols('x y t')  # t is the time to fill the pool\n    \n    equation1 = Eq(18, x * t)         # Amount from A when A and C are on\n    equation2 = Eq(27, 2 * x * t)     # Amount from B when B and C are on, and B's rate is twice A's\n    equation3 = Eq(x * t + y * t, 2 * x * t + y * t)  # The total amount of water is the same when the pool is full\n\n    solutions = solve((equation1, equation2, equation3), (x, y, t))\n\n    # Calculate the total amount of water the pool can hold\n    total_water = solutions[x] * solutions[t] + solutions[y] * solutions[t]\n    \n    return total_water\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    not_attempted = 1\n    attempted_questions = total_questions - not_attempted\n    rex_score = 66\n    \n    # Let's use a linear equation to represent the situation\n    # correct_answers * 4 - (attempted_questions - correct_answers) * 2 = rex_score\n    \n    # Simplify the equation to get the number of correct answers\n    # correct_answers = (rex_score + 2 * (attempted_questions - correct_answers)) / 4\n    \n    # Assume all attempted questions were answered correctly\n    # Then calculate the score\n    max_correct_score = attempted_questions * 4\n    \n    # The difference between the maximum correct score and Rex's actual score\n    # divided by 6 (4 for a correct answer + 2 taken away for a wrong one),\n    # gives us the number of incorrect answers\n    incorrect_answers = (max_correct_score - rex_score) // 6\n    \n    # The number of correct answers is then total attempted questions\n    # minus incorrect answers\n    correct_answers = attempted_questions - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    return sum(i for i in range(1, 21)) * 2 - 20\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from itertools import permutations\n\n    ans = len(list(permutations(['red', 'yellow', 'blue', 'green', 'purple'], 4)))\n    return ans\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age == age / 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    for meatballs_per_student in range(1, 20):\n        if (20 - meatballs_per_student) % (meatballs_per_student + 1) == 10:\n            return meatballs_per_student\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_number = 9.32\n    increment_fraction = 1/10\n\n    ans = original_number + original_number * increment_fraction\n\n    return ans\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    # Let x represent the total number of questions\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Equation for the 1st day completion (7 more than half of all questions)\n    first_day = x/2 + 7\n    \n    # Equation for the remaining questions after the 1st day\n    remaining_after_first_day = x - first_day\n    \n    # Equation for the 2nd day completion (5 fewer than half of the remaining questions after the 1st day)\n    second_day = remaining_after_first_day/2 - 5\n    \n    # Equation for the remaining questions after the 2nd day\n    remaining_after_second_day = remaining_after_first_day - second_day\n    \n    # The number of questions remaining after the 2nd day should equal the number of questions finished on the 3rd day\n    # Since Andrew finished 23 questions on the 3rd day, set the remaining questions to be 23\n    equation = Eq(remaining_after_second_day, 23)\n    \n    # Solve the equation\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction = 4 / 25\n    decimal_number = 0.17\n\n    ans = '4/25' if fraction > decimal_number else '0.17'\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    initial_volume = 1000  # 1 litre = 1000 ml\n    poured_volume = 200 * 3  # 200 ml into each of 3 cups\n    remaining_volume = initial_volume - poured_volume\n    return remaining_volume\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of roses originally in the park\n    # let y be the number of daisies originally in the park\n    x, y = symbols('x y')\n\n    # let m be the number of months passed\n    # let n be the number of each type of flower planted every month\n    m, n = symbols('m n')\n\n    # setting up the equation\n    # total number of flowers originally in the park\n    equation1 = Eq(x + y, 300)\n    # number of roses after a few months\n    equation2 = Eq(x + m * n, 280)\n    # number of daisies after a few months\n    equation3 = Eq(y + m * n, 180)\n\n    # solving the equations to find the number of roses and daisies originally\n    solutions = solve((equation1, equation2, equation3), (x, y, m, n))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    nth_term = 10\n    nth_value = 23\n    mth_term = 15\n    mth_value = 38\n\n    common_difference = (mth_value - nth_value) / (mth_term - nth_term)\n\n    kth_term = 12\n    kth_value = nth_value + (kth_term - nth_term) * common_difference\n\n    return kth_value\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    ans = 0\n    for i in range(1, 251):\n        if int(i**0.5)**2 == i:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    # Calculate the number of correct answers in each test\n    correct_test1 = 10 * 20 / 100\n    correct_test2 = 20 * 80 / 100\n    correct_test3 = 30 * 90 / 100\n    \n    # Calculate the total number of correct answers\n    total_correct = correct_test1 + correct_test2 + correct_test3\n    \n    # Calculate the total number of questions\n    total_questions = 10 + 20 + 30\n    \n    # Calculate the overall percentage\n    overall_percentage = (total_correct / total_questions) * 100\n    \n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Area covered by one 6 decimeter side length square brick\n    area_per_brick_6dm = (6 * 10) ** 2  # converting decimeters to centimeters\n\n    # Total area to be covered by bricks\n    total_area = area_per_brick_6dm * 80\n\n    # Area covered by one 64 cm^2 brick\n    area_per_brick_64cm = 64\n\n    # Number of 64 cm^2 bricks needed\n    num_bricks_64cm = total_area / area_per_brick_64cm\n\n    return int(num_bricks_64cm)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bottle_of_water, bag_of_fruit = symbols('bottle_of_water bag_of_fruit')\n\n    equation1 = Eq(2 * bottle_of_water + 3 * bag_of_fruit, 2.55)\n    equation2 = Eq(bottle_of_water, bag_of_fruit + 0.15)\n\n    solutions = solve((equation1, equation2), (bottle_of_water, bag_of_fruit))\n\n    return solutions[bag_of_fruit]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n    \n    digits = '134578'\n    greatest_number = 0\n    \n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 11 == 0 and number > greatest_number:\n            greatest_number = number\n            \n    return greatest_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    for i in range(2, int(91 ** 0.5) + 1):\n        if 91 % i == 0:\n            return (i, 91 // i)\n    \n    return \"prime\"\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_a = 10\n    length_b = 5 * length_a\n    total_length = length_a + length_b\n    return total_length\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    from math import log10\n\n    # Since we know that 4^2018 * 25^2018 is equivalent to (2^2)^2018 * (5^2)^2018\n    # which is further equivalent to 2^(2*2018) * 5^(2*2018) and then to (2*5)^(2*2018)\n    # which simplifies to 10^(2*2018), so we just need to find the number of digits of 10^4036.\n\n    # The number of digits of a number N in base 10 is given by floor(log10(N)) + 1\n    num_of_digits = int(log10(10**(2*2018))) + 1\n\n    return num_of_digits\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n\n    number_of_teams = comb(total_players, team_size)\n\n    return number_of_teams\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    num_students = 0\n    boy_advantage = 31\n\n    # Initialize the side length of square to be at least 1 more than the boy advantage\n    # as it requires at least that number of rows to have an excess of boys.\n    side_length = 1 + boy_advantage\n\n    while True:\n        # Calculate number of girls. It's the sum of odd numbers starting from 1 up to side_length - 2\n        # which represent inner layers of squares (since boys occupy the outermost and alternate)\n        num_girls = sum(range(1, side_length - 1, 2)) ** 2\n\n        # Calculate number of boys. It's the sum of odd numbers starting from 3 up to side_length\n        # plus the outer most layer which equals side_length^2\n        num_boys = side_length ** 2 + sum(range(3, side_length, 2)) ** 2\n        \n        # Calculate the difference between boys and girls\n        difference = num_boys - num_girls\n        \n        # If the difference matches the boy advantage, we have found the correct side_length\n        if difference == boy_advantage:\n            num_students = num_boys + num_girls\n            break\n        elif difference < boy_advantage:  # If the difference is less, we need a larger square\n            side_length += 2  # Increase by 2 to ensure alternating layers of boys and girls\n        else:\n            # If the difference is greater, this condition should not happen as we initialize\n            # side_length based on boy_advantage and increse it. Just to avoid infinite loops.\n            break\n\n    return num_students\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    profit_amount = selling_price * (profit_percentage / 100)\n    cost_price = selling_price - profit_amount\n    \n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percentage = (new_profit / cost_price) * 100\n    \n    return new_profit_percentage\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of apples Mr. Aziz initially had as 'x'.\n    x = symbols('x')\n    # According to the problem, he sold 1/5 of x on Monday, \n    # sold 80 apples on Tuesday,and was left with 30% of x.\n    # The equation that represents this situation is:\n    # x - (1/5)*x - 80 = 30% of x\n    \n    equation = Eq(x - (x / 5) - 80, x * 30 / 100)\n    \n    # Solving the equation for x\n    apples_initially = solve(equation, x)[0]\n    # Finding the number of apples he had at the end after selling.\n    apples_in_the_end = apples_initially * 30 / 100\n    \n    return apples_in_the_end\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_emily = 25\n    people_behind_danny = 16\n    # Danny and Emily are counted as 2 people\n    total_people = people_in_front_emily + people_behind_danny + 2\n    return total_people\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14): # ensure x2 is greater than x1\n            for x3 in range(x2 + 1, 14): # ensure x3 is greater than x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    pupils = 500\n    # Let x be the number of boys\n    # Then the number of girls will be x + 30\n    # The sum of boys and girls is 500\n    # So we have the equation: x + (x + 30) = 500\n    # x + x + 30 = 500\n    # 2x + 30 = 500\n    # 2x = 500 - 30\n    # 2x = 470\n    # x = 470 / 2\n    boys = 470 // 2\n    girls = boys + 30\n    return girls\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    number_of_pieces = 2\n    length_of_each_piece = total_length / number_of_pieces\n    return length_of_each_piece\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be x, then each consecutive term is x+2, x+4, ..., x+12\n    # The fourth number is x+6\n    x = symbols('x')\n    \n    # The fourth number is larger than one-third of the sum of the first and seventh numbers by 6\n    # x+6 > (1/3) * (x + (x+12)) + 6\n    equation = Eq(x + 6, (1/3) * (x + (x + 12)) + 6)\n\n    # Solve for x\n    first_term = solve(equation, x)[0]\n\n    # Calculate the sum of the seven consecutive even numbers\n    sum_seven_numbers = sum(first_term + 2*i for i in range(7))\n\n    return sum_seven_numbers\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * 3/4\n    return afternoon_cookies\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    m = km * 1000\n    return m\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140  # Total sum of 9 numbers\n    sum_of_8_numbers = total_sum - 180  # Sum of other 8 numbers after removing one number\n    average_of_8_numbers = sum_of_8_numbers / 8  # Average of the remaining 8 numbers\n\n    return average_of_8_numbers\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for number of orchids\n    purple, yellow, white, red = symbols('purple yellow white red')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(purple, 2 * yellow)  # twice as many purple orchids as yellow\n    equation2 = Eq(yellow, 3 * white)  # 3 times as many yellow orchids as white\n    equation3 = Eq(red + white, 38)  # 38 red and white orchids\n    equation4 = Eq(red, 28)  # 28 orchids are red\n\n    # Solve equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # Total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue = 80\n    red = 2 * blue\n    green = blue + 45\n    total_markers = red + green + blue\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    highway_length = 45\n    distance_between_trees = 9\n    \n    trees_per_side = (highway_length // distance_between_trees) + 1\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished second, and overtook 5 other cars to get there,\n    # it means that these 5 cars plus the one that finished first were in front of the Ferrari.\n    # Therefore, the total number of cars is 5 overtaken + 1 runner-up + 1 Ferrari.\n\n    total_cars = 5 + 1 + 1\n    return total_cars\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    rings_left = 65\n    total_rings = johnny_rings + amber_rings + rings_left\n    return total_rings\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    n = 20  # We want the 20th odd number\n    first_odd_number = 1\n    common_difference = 2  # The difference between consecutive odd numbers\n\n    # The nth term of an arithmetic sequence can be found using the formula:\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_odd_number = first_odd_number + (n - 1) * common_difference\n\n    return nth_odd_number\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_paid = lily_book_price + amy_book_price\n    return total_paid\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    sum_of_interior_angles = (sides - 2) * 180\n    interior_angle = sum_of_interior_angles / sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        total += int(\"5\" * i)\n    return total % 10000\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 25 / 100\n    women_fraction = 1 / 5\n\n    men_count = total_people * men_percentage\n    women_count = total_people * women_fraction\n\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let the number of checked shirts sold be x.\n    # Then the number of white shirts sold is 7x.\n    # Together, they sold 72 shirts: x + 7x = 72\n    # Solving for x gives us the number of checked shirts.\n    x = 72 // 8  # Divide 72 by the total number of parts (1 for checked shirts + 7 for white shirts)\n    white_shirts = 7 * x  # Multiply the number of checked shirts by 7 to get the number of white shirts.\n    return white_shirts\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    # Given that 2 men take 3 days to build 1 wall\n    men_for_1_wall = 2\n    days_for_1_wall = 3\n\n    # One man's work for one day on one wall\n    work_per_man_per_day = 1 / (men_for_1_wall * days_for_1_wall)\n\n    # Function to calculate time for y men to build x walls\n    def time_for_x_walls_y_men(x, y):\n        total_work_for_x_walls = x\n        work_per_day_by_y_men = work_per_man_per_day * y\n        days_to_build_x_walls_by_y_men = total_work_for_x_walls / work_per_day_by_y_men\n        return days_to_build_x_walls_by_y_men\n\n    # Placeholder values for x walls and y men\n    x = symbols('x')\n    y = symbols('y')\n\n    # Calculate total days needed for y men to build x walls\n    days_needed = time_for_x_walls_y_men(x, y)\n\n    return days_needed\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    # Iterate from the greatest 3-digit number down to the least, looking for a number that fits the conditions\n    for num in range(999, 100, -1):\n        if num % 2 != 0 and num % 9 == 0:\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                return num\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Since the question does not provide the pattern, we assume that (insert pic)\n    # is a placeholder for a specific numerical value we need to find.\n    # Without the actual pattern or a clear description of it, it's not possible\n    # to implement a Python function to solve the question.\n    # If the pattern is a standard known sequence or image, then typically we can\n    # use mathematical analysis to identify the sequence and its nth term formula\n    # to calculate the value. Since the question lacks this information and context,\n    # the function will return None to indicate that a solution cannot be provided.\n    \n    return None\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # There are 3 different colors, so to ensure we have at least 2 balls of the same color\n    # according to the pigeonhole principle, we need to draw one more than the number\n    # of categories (colors) we have since we could potentially draw one of each color first.\n    \n    # Number of colors\n    colors = 3\n    \n    # Minimum number of draws required to ensure we have 2 balls of the same color\n    min_draws = colors + 1\n    \n    return min_draws\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    return round(value_after_years, 4)\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq((1/3) * girls, (1/2) * boys)\n    equation2 = Eq(girls + boys, 390)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    num = None\n    for x in range(1, 60):\n        if x % 4 == 3 and x % 5 == 4 and x % 6 == 5:\n            num = x\n            break\n    return num\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1  # Start looking for m from the smallest positive integer\n    while True:\n        # Define the sum of digits function\n        S = lambda n: sum(int(digit) for digit in str(n))\n        if S(m) == 5 * S(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # Calculate the total amounts for each period\n    jan_to_apr = 300 * 4\n    may_to_jul = 250 * 3\n    aug_to_sep = 750\n    oct_to_dec = 300 * 3\n    \n    # Calculate the total amount for the year\n    total = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    \n    # Calculate the average per month\n    average_per_month = total / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters = 24\n    original_number = (three_quarters * 4) / 3\n    return original_number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02  # Reducing water by 2% every hour\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n\n    overall_drop = temperature_bottom - temperature_top\n\n    return overall_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    age_difference = father_future_age - tom_age\n    father_current_age = tom_age + age_difference\n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9/20\n    women_percentage = 30/100\n\n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n\n    children_count = total_passengers - (men_count + women_count)\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Jeff catches the train at 0735\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n\n    # The journey takes 1 hour 35 minutes\n    journey_duration = timedelta(hours=1, minutes=35)\n\n    # Jeff arrives in London\n    arrival_time = departure_time + journey_duration\n\n    # It takes 40 minutes to walk to work\n    walk_duration = timedelta(minutes=40)\n\n    # Jeff arrives at work\n    work_arrival_time = arrival_time + walk_duration\n\n    # Format the time of arrival at work\n    return work_arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    possible_values = []\n    for N in range(1, 200):\n        if sum(int(digit) for digit in str(baseN(N, 4))) == 5 and \\\n           sum(int(digit) for digit in str(baseN(N, 6))) == 8 and \\\n           sum(int(digit) for digit in str(baseN(N, 8))) == 9:\n            possible_values.append(N)\n    return possible_values\n\n\ndef baseN(num, b):\n    return ((num == 0) and \"0\") or (baseN(num // b, b).lstrip(\"0\") + \"0123456789ABCDEF\"[num % b])\n\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 2 choices for the hundreds place (2 or 3)\n    # since 0 cannot be used as the first digit of a three-digit number\n    hundreds_place_options = 2\n\n    # There are 3 choices for the tens place (0, 2, 3)\n    tens_place_options = 3\n\n    # There are 3 choices for the units place (0, 2, 3)\n    units_place_options = 3\n\n    # The total number of different three-digit numbers\n    total_numbers = hundreds_place_options * tens_place_options * units_place_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six_hotdogs = 1.10\n    cost_per_twelve_hotdogs = cost_per_six_hotdogs * 2\n    return cost_per_twelve_hotdogs\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # price in pence\n    total_money_pence = 200  # total money in pence (£2)\n\n    # Divide the total money by the price per bag to get the number of bags\n    num_bags = total_money_pence // price_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chip, dale = symbols('chip dale')\n    equation1 = Eq(chip - 14, dale + 14)\n    equation2 = Eq(chip + dale, 124)\n    \n    solutions = solve((equation1, equation2), (chip, dale))\n    \n    return solutions[chip]\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n    \n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n\n    return ans\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for num in range(2, 100):\n        if num % 2 == 0 and num % 4 == 0 and num % 3 == 0:\n            # since we want square numbers, check if the square root is an integer\n            if (num ** 0.5).is_integer():\n                return num\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))\n    primes.reverse()\n    sum_of_primes = 51\n    count = 0\n\n    for prime in primes:\n        while sum_of_primes >= prime:\n            sum_of_primes -= prime\n            count += 1\n        if sum_of_primes == 0:\n            break\n\n    return count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):  # 2-digit numbers start from 10 to 99\n        if num % 4 == 2 and num % 5 == 2:\n            return num  # return the first such number\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')  # Let x represent the cost of one CD\n    total_cost = 8 * x  # The total cost for 8 CDs\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n\n    equation = Eq((2/3) * (x-1) - (1/4) * (3*x+1), 1/6)\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    number_of_eggs_per_tray = 26\n    number_of_trays = 4\n\n    total_eggs = number_of_eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum(-num if num %2 == 1 else num for num in range(1, 41))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 3 * three_page_letters + 4 * four_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 24 == 0 and num // 24 == 36:\n            return num\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apple_pie_kg = 750 / 1000\n    apple_juice_kg = 1025 / 1000\n\n    apples_left_kg = total_apples_kg - (apple_pie_kg + apple_juice_kg)\n\n    return apples_left_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    amy_position_from_back = 15\n\n    total_people = people_in_front_of_amy + amy_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    time_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / time_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # If we draw all the balls of the two colours (5 red, 5 white, or 5 yellow)\n    # there is still no guarantee of having the third colour.\n    # We need to draw one more ball to ensure we have all three different colours.\n    # Therefore, the minimum number of balls we must draw is 5 (red) + 5 (another colour) + 1 (to ensure the third colour)\n    return 5 + 5 + 1\n    \nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the two pieces of ribbon\n    short_piece, long_piece = symbols('short_piece long_piece')\n\n    # Equation 1: The long piece is twice as long as the short piece\n    equation1 = Eq(long_piece, 2 * short_piece)\n\n    # Equation 2: The sum of the lengths of the two pieces is 12.75 m\n    equation2 = Eq(short_piece + long_piece, 12.75)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (short_piece, long_piece))\n\n    # Return the length of the longer piece\n    return solutions[long_piece]\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # The position of the favorite book from the left is 14th\n    favorite_book_position_from_left = 14\n    # There are 6 books on the right of her favorite book\n    books_on_right_of_favorite = 6\n\n    # Total number of books on the shelf\n    total_books = favorite_book_position_from_left + books_on_right_of_favorite\n\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    # If each dimension of the box is halved, the volume will be reduced by\n    # a factor of 1/2 * 1/2 * 1/2 = 1/8.\n    # Therefore, the new box will contain 1/8 the amount of cereal.\n\n    original_amount = 1200\n    new_amount = original_amount * (1/2) * (1/2) * (1/2)\n\n    return new_amount\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of coins they each get in class\n    x = symbols('x')\n\n    # Gigi's total coins after class is 120 + x\n    # Lily's total coins after class is 24 + x\n\n    # After class, Gigi has 3 times as many coins as Lily\n    equation = Eq(120 + x, 3 * (24 + x))\n\n    # Solve the equation to find the value of x\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "from sympy import primerange\n\ndef solution():\n    all_numbers = set(range(1, 21))\n    prime_numbers = set(primerange(1, 21))\n    non_prime_cards = all_numbers - prime_numbers\n    ans = len(non_prime_cards)\n    return ans\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Assume b represents Brian's age and f represents his father's age.\n    # Given that Brian is 14 and his father is 41,\n    # We know:\n    # f - b = 41 - 14 = 27 (The difference in age will always be 27 years.)\n\n    for i in range(15, 100):\n        b_age = i\n        f_age = i + 27  # Father's age is always Brian's age + 27 years\n\n        # Convert ages to string to check if one is the reverse of the other\n        if str(b_age) == str(f_age)[::-1]:\n            return b_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # The 3-digit number is of the form abc, where a, b, c are digits and a > 0\n    # The number is odd, so c must be 1, 3, 5, 7, or 9\n    for a in range(1, 10): # a can be 1-9 inclusive\n        for b in range(0, 10): # b can be 0-9 inclusive\n            for c in [1, 3, 5, 7, 9]: # c can only be odd\n                if a + b + c == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since one egg takes 5 minutes to boil,\n    # and you can boil the eggs simultaneously,\n    # the time taken will be the same as boiling one egg.\n    time_for_one_egg = 5\n    return time_for_one_egg\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    \n    cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n    \n    return cabins_needed\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n, a1, d = symbols('n a1 d')  # n is the number of terms, a1 is the first term, d is the common difference\n    \n    # Equations based on the sum of arithmetic sequences formula S_n = n/2 * (2a1 + (n - 1)d)\n    eq1 = Eq(4/2 * (2 * a1 + (4 - 1) * d), 124)  # Sum of first 4 terms\n    eq2 = Eq(4/2 * (2 * (a1 + (n - 1) * d) - 3*d), 156)  # Sum of last 4 terms\n    eq3 = Eq(n/2 * (2 * a1 + (n - 1) * d), 210)  # Sum of all terms\n\n    solutions = solve((eq1, eq2, eq3), (n, a1, d))\n    \n    # Since we might get multiple solutions, we need to pick the one with a positive integer n\n    for sol in solutions:\n        if sol[n].is_real and sol[n] > 0:\n            return int(sol[n])\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16 \n    cookie_dough_g = 45  \n    brownie_dough_g = 150  \n    num_cookies = 240  \n    num_brownies = 2  \n\n    dough_used_for_cookies = cookie_dough_g * num_cookies\n    dough_used_for_brownies = brownie_dough_g * num_brownies\n    total_dough_used_g = dough_used_for_cookies + dough_used_for_brownies \n    total_dough_used_kg = total_dough_used_g / 1000  \n\n    dough_left_kg = initial_dough_kg - total_dough_used_kg \n    return dough_left_kg \n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    calories_today = symbols('calories_today')\n\n    # Create an inequality where today's calories are less than yesterday's\n    inequality = calories_today < calories_yesterday\n\n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # Inverse of eating half and 2 less\n    remaining_biscuits = (remaining_biscuits * 2) + 2\n    # Inverse of eating half and 4 more\n    total_biscuits = (remaining_biscuits + 4) * 2\n\n    return total_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    initial_amount = 100\n    cycle_days = 2  # deposit day and spend day\n    deposit_amount = 5\n    spend_amount = 8\n    daily_change = deposit_amount - spend_amount\n\n    # Calculate complete cycles within 15 days\n    complete_cycles = 15 // cycle_days\n    remaining_days = 15 % cycle_days\n\n    # Calculate money after complete cycles\n    money_after_cycles = initial_amount + complete_cycles * daily_change\n\n    # Add money for the remaining days (if any)\n    if remaining_days > 0:  # only deposits happen on the odd days which are the first day of the cycle\n        money_after_cycles += deposit_amount\n\n    return money_after_cycles\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    index = (1004 - 1) % len(pattern)\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    wine_gums_per_child = total_wine_gums // children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    difference = 3\n    last_term = 298\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = num_terms * (first_term + last_term) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = sum(range(1, 1001))\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    # If she gave each friend 18 pieces, then there will be 41 chocolates in excess\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    # If she gave each friend 23 pieces, she would be short of 34 pieces\n    equation2 = Eq(chocolates - 23 * friends, -34)\n\n    # Solving the equations to find the number of chocolates and friends\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    # If she gave each friend 20 pieces, find out how many would be left\n    chocolates_left = solutions[chocolates] - 20 * solutions[friends]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    # Function to check the sum of the digits is 17\n    def sum_of_digits_is_17(number):\n        return sum(int(digit) for digit in str(number)) == 17\n    \n    # Check all three digit numbers\n    for number in range(100, 1000):\n        # Calculate how many of the statements are true for the number\n        conditions_met = sum([\n            number % 27 == 0,\n            number % 7 == 0,\n            sum_of_digits_is_17(number),\n            (number**0.5).is_integer(),\n            89100 % number == 0\n        ])\n        \n        # If exactly three statements are true, return the number\n        if conditions_met == 3:\n            return number\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    return 84.8 / 400\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    spent_book = 0.15 * total_money\n    remaining_money = total_money - spent_book\n    spent_dvd = 0.30 * remaining_money\n    money_left = remaining_money - spent_dvd\n    return money_left\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let m represent the number of push-ups Mulan can do\n    # The best boy soldier can do 50 push-ups, so Mulan can do more than that\n    # The inequality representing this situation is m > 50\n    # Since we're implementing a Python function to return a result,\n    # we will represent this as a string because inequalities do not have\n    # a numerical result, but rather a range of possible values\n    m = \"m > 50\"\n    return m\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n    balloons_remaining = total_balloons_needed - (balloons_blown_up - balloons_burst)\n\n    return balloons_remaining\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    games_already_played = 55\n    total_games = (teams - 1)  # In a single-elimination tournament\n    games_left = total_games - games_already_played\n    return games_left\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    min_pieces = 1  # The minimum number a child can get.\n    total_children = 8  # Total number of children.\n    total_candies = 88  # Total number of candies.\n\n    # Start by giving each child the minimum number of candies.\n    current_candies = min_pieces * total_children\n    # Since no two children should get the same number of candies,\n    # distribute remaining candies by increasing one piece at a time\n    # for each child except the last one.\n    for i in range(total_children - 1):\n        current_candies += i + 1\n\n    # Candies left for the child who gets the most.\n    most_pieces = total_candies - current_candies + (total_children - 1) * min_pieces\n\n    return most_pieces\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Since Tom takes 4 stones from Stack B, we have:\n    # Stack A: 20 stones, Stack B: 16 stones\n    \n    # Jerry must ensure that after his turn, the number of stones in both stacks\n    # are equal. This is because after that, no matter how many stones Tom takes,\n    # Jerry can always mimic Tom's move on the other stack, ensuring that he\n    # takes the last stone.\n    \n    # Jerry should take stones from Stack A to make it equal to Stack B\n    stones_to_take = 20 - 16\n    \n    # The stack that Jerry should take stones from is A.\n    return (stones_to_take, \"A\")\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    liters_per_pail = 4\n    liters_left = 7\n\n    original_volume = (pails_filled * liters_per_pail) + liters_left\n\n    return original_volume\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    # Calculate the sum of the sequence if no mistake was made\n    n = 37\n    first_term = 1\n    # Calculate the common difference\n    common_difference = 3\n    # Sum of the arithmetic sequence without a mistake\n    ideal_sum = n / 2 * (2 * first_term + (n - 1) * common_difference)\n    \n    # Find the difference between the ideal sum and the actual sum\n    # This difference will be twice of the number where mistake happened, because instead of adding, we subtracted\n    difference = ideal_sum - 2011\n    \n    # Find the position of the pupil who made the mistake\n    position = difference / (2 * common_difference)\n    \n    return int(position)\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    num_trees = circumference // interval\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let's denote the number of girls as g and the number of boys as b.\n    # According to the question, the ratio of girls to boys is 7:9,\n    # which means g/b = 7/9.\n    # Also, there are 16 more boys than girls, which gives us b = g + 16.\n    # Now we can set up a system of equations to solve the problem.\n    # First, let's find the multiplier \"m\" for the ratio.\n    # Since b = g + 16, and the ratio between them is 7:9,\n    # we can say that g = 7m and b = 9m, hence b = g + 16 becomes 9m = 7m + 16,\n    # which simplifies to 2m = 16.\n\n    m = 16 / 2  # Solving for m\n\n    # Now that we have the multiplier, we can find the number of girls and boys.\n    g = 7 * m\n    b = 9 * m\n\n    # The total number of pupils is the sum of girls and boys.\n    total_pupils = g + b\n\n    return total_pupils\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # let the smallest number of balls one of the students has be x\n    # then the others will have x+1, x+2, x+3 and x+4 balls respectively\n    # thus we have the equation for the sum of these consecutive numbers:\n    # x + (x+1) + (x+2) + (x+3) + (x+4) = 160\n    \n    # simplify the equation\n    # 5x + 10 = 160\n    # 5x = 150\n    # x = 30\n    \n    # since x is the number of balls the student with the least balls has\n    # the student with the most balls has x+4 balls\n    return 30 + 4\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    # Iterate through all three-digit numbers with a 0 in the tens place\n    for i in range(1, 10):\n        for j in range(10):\n            M = i * 100 + j  # Construct the number M\n            S = i + j  # Calculate the sum of digits S\n            if M == 67 * S:\n                reversed_M = j * 100 + i  # Reverse the digits of M\n                return reversed_M // S  # Return the result of division\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # Convert 2 meters to centimeters\n    piece_length_cm = 6\n    num_pieces = stick_length_cm // piece_length_cm  # Perform integer division for complete pieces\n\n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n\n    ans = comb(total_balls, balls_to_select)\n    return ans\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b, c = symbols('a b c', integer=True)\n\n    # Set up the equation based on the complex fraction\n    equation = Eq(13/10, 1 + 1/(a + 1/(b + 1/c)))\n\n    # Solve the equation\n    solutions = solve(equation, (a, b, c))\n\n    # We are only interested in the integer solutions\n    for sol in solutions:\n        if all(isinstance(num, int) for num in sol):\n            # Return the value of a + 2b + 3c\n            return sol[0] + 2 * sol[1] + 3 * sol[2]\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # Since we are only interested in the ones digit of 8^30,\n    # we can look at the pattern of the ones digit as the exponents increase:\n    # 8^1 = 8 (ones digit is 8)\n    # 8^2 = 64 (ones digit is 4)\n    # 8^3 = 512 (ones digit is 2)\n    # 8^4 = 4096 (ones digit is 6)\n    # 8^5 = 32768 (ones digit is 8)\n    # We see that the ones digit cycles every 4 powers of 8: 8, 4, 2, 6, ...\n    # Let's find the remainder of 30 divided by the cycle length which is 4.\n\n    remainder = 30 % 4\n    # If the remainder is 0, we are at the last digit of the cycle which is 6\n    if remainder == 0:\n        ones_digit = 6\n    # Otherwise, we take the remainder-th value in the cycle (counting from 1)\n    else:\n        # Create the cycle of ones digits\n        cycle = [8, 4, 2, 6]\n        ones_digit = cycle[remainder - 1]\n\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n\n    days = total_pages / pages_per_day\n\n    return int(days)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_wrong = -3\n    total_points = 52\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if (points_correct * correct + points_wrong * wrong) == total_points:\n            return correct\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 0\n    remaining_peaches = 100\n    for i in range(1, 100):\n        if remaining_peaches <= 2 * i:\n            days += 1\n            break\n        remaining_peaches -= i\n        days += 1\n    return days\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    difference = 5\n    last_term = 155\n\n    num_terms = int((last_term - first_term) / difference + 1)\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n\n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    sum_of_numbers = sum(i for i in range(1, 21) if i % 6 == 1)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_mass = 600  # total mass of the solution in grams\n    sugar_concentration = 0.48  # the concentration of sugar in the solution\n    mass_of_sugar = total_mass * sugar_concentration  # mass of sugar in grams\n    \n    # The mass of water is the total mass minus the mass of sugar\n    mass_of_water = total_mass - mass_of_sugar\n    \n    return mass_of_water\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    factor1 = 9\n    factor2 = 5\n    product = sum([factor1] * factor2)\n    return product\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let the age of the youngest dwarf be 'x'.\n    # Since the dwarfs were born in seven consecutive years, we have:\n    # x, x+1, x+2, x+3, x+4, x+5, x+6\n    \n    # The sum of the ages of the youngest three is given as:\n    # x + (x+1) + (x+2) = 42\n    sum_youngest_three = 42\n    \n    # We will find the value of 'x' by solving the equation:\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13\n    x = (sum_youngest_three - 3) // 3  # Integer division\n\n    # Now, we need to find the sum of the ages of the oldest three,\n    # which is (x+4) + (x+5) + (x+6).\n    sum_oldest_three = (x+4) + (x+5) + (x+6)\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    if (1000 * a + 100 * b + 10 * c + d) + \\\n                       (100 * a + 10 * b + c) + \\\n                       (10 * a + b) + a == 1370:\n                        return 1000 * a + 100 * b + 10 * c + d\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    ans = sum([19.8, 199.8, 1999.8, 19999.8, 199999.8])\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    result = (5 / 8) * 408\n    return result\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    total_current_age = janice_age + sister_age\n\n    years = symbols('years')\n    equation = Eq(total_current_age + 2 * years, 35)\n    result = solve(equation, years)\n\n    return result[0]\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_scored_in_two_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_scored_in_two_tests\n    \n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n    \n    # Dad's age six years ago was 5 times his son's age at that time\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    \n    # The sum of the current ages is 78\n    equation2 = Eq(dad_current + son_current, 78)\n    \n    solutions = solve((equation1, equation2), (dad_current, son_current))\n    \n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    total_sum = sum(1/k for k in range(1, 9)) + sum(2/k for k in range(1, 9)) * 2\n    return total_sum\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets, milk_chocolates = symbols('total_sweets milk_chocolates')\n\n    equation1 = Eq(6, (2 / 7) * milk_chocolates)\n    equation2 = Eq(milk_chocolates, (3 / 4) * total_sweets)\n\n    solutions = solve((equation1, equation2), (total_sweets, milk_chocolates))\n\n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of football and volleyball\n    football, volleyball = symbols('football volleyball')\n\n    # Create equations based on the problem statements\n    # Apple spends $60 to buy 1 football and 2 volleyballs\n    equation1 = Eq(football + 2 * volleyball, 60)\n    # When Apple buys 2 footballs, she gets $16 back\n    equation2 = Eq(2 * football, 60 - 16)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (football, volleyball))\n\n    # Extract the solution for the cost of the volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')  # Declare symbols for Terry and Gerald's word counts\n\n    equation1 = Eq(gerald, terry + 57)       # Gerald wrote 57 more words than Terry\n    equation2 = Eq(terry + gerald, 777)      # Together they wrote 777 words\n\n    solutions = solve((equation1, equation2), (terry, gerald))  # Solve the system of equations\n\n    return solutions[gerald]  # Return the number of words Gerald wrote\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    return 1000 - 630\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, mode\n\n    # Given values\n    mode_age = 7\n    mean_age = 9\n    median_age = 8\n    range_age = 6\n\n    # Since the range is 6 and the mode is 7, the youngest could not be younger than 1 year old (7 - 6)\n    # Starting with the mode, let's build possible age lists\n    # The mode being 7 means there are at least two 7's in the list\n    # We have to try different combinations keeping the mean, mode, median and range in check\n    for a in range(1, mode_age + 1):    # a cannot be higher than mode\n        for b in range(a, mode_age + range_age + 1):  # b cannot be higher than mode + range\n            age_list = [a, mode_age, mode_age, median_age, b]  # Sorted by age\n            if mean(age_list) == mean_age and median(age_list) == median_age and mode(age_list) == mode_age and max(age_list) - min(age_list) == range_age:\n                # We are interested in the second oldest, which in sorted order is the fourth element\n                return age_list[-2]  # Return the second oldest's age\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    digits_1703 = ['1', '7', '0', '3']\n    digits_2745 = ['2', '7', '4', '5']\n    digits_3541 = ['3', '5', '4', '1']\n    \n    # All digits are different in the number\n    possible_digits = set(digits_1703 + digits_2745 + digits_3541)\n    \n    # Finding possible numbers\n    possible_numbers = []\n    for d1 in possible_digits:\n        for d2 in possible_digits:\n            for d3 in possible_digits:\n                for d4 in possible_digits:\n                    num = [d1, d2, d3, d4]\n                    if len(set(num)) == 4:  # All digits must be different\n                        # Check conditions given by John\n                        if (num[0] == '1' and num[1] == '7') or \\\n                           (num[0] == '0' and num[1] == '3') or \\\n                           (num[2] == '1' and num[3] == '7') or \\\n                           (num[2] == '0' and num[3] == '3'):  # Condition from 1703\n                            if (num[0] not in digits_2745 and\n                                num[1] not in digits_2745 and\n                                num[2] not in digits_2745 and\n                                num[3] not in digits_2745):  # Condition from 2745\n                                if (num != digits_3541 and\n                                    sorted(num) == sorted(digits_3541)):  # Condition from 3541\n                                    possible_numbers.append(''.join(num))\n    return int(possible_numbers[0]) if possible_numbers else None\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    num_terms = (49 - 1) // 2 + 1\n    sum_of_series = num_terms * (1 + 49) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    # There are 3 books to arrange in total\n    total_books = 3\n    # The number of different arrangements or permutations\n    # of n items is n factorial, which is n!\n    arrangements = factorial(total_books)\n    return arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    total_ways = math.factorial(5) # Total ways to arrange 5 people\n    a_first_or_last = 2 * math.factorial(4) # Ways when A is first or last\n\n    # Subtract the cases where A is first or last from the total\n    return total_ways - a_first_or_last\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    num_rounds = math.ceil(math.log(num_people, 2))\n    return num_rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    pink = 3\n    yellow = pink + 7\n    red = 3 * yellow\n    total = red + yellow\n    return total\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Morning boys to girls relation\n    # boys = 1.5 * girls\n    \n    # Afternoon boys to girls relation, taking into account 12 new boys and girls each\n    # boys + 12 : girls + 12 = 19 : 14\n    # (boys + 12) / (girls + 12) = 19 / 14\n    # 14*(boys + 12) = 19*(girls + 12)\n    \n    # Combining both relations to find out the original number of boys and girls\n    equation1 = Eq(boys, 1.5 * girls)\n    equation2 = Eq(14 * (boys + 12), 19 * (girls + 12))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    original_boys = solutions[boys]\n    original_girls = solutions[girls]\n\n    # Total children in the afternoon\n    total_afternoon = (original_boys + 12) + (original_girls + 12)\n\n    return total_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    actual_arrival_time = scheduled_time + delay\n    return actual_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    original_ratio = Eq(apples/oranges, 3/8)\n    new_ratio = Eq((apples - 1)/oranges, 1/3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if hundreds > tens and ones > tens and hundreds != ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_money = 48\n    total_classmates = 10\n    notebook_cost = 3\n    colour_pencil_cost = 9\n\n    for colour_pencils in range(total_classmates + 1):\n        notebooks = total_classmates - colour_pencils\n        if notebooks * notebook_cost + colour_pencils * colour_pencil_cost == total_money:\n            return colour_pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n    \n    first_floor_seating_capacity = first_floor_rows * seats_per_row\n    students_on_second_floor = total_students - first_floor_seating_capacity\n    \n    return students_on_second_floor\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    previous_term = 56\n    common_ratio = 2\n\n    next_term = previous_term * common_ratio\n\n    return next_term\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first term of the arithmetic sequence be x.\n    # Then the six consecutive even numbers are x, x+2, x+4, x+6, x+8, x+10.\n    # The sum of an arithmetic sequence is the average of the first and last term multiplied by the number of terms.\n    # So, (x + (x + 10)) / 2 * 6 = 510.\n    # Simplify to get x + (x + 10) = 170, then 2x + 10 = 170, so 2x = 160, and x = 80.\n    first_term = 80\n    \n    # Now we can find the mean of the numbers.\n    last_term = first_term + 10\n    mean = (first_term + last_term) / 2\n    \n    # The median of the numbers is also the average of the three middle terms.\n    # Which are (x+4) and (x+6).\n    median = ((first_term + 4) + (first_term + 6)) / 2\n    \n    # Calculate the difference between the mean and the median.\n    difference = mean - median\n    \n    return difference\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    # Initial result\n    ans = 0\n    # Variable to decide whether to add or subtract\n    sign = 1\n    for i in range(31, 0, -1):\n        ans += sign * i\n        # Flip the sign\n        sign *= -1\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    from math import factorial\n    number = factorial(50)\n    zero_count = 0\n    while number % 10 == 0:\n        zero_count += 1\n        number //= 10\n    return zero_count\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count_7 = 0\n    for i in range(3, 48):\n        count_7 += str(i).count('7')\n    return count_7\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Let x be the number of cards Helen wins from Oliver\n    helen_original_cards = 18\n    oliver_original_cards = 22\n\n    # After winning x cards, Helen has (helen_original_cards + x) cards\n    # After losing x cards, Oliver has (oliver_original_cards - x) cards\n    # According to the problem, Helen has 10 more cards than Oliver now\n    # So we have the equation: helen_original_cards + x = oliver_original_cards - x + 10\n    # Simplifying the equation:\n    x = (helen_original_cards - oliver_original_cards + 10) // 2\n\n    # Helen's new number of cards is her original number of cards plus x\n    helen_new_cards = helen_original_cards + x\n\n    return helen_new_cards\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n\n    amount_sugar = total_weight * sugar_concentration\n\n    return amount_sugar\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    first_climb = 23\n    first_descent = 31\n    second_climb = 17\n\n    final_height = initial_height + first_climb - first_descent + second_climb\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    from math import log10\n\n    # Calculate the number of digits in N = 5^100\n    N = 5 ** 100\n    num_digits = int(log10(N)) + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be x. Then the next four numbers are x+1, x+2, x+3, x+4.\n    # The sum of these five consecutive numbers is 5x + 10 (since 1+2+3+4=10)\n    # According to the question, this sum is equal to 40.\n\n    # 5x + 10 = 40\n    # Solve for x\n    x = (40 - 10) / 5\n    return int(x)\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtracting 1 for the number 1, which is neither prime nor composite\n\n    return composite_numbers\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the mass of strawberries as 's' and the mass of mangoes as 'm'\n    s, m = symbols('s m')\n\n    # According to the problem we have two equations:\n    # 1. There was 448g more mangoes than strawberries\n    equation1 = Eq(m, s + 448)\n    # 2. After 900g of mangoes were given away, the mass of strawberries was twice as much as the mass of mangoes\n    equation2 = Eq(s, 2 * (m - 900))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (s, m))\n\n    # Return the mass of strawberries at first\n    return solutions[s]\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    return 2 * 13 * 3.5\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    initial_sweets = 33\n    sweets_given_away = 8\n    sweets_left = initial_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    fourth_term = 39\n    twelfth_term = 57\n    common_difference = (twelfth_term - fourth_term) / (12 - 4)\n    first_term = fourth_term - (3 * common_difference)\n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    num_list = [1, 3, 5, 2]\n    num_list.sort(reverse=True)\n    largest_num = int(''.join(map(str, num_list)))\n    return largest_num\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    # Create all 5-digit permutations of given digits that are multiples of 9\n    digits = ['0', '1', '3', '4', '6', '8', '9']\n    valid_numbers = [int(''.join(p)) for p in permutations(digits, 5) if int(''.join(p)) % 9 == 0]\n    \n    # Sort the list to find the maximum and minimum\n    valid_numbers.sort()\n    \n    # Get the largest and the smallest 5-digit numbers that are multiples of 9\n    M = valid_numbers[-1]\n    N = next(num for num in valid_numbers if num > 10000)\n    \n    # Calculate the largest possible value of (M - N) / 9\n    result = (M - N) / 9\n    \n    return int(result)\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4400004\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    # Amount of salt in the first solution (in grams)\n    salt_30_percent = 30 * 0.30\n    # Amount of salt in the second solution (in grams)\n    salt_20_percent = 20 * 0.20\n    # Total amount of salt in the two solutions\n    total_salt = salt_30_percent + salt_20_percent\n    # Total final weight of the solution needed to achieve 10% concentration\n    final_weight_needed = total_salt / 0.10\n    # Amount of mixture already present\n    current_mixture_weight = 30 + 20\n    # Grams of water needed to be added\n    water_needed = final_weight_needed - current_mixture_weight\n    \n    return water_needed\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    actual_addend = 450\n    incorrect_sum = 987\n    \n    correct_sum = incorrect_sum - incorrect_addend + actual_addend\n    \n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    # Since we need to find an integer that when squared and then added to itself equals 380,\n    # we can set up the equation x * x + x = 380, where x is the integer we are trying to find.\n    # This simplifies to x^2 + x - 380 = 0, which is a quadratic equation.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x**2 + x, 380)\n    \n    # We solve the quadratic equation for the integer value of x\n    solutions = solve(equation, x)\n    \n    # We need to return only the integer solution as the problem specifies the value must be an integer.\n    for solution in solutions:\n        if solution.is_integer:\n            return solution\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # meters per minute\n    vicky_speed = 250    # meters per minute\n    race_distance = 3000  # meters\n\n    # Time taken by Johnson and Vicky to finish the race\n    johnson_time = race_distance / johnson_speed\n    vicky_time = race_distance / vicky_speed\n\n    # Time difference between Johnson and Vicky\n    time_difference = vicky_time - johnson_time\n\n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # Maximum possible balls without achieving the goal (worst case):\n    # Taking 28 blue balls, but not reaching 29\n    # Taking 27 red balls, but not reaching 28\n    # Taking 9 white balls, but not reaching 10\n    max_non_goal_balls = (28 - 1) + (27 - 1) + (9 - 1)  # Subtract 1 to not reach the next pick which would ensure the goal\n\n    # Since we want at least 29, 28, and 10 balls of each color,\n    # we need to add 1 more for each color to the worst case to ensure we meet the condition.\n    # Thus, the next ball we pick must fulfill the requirement for one of the colors.\n    balls_to_catch = max_non_goal_balls + 3\n\n    return balls_to_catch\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Using Pigeonhole Principle: If n items are put into m containers, with n > m, then at least one container must contain more than one item.\n\n    # In the worst case, you can draw 2 cards of each number without having at least 3 cards with the same number.\n    # There are 13 numbers, so drawing 2 cards of each number results in 13 * 2 cards drawn.\n\n    # Drawing one more card would guarantee that at least three cards have the same number, as there are only 13 numbers available.\n    num_cards_drawn = (13 * 2) + 1\n    \n    return num_cards_drawn\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n    \n    # Create a list of prime numbers from 1 to 20\n    primes = list(primerange(1, 21))\n    \n    # Count the number of prime numbers in the list\n    count_primes = len(primes)\n    \n    # Count the total numbers from 1 to 20\n    total_numbers = 20\n    \n    # Calculate the proportion of prime number cards\n    proportion_primes = count_primes / total_numbers\n    \n    return proportion_primes\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    # Calculate the total sum of the numbers if the mean is 8 for eight numbers\n    total_sum = 8 * 8\n    # The sum of the known numbers\n    known_sum = 12 + 4 + 6 + 4 + 2 + 9 + 7\n    # Calculate the missing number\n    missing_number = total_sum - known_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume transferred from each bottle\n    x = symbols('x')\n\n    # Initial lime in each bottle\n    lime_A = 5 * 0.10\n    lime_B = 3 * 0.20\n\n    # Final volume of each bottle\n    final_vol_A = 5 - x\n    final_vol_B = 3 + x\n\n    # Final amount of lime in each bottle after the transfer\n    final_lime_A = lime_A - 0.10 * x + 0.20 * x\n    final_lime_B = lime_B + 0.10 * x - 0.20 * x\n\n    # The final concentration should be the same for both bottles\n    equation = Eq(final_lime_A / final_vol_A, final_lime_B / final_vol_B)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    # For the original series, we know the sum S = n/2 * (first_term + last_term), where n is the number of terms.\n    # For 1 to 50, the sum S1 = 1275 given by the question\n    n = 50\n    S1 = 1275\n    first_term_original = 1\n    last_term_original = 50\n\n    # For 2 to 51, the sum S2 can be calculated as follows:\n    # We simply notice that the sum from 2 to 51 is the original sum minus the first term plus the new last term (51).\n    S2 = S1 - first_term_original + (last_term_original + 1)\n\n    return S2\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDEFGH'):\n        if p.index('A') < p.index('C') < p.index('B') or p.index('B') < p.index('C') < p.index('A'):\n            if 'DE' in ''.join(p) or 'ED' in ''.join(p):\n                if 'FG' in ''.join(p) or 'GF' in ''.join(p):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n\n    combinations = len(notebook_prices) * len(calendar_prices)\n    \n    return combinations\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    return 546 - 287\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    total_students = 31\n    tables_per_row = 5\n    num_rows = -(-total_students // tables_per_row)  # Ceiling division to get the least number of rows\n    return num_rows\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    # The pattern in the addition is that each subsequent number adds one more \"123\" to the end.\n    # The hundreds digit will only be affected by the last three digits of each sum,\n    # due to overflow in the addition carrying over to the thousands place or above.\n    # Thus, we can consider the repetitive \"123\" addition in modular 1000 arithmetic.\n\n    result = 0\n    current_addition = 123\n    while current_addition % 1000 != 0:\n        # We use modular addition to prevent large number computations\n        result = (result + current_addition) % 1000\n        current_addition = (current_addition * 1000) + 123  # Appending \"123\" at the end\n\n    # Once the current addition is 0 in mod 1000, any subsequent additions will not change\n    # the first three digits, so we stop and return the hundreds digit.\n    hundreds_digit = (result // 100) % 10  # Extracting the hundreds digit\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Painting dimensions\n    painting_length = 90  # cm\n    painting_ratio = 5 / 2\n\n    # Legos dimensions\n    lego_length = painting_length - 70.5  # 70.5 cm smaller than the painting\n    \n    # Since the ratio must remain the same, we can find the breadth by dividing the lego's length by the ratio\n    lego_breadth = lego_length / painting_ratio\n\n    # As we need the maximum size of the breadth which is an integer since lego size can't be fractional\n    max_breadth = int(lego_breadth)\n\n    return max_breadth\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    # The total amount Zoey initially had in cents\n    total_amount = 50 + 20 + 10 + 5\n\n    # Iterate through the value of each coin to determine which one she lost\n    for coin in [50, 20, 10, 5]:\n        if (total_amount - coin) == 2 * (total_amount // 2 - coin):\n            lost_coin = coin\n            break\n\n    return lost_coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # According to the Inclusion-Exclusion Principle\n    like_both = (like_bananas + like_apples) - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_time = 200 / 8  # time taken by Jaan to finish the race\n    kane_distance = 200 - 12.5  # distance covered by Kane when Jaan finished\n    kane_speed = kane_distance / jaan_time  # speed of Kane\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10  # 110p is equivalent to £1.10\n\n    total_price = cake_price + milk_price\n    actual_payment = total_price - voucher\n\n    return actual_payment\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_pay_rate = 12\n    normal_hours = 8\n    overtime_rate = normal_pay_rate * (1 + 1/4)\n    overtime_hours = 10 - normal_hours\n\n    total_pay = (normal_hours * normal_pay_rate) + (overtime_hours * overtime_rate)\n\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    return 111 - 87\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the rates of John, Raj and Pete\n    john_rate, raj_rate, pete_rate = symbols('john_rate raj_rate pete_rate')\n\n    # Define equations based on the problem statement\n    # 1 job/hr = John's rate + Raj's rate + Pete's rate\n    equation1 = Eq(john_rate + raj_rate + pete_rate, 1)\n\n    # Convert 1 hr 12 min to hours and create an equation for John and Raj\n    # 1 job/(1 + 12/60) hr = John's rate + Raj's rate\n    equation2 = Eq(john_rate + raj_rate, 1 / (1 + 12/60))\n\n    # Convert 1 hr 30 min to hours and create an equation for Raj and Pete\n    # 1 job/(1 + 30/60) hr = Raj's rate + Pete's rate\n    equation3 = Eq(raj_rate + pete_rate, 1 / (1 + 30/60))\n\n    # Solve the system of equations for the rates\n    solutions = solve((equation1, equation2, equation3), (john_rate, raj_rate, pete_rate))\n\n    # Find how long Raj would take to finish the job by himself\n    # time = 1 / Raj's rate\n    raj_time_hours = 1 / solutions[raj_rate]\n\n    # Convert hours to minutes\n    raj_time_minutes = raj_time_hours * 60\n\n    return raj_time_minutes\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n    equation1 = Eq(elder + younger, 42)\n    equation2 = Eq(younger - (elder - younger), elder / 2)\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # Each repeating unit has a length of 9 (which is '928928928')\n    repeating_unit = '928928928'\n    sum_of_digits = sum(int(digit) for digit in repeating_unit)\n\n    # There are 11 full repeating units in a 99-digit number (11 * 9 = 99)\n    total_sum = sum_of_digits * 11\n\n    # Find the remainder when the total sum of digits is divided by 9\n    remainder = total_sum % 9\n\n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # You can take at most 2 of each color without getting a third of the same color\n    # So, take 2 white, 2 blue, 2 green balls, that's 6 balls in total\n    # Now, no matter which color of the next ball you take, it will be the third of that color\n    max_two_of_each = 2 * 3  # 2 each from white, blue, green\n    # The next one will surely be the third of the same color.\n    one_more_to_get_third = 1\n    return max_two_of_each + one_more_to_get_third\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n\n    return remainder\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original_number = 10 * tens + ones\n            swapped_number = 10 * ones + tens\n            if swapped_number == 3 + original_number // 3:\n                return original_number\n                \nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    n = 1\n    while n * (n - 1) != 60:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    # Ratio of apples to boxes\n    apples_per_box = 14 / 4\n    \n    # Calculate the number of boxes needed for 66.5 kilograms\n    boxes_needed = 66.5 / apples_per_box\n    \n    return int(boxes_needed)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Their current age sum\n    current_sum = 34\n    # The target age sum\n    target_sum = 40\n    \n    # Since each year, both George and his sister get 1 year older,\n    # We need to find the number of years it would take for their combined age to increase by (target_sum - current_sum)\n    years_later = target_sum - current_sum\n\n    return years_later\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the length of the rope needed to wrap around the tree once\n    x = symbols('x')\n    \n    # Equation 1: Ten turns around the tree leaves 3 meters\n    equation1 = Eq(10 * x + 3, x)\n    \n    # Equation 2: Twelve turns around the tree is missing 3 meters\n    equation2 = Eq(12 * x - 3, x)\n    \n    # Solving the two equations to find the value of x\n    solution_x = solve((equation1, equation2), (x))\n    \n    # Now we find how many meters around 8 turns left\n    turns = 8\n    length_left = turns * solution_x[x] - x\n    \n    return length_left\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    num_countries = 11\n    min_participants_per_country = 5\n    # According to pigeonhole principle, to ensure that there is at least one pigeonhole\n    # (in this case, a country) with min_participants_per_country + 1 participants,\n    # the formula is (num_countries - 1) * min_participants_per_country + 1.\n    ans = (num_countries - 1) * min_participants_per_country + 1\n    return ans\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    x, y, z = symbols('x y z')\n\n    # Set up the equations based on the given system of equations\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # The sum of x, y, and z is desired\n    result = sum(solutions.values())\n\n    return result\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows = (students + tables_per_row - 1) // tables_per_row\n    return rows\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    \n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n    \n    solutions = solve((equation1, equation2), (kitty, nora))\n    \n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n\n    return ash_cards\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        num_1 = A * 1000 + B * 100 + B * 10 + C\n        num_2 = B * 1000 + C * 100 + D * 10 + C\n        sum_ = num_1 + num_2\n        # Construct the resulting number from the sum\n        result = (A * 10000) + (B * 1000) + (C * 100) + (D * 10) + C\n        # Validate that the sum is correct and matches the format ACxxx\n        if sum_ == result and A == (sum_ // 10000):\n            return A + B + C + D\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    ans = 92 * 503\n    return ans\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    spent = 3/7 * total_money\n    not_used = total_money - spent\n\n    equation = Eq(spent - not_used, 12)\n\n    total_money_solution = solve(equation, total_money)[0]\n\n    amount_spent_on_bag = 3/7 * total_money_solution\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    # Let the number be x\n    # Based on the description: I double it (2*x) and add six (+ 6), the result is 28.\n    # The equation is 2*x + 6 = 28\n    # We can solve for x by subtracting 6 from 28 and then dividing by 2.\n\n    ans = (28 - 6) / 2\n    return ans\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Given that the youngest three add up to 42 years,\n    # and they were born on the same day in seven consecutive years,\n    # we can define an arithmetic sequence for their ages.\n\n    # Let the age of the youngest be y, then the ages are:\n    # y, y+1, y+2, y+3, y+4, y+5, y+6\n    \n    # The sum of the ages of the youngest three is:\n    # y + (y + 1) + (y + 2) = 3y + 3\n\n    # We know that 3y + 3 = 42\n    # Solving for y, we get:\n    y = (42 - 3) / 3  # y is the age of the youngest dwarf\n\n    # The ages of the oldest three are:\n    # y+4, y+5, y+6\n    # The sum of their ages is:\n    sum_oldest_three = (y+4) + (y+5) + (y+6)\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    n = 111\n    m = 7\n    ans = n - sum(range(1, m))\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    ans = (1/6) * n * (n + 1) * (2*n + 1) * (5**2)\n    return ans\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B + C, 659)\n    equation2 = Eq(A + B, 447)\n    equation3 = Eq(B + C, 335)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n_stickers, n_pupils = symbols('n_stickers n_pupils')\n\n    equation1 = Eq(n_stickers, 13*n_pupils + 190)\n    equation2 = Eq(n_stickers, 17*n_pupils + 50)\n\n    solutions = solve((equation1, equation2), (n_stickers, n_pupils))\n\n    return solutions[n_stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    difference_girls_boys = 30\n\n    # Let the number of boys be b and girls be g.\n    # Thus, we have two equations:\n    # b + g = total_pupils\n    # g = b + difference_girls_boys\n    # Now we substitute the second equation into the first one: b + (b + difference_girls_boys) = total_pupils\n    # Simplify to find the number of boys (b): 2b + difference_girls_boys = total_pupils\n\n    b = (total_pupils - difference_girls_boys) / 2\n\n    # Once we have the number of boys, we find the number of girls using the equation g = b + difference_girls_boys\n    g = b + difference_girls_boys\n\n    return int(g)\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file, storybook = symbols('file storybook')\n    \n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n\n    solutions = solve((equation1, equation2), (file, storybook))\n\n    return solutions[file] + solutions[storybook]\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_tray = 1\n    additional_sausages = 21\n\n    total_sausages_initial = initial_trays * initial_mean\n    total_sausages_now = total_sausages_initial + additional_sausages\n    total_trays_now = initial_trays + additional_tray\n\n    new_mean = total_sausages_now / total_trays_now\n\n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    sum_of_numbers = 1.99 + 2.99 + 3.99 + 4.99\n    return sum_of_numbers\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "from itertools import combinations\n\ndef solution():\n    count = 0\n    for i in range(1, 10):  # hundreds digit\n        for j in range(0, 10):  # units digit\n            if i > j:  # ensure \"high-low-high\" pattern\n                # tens digit must be less than both i and j\n                count += len([k for k in range(0, 10) if k < i and k < j])\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    # Convert mixed number 3 1/2 to improper fraction\n    numerator = (3 * 2) + 1\n    denominator = 2\n\n    # The division of fractions is equivalent to multiplying by the reciprocal\n    final_numerator = numerator * 4  # reciprocal of 1/4 is 4/1\n    final_denominator = denominator * 1\n\n    # Simplify the result (it's already simplified, but this step is shown for clarity)\n    ans = final_numerator // final_denominator\n\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (263 + 137) / 20  # speed = total distance / time for the first bridge\n    time_for_train_only = 137 / speed  # time for the train to cross a point\n    time_for_second_bridge_only = 27 - time_for_train_only  # total time - time for train only for second bridge\n    length_of_second_bridge = speed * time_for_second_bridge_only  # length = speed * time for second bridge only\n\n    return length_of_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani_money = 456\n    brenda_money = 528\n    total_money = rani_money + brenda_money\n    equal_share = total_money // 2\n    brenda_give = brenda_money - equal_share\n\n    return brenda_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    blue, red = symbols('blue red')\n\n    total_balls = blue + red\n    fraction_eq = Eq((2/5)*blue, (3/5)*red)\n\n    # System of equations\n    eq1 = Eq(total_balls, 125)\n    eq2 = fraction_eq\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (blue, red))\n\n    return solutions[blue] - solutions[red]\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # Since we know each student must get exactly one book, we handle\n    # those as a separate case. This is just the number of ways to pick 3\n    # books out of 7 for the students, which is 7 choose 3.\n    books_for_students = factorial(7) // (factorial(3) * factorial(7 - 3))\n    \n    # Now assign the remaining 4 books to the 3 students with repetition allowed. \n    # This is like putting 4 indistinguishable items into 3 distinguishable bins, \n    # which is the same as finding the coefficient of x^4 in the expansion of\n    # (x + x^2 + x^3 ...) ^ 3. This is a stars and bars problem and can be \n    # solved with the formula (n + k - 1) choose (k), whereby n = 4 and k = 3 here.\n    remaining_books_assignments = factorial(4 + 3 - 1) // (factorial(3) * factorial(4))\n    \n    # The total number of ways is the product of the two cases.\n    return books_for_students * remaining_books_assignments\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n\n    # 3 watches + 5 handbags = $915\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n\n    # 4 watches + 2 handbags = $632\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # calculate the total cost for 2 such watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    total_candy = 88\n    children = 8\n\n    # Start with the minimum number of candies per child.\n    min_candies = [i for i in range(1, children)]\n    \n    # Calculate the remaining candies after distributing the minimum candies.\n    remaining_candies = total_candy - sum(min_candies)\n    \n    # The child with most pieces will have what's left after minimum distribution.\n    max_candies_for_one_child = remaining_candies\n\n    return max_candies_for_one_child\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 100\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Calculate the age difference between the grandmother and her daughter\n    age_diff = 80 - 40\n    \n    # Calculate the grandmother's age when her daughter was born\n    grandmothers_age_when_daughter_born = 40 - age_diff\n    \n    return grandmothers_age_when_daughter_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # Since A has to start and end with the ball, the sequence is A -> X -> Y -> A\n    # where X and Y are the other two individuals. Since X cannot be A, there are 3 choices for X.\n    # And since Y has to be different from both A and X, there is 1 choice left for Y.\n    # Therefore, A can pass to one of 3 players, then that player can pass it to one of 2 remaining players,\n    # which leaves only one player to pass it back to A.\n\n    # Total number of different methods\n    total_methods = 3 * 2 * 1\n\n    return total_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nicole, eddy = symbols('nicole eddy')\n    \n    tokens_left = Eq(nicole - 130 + eddy - 38, 24)\n    initial_tokens = Eq(nicole, 3 * eddy)\n    \n    solutions = solve((tokens_left, initial_tokens), (nicole, eddy))\n    \n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(8)  # total ways to arrange 8 people\n    ab_together = factorial(7) * 2  # treat A and B as a unit and the unit AB can be arranged in 2 ways (AB or BA)\n    cd_apart = total_ways - (factorial(7) * 2)  # subtract ways where C and D are together from total\n    ab_cd_apart = ab_together * cd_apart // factorial(8)  # AB together times CD apart, divided by total since CD apart was calculated on all 8\n    return ab_cd_apart\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    total_salt = leroy_salt + lenny_salt\n    total_solution = 200 + 300\n    concentration = total_salt / total_solution\n    return concentration * 100  # Convert to percentage\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n\n    total_candies = Eq(mike + valeria, 36)\n    after_eating = Eq(mike - valeria, 6 - 22)\n\n    solutions = solve((total_candies, after_eating), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    sugar = 300 * 0.35\n    water = 300 - sugar\n    return water\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Since we are comparing the same base to different power,\n    # we can just compare the exponents by dividing them to find k.\n    k_pow = (50 * 12) / 75\n    # We find the largest whole number less than k_pow by using the floor function.\n    from math import floor\n    k = floor(12 ** (k_pow))\n    return k\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    end_oranges = 133\n    thrown_away_oranges = 34\n    bought_oranges = 25\n    \n    initial_oranges = end_oranges - bought_oranges + thrown_away_oranges\n    \n    return initial_oranges\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def operation_psi(a, b):\n    if a < b:\n        return a * b + 2\n    else:\n        return a - b + 2\n\ndef solution():\n    first_operation = operation_psi(14, 13)\n    ans = operation_psi(first_operation, 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Let x be the number of girls\n    x = symbols('x')\n    # The rest are boys\n    boys_count = total_students - x\n    \n    # Total girls' score = number of girls * girls' average score\n    girls_total = girls_average * x\n    # Total boys' score = number of boys * boys' average score\n    boys_total = boys_average * boys_count\n    \n    # Total score = total students * total average\n    total_score = total_students * total_average\n    \n    # Equation representing the sum of girls' and boys' total scores\n    equation = Eq(girls_total + boys_total, total_score)\n\n    # Solve the equation\n    solution = solve((equation), (x))\n\n    return solution[x]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Each cat and each dog has 4 legs, and the rabbit has 4 legs.\n    # So, total legs of cats and dogs = 4 cats/dogs * 4 legs each = 16 legs\n    # Total legs of rabbit = 4 legs\n    # Total legs of cats, dogs, and rabbit = 16 + 4 = 20 legs\n    # Legs of birds have to be counted. Each bird has 2 legs.\n    # Therefore, the total number of legs of all pets is 28.\n    # So, number of birds * 2 legs each + 20 legs of cats, dogs and rabbit = 28 legs.\n    # Let's find the number of birds.\n\n    total_legs = 28\n    legs_of_cats_dogs_rabbit = 20\n    legs_of_each_bird = 2\n\n    number_of_birds = (total_legs - legs_of_cats_dogs_rabbit) // legs_of_each_bird\n    return number_of_birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    time_for_my_fence = 6  # hours\n    num_people_for_my_fence = 5\n    length_factor = 2  # neighbor's fence is twice as long\n    time_for_neighbors_fence = 5  # hours, the target time to beat\n\n    # Total work done is equivalent to the product of number of people and time\n    work_my_fence = num_people_for_my_fence * time_for_my_fence\n    # Work needed for neighbor's fence is twice as much as my fence's work\n    work_neighbors_fence = work_my_fence * length_factor\n\n    # Calculate minimum number of people required to complete the neighbor's fence in < 5 hours\n    min_people = (work_neighbors_fence / time_for_neighbors_fence) + (1 if work_neighbors_fence % time_for_neighbors_fence != 0 else 0)\n    \n    return int(min_people)\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    minutes_for_5_floors = 12\n    total_minutes = 30\n\n    flights_in_30_minutes = total_minutes / minutes_for_5_floors * 4  # Multiply by 4 because there are 4 flights of stairs from the first to fifth floor\n\n    return int(flights_in_30_minutes)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_21_6_grams = cookies_per_gram * 21.6\n    return cookies_with_21_6_grams\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    base8_str = '12345654321'\n    N = int(base8_str, 8)\n    remainder_sum = N % 7 + N % 9\n    return remainder_sum\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belt, wallet, handbag = symbols('belt wallet handbag')\n    \n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(belt + wallet + handbag, 840)\n    \n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    return 96 // 3\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    years_passed_since_then = 3\n    years_ahead = 4\n\n    current_combined_age = combined_age_three_years_ago + (2 * years_passed_since_then)\n    combined_age_in_four_years = current_combined_age + (2 * years_ahead)\n    \n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one book and one magazine\n    book, magazine = symbols('book magazine')\n\n    # Equation representing the cost of 2 books + 3 magazines\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n\n    # Equation representing the cost of 1 book + 1 magazine\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = n * (n + 1) * (n + 2) / 3\n    return int(ans)\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    import math\n\n    def is_perfect_square(n):\n        return n == math.isqrt(n) ** 2\n\n    def count_perfect_square_divisors(number):\n        count_divisors = 0\n        for i in range(1, math.isqrt(number) + 1):\n            if number % i == 0:\n                if is_perfect_square(i):\n                    count_divisors += 1\n                if is_perfect_square(number // i) and i != number // i:\n                    count_divisors += 1\n        return count_divisors\n\n    ans = count_perfect_square_divisors(2016)\n    return ans\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Since they are consecutive whole numbers, let's call them n, n+1, and n+2\n    # According to the question, their sum is 60, so we have the equation: n + (n+1) + (n+2) = 60\n    \n    # Rearrange the equation to solve for n\n    # 3n + 3 = 60\n    # 3n = 60 - 3\n    # n = (60 - 3) / 3\n    \n    n = (60 - 3) // 3  # Using integer division because we're dealing with whole numbers\n    \n    # Now we find the largest number, which is n+2\n    largest_number = n + 2\n    \n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the volume of big pail as 'b' and small pail as 's'\n    b, s = symbols('b s')\n\n    # The first equation comes from 3 big pails and 4 small pails holding 68 litres\n    equation1 = Eq(3*b + 4*s, 68)\n\n    # The second equation comes from 4 big pails and 2 small pails holding 64 litres\n    equation2 = Eq(4*b + 2*s, 64)\n\n    # Solving the system of equations for b and s\n    solutions = solve((equation1, equation2), (b, s))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A == 0 or C == 0:  # Ignore permutations where A or C is zero\n            continue\n        num1 = A * 101 + B * 10\n        num2 = C * 101 + D * 10\n        if num1 + num2 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Worst case scenario: Annabella picks every non-yellow shirt first\n    non_yellow_shirts = 6 + 4 + 12  # Total of orange, pink, and brown shirts\n    \n    # To get at least 1 yellow shirt, Annabella has to take out all non-yellow shirts plus one yellow shirt\n    shirts_to_take_out = non_yellow_shirts + 1 \n\n    return shirts_to_take_out\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    ans = 249 * 31\n    return ans\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    sum_of_decimals = 3.2 + 6.41 + 0.207\n    return sum_of_decimals\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    fractions = [9 + 4/5, 99 + 4/5, 199 + 4/5, 2999 + 4/5, 39999 + 4/5, 1]\n    ans = sum(fractions)\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # The numbers are decreasing, so let's find the differences first\n    difference1 = 80 - 73\n    difference2 = 73 - 66\n\n    # Now let's find the potential difference for the missing number\n    difference_missing = difference1 + (difference1 - difference2)\n\n    # Now find the missing number\n    missing_number = 94 - difference_missing\n    \n    return missing_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    age = 1\n    while True:\n        if (age % 2 == 1) and (age % 3 == 1) and (age % 4 == 1) and (age % 6 == 1) and (age % 7 == 0):\n            return age\n        age += 1\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n\n    wine_glass_sales = 25\n    tumbler_sales = 12\n\n    total_ml_sold = (wine_glass_sales * wine_glass_ml) + (tumbler_sales * tumbler_ml)\n    cartons_needed = total_ml_sold / 1000  # converting ml to litres\n\n    return int(cartons_needed)\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, p, l = symbols('a p l')  # Let a, p, l represent the original number of avocados, peaches, and lemons\n\n    # equation representing initial ratios\n    eq1 = Eq(a/p, 2/9)\n    eq2 = Eq(p/l, 9/8)\n\n    # equation representing final ratios after certain amounts are sold\n    eq3 = Eq((p-12)/(l-60), 6/5)\n\n    # solving the system of equations\n    solution = solve((eq1, eq2, eq3), (a, p, l))\n    avocados_initial = solution[a]\n    peaches_initial = solution[p]\n    lemons_initial = solution[l]\n\n    # subtract the amount sold to find the remaining amounts\n    avocados_left = avocados_initial - 52\n    peaches_left = peaches_initial - 12\n    lemons_left = lemons_initial - 60\n\n    # sum of remaining fruits\n    total_left = avocados_left + peaches_left + lemons_left\n\n    return total_left\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    position_from_end = total_people - position_from_front + 1\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # 2 raised to any power ending in 0, 1, 2, or 3 will have the last digit as 6, 2, 4, or 8 respectively (cyclic pattern).\n    # The cycle repeats every 4 powers of 2.\n    \n    # Find the remainder of the exponent when divided by the cycle length (4).\n    cycle_length = 4\n    remainder = 859433 % cycle_length\n    \n    # Find the last digit by determining which number in the cycle 2, 4, 8, 6 it corresponds to.\n    # Cycle: 2->4->8->6\n    # Since the power is 1-based, we need to subtract 1 to map correctly onto the 0-based index cycle above.\n    last_digit_cycle = [2, 4, 8, 6]\n    last_digit = last_digit_cycle[(remainder - 1) % cycle_length]\n    \n    return last_digit\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    totalCount = 60\n    multiples_of_3 = set(range(3, totalCount+1, 3))\n    multiples_of_5 = set(range(5, totalCount+1, 5))\n    \n    # Multiples of both 3 and 5 (i.e., 15)\n    multiples_of_15 = set(range(15, totalCount+1, 15)) \n    \n    # Use Inclusion-Exclusion Principle\n    turned_around_once = multiples_of_3.union(multiples_of_5)\n    turned_around_twice = multiples_of_15\n    \n    # Students facing teacher are the ones who haven't turned around or have turned around twice\n    facing_teacher = totalCount - len(turned_around_once) + len(turned_around_twice)\n    \n    return facing_teacher\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from math import lcm\n    for age in range(1, lcm(2, 4, 6) * 7 + 1):\n        if age % 2 == 1 and age % 4 == 1 and age % 6 == 1 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets Jess and Jill have initially\n    jess_sweets, jill_sweets = symbols('jess_sweets jill_sweets')\n\n    # Define the first equation based on the ratio of sweets before the exchange\n    equation_before = Eq(jill_sweets, 6/5 * jess_sweets)\n\n    # Define the second equation based on the new ratio after Jill gives Jess 8 sweets\n    equation_after = Eq((jill_sweets - 8), 4/7 * (jess_sweets + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation_before, equation_after), (jess_sweets, jill_sweets))\n\n    # Calculate the total number of sweets they have together after the exchange\n    total_sweets = solutions[jess_sweets] + solutions[jill_sweets]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    max_divisible = 0\n    for i in range(1, 8):\n        for perm in permutations(range(1, 8), i):\n            num = int(''.join(map(str, perm)))\n            if all(num % d == 0 for d in perm):\n                max_divisible = max(max_divisible, num)\n    return max_divisible\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    n = 1\n    while n * n < 900:\n        n += 2\n    return (n - 1) // 2\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C\n    # We have the following equations from the problem statement:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # To find the sum of their weights, we can sum the three equations:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n    # This includes each person's weight twice, so to find the total weight we divide by 2:\n    total_double_weight = 102 + 97 + 93\n    total_weight = total_double_weight / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    dividend = 120 + (divisor - (120 % divisor)) + remainder\n\n    while dividend % divisor != remainder:\n        dividend += 1\n    return dividend\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    ans = min(numbers)\n    return ans\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_in_metres = 2 + 2 / 100\n    return height_in_metres\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test = 60\n    second_test = first_test * (1 + 25 / 100)\n    third_test = second_test * (1 - 20 / 100)\n    total_marks = first_test + second_test + third_test\n    return total_marks\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    # Equation for giving 4 bookmarks each\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    \n    # Equation for giving 6 bookmarks each\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    jan_savings = 13\n    feb_savings = 18\n    mar_savings = 5\n    total_savings = jan_savings + feb_savings + mar_savings\n    mean_savings = total_savings / 3\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    # Loop over hours and minutes\n    for hour in range(24):\n        for minute in range(60):\n            time_string = f\"{hour:02d}{minute:02d}\"  # Format time as a string with zero padding\n            count += time_string.count('4') >= 2  # Count occurrences of '4'\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    # Check if 233 is a prime number\n    if all(233 % i != 0 for i in range(2, int(233**0.5) + 1)):\n        return True  # Michael is correct, 233 is a prime number\n    else:\n        return False  # Michael is incorrect, 233 is not a prime number\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    # This is a series where each term is a multiple of 7 and is squared\n    sum_of_squares = 0\n    for i in range(1, 16):  # Because 105/7 = 15, so there are 15 terms\n        sum_of_squares += (7 * i) ** 2\n    return sum_of_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum = 4.22 + 31.49 + 0.76\n    return sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(130, 151))\n\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    start_num = 56\n    end_num = 92\n    multiple = 4\n\n    # The first multiple of `multiple` after `start_num`.\n    first_multiple_after_start = (start_num + multiple - 1) // multiple * multiple\n\n    # The last multiple of `multiple` before `end_num`.\n    last_multiple_before_end = end_num // multiple * multiple\n\n    # Now calculate the number of multiples between `first_multiple_after_start`\n    # and `last_multiple_before_end` inclusive.\n    num_multiples = (last_multiple_before_end - first_multiple_after_start) // multiple + 1\n    \n    # Correct Sam's mistakes (he forgot to include 56 itself if it is a multiple of 4)\n    return num_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Chinese Remainder Theorem:\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    x, _ = solve_congruence(*congruences)\n\n    # Since x must be less than 100, we subtract multiples of lcm(3,4,5) from x\n    lcm = 3 * 4 * 5\n    while x >= 100:\n        x -= lcm\n        \n    return x\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    distance = 144\n    downstream_time = 8\n    ship_speed = 15\n\n    downstream_speed = distance / downstream_time\n    stream_speed = downstream_speed - ship_speed\n    upstream_speed = ship_speed - stream_speed\n\n    upstream_time = distance / upstream_speed\n\n    return upstream_time\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_pizzas = 6\n    qiqi_pizzas = jenny_pizzas + 5\n    return qiqi_pizzas\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    return comb(15, 2)\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hippo, kangaroo = symbols('hippo kangaroo')\n    \n    equation1 = Eq(hippo, kangaroo + 45)\n    equation2 = Eq(20 * hippo, 10 * (20 * kangaroo))\n    \n    solutions = solve((equation1, equation2), (hippo, kangaroo))\n    \n    return solutions[hippo] * 20\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    initial_time = 3 * 60 + 15  # Convert 3.15 PM to minutes\n    wait_time = 1 * 60 + 25     # Convert 1h 25min to minutes\n\n    meet_time = initial_time + wait_time  # Calculate the meet time in minutes\n\n    meet_hour = meet_time // 60\n    meet_minute = meet_time % 60\n\n    # As we are using 24-hour format, if the hour value is >= 24, subtract 24 to reset to 0\n    if meet_hour >= 24:\n        meet_hour -= 24\n\n    return (meet_hour, meet_minute)\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        (5, 6)\n    ]\n\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for j in range(2, 21) for i in range(j, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    work_per_day_A = 1 / 15\n    work_per_day_B = 1 / 20\n    work_done_in_2_days = 2 * (work_per_day_A + work_per_day_B)\n    remaining_work = 1 - work_done_in_2_days\n    remaining_days_for_A = remaining_work / work_per_day_A\n    return remaining_days_for_A + 2  # Adding the 2 days already worked\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure at least two balls of the same colour,\n    # consider the worst-case scenario where we pick alternate colors.\n    # So we take 1 green, then 1 blue, then 1 green and so on.\n    # After we have taken one of each, the next ball we take\n    # must be of the same colour as one we have already taken,\n    # because there are only two colours.\n\n    # Taking one green and one blue, we have taken 2 balls\n    balls_taken = 2\n\n    # The next ball will ensure we have two of the same colour\n    return balls_taken + 1 \n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    zodiac_signs = 12\n    students_needed_for_10_shared = zodiac_signs * 10\n    ans = students_needed_for_10_shared + 1\n    return ans\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "def solution():\n    from itertools import permutations\n    \n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    count = 0\n\n    for perm in permutations(students):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C') or \\\n           perm.index('A') > perm.index('C') and perm.index('A') < perm.index('B'):\n            if abs(perm.index('D') - perm.index('E')) == 1:\n                if abs(perm.index('F') - perm.index('G')) != 1:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # The worst case scenario is when she takes out all yellow and white balls, \n    # and finally takes black balls, which are the most abundant.\n    \n    # Number of yellow balls\n    yellow = 5\n    \n    # Number of white balls\n    white = 15\n    \n    # We need 10 balls of the same color, so we will take out all yellow and white balls\n    # and then take one more which will be the 10th ball of the same color.\n    \n    # Total number of balls to take out to be sure to have 10 of the same colour\n    ans = yellow + white + 10\n    \n    return ans\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_receiver = 3\n\n    last_receiver = (first_receiver + total_candies - 1) % total_children\n    if last_receiver == 0:\n        last_receiver = total_children\n\n    return last_receiver\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n\n    # formula for the sum of an arithmetic sequence: n/2 * (2*a + (n-1)d)\n    ans = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n    return int(ans)\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    spaghetti_interval = 7\n    apple_pie_interval = 3\n\n    days = 1\n    while True:\n        if days % spaghetti_interval == 0 and days % apple_pie_interval == 0:\n            break\n        days += 1\n\n    return days + 1  # 1 is added because the starting day is counted as 1\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    have_dogs = 19\n    have_cats = 18\n\n    # Using the Inclusion-Exclusion Principle\n    both_cats_and_dogs = (have_dogs + have_cats) - total_children\n\n    return both_cats_and_dogs\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assuming the table is an arithmetic sequence\n    # Since no specific table is given, I will assume the table has a sequence of natural numbers starting from 1\n    \n    # Let's say the table has 'n' numbers\n    # The sum of the first 'n' natural numbers is given by the formula n*(n + 1) / 2\n    \n    # To find 'n', we need more information about the table, which is not provided in the question\n    # If we consider the table to include all natural numbers up to a certain point, for example, 100\n    # Then 'n' would be 100 and we can calculate the sum\n\n    n = 100  # Example value for 'n', replace with actual value if known\n    sum_of_numbers = n * (n + 1) // 2\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirts, shirts = symbols('skirts shirts')\n\n    equation1 = Eq(shirts, skirts - 36)\n    equation2 = Eq((2/3) * shirts + (5/6) * skirts, 72)\n\n    solutions = solve((equation1, equation2), (skirts, shirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    months = 3\n\n    total_saving = monthly_saving * months\n\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    total_length = 100\n    total_width = 80\n    cloak_length = 5\n    cloak_width = 4\n    \n    cloaks_in_length = total_length // cloak_length\n    cloaks_in_width = total_width // cloak_width\n    \n    total_cloaks = cloaks_in_length * cloaks_in_width\n    \n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Calculate the time taken to travel to the place at 20 miles per hour\n    time_to_place = 120 / 20\n    \n    # Calculate the total time allowed for the round trip to maintain an average speed of 30 mph\n    total_time_for_round_trip = (120 * 2) / 30  # round trip distance is 120 * 2\n    \n    # Calculate the time remaining for the return trip\n    time_for_return_trip = total_time_for_round_trip - time_to_place\n    \n    # Calculate the speed required to travel back in the remaining time\n    speed_returning = 120 / time_for_return_trip\n    \n    return speed_returning\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    lcm, remainder = solve_congruence(*congruences)\n\n    # find the smallest number in the range [400, 800] that satisfies the congruences\n    biscuit_count = remainder\n    while biscuit_count < 400:\n        biscuit_count += lcm\n\n    return biscuit_count\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    sweets_per_ratio = nell_sweets / nell_ratio\n    \n    total_sweets = sweets_per_ratio * total_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    count = 0\n    for number in range(1, 35):\n        count += str(number).count('1')\n    return count\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make one cut to produce 2 pieces.\n    # To produce 5 pieces, we need to make 4 cuts.\n    # If each cut takes 2 minutes, then 4 cuts take 4 * 2 minutes.\n    minutes_per_cut = 2\n    number_of_cuts_needed = 5 - 1  # To make N pieces, we need to make N - 1 cuts.\n    total_time = minutes_per_cut * number_of_cuts_needed\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    total = sum(sequence)\n    num_elements = len(sequence)\n    average = total / num_elements\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    original_average = 120\n    new_average = 110\n    num_values = 3\n    \n    sum_of_original_values = original_average * num_values\n    new_sum = new_average * (num_values + 1)\n    \n    number_to_add = new_sum - sum_of_original_values\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person has\n    jovan, sean, herman = symbols('jovan sean herman')\n\n    # Define the equations based on the problem statements\n    # Jovan has twice as many marbles as Sean\n    eq1 = Eq(jovan, 2 * sean)\n    # Heman has 3 times as many marbles as Jovan\n    eq2 = Eq(herman, 3 * jovan)\n    # Jovan has 240 fewer marbles than Herman\n    eq3 = Eq(jovan, herman - 240)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (jovan, sean, herman))\n\n    # Calculate the total number of marbles by adding up their individual counts\n    total_marbles = solutions[jovan] + solutions[sean] + solutions[herman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if (140 + m) == (8 * (10 + m)) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    total_hay = 12 * 15  # Total units of hay for 12 horses for 15 days\n    days_for_20_horses = total_hay / 20  # Units of hay divided by 20 horses to find number of days\n\n    return days_for_20_horses\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    return 10.25 + 9.2 - 7\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "def solution():\n    from math import gcd\n\n    num1 = 6\n    num2 = 9\n    num3 = 12\n\n    ans = gcd(gcd(num1, num2), num3)\n\n    return ans\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days_to_build = 5\n\n    one_company_output_per_day = total_expressway / (companies * days_to_build)\n    \n    return one_company_output_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoes_price_per_individual = 78 / 5\n    total_legs = 5 * (1 + 5)  # alien and 5 brothers\n    total_shoes_cost = shoes_price_per_individual * total_legs\n    total_socks_cost = 12 * total_legs\n    total_cost = total_shoes_cost + total_socks_cost\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    mean = sum(data) / len(data)\n    deviations = [abs(x - mean) for x in data]\n    mad = sum(deviations) / len(data)\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    from math import comb\n    # Using stars and bars theorem to calculate the distribution.\n    return comb(13 + 3 - 1, 13)\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    for i in range(10000):\n        original_number = str(i).zfill(4)  # Ensures the number is 4 digits by padding with zeros\n        new_number = original_number[-1] + original_number[:-1]\n        if int(new_number) - int(original_number) == 5877:\n            return int(original_number)\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    for total in possible_totals:\n        if (total - 4) % 7 == 0:\n            return total\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # The distance between first and fifth tree is the distance for 4 intervals\n    interval = 20 / 4\n\n    # For a 200 m road, divide by the interval distance and add 1 for the first tree\n    num_trees = (200 / interval) + 1\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d represent the number of David's $0.50 cookies\n    # Let j represent the number of Jeremy's $0.10 cookies\n    d, j = symbols('d j')\n\n    # David's cookies cost thrice as much as Jeremy's cookies\n    equation1 = Eq(0.50 * d, 3 * 0.10 * j)\n    \n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies => d = 3/5 * j\n    equation2 = Eq(d, 0.6 * j)\n    \n    # There were 60 fewer $0.10 cookies than $0.50 cookies => j = d - 60\n    equation3 = Eq(j, d - 60)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, j))\n    \n    # Extract solutions for d and j\n    d_solution = solutions[d]\n    j_solution = solutions[j]\n    \n    # Calculate the worth of Jeremy's cookies\n    jeremys_cookies_worth = 0.10 * j_solution\n    \n    return jeremys_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    from itertools import combinations\n    from functools import reduce\n    from math import prod\n\n    cards = [6, 12, 35, 175, 245, 300]\n    not_picked = None\n\n    # Generating all possible combinations for Candy (2 cards) and Candice (3 cards)\n    candy_combinations = list(combinations(cards, 2))\n    candice_combinations = list(combinations(cards, 3))\n\n    # Creating a dictionary to map product to combinations for Candice\n    candice_products = {prod(combo): combo for combo in candice_combinations}\n\n    # Iterating through Candy's combinations to find matching product in Candice's combinations\n    for combo in candy_combinations:\n        product = prod(combo)\n        if product in candice_products:\n            all_picked_cards = set(combo + candice_products[product])\n            not_picked = next(card for card in cards if card not in all_picked_cards)\n            break\n\n    return not_picked\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12  # Tap A fills the tank in 12 minutes, rate is in tanks per minute\n    rate_B = 1 / 8   # Tap B fills the tank in 8 minutes, rate is in tanks per minute\n    combined_rate = rate_A + rate_B  # Both taps filling together\n\n    half_tank_time = (1 / 2) / combined_rate  # Time to fill half the tank\n    return half_tank_time\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Evaluate the expression step by step according to mathematical rules\n    step1 = 36 * 21\n    step2 = step1 // (6 * 7)  # Use integer division since we're dealing with numbers without remainders.\n\n    # The answer Jason came up with\n    jason_answer = 882\n    # The correct answer obtained from the actual calculations\n    correct_answer = step2\n\n    # Check if Jason's answer is correct\n    mistake_found = (jason_answer != correct_answer)\n\n    return (mistake_found, correct_answer)\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    ans = 4392 // 6\n    return ans\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruits = 48\n    fraction_apples = 5 / 8\n    apples = total_fruits * fraction_apples\n    pears = total_fruits - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    side_length = 1\n    while True:\n        total_students = (side_length + 1)**2\n        boys = total_students - girls\n        if boys == side_length * side_length:\n            return boys\n        side_length += 1\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_future = cousin_age_now + 8\n\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    return 148 + 73\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    # Ann's position\n    ann_pos = 8\n    # Number of people between Ann and David\n    people_between = 3\n    # David's position is Ann's position plus the people in between plus one (for David himself)\n    david_pos = ann_pos + people_between + 1\n    # There is one person behind David since he is the second last\n    total_people = david_pos + 1\n    \n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count_8 = 0\n    page = 1\n    while count_8 < 22:\n        if '8' in str(page):\n            count_8 += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    third_number = 555 - (first_number + second_number)\n    \n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    # As given n:8=9:12 we can cross multiply to solve for n\n    n = 8 * 9 / 12\n\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    return 3280 / 1000\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    height = 9\n    climb_up = 3\n    slide_down = 1\n    net_climb_per_day = climb_up - slide_down\n    day = 0\n\n    while height > 0:\n        day += 1\n        height -= climb_up\n        if height <= 0:\n            break\n        height += slide_down\n\n    return day\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    # Using the inclusion-exclusion principle\n    both_competitions = maths_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800 # the initial amount put in the bank\n    rate = 0.08 # 8% annual interest rate\n    time = 3 # number of years\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To get at least 29 balls of one color, we must be prepared to pick\n    # all balls of the other two colors. So we must consider the worst case\n    # scenario in which we pick all the blue and red balls without getting 29\n    # of either. After we have all blue and red balls, the next ball we pick\n    # must be white, and it will be the 29th ball of that color.\n\n    blue_balls = 80\n    red_balls = 40\n    white_balls = 30\n\n    # Pick all red and blue balls first\n    balls_picked = blue_balls + red_balls\n    # Next ball picked has to be white to ensure 29 of one color.\n    balls_picked += 1\n\n    return balls_picked\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    x = (19 - 6 * 1.5) / 4\n    return x\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_english_mountain = 978\n    height_highest_mountain = 8848\n    difference = height_highest_mountain - height_english_mountain\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 50))  # Generate a list of prime number less than 50\n\n    for prime in primes:\n        if prime % 3 == 2 and prime % 5 == 2:  # two less than a multiple of 3 and two more than a multiple of 5\n            return prime\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Alicia spent half of her money\n    spent_alicia = alicia / 2\n    # Beth spent $60\n    spent_beth = 60\n    # Casey spent 3 times as much money as Alicia did\n    spent_casey = 3 * spent_alicia\n\n    # They all had the same amount of money left\n    # So, Alicia - spent_alicia = Beth - spent_beth = Casey - spent_casey\n    equation1 = Eq(alicia - spent_alicia, beth - spent_beth)\n    equation2 = Eq(beth - spent_beth, casey - spent_casey)\n    # The total amount they originally had was $900\n    equation3 = Eq(alicia + beth + casey, 900)\n\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Any factorial greater than or equal to 10! has a last digit of zero since it includes the factors 2 and 5,\n    # which produce a trailing zero when multiplied. Therefore, 2014! will certainly end with at least one zero.\n    # Thus, the last non-zero digit is always 0 for factorials of 10 or above.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    product = 2*2*3*8*5*5*5\n    zeros = 0\n    while product % 10 == 0:\n        zeros += 1\n        product //= 10\n    return zeros\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6 * 5  # Since 30 is 5 times greater than 6\n    denominator = 20 * 5  # We multiply 20 by the same factor to find the denominator\n\n    return denominator\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    final_result = 1\n    \n    # add 8 which was previously subtracted\n    quotient_result = final_result + 8\n    \n    # multiply by 8 which was previously a divisor\n    product_result = quotient_result * 8\n    \n    # divide by 3 which was the previous multiplier\n    sum_result = product_result / 3\n    \n    # subtract 6 which was previously added to the original number\n    original_number = sum_result - 6\n    \n    return original_number\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n\n    equation = Eq(original_number + new_number, 253)\n\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    # Let 'a' be the number of cookies eaten on the first day\n    # d is the common difference (6 more each day)\n    d = 6\n    # The sum of an arithmetic series is given by: n/2 * (2a + (n - 1) * d)\n    # Here, n is the number of terms (days), so we can solve for 'a'\n    # total_cookies = days / 2 * (2 * a + (days - 1) * d)\n    # Rearranging the equation to solve for 'a':\n    a = (total_cookies * 2 / days - (days - 1) * d) / 2\n    return a\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    final_seashells = (initial_seashells - given_to_sister - given_to_friend + picked_seashells)\n    seashells_per_box = final_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    possible_numbers = []\n    for i in range(1, 90):\n        if i % 9 == 0 and (i - 1) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89] and (i + 1) % 5 == 0:\n            possible_numbers.append(i)\n            break\n    return possible_numbers[0]\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n    \n    # Cayden completed 6 more questions than Sicheng\n    equation1 = Eq(cayden, sicheng + 6)\n    # Yixuan completed 2 times as many questions as Cayden\n    equation2 = Eq(yixuan, cayden * 2)\n    # Yixuan completed 22 more questions than Sicheng\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n    \n    total_questions = sum(solutions.values())\n    \n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    return 18 / 100 * 250\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n\n    # There are 4 men and 4 women, and they have to alternate in the lineup\n    # So we have 4! ways to arrange the men and 4! ways to arrange the women\n    # Since men and women can each start the line, we have 2 possibilities for who starts\n    # Hence, the total number of ways is 2 * 4! * 4!\n    \n    men_ways = factorial(4)\n    women_ways = factorial(4)\n    \n    ans = 2 * men_ways * women_ways\n    return ans\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(5)  # Total permutations for the 5 letters\n    p_count = factorial(2)        # Number of permutations of the letter 'P' within the word\n    ans = total_letters // p_count\n    return ans\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_three_rolls_mya = cost_per_roll_mya * 3\n\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = sum(solutions.values())\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    total_children = girls / (1 - 2/5)\n    boys = (2/5) * total_children\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_Peter = 9\n    people_behind_John = 10\n    # Including Peter and John themselves\n    Peter_and_John = 2 \n\n    total_people = people_in_front_of_Peter + people_behind_John + Peter_and_John\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    result = 0.60 * 0.10 * 900\n    return result\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    # St. Petersburg is in Russia, commonly in the Moscow Time Zone, which is GMT+3\n    # England is in the Greenwich Mean Time Zone, which is GMT+0 (or GMT+1 with daylight saving)\n    # Assuming no daylight saving for simplicity: GMT+0 to GMT+3 is a 3 hour difference\n\n    # Flight duration\n    flight_duration = 4\n    \n    # Time difference between England and St Petersburg\n    time_difference = 3\n    \n    # Departure time in England (12 noon)\n    departure_time = 12\n    \n    # Time in St Petersburg when Richard lands\n    arrival_time = (departure_time + flight_duration + time_difference) % 24\n\n    return arrival_time\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 2):\n        N, O = perm\n        if N != 0:  # N should not be 0 as it is a two-digit number\n            NO = 10 * N + O\n            ON = 10 * O + N\n            if 2 * NO == ON:\n                return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum(50 - i if i % 2 == 0 else -(50 - i) for i in range(0, 18, 2))\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # Using the Pigeonhole principle\n    # There are 3 different colors, so she needs to get one from each color plus one to guarantee a pair.\n    socks_needed = 3 + 1\n    return socks_needed\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kilograms = 2.5\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5\n    distance_on_map_cm = 12\n\n    distance_on_ground_km = distance_on_map_cm * scale_ratio\n\n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    ans = 1\n    for i in range(2, 51):\n        ans *= (1/i - 1/(100-i+1))\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    boys, girls = symbols('boys girls')\n\n    # Given that 3/8 of the children in the classroom were boys\n    total_children = boys + girls\n    equation1 = Eq(boys, 3 / 8 * total_children)\n\n    # Each boy took 4 sweets and each girl took 12 sweets, with a total of 360 sweets given out\n    equation2 = Eq(4 * boys + 12 * girls, 360)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # We need to find the number of girls\n    return solutions[girls]\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_km_per_hr = 7.2\n    time_seconds = 24\n\n    # Convert speed to meters per second (1 km/hr = 1000 m / 3600 s)\n    speed_m_per_s = speed_km_per_hr * (1000 / 3600)\n\n    # Calculate distance traveled in meters\n    distance_meters = speed_m_per_s * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # The statement by Pip can be checked by considering edge cases.\n    # Pip says every positive integer that is not a prime is a composite.\n    # This will be true except for the number 1 which is neither prime nor composite.\n    # A composite number is defined as a positive integer that has at least one positive divisor other than one and itself.\n    # Since 1 does not meet the definition of a composite number, Pip's statement is not entirely correct.\n    # To check if 1 is composite, we try to factorize it\n    # 1 has no positive divisors other than itself. Hence, it is not a composite number.\n    \n    is_pip_correct = not (1>0 and len([i for i in range(1,1+1) if 1 % i == 0]) > 2)\n    \n    return is_pip_correct\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n\n    both_classes = math_students + language_students - total_students\n    only_math_students = math_students - both_classes\n\n    return only_math_students\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (i + 1) / i\n    return product\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the number as n\n    n = symbols('n')\n    # Since the number gives a remainder of 5 when divided by 7, 6 when divided by 8,\n    # and 6 when divided by 10, we can write the number as:\n    # n = 7q1 + 5\n    # n = 8q2 + 6 \n    # n = 10q3 + 6 -> we infer from here that n = 10q3' + 6 (n is even and the remainder when divided by 8 is 6)\n\n    # q1, q2 are the quotients when n is divided by 7 and 8, respectively\n    \n    # According to Chinese remainder theorem, we find a number which satisfies all above conditions.\n    # n % 7 = 5\n    # n % 8 = 6\n    # n % 10 = 6 and n is even (n = 10q3' + 6)\n    # To satisfy n%10 = 6, n should end with 6, to satisfy n%8 = 6, the last three digits of n should\n    # be in [016, 056, 096, 136, 176, 216, 256, 296, 336, 376, 416, 456, 496, 536, 576, 616, 656, 696, 736, 776, 816, 856, 896, 936, 976]\n    # n should be n=70k+5\n    # therefore k should satisfy (70k+5)%8=6 which means k%8=3 (acceptable k are in [3, 11, 19,...])\n\n    # The sum of the quotients (q1+q2+q3') when divided by 6, 7, 8 is 265 (q3' not q3 here because n=10q3'+6)\n    # We can write n as:\n    # n = 6*(265 - q1 - q2) + 6\n\n    # Let's set up the equations:\n    equations = [\n        Eq(n % 7, 5),\n        Eq(n % 8, 6),\n        Eq(n % 10, 6),\n        Eq(n, 6 * (265 - (n - 5) / 7 - (n - 6) / 8) + 6)\n    ]\n\n    # Solve the system of congruences for n\n    solution = solve(equations, n)\n    # Return the number as an integer\n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1,12):\n        for x2 in range(1,12):\n            for x3 in range(1,12):\n                for x4 in range(1,12):\n                    if x1 + x2 + x3 + x4 == 12 and len(set([x1,x2,x3,x4])) == 4:\n                        count += 1\n    return count // 24  # Divide by 24 (4!) to correct for overcounting permutations of groups\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num - 40309\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    n = 0\n    while True:\n        boys = (2 * n + 1) ** 2  # Total number of boys for a square of size n\n        girls = n ** 2  # Total number of girls for the square inside the boys' layer\n        diff = boys - girls\n        if diff == 52:\n            total_students = boys + girls\n            return total_students\n        n += 1\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let's say granddad's weekly pension is 1 (representing the whole pension)\n\n    # On Friday night, he spends one quarter of his pension\n    friday_night_spend = 1 / 4\n\n    # The remaining pension after Friday night\n    remaining_after_friday = 1 - friday_night_spend\n\n    # On Saturday night, he spends one third of what remains\n    saturday_night_spend = remaining_after_friday / 3\n\n    # The remaining pension after Saturday night\n    remaining_after_saturday = remaining_after_friday - saturday_night_spend\n\n    # The fraction of his weekend pension left for him to spend during the rest of the week\n    remaining_for_week = remaining_after_saturday\n\n    # Returning the final answer\n    return remaining_for_week\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the volume of water needed to fill the fish tank.\n    # If using a 5-litre pail, 4 litres will overflow, so the tank can hold 5 - 4 litres.\n    # If using a 3-litre pail, he needs 4 more pails, so the useful volume of pails \n    # required to fill the tank would be the volume of 5 pails (1 already accounted for + 4 more)\n    \n    # Equation representing 5-litre pail scenario: x + 4 = 5\n    # Equation representing 3-litre pail scenario: x = 3 * 5\n    \n    # Solving these two equations:\n    x_with_5_litre_pail = 5 - 4  # 5-litre pail scenario\n    x_with_3_litre_pail = 3 * 5  # 3-litre pail scenario\n    \n    # Both scenarios should have the same volume to fill the tank\n    assert x_with_5_litre_pail == x_with_3_litre_pail\n    \n    return x_with_3_litre_pail  # This will return the volume of water needed\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n\n    combinations = num_school_bags * num_pencil_boxes\n\n    return combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n\n    initial_ratio = Eq(apples/pears, 3/4)\n    new_ratio = Eq((apples + 36)/(pears - 36), 3/2)\n\n    solutions = solve((initial_ratio, new_ratio), (apples, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Creating symbols for adults and children\n    adults, children = symbols('adults children')\n    \n    # Creating equation based on the total number of people and the ratio 1:4\n    equation1 = Eq(adults + children, 20)\n    equation2 = Eq(adults / children, 1/4)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # We are looking for the number x of soldiers that were initially in the square array.\n    # After adding 31 soldiers, there were x + 31 soldiers total.\n    # Let the side of the original square be n, then x = n*n.\n    # After adding a row and a column, the new square has a side of n+1, then the total soldiers = (n+1)*(n+1).\n    # We have the equation: n*n + 31 = (n+1)*(n+1)\n    # Expanding the equation: n*n + 31 = n*n + 2*n + 1\n    # Subtract n*n from both sides: 31 = 2*n + 1\n    # Subtract 1 from both sides: 30 = 2*n\n    # Divide by 2 to find n: n = 15\n    # Now add the 31 soldiers to the original square's number of soldiers: 15*15 + 31\n    ans = 15*15 + 31\n    return ans\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    # One willow tree is planted between every two ginkgo trees,\n    # so the number of willow trees will be one less than the number of ginkgo trees\n    willow_trees = ginkgo_trees - 1\n    return willow_trees\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    # The repeating decimal part is \"6129043\", which has 7 digits\n    repeating_sequence = \"6129043\"\n    sequence_length = len(repeating_sequence)\n\n    # We only need the sum of the first 212 digits in the decimal part\n    digits_needed = 212\n\n    # Calculate the full cycles of the repeating sequence and the remaining digits\n    full_cycles = digits_needed // sequence_length\n    remaining_digits = digits_needed % sequence_length\n\n    # Compute the sum of digits for full cycles\n    sum_of_full_cycles = sum(map(int, repeating_sequence)) * full_cycles\n\n    # Compute the sum of the remaining digits\n    sum_of_remaining_digits = sum(map(int, repeating_sequence[:remaining_digits]))\n\n    # The sum of the first 212 digits is sum of both computations\n    return sum_of_full_cycles + sum_of_remaining_digits\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kasia_keeps = 13\n    shared_sweets = (total_sweets - kasia_keeps) // 2\n    sweets_joan_gets = (2/7) * shared_sweets\n    lucie_keeps = shared_sweets - sweets_joan_gets\n\n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    percentage = 36\n    total = 50\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    n = 1\n    zeroes = 0\n    while zeroes < 28:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            temp_n //= 5\n            zeroes += 1\n    return n - 1\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    total_amount = 729\n    fraction = 2 / 3\n    ans = total_amount * fraction\n    return ans\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    people = 12\n    handshakes = people * (people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Daniel needs the minimum number of socks picked to guarantee two pairs.\n    # Since the green and white socks are identical, they are counted as one for each pair.\n    \n    # For worst case scenario, Daniel picks one of each type without getting a pair,\n    # i.e., 1 yellow, 1 green, 1 white, 1 red, 1 black = 5 socks.\n    # Next, he picks a second of any color except red or black to avoid a pair (2nd green or white).\n    # Then pick a third same type to avoid a pair (3rd green or white).\n    # Now, no matter what Daniel picks, he will get a pair since he has three of green or white.\n    \n    # To get the second pair, he could pick another three without making a pair (2 yellow, 1 green or white).\n    # The next pick will surely give him the second pair since there are no more colors left.\n    \n    # Total socks = initial 5 + 2 to make a 3rd green/white + 3 to possibly get 2nd yellow without a pair + 1 for the guaranteed pair\n    return 5 + 2 + 3 + 1\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_cost = 5 * 1.09\n    chocolate_bar_cost = 6 * 0.55\n    total_cost = lemonade_cost + chocolate_bar_cost\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let sam be Sam's current age\n    sam = symbols('sam')\n\n    # Equation: sam + 4 (Sam's age in 4 years) = 2 * (sam - 4) (twice Sam's age 4 years ago)\n    equation = Eq(sam + 4, 2 * (sam - 4))\n    \n    # Solve for sam\n    sam_age = solve(equation, sam)\n\n    # Get the solution\n    return sam_age[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # total letters in the word 'RAINBOW'\n    num_vowels = 3     # vowels are A, I, O\n    num_consonants = total_letters - num_vowels\n\n    # Ways to arrange consonants\n    consonant_arrangements = factorial(num_consonants)\n\n    # Total arrangements\n    total_arrangements = factorial(total_letters)\n\n    # Ways to place the vowels together\n    vowels_together = factorial(num_vowels) * (num_consonants + 1)\n\n    # Deduct the arrangements where vowels are together from the total arrangements\n    ans = total_arrangements - vowels_together * consonant_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '3728'\n    perm = permutations(digits)\n    odd_numbers = [int(''.join(p)) for p in perm if int(p[-1]) % 2 != 0]\n    smallest_odd = min(odd_numbers)\n    return smallest_odd\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # sum of first n terms of an arithmetic progression: S_n = n/2 * (2a + (n - 1)d)\n    # where S_n is the sum, n is the number of terms, a is the first term, and d is the common difference\n    # S_10 = 20 => 10/2 * (2a + (10 - 1)d) = 20\n    # S_30 = 90 => 30/2 * (2a + (30 - 1)d) = 90\n\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # a is the first term, d is the common difference\n\n    # set up equations based on the given sums\n    equation1 = Eq(10/2 * (2*a + 9*d), 20)\n    equation2 = Eq(30/2 * (2*a + 29*d), 90)\n\n    # solve the system of equations for a and d\n    solutions = solve((equation1, equation2), (a, d))\n    # get the common difference\n    common_difference = solutions[d]\n    \n    return common_difference\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    # Find multiples of 4 between 10 and 20\n    multiples_of_4 = [i for i in range(10, 21) if i % 4 == 0]\n\n    # Find factors of 36\n    factors_of_36 = [i for i in range(1, 37) if 36 % i == 0]\n\n    # Find the common number that is a multiple of 4 between 10 and 20 and also a factor of 36\n    ans = [i for i in multiples_of_4 if i in factors_of_36]\n\n    return ans[0]\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    ans = 3.462 / 0.3\n    return ans\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of chickens, goats, and cows\n    chickens, goats, cows = symbols('chickens goats cows')\n    \n    # Ronald McDonald has 40 chickens and goats combined\n    equation1 = Eq(chickens + goats, 40)\n    \n    # 3 times the number of his chickens is 5 times the number of his cows\n    equation2 = Eq(3 * chickens, 5 * cows)\n    \n    # 2 times the number of goats is 10 times the number of his cows\n    equation3 = Eq(2 * goats, 10 * cows)\n    \n    # Solve the equations\n    solution = solve((equation1, equation2, equation3), (chickens, goats, cows))\n    \n    # Calculate the total number of animal feet\n    # Chickens have 2 feet, goats have 4 feet, and cows have 4 feet\n    total_feet = (solution[chickens] * 2) + (solution[goats] * 4) + (solution[cows] * 4)\n    \n    return total_feet\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    # Let x represent the number of stickers Penny has\n    # According to the ratio Amy has 5/4 times the stickers Penny has\n    # So the combined number of stickers is x + 5x/4 = 117\n    # This simplifies to 9x/4 = 117\n    # Solving for x gives us x = (117 * 4) / 9\n\n    x = (117 * 4) / 9\n    return int(x)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151): # Starts from 1 as page 0 is typically not counted\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    total_words_in_6_days = words_in_9_minutes * days\n\n    return total_words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_in_kph = 3.6  # speed in kilometers per hour\n    time_in_seconds = 300  # time in seconds\n\n    # Convert speed to meters per second (1 km/h = 1000 m/3600 s)\n    speed_in_mps = speed_in_kph * (1000 / 3600)\n\n    # Calculate distance walked in meters\n    distance_walked = speed_in_mps * time_in_seconds\n\n    return distance_walked\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_apples = symbols('total_apples')\n    \n    # Equation: 40 = (4/7) * (1/2) * total_apples\n    equation = Eq(40, (4/7) * (1/2) * total_apples)\n    \n    # Solve the equation to find the total number of apples Jack has\n    solution = solve(equation, total_apples)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Using the information given in the question, we can set up equations\n    # Let the four numbers be a, b, c, d\n    # The average of the first 2 numbers (a and b) is 10: (a + b) / 2 = 10\n    # The average of the last 2 numbers (c and d) is 22: (c + d) / 2 = 22\n    # The average of the first and last numbers (a and d) is 14: (a + d) / 2 = 14\n    \n    # From the first equation, we have a + b = 20\n    # From the second equation, we have c + d = 44\n    # From the third equation, we have a + d = 28\n    \n    # Subtract the third equation from the sum of first and second equations\n    # (a+b) + (c+d) - (a+d) = (20 + 44) - 28\n    # Which simplifies to b + c = 36\n    # Therefore, the average of the two middle numbers (b and c) is:\n    # (b + c) / 2 = 36 / 2 = 18\n    return 18\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    permuted_numbers = [int(''.join(p)) for p in permutations(digits)]\n    closest_number = min(permuted_numbers, key=lambda x: abs(x - 2978))\n    return closest_number\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    # Applying the formula: 1 + (n choose 2) + (n choose 3) + (n choose 4)\n    # to calculate the number of regions created by n lines\n    from math import comb\n    n = 10\n    regions = 1\n    for i in range(2, 5):\n        regions += comb(n, i)\n    return regions\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1)d\n    # Here, a_n is the last term (80), a_1 is the first term (48), and d is the difference (4)\n    num_rows = ((last_term - first_term) / difference) + 1  # Number of rows\n\n    # Calculate the sum of an arithmetic series using the formula: S_n = n/2 * (a_1 + a_n)\n    total_seats = num_rows / 2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for i in range(200, 501):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    # Prime factorization of 7007 to find the two 2-digit multiples of 7\n    factors = []\n    n = 7007\n    for i in range(2, 100):\n        while n % i == 0 and i % 7 == 0 and n != i:  # Ensure we get two distinct factors\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    # Sum up the two 2-digit multiples of 7\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    original_number = (result + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_AB = 22\n    C = 19\n    \n    # Calculate the sum of A and B from the average\n    sum_AB = 2 * average_AB\n    \n    # Add C to the sum of A and B to get the sum of A, B, and C\n    sum_ABC = sum_AB + C\n    \n    # The average of A, B, and C is the sum of A, B, and C divided by 3\n    average_ABC = sum_ABC / 3\n    \n    return average_ABC\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let a, b, c represent the total ages of Chinese, English, and Mathematics teachers respectively.\n    # Let n represent the total number of teachers for each subject (assuming it's the same).\n    # Therefore, we have the following equations based on the average ages provided:\n    # (a + b) / (2n) = 34 => a + b = 68n\n    # (b + c) / (2n) = 36 => b + c = 72n\n    # (a + c) / (2n) = 44 => a + c = 88n\n    # Adding all three equations, we get:\n    # (a + b) + (b + c) + (a + c) = 68n + 72n + 88n\n    # Simplifying, we get:\n    # 2 * (a + b + c) = 228n\n    # Thus the sum of ages of all teachers (a + b + c) equals 114n.\n\n    # To find the average age of the 3 teachers,\n    # we divide this sum by 3n (number of teachers of all three subjects).\n    # average_age = (a + b + c) / 3n = 114n / 3n = 38.\n\n    average_age = 38\n    return average_age\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    birth_year = 1533\n    death_year = 1603\n    \n    birth_month = 9  # September\n    death_month = 3  # March\n    \n    birth_day = 7\n    death_day = 24\n    \n    age_years = death_year - birth_year\n    if death_month < birth_month or (death_month == birth_month and death_day < birth_day):\n        age_years -= 1  # Adjust age if she didn't have her birthday in the year she died\n\n    return age_years\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    \n    remainder = total_coins % children\n    \n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    # Using the Pigeonhole Principle, we divide the cakes among the layers\n    # and add one to ensure that at least one layer has more cakes than a simple division.\n    most_cakes = (total_cakes // layers) + (1 if total_cakes % layers > 0 else 0)\n    return most_cakes\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side = int(23**0.5)  # Find the largest whole number that is a square root smaller than the length\n    square_perimeter = max_side * 4  # Calculate the perimeter of the largest possible square\n    cut_length = 23 - square_perimeter  # Calculate the length that needs to be cut\n    return cut_length\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    part1 = (21 + 1) * 7\n    part2 = 20 + (1 * 7)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    sum_frac_part = 0\n    for i in range(1, 2019):\n        sum_frac_part += (2018 + i) / 5 - ((2018 + i) // 5)\n    return sum_frac_part\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    total_boxes = 10\n    first_term = 11\n    total_cookies = 425\n    \n    # Using the formula for the sum of an arithmetic series: n/2 * (2a + (n - 1)d) = S\n    # Here n = total_boxes, a = first_term, S = total_cookies, and we are solving for d.\n    # Simplifying the equation: total_boxes * (2 * first_term + (total_boxes - 1)d) = 2 * total_cookies\n\n    # Let's solve for d\n    last_term = 2 * total_cookies / total_boxes - 2 * first_term  # From the simplified equation, solving for the last term\n    difference = (last_term - first_term) / (total_boxes - 1)  # Now we can find the common difference\n\n    return int(difference)\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(benson - chelsia, 18)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n    \n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Let x be the smallest odd number of the seven consecutive odd numbers\n    # Then the numbers can be represented as x, x+2, x+4, ..., x+12\n\n    # The sum of these numbers is 7*x + 2+4+6+8+10+12 = 7*x + 42\n    # We know that the sum of these numbers is 357\n    # Therefore, 7*x + 42 = 357\n    # Solving this equation for x gives us the smallest number\n\n    x = (357 - 42) // 7\n    return x\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    count_1 = 2\n    count_2 = 1\n    count_3 = 1\n    count_4 = 1\n\n    ways = factorial(total_digits) // (factorial(count_1) * factorial(count_2) * factorial(count_3) * factorial(count_4))\n    return ways\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1 / i for i in range(1995, 2009))\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n\n    # Establishing the ratio of their speeds considering Martin is faster\n    equation = Eq(martin_speed / carter_speed, 13 / 9)\n    \n    # Martin's speed is 20 m/min faster than Carter's\n    speed_difference = Eq(martin_speed - carter_speed, 20)\n\n    # Solving the equations to find Carter's speed\n    solutions = solve((equation, speed_difference), (martin_speed, carter_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13 - x1):\n            x3 = 13 - (x1 + x2)\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are looking for a number such that:\n    # num % 5 = 1, num % 6 = 1, num % 7 = 1.\n    # These can be represented as congruences:\n    # num ≡ 1 (mod 5)\n    # num ≡ 1 (mod 6)\n    # num ≡ 1 (mod 7)\n    \n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Using the Chinese Remainder Theorem to solve the congruences.\n    num, _ = solve_congruence(*congruences)\n    \n    return num\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # Since 2 is the only even prime number, we'll return it directly.\n    return 2\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Fred and George's combined rate is 1 room / 6 hours\n    combined_rate = 1 / 6\n    # Fred's individual rate is 1 room / 9 hours\n    fred_rate = 1 / 9\n\n    # Since rates are additive, George's rate is the combined rate minus Fred's rate\n    george_rate = combined_rate - fred_rate\n\n    # George's time to paint the room on his own is the reciprocal of his rate\n    george_time = 1 / george_rate\n\n    return george_time\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    total_cloth = 18\n    cloth_left = total_cloth - x\n    return cloth_left\n\nans = solution(x) # replace 'x' with the actual number of meters used for the dress when calling the function"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction(3) / Fraction(1, 3)\n    return ans\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # The worst case scenario: we pick the apples of each color alternately.\n    # After 14 red apples, we will have at most 14 yellow apples without violating the condition.\n    # The next apple we pick must be either red or yellow.\n    # Thus, after these 28 picks, the 29th apple must be the same color as one we've already picked.\n    \n    ans = 14 + 14 + 1  # 14 red, 14 yellow, and 1 more to ensure the same color\n    return ans\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for cats, dogs and rabbit\n    legs_cats = 4 * 2\n    legs_dogs = 4 * 2\n    legs_rabbit = 4\n\n    # Total legs for cats, dogs and rabbit\n    legs_known_pets = legs_cats + legs_dogs + legs_rabbit\n\n    # Since birds have 2 legs, let's subtract the known legs from the total\n    # The remaining legs will be twice the number of birds\n    legs_birds = 28 - legs_known_pets\n\n    # Calculate the number of birds\n    num_birds = legs_birds // 2\n\n    return num_birds\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "from math import factorial\n\ndef solution():\n    total_entrances = 5\n    people = 4\n    # Since order matters (the order in which they enter the zoo is uncertain),\n    # and they can choose the same entrance or different ones, we use permutations with repetition\n    # which is given by total_entrances ** people.\n    ways = total_entrances ** people\n    return ways\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let x be the number of red pens sold\n    # Since 20 red pens were left, there were 20 + x red pens initially\n    # The ratio after selling x pens is 5:13 for red:black pens\n    # The initial ratio was 3:7 for red:black pens\n    # Therefore, the number of initial black pens is 7/3 times the initial red pens\n    # After selling x black pens as well, the ratio is adjusted to 5:13\n    # Hence we can set up the equation as follows:\n    # (20 + x) / (7/3 * (20 + x) - x) = 5 / 13\n    \n    # Solving for x:\n    # (20 + x) * 13 = 5 * (7/3 * (20 + x) - x)\n    # 260 + 13x = 5 * (140/3 + 7x/3 - x)\n    # 260 + 13x = 700/3 + 35x/3 - 5x\n    # 780 + 39x = 700 + 35x - 15x\n    # 4x = 80\n    # x = 20\n    \n    # The number of red pens sold was the same as the number left, which is 20\n    return 20\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    return 2.42 * 1.6\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Value of the house after the first year increase by 5%\n    value_after_first_year = 10500\n\n    # Original value of the house before the first year increase\n    original_value = value_after_first_year / 1.05\n\n    # Value of the house after losing 5% in the second year\n    value_after_second_year = value_after_first_year * (1 - 0.05)\n\n    # Calculate the profit or loss comparing with the original price\n    profit_or_loss = value_after_second_year - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_by_5 = 200 // 5\n    count_by_7 = 200 // 7\n    count_by_35 = 200 // (5 * 7)\n    \n    ans = count_by_5 + count_by_7 - count_by_35\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n   factors_of_42 = [i for i in range(11, 20) if 42 % i == 0]\n   return factors_of_42[0] if factors_of_42 else None\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    average = 6\n    total_numbers = 4\n    total_sum = average * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen_price, ruler_price = symbols('pen_price ruler_price')\n    \n    # Equation 1: 2 rulers and 9 pens cost $21.60\n    equation1 = Eq(2 * ruler_price + 9 * pen_price, 21.60)\n    \n    # Equation 2: A ruler costs $0.90 more than a pen\n    equation2 = Eq(ruler_price, pen_price + 0.90)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (pen_price, ruler_price))\n    \n    return solutions[ruler_price]\n    \nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = total_weight / bag_weight\n    return -(-total_weight // bag_weight)  # Ceiling division to ensure enough bags\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    final_result = result + 50  # Reverse step 8\n    \n    day_of_birth = final_result % 100  # Reverse step 7\n    month_steps = (final_result - day_of_birth) // 100  # Continue reversing step 7\n    \n    month_steps = month_steps // 5 + 20  # Reverse step 6 and 5\n    month_steps = month_steps // 5 - 6  # Reverse step 4 and 3\n    month_of_birth = month_steps // 4  # Reverse step 2\n    \n    return (month_of_birth, day_of_birth)\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    for num in range(1, 50):\n        if num % 3 == 2 and num % 5 == 2 and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for perm in permutations(digits):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n    return None\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n    # Total terms in the sequence 4+8+...+400\n    num_terms = ((last_term - first_term) // difference) + 1\n    # Sum of the sequence 4+8+...+400\n    sum_forward_sequence = (num_terms * (first_term + last_term)) // 2\n    # The sequence 396+...+8+4 is the same as 4+8+...+396, so we can calculate it in the same way\n    last_term_backward = 396\n    num_terms_backward = ((last_term_backward - first_term) // difference) + 1\n    sum_backward_sequence = (num_terms_backward * (first_term + last_term_backward)) // 2\n    # Sum of both sequences\n    sum_total = sum_forward_sequence + sum_backward_sequence\n    return sum_total\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_price = 5\n    refill_price = 1\n    total_money = 10\n\n    if total_money < initial_price:\n        return 0\n    else:\n        total_money -= initial_price\n        refills = total_money // refill_price\n        return 1 + refills\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # 3 monkeys eat 96 peaches in 2 days\n    # Calculate how many peaches one monkey eats per day\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    \n    # 5 monkeys eat for 4 days\n    # Calculate total peaches eaten by 5 monkeys in 4 days\n    total_peaches = peaches_per_monkey_per_day * 5 * 4\n    \n    return int(total_peaches)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # Calculate permutations of the book groups (story, comic, science)\n    group_permutations = factorial(3)\n\n    # Permutations within each book group\n    story_permutations = factorial(2)\n    comic_permutations = factorial(3)\n    science_permutations = factorial(4)\n    \n    # Combine permutations\n    total_permutations = group_permutations * story_permutations * comic_permutations * science_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    tax_base = 0.06 * 50000\n    tax_additional_rate = 0.06 + T / 100\n    tax_additional = tax_additional_rate * (income - 50000)\n    total_tax = tax_base + tax_additional\n\n    equation = Eq(total_tax, 10000)\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # We are looking for the number of ways to distribute 5 identical ice-creams to three friends\n    # with each getting at least one ice-cream.\n    # If each of them gets at least one ice-cream, we have 5 - 3 = 2 ice-creams remaining to distribute.\n    remaining_ice_creams = 5 - 3\n    \n    # With 2 identical items to distribute to 3 people, this is a problem of distributing \n    # identical items into distinct boxes, which can be solved using the \"stars and bars\" method.\n    # We can represent the problem as follows:\n    # _ * _ * _ where there are 2 \"stars\" (remaining ice-creams) to place among 3 \"bars\" (friends)\n    # which create 2 bars + 2 stars - 1 choices (since we cannot place at the ends)\n    \n    # The number of ways to do this distribution is given by the combinatorial formula:\n    # (n + k - 1) choose k = (k + n - 1)! / (k! * (n - 1)!)\n    # where n is the number of remaining ice-creams and k is the number of friends\n\n    # We can use the factorial function from math library for calculation\n    from math import factorial as fact\n    \n    ways = fact(remaining_ice_creams + 3 - 1) // (fact(remaining_ice_creams) * fact(3 - 1))\n    return ways\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Calculate the total spent from January to March\n    jan_to_mar = 450 * 3\n    # Calculate the total spent from April to July\n    apr_to_jul = 350 * 4\n    # The total spent from August to October is given\n    aug_to_oct = 1250\n    # Calculate the total spent from November to December\n    nov_to_dec = 400 * 2\n    \n    # Calculate the total spending for the entire year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Calculate the average spent per month from January to December\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # m/min\n    cycling_speed = 60  # m/min\n\n    # Let's assume the distance to the library is d meters.\n    # Time taken to walk to the library: d / walking_speed\n    # Time taken to cycle back from the library: d / cycling_speed\n    # Total distance covered: 2d meters (to the library and back)\n    # Total time taken: d/walking_speed + d/cycling_speed\n    # Average speed formula: total distance / total time\n    average_speed = (2 * d) / (d/walking_speed + d/cycling_speed)\n\n    # Simplify the average speed expression:\n    # average_speed = (2 * d) / (d/40 + d/60)\n    # average_speed = (2 * d) / (d*(1/40 + 1/60))\n    # average_speed = (2 * d) / (d*(3/120 + 2/120))\n    # average_speed = (2 * d) / (d*(5/120))\n    # average_speed = (2 * d) * (120/5d)\n    # average_speed = (240/5)\n    average_speed = 240 / 5\n\n    return average_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let's denote x as the price of one serving of ice cream.\n    # We can set up equations based on the information given:\n    # If Sophie wanted to buy 5 servings, she was short of $2.30: 5x = money_given + 2.30\n    # When buying 3 servings, she had $0.30 left: 3x = money_given - 0.30\n    # We can solve these two equations to find x and money_given.\n\n    # We have two equations:\n    # 1. 5x - money_given = 2.30\n    # 2. 3x - money_given = -0.30\n\n    # Rearrange equation 1. and 2. to find the difference:\n    # (5x - 2.3) - (3x + 0.3) = 0\n    # 2x - 2.6 = 0\n    # x = 2.6 / 2\n    # x = 1.3 (price of one serving of ice cream)\n\n    # Substitute the value of x into equation 2. to find money_given:\n    # 3 * 1.3 - money_given = -0.30\n    # 3.9 - money_given = -0.30\n    # money_given = 3.9 + 0.30\n    # money_given = 4.20\n\n    x = (2.30 + 0.30) / 2  # Price per ice cream\n    money_given = (3 * x) - 0.30\n\n    return money_given\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    total_bags = 25\n\n    for M in range(10):\n        total_sweets = int('127' + str(M))\n        if total_sweets % total_bags == 0:\n            return total_sweets // total_bags\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9/x, y/2)\n    \n    # Solve for the relationship between x and y\n    relationship = solve(equation, y)[0]\n    \n    # Find the value of y when x=3\n    y_value = relationship.subs(x, 3)\n    \n    return relationship, y_value\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['2', '3', '5', '6']\n    min_odd_number = float('inf')\n    \n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 != 0 and num < min_odd_number:\n            min_odd_number = num\n            \n    return min_odd_number\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    ans = 391 // 17\n    return ans\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # If we take out one green and one blue, there's no guarantee of having two of the same color.\n    # However, if we take out three balls, we're sure to have at least two of the same color.\n    # Because in the worst-case scenario, we'll have one ball of each color after the first two draws,\n    # and the third draw will definitely result in two balls of the same color.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Define the initial symbol for the number we are thinking of\n    from sympy import Symbol\n\n    x = Symbol('x')\n    \n    # Follow the operations in order\n    result = x\n    result = result + 3\n    result = result * 2\n    result = result - 2\n    result = result + 10\n    result = result / 2\n    result = result - x\n    \n    # Simplify the expression to find the number that is left; this should be independent of x\n    ans = result.simplify()\n    \n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from fractions import Fraction\n\n    # Janice originally had 96 bracelets.\n    janice_bracelets = 96\n\n    # After selling and buying transactions, the ratio becomes 5:7,\n    # so we can represent Felicia's and Janice's bracelets in terms of x.\n    # Felicia's bracelets are 5x and Janice's are 7x.\n    # We also know that after selling 3/5 of her bracelets, Felicia has 2/5 left.\n    # Hence, if Felicia originally had F bracelets, she now has 2/5*F.\n    # Janice bought 2/5 of what Felicia sold, thus she bought 2/5*3/5*F.\n\n    # Using the ratio, we set up an equation: 5x = 2/5*F and 7x = 96 + 3/5*2/5*F.\n    # Since the ratios are equal, we can equate them, so 5x/7x = (2/5*F) / (96 + 3/5*2/5*F).\n    # We can simplify by multiplying both sides by 7x*(96 + 3/5*2/5*F) and then simplify further.\n\n    # Let x be the common ratio used in the 5x:7x representation.\n    x = janice_bracelets / 7\n\n    # F, Felicia's original bracelet count is then represented as:\n    felicia_bracelets = (5 * x) / (2 / 5)\n\n    # The number of bracelets Janice bought from Felicia is:\n    bracelets_bought = Fraction(3, 5) * Fraction(2, 5) * felicia_bracelets\n\n    return bracelets_bought\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    # Number of books and their individual prices\n    num_science_fictions = 20\n    price_science_fictions = 4\n    num_comic_books = 10\n    price_comic_books = 5\n    num_novels = 20\n    price_novels = 6\n\n    # Calculate total cost of each type of book\n    total_cost_science_fictions = num_science_fictions * price_science_fictions\n    total_cost_comic_books = num_comic_books * price_comic_books\n    total_cost_novels = num_novels * price_novels\n\n    # Calculate the total cost and the total number of books\n    total_cost = total_cost_science_fictions + total_cost_comic_books + total_cost_novels\n    total_books = num_science_fictions + num_comic_books + num_novels\n\n    # Calculate the average cost per book\n    average_cost = total_cost / total_books\n\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n    \n    # primerange generates a list of all prime numbers in the range [a, b)\n    prime_nums = list(primerange(50, 100))\n    return len(prime_nums)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    total_three_digit_numbers = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            total_three_digit_numbers += 1\n    return total_three_digit_numbers\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    # Equation 1: initially, Jack had 5 times as much money as Kyle\n    equation1 = Eq(jack, 5 * kyle)\n\n    # Equation 2: after losing $72, Kyle had 2/7 as much money as Jack\n    equation2 = Eq(kyle, 2/7 * (jack - 72))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Annabella must take out all orange, pink and brown shirts to ensure she gets 1 yellow shirt for sure\n    num_shirts = 6 + 4 + 12 + 1\n    return num_shirts\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 35 * 15 / 100  # convert pence to pounds\n    savings = individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate_of_interest = 0.05\n    time = 11\n    # Simple interest formula\n    amount = principal * (1 + rate_of_interest * time)\n    return amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) / (1/4)\n\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20  # number of terms\n    S = 560  # sum of all terms\n    d = 2  # common difference\n    \n    # Using the formula for the sum of an arithmetic progression: S = n/2 * (2a + (n - 1) * d)\n    # where a is the first term, we can solve for a\n    \n    # Rearrange the sum formula to solve for the first term a\n    a = (S * 2 - n * (n - 1) * d) / (2 * n)\n    \n    return a\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    pages_first_4_days = 25 * 4\n    pages_next_6_days = 40 * 6\n    pages_last_5_days = 80\n    total_days = 4 + 6 + 5\n    total_pages = pages_first_4_days + pages_next_6_days + pages_last_5_days\n    average_pages = total_pages / total_days\n    return average_pages\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let x be the original number of brother's toys\n    # According to the problem, Penny has x + 10 toys originally\n    # After giving away some toys, Penny has 14 toys and brother has 12 toys\n    # So the difference between the toys Penny had originally and after giving away is the number of toys given\n\n    # Penny's toys after giving away - Penny's original toys = Brother's final toys - Brother's original toys\n    # 14 - (x + 10) = 12 - x\n    # Solving for x:\n    x = (14 - 10) - 12\n    \n    return -x\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate = 54\n    strawberry = chocolate + 12\n    vanilla = 3 * chocolate\n    total_cookies = chocolate + strawberry + vanilla\n    return total_cookies\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    depth = 8\n    climb_up = 3\n    slip_down = 2\n    net_climb = climb_up - slip_down\n    current_depth = depth\n    day = 0\n\n    while current_depth > climb_up:\n        current_depth -= net_climb\n        day += 1\n    day += 1  # The last day it climbs out without slipping back\n\n    return day\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    smallest_number = solve_congruence(*congruences)\n\n    return smallest_number[0]\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    return 123 * 321\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    # Loop through the possible ages of Alberta (from 10 to 99, since it's a two-digit number)\n    for age in range(10, 100):\n        # Find the digits of Alberta's age\n        tens_digit = age // 10\n        ones_digit = age % 10\n        \n        # Interchange the digits and add 1\n        interchanged_age = ones_digit * 10 + tens_digit + 1\n        \n        # Check if the interchanged age plus 1 is half of Alberta's present age\n        if interchanged_age == age / 2:\n            # Return the actual age of Alberta\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50  # The last term in the series\n    sum_series = (n * (n + 1)) // 2  # Sum of the series formula: n(n+1)/2\n    return sum_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # In the worst case scenario, Tom draws 3 cards from each of the 4 suits without getting 4 cards of the same suit.\n    # That's a total of 3 * 4 = 12 cards. \n    # The next card drawn (13th card) must be from one of the suits already with 3 cards, which makes 4 cards of the same suit.\n    cards_to_draw = 3 * 4 + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_sold = 60\n    tickets_remaining = 28\n    percent_remaining = 100 - percent_sold\n    \n    # Since the remaining tickets are 40% of the total, we find the total by:\n    total_tickets = (tickets_remaining * 100) / percent_remaining\n    \n    return int(total_tickets)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hayden, mitchell, spent = symbols('hayden mitchell spent')\n    original_hayden = 1420\n    original_mitchell = 505\n\n    equation1 = Eq(hayden, original_hayden - spent)\n    equation2 = Eq(mitchell, original_mitchell - spent)\n    equation3 = Eq(hayden, 4 * mitchell)\n\n    solutions = solve((equation1, equation2, equation3), (hayden, mitchell, spent))\n\n    return solutions[spent]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let x be the total number of people at the party\n    # According to the problem, (1 - 3/7)x are children, hence (4/7)x are children\n    # Out of the children, (1 - 3/8) children are girls, hence (5/8) of the children are girls\n    # We know that the number of girls is 45\n    # So, (5/8) * (4/7)x = 45\n    # Solve for x\n\n    # Calculate the fraction of the total that are girls\n    fraction_of_girls = (5/8) * (4/7)\n    \n    # Since 45 girls represent this fraction of the total, we can calculate the total number of people\n    total_people = 45 / fraction_of_girls\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    file_cost = 11.95\n\n    total_two_dollar_notes = two_dollar_notes * 2\n    total_fifty_cent_coins = fifty_cent_coins * 0.50\n\n    total_money = total_two_dollar_notes + total_fifty_cent_coins\n\n    money_left = total_money - file_cost\n\n    return money_left\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    net_distance_per_day = day_distance - night_distance\n    days = 0\n    distance_covered = 0\n\n    while distance_covered < total_distance:\n        days += 1\n        distance_covered += day_distance\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= night_distance\n\n    return days\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    n_pupils = 18\n    r_seats = 3\n\n    ans = permutations(n_pupils, r_seats)\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between = 2\n\n    total_willow_trees = (ginkgo_trees - 1) * willow_trees_between\n\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    return 10 - 2\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_still_water = 28\n    speed_current = 3\n    distance = 150\n\n    speed_upstream = speed_still_water - speed_current\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total_money = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n    # According to the problem, we have three equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    # If we sum all three equations, we get:\n    # 2 * (A + B + C) = 102 + 97 + 93\n    # A + B + C = (102 + 97 + 93) / 2\n\n    total_weight = (102 + 97 + 93) / 2\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n    return total_spent\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let \"a\" be the number of aircrafts Andy can sell per hour\n    a = symbols('a')\n\n    # Equation based on the number of aircrafts sold by Andy and Zack together in 6 hours\n    equation = Eq(6 * (a + 150), 1200)\n\n    # Solve for a\n    andy_rate = solve(equation, a)[0]\n\n    # Calculate the time it takes for Andy to sell all the aircrafts by himself\n    andy_time = 1200 / andy_rate\n\n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # Let n be the number of layers.\n    # For an array with n layers, there are (n*2-1)^2 people in total,\n    # and each layer alternates between students and teachers.\n    # The number of students will be (n^2) and teachers will be ((n-1)^2).\n    # The difference between students and teachers is given by n^2 - (n-1)^2 = 80.\n\n    n = 1\n    while True:\n        students = n * n\n        teachers = (n - 1) * (n - 1)\n        if students - teachers == 80:\n            break\n        n += 1\n\n    total_layers = 2 * n - 1\n    total_people = total_layers * total_layers\n    return total_people\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    alan_amount = 74\n    bilal_amount = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan_amount + bilal_amount + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n\n    orange_juice_volume = (orange_ratio / ratio_sum) * total_volume\n\n    return orange_juice_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    saved_daily = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    final_amount = original_amount + (saved_daily * days_saved) - lent_to_brother - spent_on_snacks\n\n    return final_amount\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the money they originally have as s for Steve, m for Mark, and r for Ryan.\n    s, m, r, cost = symbols('s m r cost')\n\n    # we have three scenarios with the following equations:\n    # Scenario 1: Steve pays\n    # (s - cost) / (m) / (r) = 3 / 8 / 9\n    # Scenario 2: Ryan pays\n    # (s) / (m) / (r - cost) = 5 / 4 / 1\n    # Scenario 3: Mark pays\n    # (s) / (m - cost) / (r) = 10 / 1 / 9\n\n    # Steve has $40 more than Mark\n    eq1 = Eq(s, m + 40)\n\n    # Write equations based on the scenarios\n    eq2 = Eq((s - cost) / m / r, 3 / 8 / 9)\n    eq3 = Eq(s / m / (r - cost), 5 / 4 / 1)\n    eq4 = Eq(s / (m - cost) / r, 10 / 1 / 9)\n\n    # Since ratios multiply all parts of a ratio by the same number should not change the ratio\n    eq2 = eq2.subs(m, 8 * m)\n    eq2 = eq2.subs(r, 9 * m)\n    eq3 = eq3.subs(s, 5 * m)\n    eq3 = eq3.subs(r, 1 * m)\n    eq4 = eq4.subs(s, 10 * m)\n    eq4 = eq4.subs(r, 9 * m)\n\n    # Multiply through by denominators to get rid of fractions\n    eq2 = Eq(3 * (s - cost), 8 * 9 * m)\n    eq3 = Eq(5 * (r - cost), 4 * m)\n    eq4 = Eq(10 * (m - cost), 1 * 9 * r)\n\n    # Substitute s from eq1 into eq4 and eq2\n    eq4 = eq4.subs(s, m + 40)\n    eq2 = eq2.subs(s, m + 40)\n\n    # Now we have a system of equations: eq2, eq3, eq4 and eq1\n    # We solve the system to find cost\n    solution = solve((eq1, eq2, eq3, eq4), (s, m, r, cost), dict=True)\n\n    # Extract the cost from the solution\n    cost_value = solution[0][cost]\n\n    return cost_value\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_to_mum = 10.50\n    remaining_money = total_money - money_to_mum\n    money_spent_on_magazines = remaining_money / 2\n    money_left = remaining_money - money_spent_on_magazines\n    return money_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    import sympy as sp\n\n    q = sp.symbols('q')\n    # Set up the equation 44000 / q = y ** 3, where y ** 3 is a cube number\n    y_cubed = sp.Rational(44000, q)\n    \n    # Iterate through all integers i to find the cube root of 44000 / q\n    for i in range(1, int(sp.root(44000, 3)) + 1):\n        # Check if i^3 is a factor of 44000\n        if 44000 % i ** 3 == 0:\n            possible_q = 44000 // i ** 3\n            # Check if possible_q is a valid solution:\n            if y_cubed.subs(q, possible_q) == i ** 3:\n                ans = possible_q\n                break\n\n    return ans\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    # Calculate the cost for the cheese per gram\n    cheese_cost_per_gram = 7.48 / 1000\n    cheese_cost = cheese_cost_per_gram * 500\n\n    # Calculate the total cost for the apples\n    apple_cost = 8 * 0.12\n\n    # Calculate the total cost for the yogurts\n    yogurt_cost = 2 * 0.46\n\n    # Total cost of all items\n    total_cost = cheese_cost + apple_cost + yogurt_cost\n\n    # Amount Jane has\n    jane_amount = 10\n\n    # Change Jane gets\n    change = jane_amount - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    length, width = symbols('length width')\n    equation1 = Eq(length, 2 * width)\n    equation2 = Eq(2 * (length + width), 72)\n\n    solutions = solve((equation1, equation2), (length, width))\n\n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    factor_count = 0\n    \n    for i in range(1, number + 1):\n        if number % i == 0:\n            factor_count += 1\n            \n    return factor_count\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    g = 9.81  # acceleration due to gravity in m/s^2\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    \n    # Force of static friction (Max value before movement): \n    # Fs_max = coefficient_of_static_friction * normal force\n    # The normal force (N) is equal to the gravitational force (mass * g) in this context\n    normal_force = mass * g\n    Fs_max = coefficient_of_static_friction * normal_force\n\n    # The force applied is 250 N. If this force is less than Fs_max, then \n    # the force of static friction will be equal to the force applied.\n    # Otherwise, it will be Fs_max.\n    if 250 <= Fs_max:\n        force_of_static_friction = 250\n    else:\n        force_of_static_friction = Fs_max\n    \n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Nick's solution\n    nick_salt = 300 * 0.12\n    # Nicole's solution\n    nicole_salt = 500 * 0.28\n    # Total salt\n    total_salt = nick_salt + nicole_salt\n    # Total solution weight\n    total_solution_weight = 300 + 500\n    # Concentration of the resulting solution\n    concentration = total_salt / total_solution_weight\n    \n    return concentration * 100  # Convert to percentage\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    n1 = 3\n    n2 = 15\n    a1 = 23\n    a15 = 155\n\n    common_difference = (a15 - a1) / (n2 - n1)\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    for nina_buttons in range(25):  # Nina can't have more than 24 buttons\n        james_buttons = 24 - nina_buttons  # Total buttons - Nina's buttons\n        if james_buttons < nina_buttons and nina_buttons - 6 == james_buttons + 6:\n            return nina_buttons\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    return ((11/30 - 9/20 + 7/12 - 1/3) * 6 * 7/13 * 9.1)\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = (total_parts / total_workers) / total_hours\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    # Initialize a variable to store the answer\n    ans = 0\n    # We start checking from 1, and incrementally check each number\n    i = 1\n    # We use a while loop to keep checking until we find the solution\n    while True:\n        # The cube of the current number\n        cube_number = i**3\n        # The square number will be one more than the cube number\n        square_number = cube_number + 1\n        # We check if the square number is indeed a perfect square\n        if (int(square_number**0.5))**2 == square_number:\n            # If it is a perfect square, we store it in ans and break the loop\n            ans = square_number\n            break\n        # Increment the counter to check the next number\n        i += 1\n    # Return the final answer\n    return ans\n\n# Call the solution function and store the result in 'ans'\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    daily_climb = 5\n    nightly_slide = 3\n    height_of_burrow = 16\n    total_climbed = 0\n    days = 0\n    \n    while total_climbed < height_of_burrow:\n        days += 1\n        total_climbed += daily_climb\n        if total_climbed >= height_of_burrow:\n            break\n        total_climbed -= nightly_slide\n\n    return days\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Assuming the equation mentioned is a simple linear relationship: y = mx + c\n    # where m is the slope (rate of change of tax with respect to number of bags)\n    # and c is the y-intercept (base tax charged when no bags are used)\n\n    # For the linear equation: y = mx + c, we don't have enough information to determine \n    # the values of m (slope) and c (y-intercept). But we can set up the equation with these variables.\n    \n    # So, let's arbitrarily set the slope (m) and y-intercept (c) as symbolic variables as we do not know them\n    from sympy import symbols, Eq\n\n    m, c = symbols('m c')\n    x, y = symbols('x y')  # x represents number of bags, y represents tax charged\n    \n    # Equation relating y and x\n    equation = Eq(y, m * x + c)\n\n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    frac = 8 / 100\n    num = 0.7\n\n    if frac > num:\n        ans = frac\n    else:\n        ans = num\n\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return float(result)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # Let's denote the weight of 1 dog as 'd', the weight of 1 rabbit as 'r', and the weight of 1 chicken as 'c'.\n    # From the problem statement, we have the following relationships:\n    # d = 8 * r (1 dog weighs as much as 8 rabbits)\n    # r = 2 * c (1 rabbit weighs as much as 2 chickens)\n    # We want to find how many chickens weigh as much as 1 dog, i.e. how many 'c' in 'd'.\n    # By substituting the value of 'r' from the second equation into the first, we get:\n    # d = 8 * (2 * c)\n    # Simplifying gives us the relationship between the weight of a dog and chickens:\n    # d = 16 * c\n    # Therefore, 16 chickens weigh as much as 1 dog.\n    return 16\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1 / i - 1 / (52 - i))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    bounce_height = initial_height * 0.10\n    total_distance = initial_height\n\n    while bounce_height > 0:\n        total_distance += 2 * bounce_height\n        bounce_height *= 0.10\n\n    return total_distance\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_paid = 275\n    flat_fee = 30\n    daily_fee_5_days_or_less = 25\n    daily_fee_after_5_days = 20\n    first_5_days_cost = 5 * daily_fee_5_days_or_less\n\n    if total_paid - flat_fee <= first_5_days_cost:\n        days = (total_paid - flat_fee) / daily_fee_5_days_or_less\n    else:\n        days = 5 + (total_paid - flat_fee - first_5_days_cost) / daily_fee_after_5_days\n\n    return int(days)\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    equation1 = Eq(green, yellow)\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    return solutions[green] - 60\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apples_percentage = 15\n    bad_apples = (bad_apples_percentage * total_apples) / 100\n    return bad_apples\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600     # Buck's speed in meters per minute\n    elephant_speed = 250 # Elephant's speed in meters per minute\n    race_distance = 3000 # Race distance in meters\n\n    # Time taken by buck to finish the race\n    buck_time = race_distance / buck_speed\n    # Time taken by elephant to finish the race\n    elephant_time = race_distance / elephant_speed\n\n    # Difference in time between buck's and elephant's finish\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n    # Number of terms in one side of the sequence\n    num_terms = ((last_term - first_term) / difference) + 1\n    # Sum of the arithmetic sequence for one side\n    sum_one_side = (num_terms / 2) * (first_term + last_term)\n    # Since the sequence is mirrored, we multiply by 2\n    final_sum = sum_one_side * 2\n    \n    # We must subtract the middle term as it has been counted twice\n    final_sum -= last_term\n\n    return int(final_sum)\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Since the sheets are all folded in half, there are two pages per sheet with numbers.\n    # We also know that the numbering will be sequential, and due to the fold:\n    # If the front has numbers a and b, the back will have numbers (a + 1) and (b - 1).\n\n    # We iterate through possible page numbers to find the correct sheet where the sum is 58.\n    for front_page_num in range(1, 58):\n        back_page_num = front_page_num + 1   # The next number due to sequential ordering.\n        # Calculating the numbers on the back, which should be opposite ends of the folded sheet.\n        back_other_side = 58 - (front_page_num + back_page_num)  \n        # The sum of front and back must give us the other two numbers, and because it's folded,\n        # we can deduce the front's other number must be one less than back's other side number.\n        front_other_side = back_other_side - 1  \n\n        # Now we need to verify that the numbers are indeed following the sequence of the pages in the booklet.\n        # Since the booklet is folded in half, the numbers on the opposite sides of the same sheet should add up to total sheets + 1.\n        # Hence, adding the smallest and largest page numbers on the same sheet should give us total_sheets + 1.\n        total_sheets_plus_one = front_page_num + back_other_side\n\n        # With this number, we can validate if these are the correct page numbers and stop searching if they are.\n        if front_page_num % 2 != 0 and back_other_side % 2 == 0 and front_other_side + back_page_num == total_sheets_plus_one:\n            # Calculate the total number of sheets; since total_sheets_plus_one is one more than the actual number.\n            total_sheets = total_sheets_plus_one - 1\n            return total_sheets // 2  # Since we need the number of sheets, not pages.\n\n    return None  # In case no solution is found.\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # cost for 12 pencils\n    cost_12_pencils = 1.80\n    # cost for 1 pencil\n    cost_1_pencil = cost_12_pencils / 12\n    # ratio of pen cost to pencil cost\n    ratio_pen_to_pencil = 7 / 3\n    # cost for 1 pen\n    cost_1_pen = cost_1_pencil * ratio_pen_to_pencil\n    # cost for 5 pens\n    cost_5_pens = cost_1_pen * 5\n    return cost_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = (last_term - first_term) // difference + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for time (in hours) it takes for Simon and his wife to meet\n    time = symbols('time')\n\n    # Simon's speed is 80 km/h, so in 'time' hours he will cover 80 * time kilometers\n    # His wife's speed is 60 km/h, so in 'time' hours she will cover 60 * time kilometers\n    # The distance between their offices is 15 km, and Simon needs to cover that additional distance\n    # The equation is based on the fact that they meet when they have covered the same distance\n    equation = Eq(80 * time, 60 * time + 15)\n\n    # Solve for time which is when Simon overtakes his wife\n    solution = solve(equation, time)\n\n    # Calculate the overtaking time in hours and add it to 6.10 pm\n    overtaking_time_in_hours = solution[0]\n\n    # Simon leaves at 6.10 pm, which is 18.10 in 24-hour format\n    # Convert the matching time to minutes\n    overtaking_time_in_minutes = overtaking_time_in_hours * 60\n    base_minutes = 18 * 60 + 10  # 6.10 pm in minutes\n    \n    # Calculate the total minutes when Simon overtakes his wife\n    final_minutes = base_minutes + overtaking_time_in_minutes\n\n    # Convert the total minutes back to hours and minutes\n    final_hour = int(final_minutes // 60)\n    final_minute = int(final_minutes % 60)\n\n    return f\"{final_hour}:{final_minute:02d}\"\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee, milk\n    food_items = 3  # hamburgers, burritos, bagels\n    \n    return drinks * food_items\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlocked_lockers = 0\n    for locker in range(1, 101):\n        # Count how many times the locker would change state\n        actions = 0\n        if locker % 3 == 0:\n            actions += 1\n        if locker % 5 == 0:\n            actions += 1\n\n        # If the locker was toggled an odd number of times,\n        # it ends up in the opposite state\n        if actions % 2 == 1:\n            unlocked_lockers += 1\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    # Number of ways to reach the 5th step\n    ways_to_fifth = fibonacci(5)\n\n    # Number of ways to reach the 10th step from the 5th step\n    ways_from_fifth_to_tenth = fibonacci(6)  # Note that this is 6 because we are starting from step 5\n\n    # Total number of different ways\n    total_ways = ways_to_fifth * ways_from_fifth_to_tenth\n\n    return total_ways\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_to_cook_one_batch = 3\n    pancakes_per_batch = 2\n    time_available = 12\n\n    batches_in_time_available = time_available / time_to_cook_one_batch\n    total_pancakes = batches_in_time_available * pancakes_per_batch\n\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500\n    total_days = 5\n\n    road_per_day = total_road / total_days\n\n    return road_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    people_per_country_to_ensure = 9\n\n    # If each country has 8 people, then we have no guarantee that any country has 9\n    # To ensure 9 people from a single country, we add 1 extra participant\n    ans = (people_per_country_to_ensure - 1) * countries + 1\n    return ans\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    n = 53  # number of terms\n    total_sum = 2014\n    sum_formula = n * (n + 1) // 2  # sum of the first n natural numbers\n    \n    # Because they are consecutive, the sum of the first n natural numbers is offset by the same amount for each number.\n    offset = total_sum - sum_formula\n    # The offset divided by the count gives the first number in the sequence\n    first_number = offset // n\n    \n    largest_number = first_number + n - 1  # The last (largest) number in the sequence\n    \n    return largest_number\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # the number A for which 88 divided by A gives 22\n    A = symbols('A')\n    equation = Eq(88 / A, 22)\n    \n    # solve for A\n    A_value = solve(equation, A)[0]\n    \n    # correct answer for 98 divided by A\n    correct_answer = 98 / A_value\n\n    return A_value, correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost = cost_per_calculator * 12\n    return total_cost\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "from itertools import combinations\n\ndef solution():\n    # Time taken for each person to cross the river\n    times = [5, 5, 9, 7]\n    fastest_time = sum(times)  # initialize with a time that is surely too high\n\n    # Since it always needs to come back with the boat, we must consider that the fastest two (in this case are the same)\n    # go to the other side, one comes back, and then the two slowest go together. The fastest remaining goes back to pick up\n    # the remaining fastest person.\n\n    # The possible combinations in which the two fastest can cross, taking into account that Jason and Chi Yew take the same time.\n    # So only one combination with the two fastest is needed.\n    fastest_pair_times = [5]\n\n    # Iterate over each combination of the fastest pair crossing\n    for fastest_pair_time in fastest_pair_times:\n        # The remaining two that will cross once the fastest person comes back\n        for slowest_pair in combinations([t for t in times if t != fastest_pair_time], 2):\n            # Calculate time taken for the strategy:\n            # 1. Two fastest cross: fastest_pair_time minutes\n            # 2. One fastest return: fastest_pair_time minutes\n            # 3. Two slowest cross: max(slowest_pair) minutes\n            # 4. One fastest cross back: fastest_pair_time minutes\n            # 5. Two fastest cross again: fastest_pair_time minutes\n            time_taken = (2 * fastest_pair_time) + max(slowest_pair) + fastest_pair_time + fastest_pair_time\n            if time_taken < fastest_time:\n                fastest_time = time_taken\n    return fastest_time\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas's speed is 5 laps per 6 minutes\n    lucas_speed = 5 / 6\n    # Miller's speed is 5 laps per 10 minutes\n    miller_speed = 5 / 10\n\n    # Relative speed between Lucas and Miller when Lucas overtakes Miller\n    relative_speed = lucas_speed - miller_speed\n\n    # Time taken for Lucas to overtake Miller for the first time \n    # since they start at the same point is the time taken for Lucas\n    # to complete one full lap more than Miller\n    time_to_overtake_once = 1 / relative_speed\n\n    return time_to_overtake_once\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_amount = 1670\n    # Since the amount is rounded to the nearest 10, the greatest possible amount\n    # she could have saved is just before it rounds up to the next 10, which is xx9.\n    greatest_possible_amount = rounded_amount + 9\n\n    return greatest_possible_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    ans = 2.5 * 60\n    return ans\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n    \n    children = 3 / 5 * total_visitors\n    remaining_visitors = total_visitors - children\n    men = 1 / 4 * remaining_visitors\n    \n    equation = Eq(children - men, 120)\n    \n    total = solve(equation, total_visitors)\n    \n    return total[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_charge = 80 # in cents\n    additional_charge = 5 # in cents per minute\n    total_cost = 140 # in cents\n\n    extra_cost = total_cost - base_charge\n    extra_minutes = extra_cost // additional_charge\n\n    total_minutes = 15 + extra_minutes\n\n    return total_minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age = 8\n    difference_in_ages = 54 - tim_age\n    mother_age_now = tim_age + difference_in_ages\n    return mother_age_now\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 2 == 0 and num % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # length of the orange string in meters\n    orange_length_cm = orange_length_m * 100  # converting meters to centimeters for consistency\n\n    purple_length_cm = orange_length_cm / 9.2  # since orange is 9.2 times as long as purple\n    green_length_cm = purple_length_cm + 24.9  # green string is 24.9cm longer than the purple string\n\n    green_length_m = green_length_cm / 100  # converting centimeters back to meters\n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Since this is a number puzzle, we assume that each letter represents a unique digit.\n    from sympy import symbols, solve\n\n    # Define the symbols\n    A, B = symbols('A B', integer=True)\n\n    # Set the range for the digits\n    digits = range(10)\n\n    # Create equations based on the puzzle where each letter represents a unique digit\n    # and A cannot be zero because it is the first digit of a multi-digit number\n    equation = Eq(10 * A + A, 4 * (10 * B + 4))\n\n    # Solve for A given the constraints\n    # We only check for solutions where A is not equal to any other digit and A is not zero\n    for digit_a in digits[1:]:  # A cannot be zero\n        for digit_b in digits:\n            if digit_a != digit_b:\n                solutions = solve(equation.subs({A: digit_a, B: digit_b}), (A, B))\n\n                # If there is a valid solution, return the value of A\n                if solutions:\n                    return solutions[A]\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    ivy_rate = 1/24\n    kevin_rate = 1/20\n    total_rate = ivy_rate + kevin_rate\n    days_together = 18\n\n    # total work done is considered as 1 job\n    work_done_together = days_together * total_rate\n    \n    # Because Ivy works all the days, her work done is:\n    ivy_work_done = days_together * ivy_rate\n    \n    # Kevin's work done is the remaining work:\n    kevin_work_done = work_done_together - ivy_work_done\n    \n    # Kevin's actual working days is his work done divided by his rate\n    kevin_actual_working_days = kevin_work_done / kevin_rate\n    \n    # Days Kevin took off is the difference between the days they were\n    # supposed to work together and the actual days Kevin worked\n    kevin_days_off = days_together - kevin_actual_working_days\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n    days = 3  # Monday, Tuesday, and Wednesday\n\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * days\n    \n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    apple_ratio = 4\n    total_liters = 36\n\n    apple_juice_liters = (apple_ratio / total_ratio) * total_liters\n\n    return apple_juice_liters\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the two pieces\n    piece1, piece2 = symbols('piece1 piece2')\n\n    # Equation 1: piece1 is 5 times longer than piece2\n    equation1 = Eq(piece1, 5 * piece2)\n    \n    # Equation 2: The sum of the lengths of both pieces is 49.5\n    equation2 = Eq(piece1 + piece2, 49.5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (piece1, piece2))\n    \n    # Get the length of the longer piece and round to 1 decimal place\n    longer_piece_length = round(solutions[piece1], 1)\n    \n    return longer_piece_length\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    total_left = 400\n    year7_left_percentage = 0.10  # 10%\n    year7_normal_percentage = 0.20  # 20%\n\n    # Calculate the number of Year 7 pupils left\n    year7_left = total_left * year7_left_percentage\n\n    # Since the number of non-Year 7 pupils hasn't changed, we can find the original total by:\n    # total_original = total_left + original_year7 - year7_left\n    # And we know that original_year7 = total_original * year7_normal_percentage\n    # So we get the equation: total_original = total_left + (total_original * year7_normal_percentage) - year7_left\n    # Rearrange the equation to solve for total_original:\n    total_original = total_left / (1 - year7_normal_percentage + year7_left_percentage)\n\n    return int(total_original)\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    well_height = 25\n    climb_up = 4\n    slide_down = 1\n    progress_per_day = climb_up - slide_down\n    total_progress = 0\n    day = 0\n\n    while total_progress < well_height:\n        day += 1\n        total_progress += climb_up\n        if total_progress >= well_height:\n            break\n        total_progress -= slide_down\n\n    return day\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time Tim takes to complete the book by himself\n    t = symbols('t')\n\n    # Nancy's work rate per day\n    nancy_rate = 1 / 6\n\n    # Tim's work rate per day\n    tim_rate = 1 / t\n\n    # Combined work rate when working together\n    combined_rate = 1 / 4\n\n    # Equation based on work rates\n    equation = Eq(nancy_rate + tim_rate, combined_rate)\n\n    # Solve for Tim's time\n    tim_time = solve(equation, t)[0]\n\n    return tim_time\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_money = 100\n    days = 15\n\n    for day in range(1, days + 1):\n        if day % 2 == 1:  # Odd days, deposits £5\n            total_money += 5\n        else:  # Even days, spends £8\n            total_money -= 8\n\n    return total_money\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_distance = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up - fall_down\n\n    # After every 3 jumps, it effectively climbs 3 * jump_up - fall_down meters.\n    effective_distance = 3 * jump_up - fall_down\n\n    # Calculate the number of full cycles (set of 3 jumps after which it falls down by 2 meters)\n    full_cycles = (total_distance - jump_up) // effective_distance\n    remaining_distance = (total_distance - jump_up) % effective_distance\n\n    # Jumps it takes to complete the full cycles\n    jumps = full_cycles * 3\n\n    # Final round of jumps to reach the top\n    while remaining_distance > 0:\n        jumps += 1\n        remaining_distance -= jump_up\n        if remaining_distance <= 0:\n            break\n        remaining_distance += fall_down\n\n    # Adding the final jump as it doesn't fall after the last jump\n    return jumps + 1\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n\n    def prime_factor_count(factorial_n, prime):\n        count = 0\n        while factorial_n >= prime:\n            count += factorial_n // prime\n            factorial_n //= prime\n        return count\n\n    num_zeros_999 = prime_factor_count(999, 5)\n    num_zeros_300 = prime_factor_count(300, 5)\n\n    return num_zeros_999 - num_zeros_300\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Start with initial values of numerator and denominator\n    numerator = 1\n    denominator = 1\n    \n    # Iterate over the sequence\n    for i in range(1, 7):\n        # Calculate next denominator for the fraction part\n        next_denominator = denominator + (i + 1)\n        # Add the current fraction to the total sum\n        total_sum += numerator / (denominator * next_denominator)\n        # Update numerator and denominator for next iteration\n        numerator = i\n        denominator = next_denominator\n    \n    # Add the last term which is 1/22\n    total_sum += 1 / denominator\n    \n    return total_sum\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    # Let x be the initial amount of money Helen had.\n    # She spends one-third of her money on a dress, so she has 2/3 left.\n    # Then she spends three-fifths of what is left on shoes, so she has 2/5 of 2/3 left.\n    # According to the problem, 2/5 of 2/3 of her initial money equals £40.\n\n    # (2/5) * (2/3) * x = 40\n    # (4/15) * x = 40\n    # x = 40 * (15/4)\n    x = 40 * (15 / 4)\n\n    return x\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a, b = 10, 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # The perimeter of the square formed by the students is 60*4 = 240 students\n    # Each side of the square has 240 / 4 = 60 students\n    side_length = 60\n    \n    # The total number of students consists of the outer layer and the inner layers\n    # The inner layers form smaller concentric squares, diminishing by 2 students each layer\n    # (since we remove one student from both ends of a side for the next layer)\n    # This leads us to the formula for the sum of squares: n^2 + (n-2)^2 + (n-4)^2 + ... + 1 (if n is odd) or 0 (if n is even)\n    total_students = 0\n    while side_length > 0:\n        total_students += side_length * side_length\n        side_length -= 2\n\n    return total_students\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    red_tiles = 0\n    green_tiles = 0\n    total_tiles = 400\n\n    for layer in range(1, int(total_tiles**0.5) + 1):\n        tiles_in_layer = (2 * layer - 1) ** 2\n        if layer % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n        if red_tiles + green_tiles >= total_tiles:\n            break\n\n    if red_tiles > green_tiles:\n        color = \"red\"\n        diff = red_tiles - green_tiles\n    else:\n        color = \"green\"\n        diff = green_tiles - red_tiles\n\n    return color, diff\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cars, bikes, and lorries\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(cars, bikes + bikes/3)\n    equation2 = Eq(bikes, lorries + lorries/4)\n    equation3 = Eq(cars + bikes + lorries % 2, 0) # total number must be even\n    # Also, we are given that the total number is less than 100. This can be expressed as:\n    less_than_100 = cars + bikes + lorries < 100\n    \n    # We solve the equations using sympy's solve function\n    solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n\n    # Filter out the solutions where the total number of vehicles is less than 100\n    # and all numbers of vehicles are non-negative\n    valid_solutions = [(c, b, l) for c, b, l in solutions if c + b + l < 100 and c > 0 and b > 0 and l > 0]\n    \n    # Since we expect a unique solution\n    if len(valid_solutions) == 1:\n        return valid_solutions[0]\n    else:\n        # If there are no solutions or many solutions which we don't expect, just raise an exception\n        raise Exception(\"Could not find a unique solution\")\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18 * 20132013 - 2013 * 180018\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the number of buttons in A and B at first\n    A, B = symbols('A B')\n\n    # Given that there were 64 more buttons in box A than box B at first\n    equation1 = Eq(A, B + 64)\n\n    # Ken added some buttons to A and for every 1 button added to A, he removed 2 from B\n    # Let x be the number of buttons added to A\n    # Then the number of buttons removed from B is 2x\n    x = symbols('x')\n\n    # The number of buttons in B became 28 fewer than before\n    equation2 = Eq(B - 2*x, B - 28)\n\n    # The total number of buttons is now A+x for box A and B-2x for box B\n    # The ratio of the total number of buttons in both boxes to B-2x is 4:1\n    equation3 = Eq((A + x + B - 2*x) / (B - 2*x), 4)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2, equation3), (A, B, x))\n\n    # We are interested in the number of buttons that were in box A at first\n    return solution[A]\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    num_bins = (boulevard_length // interval) + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 0\n    while True:\n        number_str = '26' + '2011' * n + '7'\n        number = int(number_str)\n        if number % 33 == 0:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards_won = 24\n    total_rounds = 12\n    cards_per_win = 4\n    cards_per_loss = -2\n\n    # Let x be the number of rounds she won, then (total_rounds - x) is the number of rounds she lost.\n    # total_cards_won = (cards_per_win * x) + (cards_per_loss * (total_rounds - x))\n    # Solve for x:\n    x = (total_cards_won - (cards_per_loss * total_rounds)) / (cards_per_win - cards_per_loss)\n\n    # Number of rounds she lost is total rounds minus the number of rounds she won.\n    rounds_lost = total_rounds - x\n    return int(rounds_lost)\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n    \n    total_flour = flour_per_cake * number_of_cakes\n    \n    return total_flour\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    ways = 0\n    # Iterate through possible numbers of lollipops on each plate\n    for i in range(8):  # First plate can have from 0 to 7 lollipops\n        for j in range(8 - i):  # Second plate can have from 0 to the remainder\n            # The third plate's lollipops are decided after the first two plates'.\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z, rounds = 20, 19, 18, 0\n    while min(x, y, z) > 0:\n        if x >= y and x >= z:\n            x -= 2\n            y += 1\n            z += 1\n        elif y >= x and y >= z:\n            y -= 2\n            x += 1\n            z += 1\n        else:\n            z -= 2\n            x += 1\n            y += 1\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # Bob takes 3 minutes to make 3 cuts to divide a log into 4 pieces.\n    # Each cut therefore takes 1 minute.\n    # To cut a log into 8 pieces, Bob will need to make 7 cuts.\n    cuts_needed = 8 - 1\n    time_per_cut = 3 / (4 - 1)\n\n    # Total time needed to make 7 cuts\n    total_time = cuts_needed * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n    \n    current_cards = (initial_cards - duplicates) + new_cards\n    \n    return current_cards\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as one person, so we have 7 \"entities\" to arrange.\n    # Since the table is circular, fixing one entity's position will define the rotation.\n    # Hence, we effectively have to arrange 6 entities around the table.\n    num_entities_to_arrange = 6\n    \n    # There are two ways Amy and Judy can sit next to each other (Amy on the left, Judy on the right; and vice versa).\n    ways_amy_judy_can_sit = 2\n    \n    # Calculate the number of ways to arrange 6 entities in a row.\n    # Since the table is circular, we treat one position as fixed to prevent counting rotations as unique.\n    arrangements = factorial(num_entities_to_arrange)\n    \n    # Multiply by the two ways Amy and Judy can sit.\n    total_arrangements = arrangements * ways_amy_judy_can_sit\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Rasidah spent 3/5 of her money\n    rasidah_left = rasidah - (3/5) * rasidah\n\n    # Chai Seng spent 6/7 of his money\n    chai_seng_left = chai_seng - (6/7) * chai_seng\n\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, (1/2) * rasidah_left)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy_start, ben_start = symbols('andy_start ben_start')\n    \n    equation1 = Eq(ben_start - andy_start, 84)\n    # Andy has 1/3 more of his initial amount and Ben has 1/5 more of his initial amount in the end\n    equation2 = Eq((andy_start + andy_start / 3), (ben_start + ben_start / 5) / 3)\n    \n    solutions = solve((equation1, equation2), (andy_start, ben_start))\n    \n    # Andy's final amount of cookies after buying 1/3 more\n    andy_final = solutions[andy_start] + solutions[andy_start] / 3\n    \n    return andy_final\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    result = sum(1 / i for i in range(1, 8))\n    return int(result)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n\n    current_amount = principal\n    years = 0\n    while current_amount < final_amount:\n        current_amount += current_amount * rate\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "from math import gcd\n\ndef solution():\n    pencils = 56\n    pens = 60\n    \n    ans = gcd(pencils, pens)\n    \n    return ans\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Tom always knows if his number is divisible so his number must be a multiple of the GCD of 24 and the mystery number\n    # The mystery number must have only 2 prime factors that are in 24 (2, 3) in order for 4 students to know initially\n    # and then after knowing it is 24, 2 extra students know so the mystery number must have either a 2 or a 3 but not both.\n    \n    # The possible values for the mystery number must be 2, 3, 4, 6, 8, 12 since these are the divisors of 24 excluding 1 and 24.\n    # Values 2 and 3 are excluded since that would mean no students or all students would know if their number is divisible.\n    # Value 4 is excluded since there would be no additional knowledge gained from knowing the second number is 24.\n    # Value 6 is possible since it adds a factor of 3 which would add additional students' knowledge when compared with 24.\n    # Values 8 and 12 are excluded since this would not change the students' knowledge when told the number is 24 (would need to be multiple of 8 or 12 respectively).\n\n    # The mystery number must therefore be 6, and Tom's number must be a multiple of 24.\n    # We need to find Tom's possible number.\n    # For Tom's number we must find numbers less than 100 and greater than 9 that are multiples of 24 (24, 48, 72, 96).\n\n    # Since Tom's hat number is unique and is divisible by 24, the possible sums of the other 8 numbers depend on Tom's number.\n    # Possible hats numbers could be 10 to 97 excluding Tom's hat number and excluding any number divisible by 24.\n    possible_tom_numbers = [24, 48, 72, 96]\n    other_hat_numbers = [i for i in range(10, 98) if i % 24 != 0]\n\n    # As we are to find the sum of all possibilities excluding Tom's number, we iterate over Tom's possible numbers\n    # and calculate the sum of other_hat_numbers minus Tom's hat number.\n    hat_numbers_sums = [sum(other_hat_numbers) - tom_number for tom_number in possible_tom_numbers]\n    \n    # The sum of the friends' hat numbers is unique for each of Tom's possible numbers.\n    # We can check which of these sums satisfies the conditions of the problem (distinct two-digit numbers, 4 then 6 students sure).\n    # Since Tom raised his hands both times, his number is a sure multiple of the gcd of 24 and the mystery number,\n    # which we have determined to be 6.\n    # Thus, the sum which reaches the condition will include Tom's number being a multiple of 24, hence divisible by 6.\n    # This sum is the solution.\n    \n    for possible_sum in hat_numbers_sums:\n        if possible_sum % 6 == 0:\n            return possible_sum\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # The pattern in the sequence seems to alternate between adding 1 to a positive number\n    # and subtracting 1 from a negative number.\n    \n    # Start with the initial positive term of the pattern\n    current_positive = 18\n    \n    # Iterate through the sequence to find the term just before the next term we're looking for\n    while True:\n        # Calculate next negative term\n        next_negative = -1 * (current_positive - 2)\n        # Calculate next positive term\n        next_positive = abs(next_negative) + 1\n        \n        # If the next positive number is 21, stop and return the term just before it\n        if next_positive == 21:\n            return next_negative\n        \n        # Set current term to the latest positive number found\n        current_positive = next_positive\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Using algebra to solve the two given equations.\n    # Let the four numbers be a > b > c > d\n    # Equation 1: d + (a + b + c) / 3 = 39 => 3d + a + b + c = 117\n    # Equation 2: a + (d + b + c) / 3 = 51 => 3a + d + b + c = 153\n    # Subtracting equation 1 from equation 2 we get:\n    # 3a - 3d = 36 => a - d = 12\n    # The difference between the largest and the smallest number is 12.\n    \n    # Now that we know the difference between largest a and smallest d is 12,\n    # the largest possible value for 'a' occurs when 'd' is minimized.\n    # Since the numbers are distinct positive whole numbers, the minimum values\n    # for 'b', 'c', and 'd' would be 1, 2, and 3 respectively.\n    # The minimum value for 'd' would be 4, as we need four different numbers.\n    \n    # therefore, d_min = 4\n    d_min = 4\n    # a = d + 12\n    a_max = d_min + 12\n    \n    return a_max\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    # Find the factor by which the numerator has increased\n    factor = new_numerator / original_numerator\n\n    # Multiply the original denominator by the same factor to find the new denominator\n    new_denominator = original_denominator * factor\n\n    return int(new_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    total_students = 43\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n\n    # Apply the principle of inclusion-exclusion for the three sets\n    # At most all students passed = Total passed - (Sum of passed in each subject - 1)\n    # Because for at most, we include as many as possible in the intersection\n    all_three_max = (math_pass + science_pass + english_pass) - (total_students - 1)\n\n    return all_three_max\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since each pencil case must contain at least one pen, we'll place one\n    # pen in each case first. This leaves us with 6 - 3 = 3 pens to distribute.\n    remaining_pens = 6 - 3\n    \n    # Each distribution of the remaining pens corresponds to a partition of\n    # the number 3. There is a well-known formula for the number of distributions\n    # of n identical items into k distinct groups: (n + k - 1) choose (k - 1).\n    # Here we have remaining_pens as n and 3 pencil cases as k.\n\n    from math import comb\n\n    # Calculate the number of ways to distribute the remaining pens.\n    ways = comb(remaining_pens + 3 - 1, 3 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # Calculate the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    denominator1 = 2/25\n    complex_fraction1 = numerator1 / denominator1\n    \n    # Calculate the second complex fraction\n    numerator2 = 2 - (2/3)\n    denominator2 = 8/3\n    complex_fraction2 = numerator2 / denominator2\n    \n    # Add the two complex fractions\n    ans = complex_fraction1 + complex_fraction2\n    \n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    place_value_1 = 8 * 1000  # The first 8 is in the thousands place\n    place_value_2 = 8 * 10    # The second 8 is in the tens place\n\n    difference = place_value_1 - place_value_2\n    return difference\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the distance between the school and their home\n    x = symbols('x')\n\n    # Ahmad's speed is 80 m/min, his younger brother's speed is 50 m/min\n    ahmad_speed = 80\n    brother_speed = 50\n\n    # Ahmad meets his brother 210 m from school\n    meeting_distance_from_school = 210\n\n    # Time taken by Ahmad to reach school\n    ahmad_time_to_school = x / ahmad_speed\n    \n    # Ahmad meets his brother after returning 210 m towards home\n    # Distance traveled by Ahmad when he meets his brother\n    ahmad_distance = x + (x - meeting_distance_from_school)\n\n    # Time taken by his brother to reach the meeting point\n    brother_time_to_meeting = (x - meeting_distance_from_school) / brother_speed\n\n    # By the time Ahmad meets his brother, they both have spent the same amount of time\n    # so their times to meet are equal\n    equation = Eq(ahmad_time_to_school + ahmad_time_to_school, brother_time_to_meeting)\n    \n    # Solve for x (distance between the school and their home)\n    distance = solve(equation, x)[0]\n\n    return distance\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n    \n    i = 0\n    while not is_palindrome(40309 + i):\n        i += 1\n    \n    return i\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # For a number to be divisible by 4, its last two digits must also be divisible by 4.\n    # For a number to be divisible by 5, its last digit must be 0 or 5.\n    # Since the last digit 'A' of the four-digit number needs to make it divisible by both 4 and 5,\n    # 'A' can only be 0 to satisfy both conditions.\n    \n    A = 0\n    return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: The common supplement to the remainders\n    # (biscuits % 5 = 1, biscuits % 6 = 2, biscuits % 11 = 7)\n    common_supplement = (-1 % 5, -2 % 6, -7 % 11)\n\n    # Step 2: Find the LCM of all the divisors\n    lcm_of_divisors = 5 * 6 * 11  # Because 5, 6, and 11 are coprime\n\n    # Step 3: Solve the congruences using the Chinese Remainder Theorem\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    biscuits, _ = solve_congruence(*congruences)\n\n    ans = biscuits\n    return ans\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    ribbon1_length = 16\n    ribbon2_length = 24\n\n    # The longest possible length of each piece is the greatest common divisor\n    # of the lengths of the two ribbons.\n    ans = gcd(ribbon1_length, ribbon2_length)\n\n    return ans\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # 45 is divisible by 9, which implies that the sum of the digits of the number must also be divisible by 9\n    # 45 is also divisible by 5, which means that the last digit of the number must be 0 or 5.\n    # For a five-digit palindromic number, the last digit is the same as the first, so it can't be 0.\n    # Thus, any five-digit palindromic number that is a multiple of 45 must end in 5.\n    # The format of such a palindromic number will be ABCCBA, where the A is 5.\n    \n    # We'll start by finding the smallest number of this form.\n    smallest_palindromic = None\n    for B in range(0, 10):\n        for C in range(0, 10):\n            palindromic = int(f\"5{B}{C}{C}{B}5\")\n            if palindromic % 45 == 0:\n                smallest_palindromic = palindromic\n                break\n        if smallest_palindromic is not None:\n            break\n    \n    # Now find the largest number of this form.\n    largest_palindromic = None\n    for B in reversed(range(0, 10)):\n        for C in reversed(range(0, 10)):\n            palindromic = int(f\"5{B}{C}{C}{B}5\")\n            if palindromic % 45 == 0:\n                largest_palindromic = palindromic\n                break\n        if largest_palindromic is not None:\n            break\n    \n    # Assuming we found both the smallest and largest palindromes, now find the difference.\n    if smallest_palindromic is not None and largest_palindromic is not None:\n        ans = largest_palindromic - smallest_palindromic\n    else:\n        ans = None\n\n    return ans\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    # Luna's position from the front\n    position_from_front = 7\n    # Number of sheep behind Luna\n    sheep_behind = 4\n    # Total number of sheep in the line\n    total_sheep = position_from_front + sheep_behind\n    \n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    pay_per_hour = 18\n    total_earnings = 270\n    hours_needed = total_earnings / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the mean score of all students is x\n    all_students_mean = symbols('x')\n\n    # The total score of top 3 students, since their average is 92\n    top_3_students_sum = 3 * 92\n\n    # The mean score of the last 7 students is 6 less than the mean score of all 10 students\n    # which is (x - 6)\n    # Therefore, the total score of the last 7 students is 7 * (x - 6)\n    last_7_students_sum = 7 * (all_students_mean - 6)\n\n    # According to the problem, the total scores when combined should give us the mean score times the number of students\n    # So, top_3_students_sum + last_7_students_sum = all_students_mean * 10\n    equation = Eq(top_3_students_sum + last_7_students_sum, all_students_mean * 10)\n\n    # Solve for x\n    mean_score_solution = solve(equation, all_students_mean)\n\n    return mean_score_solution[0]\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    from itertools import permutations\n    \n    # Counting how many lucky years are there\n    lucky_years_count = 0\n    \n    # Loop from 1000 AD to 2022 AD\n    for year in range(1000, 2023):\n        # Convert the year to a set of digits\n        digits = set(str(year))\n        \n        # Check if all digits are consecutive\n        if len(digits) == 4:\n            digits = sorted(map(int, digits))\n            if digits == list(range(min(digits), max(digits)+1)):\n                lucky_years_count += 1\n        # If not 4 unique digits, then it can't be a lucky year\n        \n    return lucky_years_count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    \n    for red_marbles in bags:\n        x_bags = bags.copy()\n        x_bags.remove(red_marbles)\n        \n        for i in range(1 << 5):  # Iterate through all subsets of 5 bags\n            jaslin_bags = [x_bags[j] for j in range(5) if (i >> j) & 1]\n            george_bags = [x_bags[j] for j in range(5) if not (i >> j) & 1]\n            \n            if sum(jaslin_bags) == 2 * sum(george_bags):\n                return red_marbles\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Since they are consecutive even numbers, the common\n    # difference (step) between them is 2.\n    common_difference = 2\n\n    # Let n be the smallest even number\n    # Then the sequence of the five numbers can be expressed as:\n    # n, n+2, n+4, n+6, n+8\n    # Their sum is given by:\n    # sum = n + (n+2) + (n+4) + (n+6) + (n+8) = 5n + 20\n\n    # We know the sum of these numbers is 100\n    # Therefore, we get the equation 5n + 20 = 100\n    # Simplifying it: 5n = 80 => n = 16\n\n    # The smallest of these five numbers is 16\n    n = (100 - 20) // 5  # Integer division\n\n    return n\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Andre and Beth's original amount of sweets\n    andre, beth = symbols('andre beth')\n\n    # Equation for the total sweets before the teacher gave more\n    equation1 = Eq(andre + beth, 24)\n    \n    # Equation for the difference after the teacher gave more\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    # Beth's sweets after the teacher gave her sweets\n    beth_sweets_now = solutions[beth] + 4\n    \n    return beth_sweets_now\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed_per_hour = 550 / 5\n    distance_in_3_hours = speed_per_hour * 3\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_ratio = 1 - (2/5)\n    total_apples = 150 / remaining_ratio\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance_per_jump = 3  # inches\n    total_jumps = 15 - 1   # From post 1 to 15, the frog makes 14 jumps\n    total_distance = distance_per_jump * total_jumps\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # No need to count the boxes of chocolate as fruits\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "def solution():\n    from sympy import Rational\n\n    # For each color pair, there are 11 possible spaces for the second block, but only 5 of them\n    # satisfy the evenness condition. Therefore, the probability for one pair is 5/11.\n    # For two pairs, the probability is independent, so multiply the probabilities.\n    # This works for all three pairs, giving (5/11)**3.\n    # There are (12 choose 2) ways to place the first pair, (10 choose 2) for the second,\n    # and (8 choose 2) for the third, after which the placement of the blocks is determined.\n    # (12 choose 2)(10 choose 2)(8 choose 2) counts each arrangement 2! for each pair \n    # (since blocks of the same color are indistinguishable), giving a total count of \n    # (12 choose 2)(10 choose 2)(8 choose 2) / (2!**3).\n    # The total number of arrangements is 12! / (2!**6), again since blocks of the same color \n    # are indistinguishable.\n    # The probability is then the ratio of these two counts, which simplifies considerably.\n    \n    even_prob = Rational((5**3), (11**3))\n    num_ways = Rational((12*11*10*9*8*7), (2**3*2**3))\n    total_arrangements = Rational((12*11*10*9*8*7*6*5*4*3*2), (2**6))\n    \n    probability = even_prob * num_ways / total_arrangements\n    \n    # The probability simplifies to m/n in lowest terms automatically because we used Rational.\n    m_plus_n = probability.numerator + probability.denominator\n    return m_plus_n\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Rate of filling the pool per minute for each inlet\n    rate_A = 1 / 36\n    rate_B = 1 / 48\n\n    # Simulate the filling process according to the pattern\n    filled = 0\n    time = 0\n    pattern = [1, 2, 2, 1]  # Pattern for minutes open in cycles\n    i = 0  # Index to keep track of the pattern\n\n    while filled < 1:\n        if i % 2 == 0:  # If i is even, it's A's turn\n            open_minutes = pattern[i]  # Time A is open for this part of the cycle\n            filled += rate_A * open_minutes\n        else:  # If i is odd, it's B's turn\n            open_minutes = pattern[i]  # Time B is open for this part of the cycle\n            filled += rate_B * open_minutes\n        \n        time += open_minutes\n        i = (i + 1) % len(pattern)  # Move to the next part of the cycle\n\n    return time\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let a be the time Alan takes to paint the room alone\n    alan_rate = symbols('a')\n\n    # Alan and Bob together paint the room in 4 hours\n    # Bob alone paints the room in 6 hours\n    # Their rates combined is the reciprocal of the total time taken\n    combined_rate = 1/4\n    bob_rate = 1/6\n\n    # Equation representing the rates\n    equation = Eq(1/alan_rate + bob_rate, combined_rate)\n\n    # Solve the equation for Alan's rate\n    alan_time = solve(equation, alan_rate)\n\n    # Return Alan's time to paint the room alone\n    return alan_time[0]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    probability_rain_Saturday = 0.7\n    probability_rain_Sunday = 0.5\n\n    probability_not_rain_Saturday = 1 - probability_rain_Saturday\n    probability_not_rain_Sunday = 1 - probability_rain_Sunday\n\n    probability_not_rain_both_days = probability_not_rain_Saturday * probability_not_rain_Sunday\n\n    probability_rain_at_least_one_day = 1 - probability_not_rain_both_days\n\n    return probability_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_questions = 10\n    points_for_correct = 10\n    points_for_incorrect = -3\n    total_points = 48\n\n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if correct * points_for_correct + incorrect * points_for_incorrect == total_points:\n            ans = incorrect\n            return ans\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    count_5 = 0\n    n = 0\n    while count_5 < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            count_5 += 1\n            temp //= 5\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n    \n    equation1 = Eq(henry + fred + richard, 204.56)\n    equation2 = Eq(richard, henry - 3.24)\n    equation3 = Eq(fred, richard + 5.6)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    total_bottles = 10\n    borrowed_can = 1\n    empty_bottles = total_bottles + borrowed_can\n    \n    while empty_bottles >= 2:\n        new_bottles = empty_bottles // 2\n        total_bottles += new_bottles\n        empty_bottles = empty_bottles % 2 + new_bottles\n        \n    # Return the borrowed can after finishing the drinks\n    total_bottles -= 1\n    \n    return total_bottles\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n    \n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n    \n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    weeks = 7\n    initial_sweets = 320\n    weekly_purchased = 30\n    final_sweets = 348\n\n    total_purchased = weeks * weekly_purchased\n    sweets_eaten_per_week = (initial_sweets + total_purchased - final_sweets) // weeks\n\n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Rate of draining pool A per minute\n    rate_A = 1 / 10\n    # Rate of draining pool B per minute\n    rate_B = 1 / 6\n\n    # Let t be the time in minutes after which the condition is met\n    t = symbols('t')\n\n    # At time t, the fraction of pool A's water drained will be rate_A * t\n    # At time t, the fraction of pool B's water drained will be rate_B * t\n\n    # The remaining fraction of water in pool A will be 1 - rate_A * t\n    # The remaining fraction of water in pool B will be 1 - rate_B * t\n\n    # According to the problem, the height of the waterline of pool A \n    # will be 3 times that of pool B, so we set up the equation:\n    equation = Eq((1 - rate_A * t), 3 * (1 - rate_B * t))\n\n    # Solve the equation for t\n    solution = solve(equation, t)\n\n    return solution[0]\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        num = int(f\"281{digit}\")\n        if num % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1  # Max spent one hour less than Louise\n    sally_time = 3 * louise_time  # Sally spent 3 times the amount Louise spent\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for Chenxi and Yue Ying's sweets\n    chenxi, yue_ying = symbols('chenxi yue_ying')\n\n    # Chenxi has 5 more sweets than Yue Ying\n    equation1 = Eq(chenxi, yue_ying + 5)\n    \n    # If Chenxi gives Yue Ying 10 sweets\n    new_chenxi = chenxi - 10\n    new_yue_ying = yue_ying + 10\n    \n    # Calculate the difference after the exchange\n    difference = new_chenxi - new_yue_ying\n\n    # Solving the equation for initial amount of sweets\n    solutions = solve(equation1, (chenxi, yue_ying))\n\n    # Getting the difference using the initial values computed\n    ans = difference.subs(solutions)\n\n    return ans\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # The number 1 does not represent a combinatorial problem.\n    # Since the question seems to be incomplete, the variable 'ans' will simply be set to 1.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    speed_slow = 3  # speed in km/h when Wilson is late\n    speed_fast = 7  # speed in km/h when Wilson is early\n\n    # convert minutes to hours (12 min late, 8 min early)\n    time_late = 12 / 60  # in hours\n    time_early = 8 / 60  # in hours\n\n    # Let the distance be d (in km)\n    # Time taken at slower speed = d/speed_slow\n    # Time taken at faster speed = d/speed_fast\n\n    # Since he is late by 12 min, the time equation at slower speed is:\n    # (d/speed_slow) = (d/speed_fast) + time_late\n    \n    # Since he is early by 8 min, the time equation at faster speed is:\n    # (d/speed_slow) = (d/speed_fast) - time_early\n\n    # Thus, we get two equations:\n    # (1) d/3 = (d/7) + 12/60\n    # (2) d/3 - d/7 = 20/60 (combining the 2 equations)\n\n    # Solving for d using the combined equation:\n    # (7d - 3d) / 21 = 20/60\n    # 4d = (21 * 20) / 60\n    # d = (21 * 20) / (60 * 4)\n    \n    d = (21 * 20) / (4 * 60)\n    \n    return d\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    amount = 200\n\n    ans = (percentage / 100) * amount\n    \n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import isprime\n\ndef solution():\n    for i in range(1, 69):\n        if isprime(i) and isprime(69 - i):\n            return 69 - 2 * i\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Let original number of students in school A be A\n    # Original number of students in school B be B\n    # Total students = A + B = 1050\n    # After moving, A - 20 = B + 20 => A - B = 40\n    # Therefore, we have the system of equations:\n    # A + B = 1050 and A - B = 40\n    # Solve the above equations for A\n    \n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 1050)\n    equation2 = Eq(A - B, 40)\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Original expression: 15 + 5 * 5 + 15 - 6 + 7\n    # To maximize the result, maximize the product and sum within the brackets.\n    # Use brackets to change the order of operations according to BODMAS/BIDMAS.\n    # One optimal way is to add brackets around \"5 * 5\" and \"(15 - 6)\" so that multiplication and subtraction are done first.\n    # Expression with brackets: 15 + (5 * 5) + (15 - 6) + 7\n    # Calculate the result with the inserted brackets.\n    ans = 15 + (5 * 5) + (15 - 6) + 7\n    return ans\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_points = 70\n    correct_points = 10\n    incorrect_points = -5\n    total_questions = 10\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == total_points:\n            return correct\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes_students = 11\n    neither_class_students = 10\n\n    # Finding the number of students taking only one class\n    # This can be calculated by subtracting the students taking both classes from total math class students\n    math_only_students = math_students - both_classes_students\n    \n    # Now find the writing class students by including the math_only, both_classes and neither_class students\n    writing_only_students = (total_students - neither_class_students) - (math_only_students + both_classes_students)\n\n    return writing_only_students\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from sympy import isprime\n\n    digits = '08072003'\n    primes = [int(''.join(p)) for p in itertools.permutations(digits) if isprime(int(''.join(p)))]\n\n    primes_less_than_50 = [prime for prime in primes if prime < 50]\n\n    return max(primes_less_than_50)\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    first_two_average = 48\n\n    # Total sum of the five numbers\n    total_sum = total_average * 5\n    \n    # Sum of the first two numbers\n    first_two_sum = first_two_average * 2\n\n    # Sum of the last three numbers\n    last_three_sum = total_sum - first_two_sum\n\n    # Average of the last three numbers\n    last_three_average = last_three_sum / 3\n\n    return last_three_average\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy, father = symbols('teddy father')\n    equation1 = Eq(father, 7 * teddy)\n    equation2 = Eq(father - teddy, 40 - 5)\n\n    solutions = solve((equation1, equation2), (teddy, father))\n    teddy_age_when_father_40 = solutions[teddy] + (40 - solutions[father])\n\n    return teddy_age_when_father_40\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    sum_odd_numbers = sum(range(1, 18, 2))\n    return sum_odd_numbers\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    # Counting from left to right if elephant is at the 10th position and there are 5 toys between elephant and rabbit\n    # Then rabbit is at position 10 + 5 + 1 (because we count the elephant's position as well)\n    rabbit_position_from_left = 10 + 5 + 1\n\n    # Subtracting rabbit's position from left from the total number of toys will give us the position from right\n    rabbit_position_from_right = 40 - rabbit_position_from_left + 1\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    sum_digits = 0\n    for i in range(1, 110):\n        for digit in str(i):\n            sum_digits += int(digit)\n    return sum_digits\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Let's set the number of adults as A, the number of boys as B, and the number of girls as G.\n    # We are given that 2/7 of the audience were adults, so A = 2/7 * Total\n    # Next, 4/5 of the remaining audience were boys, so B = 4/5 * Remaining = 4/5 * (5/7 * Total)\n    # The rest were girls, G = Total - A - B\n    # We are given that there were 80 more adults than girls, so A = G + 80\n    # Set up the equation A = G + 80 and solve for the total number of people at the play.\n\n    # Calculate the fraction representing the number of girls:\n    girls_fraction = (1 - 4/5) * (5/7)\n    # Calculate the difference in fractions between adults and girls:\n    difference_fraction = (2/7) - girls_fraction\n\n    # Given the difference represents 80 more adults than girls\n    # difference_fraction * Total = 80\n    # Calculate the total number of people based on the difference fraction\n    total_people = 80 / difference_fraction\n\n    # Verify Adriana's calculation and correct it if necessary\n    if total_people != 350:\n        # If the computed total people does not match Adriana's answer, return the computed value\n        return int(total_people)\n    else:\n        # If the computed total people match Adriana's answer, return Adriana's answer\n        return 350\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    # Define the number of pink dolphins as x\n    pink = symbols('pink')\n\n    # The number of gray dolphins is 11 times the number of pink dolphins\n    gray = 11 * pink\n\n    # The total number of dolphins is the sum of pink and gray dolphins\n    total_dolphins = Eq(pink + gray, 48)\n\n    # Solve the equation\n    pink_dolphins = solve(total_dolphins, pink)\n\n    return pink_dolphins[0]\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    # Area of the triangle is (1/2) * base * height.\n    # Given area is 54 and base is 9.\n    # Let's denote the height as h.\n    # So, we can write the following equation: (1/2) * 9 * h = 54\n    # We can solve for h.\n    \n    base = 9\n    area = 54\n    height = (2 * area) / base\n    \n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(2, 33, 3))\n    return sum_squares\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    initial_condition = Eq(tables, chairs)\n    sold_tables = tables - 42\n    added_chairs = chairs + 24\n    final_condition = Eq(added_chairs, 4 * sold_tables)\n\n    solutions = solve((initial_condition, final_condition), (tables, chairs))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Initial number of pizza slices\n    slices = 1\n\n    # Number of times the pizza is cut\n    cuts = 4\n\n    # For each cut, calculate the maximum additional slices that can be made.\n    # First cut can make 1 additional slice,\n    # for the subsequent cuts, we can follow the pattern that \n    # each cut can potentially increase the number of pieces by the number of cuts made.\n    for i in range(1, cuts + 1):\n        slices += i\n\n    return slices\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    ans = 0.35 * 700\n    return ans\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Since we need to find the remainder when divided by 5, we can use modular arithmetic.\n    # Also, 4^982 is (2^2)^982 = 2^1964 and 2^2019 divided by 2^1963 is 2^(2019-1963) = 2^56.\n    # We will be using the property: (a^b) mod c = ( (a mod c)^(b mod φ(c)) ) mod c, where φ is Euler's totient function.\n    # Since the base 2 is coprime to modulus 5, we can use φ(5) = 4.\n    # However, for the modulus operation we don't have to actually calculate Euler's totient.\n\n    # Let's calculate the two separate parts first, keeping the mod 5 in mind.\n    numerator = pow(2, 56, 5)  # 2^56 (mod 5)\n    denominator = pow(2, 1964, 5) - pow(2, 1963, 5)  # (2^1964 - 2^1963) (mod 5)\n\n    # Since we are only interested in the remainder of the division by 5, we can simplify the denominator further.\n    # We know that 2^4 mod 5 = 1, which implies that 2^1964 mod 5 = 1 and 2^1963 mod 5 also simplifies.\n    # As 1964 and 1963 are both multiples of 4 plus some extra to account for the power of 2, we can ignore the multiple of 4 part.\n    # The only part that matters is the single 2's power, which for 1963 is 2^3 = 8 and for 1964 is 2^4 = 16.\n    # But since we're taking mod 5, it further simplifies:\n    # 2^1964 (mod 5) -> 2^4 = 16 mod 5 = 1\n    # 2^1963 (mod 5) -> 2^3 = 8 mod 5 = 3\n\n    denominator = (1 - 3) % 5  # (1 - 3) mod 5\n\n    # Now we can find the remainder of the division.\n    # This is equivalent to multiplying the numerator by the modular multiplicative inverse of the denominator mod 5.\n    # The modular multiplicative inverse of x (mod m) is the number y such that x*y ≡ 1 (mod m).\n    # For modulus 5, the inverse of 2 is 3, because 2*3 = 6, which is 1 mod 5.\n\n    # Given that our denominator is already adjusted to be negative and we've calculated its remainder (denominator = -2 % 5 = 3 mod 5),\n    # we can multiply the numerator by the inverse of the denominator.\n    # Remember that our \"denominator\" is actually already denominator mod 5.\n\n    inverse_denominator = 3  # Since our denominator was -2, which is the same as 3 mod 5\n\n    result = numerator * inverse_denominator % 5  # (2^56 * 3) mod 5\n\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_candy = 4\n    cabinets_right_of_candy = 7\n    candy_cabinet = 1  # Candy's own cabinet\n\n    total_cabinets = cabinets_left_of_candy + candy_cabinet + cabinets_right_of_candy\n    \n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    result = 1914 // 6\n    remainder = 1914 % 6\n    return (result, remainder)\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n\n    total_books = first_day_books + second_day_books\n\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    # Iterate through possible values for the hundreds, tens, and units digits\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for units in range(0, 10, 2):  # Increment by 2 to ensure units digit is even\n                if hundreds + tens + units == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for y in range(10):\n        number = int(f\"106{y}\")\n        if number % 18 == 0:\n            return y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    # A number divisible by 2 must end in an even number\n    # A number divisible by 3 must sum to a number divisible by 3\n    # A number divisible by 5 must end in a 0 or 5\n    # We want to find the largest number, so let's start with \n    # the largest possible last digit that satisfies divisibility by 2 and 5, which is 0.\n    for second_last_digit in range(9, -1, -1):  # Start from 9 and go backward\n        number = 4900 + second_last_digit * 10\n        # A number is divisible by 3 if the sum of its digits is divisible by 3.\n        # Check if adding the digits of the number results in a number that is divisible by 3\n        if (4 + 9 + second_last_digit) % 3 == 0:\n            return number  # As soon as we find the largest number that satisfies the conditions, return it.\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n    total_vehicles = Eq(motorcycles + cars + lorries, 27)\n    total_wheels = Eq(2 * motorcycles + 4 * cars + 6 * lorries, 96)\n    equal_cars_lorries = Eq(cars, lorries)\n\n    solutions = solve((total_vehicles, total_wheels, equal_cars_lorries), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = ((n * (n + 1)) // 2) ** 2\n    sum_of_integers = (n * (n + 1)) // 2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of the jar and y be the mass of one chocolate\n    # From the first condition: x + 5y = 185\n    # From the second condition: x + 17y = 317\n    # We need to find the mass for x + 10y\n    # We solve the two equations to find x and y\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + 5 * y, 185)\n    equation2 = Eq(x + 17 * y, 317)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We use the found values for x and y to calculate the mass for 10 chocolates\n    mass_10_chocolates = solutions[x] + 10 * solutions[y]\n\n    return mass_10_chocolates\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(ana, olaf + 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    equation3 = Eq(ana, 150)\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    kristoff_ana_difference = solutions[kristoff] - solutions[ana]\n\n    return kristoff_ana_difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    return 113 - 29\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700\n    sugar_concentration = 0.32\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of apples, y be the number of pears, z be the number of mangoes\n    x, y, z = symbols('x y z')\n\n    # given cost of each apple\n    cost_per_apple = 0.60\n    \n    # equations based on the problem statement\n    # John bought 4/5 as many pears as apples and 2/5 as many mangoes as apples\n    eq1 = Eq(y, (4/5) * x)\n    eq2 = Eq(z, (2/5) * x)\n    \n    # cost ratios\n    # The ratio of the amount of money she spent on the apples : pears = 3:2\n    # The ratio of the amount of money she spent on the pears : mangoes = 1:5\n    # cost of pears = cost of apples * (2/3)\n    # cost of mangoes = cost of pears * 5\n    eq3 = Eq(y * cost_per_apple * (2/3), z * cost_per_apple * 5)\n    \n    # total cost\n    # cost of apples + cost of pears + cost of mangoes = 150\n    eq4 = Eq(x * cost_per_apple + y * cost_per_apple * (2/3) + z * cost_per_apple * 5, 150)\n\n    # solving equations\n    solutions = solve((eq1, eq2, eq3, eq4), (x, y, z))\n\n    # calculating the total number of fruits\n    total_fruits = solutions[x] + solutions[y] + solutions[z]\n\n    return total_fruits\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 1/10\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_trees = 21\n    road_length = 800\n    # The number of intervals is one less than the number of trees\n    intervals = total_trees - 1\n    distance_between_trees = road_length / intervals\n    return distance_between_trees\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Since the number is divisible by 2, the last digit must be 0 or 5. Since it's divisible by 5 as well,\n    # the last digit must be 5 (since 0 would not make it the smallest possible number).\n    last_digit = 5\n    \n    # Since the number is divisible by 3, the sum of all digits must be a multiple of 3.\n    # The current sum of known digits is 1 + 9 + 9 + 2 = 21. To keep the number as small as possible,\n    # we want the smallest three-digit number ABC which, when added to 21, results in a sum that is\n    # a multiple of 3.\n    # Starting from 000 and considering the number should also be divisible by 11, we will find the\n    # smallest ABC that satisfies both conditions.\n    \n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if ((21 + A + B + C) % 3 == 0) and ((A - B + C) % 11 == 0):\n                    # Complete the number with the determined digits\n                    smallest_number = int(f\"1992{A}{B}{C}{last_digit}\")\n                    return smallest_number\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    # Hazel's age in three years will be 9\n    hazel_age_in_three_years = 9\n    # Therefore, Hazel's current age is 9 - 3 = 6 years\n    hazel_current_age = hazel_age_in_three_years - 3\n    \n    # Jessica is 3 years younger than Hazel\n    jessica_current_age = hazel_current_age - 3\n    \n    # Their total age next year will be one more than their current ages\n    total_age_next_year = (hazel_current_age + 1) + (jessica_current_age + 1)\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    avg_second_half_per_month = 65\n    months_in_second_half = 6\n    \n    total_second_half = avg_second_half_per_month * months_in_second_half\n    total_year = total_first_half + total_second_half\n    avg_per_month = total_year / 12\n    \n    return avg_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = \"ELEMENT\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    total_letters = len(word)\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    \n    ans = factorial(total_letters) // denominator\n    return ans\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = (last_term - first_term) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    avg_total = 92\n    avg_first_five = 94\n    num_assignments = 6\n    \n    total_score_first_five = avg_first_five * (num_assignments - 1)\n    total_score_all = avg_total * num_assignments\n    score_sixth_assignment = total_score_all - total_score_first_five\n    \n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    purchase_price_per_pair = 65\n    selling_price_per_pair = 74\n    profit_per_pair = selling_price_per_pair - purchase_price_per_pair\n    total_profit = 440\n    remaining_pairs = 5\n\n    pairs_sold = total_profit // profit_per_pair\n    initial_pairs_purchased = pairs_sold + remaining_pairs\n    \n    return initial_pairs_purchased\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    halfway_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    duration = end_time - halfway_time\n    start_time = halfway_time - duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    # Let x be the number of cars in the car park at the beginning\n    x = symbols('x')\n    # Equation: initial cars + 8 - 10 = 30 cars\n    equation = Eq(x + 8 - 10, 30)\n    # Solve the equation\n    num_cars_beginning = solve(equation, x)\n    return num_cars_beginning[0]\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x * 2 / 4) ** 2 - 4) / 10, 6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water = 59\n    daily_fill = 10\n    nightly_leak = 3\n    first_day_fill = 3\n    days_passed = 1  # Since 3 liters were filled on the first day\n\n    current_fill = first_day_fill\n    while current_fill < total_water:\n        current_fill += daily_fill  # Fill during the day\n        if current_fill >= total_water:\n            break\n        current_fill -= nightly_leak  # Leak during the night\n        days_passed += 1\n\n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "from math import gcd\n\ndef solution():\n    amy_visit = 24\n    ginny_visit = 36\n\n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n    \n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    # Each minute has 60 seconds\n    # Half an hour is 30 minutes\n    total_seconds = 30 * 60\n\n    # Start by writing digits, beginning with 1\n    digits_written = 0\n    last_number_written = 0\n\n    # Write numbers until time is up\n    while total_seconds > 0:\n        last_number_written += 1\n        digits_in_number = len(str(last_number_written))\n        \n        # If we have enough time to write the next number, do it\n        if total_seconds - digits_in_number >= 0:\n            digits_written += digits_in_number\n            total_seconds -= digits_in_number\n        else:\n            # If not enough time, break the loop\n            break\n\n    # The last number that we just finished writing is the answer\n    return last_number_written\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n    \n    smallest_amount = min(amounts)\n    largest_amount = max(amounts)\n    \n    return largest_amount - smallest_amount\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # The time when Kit stopped playing games\n    end_time = datetime.strptime('11:20 PM', '%I:%M %p')\n\n    # Total gaming time in minutes\n    gaming_duration = timedelta(minutes=225)\n\n    # Calculate the start time by subtracting the gaming duration from the end time\n    start_time = end_time - gaming_duration\n\n    # Format the answer in 12-hour clock\n    ans = start_time.strftime('%I:%M %p').lstrip('0')\n\n    return ans\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # The worst case scenario for Darrell to get the first green one is if he picks all the non-green marbles first.\n    non_green_marbles = 5 + 9 + 2  # Blue + White + Black\n    # He must then draw one more marble to guarantee it is green.\n    draws_to_get_green = non_green_marbles + 1\n    return draws_to_get_green\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    total_toys = 27\n    total_minutes = 3\n    \n    toys_per_minute = total_toys / total_minutes\n    \n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_distance_climbed = 6 * 6 + 2  # climbed for 6 days + 7th day\n    remaining_distance = 20 - total_distance_climbed\n    nightly_slide = 6 - remaining_distance\n\n    return nightly_slide\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for _ in range(years):\n        # Each year, population triples\n        initial_rabbits *= 3\n        # Then half of the rabbits die\n        initial_rabbits //= 2\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    candy_speed = symbols('candy_speed')\n\n    # Ivy had a 6-minute head start -> 6 * (candy_speed + 20)\n    ivy_travelled_for_18_minutes = candy_speed + 20\n    candy_travelled_for_12_minutes = candy_speed\n\n    # After 18 minutes for Ivy and 12 minutes for Candy, they met.\n    # Total distance is 1200 meters\n    # Ivy travelled for 6 minutes more than Candy at the start\n    equation = Eq(6 * ivy_travelled_for_18_minutes + 12 * ivy_travelled_for_18_minutes + 12 * candy_travelled_for_12_minutes, 1200)\n\n    # Solve the equation to find the speed of Candy\n    candy_speed_sol = solve(equation, candy_speed)\n\n    return candy_speed_sol[0]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # Since there are 8 players and each of them records a different number of wins,\n    # the number of possible wins ranges from 0 to 7.\n    # In a single round-robin tournament, each player plays against every other player once.\n    # Therefore, there are a total of 8 choose 2 matches.\n    # The champion is the player with the most wins, which would be 7 wins.\n    # This is because if the champion had less than 7 wins,\n    # there would be another player with the same number of wins, which contradicts the given condition.\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    curry_puffs_per_hour = 24 / 2\n    hours_for_120_curry_puffs = 120 / curry_puffs_per_hour\n    return hours_for_120_curry_puffs\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    initial_nickel_6mg = 6 * 0.45\n    initial_nickel_14mg = 14 * 0.60\n\n    total_nickel = initial_nickel_6mg + initial_nickel_14mg\n    total_metal = 6 + 14\n\n    nickel_concentration = (total_nickel / total_metal) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    # Target sum for the four numbers\n    target_sum = 13\n    # Generate all possible combinations with replacement\n    possible_combinations = combinations_with_replacement(range(1, target_sum), 4)\n    # Initialize the maximum product and the best combination\n    max_product = 0\n    best_combination = None\n    # Go through each combination and calculate the product\n    for combination in possible_combinations:\n        if sum(combination) == target_sum:\n            product = 1\n            for number in combination:\n                product *= number\n            # Update maximum product if current product is greater\n            if product > max_product:\n                max_product = product\n                best_combination = combination\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n\n    while mother_age != 3 * (edward_age + years):\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 1 / 6  # 1 cm to 6 m\n    length_on_plan_cm = 5  # length of the playground on the plan in cm\n\n    real_length_m = length_on_plan_cm / scale_ratio\n\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):  # 2-digit numbers start from 10\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    n = 0\n    while True:\n        if ((n+1) ** 2 - n ** 2) == 2 * n + 1 and (n ** 2 + 11) + 12 == (n + 1) ** 2:\n            return n ** 2 + 11\n        n += 1\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    total_money = 250\n    cost_per_box = 6\n\n    num_boxes = total_money // cost_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    # Let x be the number of girls\n    # average_per_boy = 30\n    # average_per_girl = 20\n    # overall_average = 26\n    # number_of_boys = 15\n    # number_of_girls = x\n\n    # The total number of apples picked by boys\n    total_apples_by_boys = 30 * 15\n\n    # Overall average is equal to the total apples picked divided by the total number of students (boys + girls)\n    # 26 = (total_apples_by_boys + 20 * x) / (15 + x)\n    # 26 * (15 + x) = total_apples_by_boys + 20 * x\n    # 390 + 26 * x = total_apples_by_boys + 20 * x\n    # 6 * x = total_apples_by_boys - 390\n    x = (total_apples_by_boys - 390) / 6\n\n    return x\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n    pencil = pen - 0.5\n    equation = Eq(pen + pencil, 4.5)\n\n    solution = solve(equation, pen)\n\n    return solution[0]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_in_tank_A = 673\n    oil_in_tank_B = oil_in_tank_A + 56\n    return oil_in_tank_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n    cost_basketball = 30\n    cost_volleyball = 25\n    \n    for basketballs in range(total_items + 1):\n        volleyballs = total_items - basketballs\n        if basketballs * cost_basketball + volleyballs * cost_volleyball == total_cost:\n            return basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15e6  # 15 million pounds\n    \n    richie_share = total_wealth * (1 / 3)\n    remaining_after_richie = total_wealth - richie_share\n    \n    thrifty_share = remaining_after_richie * (1 / 2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    \n    bounty_share = remaining_after_thrifty * (2 / 5)\n    archie_share = remaining_after_thrifty - bounty_share\n    \n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let s, c, m be the mass of strawberry, chocolate, and mint candies respectively\n    s, c, m = symbols('s c m')\n    \n    # Create equations based on the problem statement\n    # The total mass of all containers is 1371 g\n    total_mass_equation = s + c + m - 1371\n    \n    # The amount of mint candies to chocolate candies always stayed the same, let's assume it's 1 for now\n    # This means c = m because their ratio is 1:1, or m - c = 0 for the equation\n    mint_chocolate_ratio_equation = m - c\n\n    # The fractions given for strawberry candies: \n    # 2/5, 2/7, 2/9. Let's assume the total is in multiples of 5 * 7 * 9 to simplify the problem\n    total_multiple = 5 * 7 * 9\n\n    # Now we calculate the strawberry fraction for each container size\n    container_1 = (2/5) * total_multiple\n    container_2 = (2/7) * total_multiple\n    container_3 = (2/9) * total_multiple\n\n    # The sum of strawberry candies should be equal to the variable s\n    strawberry_sum_equation = container_1 + container_2 + container_3 - s\n\n    # Solve the system of equations\n    solutions = solve((total_mass_equation, mint_chocolate_ratio_equation, strawberry_sum_equation), (s, c, m))\n\n    # Return the mass of all strawberry candies\n    return solutions[s]\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    given_to_lily = (3 / 4) * total_candy\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = (1 / 3) * remaining_after_lily\n    remaining_candy = remaining_after_lily - given_to_brother\n\n    return remaining_candy\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    total = 0\n    for denominator in range(2, 61):\n        for numerator in range(1, denominator):\n            total += numerator / denominator\n    return total\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume x to be the money Roy originally had and y to be what Dennis had.\n    x, y = symbols('x y')\n\n    # Total sum of money they initially had.\n    total_money_eq = Eq(x + y, 340)\n\n    # After spending the money, their remaining money.\n    roy_left_eq = Eq(x - (2/3)*x, y/2)\n    dennis_left_eq = Eq(y - (1/4)*y, 2*(x - (2/3)*x))\n\n    # Solving the system of equations.\n    solutions = solve((total_money_eq, roy_left_eq, dennis_left_eq), (x, y))\n\n    # Calculate the money Dennis had left in the end.\n    dennis_left = solutions[y] - (1/4)*solutions[y]\n    \n    return dennis_left\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of curry puffs sold each day\n    friday, saturday, sunday = symbols('friday saturday sunday')\n\n    # Given conditions\n    equation1 = Eq(saturday, friday + 27)  # Saturday sales\n    equation2 = Eq(sunday, friday - 14)    # Sunday sales\n    equation3 = Eq(friday + saturday + sunday, 475)  # Total sales\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (friday, saturday, sunday))\n\n    # Return the number of curry puffs sold on Friday\n    return solutions[friday]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits = 300\n    total_pages = 0\n    d = 1  # d will indicate the number of digits per number (1 for 1-9, 2 for 10-99, etc.)\n\n    while digits > 0:\n        numbers_in_this_group = 9 * (10 ** (d - 1))\n        if digits >= d * numbers_in_this_group:\n            digits -= d * numbers_in_this_group\n            total_pages += numbers_in_this_group\n        else:\n            total_pages += digits // d\n            digits = 0\n        d += 1\n\n    return total_pages\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    num_balls = 8\n    ball_cost = 20.45\n    num_hula_hoops = 6\n\n    total_ball_cost = num_balls * ball_cost\n    total_hula_hoop_cost = total_cost - total_ball_cost\n    cost_per_hula_hoop = total_hula_hoop_cost / num_hula_hoops\n\n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drank = 9\n    container_volume = 5\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drank\n    \n    containers_needed = -(-remaining_juice // container_volume)  # ceiling division\n   \n    return containers_needed\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "import math\n\ndef solution():\n    num = 693\n    prime_factors = {}\n    i = 2\n    # Factorize 693 into its prime factors\n    while i * i <= num:\n        while num % i == 0:\n            prime_factors[i] = prime_factors.get(i, 0) + 1\n            num //= i\n        i += 1\n    if num > 1:\n        prime_factors[num] = prime_factors.get(num, 0) + 1\n    # Find the smallest number that makes the product a perfect square\n    smallest_num = 1\n    for prime, exponent in prime_factors.items():\n        if exponent % 2 != 0:\n            # The exponent of the prime factor in the perfect square must be even.\n            smallest_num *= prime\n    return smallest_num\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # The unit digit of a power can be determined by looking at the cyclical pattern of the unit digits.\n    # For 13^n the pattern of the unit digits repeats every 4: 3, 9, 7, 1...\n    # For 17^n the pattern of the unit digits repeats every 4: 7, 9, 3, 1...\n    # For 4^n the pattern is just 4 and 6 alternating.\n\n    # Find the unit digit of 13^242\n    cycle_13 = [3, 9, 7, 1]\n    unit_digit_13 = cycle_13[242 % 4 - 1]\n\n    # Find the unit digit of 17^379\n    cycle_17 = [7, 9, 3, 1]\n    unit_digit_17 = cycle_17[379 % 4 - 1]\n\n    # Find the unit digit of 4^2012\n    unit_digit_4 = 6 if 2012 % 2 == 0 else 4\n\n    # Calculate the unit digit of the entire expression\n    ans = (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n\n    return ans\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    ans = solve(equation, A)\n    return ans[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mary, alexis, charlotte_initial, charlotte_final = symbols('mary alexis charlotte_initial charlotte_final')\n    \n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(mary, (7/5) * alexis)\n    \n    # Marry and Alexis each gave 20 % of their stickers to Charlotte\n    mary_gave = mary * 0.20\n    alexis_gave = alexis * 0.20\n    \n    # Charlotte's stickers increased by 80 %\n    equation2 = Eq(charlotte_final, charlotte_initial * 1.80)\n    \n    # Resulting equation after giving the stickers away\n    mary_remaining = mary - mary_gave\n    equation3 = Eq(charlotte_final, charlotte_initial + mary_gave + alexis_gave)\n    \n    # Mary had 20 stickers more than Charlotte in the end\n    equation4 = Eq(mary_remaining, charlotte_final + 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (mary, alexis, charlotte_initial, charlotte_final))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3.5  # 3 1/2 kg in decimal\n    cost_per_kg = 7.50\n    note_value = 20\n\n    total_cost = steak_weight * cost_per_kg\n    additional_money_needed = total_cost - note_value if total_cost > note_value else 0\n\n    return additional_money_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position_from_start = 12\n\n    eddie_position_from_end = total_people - eddie_position_from_start + 1\n\n    return eddie_position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mass of a light bowling ball\n    x = symbols('x')\n    \n    # Equation: 6x + 6(2x) = 65.7\n    equation = Eq(6*x + 6*(2*x), 65.7)\n    \n    # Solve for x\n    mass_light_ball = solve(equation, x)[0]\n    \n    # Return the mass of a light bowling ball to the nearest kg\n    return round(mass_light_ball.evalf())\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    total_money = 705\n    benson_spend = 34\n    clive_spend = 63\n    \n    # Benson and Clive had a total of $705\n    equation1 = Eq(benson + clive, total_money)\n    # After spending, they had the same amount of money left\n    equation2 = Eq((benson - benson_spend), (clive - clive_spend))\n    \n    solutions = solve((equation1, equation2), (benson, clive))\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    # The first digit and the last digit must be the same.\n    # The second digit and the third digit must also be the same.\n    # So the number of palindromic numbers is 9*10, because:\n    # The first digit can be any digit from 1 to 9 (0 is not allowed because then it wouldn't be a four-digit number).\n    # The second digit can be any digit from 0 to 9.\n    # The third and fourth digits are determined by the first two digits.\n    for first_digit in range(1, 10):\n        for second_digit in range(0, 10):\n            count += 1  # Each combination of first and second digits represents a unique palindromic number\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    sum_scores = sum(scores)\n    num_scores = len(scores)\n    average_score = sum_scores / num_scores\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    # Average of A and B is 50, so the equation is (A+B)/2 = 50\n    equation1 = Eq((A + B) / 2, 50)\n    \n    # Average of B and C is 43, so the equation is (B+C)/2 = 43\n    equation2 = Eq((B + C) / 2, 43)\n    \n    # Average of A and C is 45, so the equation is (A+C)/2 = 45\n    equation3 = Eq((A + C) / 2, 45)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Calculate the average of A, B and C\n    avg_abc = (solutions[A] + solutions[B] + solutions[C]) / 3\n    \n    return avg_abc\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_A = 42\n    sweets_B = 4 * sweets_A\n    sweets_C = 2 * sweets_B\n    return sweets_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    denise_pens = symbols('denise_pens')\n    total_pens = 126\n\n    # Jay has 6 times as many pens as Denise\n    jay_pens = 6 * denise_pens\n\n    # Equation representing the total number of pens they have together\n    equation = Eq(jay_pens + denise_pens, total_pens)\n\n    # Solve the equation\n    solutions = solve(equation, denise_pens)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_price_each = 1.26\n    total_chocolate_cost = 5 * chocolate_price_each\n    cookie_price_each = total_chocolate_cost / 6\n    total_money = 9.05\n    cost_of_cookies = 4 * cookie_price_each\n    money_left = total_money - cost_of_cookies\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # every 3 boys share one ball\n    equation1 = Eq(boys / 3 + girls / 2, 250)\n    # total number of children is 650\n    equation2 = Eq(boys + girls, 650)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # After 25 girls leave, the number of girls is 2/3 the number of boys\n    equation1 = Eq(girls - 25, 2/3 * boys)\n\n    # After 15 boys leave for soccer, the number of girls equals the number of boys remaining\n    equation2 = Eq(girls - 25, boys - 15)\n\n    # Solve the system of equations for the number of girls and boys\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    # Calculate the total number of students in Think Classroom at first\n    total_students = solutions[girls] + solutions[boys]\n\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let x be the number of $0.10 coins and y be the number of $0.50 coins\n    # According to the problem, the ratio x:y is 8:3\n    # Total value of the coins is $75.90\n    # The total value is 0.10*x + 0.50*y\n    \n    # From the ratio 8:3, we can express y in terms of x as y = 3x/8\n    \n    # Now we can set up an equation based on the total value\n    # 0.10*x + 0.50*(3x/8) = 75.90\n    \n    # Solving this equation for x:\n    x = symbols('x')\n    equation = Eq(0.10*x + 0.50*(3*x/8), 75.90)\n    solution_x = solve(equation, x)[0]\n    \n    # Now find y using the value of x\n    y = (3 * solution_x) / 8\n    \n    # The total value of the $0.50 coins is y * 0.50\n    total_value_50_cent = y * 0.50\n    \n    return total_value_50_cent\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    # Use sympy to solve the linear equation\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the number in the box\n    number_in_box = symbols('number_in_box')\n    \n    # Equation based on the given problem\n    equation = Eq(8 * 11, number_in_box * 9 + 34)\n    \n    # Solve the equation\n    solution = solve(equation, number_in_box)\n    \n    # Get the result\n    ans = solution[0]\n    \n    return ans\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temperature = 8\n    temperature_drop = 12\n    midnight_temperature = midday_temperature - temperature_drop\n    return midnight_temperature\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    total_spent = 6400\n    discount_percent = 80 / 100\n    original_price = total_spent / (1 - discount_percent)\n    money_saved = original_price - total_spent\n    return money_saved\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_area = 7 * 7\n    hole_area = 3 * 3\n    area_with_hole = base_area - hole_area\n    height = 320 / area_with_hole\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as a single entity, plus the other 6 people, we have 7 entities.\n    # There are 7! ways to arrange these 7 entities in a line.\n    arrangement_line = factorial(7)\n    \n    # Since it's a circular table, fixing one person's position, we have 6! ways to arrange\n    # the rest entities around the table to avoid equivalent rotations.\n    arrangement_circle = arrangement_line // 7\n    \n    # Amy and Judy can switch places with each other, so we need to multiply by 2.\n    ans = arrangement_circle * 2\n\n    return ans\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    # We are following the strategy that maximizes the number of pieces with each cut.\n    # f(n) = f(n-1) + n, where f(1) = 0, f(2) = 1\n    # We seek n such that f(n) >= 46\n    num_pieces = 0\n    num_cuts = 0\n    while num_pieces < 46:\n        num_cuts += 1\n        num_pieces += num_cuts\n    return num_cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Initialize variables to keep track of the total numbers counted and the current maximum number in a sequence\n    total_numbers = 0\n    max_in_sequence = 0\n\n    # Find the sequence group in which the 2008th number is located and the count within that group\n    while total_numbers < 2008:\n        max_in_sequence += 1\n        total_numbers += max_in_sequence\n        \n    # Calculate the position of the 2008th number within the final sequence group\n    position_in_group = 2008 - (total_numbers - max_in_sequence)\n\n    # The position within the group corresponds to the actual number at the 2008th position\n    return position_in_group\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    x_count = 3\n    y_count = 10\n\n    # The total weight of xs is 3 times the weight of one x\n    total_x_weight = x_weight * x_count\n\n    # Since 3 xs balance with 10 ys, the weight of one y is:\n    y_weight = total_x_weight / y_count\n\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    # Calculate the sum of the arithmetic sequence\n    num_terms = (26 - 6) // 4 + 1\n    sum_seq = (num_terms * (6 + 26)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n\n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n\n    solutions = solve((equation, Eq(tomatoes, 27)), (tomatoes, cucumbers))\n\n    return solutions[cucumbers]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 5, 9]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 4):  # Hundreds digit must be at least 1, since we want a three-digit number\n        for j in range(0, 10):\n            for k in range(0, 10):\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_numbers = sum(number for number in range(1, 101) if number % 5 == 2)\n    return sum_numbers\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    n = 31\n    a16 = 100\n    d = 6\n\n    # To find the first term (a1), we use the formula for the nth term of an arithmetic sequence:\n    # an = a1 + (n - 1) * d, where an is the nth term, a1 is the first term, and d is the common difference.\n    # Therefore a1 = an - (n - 1) * d.\n    a1 = a16 - (16 - 1) * d\n\n    # The sum of the first n terms of an arithmetic sequence is given by the formula:\n    # Sn = n/2 * (2a1 + (n - 1) * d), where Sn is the sum of the first n terms.\n    Sn = n/2 * (2*a1 + (n - 1) * d)\n\n    return int(Sn)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    bags_given_away = total_bags // 3\n    bags_left = total_bags - bags_given_away\n    return bags_left\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Chris must ensure that after his turn, the number of matches remaining\n    # is a multiple of 3 to follow a winning strategy.\n    # This is because if the number of matches is a multiple of 3,\n    # whatever Dylan picks, 1 or 2 matches, Chris can pick the remaining\n    # matches to make the total number removed 3.\n    # Initial number of matches is 7.\n\n    # To find out how many Chris should take, we try to make the remaining\n    # number of matches a multiple of 3.\n\n    for x in range(1, 3):  # Chris can take away 1 or 2 matches\n        if (7 - x) % 3 == 0:\n            return x  # Return how many matches Chris must take away\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0:  # A must not be 0 as it is the first digit\n            num = A * 100 + B * 10 + C\n            return num\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        ABAC = 1000 * A + 100 * B + 10 * A + C\n        DBEC = 1000 * D + 100 * B + 10 * E + C\n        ACEDC = 10000 * A + 1000 * C + 100 * E + 10 * D + C\n        \n        if ABAC + DBEC == ACEDC:\n            if A != 0 and D != 0:  # First digit of a number cannot be 0\n                return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    from datetime import datetime\n\n    start_time = datetime.strptime('9:23 AM', '%I:%M %p')\n    end_time = datetime.strptime('1:06 PM', '%I:%M %p')\n    \n    time_difference = end_time - start_time\n    minutes_difference = time_difference.total_seconds() / 60\n    \n    return int(minutes_difference)\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    # Using Difference of Two Squares Formula: a^2 - b^2 = (a + b)(a - b)\n    a = 64\n    b = 36\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assume we have the number of restaurants he can choose from\n    # Without additional information, we default to a scenario where there is only one choice\n    num_restaurants = 1\n    \n    # If there is more information available that was not provided,\n    # this solution will need to be adjusted accordingly\n    return num_restaurants\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(1, 9))\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = sum([53 - 50 + 47 - 44 + 41 - 38 + 35 - 32 + 29 - 26 + 23])\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    result = 6.6 * 30\n    return result\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_family_members = 4\n    average_age = 25\n    harry_age = 14\n    harrys_mom_age = 36\n    harrys_sister_age = 10\n\n    total_age = total_family_members * average_age\n    harrys_dad_age = total_age - (harry_age + harrys_mom_age + harrys_sister_age)\n\n    return harrys_dad_age\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from sympy import symbols, solve\n\ndef solution():\n    A, E = symbols('A E')\n\n    # Create the equation based on the problem statement\n    # All different letters stand for different digits\n    # A != E and both are digits, 0-9\n    expr = 1000*A + 100*E + 10*E + A\n    \n    # Since A and E are different digits, loop through possible values\n    # A cannot be 0 because it's the leftmost digit in a 4-digit number\n    for a in range(1, 10):\n        for e in range(0, 10):\n            if a != e:\n                # If A and E are different, compute the expression value\n                ans = expr.subs({A: a, E: e})\n                if len(str(ans)) == 4:\n                    # Making sure the result is a 4-digit number\n                    # If it is, return the solution as this is the correct combination\n                    return ans\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Convert all measurements to centimeters\n    measurements_cm = [8300, 200, 8, 50]  # 83m=8300cm, 200cm=200cm, 8cm=8cm, 0.5m=50cm\n    \n    # Approximate height of a classroom door in cm (usually around 200cm or a little more)\n    door_height_cm = 200  \n    \n    # Find the measurement closest to the door height\n    closest = min(measurements_cm, key=lambda x: abs(x - door_height_cm))\n    \n    return closest\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    digits = 0\n    pages = 0\n\n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages - 1 if digits > total_digits else pages\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for the cost of each item\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Total cost\n    total_cost = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    # Combined cost of a notebook and a pencil case\n    cost_notebook_pencil = Eq(notebook + pencil_case, 6)\n    # Combined cost of a pencil case and an eraser\n    cost_pencil_eraser = Eq(pencil_case + eraser, 8)\n\n    # Solve the system of equations\n    solutions = solve((total_cost, cost_notebook_pencil, cost_pencil_eraser), \n                      (notebook, pencil_case, eraser))\n\n    # Return the cost of a pencil case\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    # Let's denote the initial amount of money Leonard had as 'money'\n    # After spending 5/12 for lunch, he is left with 7/12 of his initial money\n    # In the evening, he spends 2/7 of the remainder (7/12 of initial money) on dinner\n    # Which means he is left with 5/7 of the remainder (7/12 of initial money)\n    # So, the equation representing the final amount is:\n    # (5/7 * 7/12 * money) = 45\n    # Simplifying the left side of the equation gives us:\n    # (5/12 * money) = 45\n    # Now, we solve for the initial amount of money 'money'\n    \n    # The remaining fraction (5/7 of 7/12) is simplified to 5/12\n    money = 45 * 12 / 5\n    return money\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 1524\n    digits_per_page = 0\n    page_count = 0\n    page_number = 1\n    \n    while total_digits > digits_per_page:\n        digits_in_current_page_number = len(str(page_number))\n        digits_per_page += digits_in_current_page_number\n        if total_digits >= digits_per_page:\n            page_count += 1\n        page_number += 1\n        \n    return page_count\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance_to_market = 48\n    walking_speed = 8  # meters per minute\n    correct_time = distance_to_market / walking_speed\n    return correct_time\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * 4) / 2  # Total number of games played\n    wins_by_others = 2 + 1 + 4 + 3  # Sum of wins by the four mentioned players\n    gina_wins = total_games - wins_by_others\n\n    return int(gina_wins)\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    ans = 2 * (largest - smallest)\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Given values\n    angle = 20\n    distance = 400  # measured along the slope\n    coefficient_of_friction = 0.2\n    acceleration_due_to_gravity = 9.81  # m/s^2\n\n    # Calculate the acceleration along the slope\n    # Acceleration a = g * (sin(angle) - mu * cos(angle))\n    # where mu is the coefficient of kinetic friction\n    angle_radians = math.radians(angle)\n    acceleration = acceleration_due_to_gravity * (math.sin(angle_radians) - coefficient_of_friction * math.cos(angle_radians))\n\n    # Using the kinematic equation: v^2 = u^2 + 2as, where u(initial velocity) = 0\n    # We need to find v (final velocity)\n    initial_velocity = 0\n    final_velocity_square = initial_velocity**2 + 2 * acceleration * distance\n    final_velocity = math.sqrt(final_velocity_square)\n\n    return final_velocity\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_price = 5\n    bag_price = 10\n    total_spent = 300\n\n    # Calculate the price for one group (4 shirts + 1 bag)\n    group_price = (4 * shirt_price) + bag_price\n\n    # Calculate the number of groups\n    num_groups = total_spent / group_price\n\n    # Calculate the number of shirts bought (4 shirts per group)\n    shirts_bought = num_groups * 4\n\n    return int(shirts_bought)\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    men_rate = 1 / (6 * 5)  # Each man's rate of working per day\n    women_rate = 1 / (5 * 6)  # Each woman's rate of working per day\n    \n    combined_rate = 10 * men_rate + 5 * women_rate  # Combined rate of 10 men and 5 women\n    days_to_complete = 1 / combined_rate  # Total days to complete the job\n    \n    return days_to_complete\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # there were thrice as many boys as girls in a gathering\n    equation1 = Eq(boys, 3 * girls)\n\n    # After 12 boys left and another 20 girls joined, there was an equal number of boys and girls\n    equation2 = Eq(boys - 12, girls + 20)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    total_points = 155\n    difference = 15\n    questions = 10\n    correct_points = 10\n    wrong_points = -5\n\n    # Let x be the number of correct answers Avril got\n    # Then Avril's score is 10x + wrong_points * (questions - x)\n    # Eddie's score would be total_points - Avril's score\n    # Eddie's score is also Avril's score + difference\n    # So we can set up the equation:\n    # Avril's score + difference = total_points - Avril's score\n    # 10x - 5(questions - x) + difference = total_points - (10x - 5(questions - x))\n    # Now we solve for x\n    for x in range(questions + 1):\n        avril_score = correct_points * x + wrong_points * (questions - x)\n        eddie_score = avril_score + difference\n        if avril_score + eddie_score == total_points:\n            return x\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of Type A, B, and C coffee beans\n    type_a = 56\n    type_b = 96\n    type_c = 120\n\n    # Find the greatest common divisor of the three weights\n    greatest_mass = gcd(gcd(type_a, type_b), type_c)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    num = 35\n    factors = {i for i in range(1, num + 1) if num % i == 0}\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    min_apples = (30 // 6) + 1  # Each child gets at least one, divide and find smallest max\n    return min_apples\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    anna_age_now = 8\n    mother_age_now = 44\n\n    equation = Eq(mother_age_now + years, 3 * (anna_age_now + years))\n\n    solution_years = solve(equation, years)\n\n    return solution_years[0]\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    for rabbits in range(13):  # There can't be more than 12 chickens or rabbits.\n        chickens = 12 - rabbits  # As we have total 12 animals.\n        if 4 * rabbits + 2 * chickens == 34:  # Rabbits have 4 legs, chickens have 2.\n            return rabbits\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # Let's denote the number of apples as 'a'.\n    # According to the problem, the number of bananas will be '2a', and the number of oranges will be '3a'.\n    # The total number of fruits used is a + 2a + 3a = 24.\n\n    # So, we need to solve for 'a' in the following equation\n    # 1a + 2a + 3a = 24\n    # 6a = 24\n    # a = 24 / 6\n    a = 24 // 6  # Using integer division\n\n    # Now, bananas used will be 2 times the number of apples\n    bananas = 2 * a\n\n    return bananas\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_weight = sugar_weight + water_weight\n    \n    concentration = (sugar_weight / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Let num_long_may be the number of long ribbons May has\n    num_short_may = 7\n    num_long_nancy = 18\n    total_length_diff = 2.4 * 100  # convert meters to cm\n    length_short = 40\n    length_long = 70\n\n    total_length_nancy = num_long_nancy * length_long\n    # Using the fact that May has an equal number of ribbon pieces as Nancy\n    # So, total ribbons with May = short ribbons with May + long ribbons with May\n    # total ribbons with May = long ribbons with Nancy + short ribbons with Nancy (let's define this as `num_short_nancy`)\n    # Hence, we get the equation:\n    # (num_short_may * length_short) + (num_long_nancy * length_long) + total_length_diff = (long ribbons with Nancy + short ribbons with Nancy) * length_short\n    # Rearrange the terms to get num_short_nancy:\n    num_short_nancy = (num_short_may * length_short + num_long_nancy * length_long + total_length_diff) / length_short\n    total_ribbons_may = num_short_may + num_long_nancy  # since number of ribbons is the same for both\n\n    return total_ribbons_may\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for number in range(99, 9, -1):\n        if (number % 4 == 3) and (number % 5 == 3):\n            return number\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    total_paint = 1  # in litres\n    red_ratio = 3\n\n    red_paint = (red_ratio / total_ratio) * total_paint\n\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    # Using sympy to solve the system of equations\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of books in A and B\n    A, B = symbols('A B')\n    \n    # If A gives B 40 books, they would have the same number of books\n    equation1 = Eq(A - 40, B + 40)\n    \n    # If B gives A 40 books, then the amount of books of A is 3 times that of B\n    equation2 = Eq(A + 40, 3 * (B - 40))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    existing_numbers = [9, 7, 5, 8, 4, 1, 8]\n    total_numbers = 8\n    mean_value = 6\n\n    total_sum = mean_value * total_numbers\n    sum_existing = sum(existing_numbers)\n    missing_number = total_sum - sum_existing\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_amount = 68\n    amount_given_to_sister = total_amount / 4\n    amount_left = total_amount - amount_given_to_sister\n    return amount_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    \n    # Equation 1: there are twice as many blue balls as red balls\n    equation1 = Eq(blue, 2 * red)\n    \n    # Equation 2: There are 18 balls altogether\n    equation2 = Eq(blue + red, 18)\n    \n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    apples = 50\n    children = 8\n    \n    min_apples_for_max_child = (apples - (children * (children - 1) // 2)) // children + (children - 1)\n    return min_apples_for_max_child\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    ans = 53 * 84\n    return ans\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02  # kg\n    mass_per_packet = total_mass_for_12_packets / 12\n    mass_for_4_packets = mass_per_packet * 4\n    return mass_for_4_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Let's denote the cost of each compact disc as c.\n    # Since we have 4 identical compact discs and each tape costs £9,\n    # the total cost for 3 tapes is 3*9 = £27.\n    # According to the given information we have:\n    # 4*c + 27 = 83\n\n    # To find the cost of each compact disc, we solve for c:\n    # 4*c = 83 - 27\n    # 4*c = 56\n    # c = 56 / 4\n    # c = 14\n\n    c = (83 - (3 * 9)) / 4\n    return c\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # From the problem statement:\n    # pasture can feed 8 cows for 10 days,\n    # pasture can feed 4 cows for 15 days.\n\n    # Let's denote the total amount of grass in the pasture as G.\n    # 8 cows for 10 days consume G amount of grass.\n    # So 1 cow for 10 days consumes G/8 amount of grass.\n    # Hence, 1 cow for 1 day consumes G/80 amount of grass.\n\n    # Similarly, from the second scenario:\n    # 4 cows for 15 days consume G amount of grass.\n    # So 1 cow for 15 days consumes G/4 amount of grass.\n    # Hence, 1 cow for 1 day consumes G/60 amount of grass.\n\n    # Both conditions describe the consumption of grass by 1 cow for 1 day,\n    # therefore G/80 = G/60. However, this cannot be true since the pasture’s\n    # ability to feed cows cannot be two different values simultaneously.\n    # Thus, there is an inconsistency in the given information unless the pasture\n    # regenerates grass or there is missing information such as different cow sizes, \n    # which is not provided.\n\n    # Hence, we can't proceed further without an assumption of no grass regeneration \n    # and identical cows. Operating under this assumption leads to no solution\n    # because the problem statement is self-contradictory.\n\n    return \"No solution due to inconsistency in the problem statement.\"\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'x' be the true result and 'y' be the dividend\n    x, y = symbols('x y')\n    \n    # Equation representing the false calculation (without the decimal point in the divisor)\n    false_result_eq = Eq(x * 122, y)\n    \n    # Equation representing the true calculation (with the decimal in the divisor)\n    true_result_eq = Eq(x * 1.22, y)\n    \n    # The false result is 99.396 less than the true result\n    error_eq = Eq(x + 99.396, false_result_eq.lhs / 1.22)\n    \n    # Solve the equations  \n    solutions = solve((false_result_eq, error_eq), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let's denote x as the number of cards Hisham originally had\n    # Melissa had twice as many cards as Hisham, so she had 2x cards\n    # The sum of their cards is x + 2x = 876\n    # 3x = 876, so x, the number of cards Hisham had, is 876 / 3\n    hisham_cards = total_cards // 3\n    melissa_cards = total_cards - hisham_cards\n\n    # Now we need to find out how many cards Melissa should give to Hisham\n    # so that both have the same number of cards. Since they should\n    # end up with the same number of cards, we can set the final number of cards\n    # for each to half of the total amount.\n    final_each = total_cards // 2\n\n    # Therefore, the number of cards Melissa should give to Hisham is the difference\n    # between what Melissa originally had and what she should have in the end.\n    cards_given = melissa_cards - final_each\n\n    return cards_given\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    equation = Eq(3 * number + 8, 35)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n    greatest_common_divisor = gcd(boys, girls)\n    \n    return greatest_common_divisor\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000\n    return n\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Since we know the 4th and 6th terms, we need to find the 5th and then the 7th term.\n    # Let the 1st term = a and the 2nd term = b. Then we get the following equations\n    # For the 4th term: a + b + (a + b) + (2a + b) = 6 (4th term is the sum of the 2nd and 3rd terms)\n    # For the 6th term: b + (a + b) + (2a + b) + (3a + 2b) + (5a + 3b) = 15 (6th term is the sum of the 4th and 5th terms)\n    # Simplifying:\n    # 3a + 2b = 6\n    # 8a + 5b = 15\n\n    # Solving for a and b:\n    # Multiply the first equation by 5 and the second by 2 to eliminate b:\n    # 15a + 10b = 30\n    # 16a + 10b = 30\n    # Subtracting the first equation from the second:\n    # a = 0\n    \n    # Substitute a in the first equation:\n    # 3(0) + 2b = 6 => b = 3\n\n    # Knowing the first two terms now, we can calculate the sequence:\n    a = 0\n    b = 3\n    c = a + b # 3rd term\n    d = b + c # 4th term\n    e = c + d # 5th term\n    f = d + e # 6th term\n    g = e + f # 7th term\n\n    return g\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    total = 0\n    for i in range(7):\n        numerator = 1\n        denominator = (1 + i * 5) * (6 + i * 5)\n        total += numerator / denominator\n    ans = 36 * total\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    all_combinations = sorted([''.join(map(str, p)) for p in permutations(digits)])\n    for combo in all_combinations:\n        if int(combo) % 2 != 0:\n            return int(combo)\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    men_rate = 1 / (24 * 16)  # work rate of one man per day\n    women_rate = 1 / (16 * 24)  # work rate of one woman per day\n\n    combined_rate = 10 * men_rate + 6 * women_rate  # combined work rate of 10 men and 6 women per day\n\n    days_to_complete = 1 / combined_rate  # total days to complete the job\n\n    return days_to_complete\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for num in range(0, 41):\n        if '2' in str(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # number of regions formed by n rectangles can be given by\n    # R(n) = n^2 + n + 1, where n is the number of rectangles\n    rectangles = 4\n    regions = rectangles**2 + rectangles + 1\n    return regions\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n    \n    julie_salary = solve(equation, julie)\n    \n    total_salary = marion.subs(julie, julie_salary[0]) + ethan.subs(julie, julie_salary[0]) + julie_salary[0]\n    \n    return total_salary\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    total_ways = permutations(5, 5)  # Total ways to arrange 5 people in a line\n    middle_ways = permutations(4, 4)  # Ways to arrange the other 4 when Eddie is in the middle\n\n    # Calculate the number of ways excluding Eddie being in the middle\n    ways_with_restrictions = total_ways - middle_ways\n\n    return ways_with_restrictions\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Given a geometric sequence: 96, n, 24, 12, 6\n    # To find n, we can use the property of geometric sequences that the ratio between consecutive terms is constant.\n    # Let the common ratio be r. Then n / 96 = 24 / n = 12 / 24 = 6 / 12\n    # Solve the first equality for n: n = 96 * r\n    # Solve the second equality for r: r = 24 / n = 24 / (96 * r)\n    # Simplify to find r: r^2 = 24 / 96\n    r = (24 / 96) ** 0.5\n    # Now we can solve for n using the common ratio.\n    n = 96 * r\n    return n\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the sum of money Hamid had at first\n    x = symbols('x')\n\n    # According to the problem, we set up the equation\n    # x - (1/3)x - 56 = (3/8)x\n    # Simplify the equation to find x\n    equation = Eq(x - (1/3) * x - 56, (3/8) * x)\n    \n    # Solve for Hamid's original amount of money\n    original_sum = solve(equation, x)[0]\n    \n    # Calculate how much Hamid spent altogether\n    spent = original_sum - ((3/8) * original_sum)\n    \n    return spent\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    min_value = float('inf') # set to an infinitely large number\n\n    # Iterate through all permutations of numbers 1 to 9\n    for perm in permutations(range(1, 10)):\n        number = int(''.join(map(str, perm))) # convert tuple to int\n        \n        # Check if the number is divisible by 11\n        if number % 11 == 0:\n            min_value = min(min_value, number)\n            break # the first one in lexicographical order will be the smallest\n\n    return min_value\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3 # m/s\n    train_speed = 57 # m/s\n    time_to_pass = 10 # seconds\n\n    # Relative speed of the train with respect to Eddie\n    relative_speed = train_speed + eddie_speed\n\n    # Length of the train\n    train_length = relative_speed * time_to_pass\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences based on the problem statement\n    congruences = [(1, 5), (2, 7), (3, 9)]\n\n    # Using the Chinese Remainder Theorem to find the smallest such number\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "def solution():\n    operations = ['+', '*']\n    max_value = 0\n\n    for op1 in operations:\n        for op2 in operations:\n            for op3 in operations:\n                expression = f\"1{op1}2{op2}3{op3}4\"\n                current_value = eval(expression)\n                if current_value > max_value:\n                    max_value = current_value\n    \n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_questions = 12\n    correct_score = 8\n    incorrect_penalty = 3\n    total_score = 63\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = (correct_answers * correct_score) - (incorrect_answers * incorrect_penalty)\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    total_distance = 700 + 900\n    speed = 400  # m/min\n\n    time = total_distance / speed  # time required in minutes\n\n    return time\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    first_five_sum = 10\n    last_five_sum = 120\n    total_numbers = 60\n\n    # Let's find the average of the first and last 5 numbers\n    avg_first_five = first_five_sum / 5\n    avg_last_five = last_five_sum / 5\n\n    # The average of the entire sequence is the average of the averages\n    avg_entire_seq = (avg_first_five + avg_last_five) / 2\n    \n    # The sum of an arithmetic sequence is the average times the number of terms\n    sum_of_sequence = avg_entire_seq * total_numbers\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    # Initialize the sequence with the first two integers\n    a, b = 3, 10\n\n    # Calculate the 1997th integer using the formula\n    # Each term is the sum of the previous two\n    for i in range(1995):  # We already have the first two terms, so 1997 - 2\n        a, b = b, a + b  # Update the sequence terms\n\n    # Return the remainder of the 1997th term when divided by 3\n    return b % 3\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the number of stickers Peter had initially\n    x = symbols('x')\n    # Sam had x + 40 stickers initially\n\n    # After the exchange, Sam gave away 20% of his stickers to Peter\n    sam_after_giving = (x + 40) * (1 - 0.20)  \n    # Peter gave away 25% of his received stickers (which is 20% of Sam's) to Sam\n    peter_after_giving = x * (1 - 0.25) + (x + 40) * 0.20 * 0.25\n    \n    # Now, Sam has 96 stickers more than Peter\n    equation = Eq(sam_after_giving, peter_after_giving + 96)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let hazel's current age be h and her mom's current age be m\n    h, m = symbols('h m')\n    \n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(h + 12, 3 * h)\n    \n    # On Hazel’s 18th birthday, her mom will be three times her age then\n    equation2 = Eq(m + 18 - h, 3 * 18)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (h, m))\n    \n    # Hazel's mom current age is m\n    return solutions[m]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    years = 0\n\n    while True:\n        years += 1\n        if peter_age + years == (pip_age + years) + (pit_age + years):\n            break\n\n    return peter_age + years\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_series = (n * (n + 1) // 2) ** 2\n    return sum_of_series\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 // 6\n    return ans\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 unique card numbers, so we can draw 13 cards without definitely getting consecutively numbered cards.\n    # However, if we draw one more card (a total of 14 cards), by the pigeonhole principle, we will have at least one pair\n    # of consecutively numbered cards because there are only 13 unique card numbers.\n    # We can ensure to have two consecutive numbers by drawing one more than the unique count of numbers.\n    return 14\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Each sheet has 4 page numbers (front front, front back, back front, back back)\n    # The fifth sheet will have pages (5*2-1, 5*2, 36-(5*2-2), 36-(5*2-1))\n    # So we calculate the sum of those pages \n\n    page_front_left = 5*2-1  # front left page of the 5th sheet\n    page_front_right = 5*2   # front right page of the 5th sheet\n    page_back_left = 36 - (5*2-2)  # back left page of the 5th sheet, which is the complement to 38 (36+2)\n    page_back_right = 36 - (5*2-1) # back right page of the 5th sheet, which is the complement to 37 (36+1)\n\n    # Sum of all page numbers on the fifth sheet\n    sum_pages = page_front_left + page_front_right + page_back_left + page_back_right\n    return sum_pages\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    answer = 10 * 2\n    return answer\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost price of one laptop and n be the number of laptops\n    x, n = symbols('x n', positive=True, real=True)\n\n    # Selling price of one laptop\n    selling_price = 2000\n\n    # Originally the profit is $60000\n    original_profit = 60000\n\n    # The original cost for all laptops is then (selling_price * n) - original_profit\n    original_total_cost = (selling_price * n) - original_profit\n\n    # The cost of each laptop decreased by 1/5 of the original cost; new cost is 4/5 of x\n    new_cost_per_laptop = 4 / 5 * x\n\n    # The total new cost is the new cost per laptop times number of laptops\n    new_total_cost = new_cost_per_laptop * n\n\n    # New total profit is 30% more than the original profit\n    new_profit = original_profit * 1.3\n\n    # New total selling price is the original selling price for all laptops\n    new_total_selling_price = selling_price * n\n\n    # New total profit is equal to new total selling price - new total cost\n    equation = Eq(new_total_selling_price - new_total_cost, new_profit)\n\n    # Original total cost is x * n (the cost price times the number of laptops)\n    original_cost_equation = Eq(original_total_cost, x * n)\n\n    # Solve the equations for number of laptops n and cost price x\n    solutions = solve((equation, original_cost_equation), (x, n))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    count = 0\n    for number in range(1, 130):\n        count += len(str(number))\n    return count\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    import sympy as sp\n\n    # Let's define the variable for the common difference of the arithmetic progression\n    d = sp.symbols('d', integer=True)\n    # Since the remainders form an arithmetic pattern and they are positive, the first remainder must be at least 1.\n    # As we're looking for the smallest possible M, let's start with the smallest common difference, d = 1.\n    for common_difference in sp.naturals():\n        # Now, calculate the remainders based on the common difference.\n        # Given the constraint that the remainders are increasing, the smallest possible remainder for 7 is 1\n        # Hence, remainder for 9 is (1+d), for a is (1+2d), and for 28 is (1+3d)\n        remainders = [1, 1 + common_difference, 1 + 2 * common_difference, 1 + 3 * common_difference]\n        \n        # It's given that the remainders are for division by 7, 9, a, and 28 respectively.\n        # We are interested in finding the smallest 'a' such that the third remainder is valid\n        for a in sp.naturals(starting_number=2):\n            # Check if 'a' divides the third term cleanly, meaning the third term is an actual remainder\n            if (1 + 2 * common_difference) < a and a % (1 + 2 * common_difference) == 0:\n                # Now calculate the minimum possible M with found values multiplicative system of congruences\n                M = sp.crt([7, 9, a, 28], remainders)[0]\n                if M is not None:\n                    return M\n    return None\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100  # concentration in percentage\n\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    boys = 0\n    girls = 0\n    layer = 0\n    while True:\n        boys_current_layer = (layer * 2 + 1) ** 2 - (layer * 2) ** 2\n        boys += boys_current_layer\n        girls_current_layer = (layer * 2 + 2) ** 2 - (layer * 2 + 1) ** 2 if layer * 2 + 2 > 1 else 0\n        girls += girls_current_layer\n        if boys - girls == 36:\n            break\n        layer += 1\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Number of men originally \n    men_original = 3\n    # Length of trench originally in metres\n    trench_length_original = 120\n    # Number of days taken originally\n    days_original = 2\n    \n    # Number of men now\n    men_now = 4\n    # New length of trench to be dug in metres\n    trench_length_now = 880\n    \n    # Work done by one man in one day for the original length\n    work_per_man_per_day_original = trench_length_original / (men_original * days_original)\n    \n    # Total work needed for the new trench length\n    total_work_now = trench_length_now\n    \n    # Total number of man-days required for the new trench\n    man_days_now = total_work_now / work_per_man_per_day_original\n    \n    # Number of days required for 4 men to dig the new trench\n    days_now = man_days_now / men_now\n\n    return days_now\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of people Gloria can interview in one week as g.\n    g = symbols('g')\n\n    # Ellie can interview 60 people every week.\n    ellie_rate = 60\n\n    # Together they can finish 400 people in 4 weeks so together they interview 100 people per week\n    total_rate = 400 / 4\n\n    # According to the problem, Gloria's rate plus Ellie's rate equals the total rate they can interview together.\n    equation = Eq(g + ellie_rate, total_rate)\n\n    # Solve the equation for 'g' (Gloria's weekly rate)\n    gloria_rate = solve(equation, g)[0]\n\n    # Now calculate how many weeks it will take Gloria to interview all 400 people by herself.\n    weeks_for_gloria = 400 / gloria_rate\n\n    return weeks_for_gloria\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2 * 15 / 5\n    return numerator\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let x be the number of books moved from the first shelf to the second shelf\n    # After moving x books, the first shelf will have (18 - x) books\n    # After moving x books, the second shelf will have (24 + x) books\n    # We want the second shelf to have twice as many books as the first shelf\n    # So we set up the equation (24 + x) = 2 * (18 - x)\n    \n    # Now we solve for x\n    x = symbols('x')\n    equation = Eq(24 + x, 2 * (18 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    num1 = 285 + 6/7\n    num2 = 181 + 10/11\n    num3 = 153 + 12/13\n    denom = 1/7 + 1/11 + 1/13\n\n    result = (num1 + num2 + num3) / denom\n\n    return result\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let x be the total number of pupils in the class\n    # 5 pupils are in the school band\n    # (3/4) * (x - 5) pupils are in the choir\n    # (2/9) * x pupils are neither in the band nor the choir\n    \n    # Then, we have the following equation:\n    # 5 + (3/4) * (x - 5) + (2/9) * x = x\n    # Which can be simplified to:\n    # 5 + (3*x - 15)/4 + (2*x)/9 = x\n    # Multiplying all terms by 36 (the LCM of 4 and 9) to clear denominators, we get:\n    # 5*36 + 9*(3*x - 15) + 4*(2*x) = 36*x\n    # 180 + 27*x - 135 + 8*x = 36*x\n    # 180 - 135 + 35*x = 36*x\n    # 45 = x\n    # Therefore, there are 45 pupils in the class.\n    \n    return 45\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # time in seconds\n    distance = 300  # distance in meters\n\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    for lollipops in range(32, 1000): # Jonathan has at least 32 lollipops, upper bound is arbitrary\n        if (lollipops - 32) % 4 == 0 and (lollipops - 3) % 7 == 0:\n            return lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n    \n    # Assuming x is the number of long tubes and y is the number of short tubes\n    # We can set up a system of equations:\n    # x * 8 (long_tube_capacity) + y * 5 (short_tube_capacity) = 47 (total_balls)\n    # To solve for x, I will iteratively try values for x and solve for y until the total equals 47\n    \n    for x in range(total_balls // long_tube_capacity + 1):  # +1 because range end is exclusive\n        y = (total_balls - (x * long_tube_capacity)) // short_tube_capacity\n        if (x * long_tube_capacity) + (y * short_tube_capacity) == total_balls:\n            return x  # return the number of long tubes as soon as we find a solution\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n\n    difference = (ninth_term - third_term) / (9 - 3)\n    first_term = third_term - (2 * difference)\n\n    eleventh_term = first_term + (11 - 1) * difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define variables\n    felicia_initial, janice_initial = symbols('felicia_initial janice_initial')\n\n    # Janice had 96 bracelets at first\n    janice_initial = 96\n\n    # Equations based on the problem statement\n    equation1 = (felicia_initial * (3/5)) * (2/5)  # Janice bought 2/5 of what Felicia sold\n    equation2 = (felicia_initial - (felicia_initial * (3/5))) / (janice_initial + equation1)  # Ratio equation after selling and buying\n\n    # Solve the ratio equation: final ratio is 5:7\n    felicia_final = solve(5*(janice_initial + equation1) - 7*(felicia_initial - felicia_initial * (3/5)), felicia_initial)\n\n    # Calculate the number of bracelets Janice bought from Felicia\n    bracelets_bought_by_janice = equation1.subs(felicia_initial, felicia_final[0])\n\n    return bracelets_bought_by_janice.evalf()\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    nums_to_sum = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    total_sum = sum([i**3 for i in nums_to_sum])\n    return total_sum\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15 / 100\n    discount_amount = original_price * discount_percentage\n    final_price = original_price - discount_amount\n\n    return round(final_price, 2)\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the true result and y be the other number Will is multiplying with.\n    # Since Will forgot the decimal point, he actually multiplied by 432 instead of 4.32\n    # So, we have the equation x * 432 = x * 4.32 + 2138.4\n    # Simplify to find the value of x\n    \n    # Factor out x from both terms on the right side of the equation\n    # x * (432 - 4.32) = 2138.4\n    x = 2138.4 / (432 - 4.32)\n    \n    return x\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # The differences between each pair of numbers\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n    diff3 = 3670 - 2017\n    \n    # Greatest common divisor function\n    from math import gcd\n    \n    # The greatest common divisor of the differences is a candidate for A\n    # We find gcd of all differences\n    candidate_A = gcd(gcd(diff1, diff2), diff3)\n    \n    # Initialize sum of possible values of A\n    sum_of_A = 0\n    \n    # We can try every divisor of candidate_A\n    for A in range(1, candidate_A + 1):\n        if candidate_A % A == 0:  # Check if it is a divisor\n            if (2017 - A) % A == (2758 - A) % A == (3670 - A) % A:  # Check the condition\n                sum_of_A += A\n    \n    return sum_of_A\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, solve, Eq\n    \n    boys, girls = symbols('boys girls')\n    \n    # Every boy got 5 candies, every girl got 3 candies\n    total_candies = Eq(boys*5 + girls*3, 448)\n    # There were 8 more girls than boys\n    girls_more_than_boys = Eq(girls, boys + 8)\n    \n    # Solving the system of equations for number of boys and girls\n    result = solve((total_candies, girls_more_than_boys), (boys, girls))\n    \n    # Total children will be the sum of boys and girls\n    total_children = result[boys] + result[girls]\n    \n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk, fruit = symbols('milk fruit', positive=True) # Set variables to represent the amounts of each type of candy\n    initial_ratio = Eq(milk / fruit, 7 / 9) # Initial ratio of milk to fruit candies\n    new_ratio = Eq((milk - 8) / fruit, 2 / 3) # Ratio after eating 8 milk candies\n\n    solutions = solve((initial_ratio, new_ratio), (milk, fruit))\n    return solutions[milk]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Calculate the age difference between grandmother and mum\n    age_difference = 2008 - 1996\n\n    # Calculate mum's age when grandmother was 80\n    mum_age_when_grandma_80 = 40 + age_difference\n\n    # Calculate grandmother's age when mum was born\n    grandmothers_age_when_mum_born = 80 - mum_age_when_grandma_80\n\n    return grandmothers_age_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for number in range(4, 51):\n        count += str(number).count('3')\n        \n    return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    total_bottles = 350\n    income = 2012\n    price_lemonade = 4\n    price_plus = 7\n\n    min_plus = (income - total_bottles * price_lemonade) // (price_plus - price_lemonade)\n    \n    return min_plus\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    total_apples_initially = 60\n    apples_per_friend = 4\n    number_of_friends = total_apples_initially / apples_per_friend\n    apples_needed_after_increase = (apples_per_friend + 1) * number_of_friends\n    return int(apples_needed_after_increase)\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # He could take out all red and black socks without getting a pair of white socks\n    max_red_black = 10 + 10\n    # Then he takes out two white socks and gets a pair of white socks\n    white_socks_for_pair = 2\n    \n    # Total socks taken for the worst case scenario\n    ans = max_red_black + white_socks_for_pair\n    return ans\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    # Let x be the number of groups with 4 students and y be the number of groups with 6 students.\n    # We have two equations:\n    # 1) x + y = 24 (total number of groups)\n    # 2) 4x + 6y = 112 (total number of students)\n    # We can solve these equations to find the values of x and y.\n    \n    # Import the sympy library to solve the system of equations\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for x and y\n    x, y = symbols('x y')\n\n    # Define the equations\n    equation1 = Eq(x + y, 24)\n    equation2 = Eq(4*x + 6*y, 112)\n\n    # Use sympy's solve function to solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the value of y, which represents the number of groups with 6 students\n    return solutions[y]\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # The sum of the first three numbers\n    sum_first_three = 3 * 60\n    \n    # The sum of all four numbers\n    sum_all_four = 4 * 90\n\n    # The fourth number is the difference between the sum of all four numbers and the sum of the first three\n    fourth_number = sum_all_four - sum_first_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    metres = 0.52\n    centimetres_per_metre = 100\n    centimetres = metres * centimetres_per_metre\n    return centimetres\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all possible permutations of the digits 1-9\n    for perm in permutations(range(1, 10), 3):\n        # Assume a 3-digit format ABC is formed by the permutation\n        A, B, C = perm\n        # Compute the number\n        number = 100 * A + 10 * B + C\n        # Check if B is twice of A and C is thrice of A\n        if B == 2 * A and C == 3 * A:\n            return number\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # 3 fish for 2 rabbits -> 1 rabbit is 3/2 fish\n    fish_per_rabbit = 3 / 2\n    \n    # 3 rabbits for 4 packs of wheat -> 1 pack of wheat is 3/4 rabbits\n    rabbits_per_wheat = 4 / 3\n    \n    # Find how many fish equal 1 pack of wheat\n    fish_per_wheat = fish_per_rabbit * rabbits_per_wheat\n    \n    # Calculate the number of fish for 8 packs of wheat\n    fish_for_eight_wheat = fish_per_wheat * 8\n    \n    return fish_for_eight_wheat\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_spent = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_spent\n    return change\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    handbag_price_after_discount = 428\n    handbag_discount_rate = 0.20  # 20%\n    purse_discount_rate = 0.28  # 28%\n    total_discount = 121\n    \n    # Calculate price before the discount\n    handbag_price_before_discount = handbag_price_after_discount / (1 - handbag_discount_rate)\n    \n    # Calculate handbag discount in dollars\n    handbag_discount = handbag_price_before_discount * handbag_discount_rate\n    \n    # Calculate purse discount in dollars\n    purse_discount = total_discount - handbag_discount\n    \n    # Calculate the price of the purse before the discount\n    purse_price_before_discount = purse_discount / purse_discount_rate\n\n    return purse_price_before_discount\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n\n    for i in range(2, n + 1):\n        while i % 5 == 0:\n            count += 1\n            i //= 5\n\n    return count\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # The recurring decimal 0.A22A22A22... can be split into blocks of \"A2\".\n    # The sum of the first 20 digits of this number is 80.\n    # A block \"A2\" has a sum of digits = A + 2.\n    # Since we have 20 digits, we have 20 / 2 = 10 blocks.\n    # Therefore, the sum of 10 blocks is 80, which means each block sums to 8.\n    # Hence A + 2 = 8, which means A = 8 - 2 = 6.\n    \n    A = 6\n    return A\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    climb_per_day = 4\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    return times_per_week * weeks\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Time spent jogging (from 6:30 AM to 7:00 AM is 0.5 hours)\n    time_jogging = 0.5\n    jogging_speed = 6  # miles per hour\n\n    # Distance covered while jogging\n    jogging_distance = time_jogging * jogging_speed\n\n    # Time spent walking (from 7:00 AM to 8:00 AM is 1 hour)\n    time_walking = 1.0\n    walking_speed = 5  # miles per hour\n\n    # Distance covered while walking\n    walking_distance = time_walking * walking_speed\n\n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original amount of money Elvin had\n    x = symbols('x')\n    \n    # Elvin spent $120 on a chair\n    money_after_chair = x - 120\n    \n    # Elvin spent 40% of the remainder on a jacket\n    money_after_jacket = money_after_chair - 0.40 * money_after_chair\n    \n    # Elvin had 30% of his original amount left after shopping\n    equation = Eq(money_after_jacket, 0.30 * x)\n    \n    # Solve for the original amount\n    original_amount = solve(equation, x)\n    \n    return original_amount[0]\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(6, 10)\n    return ans\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # Applying the Pigeonhole Principle\n    min_books_in_top_layer = (total_books + (layers - 1)) // layers\n    return min_books_in_top_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    # Let x be the original number of books.\n    # Total cost of the original books is 3.5x.\n    # After buying 2 books at $6 each, the total cost is 3.5x + 2*6.\n    # The average cost after buying the additional books is $4.\n    # The new total number of books is x + 2.\n    # The equation based on average cost is:\n    # (3.5x + 2*6) / (x + 2) = 4\n    \n    # We need to solve for x:\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3.5*x + 2*6) / (x + 2), 4)\n    num_books_original = solve(equation, x)[0]\n    \n    # Total number of books is original books plus 2 more\n    total_books = num_books_original + 2\n    \n    return total_books\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundred in [1, 2, 3]:\n        for ten in [0, 1, 2, 3]:\n            for one in [0, 1, 2, 3]:\n                if hundred != ten and hundred != one and ten != one:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # it is -4\n\n    # The nth term (a_n) of an arithmetic sequence can be expressed as:\n    # a_n = a_1 + (n - 1) * d\n    # To find the first negative term, we need to solve a_n < 0:\n    # 0 > 50 + (n - 1) * (-4)\n    # (n - 1) * (-4) < -50\n    # n - 1 > 50 / 4\n    # n > 12.5\n\n    # Since n must be an integer, we take the next integer greater than 12.5\n    # which is 13. However, we are looking for the number of terms before the\n    # first negative term, so we subtract 1 from 13.\n    n = 13 - 1\n\n    return n\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the pieces of candy Rachel has\n    # Let a represent the pieces of candy Alice has\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they will have the same amount\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 pieces, Rachel has 3 times as many as Alice\n    equation2 = Eq((r - 8) / 3, a - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of pieces they originally had\n    total_candy = solutions[r] + solutions[a]\n\n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_in_kg = 1.2\n    weight_per_piece_in_g = 30\n    total_pieces = (weight_in_kg * 1000) / weight_per_piece_in_g\n    return int(total_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # Convert liters to quarts (1 liter = 1.05669 quarts)\n    coke_liters = 2.5\n    liters_to_quarts = coke_liters * 1.05669\n    \n    # Capacity of cup in quarts\n    cup_capacity = 0.5\n    \n    # Calculate the number of cups\n    num_cups = liters_to_quarts / cup_capacity\n    \n    # Round to nearest integer\n    return round(num_cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    from itertools import permutations\n\n    B, D = 2, 0\n\n    possible_digits = [1, 3, 4, 5, 6, 7, 8, 9]\n    for A, C, E, F in permutations(possible_digits, 4):\n        ABCDEF = A*100000 + B*10000 + C*1000 + D*100 + E*10 + F\n        EFABCD = E*100000 + F*10000 + A*1000 + B*100 + C*10 + D\n        if 5 * ABCDEF == 6 * EFABCD:\n            return 1000*F + 100*A + 10*C + E\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Calculate distances traveled during each segment of Star's morning exercise\n\n    # From 6:30am to 7:30am\n    jogging_time = 1  # hours\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # From 7:30am to 9:30am\n    walking_time = 2  # hours\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of wrappers Belle has be represented by 'b'\n    # Angel initially has 5/6 as many wrappers as Belle, so Angel has (5/6)*b wrappers\n    # After Angel throws away 58 wrappers, she has 75% as many wrappers as Belle\n    # Therefore, we have the equation (5/6)*b - 58 = 0.75*b\n    angel, belle = symbols('angel belle')\n    equation = Eq((5/6)*belle - 58, 0.75*belle)\n    \n    # Solve the equation for 'b'\n    belle_wrappers = solve(equation, belle)\n    \n    # As we're looking for the number of wrappers Belle has, return the result for 'b'\n    return belle_wrappers[0]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    \n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    dad_current_age, son_current_age = symbols('dad_current_age son_current_age')\n    \n    # Eq1: 6 years ago, dad's age was 5 times son's age\n    equation1 = Eq(dad_current_age - 6, 5 * (son_current_age - 6))\n    \n    # Eq2: The sum of the current ages of dad and son is 78\n    equation2 = Eq(dad_current_age + son_current_age, 78)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dad_current_age, son_current_age))\n    \n    # Get the dad's current age\n    dad_age = solutions[dad_current_age]\n    \n    return dad_age\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of children and total amount of money\n    children = symbols('children')\n    \n    # Create equations based on the problem statement\n    # If there was 20p more, each child would receive 70p\n    equation1 = Eq((70 * children) - 20, 0)\n    \n    # If each child was to receive 60p, 2.10 GBP would be left\n    equation2 = Eq((60 * children) + 210, 0)\n\n    # We find the children amount by solving the first equation\n    num_children = solve(equation1, children)\n    # We can ignore the second equation since we only are solving for the number of children\n    \n    return num_children[0]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for vase1 in range(1, 10):\n        for vase2 in range(1, 10):\n            for vase3 in range(1, 10):\n                if vase1 + vase2 + vase3 == 10 and len({vase1, vase2, vase3}) == 3:\n                    count += 1\n    return count // 6  # Dividing by the number of permutations for each combination\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    current_balance = -76.20\n    payment_received = 120.75\n    new_balance = current_balance + payment_received\n    return new_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime(2023, 3, 2)\n    end_date = datetime(2023, 4, 15)\n    \n    duration = end_date - start_date\n    return duration.days\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10): # Trying all possible digits for the tens place\n        for j in range(0, 10): # Trying all possible digits for the hundreds place, and so on\n            original_number = int(f\"{i}{j}9\")\n            new_number = int(f\"9{i}{j}\")\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    # Since Eddie is on the left end, we don't consider him in the permutations.\n    # Avril has a fixed position next to Eddie, so we treat Eddie and Avril as one unit.\n    # We now have 5 students plus the Eddie-Avril unit to arrange in a line, totaling 6 positions.\n    \n    # Number of ways to arrange 6 positions (5 students + Eddie-Avril unit) is 6!\n    import math\n    arrangements = math.factorial(6)  # 6 positions can be arranged in 6! ways\n    \n    return arrangements\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Worst case scenario calculations.\n    # Dilly has to pick all gloves of one color and all gloves of one hand before being sure to get a matching pair.\n    # Pick all blue gloves (1 left-hand + 3 right-hand) = 4 gloves\n    # And picking all left-hand gloves (1 blue + 2 green) = 3 gloves\n    # That's a total of 7, and the next glove Dilly picks must make at least one matching pair.\n    \n    return 7 + 1  # Adding one to the worst case to ensure a pair.\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    initial_cost = 200\n    percentage_increase = 45\n    cost_2021 = initial_cost * (1 + percentage_increase / 100)\n    return cost_2021\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    total_numbers = 8\n    mean_value = 6\n    \n    # Calculate sum of known numbers\n    sum_known = sum(known_numbers)\n    # Calculate total sum that all numbers should add up to\n    total_sum = mean_value * total_numbers\n    # Finding the missing number by subtracting known sum from total sum\n    missing_number = total_sum - sum_known\n\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Initial distance covered when digging every 3m\n    initial_distance_covered = 3 * 30  # 30 holes at 3m spacing\n\n    # Remaining circumference after 30 holes\n    remaining_circumference = 300 - initial_distance_covered\n\n    # Number of 5m-spaced holes to dig in the remaining circumference\n    num_additional_holes = remaining_circumference // 5\n\n    return num_additional_holes\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Calculate the number of ways to reach the fifth step\n    # He can take either 1,1,1,1,1 or 1,1,1,2 or 1,1,2,1 or 1,2,1,1 or 2,1,1,1 or 2,2,1 (1 step at a time or 2 steps at a time combinations)\n    ways_to_5 = 1 + 4 + 6 + 4 + 1  # This is the sum of the ways to take 1 to 4 one-steps and the rest two-steps\n    \n    # Calculate the number of ways to go from the fifth step to the tenth step\n    # Similar approach like before, now he has 5 more steps, so we count the combinations to reach 5 steps\n    # He can take 1,1,1,1,1 or 1,1,1,2 ..., with the same pattern as before\n    ways_from_5_to_10 = ways_to_5  # The same number of ways as reaching the fifth step\n\n    # The total number of ways to climb the stairs is the product of the two independent parts\n    total_ways = ways_to_5 * ways_from_5_to_10\n\n    return total_ways\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_sweets = solutions[rachel] + solutions[alice]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n    \n    ans = pasta_choices * sauce_choices * topping_choices\n    return ans\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    # Initialize the number of cookies A might have\n    cookies = 1\n\n    # Use a loop to find the least number that satisfies all conditions\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = sum(i for i in range(1, 51) if '3' in str(i))\n    return erased_sum\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # Using brackets, maximize the effect of multiplication and minimize the effect of subtraction\n    # Prioritize multiplying large numbers and subtract later\n    # Options for placing brackets: \n    # (15+5) * (5+15) - 6 + 7, 15 + (5*5) + (15-6+7), (15+5*5+15) - (6+7)\n    # Evaluate each option\n    option1 = (15+5) * (5+15) - 6 + 7\n    option2 = 15 + (5*5) + (15-6+7)\n    option3 = (15+5*5+15) - (6+7)\n    \n    # Return the maximum result\n    ans = max(option1, option2, option3)\n    return ans\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    digits = 0\n    page = 0\n    \n    while digits < total_digits:\n        page += 1\n        digits += len(str(page))\n\n    return page\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_avg = 80\n    billy_avg_first_four = 89\n    billy_target_avg = ivan_avg + 10\n    \n    billy_total_for_four = billy_avg_first_four * 4\n    billy_target_total = billy_target_avg * 5\n    \n    billy_score_fifth_assignment = billy_target_total - billy_total_for_four\n    \n    return billy_score_fifth_assignment\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "import math\n\ndef solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = math.ceil(total_length / pipe_length)\n    return num_pipes\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    target_sum = 1000\n    # Since order doesn't matter (1+999 = 999+1), we just have to find pairs\n    # We can have numbers from 1 to 999 (inclusive) to pair with another number for a sum of 1000\n    # Thus, there are 999 possible pairs when considering a pair like (1,999) to be the same as (999,1)\n    # However, since (500, 500) is also a possible combination, we need to count it as well\n    # So we add one more to include the combination where both numbers are the same\n\n    count = (target_sum - 1) // 2 + 1\n    return count\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    first_term = 39 - (7 - 1) * 5  # 7th term, so subtract 6 differences of 5 from 39\n    nth_term = 100  # we need the 100th term\n\n    # Calculate the 100th term using the arithmetic sequence formula: an = a1 + (n-1)d\n    term_100 = first_term + (nth_term - 1) * 5  # difference (d) is 5\n\n    return term_100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(1260)\n    m = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            m *= prime\n    \n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(3, 1000, 28):  # iterate over multiples of 28 starting from 3\n        if i % 4 == 3 and i % 7 == 3:  # check if the remainder is 3 when divided by 4 and 7\n            return i % 28  # return the remainder when divided by 28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    for number in range(10, 100):\n        if number % 8 == 6 and number % 11 == 6:\n            return number\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # The pattern of the last digit of 9 powered to n repeats every two: 9^1 = 9, 9^2 = 81, ...\n    # i.e., the pattern of the last digit is [9, 1].\n    # For 999^99, we only care about the last digit of 9 raised to the power of 99.\n    # 99 % 2 = 1, meaning the last digit of 9^99 is the same as the last digit of 9^1, which is 9.\n    \n    return 9\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n\n    total_spent = table_price + chair_price\n\n    return total_spent\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the average value of the ponies in each stable initially\n    # There are three ponies in each stable. When Rein Beau moves to the large stable,\n    # the average value of each stable increases by £10,000.\n    # Thus, the equation will be (3x + 250000) / 4 = x + 10000 (for the large stable),\n    # and similarly, (2x - 250000) / 3 = x + 10000 (for the small stable where Rein Beau was moved from).\n    # These equations come from the fact that the total value in the stable changes when Rein Beau moves,\n    # affecting the average value for each of the stables.\n\n    x = symbols('x')\n    equation1 = Eq((3 * x + 250000) / 4, x + 10000)\n    equation2 = Eq((2 * x - 250000) / 3, x + 10000)\n\n    # We solve the equations simultaneously to find the value of x\n    solutions = solve((equation1, equation2), (x))\n\n    # The total value of all six ponies is 6 times the average value x before Rein Beau moved\n    total_value = 6 * solutions[x]\n\n    return total_value\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    # From the last step, add 50 to the result to reverse the subtraction\n    result += 50\n\n    # Divide the result by 100 to get the original month and the addition of the day twice\n    month_day_sum = result // 100\n\n    # Subtract the multiply-add sequence from the month to get the day added twice\n    day_twice = month_day_sum % 50\n\n    # Since the day was added twice, divide by 2 to get the actual day\n    day = day_twice // 2\n\n    # To get the month, divide month_day_sum by 50\n    month = month_day_sum // 50\n\n    # Subtract 1 from month to reverse the add 1 step\n    month = (month - 1) // 4\n\n    birthday = (month, day)\n    return birthday\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    total_stickers = 38 + 14 - 9\n    return total_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    remainder = 2**2015 % 3\n    return remainder\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n\n    total_students = 8\n    group_students = 4\n\n    # Treat the group of 4 students as one entity for initial arrangement.\n    # Arrange the 5 entities (4 students group + 4 single students)\n    arrange_entities = factorial(total_students - group_students + 1)\n    \n    # Arrange the 4 students within the group among themselves.\n    arrange_within_group = factorial(group_students)\n\n    # The total arrangements can be found by multiplying arrangements\n    # of the entities and arrangements within the group.\n    total_arrangements = arrange_entities * arrange_within_group\n\n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_weight = sugar + water\n    percent_concentration = (sugar / total_weight) * 100\n    return percent_concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Let the smallest number be x. Then the three consecutive numbers are x, x+1, and x+2\n    # According to the question, the sum of the numbers is 60\n    # Hence, the equation is x + (x+1) + (x+2) = 60\n\n    # We solve this equation to find x and then calculate x+2 to find the largest number\n    x = (60 - 3) // 3  # Subtract 3 to compensate for the +1 and +2, then divide by 3 numbers\n    largest_number = x + 2  # The largest of the three numbers\n\n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let g be the number of gold medals and s be the number of silver medals\n    # We have two equations:\n    # 1) 5g + 4s = 331 (Total points)\n    # 2) g + s = 80 (Total medals)\n    \n    # From equation 2, we can express s in terms of g: s = 80 - g\n    # Substituting s in equation 1, we get:\n    # 5g + 4(80 - g) = 331\n    # 5g + 320 - 4g = 331\n    # g = 331 - 320\n    g = 331 - 320\n    \n    return g\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_lamb = 8.70\n    cost_beef = 9.40\n    kg_lamb = 7\n    kg_beef = 30\n    \n    total_cost = (cost_lamb * kg_lamb) + (cost_beef * kg_beef)\n    \n    return total_cost\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    master, apprentice = symbols('master apprentice')\n    \n    # Equations according to the problem\n    equation1 = Eq(1*master + 3*apprentice, 1/4)\n    equation2 = Eq(2*master + 1*apprentice, 1/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (master, apprentice))\n\n    # Find out how long it takes for 1 apprentice to complete the task alone\n    apprentice_work_rate = solutions[apprentice]\n    time_for_apprentice = 1 / apprentice_work_rate\n\n    return time_for_apprentice\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 / 8\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_spectators = symbols('total')\n\n    # Fraction of spectators that are not children\n    fraction_not_children = 1 - (1/3)\n    # Fraction of spectators that are men\n    fraction_men = (5/8) * fraction_not_children\n    # Fraction of spectators that are women\n    fraction_women = fraction_not_children - fraction_men\n\n    # Equation to establish the relationship between women and total spectators\n    equation = Eq(fraction_women * total_spectators, 80)\n\n    # Solve the equation to find the total number of spectators\n    total_num_spectators = solve(equation, total_spectators)[0]\n\n    return total_num_spectators\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Based on the given operation results:\n    # 5★2 = 8 implies that the operation result is one of the operands plus 3, i.e., 5 + 3\n    # 2★5 = 5 implies that the operation result is the second operand, i.e., 5\n    # 6★3 = 15 implies that the operation result is the first operand plus twice the second operand, i.e., 6 + 2*3\n    # 8★2 =14 implies that the operation result is the first operand plus 3 times 2, i.e., 8 + 3*2\n    \n    # Looking for a pattern, we can see that the operation might depend on the relative sizes of the two operands.\n    # Specifically, if the first operand is larger, we multiply the second operand by the difference of the two\n    # operands plus 1 and add it to the first operand.\n    # Let's apply the rule to find 11★10\n\n    def op(a, b):\n        if a > b:\n            # The first operand is larger, apply the observed rule\n            return a + (a - b + 1) * b\n        else:\n            # The second operand is equal or larger, so return it\n            return b\n            \n    return op(11, 10)\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    elephant_position = 10\n    rabbit_position = 9\n    dolls_between = 5\n\n    total_dolls = (elephant_position + rabbits_position + dolls_between) - 1\n\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    calculation = 0.4 * ((11 / 52) / (2 + 3 / 4) * (4.3 - 1.8)) * 26\n    ans = calculation\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    n, diff = 1, 32\n\n    # Since the difference between boys and girls is 32, we keep searching for \n    # a square number (n*n) where boys (represented by layers of odd squares) are\n    # more than girls (represented by layers of even squares) by 32.\n    while True:\n        girls = sum(4 * (i - 1) for i in range(2, n + 1, 2))\n        boys = n * n - girls\n        if boys - girls == diff:\n            return boys + girls\n        n += 1\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of roses and d be the original number of daisies\n    r, d = symbols('r d')\n\n    # equation1: the total number of flowers originally is 300\n    equation1 = Eq(r + d, 300)\n\n    # equation2: roses increase to 280 and daisies to 180, the increment of both should be equal\n    equation2 = Eq(280 - r, 180 - d)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, d))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes_sum = sum(primerange(50, 61))\n    return primes_sum\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    step = term_difference / (15 - 10)\n\n    nth_term = 102\n    first_term = tenth_term - (10 - 1) * step\n    answer = first_term + (nth_term - 1) * step\n    return answer\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    chinese_books_and_comics = total_books - english_books\n    comics = chinese_books_and_comics // 3\n\n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n    return total_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    total_shots = 10\n    accurate_shots = 6\n    miss_shots = 4\n    score_accurate = 5\n    score_miss = 0\n    \n    total_score = (accurate_shots * score_accurate) + (miss_shots * score_miss)\n    average_score = total_score / total_shots\n    \n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # As each child has to get a different number of apples,\n    # we have to ensure that the difference is at least 1 between any two children.\n    # We start with the minimum distribution which would be 1 apple for the 1st child,\n    # 2 apples for the 2nd, and so on.\n    \n    min_distribution = sum(range(1, 9))  # Sum of apples for minimum distribution to 8 children\n    remaining_apples = 50 - min_distribution\n    \n    # Now we'll give each remaining apple to the child with most apples to minimize their count.\n    # Since we are using 1-based indexing for children, the 8th child (last child) will receive the most.\n    most_apples_child = remaining_apples + 8  # Start with 8 since last child in minimum distribution gets 8 apples\n    \n    return most_apples_child\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Calculate the numerator of the first complex fraction\n    numerator_1 = (1/30) + (1/6)\n    # Calculate the denominator of the first complex fraction\n    denominator_1 = 2/25\n    # Calculate the first complex fraction\n    complex_fraction_1 = numerator_1 / denominator_1\n\n    # Calculate the numerator of the second complex fraction\n    numerator_2 = 2 - (2/3)\n    # Calculate the denominator of the second complex fraction\n    denominator_2 = 8/3\n    # Calculate the second complex fraction\n    complex_fraction_2 = numerator_2 / denominator_2\n\n    # Calculate the final result\n    ans = complex_fraction_1 + complex_fraction_2\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for n in range(2, 8):  # Split the number 8 into n parts\n        for i in range(1, 8):\n            for j in range(1, 8):\n                if i+j == 8 and i != j:\n                    count += 1\n        count //= n  # Divide by n! to remove duplicates due to permutation of same counts\n    return count\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    cost_per_kg = 11.4 / 0.6\n    return cost_per_kg\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # The maximum number of men not wearing bowties nor spectacles \n    # would be the total number of men minus those wearing either one or the other.\n    # Since there might be men wearing both, we subtract only the number of men \n    # wearing spectacles as it's the larger group, to ensure we are not subtracting \n    # anyone twice.\n    \n    not_wearing_either = total_men - spectacles\n\n    return not_wearing_either\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    return -7 - 4\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 0.50 * 0.20 * 350\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    ans = (1/3) * 414\n    return ans\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Initialize the number of apples and children\n    apples = 19\n    children = 5\n\n    # Sort the children in increasing order of apples received\n    # Start by giving each child one apple\n    distribution = [1] * children\n    apples -= children  # Subtract the already distributed apples\n\n    # Maximize the apples for the child who gets the most\n    # by incrementally giving one extra apple to each child in order\n    while apples > 0:\n        for i in range(children):\n            if apples == 0:\n                break\n            distribution[i] += 1\n            apples -= 1\n\n    # The child who gets the most apples is the last child\n    # after sorting the distribution in increasing order\n    largest_number_of_apples = max(distribution)\n    \n    return largest_number_of_apples\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n    \n    # Dan must stand at the furthest left, so we effectively have 4 positions to arrange:\n    # Dan | (Ali Bala) | Charles | Ella\n\n    # Ali and Bala can switch places between themselves, which gives 2! arrangements.\n    ali_bala_arrangements = factorial(2)\n    \n    # Considering Ali and Bala as one unit, we have 3 units to arrange: (Ali Bala), Charles, and Ella.\n    # The number of ways to arrange these 3 units is 3!.\n    other_arrangements = factorial(3)\n    \n    # Total arrangements is the product of the number of ways Ali and Bala can arrange amongst themselves\n    # and the number of ways everyone can arrange after considering Ali and Bala as one unit.\n    total_arrangements = ali_bala_arrangements * other_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Ratio fish to rabbits\n    fish_to_rabbits = 3 / 2\n    # Ratio rabbits to packs of wheat\n    rabbits_to_wheat = 3 / 4\n    # Combine the two ratios to get fish to packs of wheat\n    fish_to_wheat = fish_to_rabbits * rabbits_to_wheat\n\n    # Calculate how many fishes for 8 packs of wheat using the combined ratio\n    fishes_for_eight_wheat = 8 / fish_to_wheat\n\n    return int(fishes_for_eight_wheat)\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    \n    for page in range(1, 141):\n        total_digits += len(str(page))\n        \n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Assuming the original 2-digit number is xy (10x + y)\n    for x in range(1, 10):  # tens place cannot be zero, so it starts from 1\n        for y in range(10):  # ones place can be from 0 to 9\n            incorrect_subtrahend = 10 * x + y\n            correct_subtrahend = 10 * (x - 2) + (y - 1)  # tens place is 3(5-2), ones place is 2(3-1)\n            if incorrect_subtrahend - correct_subtrahend == 36:  # got a difference of 36\n                return correct_subtrahend\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # To ensure we get 3 different colored balls in the worst case scenario\n    # we have to consider the worst case for each color.\n    # We can draw all the white balls (9) and still not have 3 different colors\n    # We can then draw all the yellow balls (6) and still not have 3 colors\n    # So, we need to draw at least one more ball, which has to be red, to ensure\n    # we have all three colors.\n    \n    # Therefore, we need to draw at least all white and yellow balls plus one more.\n    return 9 + 6 + 1\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    numbers = list(range(2, 36, 3))\n    return sum(numbers)\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    number_of_classes = 4\n    average_students_per_class = total_students / number_of_classes\n    return average_students_per_class\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fence = 3.2\n    used_wood = 6.5\n\n    remaining_length = total_length - (used_fence + used_wood)\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    # If Ellen gives away 12 sweets, she has 13/24 of the total.\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n\n    # If Lenny gives away 12 sweets, he has 3/8 of the total.\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    # Sweets are whole numbers, thus convert the solution to integers.\n    ellen_sweets = int(solutions[ellen])\n    lenny_sweets = int(solutions[lenny])\n\n    # Calculate the total number of sweets.\n    total_sweets = ellen_sweets + lenny_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define T as a symbol\n    T = symbols('T')\n\n    # Income and fixed tax rate\n    income = 120000\n    base_income = 50000\n    base_tax_rate = 0.06  # 6%\n    paid_tax = 10000  # Tax paid by the doctor\n\n    # Equation representing the tax calculation\n    tax_equation = Eq(base_income * base_tax_rate + (income - base_income) * ((base_tax_rate + T) / 100), paid_tax)\n\n    # Solve the tax equation for T\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    digits.sort()\n\n    num1 = digits[1] * 10000 + digits[2] * 1000 + digits[3] * 100 + digits[4] * 10 + digits[5]\n    num2 = digits[9] * 10000 + digits[8] * 1000 + digits[7] * 100 + digits[6] * 10 + digits[0]\n\n    return num2 - num1\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    # We're interested in the permutations of presents to the children\n    presents = ['car', 'puzzle', 'calculator', 'p1', 'p2', 'p3', 'p4']  # p1 to p4 represent the other 4 presents\n    children = ['Richard', 'Kevin', 'child3', 'child4', 'child5']\n    \n    # A child can get only 1 present, so we are looking for permutations of length 5\n    present_permutations = list(permutations(presents, 5))\n    \n    valid_combinations = 0\n    # Loop through each permutation and check the conditions for Richard and Kevin\n    for perm in present_permutations:\n        if ('car' in perm[:2] or 'puzzle' in perm[:2]) and ('car' in perm[:2] or 'calculator' in perm[:2]):\n           valid_combinations += 1\n            \n    return valid_combinations\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # The length of the train in meters\n    tunnel_length = 500  # The length of the tunnel in meters\n    speed = 10  # The speed of the train in meters per second\n\n    # The total distance the train needs to travel to completely clear the tunnel\n    total_distance = train_length + tunnel_length\n\n    # The time it takes for the entire train to pass through the tunnel\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    buzz_weight = 450  # Buzz is 450g heavier than Jessie.\n    \n    # Let Jessie_weight = x, hence buzz_weight = x + 450\n    # It is also given that Buzz is three times as heavy as Jessie, hence buzz_weight = 3 * Jessie_weight\n    # Thus, 3 * Jessie_weight = Jessie_weight + 450\n    # 2 * Jessie_weight = 450\n    # Jessie_weight = 450 / 2\n    \n    jessie_weight = buzz_weight / 2  # Calculate Jessie's weight\n    buzz_weight = 3 * jessie_weight  # Calculate Buzz's weight\n    \n    return buzz_weight\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    total_cost = 49 * 2  # cost in pence for 2 pounds of potatoes\n    change = 100 - total_cost  # change from £1 (100p)\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        # Check if all the numbers are prime\n        if isprime(n) and isprime(n + 4) and isprime(n + 6) and isprime(n + 132) and isprime(n + 250):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of each rabbit\n    rabbit1, rabbit2, rabbit3 = symbols('rabbit1 rabbit2 rabbit3')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(rabbit2, rabbit1 + 2)  # second rabbit costs £2 more than the first\n    equation2 = Eq(rabbit3, rabbit2 - 0.80)  # third rabbit costs 80p less than the second\n    equation3 = Eq(rabbit1 + rabbit2 + rabbit3, 19.70)  # total cost of the three rabbits\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (rabbit1, rabbit2, rabbit3))\n\n    # Return the cost of the first rabbit\n    return solutions[rabbit1]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    concentration = 0.15\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    # Jack's speed is 15 km/h and Rose's speed is 10 km/h.\n    # They meet in 10 hours.\n    # The relative speed between them is the difference in their speeds\n    relative_speed = 15 - 10  # km/h\n    # In 10 hours, using the relative speed, we find the distance\n    distance = relative_speed * 10  # distance = speed * time\n\n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((2*i + 2)**2 - (2*i)**2 for i in range(1, 1010))\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    count_7 = 5000 // 7\n    count_13 = 5000 // 13\n    count_7_and_13 = 5000 // (7 * 13)\n    \n    return count_7 + count_13 - count_7_and_13\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        return 0\n    else:\n        return 3 - remainder\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # number of letters in \"SUCCESS\"\n    s_count = 3  # 'S' occurs 3 times\n    other_letters_count = total_letters - s_count  # non 'S' letters\n    # First, count total permutations without the restriction of 'S' together\n    total_permutations = factorial(total_letters) // (factorial(s_count) * factorial(other_letters_count))\n    \n    # Then, count the number of permutations with 'S' together using 'S' as one entity\n    permutations_with_s_together = factorial(other_letters_count + 1) // (factorial(s_count) * factorial(other_letters_count - s_count + 1))\n    \n    # Subtract permutations with 'S' together from total permutations\n    return total_permutations - permutations_with_s_together\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    total_girls = 333\n    total_teachers = 36\n    \n    total_boys = total_pupils - total_girls\n    difference = total_boys - total_teachers\n    \n    return difference\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Let d be the number of days David worked alone\n    # The remaining days, Emma worked alone is then (14 - d)\n    \n    # David's work rate is 1/10 per day\n    # Emma's work rate is 1/18 per day\n    \n    # The total work done is 1 journal, so the equation representing the\n    # work done by David and Emma is:\n    # David's work + Emma's work = 1\n    # (d/10) + ((14 - d)/18) = 1\n    \n    # We solve for d\n    d = symbols('d')\n    equation = Eq((d/10) + ((14 - d)/18), 1)\n    d_days_worked = solve(equation, d)[0]\n\n    # Now, we calculate Emma's working days\n    emma_days_worked = 14 - d_days_worked\n\n    return emma_days_worked\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    # The total cost for the 138 T-shirts\n    total_cost_for_138 = 145 - 56\n\n    # The cost of one T-shirt\n    cost_per_tshirt = total_cost_for_138 / 138\n\n    # The total money Josephine had at first\n    total_money = cost_per_tshirt * 145\n\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    # Calculate the sum of the first 100 natural numbers\n    sum_of_numbers = (100 * (100 + 1)) // 2\n\n    # Calculate the sum of the cubes of the first 100 natural numbers\n    sum_of_cubes = sum_of_numbers ** 2\n\n    # Calculate the result of the division\n    ans = sum_of_cubes / sum_of_numbers\n\n    return ans\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    # Loop through possible values of a (0 to 9)\n    for a in range(10):\n        # Form the number based on the value of a\n        num = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n\n        # Check divisibility by 11 using the divisibility rule\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    tallest_height = 132\n    shortest_height = 124\n    number_of_heights = tallest_height - shortest_height + 1\n    \n    # Using the Pigeonhole Principle, we calculate the minimum class size\n    # to ensure that at least 4 students have the same height.\n    # For n different heights and k required students of at least one the same height,\n    # the minimum class size would be given by n * (k - 1) + 1.\n    \n    class_size = number_of_heights * (4 - 1) + 1\n\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_percentage = 0.12\n    new_pay = original_pay * (1 + increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # Average of a sequence of numbers = sum of numbers / count of numbers\n    # For consecutive even numbers, they form an arithmetic sequence\n    average = 119\n    num_of_numbers = 14\n    \n    # The sum of the 14 numbers is average * num_of_numbers\n    total_sum = average * num_of_numbers\n    \n    # The n-th term of an arithmetic sequence is given by: a_n = a_1 + (n - 1) * d\n    # where a_1 is the first term, d is the common difference which is 2 for even numbers, and n is the number of terms\n    # For even numbers, the common difference d = 2\n    d = 2\n    \n    # In an arithmetic sequence, the average can also be written as the average of the first and last terms\n    # average = (a_1 + a_n) / 2 = (a_1 + [a_1 + (n - 1) * d]) / 2\n    # Simplify to find a_1: average = a_1 + (n - 1) * d / 2\n    # Then: a_1 = average * 2 - (n - 1) * d\n    a_1 = average * 2 - (num_of_numbers - 1) * d\n    \n    return a_1\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel takes 12 minutes to make 4 cuts to get 5 sections\n    time_per_cut = 12 / 4\n    \n    # To cut the piece of wood 5 times, she needs to make 5 cuts\n    time_for_5_cuts = time_per_cut * 5\n\n    return time_for_5_cuts\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 2 * 5  # The smallest even multiple of 5\n    while not (num % 2 == 0 and num % 5 == 0 and (num ** 0.5).is_integer()):\n        num += 2 * 5  # We increase by the LCM of 2 and 5 to maintain the properties\n    ans = num\n    return ans\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount = 126  # In pence, since all coins are in pence.\n\n    # Let the number of each coin type be x.\n    # Then, total value from 2p coins is 2x, and from 5p coins is 5x.\n    # The total amount is the sum of these, which is 7x.\n    # We need to find x such that 7x equals the total amount in pence.\n    # x = total_amount / 7\n\n    x = total_amount // 7  # Use integer division since we can't have a fraction of a coin\n\n    # The total number of coins is the number of 2p coins plus the number of 5p coins,\n    # which is 2x because there are an equal number of each.\n    total_coins = 2 * x\n\n    return total_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # The ones digit of a power of 3 cycles every 4 powers:\n    # 3^1 = 3 (ones digit is 3)\n    # 3^2 = 9 (ones digit is 9)\n    # 3^3 = 27 (ones digit is 7)\n    # 3^4 = 81 (ones digit is 1)\n    # 3^5 = 243 (ones digit is 3), and the cycle starts over.\n\n    # We can find the position in the cycle for 3^2009 by finding the remainder of 2009 divided by 4\n    cycle_position = 2009 % 4\n\n    # Now find the ones digit corresponding to that position in the cycle\n    if cycle_position == 0:\n        ones_digit = 1  # because it corresponds to 3^4\n    elif cycle_position == 1:\n        ones_digit = 3  # because it corresponds to 3^1\n    elif cycle_position == 2:\n        ones_digit = 9  # because it corresponds to 3^2\n    else:\n        ones_digit = 7  # because it corresponds to 3^3\n\n    return ones_digit\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    fraction_boys = 5 / 9\n    fraction_adults = 2 / 5\n    \n    # Let x be the total number of people at the party\n    # Fraction of non-adults (boys + girls) is  1 - fraction_adults\n    # Fraction of girls out of non-adults is 1 - fraction_boys\n    # (1 - fraction_boys) * (1 - fraction_adults) * x = number of girls\n    \n    total_people = girls / ((1 - fraction_boys) * (1 - fraction_adults))\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    # Calculate the full price of an adult ticket based on the child's discount\n    child_discount = 0.25\n    child_ticket_cost = 30\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n\n    # Calculate the price of a senior citizen's ticket based on the discount\n    senior_discount = 0.20\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "def solution():\n    from math import factorial as f\n\n    def nCr(n, r):\n        return f(n) // (f(r) * f(n - r))\n    \n    # Using Stars and Bars Theorem (n+k-1 choose k-1), where n=20 books, k=4 kids\n    ans = nCr(20 + 4 - 1, 4 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_initial = 3\n    days_initial = 30\n    men_final = 2\n\n    # the amount of work done is the same in both cases\n    # work = men * days\n    # so we solve for days_final = (men_initial * days_initial) / men_final\n\n    days_final = (men_initial * days_initial) / men_final\n\n    return days_final\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        ""
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    will_now = symbols('will_now')\n    \n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n    \n    age_now = solve(equation, will_now)\n    \n    return age_now[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # According to the Law of Addition, the total number of ways is the sum of all individual ways.\n    total_ways = trains + cars + boats\n\n    return total_ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    \n    days_needed = total_pages / pages_per_day\n    \n    return int(days_needed)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each child gets at least two books which accounts for 2 * 5 = 10 books.\n    remaining_books = 30 - 10  # 20 books remain to be distributed.\n    \n    # Now we need to find the combinations of distributing 20 books to 5 children\n    # This is equivalent to finding the number of ways to put 20 indistinguishable items into 5 distinguishable boxes\n    # We can use the 'stars and bars' theorem for this: C(n + k - 1, k - 1)\n    n = remaining_books  # The items to distribute.\n    k = 5  # The boxes.\n    \n    # Calculating the number of ways to distribute the books,\n    # whereby (n+k-1) is the number of stars and bars minus 1 (since we have n stars and k-1 bars),\n    # and (k-1) is the number of bars.\n    num_ways = comb(n + k - 1, k - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 40/100 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    \n    return total_soup_ml / 1000  # To convert ml to litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    initial_deposit = 1000\n    interest_rate = 0.06\n    number_of_years = 2\n\n    balance = initial_deposit * ((1 + interest_rate) ** number_of_years)\n\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    tree_interval = 5\n\n    # Include trees at both ends\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent the cost of one jug and c represent the cost of one cup\n    j, c = symbols('j c')\n\n    # The equations based on the given information\n    equation1 = Eq(4*j + 5*c, 85)\n    equation2 = Eq(2*j + 2*c, 40)\n\n    # Solving for j and c\n    solutions = solve((equation1, equation2), (j, c))\n\n    # Returning the cost of one cup\n    return solutions[c]\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "import itertools\nfrom fractions import Fraction\n\ndef solution():\n    operands = (Fraction(1, 2), Fraction(1, 9), Fraction(1, 3), Fraction(1, 8),\n                Fraction(1, 4), Fraction(1, 7), Fraction(1, 5), Fraction(1, 6))\n    operators = ['+', '-', '*', '/']\n    \n    max_sum = 0\n    max_config = None\n    \n    for op_perm in itertools.permutations(operators):\n        local_operands = list(operands)\n        expr_values = []\n        for i in range(0, len(local_operands), 2):\n            a, b = local_operands[i], local_operands[i+1]\n            operator = op_perm[i // 2]\n            \n            if operator == '+':\n                expr_values.append(a + b)\n            elif operator == '-':\n                expr_values.append(a - b)\n            elif operator == '*':\n                expr_values.append(a * b)\n            elif operator == '/':\n                expr_values.append(a / b)\n                \n        current_sum = sum(expr_values)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_config = expr_values\n    \n    second_largest = sorted(max_config)[-2]\n    A, B = second_largest.numerator, second_largest.denominator\n    \n    return A + B\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n\n    total_chairs = classrooms * chairs_per_classroom\n\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Gt\n\n    x = symbols('x')\n    inequality = Gt((x + 3) / (2 * x + 5), 0.505)\n    solution_set = solve(inequality, x)\n    \n    # Since x must be an integer, the largest integer less than 47.5 is 47\n    return int(solution_set[0][1])\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # List of British coins in pence\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Bus fare\n    bus_fare = 44\n    \n    # Find the smallest number of coins\n    remaining_amount = bus_fare\n    num_coins = 0\n    \n    for coin in coins:\n        while remaining_amount >= coin:\n            remaining_amount -= coin\n            num_coins += 1\n            break  # only use each coin once, as the driver gives change\n    \n    return num_coins\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = 0\n    for i in range(1, 89, 2):\n        ans += (i + 1) - i\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_each = total_pupils // 2\n    \n    return pupils_each\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    left = 20.35\n    initial_amount = spent + left\n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # There are 12 points, so there are C(12, 3) ways to choose 3 points to form a triangle.\n    from math import comb\n    total_triangles = comb(12, 3)\n    \n    # For a right angled triangle to form from these points, the right angle must be subtended\n    # by the diameter of the circle. Therefore, the hypotenuse must be the diameter.\n    # Since the circle is divided into 12 equal parts, only the triangles with vertices that\n    # are endpoints of a diameter (i.e., 6 points apart) can be right angled.\n    # For each such diameter, there are 10 remaining points from which to choose the third point.\n    \n    # There are 12/2 = 6 diameters, each can form a right angled triangle with any of the\n    # remaining points, thus:\n    right_angled_triangles = 6 * 10\n\n    # The final answer is the number of right angled triangles formed\n    return right_angled_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Given values\n    tenth_number = 23\n    fifteenth_number = 38\n    \n    # Calculate the common difference\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n    \n    # Find the 12th number\n    twelfth_number = tenth_number + common_difference * (12 - 10)\n    \n    return twelfth_number\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    def term(n):\n        if n == 1:\n            return 1/1\n        numerator = n - 1\n        denominator = ((n - 2) ** 2) + (n - 1)\n        next_denominator = (denominator + n - 1)\n        return numerator / (denominator * next_denominator)\n    \n    ans = sum(term(i) for i in range(1, 9))\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    A = 24\n    B = 36\n    C = 42\n\n    gcd_AB = gcd(A, B)\n    gcd_ABC = gcd(gcd_AB, C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([(200 - 4*i) + (199 - 4*i) - (198 - 4*i) - (197 - 4*i) for i in range(50)])\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    num_children = 200\n    lunch_cost_per_day = 4.36\n    total_days = 5\n\n    total_cost = num_children * lunch_cost_per_day * total_days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    for correct_answers in range(21):\n        wrong_answers = 20 - correct_answers\n        if correct_answers * 5 - wrong_answers * 3 == 76:\n            return correct_answers\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3 / 8) * 16\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    marked_price = 1.20 * cost_price\n    selling_price = 0.90 * marked_price\n    profit = selling_price - cost_price\n\n    equation = Eq(profit, 120)\n    cost_price_solution = solve(equation, cost_price)\n\n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = 5/8 * total_sheep\n    white_sheep = 1/4 * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    group_size = 38\n\n    total_cost = cost_per_person * group_size\n\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n    \n    # sympy.solve returns a list of solutions for the equation\n    ans = solve(equation, x)\n    \n    return ans\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    from math import factorial\n\n    # For four different colored socks, the ways to arrange them is 4! (4 factorial)\n    ways_different_colored_socks = factorial(4)\n\n    # For two pairs of different colored socks (e.g. AA BB), the ways to arrange them are 4! / (2! * 2!)\n    # because each pair of same colored socks can be swapped and it does not change the arrangement\n    ways_same_colored_pairs = factorial(4) / (factorial(2) * factorial(2))\n\n    return ways_different_colored_socks, ways_same_colored_pairs\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = (num_people * (num_people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    total_points = 10\n    points_needed = 3\n\n    ans = comb(total_points, points_needed)\n\n    return ans\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre - beth, 6)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Increase the sweets to Beth by 4 as per the problem statement\n    beth_sweets_now = solutions[beth] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_tall_men = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_tall_men - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    import math\n    # Judy can stand in 2 positions (either end of the line)\n    judy_positions = 2\n    # There are 5 friends who can stand in any of the remaining 5 positions\n    friends_permutations = math.factorial(5)\n    # According to the multiplication principle, multiply the possibilities\n    total_permutations = judy_positions * friends_permutations\n    return total_permutations\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of sweets Andre and Beth have\n    andre, beth = symbols('andre beth')\n\n    # Equation 1: The total number of sweets both had originally\n    equation1 = Eq(andre + beth, 24)\n    \n    # Equation 2: The new total after getting 4 sweets each and Andre having 6 more than Beth\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Return the number of sweets Beth has after receiving the extra sweets\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_5_bars = cost_per_bar * 5\n    return cost_for_5_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari driver finished in second place,\n    # it means one car is still ahead.\n    # Therefore, he must have overtaken 5 cars plus the first-place car.\n    number_of_cars_overtaken = 5\n    final_position = 2\n\n    # The total number of cars is the number he overtook plus\n    # his final position to account for the one car that wasn't overtaken.\n    total_number_of_cars = number_of_cars_overtaken + final_position\n\n    return total_number_of_cars\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    result_after_division = 2\n    result_after_subtraction = result_after_division * 12\n    original_number = result_after_subtraction + 6\n    return original_number\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # The key to this game is to leave a multiple of 4 for the other player,\n    # thereby forcing them into a losing position no matter what they choose.\n    \n    # Anthea should take 1 apple. After that, no matter how many apples Ben takes \n    # (1, 2, or 3), Anthea can always take a number that makes up 4 when added to Ben's take.\n    # This leaves a multiple of 4 for Ben's next turn, keeping him in the losing position.\n    \n    # Anthea's first move:\n    first_move = 1\n\n    return first_move\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')  # Define symbols for table and chair\n\n    # Create equations based on the problem statement\n    # 3 tables have the same mass as 4 chairs\n    equation1 = Eq(3 * table, 4 * chair)\n    \n    # A table is 2kg heavier than a chair\n    equation2 = Eq(table, chair + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the time spent on each subject by each sister\n    younger_maths, younger_english, elder_maths, elder_english = symbols('younger_maths younger_english elder_maths elder_english')\n\n    # Equations based on the problem statement\n    equation1 = Eq(elder_maths, younger_maths + 10)  # Elder sister spent 10 minutes more on maths\n    equation2 = Eq(younger_english, elder_english + 4)  # Younger sister spent 4 minutes more on English\n    equation3 = Eq(elder_maths + elder_english, 88)  # Elder sister spent a total of 88 minutes\n    equation4 = Eq(younger_maths , younger_english - 12)  # Younger sister spent 12 minutes less on maths than English\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (younger_maths, younger_english, elder_maths, elder_english))\n\n    # Return the time spent by the younger sister on English homework\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_sum = 4 * 130\n    remaining_sum = 3 * 110\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from sympy import lcm\n\ndef solution():\n    first_signal = 1  # every minute\n    second_signal = 1.5  # every 1.5 minutes\n    # Convert to seconds to have integer values\n    first_signal_seconds = first_signal * 60\n    second_signal_seconds = int(second_signal * 60)\n    # The combined cycle should be every 9 minutes, converted to seconds\n    target_cycle_seconds = 9 * 60\n    # Find the lowest common multiple of the two cycles\n    lcm_cycle_seconds = lcm(first_signal_seconds, second_signal_seconds)\n    # Now, determine the period for the third light; must be a multiple of lcm_cycle_seconds and less than or equal to 9 minutes\n    for third_signal_seconds in range(30, target_cycle_seconds + 1):\n        if (target_cycle_seconds % third_signal_seconds == 0) and (lcm(lcm_cycle_seconds, third_signal_seconds) == target_cycle_seconds):\n            # Convert back to minutes from seconds for the result\n            return third_signal_seconds / 60\n    return None\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # To ensure victory, Leo must ensure that after his first move,\n    # the total number of apples left is a multiple of 3 (1 or 2 picked by Leo, followed by 2 or 1 picked by Mia).\n    # That way, Leo and Mia will continue to pick 3 apples combined in each round (either 1-2 or 2-1),\n    # and Leo will be the one to pick the last apple.\n    # 14 apples to start with, remove 1 or 2 to leave a multiple of 3 for Mia.\n    \n    total_apples = 14\n    \n    # If Leo takes 1 apple, the remaining apples are 13 (not a multiple of 3)\n    # If Leo takes 2 apples, the remaining apples are 12, which is a multiple of 3.\n    # Therefore, Leo must take 2 apples to force the remaining into a multiple of 3 situation.\n    \n    leo_first_pick = 2 if (total_apples - 2) % 3 == 0 else 1\n    \n    return leo_first_pick\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the value of one silver spoon be s and the value of one gold ring be g.\n    # According to the problem, we get:\n    # 12s = (3/4) * 6g => 4 * 12s = 3 * 6g => 48s = 18g\n    # Now we need to find the number of silver spoons that equal the value of 3 gold rings\n    # Let x be the number of silver spoons that have the same value as 3 gold rings\n    # So we set up the equation: xs = 3g\n    # Using the previous relation between s and g (48s = 18g), we can write g in terms of s:\n    # g = (48s/18)\n    # Now substituting g in the xs = 3g equation\n    # xs = 3 * (48s/18)\n    # Simplify the equation to find x:\n    # x = (3 * 48) / 18\n    x = (3 * 48) / 18\n    \n    return int(x)\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    total_students = 0\n    boys = 0\n    girls = 0\n    layer = 0\n    \n    while boys - girls < 55:\n        layer += 1\n        if layer % 2 == 1:\n            boys += (layer*4)-4 if layer > 1 else 1\n        else:\n            girls += (layer*4)-4\n            \n        total_students = boys + girls\n        \n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_amount = 28\n    total_items = 12\n    price_marker = 3\n    price_brush = 1\n\n    # Assume all purchased items are paintbrushes\n    all_brushes_cost = total_items * price_brush\n    remaining_amount = total_amount - all_brushes_cost\n\n    # Calculate the number of whiteboard markers\n    num_markers = remaining_amount // (price_marker - price_brush)\n\n    return num_markers\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    total_teachers = symbols('total_teachers')\n    \n    # The total weight of all teachers\n    total_weight = 65 * total_teachers\n    \n    # The total weight of male teachers\n    male_teachers = 3\n    male_weight = 75 * male_teachers\n    \n    # The total weight of all female teachers\n    # (total_teachers - male_teachers) represents the number of female teachers\n    female_weight = 60 * (total_teachers - male_teachers)\n    \n    # Create the equation based on the total weight\n    equation = Eq(total_weight, male_weight + female_weight)\n    \n    # Solve the equation for the total number of teachers\n    solutions = solve((equation), (total_teachers))\n    \n    # The number of female teachers is total_teachers - male_teachers\n    female_teachers = solutions[0] - male_teachers\n    \n    return female_teachers\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Since Cora is 5th from the front and 7th from the back,\n    # there must be 4 people in front of her and 6 people behind her\n    vertical_people = 5 + 6\n\n    # Since Cora is 2nd from the left and 4th from the right,\n    # there must be 1 person to her left and 3 people to her right\n    horizontal_people = 2 + 3\n\n    # Total number of students in the formation is the product\n    # of the number of people vertically and horizontally\n    total_students = vertical_people * horizontal_people\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from math import sqrt\n    \n    # First, factorize 33 and 55\n    # 33 = 3 * 11\n    # 55 = 5 * 11\n    \n    # To make the product a square number, each prime factor's exponent must be even\n    # Current exponents (after factorization):\n    # - Prime 3 has exponent 1\n    # - Prime 5 has exponent 1\n    # - Prime 11 has exponent 2\n    \n    # To make them even, we need to multiply by at least:\n    # - 3 to have a 3^2\n    # - 5 to have a 5^2\n    # - No need for additional 11 because 11^2 is already a square\n    # So, we need to multiply by 3 * 5 = 15 to make it a square number\n    \n    m = 3 * 5  # The smallest possible value of m to make the product a square number\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    count = 0\n    for x1 in range(2, 8 - 2 * 2 + 1):  # First plate has at least 2 candies. Two candies are reserved for plate 2 and 3 each.\n        for x2 in range(2, 8 - x1 - 2 + 1):  # Second plate has at least 2 candies. Two candies are reserved for plate 3.\n            x3 = 8 - x1 - x2  # Remaining candies for the third plate.\n            if x3 >= 2:  # Third plate has at least 2 candies.\n                count += 1\n    return count\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n\n    # Since Star has to be the first runner, we only need to arrange the other four teammates.\n    # The number of ways to arrange n items is n factorial (n!).\n    \n    remaining_teammates = 4  # We have 4 teammates left to arrange after Star\n    ans = factorial(remaining_teammates)\n\n    return ans\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(a+1, 10):\n            for c in range(b+1, 10):\n                for d in range(c+1, 10):\n                    increasing = 1000 * a + 100 * b + 10 * c + d\n                    decreasing = 1000 * d + 100 * c + 10 * b + a\n                    sum_of_two = increasing + decreasing\n                    # The sum of the three integers is 26352, find the third integer\n                    third = 26352 - sum_of_two\n                    # Now we will check if the third integer consists of the digits a, b, c, d\n                    third_digits = sorted([int(i) for i in str(third)])\n                    if third_digits == [a, b, c, d]:\n                        return min(increasing, decreasing, third)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def operation(a, b):\n        return (a + b) * (a ^ b)\n    \n    ans = operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # Time to cut each segment\n    time_per_segment = 60 / (31 - 1)\n\n    # Total time to cut into 50 segments\n    total_time = time_per_segment * (50 - 1)\n\n    return total_time\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 3 * 5 * 7\n    return ans if ans < 200 else None\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    original_number = 210 / (1 - 0.30)\n    return original_number\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003\n    while str(year) != str(year)[::-1]:\n        year += 1\n    return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    candy_now, flowers_given = symbols('candy_now flowers_given')\n\n    # Initial number of flowers\n    candy_initial = 11\n    nancy_initial = 9\n\n    # After giving the flowers\n    # Candy's flowers = initial - given\n    # Nancy's flowers = initial + given\n    # Nancy has 8 more flowers than Candy now\n    equation1 = Eq(candy_now, candy_initial - flowers_given)\n    equation2 = Eq(nancy_initial + flowers_given, candy_now + 8)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (candy_now, flowers_given))\n\n    return solutions[candy_now]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = \"ARRANGE\"\n    letter_freq = {letter: word.count(letter) for letter in set(word)}\n    \n    total_perm = factorial(len(word))\n    for freq in letter_freq.values():\n        total_perm /= factorial(freq)\n    \n    return int(total_perm)\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 0.45\n\n    new_price = original_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60  # pence\n    money_from_dad = 40  # pence\n\n    # Mike receives money from both parents on Monday, Tuesday, and Wednesday\n    total_money_per_day = money_from_mum + money_from_dad\n    total_days = 3\n\n    # Total money received over the three days\n    total_money = total_money_per_day * total_days\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temp = -5\n    midday_temp = 17\n    \n    temp_change = midday_temp - midnight_temp\n    \n    return temp_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    current_term = 1\n    difference = 1\n    while current_term <= 50:\n        difference += 1\n        current_term += difference\n    return current_term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    # Cost of one pen in pounds (£)\n    pen_cost_p = 43\n    # Cost of one booklet in pounds (£)\n    booklet_cost_p = 1.85\n\n    # Convert pen cost to pounds (£)\n    pen_cost = pen_cost_p / 100\n\n    # Calculate the total cost of 3 pens and 4 booklets\n    total_cost = 3 * pen_cost + 4 * booklet_cost_p\n\n    # Money available in pounds (£)\n    available_money = 10\n\n    # Calculate the change\n    change = available_money - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    \n    total_people = people_in_front + position_from_back - 1  # Subtract 1 because Sibel is counted in both\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # The population of St Petersburg, Russia as of my knowledge cutoff in early 2023 is around 5.4 million.\n    # But please note that this number could have changed, and the official census or statistical data should be consulted for the current population.\n    st_petersburg_population = 5400000\n    return st_petersburg_population\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits = [int(x) for x in str(i)]\n        if abs(digits[0] - digits[1]) >= 7 and abs(digits[1] - digits[2]) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(5000, 10000):\n        d4 = i % 10\n        d3 = (i // 10) % 10\n        d2 = (i // 100) % 10\n        d1 = (i // 1000) % 10\n        \n        if d2 == 0 or d3 == 0 or d4 == 0:\n            continue\n        if d1 % d2 == 0 and d1 % d3 == 0 and d1 % d4 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the unknown\n    x = symbols('x')\n    \n    # Convert the tilde symbol (~) into negative sign (-)\n    # The equation becomes: -x + 7 = 9 * 9\n    equation = Eq(-x + 7, 9 * 9)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    return ((22 - 4) * 2)\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    common_difference = 4\n    number_of_terms = 10\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    total_coins = (number_of_terms * (first_term + last_term)) // 2\n\n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses / 2\n    fiona_dresses = gina_dresses / 4\n    total_dresses = gina_dresses + fiona_dresses\n\n    return int(total_dresses)\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    return 0.8 * 3 * 10\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the marks of each student\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Equations based on the average of marks\n    avg_ABC = Eq((A + B + C) / 3, 95)\n    avg_BCD = Eq((B + C + D) / 3, 94)\n\n    # E's mark is given\n    E_mark = Eq(E, 96)\n\n    # Since A has the highest mark and E is second highest, A must be greater than 96\n    # B and D have the same score\n    B_same_D = Eq(B, D)\n    \n    # All marks are above 91\n    marks_above_91 = (A > 91, B > 91, C > 91, D > 91, E > 91)\n\n    # Solve the system of equations\n    solutions = solve((avg_ABC, avg_BCD, E_mark, B_same_D) + marks_above_91, (A, B, C, D, E))\n\n    # We filter for the correct solution where A has the highest mark and all marks are above 91\n    for sol in solutions:\n        if sol[A] > 96 and sol[E] == 96 and all(mark > 91 for mark in sol):\n            return sol[D]\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # All digits wrong in 1258 means the correct combination doesn't have 1, 2, 5, 8\n    incorrect_digits = {'1', '2', '5', '8'}\n\n    # The list to store potential digits for each position\n    potential_digits = [{str(i) for i in range(10)} - incorrect_digits for _ in range(4)]\n\n    # Update potential digits after examination of each tried combination\n    # For 5648, exactly two digits are correct\n    for i, digit in enumerate('5648'):\n        if digit in incorrect_digits:\n            potential_digits[i].remove(digit)\n        else:\n            for j in range(4):\n                if i != j:\n                    potential_digits[j] -= {digit}\n\n    # For 3628, exactly two digits are correct\n    for i, digit in enumerate('3628'):\n        if digit in incorrect_digits:\n            potential_digits[i].remove(digit)\n        else:\n            for j in range(4):\n                if i != j:\n                    potential_digits[j] -= {digit}\n\n    # For 3147, exactly two digits are correct\n    for i, digit in enumerate('3147'):\n        if digit in incorrect_digits:\n            potential_digits[i].remove(digit)\n        else:\n            for j in range(4):\n                if i != j:\n                    potential_digits[j] -= {digit}\n\n    # For 5629, exactly two digits are correct\n    for i, digit in enumerate('5629'):\n        if digit in incorrect_digits:\n            potential_digits[i].remove(digit)\n        else:\n            for j in range(4):\n                if i != j:\n                    potential_digits[j] -= {digit}\n\n    # Since all the potential digits are obtained, it's time to derive the correct combination\n    correct_combination = ''.join([list(digits)[0] for digits in potential_digits])\n\n    return correct_combination\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n\n    # A = P(1 + rt), where A is the final amount, P is the principal, r is the rate, and t is the time in years.\n    # We have to solve for t, so: t = (A/P - 1) / r\n    years = (final_amount / principal - 1) / rate\n\n    # Bella's claim\n    bella_claim = 5\n\n    # Bella is right if years is close to 5, considering possible small rounding differences\n    is_bella_right = int(round(years)) == bella_claim\n\n    # If Bella is wrong, return the actual number of years, else state that she is right\n    return is_bella_right or round(years, 2)\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    average_weight_all = 65\n    average_weight_male = 75\n    average_weight_female = 60\n    num_males = 3\n\n    # Let's denote the number of female teachers as \"num_females\"\n    # The total weight of all teachers can be expressed as:\n    # total_weight_all = average_weight_all * (num_males + num_females)\n    # The total weight of all male teachers is:\n    # total_weight_male = average_weight_male * num_males\n    # The total weight of all female teachers can be expressed as:\n    # total_weight_female = average_weight_female * num_females\n    # And from the total weight of all teachers, we can express the total weight of female teachers as:\n    # total_weight_female = total_weight_all - total_weight_male\n    \n    # Using the above equations, we can form the following equation to find the number of female teachers:\n    # average_weight_all * (num_males + num_females) = average_weight_male * num_males + average_weight_female * num_females\n    # 65 * (3 + num_females) = 75 * 3 + 60 * num_females\n    # Solving for num_females:\n    num_females = (average_weight_male * num_males - average_weight_all * num_males) / (average_weight_all - average_weight_female)\n\n    return int(num_females)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    three_quarter_full_mass = 350\n    one_quarter_full_mass = 250\n\n    # Mass of half of the jar's Marmite is the difference between 3/4 full and 1/4 full\n    half_jar_marmite_mass = three_quarter_full_mass - one_quarter_full_mass\n\n    # Therefore, a full jar of Marmite would be twice the mass of half of the jar's Marmite\n    full_jar_marmite_mass = half_jar_marmite_mass * 2\n\n    # 1/4 full jar mass (250g) consists of the empty jar plus 1/4 jar of Marmite\n    # So if we subtract 1/4 of the full jar's Marmite mass from the 1/4 full jar mass,\n    # We get the mass of the empty jar\n    empty_jar_mass = one_quarter_full_mass - (full_jar_marmite_mass / 4)\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_capacity_liters = 9.1\n    cup_capacity_liters = 0.35  # 350 ml in liters\n\n    soda_for_bottle = bottle_capacity_liters / 7\n    soda_for_cups = 4 * cup_capacity_liters\n\n    remaining_soda = total_soda_liters - soda_for_bottle - soda_for_cups\n\n    return remaining_soda\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father, son = symbols('father son')\n\n    equation1 = Eq(father - 6, 5 * (son - 6))\n    equation2 = Eq(father + son, 78)\n\n    solutions = solve((equation1, equation2), (father, son))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import sqrt\n\n    m = 2.0  # mass in kilograms\n    k = 500  # force constant in N/m\n    A = 0.08  # amplitude in meters\n    x = 0.04  # displacement from equilibrium in meters\n\n    # Total energy E of the oscillator\n    E = (1/2) * k * A ** 2\n\n    # Speed v of the block at displacement x\n    v = sqrt((k/m) * (A**2 - x**2))\n\n    return E, v\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # To ensure victory, Rose must leave a multiple of 3 marbles for Kylie to pick from.\n    # This way, no matter if Kylie picks 1 or 2 marbles, Rose can always pick so that\n    # a multiple of 3 marbles remains until Rose has the chance to pick the last marble.\n\n    # Since 14 is not a multiple of 3, Rose must pick either 1 or 2 marbles so that\n    # the remaining number of marbles is a multiple of 3.\n\n    # Checking both conditions:\n    # If Rose picks 1 marble, 13 remains - which is not a multiple of 3.\n    # If Rose picks 2 marbles, 12 remains - which is a multiple of 3.\n\n    # Therefore, Rose must pick 2 marbles to ensure winning the game.\n    return 2\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023 ** 0.5\n    b = a\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_money_pence = 45 * 100  # converting pounds to pence\n    coin_value_pence = 5\n    number_of_coins = total_money_pence / coin_value_pence\n    return number_of_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the distance Bud runs in one minute\n    x = symbols('x')\n    \n    # Pip runs 20 meters more than Bud per minute, so Pip runs (x + 20)\n    # Total distance run by Pip and Bud in 3 minutes is 540 meters\n    equation = Eq(3*x + 3*(x + 20), 540)\n    \n    # Solve for x\n    distance_bud_per_minute = solve(equation, x)[0]\n    \n    # Find distance run by Pip in 3 minutes\n    distance_pip_3_minutes = (distance_bud_per_minute + 20) * 3\n    \n    return distance_pip_3_minutes\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let `a` be the number of coins in Box A\n    # Let `b` be the number of coins in Box B\n    # Let `c` be the number of coins in Box C\n    # Let `c_initial` be the original number of coins in Box C\n\n    a, b, c_initial = symbols('a b c_initial')\n\n    equation1 = Eq(a, 4 * b)  # A has four times as many coins as B\n    equation2 = Eq(0.06 * a + 0.20 * b + c_initial, 1220)  # Total coins in C after transfer\n    equation3 = Eq(c_initial * 1.22, 1220)  # C has 22% more than the original number of coins\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c_initial))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let the initial total be T, coffee be C, and tea be Te.\n    # Initially, C = 60/100 * T and Te = 40/100 * T.\n    # Let x be the number of bottles of tea added. After adding, tea becomes (Te + x).\n    # Now, coffee is 40% of the total, which means C = 40/100 * (T + x).\n    # Since the number of bottles of coffee remains the same, the two expressions for C should be equal.\n    # Therefore, 60/100 * T = 40/100 * (T + x).\n    # Simplifying this gives us T = 2/3 * x.\n    # The percentage increase in the tea bottles is (x / Te) * 100.\n    # Since Te = 40/100 * T, we have (x / (40/100 * T)) * 100.\n    # Plugging in the T = 2/3 * x and simplifying gives 100 * (3/2) which equals 150.\n    return 150\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Convert hexadecimal (base 16) to decimal, perform addition, then convert back to hexadecimal\n    hex_sum = hex(int('2A3', 16) + int('17B', 16))\n    # Remove the '0x' prefix which is the default for hex representation\n    ans = hex_sum[2:].upper()\n    return ans\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2*x + 1), 75)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    base = 300\n    percentages = [25, 30, 40]\n    result = base\n    for percent in percentages:\n        result *= (percent / 100)\n    return result\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    return 152 + 45 - 52 + 16\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    red_flowers = 5\n    green_flowers = 2\n    white_flowers = 3\n\n    total_red_price = red_flowers * 2\n    total_green_price = green_flowers * 5\n    total_white_price = white_flowers * 10\n\n    total_price = total_red_price + total_green_price + total_white_price\n    total_flowers = red_flowers + green_flowers + white_flowers\n\n    average_price = total_price / total_flowers\n\n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tricycles, cars = symbols('tricycles cars')\n\n    # equation for the total number of vehicles\n    equation1 = Eq(tricycles + cars, 24)\n    # equation for the total number of wheels\n    equation2 = Eq(3*tricycles + 4*cars, 86)\n\n    solutions = solve((equation1, equation2), (tricycles, cars))\n\n    return solutions[tricycles]\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # Assign each task's time to variables\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    # Sum the time for all tasks to find the total time\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60         # Lewis has 60p\n    james_money_pounds = 1.10  # James has £1.10\n    \n    # Convert James's money to pence\n    james_money_p = james_money_pounds * 100\n    \n    # Add Lewis's money and James's money\n    total_money_p = lewis_money_p + james_money_p\n    \n    # Convert the total money back to pounds\n    ans = total_money_p / 100\n    \n    return ans\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    word = \"WINNING\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_permutations = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n        \n    return total_permutations\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):\n        for x2 in range(3, 13):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    # Define a function to calculate the number of factors\n    def num_factors(n):\n        factors = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors += 1\n        return factors\n    \n    # Create a list to hold the factors for numbers 1 to 13\n    factors = [num_factors(i) for i in range(1, 14)]\n    \n    # Two students know the number of factors, which means their numbers of factors are unique\n    # Find out numbers with unique count of factors\n    unique_factors = {factor for factor in factors if factors.count(factor) == 1}\n    \n    # Create a list to hold possible numbers for Alice (Alice knows her number is odd)\n    alices_options = [number for number in range(1, 14, 2) if num_factors(number) in unique_factors]\n    \n    # Initialize a list to hold the possible options for four numbers\n    possible_options = []\n    \n    # Iterate through each combination of the possible options for Alice to find the product\n    # when May's number is 2 less than Alice's and Mark's is 1 less than May's\n    for alice_num in alices_options:\n        may_num = alice_num - 2\n        mark_num = may_num - 1\n        \n        # Make sure that May's number and Mark's number are also in the range 1 to 13\n        if 1 <= may_num <= 13 and 1 <= mark_num <= 13:\n            # Calculate the sum of the numbers on forehead, which should be the sum from 1 to 13\n            # minus the sum of the remaining four numbers which are not picked\n            picked_sum = alice_num + may_num + mark_num + sum(number for i, number in enumerate(range(1, 14)) if num_factors(number) not in unique_factors)\n            remaining_sum = sum(range(1, 14)) - picked_sum\n            \n            # Only accept the option if the remaining sum is achievable by the remaining numbers\n            remaining_numbers = [i for i in range(1, 14) if i not in (alice_num, may_num, mark_num) and num_factors(i) not in unique_factors]\n            if sum(remaining_numbers) == remaining_sum:\n                possible_options.append((alice_num - 2) * (alice_num - 3) * (alice_num) * (alice_num + 2))\n    \n    # There should be only one valid product according to the problem constraints\n    assert len(possible_options) == 1\n    \n    return possible_options[0]\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    from sympy import symbols, solve\n    \n    # Declare the symbols for the number of lemonade bottles (x) and 1000 Plus bottles (y)\n    x, y = symbols('x y', integer=True)\n    \n    # Set up the equations based on the problem statement\n    # Equation for total income: 4x + 7y = 2012,\n    # Equation for total bottles: x + y = 350\n    \n    # Solve the equations to find the values of x and y\n    solutions = solve((4*x + 7*y - 2012, x + y - 350), x, y)\n    \n    # Extract the minimum possible value for y (1000 Plus bottles)\n    # Since solutions includes all possibilities, we find the one with minimum y\n    min_plus_bottles = min(solutions, key=lambda item: item[y])[y]\n    \n    return min_plus_bottles\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Let the number of blue pens initially be 3x and red pens be 5x\n    # Given total pens are 96, so 3x + 5x = 96, solve for x\n    x = 96 // 8  # integer division\n\n    # Calculate the initial number of blue pens\n    initial_blue_pens = 3 * x\n    \n    # 60 red pens are added so the new number of red pens is 5x + 60\n    # Let y be the number of blue pens added\n    # After adding, 40% of the pens are blue\n    # (initial_blue_pens + y) / (96 + 60 + y) = 0.40, solve for y\n    y = symbols('y')\n    equation = Eq((initial_blue_pens + y) / (96 + 60 + y), 0.40)\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # in kilograms\n    final_velocity = 8  # in meters per second\n    time = 4  # in seconds\n\n    acceleration = final_velocity / time  # calculate the acceleration\n    force = mass * acceleration  # Force = mass * acceleration (Newton's Second Law)\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # According to Frobenius Coin Problem, the largest number of items that cannot\n    # be purchased (the Frobenius number) when dealing with two coin denominations\n    # is given by (x*y) - x - y, where x and y are coprime coin denominations.\n\n    # Since 3 and 7 are coprime, we can apply the Frobenius Coin Problem formula.\n    largest_unpurchasable = (3 * 7) - 3 - 7\n\n    return largest_unpurchasable\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the variables\n    correct = symbols('correct')\n    incorrect = symbols('incorrect')\n\n    # Define the equations based on the given information\n    equation1 = Eq(5 * correct - 2 * incorrect, 151)\n    equation2 = Eq(correct, 3 * incorrect + 12)\n\n    # Solve the equations\n    answers = solve((equation1, equation2), (correct, incorrect))\n\n    # Extract the number of correct answers\n    num_correct = answers[correct]\n\n    return num_correct\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_distance = 32\n    friends_count = 11\n\n    total_cost = cost_per_km * total_distance\n    cost_per_person = total_cost / friends_count\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    num1_base10 = int(str(45), 7)\n    num2_base10 = int(str(66), 7)\n    sum_base10 = num1_base10 + num2_base10\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Sum of all matches played, note each match contributes 2 to the sum\n    total_matches = 2 * (4 + 6 + 2 + 1 + 3 + 5)\n    # Each person plays with every other person exactly once, for a total of C(7, 2) matches\n    # (C for combinations, also known as binomial coefficient)\n    num_students = 7\n    total_possible_matches = (num_students * (num_students - 1)) // 2\n    # Now find F's number of matches by subtracting others' matches from total possible matches\n    matches_played_by_F = (2 * total_possible_matches - total_matches) // 2\n    return matches_played_by_F\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # The two consecutive numbers that cannot divide N must be coprime to each other\n    # Otherwise, omitting one would imply omitting the divisor they share\n\n    # We iterate through pairs of consecutive numbers from 1 to 19\n    # [1, 2], [2, 3], ..., [18, 19]\n    # To check which pair, when omitted, the product of numbers from 1 to 20 is still divisible by the remaining 18\n    for i in range(1, 20):\n        j = i + 1  # The consecutive number\n        \n        # Calculate the product of all numbers from 1 to 20, excluding i and j\n        product = 1\n        for x in range(1, 21):\n            if x != i and x != j:\n                product *= x\n        \n        # Check if the product is divisible by all numbers from 1 to 20, excluding i and j\n        divisible = True\n        for x in range(1, 21):\n            if x == i or x == j:\n                continue\n            if product % x != 0:\n                divisible = False\n                break\n        \n        # If the product is divisible by all other numbers, we've found our pair\n        if divisible:\n            return i + j\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Cici's and Linda's current ages\n    cici, linda = symbols('cici linda')\n\n    # Linda is currently 11 years older than Cici\n    equation1 = Eq(linda, cici + 11)\n\n    # The sum of their ages 4 years later will be 37\n    equation2 = Eq((cici + 4) + (linda + 4), 37)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cici, linda))\n\n    # Find Linda's age 3 years later\n    lindas_age_later = solutions[linda] + 3\n\n    return lindas_age_later\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Ratio of Jamie-Anne's to Natasha's stamps is 5:3\n    ratio_Jamie_Anne = 5\n    ratio_Natasha = 3\n    \n    # Jamie-Anne has 18 more stamps than Natasha\n    difference = 18\n    \n    # Calculate the number of stamps Natasha has based on the difference and ratio\n    stamps_Natasha = difference * ratio_Natasha // (ratio_Jamie_Anne - ratio_Natasha)\n    \n    # Calculate the number of stamps Jamie-Anne has based on Natasha's stamps and the difference\n    stamps_Jamie_Anne = stamps_Natasha + difference\n    \n    # Calculate the total number of stamps they have together\n    total_stamps = stamps_Jamie_Anne + stamps_Natasha\n    \n    return total_stamps\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_of_numbers = 0\n    for i in range(161, 15 * 15):  # Since the quotient and remainder are equal, the number can't be greater than 15*15\n        if i % 15 == i // 15:\n            sum_of_numbers += i\n    return sum_of_numbers\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    return min_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_one_way = 300  # meters\n    speed_uphill = 10  # m/min\n    speed_downhill = 30  # m/min\n\n    time_uphill = distance_one_way / speed_uphill\n    time_downhill = distance_one_way / speed_downhill\n\n    total_distance = distance_one_way * 2\n    total_time = time_uphill + time_downhill\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "from math import factorial\n\ndef solution():\n    entrances = 5\n    people = 4\n    \n    # Since the order of entering matters and they can choose the same entrance,\n    # this is a permutation with repetition problem.\n    ways = entrances ** people\n    return ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n    \n    num_bags = total_peaches // peaches_per_bag\n    \n    return num_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    apples = 226 - 10\n    pears = 352 - 28\n    oranges = 157 - 13\n\n    students = gcd(gcd(apples, pears), oranges)\n\n    return students\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    # There are two choices for Judy - first or last position in the line\n    Judy_choices = 2\n    # The rest of the friends can be arranged in any order\n    friends_permutations = factorial(5)\n\n    # Total number of ways they can form the line\n    total_ways = Judy_choices * friends_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    # Known values\n    number1 = 6\n    lcm = 12  # Lowest common multiple\n    \n    # The numbers' common factors are only 1 and 2, so the other number cannot be even\n    # The other number must be a factor of 12, as 12 is the lowest common multiple\n    # Potential candidates for the other number given lcm divided by number1 are 2 and 1\n    # Since the other number cannot be even, it must be an odd factor of 12 which is 1 or 3\n    # As per question, 1 is a common factor so the other number cannot be 1\n    # Thus the other number can only be the odd factor of 12, which is 3\n    other_number = lcm // number1\n\n    return other_number\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count = 0\n    number = 1\n    while True:\n        number_str = str(number)\n        digit_count += len(number_str)\n        if digit_count >= 200:\n            break\n        number += 1\n    difference = digit_count - 200\n    ans = int(number_str[len(number_str) - difference - 1])\n\n    return ans\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    daily_production = 500\n    total_production = total_days * daily_production\n    qualified_points = 5\n    unqualified_penalty = 18\n    total_points = 9931\n\n    # Assuming all products are qualified, calculate the maximum possible points\n    max_points = total_production * qualified_points\n\n    # Calculate the points lost due to unqualified products\n    points_lost = max_points - total_points\n\n    # Calculate the number of unqualified products based on the points lost\n    unqualified_products = points_lost / unqualified_penalty\n\n    # Calculate the number of qualified products produced in total during these four days\n    qualified_products = total_production - unqualified_products\n\n    return int(qualified_products)\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the cost of the shirt\n    c = symbols('c')\n    \n    # Price of the shirt is $40 more than the cost\n    price = c + 40\n    \n    # Customer buys it with twenty percent off\n    sale_price = price * (1 - 0.20)\n    \n    # The profit is $12\n    profit = sale_price - c\n    \n    # Equation representing the profit\n    profit_equation = Eq(profit, 12)\n    \n    # Solve for the cost\n    cost = solve(profit_equation, c)[0]\n    \n    return cost\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    result = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return result\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, daughter = symbols('daniel daughter')\n\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Assign variables for the known distances\n    total_distance = 1800  # Total distance from P to Q\n    met_distance_from_Q = 800  # Distance from Q where April and Baye meet\n\n    # Calculate the remaining distance to P when April and Baye meet\n    remaining_distance_to_P = total_distance - met_distance_from_Q\n\n    # Calculate the time it takes April to run back to P\n    # Since she runs at 4 times her original speed,\n    # the time it takes is 1/4 of the time it took to walk met_distance_from_Q\n    time_april_back_to_P = remaining_distance_to_P / 4\n\n    # Calculate the time it takes Baye to cover the same distance\n    # We can use the fact that April runs 4 times faster than Baye to deduce that\n    # Baye would take 4 times longer to cover the remaining distance to P than April\n    time_baye_to_cover_same_distance = time_april_back_to_P * 4\n\n    # Calculate the distance Baye covers in that time\n    # Since April met Baye 800 meters from Q and Baye continues moving towards P\n    # the distance Baye covers is the already met_distance_from_Q plus the distance in the time_april_back_to_P\n    distance_baye_covers = met_distance_from_Q + time_baye_to_cover_same_distance\n\n    # Finally, find out how far Baye is from Q when April reaches P\n    # It is the total distance minus the distance Baye has covered\n    baye_distance_from_Q_when_april_reaches_P = total_distance - distance_baye_covers\n\n    return baye_distance_from_Q_when_april_reaches_P\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hens, roosters = symbols('hens roosters')\n    # Original relationship\n    eq1 = Eq(hens, 6 * roosters)\n    # Relationship after increase\n    eq2 = Eq(hens + 60, 4 * (roosters + 60))\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (hens, roosters))\n    \n    # Calculate the total number of chickens before the increase\n    total_chickens = solutions[hens] + solutions[roosters]\n    \n    return total_chickens\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    # Mean of seven numbers is 12\n    mean_of_seven = 12\n    total_of_seven = mean_of_seven * 7\n\n    # Mean decreases to 11 when the eighth number is included\n    new_mean = 11\n    total_with_eighth = new_mean * 8\n\n    # Find the eighth number\n    eighth_number = total_with_eighth - total_of_seven\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # Calculate the sum of the sequence\n    # First part is the sum of numbers from 1 to 8\n    sum1_to_8 = sum(range(1, 9))\n    \n    # Second part is the sum of numbers from 7 to 1 (as it goes back down)\n    sum7_to_1 = sum(range(1, 8))\n    \n    # The last number to be added is 2 (on its own after the sequence)\n    last_number = 2\n    \n    # Sum the three segments together\n    total_sum = sum1_to_8 + sum7_to_1 + last_number\n    \n    return total_sum\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_sequence = \"538462\"\n    index = (2021 - 1) % len(recurring_sequence)\n    ans = int(recurring_sequence[index])\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    return str(list(range(1, 101))).count('9')\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)  # Subtract 1 because the sequence is 0-indexed\n    return sequence[index]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    total_cost = 132\n    fraction_book = 1/3\n    fraction_bag = 2/5\n    # Let x be the initial amount of money she had.\n    # She spent (1/3)x on a book and (2/5)x on a bag, and the total is 132.\n    # So we have (1/3)x + (2/5)x = 132.\n    # Finding a common denominator for the fractions, which is 15, we have:\n    # (5/15)x + (6/15)x = 132\n    # (11/15)x = 132\n    # x = 132 * (15/11)\n    initial_money = total_cost * (15/11)\n    return initial_money\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Maximum number of non-green beads that can be drawn before getting all green beads\n    max_other_beads = 5 + 6 # blue + white beads\n    # To ensure 5 green beads, we must consider the worst case where all the other beads are drawn first\n    beads_needed = max_other_beads + 5\n    \n    return beads_needed\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    divisible_by_5 = 105 // 5\n    divisible_by_7 = 105 // 7\n    divisible_by_5_and_7 = 105 // (5 * 7)\n\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 216):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for i in range(10000, 100000):\n        if int('1' + str(i)) * 3 == int(str(i) + '1'):\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 82):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # Since John takes 12 minutes to walk from the first to fourth floor,\n    # which implies walking across 3 intervals (1st to 2nd, 2nd to 3rd, 3rd to 4th).\n    # Therefore, each interval takes 12 minutes / 3 intervals = 4 minutes per interval.\n    interval_time = 12 / 3\n\n    # For the first to the eighth floor, there are 7 intervals.\n    total_time_for_eighth_floor = interval_time * 7\n\n    return total_time_for_eighth_floor\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Let x, y, and z be the number of apples in the three baskets\n    x, y, z = symbols('x y z')\n    \n    # Since we are allowing empty baskets, we consider non-negative solutions to the equation\n    eq = Eq(x + y + z, 6)\n    \n    # Find the number of solutions to the equation\n    # We choose two from eight because we effectively choose where to put two dividers\n    # in a sequence of six apples (indistinguishable)\n    # which corresponds to choosing two places from eight (six apples + two dividers)\n    sols = solve(eq, (x, y, z))\n    \n    num_solutions = math.comb(6 + 3 - 1, 3 - 1)\n    \n    return num_solutions\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    birds_initial, squirrels_initial = symbols('birds_initial squirrels_initial')\n\n    # Given ratio of birds to squirrels\n    ratio_birds_squirrels = Eq(birds_initial / squirrels_initial, 8 / 5)\n\n    # Squirrel population increase by 20%\n    squirrels_later = 1.20 * squirrels_initial\n\n    # Birds flew away, but total remains the same\n    total_initial = birds_initial + squirrels_initial\n    birds_later = total_initial - squirrels_later\n\n    # Define the equation\n    birds_flew_away_eq = Eq(birds_initial - birds_later, birds_initial * symbols('x') / 100)\n\n    # Solve the system of equations\n    solutions = solve((ratio_birds_squirrels, birds_flew_away_eq), (birds_initial, squirrels_initial, symbols('x')))\n\n    # Find the percentage of birds that flew away\n    birds_flew_away_percentage = solutions[symbols('x')]\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = (5 * a) - (2 * b)\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    values = set()\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                values.add(dividend / quotient)\n    ans = len(values)\n    return ans\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # March to July is 5 months\n    total_pizzas = average_pizzas_per_month * number_of_months\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Number of days is given by n = (l - a)/d + 1, where l is the last term, a is the first term, d is the common difference\n    num_days = ((last_day_pages - first_day_pages) // difference) + 1\n\n    return num_days\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_operator(x, y):\n        # Based on the previous results, let's deduce the pattern:\n        # 4 * 7 - 4 - 7 = 21\n        # 6 * 22 - 6 - 22 = 20\n        # 8 * 30 - 8 - 30 = 26\n        # The pattern seems to be: x ◈ y = x * y - x - y\n        return x * y - x - y\n\n    ans = custom_operator(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice_liters = 8 * 3  # 8 cartons with 3 liters in each\n    remaining_juice_liters = total_juice_liters - 9  # After drinking 9 liters\n\n    container_volume = 5  # Volume of each container\n    containers_needed = -(-remaining_juice_liters // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7  # Calculate the common difference\n    next_term = 31 + common_difference  # Find the next term\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from itertools import permutations\n    \n    max_value = 0\n    for perm in permutations(range(1, 10), 4):\n        D, A, R, T = perm\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            current_value = A + R + T\n            max_value = max(max_value, current_value)\n            \n    return max_value\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(10, 81):  # Start from 10 because A must be greater than 9 to make 9/A < 1; and 81 would be greater than 9*9/5\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    total_loafs_needed = 35\n    cups_needed = total_loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    number_of_friends = 4\n    cards_sent_each = number_of_friends - 1\n    total_cards_sent = number_of_friends * cards_sent_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    total_students = 39\n    # Let the number of boys be b and the number of girls be g\n    # We have two equations as per the problem statement\n    from sympy import symbols, Eq, solve\n    b, g = symbols('b g')\n    eq1 = Eq((1/4) * b, (2/5) * g)\n    eq2 = Eq(b + g, total_students)\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (b, g))\n    # Calculate the difference between the number of boys and girls\n    diff = solutions[b] - solutions[g]\n    return diff\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_tanya = 3\n    members_right_of_tanya = 5\n    tanya = 1  # Tanya herself\n\n    total_members = members_left_of_tanya + tanya + members_right_of_tanya\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primefactors\n\n    num = 87878\n    # Getting all the prime factors of the number\n    factors = primefactors(num)\n    \n    # Iterating over the prime factors to find the largest 4-digit prime factor\n    largest_factor = max(f for f in factors if 1000 <= f < 10000)\n\n    return largest_factor\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Given distances and respective speeds\n    distance1, speed1 = 280, 7\n    distance2, speed2 = 400, 5\n    distance3 = 800 - (distance1 + distance2)  # Calculate the final sprint distance\n    speed3 = 8\n\n    # Calculate time for each section\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time for the entire race\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    crate_weight = 5\n    van_capacity = 12\n    total_crates = 24\n\n    total_weight = crate_weight * total_crates\n    vans_needed = total_weight / van_capacity\n    if total_weight % van_capacity != 0:\n        vans_needed += 1\n\n    return int(vans_needed)\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n    \n    # Daniel gave away 24 stickers\n    daniel_final = daniel - 24\n    # Patrick bought 10 stickers\n    patrick_final = patrick + 10\n    # Patrick had twice as many stickers as Daniel in the end\n    equation = Eq(patrick_final, 2 * daniel_final)\n    # They had an equal number of stickers at first\n    equation2 = Eq(daniel, patrick)\n    \n    # Solve the system of equations\n    solutions = solve((equation, equation2), (daniel, patrick))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def partition(number, max_num):\n        if number == 0:\n            return 1\n        elif number < 0 or max_num == 0:\n            return 0\n        else:\n            with_max = partition(number - max_num, max_num)\n            without_max = partition(number, max_num - 1)\n            return with_max + without_max\n    \n    return partition(5, 4)\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = 82\n    plane_height = 569\n\n    total_distance = whale_depth + plane_height\n\n    return total_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Maximum number of left-handed pupils\n    left_handed = total_pupils - right_handed\n    \n    # Minimum number of right-handed girls would be the total\n    # number of girls minus the maximum possible number of left-handed girls\n    min_right_handed_girls = girls - left_handed\n\n    return max(0, min_right_handed_girls) # In case the computed number is negative\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    min_diff = float('inf')  # Initialize the difference as infinity\n\n    # Since we're looking for the smallest possible difference,\n    # the smallest number should start with 1 and the largest with 9\n    # The second smallest digit in the smallest number should be 2 and so on.\n    # The second largest digit in the biggest number should be 8 and so on.\n    # We permute the middle digits to check all possible combinations. \n\n    from itertools import permutations\n    middle_digits = [3, 4, 5, 6, 7]  # The digits to permute\n\n    for perm in permutations(middle_digits):\n        smallest = int(''.join(map(str, [1, 2] + list(perm) + [8, 9])))\n        largest = int(''.join(map(str, [9, 8] + list(reversed(perm)) + [2, 1])))\n        min_diff = min(min_diff, largest - smallest)\n\n    return min_diff\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n    apples = (2/3) * total_fruits\n    bananas = (1/9) * total_fruits\n    lemons = total_fruits - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n\n    total_fruits_solution = solve(equation, total_fruits)\n    lemons_solution = total_fruits_solution[0] - ((2/3) + (1/9)) * total_fruits_solution[0]\n\n    return lemons_solution\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_worker = 6\n    number_of_days = 9\n\n    total_skirts = sum((skirts_per_worker * (i + 1) for i in range(number_of_days)))\n\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    result = 234000 / 520\n    return result\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3 / probability_over_20\n    \n    return probability_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Total capacity filled by 5 taps in 2 minutes is 1 litre\n    taps = 5\n    time = 2 # minutes\n    capacity = 1 # litre\n\n    # Find out the rate per tap by dividing the total capacity by the number of taps\n    rate_per_tap = capacity / taps  # litres per tap per 2 minutes\n\n    # Calculate how long it takes for one tap to fill 1 litre\n    time_to_fill_one_litre_per_tap = time / rate_per_tap  # minutes\n\n    # Now find out the time it takes for one tap to fill 500 ml (half a litre)\n    # Since it takes time_to_fill_one_litre_per_tap minutes to fill 1 litre,\n    # it will take half of that time to fill half a litre (500 ml)\n    time_to_fill_half_litre_per_tap = time_to_fill_one_litre_per_tap / 2\n\n    return time_to_fill_half_litre_per_tap\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20   # The difference in height between Ben and Sally in cm\n\n    sally_height = ben_height + difference\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children = (3 / 5) * total_visitors\n    remaining_visitors = total_visitors - children\n    men = (1 / 2) * remaining_visitors\n\n    equation = Eq(children - men, 140)\n\n    solved = solve(equation, total_visitors)\n\n    return solved[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "def solution():\n    # Sort the given digits in descending order for the maximum sum\n    digits = sorted([1, 3, 4, 6, 7, 8], reverse=True)\n\n    # Take the largest three digits for the first number and the remaining for the second number\n    first_number = digits[0] * 100 + digits[2] * 10 + digits[4]\n    second_number = digits[1] * 100 + digits[3] * 10 + digits[5]\n\n    # Calculate the greatest sum\n    greatest_sum = first_number + second_number\n    return greatest_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume_litres = 2  # 2 litres\n    drank_volume_millilitres = 350  # 350 millilitres\n\n    # Convert initial volume to millilitres\n    initial_volume_millilitres = initial_volume_litres * 1000\n\n    remaining_volume_millilitres = initial_volume_millilitres - drank_volume_millilitres \n    # Convert remaining volume back to litres\n    remaining_volume_litres = remaining_volume_millilitres / 1000\n\n    return remaining_volume_litres\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 0.40 * 3280\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let's denote the daily grass growth amount as G\n    # The daily grass consumption by one horse as H\n    # The daily grass consumption by one sheep as S\n    # According to the problem, we have the following relations:\n    # 20H * 12 = G * 12  # Equation 1 (total grass consumed by horses is equal to total grass grown in 12 days)\n    # 60S * 24 = G * 24  # Equation 2 (total grass consumed by sheep is equal to total grass grown in 24 days)\n    # H = 4S             # Equation 3 (one horse eats as much as four sheep)\n\n    # From the above equations, we can substitute H in terms of S using equation 3\n    # 20H = G             # Simplification of Equation 1\n    # 60S = G/2           # Simplification of Equation 2\n\n    # Now plugging H = 4S into 20H = G we get\n    # 20*4S = G\n    # 80S = G\n    # This means that 80 sheep can eat the grass that grows in one day\n    # Now we take the new scenario where we have 12 horses and 88 sheep\n    # We can substitute Horses in terms of Sheep:\n    # 12H + 88S = daily grass consumption by 12 horses and 88 sheep\n    # Since H = 4S, this can be written as:\n    # 12*4S + 88S = A daily grass consumption\n    # 48S + 88S = 136S\n\n    # Therefore, 136S = G\n    # Since we know that 80S = G for one day, we can now calculate the number of\n    # days that 136 sheep equivalents (in terms of their grass consumption) can \n    # eat all the grass on the grassland.\n    # We will now find how many days can 136 sheep worth of consumption (12 horses + 88 sheep)\n    # eat the grass that would take 80 sheep 1 day to eat (which is the daily grass growth):\n\n    days = (80 / 136) * 1\n\n    # Let's calculate the final number\n    return float(1 / days)\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Analyzing the pattern:\n    # Alternating between adding 7 and doubling the number\n    \n    # Sequence is:\n    # 1 (initial)\n    # 1 * 2 = 2 + 6 = 8 (doubled, then 6 added instead of 7 to reach 8)\n    # 8 * 2 = 16 (doubled)\n    # 16 + 7 = 23 (7 added)\n    # 23 * 2 = 46 (doubled)\n    # 46 + 7 = 53 (7 added)\n    \n    # Next sequence operation should be doubling the last number:\n    next_number = 53 * 2\n    return next_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, total = symbols('a b c total')\n\n    # If only A and C are turned on, they fill 18 tons from A.\n    equation1 = Eq(a + c, total)\n    flow_from_a = 18\n\n    # If only B and C are turned on, they fill 27 tons from B.\n    equation2 = Eq(b + c, total)\n    flow_from_b = 27\n\n    # Given flow rate of B is twice that of A.\n    equation3 = Eq(b, 2 * a)\n\n    # Now we know A's contribution, so we replace A with flow_from_a in equation 1.\n    equation1_with_values = Eq(flow_from_a + c, total)\n\n    # We use equations 2 and 3 to express total water in terms of B.\n    equation2_with_b = equation2.subs(c, total - b)\n\n    # Now solve for B using equation 2 with only B and the fact from equation 3 that B is twice A.\n    solved_b = solve((equation2_with_b, equation3), (b, total))\n\n    # Calculate total using the value for B found and its relationship to total.\n    total_water = solved_b[total]\n\n    return total_water\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    matches = 20\n    average_goals = 2\n\n    total_pay = (pay_per_match * matches) + (pay_per_goal * average_goals * matches)\n\n    return total_pay\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    ans = 125 * 33 * 8\n    return ans\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_weight = 8\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        if M == 0 or H == 0:  # Leading zeros are not allowed in numbers\n            continue\n        math = M * 1000 + A * 100 + T * 10 + H\n        htam = H * 1000 + T * 100 + A * 10 + M\n        if math + htam == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start_number = 1\n    operation_number = 10\n    current = start_number\n    sum_result = 0\n    for i in range(operation_number):\n        sum_result += current\n        current += 2\n    return sum_result\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_numbers = 0\n    # Consider numbers with exactly two sevens\n    for pos in range(3):  # Choose the position for the non-seven digit (0, 1, 2)\n        for digit in range(10):  # Non-seven digit\n            if digit != 7:\n                if pos == 0 and digit == 0:  # Skip leading zeros\n                    continue\n                total_numbers += 1\n    # Consider numbers with three sevens\n    total_numbers += 1  # The number 777 is the only one with three sevens\n    return total_numbers\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    cost_per_box = 19.20\n    number_of_balls = 16\n    \n    cost_per_ball = cost_per_box / number_of_balls\n    \n    return cost_per_ball\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $2 notes and y be the number of $5 notes\n    x, y = symbols('x y')\n    \n    # Original total amount of notes\n    equation1 = Eq(x + y, 55)\n    \n    # Spent 1/3 of the $2 notes\n    spent_two_notes = x / 3\n    remaining_two_notes = x - spent_two_notes\n    \n    # Received another 8 $5 notes\n    new_five_notes = y + 8\n    \n    # The number of $5 notes she had was 3/7 of the remaining number of notes\n    equation2 = Eq(new_five_notes * 7, 3 * (remaining_two_notes + new_five_notes))\n    \n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the total amount of money at first\n    total_money = solutions[x] * 2 + solutions[y] * 5\n\n    return total_money\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Treat Mr. Spencer and his 2 children as a single unit, there are 4! ways to arrange this unit along with 3 other people\n    unit_permutations = factorial(4)\n    \n    # Now consider the permutations of Mr. Spencer and his 2 children within their unit, which is 2!\n    internal_permutations = factorial(2)\n    \n    # Total permutations is the product of the two permutations counts\n    total_permutations = unit_permutations * internal_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    sweets_remaining = sweets_left - sweets_given_away\n    return sweets_remaining\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n\n    ans = (num1 + num2) / 2\n\n    return ans\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    divisors_of_24 = [i for i in range(1, 25) if 24 % i == 0]\n    divisors_of_52 = [i for i in range(1, 53) if 52 % i == 0]\n\n    common_divisors = [i for i in divisors_of_24 if i in divisors_of_52]\n    common_divisor = max(common_divisors)\n\n    A = 24 // common_divisor\n    C = 52 // common_divisor\n\n    ans = A + C\n    return ans\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # distance to friend's house in meters\n    speed = 7      # running speed in meters per minute\n    \n    time_minutes = distance / speed  # time taken in minutes\n    \n    return time_minutes\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    # Let x be the number of questions Valerie answered correctly\n    # Let y be the number of questions Valerie answered incorrectly\n    # Therefore, there are 6 - x questions that Valerie did not answer correctly\n    # The total score is the sum of points from correct answers and deductions from wrong answers\n    # 5x - 2(6 - x) = 23\n    # 5x - 12 + 2x = 23\n    # 7x = 35\n    # x = 5\n    # Valerie answered 5 questions correctly\n    \n    total_marks = 23\n    correct_answer_marks = 5\n    wrong_answer_deduction = 2\n    total_questions = 6\n\n    # We start by iterating through all the possible number of correctly answered questions from 0 to 6\n    # We use this to calculate the remaining marks after getting marks for correct answers\n    # and see if it matches with the marks deducted for incorrect answers.\n    for correct_answers in range(total_questions+1):\n        # Calculate the score for the correct answers\n        correct_score = correct_answers * correct_answer_marks\n        # Calculate the number of incorrect answers\n        incorrect_answers = total_questions - correct_answers\n        # Calculate the deduction for incorrect answers\n        incorrect_score = incorrect_answers * wrong_answer_deduction\n        # Calculate the total score based on correct and incorrect answers\n        total_score = correct_score - incorrect_score\n        # Check if the total score matches Valerie's score\n        if total_score == total_marks:\n            # We've found the number of questions answered correctly\n            return correct_answers\n\n# Store the answer returned by the function call\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # Treat A, B, C as one unit and E, F as another unit.\n    # Now we have 8 - 3 + 1 (for ABC) + 1 (for EF) = 7 units to arrange.\n    units = factorial(7)\n    \n    # ABC can be arranged in 3! ways, and EF can be arranged in 2! ways.\n    arrangements_within_units = factorial(3) * factorial(2)\n    \n    # Multiply the number of arrangements of units with the arrangements within the units\n    total_arrangements = units * arrangements_within_units\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    final_result = 18\n    subtracted_value = 7\n    divider = 3\n    \n    initial_value = (final_result - subtracted_value) * divider\n    \n    return initial_value\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    # The nth odd number can be computed by the formula: nth_odd = 2n - 1\n    nth = 20\n    nth_odd = 2 * nth - 1\n    return nth_odd\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    # Let the daily production rate be 'x' scarfs per day.\n    # Let the total number of scarfs to be produced be 'y'.\n    # According to the problem, we have two equations:\n    # 1) x * 6 = y (Diana can finish the task in 6 days)\n    # 2) (x + 24) * (6 - 2) = y (Diana can finish the job 2 days earlier if she produces 24 more scarfs per day)\n    \n    # Now let's translate these equations to Python and solve for 'y':\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x * 6, y)\n    equation2 = Eq((x + 24) * 4, y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of students as 's' and the number of sweets as 'n'\n    s, n = symbols('s n')\n    \n    # If he gives each student 6 sweets, he will be short of 26 sweets\n    eq1 = Eq(6 * s, n + 26)\n    \n    # If he gives each student 5 sweets, he will be short of 5 sweets\n    eq2 = Eq(5 * s, n + 5)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (s, n))\n    \n    return solutions[n]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Declare symbols for boys, girls, and the total number of students\n    boys, girls = symbols('boys girls')\n    \n    # Initial ratio of boys to girls is 5:3\n    initial_ratio = Eq(boys/girls, 5/3)\n    \n    # After 15 boys left, the ratio became 5:6\n    new_ratio = Eq((boys - 15)/girls, 5/6)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (boys, girls))\n    \n    # Add up the number of boys and girls to find the total number of students initially\n    total_students = solutions[boys] + solutions[girls]\n    \n    return total_students\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(1, 15):\n            for x3 in range(1, 15):\n                if x1 + x2 + x3 == 15 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    # As order does not matter for sets, the same combination might be counted multiple times\n    # Divide by the number of permutations for each combination (3!) to correct the count\n    return count // 6\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    return sum(range(2, 15, 2))\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    import math\n\n    A = 675\n    sqrt_A = int(math.sqrt(A))\n    \n    # Find the prime factorization of A\n    prime_factors_A = {}\n    for i in range(2, sqrt_A + 1):\n        while A % i == 0:\n            prime_factors_A[i] = prime_factors_A.get(i, 0) + 1\n            A //= i\n    if A > 1:\n        prime_factors_A[A] = 1  # A is prime itself\n\n    # Find B such that 675 x B is a square\n    # If a prime factor has an odd power, multiplying by that prime factor\n    # will make it an even power, hence contributing to a perfect square.\n    B = 1\n    for prime, power in prime_factors_A.items():\n        if power % 2 != 0:\n            B *= prime\n    \n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_rate = 1/3\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    josh_age_5_years_ago = (3/5) * (shelby_current_age - 5)\n    josh_current_age = josh_age_5_years_ago + 5\n\n    return int(josh_current_age)\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    numbers = [10, 20, 30, 40]\n    ans = 1\n    for number in numbers:\n        ans *= number\n    return ans\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695\n    individual_can_cost_pence = 65\n    cost_difference = (individual_can_cost_pence * 12) - multipack_cost_pence\n    return cost_difference\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n\n    # count numbers in the range [3267, 3999]\n    for thousands in [3]:\n        for hundreds in [2, 4, 5, 6]:\n            for tens in [1, 2, 4, 5, 6]:\n                if hundreds != tens:\n                    for units in [1, 2, 4, 5, 6]:\n                        if units != tens and units != hundreds:\n                            count += 1\n\n    # count numbers in the range [4000, 4999]\n    for thousands in [4]:\n        for hundreds in [1, 2, 3, 5, 6]:\n            for tens in [1, 2, 3, 5, 6]:\n                if hundreds != tens:\n                    for units in [1, 2, 3, 5, 6]:\n                        if units != tens and units != hundreds:\n                            count += 1\n\n    # count numbers in the range [5000, 5120]\n    for thousands in [5]:\n        for hundreds in [1, 2, 3, 4, 6]:\n            for tens in [1, 2, 3, 4, 6]:\n                if hundreds != tens:\n                    for units in [1, 2, 3, 4, 6]:\n                        if units != tens and units != hundreds and (thousands * 1000 + hundreds * 100 + tens * 10 + units) <= 5120:\n                            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    amount = 21.40\n    quarter_of_amount = amount / 4\n    return quarter_of_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Adam and Ben's weight\n    AB = 102\n    \n    # Ben and Carl's weight\n    BC = 97\n    \n    # Adam and Carl's weight\n    AC = 93\n    \n    # Sum of twice the total weight (sum of individual weights is double their pairwise weights)\n    twice_total_weight = AB + BC + AC\n    \n    # Total weight is half of the sum of twice the total weight\n    total_weight = twice_total_weight / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one apple and one banana\n    apple, banana = symbols('apple banana')\n\n    # Create equations based on the given information\n    equation1 = Eq(3*apple + banana, 32)\n    equation2 = Eq(6*apple + banana, 53)\n\n    # Solve the system of equations for apple and banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Extract the price of one banana \n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Alan and Bob together\n    together_rate = 1 / 4\n    # Bob alone\n    bob_rate = 1 / 6\n    # Alan alone\n    alan_rate = together_rate - bob_rate\n    # Time taken by Alan alone\n    alan_time = 1 / alan_rate\n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 * 80 / 100\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    return singapore_stamps - malaysia_stamps\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    amount = principal * (1 + rate) ** time\n    return amount\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's number of stamps\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    # Equations based on the problem statement\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    ten_thousand_and_twenty_four = 10000 + 24\n    three_thousand_nine_hundred_and_sixty_eight = 3000 + 968\n    ans = ten_thousand_and_twenty_four + three_thousand_nine_hundred_and_sixty_eight\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food_consumption = 15\n    number_of_weeks = 26\n\n    total_food_needed = weekly_food_consumption * number_of_weeks\n\n    return total_food_needed\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the original score\n    original_score = symbols('original_score')\n    \n    # Write the equation based on the problem\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    \n    # Solve the equation\n    solution = solve(equation, original_score)\n    \n    # Return the original score\n    return solution[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    votes_for_peter = 35\n    votes_for_others = 22 + 27  # Mark and Nicole's combined votes\n\n    # To be elected without fail, Peter needs over half of the total votes.\n    # Therefore, he needs one more than half.\n    votes_needed_to_win = (total_votes // 2) + 1\n\n    # Calculate how many more votes Peter needs to achieve this.\n    additional_votes_required = votes_needed_to_win - votes_for_peter\n\n    return additional_votes_required\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money both Alex and Nicholas have.\n    x = symbols('x')\n\n    # After spending, Nicholas has 6 times the money Alex has.\n    equation = Eq(x - 13, 6 * (x - 58))\n\n    # Solve the equation\n    initial_amount = solve(equation, x)\n\n    # The question asks for the total initial amount they had together.\n    total_initial_amount = 2 * initial_amount[0]\n\n    return total_initial_amount\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n            \nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - (6 * 6) - (8 * 6)\n    return ans\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n    used_flour = total_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9**(3/2)\n    return a\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    # One week contains 7 days\n    days_in_week = 7\n    # Add 28 days to the current date\n    days_to_add = 28\n    \n    # Calculate the day of the week 28 days later\n    # Since 28 is a multiple of 7 (4 weeks), we'll end up on the same day of the week\n    day_of_week_code = 6  # Monday -> 0006\n    \n    return day_of_week_code\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    place_value = 0.001\n    return 6 * place_value\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    pole_interval = 12\n    # The first pole is placed at the beginning of the first 12m interval, and the last pole is just before the end of the road\n    # Therefore, we subtract one interval from the road length to account for the last 12m stretch without a pole.\n    num_poles = (road_length - pole_interval) // pole_interval\n\n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, rulers = symbols('pencils rulers')\n\n    equation1 = Eq(pencils, rulers + 10)\n    equation2 = Eq(pencils + rulers, 52)\n\n    solutions = solve((equation1, equation2), (pencils, rulers))\n\n    return solutions[rulers]\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    nums = [11, 13, 17, 12]\n    total = sum(nums)\n    mean_value = 11\n    total_numbers = 5\n    x = (mean_value * total_numbers) - total\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    first_7_value = 7 * 10**3  # the value of the first 7 in the ten-thousands place\n    second_7_value = 7 * 10    # the value of the second 7 in the tens place\n    difference = first_7_value - second_7_value\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n    \n    eq1 = Eq(blue, 2 * red)\n    eq2 = Eq(yellow, blue + 2.4)\n    eq3 = Eq(blue + red + yellow, 65.4)\n    \n    solutions = solve((eq1, eq2, eq3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    total_ratio = boys_ratio + girls_ratio\n    boys_count = 200\n\n    girls_count = (girls_ratio / boys_ratio) * boys_count\n\n    return int(girls_count)\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    return 15 / 100 * 29\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # You can take 3 marbles of each color without guaranteeing 4 of the same color,\n    # which accounts for 3*3 = 9 marbles. The next marble you take, no matter the color,\n    # will give you 4 of the same color.\n    marbles_needed = 3 * 3 + 1  \n    return marbles_needed\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    recurring_part = '3'  # In the decimal expansion of 1/3, 3 is the recurring part\n    sum_of_digits = recurring_part * (1000 // len(recurring_part))  # Repeat '3' to get close to 1000 digits\n    sum_of_digits += recurring_part[:1000 % len(recurring_part)]  # Add the remaining part if needed\n\n    # Convert string to list of integers and sum them\n    ans = sum(int(digit) for digit in sum_of_digits)\n    \n    return ans\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n    \n    ans = len(range(start, end + 1, step))\n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    for i in range(1000):\n        if 4 * i - 13 == 55:\n            return i\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    frac = 2 / 5\n    percent = 35 / 100\n    decimal = 0.604\n\n    ans = frac + percent + decimal\n\n    return ans\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    factorial = lambda n: n * factorial(n-1) if n > 1 else 1\n    \n    total_ways_without_restriction = factorial(5)\n    ways_two_people_stand_together = factorial(2)\n    ways_remaining_people_stand = factorial(4)\n    \n    ans = ways_two_people_stand_together * ways_remaining_people_stand\n    return ans\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_three_days = 33\n    average_last_four_days = 18\n    \n    total_last_four_days = average_last_four_days * 4\n    total_week = total_first_three_days + total_last_four_days\n    \n    average_per_day = total_week / 7\n    \n    return average_per_day\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import divisors\n\n    # Find divisors of two products\n    divisors_2016 = divisors(2016)\n    divisors_1377 = divisors(1377)\n    \n    # Filtering potential ages that would increase by 1 each year\n    for d1 in divisors_1377:\n        for d2 in divisors_1377:\n            for d3 in divisors_1377:\n                if d1*d2*d3 == 1377 and (d1+1)*(d2+1)*(d3+1) == 2016:\n                    return d1*d2*(d3-1)\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    # Let x be the original concentration as a decimal (e.g., 0.05 for 5%)\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Initial amounts of water are given in the problem.\n    water_A = 30\n    water_B = 40\n    water_C = 50\n\n    # Add 10 grams of solution to A\n    solution_A = 10 * x + water_A\n\n    # Move 10 grams from A to B, the mixture in A is (solution_A - 10),\n    # and the 10 grams moved has concentration x\n    solution_B = water_B + 10 * x\n    remaining_A = solution_A - 10\n\n    # Move 10 grams from B to C, the mixture in B is (solution_B - 10),\n    # and the 10 grams moved has concentration (10 * x / solution_B)\n    solution_C = water_C + 10 * (10 * x / solution_B)\n\n    # Final concentration in C is 0.5%\n    equation = Eq(10 * (10 * x / solution_B) / (solution_C), 0.005)\n\n    # Solve the equation for x\n    concentration = solve(equation, x)\n\n    # Get the first solution and convert to percentage\n    concentration_percent = concentration[0] * 100\n\n    return concentration_percent\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament, each player plays every other player once.\n    # Since there are 8 players, each player will play 7 games.\n\n    # Because everyone scores a different number of wins and no ties occurred,\n    # the possible win totals are 0 to 7, with each number assigned to exactly one player.\n\n    # The champion is the player with the most wins, or in this case, since there are 8 players,\n    # the champion must win all of their matches. So, the champion would record 7 wins.\n\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12\n    weight_metal2 = 13\n    percent_nickel_metal1 = 40 / 100\n    percent_nickel_metal2 = 60 / 100\n\n    nickel_metal1 = weight_metal1 * percent_nickel_metal1\n    nickel_metal2 = weight_metal2 * percent_nickel_metal2\n    total_nickel = nickel_metal1 + nickel_metal2\n    total_weight = weight_metal1 + weight_metal2\n\n    percent_nickel_new_metal = (total_nickel / total_weight) * 100\n\n    return percent_nickel_new_metal\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pens_initial, pens_final = 24, 24 + 6\n    chickens_per_pen_initial, chickens_per_pen_reduction = symbols('chickens_per_pen_initial chickens_per_pen_reduction')\n\n    equation1 = Eq(chickens_per_pen_initial * pens_initial, (chickens_per_pen_initial - chickens_per_pen_reduction) * pens_final)\n    equation2 = Eq(chickens_per_pen_reduction, 6)\n\n    solutions = solve((equation1, equation2), (chickens_per_pen_initial, chickens_per_pen_reduction))\n\n    total_chickens = solutions[chickens_per_pen_initial] * pens_initial\n\n    return total_chickens\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club_total = 146 + 94\n    history_club_total = (7 / 8) * math_club_total\n    return int(history_club_total)\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    from sympy import symbols, Eq, solve, divisors, Integer\n\n    divisor, dividend, quotient = symbols('divisor dividend quotient')\n    remainder = Integer(3)\n\n    # equation for the sum of divisor, dividend, quotient and remainder\n    equation = Eq(divisor + dividend + quotient + remainder, 40)\n\n    # solve for the possible values of dividend and quotient\n    possible_values = solve(equation, (divisor, dividend, quotient), dict=True)\n    \n    count = 0\n    for values in possible_values:\n        if values[divisor].is_Integer and values[dividend].is_Integer and values[quotient].is_Integer:\n            # check the division condition\n            if values[dividend] % values[quotient] == remainder:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Using the formula for the sum of an arithmetic progression: S_n = n/2 * (2a + (n - 1)d)\n    # where n is the number of terms, a is the first term, and d is the common difference\n    # Let S6 be the sum of the first 6 terms, and S12 be the sum of the first 12 terms\n    # We have two equations:\n    # S6 = 6/2 * (2a + (6 - 1)d) = 64\n    # S12 = 12/2 * (2a + (12 - 1)d) = 156\n    #\n    # We need to find S18, which is the sum of the first 18 terms\n    # S18 = 18/2 * (2a + (18 - 1)d)\n    #\n    # From S6 and S12 we can create a system of equations to find a and d\n\n    S6 = 64\n    S12 = 156\n\n    # From S6\n    # 3 * (2a + 5d) = 64\n    # 6a + 15d = 64 --> Equation (1)\n\n    # From S12\n    # 6 * (2a + 11d) = 156\n    # 12a + 66d = 156 --> Equation (2)\n\n    # We can solve for d by subtracting equation (1) from equation (2)\n    # (12a + 66d) - (6a + 15d) = 156 - 64\n    # 6a + 51d = 92\n\n    # Now we have:\n    # 6a + 15d = 64 --> Equation (1)\n    # 6a + 51d = 92 --> Equation (3)\n\n    # Subtracting equation (1) from equation (3), we get:\n    # 36d = 28\n    d = 28 / 36\n\n    # Find a using equation (1)\n    a = (64 - 15*d) / 6\n\n    # Now we can find S18 using the sum formula\n    S18 = (18 / 2) * (2*a + (18 - 1)*d)\n    \n    return S18\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse the given numbers according to the rules of planet Zog\n    reversed_num1 = int(str(729)[::-1])\n    reversed_num2 = int(str(26)[::-1])\n\n    # Perform the subtraction as per Zog's rules\n    result = reversed_num1 - reversed_num2\n    \n    # Reverse the result to get the answer Pluto would write down\n    ans = int(str(result)[::-1])\n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    import math\n    ans = math.gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    brother_age_three_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    train_speed = 20  # meters per second\n    time_to_pass = 30  # seconds\n\n    # The train will cover its own length plus the length of the bridge in 30 seconds.\n    distance_covered = train_speed * time_to_pass\n    \n    # Subtract the train's length to get the length of the bridge.\n    bridge_length = distance_covered - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n\n    return difference\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the first digit (it cannot be 0)\n    # and 3 choices for the second and third digits\n    num_ways = 2 * 3 * 3\n    return num_ways\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Jogging time in hours from 6:30 AM to 7:00 AM\n    jogging_time = (7 - 6.5)\n    # Walking time in hours from 7:00 AM to 8:00 AM\n    walking_time = (8 - 7)\n\n    # Jogging speed in km per hour\n    jogging_speed = 9\n    # Walking speed in km per hour\n    walking_speed = 7.5\n\n    # Total distance covered while jogging\n    jogging_distance = jogging_time * jogging_speed\n    # Total distance covered while walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n    total_games = 63\n\n    # Equation: wins = 2 * losses\n    # Total games: wins + losses = total_games\n    equations = (\n        Eq(wins, 2 * losses),\n        Eq(wins + losses, total_games)\n    )\n\n    # Solve the system of equations\n    solutions = solve(equations, (wins, losses))\n\n    return solutions[losses]\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    # The sum of an arithmetic series 1 to n can be found by the formula: sum = n * (n + 1) / 2\n    # If he added a number twice, the sum becomes: modified_sum = sum + duplicate_number\n    # We know modified_sum is 3405, so: duplicate_number = 3405 - sum\n\n    # We need to find n such that sum + duplicate_number = 3405\n    # We iterate over possible values of n since the sum must be close to 3405\n    n = 1\n    while True:\n        sum_n = n * (n + 1) // 2\n        if sum_n > 3405:\n            break\n        duplicate_number = 3405 - sum_n\n        if duplicate_number <= n:\n            return duplicate_number\n        n += 1\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    return (55 - 44) * common_factor\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - (8 + 7) - 6 + (5 - 4 + 3) - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals = symbols('total_animals')\n    # Initial percentages of cows and goats\n    cows_percentage_initial = 65 / 100\n    goats_percentage_initial = 1 - cows_percentage_initial\n    \n    # After adding 240 animals\n    cows_percentage_final = (65 + 20) / 100\n    goats_percentage_final = 2 * goats_percentage_initial\n\n    # Setting up the equations based on the information given\n    # Equation 1: (initial cows + 240) / (total animals + 240) = final cows percentage\n    # Equation 2: initial goats = initial total animals * initial goats percentage\n    # Since the number of goats doubled, initial goats * 2 = total animals + 240 - initial cows\n\n    initial_cows = total_animals * cows_percentage_initial\n    initial_goats = total_animals * goats_percentage_initial\n\n    equation1 = Eq((initial_cows + 240) / (total_animals + 240), cows_percentage_final)\n    equation2 = Eq(initial_goats * 2, total_animals + 240 - initial_cows)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_animals))\n\n    # Get the number of initial goats\n    initial_goats_num = solutions[0] * goats_percentage_initial\n\n    return int(initial_goats_num)\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    area_x = (3**2 * (3**0.5)) / 4  # Area of an equilateral triangle X with side 3 cm\n    area_y = (9**2 * (3**0.5)) / 4  # Area of an equilateral triangle Y with side 9 cm\n\n    return area_y // area_x  # The number of times triangle X can fit into triangle Y\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if (num % 7 == 4) and (num % 8 == 4) and (num % 9 == 4):\n            return num\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # Girls can be considered as a single unit since they want to stand together\n    # So, we have 3 teachers + 3 boys + 1 unit of girls = 7 units to arrange\n    # The girls within this unit can also be arranged among themselves\n    girls_permutations = factorial(3)  # permutations of girls\n    \n    # The 7 units can be arranged in factorial(7) ways\n    units_permutations = factorial(7)\n    \n    # For the boys not to stand adjacent to each other, consider placing them in the gaps created by the 7 units\n    # There are 8 gaps:|T|T|T|G|T|T|T| (_ represents a gap where boys can be placed)\n    # We select 3 gaps out of the 8 available for the boys\n    select_gaps_for_boys = factorial(8) // (factorial(3) * factorial(8 - 3))\n    \n    # The boys can also be arranged among these selected gaps in factorial(3) ways\n    boys_permutations = factorial(3)\n    \n    # Total arrangements = arrangements of units * arrangements of girls within the unit * selections of gaps for boys * arrangements of boys\n    total_arrangements = units_permutations * girls_permutations * select_gaps_for_boys * boys_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x * 12 + 3 * x * 5, 120)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_choose = 2\n\n    ways_to_choose = comb(total_students, students_to_choose)\n\n    return ways_to_choose\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_expression = 8 * 9 * 10\n    smaller_expression = 1 * 2 * 3\n    difference = larger_expression - smaller_expression\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n\n    total_roses = bouquets * roses_per_bouquet\n\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soup_of_the_day = 2  # 1 soup + option not to choose soup\n    desserts = 3  # 2 desserts + option not to choose dessert\n\n    # Apply the multiplication principle\n    combinations = appetisers * main_courses * soup_of_the_day * desserts\n\n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for children_count in range(100, 201):\n        if children_count % 8 == 3 and children_count % 9 == 1:\n            return children_count\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    blue_balls = symbols('blue_balls', integer=True)\n\n    total_balls = blue_balls + 4\n    # Probability of drawing 2 red balls without replacement is (4/total_balls) * (3/(total_balls-1))\n    probability_eq = Eq((4/total_balls) * (3/(total_balls-1)), 2/7)\n\n    blue_balls_solution = solve(probability_eq, blue_balls)\n\n    # Since the number of balls has to be an integer, return the integer solution\n    return blue_balls_solution[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    first_term = 6\n    common_difference = 5\n    last_term = 41\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_seq\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 rabbits = 8 * 2 chickens = 16 chickens\n    return 8 * 2  # 16\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let x be the total number of slices.\n    # According to the problem, (3/5)*x + 2 + 4 = x\n    # Simplify the equation to find the total number of slices x.\n    x = symbols('x')\n    equation = Eq((3/5)*x + 6, x)\n    total_slices = solve(equation, x)\n    return total_slices[0]\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_first_3 = 3 * 10**2  # The 3 in the 'hundreds' place\n    place_value_second_3 = 3 * 10**5  # The 3 in the 'hundred thousands' place\n\n    difference = place_value_second_3 - place_value_first_3\n\n    return difference\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the rate at which Mike types and d be the rate at which Danny types\n    m, d = symbols('m d')\n\n    # The equation representing them working together\n    equation1 = Eq(1/m + 1/d, 1/10)\n\n    # The equation representing Mike working for 8 hours and then Danny for 13 hours\n    equation2 = Eq(8/m + 13/d, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, d))\n\n    # Time it takes for Danny to finish the job by himself is the inverse of his rate\n    time_for_danny = 1 / solutions[d]\n\n    return time_for_danny\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    total_cases = 2\n\n    min_pencils = (total_pencils + total_cases - 1) // total_cases\n\n    return min_pencils\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from math import factorial\n\ndef count_ways_exponents(total, *exponents):\n    if len(exponents) == 1:\n        return 1 if exponents[0] == total else 0\n\n    ways = 0\n    for i in range(total // exponents[0] + 1):\n        ways += count_ways_exponents(total - i * exponents[0], *exponents[1:])\n    return ways\n\ndef solution():\n    # We need to distribute 27 twos among 10 digits. Specifically, we are looking for\n    # the number of ways to express 27 as the sum of 10 non-negative integers, \n    # where each integer represents the power of 2 contributing to the product.\n    # This can be seen as a problem of finding the number of integer solutions to the equation\n    # x1 + x2 + ... + x10 = 27 \n    # where each xi corresponds to the exponent of 2 for each digit.\n    \n    # Since a digit can only be 1, 2, 4, 8 (2^0, 2^1, 2^2, 2^3), we need to find the combination\n    # of these such that their exponents add up to 27. The number will be same as the number \n    # of ways to partition 27 into exactly 10 parts where each part is an integer between 0 and 3.\n    \n    # Calculate the number of ways we can partition 27 using only the numbers 0, 1, 2, 3, placed into 10 slots.\n    valid_partitions = count_ways_exponents(27, 0, 1, 2, 3)\n    \n    # Each partition corresponds to a unique set of digits (1, 2, 4, 8), but the order matters\n    # since different permutations of the digits represent different numbers. So, for each\n    # partition, we need to count the permutations that can be formed with the digits.\n    \n    total_count = 0\n    for partition in valid_partitions:\n        # Count the number of each digit (1, 2, 4, 8) in this partition\n        ones_count = partition.count(0)\n        twos_count = partition.count(1)\n        fours_count = partition.count(2)\n        eights_count = partition.count(3)\n        \n        # Permutation count with indistinguishable items: n! / (n1! * n2! * ... * nk!)\n        permutations = factorial(10) // (\n            factorial(ones_count) * factorial(twos_count) *\n            factorial(fours_count) * factorial(eights_count)\n        )\n        \n        # Add to the total count\n        total_count += permutations\n    \n    return total_count\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    # Define the custom operation based on the given definition\n    def custom_op(a, b):\n        return sum(a + i for i in range(b+1))\n\n    # We know the operation result and need to find 'm',\n    # we can guess numbers or solve systematically.\n    # Let's iterate through the numbers since 'm' should be less than 66\n    for m in range(66):\n        if custom_op(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n    # Count the chess pieces on one side, minus one to avoid double counting the corners\n    per_side = side_length // interval + 1\n    # Multiply by 4 for all four sides, but subtract 4 to correct double counted corners\n    total_chess = 4 * per_side - 4 \n    return total_chess\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent_money = 2.89\n    father_money = 4/5\n\n    remaining_money = initial_money - spent_money + father_money\n    return round(remaining_money, 2)\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for num in range(1000, 10000):\n        if str(num)[0] == str(num)[1] and str(num)[2] == str(num)[3] and int(num**0.5) == num**0.5:\n            return num\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # Any color repeated 5 or more times will be painted red.\n    # To minimize red squares while maximizing different digits,\n    # we should use each number from 0 to 9 exactly four times.\n    \n    # Since there are 10 possible digits, using each digit 4 times\n    # leads to 40 squares being filled without being painted red.\n    \n    # Now, we must fill the remaining 60 squares. We can do this\n    # by repeating each digit an additional 6 times (with 10 digits,\n    # that adds up to 60).\n    # These newly filled squares will be painted red.\n\n    numbers_used_once = 10\n    squares_filled_once = 4 * numbers_used_once  # 4 squares for each digit\n    red_squares = 100 - squares_filled_once      # rest of the squares will be red\n\n    return red_squares\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # The common difference is -4\n\n    # The first negative term will be when the sequence becomes less than 0\n    # This gives us the inequality a + (n-1)d < 0, where a is the first_term, d is the common difference, and n is the number of terms\n    # Rearranging the inequality gives us n > a/(-d) \n\n    num_terms = first_term / abs(common_difference)  # This will give us the boundary just before the term becomes negative\n    \n    # The result should be an integer and we need the term just before it gets negative, so we take the floor of the result\n    return int(num_terms)\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    # Prime factors of 10 are 2 and 5. To get zeros, we count pairs of 2's and 5's.\n    # Given that a factorial has more 2's than 5's, we count the number of 5's.\n    n = 1\n    count_fives = 0\n    while count_fives < 28:\n        n += 1\n        temp_n = n\n        # Count the number of 5's in the prime factorization of n\n        while (temp_n % 5) == 0:\n            count_fives += 1\n            temp_n //= 5\n    \n    return n\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    distance_left = 130\n    tim_speed = 56\n    bob_speed = 74\n    \n    # Speed of moving towards each other is the sum of both speeds\n    combined_speed = tim_speed + bob_speed\n    \n    # Distance covered together by Tim and Bob before the distance between them becomes 130 km\n    distance_covered = initial_distance - distance_left\n    \n    # Time taken to cover that distance\n    time_taken = distance_covered / combined_speed\n    \n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    climb_rate = 3\n    slide_rate = 1\n    net_distance_per_day = climb_rate - slide_rate\n    day_counter = 0\n    distance_covered = 0\n\n    while distance_covered < total_distance:\n        day_counter += 1\n        distance_covered += climb_rate\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slide_rate\n\n    return day_counter\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    sum_of_numbers = mean_value * 5\n    known_numbers_sum = sum([3, 4, 6, 10])\n    fifth_number = sum_of_numbers - known_numbers_sum\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n\n    ans = lcm(akon_cycle, ben_cycle, cris_cycle)\n\n    return ans\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = set()\n    for year in range(1000, 2023):\n        digits = str(year)\n        if len(set(digits)) == 4:  # Ensure all digits are distinct.\n            perms = permutations(digits)\n            for perm in perms:\n                if ''.join(sorted(perm)) == ''.join(sorted(digits)) and all(abs(int(perm[i]) - int(perm[i + 1])) == 1 for i in range(3)):\n                    lucky_years.add(year)\n                    break\n    return len(lucky_years)\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_sequence = '8354'\n    total_digits = 84\n    sum_digits = 0\n\n    for i in range(total_digits):\n        sum_digits += int(recurring_sequence[i % len(recurring_sequence)])\n        \n    return sum_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    ans = 56 * 23\n    return ans\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Each strike lasts for 3 seconds, and the interval between strikes is constant.\n    # When it strikes 6 times, it takes 43 seconds in total.\n    # Therefore, we can calculate the interval between strikes.\n\n    # Time for the strikes themselves when it strikes 6 times\n    strike_time_for_6_strikes = 6 * 3\n    # Total interval time between the strikes when it strikes 6 times\n    interval_time_for_6_strikes = 43 - strike_time_for_6_strikes\n    # Since there are 5 intervals between 6 strikes\n    interval_between_strikes = interval_time_for_6_strikes / 5\n\n    # Now we need to calculate the total time for 12 strikes.\n    # Time for the strikes themselves when it strikes 12 times\n    strike_time_for_12_strikes = 12 * 3\n    # Total interval time between the strikes when it strikes 12 times\n    # Since there are 11 intervals between 12 strikes\n    interval_time_for_12_strikes = interval_between_strikes * 11\n\n    # Total time for 12 strikes\n    total_time_for_12_strikes = strike_time_for_12_strikes + interval_time_for_12_strikes\n\n    return total_time_for_12_strikes\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # Since each kid must get at least one pen, we first give one pen to each kid.\n    remaining_pens = 20 - 6\n    \n    # Now the problem is reduced to distributing the remaining pens to 6 kids\n    # which is equivalent to placing (remaining_pens) indistinguishable objects into\n    # 6 distinguishable boxes, which is a problem of combinations with repetition.\n    \n    # Number of ways to distribute 'remaining_pens' indistinguishable objects into\n    # '6' distinguishable boxes is given by the formula:\n    # (n + r - 1)! / (r! * (n - 1)!)\n    # where n is the number of boxes and r is the number of objects.\n    \n    # Here, r = remaining_pens, n = 6\n    n = 6\n    r = remaining_pens\n    \n    ans = factorial(n + r - 1) // (factorial(r) * factorial(n - 1))\n    \n    return ans\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    original_people = 6\n    original_hours = 15\n    target_hours = 2\n    \n    # Work done is the same, so the number of people needed is inversely proportional to the number of hours\n    target_people = (original_people * original_hours) / target_hours\n    return int(target_people)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz_minutes = 30\n    number_of_quizzes = 4\n    time_for_all_quizzes_hours = (time_per_quiz_minutes * number_of_quizzes) / 60\n    return time_for_all_quizzes_hours\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    students_left_out = 5\n    \n    # Since adding 18 students creates a perfect square, we want to find\n    # the smallest perfect square number that is 18 more students than\n    # a number that leaves out 5 students.\n    # Increment potential square sizes until conditions are met.\n    n = 1\n    while True:\n        total_students = n**2\n        if (total_students - 18) % students_left_out == 0:\n            m2 = total_students - 18\n            if int(m2**0.5)**2 == m2:\n                ans = m2 - students_left_out\n                break\n        n += 1\n\n    return ans\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # 9 options for the first digit (1-9), 10 for the others (0-9)\n    no_zero_numbers = 9 * 9 * 9  # 9 options for each digit (1-9)\n    at_least_one_zero = total_three_digit_numbers - no_zero_numbers\n    return at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass of the ball in kg\n    speed = 30  # speed of the ball in m/s\n    kinetic_energy = 0.5 * mass * speed**2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 201):\n        if (num % 3 == 1 and num % 4 == 1 and num % 5 == 1 and num % 7 == 2):\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - first_term  # This is negative, since the sequence is decreasing\n    n = 7\n\n    # The general term (nth term) of an arithmetic sequence is given by:\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    # Since the number gives a remainder of 2 when divided by 5, 6, and 7,\n    # we can write the number as 5a + 2 = 6b + 2 = 7c + 2 where a, b, c are some integers\n    # We will search for a number less than 300 that satisfies these conditions\n    for num in range(2, 300, 1):\n        if (num % 5 == 2) and (num % 6 == 2) and (num % 7 == 2):\n            return num\n    return None\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    total_distance = 225\n    kevin_to_jerry_speed_ratio = 1.5\n\n    # Since Kevin drives 1.5 times faster than Jerry, let's say Jerry drives at speed x. \n    # Then Kevin drives at speed 1.5x.\n\n    # The distance covered by Jerry will be his speed times the time, x * t.\n    # The distance covered by Kevin will be 1.5x * t.\n\n    # Since they meet at some point, the sum of the distances covered should equal the total distance.\n    # Thus, x * t + 1.5x * t = total_distance.\n    # From the above equation, we see that the time, t, is irrelevant for finding the ratio of the distances.\n\n    # Jerry's fraction of the total distance will be hence, x/(x + 1.5x).\n    jerry_fraction = 1 / (1 + kevin_to_jerry_speed_ratio)\n\n    # Thus, the actual distance Jerry will drive is his fraction times the total distance.\n    jerry_distance = jerry_fraction * total_distance\n\n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # The greatest odd digit for the ones place\n    ones = 9\n    \n    # Since we want the smallest 4-digit number with all different digits\n    # We start by setting the thousands place to 1, smallest possible digit for this place\n    # Because we cannot have a 0 in thousands place in a 4-digit number\n    thousands = 1\n    \n    # We need to find the digits for the hundreds and tens place such that their sum is 13\n    # And since we're forming the smallest number, we prioritize the smallest possible digit for the hundreds place\n    # However, the digit must be different from the ones already used for the thousands place and the ones place\n    for hundreds in range(2, 10):\n        # Calculate the tens place digit by subtracting the hundreds place digit from 13\n        tens = 13 - hundreds\n        # Check if the tens place digit is valid (i.e. not already used and different from 0, 1, and 9)\n        # and tens place should not be greater than 9 as it's a digit\n        if tens not in [0, 1, 9] and tens <= 9:\n            # If we find suitable digits for hundreds and tens places, we can break out of the loop\n            break\n\n    # Form the smallest 4-digit number with the given criteria\n    number = int(f\"{thousands}{hundreds}{tens}{ones}\")\n    return number\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    initial_height = 1   # Assign 100% of the height as 1 for simplicity\n    bounce_height = 0.75 # 75% of the height\n    minimum_height = 0.25 # 25% of the initial height\n    bounce_count = 0\n    \n    while initial_height >= minimum_height:\n        initial_height *= bounce_height\n        bounce_count += 1\n    \n    return bounce_count - 1 # Subtract 1 because we count the last bounce when height < 25%\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    sequence = [5, 8, 11, 14, 17, 20]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width_wall = 4800  # mm\n    width_picture = 210  # mm\n    total_pictures = 10\n\n    # Effective wall width without the extreme pictures\n    effective_wall_width = total_width_wall - (2 * width_picture)\n    \n    # We have 9 gaps between the 10 pictures\n    gap_between_pictures = effective_wall_width / (total_pictures - 1)\n    \n    # Centre of wall\n    centre_of_wall = total_width_wall / 2\n\n    # Distance from the left end to the centre of third picture (which includes two gaps)\n    distance_third_picture = width_picture + (2 * gap_between_pictures)\n    \n    # The position of the third picture from the left measured from the centre of wall\n    position_from_centre = distance_third_picture - centre_of_wall\n    \n    return position_from_centre\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    years_until_doris_uncles_age = 40 - doris_age\n    uncles_age = doris_age + years_until_doris_uncles_age\n    return uncles_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n    \n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    return solutions[banana] + solutions[apple]\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest_received = 225\n    annual_interest_rate = 2.25 / 100\n\n    principal_amount = interest_received / annual_interest_rate\n\n    return principal_amount\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    \n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # The provided reasoning is that 5 is smaller than 8, so regrouping must have taken place.\n    # In that case, 8 + __ = 15.\n    # To solve the riddle, we find the number that when added to 8 results in 15.\n\n    total_sum = 15\n    number_to_add = total_sum - 8  # Since 8 + number_to_add should result in 15.\n\n    return number_to_add\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    start = 5\n    end = 20\n    # Count the numbers between 5 and 20, so do not include 5 and 20\n    ans = end - start - 1\n    return ans\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n    money_after_watch = original_money - 200\n    money_after_shirt = money_after_watch - (2/7) * money_after_watch\n    equation = Eq(money_after_shirt, (1/3) * original_money)\n    \n    solved = solve(equation, original_money)\n    \n    return solved[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Tom and Harry standing together can be treated as a single entity (TH)\n    # 5 other students + TH = 6 entities and Ronda fixed on the right\n    entities = 6\n\n    # Calculate the permutations for the 6 entities (not including Ronda)\n    permutations_without_ronda = factorial(entities)\n\n    # Tom and Harry can switch places, so we multiply by 2 for the internal switch\n    permutations_with_tom_harry_switch = permutations_without_ronda * 2\n\n    return permutations_with_tom_harry_switch\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1664\n\n    final_amount = initial_investment * interest_first_three_years * interest_last_two_years\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    # Calculate the range within which the car's price can be rounded off to $125,000\n    # \"rounded off to the nearest $100\" means any number in the range of 124950 to 125049 \n    # would be rounded to 125000. Thus, anything above 125049 would be rounded at least to 125100.\n    lowest_possible_price = 124950 + 1  # Adding 1 to obtain the lowest possible price without being rounded down\n    return lowest_possible_price\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    distance = symbols('distance')\n    speed = symbols('speed')\n    time = symbols('time')\n\n    # First condition (20% increase in speed -> 1 hour earlier)\n    equation1 = Eq(distance / speed, time)\n    equation2 = Eq(distance / (speed * 1.20), time - 1)\n\n    # Second condition (travels first 200 km at usual speed, then 25% increase in speed -> 12 minutes earlier)\n    equation3 = Eq(200 / speed + (distance - 200) / (speed * 1.25), time - 12 / 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (distance, speed, time))\n\n    return solutions[distance]\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_avg = 89\n    desired_avg = 95\n    current_total = current_avg * 4\n    full_score = 100\n    \n    tests_taken = 0\n    while True:\n        tests_taken += 1\n        required_total = (4 + tests_taken) * desired_avg\n        if required_total - current_total <= full_score * tests_taken:\n            break\n            \n    return tests_taken\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance_1 = 540\n    distance_2 = 300\n    distance_3 = 1000 - distance_1 - distance_2\n\n    speed_1 = 9\n    speed_2 = 6\n    speed_3 = 10\n\n    time_1 = distance_1 / speed_1\n    time_2 = distance_2 / speed_2\n    time_3 = distance_3 / speed_3\n\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n\n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = doris_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # Lia's and Liz's extra performances\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    train_speed = 30\n    \n    total_distance = train_length + bridge_length\n    time_to_cross = total_distance / train_speed\n    \n    return time_to_cross\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep_initial, cows_initial = symbols('sheep_initial cows_initial')\n\n    # Initial condition: sheep were 5/7 the number of cows\n    initial_condition = Eq(sheep_initial, (5/7) * cows_initial)\n\n    # After adding sheep and removing cows\n    sheep_final = sheep_initial + 21\n    cows_final = cows_initial - 7\n\n    # Final condition: cows became 3/4 the number of sheep\n    final_condition = Eq(cows_final, (3/4) * sheep_final)\n\n    solutions = solve((initial_condition, final_condition), (sheep_initial, cows_initial))\n\n    return solutions[sheep_initial]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    difference = polly_stamps - chloe_stamps\n    return difference\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the cost of one book and y be the cost of one pencil box.\n    x, y = symbols('x y')\n    \n    # Two similar books and three identical pencil boxes cost $42.\n    equation1 = Eq(2*x + 3*y, 42)\n    \n    # Two similar books and six identical pencil boxes cost $60.\n    equation2 = Eq(2*x + 6*y, 60)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    time_difference = (9*60 + 25) - (8*60 + 30)\n    return time_difference\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_efficiency = 1/6\n    B_efficiency = A_efficiency / 2\n    combined_efficiency = A_efficiency + B_efficiency\n    days_together = 1 / combined_efficiency\n    return days_together\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 0.50\n    mamee_cost = haribo_cost - 0.30\n    big_jelly_cost = mamee_cost * 6\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let Geoff's current age be x and his sister's age be y.\n    # We know that x + y = 22, and we are looking for the number of years, n, until x + y = 30.\n    # Every year, both Geoff and his sister grow a year older, so in n years, their ages will be x + n and y + n.\n    # Thus the equation for when the sum of their ages will be 30 is: (x + n) + (y + n) = 30.\n    # Simplifying the equation: x + y + 2n = 30\n    # We know that x + y = 22, substituting in we get: 22 + 2n = 30\n    # Solve for n: 2n = 30 - 22 -> n = (30 - 22) / 2 -> n = 8 / 2 -> n = 4.\n    # Therefore, in 4 years, the sum of their ages will be 30.\n\n    n = (30 - 22) // 2\n    return n\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    numerator = 18 * 32\n    denominator = 36\n    ans = numerator // denominator  # Using integer division since we want a whole number\n    return ans\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    # Work backwards from the remaining 4 bricks to find the initial amount.\n    # Joel removes: 2 less than half, so we double 4 and add 2 to reverse this step\n    after_joel = 4\n    before_joel = (after_joel * 2) + 2\n\n    # Valerie removes: 3 less than half, so we double before_joel and add 3\n    after_valerie = before_joel\n    before_valerie = (after_valerie * 2) + 3\n\n    # Ethan removes: 1 less than half, so we double before_valerie and add 1\n    after_ethan = before_valerie\n    initial_plants = (after_ethan * 2) + 1\n\n    return initial_plants\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total = symbols('total')\n\n    # Let's denote the total number of candies as 'total'\n    # If Anna received 3/8 of the candies, we have Anna's candies = (3/8) * total\n    # If Belle received 1/4 of the candies, we have Belle's candies = (1/4) * total\n    \n    anna = (3/8) * total\n    belle = (1/4) * total\n    \n    # Since Anna and Belle received 90 more candies than Cathy and Dawn together\n    # Cathy and Dawn combined have (anna + belle - 90) candies\n    cathy_dawn = anna + belle - 90\n    \n    # However, Anna, Belle, Cathy and Dawn together has the total number of candies\n    # so Anna + Belle + Cathy + Dawn = total\n    # => (anna + belle) + (cathy_dawn) = total\n    # => (anna + belle) + (anna + belle - 90) = total\n    # This is the equation we will solve\n    equation = Eq((anna + belle) + (anna + belle - 90), total)\n\n    # Solve the equation\n    candies_total = solve(equation, total)\n\n    return candies_total[0]\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of fish balls Mr Tan made at first\n    x = symbols('x')\n\n    # In the morning, he sold 3/4 of the x, so he has 1/4 of the x left\n    # In the afternoon, he sold 1/3 of the remaining 1/4 of the x, which is 1/12 of the x, so he has 1/4 - 1/12 = 1/6 of the x left\n    remaining_afternoon = x / 6\n\n    # He made another 506 fish balls\n    # After that he had twice the number he made at first, which means he had 2*x\n    total_after_adding = remaining_afternoon + 506\n\n    # Setting up the equation\n    equation = Eq(total_after_adding, 2 * x)\n\n    # Solving for x\n    initial_fish_balls = solve(equation, x)[0]\n\n    return initial_fish_balls\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books_more = 8\n    beck_books_total = chris_books + beck_books_more\n    \n    books_to_give = (beck_books_total - chris_books) // 2\n    \n    return books_to_give\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boy_ratio = 2\n    girl_ratio = 7\n    total_ratio = boy_ratio + girl_ratio\n    boys = 14\n    \n    students = boys / boy_ratio * total_ratio\n\n    return int(students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    # Define the variables and equation based on the information given\n    vanilla = 0  # Number of vanilla cupcakes\n    chocolate = vanilla + 72  # Number of chocolate cupcakes\n    blueberry = vanilla - 36  # Number of blueberry cupcakes\n\n    # Sally sells some of the cupcakes\n    sold_chocolate = chocolate / 6\n    sold_vanilla = 2 * vanilla / 3\n    sold_blueberry = 7 * blueberry / 9\n\n    # Calculate the number of cupcakes left for each type\n    left_chocolate = chocolate - sold_chocolate\n    left_vanilla = vanilla - sold_vanilla\n    left_blueberry = blueberry - sold_blueberry\n\n    # The total number of cupcakes left is 427\n    total_left = left_chocolate + left_vanilla + left_blueberry  # This should equal 427\n\n    # Solving the equation yields the number of vanilla cupcakes\n    vanilla = (427 - (72/6) + (36/9)) / (1 - (1/6) - (2/3) - (7/9))\n\n    # Now we can calculate the actual number of cupcakes for each type\n    chocolate = vanilla + 72\n    blueberry = vanilla - 36\n    \n    # Finally, we calculate the number of chocolate cupcakes sold\n    sold_chocolate = chocolate / 6\n\n    return int(sold_chocolate)\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6*6 + 2)\n    \n    solution = solve(equation, circle)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n    \n    number = remainder\n    while number < 400:\n        number += lcm\n    \n    return number if number < 500 else None\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    num = 36\n    factors = set()\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    pigs = 8\n    green_apples = pigs\n    red_apples = pigs // 2\n\n    total_apples = green_apples + red_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    fraction_died = 1/4\n    seeds_died = total_seeds * fraction_died\n    seeds_grown = total_seeds - seeds_died\n    return int(seeds_grown)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    return solutions[shirt] + solutions[pants]\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    cycle = 2  # deposit and spend every two days\n    deposit = 10\n    spend = 8\n    \n    cycles_completed = days // cycle\n    remaining_days = days % cycle\n    money_after_cycles = initial_amount + ((deposit - spend) * cycles_completed)\n    if remaining_days > 0:\n        final_amount = money_after_cycles + deposit  # On the 15th day, he deposits £10\n    else:\n        final_amount = money_after_cycles\n\n    return final_amount\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (1, 2),  # 1 pencil left over when divided by 2\n        (2, 3),  # 2 pencils left over when divided by 3\n        (3, 4),  # 3 pencils left over when divided by 4\n        (4, 5)   # 4 pencils left over when divided by 5\n    ]\n\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    durians_sold = total_durians * sold_fraction\n    durians_left = total_durians - durians_sold\n    return int(durians_left)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    result = 54\n    initial = (result * 4 - 178) / 2\n    return initial\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    apples = [42, 41, 30, 29, 38]\n    average = sum(apples) / len(apples)\n    return average\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    speed = symbols('speed')\n    equation = Eq((speed + 5) * 7, speed * 8)\n\n    original_speed = solve(equation, speed)[0]\n    distance = original_speed * 8\n\n    return distance\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    # Total arrangement without restrictions - arrangement where Claire and Tony sit across\n    total_arrangements = 4 * 3 * 2 * 1\n    claire_tony_arrangements = 2 * 2 * 1 * 1\n    count = total_arrangements - claire_tony_arrangements\n    return count\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    # Let x be the number of stickers Charlotte initially had\n    # Let y be the number of stickers Alexis initially had\n    # From the given ratio Marry:Alexis = 7:5, if Alexis has y stickers then Marry has 7*y/5 stickers\n    # After giving 20%, Marry has 80% of her stickers left, same as Alexis\n    # Therefore, Marry now has 0.8 * (7*y/5) stickers\n    # Alexis now has 0.8 * y stickers\n    # Charlotte receives 20% of Marry and Alexis's stickers which amounts to an increase of 80% on her initial amount\n    # Therefore, Charlotte will have x + 0.2 * (7*y/5) + 0.2 * y stickers\n    # Charlotte's final amount of stickers is 1.8 * x\n    # We are given that Marry had 20 more stickers than Charlotte after the transfer\n    # So, 0.8 * (7*y/5) = 1.8 * x + 20\n    # We can now set up a system of equations based on the information above:\n    # 1.8 * x = 0.2 * (7*y/5 + y)             (1)\n    # 0.8 * (7*y/5) = 1.8 * x + 20            (2)\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(1.8 * x, 0.2 * (7*y/5 + y))\n    equation2 = Eq(0.8 * (7*y/5), 1.8 * x + 20)\n\n    # Use sympy's solve to solve the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Extract the solution for y, which represents the number of stickers Alexis initially had\n    alexis_stickers = solutions[y]\n\n    return alexis_stickers\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    ans = 32 * 47\n    return ans\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    permuts = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = permuts[4]  # zero-indexed, so the fifth element is at index 4\n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "import math\n\ndef solution():\n    bottles = 1000\n    hours = 6\n    # Find the least number of test tubes required by finding the minimum n such that 2^n >= 1000\n    test_tubes = math.ceil(math.log2(bottles))\n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs = 10\n    total_distance = 36  # meters\n    remaining_chairs = total_chairs - 3\n    # When the chairs are evenly spaced, the number of 'gaps' between chairs is one less than the number of chairs.\n    # We subtract one to get the intervals because if we have n chairs, we have (n-1) intervals between them.\n    # First, find the distance of each interval with 10 chairs.\n    interval_distance_with_10_chairs = total_distance / (total_chairs - 1)\n    # Now calculate the new total distance when 3 chairs are removed,\n    # which will be the distance of (7 - 1) intervals as we have 7 remaining chairs.\n    new_total_distance = interval_distance_with_10_chairs * (remaining_chairs - 1)\n    # Finally, find the distance between every 2 chairs (which is the interval distance now)\n    distance_between_chairs = new_total_distance / (remaining_chairs - 1)\n    \n    return distance_between_chairs\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # We know each brother must have at least two books, so we start from there\n    for brother1 in range(2, 10 - 2*2 + 1):  # The first brother can have between 2 to 6 books\n        for brother2 in range(2, 10 - brother1 - 2 + 1):  # The second one 2 to what's left after brother1's allotment\n            brother3 = 10 - brother1 - brother2  # What remains goes to the third brother\n            if brother3 >= 2:  # The third must have at least two books as well\n                count += 1\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the fourth angle be 'x', then the third angle which is five times larger is '5x'.\n    # Sum of angles in a quadrilateral is 360 degrees.\n    x = symbols('x')\n    equation = Eq(90 + 90 + 5*x + x, 360)\n\n    # Solve the equation for x, which is the fourth angle.\n    fourth_angle = solve(equation, x)\n\n    # The largest angle in the quadrilateral would then be the third angle, which is 5 times the fourth angle.\n    largest_angle = 5 * fourth_angle[0]\n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n\n    for small in range(54 // 5 + 1):\n        for medium in range(54 // 7 + 1):\n            for large in range(54 // 10 + 1):\n                if (small * 5 + medium * 7 + large * 10 == 54):\n                    min_boxes = min(min_boxes, small + medium + large)\n    \n    if min_boxes == float('inf'):\n        return None\n    \n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    # Prime factorize 7007 to get the pairs of factors that are multiples of 7\n    factors = []\n    for i in range(14, 100, 7):  # Start from the smallest 2-digit multiple of 7\n        if 7007 % i == 0:\n            pair = 7007 // i\n            if 10 <= pair <= 99:  # The pair must also be a two-digit number\n                factors.append((i, pair))\n\n    # There will only be one such pair, return the sum of those factors\n    sum_of_factors = sum(factors[0])  # Take the first and only pair\n    return sum_of_factors\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # The number of ways to reach step i is denoted by dp[i]\n    dp = [0] * 11  # There are 10 steps, so we need 11 elements, including step 0.\n    dp[0] = 1  # There is 1 way to be at the starting point.\n\n    # Calculate the number of ways to get to each step up to the 4th\n    for i in range(1, 5):\n        dp[i] = dp[i - 1]\n        if i >= 2:\n            dp[i] += dp[i - 2]\n        if i >= 3:\n            dp[i] += dp[i - 3]\n\n    # Calculate the number of ways to get to each step after the 5th,\n    # avoiding the 5th itself\n    for i in range(5, 11):\n        if i == 5:  # Skip the 5th step\n            continue\n        dp[i] = dp[i - 1]\n        if i >= 2:\n            dp[i] += dp[i - 2]\n        if i >= 3:\n            dp[i] += dp[i - 3]\n\n    # But we need to account for reaching step 6 from step 4 directly,\n    # avoiding step 5 entirely\n    dp[6] += dp[4]\n\n    ans = dp[10]\n    return ans\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    # Create the sequence up to number 10\n    sequence = [i for i in range(1, 10) for _ in range(i)]\n    \n    # Find the median value\n    middle_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[middle_index - 1] + sequence[middle_index]) / 2\n    else:\n        median = sequence[middle_index]\n    \n    return median\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    # Number of visitors joining the line each minute\n    arrival_rate = 10\n\n    # Checkout rate for one entrance\n    checkout_rate_one_entrance = 25\n\n    # Checkout rate for two entrances\n    checkout_rate_two_entrances = 2 * checkout_rate_one_entrance\n\n    # Total visitors served in 16 min with one entrance\n    visitors_served_with_one_entrance = 16 * checkout_rate_one_entrance\n\n    # Since there will be no one waiting in line after 16 minutes with one entrance,\n    # we can assume the total number of visitors that joined the queue is equal to\n    # the number of visitors served in that time.\n    total_visitors = 16 * arrival_rate\n\n    # Calculate the time it will take for two entrances to serve all visitors,\n    # given that they can process at a rate of checkout_rate_two_entrances per minute\n    time_with_two_entrances = total_visitors / checkout_rate_two_entrances\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    time_hours = 15 / 60\n    distance_miles = miles_per_hour * time_hours\n    kilometers_per_mile = 1.60934\n    distance_kilometers = distance_miles * kilometers_per_mile\n\n    return distance_kilometers\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of frogs and y be the original number of dragonflies\n    x, y = symbols('x y')\n    \n    # The original amount of frogs is 9 more than that of dragonflies\n    equation1 = Eq(x, y + 9)\n    \n    # After the magic show, there are 11 frogs and 10 dragonflies in total\n    equation2 = Eq(x - (11 - 10), y + (11 - 10))  # Adjust x and y for the transformation\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    day_advance = 5\n    night_slides = 3\n    net_advance = day_advance - night_slides\n\n    current_distance = 0\n    day_count = 0\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_advance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slides\n    \n    return day_count\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n\n    cookies_left = total_cookies - cookies_given_away\n    num_bottles = cookies_left / cookies_per_bottle\n    \n    return int(num_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    # cookies = muffins + 24\n    equation1 = Eq(cookies, muffins + 24)\n\n    # (3/4) * muffins + (5/8) * cookies = 74\n    equation2 = Eq(3/4 * muffins + 5/8 * cookies, 74)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    # Extract the number of cookies before selling\n    initial_cookies = solutions[cookies]\n\n    return initial_cookies\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for i in range(999, 99, -1):\n        if i % 25 == 0:\n            return i\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    metro_cost = 0.5  # Assuming single way metro cost for one person\n    coffee_cost = 1  # Assuming cost of one coffee\n    entry_fee = 5  # Assuming cost of entry fee for the game for one person\n\n    # Richard's expenses\n    richard_expenses = 2 * metro_cost + coffee_cost + entry_fee\n\n    # Remaining amount for friends\n    remaining_amount = 40 - richard_expenses\n\n    # Cost per friend\n    per_friend_cost = 2 * metro_cost + coffee_cost + entry_fee\n\n    # Calculate number of friends Richard can treat\n    number_of_friends = remaining_amount // per_friend_cost\n\n    return int(number_of_friends)\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    # Since the number needs to be divisible by 9, the sum of its digits must be divisible by 9.\n    # If a number is divisible by 9, then sum of its digits must be a multiple of 9.\n    # Moreover, since the number is even and not divisible by 5, A cannot be 5 or any multiple of 5.\n    \n    # Calculate sum of known digits\n    digit_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    \n    # Find possible values for A satisfying divisibility by 9\n    for a in range(10):\n        if (digit_sum + 3 * a) % 9 == 0:\n            ans = a\n            return ans\n\n    return None\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    driver_time = symbols('driver_time')\n    \n    # Given ratio of speeds and extra time taken by cyclist\n    speed_ratio_driver_to_cyclist = 13 / 2\n    extra_time_cyclist = 143  # in minutes\n\n    # The distance is the same, so we use the fact that distance = speed * time.\n    # This leads to the following equation: driver_time * 13 = (driver_time + extra_time_cyclist) * 2\n    # We solve this equation to find driver_time\n    equation = Eq(driver_time * 13, (driver_time + extra_time_cyclist) * 2)\n\n    # Solving for the driver's time\n    driver_time_solution = solve(equation, driver_time)\n\n    # Return the time it takes the driver to reach the destination\n    return driver_time_solution[0]\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_numbers = sum(range(1, n + 1))\n    ans = sum_of_numbers ** 2\n    return ans\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    sequence = list(range(40, 49))\n    ans = sum(sequence[::2]) - sum(sequence[1::2])\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = 4 * 24 + 5 * 81 + 7 * 20\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Since we are to assume only one statement is correct,\n    # let's evaluate the logical consequences of each statement\n    # being the correct one.\n\n    for i in range(1, 6):\n        if i == 1:\n            # If statement 1 is correct, then all below are correct.\n            # This can't be true since only one statement can be correct.\n            statement1 = False\n        else:\n            statement1 = False\n        \n        if i == 2:\n            # If statement 2 is correct, none of the statements below is correct.\n            # This can't be true, because statement 2 itself would then be incorrect.\n            statement2 = False\n        else:\n            statement2 = True\n        \n        if i == 3:\n            # If statement 3 is correct, then one of the statements above is correct.\n            # This creates a paradox because if statement 3 is correct,\n            # then both 1 and 3 cannot be true.\n            statement3 = False\n        else:\n            statement3 = True\n        \n        if i == 4:\n            # If statement 4 is correct, all the statements above are correct.\n            # This can't be true since only one statement can be correct.\n            statement4 = False\n        else:\n            statement4 = True\n        \n        if i == 5:\n            # If statement 5 is correct, then none of the statements above is correct.\n            # Which means it supports statement 2 being false, making statement 5 true.\n            statement5 = statement2 is False\n        else:\n            statement5 = False\n        \n        # Determine which statement's truth value is unique and true.\n        statements = [statement1, statement2, statement3, statement4, statement5]\n        if sum(statements) == 1 and statements[i-1]:\n            return i\n    \n    return None\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    # let x be the total number of coins\n    x = symbols('x')\n    # one quarter of x are heads initially\n    heads_initial = x / 4\n    # turning over two more coins to show heads\n    new_heads = heads_initial + 2\n    # now one third of x are heads\n    equation = Eq(new_heads, x / 3)\n  \n    # solve for x\n    total_coins = solve(equation, x)\n  \n    return total_coins[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "def solution():\n    from math import factorial\n\n    # Total shows\n    total_shows = 5 + 3  # 5 singing and 3 comedy\n\n    # Function to calculate number of combinations\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Number of ways to choose position for comedy shows\n    # The comedy shows will be thought of as to be inserted between singing shows\n    # Since two comedy cannot be together, there are 6 slots (before and after each singing)\n    # We need to choose 3 out of these 6 slots for comedy shows\n    num_ways_comedy = nCr(6, 3)\n\n    # Calculate the total number of ways\n    ans = num_ways_comedy * factorial(5)  # factorial(5) for singing show arrangements\n\n    return ans\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    ways = trains + cars + flights\n    \n    return ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_length = 500\n    total_days = 5\n    meters_per_day = total_length / total_days\n    return meters_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # The sequence of digits is 23456789 repeating.\n    # Each cycle of this sequence contains 8 digits.\n    cycle_length = 8\n    total_digits = 2100\n    cycles = total_digits // cycle_length\n    remaining_digits = total_digits % cycle_length\n\n    # Sum of the cycle 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    cycle_sum = sum(range(2, 10))\n\n    # Sum of the remaining digits after complete cycles\n    remainder_sum = sum(range(2, 2 + remaining_digits))\n\n    # Total sum\n    total_sum = (cycle_sum * cycles) + remainder_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    values.sort()\n    middle_index = len(values) // 2\n    return values[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x * 5 + 7) / 4, 8)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let's denote the original number as x\n    # According to the problem, we have:\n    # (x / 2) - 9 = 12\n    # Solving for x:\n    x = (12 + 9) * 2\n    \n    return x\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    # There are 6 people and 6 seats to consider\n    # (8 seats minus 2 ignored since rotations are considered the same)\n    num_people = 6\n    num_seats = num_people\n\n    # Calculate the arrangements without considering rotation\n    arrangements = factorial(num_seats)\n\n    # Divide by the number of seats to account for rotations\n    # which doesn't change the order we consider\n    num_ways = arrangements // num_seats\n\n    return num_ways\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "import itertools\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    min_even = float('inf')  # Initialize with an infinitely large number\n\n    for perm in itertools.permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 == 0 and number < min_even:\n            min_even = number\n            \n    return min_even\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the number of steps of the escalator\n    s = symbols('s')\n\n    # Speed of the escalator is considered constant, let's denote it e (steps per second)\n\n    # When Peter walks at 1 step per second, in 10 seconds he covers 10 steps plus 10 times the escalator speed\n    equation1 = Eq(10 + 10 * e, s)\n\n    # When Peter walks at 2 steps per second, in 8 seconds he covers 16 steps plus 8 times the escalator speed\n    equation2 = Eq(16 + 8 * e, s)\n\n    # We solve the system of equations to find the values of s and e\n    solutions = solve((equation1, equation2), (s, e))\n\n    return solutions[s]\n\n# Call the function to get ans\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n\n    num_quarters = total_dollars * quarters_in_one_dollar\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_cost = 72  # The cost of chocolate in pence.\n    note_value = 10 * 100  # The value of the note given in pence (￡10 note).\n    change_received = 3.88 * 100  # The change received in pence (￡3.88).\n    balloon_cost = 20  # The cost of one balloon in pence.\n\n    # Total amount spent\n    amount_spent = note_value - change_received\n\n    # Amount spent on balloons\n    amount_spent_on_balloons = amount_spent - chocolate_cost\n\n    # Number of balloons bought\n    num_balloons = amount_spent_on_balloons // balloon_cost\n\n    return num_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    \n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    return 0.45 * 2000\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    kayak_capacity = 4\n    kayaks_needed = (students + kayak_capacity - 1) // kayak_capacity\n    return kayaks_needed\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import solve, symbols, sqrt\n\n    a = 4 * sqrt(3)\n    x = symbols('x')\n    equation = 3 * a - sqrt(3 * x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # The ages of the youngest three Dwarfs form an arithmetic sequence with a common difference of 1 year.\n    # Let the age of the youngest Dwarf be y years, then the next two Dwarfs' ages are y+1 and y+2 respectively.\n    # Their total age is: y + (y+1) + (y+2) = 42\n    # Solving for y gives y + y + 1 + y + 2 = 42 => 3y + 3 = 42 => 3y = 39 => y = 13\n    \n    # Now, to find the total age of the oldest three, we simply need to find the ages of Dwarfs 5, 6 and 7.\n    # The ages of Dwarfs 5, 6, and 7 would be y+4, y+5, and y+6, since the ages differ by 1 year.\n    \n    y = 13\n    total_age_oldest_three = (y+4) + (y+5) + (y+6)\n    \n    return total_age_oldest_three\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2/9\n\n    # Money spent on 5 cupcakes and 6 slices of pizza\n    spent_money = total_money * spent_fraction\n\n    # Let's assume the cost of one cupcake is c and one slice of pizza is p\n    # The cost of 3 slices of pizza is equal to the cost of 2 cupcakes\n    # So, 3p = 2c or c = (3/2) * p\n\n    # Now using the spent money equation: 5 cupcakes + 6 slices of pizza\n    # 5c + 6p = spent_money\n    # Replacing c with (3/2) * p\n    # 5 * (3/2) * p + 6p = spent_money\n    # (15/2) * p + 6p = spent_money\n    # Multipling both sides by 2 to clear the fraction\n    # 15p + 12p = 2 * spent_money\n    # 27p = 2 * spent_money\n\n    # Solving for the cost of one slice of pizza\n    cost_per_pizza = (2 * spent_money) / 27\n\n    # Now, we need to find the greatest number of cupcakes that Mark could buy with the money he had left\n    money_left = total_money - spent_money\n\n    # The cost of one cupcake is (3/2) * cost_per_pizza\n    cost_per_cupcake = (3/2) * cost_per_pizza\n\n    # The greatest number of cupcakes he could buy is the whole number division of money left by the cost of one cupcake\n    max_cupcakes = money_left // cost_per_cupcake\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):\n        if len(set(str(i))) == len(str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 9  # This is 24 - 15, or each month's increment\n\n    # Using the formula for the n-th term of an arithmetic progression:\n    # last_term = first_term + (num_months - 1) * difference\n    # Rearranging for num_months:\n    num_months = ((last_term - first_term) / difference) + 1\n\n    return int(num_months)\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 3, 5]\n    perm = permutations(digits, 3)  # Get all permutations of length 3\n\n    # Convert the permutations to a list of numbers\n    numbers = [int(''.join(map(str, p))) for p in perm]\n\n    # Count the number of unique numbers\n    count = len(set(numbers))\n\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from math import sqrt, floor\n    \n    count = 0\n    num = 2\n    \n    while len(str(num)) < 6:  # Limits to numbers of form 25555... up to 5 digits\n        if floor(sqrt(num)) == sqrt(num):\n            count += 1\n        num = num * 10 + 5  # Generate the next number in the pattern\n\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # Let x be the number of pieces of paper that were cut into three parts.\n    # Initially, there are 10 pieces of paper.\n    # Each piece that is cut into three parts increases the total number of pieces by 2.\n    # We end up with 16 pieces of paper.\n    # Therefore, the equation to solve is: 10 + 2 * x = 16\n    # Subtract 10 from both sides: 2 * x = 16 - 10\n    # Divide both sides by 2: x = (16 - 10) / 2\n    # Solve for x.\n    x = (16 - 10) // 2\n    return x\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Number of parts a single worker can produce in 4 minutes\n    parts_per_worker_in_4_minutes = 120 / 6\n    # Number of parts a single worker can produce in 1 minute\n    parts_per_worker_per_minute = parts_per_worker_in_4_minutes / 4\n    # Number of parts 3 workers can produce in 1 minute\n    parts_per_3_workers_per_minute = parts_per_worker_per_minute * 3\n    # Number of parts 3 workers can produce in 10 minutes\n    parts_per_3_workers_in_10_minutes = parts_per_3_workers_per_minute * 10\n    \n    return parts_per_3_workers_in_10_minutes\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisor_count, isprime\n    \n    n = 2240\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    for factor in factors:\n        if divisor_count(n // factor) % 2 == 0 and not isprime(n // factor):\n            return factor\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimmers = total_pupils * 70 / 100\n    non_swimming_boys_percentage = 40 / 100\n    swimming_girls = 200\n\n    non_swimming_boys = non_swimming_boys_percentage * (total_pupils - swimming_girls)\n    swimming_boys = (swimmers - swimming_girls)\n    boys = swimming_boys + non_swimming_boys\n    girls = total_pupils - boys\n\n    return girls\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_value = 160\n    new_value = 168\n    increase = new_value - original_value\n    percentage_increase = (increase / original_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rice, oatmeal = symbols('rice oatmeal')\n    \n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n\n    solutions = solve((equation1, equation2), (rice, oatmeal))\n\n    return solutions[rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*(6*x + 1) - 2*x, 89)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_to_n = (n * (n + 1) // 2)\n    ans = sum_to_n ** 2\n    return ans\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n    return round(total_percentage_discount, 2)\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Amount of 10% sugar water needed\n\n    # Equation for the total weight of the sugar from both solutions\n    equation = Eq(4 * 0.30 + x * 0.10, (4 + x) * 0.26)\n\n    amount_of_10_percent_water = solve(equation, x)[0]\n\n    return amount_of_10_percent_water\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let 'j' be the mass of the empty jar and 'c' be the mass of one chocolate.\n    # We have two equations based on the problem statement:\n    # j + 5c = 185 and j + 17c = 317\n    # We can solve these equations for 'j' and 'c'.\n    \n    from sympy import symbols, Eq, solve\n    \n    j, c = symbols('j c')\n    \n    equation1 = Eq(j + 5 * c, 185)\n    equation2 = Eq(j + 17 * c, 317)\n    \n    # Now we solve these equations to find the values of 'j' (the jar's mass) and 'c' (the mass of one chocolate).\n    solutions = solve((equation1, equation2), (j, c))\n    \n    # Once we have 'j' and 'c', we can find the mass of the jar with 10 chocolates using the formula: mass = j + 10*c\n    mass_with_10_chocolates = solutions[j] + 10 * solutions[c]\n    \n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    number_of_ways = 0\n    n = 200\n\n    # Iterate through all possible divisors\n    for i in range(1, n + 1):\n        if n % i == 0 and i != n:  # Check if i is a divisor of n and not n itself\n            number_of_ways += 1\n\n    # Each equal partitioning can be represented by its divisor i\n    # However, each partitioning is counted twice (once as \"i parts of n/i\" and once as \"n/i parts of i\"),\n    # except for the square root of n (if it's an integer) which is counted correctly once.\n    # So, we subtract the over count by dividing by 2 and then adding 1 if n is a perfect square.\n    ans = (number_of_ways // 2) + (1 if int(n**0.5) == n**0.5 else 0)\n\n    return ans\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_op(custom_op(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_fraction = 1/4\n\n    total_apples = total_trees * apples_per_tree\n    rotten_apples = rotten_fraction * total_apples\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    perimeter = 2 * (144 + 204)\n    # Subtract the corners since they are not part of the distances we're dividing the field into\n    total_wheat = 116 - 4\n    # The number of intervals between the wheat is one less than the number of wheat\n    num_intervals = total_wheat - 1\n    distance_between_wheat = perimeter / num_intervals\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lana, mark = symbols('lana mark')\n    \n    equation1 = Eq(lana + mark, 674)\n    equation2 = Eq(lana - lana / 3, mark - 34)\n    \n    solutions = solve((equation1, equation2), (lana, mark))\n    \n    return solutions[lana] - solutions[mark]\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    timmy_stickers = 96 // 8\n    kevin_stickers = timmy_stickers + 45\n    return kevin_stickers\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_days = symbols('total_days')\n    # Let x = total number of days of the summer holiday\n\n    # He spent half working, so he has half remaining\n    # He spent 4 days at a friend's house, and 2 weeks (14 days) in a camp\n    # The remaining time he spent reading and relaxing was half of what was left after working\n    # Hence, (x/2) - 4 - 14 = (x / 2) / 2\n    # Simplifying: x/2 - 18 = x/4\n    # So: x/4 + 18 = x/2\n\n    equation = Eq(total_days / 4 + 18, total_days / 2)\n    solution = solve(equation, total_days)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # Since one cat takes 10 minutes to catch a fish,\n    # Five cats would also take 10 minutes to catch five fish\n    # because they can work simultaneously.\n    return 10\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n    \n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Let's denote the distance between every 2 wheat as 'd'.\n    # Since every corner is planted with a wheat, we have to subtract the corners from the total.\n    # Wheat plants are along the perimeter of the rectangle.\n    # Total number of wheat minus the corners gives us the number of spaces between the wheat.\n    total_wheat = 116\n    corner_wheat = 4\n    wheat_along_sides = total_wheat - corner_wheat \n    \n    # The perimeter of the rectangle ignoring the corner wheat is '2*(144/d) + 2*(204/d) - 4'.\n    # The formula for the number of wheat given the spacing 'd' along the perimeter is then:\n    # 2*(144/d) + 2*(204/d) - 4 = wheat_along_sides\n    # Simplify to find 'd'.\n    \n    # The perimeter of the rectangle minus the corners:\n    perimeter = 2 * (144 + 204)\n    perimeter_without_corners = perimeter - 4 * d\n    \n    # Since the spacing is uniform, we divide the perimeter without corners by the number of spaces to get 'd'.\n    d = perimeter_without_corners / wheat_along_sides\n\n    return d\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    number = (result / 9) * 4 - 3\n    return number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2 / 7) * total_bracelets\n    remainder_after_morning = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3 / 5) * remainder_after_morning\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    more_bracelets_needed = total_bracelets - bracelets_made\n    return int(more_bracelets_needed)\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    # Total people to interview\n    total_people = 200\n    \n    # Ellie's rate of interviewing per week\n    ellie_rate = 40\n    \n    # Combined work time of Ellie and Gloria\n    combined_weeks = 4\n    \n    # Combined rate of interviewing per week\n    combined_rate = total_people / combined_weeks \n\n    # Gloria's rate of interviewing per week\n    gloria_rate = combined_rate - ellie_rate\n\n    # Time it takes for Gloria to finish interviewing everyone by herself\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(1, 10):  # Ensure F is not 0 as it's the first digit\n                    if len({A, 2, 0, C, E, F}) == 6:  # All digits must be distinct\n                        num1 = int(f\"{A}20{C}E{F}\")\n                        num2 = int(f\"{E}F{A}20{C}\")\n                        if 5 * num1 == 6 * num2:\n                            return int(f\"{F}{A}2{E}\")\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    result = (3/8) * 48\n    return result\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60  # The total weight of the dogfood mixture\n    rice_A = 15 * 0.40  # Pounds of rice in dogfood A\n    total_rice = total_weight * 0.28  # Total pounds of rice in the mixture\n    \n    rice_B = total_rice - rice_A  # Pounds of rice in dogfood B\n    percent_rice_B = (rice_B / 60) * 100  # Percent of rice in dogfood B\n    \n    return percent_rice_B\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # Introduce variables for the four numbers as a, b, c, d where a > b > c > d\n    # smallest number is d, largest is a\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n\n    # The sum of the smallest number and the average of the other three numbers is 39\n    equation1 = Eq(d + (a + b + c) / 3, 39)\n\n    # The sum of the largest number and the average of the other three numbers is 51\n    equation2 = Eq(a + (b + c + d) / 3, 51)\n\n    # a, b, c, d are distinct positive whole numbers, so we solve for a range of probable values\n    # We increase value of a until it no longer meets the requirement (using a while loop)\n    max_a = 0\n    for a_val in range(1, 100):  # assume the largest number won't be more than 100\n        solutions = solve((equation1.subs(a, a_val), equation2.subs(a, a_val)), (b, c, d))\n        # Check if b,c,d are whole numbers and distinct\n        if solutions and all(x.is_Integer and x > 0 for x in solutions.values()) \\\n                and len(set(solutions.values())) == 3:\n            b_val, c_val, d_val = solutions[b], solutions[c], solutions[d]\n            if b_val > c_val > d_val:\n                max_a = max(max_a, a_val)\n\n    return max_a\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # milliliters\n    time_in_minutes = 2 * 60  # convert hours to minutes\n    total_milliliters = rate_per_minute * time_in_minutes\n    total_liters = total_milliliters / 1000  # convert milliliters to liters\n    return total_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n\n    num_trees = (road_length // tree_distance) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Let d be the distance to the shopping mall from the starting point.\n    # When Barbara reaches the mall, Catherine still has 60 metres to go.\n    # Let t be the time it takes for Barbara to reach the mall.\n    # Barbara's distance = Barbara's speed * time\n    # Catherine's distance = Catherine's speed * time\n    # Therefore, Barbara's distance = Catherine's distance + 60\n    # Replace distance with speed * time for each, we get:\n    # 60 * t = 45 * t + 60\n    # Solve for t:\n    t = 60 / (60 - 45)\n    # Once we have t, we can find the distance to the mall as:\n    distance = 60 * t\n    \n    return distance\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, pen = symbols('book pen')\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n    \n    solutions = solve((equation1, equation2), (book, pen))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_received = (2 * 10) + (5 * 5) + (4 * 0.20)\n    money_spent = 100 - total_received\n\n    return money_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    ratio_equation = Eq(A/B, 4/3)\n    more_than_equation = Eq(A, C + 20)\n    total_equation = Eq(A + B + C, 200)\n\n    solutions = solve((ratio_equation, more_than_equation, total_equation), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    solutions = solve((equation,), (x,))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3  # minutes it takes to fry a plate of fried rice\n    total_time = 18  # total time available in minutes\n\n    num_plates = total_time // time_per_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini, dad = symbols('nini dad')\n    \n    # Nini's dad is twenty-five years older than Nini\n    equation1 = Eq(dad, nini + 25)\n    \n    # After five years, dad's age will be 8 less than two times Nini's age\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (nini, dad))\n    \n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students = 50\n    ans = 0\n    for i in range(1, students + 1):\n        if i % 4 == 0 and i % 6 == 0:\n            continue\n        if i % 4 == 0 or i % 6 == 0:\n            continue\n        ans += 1\n    return ans\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    sold_first_day = total_pears * 2 / 5\n    remaining_after_first_day = total_pears - sold_first_day\n    sold_second_day = remaining_after_first_day * 7 / 9\n    return sold_second_day\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    result = 2536 / 4\n    return result\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    frac_part = 3/4\n    percent_part = 30/100\n    whole_number = 120\n    \n    ans = frac_part * percent_part * whole_number\n    return ans\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # Since at least one student must get 3 apples, we can give 3 apples to one student.\n    # Then we have 29 - 3 apples left to distribute freely among the students including the one who already got 3.\n    remaining_apples = 29 - 3\n    \n    # Now we determine the maximum number of students such that each student gets at least one apple.\n    # Each student must get at least one of the remaining apples.\n    # We already have one student, so we start the count from 1.\n    num_students = 1\n    \n    while remaining_apples > 0:\n        remaining_apples -= 1  # Give one apple to each new student\n        num_students += 1      # Increment the number of students\n    \n    # Since we have distributed all remaining apples and each student has at least one apple,\n    # the result is the total number of students.\n    return num_students\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    num_boys = 3\n    num_girls = 4\n    ways_to_pick_leads = num_boys * num_girls\n    return ways_to_pick_leads\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reversed_num = int(str(num)[::-1])\n            if num != reversed_num and isprime(reversed_num):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green = symbols('green')\n    blue = symbols('blue')\n\n    equation1 = Eq(green + blue, 140)\n    equation2 = Eq(blue - (2/5)*blue, green - 28)\n\n    solutions = solve((equation1, equation2), (green, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Probability of not being in the first two bars\n    prob_not_in_two_bars = 1 - 0.9\n\n    # Since the question states the alcoholic visits three fixed bars at random,\n    # if they are not at the first two, they must be at the third one.\n    # Therefore the probability of being at the third bar is the same as\n    # the probability of not being at the first two, if they drink at least in one.\n    return prob_not_in_two_bars\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eliot, cousin = symbols('eliot cousin')\n    \n    # Eliot is now twice his cousin's age\n    equation1 = Eq(eliot, 2 * cousin)\n    \n    # In 4 years' time Eliot will be 16\n    equation2 = Eq(eliot + 4, 16)\n    \n    solutions = solve((equation1, equation2), (eliot, cousin))\n    \n    # Calculate cousin's age in 4 years\n    cousin_future_age = solutions[cousin] + 4\n    \n    return cousin_future_age\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    first_number = 387\n    second_number = 729\n    average = (first_number + second_number) / 2\n    return average\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_first_catch = 100\n    total_second_catch = 100\n    marked_second_catch = 16\n    \n    # Using the capture-recapture method to estimate the total population\n    estimated_total = (marked_first_catch * total_second_catch) / marked_second_catch\n    \n    return estimated_total\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    ans = 324 + 132\n    return ans\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance walked by Nancy as x meters\n    # Randy will have walked x + 10 meters\n    # The ratio of distances walked is 2:3 for Nancy and Randy\n    # Therefore, for every 2 meters Nancy walks, Randy walks 3 meters\n\n    # Let x be the distance Nancy walks\n    # Randy walks x + 10 meters\n    # The total distance is x + (x + 10)\n    \n    nancy, total_distance = symbols('nancy total_distance')\n\n    # Equation based on the distance proportion\n    equation1 = Eq(nancy * 3, (nancy + 10) * 2)\n\n    # Solve for nancy\n    nancy_solution = solve(equation1, nancy)[0]\n    \n    # Solve for the total distance\n    total_distance_solution = solve(Eq(total_distance, nancy + nancy + 10), total_distance)[0].subs(nancy, nancy_solution)\n    \n    return total_distance_solution\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Set up the recurring decimal as a geometric series\n    # 0.2014141414... = 0.20 + 0.0014 + 0.000014 + ...\n    #                   = 200/9900 + 14/9900 * (1/100 + 1/10000 + ...)\n    #                   = 200/9900 + 14/9900 * (1 / (1 - 1/100))\n    \n    # The sum of the infinite geometric series (1/100 + 1/10000 + ...) is 1/(1 - r), where r is the common ratio (1/100 in this case)\n\n    # Calculate the total fraction\n    fraction = 200/9900 + 14/9900 * 1/(1 - 1/100)\n\n    # Find x by multiplying the fraction by 9900 as per the equation x/9900 = fraction\n    x = fraction * 9900\n    \n    # Return the whole number part of x\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ali, bronson, charlie = symbols('ali bronson charlie')\n    \n    # \"Ali has 5 marbles less than the average of Bronson's and Charlie's\"\n    equation1 = Eq(ali, (bronson + charlie)/2 - 5)\n    # \"Bronson has twice as many marbles as Ali\"\n    equation2 = Eq(bronson, 2 * ali)\n    \n    # Now we solve these two equations for ali and charlie\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n    \n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum_even = sum(range(10, 21, 2))  # Sum of even numbers from 10 to 20\n    sum_odd = sum(range(9, 20, 2))    # Sum of odd numbers from 9 to 19\n    return sum_even - sum_odd\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(10):\n            for unit in range(0, 10, 2):  # Even unit digit\n                if hundred + ten + unit == 8 and hundred != ten and ten != unit and hundred != unit:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000):\n        if num % 10 == 2:\n            new_num = int(str(2) + str(num)[:-1])\n            if new_num == num // 3:\n                return num\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    passed_second_failed_first = 3\n\n    passed_only_first = passed_first - (total_students - failed_second - passed_second_failed_first)\n\n    return passed_only_first\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    num, _ = solve_congruence(*congruences)\n    while num <= 1000:\n        if num >= 500:\n            return num\n        num += 5*8*9  # LCM of 5, 8, 9\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n    \n    remainder = total_bars % people\n    \n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Each digit will appear in each place (hundreds, tens, ones) 2 times.\n    place_factor = 2 * (100 + 10 + 1)\n    \n    # Sum of all numbers will be sum of digits times the place factor\n    sum_all = (a + b + c) * place_factor\n    \n    return sum_all\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            number = a * 10 + b\n            reverse_number = b * 10 + a\n            product = number * reverse_number\n            if str(product)[1] == str(product)[2] == '0':\n                return number\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_for_300 = 300 / pay_per_hour\n    return hours_for_300\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    large_sack, small_sack = symbols('large_sack small_sack')\n\n    equation1 = Eq(large_sack, small_sack * 1.20)\n    equation2 = Eq(large_sack + small_sack, 77)\n\n    solutions = solve((equation1, equation2), (large_sack, small_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Original number of oranges and apples is 125\n    equation1 = Eq(oranges + apples, 125)\n\n    # She sold half of the apples and 35 oranges\n    # End up with equal number of oranges and apples\n    equation2 = Eq(oranges - 35, apples / 2)\n\n    solutions = solve((equation1, equation2), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    decimal_val = 5 / 9\n    ans = round(decimal_val, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome number\n    least_5_digit_palindrome = int(\"10001\")\n    \n    # The greatest 6-digit palindrome number\n    greatest_6_digit_palindrome = int(\"999999\")\n\n    # The difference between the least 5-digit palindrome and the greatest 6-digit palindrome\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n\n    min_cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n\n    return min_cabins_needed\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 59):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    digit_count = 0\n    for i in range(1200, 0, -1):\n        digit_count += len(str(i))\n        if digit_count >= 2011:\n            return int(str(i)[-(digit_count - 2011) - 1])\n            \nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins = symbols('coins')\n    # Before flipping two coins: heads = coins / 4\n    # After flipping two coins: heads = (coins / 4) + 2\n    # Also after flipping two coins, heads represent one third of the total coins: (coins / 4) + 2 = coins / 3\n\n    # Set up equation based on above logic and solve for coins\n    equation = Eq((coins / 4) + 2, coins / 3)\n    number_of_coins = solve(equation, coins)\n\n    # Since we're talking about coins, there must be a whole number of them\n    return int(number_of_coins[0])  # Solution will be the first (and only) element of the solution list.\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_to_the_right = 6\n    total_books = position_from_left + books_to_the_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    last_multiple = 50 // 5 * 5  # largest multiple of 5 less than or equal to 50\n    number_of_multiples = last_multiple // 5\n    first_multiple = 5\n    sum_of_multiples = (number_of_multiples * (first_multiple + last_multiple)) // 2\n    return sum_of_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km per minute\n    speed_planet2 = 40  # km per minute\n    time = 5  # minutes ago\n\n    # The total distance they traveled in 5 minutes\n    distance_travelled = (speed_planet1 + speed_planet2) * time\n    \n    return distance_travelled\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Each car has 4 tyres, each motorbike has 2 tyres\n    # Let's assume the number of cars is x and the number of motorbikes is y\n    # Then we have the following equations:\n    # x + y = 140 (total number of vehicles)\n    # 4x + 2y = 490 (total number of tyres)\n\n    # We can solve these equations for x and y.\n    # First, multiply the first equation by 2 and subtract from the second to find x.\n    \n    # 2x + 2y = 280 (after multiplying by 2)\n    # 4x + 2y = 490\n    # -----------------\n    # 2x       = 210 (subtracting the first from the second)\n    \n    # Now, divide by 2 to find the number of cars\n    x = 210 // 2\n    return x\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # Two-digit numbers can't start with 0, so there are 5 choices for the first digit (1-5)\n    choices_for_first_digit = 5\n\n    # When the first digit is chosen, there are still 6 options for the second digit because it can include 0.\n    choices_for_second_digit = 6\n    \n    # The total number of combinations is the product\n    total_combinations = choices_for_first_digit * choices_for_second_digit\n    \n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    discounted_price = 64\n    discount_percentage = 20\n    original_price = discounted_price / (1 - (discount_percentage / 100))\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_ratio = 4\n\n    apple_juice_litres = (apple_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n    equation1 = Eq(190 % n, a)\n    equation2 = Eq(137 % n, a + 4)\n    equation3 = Eq(101 % n, a + 6)\n\n    solutions = solve((equation1, equation2, equation3), (a, n))\n    # Get remainder of 299 divided by the unknown number\n    remainder = 299 % solutions[n]\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    return 125 * (76 + 12)\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n    \n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    # Let the original number be x\n    # According to the problem, 2x + 12 = 26\n    # We perform inverse operations to solve for x\n    # Subtract 12 from both sides: 2x = 26 - 12\n    # x = (26 - 12) / 2\n    x = (26 - 12) / 2\n    return x\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 13 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5 * 25 / 100) + (1/4 * 2.2) - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    students_per_class = 100\n    classes = 5\n    donation_per_student = 5.78\n    total_donation = students_per_class * classes * donation_per_student\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    from sympy import isprime\n\n    max_sum = 0\n    for y in range(2, 199):  # start from the smallest prime and don't need to check for y >= 199 (which will make x <= 1)\n        if isprime(y):\n            x = (200 + y) / (2 + y)\n            if x.is_integer() and isprime(x) and x != y:\n                sum_xy = x + y\n                if sum_xy > max_sum:\n                    max_sum = sum_xy\n    return int(max_sum)\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent_money = 2\n    fraction_of_total = 1/4\n    total_money = spent_money / fraction_of_total\n    return total_money\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    rounds = teams * (teams - 1) // 2\n    return rounds\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    # The numbers are: 2, 2, 3, 3, 4, 5 where 2 and 3 are repeated twice.\n    repeats_of_2 = 2\n    repeats_of_3 = 2\n    \n    # The number of permutations for a multiset is total!/(repeats_of_2! * repeats_of_3!)\n    permutations = factorial(total_digits) // (factorial(repeats_of_2) * factorial(repeats_of_3))\n    \n    return permutations\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    sleepy_height = 80\n    \n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezy, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(sleepy, sleepy_height)\n    equation7 = Eq(doc + sleepy, dopey + sneezy)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    numerator = (5 + 1/6) + (6 + 1/5)\n    denominator = (1/6) + (1/5)\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_numbers = sorted(int(\"\".join(p)) for p in permutations(digits))\n    return all_numbers[4]\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_for_2600_meters = 2600 / meters_per_day\n    return days_for_2600_meters\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_in_5_hours = 250\n    time_in_hours = 3\n    speed_per_hour = distance_in_5_hours / 5\n\n    distance_in_3_hours = speed_per_hour * time_in_hours\n\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for i in range(10, 60):\n        if i % 8 == 3 and i % 7 == 6:\n            return i\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first_term = 12\n    last_term = 90\n    num_terms = (last_term - first_term + 1)\n\n    if num_terms % 2 == 0:\n        middle_term = (first_term + last_term) // 2\n        sum_middle_terms = middle_term * 2\n        is_even = sum_middle_terms % 2 == 0\n    else:\n        middle_term_1 = (first_term + last_term - 1) // 2\n        middle_term_2 = (first_term + last_term + 1) // 2\n        sum_middle_terms = middle_term_1 + middle_term_2\n        is_even = sum_middle_terms % 2 == 0\n\n    return 'Even' if is_even else 'Odd'\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for i in range(2, 21):\n        if isprime(i):\n            if isprime(i - 6) or isprime(i + 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    distance_between_trees = 5\n    number_of_trees = 30\n    \n    # Since Tom plants 30 trees, there are 29 intervals between them.\n    number_of_intervals = number_of_trees - 1\n\n    # Calculate the length of the road by multiplying the number of intervals with the distance between trees.\n    length_of_road = distance_between_trees * number_of_intervals\n\n    return length_of_road\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let's denote the numbers on the hats as a, b, and c.\n    # Based on the problem, we have the following equations:\n    # a + b = 11 (Rory's total)\n    # a + c = 17 (Sophia's total)\n    # b + c = 22 (Qiang's total)\n    # To solve these equations, we can sum all of them to get 2(a + b + c) = 50\n    # Then a + b + c = 25\n    # We can find any of the numbers by subtracting one equation from this sum, for example:\n    # c = 25 - 11 = 14\n    # b = 25 - 17 = 8\n    # a = 25 - 22 = 3\n    # The largest number is Sophia's c, which is 14\n\n    a_plus_b = 11\n    a_plus_c = 17\n    b_plus_c = 22\n\n    sum_of_all = (a_plus_b + a_plus_c + b_plus_c) // 2\n    c = sum_of_all - a_plus_b\n    b = sum_of_all - a_plus_c\n    a = sum_of_all - b_plus_c\n    \n    largest_number = max(a, b, c)\n    return largest_number\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= 1 + 1 / i\n    return product\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Convert the minutes into hours. 30 minutes is 0.5 hour.\n    # The distance covered can be represented by speed * time.\n    first_30_minutes_distance = x * 0.5\n    second_30_minutes_distance = (x - 20) * 0.5\n    last_30_minutes_distance = (x + 10) * 0.5\n\n    # Total distance covered in the respective time periods should add up to 70 miles.\n    equation = Eq(first_30_minutes_distance + second_30_minutes_distance + last_30_minutes_distance, 70)\n\n    # Solving the equation for x.\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    bus_capacity = 25\n\n    buses_needed = -(-total_people // bus_capacity)  # use ceiling division to round up\n\n    return buses_needed\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    pages = 345\n    digits = 0\n    \n    # For pages 1-9, there are 9 pages with 1 digit\n    if pages >= 9:\n        digits += 9\n    \n    # For pages 10-99, there are 90 pages with 2 digits\n    if pages >= 99:\n        digits += (99 - 10 + 1) * 2\n    else:\n        digits += (pages - 9) * 2\n        return digits\n    \n    # For the remaining pages (100-345), there are 246 pages with 3 digits\n    digits += (pages - 99) * 3\n    \n    return digits\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize = symbols('total_prize')\n\n    equation = Eq((1/5 + 1/15) * total_prize, 360)\n\n    solution = solve(equation, total_prize)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    # There are 5 other players except the coach and the captain.\n    # The coach has to stand in the middle, and there are 2 possible positions for the captain (left or right to the coach).\n    # The remaining 5 players can be arranged in any order in the remaining 5 positions.\n    from math import factorial\n\n    # Number of ways to arrange the captain\n    captain_ways = 2\n\n    # Number of ways to arrange the other 5 players\n    other_players_ways = factorial(5)\n\n    # Use the multiplication principle to find the total number of ways\n    total_ways = captain_ways * other_players_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n\n    # If 3 fish per penguin, 25 fish left\n    equation1 = Eq(3 * penguins + 25, 6 * penguins - 5) \n    \n    # Solve for penguins\n    total_penguins = solve(equation1, penguins)\n    \n    return total_penguins[0]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    ans = (-0.512)**(1/3) + (-1.2)**2\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_of_terms = 0\n    current_number = 1\n    for i in range(1, 31):\n        sum_of_terms += current_number\n        if i == (current_number * (current_number + 1)) // 2:\n            current_number += 1\n    return sum_of_terms\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    total_diff = 20\n    total_students = 0\n\n    # Start with 1 since the smallest square is 1x1 and we'll count in layers.\n    layer = 1\n    while True:\n        # Boys are on the odd layers, girls on the even. Subtract twice the layer size since each layer contains that many boys/girls on two sides.\n        boys = layer * layer\n        girls = (layer - 1) * (layer - 1)\n\n        # Current boys-girls difference\n        diff = boys - girls\n        if diff == total_diff:\n            # Total students are the square of the current layer of boys plus girls inside.\n            total_students = boys + girls\n            break\n        elif diff > total_diff:\n            # If the difference exceeds the total difference,\n            # there's no possible arrangement, hence break.\n            break\n        layer += 2  # Increase by 2 to consider the next layer of boys.\n\n    return total_students\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    result = (0.25 * 20) + (1/5 * 30) + (2/3 * 18)\n    return result\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    # Total votes so far for the three candidates\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n\n    # Total votes received by Alice and Betty\n    alice_betty_votes = alice_votes + betty_votes\n\n    # Cindy needs at least one more vote than the total votes of Alice and Betty combined\n    # to ensure that she is the Model Student\n    cindy_needed_votes = alice_betty_votes + 1\n\n    # The difference between the votes Cindy needs to ensure a win and the votes she has now\n    more_votes_needed = cindy_needed_votes - cindy_votes\n\n    return more_votes_needed\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    # The equation based on the given relationships\n    equation1 = Eq((3/4) * chelsia, (5/6) * brian)\n    # Chelsia has $24 more than Brian\n    equation2 = Eq(chelsia - brian, 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    gina_age_in_2005 = 50\n    james_age_in_1997 = 20\n    age_difference = gina_age_in_2005 - james_age_in_1997\n    james_birth_year = 1997 - james_age_in_1997\n    gina_age_when_james_born = james_birth_year + age_difference - (2005 - 50)\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    from fractions import Fraction\n\n    # First expression: (7 / -3.333...) / (cube root of -0.027)\n    num1 = Fraction(7, -10 / 3)\n    den1 = Fraction(1, (-27 / 1000) ** (1/3))\n    expr1 = num1 / den1\n\n    # Second expression: (2^3 / 4^2) / (0.125 * [1.8 - (0.2 * 7)])\n    num2 = Fraction(2 ** 3, 4 ** 2)\n    den2 = Fraction(1, 1/8 * (1.8 - (0.2 * 7)))\n    expr2 = num2 / den2\n\n    # Third expression: [0.1 / (0.142857 repeating) + (2 * 0.3)]\n    num3 = Fraction(1, 10)\n    den3 = Fraction(1, Fraction(1, 7))\n    expr3 = num3 / den3 + (2 * 3 / 10)\n\n    # Combine all expressions\n    ans = expr1 + expr2 - expr3\n\n    return ans.numerator / ans.denominator\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve\n    \n    sales = symbols('sales')\n    \n    # Commission for the first $25000\n    commission1 = 0.02 * 25000\n\n    # Commission for the remaining sales over $25000, with the commission rate of 5%\n    commission2 = 0.05 * (sales - 25000)\n\n    # Commission is the sum of both parts, but the second part only applies if sales > 25000\n    total_commission = commission1 * (sales <= 25000) + (commission1 + commission2) * (sales > 25000)\n\n    # Total salary is base salary plus commission\n    total_salary = 3300\n\n    # Base salary is given as $2500, so set equation for the total commission earned\n    salary_equation = Eq(2500 + total_commission, total_salary)\n\n    # Solve the equation for the total sales\n    sales_solution = solve(salary_equation, sales)\n    \n    # Since sales can't be negative, take the positive solution\n    actual_sales = max(sales_solution)\n\n    return actual_sales\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    prob_pass_first = 0.4\n    prob_fail_first = 1 - prob_pass_first\n    prob_pass_second = 0.5\n    prob_fail_second = 1 - prob_pass_second\n    prob_pass_third = 0.3\n\n    prob_pass_before_fourth = prob_pass_first + prob_fail_first * prob_pass_second + prob_fail_first * prob_fail_second * prob_pass_third\n\n    return prob_pass_before_fourth\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits_per_page = 1\n    current_page = 1\n    total_digits = 0\n\n    while total_digits < 1014:\n        current_page_end = 10 ** digits_per_page - 1\n        batch_pages = current_page_end - current_page + 1\n        batch_digits = batch_pages * digits_per_page\n\n        if total_digits + batch_digits >= 1014:\n            remaining_digits = 1014 - total_digits\n            additional_pages = remaining_digits // digits_per_page\n            if remaining_digits % digits_per_page != 0:\n                additional_pages += 1\n            current_page += additional_pages\n            break\n        else:\n            total_digits += batch_digits\n            current_page = current_page_end + 1\n            digits_per_page += 1\n\n    return current_page - 1\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n\n    combinations = fruits * vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    routes_A_to_B = 2\n    routes_B_to_C = 3\n    total_routes = routes_A_to_B * routes_B_to_C\n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    sum_of_sequence = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    hours_needed = total_pieces / pieces_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    fact = 1\n    for i in range(1, 16):\n        fact *= i\n    count = 0\n    while fact % 10 == 0:\n        fact //= 10\n        count += 1\n    return count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq(age / 4 + 32, age - 22)\n\n    solutions = solve(equation, age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # Initial ratio equation\n    equation1 = Eq(ryan / audrey, 2 / 7)\n\n    # New ratio after changes\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height = 6 * 150\n    four_players_height = 4 * (150 - 2)\n    remaining_height = total_height - four_players_height\n    average_height_other_two = remaining_height / 2\n\n    return average_height_other_two\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    # Total distance to climb\n    total_distance = 18\n    # Distance climbed during the day\n    daily_climb = 7\n    # Special climb on the 6th day\n    special_climb = 3\n    # Distance climbed in 5 days\n    distance_in_5_days = daily_climb * 5\n\n    # On the 6th day, it only climbs 3 meters before reaching the top\n    # So we deduct the special climb from the total distance to find how much it had climbed before the 6th day\n    remaining_distance_before_6th_day = total_distance - special_climb\n\n    # Find how much the snail must have slid down at night until the 5th night\n    # by subtracting distance climbed in 5 days from the remaining distance before the 6th day\n    nightly_slide = distance_in_5_days - remaining_distance_before_6th_day\n\n    return nightly_slide\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_second_student = 0\n    for first_student in range(1, 48 - 3):\n        for second_student in range(first_student + 1, 48 - 2):\n            for third_student in range(second_student + 1, 48 - 1):\n                fourth_student = 48 - (first_student + second_student + third_student)\n                if fourth_student > third_student:\n                    max_apples_second_student = max(max_apples_second_student, second_student)\n    return max_apples_second_student\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Fastest takes the light across and comes back with total time multiplied by 2 plus slowest time\n    # Fastest person is Eddie with 1 minute\n    fastest = 1\n\n    # The slowest pairs would be Rose and Mary with the sum of their times\n    slowest_pair = 5 + 10\n\n    # Second slowest pair is Rose and Jack or Jack and Mary \n    second_slowest_pair = min(5 + 2, 10 + 2)\n\n    # Middle pair crossing is the Jack and Eddie with just the sum of their times because Eddie doesn't need to return\n    middle_pair = 2 + 1\n\n    # Total time is two fastest round trips plus the slowest pair crossing plus the second slowest pair crossing\n    total_time = (fastest * 2) + slowest_pair + second_slowest_pair + middle_pair\n\n    return total_time\n\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    boys_more_than_girls = 44\n    total_students = 0\n    \n    # Since boys are on the outermost layer\n    # and the difference between boys and girls is 44\n    # Let's start from the outermost layer and go inwards\n    layer = 0\n    while True:\n        # Number of boys in outermost layer\n        if layer == 0:\n            boys = 1\n        else:\n            boys = (layer * 4 + 4)  # Each layer adds 4 sides of boys\n        \n        # Number of girls in the next inner layer\n        girls = ((layer + 1) * 4)\n        \n        # Total number of students until current layer (1 boy in the center)\n        total_students_until_layer = (boys + girls + total_students)\n        \n        # Check if the number of boys is 44 more than the number of girls\n        if total_students_until_layer - boys_more_than_girls == girls:\n            total_students = total_students_until_layer\n            break\n        else:\n            layer += 1\n    \n    return total_students\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    length, width = symbols('length width')\n    \n    # New perimeter is 38 when the length is increased by 12\n    equation = Eq(2 * (length + 12) + 2 * width, 38)\n    \n    # Solve the equation for the width\n    solutions = solve(equation, width)\n    \n    # Use the width to find the original perimeter\n    original_perimeter = 2 * length + 2 * solutions[0]\n    \n    # Since the length is not changing, we can simplify this to:\n    original_perimeter_simplified = 38 - 2 * 12\n    \n    return original_perimeter_simplified\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    sum = 0\n    for i in range(1, 90, 2):\n        sum += i**2 - (i + 1)**2\n    return sum\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    return factorial(4)\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    ways = 0\n    # Possible foods she can eat\n    foods = [\"chocolate\", \"peaches\", \"strawberries\"]\n    # Day 1 she eats chocolate, so we start with that\n    day1 = \"chocolate\"\n    for food_day2 in foods:\n        if food_day2 != day1:  # She can't eat the same food on the next day\n            for food_day3 in foods:\n                if food_day3 != food_day2:  # Again, she can't eat the same food as day 2\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # Since 8 = a + b is the same as b + a,\n    # we only need to find the unique pairs (a, b) where a <= b.\n    # We loop from 1 since we need positive numbers only, and\n    # go up to 8 // 2 = 4 since beyond that the pairs would start repeating.\n    count = 0\n    for a in range(1, 8 // 2 + 1):\n        b = 8 - a\n        if a <= b:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    spent_on_tv = 5/9 * salary\n    remainder = salary - spent_on_tv\n    spent_on_table = 3/4 * remainder\n    final_left = remainder - spent_on_table    \n\n    equation = Eq(final_left, 160)\n    solutions = solve(equation, salary)\n\n    tv_cost = spent_on_tv.subs(salary, solutions[0])\n\n    return tv_cost.evalf()\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # Since the table rotation results in the same order,\n    # we fix one person's position and arrange the others.\n    # This is similar to arranging n-1 persons in a line\n    # when there are n seats in a circular table.\n    num_people = 7\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    ans = 50 / (5/3)\n    return ans\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    daily_earning = 70\n    days_worked = 6\n\n    total_earning = daily_earning * days_worked\n\n    return total_earning\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    num_points = 15\n    num_vertices = 3\n\n    return comb(num_points, num_vertices)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    quire = 24\n    ream = 20 * quire\n    total_sheets = 2 * ream\n    return total_sheets\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e represent Emma's current age and j represent John's current age\n    e, j = symbols('e j')\n\n    # In 3 years, Emma's age will be e + 3 and John's age will be j + 3.\n    # The sum of their ages in 3 years will be 27.\n    equation1 = Eq((e + 3) + (j + 3), 27)\n\n    # Emma's age is the difference between her own and John's ages: e = j - e.\n    equation2 = Eq(e, j - e)\n\n    # Solve the system of equations for e and j.\n    solutions = solve((equation1, equation2), (e, j))\n\n    # Return Emma's current age.\n    return solutions[e]\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Speed of Tom and Jack\n    speed_tom = 48\n    speed_jack = 50\n\n    # Jack left 3 hours later than Tom\n    time_difference = 3\n\n    # Distance covered by Tom before Jack starts\n    distance_tom_before_jack = speed_tom * time_difference\n\n    # After another 5 hours, the two cars are 15 km away from each other\n    additional_time = 5\n\n    # Total time Tom has traveled when they are 15 km away from each other\n    total_time_tom = time_difference + additional_time\n\n    # Calculate the total distance covered by Tom until they are 15 km away from each other\n    total_distance_tom = total_time_tom * speed_tom\n\n    # Calculate the distance covered by Jack until they are 15 km away from each other\n    total_distance_jack = additional_time * speed_jack\n\n    # The total distance between A and B is the sum of the distances covered by both Tom and Jack plus the remaining 15 km\n    total_distance = total_distance_tom + total_distance_jack + 15\n\n    return total_distance\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, dogs = symbols('children dogs')\n\n    # Each child has 2 legs, each dog has 4 legs\n    equation1 = Eq(children * 2 + dogs * 4, 56)\n    # There are 3 times as many dogs as children\n    equation2 = Eq(dogs, 3 * children)\n    \n    solutions = solve((equation1, equation2), (children, dogs))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # The 'Water' section has 36 degrees in the pie chart\n    # Since a full circle is 360 degrees, the water section is 36/360 = 1/10 of the total\n    # Hence, the fraction of people who chose water is 1/10\n    fraction_water = 1 / 10\n    \n    # One quarter chose tea\n    # We know that one quarter is the same as 25% or 0.25 in terms of fraction\n    fraction_tea = 1 / 4\n    \n    # 30% chose cola\n    fraction_cola = 0.30\n    \n    # Seven people chose coffee which doesn't give us a fraction, but an actual count\n    count_coffee = 7\n    \n    # Since we have the fractions for water, tea, and cola, we can add them to find the fraction that is not coffee\n    fraction_not_coffee = fraction_water + fraction_tea + fraction_cola\n    \n    # The fraction choosing coffee would be the rest so it's 1 - fraction_not_coffee\n    fraction_coffee = 1 - fraction_not_coffee\n    \n    # Since we know 7 people chose coffee and this represents fraction_coffee of the total, we can find the total\n    # total_people = count_coffee / fraction_coffee\n    total_people = count_coffee / fraction_coffee\n    \n    # Since the number of people must be an integer, we round to the nearest whole number\n    return round(total_people)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    numerator = 10**5\n    denominator = 5**5\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 * 7 + 5 * 7) // 7\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    ans = 5.2 + 6.7 + 4.8\n    return ans\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday, sunday + 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance = 2\n\n    trees_on_length = (length // distance) * 2 \n    trees_on_width = (width // distance) * 2 \n\n    # Subtract the corner tree as it's counted twice\n    total_trees = trees_on_length + trees_on_width - 4\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_m = 1.36  # height in meters\n    height_cm = height_m * 100  # convert height to centimeters\n    return height_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 3 / 100\n    tax_amount = income * tax_rate\n    post_tax_income = income - tax_amount\n    \n    return post_tax_income\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    adult_price = 20\n    child_price = 15\n\n    # Since there are at least two adults, we start from 2 and go up to the point where the cost of adults doesn't exceed total charge\n    max_possible_adults = total_charge // adult_price\n\n    for adults in range(2, max_possible_adults+1):\n        children = (total_charge - (adults * adult_price)) // child_price\n        if adult_price * adults + child_price * children == total_charge:\n            return children\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_each = total_sweets // people\n    return sweets_each\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    result = (0.6 * 100) / 180\n    return result\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    # Iterate over all possible numbers with a unit digit of 9, since we do not have a bound, we should consider a reasonable maximum limit\n    # Let's consider numbers up to 9999 for generality, though the number should be less in practice\n    for num in range(9, 9999, 10):  # we increment by 10 to ensure the units digit is always 9\n        new_num = int(str(num)[-1] + str(num)[:-1])  # place 9 at the beginning and remove from the end\n        if new_num == 4 * num:\n            return num  # return the special number as soon as we find it\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    squash_part = 1\n    water_part = 9\n    total_parts = squash_part + water_part\n\n    squash_ml = 750\n    total_volume = (squash_ml / squash_part) * total_parts\n\n    bottle_size = 1000  # millilitres in 1 litre\n\n    full_bottles = total_volume // bottle_size\n\n    return int(full_bottles)\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    total_cost = 132\n    book_fraction = 1/3\n    bag_fraction_of_remainder = 1/2\n    \n    # Let's calculate the cost of the book which is 1/3 of the initial amount\n    book_cost = total_cost / (book_fraction + bag_fraction_of_remainder * (1 - book_fraction))\n\n    return book_cost\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n\n    remainder = pow(base, exponent, divisor)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    last_two_digits = (6**2015 + 2015*6 + 2015**6) % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_pupils = 18\n    fraction_present = 1 - 2/5\n    total_pupils = present_pupils / fraction_present\n    return int(total_pupils)\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    # B and D are given\n    B, D = 2, 0\n\n    # Since we know that B is the tens digit and D is the units digit in ABCDEF,\n    # and each letter represents a distinct digit, \n    # we can loop through all possible values for A, C, E, F such that they are distinct\n    for A in range(1, 10):\n        for C in range(1, 10):\n            for E in range(1, 10):\n                for F in range(1, 10):\n                    if len({A, B, C, D, E, F}) == 6:  # All digits must be distinct\n                        ABCDEF = int(f\"{A}{B}{C}{D}{E}{F}\")\n                        EFABCD = int(f\"{E}{F}{A}{B}{C}{D}\")\n                        # Check the given condition\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            # Return the 4-digit number FACE\n                            return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # As we know that 1 and the number itself are always factors of the number,\n    # and since the factors should be unique and increasing, \n    # we can deduce that the last three factors are 14, 28 and 56 (being twice the first three after 1).\n    # We can simply multiply the largest factor by the smallest to get the number.\n    \n    number = 56 * 1\n    return number\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the number of cows and 'g' be the number of goats initially\n    c, g = symbols('c g')\n\n    # From the problem: 65% of the animals were cows initially, so 35% were goats\n    # c = 0.65 * (c + g)\n    # g = 0.35 * (c + g)\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 animals, the percentage of cows becomes 85%\n    # New total animals = c + g + 240\n    # New cow count = c + 240 (since goats doubled, total added animals are cows)\n    # Therefore, (c + 240) = 0.85 * (c + g + 240)\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # We also know that goats doubled, so new goat count is 2g\n    # 2g = (c + g + 240) - (c + 240)\n    equation3 = Eq(2 * g, (c + g + 240) - (c + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position = 6\n    amy_position = 8\n\n    total_children = jolene_position + amy_position - 1\n\n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps = 0\n    height_after_jumps = 0\n\n    while height_after_jumps < total_height:\n        jumps += 1\n        height_after_jumps += jump_up\n\n        if height_after_jumps >= total_height:\n            break\n        \n        if jumps % 2 == 0:\n            height_after_jumps -= slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let x be the total number of cookies in the box\n    # From the question, after selling 1680 cookies in the first month,\n    # James sold 7/20 more than that in the second month, which equals\n    # 1680 + (7/20) * 1680\n    # The number of cookies James kept decreased by 3/20 of the box,\n    # which equals (3/20) * x\n    # We set up the equation:\n    # x - 1680 - (1680 + (7/20) * 1680) = (3/20) * x\n\n    # Rearranging the equation\n    # x - 1680 - 1680 - (7/20)*1680 = (3/20)*x\n    # x * (1 - 3/20) = 1680 + 1680 + (7/20)*1680\n    # x * (17/20) = 1680 * (2 + (7/20))\n    # x = 1680 * (2 + (7/20)) / (17/20)\n\n    # Calculate the total number of cookies in the box\n    x = 1680 * (2 + (7/20)) / (17/20)\n\n    return int(x)\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 6), (9, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_between_sunflowers = 4\n\n    # The total perimeter of the pentagon\n    perimeter = 5 * side_length\n\n    # Subtracting the corners since a sunflower is planted on each corner\n    plantable_perimeter = perimeter - 5 * distance_between_sunflowers\n\n    # Calculate how many sunflowers can be planted between corners\n    sunflowers_between_corners = plantable_perimeter // distance_between_sunflowers\n\n    # Adding the corner sunflowers back to the total count\n    total_sunflowers = sunflowers_between_corners + 5\n\n    return int(total_sunflowers)\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300  # £3 is 300 pence\n    \n    num_stamps = pounds_to_pence // stamp_cost_pence\n    \n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    total_people = 39\n    boat_capacity = 7\n    trip_time = 2\n\n    # One round trip involves going across and coming back, so the number of trips needed is:\n    # (total people / boat capacity) for one way trips\n    # We subtract 1 because on the last trip, the boat does not need to come back.\n    round_trips_needed = (total_people // boat_capacity) - 1\n    \n    # People left after full round trips\n    people_left = total_people % boat_capacity\n\n    # Time taken for full capacity round trips\n    time_for_round_trips = round_trips_needed * trip_time * 2  # Two-way trip time\n\n    # Time for last trip (if people_left is not zero, add one trip_time for the one-way trip)\n    time_for_last_trip = trip_time if people_left else 0\n\n    # Total time is the sum of the round trip times and the last trip\n    total_time = time_for_round_trips + time_for_last_trip\n\n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the time Ryan would have driven at his usual speed.\n    x = symbols('x')\n    \n    # Distance remains constant, so we have the equation:\n    # Usual speed * usual time = Reduced speed * (usual time + 2 hours)\n    equation = Eq(45 * x, 30 * (x + 2))\n    \n    # Solving the equation for x\n    usual_time = solve(equation, x)[0]\n    \n    return usual_time\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    return factorial(100) // factorial(98)\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):  # Iterate through possible single digits\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:  # Check divisibility by 3\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # First we calculate the sum of the sequence from 3 to 10\n    sum_ascending = sum(range(3, 11))\n    \n    # Then, calculate the sum of the sequence from 3 to 6 (excluding the peak, 10)\n    sum_descending = sum(range(3, 7))\n    \n    # Total sum is the sum ascending + sum descending, minus the peak (10) because we counted it twice\n    total_sum = sum_ascending + sum_descending - 10\n    \n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def partition(number):\n        answer = [[number]]\n\n        for x in range(1, number):\n            for y in partition(number - x):\n                if y and x <= y[0]:\n                    answer.append([x] + y)\n        \n        return answer\n\n    ans = partition(5)\n    return len(ans)\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1997 - 2):\n        a, b = b, (a + b) % 3  # Only track the remainder when dividing by 3\n    return b\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219 ** 2) / (14/3 + 38/59)\n    denominator = 2.501 ** 3\n    ans = round((numerator / denominator), 3)\n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    students, sweets = symbols('students sweets')\n\n    equation1 = Eq(6*students - sweets, 26)\n    equation2 = Eq(5*students - sweets, 5)\n\n    solutions = solve((equation1, equation2), (students, sweets))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Checking the possibility based on odd and even numbers\n    # A tree with n fruits will have neighbors with n-1 and n+1 fruits (two neighbors)\n    # For an even number of trees, the sum of fruits will be even\n    # For an odd number of trees, the sum will be odd\n    # Since we have 8 trees (even), the sum should be even.\n    # However, 225 is an odd number, so it is not possible.\n\n    # Return an explanation as the prompt asks for it if not possible\n    explanation = \"Not possible, as the sum of fruits from even number of trees will be an even number, but 225 is odd.\"\n    return explanation\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    for leo_age_now in range(1, 100):\n        son_age_now = leo_age_now - 4\n        years_until_son_is_leo_age_now = leo_age_now - son_age_now\n        leo_age_then = leo_age_now + years_until_son_is_leo_age_now\n        if leo_age_then == 70:\n            return leo_age_now\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # Calculate combinations for arranging at least one singing performance\n    # between every two dancing performances. There can be a maximum of one\n    # dancing performance starting and one ending, with one singing in between\n    # each pair of dancing, i.e. S-D-S-D-S-D-S pattern.\n\n    # Calculate the total ways: 4 singing (S) could be ordered\n    singing_ways = factorial(4)\n    \n    # Calculate the total ways of arranging 3 dancing slots (D) between 5 possible singing positions (S)\n    # Positions: _ S _ S _ S _ S _ \n    # Dancing performances can be arranged in the 5 slots (4-1) in between the singing performances.\n    # We use combinations here because the singing performances act as separators.\n    dancing_ways = factorial(5) // factorial(5-3)\n    \n    # Multiply the two to get the total number of ways\n    total_ways = singing_ways * dancing_ways\n    \n    return total_ways\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    # Let x be the number of years later when Dad's age is 4 times Heidi's age\n    # Heidi's current age is 8, so her age after x years will be 8 + x\n    # Dad's current age is 50, so his age after x years will be 50 + x\n    # The equation to solve is: 50 + x = 4 * (8 + x)\n    \n    # Simplifying the equation: 50 + x = 32 + 4x\n    # Subtract 4x from both sides: 50 + x - 4x = 32 + 4x - 4x\n    # Subtract 32 from both sides: 50 - 32 + x - 4x = 32 - 32 + 4x - 4x\n    # Combine like terms: 18 - 3x = 0\n    # Divide both sides by -3 to solve for x: x = 18 / 3\n    \n    x = 18 / 3\n    \n    return int(x)\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blouse, dress = symbols('blouse dress')\n    \n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n    \n    solutions = solve((equation1, equation2), (blouse, dress))\n    \n    return solutions[blouse]\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n\n    count_5s = count_factors(60, 5)\n    count_2s = count_factors(60, 2)\n\n    ans = min(count_5s, count_2s)\n    return ans\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    return (11 * 14 + 26) / 15\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    r = 1\n    while True:\n        if ((216 * r) ** 0.5).is_integer():\n            return int(r)\n        r += 1\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Average of three numbers is 120.\n    # Therefore, the sum of the three numbers is 3 times the average.\n    sum_of_three_numbers = 3 * 120\n\n    # When a fourth number is added, the average becomes 150.\n    # Therefore, the sum of the four numbers is 4 times the new average.\n    sum_of_four_numbers = 4 * 150\n\n    # The fourth number is the difference between the sum of four numbers and the sum of three numbers.\n    fourth_number = sum_of_four_numbers - sum_of_three_numbers\n\n    return fourth_number\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    result = (3/13) * 52\n    return result\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    climb_up = 8\n    slide_down = 3\n    daily_progress = climb_up - slide_down\n    days_to_climb = 9\n\n    # The snail makes a full climb + slide for the first 8 days\n    total_distance_after_8_days = daily_progress * (days_to_climb - 1)\n\n    # On the 9th day, it climbs up 8m and completely gets out, so we don't subtract the slide down distance.\n    # Therefore, we add the distance it climbs on the last day to the total.\n    total_distance_on_9th_day = total_distance_after_8_days + climb_up\n\n    return total_distance_on_9th_day\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 0.15\n    discount_amount = original_price * discount_percentage\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    return 20 + 519\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    # Calculate the smallest possible dividend using the formula: dividend = divisor * quotient + remainder\n    # Since the remainder must be less than the divisor and greater than 0, the smallest possible divisor is remainder + 1\n    smallest_divisor = remainder + 1  # One more than remainder for the smallest possible divisor\n    smallest_dividend = smallest_divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    return 285 // 3\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    # By the principle of inclusion-exclusion, we know that \n    # at least one teacher knows both French and Japanese.\n    # Hence, teachers knowing both languages is\n    # french_teachers + japanese_teachers - total_teachers\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    \n    # Teachers that only know French is total French teachers minus\n    # those who know both\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.9)\n    equation2 = Eq(bag_of_sweets + 3 * can_of_drink, 2.7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    # Return the cost of a bag of sweets\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "from math import factorial\n\ndef solution():\n    # Total permutations without any conditions\n    total_permutations = factorial(6)\n    \n    # Permutations where Teddy is on the furthest left (which we don't want)\n    teddy_left_permutations = factorial(5)\n    \n    # Final count is total permutations minus unwanted permutations\n    count = total_permutations - teddy_left_permutations\n\n    return count\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # The difference between consecutive terms\n    n = 1  # Initializing the term count\n\n    # Using the arithmetic sequence formula to find the number of terms\n    # an = a1 + (n - 1) * d, where an < 0 for the first negative term.\n    while (first_term + (n - 1) * common_difference) >= 0:\n        n += 1\n    \n    # Subtract 1 because we want the term before the first negative\n    return n - 1\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # 2-digit numbers start from 10 to 99\n        if (i % 10 + i // 10) % 7 == 0:  # Check if the sum of the digits is a multiple of 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    sum_of_numbers = 280\n    total_numbers = 7\n\n    # The average of the seven consecutive numbers is the sum divided by the number of terms\n    average = sum_of_numbers / total_numbers\n\n    # As they are consecutive, the largest number will be 3 more than the average \n    # (since the average is in the middle of the 7 consecutive numbers)\n    largest_number = average + (total_numbers // 2)\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    # The provided question follows a pattern that can be solved using the difference of squares formula\n    # The difference of squares formula is a^2 - b^2 = (a - b)(a + b)\n    \n    def difference_of_squares(a, b):\n        return (a - b) * (a + b)\n    \n    # Applying the formula to each pair given in the sequence\n    ans = difference_of_squares(1000, 990) + difference_of_squares(980, 970) + difference_of_squares(20, 10)\n    \n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    sum_eq = Eq(x + y, 49)\n    diff_eq = Eq(x - y, 9)\n    \n    solutions = solve((sum_eq, diff_eq), (x, y))\n    return max(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    # Since the highest common factor is 75, both numbers must be multiples of 75\n    # Generate all possible 3-digit multiples of 75\n    multiples_of_75 = [i for i in range(750, 1000, 75)] \n\n    max_sum = 0\n    # Check all pairs of multiples of 75 for the required condition\n    for A in multiples_of_75:\n        for B in multiples_of_75:\n            if A != B:\n                # Convert to string to check for two equal digits\n                str_A = str(A)\n                str_B = str(B)\n                # Count common digits between A and B\n                common_digits = sum(str_A[i] == str_B[i] for i in range(3))\n                if common_digits >= 2: # At least two positions have the same digit\n                    max_sum = max(max_sum, A + B)\n    \n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    return sum(range(1, 10))\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    sum_even = sum(range(2, 21, 2))\n    sum_odd = sum(range(-18, 7, 2))\n    ans = sum_even + sum_odd\n    return ans\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    terms = [8, 32, 72, 128, 200, 288, 392, 512, 648]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n    \n    eq1 = Eq(angel + yiyang, 92.20)\n    eq2 = Eq(angel + kayla, 28.20)\n    eq3 = Eq(yiyang, 5 * kayla)\n    \n    solutions = solve((eq1, eq2, eq3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "def solution():\n    from math import factorial\n\n    # factorial function to calculate arrangements\n    def arrangements(n, k):\n        return factorial(n) // factorial(n - k)\n\n    # First, let's consider there are \"slots\" between the storybooks where the magazines can go.\n    # There will be S+1 slots, where S is the number of storybooks. Since we have 5 storybooks, there will be 6 slots.\n    # We can choose any 5 slots out of 6 for the magazines, and the rest can go in any order.\n    # So, we calculate combinations for choosing 5 slots out of 6 for the magazines.\n    slots = 6\n    magazines = 5\n    combinations_for_magazines = arrangements(slots, magazines)\n\n    # Once the magazines are placed in the slots, the remaining number of ways to arrange the storybooks\n    # is simply the factorial of the number of storybooks because they can be in any order.\n    storybooks = 5\n    ways_to_arrange_storybooks = factorial(storybooks)\n\n    # The total number of arrangements would be the product of combinations_for_magazines and the ways_to_arrange_storybooks.\n    total_arrangements = combinations_for_magazines * ways_to_arrange_storybooks\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    skip_next = False\n    \n    for throw in throws:\n        if skip_next:\n            position -= throw\n            skip_next = False\n        elif throw == 6:\n            skip_next = True\n        else:\n            position += throw\n    \n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, brayden = symbols('alex brayden')\n    total_money = 756\n    money_transferred = 65\n    \n    # Alex gave $65 to Brayden\n    equation1 = Eq(alex - money_transferred, 3 * (brayden + money_transferred))\n    equation2 = Eq(alex + brayden, total_money)\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4/9\n\n    ans = total_pence * fraction\n\n    return ans\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # Arbitrarily selected upper bound\n        if (gums - 2) % 3 == 0:  # After eating 2, the number must be divisible by 3 to be shared\n            remaining_after_share = (gums - 2) * 2 // 3  # Two-thirds remain after sharing\n            if remaining_after_share % 4 == 0:  # Must be divisible by 4 to be eaten equally\n                return gums\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate_money = 13\n    james_money = 28\n\n    total_money = kate_money + james_money\n    each_share = total_money / 2\n\n    james_gives = james_money - each_share\n\n    return james_gives\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10  # average times number of numbers\n    remaining_sum = 9 * 9  # new average times remaining number of numbers\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kph = 3.6  # speed in kilometers per hour\n    time_seconds = 300  # time in seconds\n\n    # Convert speed to meters per second (1 km/h = 1000 m/3600 s)\n    speed_mps = speed_kph * (1000 / 3600)\n\n    # Calculate distance walked in meters (distance = speed * time)\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total, brother_share, sister_share = symbols('total brother_share sister_share')\n\n    # If the brothers alone had shared the money, each brother gets an extra £20.\n    equation1 = Eq(brother_share + 20, (total) / 3)\n    # When the sister is included, each sibling gets brother_share amount of money.\n    equation2 = Eq(brother_share, total / 4)\n    # The sister's share is the same as the brothers when she is included\n    equation3 = Eq(sister_share, brother_share)\n\n    solutions = solve((equation1, equation2, equation3), (total, brother_share, sister_share))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    # A 6-digit number is divisible by 99 if it is divisible by both 9 and 11.\n    # Divisibility rule for 9: the sum of the digits must be divisible by 9.\n    # Divisibility rule for 11: the difference between the sum of the digits at odd positions \n    # and the sum of the digits at even positions must be either 0 or divisible by 11.\n    \n    # Given number: 42A28B\n    # Applying divisibility rule for 9: 4 + 2 + A + 2 + 8 + B must be divisible by 9.\n    # We already have sum = 4 + 2 + 2 + 8 = 16.\n    # Let the sum S = A + B.\n    # Then, S + 16 must be divisible by 9.\n    # Possible values for S could be: 2, 11, 20, ... since (16 + these values) is divisible by 9.\n\n    # Applying divisibility rule for 11: (4 - 2 + A) - (2 - 8 + B) must be either 0 or divisible by 11.\n    # Rearranging and cancelling out, we get: A + 2 + B = 11n for some integer n.\n    # We can see A + B = 11n - 2.\n\n    # Since A and B form a 2-digit number, A and B must be between 0 and 9.\n    # We will search within the range, ensuring that A + B combined with our \n    # previous condition gives a number divisible by 9.\n    \n    # Initialize variable\n    AB = 0\n    # Iterate through potential values for S\n    for S in range(2, 82, 9):  # 81 is the largest sum for two digits 0-9\n        # Check if S fits the divisibility rule for 11 (adjusted for the fixed digits)\n        if (S + 16) % 9 == 0 and (S + 2) % 11 == 0:\n            AB = S\n            break\n    \n    return AB\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    return 25 * 4 * 13\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # Calculate the sum of odd numbers up to 21\n    total_odd = sum(range(1, 22, 2))\n\n    # According to the formula given (1³+2³+3³+......+n³=(1+2+3+......+n)²)\n    # We are interested in the square of this sum\n    ans = total_odd ** 2\n\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, blue = symbols('red green blue')\n    total_left = 350\n    blue_given = 112\n    red_twice_green = Eq(red, 2 * green)\n    blue_50_less_red = Eq(blue, red - 50)\n    total_beads = Eq(red + green + blue, total_left)\n\n    solutions = solve((red_twice_green, blue_50_less_red, total_beads), (red, green, blue))\n\n    blue_at_first = solutions[blue] + blue_given\n    return blue_at_first\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # provided averages of 4 out of 5 numbers\n    averages = [36, 38, 39, 45, 49]\n    # total sum of those numbers (sum of 4 numbers multiplied by average)\n    sum_of_4 = [4 * avg for avg in averages]\n    # sum of all 5 numbers is one of the sum_of_4 plus the missing number\n    sum_of_all = sum(sum_of_4) / 4\n\n    # largest number is the total sum minus the smallest sum_of_4\n    largest_number = sum_of_all - min(sum_of_4)\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    # 1/3 of art books = 4/5 of science books\n    # therefore, science_books = (1/3 * art_books) / (4/5)\n    science_books = (1 / 3 * art_books) / (4 / 5)\n    \n    return int(science_books)  # cast to int because the number of books is a whole number\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    katelyn, jared = symbols('katelyn jared')\n\n    equation1 = Eq(jared, katelyn + 60)\n    equation2 = Eq(katelyn / jared, 2 / 5)\n\n    solutions = solve((equation1, equation2), (katelyn, jared))\n\n    total_stickers = solutions[katelyn] + solutions[jared]\n\n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    estimated_total = sum(rounded_numbers)\n    return estimated_total\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    textbooks = [42, 63, 28]\n    stack_size = gcd(gcd(textbooks[0], textbooks[1]), textbooks[2])\n\n    return stack_size\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # Number of pieces required to share among 24 people\n    pieces_needed = 24\n    # Number of whole sausages\n    sausages = 16\n\n    # Each cut adds one extra piece, starting with the number of original sausages.\n    # We need to find the minimum number of cuts such that the number of pieces\n    # is equal to or exceeds the number of required pieces.\n    \n    cuts = 0\n    while sausages < pieces_needed:\n        sausages += 1  # Each cut creates one extra piece.\n        cuts += 1\n    \n    return cuts\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the rates\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    # Write the equations based on the given information\n    eq1 = Eq(5 * star_rate + 20 * nini_rate, 1)  # Completing the job\n    eq2 = Eq(20 * star_rate + 8 * nini_rate, 1)  # Completing the job\n\n    # Solve for the rates of Star and Nini\n    rates = solve((eq1, eq2), (star_rate, nini_rate))\n\n    # Nini's time to complete the job by herself (job_rate = 1 / time)\n    nini_time = 1 / rates[nini_rate]\n\n    return nini_time\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Let d be the distance between the library and the school in meters.\n    # Qiqi's time to reach the school is t (in minutes).\n    # Weiling's time to reach the school is t - 6 (2 minutes later start, 4 minutes earlier arrival).\n\n    # Qiqi's speed = 60 m/min, Weiling's speed = 72 m/min.\n    # Using distance = speed * time, we have:\n    # d = 60 * t for Qiqi, and d = 72 * (t - 6) for Weiling.\n\n    # Setting the equations equal to each other because the distance d is the same:\n    # 60 * t = 72 * (t - 6)\n    # Solving for t:\n    t = (72 * 6) / (72 - 60)\n\n    # Qiqi's distance to the school:\n    d = 60 * t\n\n    return int(d)\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # The rate of work of 4 construction companies\n    rate_of_4_companies = 900 / 5\n    \n    # The rate of work of 1 construction company\n    rate_of_1_company = rate_of_4_companies / 4\n    \n    # The number of days it takes for 1 construction company to build a 2700m expressway\n    days_for_2700m = 2700 / rate_of_1_company\n    \n    return days_for_2700m\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    # St Petersburg is 3 hours ahead of Manchester\n    time_difference = 3 \n    # The plane arrived at 12 noon, St Petersburg time\n    arrival_time_st_petersburg = 12\n    # Convert arrival time to Manchester time by subtracting the time difference\n    departure_time_manchester = arrival_time_st_petersburg - time_difference\n    # Since this is before 12 (midnight), we need to adjust from 24hr clock to 12hr clock\n    if departure_time_manchester <= 0:\n        departure_time_manchester += 12\n\n    return departure_time_manchester\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs_conversion_factor = 2.2\n    kg_amount = 5\n    lbs_amount = kg_amount * kg_to_lbs_conversion_factor\n    return lbs_amount\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    height_difference = 45\n    ben_height = jane_height - height_difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_position_from_front = 6\n    frank_position_from_back = 9\n    people_between = 10\n\n    total_people = ben_position_from_front + people_between + frank_position_from_back - 1\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio  # 3 parts coffee + 8 parts milk\n    coffee_amount = 6  # liters of coffee\n\n    # Find the total amount of latte made using the proportion\n    total_amount = (coffee_amount * total_ratio) / coffee_ratio\n\n    return total_amount\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum = 0\n    for n in range(2, 33, 2):\n        if n % 4 == 0:\n            sum += n\n        else:\n            sum -= n\n    return sum\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marbles = symbols('marbles')\n\n    red_fraction = 2 / 5\n    green_fraction = 1 / 3\n    yellow_count = 96\n\n    equation = Eq(red_fraction + green_fraction + yellow_count / marbles, 1)\n\n    total_marbles = solve(equation, marbles)\n\n    return total_marbles[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n\n    return round(present_value, 2)\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663**2) % 9\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    last_four_digits = 0\n    current_number = 0\n    \n    for i in range(2015):\n        current_number = (current_number * 10 + 1) % 10000\n        last_four_digits = (last_four_digits + current_number) % 10000\n\n    return last_four_digits\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit can't be zero\n        for tens in range(10):  # tens digit can be zero\n            for ones in range(10):  # ones digit can be zero\n                if (hundreds + tens + ones == 8) and ((100 * hundreds + 10 * tens + ones) % 2 == 0):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # According to the pigeonhole principle, if we have n containers (in this case, categories of the same color) and more than n items\n    # (in this case, marbles), then if we randomly take items out without looking, we need to take out at least n+1 items to guarantee\n    # that we have at least two items that belong to the same container (color).\n\n    # We have 2 categories (colors): blue and yellow.\n    # To ensure we get 2 marbles of the same color, we need to take out 2 + 1 = 3 marbles.\n\n    return 3\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_rate_first_three_years = 0.05\n    interest_rate_last_two_years = 0.10\n\n    # Calculate the investment after the first three years\n    amount_after_three_years = initial_investment * (1 + interest_rate_first_three_years) ** 3\n\n    # Calculate the final amount after the last two years\n    final_amount = amount_after_three_years * (1 + interest_rate_last_two_years) ** 2\n\n    # Round the result to the nearest tenth\n    ans = round(final_amount, 1)\n\n    return ans\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Calculate the unit digit of each part individually using the property\n    # of the unit digit repeating in specific cycles for powers.\n\n    # For 13: The unit digits repeat every 4 powers: 3, 9, 7, 1\n    unit_digit_13 = [3, 9, 7, 1]\n    # the exponent for 13 is 242, we take modulus 4 to get the position in the cycle\n    exponent_mod_4_for_13 = 242 % 4\n    # subtract 1 because list index starts from 0\n    unit_13 = unit_digit_13[exponent_mod_4_for_13 - 1]\n\n    # For 17: The unit digits repeat every 4 powers: 7, 9, 3, 1\n    unit_digit_17 = [7, 9, 3, 1]\n    # the exponent for 17 is 379, we take modulus 4 to get the position in the cycle\n    exponent_mod_4_for_17 = 379 % 4\n    unit_17 = unit_digit_17[exponent_mod_4_for_17 - 1]\n\n    # For 4: The unit digits repeat every 2 powers: 4, 6\n    unit_digit_4 = [4, 6]\n    # the exponent for 4 is 2012, even powers always end in 6\n    exponent_mod_2_for_4 = 2012 % 2\n    unit_4 = unit_digit_4[exponent_mod_2_for_4]\n\n    # Multiply the unit digits of 17's power and 4's power\n    unit_17_times_4 = (unit_17 * unit_4) % 10\n\n    # Calculate the unit digit for the entire expression\n    ans = (unit_13 + unit_17_times_4) % 10\n\n    return ans\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    percentage = 72\n    total = 140\n    result = (percentage / 100) * total\n    return result\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = 8 - 11  # -3\n    term_number = 7\n\n    seventh_term = first_term + (term_number - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # We are not given explicit ages, so we need to try all age combinations.\n    max_product = 2019\n    min_product = 2020\n    total_age_sum = None\n\n    # Assuming reasonable human ages for the puzzle and that the children are under 18.\n    for john_age in range(18, 100):\n        mary_age = john_age - 1\n        if john_age * mary_age >= max_product:\n            break\n        for first_child in range(1, 18):\n            second_child = first_child + 2\n            third_child = first_child + 4\n            children_product = first_child * second_child * third_child\n            if children_product >= max_product:\n                break\n            if john_age * mary_age < max_product and children_product < max_product:\n                if (john_age + 1) * (mary_age + 1) > min_product and (first_child + 1) * (second_child + 1) * (third_child + 1) > min_product:\n                    total_age_sum = john_age + mary_age + first_child + second_child + third_child\n\n    return total_age_sum\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let x be the original sum of money Mrs. Chen had.\n    # She spent $36 on plates, so she had (x - 36) left.\n    # She then spent 3/4 of the remaining money on cups,\n    # which means she spent (3/4 * (x - 36)) on cups.\n    # According to the problem, she had 1/6 of the original sum left\n    # after buying the cups. This translates to the equation:\n    # x - 36 - (3/4 * (x - 36)) = 1/6 * x\n    # Simplify and solve for x:\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x - 36 - (3/4 * (x - 36)), 1/6 * x)\n    original_sum = solve(equation, x)[0]\n\n    return original_sum\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "def solution():\n    from itertools import permutations\n\n    max_sum = 0\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = p\n        A = (100*a + 10*b + c) + (100*b + 10*c + d) + (100*c + 10*d + e) + \\\n            (100*d + 10*e + f) + (100*e + 10*f + g) + (100*f + 10*g + h) + \\\n            (100*g + 10*h + i)\n        max_sum = max(max_sum, A)\n    return max_sum\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile_minutes = 2 + 30 / 60  # 2 minutes and 30 seconds per mile\n    time_per_mile_hours = time_per_mile_minutes / 60  # convert to hours\n\n    total_hours = 1  # total time to travel\n    miles_in_one_hour = total_hours / time_per_mile_hours  # calculate miles traveled in one hour\n\n    return miles_in_one_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    # Set initial number and counter\n    num = 8\n    count = 1\n    \n    # Since the first number is 8, the 2012th number will be the 2011th number after 8\n    target_count = 2011\n    \n    while count < target_count:\n        # Increment the number\n        num += 1\n        # Convert to string to check the first digit\n        num_str = str(num)\n        # If the first digit is '8', increment the counter\n        if num_str[0] == '8':\n            count += 1\n    \n    return num\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Since the balls are divided into five consecutive natural numbers\n    # Let the middle number be x, so the numbers are (x-2), (x-1), x, (x+1), (x+2)\n    # The sum of these numbers is 5x, and it equals to 160\n    # Therefore, x = 160 / 5 = 32\n    # The number of balls that the student with the most balls has is x+2\n    x = 160 // 5\n    return x + 2\n    \nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    from itertools import combinations_with_replacement\n    \n    total_envelopes = 15\n    # We subtract the minimum number of envelopes to satisfy the condition for each mailbox\n    remaining_envelopes = total_envelopes - (2 + 4 + 3)\n    \n    # There are now 4 mailboxes and we have to distribute the remaining envelopes\n    # Since order doesn't matter and we can repeat the mailboxes, we use combinations with replacement\n    count = len(list(combinations_with_replacement(range(4), remaining_envelopes)))\n    \n    return count\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 25 / 100 * 80\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    # Variables for the tax rates and tax brackets\n    first_bracket_tax_rate = 0.15\n    second_bracket_tax_rate = 0.20\n    first_bracket_limit = 20000\n    tax_paid = 7000\n    \n    # Tax paid for the first $20000\n    first_bracket_tax = first_bracket_limit * first_bracket_tax_rate\n    \n    # If all the tax paid is within the first bracket\n    if tax_paid <= first_bracket_tax:\n        income = tax_paid / first_bracket_tax_rate\n    else:\n        # Additional tax paid in the second bracket\n        second_bracket_tax = tax_paid - first_bracket_tax\n        # Income that was taxed 20% \n        second_bracket_income = second_bracket_tax / second_bracket_tax_rate\n        # Total income\n        income = first_bracket_limit + second_bracket_income\n        \n    return income\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    result = 1.4 * (1/10)\n    return result\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    # Find the greatest common divisor of the three rope lengths\n    gcd_ropes = gcd(gcd(rope1, rope2), rope3)\n\n    return gcd_ropes\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    # Chicken has 2 legs, rabbit has 4 legs\n\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2*chickens + 4*rabbits == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Since 1/13 is a recurring decimal, find the recurring cycle.\n    recurring_cycle = []\n    dividend = 1\n\n    # Use a dictionary to store the dividends to find the length of the recurring cycle.\n    dividends = {}\n\n    while True:\n        # Remainder after division\n        remainder = dividend % 13\n        # If remainder is already seen, the cycle is complete\n        if remainder in dividends:\n            break\n        # Else continue with the division\n        else:\n            dividends[remainder] = len(recurring_cycle)\n            dividend = remainder * 10\n            recurring_cycle.append(dividend // 13)\n\n    # Find the digit in the 2022th decimal place\n    ans = recurring_cycle[(2022-1) % len(recurring_cycle)]\n    return ans\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    # Let x be the number of packs of potato chips each store had initially.\n    # After store A sold 290 packs, store A has x - 290 packs.\n    # Store B has 3 times as many as store A now, so store B has 3 * (x - 290) packs.\n    # But store A and store B initially had the same number of packs, i.e., x.\n    # Therefore, the equation is x = 3 * (x - 290)\n    # Solve for x.\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x, 3 * (x - 290))\n    initial_packs_each = solve(equation, x)[0]\n    \n    # Total initial packs in both stores is 2 * x, because both had equal amounts.\n    \n    total_initial_packs = 2 * initial_packs_each\n    return total_initial_packs\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    girls = total_students - boys\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    boys_home_lunch = 3\n    students_home_lunch = 5\n    girls_home_lunch = students_home_lunch - boys_home_lunch\n    \n    # All girls either had a school lunch or packed lunch (since only 2 went home for lunch)\n    girls_packed_lunch = girls - girls_school_lunch - girls_home_lunch\n    \n    # The total number of children with a packed lunch will be the number of boys with a packed lunch\n    # plus the number of girls with a packed lunch\n    total_packed_lunch = boys_packed_lunch + girls_packed_lunch\n    \n    return total_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark = 20 * 6       # Total cost of dark chocolates\n    total_milk = 20 * 5       # Total cost of milk chocolates\n    total_strawberry = 20 * 4 # Total cost of strawberry chocolates\n\n    total_cost = total_dark + total_milk + total_strawberry\n    total_chocolates = 20 + 20 + 20\n\n    average_cost = total_cost / total_chocolates\n\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_needed = 3600\n    days_for_720_sets = 5\n\n    rate_per_day = sets_made_in_5_days / days_for_720_sets\n    total_days_needed = total_sets_needed / rate_per_day\n\n    return total_days_needed\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    num = 36\n    factors = set()\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    # Find the maximum number divisible by 12 less than 100\n    max_divisible = 100 - (100 % 12)\n    # Count the numbers divisible by 12 up to the maximum\n    count = max_divisible // 12\n    return count\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in meters per second\n    time = 19  # time in seconds to pass the tree\n\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # The man finishes the barrel in 15 days\n    man_rate = 1 / 15\n    \n    # Together they finish the barrel in 12 days\n    together_rate = 1 / 12\n    \n    # The wife's rate is the difference between the together rate and the man's rate\n    wife_rate = together_rate - man_rate\n    \n    # Calculate the number of days the wife would take to finish the barrel on her own\n    wife_days = 1 / wife_rate\n    \n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    ans = 2017\n    for i in range(2, 2018):\n        ans *= (1 - 1/i)\n\n    return ans\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_fruits = 18 + 30  # Total number of pears and strawberries\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    # Price for each book\n    price_per_book = 16\n    # Offer includes buy 3 get 1 free, so every 4th book is free.\n    # Hence for every set of 4 books, Subhan pays for 3 books only.\n    # Subhan wants to get 5 books in total.\n    \n    # Calculate cost without the offer\n    total_books_needed = 5\n    total_price_without_offer = total_books_needed * price_per_book\n    \n    # Calculate how many books are free with the offer\n    free_books = total_books_needed // 4\n    \n    # Calculate total price with the offer\n    total_price_with_offer = (total_books_needed - free_books) * price_per_book\n  \n    return total_price_with_offer\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    women_fraction = 2/5\n    women_count = women_fraction * total_people\n    children = symbols('children')\n    men = 3 * children\n    equation1 = Eq(women_count - children, 190)\n    equation2 = Eq(women_count + men + children, total_people)\n    solutions = solve((equation1, equation2), (total_people, children))\n\n    return solutions[total_people]\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    total_pupils = 40\n    girls = total_pupils - boys\n\n    average_total = 35\n    average_boys = 20\n    average_girls = 60\n\n    equation = Eq(average_boys * boys + average_girls * girls, average_total * total_pupils)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_base = -154  # Below sea level\n    mount_fuji_tip = 3776  # Above sea level\n\n    distance = mount_fuji_tip - turpan_base\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    ans = (4 - remainder) if remainder != 0 else 0\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    for i in range(50):\n        total += int('1' * (i + 1))\n        total %= 100  # Keep only the last two digits at each step\n    return total\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, bananas = symbols('apples bananas')\n    equation1 = Eq(6*apples + 7*bananas, 8*apples + 4*bananas)\n    solutions = solve(equation1, (apples, bananas))\n    price_per_banana = 1 / solutions[bananas]\n\n    num_bananas = 6*apples * price_per_banana\n\n    return int(num_bananas)\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both_competitions = 20\n    total_students = coding_only + math_only + both_competitions\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    # Initialize the count of ways to 0\n    count = 0\n    \n    # Loop over the number of envelopes in box A (at least 2)\n    for A in range(2, 15):\n        # Loop over the number of envelopes in box B (at least 4)\n        for B in range(4, 15):\n            # Loop over the number of envelopes in box C (at least 3)\n            for C in range(3, 15):\n                # Calculate the number of envelopes in box D\n                D = 15 - (A + B + C)\n                \n                # If box D has 0 or more envelopes, we have a valid distribution\n                if D >= 0:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    incorrect_divisor = 211\n    incorrect_result_diff = 98.01\n    # The correct divisor should be 2.11, so the incorrect result obtained by Leo\n    # should be 100 times the correct result because he forgot to put the decimal point\n    # Hence, if we multiply the difference by 100 and add to the incorrect result, we get the correct result\n    correct_result = incorrect_result_diff * 100 + incorrect_divisor\n    return correct_result\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, choon_mui = symbols('john choon_mui')\n\n    equation1 = Eq(john - 30, 4 * (choon_mui - 150))\n    equation2 = Eq(john, choon_mui)\n\n    solutions = solve((equation1, equation2), (john, choon_mui))\n\n    return solutions[john] - 30\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n\n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of male and female visitors on the first day\n    female, male = symbols('female male')\n\n    # The number of male visitors was 450 more than the number of female visitors on the first day\n    equation1 = Eq(male, female + 450)\n\n    # On the second day, female visitors increased by 15%\n    # and male visitors decreased by 18%. The total was 1354.\n    equation2 = Eq(female * 1.15 + male * 0.82, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (female, male))\n\n    return solutions[male]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    half_remaining = (remaining_eggs + 4) * 2\n    initial_half = half_remaining + 5\n    initial_eggs = initial_half * 2\n\n    return initial_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    speed_mph = 65\n    time_hours = 15 / 60 # converting minutes to hours\n    distance_miles = speed_mph * time_hours\n\n    miles_to_kilometers = 1.60934 # conversion factor from miles to kilometers\n    distance_kilometers = distance_miles * miles_to_kilometers\n\n    return distance_kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_amount = 200\n    percentage_increase = 10 / 100\n    \n    increased_amount = initial_amount + (initial_amount * percentage_increase)\n    \n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    yacht_length_meters = 8\n    scale = 1 / 20\n    model_length_meters = yacht_length_meters * scale\n    model_length_cm = model_length_meters * 100\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    \n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "from math import factorial\n\ndef derangement(n):\n    # Base case for n = 0 and n = 1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    # Recursive formula: !n = (n - 1) * (!(n - 1) + !(n - 2))\n    return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\ndef solution():\n    # Number of people in the line\n    n = 4\n    # Calculate the number of derangements for n people\n    return derangement(n)\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    ways = [(a, b) for a in range(1, 7) for b in range(1, 7) if a + b == 8]\n    return len(ways)\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_climb_per_day = climb_per_day - slide_per_night\n    days = (total_distance - climb_per_day) / net_climb_per_day\n    \n    if (total_distance - climb_per_day) % net_climb_per_day != 0:\n        days += 1\n    \n    ans = days + 1  # add the final day of climbing out\n    return int(ans)\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal_amount = 12000\n    interest_rate = 0.10\n    time_years = 2\n\n    amount = principal_amount * (1 + interest_rate) ** time_years\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(95 / 100 * x - 2 / 5 * x, 55)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (2, 13)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    weekly_pay = hourly_rate * 8 * 5  # 5 working days in a week\n    amount_short = 700 - weekly_pay\n\n    return amount_short\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n\n    difference = air_ticket - train_ticket\n\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('20:30', '%H:%M')\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Since there's no direct context, I'm assuming this is a single digit number puzzle where A+AA+AAA+AAAA = ?\n    A = symbols('A')\n    equation = Eq(A + A*11 + A*111 + A*1111, 1111)\n\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        num_str = str(i)\n        if num_str.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_period = 14  # 2 weeks\n    yahya_period = 10  # 10 days\n\n    # Find the least common multiple of their haircut periods\n    days_until_next_cut = lcm(arjun_period, yahya_period)\n\n    return days_until_next_cut\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Speeds in meters per second\n    speed_1 = 7\n    speed_2 = 5\n    speed_3 = 8\n\n    # Distances in meters\n    distance_1 = 280\n    distance_2 = 400\n    distance_3 = 800 - (distance_1 + distance_2)\n\n    # Calculating times in seconds for each part\n    time_1 = distance_1 / speed_1\n    time_2 = distance_2 / speed_2\n    time_3 = distance_3 / speed_3\n\n    # Sum of all times\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    sum_of_numbers = 0\n    for d1 in range(10):\n        for d2 in range(10):\n            num = int(f\"2{d1}9{d2}\")\n            if num % 3 == 0 and num % 5 == 0:\n                sum_of_numbers += num\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_apart = 7\n    \n    num_trees = (highway_length - distance_apart) // distance_apart\n    \n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    initial_stamps = 34 + 2 - 11 + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note = 50\n    money_paid_back = 50\n\n    loss = cost_of_shoes + money_paid_back\n\n    return loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    ans = (5/7) * 112\n    return ans\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, C as a single unit as they always have to be next to each other\n    # We have now 8 units (A, B, C together as one unit, and the remaining 7 students)\n    units = 8\n    \n    # There are factorial(8) ways to arrange these units\n    units_arrangements = factorial(units)\n    \n    # A, B, C can be arranged among themselves in factorial(3) ways\n    abc_arrangements = factorial(3)\n    \n    # Total arrangements are the product of both arrangement possibilities\n    total_arrangements = units_arrangements * abc_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # To get the smallest number, remove digits from the largest place values first\n    # Initialize the number as a string\n    original_number = ''.join(str(i) for i in range(1, 31))\n    \n    # Remove the first 46 characters because they represent the largest place values\n    smallest_number = original_number[46:]\n    \n    # Convert to integer to remove any leading zeroes\n    ans = int(smallest_number)\n    \n    return ans\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee getting a white ball, we should consider the worst-case scenario.\n    # This means picking all blue balls first before finally picking a white.\n    # Since there are 6 blue balls, we need to remove all of them to ensure the next ball is white.\n    blue_balls = 6\n    # So we must take out 6 blue balls plus 1 white ball to guarantee a white ball.\n    ans = blue_balls + 1\n    return ans\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james * (1/2)\n    ben = linda * (1/4)\n    total_marbles = james + linda + ben\n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    sum_of_first_part = sum(range(1, 5))\n    sum_of_second_part = sum([2020, 2019, 2018])\n    ans = (sum_of_first_part * 1) - (sum_of_second_part * 0)\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    ruler_length = 20  # Length of each short ruler\n    overlap_length = 3  # Overlap length between two short rulers\n    \n    # Total length = Sum of individual rulers - Total overlap (2 overlaps)\n    total_length = (3 * ruler_length) - (2 * overlap_length)\n    \n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    jogging_time = 1  # Time from 6:30 AM to 7:30 AM in hours\n    walking_time = 2  # Time from 7:30 AM to 9:30 AM in hours\n    \n    jogging_speed = 6  # Jogging speed in miles per hour\n    walking_speed = 5  # Walking speed in miles per hour\n    \n    jogging_distance = jogging_time * jogging_speed  # Total distance jogged\n    walking_distance = walking_time * walking_speed  # Total distance walked\n    \n    total_distance = jogging_distance + walking_distance  # Total distance traveled\n    \n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    new_cups = 0\n\n    while used_cups >= 7:\n        # make as many new cups as possible from used cups\n        current_new_cups = used_cups // 7\n        new_cups += current_new_cups\n        \n        # calculate left over used cups\n        used_cups -= current_new_cups * 7\n        \n        # add the new cups to the pool of used cups\n        used_cups += current_new_cups\n\n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    return 2000 - 222\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # Convert from meters to centimeters\n    distance_apart_cm = 15\n    first_cauliflower_distance_cm = 20\n    cauliflower_width_cm = 45\n\n    # The total available length for planting cauliflowers is the plot length\n    # minus the distance from the start to the first cauliflower,\n    # and minus the width of a cauliflower at the end of the row.\n    available_length_cm = plot_length_cm - first_cauliflower_distance_cm - cauliflower_width_cm\n\n    # The number of cauliflowers is the available length divided by the distance\n    # between them plus one for the first cauliflower.\n    num_cauliflowers = available_length_cm // distance_apart_cm + 1\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_pages_first_3_days = 14 * 3\n    total_pages_next_2_days = 9 * 2\n    total_pages_sixth_day = 12\n    total_days = 6\n\n    total_pages = total_pages_first_3_days + total_pages_next_2_days + total_pages_sixth_day\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students in class A, B, C\n    class_A = 8\n    class_B = 12\n    class_C = 20\n\n    # Find the greatest common divisor (gcd) for the three classes\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton, bowling = symbols('badminton bowling')\n\n    # Badminton Club has thrice as many members as the Bowling Club\n    equation1 = Eq(badminton, 3 * bowling)\n    # After 36 members left the Badminton Club and 4 left the Bowling Club\n    # They have the same number of members\n    equation2 = Eq(badminton - 36, bowling - 4)\n\n    solutions = solve((equation1, equation2), (badminton, bowling))\n\n    return solutions[badminton] - 36, solutions[bowling] - 4\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # in meters per second\n    distance = 1.5 * 10**3        # converting kilometers to meters\n\n    time = distance / speed_of_sound\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    n = 72\n    factors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    ans = number1 - number2\n    return ans\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average_value = 126\n    diff_between_extremes = 6\n\n    # The number of cards\n    num_cards = total_value // average_value\n\n    # Since the difference between the greatest and smallest number is 6, and\n    # the numbers are consecutive odd numbers, the numbers are spaced two apart.\n    # this means there are num_cards // 2 steps from the median to the smallest and largest number\n\n    # Find the smallest number\n    smallest_number = average_value - (num_cards // 2) * 2\n\n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    wendy, vivien = symbols('wendy vivien')\n\n    # Equation 1: Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    # Equation 2: Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    # Extract solution for Wendy\n    wendy_age = solutions[wendy]\n\n    # Calculate Wendy's age in 5 years' time\n    wendy_future_age = wendy_age + 5\n\n    return wendy_future_age\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    def count_factors(n, factor):\n        count = 0\n        while n % factor == 0:\n            n //= factor\n            count += 1\n        return count\n\n    count_2 = 0\n    count_5 = 0\n    for i in range(301, 1000):\n        count_2 += count_factors(i, 2)\n        count_5 += count_factors(i, 5)\n\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    total = sum(1/i for i in range(10, 20))\n    return int(total)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols(\n        'girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # boys = girls + 90\n    equation1 = Eq(boys, girls + 90)\n    # girls_swim/girls_not_swim = 31/49\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)\n    # boys_swim = boys_not_swim - 120\n    equation3 = Eq(boys_swim, boys_not_swim - 120)\n    # girls_swim + girls_not_swim = girls\n    equation4 = Eq(girls_swim + girls_not_swim, girls)\n    # boys_swim + boys_not_swim = boys\n    equation5 = Eq(boys_swim + boys_not_swim, boys)\n    # girls + boys = 1690\n    equation6 = Eq(girls + boys, 1690)\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6),\n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # total number of pupils who can not swim\n    pupils_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return pupils_not_swim\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):\n        if i % 6 == 0 and (i-1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define bolt and boris as symbols\n    bolt, boris = symbols('bolt boris')\n\n    # bolt has run 1656 metres more than Boris\n    equation1 = Eq(bolt, boris + 1656)\n\n    # the distance bolt has finished is 280 metres more than 5 times that of Boris\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    # Total distance is the sum of both distances\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    annual_increase = 0.10\n    # Let X be the initial amount in 2018. Then the amount in 2020 would be X * (1 + annual_increase)^2.\n    # We set that equal to the known final amount and solve for X.\n    initial_amount = final_amount / ((1 + annual_increase) ** 2)\n    return initial_amount\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial as f\n\n    total_ways = f(7)\n    ways_together = f(5) * f(3)\n\n    return total_ways - ways_together\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    # Since it's an arithmetic sequence, common difference can be found by\n    difference = (fourth_term - first_term) // (4 - 1)\n\n    # Using the arithmetic series sum formula: n/2 * (2a + (n-1)d)\n    total_athletes = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1/2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    # Initialize the number of 2s and 5s prime factors\n    count_2 = count_5 = 0\n    \n    # Iterate through numbers from 1 to 789 to prime factorize them\n    for i in range(1, 790):\n        # Count factors of 2 for current number\n        while i % 2 == 0:\n            count_2 += 1\n            i = i // 2\n        # Count factors of 5 for current number\n        while i % 5 == 0:\n            count_5 += 1\n            i = i // 5\n    \n    # The number of zeros at the end is determined by the number of 10s in the factorization\n    # A 10 is made by a pair of 2 and 5, so the number of zeros is min(count_2, count_5)\n    ans = min(count_2, count_5)\n    \n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = last_term - first_term + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # in meters per minute\n    turtle_speed = 30   # in meters per minute\n\n    race_distance = 6990  # in meters\n\n    # Rabbit runs for 10 minutes before sleeping\n    rabbit_run_before_sleep = rabbit_speed * 10\n\n    # Turtle keeps running during rabbit's sleep\n    turtle_run_during_sleep = turtle_speed * (10 + 215)\n\n    # Calculate the remaining distance for the rabbit after it wakes up\n    remaining_distance_for_rabbit = race_distance - rabbit_run_before_sleep\n\n    # Calculate how long it takes for the rabbit to finish the race after waking up\n    time_for_rabbit_to_finish = remaining_distance_for_rabbit / rabbit_speed\n\n    # Calculate the total time the turtle has been running when the rabbit finishes\n    total_time_for_turtle = 10 + 215 + time_for_rabbit_to_finish\n\n    # Calculate the distance turtle ran in the total time\n    turtle_distance_at_rabbit_finish = total_time_for_turtle * turtle_speed\n\n    # Determine the winner and the distance between them at the finish line\n    if turtle_distance_at_rabbit_finish >= race_distance:\n        winner = \"turtle\"\n        distance_between = turtle_distance_at_rabbit_finish - race_distance\n    else:\n        winner = \"rabbit\"\n        distance_between = race_distance - turtle_distance_at_rabbit_finish\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    team_a_average = 76\n    team_b_average = 67\n    combined_average = 70\n    team_a_students = 20\n    \n    # total score for team A is team_a_average * team_a_students\n    total_score_team_a = team_a_average * team_a_students\n    \n    # let team_b_students be the number of students in team B\n    # The total combined score for both teams is\n    # (total_score_team_a + team_b_average * team_b_students)\n    # The total number of students for both teams is \n    # (team_a_students + team_b_students)\n    # The combined average score is\n    # (total_score_team_a + team_b_average * team_b_students) / (team_a_students + team_b_students)\n    \n    # Let's make an equation based on the total average score for team A and B combined\n    # combined_average = (total_score_team_a + team_b_average * team_b_students) / (team_a_students + team_b_students)\n    # 70 = (team_a_average * team_a_students + team_b_average * team_b_students) / (team_a_students + team_b_students)\n    # 70 * (team_a_students + team_b_students) = team_a_average * team_a_students + team_b_average * team_b_students\n    # team_b_students = (70 * (team_a_students + team_b_students) - team_a_average * team_a_students) / team_b_average\n    \n    # After simplifying the above, we find:\n    # team_b_students = (70 * team_a_students - team_a_average * team_a_students) / (team_b_average - 70)\n\n    team_b_students = (combined_average * team_a_students - total_score_team_a) / (team_b_average - combined_average)\n    \n    return int(team_b_students)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    max_participants_per_school = 3  # If a school had 4 participants, it would be the most.\n    schools = participants // max_participants_per_school\n    if participants % max_participants_per_school != 0:\n        schools += 1  # Add one more school for remaining participants, if any\n    return schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    # Range of hours in a 24-hour digital watch is 00 to 23\n    for hour in range(24):\n        # Range of minutes in a digital watch is 00 to 59\n        for minute in range(60):\n            # Convert hour and minute to string and check if they contain at least two '4's\n            if str(hour) + str(minute).zfill(2)).count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    # Get all possible permutations of the digits\n    digits = [1, 2, 3, 7, 8, 9]\n    all_permutations = list(permutations(digits, 6))\n\n    # Initialize minimum product to a large number\n    min_product = float('inf')\n\n    # Loop through all permutations to find minimum product\n    for perm in all_permutations:\n        num1 = perm[0]*100 + perm[1]*10 + perm[2]\n        num2 = perm[3]*100 + perm[4]*10 + perm[5]\n        # Only consider permutation where both numbers are 3-digits\n        if num1 >= 100 and num2 >= 100:\n            product = num1 * num2\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product found\n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    max_product = 0\n    min_product = float('inf')\n\n    for perm in permutations(range(1, 10), 7):\n        ABCD = perm[0] * 1000 + perm[1] * 100 + perm[2] * 10 + perm[3]\n        EFG = perm[4] * 100 + perm[5] * 10 + perm[6]\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n            \n    return max_product - min_product\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    import math\n    max_roll = 6\n    positions_needed = 24  # Since Sam starts at 1st position, needs to get to 25th\n    min_rolls = math.ceil(positions_needed / max_roll)\n    return min_rolls\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens_digit in range(1, 10): # start from 1 because a 2-digit number cannot have 0 in tens place\n        for ones_digit in range(0, 10):\n            if tens_digit + ones_digit == 15:\n                return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of -50\n    # First term is 2019, and we need to find the number of terms and the last term\n\n    # General formula for the nth term of an arithmetic sequence is:\n    # an = a1 + (n - 1) * d\n\n    # So we have:\n    # an = 2019 + (n - 1) * (-50), to find n we set an = 19\n\n    # 19 = 2019 + (n - 1) * (-50)\n    # 19 - 2019 = (n - 1) * (-50)\n    # -2000 = (n - 1) * (-50)\n    # n - 1 = 40\n    # n = 41\n\n    # Now that we know n, we can calculate the sum of the arithmetic series\n    # Formula for the sum of the first n terms of an arithmetic sequence is:\n    # S = (n/2) * (a1 + an)\n\n    n = 41\n    a1 = 2019\n    an = 19\n    S = (n / 2) * (a1 + an)\n\n    return int(S)\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    climb_per_hour = 40\n    slip_back = 10\n    depth = 220\n    effective_climb = climb_per_hour - slip_back\n    hours = 0\n    current_height = 0\n\n    while current_height < depth:\n        hours += 1\n        current_height += climb_per_hour\n        if current_height >= depth:\n            break\n        current_height -= slip_back\n\n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    # Start from the largest number less than 30 which is 29\n    for num in range(29, -1, -1):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    total_sum = 3989\n    other_numbers_sum = 3000 + 80 + 9\n    \n    missing_number = total_sum - other_numbers_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price_each = 0.96\n    cabbages_bought = 8\n    lettuces_equivalent = 6\n\n    total_money_spent = cabbage_price_each * cabbages_bought\n    lettuce_price_each = total_money_spent / lettuces_equivalent\n\n    return lettuce_price_each\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n\n    saved_money = total_money - spent_money\n\n    return saved_money\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    total_typists = 5\n    words_typed_by_group = 6000\n    time_taken_by_group = 20\n    words_to_type = 9000\n    typists_fell_sick = 2\n    remaining_typists = total_typists - typists_fell_sick\n\n    words_per_minute_per_typist = words_typed_by_group / (time_taken_by_group * total_typists)\n    total_time_needed = words_to_type / (words_per_minute_per_typist * remaining_typists)\n\n    return total_time_needed\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # convert 13:52 to total minutes\n    end_time = (14 * 60) + 5     # convert 14:05 to total minutes\n    \n    duration = end_time - start_time  # total duration in minutes\n    cost_per_minute = 14  # cost in pence per minute\n    \n    total_cost = duration * cost_per_minute  # total cost of the call\n    \n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    initial_plants = 11\n    plants_removed = 8\n    remaining_plants = initial_plants - plants_removed\n\n    # The distance between the plants is one less than the number of plants because the distance is measured between consecutive plants.\n    # Initial interval for 11 potted plants\n    initial_interval = total_distance / (initial_plants - 1)\n\n    # The number of intervals after removal will also be one less than the number of remaining plants.\n    # New interval for remaining potted plants\n    new_interval = initial_interval * ((initial_plants - 1) / (remaining_plants - 1))\n\n    return new_interval\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    percentage = 40 / 100\n    number = 320\n\n    result = percentage * number\n\n    return result\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    total_count = 2**3  # Total combinations if there was no restriction\n    no_2_count = 1      # Number of combinations with only 3s\n    no_3_count = 1      # Number of combinations with only 2s \n    return total_count - no_2_count - no_3_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_cost = pen_price + ruler_price\n    return total_cost\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 10, 17)  # assuming the year is 2023\n    end_date = datetime(2023, 12, 20)\n    one_day = timedelta(days=1)\n\n    # Since October 17 is Tuesday, the first Sunday will be 5 days after\n    first_sunday = start_date + timedelta(days=(6 - start_date.weekday()))\n\n    # Count Sundays until end date\n    count_sundays = 0\n    current_day = first_sunday\n    while current_day <= end_date:\n        count_sundays += 1\n        current_day += timedelta(days=7)  # move to next Sunday\n\n    return count_sundays\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    # Since there are 5 skiboards for 5 people, each person gets a unique skiboard.\n    # This is just a permutation of 5 items, which is 5!\n    ans = factorial(5)\n\n    return ans\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple_tart_price, strawberry_tart_price, strawberry_tarts = symbols('apple_tart_price strawberry_tart_price strawberry_tarts')\n    total_cost = 40  # Total cost in dollars\n\n    # Equations based on the problem statement\n    equation1 = Eq(strawberry_tart_price - apple_tart_price, 0.40)\n    equation2 = Eq(2 * strawberry_tarts * apple_tart_price + strawberry_tarts * strawberry_tart_price, total_cost)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple_tart_price, strawberry_tarts))\n\n    # Calculate the number of apple tarts bought, which is twice the number of strawberry tarts\n    apple_tarts = 2 * solutions[strawberry_tarts]\n\n    # Total number of tarts\n    total_tarts = apple_tarts + solutions[strawberry_tarts]\n    \n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds\n    first_traffic_light_cycle = 30  # 0.5 minutes * 60 seconds\n    second_traffic_light_cycle = 45  # 0.75 minutes * 60 seconds\n    total_time = 9 * 60  # 9 minutes * 60 seconds\n    \n    # Find the least common multiple of the first two traffic lights\n    lcm_first_second = lcm(first_traffic_light_cycle, second_traffic_light_cycle)\n    \n    # Find the smallest cycle time for the third traffic light\n    third_traffic_light_cycle = lcm_first_second\n    while third_traffic_light_cycle < total_time:\n        third_traffic_light_cycle += lcm_first_second\n    \n    return third_traffic_light_cycle\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_left = 18\n    tony_position_right = 17\n\n    # Since we are counting the positions from opposite ends, we subtract 1 because Henry and Tony are counted twice\n    henry_to_tony = total_children - (henry_position_left - 1 + tony_position_right - 1)\n\n    return henry_to_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    mm_in_one_metre = 1000\n    total_mm = 2 * mm_in_one_metre\n    return total_mm\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    non_multiples_of_ten = total_numbers - total_numbers // 10\n    percentage = (non_multiples_of_ten / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces, fitted_day2 = symbols('total_pieces fitted_day2')\n\n    # On the first day, he fits 20% of the pieces\n    # fitted_day1 = 0.2 * total_pieces\n    # On the second day, he fits another 60 pieces\n    # fitted_day2 = fitted_day1 + 60\n    # Now the ratio of fitted pieces to unfitted pieces is 2:5\n    # (fitted_day1 + 60) / (total_pieces - (fitted_day1 + 60)) = 2/5\n\n    equation = Eq((0.2 * total_pieces + 60) / (total_pieces - (0.2 * total_pieces + 60)), 2 / 5)\n\n    solution = solve(equation, total_pieces)\n\n    # We take only the positive solution because the number of total pieces cannot be negative.\n    return next(val for val in solution if val > 0)\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_loan = 4\n    repayment = initial_loan * 0.30\n    remaining_debt = initial_loan - repayment\n\n    return remaining_debt\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Number of legs for each pet type\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2  # Assume birds are like chickens with 2 legs\n\n    # Count the legs of cats, dogs, and rabbit\n    legs_without_birds = 2 * cat_legs + 2 * dog_legs + 1 * rabbit_legs\n\n    # Using the total legs to find out the number of birds\n    bird_count = (28 - legs_without_birds) / bird_legs\n\n    return int(bird_count)\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10        # Time they took to meet in hours\n\n    distance = (jack_speed + rose_speed) * time\n    return distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = sum(filter(lambda x: 24 % x == 0 and x % 2 != 0, range(1, 25)))\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let Polly Garter's age be x when the sum of her children's ages is equal to her age.\n    # At this point, her first child will be x - 20, her second child will be x - 22,\n    # and her third child will be x - 24 years old.\n    # The equation will be: x = (x - 20) + (x - 22) + (x - 24)\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x, (x - 20) + (x - 22) + (x - 24))\n    age = solve(equation, x)\n\n    return age[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of cards they had at first.\n    x = symbols('x')\n\n    # Melvin starts with 40 cards.\n    melvin = 40\n\n    # Nelson and Oliver's card counts are parts of the rest.\n    nelson = (x - 40) / 2\n    oliver = (x - 40) / 2\n\n    # Melvin gained 5/8 of his original number of cards from Nelson.\n    melvin_gain_from_nelson = 40 * (5/8)\n    melvin += melvin_gain_from_nelson\n    nelson -= melvin_gain_from_nelson\n\n    # Both Melvin and Nelson lost 1/4 of Melvin's original number of cards (40 / 4 = 10) to Oliver.\n    melvin_lost_to_oliver = 40 / 4\n    melvin -= melvin_lost_to_oliver\n    nelson -= melvin_lost_to_oliver\n    oliver += 2 * melvin_lost_to_oliver  # Both Melvin and Nelson lost 10 cards to Oliver\n\n    # Melvin gained 1/8 of his original number of cards from Nelson.\n    melvin_gain_again_from_nelson = 40 * (1/8)\n    melvin += melvin_gain_again_from_nelson\n    nelson -= melvin_gain_again_from_nelson\n\n    # After the final round, Melvin, Nelson and Oliver all have the same number of cards.\n    equation = Eq(melvin, nelson)\n    equation = equation.subs(nelson, oliver)  # Since Nelson and Oliver have the same number of cards.\n\n    # Solve the equation to find the total number of cards x.\n    solution = solve(equation, x)\n\n    # The solution is in the form of a list, so we return the first element\n    return solution[0]\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "from math import prod\nfrom itertools import combinations\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    # Generate all possible products for Candy (2 cards) and Candice (3 cards)\n    candy_products = {prod(comb): comb for comb in combinations(cards, 2)}\n    candice_products = {prod(comb): comb for comb in combinations(cards, 3)}\n    # Find matching products and discard the used numbers\n    for product in candy_products:\n        if product in candice_products:\n            used_numbers = set(candy_products[product]).union(candice_products[product])\n            break\n    # The number not picked will be the one not in the used numbers\n    for card in cards:\n        if card not in used_numbers:\n            return card\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    n_terms = (last_term - first_term) // 2 + 1\n    ans = n_terms * (first_term + last_term) // 2\n    return ans\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n\n    ans = (part1, part2)\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    ans = initial_sweets + additional_sweets\n    return ans\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    presents_weight = 20\n    total_weight = 5 * presents_weight\n    suitcase_weight = total_weight - presents_weight\n    return suitcase_weight\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(1, 10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes >= 0 and small_boxes + big_boxes < 10:\n            return big_boxes\n        \nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago, combined age of the dogs was X - 4*2 = 10 (X is the current combined age)\n    # So, current combined age X = 10 + 4*2 = 18 years\n    current_combined_age = 10 + 8\n    \n    # In 2 years, combined age will be the current age plus 2 years for each dog\n    future_combined_age = current_combined_age + 2*2\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(14 * 10 + m, 8 * (10 + m) - 3)\n\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the smaller number be x and the larger number be y\n    # According to the problem:\n    # y - x = 39 (difference between two numbers)\n    # x + y = 59 (sum of two numbers)\n    # We can solve for x and y\n    \n    # Adding both equations we get:\n    # x + y + y - x = 59 + 39\n    # 2y = 98\n    # y = 49\n    # Now we find x:\n    # x = 59 - y = 59 - 49\n    x = 59 - 49\n    return x\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\n# Example usage:\n# x is the initial number of passengers, and y is the number of passengers who get on the subway at the stop.\n# ans = solution(x, y)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    return 0.15 * 340\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B, C = symbols('A B C')\n\n    eq1 = Eq(A * B, 30)\n    eq2 = Eq(B * C, 35)\n    eq3 = Eq(C * A, 42)\n\n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n    valid_solutions = [s for s in solutions if all(map(lambda x: x.is_real and x > 0, s))]\n    \n    return sum(valid_solutions[0])\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    return 10*9*8*7*6*5*4*3*2*1\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n    solutions = solve((equation1,), (cora, qingle))\n\n    return abs(solutions[cora] - solutions[qingle])\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number of years in the future\n    years = symbols('years')\n    \n    # Justin's current age\n    justin_age_now = 8\n    \n    # Mother's current age\n    mother_age_now = 32\n    \n    # Equation representing the time in the future when Mother's age is 3 times Justin's age\n    equation = Eq(mother_age_now + years, 3 * (justin_age_now + years))\n    \n    # Solve the equation\n    future_years = solve(equation, years)\n    \n    return future_years[0]\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin, we know that b = 0.\n    # We also know that it passes through the point (4, 8), which means when x=4, y=8.\n\n    x1, y1 = 0, 0  # coordinates of the origin\n    x2, y2 = 4, 8  # coordinates of the given point\n\n    # Using the two points (x1, y1) and (x2, y2), we can calculate the slope m.\n    m = (y2 - y1) / (x2 - x1)\n\n    # Since b=0 this simplifies our equation to y = mx\n    # Therefore, the final equation will be y = m*x.\n    return f\"y = {m}x\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of seashells Jane has and y be the original number of seashells Eric has.\n    jane, eric = symbols('jane eric')\n\n    # According to the problem, Jane has 5 seashells for every 7 Eric has.\n    equation1 = Eq(jane, 5/7 * eric)\n\n    # If Eric gives Jane 6 seashells, Jane will have x+6 seashells and Eric will have y-6 seashells.\n    # The new ratio of Jane's seashells to Eric's seashells will be 11:13.\n    equation2 = Eq((jane + 6) / (eric - 6), 11/13)\n\n    # Solving the system of equations for jane and eric.\n    solutions = solve((equation1, equation2), (jane, eric))\n\n    total_seashells = solutions[jane] + solutions[eric]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    warren_addition = 20\n    naida_subtraction = 1\n\n    while warren_addition > 0:\n        # Warren adds\n        current_number += warren_addition\n        largest_number = max(largest_number, current_number)\n\n        # Naida subtracts\n        current_number -= naida_subtraction\n\n        # Decrease warren_addition and increase naida_subtraction\n        warren_addition -= 1\n        naida_subtraction += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    # rate of the first faucet\n    rate_first_faucet = 1 / 20\n    # rate of each of the other three faucets (3 times faster)\n    rate_other_faucet = 3 * rate_first_faucet\n    # combined rate of all three other faucets\n    total_rate_other_faucets = 3 * rate_other_faucet\n    # combined rate of all four faucets\n    combined_rate = rate_first_faucet + total_rate_other_faucets\n    # time to fill the pool with all four faucets opened\n    time_to_fill = 1 / combined_rate\n\n    return time_to_fill\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    even_permutations = [int(''.join(map(str, p))) for p in permutations(digits) if p[-1] % 2 == 0]\n    return min(even_permutations)\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_and_violin_pupils = piano_pupils / 4\n    neither_pupils = total_pupils - (piano_pupils + violin_pupils - piano_and_violin_pupils)\n    return int(neither_pupils)\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    total_amount = principal * (1 + interest_rate * time_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import math\n\n    # The area of the entire isosceles right triangle\n    area_total = (2 * 2) / 2\n\n    # The area of the quarter circle with radius 1 (sector of the circle with a 90-degree angle)\n    area_sector = math.pi * (1 ** 2) / 4\n\n    # Probability is the area of the sector divided by the area of the triangle\n    probability = area_sector / area_total\n\n    return probability\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    maths_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = maths_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for D in range(1, 10):  # since A is a quarter of D and both are digits, D cannot be 0\n        A = D // 4\n        if D % 4 or A == 0:  # verifying A is a natural number and not 0\n            continue\n        B = A - 1\n        if B == 0:  # B cannot be 0 as it's a second digit in a four-digit number\n            continue\n        C = D * 4 - (A * 1000 + B * 100 + C * 10) % 10  # reverse logic on the last digit after multiplication by 4\n        if C == D or C == B or C == A or C < 0 or C > 9:  # checking if C is unique and a valid digit\n            continue\n        ABCD = A * 1000 + B * 100 + C * 10 + D\n        DCBA = D * 1000 + C * 100 + B * 10 + A\n        if ABCD * 4 == DCBA:\n            return ABCD\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime\n\n    # Time when Hannah left school\n    time_left_school = datetime.strptime('15:22', '%H:%M')\n    \n    # Time when Hannah caught the bus\n    time_caught_bus = datetime.strptime('16:01', '%H:%M')\n    \n    # Time when bus trip ended\n    bus_trip_duration = 18  # in minutes\n    time_bus_trip_end = time_caught_bus + timedelta(minutes=bus_trip_duration)\n    \n    # Time when Hannah got home\n    time_got_home = datetime.strptime('16:35', '%H:%M')\n\n    # Calculate walking time\n    walking_time_to_bus_stop = (time_caught_bus - time_left_school).total_seconds() / 60\n    walking_time_to_home = (time_got_home - time_bus_trip_end).total_seconds() / 60\n\n    total_walking_time = walking_time_to_bus_stop + walking_time_to_home\n\n    return int(total_walking_time)\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    final_result = 25\n    subtracted_value = 10\n    divisor = 3\n\n    initial_result = (final_result - subtracted_value) * divisor\n\n    return initial_result\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    # Re-arrange the expression 2030 452 = 2 * □ + 30000 + 452 to solve for □\n    # 2030 452 - 30000 - 452 = 2 * □\n    # □ = (2030452 - 30000 - 452) / 2\n    \n    ans = (2030452 - 30000 - 452) / 2\n    return int(ans)\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    length_cm = 150\n    pieces = 2\n    length_per_piece_cm = length_cm / pieces\n    length_per_piece_m = length_per_piece_cm / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    # Define product value\n    product = 48 * 925 * 38 * 435\n    \n    # Prime factorization of the product\n    factors = factorint(product)\n    \n    # The number of 0s at the end of a number is determined by the number of 10s it contains,\n    # which in turn is determined by the number of pairs of 2s and 5s in its prime factorization.\n    # Hence, the number of 0s is the minimum of the count of 2s and 5s in the prime factorization.\n    count_2s = factors.get(2, 0)\n    count_5s = factors.get(5, 0)\n    \n    # The number of 10s (and therefore 0s at the end of the product)\n    # will be the minimum of the count of 2s and 5s.\n    count_0s = min(count_2s, count_5s)\n    \n    return count_0s\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # There are three colors and she needs to ensure at least one pair of the same color.\n    # In the worst case scenario, Lina might pick 1 of each color before getting a matching pair.\n    # To guarantee a pair, she has to exhaust all options of getting unique colors first.\n    # This means she must take out 1 white, 1 grey and 1 black before she is guaranteed a pair on the next draw.\n    # That's 3 socks of different colors, and the next sock, the 4th one, must complete a pair.\n    \n    min_socks_needed = 3 + 1  # for 3 different colors and 1 more to guarantee a pair\n    \n    return min_socks_needed\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    rate = 1.2 / 100\n    time = 1\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean = 5\n    total_numbers = len(numbers) + 1  # +1 for the unknown number 'a'\n    total_sum = mean * total_numbers  # Total sum of all the numbers including 'a'\n    sum_of_known_numbers = sum(numbers)  # Sum of all known numbers\n    a = total_sum - sum_of_known_numbers  # 'a' is the remaining number to reach the total sum\n    return a\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbol for the number we are looking for\n    x = symbols('x')\n    \n    # construct and solve the equation step by step\n    equation = Eq(((x + 3) / 4) * 9, 81)\n    \n    # solve the equation to find the number\n    sol = solve(equation, x)\n\n    # Return the solution\n    return sol[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Mr. Smith's mix\n    mr_smith_total_sugar = 300 * 0.50 + 600 * 0.20\n\n    # Mrs. Smith's mix\n    mrs_smith_total_ml = 700 + 300\n    Mrs_smith_total_sugar = 700 * 0.10 + 300 * (x / 100)\n\n    # Setting the equations equal for the same sugar percentage\n    equation = Eq(mr_smith_total_sugar, Mrs_smith_total_sugar)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Round to two decimal places\n    x_value = round(solution[0], 2)\n\n    return x_value\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7  # Pupils to her left, Victoria, pupils to her right\n    total_rows = 1 + 1 + 8  # Rows in front of her, Victoria's row, rows behind her\n    total_pupils = pupils_in_victoria_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    distance_start = 6300  # distance from friend's house at 8:00 am in meters\n    distance_end = 1800    # distance from friend's house at 8:30 am in meters\n    start_time = datetime.strptime(\"8:00\", \"%H:%M\")\n    end_time = datetime.strptime(\"8:30\", \"%H:%M\")\n\n    time_diff = end_time - start_time  # time difference in minutes\n    distance_diff = distance_start - distance_end  # distance covered in that time\n\n    # Calculate the speed (rate of change of distance)\n    speed = distance_diff / (time_diff.total_seconds() / 3600)\n\n    # Time required to cover the remaining distance\n    time_to_reach = distance_end / speed  # in hours  \n\n    # Convert time to reach to timedelta\n    time_to_reach_delta = timedelta(hours=time_to_reach)\n\n    # Calculate the time he reaches his friend's house\n    arrival_time = end_time + time_to_reach_delta\n\n    # Format the arrival_time as HH:MM (24hr format)\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * 3 / 4\n    remaining_candy = total_candy - given_to_lily\n    given_to_brother = remaining_candy * 1 / 3\n    final_candy = remaining_candy - given_to_brother\n    return final_candy\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_scored_in_2_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_scored_in_2_tests\n    \n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n\n    total_pancakes = pancakes_per_minute * minutes\n\n    return total_pancakes\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Kenny's and his brother's current ages\n    kenny, brother = symbols('kenny brother')\n\n    # May is 7 years old now, so in 3 years she will be 10\n    may_current_age = 7\n    may_future_age = 10\n\n    # According to the problem, Kenny is 2 years older than his brother\n    equation1 = Eq(kenny, brother + 2)\n\n    # When May is 10, the age of Kenny and his brother is 3 times May's age\n    equation2 = Eq(kenny + brother, 3 * may_future_age)\n\n    # Solve the equations to find Kenny's and his brother's current ages\n    solutions = solve((equation1, equation2), (kenny, brother))\n\n    # Determine how much older Kenny is than May currently\n    kenny_current_age = solutions[kenny]\n    kenny_age_difference_with_may = kenny_current_age - may_current_age\n\n    return kenny_age_difference_with_may.evalf()\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Let x be the total number of donuts and y be the total number of muffins\n    # The price per unit for donuts is 10/7 and for muffins is 6/3\n    # Since Amy spent half her money on donuts and half on muffins,\n    # the total amount spent on donuts is equal to the total amount spent on muffins.\n    # We also know that she bought 54 more donuts than muffins (x = y + 54)\n    # Combining these facts, we get the equation: (10/7)x = (6/3)y.\n    # We substitute x with y + 54 and solve for y to find the number of muffins she bought.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq((10/7) * x, (6/3) * y)\n    equation2 = Eq(x, y + 54)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Find the total amount Amy had initially by adding the amount spent on donuts and muffins\n    # Total spent on donuts: x * (10/7)\n    # Total spent on muffins: y * (6/3)\n    total_amount = solutions[x] * (10/7) + solutions[y] * (6/3)\n\n    return total_amount\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    # Since each child can get at least one apple, we distribute one apple to each child first.\n    remaining_apples = total_apples - children\n    # The child who gets the most apples will get the remaining apples plus the one apple initially given.\n    max_apples_for_one_child = remaining_apples + 1\n\n    return max_apples_for_one_child\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Calculate the initial cost\n    total_cost = 10  # in pounds\n\n    # Calculate total weight in grams and total number of bags\n    total_weight_grams = 5000  # 5 kg in grams\n    weight_per_bag = 250  # in grams\n    total_bags = total_weight_grams / weight_per_bag\n\n    # Calculate the selling price per bag and total revenue\n    price_per_bag_pence = 65  # in pence\n    total_revenue_pence = total_bags * price_per_bag_pence\n    total_revenue = total_revenue_pence / 100    # convert total revenue to pounds\n\n    # Calculate the profit and profit margin (percentage profit)\n    profit = total_revenue - total_cost\n    profit_margin = (profit / total_cost) * 100\n\n    return profit_margin\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # Calculate the distance between each tooth\n    distance_per_tooth = 30 / (9 - 4)  # distance between 4th and 9th teeth divided by the number of gaps\n    \n    # Calculate the total length of the comb\n    # There are 99 gaps between 100 teeth\n    total_length_mm = distance_per_tooth * (100 - 1)\n    \n    # Convert millimeters to centimeters\n    total_length_cm = total_length_mm / 10\n    \n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Grandmother's age on 1st December 2008 is 80 years\n    grandmother_age_2008 = 80\n\n    # Mum's age on 1st December 1996 is 40 years\n    mum_age_1996 = 40\n\n    # Calculate the year when mum was 25\n    year_when_mum_was_25 = 1996 - (40 - 25)\n\n    # Calculate the age difference between grandmother and mum\n    age_difference = 2008 - 1996\n\n    # Grandmother's age when mum was 25\n    age_grandmother_when_mum_was_25 = grandmother_age_2008 - age_difference - (40 - 25)\n\n    return age_grandmother_when_mum_was_25\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "from math import comb\n\ndef solution():\n    # The question is basically asking for combinations with repetitions,\n    # which can be calculated through the formula for combinations with \n    # repetition: C(n + r - 1, r)\n    # Since each friend gets at least one ice-cream cone, we have 5 - 3 = 2\n    # ice-cream cones left to distribute freely among the 3 friends.\n    total_cones = 2\n    friends = 3\n    ans = comb(total_cones + friends - 1, total_cones)\n    return ans\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    # Total number of ways to arrange 5 people in a line\n    total_ways = 5 * 4 * 3 * 2 * 1\n    \n    # Number of ways to arrange the two who refuse to stand next to each other\n    ways_refuse = 2 * (4 * 3 * 2 * 1)\n    \n    # Subtract the arrangements where the two people are next to each other from the total\n    ans = total_ways - ways_refuse\n    return ans\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sell = total_vegetables * 2/3\n    remaining_vegetables = total_vegetables - monday_sell\n    tuesday_sell = remaining_vegetables * 2/5\n    total_sell = monday_sell + tuesday_sell\n    return total_sell\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    ans = sum(5 * i if i % 2 != 0 else -5 * i for i in range(1, 857 // 5 + 1))\n    return ans\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_to_sister = total_biscuits / 4\n    \n    biscuits_left = total_biscuits - given_to_sister\n    \n    return int(biscuits_left)\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, q = symbols('p q')\n    \n    equation1 = Eq(p, 4 * q)\n    equation2 = Eq(p, q + 2700)\n\n    solutions = solve((equation1, equation2), (p, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # To encounter the worst case scenario, we first consider picking the maximum \n    # number of balls possible of other colors before picking 16 of one color and \n    # 13 of another color.\n\n    # Maximum balls picked without getting 16 of one color would be:\n    # (15 balls max from each of the five colors)\n    max_without_16_any_color = 5 * 15\n    \n    # Now, we can pick 15 more balls from one color to ensure we have 16 balls of that color.\n    get_16_one_color = 15\n    \n    # Next, we ensure we get 13 balls of another color. We already have 15 balls of each color,\n    # so picking 2 more of any color will guarantee 13 of another color:\n    get_13_another_color = 2\n    \n    # Therefore, the total minimum number of balls to be picked to ensure 16 balls of one color\n    # and 13 of another color together in the worst case scenario is:\n    min_balls_picked = max_without_16_any_color + get_16_one_color + get_13_another_color\n    \n    return min_balls_picked\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    # 2 tables + 5 chairs = 220\n    equation1 = Eq(2 * table + 5 * chair, 220)\n    # 1 table = 3 chairs\n    equation2 = Eq(table, 3 * chair)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n\n    spent = 1.55 + 2.25  # Total amount spent on coffee and muffin\n    remaining = Eq(original_amount * 4/5, original_amount - spent)\n\n    solutions = solve(remaining, original_amount)\n\n    return float(solutions[0])\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n\n    total_coins = joann + sana + nancy\n\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    lucas_ratio = 3\n    mother_ratio = 5\n    total_ratio = lucas_ratio + mother_ratio\n    \n    distance_walked_by_lucas = (total_distance - remaining_distance) * (lucas_ratio / total_ratio)\n\n    return distance_walked_by_lucas\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    n = 30\n\n    # Sum of first n terms of arithmetic sequence\n    sum_n_terms = (n * (2 * first_term + (n - 1) * common_difference)) // 2\n\n    return sum_n_terms\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_original = 30\n    pizzas_original = 12\n    people_new = 35\n    \n    # Calculate pizzas per person (unit rate)\n    unit_rate = pizzas_original / people_original\n    \n    # Calculate number of pizzas needed for new number of people\n    pizzas_needed = unit_rate * people_new\n    \n    return int(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    teams = 16\n    rounds = 0\n    \n    while teams > 1:\n        teams = teams // 2\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    # the fraction of 35 that gives 21 can be calculated by 21 divided by 35\n    # we then multiply by 5 to find the missing numerator\n    fraction_of_35_equal_to_21 = 21 / 35\n    numerator = fraction_of_35_equal_to_21 * 5\n    \n    return int(numerator)\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_class, small_class = symbols('big_class small_class')\n\n    apples_equation = Eq(2 * big_class + 2 * small_class, 48)\n    oranges_equation = Eq(3 * big_class + 2 * small_class, 55)\n\n    solutions = solve((apples_equation, oranges_equation), (big_class, small_class))\n\n    return solutions[small_class]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    for i in range(1, 2017):\n        if math.sqrt(i*72).is_integer():\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n\n    equation = Eq(marion - ethan, -168)\n\n    julie_salary = solve(equation, julie)\n\n    marion_salary = 2 * julie_salary[0]\n    ethan_salary = 5 * julie_salary[0]\n\n    total_salary = julie_salary[0] + marion_salary + ethan_salary\n\n    return total_salary\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n    total_cost = cost_per_lollipop * number_of_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We are creating the congruences based on the problem description:\n    # x ≡ 0 (mod 5), x ≡ -1 (mod 7), x ≡ -1 (mod 8)\n    congruences = [(0, 5), (-1, 7), (-1, 8)]\n\n    # Using solve_congruence function from sympy to solve the Chinese Remainder Theorem problem\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    butter_per_cookie = 40 / 100\n    grams_needed = butter_per_cookie * 150\n    return grams_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the problem\n    danny_current, efron_current = symbols('danny_current efron_current')\n    years = symbols('years')\n\n    # Efron is 30 years younger than Danny\n    equation1 = Eq(efron_current, danny_current - 30)\n\n    # The ratio of Danny's age to Efron's age now is 8:3\n    equation2 = Eq(danny_current / efron_current, 8 / 3)\n\n    # Solve the current ages of Danny and Efron\n    current_ages = solve((equation1, equation2), (danny_current, efron_current))\n\n    # Assign the current ages of Danny and Efron based on the solution\n    danny_now = current_ages[danny_current]\n    efron_now = current_ages[efron_current]\n\n    # In how many years' time will the ratio of Danny's age to Efron's age be 5:3?\n    equation_future = Eq((danny_now + years) / (efron_now + years), 5 / 3)\n\n    # Solve for years\n    years_solve = solve(equation_future, years)\n\n    return years_solve[0]\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways_to_choose = (pencils * rulers) + (pencils * pens) + (rulers * pens)\n\n    return ways_to_choose\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 5):  # Since the first digit is at most 9, the second digit is at most 4 (2*4+1 = 9)\n        first_digit = 1 + (second_digit * 2)\n        for third_digit in range(10):  # The third digit can be from 0 to 9\n            if 10 <= first_digit*1 + second_digit*1 + third_digit*1 < 14:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    return -6 / 6 == 6\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Number of teams\n    teams = 32\n    \n    # Games in the group stage\n    # Each group has 4 teams, playing a single round-robin tournament.\n    # In a round-robin tournament with n teams, each team plays n-1 games.\n    # Therefore, for 4 teams, there are 3 games per team.\n    # But each game involves two teams, so the total games per group is 3 games per team / 2.\n    # With 8 groups, the total number of games in the group stage is:\n    group_games = (4 - 1) * (4 / 2) * 8\n    \n    # Games in the knockout round\n    # There are 16 teams, and after each round the number of teams is halved,\n    # until only 2 teams remain for the final and 2 teams for the third place playoff.\n    # Thus, we have rounds for top 16, top 8, top 4, top 2 (final), and one game for third place.\n    # This results in 15 games (since each round halves the teams starting with 16).\n    knockout_games = 16 - 1\n    \n    # Calculate total games played\n    total_games = group_games + knockout_games\n    \n    return int(total_games)\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the tennis ball and racket\n    ball, racket = symbols('ball racket')\n\n    # Equation 1: Total cost of ball and racket is £30\n    equation1 = Eq(ball + racket, 30)\n\n    # Equation 2: Racket costs £28 more than ball\n    equation2 = Eq(racket - ball, 28)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    # Return the solution for the cost of the ball\n    return solutions[ball]\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    # The number of matches played is n choose 2, since each team plays with each other team once.\n    # n choose 2 is given by n*(n-1)/2\n    equation = Eq(n*(n-1)/2, 15)\n\n    ans = solve(equation, n)\n    \n    # Since the number of teams can't be negative, we choose the positive answer.\n    return max(ans)\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of the number\n    factors_dict = factorint(224)\n    \n    # The number of factors can be determined using the exponents of the prime factorization\n    num_factors = 1\n    for exponent in factors_dict.values():\n        num_factors *= (exponent + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    original_number = 210 / (1 - 0.3)\n    return original_number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    total_ways = pencils * rulers * pens\n\n    return total_ways\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shorts, tshirt = symbols('shorts tshirt')\n    \n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n    \n    solutions = solve((equation1, equation2), (shorts, tshirt))\n    \n    return solutions[tshirt]\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    return 599999 + 59999 + 5999 + 599 + 59 + 5\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    # Let's denote 'x' as the number of correctly answered questions\n    # and 'y' as the number of wrongly answered or skipped questions.\n    # The total number of questions is 10, so we have:\n    # x + y = 10\n    # And the total score is 44, with 6 points for each correct answer\n    # and -2 points for each wrong or skipped answer, so we have:\n    # 6x - 2y = 44\n    # Now we can solve this system of equations for 'x' and 'y'\n    # We can rearrange the first equation to express 'y': y = 10 - x\n    # We can use this expression for 'y' in the second equation:\n    # 6x - 2(10 - x) = 44\n    # 6x - 20 + 2x = 44\n    # 8x - 20 = 44\n    # 8x = 44 + 20\n    # 8x = 64\n    # x = 64 / 8\n    x = 64 // 8\n    \n    return x\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of triangles be x\n    triangles = symbols('triangles')\n\n    # Number of quadrilaterals is 82 more than triangles\n    quadrilaterals = triangles + 82\n\n    # Number of pentagons is given, which is 2.\n    pentagons = 2\n\n    # Sum of the sides of all shapes is given\n    total_sides = 394\n    \n    # Sides of triangles are 3 times their number, quadrilaterals 4 times, and pentagons 5 times\n    equation = Eq(3*triangles + 4*quadrilaterals + 5*pentagons, total_sides)\n\n    # Solve the equation for the number of triangles\n    triangles_solution = solve(equation, triangles)\n    \n    # Calculate the number of quadrilaterals using the number of triangles\n    quadrilaterals_solution = triangles_solution[0] + 82\n\n    return quadrilaterals_solution\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = second_term + common_difference\n\n    return third_term\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    num_lamp_posts = 4\n    distance_between = 25\n\n    total_distance = (num_lamp_posts - 1) * distance_between\n\n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm_of_3_5_7 = 3 * 5 * 7  # lcm(3, 5, 7)\n    for i in range(100, 1000):\n        if i % lcm_of_3_5_7 == 0 and str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n    \n    # When Rachel gives Alice 10 sweets, they will have the same number of sweets\n    equation1 = Eq(rachel - 10, alice + 10)\n    # When they both eat 8 sweets, Rachel has 3 times as many sweets left as Alice\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let the distance be d km.\n    # Time taken at 10 km/h = d/10 hours\n    # Time taken at 15 km/h = d/15 hours\n\n    # If Ben arrives at 10 am after starting at 10 km/h, and at 8 am after starting at 15 km/h,\n    # then the difference in time taken is 2 hours.\n\n    # So, (d/10) - (d/15) = 2\n    # Solving for d gives us d = 30 km\n\n    # If Ben wants to arrive at 9 am, which is 1 hour earlier than the time it takes at 10 km/h,\n    # then he must cycle d km in (d/10) - 1 hours.\n\n    # Let the required speed be v km/h. So, d/v = (d/10) - 1\n\n    # Now we can solve for v given d = 30 km:\n    d = 30\n    time_taken_at_10kmph = d / 10\n    required_time = time_taken_at_10kmph - 1\n\n    # time = distance / speed\n    # required_time = d / v\n    # Thus, v = d / required_time\n    v = d / required_time\n\n    return v\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Total number of students:\n    total_students = 150\n    # The number of teams with only 1 boy:\n    teams_1_boy = 15\n    # The number of teams with two or more boys:\n    teams_2_more_boys = 27\n\n    # Since each team has exactly 3 members and we need to find the number of all-girl teams,\n    # we can find the total number of girls by subtracting the number of boys from the total number of students.\n\n    # Calculate the number of boys in teams with exactly 1 boy.\n    boys_in_1_boy_teams = teams_1_boy \n\n    # Calculate the number of boys in teams with two or more boys:\n    boys_in_2_more_boys_teams = teams_2_more_boys * 2  # Minimally, each team has at least two boys.\n\n    # Calculate the number of boys, considering all-girl teams are half the number of all-boy teams.\n    # Let the number of all-girl teams be x. Then, all-boy teams will be 2x.\n    # The remaining teams (total_teams - x - 2x) will have mixed boys and girls and are accounted for\n    # by boys_in_1_boy_teams and boys_in_2_more_boys_teams.\n    # Every team has 3 members, so total_teams = 150 / 3\n    total_teams = total_students // 3\n    # We already know the mixed boy-girl teams, so subtract them from the total number of teams.\n    all_girl_and_boy_teams = total_teams - teams_1_boy - teams_2_more_boys\n    # Since we have twice as many all-boy teams as all-girl teams, let's represent all-girl teams as x.\n    # Therefore, all-boy teams = 2x, and we have 3x = all_girl_and_boy_teams\n    # Solving for x gives us the number of all-girl teams.\n    all_girl_teams = all_girl_and_boy_teams // 3\n\n    # Now we use the number of all-girl teams to calculate the total number of girls:\n    girls = all_girl_teams * 3  # Each team contributes 3 girls.\n\n    # Add the number of girls from teams with exactly 1 boy (2 girls per team).\n    girls += (teams_1_boy * 2)\n    \n    # Return the total number of girls in the level.\n    return girls\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    base = 7\n    num1 = int(str(61), base)\n    num2 = int(str(34), base)\n    \n    ans = num1 - num2\n    \n    return format(ans, 'b')\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # Let's denote weight of 1 dog as d, weight of 1 rabbit as r, and weight of 1 chicken as c.\n    # According to the problem, we have:\n    # d = 8 * r  (1 dog weighs as much as 8 rabbits)\n    # r = 2 * c  (1 rabbit weighs as much as 2 chickens)\n    \n    # From the first equation, substituting the value of r from the second equation:\n    # d = 8 * (2 * c)\n    # d = 16 * c\n    # Therefore, 1 dog weighs as much as 16 chickens.\n    \n    return 16  # Number of chickens that weigh as much as 1 dog\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_students_initially = 5\n    candies_each_student_initially = 12\n    \n    total_candies = total_students_initially * candies_each_student_initially\n    total_students_after = total_students_initially + 1\n    \n    candies_each_student_after = total_candies // total_students_after\n    \n    return candies_each_student_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n\n    jacob_height = (raj_height + david_height) / 2\n\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cards = symbols('cards')\n    equations = [\n        Eq(cards % 4, 3),\n        Eq(cards % 5, 4),\n        Eq(cards % 7, 6)\n    ]\n    \n    # Find the least solution that satisfies all three equations\n    least_cards = solve(equations, cards)\n    \n    return min(least_cards)\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Worst case scenario for blue gloves\n    blue_left = 1\n    blue_right = 3\n    # Worst case scenario for green gloves\n    green_left = 2\n    green_right = 4\n    \n    # To guarantee at least one matching pair, we take maximum of one color gloves plus one\n    # The reason for this is that even in the worst case, if Dilly picks one more than the number of gloves of one color,\n    # she is guaranteed to have a pair due to the Pigeonhole Principle.\n    max_blue = blue_left + blue_right\n    max_green = green_left + green_right\n    \n    # Dilly should bring out the max of one type of gloves plus one to be sure to get a matching pair.\n    ans = max(max_blue, max_green) + 1\n\n    return ans\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_cost = 1.20\n    depreciation_rate = 0.04\n    duration = 5\n    approx_depreciation = 0.8154\n\n    value_after_years = initial_cost * (1 - depreciation_rate)**duration\n    # Using the given approximation for calculation purposes\n    value_after_years = initial_cost * approx_depreciation\n\n    return round(value_after_years, 4)\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let e represent the number of pins Eugene had originally\n    # Let y represent the number of pins Yuna had originally\n    e, y = symbols('e y')\n    \n    # Eugene had 3 times as many pins as Yuna\n    equation1 = Eq(e, 3 * y)\n    \n    # After Yuna bought 76 pins, she had 7/9 as many pins as Eugene\n    equation2 = Eq(y + 76, 7/9 * e)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, y))\n    \n    return solutions[e]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = \"REVISE\"\n    freq = {letter: word.count(letter) for letter in set(word)}\n\n    num_ways = factorial(len(word))\n    for k, v in freq.items():\n        num_ways //= factorial(v)\n\n    return num_ways\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    for A in range(10):\n        if (1 + 2 + 3 + 4 + 5 + A) % 9 == 0:\n            number = int(f\"12345{A}\")\n            remainder = number % 4\n            return remainder\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    # Given the difference between boys and girls\n    difference = 52\n\n    # Let's denote the side length of the square with boys as b, and the inner square with girls as g.\n    # We know that the number of boys is b*b and the number of girls is (b-2)*(b-2)\n    # The difference between them is given as b*b - (b-2)*(b-2) = 52\n    # Expand the equation: b^2 - b^2 + 4b - 4 = 52\n    # Simplify: 4b = 56\n    # Solve for b: b = 56 / 4 = 14\n\n    # Calculate the total number of boys (outer square)\n    total_boys = 14**2  # side length squared\n\n    # Calculate the total number of girls (inner square)\n    total_girls = (14 - 2)**2  # (side length - 2) squared\n\n    # Total students is the sum of boys and girls\n    total_students = total_boys + total_girls\n\n    return total_students\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    tens = 8\n    hundreds = 2\n\n    ans = hundreds * 100 + tens * 10 + ones\n    \n    return ans\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    sale_price = original_price * (1 - (discount_percentage / 100))\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    # Let the total number of flowers be x.\n    # According to the problem, (1/2)x are red and (4/7)(1/2)x are pink.\n    # Also, there are 6 more red flowers than pink flowers.\n    # We set up the equation: (1/2)x - (4/7)(1/2)x = 6\n    # Now we solve for x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Total number of flowers\n    equation = Eq((1/2)*x - (4/7)*(1/2)*x, 6)\n\n    total_flowers = solve(equation, x)\n\n    return total_flowers[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    num = Fraction(5 * 7 + 1, 7) + Fraction(3 * 11 + 3, 11) + Fraction(1 * 23 + 13, 23)\n    denom = Fraction(3 * 7 + 3, 7) + Fraction(2 * 11 + 2, 11) + Fraction(1 * 23 + 1, 23)\n\n    # Calculate the final answer as a Fraction, then convert to float\n    ans = num / denom\n\n    return float(ans)\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (n * (n + 1) * (2 * n + 1)) // 6\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To ensure victory, Kelly must leave a number of matches that is a multiple of 3 for Dan.\n    # This is because no matter if Dan picks 1 or 2 matches, Kelly can always adjust\n    # her pick to make the total Dan can pick on his next turn be a multiple of 3 again.\n    # Since 11 is not a multiple of 3, Kelly must take either 1 or 2 matches to make\n    # the remaining number of matches (10 or 9) a multiple of 3 after her turn.\n\n    # Kelly should take away 1 match.\n    # This way, 10 matches are left, which is not a multiple of 3.\n    # Now, no matter if Dan takes away 1 or 2 matches,\n    # Kelly can then leave a multiple of 3 after her turn.\n    return 1\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n\n    number_of_kids = 3\n    ways_to_arrange = factorial(number_of_kids)\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    box_value = (65 + 3) / 4\n    return box_value\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n    for cars in range(total_vehicles + 1):\n        motorcycles = total_vehicles - cars\n        if (cars * 4 + motorcycles * 2) == total_wheels:\n            return cars\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n\n    new_length = original_length * 1.10\n    new_breadth = original_breadth * (4/5)\n    new_height = original_height * (11/10)\n\n    original_volume = original_length * original_breadth * original_height\n    new_volume = new_length * new_breadth * new_height\n\n    percentage_increase = (new_volume / original_volume) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    count = 0\n    for x in range(0, 78 // 2 + 1):\n        for y in range(0, 78 // 3 + 1):\n            if 2 * x + 3 * y == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, nicole_initial, nicole_final = symbols('jason nicole_initial nicole_final')\n\n    equation1 = Eq(jason + 18, nicole_final - 5)\n    equation2 = Eq(jason, 20)\n    equation3 = Eq(nicole_initial - 18, nicole_final)\n\n    solutions = solve((equation1, equation2, equation3), (jason, nicole_initial, nicole_final))\n\n    return solutions[nicole_initial]\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_distance_m = total_distance_km * 1000 # convert km to m\n    number_of_intervals = 9 + 1 # Including the start and end points\n    \n    distance_between_two_marshals = total_distance_m / (number_of_intervals - 1)\n    \n    return distance_between_two_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180  # speed in meters per minute for the first part\n    time_initial = 6     # time in minutes for the first part\n    distance_initial = speed_initial * time_initial\n    \n    speed_tired = 120    # speed in meters per minute for the second part\n    time_tired = 8       # time in minutes for the second part\n    distance_tired = speed_tired * time_tired\n    \n    total_distance = distance_initial + distance_tired\n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    initial_amount = 6000\n    interest_rate = 0.03  # 3% interest rate\n    # Interest for the first year\n    first_year_interest = initial_amount * interest_rate\n    # Total amount at the end of the first year\n    first_year_total = initial_amount + first_year_interest\n    # Interest for the second year\n    second_year_interest = first_year_total * interest_rate\n    # Total interest earned after the second year\n    total_interest = first_year_interest + second_year_interest\n    \n    return total_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # time in minutes\n    total_time_available = 80  # one hour and twenty minutes in minutes\n\n    number_of_pictures = total_time_available // time_for_one_picture\n\n    return number_of_pictures\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    n = 1\n    total_tiles = 0\n    red_tiles = 0\n    green_tiles = 0\n    \n    while total_tiles < 400:\n        layer_tiles = (2 * n - 1)**2\n        if n % 2 == 1:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n        total_tiles += layer_tiles\n        n += 1\n\n    dominant_color_tiles = max(red_tiles, green_tiles)\n    difference = abs(red_tiles - green_tiles)\n    \n    return (dominant_color_tiles, difference)\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    return round(1 + (4/7), 1)\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_cycle = \"428571\"\n    index = (69 - 1) % len(recurring_cycle)  # 69th digit is at index 68; use modulo to find the position in the cycle\n    ans = int(recurring_cycle[index])\n    return ans\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = total_salt / total_solution\n    \n    return concentration * 100  # Multiply by 100 to convert to percentage\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let Megacorp's sales in 2014 be x\n    # Then Vastco's sales in 2014 would be x + 0.68x = 1.68x\n    # Vastco's sales rose by 32% in 2015, so its sales in 2015 would be 1.68x * 1.32\n    vastco_2015_sales = 1.68 * 1.32\n    \n    # In 2015, Vastco sold 44% more widgets than Megacorp, so:\n    # Vastco_2015_sales = Megacorp_2015_sales + 0.44 * Megacorp_2015_sales\n    # We can find Megacorp_2015_sales by solving the equation: Megacorp_2015_sales * 1.44 = Vastco_2015_sales\n    megacorp_2015_sales = vastco_2015_sales / 1.44\n    \n    # Megacorp's sales ratio from 2014 to 2015 is Megacorp_2015_sales / x\n    # To find the percentage increase, we subtract 1 and multiply by 100\n    megacorp_sales_ratio = megacorp_2015_sales\n    megacorp_percentage_increase = (megacorp_sales_ratio - 1) * 100\n    \n    return megacorp_percentage_increase\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y)  # Replace y with the actual number of sweets if needed"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Let the cost price of the goods be $100 (for simplicity)\n    planned_profit = 50  # planned to earn a 50% profit\n    actual_profit = planned_profit * 0.82  # total profit was 82% of the planned profit\n\n    # On the first day\n    first_day_sales = 100 * 0.7  # sold 70% of his goods\n    first_day_profit = first_day_sales * 0.5  # at a profit of 50%\n\n    # Remaining goods to be sold on the second day\n    remaining_goods = 100 - first_day_sales\n\n    # Calculate the total profit\n    total_profit = first_day_profit + actual_profit\n    # Calculate the second day profit\n    second_day_profit = total_profit - first_day_profit\n\n    # Let the discount on the second day be x%\n    # (remaining_goods - remaining_goods * x%) = second_day_profit\n    # x = (remaining_goods - second_day_profit) / remaining_goods * 100\n    discount_rate = (remaining_goods - second_day_profit) / remaining_goods * 100\n\n    return round(discount_rate, 2)\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from itertools import permutations\n    \n    # There will be 4 ages to permute: ages of 2 sons and 2 daughters\n    for ages in permutations(range(1, 55), 4):\n        s1, s2, d1, d2 = sorted(ages)  # s for son, d for daughter\n        if s1 + s2 + d1 + d2 == 55 and \\\n           s2 - s1 == 3 and \\\n           d2 - d1 == 2 and \\\n           s1 == 2 * d2:\n            return min(ages)\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    initial_bottles = 48\n    total_bottles = initial_bottles\n    empty_bottles = initial_bottles\n\n    while empty_bottles >= 4:\n        # Exchange empty bottles for new ones\n        new_bottles, remain_empty = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        # Update total empty bottles count (including the borrowed one)\n        empty_bottles = new_bottles + remain_empty - 1  # borrow 1 bottle if possible\n        \n        # Check if we can return the borrowed bottle\n        if empty_bottles + 1 >= 4:\n            empty_bottles += 1  # return the borrowed empty bottle\n        else:\n            break  # Not enough bottles to continue exchanging after returning\n\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the total digits for 1 to 9\n    digits_for_1_to_9 = 9 * 1\n    \n    # Calculate the total digits for 10 to 99\n    digits_for_10_to_99 = (99 - 10 + 1) * 2\n    \n    # Calculate the total digits for 100 to 113\n    digits_for_100_to_113 = (113 - 100 + 1) * 3\n    \n    total_digits = digits_for_1_to_9 + digits_for_10_to_99 + digits_for_100_to_113\n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls = symbols('pearls')\n    \n    # Let's denote the initial number of pearls as 'pearls'\n    # According to the question:\n    # Half of the pearls fell onto the floor -> pearls/2\n    # A fourth rolled under a chair -> pearls/4\n    # A sixth fell into her lap -> pearls/6\n    # Three pearls remained on the strand -> 3\n    # The sum of these should be equal to the initial number of pearls:\n    # pearls/2 + pearls/4 + pearls/6 + 3 = pearls\n    \n    equation = Eq(pearls/2 + pearls/4 + pearls/6 + 3, pearls)\n    \n    solution = solve(equation, pearls)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    # Assuming that the productivity of workers is constant\n    workers_original = 3\n    days_original = 3\n    work_done = workers_original * days_original\n    workers_new = 1\n\n    # Calculating the number of days it would take 1 worker to do the same amount of work\n    days_new = work_done / workers_new\n\n    return days_new\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    return 124 - 76\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import product, combinations\n\ndef solution():\n    entrances = [1, 2, 3]\n    people = ['Len', 'Joe', 'Angle', 'Jack']\n    all_ways = list(product(entrances, repeat=len(people)))\n\n    # Filter out combinations where not all entrances are used\n    valid_ways = [way for way in all_ways if len(set(way)) == len(entrances)]\n\n    return len(valid_ways)\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # defining the symbols\n    black, white, grey = symbols('black white grey')\n    \n    # creating equations based on the problem statement\n    equation1 = Eq(black, white + 14)  # black rabbits are 14 more than white\n    equation2 = Eq(grey, white - 2)    # grey rabbits are 2 less than white\n    equation3 = Eq(black + white + grey, 84)  # total number of rabbits\n    \n    # solving the equations\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n    \n    # return the number of white rabbits\n    return solutions[white]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    rounds = 45\n    for teams in range(1, rounds + 1):\n        if teams * (teams - 1) / 2 == rounds:\n            return teams\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John's and his brother's erasers\n    john_erasers, brother_erasers = symbols('john_erasers brother_erasers')\n\n    # John has 32 more erasers than his brother\n    equation1 = Eq(john_erasers, brother_erasers + 32)\n    # Together, they have 246 erasers\n    equation2 = Eq(john_erasers + brother_erasers, 246)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_erasers, brother_erasers))\n\n    # Return the number of erasers John's brother has\n    return solutions[brother_erasers]\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    result = (40 - 4) / 2\n    return result\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    # Let's assume x is the number of glasses broken\n    for x in range(total_glasses + 1):\n        # For every unbroken glass, Peter gets $1, and for every broken one he loses $1\n        if (total_glasses - x) - x == 92:\n            return x\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / -2 + 4 * -3\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change = 1200 - total_cost  # converting £12 to pence (1200p)\n    \n    return change / 100  # converting pence back to pounds\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # Let the smallest number be n\n    # Then the other two numbers are (n + 2) and (n + 4)\n    # The sum of these three numbers is 57, hence n + (n + 2) + (n + 4) = 57\n    # 3n + 6 = 57\n    # 3n = 57 - 6\n    # 3n = 51\n    # n = 51 / 3\n    n = 51 // 3\n    \n    # Since we need the smallest, we return n\n    return n\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Number of boats will be represented by 'b'\n    # Total number of people will be represented by 'p'\n    b, p = symbols('b p')\n\n    # According to the first condition, if the number of boats is reduced by 1, each will carry 9 people.\n    # Therefore the total must be divisible by 9: (b - 1) * 9 = p\n    equation1 = Eq((b - 1) * 9, p)\n\n    # According to the second condition, if the number of boats is increased by 1, each will carry 6 people.\n    # Therefore the total must be divisible by 6: (b + 1) * 6 = p\n    equation2 = Eq((b + 1) * 6, p)\n\n    # Solving the two equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    # Since we only require the total number of people\n    return solutions[p]\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    numbers = [2, 6, 1, 10, 5, 3]\n    for number in numbers:\n        if number * 3 == 2 * 3:\n            return number\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for num in range(6, 15):  # start from 6 because it's the first number after 5\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n\n    pencils = 32\n    pens = 40\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, peter = symbols('john peter')\n\n    original_ratio = Eq(john, peter + 180)\n    post_sale_john = john * (4/5)\n    post_sale_peter = peter * (3/10)\n    post_sale_ratio = Eq(post_sale_john, post_sale_peter / 2)\n\n    solutions = solve((original_ratio, post_sale_ratio), (john, peter))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    initial_tests = 4\n    initial_average = 60\n    new_test_score = 70\n\n    total_initial_score = initial_tests * initial_average\n    new_average = (total_initial_score + new_test_score) / (initial_tests + 1)\n\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    num_horses = 6\n    horse_apples = 20\n    num_pigs = 12\n    pig_apples = 15\n    num_rabbits = 12\n    rabbit_apples = 5\n\n    total_horse_apples = num_horses * horse_apples\n    total_pig_apples = num_pigs * pig_apples\n    total_rabbit_apples = num_rabbits * rabbit_apples\n\n    total_animals = num_horses + num_pigs + num_rabbits\n    total_apples = total_horse_apples + total_pig_apples + total_rabbit_apples\n\n    average_apples = total_apples / total_animals\n\n    return average_apples\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all possible 4-digit sequences without repetition from 1, 3, 4, and 7\n    digits = [1, 3, 4, 7]\n    perms = permutations(digits, 4)\n\n    # Initialize minimum value to a high number\n    min_sum = float('inf')\n\n    # Loop over all permutations to find the minimum sum of two 2-digit numbers\n    for perm in perms:\n        # Form the first 2-digit number\n        num1 = perm[0] * 10 + perm[1]\n        # Form the second 2-digit number\n        num2 = perm[2] * 10 + perm[3]\n        # Calculate the sum of the two numbers\n        current_sum = num1 + num2\n        # Update minimum sum if the current_sum is less\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        for j in range(10):\n            if (i + j) < 10:  # The sum of the first two digits should be less than 10 (third digit)\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    number_of_cups = 6\n    sale_price_1 = 5  # pay for 5 cups and get 6\n    sale_price_2 = 20 * 0.8  # 20 percent discount on $20\n\n    # Calculate the total cost for each sale plan\n    total_cost_plan_1 = full_price_per_cup * sale_price_1\n    total_cost_plan_2 = number_of_cups * full_price_per_cup * 0.8\n\n    # Find the minimum cost between the two plans\n    ans = min(total_cost_plan_1, total_cost_plan_2)\n\n    return ans\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson_left, jayden_left = symbols('benson_left jayden_left')\n\n    equation1 = Eq(benson_left, 3 * jayden_left)\n    equation2 = Eq(74 + benson_left + 120 + jayden_left, 590)\n\n    solutions = solve((equation1, equation2), (benson_left, jayden_left))\n\n    return solutions[jayden_left]\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = ((2, 7), (3, 9), (4, 11))\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declaration of symbols\n    peaches, students_B = symbols('peaches students_B')\n\n    # Given conditions translated to equations\n    # All peaches to Class A: peaches = 5 * (students_B + 3) + 10\n    # All peaches to Class B: peaches = 8 * students_B - 2\n    equation1 = Eq(peaches, 5 * (students_B + 3) + 10)\n    equation2 = Eq(peaches, 8 * students_B - 2)\n\n    # Solve equations for peaches and number of students in Class B\n    solutions = solve((equation1, equation2), (peaches, students_B))\n\n    # Extract the peaches solution\n    return solutions[peaches]\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2018):\n        total_sum += int('2' * i)\n    last_5_digits = total_sum % 100000\n    return last_5_digits\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3/4\n    litres_of_water = total_orange_drink * fraction_water\n    return litres_of_water\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    return 145 + 37\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    n = (547 * 479) % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    centimeters = meters * centimeters_per_meter\n    return centimeters\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    ans = 32068 - 1774\n    return ans\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n\n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    total_volume = 300\n    raspberry_part = 1\n\n    raspberry_juice_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_juice_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's introduce variables for their speeds and the time Kevin walked\n    betty_speed, kevin_speed, kevin_time = symbols('betty_speed kevin_speed kevin_time')\n\n    # Betty's distance after 6 minutes is equivalent to Kevin's distance when he walks 150 meters\n    equation1 = Eq(betty_speed * 6, kevin_speed * kevin_time)\n\n    # Kevin reaches the grocery store after walking for kevin_time + 3 minutes\n    equation2 = Eq(kevin_speed * (kevin_time + 3), betty_speed * 6)\n\n    # Betty is 900 meters away from the cinema after walking for 6 + 3 minutes\n    equation3 = Eq(betty_speed * 9, 900)\n\n    # Kevin has walked 150 meters when Betty reaches the store in 6 minutes\n    equation4 = Eq(kevin_speed * kevin_time, 150)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (betty_speed, kevin_speed, kevin_time))\n\n    # The difference in leaving time is the value of kevin_time - 6 minutes\n    time_difference = solutions[kevin_time] - 6\n\n    return time_difference\n\nans = solution()"
    ]
}