{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    first_term = 5\n    sum_squares = sum([i**2 for i in range(first_term, n + 1)])\n    return sum_squares\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / (1 - 0.4)\n    original_money = remaining_after_bag / (1 - 0.2)\n    return original_money\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1 / 6)\n    biology_students = total_students * (2 / 9)\n    chemistry_students = total_students - physics_students - biology_students\n    \n    return int(chemistry_students)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 * 60  # Convert 9:00 AM to minutes\n    end_time = 10 * 60   # Convert 10:00 AM to minutes\n\n    class_duration = end_time - start_time  # Calculate the difference in minutes\n    \n    return class_duration\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    return 167 - 43\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have amy_apples - x apples\n    # John will have john_apples + x apples\n    # Amy will have 4 more apples than John: (amy_apples - x) = (john_apples + x) + 4\n\n    # Solving for x\n    x = (amy_apples - john_apples - 4) / 2\n    return int(x)\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    import sympy as sp\n    \n    students = sp.symbols('students', integer=True)\n    \n    # Initial condition: students are in a square array with a surplus of 5.\n    eq1 = sp.Eq(students - 5, sp.simplify('(students ** 0.5) ** 2'))\n    \n    # After adding one row and one column, 26 more are needed to form a square.\n    # This means that the new total is (sqrt(students - 5) + 1)^2\n    eq2 = sp.Eq(students + 26, sp.simplify('((students - 5) ** 0.5 + 1) ** 2'))\n    \n    solution = sp.solve([eq1, eq2], students)\n    \n    # Filter the solution for positive integers, as negative or non-integer students doesn't make sense.\n    ans = [s.evalf() for s in solution if s.is_real and s > 0]\n    \n    # We expect only one valid solution for this problem\n    return int(ans[0])\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "def solution():\n    from math import factorial\n\n    total_plants = 9\n    selected_plants = 4\n    arrangements = factorial(total_plants) // factorial(total_plants - selected_plants)\n\n    return arrangements\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n    profit_percentage = 0.10\n    loss_percentage = 0.10\n    \n    # the price at which the first house was bought\n    purchase_price_profit_house = sale_price / (1 + profit_percentage)\n    # the price at which the second house was bought\n    purchase_price_loss_house = sale_price / (1 - loss_percentage)\n    \n    total_purchase_price = purchase_price_profit_house + purchase_price_loss_house\n    total_sales = 2 * sale_price\n    overall_profit_loss = total_sales - total_purchase_price\n\n    return overall_profit_loss\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combinations with shirts and pants (every shirt-pants combo can go with any shoe)\n    shirt_pants_combos = shirts * pants * shoes\n    \n    # Combinations with dresses (each dress can go with any shoe)\n    dress_shoe_combos = dresses * shoes\n    \n    # Since a heel can only be worn with a dress, we add the combination of dresses and heels\n    dress_heel_combos = dresses * heels\n\n    # Total combinations\n    total_combos = shirt_pants_combos + dress_shoe_combos + dress_heel_combos\n\n    return total_combos\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    toms_age = symbols('toms_age')\n    dads_age = 43\n    equation = Eq(dads_age, 4 * toms_age - 5)\n\n    toms_age_solution = solve(equation, toms_age)\n\n    return toms_age_solution[0]\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # If Fred wants to win, he needs to make sure that he always leaves George\n    # with a number of oranges that is a multiple of 4 after each of his turns.\n    # This is because whatever number George picks (1, 2, or 3), Fred will be able\n    # to pick a number that sums up to 4 and reduces the total to the next\n    # multiple of 4.\n\n    # To ensure this, Fred should initially reduce the total number of oranges to \n    # the nearest multiple of 4 which is less than 15, so that afterwards any move\n    # George makes Fred can reduce the total to the next multiple of 4.\n\n    # The nearest multiple of 4 less than 15 is 12 (4*3).\n    # Therefore, Fred should take 15 - 12 = 3 oranges in his first turn.\n    return 3\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    return 66666 * 66666\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    frac = 3/20\n    decimal = 0.16\n\n    if frac > decimal:\n        ans = \"3/20 is larger than 0.16\"\n    else:\n        ans = \"0.16 is larger than 3/20\"\n\n    return ans\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    from itertools import permutations\n    for p in permutations(\"ABCDE\"):\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C'):\n            count += 1\n        elif p.index('A') > p.index('C') and p.index('A') < p.index('B'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Speed while jogging\n    jogging_speed = 8  # km/h\n    # Speed while walking\n    walking_speed = 4  # km/h (which is half the jogging speed)\n\n    # Time spent jogging: From 6:30 AM to 8:30 AM\n    jogging_time = 2  # hours\n    # Time spent walking: From 8:30 AM to 9:30 AM\n    walking_time = 1  # hour\n\n    # Distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n    # Distance covered while walking\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    last_digit_2 = (2 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n\n    ans = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n    return ans\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n\n    def square(M, N):\n        return 8 * M - N * N\n\n    ans = square(diamond(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    # Use the formula for the sum of fractions: LCM of denominators / each individual denominator\n    A = 60 * 1 + 60 * 1/2 + 60 * 1/3 + 60 * 1/4 + 60 * 1/5\n    \n    return int(A)\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    for biggest_pile in range(1, 16):\n        for pile_2 in range(1, biggest_pile):\n            for pile_3 in range(1, pile_2):\n                for pile_4 in range(1, pile_3):\n                    if biggest_pile + pile_2 + pile_3 + pile_4 == 16:\n                        return biggest_pile\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "网络故障，请重试"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Danny takes 12 minutes to go from the first to the fourth floor.\n    # The difference in floors is 4 - 1 = 3\n    # If we assume the time taken to travel between each floor is the same,\n    # then time per floor is total time divided by number of intervals between floors.\n    total_time = 12\n    floors_difference = 3\n    time_per_floor = total_time / floors_difference\n\n    # Time to go from first to second floor is just the time per floor\n    return time_per_floor\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    # The formula for the sum of the squares of the first n natural numbers is n(n + 1)(2n + 1) / 6\n    # We need to adjust this for odd squares, so we consider the series of squares of odd numbers as a separate sequence\n    # where 1 is the first term, 3 is the second term, so 19 is the 10th term\n    # therefore, n = 10 for the 10 odd numbers from 1 to 19\n\n    n = 10  # As we have 10 odd numbers until 19\n    odd_square_sum = (n * (2 * n - 1) * (2 * n + 1)) // 6  # Using the adapted formula for odd squares\n    return odd_square_sum\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    # Initialize the result variable to accumulate the sum\n    result = 0\n\n    # Calculate each term and add it to the result\n    for n in range(1, 2008):\n        result += (n**2 + (n+1)**2) / (n * (n+1))\n\n    # Since the sum is continuous, we observe that the terms cancel out except for the first and last terms: 1 and 2008\n    result = 1 + 2008\n\n    # Round the result to the nearest whole number\n    return round(result)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    actual_average = 163\n    incorrect_average = 159\n    incorrect_height = 126\n    correct_height = 162\n\n    difference_in_averages = actual_average - incorrect_average\n    difference_in_heights = correct_height - incorrect_height\n\n    number_of_girls = difference_in_heights / difference_in_averages\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    return 24 / 100 * 25\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of each type of note\n    x = symbols('x')\n\n    # Set up the equation: 5x + 10x + 20x = 280\n    equation = Eq(5 * x + 10 * x + 20 * x, 280)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # The total number of notes is the number of each note times 3\n    total_notes = solution[x] * 3\n\n    return total_notes\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    result = 678 * 109\n    return result\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    ken, beth = symbols('ken beth')\n\n    # Given Beth has beth seashells and Ken has ken seashells\n    # Ken had $75 more seashells than Beth: ken = beth + 75\n    # $\\frac{4}{5}$ of the number of seashells Beth had was equal to $\\frac{2}{5}$ of the number of seashells Ken had\n    # $\\frac{4}{5} * beth = \\frac{2}{5} * ken\n\n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (ken, beth))\n\n    # Calculate the total number of seashells\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    result = (3/2) * (4/3) * (5/4) * (6/5) * (7/6) * (8/7) * (9/8) * (10/9)\n    return result\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # Calculate the sum of the first n odd numbers\n    n = (13 + 1) // 2\n    # The sum of the first n odd numbers is the square of n\n    sum_of_odds = n ** 2\n    # Using the formula sum of cubes for first n natural numbers is (1+2+...+n)^2\n    ans = sum_of_odds ** 2\n    return ans\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    return 9876543 + 10000\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n    \n    # Find the greatest common divisor of the ribbons' lengths\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    greatest_length = gcd(gcd(ribbon1, ribbon2), ribbon3)\n    \n    return greatest_length\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    ans = None\n    for cube_root in range(1, int(50 ** (1/3)) + 1):\n        cube = cube_root ** 3\n        if (cube - 2) ** 0.5 == int((cube - 2) ** 0.5):\n            ans = cube - 2\n            break\n    return ans\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n    num_containers = (total_apples + container_capacity - 1) // container_capacity\n    return num_containers\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    return sum(range(1, 10)) + 7\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import factorial\n\ndef solution():\n    # First, give 2 oranges to each kid, so we have 13 - 3*2 = 7 oranges left to distribute.\n    # Now we need to find the number of solutions to x + y + z = 7 for non-negative integers x, y, z.\n    # This is equivalent to placing two dividers in 7 + 2 = 9 positions. (Stars and bars method)\n    # The number of ways to choose 2 positions out of 9 is C(9, 2).\n    \n    n = 7 + 2  # Total positions (7 oranges + 2 dividers)\n    k = 2      # We need to choose 2 positions for the dividers\n    \n    ways = factorial(n) // (factorial(k) * factorial(n - k))\n    return ways\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x and y be the two numbers, where x > y\n    x, y = symbols('x y')\n    \n    # Equation 1: Sum of the numbers\n    equation1 = Eq(x + y, 11.63)\n    \n    # Equation 2: sum of numbers after shifting decimal of y to the left by one position\n    equation2 = Eq(x + y/10, 5.87)\n    \n    # Solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Difference between the two numbers, times 100\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return int(difference)\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    result = (7/8) * 32\n    return result\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # The given expression simplifies to 2^(1 - 1/(2^(2^n)))\n    # We know that 2^(1 - 1/(2^(2^n))) is equivalent to the product of the terms in the question.\n    # This product equals 2 * (1 - 1/(2^(2^n)))\n    # Hence 1 - 1/(2^(2^n)) = 1 - 1/(2^(2^2009))\n\n    # Therefore 2^n must equal 2^2009, and thus n must equal 2009.\n    return 2009\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n    \n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n    \n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n    \n    return solutions[bill]\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the number of $10 notes and tw be the number of $2 notes\n    t, tw = symbols('t tw')\n    \n    # David had a total of 40 notes\n    total_notes = Eq(t + tw, 40)\n    \n    # He spent 40% of the $10 notes\n    t_spent = t * 40 / 100\n    \n    # He spent 25% of the $2 notes\n    tw_spent = tw * 25 / 100\n    \n    # After spending, he has 4/5 as many $10 notes as $2 notes left\n    left_ratio = Eq((t - t_spent) * 5, (tw - tw_spent) * 4)\n    \n    # Solving the equations for the number of notes\n    solutions = solve((total_notes, left_ratio), (t, tw))\n    \n    # Determine the number of each note spent\n    t_spent_num = solutions[t] * 40 / 100\n    tw_spent_num = solutions[tw] * 25 / 100\n    \n    # Calculate the total cost of the gift\n    cost = t_spent_num * 10 + tw_spent_num * 2\n    \n    return cost\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:\n            continue\n        paso = 1000*p + 100*a + 10*s + o\n        return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    num = 100  # Start at the smallest 3-digit number\n    while True:\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n        num += 1  # Increment by 1 and check the next number\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n\n    equation1 = Eq(harry + liam, 640) # Total amount of water they both have\n    equation2 = Eq(harry + 90, 3 * (liam - 90)) # If 90 ml is transferred from Liam to Harry\n\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # First term (Monday) is 3\n    first_term = 3\n    # Common difference is 3 (since each day he does 3 more questions)\n    common_difference = 3\n    # Total terms are 7 (from Monday to Sunday)\n    total_terms = 7\n    # Using the formula for the sum of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    sum_questions = (total_terms / 2) * (2 * first_term + (total_terms - 1) * common_difference)\n    # Return the total sum\n    return int(sum_questions)\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    man_days = 15\n    together_days = 12\n\n    man_rate = 1 / man_days\n    together_rate = 1 / together_days\n\n    wife_rate = together_rate - man_rate\n    wife_days = 1 / wife_rate\n\n    return wife_days\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 2 * a + 4\n\n    ans = 200\n    for i in range(199, 0, -1):\n        ans = custom_operation(ans, i)\n\n    return ans\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Given values in the arithmetic sequence\n    a2 = 20  # Number of beans peeled from 9 to 10\n    a3 = 28  # Number of beans peeled from 10 to 11\n    a4 = 36  # Number of beans peeled from 11 to 12\n    \n    # The difference between consecutive terms stays the same\n    # a3 - a2 = a4 - a3\n    # Hence, a2 - a1 = a3 - a2\n    difference = a3 - a2\n    \n    # a1 (the first term) can now be calculated\n    a1 = a2 - difference\n    \n    return a1\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit can't be 0 as we need a three-digit number.\n        for j in range(0, 10):\n            for k in range(0, 10):\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import combinations\n\ndef solution():\n    count = 0\n    for white in range(1, 7):  # Picking 1 to 6 white balls\n        for red in range(3, 6):  # Picking 3 to 5 red balls\n            for black in range(1, 4):  # Picking 1 to 3 black balls\n                if white + red + black == 10:  # Total number of balls picked must be 10\n                    # Calculate combinations for each color\n                    white_comb = len(list(combinations(range(9), white)))\n                    red_comb = len(list(combinations(range(5), red)))\n                    black_comb = len(list(combinations(range(6), black)))\n                    \n                    # Multiply combinations together for this particular pick\n                    count += white_comb * red_comb * black_comb\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let's denote the original number of pearls as x.\n    x = symbols('x')\n\n    # According to the problem, half of the pearls fell onto the floor,\n    # a fourth rolled under a chair, a sixth fell into her lap,\n    # and three pearls remained on the strand.\n    # This can be represented as an equation:\n    equation = Eq((1/2 + 1/4 + 1/6) * x + 3, x)\n\n    # Solving the equation will give us the original number of pearls (x).\n    original_pearls = solve(equation, x)\n\n    return original_pearls[0]\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    number = 1  # Start of the sequence\n    increment = 2  # Initial increment\n    while number < 100:  # Searching for the largest two-digit number\n        if number + increment >= 100:\n            return number  # This will be the largest two-digit number\n        number += increment\n        increment += 2  # Increment increases by 2 for this sequence\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # The sum of the first three numbers\n    sum_first_three = 3 * 120  # since the mean of three numbers is 120\n\n    # The sum of all four numbers\n    sum_all_four = 4 * 150  # since the mean of the four numbers is 150\n\n    # The fourth number is the difference between the sum of all four and the sum of the first three\n    fourth_number = sum_all_four - sum_first_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    mass_given_away = 0.76\n    remaining_mass = initial_mass - mass_given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "网络故障，请重试"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are looking for numbers that satisfy the following system of congruences:\n    # x ≡ 0 (mod 7) -> first number is a multiple of 7\n    # x + 2 ≡ 0 (mod 8) -> second number is a multiple of 8\n    # x + 4 ≡ 0 (mod 9) -> third number is a multiple of 9\n    # The numbers are consecutive even numbers, so the second number is first number + 2,\n    # and the third number is first number + 4.\n    \n    congruences = [(0, 7), (6, 8), (5, 9)]\n    x, N = solve_congruence(*congruences)\n\n    # The smallest sum of these numbers will be their consecutive order: x + (x+2) + (x+4)\n    ans = x + (x + 2) + (x + 4)\n\n    return ans\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = full_weight - half_full_weight\n    empty_basket_weight = half_full_weight - half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from front, and Bud is 6th from the end.\n    # There are 5 children between Pip and Bud, with Pip in front of Bud.\n    # If we count Pip as the first and Bud as the last in the group between them, we need to add 5 more.\n    # The total number of children in the queue is:\n    # Pip's position + number of children between Pip and Bud + Bud's position from the end - 1 (since we counted Pip twice)\n    total_children = 6 + 5 + 6 - 1\n    return total_children\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    result = solve_congruence(*congruences)\n    \n    return result[0]\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate the common difference\n    common_difference = (fourth_term - first_term) / (4 - 1)\n    \n    # Use the formula for the sum of an arithmetic sequence: S_n = n/2 * (2a + (n-1)d)\n    sum_of_sequence = total_rows / 2 * (2 * first_term + (total_rows - 1) * common_difference)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    family_total_age_now = 29 * 6\n    parents_total_age_now = family_total_age_now - 64\n    parents_total_age_three_years_ago = parents_total_age_now - 3 * 2\n    average_age_parents_three_years_ago = parents_total_age_three_years_ago / 2\n    \n    return average_age_parents_three_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    days_taken = 5\n    target_total_paintings = 56\n    \n    paintings_per_day = total_paintings_done / days_taken\n    remaining_paintings = target_total_paintings - total_paintings_done\n    more_days_needed = remaining_paintings / paintings_per_day\n    \n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    result = 3+3+3+3+3+3+3+3\n    ans = result // 3\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    # Number of pieces of paper after which a leaf is inserted\n    interval = 3\n    # Total number of pieces of paper\n    total_papers = 18\n    # Number of leaves inserted, rounding down because the last few papers may not have a leaf inserted after\n    leaves = total_papers // interval\n\n    return leaves\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    a5 = 8\n    a12 = 50\n    n5 = 5\n    n12 = 12\n\n    common_difference = (a12 - a5) / (n12 - n5)\n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    ans = 95 * (37 + 42 + 21)\n    return ans\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import permutations\n\ndef solution():\n    times = [7, 9, 4, 10]\n    min_time = float('inf')\n\n    # Generate all permutations of the people crossing the river\n    for perm in permutations(times):\n        # Starting on left side: A, B, C, D\n        # Ending on right side: -, -, -, -\n        # `perm` is a permutation of crossing times for A, B, C, and D\n\n        # Steps that the crossing will follow:\n        # 1. A & B cross to right side\n        # 2. A returns\n        # 3. C & D cross to right side\n        # 4. B returns\n        # 5. A & B cross together again\n\n        # Calculate the total time for this permutation\n        total_time = perm[0] + (2 * perm[1]) + perm[2] + perm[3]\n\n        # Check if this is the minimum time found so far\n        if total_time < min_time:\n            min_time = total_time\n\n    return min_time\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    diff = 3\n\n    # Calculate the total number of terms in the original sequence\n    num_terms = 1 + (242 - 2) // diff\n\n    while num_terms > 3:\n        # Remove the first three terms and add their sum to the end\n        first_term += 3 * diff  # This is the new first term after erasing\n        num_terms -= 2  # Removing three terms and adding one term decreases by two overall\n\n    # The second number is just 'first_term' plus the common difference\n    second_number = first_term + diff\n\n    return second_number\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud, bob = symbols('pip bud bob')\n\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_number = min(numbers, key=lambda x: abs(x - 0.1))\n    return closest_number\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    return 29 + 37 + 76 + 63 + 24 + 45 + 61 + 55\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n\n    family_children = jacob + sisters + brothers\n    \n    return family_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    # Calculate the total man-days required to build the bridge\n    total_man_days = 5 * 15\n    # Calculate the number of people needed to complete the bridge in 7 days\n    needed_people = total_man_days / 7\n    # Calculate the additional people needed (subtract the original 5)\n    additional_people = needed_people - 5\n    return int(additional_people)\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n\n    return final_value\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        ""
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    # The original speed is such that Maria can cover the distance in 30 minutes\n    # Let d be the total distance, t_r be the time Maria ran before it rained, and s be her usual speed\n    # Her speed after the rain is reduced by 20%, so it's 0.8 * s\n    # She is 5 minutes late, so the total time is 35 minutes (or in terms of the original speed (d = 30s), the time becomes 30 + 5 = 35 minutes)\n\n    # d = s * t_r + 0.8 * s * (35 - t_r)\n    # And we know the distance after the rain is 2400 meters, so:\n    # 2400 = 0.8 * s * (35 - t_r)\n\n    # Now we have two equations with two variables (s and t_r), which we can solve for d:\n    # Equation 1: d = s * t_r + 2400\n    # Since d is covered in 30 minutes at speed s, we get s = d / 30\n    # Substituting s in Equation 1 gives us d = (d / 30) * t_r + 2400\n\n    # Equation 2 (from the distance after it began raining): 2400 = 0.8 * (d / 30) * (35 - t_r)\n    # Rearrange Equation 2 to solve for t_r: t_r = (2400 / (0.8 * d / 30)) + 35\n\n    # By substituting the expression for t_r from Equation 2 into Equation 1, we have:\n    # d = (d / 30) * ((2400 / (0.8 * d / 30)) + 35) + 2400\n\n    # Simplify the equation\n    # d = (d / 30) * (2400 * 30 / (0.8 * d) + 35) + 2400\n    # d = (2400 / 0.8) + 30 * 35 + 2400\n    # d = (2400 * 1.25) + 1050 + 2400\n    # d = 3000 + 1050 + 2400\n\n    # Now, calculate the total distance d\n    d = 3000 + 1050 + 2400\n\n    return d\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A represent the original number of students in school A\n    # Let B represent the original number of students in school B\n    A, B = symbols('A B')\n\n    # Equation1: After transferring, school A has 20 fewer students\n    equation1 = Eq(A - 20, B)\n\n    # Equation2: The total number of students in both schools is 1050\n    equation2 = Eq(A + B, 1050)\n\n    # Equation3: After transferring, school A still has 10 more students than school B\n    equation3 = Eq(A - 20, B + 10)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3\n    time_elapsed = 5.5  # From 5:00 am to 10:30 am is 5.5 hours\n    temp_rise_per_hour = 2\n    temp_increase = time_elapsed * temp_rise_per_hour\n    final_temp = initial_temp + temp_increase\n    return final_temp\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    initial_money = symbols('initial_money')\n\n    # Construct the equations based on the problem statement\n    after_shop_A = Eq(initial_money/2 - 1, initial_money - (initial_money/2 + 1))\n    after_shop_B = Eq(after_shop_A.rhs/2 - 2, after_shop_A.rhs - (after_shop_A.rhs/2 + 2))\n    after_shop_C = Eq(after_shop_B.rhs/3 - 3, after_shop_B.rhs - (after_shop_B.rhs/3 + 3))\n\n    # Solve the equation considering she had $49 after shop C\n    solution = solve(after_shop_C.rhs - 49, initial_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # To ensure getting at least 1 green pencil,\n    # Darrell must draw pencils accounting for the worst-case\n    # scenario of picking all other colors first.\n    \n    # Picking all blue pencils.\n    blue_pencils = 3\n    \n    # Picking all white pencils.\n    white_pencils = 3\n    \n    # One more pencil to guarantee getting a green one.\n    one_green_pencil = 1\n    \n    # Total pencils Darrell must draw to be sure to get at least 1 green pencil.\n    total_pencils = blue_pencils + white_pencils + one_green_pencil\n    \n    return total_pencils\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3 / 4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 2240 to get its prime factors and their powers\n    factors = factorint(2240)\n    \n    # Find the least value of n by ensuring the powers of all primes are even\n    # To make the quotient a perfect square,\n    # each prime factor's power divided by n should be even (2k, where k is an integer)\n    n = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            n *= prime\n            \n    return n\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books on the top shelf\n    x = symbols('x')\n    \n    # Since each shelf has 3 fewer books than the one below it, we have an arithmetic sequence\n    # The number of books on each shelf from top to bottom can be represented as:\n    # x, x+3, x+6, x+9, x+12, x+15, x+18\n\n    # The sum of books on all shelves should be 280\n    # Therefore, we form the equation: x + (x + 3) + (x + 6) + (x + 9) + (x + 12) + (x + 15) + (x + 18) = 280\n\n    equation = Eq(x + (x + 3) + (x + 6) + (x + 9) + (x + 12) + (x + 15) + (x + 18), 280)\n\n    # Solve the equation to find the value of x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # By inclusion-exclusion principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = 0\n    for i in range(1, 311):\n        total_sum += sum_of_digits(i)\n\n    return total_sum\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import lcm\n\ndef solution():\n    sweep_cycle = 3\n    mope_cycle = 5\n    cook_cycle = 9\n    clean_cycle = 3 * 7 # 3 weeks\n\n    all_chores_cycle = lcm(sweep_cycle, mope_cycle, cook_cycle, clean_cycle)\n\n    return all_chores_cycle\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    cost_for_11_items = cost_per_item * 11\n    return cost_for_11_items\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from sympy import root, Rational\n\n    expression = 16.7 - root(((-4.56)**2 - (8.1)**3) / (7.2**3) / (-root(27/4, 2) - (-30.15)), 3)\n    ans = round(expression, 3)\n\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let's represent the number of years later as the variable y.\n    # Oliver's age y years later will be 20+y.\n    # Lin's age y years later will be 26+y.\n    # The sum of their ages at that point should be 48.\n    # Therefore, we can form the following equation: (20+y) + (26+y) = 48\n    # Simplifying the equation gives us: 46+2y = 48\n    # Solving for y gives us: 2y = 48-46\n    # And finally: y = (48-46)/2\n\n    y = (48 - 46) / 2\n    return int(y)\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # The ratio of Jayden to Carter's speed is 7:4\n    # Let's denote Jayden's speed as 7v and Carter's speed as 4v\n\n    # The total distance between place A and B is 440 m\n    # Thus the time it takes for them to meet the first time can be expressed as\n    # the time it takes for Jayden to cover (x * 7v) + Carter to cover (x * 4v) = 440\n    # Therefore, x * (7v + 4v) = 440 -> x * 11v = 440 -> x = 440 / 11v\n\n    # Since they meet at the same time, the distance Jayden covers is 7 parts and Carter covers 4 parts\n    # So the distance to the meeting place from A is (7 / (7 + 4)) * 440 = (7 / 11) * 440\n\n    distance_to_meeting_place = (7 / 11) * 440\n    return distance_to_meeting_place\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Mr. Lim's and Mrs. Lim's current ages.\n    mr_lim_age, mrs_lim_age = symbols('mr_lim_age mrs_lim_age')\n\n    # Create equations based on the problem statement.\n    equation1 = Eq(mr_lim_age - 7, (6/5) * (mrs_lim_age - 7))\n    equation2 = Eq(mr_lim_age + mrs_lim_age, 69)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (mr_lim_age, mrs_lim_age))\n\n    return solutions[mr_lim_age]\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter, john_initial, john_final = symbols('sam peter john_initial john_final')\n\n    equation1 = Eq(sam, peter * (7/5))\n    equation2 = Eq(sam - sam * 0.2 + peter - peter * 0.2, john_final)\n    equation3 = Eq(john_initial * 1.8, john_final)\n    equation4 = Eq(sam - sam * 0.2 - 20, john_final)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter, john_initial, john_final))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the total number of candies\n    # Let k be the number of kids\n    c, k = symbols('c k')\n\n    # If every kid eats 18 candies, 12 more candies are needed\n    equation1 = Eq(c, k * 18 + 12)\n\n    # If every kid eats 15 candies, the candies are just enough for k + 2 kids\n    equation2 = Eq(c, (k + 2) * 15)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (c, k))\n\n    # Returning the total number of candies\n    return solutions[c]\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    \n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # The sum of the scores of the 5 students\n    sum_of_5_scores = 5 * 87\n    \n    # The sum of the scores of all 6 students, including Jim's score\n    sum_of_6_scores = 6 * 88\n    \n    # Jim's score is the difference between the sum of the scores of all 6 students and the sum of the scores of the 5 students\n    jims_score = sum_of_6_scores - sum_of_5_scores\n    \n    return jims_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6  # cm\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    original_price = 4200\n    first_discount = original_price * 0.10\n    price_after_first_discount = original_price - first_discount\n    second_discount = price_after_first_discount * 0.20\n    final_price = price_after_first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of baseball bats purchased\n    x = symbols('x')\n    \n    # Cost price for each bat\n    cost_price_per_bat = 135\n    \n    # Selling price for each bat\n    selling_price_per_bat = 185\n\n    # Proceeds when 3 bats are left\n    # (x - 3) bats are sold\n    proceeds = (x - 3) * selling_price_per_bat\n    \n    # Total cost price for x bats\n    total_cost_price = x * cost_price_per_bat\n    \n    # Profit is $2945\n    profit = 2945\n\n    # Equation setup: proceeds = total_cost_price + profit\n    equation = Eq(proceeds, total_cost_price + profit)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the original amount of money Raja had, and 'k' for Kumar.\n    r, k = symbols('r k')\n    \n    # Raja spent $286, so he has r - 286 left.\n    # Kumar spent $109, so he has k - 109 left.\n    # After spending, Kumar had 4 times as much money as Raja.\n    equation1 = Eq(k - 109, 4 * (r - 286))\n    \n    # Originally, Raja and Kumar had the same amount of money.\n    equation2 = Eq(r, k)\n    \n    # Solving the two equations.\n    solutions = solve((equation1, equation2), (r, k))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    minibus_capacity = 6\n\n    number_of_minibusses = -(-boys // minibus_capacity)\n    \n    return number_of_minibusses\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair = symbols('chair')\n    table = chair + 160\n    total_cost = 328\n\n    equation = Eq(table + 5 * chair, total_cost)\n    chair_cost = solve(equation, chair)\n\n    return chair_cost[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    # Set up the equations based on provided relationships\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    # Find out how many triangles are equal to a diamond\n    triangles_in_diamond = solutions[diamond] / solutions[triangle]\n\n    return triangles_in_diamond\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    mean_diff = 240\n\n    # Let the mean of the last 6 numbers be x\n    # Then the mean of the first 4 numbers is x - 240\n    # The sum of the first 4 numbers is 4(x - 240)\n    # The sum of the last 6 numbers is 6x\n    # The total sum is the sum of the first 4 and last 6 numbers\n    \n    # We know that:\n    # 4(x - 240) + 6x = total_sum\n    # 4x - 960 + 6x = total_sum\n    # 10x - 960 = total_sum\n    # 10x = total_sum + 960\n    # x = (total_sum + 960) / 10\n    mean_last_6 = (total_sum + 960) / 10\n\n    return mean_last_6\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money_p = 60  # Pip's money in pence\n    bud_money_p = 110  # Bud's money converted to pence (£1.10 is equal to 110p)\n    \n    # Calculate the total in pence\n    total_p = pip_money_p + bud_money_p\n    \n    # Convert the total to pounds (£) and pence\n    # Since 100p is equal to £1\n    total_pounds = total_p // 100\n    total_pence = total_p % 100\n    \n    # Final answer in pounds and pence\n    ans = f\"£{total_pounds}.{total_pence:02d}\"\n    \n    return ans\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(0, 10):\n            if (I != P):\n                if (4 * ((10 * I) + P)) == (10 * P + I):\n                    return 10 * P + I\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Distance covered in each stage\n    distance_stage1 = 280\n    distance_stage2 = 400\n    # The remaining distance for the final stage can be calculated\n    total_distance = 800\n    distance_stage3 = total_distance - distance_stage1 - distance_stage2\n\n    # Speed in each stage (meters per second)\n    speed_stage1 = 7\n    speed_stage2 = 5\n    speed_stage3 = 8\n\n    # Time spent in each stage (time = distance / speed)\n    time_stage1 = distance_stage1 / speed_stage1\n    time_stage2 = distance_stage2 / speed_stage2\n    time_stage3 = distance_stage3 / speed_stage3\n\n    # Total time spent on the entire race\n    total_time = time_stage1 + time_stage2 + time_stage3\n\n    return total_time\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces of candy, they would have the same number of candy\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If Alice gives Rachel 10 pieces of candy, Rachel will have 4 more than 3 times that of candy Alice has\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Sum up the number of candies they had originally\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.88\n    years = 8\n\n    final_value = initial_value * (depreciation_rate ** years)\n    final_value_rounded = round(final_value, 1)\n\n    return final_value_rounded\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio_jocye_to_lori = 3 / 2  # Jocye's speed to Lori's speed ratio\n\n    jocye_speed = lori_speed * ratio_jocye_to_lori  # Calculate Jocye's speed\n    time = 10  # Time in seconds\n    distance_jocye_runs = jocye_speed * time  # Calculate distance Jocye can run in 10 seconds\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    # The probability of living over 25 years given it's already 20\n    probability_live_20 = 0.6\n    probability_live_25_given_20 = 0.3\n\n    # The calculation using conditional probability\n    probability_live_25 = probability_live_25_given_20 / probability_live_20\n\n    return probability_live_25\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    # Let the rate of the hot tap be x. Then, the rate of the cold tap is 2x.\n    # Using both taps simultaneously, the filling rate is x + 2x = 3x.\n    # If both taps fill the bath in 10 minutes, then 10 minutes of work is equal to one bath (1).\n    # Thus, 10 * 3x = 1 bath\n    # Find the rate x: 3x = 1/10\n    x = 1 / (10 * 3)\n    \n    # Only the cold tap's rate (2x) is considered for filling the bath.\n    # The time it takes to fill the bath with just the cold tap is the reciprocal of the rate.\n    time_cold_tap = 1 / (2 * x)\n    \n    return time_cold_tap\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # Distance between the house and the meeting point\n    don_distance = 360\n\n    # Distance between the library and the meeting point\n    danny_distance = 780 - don_distance\n\n    # Don's speed in metres per minute\n    don_speed = 60\n\n    # Time for Don to reach the meeting point\n    don_time = don_distance / don_speed\n\n    # Danny's speed in metres per minute\n    danny_speed = danny_distance / don_time\n\n    return danny_speed\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "from math import comb\n\ndef solution():\n    return comb(5, 2)\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    digits = 0\n    page = 0\n\n    while digits < total_digits:\n        page += 1\n        digits += len(str(page))\n\n    return page - 1\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    both_events = 21\n    only_rope_skipping = 40 - both_events\n    only_long_jump = 31 - both_events\n    only_one_event = only_rope_skipping + only_long_jump\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    flour_weight_kg = 1\n    flour_weight_g = 500\n    sugar_weight_kg = 1\n    sugar_weight_g = 200\n    butter_weight_g = 900\n    \n    # Convert everything to grams\n    total_weight_g = (flour_weight_kg * 1000 + flour_weight_g) \\\n                     + (sugar_weight_kg * 1000 + sugar_weight_g) \\\n                     + butter_weight_g\n    \n    # Divide the total weight by the number of cake tins\n    mixture_per_tin_g = total_weight_g / 8\n    \n    return mixture_per_tin_g\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(i/j for i in range(1, 11) for j in range(i, 11))\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    from itertools import permutations\n\n    # A and B can only stand on the far right or far left, which gives us 2 options for their positions:\n    # 1. A is first or last\n    # 2. B is first or last\n    # For each of these options, there are 2 choices, A or B first/last.\n    # After positioning A and B, C and D can be in either order.\n    # So the number of permutations for C and D is 2 (CD or DC).\n\n    # Total number of permutations:\n    # 2 (options for A and B positions) * 2 (A or B first/last) * 2 (permutations of C and D)\n    count = 2 * 2 * 2\n\n    return count\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    value = (20 * 27) / 30\n    return value\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    red = 10\n    blue = 5\n    green = 8\n\n    # If Janice takes out 3 red, 3 blue and 3 green, she may not have 4 of the same color.\n    # The next marble she takes out ensures she has 4 of one color regardless of which one it is.\n    return 3 * 3 + 1\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()\n\n    # create all combinations of two different digits\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != d2:\n                two_digit_numbers.add(d1 + d2)\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    smallest_even = float('inf')\n\n    for d1 in digits:\n        for d2 in [d for d in digits if d != d1]:\n            for d3 in [d for d in digits if d not in (d1, d2)]:\n                for d4 in [d for d in digits if d not in (d1, d2, d3)]:\n                    num = d1 * 1000 + d2 * 100 + d3 * 10 + d4\n                    if num % 2 == 0 and num < smallest_even:\n                        smallest_even = num\n\n    return smallest_even\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "from sympy import symbols, solve\n\ndef solution():\n    x = symbols('x')\n    eq1 = x % 7 - 5\n    eq2 = x % 13 - 11\n    solutions = solve((eq1, eq2))\n    \n    # Need to find the largest two-digit solution.\n    two_digit_solutions = [n for n in solutions if 9 < n < 100]\n    \n    return max(two_digit_solutions)\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days_taken_by_3_workers = 3\n    days_taken_by_1_worker = workers * days_taken_by_3_workers\n    return days_taken_by_1_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(6 * (10 * x + y) + 25, 20 * x + y)\n\n    solutions = solve((equation1), (x, y))\n\n    # Since John's solution assumes A is 45 without solving for x and y, let's check if that holds.\n    A = 10 * solutions[x] + solutions[y]\n\n    # if A is equal to 45, then John's solution is correct.\n    is_john_correct = A == 45\n\n    return A if not is_john_correct else 'John is correct'\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Original expression.\n    original = lambda: 285 + 15 / 5 - 2\n    \n    # Possible bracket combinations.\n    expressions = [\n        lambda: (285 + 15) / 5 - 2,\n        lambda: 285 + (15 / 5 - 2),\n        lambda: 285 + 15 / (5 - 2),\n        lambda: (285 + 15 / 5) - 2,\n        lambda: 285 + 15 / 5 - 2,\n        lambda: ((285 + 15) / 5) - 2,\n        lambda: 285 + (15 / (5 - 2)),\n    ]\n    \n    # Calculate results for each unique expression and store in set to avoid duplicates.\n    results = set(expr() for expr in expressions)\n    \n    # Number of different results.\n    return len(results)\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    pupils_per_row = total_pupils // rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    a, b = symbols('a b')\n    \n    # Define the equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n    \n    # Solve the system of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Return the value of b\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    lockers = [True] * 101 # True represents an unlocked state\n\n    # Locking lockers divisible by 3\n    for i in range(1, 101):\n        if i % 3 == 0:\n            lockers[i] = not lockers[i]\n\n    # Toggling lockers divisible by 5\n    for i in range(1, 101):\n        if i % 5 == 0:\n            lockers[i] = not lockers[i]\n\n    # Counting unlocked lockers\n    unlocked_count = sum(lockers[1:])  # exclude index 0 which is not a locker\n\n    return unlocked_count\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef count_valid_permutations(perm):\n    for i in range(len(perm) - 1):\n        if perm[i] == 'D' and perm[i + 1] == 'E':\n            return 0\n        if perm[i] == 'E' and perm[i + 1] == 'D':\n            return 0\n    return 1\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCFGE'):\n        for i in range(len(perm)):\n            if perm[i] == 'A':\n                left = perm[:i]\n                right = perm[i+1:]\n                if ('B' in left and 'C' in right) or ('B' in right and 'C' in left):\n                    count += count_valid_permutations(perm)\n                break\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_current_level = 4\n    yiding_current_level = 3\n\n    nicolas_target_level = 16\n    speed_ratio = nicolas_current_level / yiding_current_level\n\n    yiding_target_level = nicolas_target_level / speed_ratio\n\n    return int(yiding_target_level)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_per_cake = symbols('cost_per_cake')\n    lucy_money = symbols('lucy_money')\n\n    equation1 = Eq(lucy_money - (10 * cost_per_cake), -11)\n    equation2 = Eq(lucy_money - (13 * cost_per_cake), -26)\n\n    solutions = solve((equation1, equation2), (cost_per_cake, lucy_money))\n\n    return solutions[cost_per_cake]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    boys_average = 50\n    girls_average = 40\n    boys_count = 4\n    girls_count = 6\n\n    total_mass = boys_average * boys_count + girls_average * girls_count\n    total_children = boys_count + girls_count\n    \n    average_mass = total_mass / total_children\n\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = (divisor * quotient) + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    num1 = 4.6\n    num2 = 13.8\n    \n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    # Total number of matches\n    matches = 5\n    \n    # The mean score\n    mean_score = 40\n    \n    # Total score to maintain the mean\n    total_score = mean_score * matches\n    \n    # Sum of known scores\n    known_scores_sum = 37 + 53 + 29 + 41\n    \n    # Calculate x\n    x = total_score - known_scores_sum\n    \n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    ans = 4336 // 8\n    return ans\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')\n    occurrences = {letter: 'CHEESE'.count(letter) for letter in set('CHEESE')}\n    ans = factorial(total_letters)\n    for value in occurrences.values():\n        ans //= factorial(value)\n    return ans\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        if str(num).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of cows and goats\n    cows, goats = symbols('cows goats')\n    \n    # Equation 1: 65% of the total animals were cows\n    equation1 = Eq(cows, 0.65 * (cows + goats))\n    \n    # Equation 2: When 240 more animals are added, the percentage of cows becomes 85%\n    equation2 = Eq(cows + 240, 0.85 * (cows + goats + 240))\n    \n    # Equation 3: The number of goats become doubled after adding 240 animals\n    equation3 = Eq(goats * 2, goats + 240)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cows, goats))\n    \n    return solutions[goats]\n    \nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for num in range(100000, 1000000):\n        if str(num)[5] == '9':\n            new_num = int('9' + str(num)[:-1])\n            if new_num == 4 * num:\n                return num\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The smallest possible divisor is 1, as stated in the question\n    divisor = 1\n\n    dividend = (divisor * quotient) + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define variables for Abigail's and Jonathan's current age\n    abigail, jonathan = symbols('abigail jonathan')\n    \n    # Now let's form our equations based on the problem statement\n    equation1 = Eq(abigail, jonathan + 6)                # Abigail is 6 years older than Jonathan\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))      # Six years ago, she was twice as old as he was\n    \n    # Solving the equations for Abigail and Jonathan's age\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n    \n    # Return Jonathan's age from the solutions\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Alice's work rate is 1/40 job per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate is 1/60 job per day\n    bob_work_rate = 1 / 60\n\n    # Let x be the number of days Alice takes off\n    # The total amount of work done is 1 (whole job)\n    # Total work = (Alice's work rate * days she worked) + (Bob's work rate * total days)\n    # Since Alice takes x days off, she worked for (27 - x) days\n    # 1 = (1/40 * (27 - x)) + (1/60 * 27)\n\n    # Solve for x\n    x = ((1 - (bob_work_rate * 27)) / alice_work_rate) + 27\n\n    return int(x)\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a - b\n\n    ans = custom_operation(4, 3) - custom_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A != 0 and C != 0 and (A * 101 + C * 101 + B + D) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n    equation1 = Eq(3 * a + 2 * b, 1.25)\n    equation2 = Eq(a + b, 0.48)\n    \n    solutions = solve((equation1, equation2), (a, b))\n    \n    cost_for_5_bananas = 5 * solutions[b]\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days, total_pages = symbols('days total_pages')\n\n    equation1 = Eq(30 * (days + 2), total_pages)\n    equation2 = Eq(39 * (days - 4), total_pages)\n\n    solutions = solve((equation1, equation2), (days, total_pages))\n\n    return solutions[days], solutions[total_pages]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    pattern = [2, 0, 2, 0, 0, 2, 0, 2]\n    total_digits = 535\n    pattern_length = len(pattern)\n    \n    full_patterns = total_digits // pattern_length\n    remaining_digits = total_digits % pattern_length\n    \n    count_2_in_full_pattern = pattern.count(2) * full_patterns\n    count_2_in_remaining = pattern[:remaining_digits].count(2)\n    \n    total_count_2 = count_2_in_full_pattern + count_2_in_remaining\n    \n    return total_count_2\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def delta(a, b):\n        # Analyzing the pattern from given examples\n        # 4Δ1 = 4^2 + 4*1 - 1 = 17\n        # 5Δ4 = 5^2 + 5*4 - 4 = 29\n        # 8Δ16 = 8^2 + 8*16 - 16 = 80\n        # With the given examples, we infer the operation aΔb equals a^2 + a*b - b\n        return a**2 + a*b - b\n    \n    ans = delta(10, 9)\n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    cookies_baked_morning = 85\n    cookies_baked_afternoon = 135\n    cookies_given_away = 55\n\n    cookies_left = (cookies_baked_morning + cookies_baked_afternoon) - cookies_given_away\n\n    return cookies_left\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    ans = 3102 // 6\n    return ans\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adult, child = symbols('adult child')\n    eq1 = Eq(5 * adult + 3 * child, 75)\n    eq2 = Eq(adult + child, 19)\n\n    solutions = solve((eq1, eq2), (adult, child))\n\n    return solutions[adult]\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    return solutions[shirt] - solutions[dress]\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # let x be the total number of coins Owen had originally\n    # 2/7 of these are fifty-cent coins, so 5/7 are one-dollar coins\n    # after receiving the coins from his mother, he had x + 15 one-dollar coins (10 one-dollar coins + 5 dollars in fifty-cent coins)\n    # and he had 2/7 * x + 10 fifty-cent coins\n    # in the end he had twice as many one-dollar coins as fifty-cent coins\n    # so (5/7 * x + 15) = 2 * (2/7 * x + 10)\n    # solving for x gives us the original number of coins\n    \n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = (5/7 * x + 15) - 2 * (2/7 * x + 10)\n    \n    # We solve the equation\n    original_coins = solve(equation, x)\n    \n    return original_coins[0]\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the number of marbles each person has after the transfers\n    a, b, c = symbols('a b c')\n\n    # Equations based on the problem statement\n    equation1 = Eq(a + b + c, 168)\n    equation2 = Eq(a, 2/14 * (a + b + c))\n    equation3 = Eq(b, 5/14 * (a + b + c))\n    equation4 = Eq(c, 7/14 * (a + b + c))\n\n    # Equations based on the marbles being transferred\n    equation5 = Eq(b - 15 + 8, b - 7)  # Betsy after giving to Anna and receiving from Charlene\n    equation6 = Eq(a + 8, a)           # Anna after receiving from Betsy\n    equation7 = Eq(c - 15, c)          # Charlene after giving to Betsy\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), (a, b, c))\n\n    # Betsy had b marbles at first before giving any marbles\n    betsy_initial = solutions[b] + 7\n\n    return betsy_initial\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_savings = 7\n    brenda_daily_savings = 6\n    andy_total_savings = 378\n\n    days_passed = andy_total_savings // andy_daily_savings\n    brenda_total_savings = brenda_daily_savings * days_passed\n\n    return brenda_total_savings\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        score = correct * 6 - incorrect * 2\n        if score == 44:\n            return correct\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "from math import factorial\n\ndef solution():\n    num_contestants = 8\n    return factorial(num_contestants) // factorial(num_contestants - 3)\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    original_length_ratio = 1\n    new_length_ratio = 1.10  # increased by 10%\n    original_breadth_ratio = 1\n    new_breadth_ratio = 4 / 5  # reduced to 4/5\n    original_height_ratio = 10\n    new_height_ratio = 11  # new height to old height is 11:10\n\n    original_volume = original_length_ratio * original_breadth_ratio * original_height_ratio\n    new_volume = new_length_ratio * new_breadth_ratio * new_height_ratio\n\n    volume_percentage = (new_volume / original_volume) * 100\n\n    return volume_percentage\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    return comb(10, 3)\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sums = 30 + 40 + 50 + 30 + 40 + 50 + 30 + 40 + 50\n    return sums\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_masks = 360\n    completed_percentage = 60 / 100\n    \n    total_masks = remaining_masks / (1 - completed_percentage)\n    \n    return int(total_masks)\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # Since everyone should solve at least one question and no one can solve\n    # the same number of questions, we first distribute one question to each student.\n    # This leaves us with 40 - 5 = 35 questions to distribute.\n    \n    # The remaining questions can be distributed such that the numbers of questions\n    # solved are distinct and maximized for Noa. Let's assign the remaining questions\n    # to the other 4 classmates first, starting with the smallest number possible (1)\n    # and increasing by one for each additional student.\n    remaining_questions = 35\n    other_students = [1, 2, 3, 4]  # The additional questions solved by the 4 other students\n    \n    # Assign the remaining questions to Noa.\n    noa_questions = remaining_questions - sum(other_students)\n\n    return noa_questions + 1  # Including the initial question given to Noa\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scan, ted = symbols('scan ted')\n\n    # Current age ratio\n    equation1 = Eq(scan, ted/4)\n    \n    # Age ratio after 4 years\n    equation2 = Eq(scan + 4, (ted + 4)/3)\n    \n    # Solve the system of equations for scan and ted\n    ages_current = solve((equation1, equation2), (scan, ted))\n\n    scan_age = ages_current[scan]\n    ted_age = ages_current[ted]\n\n    # Find the number of years ago when the ratio of their ages was 1:9\n    # Let 'years_ago' be the number of years ago we are looking for\n    \n    years_ago = symbols('years_ago')\n    \n    # Setting up the equation for the age ratio years ago\n    equation3 = Eq(scan - years_ago, (ted - years_ago)/9)\n    \n    # Solving for years_ago\n    years_ago_solution = solve(equation3.subs({scan: scan_age, ted: ted_age}), years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number_to_round = 278\n    rounded_number = round(number_to_round, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    total_mushrooms = 40\n    difference = 26\n    \n    # Let's denote the amount of mushrooms gathered in the first hour as x.\n    # Then in the second hour, the amount of mushrooms gathered would be x + 26.\n    # According to the problem, in the first hour, x + 26 more mushrooms could\n    # be gathered to make the amounts equal.\n    # So if x + 26 more were gathered in the first hour, the amount in the first hour\n    # would be x + (x + 26), which should be equal to total.\n    # We end up with the equation: 2 * x + 26 = 40.\n    \n    # Solving the equation for x gives us the amount gathered in the first hour.\n    # Then to find out the amount gathered in the second hour, we simply need to add the difference.\n    \n    x = (total_mushrooms - difference) / 2\n    second_hour = x + difference  # Amount gathered in the second hour\n    \n    return second_hour\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    ans = 52.8 * 7\n    return ans\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging from 6:30 AM to 7:30 AM is 1 hour\n    jogging_time = 1 \n    jogging_speed = 6.5 # in miles per hour\n    \n    # Time spent walking from 7:30 AM to 9:30 AM is 2 hours\n    walking_time = 2 \n    walking_speed = 4.5 # in miles per hour\n\n    # Distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n    # Distance covered while walking\n    walking_distance = walking_speed * walking_time\n\n    # Total distance covered is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    nearest_thousand = round(number, -3)\n    return nearest_thousand\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's assume that f is the number of foldable bicycles and n is the number of non-foldable bicycles\n    f, n = symbols('f n')\n\n    # equations based on the problem statement\n    # total bicycles initially\n    equation1 = Eq(f + n, 476)\n    # after selling, the fraction that represents the foldable bicycles left\n    equation2 = Eq(f * 4/7, f - (208 - n))\n    # after selling, the fraction that represents the non-foldable bicycles left\n    equation3 = Eq(n * 5/9, n - (208 - f))\n\n    # solving the equations to find the values of f and n\n    solutions = solve((equation1, equation2, equation3), (f, n))\n\n    # the number of foldable bicycles sold is the total foldable bicycles minus the foldable bicycles left\n    foldable_sold = solutions[f] - solutions[f] * 4/7\n\n    return int(foldable_sold)\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    climb_per_day = 10\n    day = 0\n    current_height = 0\n    \n    while current_height < height:\n        day += 1\n        current_height += climb_per_day\n        if current_height >= height:\n            break\n        current_height -= day\n    \n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Let g be the number of guppies.\n    # According to the question, the number of goldfish is 2 * g.\n    # The number of mollies is 2 times the number of goldfish, which is 2 * (2 * g) = 4 * g.\n    # It is given that the number of mollies is 276.\n    # Hence, we have 4 * g = 276.\n    # Solving for g, we get g = 276 / 4.\n\n    g = 276 / 4  # the number of guppies\n\n    # The difference between the mollies and guppies is the number of mollies (276) minus the number of guppies (g).\n    difference = 276 - g\n\n    return int(difference)  # Since we are dealing with the count of animals, the answer should be an integer.\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3\n    real_tree_height = 12  # in meters\n    model_tree_height = real_tree_height * scale_ratio / 100  # converting meters to cm\n    \n    return model_tree_height\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    students = 20\n    min_candies_for_3 = 3\n\n    # Apply the Pigeonhole Principle\n    min_candies = students * (min_candies_for_3 - 1) + 1\n\n    return min_candies\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    n = 20\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return sum(factors)\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_mark = 8\n    wrong_mark = -4\n    total_score = 100\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + wrong_answers * wrong_mark\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000  # grams\n    used_fraction = 5/8\n    original_flour = remaining_flour / (1 - used_fraction)\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Since there are 10 red and 10 black socks,\n    # Yohan can take out all the red and black socks without getting a pair of white socks.\n    # So that's 10 red + 10 black = 20 socks\n    # Then he needs to take just two white socks to guarantee a pair of white socks.\n    max_socks = 20 + 2\n\n    return max_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    result = 0.60 * 765\n    return result\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n    road_length = 50\n\n    # The number of gaps between lamp posts is total_flowers divided by flowers_between_lamps\n    num_gaps = total_flowers // flowers_between_lamps\n\n    # The distance between every 2 lamp posts is the road length divided by the number of gaps\n    distance_between_lamps = road_length / (num_gaps + 1)\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    ans = 1741 - 968\n    return ans\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    # The position of the favorite book from the left\n    position_from_left = 6 + 1  # Adding 1 because we're counting the favorite book itself\n\n    # The position of the favorite book from the right\n    position_from_right = 14\n\n    # Total number of books on the shelf\n    # We sum positions from the left and right, then subtract 1 to not count the favorite book twice\n    total_books = position_from_left + position_from_right - 1\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    decrease = 17\n\n    final_temp = initial_temp - decrease\n\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 * (5/4)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1 / 4\n    nth_term = first_number * (ratio ** (5 - 1))\n    return nth_term\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return result\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    sweets_left = total_sweets - sweets_for_sister\n    number_of_friends = 6\n\n    sweets_per_friend = sweets_left // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Since we need to distribute apples such that no two children get the same number\n    # of apples and each child gets at least one apple, we can start by giving the\n    # first four children the minimum amount, which is one apple each and then give\n    # the remaining apples to the fifth child.\n\n    # Give one apple each to the first four children\n    apples_distributed = 4 * 1\n    # Give remaining apples to the fifth child\n    remaining_apples = 19 - apples_distributed\n    \n    return remaining_apples\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12  # length of the side of the square lawn\n    distancing_from_edge = 1.5  # distance from each edge\n    spacing_between_bushes = 3  # distance between rosebushes\n\n    # Calculate the effective length that can be used to plant the bushes\n    effective_length = side_length - 2 * distancing_from_edge\n\n    # Calculate how many bushes can be planted on one side\n    bushes_per_side = int(effective_length // spacing_between_bushes)\n\n    # Total bushes is the sum of bushes on all four sides\n    total_bushes = 4 * bushes_per_side\n\n    return total_bushes\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # Calculate the work done by P in one day\n    P_work_per_day = 1 / 12\n    # Calculate the work done by Q in one day\n    Q_work_per_day = 1 / 8\n\n    # Adjust Q's work per day to an 8-hour working day (from a 10-hour working day)\n    Q_work_per_day = Q_work_per_day * (8 / 10)\n\n    # Combined work by P and Q in one day\n    combined_work_per_day = P_work_per_day + Q_work_per_day\n\n    # Total days to complete the job if P and Q work together\n    total_days = 1 / combined_work_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132  # km per hour\n    speed_other_van = 78   # km per hour\n    time = 8  # hours\n    # Calculate the distance each van travels\n    distance_fast_van = speed_fast_van * time\n    distance_other_van = speed_other_van * time\n    # Total distance apart after 8 hours\n    total_distance_apart = distance_fast_van + distance_other_van\n    return total_distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 * (100 / remaining_work_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    result = (2 - 1.8) / (1/2) * (5/2)\n    return result\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    original_score = solve(equation, score)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    from sympy import divisors\n\n    all_divisors = divisors(78)  # This will include 1 and 78\n    even_divisors = [d for d in all_divisors if d % 2 == 0 and d != 78]\n\n    return len(even_divisors)\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # 9 rabbits = 3 goats\n    rabbits_per_goat = 9 / 3\n    # 2 goats = 4 cows\n    goats_per_cow = 2 / 4\n    # Find how many rabbits for 1 cow: rabbits/goat * goats/cow\n    rabbits_per_cow = rabbits_per_goat / goats_per_cow\n    # Find how many rabbits for 2 cows\n    ans = rabbits_per_cow * 2\n    return int(ans)\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unanswered_questions = 3\n    total_score = 168\n    marks_per_correct = 4\n    marks_per_wrong = 1\n\n    # Number of questions answered\n    questions_answered = total_questions - unanswered_questions\n\n    # Using the method of hypothesis\n    # Let's assume all answered questions were correct\n    # Then subtract the excess score due to incorrect answers\n    # incorrect answers count as -5 because it includes 4 marks not gained + 1 mark lost\n\n    # All correct hypothesis gives us the score:\n    all_correct_score = questions_answered * marks_per_correct\n\n    # Any wrong answer would decrease the hypothetical score by 5 points:\n    # 4 points not gained + 1 point lost for being incorrect\n    wrong_answer_penalty = marks_per_correct + marks_per_wrong\n\n    # Number of incorrect answers calculated by the difference between hypothetical all correct score and actual score\n    wrong_answers = (all_correct_score - total_score) // wrong_answer_penalty\n\n    # Correct answers are total answered questions minus incorrect ones\n    correct_answers = questions_answered - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # We will declare two unknowns, p for pencils and pe for pens.\n    # Given ratio before change: p/pe = 4/5\n    # After the change, one pen is taken out and one pencil is added\n    # New ratio: (p+1)/(pe-1) = 7/8\n    # We need to solve the two equations for p and pe.\n\n    from sympy import symbols, Eq, solve\n\n    p, pe = symbols('p pe')\n\n    # Equation representing the original ratio\n    equation1 = Eq(p / pe, 4 / 5)\n\n    # Equation representing the new ratio after the change\n    equation2 = Eq((p + 1) / (pe - 1), 7 / 8)\n\n    # Solve the system of equations to find the values of p and pe\n    solutions = solve((equation1, equation2), (p, pe))\n\n    # Calculate the total number of pencils and pens by adding solutions of p and pe\n    total = solutions[p] + solutions[pe]\n\n    return total\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    number_of_terms = 10\n\n    # Using formula for the sum of an arithmetic series: n/2 * (2a + (n-1)d)\n    total_seats = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def hash_operation(a, b):\n        return a * b - 5 * a + 8\n\n    result = hash_operation(10, 9)\n    result = hash_operation(result, 8)\n    result = hash_operation(result, 7)\n    result = hash_operation(result, 6)\n    result = hash_operation(result, 5)\n    ans = hash_operation(result, 4)\n\n    return ans\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    original_profit, discount = symbols('original_profit discount')\n\n    # Equation representing the initial planned profit\n    equation1 = Eq(original_profit, 1.6)\n\n    # Equation representing the profit after first day sales\n    equation2 = Eq(0.7 * original_profit * 1.6, 0.7 * 1.6)\n\n    # Equation representing the total final profit, which is 80% of the planned profit\n    equation3 = Eq(0.7 * 1.6 + 0.3 * (1 - discount), 0.8 * original_profit)\n\n    # Solve for the discount rate\n    solutions = solve((equation1, equation2, equation3), (original_profit, discount))\n\n    return solutions[discount].evalf()\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    boys_percentage = 0.40\n    girls_count = 72\n\n    total_children = girls_count / (1 - boys_percentage)\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    current_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n    return current_strawberries\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n\n    for tens in digits:\n        for units in digits:\n            if tens != units: # Ensure the two numbers are different.\n                number = tens * 10 + units\n                if number % 2 == 1: # Check if the number is odd.\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # The pages of a newspaper come in pairs front and back\n    # The last page number before missing pages is an even number (14)\n    # The first page number after missing pages is an odd number (35)\n    # Thus, the supplied numbers are the back of one sheet and the front of another\n    # So we need to find the difference between 35 and 15, divide by 2 and add 1\n    # for the first missing sheet.\n    \n    last_page_before = 14\n    first_page_after = 35\n    \n    # Calculate the total number of missing page numbers\n    missing_page_numbers = first_page_after - (last_page_before + 1)\n    \n    # Since two page numbers make up one sheet, divide by 2 and add 1\n    missing_sheets = (missing_page_numbers // 2) + 1\n    \n    return missing_sheets\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the price of a tuna puff and x-0.20 as the price of a curry puff\n    x = symbols('x')\n    \n    # Equation representing the total cost\n    equation = Eq(12 * x + 19 * (x - 0.20), 39.60)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    # The price of a tuna puff will be the solution for x\n    return float(solution[0])\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    return 4 * 8 + 4 * 17\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n\n    # Assume all children are boys and calculate the leftover balloons\n    total_balloons_if_all_boys = total_children * 2\n    leftover_balloons = total_balloons - total_balloons_if_all_boys\n\n    # Each girl gets 2 more balloons than a boy, calculate number of girls\n    extra_balloons_per_girl = 4 - 2\n    number_of_girls = leftover_balloons // extra_balloons_per_girl\n\n    # Subtract the number of girls from the total number of children to get the number of boys\n    number_of_boys = total_children - number_of_girls\n\n    return number_of_boys\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    count = end - start + 1\n    return count\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_meters_per_minute = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n    distance = speed_meters_per_minute * time_minutes\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals = symbols('total_animals')\n    cows_initial = 0.65 * total_animals\n    goats_initial = total_animals - cows_initial\n\n    # After adding 240 more animals\n    cows_after = 0.85 * (total_animals + 240)  # increased by 20%\n    goats_after = 2 * goats_initial\n\n    # The number of cows and goats has to sum up to total animals + 240\n    equation = Eq(cows_initial + goats_initial + 240, cows_after + goats_after)\n\n    solutions = solve(equation, total_animals)\n\n    # Calculating the initial number of goats\n    goats_initial_value = solutions[0] * (1 - 0.65)\n\n    return int(goats_initial_value)\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(1, 1)\n    for i in range(3, 20, 2):\n        result *= Fraction(1, 1) + Fraction(2, i)\n\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_length_cm = 85\n    roll_length_m = 20\n    strings_needed = 400\n    \n    roll_length_cm = roll_length_m * 100  # Convert meters to centimeters\n    total_length_cm = strings_needed * string_length_cm\n    \n    rolls_needed = total_length_cm / roll_length_cm\n    rolls_needed = -(-rolls_needed // 1)  # Ceiling division to get the next whole number\n    \n    return int(rolls_needed)\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    john_age, emma_age = symbols('john_age emma_age')\n\n    # John is 7 years older than Emma\n    equation1 = Eq(john_age, emma_age + 7)\n\n    # In 3 years, the sum of their ages will be 27\n    equation2 = Eq((john_age + 3) + (emma_age + 3), 27)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_age, emma_age))\n\n    # The value for Emma's current age is what we want to return\n    return solutions[emma_age]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for salary and money spent on charity\n    salary = symbols('salary')\n    \n    # Money donated to charity is 1/4 of salary\n    charity = salary / 4\n    \n    # Money spent on food is 5/6 of the remainder after donating to charity\n    food = 5/6 * (salary - charity)\n    \n    # He spends £78 more on food than on charity\n    equation = Eq(food, charity + 78)\n    \n    # Solve for salary\n    solutions = solve(equation, salary)\n    \n    # Return the salary\n    return solutions[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)\n    last_digit_3 = pow(3, 2017, 10)\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # Given values\n    term_7 = 57\n    term_15 = 89\n    \n    # Calculate the difference between the terms\n    term_diff = term_15 - term_7\n    \n    # Determine the difference between the term numbers\n    positions_diff = 15 - 7\n    \n    # Calculate the common difference of the arithmetic sequence\n    common_diff = term_diff / positions_diff\n    \n    return common_diff\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # t is the time David walks at the increased speed\n    t = symbols('t')\n    \n    # Distance covered during the first 10 minutes at the initial speed\n    distance_initial = 150 * 10\n    \n    # Distance covered after increasing the speed by 50 m/min\n    distance_after_increase = (150 + 50) * t\n    \n    # Total distance is the sum of the initial distance and the distance after speed increase\n    total_distance = Eq(distance_initial + distance_after_increase, 3700)\n    \n    # Solve for the time at the increased speed\n    t_solution = solve(total_distance, t)\n\n    # Total time spent walking is the initial 10 minutes plus the time at increased speed\n    total_time = 10 + t_solution[0]\n\n    return total_time\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    sweets_left = 150\n    sweets_per_week = 45 - 60  # 45 new sweets - 60 sweets eaten\n\n    weeks_needed = (sweets_left - initial_sweets) / sweets_per_week\n\n    return abs(int(weeks_needed))\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # congruences are (remainder, modulo)\n    congruences = [\n        (1, 2),\n        (2, 3),\n        (4, 5),\n        (6, 7)\n    ]\n\n    ans, _ = solve_congruence(*congruences)\n    \n    # Since we're looking for a solution that is less than 400,\n    # we need to get it within the correct range.\n    while ans > 400:\n        ans -= 2 * 3 * 5 * 7\n\n    return ans\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if A != B and B != C and A != C and A != 4 and A != 7 and A != 1 and A != 9 \\\n                   and B != 4 and B != 7 and B != 1 and B != 9 and C != 4 and C != 7 and C != 1 and C != 9:\n                    number = 4700000 + A * 1000 + B * 10 + C * 1000000 + 190\n                    if number % 9 == 0:\n                        return A + B + C, number\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    digits = 3  # Number of digits in the number\n    options_per_digit = 3  # Number of options for each digit (5, 6, 7)\n    \n    # Each of the three positions can be filled with any of the three digits, so the\n    # number of different three-digit numbers is 3 * 3 * 3.\n    total_numbers = options_per_digit ** digits\n    \n    return total_numbers\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 0\n    while True:\n        sweets += 1\n        if sweets % 3 == 2 and sweets % 4 == 2 and sweets % 5 == 2 and sweets % 6 == 2:\n            if sweets > 6:  # Check if each child gets at least 1 sweet\n                break\n    return sweets\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the symbols\n    apple, orange = symbols('apple orange')\n    \n    # Jessie buys 2 apples and 1 orange for 40p\n    eq1 = Eq(2 * apple + orange, 40)\n    \n    # Bella buys 1 apple and 2 oranges for 35p\n    eq2 = Eq(apple + 2 * orange, 35)\n    \n    # solve the equations for apple and orange price\n    prices = solve((eq1, eq2), (apple, orange))\n    \n    # calculate the cost for Carrie who buys 1 apple and 1 orange\n    carrie_cost = prices[apple] + prices[orange]\n    \n    return carrie_cost\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    rackets_price = 49 * 2\n    remaining_money = 140 - rackets_price\n    price_per_ball = 1.5\n    num_balls = remaining_money // price_per_ball\n    return int(num_balls)\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz = 87\n    jed = 137\n\n    week = 0\n    while heinz != jed:\n        heinz += 4\n        jed -= 6\n        week += 1\n    return week\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 points, so there are C(12, 3) ways to choose 3 points to form a triangle.\n    from math import comb\n    total_triangles = comb(12, 3)\n    \n    # For a triangle to be right-angled, the hypotenuse has to be the diameter of the circle.\n    # Since the points are evenly distributed, there are only 12/2 = 6 diameters possible.\n    # Each diameter has exactly 1 right-angled triangle associated with it, with the right angle at any of the points.\n    \n    # For each diameter, there are 12 - 2 = 10 points remaining to form the right angle.\n    # So with each diameter, we can form 10 right-angled triangles.\n    \n    right_angled_triangles = 6 * 10\n    \n    # The answer is the number of right-angled triangles\n    return right_angled_triangles\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # In the worst case, to guarantee 3 different coloured balls, \n    # we would pick all balls of two colours before picking a ball of the third colour.\n    # Since there are 4 balls of each colour, we would pick 4 purple and 4 white balls first,\n    # and then we would need to pick just 1 more to ensure a red ball.\n    # So in total, we need to pick 4 (purple) + 4 (white) + 1 (for a red ball) = 9 balls.\n\n    return 4 + 4 + 1\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_donuts = 1 * 6 * 6\n    eaten_donuts = 3\n    remaining_donuts = total_donuts - eaten_donuts\n    return remaining_donuts\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n\n    return int(remaining_durians)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the weights of one box of apples and one box of oranges\n    apples, oranges = symbols('apples oranges')\n\n    # Set up equations based on the given information\n    equation1 = Eq(3*apples + 5*oranges, 270)\n    equation2 = Eq(3*apples + 7*oranges, 342)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solutions = solve(equation, c)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # If the tiger is the 11th animal from either end of the line\n    # this implies there are 10 animals in front of him and 10 animals behind him\n    animals_in_front = 10\n    animals_behind = 10\n\n    # We add the tiger himself to the total number of animals\n    total_animals = animals_in_front + 1 + animals_behind\n\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    result = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return result\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # First digit must be from 1 to 9 for a three-digit number\n        for j in range(10):  # Second digit can be from 0 to 9\n            for k in range(10):  # Third digit can be from 0 to 9\n                if i + j + k == 4:  # The sum of the digits should be 4\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 50 / 100  # Convert 50 cents to dollars\n    mamee_cost = haribo_cost - 0.30  # 30 cents less than Haribo in dollars\n    jelly_cost = 6 * mamee_cost  # Big packet of jelly costs 6 times a Mamee\n    \n    return jelly_cost\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Nancy initially divides 24 roses into 3 vases, which means each vase has 8 roses.\n    roses_per_vase_initially = 24 // 3\n\n    # Let's assume her mother brings x roses, and Nancy divides them into another four vases.\n    # Since each of these four vases has the same amount of roses as the initial 3 vases, each has 8 roses.\n    # Hence, x roses divided by 4 must equal 8 roses per vase.\n    roses_per_vase_after = roses_per_vase_initially\n\n    # Calculate total number of roses mother brings, which should be a multiple of 4.\n    mother_roses = roses_per_vase_after * 4\n\n    # Calculate the total amount of roses.\n    total_roses = 24 + mother_roses\n\n    return total_roses\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    return number\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = ((2, 3), (3, 4), (4, 5))\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n\n    if mint_candies > 0:\n        total_candies_will_can_eat = lemon_candies + cherry_candies\n    else:\n        total_candies_will_can_eat = lemon_candies + cherry_candies + mint_candies\n\n    return total_candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    halfway_number = (-18 + -2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            if B != A:\n                for C in range(0, 10):\n                    if C != A and C != B:\n                        for D in range(0, 10):\n                            if D != A and D != B and D != C:\n                                AB = A * 10 + B\n                                BC = B * 10 + C\n                                CD = C * 10 + D \n                                ABC = A * 100 + B * 10 + C\n                                BCD = B * 100 + C * 10 + D\n                                if (AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and \n                                    ABC % 9 == 0 and BCD % 11 == 0):\n                                    return A * 1000 + B * 100 + C * 10 + D\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    price_strawberry = 3\n    price_marble = price_strawberry + 2\n    price_cheese = 3 * price_marble\n    price_2_cheese = 2 * price_cheese\n    return price_2_cheese\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n\n    while ans < 80:\n        return ans\n        ans += 2 * 3 * 4 * 5\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    num_games = num_teachers - 1  # In a single elimination tournament, the number of games is one less than the number of players\n\n    return num_games\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for the ages of the sons and daughters\n    son1, son2, daughter1, daughter2 = symbols('son1 son2 daughter1 daughter2', integer=True)\n\n    # Set up the equations based on the problem statements\n    equation1 = Eq(son1 + son2 + daughter1 + daughter2, 55)\n    equation2 = Eq(son1 - son2, 3)\n    equation3 = Eq(daughter1 - daughter2, 2)\n    equation4 = Eq(son2, 2 * daughter1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (son1, son2, daughter1, daughter2))\n\n    # Find the youngest child's age\n    youngest_child_age = min(solutions[son1], solutions[son2], solutions[daughter1], solutions[daughter2])\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq(3 * number + 6, number + 16)\n    \n    solution = solve(equation, number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    return (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    decimal_recurring = \"428571\"\n    length_of_pattern = len(decimal_recurring)\n    total_digits_needed = 58\n\n    full_repeats = total_digits_needed // length_of_pattern\n    partial_repeats = total_digits_needed % length_of_pattern\n\n    sum_full_repeats = sum(map(int, decimal_recurring)) * full_repeats\n    sum_partial_repeats = sum(map(int, decimal_recurring[:partial_repeats]))\n\n    ans = sum_full_repeats + sum_partial_repeats\n\n    return ans\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n    total_distance = eddie + jenny + jason\n    average_distance = total_distance / 3\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    # The total number of books is 3 (biographies) + 4 (science fictions) + 2 (magazines) + 2 (practice books) = 11\n    total_books = 3 + 4 + 2 + 2\n    \n    # Now we have to divide by the factorial of the number of same books to account for indistinguishable arrangements.\n    biographies_factorial = factorial(3)\n    science_fictions_factorial = factorial(4)\n    magazines_factorial = factorial(2)\n    practice_books_factorial = factorial(2)\n    \n    # The number of different ways Joe can arrange his books\n    ways = factorial(total_books) // (biographies_factorial * science_fictions_factorial * magazines_factorial * practice_books_factorial)\n    \n    return ways\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177  # Audrey's water in liters\n    jane_water = audrey_water + 32  # Jane's water in liters\n\n    total_water = audrey_water + jane_water  # Total water in liters\n    return total_water\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string = 13\n    nicks_string = toms_string + 25\n    difference = nicks_string - toms_string\n    return difference\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    chicken_tenders_students = 18\n    total_students = 50\n    \n    percentage = (chicken_tenders_students / total_students) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert the length from meters to centimeters\n    space_between_cauliflowers_cm = 40\n    first_cauliflower_offset_cm = 20\n\n    # Available length for planting is the total length minus the offset at the start\n    available_length_cm = plot_length_cm - first_cauliflower_offset_cm\n\n    # Divide the available length by the spacing to find out how many cauliflowers can be planted\n    number_of_cauliflowers = available_length_cm // space_between_cauliflowers_cm\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution to exchange\n    x = symbols('x')\n\n    # Equation for the final concentration in bottle A after exchange:\n    # (50 * 0.11 - x * 0.11 + x * 0.47) / 50 = final concentration\n    # Equation for the final concentration in bottle B after exchange:\n    # (50 * 0.47 - x * 0.47 + x * 0.11) / 50 = final concentration\n    # Setting the two final concentrations equal:\n    equation = Eq((50 * 0.11 - x * 0.11 + x * 0.47) / 50, (50 * 0.47 - x * 0.47 + x * 0.11) / 50)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    digits = [1, 3, 6]\n    count = 0\n    for x in digits:\n        for y in digits:\n            for z in digits:\n                if x != y and y != z and x != z:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    box_value = (75 - 3) / 8\n    return box_value\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    # Generate all the combinations of 4 numbers that sum up to 15\n    valid_combinations = [combo for combo in combinations(range(1, 15), 4) if sum(combo) == 15]\n\n    # Return the number of valid combinations\n    return len(valid_combinations)\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes_within_50 = []\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            primes_within_50.append(num)\n    return len(primes_within_50), primes_within_50\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30 / 100\n    base_value = 250\n\n    ans = percentage * base_value\n\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_length_m = 3.7 + 64 / 100  # Convert 64 cm to meters and add to 3.7 meters\n    length_to_subtract_m = 2 + 7 / 100  # Convert 7 cm to meters and add to 2 meters\n    ans = total_length_m - length_to_subtract_m  # Subtract the length to get the final answer\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    fibonacci_sequence = [1, 2, 3, 5, 8, 13, 21]\n    next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2]\n    return next_number\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n    \n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n    \n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruits = 48\n    fraction_apples = 5 / 8\n    apples = total_fruits * fraction_apples\n    pears = total_fruits - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This sequence is a geometric progression where each term is 2 times the previous term, starting from 1.\n    # The n-th term of a geometric sequence can be found by a * r^(n - 1) where\n    # a is the first term and r is the common ratio.\n    # In this case, a = 1 (the first term) and r = 2 (common ratio).\n    # Thus, the 20th term is 1 * 2^(20 - 1) = 2^19 and the 17th term is 1 * 2^(17 - 1) = 2^16\n    \n    # The division of the 20th term by the 17th term can be found by dividing their expressions:\n    # (2^19) / (2^16) = 2^(19 - 16) = 2^3 = 8\n    return 2 ** 3\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_numbers = 35\n    half_sum = sum_of_numbers / 2\n\n    if sum_of_numbers % 2 == 0:  # If the sum is an even number\n        number1 = number2 = half_sum\n    else:\n        number1 = int(half_sum)\n        number2 = number1 + 1\n\n    max_product = number1 * number2\n\n    return max_product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    daily_earnings = 70\n    days_worked = 6  # From Monday to Saturday\n\n    total_earnings = daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Alice, Becky, and Crystal have an average of 60 books each.\n    # So together they have 3 * 60 books.\n    abc_total_books = 3 * 60\n    \n    # If you count Dennis in, the average increases by 10.\n    # So the new average is 70 books per person, for 4 people.\n    new_average = 70\n    total_people_with_dennis = 4\n    \n    # Total number of books after counting Dennis.\n    total_books_with_dennis = new_average * total_people_with_dennis\n    \n    # Dennis' books are the difference between the new total and the old total.\n    dennis_books = total_books_with_dennis - abc_total_books\n    \n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    net_distance_per_day = day_distance - night_distance\n    days_passed = 0\n    current_distance = 0\n    \n    while True:\n        days_passed += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return days_passed\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    smallest_two_digit_prime = 11\n    largest_two_digit_square = 81  # 9^2 is the largest two-digit square number\n    \n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9\n    number_of_intervals_1_to_4 = 4 - 1\n    interval_length = distance_1_to_4 / number_of_intervals_1_to_4\n    \n    number_of_intervals_1_to_9 = 9 - 1\n    distance_1_to_9 = interval_length * number_of_intervals_1_to_9\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_model_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_model_height = (john_model_height / ratio_john) * ratio_mike\n\n    return mike_model_height\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    hundredths = 7\n    tenths = 6\n    ones = 4\n    number = ones + tenths / 10 + hundredths / 100\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_ship = 22\n    speed_current = 3\n    speed_downstream = speed_ship + speed_current\n    distance = 200\n\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    # Since the number of students must be greater than 1\n    # and less than 233 for the division to be even, we need\n    # to check if 233 is a prime number. Prime numbers cannot\n    # be evenly divided except by 1 and themselves.\n    # Thus, if 233 is prime, Michael is correct.\n    \n    # A simple prime checking function:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # Check if 233 is a prime number\n    return is_prime(233)\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    a_students, b_students, peaches = symbols('a_students b_students peaches')\n    \n    # Create equations based on the problem statement\n    # If all peaches are given to Class A, each student can get 5 peaches and there will be 10 peaches left\n    eq1 = Eq(a_students * 5 + 10, peaches)\n    # If all peaches are given to Class B and each student can get 8 peaches, we will need 2 more peaches\n    eq2 = Eq(b_students * 8, peaches - 2)\n    # It is known that Class A has 3 more students than Class B\n    eq3 = Eq(a_students, b_students + 3)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (a_students, b_students, peaches))\n    \n    return solutions[peaches]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_points = 36\n\n    # Let x be the number of correct answers and (total_questions - x) be the number of incorrect answers\n    # We have the equation correct_points * x + incorrect_points * (total_questions - x) = total_points\n    # 6*x - 2*(10 - x) = 36\n    # 6*x - 20 + 2*x = 36\n    # 8*x = 56\n    # x = 7\n    \n    x = (total_points + incorrect_points * total_questions) / (correct_points - incorrect_points)\n\n    return int(x)\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n    total_ways = trains + buses + flights\n    return total_ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    return 78.2 - 31.45 + 5.245 - 2.3\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import factorint\n    \n    factors = factorint(28512)  # Get the prime factorization of the number\n    h = 1\n    \n    # To make 28512/h a cube, the powers of all prime factors must be multiples of 3\n    for prime, exponent in factors.items():\n        # If the exponent is not a multiple of 3, multiply h by prime^(3 - exponent % 3)\n        if exponent % 3 != 0:\n            h *= prime ** (3 - exponent % 3)\n    \n    return h\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Bart needs at least one red, one yellow and one brown to ensure \n    # he has two chips of different colors\n    # However, since there are 3 reds, he might have to take all of them\n    red = 3\n    # After taking all red, he takes one yellow to guarantee a different color\n    yellow = 1\n    # Total chips Bart has to take out to ensure two chips of different colors\n    chips = red + yellow\n    return chips\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange 7 dancing performances (D) amongst themselves\n    n_D = factorial(7)\n    \n    # We have 4 slots for sketch performances (S) to be inserted amongst the D performances (after first, second,..., seventh).\n    # Imagine the 7 D performances as creating 6 slots in-between them, plus one slot before the first and after the last D.\n    # There are these configurations for sketch performances (S) amongst these slots so that there's at least 1 D in-between them: \n    # S _ D _ D _ D _ D _ D _ D _ D _ (S)\n    # D _ S _ D _ D _ D _ D _ D _ D _ (S) \n    # ...\n    # D _ D _ D _ D _ D _ D _ S _ D _ (S)\n    # Hence, we choose 3 slots out of 8 available ones to place our S performances\n    \n    n_S_slots = factorial(8) / (factorial(3) * factorial(8 - 3))\n    \n    # Multiply the number of ways to arrange D and the ways to choose slots for S\n    ways_to_arrange = n_D * n_S_slots\n    \n    return int(ways_to_arrange)\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415925\n\n    # Using Difference of Two Squares Formula: a^2 - b^2 = (a+b)(a-b)\n    ans = (a + b) * (a - b)\n\n    return ans\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        # Base cases\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        # Use the recursive formula: !n = (n-1)(!(n-1) + !(n-2))\n        else:\n            return (n-1) * (derangement(n-1) + derangement(n-2))\n        \n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n    \n    total_children = mark_position + children_between + helen_position_from_end\n    \n    return total_children\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_number = 0\n    for num in range(999, 99, -1):\n        if (num + 2009) % (17 * 19) == 0:\n            max_number = num\n            break\n    return max_number\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    hours_free = 40\n    cost_40_to_50 = 5\n    cost_50_to_60 = 8\n    cost_above_60 = 15\n    \n    # Calculate cost after free hours (40 to 50)\n    if bill <= (50 - hours_free) * cost_40_to_50:\n        hours_parked = hours_free + (bill / cost_40_to_50)\n    # Calculate cost for 50 to 60 hours parked\n    elif bill <= ((50 - hours_free) * cost_40_to_50) + (10 * cost_50_to_60):\n        bill -= (50 - hours_free) * cost_40_to_50\n        hours_parked = 50 + (bill / cost_50_to_60)\n    # Calculate cost for above 60 hours parked\n    else:\n        bill -= ((50 - hours_free) * cost_40_to_50) + (10 * cost_50_to_60)\n        hours_parked = 60 + (bill / cost_above_60)\n    \n    return hours_parked\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    expected_sum = sum(range(1, 63))\n    actual_sum = 1939\n    missing_number = expected_sum - actual_sum\n    return missing_number\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    total_families = 10\n    num_people = total_families * 3\n\n    # Fathers shake hands with everyone except their family (9 families, 3 people each)\n    fathers_handshakes = total_families * (num_people - 3) \n\n    # Each mother shakes hand with all the fathers and children (9 fathers + 9 children)\n    mothers_handshakes_per_family = 9 + 9 \n    mothers_handshakes = total_families * mothers_handshakes_per_family\n\n    # Each child shakes hand with all the fathers and mothers (9 fathers + 9 mothers)\n    children_handshakes_per_family = 9 + 9\n    children_handshakes = total_families * children_handshakes_per_family\n\n    # Total handshakes (each handshake is counted twice, so divide by 2)\n    total_handshakes = (fathers_handshakes + mothers_handshakes + children_handshakes) // 2\n\n    return total_handshakes\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Draw marbles considering the worst case scenario according to the Pigeonhole Principle\n    # Draw the maximum possible number of marbles of one color without getting all four colors\n    # We have to ensure we get 4 different colors, so we consider the worst case for the first three\n\n    # Pick all the red\n    red = 4\n    # Pick all but one of the green to avoid the fourth color\n    green = 7 - 1\n    # Pick all but one of the blue to avoid the fourth color\n    blue = 6 - 1\n    # Now we are certain that the next marble will be the fourth color\n    # Pick one orange\n    orange = 1\n\n    # Sum the numbers of marbles picked\n    total = red + green + blue + orange\n    return total\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket in range(999):\n        if ticket + (ticket + 1) == 777:\n            return ticket + 2\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    odd_numbers = [1, 3, 5, 7, 9]\n    count = 0\n    for i in odd_numbers:\n        for j in odd_numbers:\n            for k in odd_numbers:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = \"85274\"\n    sequence_length = len(recurring_sequence)\n    position = (79 - 1) % sequence_length  # Subtract 1 because the sequence starts at the 0-index\n    return int(recurring_sequence[position])\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    decimal_value = 5 / 16\n    return decimal_value\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n    \n    total_earnings = average_daily_earnings * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x - 2 * x + 7, 6 * x + 4 * x - 14)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    number = 3016\n    return number - 100\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Since the numbers are positive odd numbers, the smallest possible values for the first four numbers are 1, 3, 5, and 7.\n    # We calculate the sum of these four numbers \n    smallest_sum = 1 + 3 + 5 + 7\n    \n    # We subtract the sum of the smallest possible values from 85 to determine the largest possible value for the fifth number.\n    largest_number = 85 - smallest_sum\n    \n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    return 23.2 - 14.7\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    T = symbols('T')\n    income = symbols('income')\n\n    # Tax for the first 30,000\n    tax_first_30k = 0.01 * T * 30000\n    \n    # Tax for the amount above 30,000\n    tax_above_30k = 0.01 * (T + 3) * (income - 30000)\n\n    # Total tax paid\n    total_tax = tax_first_30k + tax_above_30k\n\n    # Formulate the equation based on the condition that tax paid is (T + 1)% of his income\n    equation = Eq(total_tax, 0.01 * (T + 1) * income)\n\n    # Solve the equation\n    solutions = solve((equation,), (income, T))\n\n    # There can be multiple solutions, we need the one where income is greater than 30,000\n    for sol in solutions:\n        if sol[income] > 30000:\n            return sol[income]\n\n# Store the answer by calling the function\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def count_ways(steps):\n        if steps == 0:\n            return 1\n        elif steps < 0:\n            return 0\n        return count_ways(steps - 1) + count_ways(steps - 2) + count_ways(steps - 3)\n\n    # Total number of ways to reach the 4th step\n    ways_to_4 = count_ways(4)\n\n    # Total number of ways to reach the 10th step from the 4th step\n    # Since step 5 is muddy, we consider ways to step 6, 7, 8, 9, 10\n    ways_from_4_to_10 = count_ways(6) + count_ways(7) + count_ways(8) + count_ways(9) + count_ways(10)\n\n    # Total number of ways\n    total_ways = ways_to_4 * ways_from_4_to_10\n\n    return total_ways\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    distance = 500\n    \n    # Calculate the effective speed downstream\n    effective_speed = speed_ship + speed_current\n    \n    # Calculate time taken to travel 500 km downstream\n    time_taken = distance / effective_speed\n    \n    return time_taken\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    seconds_per_minute = 60\n    n = seconds_per_minute * 2.5\n    return int(n)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    twenty_cent, fifty_cent = symbols('twenty_cent fifty_cent')\n    equation1 = Eq(twenty_cent + fifty_cent, 21)\n    equation2 = Eq(20 * twenty_cent + 50 * fifty_cent, 630)\n\n    solutions = solve((equation1, equation2), (twenty_cent, fifty_cent))\n\n    return solutions[fifty_cent]\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    d = symbols('d')  # Distance between A and B\n    s_alan = symbols('s_alan')  # Alan's speed in meters per minute\n\n    # Equations based on the problem statement\n    eq1 = Eq((d / s_alan) - (d / (s_alan + 15)), 3)  # Time difference between Alan and Phillip\n    eq2 = Eq(d / (s_alan + 15), 12)  # Phillip's time to walk from A to B\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (d, s_alan))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    girls_choice = comb(8, 4)\n    boys_choice = comb(12, 3)\n    total_ways = girls_choice * boys_choice\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import sqrt, floor\n    \n    count = 0\n    number = 2\n    \n    while True:\n        # Generate the number by multiplying the current one by 10 and adding 5\n        sqrt_number = sqrt(number)\n        if sqrt_number == floor(sqrt_number):\n            count += 1\n        # Check if the number has exceeded the pattern's limit (25555)\n        if number > 25555:\n            break\n        number = number * 10 + 5\n\n    return count\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean1 = 28\n    num_values1 = 5\n    mean2 = 11\n    num_values2 = 12\n\n    sum_of_values1 = mean1 * num_values1\n    sum_of_values2 = mean2 * num_values2\n\n    total_sum = sum_of_values1 + sum_of_values2\n    total_values = num_values1 + num_values2\n    overall_mean = total_sum / total_values\n\n    return overall_mean\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_length = 74  # The length of the road\n    distance_between_benches = 7  # Distance from end to end of each bench\n\n    # If there are 9 benches, there are 8 gaps in between.\n    # The total length minus the length taken up by the gaps gives the length occupied by all benches combined.\n    total_bench_length = total_length - (8 * distance_between_benches)\n    \n    # Since there are 9 benches, the length of one bench is the total length of benches divided by 9\n    one_bench_length = total_bench_length / 9\n    \n    return one_bench_length\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the money Alice and Tom have.\n    alice_start, tom_start = symbols('alice_start tom_start')\n\n    # Given that after Alice spent $36, she had $25.40 less than Tom.\n    # Tom's final amount is known, so we can set Tom's current money to 68.10\n    tom_current = 68.10\n\n    # Setting up the equation for Alice after spending $36.\n    equation_1 = Eq(alice_start - 36, tom_current - 25.40)\n\n    # Solve the equation to find Alice's starting amount.\n    solution = solve((equation_1), (alice_start))\n\n    # Getting the amount of money Alice had at the start and storing it to the variable alice_start.\n    alice_start = solution[alice_start]\n\n    return alice_start\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of candies\n    # Let c be the number of students in class B\n    # Then 2c is the number of students in class A\n    \n    x, c = symbols('x c')\n    # The equation when each student in class A gets 4 candies\n    equation1 = Eq(4 * 2 * c - x, 20)\n    # The equation when each student in class B gets 6 candies\n    equation2 = Eq(6 * c - x, -16)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, c))\n\n    # Extract the number of candies\n    candies = solutions[x]\n\n    return candies\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Initially, we have 21 cuts. Each time 5 arms are cut, one arm regrows.\n    # This means for every 5 arms cut, there's an effect of cutting only 4 arms.\n    total_cuts = 21\n    cuts_effect = 5 - 1  # this accounts for the regrowth\n    original_arms = total_cuts // cuts_effect * 5\n\n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    remaining_sum = 2021 - 246  # Subtract the 3rd greatest number from the total\n    # 9 numbers remain to add up to the remaining_sum\n    # Assuming the 4th greatest number is minimum, the first 6 numbers must be 1 (the smallest whole numbers)\n    min_sum_of_six = 6 * 1  \n    # After assigning minimum to the first 6 numbers, we assign the 2nd and 1st greatest possible numbers\n    # remaining_sum - min_sum_of_six - 246 gives us the maximum possible for the 2nd greatest.\n    second_greatest = remaining_sum - min_sum_of_six - 1  # -1 to ensure the 1st greatest is larger\n    # The 4th greatest is now the minimum value it can be with the 3 bigger numbers as large as possible\n    fourth_greatest = remaining_sum - min_sum_of_six - second_greatest - (second_greatest + 1)\n    \n    return fourth_greatest\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    max_same_color = 6\n    return max_same_color + 1  # To ensure getting at least 1 different color\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Number of intervals between 1st and 5th tree (4 gaps)\n    num_intervals_1_to_5 = 5 - 1\n    # Distance for each interval\n    distance_per_interval = 20 / num_intervals_1_to_5\n    \n    # Number of intervals between 8th and 14th tree (6 gaps)\n    num_intervals_8_to_14 = 14 - 8\n    # Total distance from 8th to 14th tree\n    total_distance_8_to_14 = distance_per_interval * num_intervals_8_to_14\n\n    return total_distance_8_to_14\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    numbers = range(1, 25)\n    nums = []\n\n    for num in numbers:\n        if not nums or all(num % x != 0 and x % num != 0 for x in nums):\n            nums.append(num)\n\n    ans = len(nums)\n    return ans\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Jerry's current age be j and Devi's current age be d.\n    j, d = symbols('j d')\n\n    # Given Devi is 8 years older than Jerry\n    equation1 = Eq(d, j + 8)\n\n    # In 4 years' time, their ages will be j+4 and d+4 respectively\n    # Given the ratio of their ages will be 5:7\n    equation2 = Eq((j + 4) / (d + 4), 5/7)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (j, d))\n\n    # Since we are looking for Jerry's current age, which is j\n    return solutions[j]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age_at_grey_birth, father_current_age = symbols('grey_age father_age_at_grey_birth father_current_age')\n    \n    # Define the equations based on the problem\n    equation1 = Eq(father_age_at_grey_birth, 30)\n    equation2 = Eq(father_current_age, 3 * grey_age)\n    equation3 = Eq(father_current_age, father_age_at_grey_birth + grey_age)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (grey_age, father_age_at_grey_birth, father_current_age))\n    \n    return solutions[father_current_age]\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    value = 10 * (numerator / denominator)\n    return value\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    # According to the Pigeonhole Principle, if n items are put into m containers, \n    # with n > m, then at least one container must contain more than one item.\n    # In this case, when 35 books are distributed across 4 layers,\n    # at least one layer must have at least ceil(35/4) books.\n    \n    most_books = (total_books + layers - 1) // layers\n\n    return most_books\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate the number of terms n in the sequence\n    n = ((last_term - first_term) // difference) + 1\n\n    # Calculate the sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    sum_of_seats = n * (first_term + last_term) // 2\n\n    return sum_of_seats\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    # Pip has 5 times as many apples as Bud\n    apples_bud = 1\n    apples_pip = 5 * apples_bud\n\n    # Number of parts each has\n    parts_bud = apples_bud\n    parts_pip = apples_pip\n\n    # Graph details\n    labels = ['Bud', 'Pip']\n    sizes = [parts_bud, parts_pip]\n    colors = ['blue', 'red']\n    explode = (0, 0.1)  # explode Pip's part\n\n    # Draw the parts graph using matplotlib\n    fig1, ax1 = plt.subplots()\n    ax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n            shadow=True, startangle=90)\n    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n    # Save the graph\n    plt.savefig(\"parts_graph.png\")\n    plt.close()\n\n    return \"parts_graph.png\"\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 6, 9]\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    ans = 0.12 + 0.345 + 0.6789\n    return ans\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 3):\n        for tens in range(0, 3):\n            for ones in range(0, 3):\n                if len(set([hundreds, tens, ones])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    number, _ = solve_congruence(*congruences)\n    while number < 100:\n        number += 3 * 5 * 7\n    return number if number < 200 else None\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = quotient + 1  # Since divisor is one larger than the largest possible quotient\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's assume y_year represents Hazel's age y years from now.\n    y_year = symbols('y_year')\n    \n    # Jessica is 3 years younger than Hazel.\n    # So, Jessica's age y years from now would be: y_year - 3\n    \n    # Since we are calculating their total age for next year (which is y-1 years from now),\n    # we need to subtract 1 more year from their ages y years from now.\n    # Hazel's age next year: y_year - 1\n    # Jessica's age next year: (y_year - 3) - 1\n    \n    # Total age next year\n    total_age_next_year = (y_year - 1) + (y_year - 3 - 1)\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of cows and g be the number of goats initially in the farm.\n    c, g = symbols('c g')\n\n    # According to the problem, 65% of the animals were cows.\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # The rest were goats, so goats were 100% - 65% = 35% of the total.\n    equation2 = Eq(g, 0.35 * (c + g))\n\n    # When 240 more animals were added, cows percentage increased from 65% to 85%.\n    # At the same time, the number of goats doubled.\n    equation3 = Eq(0.85 * (c + g + 240), c + 240) # 85% are cows after adding 240 animals.\n    equation4 = Eq(g * 2, g + 240) # Number of goats doubled.\n\n    # Solving the system of equations for c and g.\n    solutions = solve((equation1, equation2, equation3, equation4), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to centimeters\n    section1_cm = 30  # already in cm\n    section2_cm = 1.5 * 100  # converting from meters to cm\n    section3_cm = 150 / 10   # converting from mm to cm\n\n    # Sum the widths of all sections in cm\n    total_width_cm = section1_cm + section2_cm + section3_cm\n    \n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n    age_difference = uncle_future_age - melanie_age\n    uncle_current_age = melanie_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100\n    percentage = (pence / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if i % 4 != 0 and i % 6 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # Degree of the monomial is sum of the exponents of all variables\n    degree_of_monomial = 5\n    degree_of_x = 3  # degree of x^3 is 3\n    # Let degree_of_y be the degree of y^(2n), which we need to find\n\n    # Degree of monomial is the sum of the degrees of x and y\n    # degree_of_x + degree_of_y = degree_of_monomial\n    # 3 + 2n = 5\n    # 2n = 5 - 3\n    # 2n = 2\n    # n = 2 / 2\n    n = (degree_of_monomial - degree_of_x) / 2\n\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    return 18 + 3 - 8 + 17\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    result = result.limit_denominator()\n    return (result.numerator // result.denominator, \n            result.numerator % result.denominator, \n            result.denominator)\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_3_years_later = amy_age_5_years_ago\n    sister_age_now = sister_age_3_years_later - 3\n\n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    suits = 4\n    num_cards_per_suit = 13\n    # Using the Pigeonhole Principle, if you have 'n' numbers and 'm' slots, and if n > m, then at least one slot must contain more than one number.\n    # To ensure at least two cards of the same number, we need to draw one more than the number of card values\n    cards_to_draw = num_cards_per_suit + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    smallest_number = None\n    \n    for num in range(100, 1000):\n        if sum(map(int, str(num))) == 21 and num % 2 == 0:\n            smallest_number = num\n            break\n    \n    return smallest_number\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18  # 3/5 of the whole amount is given as 18p.\n    fraction = 3/5  # The fraction of the whole amount.\n    \n    # Calculate the whole amount by dividing the part by the fraction\n    whole_amount = part / fraction\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 5, 20)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    sum_of_fractions = 0\n    for i in range(1, 20):\n        for j in range(i + 1, 21):\n            sum_of_fractions += i / j\n    return sum_of_fractions\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cacti, sunflowers = symbols('cacti sunflowers')\n\n    eq1 = Eq(cacti - sunflowers, 6)\n    eq2 = Eq(2*cacti + 7*sunflowers, 156)\n\n    solutions = solve((eq1, eq2), (cacti, sunflowers))\n\n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknown variables\n    book_price = symbols('book_price')\n\n    # Define the equation based on the problem statement\n    equation = Eq(8 * book_price + 3 * 0.40, 3 * book_price + 8 * 0.40 + 1.00)\n\n    # Solve the equation\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares = sum([(2*i)**2 for i in range(1, 11)])\n    odd_squares = sum([(2*i-1)**2 for i in range(1, 11)])\n\n    ans = even_squares - odd_squares\n\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    jug_capacity = 2\n    num_jugs = 6\n\n    water_poured = jug_capacity * num_jugs\n    water_left = total_water - water_poured\n\n    return water_left\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of fans\n    L_initial = symbols('L_initial')\n\n    # Equation representing the condition:\n    # At first, there are 1000 more Liverpool fans than Manchester United fans\n    # After 30 minutes, Liverpool fans increased by 472 and Manchester fans by 4836\n    # The number of Manchester United fans is 3 times that of Liverpool fans\n    # L_initial + 472 represents Liverpool fans after 30 minutes\n    # L_initial - 1000 + 4836 represents Manchester United fans after 30 minutes\n\n    equation = Eq(L_initial - 1000 + 4836, 3 * (L_initial + 472))\n\n    # Solve the equation\n    solution = solve(equation, L_initial)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknowns\n    book_price = symbols('book_price')\n\n    # We know the price of pencils\n    pencil_price = 40 / 100  # converting pence to pounds\n    \n    # Creating equations based on the problem statement\n    sarah_expense = Eq(8 * book_price + 3 * pencil_price, 1 + 3 * book_price + 8 * pencil_price)\n\n    # Solve the equations\n    solutions = solve((sarah_expense), (book_price))\n\n    # Get the book price\n    book_price_solution = solutions[0]\n\n    return float(book_price_solution)\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_extra_points = 18\n    jack_points = andrew_points + jack_extra_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    return ways_to_choose\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining = 3 + 2  # After giving Mike $2, she had $3 left.\n    remaining *= 2  # Before giving Nini, she had twice the final remaining.\n    remaining *= 2  # Before giving Bob, she had twice the remaining.\n    total_money = remaining * 2  # Before giving her mother, she had twice the remaining.\n    return total_money\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    result = 4867 + 285\n    return result\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of students in Class B be x\n    # Then the number of students in Class A will be x + 3\n    # Let the total number of peaches be p\n    x, p = symbols('x p')\n\n    # If all peaches are given to Class A:\n    class_a_peaches = Eq(p, 5 * (x + 3) + 10)\n\n    # If all peaches are given to Class B:\n    class_b_peaches = Eq(p, 8 * x + 2)\n\n    # Solve the system of equations\n    solutions = solve((class_a_peaches, class_b_peaches), (x, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    i = 1\n    digits = \"\"\n    while len(digits) < 2023:\n        digits += str(i)\n        i += 1\n    return int(digits[2022])\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tshirts, caps = symbols('tshirts caps')\n    \n    # We are given that the ratio of the number of T-shirts to caps is 8:5\n    ratio_eq = Eq(tshirts/caps, 8/5)\n\n    # She sold 1/4 of the T-shirts, so she got 3 * (1/4) * tshirts money from T-shirts.\n    # She sold 1/5 of the caps, so she got 5 * (1/5) * caps money from caps.\n    # Total money collected is $132.\n    total_eq = Eq(3 * (1/4) * tshirts + 5 * (1/5) * caps, 132)\n\n    # Solving the system of equations\n    solutions = solve((ratio_eq, total_eq), (tshirts, caps))\n\n    # We want the number of T-shirts Siti had at first.\n    return solutions[tshirts]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 1998\n    future_year = 2001\n    age_on_birthday_in_1998 = 11\n    age_on_31_12_2001 = age_on_birthday_in_1998 + (future_year - birth_year)\n\n    return age_on_31_12_2001\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    all_combinations = permutations(['4', '6', '2', '5'])\n    odd_numbers = [int(''.join(comb)) for comb in all_combinations if int(comb[-1]) % 2 != 0]\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    max_students_per_boat = 6\n    trips = total_students // max_students_per_boat\n    if total_students % max_students_per_boat > 0:  # If there are remaining students, add one more trip\n        trips += 1\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    target_term = 36\n\n    ordinal_number = (target_term - first_term) // difference + 1\n\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joe_cards, eric_cards = symbols('joe_cards eric_cards')\n    \n    # Joe has 7 times as many cards as Eric originally\n    equation1 = Eq(joe_cards, 7 * eric_cards)\n    \n    # Find out how many they must exchange to each have 168 cards\n    # After exchange, Joe will give some cards to Eric, let that be x\n    x = symbols('x')\n    equation2 = Eq(joe_cards - x, 168)\n    equation3 = Eq(eric_cards + x, 168)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (joe_cards, eric_cards, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            if tens_digit == ones_digit:\n                continue  # Skip if both digits are the same because we want a two-digit prime number\n            number = tens_digit * 10 + ones_digit\n            if isprime(number):\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_kids = 8\n    kids_who_ran_away = 5\n    kids_caught_later = 9\n    \n    total_kids_caught = (initial_kids - kids_who_ran_away) + kids_caught_later\n    \n    return total_kids_caught\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time_available / time_for_one_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    return abs(19 - 6) * 2\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    total_apples = 10\n    # We want to split them into two groups with different numbers.\n    # One group will have 1 apple, the other will have 9, then one will have 2, the other will have 8, etc.\n    # There is symmetry, so we can simply find the number of groups up to half of the total and multiply by 2.\n    \n    # However, we don't count the middle situation (5 and 5) since they have to be different.\n    # So, count only up to half minus 1 as the split needs to be unequal.\n    count = (total_apples // 2) \n    \n    return count\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n\n    num_students = 5\n    num_ways = factorial(num_students)\n\n    return num_ways\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    # Let x be the number of pears Anne has\n    # Let y be the number of pears Charlie has\n    # 1. Anne has more pears than Charlie -> x > y\n    # 2. If Anne gives Charlie 6 pears, they have equal numbers -> x - 6 = y + 6\n    # 3. Together they have 38 pears -> x + y = 38\n    # From 2 and 3, we get two equations: x - y = 12 and x + y = 38\n    # Adding these two equations we get: 2x = 50 -> x = 25\n    # So Anne originally has 25 pears.\n    \n    an_ne = (total_pears + 6) / 2  # Simplified calculation from solving the two equations\n    return an_ne\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming_times = 14\n    joanne_swimming_times = 5\n    more_swimming_times = amy_swimming_times - joanne_swimming_times\n    return more_swimming_times\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    abcd = a*1000 + b*100 + c*10 + d\n    abc = a*100 + b*10 + c\n    ab = a*10 + b\n\n    equation = Eq(abcd + abc + ab + a, 1370)\n\n    solutions = solve(equation, (a, b, c, d))\n\n    return solutions[abcd]\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    isaac, joseph = symbols('isaac joseph')\n    equation1 = Eq(isaac, 5 * joseph)\n    equation2 = Eq(joseph + 154, 9/10 * isaac)\n\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    # Calculate factorial of 29\n    fact_29 = factorial(29)\n    \n    # Count the number of trailing zeros\n    count = 0\n    while fact_29 % 10 == 0:\n        count += 1\n        fact_29 //= 10\n\n    return count\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert base 8 number to base 10 number\n    N = int('12345654321', 8)\n    # Calculate the remainders\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    # Return the sum of the remainders\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Linda has jogged 1200m when they meet,\n    # Let's assume the distance Ted jogged when they meet is x meters.\n    # The speed ratio of Linda to Ted is 3:4, so the distance ratio will also be 3:4.\n    # Therefore, 1200m corresponds to the '3' part of the ratio\n    # and x meters will correspond to the '4' part of the ratio.\n    # We can set up the proportion 1200 / 3 = x / 4\n    # Solve for x to find out how much distance Ted covered.\n    x = (1200 / 3) * 4\n\n    # Total length of the path is the distance Linda jogged plus the distance Ted jogged.\n    total_length = 1200 + x\n    return total_length\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must also be divisible by 9\n    # Sum of the digits of the number 2018A will be 2 + 0 + 1 + 8 + A = 11 + A\n    # Find A such that 11 + A is divisible by 9\n    for A in range(10):\n        if (11 + A) % 9 == 0:\n            # Construct the 5-digit number with the found A\n            number = int(f\"2018{A}\")\n            # Calculate the remainder when the number is divided by 8\n            remainder = number % 8\n            return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Ryan says there are 5 squirrels in front of him.\n    # Hence, there are 5 + 1 (Ryan himself) squirrels ahead of Elvis.\n    squirrels_ahead_elvis = 5 + 1\n\n    # Elvis says there are 7 squirrels behind him.\n    squirrels_behind_elvis = 7\n\n    # There is only 1 squirrel between Ryan and Elvis.\n    squirrel_between = 1\n\n    # So, the total number of squirrels is the sum of:\n    # - Squirrels ahead of Elvis\n    # - Elvis himself\n    # - The squirrel between Ryan and Elvis\n    # - Squirrels behind Elvis\n    total_squirrels = squirrels_ahead_elvis + 1 + squirrel_between + squirrels_behind_elvis\n\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    def derangement(n):\n        # Base Cases\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        # Use recursive formula: !n = (n - 1) * (!(n - 1) + !(n - 2))\n        return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    return derangement(6)\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    days_for_1_worker = workers * days_for_3_workers\n    return days_for_1_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02  # 2% interest rate\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    return 25 / 100 * 64\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30\n    total_amount = 45\n    result = (percentage / 100) * total_amount\n    return result\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    ans = sum(i for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack_current_age = symbols('jack_current_age')\n    \n    equation = Eq(jack_current_age - 5, (jack_current_age + 8) / 2)\n    \n    solution_age = solve(equation, jack_current_age)\n    \n    return solution_age[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Percentage of money spent on the bag\n    bag_percentage = 70\n\n    # Fraction of the remaining money spent on the purse\n    purse_fraction = 3 / 8\n\n    # Calculate the remaining percentage after buying the bag\n    remaining_percentage = 100 - bag_percentage\n\n    # Calculate the percentage spent on the purse from the remaining money\n    purse_percentage = purse_fraction * remaining_percentage\n\n    return purse_percentage\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the quantity of straws Kenny, Timmy, and Ron used\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    # Timmy used 12 fewer straws than Kenny\n    equation1 = Eq(timmy, kenny - 12)\n\n    # Ron used 20 more straws than Kenny\n    equation2 = Eq(ron, kenny + 20)\n\n    # The three children used 284 straws altogether\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    # return the number of straws that Ron used\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('EDUCATION')  # Total number of letters\n    vowels = 'AEIOU'  # Vowels in the word EDUCATION\n    num_vowels = sum(1 for letter in 'EDUCATION' if letter in vowels)  # Number of vowels\n    num_consonants = total_letters - num_vowels  # Number of consonants\n\n    # Total arrangements of letters\n    total_arrangements = factorial(total_letters)\n\n    # Arrangements where vowels are together\n    vowels_together = factorial(num_vowels) * factorial(num_consonants + 1)\n\n    # Subtract arrangements where vowels are together from total arrangements\n    arrangements_vowels_never_together = total_arrangements - vowels_together\n\n    return arrangements_vowels_never_together\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of pupils in School P originally be x\n    # Let the number of pupils in School Q originally be y\n    x, y = symbols('x y')\n\n    # The ratio of the pupils in School P and School Q is 2:3\n    equation1 = Eq(x/y, 2/3)\n\n    # 240 Primary one pupils were admitted to School P and School Q respectively\n    # The ratio became 3:4 in the end\n    equation2 = Eq((x+240)/(y+240), 3/4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    initial_students = 5\n    initial_candies_each = 12\n    total_candies = initial_students * initial_candies_each\n    \n    new_students = initial_students + 1\n    new_candies_each = total_candies // new_students\n    \n    return new_candies_each\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    angle_BAC = 50\n    angle_ABC = angle_BAC\n    angle_ACB = angle_BAC\n    angle_BPC = 180 - (angle_ABC + angle_ACB) / 2\n\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.3 * x + 0.7 * (20 - x), 20 * 0.54)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    purchased_sweets = 11\n    total_sweets = purchased_sweets\n    wrappers = purchased_sweets\n\n    while wrappers >= 3:\n        exchange = wrappers // 3\n        total_sweets += exchange\n        wrappers = wrappers % 3 + exchange\n    \n    return total_sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each bird type.\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Each type of bird has one head except eight-tailed which has two heads.\n    # Define equations based on the problem statement.\n    equation1 = Eq(two_tailed, 5 + 2 * eight_tailed)\n    equation2 = Eq(three_tailed, 2 + six_tailed / 2)\n    # Total tails: 2*2_tailed + 3*3_tailed + 6*6_tailed + 8*8_tailed.\n    # Total heads: 2_tailed + 3_tailed + 6_tailed + 2*8_tailed.\n    # Total tails - 2 = 4*(total heads).\n    # Total heads - total tails = 241.\n    equation3 = Eq(2*two_tailed + 3*three_tailed + 6*six_tailed + 8*eight_tailed - 2, 4*(two_tailed + three_tailed + six_tailed + 2*eight_tailed))\n    equation4 = Eq(two_tailed + three_tailed + six_tailed + 2*eight_tailed - (2*two_tailed + 3*three_tailed + 6*six_tailed + 8*eight_tailed), 241)\n\n    # Solve the system of equations for the number of each type of bird.\n    solutions = solve((equation1, equation2, equation3, equation4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = '11:40 AM'\n    duration_str = '4:50'\n\n    arrival_time = datetime.strptime(arrival_time_str, '%I:%M %p')\n\n    hours, minutes = map(int, duration_str.split(':'))\n    duration = timedelta(hours=hours, minutes=minutes)\n\n    departure_time = arrival_time + duration\n    departure_time_str = departure_time.strftime('%I:%M %p')\n\n    return departure_time_str\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):  # Loop through the smallest two-digit numbers to the largest\n        if num % 5 == 4 and num % 7 == 4:  # Check if the remainder is 4 for both 5 and 7\n            return num  # Return the number if condition is met\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # Given values\n    total_weight_kg = 5\n    cost_price_pounds = 10\n    bag_weight_g = 250\n    selling_price_per_bag_p = 65 \n\n    # Convert weight to grams and price to pence for consistency\n    total_weight_g = total_weight_kg * 1000\n    cost_price_pence = cost_price_pounds * 100\n\n    # Calculate number of bags\n    number_of_bags = total_weight_g / bag_weight_g\n\n    # Calculate total selling price in pence\n    total_selling_price_pence = number_of_bags * selling_price_per_bag_p\n\n    # Calculate profit in pence\n    profit_pence = total_selling_price_pence - cost_price_pence\n\n    # Calculate profit percentage\n    profit_percentage = (profit_pence / cost_price_pence) * 100\n\n    return profit_percentage\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    ans = 421 * 11\n    return ans\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Four roads from Ayton to Beeton, five roads from Beeton to Ceeton\n    ways_AB_BC = 4 * 5\n    # Six roads from Ceeton to Deeton\n    ways_CD = 6\n    # Three direct roads from Ayton to Deeton\n    ways_AD_direct = 3\n    \n    # Total paths from Ayton to Beeton to Ceeton to Deeton\n    total_paths_ABCD = ways_AB_BC * ways_CD\n\n    # Since there are three direct roads from Ayton to Deeton, that's\n    # an alternative route and should be added to the total paths calculated\n    total_ways = total_paths_ABCD + ways_AD_direct\n\n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    # Simplify the left fraction to find its simplest form\n    numerator = 15\n    denominator = 20\n    simplified_denominator = denominator / (numerator / 3)\n    # Return the value of the box(□)\n    return simplified_denominator\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    common_difference = term_difference // (15 - 10)\n\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n\n    return twelfth_term\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    for num in range(1, 2017):\n        underline_count = 0\n        if num % 2 == 0:  # multiple of 2 (red)\n            underline_count += 1\n        if num % 3 == 0:  # multiple of 3 (blue)\n            underline_count += 1\n        if num % 4 == 0:  # multiple of 4 (green)\n            underline_count += 1\n        \n        # Check if the number was underlined exactly twice\n        if underline_count == 2:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    sally_had = 3.75\n    sally_spent = 2.50\n    sally_left = sally_had - sally_spent\n\n    total_left = 5\n    joe_left = total_left - sally_left\n\n    joe_spent = 2.50\n    joe_had = joe_left + joe_spent\n\n    return joe_had\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_avg = 135\n    last_5_days_avg = 151\n    total_days = 8\n\n    total_trees_first_3_days = first_3_days_avg * 3\n    total_trees_last_5_days = last_5_days_avg * 5\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n\n    avg_trees = total_trees / total_days\n\n    return avg_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq((149 + magic_number), 5 * (21 + magic_number))\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    # Define the number of different types of dishes\n    salads = 15\n    soups = 20\n    vegetable_dishes = 12\n    sandwiches = 6\n    \n    # Calculate the number of ways to pick 2 salads, soups, vegetable dishes, or sandwiches\n    # We use the combination formula: C(n, k) = n! / (k!(n - k)!)\n\n    # Calculate the combinations individually for each of the two choices of food types\n    salad_soup = comb(salads, 1) * comb(soups, 1)\n    salad_vegetable = comb(salads, 1) * comb(vegetable_dishes, 1)\n    salad_sandwich = comb(salads, 1) * comb(sandwiches, 1)\n    soup_vegetable = comb(soups, 1) * comb(vegetable_dishes, 1)\n    soup_sandwich = comb(soups, 1) * comb(sandwiches, 1)\n    vegetable_sandwich = comb(vegetable_dishes, 1) * comb(sandwiches, 1)\n\n    # Sum the results to get the total number of combinations\n    total_combinations = salad_soup + salad_vegetable + salad_sandwich + soup_vegetable + soup_sandwich + vegetable_sandwich\n\n    return total_combinations\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Range of 3-digit numbers\n        if i % 2 == 0:  # Check if the number is even\n            digits_sum = sum(int(digit) for digit in str(i))  # Sum of the individual digits\n            if digits_sum == 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    new_first_number = 202 + magic_number\n    new_second_number = 22 + magic_number\n    \n    equation = Eq(new_first_number, 6 * new_second_number)\n    solution = solve(equation, magic_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n    \n    n = 1\n    while True:\n        # Check if all the numbers in the sequence are prime\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and\n                isprime(n + 106) and isprime(n + 308)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n    return days_last\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    # Initialize the difference in the number of boys and girls\n    difference = 32\n\n    # Boys and girls will form concentric squares. Let's denote the side length of the boy's square as 'n'\n    # and the side length of the girl's square as 'n-2' (since each inner layer will have a side length of 2 less than the outer one).\n    # We are looking for the total number of students, which is the sum of squares of side lengths till the innermost layer.\n    # Boys are on all even layers, and girls are on all odd layers.\n\n    total_students = 0\n    layer = 0\n\n    # The difference between boys and girls is given by:\n    # 4*(n + (n-2) + (n-4) + ...) + 4 - 4*(n-1 + (n-3) + ...) = 32\n    # The term 4 is added for the boys and subtracted for the girls at layer 1 (the center).\n\n    # Calculate the sum of series for boys and girls separately until the difference is reached\n    while True:\n        # Add the boys (even layers)\n        boys = 4 * layer + 4  # corner boys are counted only once\n        # Add the girls (odd layers, except the last center boy which is counted separately)\n        girls = 0 if layer == 0 else (4 * layer)\n\n        # Update the total number of students so far\n        total_students += boys + girls\n\n        # If we have reached the difference between boys and girls we can determine the total number of students\n        if boys - girls == difference:\n            return total_students\n\n        # Increase the layer count (equivalent to increasing side length of square)\n        layer += 1\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for mangoes and strawberries\n    mangoes, strawberries = symbols('mangoes strawberries')\n\n    # Set up the equations based on the problem\n    equation1 = Eq(mangoes, strawberries + 448)       # Mangos is 448g more than strawberries\n    equation2 = Eq(strawberries, 2 * (mangoes - 900)) # After giving away 900g mangos, strawberries is twice the mangos\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (mangoes, strawberries))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n\n    total_items_solution = solve(equation, total_items)\n    lemons_solution = lemons.subs(total_items, total_items_solution[0])\n\n    return lemons_solution\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    max_money, anthony_money = symbols('max_money anthony_money')\n\n    # If Max buys the chocolate\n    equation1 = Eq(2 * (anthony_money), 5 * (max_money - 12))\n    # If Anthony buys the chocolate\n    equation2 = Eq(8 * (anthony_money - 12), 13 * max_money)\n\n    solutions = solve((equation1, equation2), (max_money, anthony_money))\n\n    return solutions[max_money]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import comb\n\ndef solution():\n    # After giving each kid one pen, we have 20 - 6 = 14 pens left to distribute.\n    # This is a combination problem with repetition, where we want to find the \n    # number of combinations of 14 pens into 6 parts - stars and bars.\n    # The formula for combinations with repetition is: comb(n + k - 1, k - 1)\n    # where n is the number of items to distribute and k is the number of parts.\n    n = 14 # The remaining pens\n    k = 6  # The kids\n    return comb(n + k - 1, k - 1)\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Initialize the maximum number of marbles in the biggest pile\n    max_in_biggest_pile = 16\n    # Iterate in reverse to find the smallest maximum in the biggest pile\n    for biggest in range(16, 0, -1):\n        for s1 in range(1, biggest):\n            for s2 in range(1, s1):\n                for s3 in range(1, s2):\n                    if s1 + s2 + s3 + biggest == 16:\n                        max_in_biggest_pile = biggest\n                        return max_in_biggest_pile\n    return max_in_biggest_pile\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let r be the total number of red stickers and b be the total number of blue stickers initially.\n    # Given r = b and she gave away 2/3 of her red stickers, she's left with r/3 red stickers.\n    # She was left with 1/4 of her stickers in the end, so the remaining stickers are (r+b)/4\n    # Let x be the fraction of blue stickers she gave away, so she has b*(1-x) blue stickers left.\n    # The remaining red and blue stickers are equal to (r/3) + b*(1-x) which must equal (r+b)/4.\n    \n    r, b, x = symbols('r b x')\n    total_initial_stickers = r + b\n    remaining_stickers = Eq((r/3) + b*(1-x), total_initial_stickers/4)\n    \n    # Since r = b we can replace r with b or b with r. Let's use b for simplicity.\n    # This gives us the equation (b/3) + b*(1-x) = (b+b)/4 = b/2\n    # Simplify this equation to find the value of x\n    \n    remaining_stickers_simplified = remaining_stickers.subs(r, b)\n    solution = solve(remaining_stickers_simplified, x)\n    \n    # We expect one value for x which is the solution.\n    return solution[0]\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # Calculate the pattern for the units digit of 4^k where k ranges from 1 to 4\n    # since 4^5 will have same units digit as 4^1, 4^6 will have same as 4^2 and so on...\n    pattern = [4**k % 10 for k in range(1, 5)]\n    \n    # Since the pattern repeats every 4, find the remainder of 2022 divided by 4 to find\n    # the position in the pattern\n    remainder = 2022 % 4\n    \n    # If remainder is 0, we should take the last element of the pattern, else take\n    # the (remainder - 1)th element\n    if remainder == 0:\n        unit_digit = pattern[-1]\n    else:\n        unit_digit = pattern[remainder - 1]\n    \n    return unit_digit\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    daily_increment = 4\n\n    # Use arithmetic sequence sum formula: n/2 * (first_term + last_term)\n    # Calculate the number of days first\n    number_of_days = ((last_day_pages - first_day_pages) // daily_increment) + 1\n    \n    # Calculate total pages read using the sequential sum formula\n    total_pages = number_of_days / 2 * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_five_digit_number = 99999\n    smallest_six_digit_number = 100000\n    difference = smallest_six_digit_number - largest_five_digit_number\n    return difference\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Convert all lengths to millimeters\n    lengths_mm = [\n        10,          # 10 millimeters\n        100 * 10,    # 100 centimeters in mm\n        10 * 1000,   # 10 meters in mm\n        2 * 1000 * 1000,  # 2 kilometers in mm\n        2800 * 10,   # 2800 centimeters in mm\n        2500 * 1000, # 2500 meters in mm\n        100,         # 100 millimeters\n        100 * 1000   # 100 meters in mm\n    ]\n    \n    # Find the smallest length in millimeters\n    smallest_length_mm = min(lengths_mm)\n    \n    # Return the index of the smallest length\n    # Since indexes start from 0 but list starts from 1, we add 1\n    ans = lengths_mm.index(smallest_length_mm) + 1\n    return ans\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # Define the total number of possible 3-digit odd numbers\n    total_numbers = 0\n\n    # The 1st digit (hundreds place) can be any one of the 6 available digits (1-6) but can't be 0\n    for first_digit in range(1, 7):\n        # The 2nd digit (tens place) can be any one of the remaining 5 digits\n        for second_digit in range(1, 7):\n            if second_digit != first_digit:\n                # The 3rd digit (ones place) must make the number odd, so it has to be 1, 3, or 5\n                for third_digit in [1, 3, 5]:\n                    # Ensure the third digit is not the same as the first or second\n                    if third_digit != first_digit and third_digit != second_digit:\n                        # A unique 3-digit odd number can be formed\n                        total_numbers += 1\n\n    return total_numbers\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both_sports = 10\n    neither_sport = 9\n    total_students = swim_only + basketball_only + both_sports + neither_sport\n    \n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    arithmetic_sequence = [3, 7, 11, 15, 19]\n    ans = sum(arithmetic_sequence)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    ans = 324 * 24\n    return ans\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(C - A, 21)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    return 34.2 + 2.96 + 0.0364\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    eq1 = Eq(bookmarks - 4*pupils, 8)\n    eq2 = Eq(bookmarks - 6*pupils, -10)\n\n    solutions = solve((eq1, eq2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    ans = 608 * 56\n    return ans\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    # Let's denote c as the number of cows and d as the number of ducks.\n    # We know each cow has 4 legs and each duck has 2 legs.\n    # We have the following system of equations:\n    # c + d = 25 (the total number of animals)\n    # 4c + 2d = 68 (the total number of legs)\n\n    # We can solve this system of equations to find the number of ducks (d).\n\n    # From the first equation: c = 25 - d\n    # Substituting c in the second equation: 4(25 - d) + 2d = 68\n\n    # Now, let's solve for d:\n    d = (68 - 4 * 25) / (2 - 4)\n    return int(d)\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    avg_girls, avg_boys = symbols('avg_girls avg_boys')\n    \n    # Given values\n    total_children = 11 + 5\n    avg_height = 122.5\n    girls_more_avg = 3.2\n\n    # Equations based on problem statement\n    equation1 = Eq(avg_girls - avg_boys, girls_more_avg)\n    equation2 = Eq((11 * avg_girls + 5 * avg_boys) / total_children, avg_height)\n\n    # Solve the equations for avg_girls and avg_boys\n    solutions = solve((equation1, equation2), (avg_girls, avg_boys))\n\n    return solutions[avg_girls]\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Let's use inductive reasoning for the number of regions R created by n lines\n    # Assuming we know the number of regions with n-1 lines\n    # The nth line will cross all previous n-1 lines at most, creating at most n new regions\n    # R(n) = R(n-1) + n (at most)\n\n    # Initial number of regions (with 0 triangles/lines)\n    regions = 1  # The whole plane is one region\n\n    # Each triangle consists of 3 lines, and we have 5 triangles\n    for i in range(1, 5 * 3 + 1):\n        regions += i\n    \n    return regions\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    dividend = 602\n    divisor = 7\n    quotient = dividend // divisor\n    return quotient\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Calculate the average of the numbers, since it's the middle number in the sequence\n    average = 1503 // 9\n    \n    # Calculate the smallest value (4 numbers before the average in an arithmetic sequence of odd numbers)\n    smallest_value = average - (4 * 2)\n    \n    return smallest_value\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term_32 = 157\n    term_108 = 537\n    n_32 = 32\n    n_108 = 108\n    \n    # Calculate common difference\n    difference = (term_108 - term_32) / (n_108 - n_32)\n    \n    # Calculate the first term using the formula: a_n = a_1 + (n-1)d\n    # Rearrange to find a_1: a_1 = a_n - (n-1)d\n    first_term = term_32 - (n_32 - 1) * difference\n    \n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # candies_to_Jane represents the amount of candies Jane received\n    # Let's denote Donna's initial candies as x\n    x = symbols('x')\n    \n    # Donna kept half of x plus 3, so:\n    candies_to_Jane = Eq(x - (x / 2 + 3), x / 2 - 3)\n    \n    # Jane ate 1/3 of the candies she got plus 4, and gave the rest to Kate\n    # Kate received (2/3 * candies_to_Jane - 4) candies\n    # Kate ate 1/4 of what she got, and 42 candies were left\n    candies_to_Kate = Eq((2 / 3) * (x / 2 - 3) - 4, 42)\n    \n    # Solve both equations to find the value of x\n    solutions = solve((candies_to_Jane, candies_to_Kate), x)\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    total_students = 70\n    total_average = 66\n    girls_average = 70\n    boys_average = 63\n\n    # Let's denote the number of girls by g and the number of boys by b.\n    # We have two equations:\n    # g + b = total_students, which is 70\n    # girls_average * g + boys_average * b = total_average * total_students\n    # So, we have:\n    # 70 * g + 63 * b = 66 * 70\n    # And since g + b = 70, we can find b as 70 - g\n\n    # Substitute b = 70 - g into the second equation:\n    # 70 * g + 63 * (70 - g) = 66 * 70\n    # Solve this equation for g.\n    g = symbols('g')\n    equation = Eq(70 * g + 63 * (70 - g), 66 * 70)\n    solutions = solve(equation, g)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # Since A cannot receive the ball back immediately, we have 3 choices for the first pass.\n    first_pass = 3\n    # Regardless of who gets the first pass, there are 2 choices left for the second pass.\n    second_pass = 2\n    # The last pass must go to A, and only 1 person is left to make it.\n    # The third pass is not counted as a choice since it must be to A.\n    \n    # Multiply the number of choices at each step\n    num_methods = first_pass * second_pass\n    \n    return num_methods\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    number_of_days = 5\n    total_cost = cost_per_day * number_of_days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let x be the number of storybooks Anthea originally has.\n    # Jason has 30 storybooks and gives 4 to Anthea.\n    # After giving away 4 storybooks, Jason has (30 - 4) storybooks.\n    # At this point, Jason and Anthea have the same number of storybooks.\n    # That means, Anthea originally had (30 - 4) - 4 storybooks.\n    anthea_original = (30 - 4) - 4\n    jason_original = 30\n    \n    # The difference between their original number of storybooks is:\n    difference = jason_original - anthea_original\n    \n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) / (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for p, q in permutations(range(10), 2):\n        qp = q * 10 + p\n        pq = p * 10 + q\n        if qp == 4 * pq:\n            return qp\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    lcm = 4 * 10  # Since 4 and 10 have no common factors other than 1, their LCM is their product\n    return lcm\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_meters_per_second = 2  # William's jogging speed\n    time_minutes = 12  # Time duration in minutes\n    time_seconds = time_minutes * 60  # Convert time to seconds\n    distance_jogged = speed_meters_per_second * time_seconds  # Calculate distance\n    return distance_jogged\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_1 = 4\n    common_factor_2 = 101\n    \n    term_1 = 2020 // common_factor_1\n    term_2 = 68 * common_factor_1\n\n    term_3 = 505 // common_factor_2\n    term_4 = 128 * common_factor_2\n\n    ans = (term_1 * term_2) + (term_3 * term_4)\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    total_weight = 100 + 500 + 400\n    total_sugar = 100 * 0.25 + 500 * 0.55 + 400 * 0.35\n    concentration = total_sugar / total_weight\n\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    eq1 = Eq(a, 2 * b)  # A's efficiency is twice of B's\n    eq2 = Eq(12 * a, 1)  # A can finish the job in (b_days - 12) days or 12*a jobs per day = whole job\n\n    # Solve the equations for a and b\n    efficiencies = solve((eq1, eq2), (a, b))\n\n    # Efficiency of A\n    a_efficiency = efficiencies[a]\n\n    # Efficiency of B\n    b_efficiency = efficiencies[b]\n\n    # When A and B work together, their combined efficiency\n    combined_efficiency = a_efficiency + b_efficiency\n\n    # The time it takes for A and B to complete the job together is 1 / combined_efficiency\n    days_together = 1 / combined_efficiency\n\n    return days_together\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    newspaper_cost = 2.20\n    change_received = 4.83\n    note_value = 10\n\n    tissues_cost = note_value - (newspaper_cost + change_received)\n\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    initial_condition = Eq(boys, girls)\n    leaving_condition = Eq((3/5) * boys + 12, girls - 42)\n\n    solutions = solve((initial_condition, leaving_condition), (boys, girls))\n\n    return solutions[boys] * 2  # Total students is boys + girls\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 12 / 60\n    early_time = 4 / 60\n    \n    # Let the distance be x kilometers\n    # Time taken at 3 km/h to cover x km = x/3 hours\n    # Time taken at 5 km/h to cover x km = x/5 hours\n\n    # The difference in time is (late_time + early_time), which is the time saved by increasing speed\n    # x/3 - x/5 = late_time + early_time\n    # Solve for x\n    x = (3 * 5 * (late_time + early_time)) / (5 - 3)\n    \n    return x\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    ans = 11111111 * 99999999\n    return ans\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n    \n    digits = '123'\n    all_permutations = [''.join(p) for i in range(1, len(digits)+1) for p in permutations(digits, i)]\n    return len(all_permutations)\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 + 3 * baskets_of_tomatoes\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of candies Rachel has and y be the number Alice has\n    x, y = symbols('x y')\n    \n    # Equation 1: After Rachel gives Alice 10 candies, they have the same amount\n    equation1 = Eq(x - 10, y + 10)\n    \n    # Equation 2: After Alice gives Rachel 10 candies, Rachel has 4 more than 3 times Alice's candies\n    equation2 = Eq(x + 10, 3 * (y - 10) + 4)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The total number of candies they originally had\n    total_candies = solutions[x] + solutions[y]\n\n    return total_candies\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    # Original ratios\n    ratio_boys = 3\n    ratio_girls = 2\n\n    # After 12 boys and 12 girls joined\n    ratio_boys_new = 19\n    ratio_girls_new = 14\n\n    # Let initial number of boys and girls be 3x and 2x respectively\n    # After 12 boys and girls joined, the number becomes:\n    # For boys: 3x + 12 and for girls: 2x + 12\n\n    # The new ratio is (3x + 12) / (2x + 12) = 19 / 14\n    # Cross multiply to find the value of x\n    # 14 * (3x + 12) = 19 * (2x + 12)\n    # 42x + 168 = 38x + 228\n    # 4x = 60\n    # x = 15\n\n    # So, initially, there were 3x boys and 2x girls:\n    initial_boys = 3 * 15\n    initial_girls = 2 * 15\n\n    # After 12 boys and girls joined:\n    final_boys = initial_boys + 12\n    final_girls = initial_girls + 12\n\n    # Total number of children in the afternoon:\n    total_children = final_boys + final_girls\n\n    return total_children\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost_for_12_cases = cost_per_case * 12\n    return total_cost_for_12_cases\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temp = -8\n    today_temp = 13\n    temperature_rise = today_temp - last_night_temp\n    return temperature_rise\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "from math import factorial\n\ndef solution():\n    # Four different colored socks\n    ways_4_socks = factorial(4) # 4!\n    \n    # Two different colored pairs of socks\n    ways_2_pairs = factorial(4) // (factorial(2) * factorial(2)) # 4! / (2! * 2!)\n    \n    return ways_4_socks, ways_2_pairs\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "from math import pi, sqrt\n\ndef solution():\n    g_earth = 9.81  # acceleration due to gravity on Earth in m/s^2\n    g_moon = g_earth / 6  # acceleration due to gravity on the Moon in m/s^2\n    T_earth = 1  # period of the pendulum on Earth in seconds\n\n    # Calculate the length of the pendulum using the period on Earth\n    # The formula for the period of a simple pendulum is T = 2 * pi * sqrt(l / g),\n    # where T is the period, l is the length of the pendulum, and g is the acceleration due to gravity.\n    # We can rearrange this to solve for the length, l = (T^2 * g) / (4 * pi^2).\n    l = (T_earth**2 * g_earth) / (4 * pi**2)\n\n    # Calculate the period of the pendulum on the Moon using the length we just found\n    # T_moon = 2 * pi * sqrt(l / g_moon)\n    T_moon = 2 * pi * sqrt(l / g_moon)\n\n    return T_moon\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    # Since each layer alternates in color and forms a square, the number of layers can be\n    # calculated by finding the square root of the total number of tiles\n    num_layers = int(total_tiles ** 0.5)\n\n    # The number of tiles in each square layer is the square of the layer number\n    red_tiles = 0\n    green_tiles = 0\n    for layer in range(1, num_layers + 1, 2):  # We start at 1 and increment by 2 to count only odd layers\n        red_tiles += layer**2\n\n    for layer in range(2, num_layers + 1, 2):  # We start at 2 and increment by 2 to count only even layers\n        green_tiles += layer**2\n\n    # The dominant color will be the one with more tiles in the end\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'green'\n        more_tiles = green_tiles - red_tiles\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_iron_bar_1 = 23\n    length_iron_bar_2 = 37\n    length_welded_part = 3\n\n    full_length = length_iron_bar_1 + length_iron_bar_2 - length_welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Justin's correct answers = j, William's correct answers = w\n    j, w = symbols('j w')\n\n    # Equation for total points\n    equation1 = Eq(6 * j - 2 * (10 - j) + 6 * w - 2 * (10 - w), 96)\n    # Equation for difference in points\n    equation2 = Eq(6 * j - 2 * (10 - j), 6 * w - 2 * (10 - w) + 24)\n\n    # Solve for j and w\n    solutions = solve((equation1, equation2), (j, w))\n\n    # Return only William's correct answers\n    return solutions[w]\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime(\"1/3/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"15/4/2023\", \"%d/%m/%Y\")\n    num_days = (end_date - start_date).days + 1\n\n    return num_days\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    ans = x_squared ** 2\n    return ans\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    for A in range(10):\n        if A + A == A * 10 + A:\n            return A\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate per day\n    A_rate = 1 / 15\n    # B's work rate per day\n    B_rate = 1 / 10\n    \n    # Combined work rate of A and B per day\n    combined_rate = A_rate + B_rate\n    \n    # Work done by A and B together in 3 days\n    work_done_3_days = combined_rate * 3\n    \n    # Remaining work after 3 days\n    remaining_work = 1 - work_done_3_days\n    \n    # Days B requires to finish the remaining job\n    days_B = remaining_work / B_rate\n    \n    return days_B\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    ans = 265 * 30\n    return ans\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    people = 100\n    side = int(people ** 0.5)\n    outer_people = 4 * side - 4  # Subtracting 4 to avoid counting corners twice\n    return outer_people\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # common difference (second term minus first term)\n\n    # The formula for the n-th term of an arithmetic sequence: a_n = a_1 + (n - 1) * d,\n    # we solve a_n < 0 for n to find when the term becomes negative\n    n = 0\n    term = first_term\n    while term > 0:\n        n += 1\n        term = first_term + (n - 1) * difference\n    \n    return n - 1  # subtract 1 because we want the term before it gets negative\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x represent the original amount of money Hugo had\n    x = symbols('x')\n    \n    # After giving 3/7 of his cash to his sister, he's left with 4/7\n    remaining_after_sister = 4/7 * x\n    \n    # After giving 1/8 of the remaining cash to his mum, he's left with 7/8 of that remainder\n    remaining_after_mum = 7/8 * remaining_after_sister\n\n    # The equation representing the money he's left with\n    equation = Eq(remaining_after_mum, 280)\n\n    # Solve the equation for x\n    original_amount = solve(equation, x)\n\n    return original_amount[0]\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Tom's winning strategy involves ensuring that with each of his turns,\n    # the total number of cards left in both piles is always a multiple of the nim-sum (XOR) of the pile sizes.\n    # In this case, he should ensure that after his turn, the number of cards in both piles is a multiple of 4.\n    # Initial nim-sum (XOR) of pile sizes\n    nim_sum = 88 ^ 52\n\n    # If nim-sum is 0, then there's no winning strategy, \n    # but we know there is a winning strategy since 88 is not equal to 52\n    if nim_sum == 0:\n        return \"No winning strategy\"\n\n    # Find a move that makes nim-sum of the new configuration 0\n    for cards_to_take_from_A in range(1, 89):\n        if (88 - cards_to_take_from_A) ^ 52 == 0:\n            return ('A', cards_to_take_from_A)\n\n    for cards_to_take_from_B in range(1, 53):\n        if 88 ^ (52 - cards_to_take_from_B) == 0:\n            return ('B', cards_to_take_from_B)\n\n    return \"No winning strategy\"\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n    \n    total_balls = 34\n    \n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    equation3 = Eq(red + white + black, total_balls)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Since at least one student gets at least 3 apples,\n    # we can start by giving 3 apples to one student.\n    apples_left = 80 - 3\n\n    # After giving away 3 apples, we are left with apples_left apples,\n    # which we need to distribute to the rest of the class.\n    # Each student must get at least 1 apple.\n    # The problem now reduces to counting the maximum number of students\n    # that can receive at least one apple.\n    # If each of the remaining students gets at least one apple then \n    # the class size is 1 (for the student who got 3 apples) + apples_left.\n\n    class_size = 1 + apples_left\n\n    return class_size\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n\n    amount_per_person = total_amount / people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # For finding the last digit of a factorial, any number factorial greater than 4 will end in 0,\n    # because it will contain the factor 2 and 5, whose multiplication gives 10.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    frac = 4 / 50\n    percentage = frac * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5**2  # Area of the square base without the hole\n    hole_area = 1*1  # Area of the square hole\n    effective_base_area = base_area - hole_area  # Area of the base with the hole subtracted\n    volume_of_prism = 480  # Given volume of the prism with the hole\n\n    # Volume of a prism is area of base times height, so we solve for the height\n    height_of_prism = volume_of_prism / effective_base_area\n\n    return height_of_prism\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total = sum(i * (2 * i - 1) for i in range(1, 11))\n    return total\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n    pencils_per_pen = pen_cost // pencil_cost\n    return pencils_per_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 6  # Divide by the number of permutations of 3 numbers\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left_with_henry = 16\n\n    total_marbles = marbles_given_to_brother + (2 * marbles_given_to_each_sister) + marbles_left_with_henry\n\n    return total_marbles\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    # Let the initial number of yellow beads be 3y and the initial number of green beads be 2y.\n    y = symbols('y')\n  \n    # After buying more beads, the yellow beads become 3y + 5,\n    # and the green beads become 2y + 20.\n  \n    # The new ratio of green to yellow beads is 3:2, so we set up the equation:\n    equation = Eq((2 * y + 20) / (3 * y + 5), 3/2)\n  \n    # Solve for y\n    solution = solve(equation, y)\n    y_value = solution[0]\n  \n    # Calculate the total number of beads he had at first\n    total_beads = 3 * y_value + 2 * y_value\n  \n    return total_beads\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    sum = 0\n    for a in range(1, 21):\n        b = a - 1\n        sum += a ** 2 - b ** 2\n    \n    return sum\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    time_to_meet = 4\n\n    # Calculate the distance each has travelled\n    amy_distance = amy_speed * time_to_meet\n    christen_distance = christen_speed * time_to_meet\n\n    # Total distance between the two starting points\n    total_distance = amy_distance + christen_distance\n\n    # Time it takes for Christen to reach Amy's starting point\n    time_for_christen_to_amy = total_distance / christen_speed\n\n    return time_for_christen_to_amy\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    result = 2570 / 10000\n    return result\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n    for perm in permutations(digits, 4):\n        if perm[3] in ['0', '6', '8'] and perm[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    correct_marks = 4\n    wrong_deduction = -1\n    total_score = 110\n\n    # Let x be the number of correct answers, hence (total_questions - x) is the number of wrong answers\n    # The equation is: x*correct_marks + (total_questions - x)*wrong_deduction = total_score\n    # 4x + (50 - x)*(-1) = 110\n    # 4x - 50 + x = 110\n    # 5x = 160\n    # x = 32\n\n    x = (total_score + total_questions * abs(wrong_deduction)) // (correct_marks + abs(wrong_deduction))\n\n    return x\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n\n    # The ratio of lemon to chocolate cakes is 4:5, which means 4 parts lemon and 5 parts chocolate.\n    ratio_total_parts = 4 + 5\n    lemon_cakes = (4 / ratio_total_parts) * remaining_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    \n    # Count numbers with format AAB (two similar, one different)\n    for A in range(1, 10):  # Hundreds place (no leading zero)\n        for B in range(0, 10):  # One's place\n            if A != B:\n                count += 1  # Tens place is the same as hundreds, only ones can vary\n\n    # Count numbers with format ABB (one different, two similar)\n    for A in range(1, 10):  # Hundreds place (no leading zero)\n        for B in range(0, 10):  # Tens and one's place\n            if A != B:\n                count += 1  # When tens and ones are similar and differ from hundreds\n                \n    # No need for format ABA as it is covered by AAB and ABB counts\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Lily sends\n    x = symbols('x')\n    # Let L be the initial number of books Lily has\n    # Let J be the initial number of books Judy has\n    L, J = symbols('L J')\n\n    # After giving x books, both will have the same amount\n    equation1 = Eq(L - x, J + x)\n\n    # Since we are looking for the difference in the number of books they originally had\n    equation2 = Eq(L - J, x)\n\n    # Solving the two equations for the difference x\n    solution = solve((equation1, equation2), (L, J, x))\n\n    return solution[x]\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # First pass: Lily has 2 choices, pass to Cici or April\n    ways_first_pass = 2\n    \n    # Second pass: Whoever receives the first pass has 2 choices again, \n    # because they can't pass back to the one who passed to them.\n    ways_second_pass = 2\n    \n    # Total passing ways\n    total_ways = ways_first_pass * ways_second_pass\n    \n    return total_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    assignments = 4\n    average_score = 89\n    fifth_score = 94\n    \n    total_score_first_four_assignments = average_score * assignments\n    total_score_all_five_assignments = total_score_first_four_assignments + fifth_score\n    new_average = total_score_all_five_assignments / (assignments + 1)\n    \n    return new_average\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chloe, david, emily = symbols('chloe david emily')\n    alan = 74\n    bilal = 86\n    \n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n    \n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibbles = 11\n    total_arms = 81\n    wibble_arms = 6\n    wobble_arms = 5\n    \n    total_wibble_arms = wibbles * wibble_arms\n    remaining_arms_for_wobbles = total_arms - total_wibble_arms\n    number_of_wobbles = remaining_arms_for_wobbles // wobble_arms\n    \n    return number_of_wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 180))  # Generating all primes less than 180\n\n    for a in primes:\n        for b in primes:\n            if 7 * a + 9 * b == 179:\n                return a + b\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):  # hundreds place cannot be zero in a 3-digit number\n        for tens in range(10):  # tens place can be zero\n            for ones in range(10):  # ones place can be zero\n                if (hundreds + tens + ones == 15 and \n                    tens == 2 * hundreds and \n                    hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    return 420 * 0.15\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    minutes_in_fraction = 32 * (1/8) * (1/6) * (1/4)\n    seconds_in_fraction = minutes_in_fraction * 60\n    return int(seconds_in_fraction)\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Convert 24 minutes to hours\n    time_maverick_thinks = 24 / 60  # in hours\n\n    # Speed of Maverick and Kelvin\n    speed_maverick = 15  # in km/h\n    speed_kelvin = 10  # in km/h\n\n    # Calculate the distance Maverick thinks he covered in 24 minutes\n    distance_maverick_thinks = time_maverick_thinks * speed_maverick\n\n    # Calculate the distance Kelvin would cover in 24 minutes\n    distance_kelvin_in_same_time = time_maverick_thinks * speed_kelvin\n\n    # Calculate the relative speed\n    relative_speed = speed_maverick - speed_kelvin\n\n    # Calculate the actual distance between them initially\n    actual_initial_distance = 10  # in km\n\n    # Calculate the actual time it takes Maverick to catch up with Kelvin\n    actual_time_to_catch_up = actual_initial_distance / relative_speed  # in hours\n\n    # Check if Maverick is correct or not\n    if distance_maverick_thinks + distance_kelvin_in_same_time >= actual_initial_distance:\n        return time_maverick_thinks * 60  # Maverick was correct, return time in minutes\n    else:\n        return actual_time_to_catch_up * 60  # Kelvin was correct, return time in minutes\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Define the custom operation based on the provided definition\n    # a # b = a + b - (a * b) / 910\n    def custom_operation(a, b):\n        return a + b - (a * b) / 910\n    \n    # Start the evaluation with the last number in the sequence\n    result = 1\n    \n    # Apply the custom operation to each number in the sequence in descending order\n    for i in range(2, 2017):\n        result = custom_operation(i, result)\n        \n    # Return the completed operation's result\n    return result\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    # Pip's mistake is that he used addition instead of multiplication for independent events\n    # To correct this, we should multiply the number of ways to choose a boy and a girl\n    ans = boys * girls \n    return ans\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "from math import comb\n\ndef solution():\n    total_erasers = 6\n    kids = 3\n    # Since each kid gets at least one eraser, distribute one eraser to each kid first\n    remaining_erasers = total_erasers - kids\n    # This problem now becomes a stars and bars problem (partitioning remaining erasers)\n    # Number of ways = Combination(remaining_erasers + kids - 1, remaining_erasers)\n    count = comb(remaining_erasers + kids - 1, remaining_erasers)\n    return count\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    marks_correct = 5\n    marks_wrong = -2\n    total_score = 23\n\n    # Hypothesis: Let x be the number of questions answered correctly\n    for x in range(0, total_questions + 1):\n        # Then, the number of questions answered wrongly would be the rest\n        wrong_questions = total_questions - x\n        # Calculate the score based on the hypothesis\n        score = (x * marks_correct) + (wrong_questions * marks_wrong)\n        # Check if the hypothesis is correct\n        if score == total_score:\n            return x\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    total_distance_plum = 4 * (41 - 1)\n    number_of_pine_trees = (total_distance_plum // 5) + 1\n    return number_of_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the two unknown ages\n    younger, older = symbols('younger older')\n\n    # Write out the system of equations based on the given information\n    equation1 = Eq(older - younger, younger - 4)\n    equation2 = Eq(older + (older - younger), 61)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (younger, older))\n\n    # Return the age of the younger person\n    return solutions[younger]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    hours_initial = 9\n    people_initial = 10\n    hours_required = 3\n\n    # Using the inverse operation method\n    people_required = (hours_initial / hours_required) * people_initial\n    \n    return int(people_required)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    bag_cost = 120\n    remaining_after_book_fraction = 2 / 5\n    \n    # The remaining money after buying the book is the total cost of the bag \n    # divided by the fraction spent on the bag.\n    remaining_after_book = bag_cost / remaining_after_book_fraction\n\n    # The money spent on the book is 1/3 of the original amount,\n    # which means the remaining money after buying a book is 2/3 of the original amount.\n    original_money = remaining_after_book / (2 / 3)\n\n    return original_money\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    \n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.6)\n    total_watermelons = remaining_after_first_day / (1 - 1/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    # Your specific sequence is from 5 to 15, so we use the formula for the sum of squares up to 15\n    # and subtract the sum of squares up to 4 to get the sum from 5 to 15.\n    n1 = 15\n    sum_to_n1 = (n1 * (n1 + 1) * (2 * n1 + 1)) // 6\n    \n    n2 = 4\n    sum_to_n2 = (n2 * (n2 + 1) * (2 * n2 + 1)) // 6\n    \n    ans = sum_to_n1 - sum_to_n2\n    return ans\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):\n            for x3 in range(x2 + 1, 9):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    desks_between_jessica_and_judy = 1  # Since Jessica sits in front of Judy, there is one desk where Jessica sits.\n\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy\n\n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    for boys in range(152):\n        girls = 152 - boys\n        if boys - boys / 11 == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.75 * x - 5, 2.5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start = 1000\n    difference = -11\n    term = 0\n    current_number = start\n    \n    while current_number >= 0:\n        term += 1\n        current_number += difference\n    \n    first_negative = start + (term * difference)\n    return first_negative\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    mid_point = 0.126\n    one_number = 0.11\n    difference = mid_point - one_number\n    other_number = mid_point + difference\n\n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n    sweets_each = total_sweets // classmates\n\n    return sweets_each\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates_to_toffees_ratio = 12 / 7\n    number_of_chocolates = 72\n\n    number_of_toffees = number_of_chocolates / chocolates_to_toffees_ratio\n\n    return int(number_of_toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for number in range(28, 41):\n        if number % 4 == 0 and 9 in set(factors(number)):\n            return number\n\ndef factors(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    cost_of_mangoes = 24 * 56\n    cost_of_lychees = 2826 - cost_of_mangoes\n    price_per_lychee_box = cost_of_lychees / 19\n    return price_per_lychee_box\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_values = [1, 2, 5]\n    totals = set()\n\n    for coin1 in coin_values:\n        for coin2 in coin_values:\n            for coin3 in coin_values:\n                totals.add(coin1 + coin2 + coin3)\n\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        # Construct the numbers from the digits\n        num1 = int(f\"{A}{B}{8}{3}\")\n        num2 = int(f\"{9}{C}5\")\n        # Perform the multiplication\n        product = num1 * num2\n        # Construct the product string from the digits and placeholders\n        prod_str = f\"{8}{A}{B}{8}{3}{0}\"\n        # Check if the product matches the pattern\n        if str(product) == prod_str:\n            return A + B + C\n    return None\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage_as_decimal = 65 / 100\n    decimal_number = 0.507\n    fraction_as_decimal = 1 / 4\n\n    ans = percentage_as_decimal + decimal_number + fraction_as_decimal\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "def solution():\n    from itertools import permutations\n    \n    cards = ['1', '1', '2', '2']\n\n    # Create all permutations of the cards without repeated permutations\n    perms = set(permutations(cards, 3))\n\n    # Filter out permutations that do not start with '0' (as they are digits)\n    valid_numbers = set(filter(lambda x: x[0] != '0', perms))\n\n    # Make sure counts only unique three-digit numbers\n    unique_numbers = len(valid_numbers)\n\n    return unique_numbers\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # In a multiplication tiling puzzle, the digits P, Q, R must satisfy the multiplication pattern.\n    # We deduce the pattern through logical reasoning based on the multiplication rules.\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                if (P*100 + Q*10 + R) * 3 == (Q*100 + R*10 + P):\n                    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Variables for prices\n    price_without_name = 10\n    price_with_name = 15\n\n    # Total payment\n    total_payment = 555\n\n    # Hypothesis: If all the shirts were bought without a name, calculate the difference\n    cost_if_all_without_name = 50 * price_without_name\n    extra_payment = total_payment - cost_if_all_without_name\n\n    # Difference per child to add a name\n    difference_per_child = price_with_name - price_without_name\n\n    # Calculate the number of children who paid to have their name put on the shirt\n    children_with_name = extra_payment / difference_per_child\n\n    return int(children_with_name)\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    jog_time = 1  # time from 7:30 AM to 8:30 AM in hours\n    walk_time = 2  # time from 8:30 AM to 10:30 AM in hours\n\n    jog_speed = 5  # Susan's jogging speed in miles per hour\n    walk_speed = 3  # Susan's walking speed in miles per hour\n\n    jog_distance = jog_speed * jog_time\n    walk_distance = walk_speed * walk_time\n\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the smallest number be x\n    # Since there are five consecutive numbers, they can be represented as:\n    # x, x+1, x+2, x+3, x+4\n    # According to the question, their sum is 100:\n    # x + (x+1) + (x+2) + (x+3) + (x+4) = 100\n    # Simplifying the equation:\n    # 5x + 10 = 100\n    # 5x = 90\n    # x = 18\n    # So the smallest number is 18.\n    smallest_number = (100 - 10) // 5\n    return smallest_number\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    # Find all factors of 44000\n    factors = []\n    for i in range(1, int(44000**(1/3)) + 1):\n        if 44000 % i == 0:\n            factors.append(i)\n    \n    # Find the cube factors\n    cube_divisors = []\n    for factor in factors:\n        if (44000 // factor)**(1/3) % 1 == 0:\n            cube_divisors.append(factor)\n    \n    # Since we need the largest q such that 44000/q is a cube\n    # we return the largest factor we have found\n    q = max(cube_divisors)\n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_large_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    \n    oranges_left = total_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    left_over = 2\n\n    bags_used = (total_balls - left_over) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # Since there are 4 patterns and we want at least 3 cards with the same number,\n    # we can draw 2 of each pattern without guaranteeing 3 of the same number.\n    \n    # Drawing 2 of each pattern gives us 2 * 4 = 8 cards without guaranteeing a triplet.\n    # The next card drawn guarantees at least 3 cards with the same number.\n    \n    # Therefore, the total number of cards drawn to guarantee 3 of the same number is:\n    cards_drawn = (2 * 4) + 1\n    \n    return cards_drawn\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # cards mapping: suit => values\n    cards = {\n        'spades': {'A', 'J', 'K'},\n        'hearts': {'3', '5', 'K'},\n        'diamonds': {'2', '7', 'J'},\n        'clubs': {'A', '7'}\n    }\n    \n    # Since Eddie still does not know the card after knowing the suit,\n    # the card cannot be unique in its suit.\n    non_unique_suits = {suit: values for suit, values in cards.items() if len(values) > 1}\n    \n    # Since Avril now knows the card after Eddie speaks, \n    # the card's number must be unique among all remaining possible numbers.\n    possible_numbers = set.union(*non_unique_suits.values())\n    unique_numbers = {number for number in possible_numbers \n                      if sum(number in values for values in non_unique_suits.values()) == 1}\n\n    # Find the card that is in the intersection of the unique numbers and the possible suits\n    for suit, values in non_unique_suits.items():\n        intersection = unique_numbers.intersection(values)\n        if intersection:\n            card = (suit, intersection.pop())\n            break\n    \n    # Return 'card' as a string with suit and number concatenated\n    return ''.join(card)\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    total_trees = 21\n    # Since trees are planted on both ends, we subtract 1 from total number of intervals\n    total_intervals = total_trees - 1\n    distance_between_trees = total_length / total_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Joey's incorrect steps, not using the right logic to find the initial number of notebooks.\n    \n    # Let's denote the notebooks Andy's sister has at first with `sister_notebooks`.\n    # According to the problem, when Andy gives his sister 38 notebooks, they have the same number:\n    # Andy's notebooks after giving = Andy's notebooks at first - 38\n    # sister_notebooks + 38 = Andy's notebooks after giving\n    #\n    # Plugging in Andy's initial number of notebooks, we get the equation:\n    # sister_notebooks + 38 = 149 - 38\n    \n    sister_notebooks = 149 - 38 - 38  # correct calculation\n    return sister_notebooks\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3 / 4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_trees = 9\n    number_of_intervals = number_of_trees + 1\n\n    distance_between_each_tree = distance_between_buildings / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    primes_count = 0\n    original_number = 200\n    # Convert to string to simplify digit manipulation\n    str_num = str(original_number)\n    \n    # Iterate over each digit in the number\n    for i in range(len(str_num)):\n        # Check all possible digits (0-9) except the original one\n        for digit in '0123456789':\n            if digit != str_num[i]:\n                # Create new number by replacing one digit\n                new_number = int(str_num[:i] + digit + str_num[i+1:])\n                # Check if the new number is prime\n                if isprime(new_number):\n                    primes_count += 1\n                    \n    return primes_count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # let the smaller number be x\n    # the larger number would be 2x (since it is twice the other)\n    # According to the problem, the sum of the two numbers is 72\n    # x + 2x = 72\n    # 3x = 72\n    # x = 72 / 3\n    x = 72 / 3\n    return x\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    # Mean of five numbers is 5, so the total sum of the numbers is 5 * 5 = 25\n    total_sum = 5 * 5\n    # Sum of the four provided numbers\n    sum_of_four_numbers = 3 + 4 + 6 + 10\n    # Subtracting the sum of four numbers from the total sum to find the fifth number\n    fifth_number = total_sum - sum_of_four_numbers\n    \n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    emily_count_from_front = 25 + 1  # Emily is behind Danny\n    danny_count_from_back = 14\n    total_people = emily_count_from_front + danny_count_from_back\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    total_sections = 5\n    time_per_section = 12 / 4\n    time_for_5_cuts = time_per_section * total_sections\n    \n    return int(time_for_5_cuts)\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days to finish the book, and y be the total number of pages\n    x, y = symbols('x y')\n\n    # If Vanessa reads 30 pages a day, she finishes in x+2 days\n    equation1 = Eq(30 * (x + 2), y)\n\n    # If she reads 39 pages a day, she finishes in x-4 days\n    equation2 = Eq(39 * (x - 4), y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the number of days and total pages\n    return solutions[x], solutions[y]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    page_count = 0\n    five_count = 0\n    while five_count < 30:\n        page_count += 1\n        if '5' in str(page_count):\n            five_count += str(page_count).count('5')\n    return page_count\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n\n    cost_per_cup = total_cost / num_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    # Define the coefficients for the equation\n    a = -3  # x coefficient on the left side of the equation\n    b = 7  # constant on the left side of the equation\n    c = 1  # x coefficient on the right side of the equation\n    d = -3  # constant on the right side of the equation\n    \n    # Solve for x using the corrected coefficients\n    x = (b - d) / (a - c)\n    \n    # Celeste's mistake was in moving the constants and coefficients.\n    # The right calculation is (7 - 3) = 3x, not (7 - 3) = 4x - x\n    return x\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    value = (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n    return value\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    workers = 2\n    total_rooms = 4\n\n    days = total_rooms / (rooms_per_day_per_worker * workers)\n\n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Kate buys 1 apple and 2 oranges for 48p\n    equation1 = Eq(apple + 2 * orange, 48)\n\n    # Jade buys 1 apple and 1 orange for 31p\n    equation2 = Eq(apple + orange, 31)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the equations\n    weekly_money, price_per_ball = symbols('weekly_money price_per_ball')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(weekly_money - 4 * price_per_ball, 27)\n    equation2 = Eq(weekly_money - 2 * price_per_ball, 151)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (weekly_money, price_per_ball))\n    \n    # Access the solution for the weekly_money\n    return solutions[weekly_money]\n\n# Final result call to the function\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_badges = total_badges * (3/8)\n    remaining_badges = total_badges - given_badges\n    return remaining_badges\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        num_str = str(number)\n        if num_str.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    # Equation representing the initial condition\n    equation1 = Eq(elias, 5 * aileen)\n    # Equation representing the final condition after changes\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    # Calculate the final number of stickers for Elias and Aileen\n    elias_final = solutions[elias] - 88\n    aileen_final = solutions[aileen] - 8\n\n    return elias_final, aileen_final\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    staircases = 3\n    total_steps = steps_per_staircase * staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    # Since Louis is also counted in the line, we subtract one to get the number of people in front of him.\n    people_in_front = total_people - people_behind - 1\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    total_pieces = 104\n    thomas_rate = 5\n    gerald_rate = 3\n    total_rate = thomas_rate + gerald_rate\n\n    thomas_pieces = (thomas_rate / total_rate) * total_pieces\n    gerald_pieces = (gerald_rate / total_rate) * total_pieces\n\n    difference = thomas_pieces - gerald_pieces\n\n    return int(difference)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    return sum(range(11, 32, 2))\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert the numbers from octal to decimal system\n    num1 = int('25', 8)\n    num2 = int('37', 8)\n\n    # Perform the addition in decimal system\n    decimal_sum = num1 + num2\n\n    # Convert the result back to the octal system\n    octal_sum = oct(decimal_sum)[2:]\n\n    return octal_sum\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8 / 11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    dividend = 3597\n    divisor = 11\n    quotient = dividend // divisor\n    \n    return quotient\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Define the cost and selling prices\n    cost_price = 150\n    selling_price = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let's find the break-even point, which is when profit equals 0.\n    # At break-even, proceeds = total cost.\n    # total_cost = cost_price * number_of_rackets\n    # proceeds = selling_price * (number_of_rackets - remaining_rackets)\n    # At profit, proceeds = total_cost + profit\n    # selling_price * (number_of_rackets - remaining_rackets) = cost_price * number_of_rackets + profit\n    # Let x be the number of rackets the shop purchased at first\n    # selling_price * (x - remaining_rackets) = cost_price * x + profit\n    \n    # Solving for x:\n    x = symbols('x')\n    equation = Eq(selling_price * (x - remaining_rackets), cost_price * x + profit)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of boys be 'b', number of girls be 'g', and number of adults be 'a'\n    b = symbols('b')\n    # Given there were 2/7 as many boys as girls\n    g = 7/2 * b\n    # Given there were 2/3 as many adults as children (boys + girls)\n    a = 2/3 * (b + g)\n    # Given there were 1228 more adults than boys\n    equation = Eq(a - b, 1228)\n    # Solve for the number of boys 'b'\n    solutions = solve(equation, b)\n    # Calculate the numbers for girls and adults based on the number of boys\n    b_value = solutions[0]\n    g_value = 7/2 * b_value\n    a_value = 2/3 * (b_value + g_value)\n\n    # Calculate the total number of people in the park\n    total_people = b_value + g_value + a_value\n\n    return total_people\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Define the difference in daily spending between Chloe and Gordon.\n    daily_difference = 25 - 20\n    \n    # Calculate how many more days Gordon can spend compared to Chloe based on their remaining money.\n    money_difference = 157 - 82\n    \n    # Calculate the number of days Gordon spent his money more than Chloe.\n    extra_days = money_difference // daily_difference\n    \n    # Calculate Gordon's initial amount of money.\n    initial_money_gordon = 82 + (extra_days + 1) * 25\n\n    return initial_money_gordon\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    ans = 813 * 72\n    return ans\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    circles = 10\n    regions = 1 + circles * (circles + 1) // 2\n    return regions\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    # Iterate through all possible combinations where x1, x2, x3 are distinct and positive\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):  # x2 must be greater than x1\n            for x3 in range(x2+1, 14):  # x3 must be greater than x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the initial total value of jewels in box P\n    # Let y represent the initial total value of jewels in box Q\n    x, y = symbols('x y')\n\n    # The initial average value of the jewels in box P is x/3\n    # The initial average value of the jewels in box Q is y/3\n\n    # After transferring a jewel worth 5000 from P to Q:\n    # The new total value of jewels in box P is x - 5000\n    # The new total value of jewels in box Q is y + 5000\n    # The new average value of the jewels in box P is (x - 5000) / 3\n    # The new average value of the jewels in box Q is (y + 5000) / 3\n\n    # According to the problem, the average value in each box increases by 1000\n    # So the new average for box P is (x/3) + 1000 and for box Q is (y/3) + 1000\n\n    # Set up the equations\n    equation1 = Eq((x - 5000) / 3, (x / 3) + 1000)\n    equation2 = Eq((y + 5000) / 3, (y / 3) + 1000)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total value of all 6 jewels is the initial total values of x (in box P) and y (in box Q)\n    total_value = solutions[x] + solutions[y]\n\n    return total_value\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons // 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.50\n    total_sales = remaining_melons * selling_price_per_melon\n    \n    profit = total_sales - cost_price\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    oranges = 150\n    apples = 100\n    orange_remainder = 17\n    apple_remainder = 5\n    \n    oranges_to_divide = oranges - orange_remainder\n    apples_to_divide = apples - apple_remainder\n    \n    for i in range(1, min(oranges_to_divide, apples_to_divide) + 1):\n        if oranges_to_divide % i == 0 and apples_to_divide % i == 0:\n            neighbours = i\n    return neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # The line measures 10cm\n    cross_interval = 1  # Cross every 1 cm\n\n    # The number of crosses is the length of the line divided by the interval\n    # plus one for the cross at the very beginning\n    num_crosses = (line_length // cross_interval) + 1\n\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6\n    green_balloons_in_pattern = 2\n    balloons_count = 75\n    \n    full_patterns, remaining_balloons = divmod(balloons_count, pattern_length)\n    ans = full_patterns * green_balloons_in_pattern\n    \n    if remaining_balloons > 2:\n        ans += 1\n    if remaining_balloons == 6:\n        ans += 1\n    \n    return ans\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be the original number of Sandra's marbles and j be the original number of Jessica's marbles\n    s, j = symbols('s j')\n    \n    # Equation representing the transfer of marbles\n    equation1 = Eq(s - 13, j + 13 - 6)\n    \n    # Equation representing Sandra had more marbles initially\n    equation2 = Eq(s, j + (s - j))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, j))\n\n    # The difference in the number of marbles Sandra had in the beginning compared to Jessica\n    initial_difference = solutions[s] - solutions[j]\n\n    return initial_difference\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_1_to_6 = 60\n    number_of_intervals_1_to_6 = 6 - 1\n    distance_per_interval = distance_1_to_6 / number_of_intervals_1_to_6\n\n    number_of_intervals_1_to_9 = 9 - 1\n    distance_1_to_9 = distance_per_interval * number_of_intervals_1_to_9\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n    num_teams = 3\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    \n    return strawberries_left\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    candy_per_friend = 26\n    number_of_friends = 7\n    kate_left_candy = 22\n    shared_candy = candy_per_friend * number_of_friends\n    total_candy_at_school = shared_candy + kate_left_candy\n    total_candy_initially = total_candy_at_school * 3\n\n    return total_candy_initially\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_floor_when_bob_at_5th = 9\n    top_floor = 25\n\n    bob_floor_when_andy_at_top = (5 * top_floor) / andy_floor_when_bob_at_5th\n\n    return int(bob_floor_when_andy_at_top)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    total_ones = 15\n    total_twos = 14\n\n    # Start counting digits 1 and 2 in number from 1, until it matches 15 and 14 times respectively\n    ones_count = 0\n    twos_count = 0\n    number = 0\n    \n    # Increase the number until we have used the digit 1 fifteen times\n    while ones_count < total_ones or twos_count < total_twos:\n        number += 1\n        ones_count += str(number).count('1')\n        twos_count += str(number).count('2')\n\n    return number\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    m = symbols('m')\n    equation = Eq(10 * 12 + m, 9 * (10 + m) - 2)\n    solution = solve(equation, m)\n    return solution[0]\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    # Let the total number of words be W\n    # Let the original speed be S words per minute\n    # James can finish the work in 3 minutes, so W = 3 * S\n    # With a speed of S + 30 words per minute, he can finish 1 minute earlier\n    # So W = (3 - 1) * (S + 30)\n    # Now we have two equations:\n    # W = 3S\n    # W = 2(S + 30)\n    # We can equate them to find S:\n    # 3S = 2(S + 30)\n    # 3S = 2S + 60\n    # S = 60 words per minute\n    # Substitute S back into the first equation to find W:\n    # W = 3 * 60 = 180 words\n\n    # Speed of typing in words per minute\n    S = 60\n    # Total number of words\n    W = 3 * S\n    \n    return W\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    # Initially all lights are off, which we can represent with 0 (off) and 1 (on)\n    lights_status = [0] * 10  # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n    # Ms. Lily presses every other light switch starting with 1\n    for i in range(0, 10, 2):\n        lights_status[i] = 1 if lights_status[i] == 0 else 0\n\n    # Sam presses each even numbered switch 7 times\n    # Since pressing an even number switch 7 times would not \n    # change its initial state (because an even number of presses \n    # brings it back to the original state), the state remains the same.\n\n    # Count the lights that are on\n    count_on = sum(lights_status)\n\n    return count_on\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # Initial amount in A is (2/3) of B\n    eq1 = Eq(A, 2/3 * B)\n    \n    # After 4 liters moved, A has (7/8) of B\n    eq2 = Eq(A + 4, 7/8 * (B - 4))\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (A, B))\n    \n    # Total amount in both pails is A + B\n    total_water = solutions[A] + solutions[B]\n    \n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    climb_up = 3\n    slide_down = 2\n    progress_per_day = climb_up - slide_down\n    \n    # Except for the last day, every day the worm climbs up a net distance of 1 metre.\n    days = (total_distance - climb_up) // progress_per_day\n    \n    # Add one day to represent the last day of climbing without sliding down at night.\n    days += 1\n    \n    return days\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * number_of_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    total_parts_needed = 100\n    parts_made = 20\n    hours_passed = 2\n    current_rate = parts_made / hours_passed\n    remaining_parts = total_parts_needed - parts_made\n    additional_hours_needed = remaining_parts / current_rate\n    eddy_correct = additional_hours_needed == 10\n    return additional_hours_needed if not eddy_correct else \"Eddy is correct\"\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # in ml\n    initial_sugar_percentage = 6  # 6%\n    target_sugar_percentage = 10  # 10%\n    \n    # Calculate the amount of sugar in the initial solution\n    initial_sugar_content = (initial_sugar_percentage / 100) * initial_volume\n    \n    # Let 'x' be the amount of sugar to be added to reach 10% sugar concentration\n    # (initial_sugar_content + x) / (initial_volume + x) = target_sugar_percentage / 100\n    \n    # Rearrange the equation: (initial_sugar_content + x) = (target_sugar_percentage / 100) * (initial_volume + x)\n    # Solve for 'x'\n    x = (target_sugar_percentage * initial_volume - 100 * initial_sugar_content) / (100 - target_sugar_percentage)\n    \n    return x\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # We try to get the worst case scenario by picking the same color balls\n    # If we pick 5 red and 5 white, we still don't have 3 different colors\n    # So, when we pick one more (which will be yellow), we will definitely have 3 different colors\n    # Therefore, the number of balls to draw is 5 (red) + 5 (white) + 1 (yellow)\n    worst_case_draws = 5 + 5 + 1\n    return worst_case_draws\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    from math import comb\n\n    # Since we can have glass balls of 5 different colors and \n    # each person takes 2 balls, the number of different combinations \n    # for a single person is 5 choose 2 (which are the ways of choosing \n    # 2 colors from 5 colors) plus 5 (which are the ways of taking both \n    # balls of the same color).\n    combinations_for_one_person = comb(5, 2) + 5\n\n    # To guarantee that at least two people have taken out the same \n    # kind of balls (same color combination), we need one more person \n    # than the possible combinations. This follows from the pigeonhole \n    # principle.\n    minimum_people = combinations_for_one_person + 1\n\n    return minimum_people\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    # Let x be the initial number of cards Hisham had.\n    # Since Melissa had twice as many cards as Hisham, Melissa had 2x cards.\n    # The total number of cards is 876.\n    # Hence, Hisham's cards (x) plus Melissa's cards (2x) equal to 876:\n    # x + 2x = 876\n    # 3x = 876\n    # x = 876 / 3\n    # x = 292\n    # Melissa had 2x = 2 * 292 = 584 cards initially.\n    # To have the same number, both should have 876 / 2 = 438 cards.\n    # Therefore, Melissa should give cards equal to her initial 584 minus 438. \n    \n    hisham_initial = 876 / 3\n    each_final = 876 / 2\n    melissa_give = hisham_initial * 2 - each_final\n\n    return int(melissa_give)\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    \n    common_difference = (third_term - first_term) // 2\n    \n    return common_difference\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # In order to ensure that we have two numbers whose product is divisible by 4,\n    # we should consider the worst-case scenario where we pick the maximum number\n    # of odd numbers before we are forced to pick a number that makes the product\n    # divisible by 4.\n\n    # There are 16 odd numbers between 10 and 41 (inclusive).\n    # We can pick all these odd numbers and none of their products would be divisible by 4.\n    max_odd_picks = 16\n\n    # The worst-case scenario is that we pick all odd numbers first, and then we pick\n    # an even number. As even numbers can be either divisible by 4 (4k type) or not divisible\n    # by 4 (2(2k+1) type), we should consider picking the one not divisible by 4.\n\n    # There are 16 even numbers between 10 and 41 (inclusive), and half of them\n    # are divisible by 4.\n    max_even_not_divisible_by_4 = 8\n\n    # In the worst case, we'll pick all odd numbers first and then an even number that's not\n    # divisible by 4. The next number we pick, whether it's odd or even, will ensure that\n    # we have a pair of numbers whose product is divisible by 4.\n    # Therefore, we need to pick at least one more number.\n\n    ans = max_odd_picks + max_even_not_divisible_by_4 + 1\n\n    return ans\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert the total length into cm (2 m 20 cm = 220 cm)\n    each_piece_length = total_length_cm / 2  # Divide by 2 to get the length of each piece\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = 0\n    for i in range(50, 45, -1):\n        ans += i * (100 - i)\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import isprime\n    from math import sqrt\n\n    # Find the smallest two-digit prime number\n    smallest_prime = next(i for i in range(10, 100) if isprime(i))\n\n    # Find the largest two-digit square number\n    largest_square = int(sqrt(99)) ** 2\n\n    # Calculate the product\n    product = smallest_prime * largest_square\n\n    return product\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian is 14, his father is 41, the difference is 27 years\n    age_difference = 27\n    # start from Brian's current age (14) and go up to a reasonable limit (100)\n    for brian_age in range(15, 100):\n        father_age = brian_age + age_difference\n        # If reverse of Brian's age is equal to father's age, we found the answer\n        if int(str(brian_age)[::-1]) == father_age:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar_rate = 1 / 0.96\n    coffee_price_euros = 4.8\n\n    coffee_price_dollars = coffee_price_euros * euro_to_dollar_rate\n\n    return coffee_price_dollars\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "def solution():\n    from itertools import permutations\n\n    max_N = None\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        N = a + (b / c) + ((d / e) * f) - (g + (h / j))\n\n        if N == int(N):  # N is a whole number\n            if max_N is None or N > max_N:\n                max_N = N\n\n    return int(max_N)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    max_product = 0\n    for combination in combinations_with_replacement(range(1, 20), 3):\n        if sum(combination) == 19:\n            max_product = max(max_product, combination[0] * combination[1] * combination[2])\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    # Number of juniors and seniors\n    juniors = 12\n    seniors = 8\n\n    # Average scores\n    avg_juniors = 10\n    avg_total = 14\n\n    # Calculate total score for juniors and all participants\n    total_score_juniors = avg_juniors * juniors\n    total_score_all = avg_total * (juniors + seniors)\n\n    # Calculate total score for seniors\n    total_score_seniors = total_score_all - total_score_juniors\n\n    # Calculate average score for seniors\n    avg_seniors = total_score_seniors / seniors\n\n    return avg_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    rounded_number = 9700\n    smallest_possible_number = rounded_number - 50\n    return smallest_possible_number\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    # Initial number of books\n    total_books = 3900\n    new_books = 510\n    \n    # Ratio of books\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n    \n    # Calculating the original number of books for each language\n    orig_chinese_books = (ratio_chinese / total_ratio) * total_books\n    orig_malay_books = (ratio_malay / total_ratio) * total_books\n    orig_english_books = (ratio_english / total_ratio) * total_books\n    \n    # Increase in the number of Chinese and Malay books\n    increased_chinese_books = orig_chinese_books * 0.20\n    increased_malay_books = orig_malay_books * 0.10\n    \n    # Total increased books except for English books\n    total_increased_books = increased_chinese_books + increased_malay_books\n    \n    # Remaining books are all English books\n    increased_english_books = new_books - total_increased_books\n    \n    # Percentage increase in the number of English books\n    percentage_increase_english = (increased_english_books / orig_english_books) * 100\n    \n    return percentage_increase_english\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    combined_past_age = 10\n    combined_future_age = combined_past_age + 2*(2 + 4)  # Every dog ages 2 years (4 years total for 2 dogs) from 4 years ago to now, plus another 2 years for each dog.\n    return combined_future_age\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_answers_percentage = 60\n    correct_answer_marks = 5\n    wrong_answer_penalty = 2\n    unanswered_question_marks = 1\n    total_score = 264\n    \n    correct_answers = (total_questions * correct_answers_percentage) / 100\n    wrong_answers = total_questions - correct_answers\n    unanswered_questions = total_questions - correct_answers\n\n    # Let x be the number of correct answers, we then have the following equation\n    # 5x - 2(wrong_answers) + unanswered_questions = total_score\n    # 5x - 2(total_questions - x) + (total_questions - x) = total_score\n    # After rearranging the equation: \n    # 5x - 2(total_questions - x) + (total_questions - x) = total_score\n    # 5x - 2*total_questions + 2x + total_questions - x = total_score\n    # 5x + 2x - x = total_score + 2*total_questions - total_questions\n    # 6x = total_score + total_questions\n    # x = (total_score + total_questions) / 6\n    \n    x = (total_score + total_questions) / 6\n    return x\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * 10**-2021\n    denominator = 92 * 10**-2023\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_per_gram = 160 / 50\n    grams_needed_for_300_cookies = 300 / cookies_per_gram\n    return grams_needed_for_300_cookies\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    # By Pigeonhole Principle, to ensure at least one container has 2 apples,\n    # we can fill 9 containers with 1 apple each, and the remaining apples go into the 10th container.\n    # To have the least number of apples, we only need 1 apple in the 10th container as well.\n    # But since we need at least 2 apples in one container, we add one more apple to the total.\n    # So we have 9 containers with 1 apple each, and 1 container with 2 apples.\n    min_apples = (containers - 1) + 2\n\n    return min_apples\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    unit_digit = 0\n    num_digits = 0\n    \n    for i in range(1, 10000):  # Iterating up to a reasonably high number to exceed 1000 digits\n        num_digits += len(str(i))\n        if num_digits >= 1000:\n            unit_digit = int(str(i)[1000 - num_digits + len(str(i)) - 1])\n            break\n\n    return unit_digit\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    not_attempted = 1\n    attempted_questions = total_questions - not_attempted\n    score_for_correct = 4\n    score_for_incorrect = -2\n    total_score = 66\n\n    # Let the number of correct answers be x.\n    # Then, the number of incorrect answers is (attempted_questions - x).\n    # The total score is calculated as follows: x * score_for_correct + (attempted_questions - x) * score_for_incorrect = total_score\n\n    for correct_answers in range(attempted_questions + 1):\n        incorrect_answers = attempted_questions - correct_answers\n        score = (correct_answers * score_for_correct) + (incorrect_answers * score_for_incorrect)\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra_original, timm_original = symbols('dedra_original timm_original')\n    \n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(dedra_original, 4 * timm_original)\n    \n    # Both received $72 each\n    dedra_now = dedra_original + 72\n    timm_now = timm_original + 72\n    \n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(dedra_now, 2 * timm_now)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dedra_original, timm_original))\n\n    return solutions[dedra_original]\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(3 * square - 2, 19)\n    solutions = solve(equation, square)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    only_A = A - AC - AE + ACE\n    only_C = C - AC - CE + ACE\n    only_E = E - AE - CE + ACE\n    only_AC = AC - ACE\n    only_AE = AE - ACE\n    only_CE = CE - ACE\n    all_three = ACE\n\n    total_unique_fruits = only_A + only_C + only_E + only_AC + only_AE + only_CE + all_three\n    return total_unique_fruits\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    ans = permutations(18, 3)\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 to exclude Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n\n    months = debt / monthly_salary\n\n    return months\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_age = 4\n    jason_age, bruce_age, willie_age = symbols('jason bruce willie')\n\n    # Bruce and Willie are of the same age as Jason\n    eq1 = Eq(bruce_age, jason_age)\n    eq2 = Eq(willie_age, jason_age)\n\n    # The total age of the 4 children is 19 years\n    eq3 = Eq(jack_age + jason_age + bruce_age + willie_age, 19)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (jason_age, bruce_age, willie_age))\n\n    return solutions[jason_age]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    erasers_given_for_5 = 3\n    erasers_needed_for_6 = 2\n    erasers_difference = 5 + 2\n\n    # If Andy gives 5 erasers to each friend, he has 3 erasers left,\n    # if Andy gives 6 erasers to each friend, he is short of 2 erasers.\n    # This means there is one friend he cannot give 6 erasers to.\n    # Therefore the difference in total erasers is the number of friends + the 3 he has left when giving 5 each,\n    # + the 2 he is short of when giving 6 each which is equivalent to 5 erasers.\n\n    num_friends = (erasers_difference - erasers_given_for_5) // (6 - 5)\n\n    total_erasers = num_friends * 5 + erasers_given_for_5\n\n    return total_erasers\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for Jake's and John's current ages\n    jake, john = symbols('jake john')\n\n    # Now let's write down the equations based on the problem statement\n    equation1 = Eq(jake + john, 44)      # The sum of their ages is 44\n    equation2 = Eq(jake + 14, 2*(john + 14))  # In 14 years, Jake will be twice as old as John\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # We want to find how old will John be in 14 years\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    number_of_years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** number_of_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the age of the youngest child be 'y'\n    y = symbols('y')\n    \n    # Since ages of the children are at regular intervals of 15 months,\n    # and oldest is now six times as old as the youngest,\n    # the age of the oldest will be y + 15*(9-1) months (converted to years by dividing by 12)\n    # 6 * y is the age of the oldest as given in the problem\n    \n    # Set up the equation based on the description provided\n    equation = Eq(y + 15*(9-1)/12, 6*y)\n    \n    # Solve the equation to find 'y'\n    age_of_youngest = solve(equation, y)[0]\n\n    return age_of_youngest\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Assume variables to hold the smallest result and optimal bracket positions\n    smallest_result = float('inf')\n    bracket_positions = ()\n\n    # Generate all possible combinations of two pairs of brackets\n    # There are 5 possible positions for brackets in the given expression\n    # Positions: (0, 15+5) (1, 5*5) (2, 5+15) (3, 15-6) (4, 6+7)\n    for i in range(5):\n        for j in range(i+2, 6): # Start from i+2 to not immediately close a bracket\n            for m in range(j, 6): # Brackets don't have to be nested\n                for n in range(m+2, 7): # Same reason as above\n                    # We can't overlap brackets, hence the minimum distance of 2 between each\n                    expr = [15, '+', 5, '*', 5, '+', 15, '-', 6, '+', 7]\n                    expr.insert(2*i+1, '(') # Insert the first opening bracket\n                    expr.insert(2*j+3, ')') # Insert the first closing bracket\n                    expr.insert(2*m+5, '(') # Insert the second opening bracket\n                    expr.insert(2*n+7, ')') # Insert the second closing bracket\n                    # Join the expression into a string and evaluate\n                    result = eval(''.join(map(str, expr)))\n                    # If this result is smaller than the smallest_result, store it\n                    if result < smallest_result:\n                        smallest_result = result\n                        bracket_positions = (i, j, m, n)\n\n    # We return the result along with the bracket positions as a check \n    # (actually not needed for the solution, but included for completeness)\n    return smallest_result, bracket_positions\n\nans, bracket_positions = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    ans = round(sum((i**2 + (i+1)**2)/(i*(i+1)) for i in range(1, 2008)))\n    return ans\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for i in range(1000, 10000):\n        original_number = str(i)\n        new_number = original_number[-1] + original_number[1:-1] + original_number[0]\n        if int(new_number) - i == 5877:\n            return i\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Cayden and Jiaxiang's sweets\n    cayden, jiaxiang = symbols('cayden jiaxiang')\n    \n    # Equation representing the initial difference in sweets\n    equation1 = Eq(cayden, jiaxiang + 5)\n    \n    # Solve the system to find the values of cayden and jiaxiang\n    solutions = solve((equation1), (cayden, jiaxiang))\n    \n    # Calculate the difference in sweets after Cayden gives Jiaxiang 10 sweets\n    new_cayden = solutions[cayden] - 10\n    new_jiaxiang = solutions[jiaxiang] + 10\n    \n    # Calculate the new difference\n    difference = new_cayden - new_jiaxiang\n    \n    return difference\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    start = (50 // 11) + 1  # Find the first multiple after 50\n    end = 150 // 11  # Find the last multiple before 150\n    ans = end - start + 1\n    return ans\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2/15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Number of pupils before Mary wrote the test\n    num_pupils_before = 5\n    # Average before Mary wrote the test\n    average_before = 72\n    # Total marks before Mary wrote the test\n    total_marks_before = num_pupils_before * average_before\n    \n    # Number of pupils after Mary wrote the test\n    num_pupils_after = 6\n    # New average after Mary wrote the test\n    new_average = 75\n    # Total marks after Mary wrote the test\n    total_marks_after = num_pupils_after * new_average\n    \n    # Mary's score is the difference in total marks\n    marys_score = total_marks_after - total_marks_before\n    \n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200  # length of the train in meters\n    bridge_length = 220  # length of the bridge in meters\n    speed = 60  # speed of the train in m/s\n\n    # Time taken to cross the bridge is total distance divided by the speed\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * 3/4\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # Iterate over possible 3-digit numbers in reverse order\n    for num in range(999, 99, -2):  # must be odd, hence -2 step\n        if num % 9 == 0:  # divisible by 9\n            tens_digit = (num // 10) % 10  # extract tens digit\n            if tens_digit % 4 == 0:  # tens digit divisible by 4\n                ans = num\n                break\n    return ans\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    walk_speed = 8\n    minutes = distance / walk_speed\n    return minutes\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # To guarantee four different colored marbles, Jane must draw all the marbles of the three most numerous colors plus one more.\n\n    # Count of each color\n    red_count = 4\n    green_count = 7\n    blue_count = 6\n    orange_count = 2\n\n    # Sort the counts, we want to draw all but the least numerous color\n    counts = sorted([red_count, green_count, blue_count, orange_count])\n\n    # Sum of the three most numerous colors plus one more marble\n    must_draw = sum(counts[-3:]) + 1\n\n    return must_draw\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Represent coins as multiples of 5 in pence\n    coins = [5, 10, 20, 50, 100]  # 100 pence = 1 pound\n    note_value = 500  # Five pound note in pence\n\n    # Calculate the total change given\n    change = sum(coins)\n    # Calculate how much Angela spent\n    amount_spent = note_value - change\n\n    return amount_spent\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    temp_drop = 11\n    midnight_temp = midday_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    total_notes = 38\n    spent_percentage_10 = 0.8\n    spent_percentage_2 = 0.75\n    remaining_ratio = 3  # 3 times as many $10 notes as $2 notes after spending\n\n    # Let's denote the number of $10 notes as t and $2 notes as f (for two)\n    for t in range(total_notes + 1):  # t can be from 0 to total_notes\n        f = total_notes - t  # f is the remainder of the notes\n        # Calculate the number of notes remaining after spending\n        remaining_t = t * (1 - spent_percentage_10)\n        remaining_f = f * (1 - spent_percentage_2)\n        # Check if the remaining number of $10 notes is thrice the number of $2 notes\n        if remaining_t == remaining_ratio * remaining_f:\n            # Calculate the total cost of the fan\n            spent_t = t * spent_percentage_10 * 10  # Total spent on $10 notes\n            spent_f = f * spent_percentage_2 * 2     # Total spent on $2 notes\n            total_spent = spent_t + spent_f\n            return total_spent\n    return None  # If no solution is found, return None\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # We have to distribute 11 identical doughnuts to 4 students\n    # such that each student gets at least one doughnut.\n\n    # Since each student must get one doughnut, we first distribute\n    # one doughnut to each student, leaving us with 11 - 4 = 7 doughnuts.\n    # Now the problem is equivalent to distributing 7 identical doughnuts\n    # to 4 students with no restrictions.\n\n    # This is a problem of distributing n identical items into r distinct\n    # groups, which is solved by the \"Stars and Bars\" method. The number of\n    # ways to do this is given by \"n+k-1 choose k-1\", where n is the\n    # number of items to distribute and k is the number of groups.\n\n    # In this case, n = 7 (doughnuts to distribute) and k = 4 (students),\n    # so the answer is \"7+4-1 choose 4-1\".\n\n    ways = comb(7 + 4 - 1, 4 - 1)\n    return ways\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_hives = 5\n    current_production = 50  # kg\n    target_production = 90   # kg\n\n    # Calculate the production per hive\n    production_per_hive = current_production / current_hives\n\n    # Calculate the number of hives needed to produce the target amount\n    required_hives = target_production / production_per_hive\n\n    # Calculate how many more hives are needed\n    additional_hives = required_hives - current_hives\n\n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of country erasers Ali had initially be 7x\n    # Let the number of country erasers Kumar had initially be 5x\n    x = symbols('x')\n    \n    # After Ali gave Kumar 10 erasers, Ali has 7x - 10 and Kumar has 5x + 10\n    # The new ratio becomes (7x - 10) : (5x + 10) and it is given to be 1:5\n\n    # Set up the equation according to the problem's description\n    equation = Eq((7*x - 10) / (5*x + 10), 1/5)\n\n    # Solve the equation for x\n    solution_for_x = solve(equation, x)\n    \n    # Ali's initial number of erasers (7*x)\n    ali_initial = 7 * solution_for_x[0]\n    # Kumar's initial number of erasers (5*x)\n    kumar_initial = 5 * solution_for_x[0]\n\n    # The total number of erasers they have altogether\n    total_erasers = ali_initial + kumar_initial\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    nth_student = 23\n\n    nth_term = first_term + (nth_student - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    # Tina's horizontal movement: 15 km east - 9 km west = 6 km east\n    horizontal = 15 - 9\n    # Tina's vertical movement: 3 km north + 5 km north = 8 km north\n    vertical = 3 + 5\n    # Shortest distance from A to B (hypotenuse of the right triangle)\n    shortest_distance = (horizontal**2 + vertical**2)**0.5\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the cost of one banana (b) and one pear (p)\n    b, p = symbols('b p')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(b + 3*p, 84)  # Max's purchase\n    equation2 = Eq(b + p, 48)     # Emily's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    # Get the cost of one banana\n    return solutions[b]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_in_minutes = 8 * 60 + 20  # Convert total time to minutes\n    activity_with_break = 45 + 20  # Activity time plus break time\n\n    # Subtract the break time after the last activity, as it's not counted\n    num_activities = (total_time_in_minutes - 20) / activity_with_break \n\n    return int(num_activities)\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let's denote:\n    # a for Adam's weight\n    # b for Ben's weight\n    # c for Carl's weight\n\n    # We have the following equations based on the problem statement:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 92\n\n    # If we sum all three equations, we get:\n    # 2a + 2b + 2c = 102 + 97 + 92\n    # a + b + c = (102 + 97 + 92) / 2\n    # The total weight is then:\n    total_weight = (102 + 97 + 92) // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards, 4):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' be the number of days B takes to complete the job\n    b = symbols('b')\n    \n    # A's efficiency is twice B's, so A takes half the time B takes\n    # Thus, A completes the job in b/2 days\n    # A takes 5 days less than B to finish the job, so b/2 = b - 5\n    \n    equation = Eq(b/2, b - 5)\n    \n    # Solve for b\n    days_B = solve(equation, b)\n\n    return days_B[0]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    # Extract digits from the number 123456\n    digits = [int(d) for d in str(123456)]\n    \n    # Applying divisibility rule for 11: Subtract the sum of the digits in the odd places from the sum of the digits in the even places\n    odd_sum = sum(digits[::2])\n    even_sum = sum(digits[1::2])\n    remainder = abs(odd_sum - even_sum)\n    \n    # If the result is 0 or a multiple of 11, then 123456 is divisible by 11\n    is_divisible = remainder % 11 == 0\n    \n    # Correct answer from the divisibility test\n    correct_answer = 0 if is_divisible else (11 - remainder % 11)\n    \n    # George’s error is assuming a remainder of 1 without doing the calculation\n    return correct_answer\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    start_length_m = 2.06  # length in meters at the start of the day\n    end_length_cm = 78     # length in centimeters at the end of the day\n\n    end_length_m = end_length_cm / 100  # convert end length from cm to m\n    melted_length_m = start_length_m - end_length_m  # length melted in meters\n\n    melted_length_cm = melted_length_m * 100  # convert melted length to cm\n\n    return melted_length_cm\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40 / 100\n    base_value = 650\n    result = percentage * base_value\n    return result\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    dividend = 3549\n    divisor = 7\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    \n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    passengers_initial = 35\n    first_stop_get_off = passengers_initial * 2 // 5\n    passengers_after_first_stop = passengers_initial - first_stop_get_off + 7\n    second_stop_get_off = passengers_after_first_stop // 4\n    passengers_after_second_stop = passengers_after_first_stop - second_stop_get_off + 13\n    \n    return passengers_after_second_stop\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Create a dictionary to remember the number of ways to climb to each step\n    ways_to_climb = {0: 1}  # Base case: There's 1 way to stay at the start (0 steps climbed)\n    \n    # Function to count ways to climb to a certain step using recursion and memorization\n    def count_ways(step):\n        # If we already calculated this step, return the result\n        if step in ways_to_climb:\n            return ways_to_climb[step]\n        # If the step is negative, there are 0 ways to climb to it\n        if step < 0:\n            return 0\n        # Calculate the number of ways by adding the ways to climb to the previous step and 4 steps behind\n        ways_to_climb[step] = count_ways(step - 1) + count_ways(step - 4)\n        return ways_to_climb[step]\n    \n    # Total number of ways to climb to the 9th step\n    ans = count_ways(9)\n    return ans\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Sum of the series 0.5 + 1 + 1.5 + ... + 10\n    n_terms = int((10 - 0.5) / 0.5) + 1  # Number of terms in the series\n    series_sum = (n_terms / 2) * (0.5 + 10)  # Sum of an arithmetic series\n\n    # The sum of the cubes of the series\n    ans = series_sum ** 2\n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimate = 35\n    error_margin = 5\n    least_amount = estimate - (error_margin / 2)\n    return least_amount\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let 'x' represent the number of years it will take for the sum of their ages to be 40\n    # Currently, the sum of their ages is 22\n    # We can set up an equation where in 'x' years, each of them will be 'x' years older\n    # So, the new sum of their ages will be 22 + x + x, which is equal to 40\n    # So we have: 22 + 2x = 40\n    # Solving for x\n    \n    x = (40 - 22) / 2  # Solve the equation to find the value of x\n    return int(x)\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for school1 in range(98, 103):\n        for school2 in range(98, 103):\n            school3 = 300 - school1 - school2\n            if 98 <= school3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_between_rabbit_and_elephant = 5\n\n    # Find the rabbit's position from left to right\n    rabbit_position_left_to_right = elephant_position_left_to_right - toys_between_rabbit_and_elephant - 1\n\n    # Convert it to the position from right to left\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    nancy_time = 6\n    combined_time = 4\n\n    nancy_rate = 1 / nancy_time\n    combined_rate = 1 / combined_time\n\n    tim_rate = combined_rate - nancy_rate\n    tim_time = 1 / tim_rate\n\n    return tim_time\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and\n            pencils % 3 == 2 and\n            pencils % 4 == 3 and\n            pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    number_of_people = 1 + 3  # Ewan plus his 3 sisters\n    biscuits_per_person = total_biscuits / number_of_people\n    return biscuits_per_person\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    ans = (3 / 7) * 385\n    return int(ans)\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert total mass to grams for simplicity\n    total_mass_grams = 172000  # 172 kg = 172000 g\n    # Masses of individual packets of P, Q, and R\n    p_mass = 300\n    q_mass = 400\n    r_mass = 500\n    # Ratio of packets of P, Q, and R\n    p_ratio = 7\n    q_ratio = 3\n    r_ratio = 2\n\n    # Calculate the total ratio units\n    total_ratio_units = p_ratio + q_ratio + r_ratio\n    # Calculate the mass of one ratio unit\n    one_ratio_unit_mass = (p_ratio * p_mass + q_ratio * q_mass + r_ratio * r_mass)\n\n    # Calculate the multiplier for the ratios to meet the total mass\n    ratio_multiplier = total_mass_grams / one_ratio_unit_mass\n    # Calculate the number of packets used for each ingredient\n    packets_p = p_ratio * ratio_multiplier\n    packets_q = q_ratio * ratio_multiplier\n    packets_r = r_ratio * ratio_multiplier\n\n    # Calculate the total number of packets\n    total_packets = packets_p + packets_q + packets_r\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 'a', 13, 12]\n    mean_value = 12\n    total_sum = mean_value * len(numbers)\n    known_sum = sum([num for num in numbers if type(num) is not str])\n    a = total_sum - known_sum\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n    \n    first_signal_period = 1  # in minutes\n    second_signal_period = 1.5  # in minutes\n\n    common_period = lcm(int(first_signal_period * 60), int(second_signal_period * 60))  # converting to seconds and finding LCM\n\n    for third_signal_period in range(30, common_period + 1):  # starting from 30 seconds to the LCM\n        if lcm(third_signal_period, common_period) == 9 * 60:  # in seconds\n            return third_signal_period / 60  # converting back to minutes\n\n    return None\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit (centimeters in this case)\n    pink_ribbon_cm = 2.5 * 100  # Convert meters to centimeters\n    blue_ribbon_cm = 220        # Already in centimeters\n    orange_ribbon_cm = 30.5     # Already in centimeters\n\n    # Determine the longest ribbon\n    longest_ribbon_cm = max(pink_ribbon_cm, blue_ribbon_cm, orange_ribbon_cm)\n\n    # Map the lengths to their color names\n    ribbon_names = {\n        pink_ribbon_cm: 'pink',\n        blue_ribbon_cm: 'blue',\n        orange_ribbon_cm: 'orange'\n    }\n\n    # Get the name of the ribbon with the longest length\n    longest_ribbon = ribbon_names[longest_ribbon_cm]\n    \n    return longest_ribbon\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    total_time = 10 + 15 + 5 + 15\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_red_capacity = 3 * 10\n    total_blue_capacity = 12 * 15\n    total_green_capacity = 15 * 20\n    total_cars = 3 + 12 + 15\n    total_capacity = total_red_capacity + total_blue_capacity + total_green_capacity\n    average_capacity = total_capacity / total_cars\n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Rachel's speed is 84 km/h\n    rachel_speed = 84\n    # Eleanor takes 4 hours to travel from City F to City G, hence Eleanor's speed\n    eleanor_speed = (39 + (1.5 * rachel_speed)) / (4 - 1.5)\n    # Distance between the two cities\n    distance = eleanor_speed * 4\n    \n    return distance\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    result = 0\n    for i in range(1, 4):\n        result += int(\"4\" * i)\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25  # 1 US dollar = 1.25 Canadian dollars\n\n    us_dollars = canadian_dollars / exchange_rate\n    return us_dollars\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    sum_required = 90 * 5  # total sum needed for an average of 90\n    max_score = 100  # max score possible\n    # Find the minimum possible score for the lowest scorer under the constraints\n    min_score = 0\n    for score1 in range(max_score, 0, -1):\n        for score2 in range(score1-1, 0, -1):\n            for score3 in range(score2-1, 0, -1):\n                for score4 in range(score3-1, 0, -1):\n                    score5 = sum_required - (score1 + score2 + score3 + score4)\n                    if score5 < score4 and score5 > 0:\n                        min_score = score5\n                        break\n                if min_score:\n                    break\n            if min_score:\n                break\n        if min_score:\n            break\n    return min_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for lengths of Rope A, B, and C in cm\n    A, B, C = symbols('A B C')\n    \n    # Given equations\n    equation1 = Eq(A, 3 * B)\n    equation2 = Eq(C, B + 56)\n    equation3 = Eq(A, C + 130)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Sum the lengths of Rope A, B, and C\n    total_length = solutions[A] + solutions[B] + solutions[C]\n    \n    return int(total_length)\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n\n    ans = (2 * largest_number) - (3 * smallest_number)\n    return ans\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    letters = 'ABCDE'\n    all_combinations = list(combinations(letters, 3))\n    count_with_AB = sum(1 for combo in all_combinations if 'A' in combo and 'B' in combo)\n    probability = count_with_AB / len(all_combinations)\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    student_percentage_males = 16\n    student_percentage_females = 10\n\n    male_students = (student_percentage_males / 100) * male_members\n    female_students = (student_percentage_females / 100) * female_members\n\n    total_students = male_students + female_students\n    total_members = male_members + female_members\n\n    student_percentage_total = (total_students / total_members) * 100\n\n    return student_percentage_total\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    juice_in_first = 200 * 0.35\n    juice_in_second = 300 * 0.50\n    total_juice = juice_in_first + juice_in_second\n    concentration = (total_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(x/48, 3/4)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    ans = 1212 // 6\n    return ans\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy - x) apples and John will have (john + x) apples\n    # According to the problem, Amy will have 4 more apples than John, which gives us the equation:\n    # amy - x = john + x + 4\n\n    # Solving for x we get\n    x = (amy - john - 4) // 2\n    \n    return x\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the number of papers she originally planned to mark per hour\n    p = symbols('p')\n\n    # Original plan: 5 hours of work at p papers per hour\n    # After 1 hour of work, she has 4 hours left, but now plans to mark (p+6) per hour\n    equation1 = Eq(5 * p - 1 * p, 4 * (p + 6))\n\n    # However, if she marks (p+10) papers per hour, she would finish in 3 hours instead of 5\n    # Since she has already worked for 1 hour, she's now left with 3 hours at the increased rate\n    equation2 = Eq(4 * p - 1 * p, 3 * (p + 10))\n\n    solved_p = solve((equation1, equation2), (p))\n\n    # Total number of papers is the hours planned times the rate of marking\n    total_papers = 5 * solved_p[p]\n\n    return total_papers\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) Fraction of the chicken pies more than vegetable pies\n    more_chicken_than_vegetable_fraction = Fraction(chicken_pies - vegetable_pies, chicken_pies)\n\n    # (2) Fraction of the vegetable pies less than fruit pies\n    less_vegetable_than_fruit_fraction = Fraction(vegetable_pies, fruit_pies)\n\n    ans = (more_chicken_than_vegetable_fraction, less_vegetable_than_fruit_fraction)\n    return ans\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n\n    markers_left = total_markers - markers_given_away\n    bags_packed = markers_left // 5\n\n    return bags_packed\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jug, cup = symbols('jug cup')\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n    \n    solutions = solve((equation1, equation2), (jug, cup))\n    \n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            ab = a * 10 + b\n            ba = b * 10 + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    sum_of_numbers = greatest_1_digit_even + smallest_2_digit_odd\n    return sum_of_numbers\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 208):\n        for digit in str(i):  \n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    designs_made = 24\n    fraction_of_total = 3 / 4\n\n    total_designs = designs_made / fraction_of_total\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if hundreds + tens + ones == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the costs\n    cost_wristband = symbols('cost_wristband')\n    total_money = symbols('total_money')\n    money_spent_caps_wristbands = 2 / 5 * total_money\n    remaining_money = total_money - money_spent_caps_wristbands\n    money_spent_more_caps = 1 / 3 * remaining_money\n    cost_cap = 3 * cost_wristband\n\n    # Equations based on the problem\n    equation1 = Eq(4 * cost_cap + 6 * cost_wristband, money_spent_caps_wristbands)\n    equation2 = Eq(money_spent_more_caps, cost_cap * symbols('additional_caps'))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_money, cost_wristband, symbols('additional_caps')))\n\n    # Calculate the total number of caps\n    caps_initially = money_spent_caps_wristbands / cost_cap\n    total_caps = caps_initially + solutions[symbols('additional_caps')]\n\n    return total_caps\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols\n    g = 9.81  # gravitational acceleration in m/s^2\n    h_initial = 3000  # initial height in meters\n    h_final = 2000  # final height in meters\n    v_initial = symbols('v_initial')  # initial velocity, which is 0 since the skydiver jumps from rest\n\n    # Using conservation of energy: E_initial = E_final\n    # Potential energy at 3000m (E_initial) = potential energy at 2000m + kinetic energy at 2000m (E_final)\n    # m * g * h_initial + 1/2 * m * v_initial^2 = m * g * h_final + 1/2 * m * v_final^2\n    # Since m (mass of the skydiver) cancels out and v_initial is 0, we simplify to:\n    # g * h_initial = g * h_final + 1/2 * v_final^2\n\n    # Rearrange the equation to solve for v_final^2\n    equation = Eq(g * h_initial, g * h_final + (1/2) * v_initial**2)\n\n    # Solve the equation for v_final^2\n    v_final_squared = solve(equation, v_initial**2)[0]\n\n    # Take the square root to find v_final\n    v_final = v_final_squared**0.5\n\n    return v_final\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # Worst case scenario is getting every 4th card as a unique card without repeats\n    # This ensures that in the worst case we will have all card numbers from 1 to 10\n    # Therefore, with 4 extra cards (11, 12, 13, and 1 more), we will have 4 consecutive\n    # cards because after 10 we only have 11, 12 and 13 left which are consecutive.\n    # A draw of one more card ensures we have four consecutive cards no matter what.\n    # So, in total we need 11 * 4 (for each pattern) + 1 card (to ensure the sequence)\n    ans = 11 * 4 + 1\n    return ans\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations([0,2,4,5,6,8,9], 7):\n        B, D, E, F, H, I, J = perm\n        if B % 2 == 0:\n            if (int(f'3{B}') % 3 == 0 and\n                int(f'3{B}1{D}') % 4 == 0 and\n                int(f'3{B}1{D}{E}') % 5 == 0 and\n                int(f'3{B}1{D}{E}6{F}') % 7 == 0 and\n                int(f'3{B}1{D}{E}6{F}{G}') % 8 == 0 and\n                int(f'3{B}1{D}{E}6{F}{G}8{I}') % 9 == 0 and\n                int(f'3{B}1{D}{E}6{F}{G}8{I}{J}') % 10 == 0):\n                return (A, B, C, D, E, F, G, H, I, J)\n    \n    return None\n\nA = 3\nC = 1\nG = 7\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_current_age = 10\n    ashley_age_3_years_ago = ashley_current_age - 3\n    brother_age_3_years_ago = ashley_age_3_years_ago - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    # Initialize counters\n    actual_page_count = 0\n    printed_page_number = 0\n    \n    # Loop until we reach the actual number of pages\n    while actual_page_count < 89:\n        printed_page_number += 1\n        # Skip every third page number\n        if printed_page_number % 3 != 0:\n            actual_page_count += 1\n    \n    return printed_page_number\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        for children in range(20):\n            if adults + children == 19 and 5 * adults + 3 * children == 75:\n                return adults\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // (3 * 5)  # For numbers that are multiples of both 3 and 5\n\n    # Inclusion-Exclusion Principle\n    ans = count_3 + count_5 - count_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_current_age = 10\n    tom_future_age = 20\n    grandma_future_age = 60\n\n    age_difference = grandma_future_age - tom_future_age\n    grandma_current_age = tom_current_age + age_difference\n\n    return grandma_current_age\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, classB = symbols('candies classB')\n    classA = 2 * classB\n\n    equation1 = Eq(4 * classA - candies, 20)\n    equation2 = Eq(6 * classB - candies, -16)\n\n    solutions = solve((equation1, equation2), (candies, classB))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6):\n        for twenty_pence in range(4):\n            for fifty_pence in range(2):\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # In the worst case scenario, I pick one sticker of each color first.\n    # So I have taken a total of 2 stickers.\n    # To ensure I get two stickers of the same colour, I pick another sticker.\n    # This is because the next sticker I pick will have to be the same colour as one of the stickers I have already picked.\n    # In this way, I make sure that I have at least 2 stickers of the same color.\n    # Hence, I must take at least 3 stickers in the worst case scenario to ensure this.\n    return 3\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Blue balls = 5, orange balls = 4, yellow balls = 2\n    # To ensure she gets 4 balls of the same color, we consider the worst-case scenario.\n    # She can take out 3 blue balls, 3 orange balls and 2 yellow balls without getting 4 of the same color.\n    # After that, the next ball she takes out must be of a color that she already has 3 of.\n\n    # Worst-case scenario without 4 of the same color:\n    max_blue_without_fourth = 3\n    max_orange_without_fourth = 3\n    max_yellow_without_fourth = 2\n\n    # Next ball ensures 4 of the same color:\n    minimum_balls_to_get_four = max_blue_without_fourth + max_orange_without_fourth + max_yellow_without_fourth + 1\n\n    return minimum_balls_to_get_four\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    ducklings_legs = 4 * 2  # Each duckling has 2 legs.\n    baby_geese_legs = 2 * 2 # Each baby goose has 2 legs.\n    lamb_legs = 4           # Each lamb has 4 legs.\n\n    total_legs_excluding_lambs = ducklings_legs + baby_geese_legs\n    remaining_legs_for_lambs = 36 - total_legs_excluding_lambs\n\n    number_of_lambs = remaining_legs_for_lambs // lamb_legs\n\n    return number_of_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    teams = 5\n    matches = (teams * (teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation based on the number of sweets received\n    equation1 = Eq(2 * boys + 4 * girls, 570)\n    # Equation based on the ratio of boys to girls\n    equation2 = Eq(boys, 3 * girls)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    from itertools import permutations\n\n    digits = '3192'\n    perm = permutations(digits)\n\n    numbers = sorted(set(int(''.join(p)) for p in perm))\n\n    return numbers[-1] - numbers[0]\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Top layer of the pyramid has 1^2 boxes\n    top_layer = 1**2\n    # Second layer of the pyramid has 2^2 boxes\n    second_layer = 2**2\n    # Third layer of the pyramid has 3^2 boxes\n    third_layer = 3**2\n\n    # Total number of boxes is the sum of the boxes in all three layers\n    total_boxes = top_layer + second_layer + third_layer\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_spent = 2.35 + 0.78 + 0.65\n    change = 5 - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_A = 600 * (3/5)\n    good_copies_needed_B = 600 * (2/5)\n\n    # For every 4 good copies, A produces 1 bad, so in total A produces 5 copies for 4 good.\n    total_copies_needed_A = good_copies_needed_A * (5/4)\n\n    # For every 5 good copies, B produces 1 bad, so in total B produces 6 copies for 5 good.\n    total_copies_needed_B = good_copies_needed_B * (6/5)\n\n    total_copies_needed = total_copies_needed_A + total_copies_needed_B\n\n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    a = 1.2 + 1.23 + 1\n    b = 1.2 + 1.23\n    ans = a * (a - b)\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for num in range(100, 200):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    # Let x be the time it takes for the son to finish the work alone\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Farmer's rate of work is 1/24 per hour\n    # Son's rate of work is 1/x per hour\n\n    # Both working together for 16 hours\n    equation = Eq(16 * (1/24 + 1/x), 1)\n\n    # Solve for x\n    son_hours = solve(equation, x)[0]\n\n    return son_hours\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n\n    total_smiles_in_january = average_smiles_per_day * days_in_january\n\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    from math import sqrt\n    \n    one_side = int(sqrt(40))\n    \n    return one_side\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    total_solution = 300 + 400 + 300\n\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + bounce_height * 2\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    # Probability of rolling a 5 on a fair die\n    probability_of_5 = 1 / 6\n    \n    # Number of times the die is rolled\n    total_rolls = 30\n    \n    # Expected number of times to get a 5\n    expected_number_of_5s = total_rolls * probability_of_5\n    \n    return expected_number_of_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for i in range(999, 99, -1):\n        if i % 36 == 0:\n            return i\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(5) # Total ways to arrange 5 children\n    # Since Hugh cannot stand between Louise and Richard there are 2 ways to consider\n    # Either Louise stands to the left of Richard or to the right\n    # For both cases Hugh has 3 spots where he can stand (before both, between one of them and the remaining three, after both)\n    # The other two (Louise and Richard) can stand in 2 ways\n    unhappy_permutations = 2 * 3 * factorial(3)\n    # Subtract these from the total permutations\n    happy_permutations = total_permutations - unhappy_permutations\n    return happy_permutations\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    lost_matches = 10\n    total_matches = lost_matches * (1 / (1 - (2/5 + 7/20)))\n    win_matches = (2/5) * total_matches\n    draw_matches = (7/20) * total_matches\n    \n    total_points = win_matches * 3 + draw_matches * 1\n    return int(total_points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    johnny_result = (quotient * remainder) + divisor\n    actual_result = (quotient * divisor) + remainder\n\n    if johnny_result != actual_result:\n        return actual_result\n    else:\n        return johnny_result\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    ans = sum((-1)**(i+1) * (40 - 2*i) for i in range(20))\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    chocolate_price_pence = 75\n    pen_price_pence = 95\n    total_chocolates = 4\n    total_pens = 3\n    note_value_pounds = 10\n\n    total_cost_pence = (chocolate_price_pence * total_chocolates) + (pen_price_pence * total_pens)\n    total_cost_pounds = total_cost_pence / 100\n    change = note_value_pounds - total_cost_pounds\n\n    return change\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    original_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n    \n    price_after_first_discount = original_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n    \n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    mean_3_numbers, mean_5_numbers = symbols('mean_3_numbers mean_5_numbers')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(mean_3_numbers, mean_5_numbers - 296)  # Mean of the first 3 numbers is 296 less than mean of the last 5 numbers\n    equation2 = Eq((3 * mean_3_numbers + 5 * mean_5_numbers) / 8, 555)  # Overall mean is 555 for the 8 numbers\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mean_3_numbers, mean_5_numbers))\n\n    # Return the mean of the last 5 numbers\n    return solutions[mean_5_numbers]\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    chart_limit = 100\n    step = 2\n    start = 2\n    \n    multiples_count = (chart_limit - start) // step + 1\n    \n    return multiples_count\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n    \n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(vicky, 99)\n    equation3 = Eq(kevin, timmy + 32)\n    \n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    # Number of people initially\n    initial_people = 5\n    # Number of days taken by initial people\n    initial_days = 15\n    # Number of days to build the bridge with more people\n    target_days = 5\n\n    # Work done is the same, so the ratio of people to days is inversely proportional\n    # initial_people * initial_days = target_people * target_days\n    # Solving for target_people\n    target_people = (initial_people * initial_days) / target_days\n\n    # Number of more people needed is the difference between target and initial\n    more_people = target_people - initial_people\n\n    return int(more_people)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n\n    # Pip's position + children between Pip and Bud + Bud himself gives us Bud position from the front \n    bud_position_from_front = pip_position + children_between + 1\n\n    # Bud's position from the end is total children - Bud's position from the start + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), 1/2 * rasidah * (1 - 3/5))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    # Let x be the number of years ago when Isaac's age was 1/3 of his mother's age\n    isaac_age_now = 53\n    mother_age_now = 81\n    \n    # Let's express their ages x years ago\n    # Isaac's age x years ago: isaac_age_now - x\n    # Mother's age x years ago: mother_age_now - x\n    \n    # According to the problem, Isaac's age was 1/3 of his mother's age x years ago\n    # (isaac_age_now - x) = 1/3 * (mother_age_now - x)\n    # To find x, we solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((isaac_age_now - x), 1/3 * (mother_age_now - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kg_per_lb = 1 / 2.2\n    kg = pounds * kg_per_lb\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_oplus(a, b):\n        return sum(range(a, b)) - b\n\n    return custom_oplus(5, 10) - custom_oplus(4, 9)\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    # Elena's speed\n    elena_speed = 8\n    # Cat's speed\n    cat_speed = 3\n    # Distance between Elena and her cat\n    distance = 500\n    # Relative speed between Elena and her cat\n    relative_speed = elena_speed - cat_speed\n    # Time taken to catch up\n    time_taken = distance / relative_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    num_permutations = len(list(permutations(digits, 3)))\n\n    return num_permutations\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import primerange\n\ndef solution():\n    primes_below_20 = list(primerange(1, 21))\n    count = 0\n    for prime in primes_below_20:\n        if (prime + 6 in primes_below_20) and (prime - 6 in primes_below_20):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    # Define the differences sequence\n    differences = [20-8, 31-20, 41-31, 50-41]  # [12, 11, 10, 9]\n    \n    # The pattern is that the difference decreases by 1 each time\n    # The next difference would be 9 - 1\n    next_diff = differences[-1] - 1\n    \n    # The next number in the sequence is the last number plus the next difference\n    next_number = 50 + next_diff\n    \n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all possible 5-digit permutations of the numbers 1-5\n    perms = list(permutations([1, 2, 3, 4, 5]))\n    \n    # Filter out permutations that do not end with an even number\n    even_perms = [perm for perm in perms if perm[-1] % 2 == 0]\n    \n    # Count the number of valid even permutations\n    count = len(even_perms)\n    \n    return count\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens_digit in range(1, 10):\n        ones_digit = 15 - tens_digit\n        if ones_digit < 10:\n            return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_mean = 50\n    new_mean = 52\n    initial_quantity = 8\n\n    initial_total_weight = initial_mean * initial_quantity\n    new_total_weight = new_mean * (initial_quantity + 1)\n\n    extra_apple_weight = new_total_weight - initial_total_weight\n\n    return extra_apple_weight\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    ans = sum(1 for i in range(1, 251) if int(i**0.5)**2 == i)\n    return ans\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    equation = Eq(sqrt(-x), 4)\n    \n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    ans = 99 + 98 + 97 + 96\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages = symbols('pages')\n    original_time = pages / 50\n    new_time = pages / (50 + 20)\n    equation = Eq(original_time - 2, new_time)\n\n    num_pages = solve(equation, pages)\n\n    return num_pages[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    total_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    term_number = 30\n    common_difference = 4\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n\n    while True:\n        start_date += one_year\n        # Check for leap year correction\n        if (start_date.year % 4 == 0 and start_date.year % 100 != 0) or (start_date.year % 400 == 0):\n            start_date += one_day\n        if start_date.weekday() == 0:  # 0 is Monday\n            break\n\n    return start_date.year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges - apples, 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 100):  # Reasonable limit for divisor search\n        dividend = 8 * divisor + 7\n        if (dividend - 7) % 8 == 0 and (dividend - 7) // 8 == divisor:\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Time jogging (from 6:30 am to 7:30 am) is 1 hour\n    jogging_time = 1\n    \n    # Time walking (from 7:30 am to 9:30 am) is 2 hours\n    walking_time = 2\n    \n    # Speed of jogging is 6 miles per hour\n    jogging_speed = 6\n    \n    # Speed of walking is 5 miles per hour\n    walking_speed = 5\n    \n    # Distance traveled while jogging is speed * time\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Distance traveled while walking is speed * time\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance is sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_amount = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    ans = initial_amount + (saved_per_day * days_saved) - lent_to_brother - spent_on_snacks\n\n    return ans\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_companies = 4\n    total_days = 5\n    total_length = 900\n\n    per_company_per_day = total_length / (total_companies * total_days)\n\n    return per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    total_cost = 400\n    discount = 0.10\n    number_of_members = 30\n\n    discounted_cost = total_cost * (1 - discount)\n    cost_per_member = discounted_cost / number_of_members\n\n    return round(cost_per_member, 2)\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_rate = 80  # charge in cents for up to 15 minutes\n    additional_rate = 5  # charge in cents for each additional minute\n    total_charge = 140  # total charge in cents (1.4 dollars)\n\n    if total_charge > base_rate:\n        additional_charge = total_charge - base_rate\n        additional_minutes = additional_charge / additional_rate\n        total_minutes = 15 + additional_minutes\n    else:\n        total_minutes = 15\n    \n    return int(total_minutes)\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # The last digit of powers of 2 cycles every 4 powers: 2, 4, 8, 6\n    # So for any power of 2 greater than 4, we can find the last digit by\n    # finding the remainder of the power divided by 4 and using the corresponding last digit.\n    last_digit_2 = [2, 4, 8, 6][2017 % 4 - 1]\n\n    # Similarly, the last digit of powers of 3 cycles every 4 powers: 3, 9, 7, 1\n    last_digit_3 = [3, 9, 7, 1][2017 % 4 - 1]\n\n    # The last digit of the product will be the last digit of the product\n    # of the two last digits we found above.\n    last_digit_product = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit_product \n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Since the operations don't follow standard rules, we have to deduce the pattern from given examples.\n    # Let's find the pattern:\n    # 4 * 7 = 28 -> but it says it's 21, which is 28 - 4 - 3 (subtract first number and 3)\n    # 6 * 22 = 132 -> but it says it's 20, which is 132 - 6 * 2 - 32 (first number times 2 and the second digit of the second number) \n    # 8 * 30 = 240 -> but it says it's 26, which is 240 - 8 * 3 - 46 (first number times 3 and the sum of the digits of the second number)\n    # Maybe the pattern is that you subtract from the product the first number times the first digit of the second number \n    # and the sum of the digits of the second number. Let's apply this to find 9 ◈ 20.\n    \n    first_number = 9\n    second_number = 20\n    product = first_number * second_number\n\n    # Apply the pattern we deduced:\n    ans = product - first_number * (second_number // 10) - sum(map(int, str(second_number)))\n  \n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(((number - 4) / 2) + 11, 37)\n\n    result = solve(equation, number)\n\n    return result[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5 + 1) * 5\n    last_multiple = (120 // 5) * 5\n    ans = (last_multiple - first_multiple) // 5 + 1\n    return ans\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = (35 - 10) / (7 - 2)\n    return x\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age when James was 20 years old on 10 May 1997\n    gina_age_when_james_20 = 50 - (2005 - 1997)\n\n    # James's age when Gina was 35\n    james_age_when_gina_35 = 20 - (gina_age_when_james_20 - 35)\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total = 2 + 1/2\n    quarters_in_one = 4\n    num_quarters = total * quarters_in_one\n    return int(num_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position_from_back = 9\n    people_between = 2\n\n    # Since Lucy is in front of Eddie, we add Lucy's position, \n    # the number of people between them, and Eddie's position from back \n    # to find the total number of people. We subtract 1 since we are \n    # counting Lucy twice (from the front and in Eddie's count from the back).\n    total_people = (lucy_position + people_between + eddie_position_from_back) - 1\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    prime_numbers = [2, 3, 5, 7]  # Considering the prime numbers for the remainders\n    for num in range(1, 3 * 5 * 7 * 8):  # Upper limit is the product of divisors\n        remainders = [num % 3, num % 5, num % 7, num % 8]\n        if sorted(remainders) == prime_numbers:\n            return num\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # convert meters to centimeters\n    dress_length_cm = 5 * 100 + 8\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n\n    return stripe_length_cm\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    result = 35\n    initial = (result + 21) / 7 - 4\n    return initial\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # initial given ratio\n    ratio_eq = Eq(orchids / tulips, 3 / 5)\n\n    # initial total flowers\n    total_eq = Eq(orchids + tulips + roses, 3616)\n\n    # sold flowers\n    sold_eq = Eq(0.6 * orchids + 0.8 * tulips + 0.75 * roses, 2644)\n\n    # solve the system of equations\n    solutions = solve((ratio_eq, total_eq, sold_eq), (orchids, tulips, roses))\n    \n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n\n    # Assuming all boys are right-handed, there are min_right_handed_boys.\n    min_right_handed_boys = right_handed - (total_pupils - total_girls)\n    \n    # The smallest number of girls who are right-handed cannot be less than 0.\n    min_right_handed_girls = max(0, total_girls - min_right_handed_boys)\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A, 5 * B + 4)\n    equation2 = Eq(A + B, 130)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    books, files = symbols('books files')  # Define variables for books and files\n    \n    # Total cost equation: 12 * books + 9 * files = 336\n    eq1 = Eq(12 * books + 9 * files, 336)\n    \n    # Relationship between the number of books and files: books = files + 14\n    eq2 = Eq(books, files + 14)\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if chickens * 2 + rabbits * 4 == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    return 0.012 + 2.03 + 0.1456\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    result = 60.2 / 7\n    return result\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    # Compute the last digit of each number raised to the 2013 power\n    last_digits = [(x ** 2013) % 10 for x in range(1, 10)]\n    \n    # Sum the last digits and get the last digit of the sum\n    last_digit_of_sum = sum(last_digits) % 10\n    \n    return last_digit_of_sum\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Peter could pick one of each color before getting a matching pair,\n    # meaning after three socks he still might not have a pair. \n    # The next sock (4th one) would guarantee a pair in the worst case scenario. \n    return 4\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime(2023, 7, 2, 20)  # 8pm 2nd July\n    arrival_time = datetime(2023, 7, 3, 1)  # 1am 3rd July\n    japan_to_france_time_diff = timedelta(hours=7)\n\n    # Convert France arrival time to Japan time\n    arrival_time_in_japan = arrival_time + japan_to_france_time_diff\n\n    # Calculate flight duration\n    flight_duration = arrival_time_in_japan - departure_time\n    return flight_duration.seconds // 3600  # Convert to hours\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[diamond] + solutions[square]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n\n    for i in range(1, 10):\n        total_digits += 1\n    for i in range(10, 100):\n        total_digits += 2\n    for i in range(100, 132):\n        total_digits += 3\n\n    return total_digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    unanswered_questions = 3\n    answered_questions = total_questions - unanswered_questions\n    correct_answer_marks = 4\n    wrong_answer_penalty = 1\n    total_score = 168\n    \n    # Assuming all answered questions were correct, calculate maximum possible marks\n    max_possible_score = answered_questions * correct_answer_marks\n    \n    # Calculate the difference from actual score\n    score_difference = max_possible_score - total_score\n    \n    # Number of wrong questions can be found by dividing the score difference by the penalty difference\n    # since for each wrong answer, we not only lose the 4 marks we could have earned but also get 1 penalty point\n    wrong_questions = score_difference // (correct_answer_marks + wrong_answer_penalty)\n    \n    # Number of correct answers is the total answered questions minus the number of wrong questions\n    correct_answers = answered_questions - wrong_questions\n    \n    return correct_answers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n    \n    # Eugene had 5 times as many coins as Sid\n    equation1 = Eq(eugene, 5 * sid)\n    \n    # After using coins, they had 51 coins left altogether \n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n   \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    # Eugene's initial amount of coins\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # Since the number is a 2-digit number, the first digit cannot be 0.\n    # There are 2 choices for the first digit (1 or 2).\n    # There are 3 choices for the second digit (0, 1, or 2) as it can be repeated.\n    ans = 2 * 3 # for each first digit, 3 choices for the second digit\n    return ans\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # If x is the first even number of the five consecutive even numbers\n    # then the sequence is: x, x+2, x+4, x+6, x+8\n    # According to the problem, the sum of these numbers is 200\n    # Hence, we can write the equation: x + (x+2) + (x+4) + (x+6) + (x+8) = 200\n    # Simplifying the equation gives us: 5x + 20 = 200\n    # Now, we can solve for x\n    \n    total_sum = 200\n    total_numbers = 5\n    sum_of_differences = 20  # 2 + 4 + 6 + 8 = 20\n    \n    x = (total_sum - sum_of_differences) / total_numbers\n\n    return int(x)\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Initial amount of sugar in each container\n    sugar_A = 0.10 * 50  # 10% of 50g\n    sugar_B = 0.20 * 30  # 20% of 30g\n\n    # New concentration in A after x grams are transferred from B to A\n    new_conc_A = (sugar_A + 0.20*x) / (50 + x)\n    \n    # New concentration in B after x grams are transferred from A to B\n    new_conc_B = (sugar_B - 0.20*x) / (30 - x)\n    \n    # Setup the equation that the two new concentrations are equal\n    equation = Eq(new_conc_A, new_conc_B)\n\n    # Solve for x\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "from math import factorial\n\ndef solution():\n    sum_sequence = 0\n    numerator = factorial(100)\n    for i in range(0, 100 - 97 + 1):\n        sum_sequence += numerator / factorial(97 + i)\n        numerator //= (100 - i)\n    return sum_sequence\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    cutting_time_per_section = 8 / 4\n    total_sections_for_6_cuts = 6 + 1\n    total_time_for_6_cuts = cutting_time_per_section * total_sections_for_6_cuts\n    return total_time_for_6_cuts\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    current_votes_peter = 35\n    votes_remaining = total_votes - (22 + 27 + 35)\n    max_votes_other = max(22 + votes_remaining // 2, 27 + votes_remaining // 2)\n    min_votes_needed_peter = max_votes_other + 1\n\n    return min_votes_needed_peter - current_votes_peter\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    total_pupils = 995\n    boys = (total_pupils + 7) // 2\n    return boys\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    ans = max(numbers, key=lambda x: x % 10)  # The highest value of units (ones place)\n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # The total amount in pence (£4.90 -> 490p)\n    \n    # Let x be the number of each type of coin (5p, 10p, 20p).\n    # Then total amount is: 5x + 10x + 20x = 490 \n    # Simplifying gives: 35x = 490 \n    # Solving for x gives: x = 490 / 35 \n\n    x = total_amount // 35  # Number of each type of coin\n\n    # Total number of coins is 3 times x since there are an equal number of each coin\n    return 3 * x\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    discount = 189\n    percentage_reduction = (discount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    # Let x be the number of sweets eaten on the first day.\n    # Since each day the boy eats 3 more sweets than the day before,\n    # the sweets eaten on the last (9th) day will be: x + 3*(9-1)\n    # We are also given that the sum of the sweets eaten over 9 days is 135.\n    \n    # The sum of an arithmetic series is given by: n/2 * (first_term + last_term)\n    # Plugging the given and our expression for last term, we have:\n    # 9/2 * (x + (x + 3*(9-1))) = 135\n    \n    # Solving for x gives us the number of sweets eaten on the first day.\n    # Calculation:\n    # 9/2 * (2x + 24) = 135\n    # 9x + 108 = 270\n    # 9x = 270 - 108\n    # 9x = 162\n    # x = 162 / 9\n    # x = 18\n    # Now we calculate the number of sweets eaten on the last day:\n    # last_day_sweets = 18 + 3*(9-1)\n    # last_day_sweets = 18 + 3*8\n    # last_day_sweets = 18 + 24\n    # last_day_sweets = 42\n    first_day_sweets = 18\n    last_day_sweets = first_day_sweets + 3*(9-1)\n    return last_day_sweets\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    total_money = 100\n    spent_on_book = total_money * 0.10\n    remaining_after_book = total_money - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money = 28  # in dollars\n    gift_cost = 20    # in dollars\n\n    money_left = total_money - gift_cost  # in dollars\n\n    # Convert the remaining money to cents\n    money_left_in_cents = money_left * 100\n\n    return money_left_in_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000  # initial amount\n    rate = 0.06  # interest rate of 6%\n    time = 5  # time period of 5 years\n    \n    balance = principal * (1 + rate) ** time  # compound interest formula\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    total_digits = 0\n    # Pages 1-9 use 1 digit each (9 pages)\n    total_digits += 9\n    # Pages 10-99 use 2 digits each (90 pages)\n    total_digits += (99 - 10 + 1) * 2\n    # Pages 100-185 use 3 digits each (86 pages)\n    total_digits += (185 - 100 + 1) * 3\n\n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_raise_percentage = 0.10   \n    \n    # Calculate the pay raise in pounds\n    pay_raise = annual_salary * pay_raise_percentage\n    \n    # Calculate new annual salary\n    new_annual_salary = annual_salary + pay_raise\n    \n    # Calculate the new monthly salary\n    new_monthly_salary = new_annual_salary / 12\n    \n    return new_monthly_salary\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    ans = 7842 - 998\n    return ans\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    return 123 - (23 + 56)\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):  # because there are 12 months\n        for day in range(1, 32):  # assuming every month has a maximum of 31 days\n            if month * 31 + day * 12 == 376:\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    left_side = 4.08 * 20\n    known_term = 1.08 * 20\n    missing_number_times_20 = left_side - known_term\n    missing_number = missing_number_times_20 / 20\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    ans = 0\n    for i in range(119, 98, -2):\n        if i % 4 == 3:\n            ans += i\n        else:\n            ans -= i\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    quantity = 16\n    total_cost = cost_per_cooker * quantity\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6\n    protractor_original_price = 0.30\n\n    calculator_sale_price = calculator_original_price * (1 - 0.25)\n    protractor_sale_price = protractor_original_price * 0.5\n\n    total_price = (8 * calculator_sale_price) + (20 * protractor_sale_price)\n\n    return total_price\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    # Given ratio of flour to milk in the recipe\n    flour_ratio = 40\n    milk_ratio = 80\n\n    # Amount of flour Tom has\n    tom_flour = 25\n\n    # Calculate the amount of milk based on the given flour using cross multiplication\n    tom_milk = (milk_ratio * tom_flour) / flour_ratio\n\n    return tom_milk\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    total_sweets = sweets_taken + sweets_left\n    return total_sweets\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_tonnes = (2/3) * tonnes\n    kilograms = two_thirds_tonnes * 1000  # 1 tonne = 1000 kilograms\n    return kilograms\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let the current age of the older elephant be x years\n    # let the number of years it will take for the younger elephant to reach the older elephant's current age be y years\n    # Therefore, in y years, the older elephant will be x + y years old\n    # According to the problem,\n    # when the younger elephant is x years old, the older elephant will be 62 years old\n\n    # younger elephant's age in y years will be 18 + y\n    # older elephant's age now will be x\n    # If we add y years to both, we need:\n    # 18 + y (younger's future age) = x (older's current age)\n    # We also have:\n    # 62 = x + y (older's future age)\n\n    # Now we have two equations:\n    # x = 18 + y (1)\n    # x + y = 62 (2)\n    # By substituting x from (1) into (2), we get:\n    # (18 + y) + y = 62\n    # 18 + 2y = 62\n    # 2y = 62 - 18\n    # 2y = 44\n    # y = 22\n\n    # Now we substitute y back into (1) to find x\n    # x = 18 + 22\n    # x = 40\n    # So the older elephant is currently 40 years old.\n\n    return 40\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Let t be the total amount of grass on the farm (constant).\n    # Grass eaten by an ox per week is then t/(27*6) by the first group\n    # and t/(23*9) by the second group. These two rates must be equal.\n    # So, t/(27*6) = t/(23*9).\n    # We need to find the time taken by 21 oxen to eat t amount of grass.\n    # Let's denote the time taken by 21 oxen as x weeks.\n    # Rate * Time = Work done (or grass eaten)\n    # Thus, 21 * x * (t/(27*6)) = t\n    # Solving for x gives us x = (27*6)/21\n    \n    oxen_first_group = 27\n    oxen_second_group = 23\n    weeks_first_group = 6\n    weeks_second_group = 9\n    oxen_third_group = 21\n\n    # From the problem, we have oxen_first_group * weeks_first_group = oxen_second_group * weeks_second_group\n    # We want to find weeks_third_group:\n    # oxen_third_group * weeks_third_group = oxen_first_group * weeks_first_group\n    # Thus, weeks_third_group = oxen_first_group * weeks_first_group / oxen_third_group\n\n    weeks_third_group = (oxen_first_group * weeks_first_group) / oxen_third_group\n    return weeks_third_group\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's bike ride duration\n    bike_ride_time = 1 # hours (from 7:30 AM to 8:30 AM)\n    # Ellen's bike speed in miles per hour\n    bike_speed = 10 # miles per hour\n    \n    # Ellen's train ride duration\n    train_ride_time = 2 # hours (from 8:30 AM to 10:30 AM)\n    # Ellen's train speed in miles per hour\n    train_speed = 50 # miles per hour\n    \n    # Calculate the distance traveled on the bike and the train\n    distance_bike = bike_ride_time * bike_speed\n    distance_train = train_ride_time * train_speed\n    \n    # Total distance traveled\n    total_distance = distance_bike + distance_train\n    \n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # There are 5 balls and the question is asking for the number of distributions\n    # of these balls into 3 boxes. This is a problem of partitioning with indistinguishable\n    # items and distinguishable boxes.\n\n    # We can solve this problem by using the \"stars and bars\" method in combinatorics.\n    # We represent the 5 balls as five stars *, and the separations between boxes\n    # as bars |. For example, **|***|| means 2 balls in box A, 3 in box B, and 0 in box C.\n    \n    # The number of bars is 2 because we have 3 boxes (bars are one less than the number of boxes).\n    # We must count the number of ways to arrange 5 stars and 2 bars.\n    \n    # The total number of positions we have is the total number of balls plus the number of boxes minus 1.\n    # So the total number of positions is 5 (balls) + 3 - 1 (boxes - 1 for the bars) = 7.\n    \n    # We choose 2 positions for the bars out of the 7 positions, and the rest will implicitly be for the balls.\n    from math import comb\n    total_ways = comb(5 + 3 - 1, 3 - 1)\n    \n    return total_ways\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_marbles = symbols('blue_marbles')\n    red_marbles = blue_marbles + 25\n    green_marbles = red_marbles + 32\n\n    total_marbles_eq = Eq(blue_marbles + red_marbles + green_marbles, 112)\n    \n    blue_marbles_solution = solve(total_marbles_eq, blue_marbles)\n\n    return blue_marbles_solution[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = \"TEENAGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_permutations = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n        \n    return total_permutations\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas is 3rd counting from front to back, so there are 2 students in front of him\n    front_to_back = 2 + 1  # the third one is Lucas himself\n\n    # Lucas is 2nd counting from back to front, so there is 1 student behind him\n    back_to_front = 1 + 1  # the second one is Lucas himself\n\n    # Total students in a column is the sum of students in front and behind Lucas\n    total_columns = front_to_back + back_to_front - 1  # Subtract 1 because we counted Lucas twice\n\n    # Lucas is 4th counting from left to right, so there are 3 students to his left\n    left_to_right = 3 + 1  # the fourth one is Lucas himself\n\n    # Lucas is 3rd counting from right to left, so there are 2 students to his right\n    right_to_left = 2 + 1  # the third one is Lucas himself\n\n    # Total students in a row is the sum of students to the left and right of Lucas\n    total_rows = left_to_right + right_to_left - 1  # Subtract 1 because we counted Lucas twice\n\n    # Total number of students is the product of the number of rows and columns\n    return total_rows * total_columns\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ema, keng_wee = symbols('ema keng_wee')\n    \n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(ema, keng_wee - 360)\n    \n    # Ema spent 1/4 of her money, Keng Wee spent 4/7 of his money\n    # They are left with (3/4)ema = (3/7)keng_wee\n    equation2 = Eq(ema * 3/4, keng_wee * 3/7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n    \n    # Keng Wee's initial amount of money\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount = 0.25\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    def sum_of_digits(number):\n        return sum(int(digit) for digit in str(number))\n\n    number = 217\n    while sum_of_digits(number) != 9:\n        number += 1\n\n    return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 36 / 4\n    one_tenth_of_square = one_fourth_of_36 * 10\n    return one_tenth_of_square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas is 3rd from the front and 2nd from the back, so there are 3 people from the front including him\n    # and we need to add 1 more person for the back (since he is second from the back).\n    people_in_col = 3 + 1\n\n    # Similarly, Lucas is 4th from the left and 3rd from the right, so there are 4 people from the left including him\n    # and we need to add 2 more people for the right (since he is third from the right).\n    people_in_row = 4 + 2\n\n    # To find the total number of students, we multiply the number of people in one column by the number in one row.\n    total_students = people_in_col * people_in_row\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of boys be b, and the original number of girls be g\n    b, g = symbols('b g')\n\n    # The initial condition 9/11 of the boys is equal to the girls\n    equation1 = Eq(g, 9/11 * b)\n\n    # After 2 girls are transferred in, the number of girls becomes 10/11 of the boys\n    equation2 = Eq(g + 2, 10/11 * b)\n\n    # Solve the equation system\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Calculate the total number of students now\n    total_students_now = solutions[b] + solutions[g] + 2\n\n    return total_students_now\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    return sum(numbers)\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = (77.5 * (52 / 100)) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # Start with the first term\n    for i in range(2, 11):  # The pattern starts from 1/2 and goes till 1/10\n        for j in range(1, i + 1):  # The numerator goes from 1 to the current i\n            ans += j / i\n        for j in range(i - 1, 0, -1):  # Then back down to 1\n            ans += j / i\n    return ans\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_paid = 5 * 100  # Convert pounds to pence\n    cost_milk = 3 * 31\n    cost_crisps = 2 * 17\n    cost_bread = 78\n    cost_magazine = 105  # Already in pence\n    total_cost = cost_milk + cost_crisps + cost_bread + cost_magazine\n    change = total_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    # Define variables for Trevor and Siobhan\n    trevor, siobhan = symbols('trevor siobhan')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(trevor, 5 * siobhan)  # Trevor has five times as many sweets as Siobhan\n    equation2 = Eq(siobhan, trevor - 24)  # Siobhan has 24 sweets fewer than Trevor\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n\n    equation1 = Eq(lim + tan, 390)\n    equation2 = Eq(lim, 5 * tan)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    return solutions[lim] - solutions[tan]\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    x, y = symbols('x y')\n    \n    # Given the equation 2(3x-y) = 2x + 4 and we need to find the value of (2x-y)\n    # First, we solve the equation for y in terms of x\n    equation = Eq(2*(3*x - y), 2*x + 4)\n    solved = solve(equation, y)\n\n    # The value of y in terms of x is then substituted into the expression 2x-y\n    # However, since we have an equation here, we can simplify our approach\n    # by noticing that 2(3x - y) = 2x + 4 implies 6x - 2y = 2x + 4\n    # We can remove the factor of 2 by taking half of both sides\n    # Thus, 3x - y = x + 2, which means (2x - y) = x + 2\n    \n    y_value = solved[0]\n    expression_value = 2*x - y_value\n    \n    # Now we simplify the expression to get the numerical answer\n    simplified_expression = expression_value.simplify()\n    \n    return simplified_expression\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    zehan_now = symbols('zehan_now')\n    equation = Eq(zehan_now + 12, 3 * zehan_now)\n    zehan_age = solve(equation, zehan_now)\n    return zehan_age[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Ways to choose 1 student from A, B, C\n    ways_to_choose_1 = comb(3, 1)\n    # Ways to choose the remaining 4 students from the 12 that are not A, B, or C\n    ways_to_choose_remaining = comb(12, 4)\n    # Total ways\n    total_ways = ways_to_choose_1 * ways_to_choose_remaining\n    return total_ways\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_lemon, water = symbols('original_lemon water')\n\n    equation1 = Eq(original_lemon / water, 2/3)\n    equation2 = Eq((original_lemon + 80) / water, 6/5)\n\n    solution = solve((equation1, equation2), (original_lemon, water))\n\n    return solution[original_lemon]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + 6\n\n    total_sweets = (shaila_sweets * total_ratio) / shaila_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    \n    price_per_ticket = total_cost / num_tickets\n    \n    return round(price_per_ticket, 2)\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total savings be x\n    total_savings = symbols('total_savings')\n\n    # She gave 1/3 of her savings to her mother\n    mother_share = (1/3) * total_savings\n\n    # She bought dresses for 177\n    dresses_cost = 177\n\n    # She spent 129 on earrings\n    earrings_cost = 129\n\n    # The amount left is 50% of what she gave her mother\n    amount_left = (1/2) * mother_share\n\n    # Therefore, the amount left is also total_savings - mother_share - dresses_cost - earrings_cost\n    equation = Eq(total_savings - mother_share - dresses_cost - earrings_cost, amount_left)\n\n    # Solve for total_savings\n    savings_solution = solve(equation, total_savings)\n\n    return savings_solution[0]\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Let x be the number we are looking for\n    x = symbols('x')\n\n    # Translate the given operations into an equation\n    equation = Eq(((x + 8) * 8 - 8) / 8, 80)\n\n    # Solve the equation\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    # Using the inclusion-exclusion principle\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    \n    # Subtracting the number of teachers who know both languages from those who know French\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.3  # 30% increase\n    time_delay = 9 / 60  # 9 minutes converted to hours\n\n    # Since distance is the same, we can use proportions as following:\n    # (usual_time - delay) * increased_speed = usual_time * usual_speed\n    # Let usual_time be t, then we have:\n    # (t - time_delay) * increased_speed = t * usual_speed\n    # Solving for t, we get:\n    # t * usual_speed = (t - time_delay) * increased_speed\n    # t * usual_speed = t * increased_speed - time_delay * increased_speed\n    # t * usual_speed - t * increased_speed = - time_delay * increased_speed\n    # t * (usual_speed - increased_speed) = - time_delay * increased_speed\n    # t = (time_delay * increased_speed) / (increased_speed - usual_speed)\n    usual_time = (time_delay * increased_speed) / (increased_speed - usual_speed)\n    \n    # distance = speed * time\n    distance = usual_speed * usual_time\n\n    return distance\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the original speed and t be the original time\n    v, t = symbols('v t')\n\n    # When speed increases by 25%, time decreases by 20 minutes\n    # (v + 0.25v)(t - 20) = v * t\n    equation1 = Eq((v + 0.25 * v) * (t - 20), v * t)\n    \n    # When speed decreases by 45 m/min, time increases by 75%\n    # (v - 45)(1.75t) = v * t\n    equation2 = Eq((v - 45) * (1.75 * t), v * t)\n\n    # Solve the system of equations for v and t\n    solutions = solve((equation1, equation2), (v, t))\n\n    # Distance = speed * time\n    # Since the solutions will give us v and t in terms of a dictionary\n    # we can calculate the distance using the original speed and time\n    distance = solutions[v] * solutions[t]\n\n    return distance\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    # Number of red ropes + number of blue ropes = 10\n    # Length of red ropes (2m each) + Length of blue ropes (3m each) = 26m\n    \n    # Let's denote red ropes as x and blue ropes as y.\n    for x in range(11):  # x can be from 0 to 10\n        y = 10 - x  # Since we have a total of 10 ropes\n        total_length = 2*x + 3*y\n        if total_length == 26:\n            return x  # We need to find the number of red ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = (21 * 100) / 30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_in_half_year = 6\n    \n    total_second_half = average_second_half * months_in_half_year\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / (months_in_half_year * 2)\n\n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 1000):  # Arbitrary upper limit to find the solution\n        if i % 7 == 0 and i % 9 == 2:\n            return i\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    ans = (22 - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n    ans = total_used.simplify()\n    \n    return ans\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Height to width ratio is 3:4\n    height_ratio = 3\n    width_ratio = 4\n    \n    # Height of the television screen\n    height = 21  # in cm\n    \n    # Find the width based on the ratio\n    width = (width_ratio / height_ratio) * height\n    \n    # Calculate the perimeter of the screen\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "from fractions import Fraction\n\ndef solution():\n    result = 1\n    for i in range(2, 12):\n        result *= Fraction(i + 1, i)\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    # If the difference between the smallest factor and the greatest factor of A is 41,\n    # then A must be a prime number, because a prime number's smallest factor is 1\n    # and its greatest factor is itself.\n    \n    # So we search for a prime number A such that A - 1 = 41, which means A = 42\n    # However, 42 is not a prime number, hence there is no such prime A\n\n    # This means A must not be prime, so we must find a composite number\n    # where the greatest factor (except the number itself) - 1 (smallest factor) = 41\n    # Since every number has 1 as a factor, the next smallest factor will be a prime number p,\n    # and it would be A / p (second greatest factor if A is not a prime).\n    # Thus, (A / p) - 1 = 41 => A - p = 41p => A = 41p + p => A = 42p\n\n    # Since we need a composite number and the second greatest factor minus the smallest factor is 41,\n    # we start by looking for prime factors starting from 2 onwards:\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    p = 2\n    while True:\n        A = 42 * p  # We are looking for a composite number that satisfies the conditions\n        if A % p == 0 and (A // p - 1 == 41):\n            # We found the number A which satisfies the condition\n            # Now we want to find the 7th multiple of A\n            \n            # The 7th multiple of A is just 7 times A\n            return 7 * A\n        p += 1\n        while not is_prime(p):\n            p += 1  # Ensure p is always a prime number\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n    \n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, (3 / 5) * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n    \n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n    \n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # x - y = -36 (since x is the smaller number, the difference is negative)\n    # x + y = 98\n    \n    # We can solve the system of linear equations:\n    # Adding the two equations, we get:\n    # 2x = 98 - 36\n    # Hence:\n    x = (98 - 36) / 2\n    \n    return x\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    num = int('3' * 12)\n    remainder = num % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Calculate the last digit of each sequence\n    last_digit_4 = (4 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n    last_digit_11 = (11 ** 100) % 10\n    \n    # Multiply the last digits and find the last digit of the result\n    ans = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    return 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    score = 78\n    correct_answer_score = 3\n    wrong_answer_penalty = 1\n    \n    correct_answers = int(total_questions * 0.70)\n    wrong_answers = total_questions - correct_answers\n    \n    # Let x be the number of questions actually answered correctly\n    x = symbols('x')\n    equation = Eq(x * correct_answer_score - (correct_answers - x) * wrong_answer_penalty, score)\n    \n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one file and one ruler\n    cost_file, cost_ruler = symbols('cost_file cost_ruler')\n    \n    # Equation according to the given problem\n    equation = Eq(6 * cost_file + 10 * cost_ruler, 40)\n    \n    # Since we don't have a second equation, we will express the cost of rulers\n    # in terms of the cost of files from this equation.\n    solution_for_ruler = solve(equation, cost_ruler)[0]\n    \n    # Now we can calculate the cost of 9 files and 15 rulers by substituting\n    # the expression of ruler's cost into the new calculation.\n    total_cost = 9 * cost_file + 15 * solution_for_ruler\n    \n    # We can substitute the equation's relation into our total cost\n    # because for any coefficient a and b, if a * x + b * y = c, then\n    # multiplying a, b, and c by k gives a new equation k * a * x + k * b * y = k * c.\n    # Here k = 1.5, to go from 6 to 9 files and from 10 to 15 rulers.\n    # So the total is 1.5 * 40 = 60\n    return total_cost.subs(cost_ruler, solution_for_ruler).subs(cost_file, 40 / (6 + 10 * solution_for_ruler))\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John and Jessie's original amounts\n    john, jessie = symbols('john jessie')\n\n    # Equation 1: John originally has 5/13 of what Jessie has\n    eq1 = Eq(john, (5 / 13) * jessie)\n\n    # Equation 2: After Jessie gives 600 to John, John has 50% (1/2) of Jessie's money\n    eq2 = Eq(john + 600, (1 / 2) * (jessie - 600))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (john, jessie))\n\n    # Calculate the total amount of money both had originally\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    count_1s = 15\n    count_2s = 14\n    N = 1\n    ones = twos = 0\n\n    while True:\n        str_N = str(N)\n        ones += str_N.count('1')\n        twos += str_N.count('2')\n        \n        if ones == count_1s and twos == count_2s:\n            break\n\n        N += 1\n\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_format = \"%H:%M\"\n    start_time = datetime.strptime(\"10:30\", time_format)\n    end_time = datetime.strptime(\"11:00\", time_format)\n    \n    baking_time = end_time - start_time\n    return baking_time.seconds // 60  # convert seconds to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    t_shirts, caps = symbols('t_shirts caps')\n\n    # Given ratio of t_shirts to caps\n    ratio_eq = Eq(t_shirts, 8/5 * caps)\n\n    # Siti sold 1/4 of the T-shirts and 1/5 of the caps\n    # She collected $132 for the items she sold.\n    # 3 * (1/4) * t_shirts + 5 * (1/5) * caps = 132\n    revenue_eq = Eq(3 * (1/4) * t_shirts + 5 * (1/5) * caps, 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, revenue_eq), (t_shirts, caps))\n\n    # we need to find the number of T-shirts Siti had at first\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost = (3 * 12) + (5 * 11)\n    change = (200 - total_cost)\n    return change / 100\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    # Calculate the age difference between each sibling\n    age_difference = 2\n    \n    # Calculate the number of siblings between the youngest and oldest\n    siblings_between = 7 - 1  # 7 children, including Harvir and Nilen\n    \n    # Use the fact that it's an arithmetic sequence with a common difference\n    # to calculate Harvir's age based on Nilen being the youngest (7 years old)\n    harvir_age = 7 + (siblings_between * age_difference)\n    \n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_cost = 6.97\n    ball_cost = 2.99\n    total_spent = calendar_cost + ball_cost\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    # Norah used fractions of the flour to make muffins and cookies\n    flour_used_for_muffins = 1 / 5  # in kg\n    flour_used_for_cookies = 1 / 2  # in kg\n\n    # Convert the remaining flour from g to kg\n    flour_remaining_in_kg = 360 / 1000  # 360g to kg\n\n    # Total flour originally = flour used for muffins + flour used for cookies + flour remaining\n    total_flour_originally = flour_used_for_muffins + flour_used_for_cookies + flour_remaining_in_kg\n\n    return total_flour_originally\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons', integer=True)\n\n    # Define the cost of oranges and lemons in pence\n    cost_oranges = 26\n    cost_lemons = 30\n\n    # Gordon spent exactly 500 pence (5 pounds)\n    total_spent = 500\n\n    # Equation representing the total cost\n    equation = Eq(cost_oranges * oranges + cost_lemons * lemons, total_spent)\n\n    # Find solutions where the number of oranges and lemons is a non-negative integer\n    solutions = solve((equation, ), (oranges, lemons), dict=True)\n\n    # Filter for valid (non-negative) solutions and calculate the total number of fruits\n    valid_solutions = [(s[oranges], s[lemons]) for s in solutions if s[oranges] >= 0 and s[lemons] >= 0]\n    total_fruits = [sum(s) for s in valid_solutions]\n\n    # Return the solution with the smallest number of total fruits\n    ans = min(total_fruits) if total_fruits else 0\n\n    return ans\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    n_people = 4  # There are 4 people: Judy, James, Bowen, and you\n    # Since the order of people around a circular table matters only relative to each other (rotations are not unique), \n    # fix one person's position and arrange the remaining (n_people - 1)! ways\n    ans = factorial(n_people - 1)\n    return ans\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n\n    solutions = solve(equation, original_eggs)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n\n    part1 = delta(3, 4)\n    part2 = star(part1, 5)\n    ans = delta(part2, 6)\n\n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n    \n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    males, females = symbols('males females')\n\n    # equations based on the problem statement\n    equation1 = Eq(males, females + 450)  # males are 450 more than females on the first day\n    equation2 = Eq(females * 1.15 + males * 0.82, 1354)  # visitors on the second day\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (males, females))\n\n    # total visitors on the first day\n    total_visitors_first_day = solutions[males] + solutions[females]\n\n    return total_visitors_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    equation1 = Eq(leo, jason + 220)\n    equation2 = Eq(jason * 2, leo + 180 + 1100)\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    biographies = factorial(3)\n    science_fictions = factorial(4)\n    magazines = factorial(2)\n    schoolbooks = factorial(2)\n\n    # Calculating different ways: Total permutations / permutations of each type\n    ans = factorial(total_books) // (biographies * science_fictions * magazines * schoolbooks)\n    return ans\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        E, F, C, B, H = p\n        if E == 0:\n            continue\n        if (E * 10000 + F * 1000 + C * 100 + B * 10 + H) - (E * 100 + F * 10 + C) == (B * 10000 + H * 1000 + E * 100 + F * 10 + B):\n            return E * 10000 + F * 1000 + C * 100 + B * 10 + H\n            \nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    from math import comb\n    # Calculating number of ways to partition 7 identical items into 3 parts\n    # For n identical items, r identical boxes, the formula is comb(n + r - 1, r - 1)\n    # This is a problem of distributing n identical objects into r identical boxes\n    # Partitions of 7: (7,0,0), (6,1,0), (5,2,0), (5,1,1), (4,3,0), (4,2,1), (3,3,1), (3,2,2)\n    n = 7\n    r = 3\n    ans = comb(n + r - 1, r - 1)\n    return ans\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n    return robots_per_day * days_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    starting_number = 345\n    step = 9\n\n    # Calculate the remainder when starting_number is divided by step\n    remainder = starting_number % step\n\n    # The last positive number he counts would be the remainder subtracted from the starting_number\n    last_positive_number = starting_number - remainder\n\n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3000000  # cost of the mansion\n    num_friends = 5  # number of friends\n\n    each_pay = total_cost / num_friends\n\n    return each_pay\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_cost = 555\n    cost_with_name = 15\n    cost_without_name = 10\n    \n    # x is the number of children who paid for the shirt with their name\n    # y is the number of children who paid for the shirt without their name\n    # We have two equations:\n    # x + y = 50 (total number of children)\n    # 15x + 10y = 555 (total cost)\n    # We can solve this system of equations for x and y.\n    \n    for x in range(51):\n        y = 50 - x\n        if (cost_with_name * x + cost_without_name * y) == total_cost:\n            return x\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    # Let the time spent walking at the increased speed be x minutes.\n    # So, the total distance covered at the first speed (150 m/min) is 150m/min * (x + 10) min.\n    # The total distance covered at the second speed (200 m/min) is 200m/min * x min.\n    # The sum of these two distances must be equal to the total distance of 3700m.\n\n    # distance at first speed + distance at second speed = total distance\n    # 150 * (x + 10) + 200 * x = 3700\n    # Simplify the equation to find x, and then add 10 to find the total time.\n    \n    x = (3700 - 150 * 10) / (200 - 150)\n    total_time = x + 10\n    \n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    equation2 = Eq(male_first_day * 0.82 + female_first_day * 1.15, 1354)\n\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while 40 >> position != 1:\n        position += 1\n    return 1 << position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore time at takeoff\n    singapore_takeoff_hour = 5\n    \n    # London time at landing\n    london_landing_hour = 11\n    \n    # Time difference between Singapore and London\n    time_difference = 7\n    \n    # Calculate the time it would be in Singapore when it's 11:00 in London\n    singapore_landing_hour = (london_landing_hour + time_difference) % 24\n    \n    # Calculate flight duration\n    # If the Singapore landing hour is less than the takeoff hour, it means the flight passed midnight\n    if singapore_landing_hour < singapore_takeoff_hour:\n        flight_duration = (24 - singapore_takeoff_hour) + singapore_landing_hour\n    else:\n        flight_duration = singapore_landing_hour - singapore_takeoff_hour\n    \n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # 4 hearts, 3 spades, 7 diamonds\n    total_ways = factorial(total_cards)  # Total permutations of all different cards\n    # Dividing by factorial of number of identical cards to account for indistinguishable permutations\n    ways = total_ways // (factorial(4) * factorial(3) * factorial(7))\n    return ways\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # the smallest multiple of 5 that is a non-zero digit is 5\n    second_digit = 1  # the smallest odd natural number\n    third_digit = 9  # the largest single-digit odd number\n    fourth_digit = 2  # the smallest even natural number\n    fifth_digit = 8  # the largest single digit that is a multiple of 2\n    sixth_digit = 3  # the smallest odd natural number greater than 1\n    seventh_digit = 0  # has to be a multiple of 2 and 5, hence ends in 0\n\n    # Combine the digits to form the phone number\n    phone_number = int(f\"{first_digit}{second_digit}{third_digit}\"\n                       f\"{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    \n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    \n    equation1 = Eq(jon, 1.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages = 0\n    daily_increase = 5\n    pages_read_first_day = 20\n    pages_read_last_day = 80\n\n    # Calculate total number of days including the last day\n    days = 1  # He already read on the first day\n    while True:\n        total_pages += pages_read_first_day + (days - 1) * daily_increase\n        if total_pages + pages_read_last_day > total_pages:\n            break\n        days += 1\n    \n    # Add the pages he read on the last day\n    total_pages += pages_read_last_day\n    \n    # Return the total number of pages in the storybook\n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9\n    cashew_nuts = 1/3\n    difference = almonds - cashew_nuts\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Correct method to find the dividend\n    dividend = (quotient * divisor) + remainder\n    return dividend\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    positive_sum = sum(range(4, 55, 4))\n    negative_sum = sum(range(2, 55, 4))\n    return positive_sum - negative_sum\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The equations are x ≡ 3 (mod 6), x ≡ 4 (mod 7), x ≡ 1 (mod 8)\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        s, a, m, o, g = p\n        sasmo = int(s + a + s + m + o)\n        ogams = int(o + g + a + m + s)\n        if sasmo * 4 == ogams and s != '0' and o != '0':\n            return sasmo\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    # Let b be the number of boys.\n    # Then, 40 - b is the number of girls (since there are a total of 40 students).\n    # Each boy distributed 4 bags and each girl distributed 3 bags.\n    # The boys distributed 62 more bags than the girls.\n    # According to the problem, the equation is:\n    # 4b + 3(40 - b) + 62 = 4b + 3b\n    # Solve for b.\n    \n    from sympy import symbols, Eq, solve\n    \n    b = symbols('b')\n    equation = Eq(4*b + 3*(40 - b), 62 + 3*(40 - b))\n    \n    b_value = solve(equation, b)\n    \n    return b_value[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    return ans\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the length of the part that has been cut from both ropes\n    x = symbols('x')\n\n    # Rope A after cutting = original length - cut length\n    # Rope B after cutting = original length - cut length\n    \n    # Since Rope A after cutting is 3 times Rope B after cutting\n    equation = Eq((65 - x), 3 * (29 - x))\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1/6\n\n    expected_number_of_fives = total_rolls * probability_of_five\n\n    return expected_number_of_fives\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    ans = 345 * 4\n    return ans\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12 * 6 // 18\n    return numerator\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    ratio1 = Eq(A/B, 2/3)\n    ratio2 = Eq(B/C, 6/5)\n    average_eq = Eq((A + B + C) / 3, 45)\n\n    solutions = solve((ratio1, ratio2, average_eq), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_cost = Eq(6 * (7 * x) + 3 * 35, 441)\n    dress_cost = solve(total_cost, x)\n    \n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    # Each of the three digits in the number can be one of these 5 digits\n    # Using the multiplication principle:\n    ans = 5 * 5 * 5\n    return ans\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # The given series is a telescoping series where:\n    # (1/n) - (1/(n+1)) = 1/(n(n+1))\n    # The series collapses to the terms:\n    # (1/1 - 1/2) + (1/2 - 1/3) + ... + (1/2011 - 1/2012)\n    # Notice that all the internal terms cancel out leaving:\n    # 1 - 1/2012\n    \n    k = 2012 - 1  # Since the last fraction will be 1/2012 after telescoping\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    total_days_both = 8\n    total_days_energetic = 12\n\n    work_rate_energetic = 1 / total_days_energetic\n    work_rate_both = 1 / total_days_both\n\n    work_rate_lazy = work_rate_both - work_rate_energetic\n    total_days_lazy = 1 / work_rate_lazy\n\n    return total_days_lazy\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    \n    for number in range(1, 1000, 2):\n        remainder_sum += (number ** 2) % 3\n    \n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original length and y be the original width of the rectangle\n    x, y = symbols('x y')\n    # If you increase the length by 12cm, the new length is x + 12\n    # The perimeter of the new rectangle is 2*(x + 12) + 2*y = 38\n    equation = Eq(2*(x + 12) + 2*y, 38)\n    \n    # The perimeter of the original rectangle is 2*x + 2*y\n    # We need to express y in terms of x and plug it into the perimeter equation\n    # Solve for x first\n    solutions = solve(equation, (x, y))\n    x_val = solutions[x]\n\n    # Now, find the perimeter of the original rectangle\n    original_perimeter = 2 * x_val + 2 * solutions[y]\n\n    return original_perimeter\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = nell_sweets * (nell_ratio + joe_ratio) // nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stamps Natasha has, then Jamie-Anne has x + 18\n    x = symbols('x')\n    equation = Eq(5*x, 3*(x + 18)) # 5x = 3(x + 18) solving for Natasha\n\n    # Solve for x\n    natasha_stamps = solve(equation, x)[0]\n\n    # Calculate Jamie-Anne's stamps\n    jamie_anne_stamps = natasha_stamps + 18\n\n    # Total number of stamps\n    total_stamps = natasha_stamps + jamie_anne_stamps\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == 1001 * a + 10 * b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sana, mina = symbols('sana mina')\n    total_coins = 234\n    \n    # Sana had 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n    \n    # Total coins they had together\n    equation2 = Eq(sana + mina, total_coins)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n    \n    # Find out how many coins Mina had left after giving away 12 coins\n    coins_left = solutions[mina] - 12\n    \n    return coins_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * 3/7\n    remainder_after_monday = total_grapes - sold_monday\n    sold_tuesday = remainder_after_monday * 3/8\n    remainder_after_tuesday = remainder_after_monday - sold_tuesday\n    bag_weight = 3/4\n    num_bags = remainder_after_tuesday / bag_weight\n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    weight_per_student = 142  # 142g flour per student\n    number_of_students = 123  # 123 students\n    total_weight = weight_per_student * number_of_students  # Total weight of flour\n    return total_weight\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence_in_pounds = 300  # 3.00 pounds in pence\n    value = 15  # 15p\n    percentage = (value / pence_in_pounds) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    lamp_posts_in_50_seconds = 11 - 1  # He cycles past this many lamp posts in 50 seconds\n    seconds_per_lamp_post = 50 / lamp_posts_in_50_seconds  # Time it takes to cycle past one lamp post\n    \n    lamp_posts_in_80_seconds = 80 / seconds_per_lamp_post + 1  # Adding the first lamp post he starts from\n    return int(lamp_posts_in_80_seconds)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # First, let's find out the total number of flowers needed for all sides\n    # excluding the corners since they are counted twice.\n    flowers_per_side_excluding_corners = 6 - 2  # each corner is counted in two sides\n    total_sides = 4\n    total_flowers_excluding_corners = flowers_per_side_excluding_corners * total_sides\n\n    # Now we add the corners, which are only counted once.\n    corners = 4\n\n    # Total number of flowers is the sum of flowers on sides excluding the corners and the corners.\n    total_flowers = total_flowers_excluding_corners + corners\n\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the quantities of each fruit\n    total_items, lemons = symbols('total_items lemons')\n\n    # Express the quantities of apples and bananas in terms of total_items\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    \n    # Equation based on description: apples = lemons + 12\n    equation1 = Eq(apples, lemons + 12)\n    \n    # Equation based on the fact that apples, bananas, and lemons add up to total_items\n    equation2 = Eq(apples + bananas + lemons, total_items)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_items, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_extra_length = 56\n\n    football_field_length = basketball_court_length + football_field_extra_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = original_price - 67.50\n    ana_discount_percentage = (ana_discount / original_price) * 100\n    return round(ana_discount_percentage, 2)\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    from fractions import Fraction\n\n    lower_bound = Fraction(3, 10)\n    upper_bound = Fraction(5, 16)\n\n    s = 1\n    while True:\n        r = s * lower_bound\n        if r.denominator == s and lower_bound < r < upper_bound:\n            return s\n        s += 1\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    total_two_days = first_day + second_day\n    total_steering_wheels = total_two_days * (6/5)\n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Calculate the factors of 4 and their sum\n    factors_of_4 = [i for i in range(1, 5) if 4 % i == 0]\n    sum_factors_of_4 = sum(factors_of_4)\n\n    # The value in the hundreds place is 800, so the digit is 8\n    hundreds_digit = 8\n    \n    # The digit in the thousands place is 1 more than 8\n    thousands_digit = hundreds_digit + 1\n    \n    # The digit in the ones place is the sum of all factors of 4\n    ones_digit = sum_factors_of_4\n    \n    # The digit in the tens place is the difference between the hundreds and ones places\n    tens_digit = hundreds_digit - ones_digit\n    \n    # The first digit is fixed and is 4\n    first_digit = 4\n    \n    # Constructing the number with the given digits\n    number = int(f\"{first_digit}{thousands_digit}{hundreds_digit}{tens_digit}{ones_digit}\")\n    \n    return number\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    children_capacity = 40\n    adults_capacity = 24\n    children_on_bus = 15\n\n    remaining_capacity = children_capacity - children_on_bus\n    adults_per_child = adults_capacity / children_capacity\n    max_adults_on_bus = remaining_capacity * adults_per_child\n\n    return int(max_adults_on_bus)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n\n    # Find the prime factors of 28, and their counts\n    factors = {2: 2, 7: 1} # 28 = 2^2 * 7^1\n\n    # Find the smallest number that needs to be multiplied to make all counts even\n    mult = 1\n    for prime, count in factors.items():\n        if count % 2 != 0:  # If the count is odd\n            mult *= prime  # Multiply with the prime\n\n    return mult\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_3_min = 2\n    total_time = 12\n    pancakes_per_min = pancakes_per_3_min / 3\n\n    total_pancakes = pancakes_per_min * total_time\n\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(4 - x, 5 * x - 8)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    num_sizes = 3\n    min_students_same_size = (total_students // num_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    return triangle_operation(8, triangle_operation(6, 4))\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    equation = Eq(salary - 740 - (3/4) * (salary - 740), (1/5) * salary)\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the current age of Russell\n    r = symbols('r')\n\n    # Equation representing the given condition\n    equation = Eq(r + 32, 4 * (r - 16))\n\n    # Solve for r\n    russell_age = solve(equation, r)\n\n    return russell_age[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total = 120\n\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    num_difference = abs(19 - 6)\n    total_people = num_difference * 2\n\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pips_number = int(f\"{A}{B}{C}{A}\")\n                buds_number = int(f\"{A}{C}{B}{A}\")\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    # Let x be the initial number of students in class 6B\n    # So the initial number of students in class 6A will be (4/9)x\n    # After reshuffling, 3 students moved from 6A to 6B, and 18 students moved from 6B to 6A\n    # Therefore, the new number of students in class 6A will be (4/9)x + 18 - 3\n    # The new number of students in class 6B will be x - 18 + 3\n    # Since the new numbers are equal, we can set up the following equation:\n    # (4/9)x + 18 - 3 = x - 18 + 3\n    # Now solve for x and calculate the initial number of students in class 6A, which is (4/9)x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((4/9)*x + 18 - 3, x - 18 + 3)\n    solutions = solve(equation, x)\n\n    # Initial number of students in class 6A\n    num_students_6A_initial = (4/9) * solutions[0]\n\n    return num_students_6A_initial\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to cut the rod into two pieces (1 cut)\n    # For 5 pieces, we need 4 cuts.\n    # If 1 cut takes 2 minutes, 4 cuts would take 2 * 4 minutes.\n    return 2 * 4\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    total_shelves = 15\n    spelling_books_per_shelf = 9\n    math_books_per_shelf = 4\n    total_spelling_books = 72\n    spelling_shelves = total_spelling_books / spelling_books_per_shelf\n    math_shelves = total_shelves - spelling_shelves\n    total_math_books = math_shelves * math_books_per_shelf\n    return int(total_math_books)\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Jeffrey takes 6 minutes to walk from the 1st to the 4th floor\n    # This means he walked over 3 intervals (1st to 2nd, 2nd to 3rd, 3rd to 4th)\n    intervals_covered = 4 - 1\n\n    # Jeffrey needs to walk from the 1st to the 10th floor\n    # Calculate the number of intervals for walking from the 1st to the 10th\n    total_intervals_needed = 10 - 1\n\n    # The time taken for each interval\n    time_per_interval = 6 / intervals_covered\n\n    # The total time to walk from the 1st to the 10th floor\n    total_time = time_per_interval * total_intervals_needed\n\n    return total_time\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuits_original = 100\n    chocolate_original = 40\n    biscuits_available = 75\n\n    chocolate_required = (chocolate_original * biscuits_available) / biscuits_original\n\n    return chocolate_required\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    daily_earnings = 90\n    days_in_a_week = 7\n    total_earnings = daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n\n    return total_combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    solutions = solve(equation, n)\n    for sol in solutions:\n        if sol.is_real:\n            return sol\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # Initial circle with 16th student opposite to 8th means the circle has 16 - 8 = 8 * 2 students\n    initial_students = (16 - 8) * 2\n    # New circle with 22nd student opposite to 8th means the circle has 22 - 8 = 14 * 2 students\n    new_students = (22 - 8) * 2\n    # The number of new students that joined\n    additional_students = new_students - initial_students\n    \n    return additional_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)\n\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Charlene gave 15 marbles to Betsy\n    # Betsy gave 8 marbles to Anna\n    # After transactions\n    equation1 = Eq(anna + 8, 2 * (betsy - 8))\n    equation2 = Eq(betsy - 8 + 15, 5 * (charlene - 15))\n    equation3 = Eq(charlene - 15, 7 * (anna + 8))\n\n    # The total number of marbles before transactions\n    equation4 = Eq(anna + betsy + charlene, 168)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anna, betsy, charlene))\n\n    # Betsy had 'betsy' marbles at first, before giving or receiving any\n    return solutions[betsy]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n    total_cards = yellow_cards + red_cards + green_cards\n\n    # Total number of permutations with all cards is factorial of the total number of cards\n    permutations_total = factorial(total_cards)\n\n    # However, we have repeated cards, so we need to divide by the factorial of the number of each set\n    # of identical cards to get the number of distinct permutations\n    permutations_yellow = factorial(yellow_cards)\n    permutations_red = factorial(red_cards)\n    permutations_green = factorial(green_cards)\n\n    # Apply the formula for permutations when there are repeated elements\n    ans = permutations_total // (permutations_yellow * permutations_red * permutations_green)\n\n    return ans\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of lollipops and gum drops before adding candy\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n\n    # Create equations based on the problem statement\n    original_ratio = Eq(lollipops / gum_drops, 5/7)\n    new_ratio = Eq((lollipops + 120) / (gum_drops + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (lollipops, gum_drops))\n    \n    # Calculate the total pieces of candy now\n    total_candy_now = solutions[lollipops] + 120 + solutions[gum_drops] + 120\n    \n    return total_candy_now\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n\n    # Pages 1-9 (1 digit each)\n    total_digits += 1 * 9\n\n    # Pages 10-99 (2 digits each)\n    total_digits += 2 * (99 - 10 + 1)\n\n    # Pages 100-268 (3 digits each)\n    total_digits += 3 * (268 - 100 + 1)\n\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n    \n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    \n    # Convert meters to centimeters to work with whole numbers\n    width_cm = int(1.36 * 100)\n    height_cm = int(0.8 * 100)\n    \n    # Find the greatest common divisor to get the size of the largest square\n    square_size_cm = gcd(width_cm, height_cm)\n    \n    # Calculate the number of squares that can be cut out\n    num_squares = (width_cm // square_size_cm) * (height_cm // square_size_cm)\n    \n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    # There are 3 choices for each of the three digits,\n    # but we need to make sure the number is odd.\n    # For a number to be odd, the last digit must be an odd number.\n    # Among the given digits (4, 5, 7), there are two odd numbers (5, 7).\n    # Therefore, there are 2 choices for the last digit.\n\n    # The first two digits can be any of the three numbers, including the even number (4).\n    choices_for_first_two_digits = 3  # (4, 5, 7)\n    \n    # Calculate total possibilities\n    total_possibilities = choices_for_first_two_digits * choices_for_first_two_digits * 2  # Two choices for the last digit (5, 7)\n\n    return total_possibilities\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_div_by_5 = (200 // 5)\n    count_div_by_7 = (200 // 7)\n    count_div_by_both = (200 // (5 * 7))\n\n    ans = count_div_by_5 + count_div_by_7 - count_div_by_both\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the prices of each fruit\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    # Chris's transaction\n    equation1 = Eq(1 * durian + 2 * pineapple + 3 * watermelon, 440)\n    # Dylan's transaction\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # Equation to find the number of matches given n teams:\n    # n * (n - 1) = 2 * total_matches (since each team plays each other twice)\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    total_matches = 30\n    \n    # Setting up the equation\n    equation = Eq(n * (n - 1), 2 * total_matches)\n    \n    # Solving for n\n    teams = solve(equation, n)\n    \n    # We only care about the positive solution\n    return [team for team in teams if team > 0][0]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1000, 9999): # Consider the four-digit number ABC0\n        if i - int(str(i)[:-1]) == 135:  # Removing the last digit (Zero) and check the difference\n            return i\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    ans = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return ans\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    # Each trip can take 5 people\n    capacity = 5\n    students = 37\n\n    # One trip includes going to the other shore and returning back\n    # Find how many trips are needed to take 37 students across\n    trips_to_cross = (students // capacity) \n    # Since 37 is not a multiple of 5, we'll have to make one half trip (no return)\n    if students % capacity:\n        trips_to_cross += 1\n\n    # To get the total number of trips (including returns), we subtract one \n    # because the last trip does not require a return\n    total_trips = (trips_to_cross * 2) - 1\n\n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    both_subjects = 75\n    neither_subjects_percentage = 10\n    a_math_percentage = 80\n    b_math_percentage = 35\n    total_percentage = 100 - neither_subjects_percentage\n    \n    # Since the students choosing both subjects are included in both A and B percentages,\n    # we subtract the percentage of the students who chose both subjects from the sum of A and B percentages\n    # to avoid double counting. We then have the total percentage who chose either subject once.\n    # That total percentage corresponds to the 100% - 10% = 90% of all students.\n    # Therefore, we can find the total number of students by scaling the number who chose both subjects.\n    total_students = both_subjects * 100 / (a_math_percentage + b_math_percentage - total_percentage)\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2 * 10\n    hundreds = 3 * 100\n    number = ones + tens + hundreds\n    return number\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\nfrom math import prod\n\ndef factors_count(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef solution():\n    all_numbers = range(1, 14)\n    possible_combinations = list(combinations(all_numbers, 9))\n    \n    for comb in possible_combinations:\n        # Since two students know the number of factors, they must have unique factor counts\n        factor_counts = [factors_count(n) for n in comb]\n        if len(set(factor_counts)) != len(factor_counts):\n            continue\n\n        for alice in comb:\n            if alice % 2 == 0:  # Alice mentioned her number is odd\n                continue\n            alice_factors = factors_count(alice)\n                \n            # Find May's and Mark's number by factor counts and given difference\n            may_factors = alice_factors - 1  # May's number has one less factor\n            mark_factors = may_factors - 1   # Mark's number has one less factor than May\n            \n            if may_factors not in factor_counts or mark_factors not in factor_counts:\n                continue\n            \n            # Get the actual numbers for May and Mark\n            may = None\n            mark = None\n            for num in comb:\n                if factors_count(num) == may_factors and num == alice - 2:\n                    may = num\n                if factors_count(num) == mark_factors and num == may-1:\n                    mark = num\n            \n            # Check if the found numbers are valid and part of the combination\n            if may is None or mark is None or alice not in comb or mark not in comb:\n                continue\n\n            non_picked = [num for num in all_numbers if num not in comb]\n            return prod(non_picked)\n    \n    return None\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    ans = 100 / (1 + 1/99)\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    for alex_age in range(1, 98):\n        frank_age = alex_age + (alex_age - 1)\n        paul_age = alex_age - 1\n        if frank_age + alex_age + paul_age == 99:\n            return alex_age\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1469'\n    perm = permutations(digits)\n\n    sum_of_numbers = sum(int(''.join(p)) for p in perm)\n    avg = sum_of_numbers / 24  # 4! (factorial of 4) permutations\n\n    return avg\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n\n    # Initial condition: equal number of boys and girls\n    equation1 = Eq(boys, girls)\n    \n    # After 60 boys and 12 girls left, girls are twice the number of boys\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Number of boys at the gathering at first\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for tens in range(9):\n        for ones in range(9):\n            # Check if the digits add up to 15, and if the sum is an even number\n            if tens + ones == 15 and (10 * tens + ones) % 2 == 0:\n                # Construct the number with the hundreds place being 9\n                number = 900 + 10 * tens + ones\n                return number\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n    \n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope_length = 20\n    long_rope_length = 5 * short_rope_length\n    total_length = short_rope_length + long_rope_length\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # in km per hour\n    car_speed = 120  # in km per hour\n    van_lead_time = 3  # in hours\n    van_lead_distance = van_speed * van_lead_time  # distance van traveled during the car's delay\n\n    # Relative speed = car_speed - van_speed\n    relative_speed = car_speed - van_speed\n\n    # Time required for the car to catch up\n    catch_up_time = van_lead_distance / relative_speed  # in hours\n\n    return catch_up_time\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # The repetend of 0.01 is 01, which is a repeating sequence every 2 digits\n    repetend_length_a = 2\n    \n    # The product of two repeating decimals with repetend lengths a and b has a repetend length lcm(a, b)\n    # In this case, since we are multiplying the same number, the lcm of repetend lengths is the length itself\n    repetend_length_product = repetend_length_a\n    \n    return repetend_length_product\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Determine the rate at which printer A prints pages per minute.\n    rate_a = 300 / 12\n    # Determine the rate at which printer B prints pages per minute.\n    rate_b = 300 / 10\n    # Calculate total time in minutes for half an hour.\n    total_time_minutes = 30\n    # Calculate the number of pages printed by both printers in the given time.\n    pages_printed = (rate_a + rate_b) * total_time_minutes\n    return pages_printed\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    ans = 72 * 43\n    return ans\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "from itertools import combinations\n\ndef solution():\n    hats = [0, 1, 2, 3, 4]  # Including the option of not taking a hat\n    shirts = 3  # Mandatory\n    pants = 2  # Mandatory\n    skirt = 1  # Mandatory\n\n    # Calculate combinations for shirts, pants, and skirt, which are mandatory\n    mandatory_combinations = shirts * pants * skirt\n\n    # Calculate all possible combinations for hats\n    hat_combinations = sum([len(list(combinations(hats, i))) for i in range(0, len(hats) + 1)])\n    \n    # Total combinations is the product of mandatory combinations and hat combinations\n    total_combinations = mandatory_combinations * hat_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_items = symbols('total_items')\n\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n    equation = Eq(apples - lemons, 12)\n\n    solutions = solve(equation, total_items)\n    \n    # Calculate the number of lemons bought\n    number_of_lemons = lemons.subs(total_items, solutions[0])\n\n    return number_of_lemons\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if the day is valid for the month\n            if (month == 2 and day > 28) or \\\n               (month in [4, 6, 9, 11] and day > 30):\n                continue\n\n            # Format the date as an 8-digit string\n            date = f\"{day:02d}/{month:02d}/2019\"\n            \n            # Count the number of '3's in the date\n            count += date.count('3')\n\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    # Let's denote the number of durian, chocolate, and strawberry puffs sold as d, c, and s respectively.\n    # We are given the ratio d:c:s = 3:4:2.\n    # Let the common ratio between d, c, and s be k (d = 3k, c = 4k, s = 2k).\n    # Each puff is sold at a different price: durian for $5, chocolate for $3, and strawberry for $4.\n    # The total amount collected is $560.\n\n    # The total money collected from sales can be expressed as:\n    # Total = Price_durian * d + Price_chocolate * c + Price_strawberry * s\n    # 560 = 5 * (3k) + 3 * (4k) + 4 * (2k)\n    # 560 = 15k + 12k + 8k\n    # 560 = 35k\n\n    # Solving for k:\n    k = 560 / 35\n\n    # The amount of money collected from the sale of durian puffs would be:\n    # Money_durian = Price_durian * d\n    # Money_durian = 5 * (3k)\n    money_durian = 5 * (3 * k)\n    \n    return money_durian\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon')\n    \n    constraints = [\n        A > C,\n        A < D,\n        B < Xavier,\n        D == 5 * Yvonne,\n        Zachary + 2 - Xavier == Zachary - Waylon,\n        Zachary == Yvonne + Xavier,\n        # All stay within the 18 levels\n        A > 0, A <= 18,\n        B > 0, B <= 18,\n        C > 0, C <= 18,\n        D > 0, D <= 18,\n        Zachary > 0, Zachary <= 18,\n        Yvonne > 0, Yvonne <= 18,\n        Xavier > 0, Xavier <= 18,\n        Waylon > 0, Waylon <= 18,\n    ]\n    \n    # Iterate through each possible name-level combination to solve the constraints.\n    for person in [A, B, C, D]:\n        for name in [Zachary, Yvonne, Xavier, Waylon]:\n            assignments = [(A, 'Zachary'), (B, 'Yvonne'), (C, 'Xavier'), (D, 'Waylon')]\n            possible_solution = solve(constraints + [person == name], (A, B, C, D, Zachary, Yvonne, Xavier, Waylon))\n            \n            # If a valid solution is found where all variables are integers and between 1 and 18\n            if possible_solution:\n                if all(1 <= possible_solution[key] <= 18 and possible_solution[key].is_integer for key in [A, B, C, D, Zachary, Yvonne, Xavier, Waylon]):\n                    return possible_solution[A]\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is 7x5x14 and cut into 490 cubes, each side is divided into 7.\n    # So, the small cube is 1x1x1 and the cuboid is 7x5x14 small cubes.\n    # The corners of the cuboid will have three painted faces.\n    # There are two such corners on each of the 6 sides, but each corner belongs to 3 sides, \n    # so we should not count corners more than once.\n    # There are 8 such corners in a cuboid.\n    \n    return 8\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    # Loop through all two-digit numbers\n    for number in range(10, 100):\n        # Swap the digits of the number\n        reversed_number = int(str(number)[::-1])\n        # Check if the condition matches:\n        # the new number is 3 more than one third of the original number\n        if reversed_number == ((number // 3) + 3):\n            # Return the original number\n            return number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_period = 1.191  # 6% compounded yearly for three years\n    rate_second_period = 1.166  # 8% compounded yearly for the last two years\n    \n    # Calculate the investment amount after the first three years\n    investment_after_first_period = principal * rate_first_period\n    \n    # Calculate the final investment amount after the last two years\n    final_investment = investment_after_first_period * rate_second_period\n    \n    # Round the result to the nearest hundredth\n    return round(final_investment, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raisin_roll, donut = symbols('raisin_roll donut')\n    \n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    equation2 = Eq(raisin_roll, 3 * donut)\n    \n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n    \n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # The largest possible number of students in each team will be the \n    # greatest common divisor (GCD) of the number of students from the three schools.\n    num_students_school1 = 24\n    num_students_school2 = 36\n    num_students_school3 = 42\n\n    # Find GCD of the first two schools\n    gcd_first_two = gcd(num_students_school1, num_students_school2)\n    # Find GCD of the result with the third school\n    gcd_all_three = gcd(gcd_first_two, num_students_school3)\n\n    return gcd_all_three\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # Total number of elements up to 12\n    total_elements = sum(range(1, 13))\n    # Since the sequence is symmetrical, we just need the middle value\n    if total_elements % 2 == 0:\n        # If the count is even, the median is the average of the two middle numbers\n        median = (12 + 12) / 2\n    else:\n        # If the count is odd, the median is the middle number\n        median = 12\n\n    return median\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for a notebook (n), pencil case (p) and eraser (e)\n    n, p, e = symbols('n p e')\n    \n    # Given equations based on the problem statement\n    equation1 = Eq(3*n + 4*p + 5*e, 50)  # Total cost of notebooks, pencil cases and erasers\n    equation2 = Eq(n + p, 6)             # Cost of a notebook and a pencil case\n    equation3 = Eq(p + e, 9)             # Cost of a pencil case and an eraser\n    \n    # Solve the system of equations for the variables n, p, e\n    solutions = solve((equation1, equation2, equation3), (n, p, e))\n    \n    # The solution we want is the cost of a pencil case 'p'\n    pencil_case_cost = solutions[p]\n    \n    return pencil_case_cost\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 8]\n    all_permutations = list(permutations(digits))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Assuming the arithmetic sequence is a, a+d, a+2d, ..., a+(n-1)d\n    # where a is the first term, d is the common difference and n is the number of terms\n    \n    # Sum of first n terms of an arithmetic sequence is given by\n    # S_n = n/2 * (2a + (n-1)d)\n    \n    # Sum of first 9 terms\n    S_9 = 99\n    # Sum of first 27 terms\n    S_27 = 540\n\n    # Now we have two equations:\n    # S_9 = 9/2 * (2a + (9-1)d) = 99\n    # S_27 = 27/2 * (2a + (27-1)d) = 540\n\n    # Let's solve these two equations to find a and d\n    # Equation (1) derived from S_9\n    # 9/2 * (2a + 8d) = 99\n    # 9a + 36d = 198 ... (1)\n\n    # Equation (2) derived from S_27\n    # 27/2 * (2a + 26d) = 540\n    # 27a + 351d = 540 ... (2)\n\n    # Divide equation (2) by 3 to simplify\n    # 9a + 117d = 180 ... (2')\n    \n    # Subtract equation (1) from equation (2')\n    # (9a + 117d) - (9a + 36d) = 180 - 198\n    # 81d = -18\n    # d = -18 / 81\n    d = -18 / 81\n\n    # Use d to find a from equation (1)\n    # 9a + 36(-18/81) = 198\n    # 9a - 8 = 198\n    # 9a = 206\n    # a = 206 / 9\n    a = 206 / 9\n\n    # Find the sum of the first 16 terms using a and d\n    # S_16 = 16/2 * (2a + (16-1)d)\n    # S_16 = 8 * (2a + 15d)\n    S_16 = 8 * (2 * a + 15 * d)\n\n    return int(S_16)\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    num_digits = 0\n    for number in range(7, 41):\n        num_digits += len(str(number))\n    return num_digits\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Find the least common multiple of the two flashing rates\n    from math import gcd\n\n    red_flash_rate = 4  # red light flashes 4 times a minute\n    green_flash_rate = 6  # green light flashes 6 times a minute\n\n    # Calculate the least common multiple (LCM) of the flashing rates\n    lcm = (red_flash_rate * green_flash_rate) // gcd(red_flash_rate, green_flash_rate)\n\n    # Calculate how many times they flash together in a minute\n    flashes_per_minute = 60 // lcm\n\n    # Since we want the count for one hour, we multiply the flashes per minute by 60\n    # Adding 1 because the first flash is included\n    ans = (flashes_per_minute * 60) + 1\n\n    return ans\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let x be the number\n    # According to the problem 3x + 1 = 22\n    # Solve for x: x = (22 - 1) / 3\n    x = (22 - 1) / 3\n    return x\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = total_paintings * 0.40\n    still_lifes = total_paintings - landscapes\n    french_landscape = 25\n    total_french = 40\n    french_still_lifes = total_french - french_landscape\n    not_french_still_lifes = still_lifes - french_still_lifes\n\n    return int(not_french_still_lifes)\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "from math import comb\n\ndef solution():\n    # Calculate games played during the group stage\n    games_group_stage = 0\n    for group in range(8):  # there are 8 groups\n        teams_in_group = 4\n        games_group_stage += comb(teams_in_group, 2)  # each team plays against each other\n    \n    # Calculate games played during the knockout round\n    games_knockout_round = 0\n    rounds = [16, 8, 4, 2, 1]  # top 16, top 8, top 4, top 2, and final/3rd place match\n    for teams in rounds: \n        games_knockout_round += teams // 2  # each knockout game eliminates one team\n    \n    # Total games played is the sum of games from the group stage and the knockout round\n    total_games = games_group_stage + games_knockout_round\n    \n    return total_games\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume_ml = 60 + 780  # Total volume of the mixed drink in milliliters\n    max_volume_per_glass = total_volume_ml // 9  # Maximum volume per glass without leftovers\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_rice = (100 * 0.50) + (400 * 0.80)\n    total_dogfood = 100 + 400\n    concentration = (total_rice / total_dogfood) * 100\n    return concentration\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_in_meters_per_minute = 24\n    time_in_seconds = 300\n    time_in_minutes = time_in_seconds / 60\n\n    distance = speed_in_meters_per_minute * time_in_minutes\n\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    # Initialize the sum\n    s = 0\n    # Calculate S by adding each term in the series\n    for i in range(1, 2018):\n        # Generate each term by repeating the digit '2', i times\n        term = int('2' * i)\n        # Add the term to the sum\n        s += term\n    # Extract the last 5 digits\n    last_five_digits = s % 100000\n    return last_five_digits\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Using the unitary method to find the number of days one horse would eat the pile of hay\n    days_per_horse = horses_initial * days_initial\n\n    # Finding out for 20 horses\n    days_final = days_per_horse / horses_final\n\n    return days_final\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        s = str(i)\n        new_num = int(s[1:] + s[0])  # Move the first digit to the end\n        if new_num - i == 4707:\n            return i\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Let x be the number of years later when their sum of ages will be 48\n    # Oliver's age in x years will be 20 + x\n    # Lin's age in x years will be 26 + x\n    # Sum of their ages in x years: (20 + x) + (26 + x) = 48\n    # Now we solve for x: 46 + 2x = 48 -> 2x = 48 - 46 -> 2x = 2 -> x = 1\n    x = (48 - (20 + 26)) // 2\n    return x\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest = min(numbers, key=lambda x: abs(1 - x))\n    return closest\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    # smallest multiple of 35 that ends with digits '35' will be in the form of\n    # ...x35, where x can be any digit from 0 to 9. We will find x by checking the sum of the digits.\n    \n    # Starting from 1 to find the smallest multiple\n    i = 1\n    while True:\n        # Generate the multiple of 35\n        multiple = 35 * i\n        \n        # Convert to string to check the ending condition and calculate sum of digits\n        multiple_str = str(multiple)\n        if multiple_str.endswith('35'):\n            # Check if sum of digits is 35\n            if sum(int(digit) for digit in multiple_str) == 35:\n                return multiple\n        i += 1\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    watch = 4 * y\n    handbag = 20\n    children_money = 2 * (y - 5)\n\n    initial_money = 8 * y\n    equation = Eq(watch + handbag + children_money, initial_money)\n\n    solution_y = solve(equation, y)\n\n    return solution_y[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    leap_years = (2000 - 1901) // 4 + 1  # inclusive so we add 1\n    normal_years = 99 - leap_years\n    days = (leap_years * 366) + (normal_years * 365)\n    return days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    days = 15\n    money = 100\n    deposit = 10\n    spend = 8\n    cycle = 2  # days per cycle (deposit and spend)\n\n    # Calculate complete cycles within given days\n    complete_cycles = days // cycle\n\n    # Calculate remaining days after complete cycles\n    remaining_days = days % cycle\n\n    # Calculate net amount change per cycle\n    net_per_cycle = deposit - spend\n\n    # Calculate total amount change for complete cycles\n    total_change = complete_cycles * net_per_cycle\n\n    # Add deposit if there's an extra day remaining (odd number of days)\n    if remaining_days > 0:\n        total_change += deposit\n\n    # Calculate final money amount\n    money += total_change\n    \n    return money\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 3 != 0 and number % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    num_hours = 12\n    strikes = sum(range(1, num_hours + 1))\n    return strikes\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_value = 40  # total value in pence\n    coin_value = 10  # value of one ten-pence coin\n\n    number_of_coins = total_value / coin_value\n    total_weight = weight_per_coin * number_of_coins\n\n    return total_weight\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the fruits\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.4)\n    equation2 = Eq(mango + apple, 3.8)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_marks = 23\n    marks_per_correct = 5\n    marks_deducted_per_wrong = 2\n    total_questions = 6\n    \n    # Let x be the number of questions answered correctly.\n    # Then (total_questions - x) is the number of questions answered wrongly.\n    # The total marks is then x*marks_per_correct - (total_questions - x)*marks_deducted_per_wrong.\n    # We can set up the equation and solve for x:\n    \n    for x in range(total_questions + 1): # +1 because range is exclusive on the upper bound\n        if (x * marks_per_correct - (total_questions - x) * marks_deducted_per_wrong) == total_marks:\n            return x\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'n' be the number of buttons Nina has originally,\n    # and 'j' be the number of buttons James has originally.\n    n, j = symbols('n j')\n    \n    # The total number of buttons is 22.\n    equation1 = Eq(n + j, 22)\n    \n    # When Nina gave 4 of her buttons to James, they have the same number.\n    # Nina will have 'n-4' buttons and James will have 'j+4'.\n    equation2 = Eq(n - 4, j + 4)\n    \n    # Nina has more buttons than James.\n    equation3 = Eq(n > j, True)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (n, j))\n    \n    # Return Nina's original number of buttons\n    return solutions[n]\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    g = 9.81  # acceleration due to gravity (m/s^2)\n    theta = math.radians(37)  # convert angle to radians\n    v0 = 10  # initial velocity (m/s)\n    \n    # Calculate the height using the formula h = (v0^2 * sin^2(theta)) / (2 * g)\n    height = (v0 ** 2 * math.sin(theta) ** 2) / (2 * g)\n    \n    # Calculate the distance along the ramp using the formula d = h / sin(theta)\n    distance = height / math.sin(theta)\n    \n    return height, distance\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    candies = 35\n    children = 9\n    \n    # Distribution starts from child 3\n    starting_child = 3\n    \n    # Find the seat number of the last child to receive the candy\n    last_child_seat = (candies - 1 + starting_child) % children\n    if last_child_seat == 0:\n        last_child_seat = children\n    \n    return last_child_seat\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_parts = 1 + 4 # Adults to children ratio parts (1 part adults, 4 parts children)\n    adults = total_people * (1 / ratio_parts)\n    return int(adults)\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # The worst case scenario following the pigeonhole principle is that Sheila takes out all balls of one color or the maximum balls without completing any group of 4.\n    # This means she could take 5 blue balls, and still not have a group of 4 of any other color.\n    # Then she could take 4 orange balls, and not have two groups of 4 yet.\n    # At this point, the next ball she takes has to complete a group of 4 for one color (since there are only orange and yellow balls left).\n    # And then she needs to take more balls to ensure there is another group of 4 for the other color.\n    \n    # So, Sheila needs to take 5 blue, 4 orange, and 4 more balls (since the yellow group will always be completed before the remaining orange group).\n    # This totals to 5 + 4 + 4 = 13 balls.\n    return 13\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + (30 * 30) + (30 * 30 * 30)\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    total_players = 64\n    players_per_match = 4\n\n    matches = 0\n    while total_players > 1:\n        total_players /= players_per_match\n        matches += 1\n    \n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    return 2.5 * 24\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    # The numbers form an arithmetic sequence with a common difference of 2.\n    # We can calculate the sum using the formula for the sum of an arithmetic series:\n    # Sum = n/2 * (first term + last term)\n    \n    n = (99 - 1) / 2 + 1  # number of terms in the sequence\n    sum_sequence = n / 2 * (1 + 99)  # applying the sum formula for arithmetic sequence\n    \n    return int(sum_sequence)\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    # Since moving the first digit to the ones place increases the number by 4707,\n    # we need to consider a 4-digit number in the form of ABCD, where A, B, C, D are digits.\n    # The initial number is 1000A + 100B + 10C + D\n    # The new number after the move is 1000B + 100C + 10D + A\n    # The difference is (1000B + 100C + 10D + A) - (1000A + 100B + 10C + D) = 4707\n    # Simplifying the difference: -999A + 900B + 90C + 9D = 4707\n    # Dividing by 9 to simplify further: -111A + 100B + 10C + D = 523\n    \n    # Now use brute-force search as there are relatively few 4-digit numbers.\n    for A in range(1, 10):  # A cannot be 0 since it's a 4-digit number\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    if -111 * A + 100 * B + 10 * C + D == 523:\n                        return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / num_bags\n\n    return flour_weight\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # The sum of an arithmetic sequence can be calculated by the formula: sum = n/2 * (first_term + last_term)\n    # Let's denote the first term of the sequence as 'a', and the common difference as 'd'.\n    \n    # We have two equations based on the given information:\n    # 1. (9/2) * (2*a + (9 - 1)*d) = 72\n    # 2. (23/2) * (2*a + (23 - 1)*d) = 736\n    \n    # From equation 1, we can find 'a':\n    # a + 4*d = 72 / 4.5\n    # a + 4*d = 16\n    \n    # From equation 2, we can find 'd':\n    # a + 22*d = 736 / 11.5\n    # a + 22*d = 64\n    \n    # Solve the system of equations for a and d:\n    from sympy import symbols, Eq, solve\n    a, d = symbols('a d')\n    \n    equation1 = Eq(a + 4*d, 16)\n    equation2 = Eq(a + 22*d, 64)\n    solutions = solve((equation1, equation2), (a, d))\n    a_value, d_value = solutions[a], solutions[d]\n    \n    # Now, to find the sum of the first 16 terms: sum = (16/2) * (2*a + (16 - 1)*d)\n    sum_first_16 = (16/2) * (2*a_value + (16 - 1)*d_value)\n    \n    return sum_first_16\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assuming the exchange rate is for Pounds to Russian Rubles\n    # And assuming we have the current exchange rate \n    # This is a placeholder as the exchange rate is not given\n    pound_to_ruble = 1  # Replace this with the actual exchange rate\n\n    # Amount spent in St Petersburg in rubles\n    amount_in_rubles = 14 * pound_to_ruble\n    \n    # Assuming the price of a CD in St Petersburg in rubles\n    # This is a placeholder as the price in St Petersburg is not given\n    cd_price_rubles = 1  # Replace this with the actual price of a CD in rubles\n\n    # Calculate the number of CDs Richard could buy\n    number_of_cds = amount_in_rubles // cd_price_rubles\n    \n    return number_of_cds\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime\n\n    # Loop through the options provided\n    for age in [28, 39, 52, 84]:\n        # Calculate the age 3 years ago and the age next year\n        age_3_years_ago = age - 3\n        age_next_year = age + 1\n        age_plus_12_years = age + 12\n\n        # Check if the age 3 years ago is a perfect square\n        if (age_3_years_ago**0.5).is_integer():\n            # Check if the age next year is prime\n            if isprime(age_next_year):\n                # Check if the age in 12 years is a cube\n                if round(age_plus_12_years**(1/3), 13)**3 == age_plus_12_years:\n                    return age\n    \n    return \"No valid age found\"\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # The worst-case scenario to ensure 2 different colors is picking all of one color first.\n    # Since we want the smallest number of M&Ms, we should pick from the color with the most first.\n    # Bart could potentially pick all 5 brown M&Ms.\n    # To ensure a different color, he needs to pick at least one more.\n    # Thus, after picking 5 brown, the next one has to be red or yellow.\n    return 5 + 1  # 5 of the same color and 1 additional for a different color\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # since the distances are directly proportional to their speeds\n    # we can set up ratios to define their speeds relative to each other\n    # Let a, b, c be the speeds of Andrew, Bernice and Cassandra respectively \n    # When Andrew is at 5, Bernice is at 3\n    # so, a/b = 5/3 or b = 3*a/5\n    \n    # When Bernice reaches 6, Cassandra is already at 10\n    # so, b/c = 6/10 or c = 10*b/6\n    # Substitute b in terms of a into the second equation: c = 10*(3*a/5)/6 = a\n    \n    # Since the speed of Cassandra is the same as Andrew's, when Cassandra is at 19\n    # Andrew will also be at 19\n    Andrew_level = 19\n    return Andrew_level\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def vee(a, b):\n        return a * b + a + b\n\n    # According to the equation: 2 vee (x vee 4) = 59\n    # We have to solve for x in the following equation:\n    # 2 * (x vee 4) + 2 + (x vee 4) = 59\n    for x in range(59):\n        if vee(2, vee(x, 4)) == 59:\n            return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    pattern_length = len(pattern)\n    total_digits = 43\n    full_patterns = total_digits // pattern_length\n    remaining_digits = total_digits % pattern_length\n\n    sum_full_patterns = sum(map(int, pattern)) * full_patterns\n    sum_remaining_digits = sum(map(int, pattern[:remaining_digits]))\n\n    return sum_full_patterns + sum_remaining_digits\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz_minutes = 30\n    number_of_quizzes = 4\n    minutes_per_hour = 60\n\n    total_time_minutes = time_per_quiz_minutes * number_of_quizzes\n    total_time_hours = total_time_minutes / minutes_per_hour\n\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    km_to_cm_conversion_factor = 100000  # 1 km equals 100000 cm\n    km_value = 4.7\n    cm_value = km_value * km_to_cm_conversion_factor\n    return cm_value\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    shafur_speed = 54  # km/h\n    samuel_speed = 66  # km/h\n\n    # Convert 40 minutes to hours\n    time_driven = 40 / 60  # hours\n\n    # Distance each driver has traveled before Samuel turns back\n    shafur_distance = shafur_speed * time_driven\n    samuel_distance = samuel_speed * time_driven\n\n    # Since they reach Town Y at the same time,\n    # the additional distance that Shafur travels is equal to \n    # the distance Samuel must cover to go back to Town X and then to Town Y.\n    #\n    # Let d be the distance from X to Y.\n    # Then the additional distance Shafur travels is d - shafur_distance\n    # Time taken by Shafur to travel the additional distance is (d - shafur_distance) / shafur_speed\n    #\n    # Time taken by Samuel to go back to X is samuel_distance / samuel_speed\n    # Total time taken by Samuel to reach Y is (d / samuel_speed) + (samuel_distance / samuel_speed)\n    # \n    # Equating the travel times:\n    # (d - shafur_distance) / shafur_speed = (d / samuel_speed) + (samuel_distance / samuel_speed)\n    \n    # Solving for d:\n    d = (shafur_distance / shafur_speed + samuel_distance / samuel_speed) / (1/shafur_speed - 1/samuel_speed)\n    \n    return d\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n    years = 0  # Initialize the number of years\n\n    while sum(grandsons_ages) != grandpa_age:\n        # Each year, all of them get one year older\n        grandpa_age += 1\n        grandsons_ages = [x + 1 for x in grandsons_ages]\n\n        # Increment years\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_cost, table_cost = symbols('chair_cost table_cost')\n\n    equation1 = Eq(table_cost, 3 * chair_cost)\n    equation2 = Eq(4 * table_cost + 9 * chair_cost, 504)\n\n    solutions = solve((equation1, equation2), (chair_cost, table_cost))\n\n    return solutions[chair_cost]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    total_amount = 40\n    count = 0\n    for num_five_p in range(0, total_amount // 5 + 1):\n        if (total_amount - num_five_p * 5) % 10 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -4\n\n    num_terms = 0\n    term = first_term\n    while term > 0:\n        num_terms += 1\n        term += difference\n    \n    return num_terms\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for num in range(100, 1000):\n        digits = [int(d) for d in str(num)]\n        product = 1\n        for d in digits:\n            product *= d\n        if 100 <= product <= 999:\n            return num\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    return 43242 / 100\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    total_flowers = 68\n    flowers_per_vase = 9\n\n    vases_needed = total_flowers // flowers_per_vase\n    if total_flowers % flowers_per_vase != 0:\n        vases_needed += 1\n\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n\n    ans = morning_fruit - afternoon_fruit\n\n    return ans\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    from fractions import Fraction\n    from decimal import Decimal, getcontext\n\n    # Set precision for decimal calculations\n    getcontext().prec = 9\n\n    # First expression\n    first_numerator = Fraction(7) / Fraction(-10, 3)\n    first_denominator = (-0.027) ** (1/3)\n    first_expression = first_numerator / first_denominator\n\n    # Second expression\n    second_numerator = (2 ** 3) / (4 ** 2)\n    second_denominator = Decimal('0.125') * (Decimal('1.8') - (Decimal('0.2') * 7))\n    second_expression = Decimal(second_numerator) / second_denominator\n\n    # Third expression\n    repeating_decimal = Decimal('1') / Decimal('0.142857')  # The repeating cycle of 1/7\n    third_expression = repeating_decimal + (2 * Decimal('0.3'))\n\n    # Final answer\n    ans = first_expression + second_expression - third_expression\n\n    # Convert to a floating point number if necessary\n    return float(ans)\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 // 3 + 1) * 3  # Find the smallest multiple of 3 greater than or equal to 38\n    last_multiple = 81 // 3 * 3  # Find the largest multiple of 3 less than or equal to 81\n\n    num_multiples = (last_multiple - first_multiple) // 3 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    total_sum = sum(range(3, 11)) + sum(range(3, 10))\n    return total_sum\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    phones_left = 78\n    february_sales = (phones_left - 13) * 2\n    january_sales = (february_sales + 22) * 2\n    total_phones = january_sales + february_sales + phones_left\n    return total_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    base_number = (18 * 7) / 3\n    result = (5 / 6) * base_number\n    return result\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    # In a knockout tournament, the number of games played is always one less than the number of players.\n    # This is because in every game, one player is eliminated until only one winner remains.\n    number_of_players = 5\n    games_played = number_of_players - 1\n    return games_played\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Bud's pocket money be x\n    x = symbols('x')\n    # Then Pip's pocket money will be x + 50\n    # Pip spends 80% of his pocket money which is 0.8 * (x + 50)\n    # Bud spends 3/4 of her pocket money which is (3/4) * x\n    # After spending, Pip's money is ((1 - 0.8) * (x + 50)) = 0.2 * (x + 50)\n    # After spending, Bud's money is ((1 - 3/4) * x) = 0.25 * x\n\n    # The ratio given is Pip's leftover to Bud's leftover is 6:5\n    ratio_eq = Eq(0.2 * (x + 50) / (0.25 * x), 6/5)\n\n    # Solve the equation\n    solution = solve(ratio_eq, x)\n\n    # Pip's pocket money is Bud's + 50\n    pip_money = solution[0] + 50\n\n    return pip_money\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    pens_more_than_pencils = 50\n\n    # Let the number of pencils be x\n    # Then the number of pens will be x + 50\n    # Their sum is given as 438, so we have the equation\n    # x + (x + 50) = 438\n    # 2x + 50 = 438\n    # 2x = 438 - 50\n    # 2x = 388\n    # x = 388 / 2\n    pencils = (total_items - pens_more_than_pencils) / 2\n\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Calculate the total spent from January to April\n    jan_to_apr = 500 * 4\n    # Calculate the total spent from May to July\n    may_to_july = 300 * 3\n    # August to September total is given directly\n    aug_to_sep = 400\n    # Calculate the total spent from October to December\n    oct_to_dec = 300 * 3\n\n    # Calculate the total amount spent during the year\n    total_spent = jan_to_apr + may_to_july + aug_to_sep + oct_to_dec\n\n    # Calculate the average per month from January to December\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    initial_apples = 5 * 9\n    additional_apples = 16\n    total_apples = initial_apples + additional_apples\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_packets = 4\n    amount_per_packet = 70\n    shortage = 15\n\n    total_amount_needed = total_packets * amount_per_packet\n    money_mrs_koh_had = total_amount_needed - shortage\n\n    return money_mrs_koh_had\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for number in range(4, 52):\n        count += str(number).count('3')\n        if number == 23:\n            return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # Number of games played in a one-on-one knockout tournament\n    # is always one less than the number of players.\n    num_players = 5\n    num_games = num_players - 1\n\n    return num_games\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    ans = 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    ans = 8 + 10 - 1\n    return ans\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(2016)\n    ages = [1] * 4\n    i = 0\n    \n    for factor, count in factors.items():\n        for _ in range(count):\n            ages[i] *= factor\n            i = (i + 1) % 4\n\n    ans = sum(ages)\n    return ans\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person ends up with\n    anna, betsy, charlene = symbols('anna betsy charlene')\n    \n    # Since the final ratio of their marbles is 2:5:7\n    equation1 = Eq(anna, 2)\n    equation2 = Eq(betsy, 5)\n    equation3 = Eq(charlene, 7)\n    \n    # The final total is 168 marbles\n    equation4 = Eq(anna + betsy + charlene, 168)\n    \n    # Considering the marbles given by Charlene to Betsy and Betsy to Anna\n    original_betsy = betsy + 15 - 8\n    original_charlene = charlene - 15\n    original_anna = anna + 8\n    \n    # Using the substitution method\n    final_total = 2 + 5 + 7\n    scale_factor = 168 / final_total\n\n    # Solving the equations to find the number of marbles each one started with\n    marbles_betsy = 5 * scale_factor\n    marbles_betsy_original = marbles_betsy + 15 - 8\n\n    return marbles_betsy_original\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    from_left = 3\n    from_right = 7\n    from_front = 7\n    from_back = 4\n    \n    total_columns = from_left + from_right - 1\n    total_rows = from_front + from_back - 1\n    \n    total_students = total_columns * total_rows\n    \n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Let's denote the current combined age of the 2 dogs as x years.\n    # Four years ago, the combined age of the 2 dogs was (x - 2*4) years.\n    # According to the problem, four years ago the combined age was 10 years.\n    past_combined_age = 10\n    # Therefore, four years ago age was 10. Now, it must be 10 + 2*4\n    current_combined_age = past_combined_age + 2 * 4\n    # What will be combined age in 2 years?\n    future_combined_age = current_combined_age + 2 * 2\n    return future_combined_age\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    result = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return result\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    # Let x be the number of 10p coins\n    money_in_bag = 1575  # We convert £15.75 to pence for easier calculations\n    \n    # Given relationships\n    # 5p coins = 0.5 * x\n    # 10p coins = x\n    # 20p coins = 2 * x\n    \n    # Calculate total money in terms of x\n    # Total money = (5 * 0.5 * x) + (10 * x) + (20 * 2 * x)\n    # 2.5x + 10x + 40x\n    # 52.5x = 1575\n    x = money_in_bag / 52.5\n    \n    # Number of 20p coins is 2 * x\n    num_20p_coins = 2 * x\n    \n    return int(num_20p_coins)\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Number of boys and girls\n    b, g = symbols('b g')\n    \n    # Each boy has as many sisters as brothers: b - 1 (himself) = g (sisters)\n    equation1 = Eq(b - 1, g)\n    \n    # Each girl has half as many sisters as brothers: g - 1 (herself) = 2 * (b/2) = b\n    equation2 = Eq(g - 1, b / 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n    b_value = solutions[b]\n    g_value = solutions[g]\n    \n    # Total number of children is the sum of the number of boys and girls\n    total_children = b_value + g_value\n    return int(total_children)\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # average speed = total distance / total time, convert the minutes to hours\n    time_in_hours_first_30_min = 30 / 60\n    time_in_hours_second_30_min = 30 / 60\n    time_in_hours_last_30_min = 30 / 60\n    \n    # The total distance is the sum of the distance at each speed\n    equation = Eq(x * time_in_hours_first_30_min + (x - 20) * time_in_hours_second_30_min + (x + 10) * time_in_hours_last_30_min, 70)\n    \n    # Solve the equation to find the value of x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining = 60\n    part_eaten = 3/5\n    original_mass = remaining / (1 - part_eaten)\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    end_date = start_date + timedelta(weeks=3)\n    \n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 11 - 5  # This is the common difference in the arithmetic sequence\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    \n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_10_number //= 6\n        base_6_number = str(remainder) + base_6_number\n    \n    ans = base_6_number\n    return ans\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    min_apples = 1  # minimum number of apples a child can get\n    total_apples = 27  # total number of apples\n    num_children = 5  # number of children\n\n    # The child with the most apples gets at least as many as the next child plus one\n    # Use this logic to minimize the number for the child with the most apples\n    \n    # Fill the remaining children with the minimal increasing count of apples\n    count = []\n    for i in range(1, num_children):\n        count.append(min_apples + i - 1)\n\n    # Calculate the least possible number of apples for the child with most apples\n    most_apples = total_apples - sum(count)\n\n    return most_apples\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 10\n    total_bill = 50\n\n    total_cost = total_cost_per_person * number_of_people\n    total_tip = (total_cost * tip_percentage) / 100\n    total_payment = total_cost + total_tip\n    change = total_bill - total_payment\n\n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    return 60\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    climb_per_day = 4\n    slide_per_night = 2\n    distance_covered = 0\n    day = 0\n\n    while distance_covered < total_distance:\n        day += 1\n        distance_covered += climb_per_day\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slide_per_night\n    \n    return day\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # To win the game, Jason needs to leave Belinda with a number of marbles such that no matter how many marbles Belinda takes (1, 2, or 3), \n    # Jason will be able to finish the game on his next turn. After Belinda's turn, there should be 4 marbles left since no matter if she takes \n    # 1, 2 or 3 marbles, Jason can take the remaining marbles and win. \n    # Working backward, Jason should aim to leave Belinda with 8 marbles on her turn before this, then Jason with 12, Belinda with 16,\n    # Jason with 20, Belinda with 24. Hence, Jason should take 2 marbles on his first turn to leave 24 marbles to Belinda \n    # and ensure his win by following the strategy.\n\n    marbles_to_take = 26 % (3 + 1) # 3+1 because the maximum marbles one can take is 3, and adding 1 for the current turn.\n    if marbles_to_take == 0:\n        marbles_to_take = 2 # from the strategy we choose 2 as the ideal number\n    return marbles_to_take\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total += 5 * n\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    ways = []\n    for combo in combinations(range(1, 25), 7):\n        if sum(combo) == 25:\n            ways.append(combo)\n    return ways \n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # The probability of the alcoholic not being in the first bar is 10%\n    # The probability of the alcoholic not being in the second bar is also 10%\n    # Therefore, the probability of the alcoholic being in the third bar is 100% - 10% - 10%\n    return 1 - 0.1 - 0.1\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    base_number = (18 / (3/7))\n    required_fraction = (5/6) * base_number\n    return required_fraction\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)\n    time_spent = timedelta(weeks=3)\n\n    end_date = start_date + time_spent\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers, trees = symbols('volunteers trees')\n\n    # If each volunteer plants 4 trees, 5 trees are left\n    equation1 = Eq(4 * volunteers + 5, trees)\n\n    # If each of them plants 7 trees, one volunteer will have nothing to plant\n    equation2 = Eq(7 * (volunteers - 1), trees)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (volunteers, trees))\n\n    return solutions[volunteers], solutions[trees]\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the growth rate of grass per week and y be the initial amount of grass\n    x, y = symbols('x y')\n\n    # Equation 1: 120 cows eat up the grass in 12 weeks\n    # 120 cows eat 120x amount of grass per week, so in 12 weeks, they eat 120*12*x\n    # they will eat up all the initial grass plus the grass growing during these weeks\n    equation1 = Eq(120 * 12 * x + y, 120 * 12)\n\n    # Equation 2: 150 cows eat up the grass in 8 weeks\n    # 150 cows eat 150x amount of grass per week, so in 8 weeks, they eat 150*8*x\n    equation2 = Eq(150 * 8 * x + y, 150 * 8)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # growth rate of grass per week\n    growth_rate = solutions[x]\n\n    # Now find the number of cows that the pasture can sustain for 6 weeks\n    # let c be the number of cows\n    c = symbols('c')\n\n    # c cows eat cx amount of grass per week, so in 6 weeks, they eat c*6*x\n    # they will eat up all the initial grass plus the grass growing during these weeks\n    equation3 = Eq(c * 6 * growth_rate + y, c * 6)\n\n    # number of cows that can be sustained for 6 weeks\n    number_of_cows = solve(equation3, c)\n\n    return number_of_cows[0]\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    boys_more = 55\n\n    # starting from 1, because 1^2 (only one girl) is the smallest possibility\n    layer = 1  \n    while True:\n        # Boys are on odd layers and girls on even layers.\n        # Number of students on the outer layer is (2 * layer + 1) ^ 2\n        # Number of students on the inner layer is (2 * layer - 1) ^ 2\n        boys = (2 * layer + 1) ** 2\n        girls = (2 * layer - 1) ** 2 if layer > 1 else 0  # for the first layer, there are no girls\n\n        # Calculate the number of boys and girls\n        current_boys = boys - girls\n        current_girls = girls - (0 if layer == 1 else (2 * layer - 3) ** 2)\n\n        if current_boys - current_girls == boys_more:\n            break\n\n        layer += 1\n\n    total_students = boys  # total number of students is the total number in the last calculated boys layer\n\n    return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Total number of stickers\n    total_stickers_eq = Eq(A + B, 270)\n\n    # After moving the stickers, the ratio in Bag B to Bag A is 3:2\n    moved_stickers_eq = Eq((B + 56)/(A - 56), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((total_stickers_eq, moved_stickers_eq), (A, B))\n\n    # We are interested in the number of stickers in Bag A initially\n    return solutions[A]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    return 10 * 21 // 14\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    common_difference = 11 - 5\n    last_term = 41\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets_needed = -(-children // bars_per_packet)  # Ceiling division\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 0.05 * 180\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        return sum([i for i in range(1, n) if n % i == 0])\n\n    n = 2  # Start checking from 2 as 1 is not considered a perfect number\n    while True:\n        if sum_of_factors(n) == n:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    return 30-28+26-24+22-20+18-16+14\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term_index = 10\n    term_value = 31\n    difference = 3\n    \n    first_term = term_value - (term_index - 1) * difference\n    \n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    boxes_needed = -(-total_cakes // cakes_per_box)  # Ceiling division to ensure all cakes are in boxes\n\n    return boxes_needed\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_for_friends = (total_sweets - sweets_for_sister) // number_of_friends\n\n    return sweets_for_friends\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n\n    initial_condition = Eq(lovelle + makayla, 3998)\n    final_condition = Eq(lovelle - 462, makayla - (2/5) * makayla)\n\n    solutions = solve((initial_condition, final_condition), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    # Let the total amount of money Irene had at first be x.\n    # She spent 1/4 of x on the book and 2/7 of x on the bag.\n    # The book and bag together cost $225.\n    # Therefore, (1/4)*x + (2/7)*x = 225\n    # To find the common denominator, we find the LCM of 4 and 7, which is 28.\n    # (7/28)*x + (8/28)*x = 225\n    # Combining like terms, we get (15/28)*x = 225\n    # Solve for x: x = 225 * (28/15)\n    \n    x = 225 * (28/15)\n    return x\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # The sum of the first n positive integers is given by the formula n(n + 1)/2.\n    # We need to find the largest value of n such that n(n + 1)/2 <= 30\n    n = 1\n    while n * (n + 1) // 2 <= 30:\n        n += 1\n    # Since we need the sum to be exactly 30, we subtract 1 to get the maximum number of different positive integers.\n    return n - 1\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n  # Pigeonhole principle: To make sure 10 cards of the same color are selected,\n  # dealer should pick at most (n-1) from each color where n is the target count.\n  # Therefore, he should pick 9 cards from each color and then one more card.\n\n  # Cards to pick from each color to ensure 9 are not of the same color\n  cards_needed = (9 - 1) * 4  # Subtract 1 from 9 to get the maximum that are not 10 of the same color\n  \n  # Add one card to ensure at least 10 of the same color\n  cards_needed += 1\n\n  return cards_needed\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    number_of_gaps = 8 - 1  # Number of gaps is one less than the number of daffodils\n    gap_length = 1.1  # Length of each gap in meters\n\n    # Calculate the total length of the gaps\n    total_gap_length = number_of_gaps * gap_length\n\n    # The total length is the sum of the lengths of the gaps and the daffodils\n    # Assuming the width of each daffodil is negligible compared to the gap\n    total_length = total_gap_length\n\n    return total_length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    total_boxes = 1450\n    books_per_box = 258\n    total_books = total_boxes * books_per_box\n\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    # Each box must have a different number of stickers, and the total is 9\n    # As the boxes are identical, we just need to find unique sets which sum to 9\n    # Loop through possible distinct numbers of stickers for the three boxes\n    for box1 in range(1, 9):\n        for box2 in range(box1 + 1, 9):  # box2 must be greater than box1\n            box3 = 9 - (box1 + box2)\n            if box3 > box2:  # box3 must be greater than box2\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let x be the amount Jane drinks, then Alex drinks 1.5x\n    # x + 1.5x = total_juice\n    # 2.5x = total_juice\n    # x = total_juice / 2.5\n    jane_drinks = total_juice / 2.5\n    alex_drinks = 1.5 * jane_drinks\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    walk_rate = 8\n    time = distance / walk_rate\n    return int(time)\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(12, 4)  # Total ways to select 4 students out of 12 (ignoring gender)\n    ways_with_no_boys = comb(5, 4)  # Ways to select 4 students where all are girls\n    ways_with_at_least_one_boy = total_ways - ways_with_no_boys  # Subtract the ways that include no boys\n    return ways_with_at_least_one_boy\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    return 2 * (1/4 * 16)\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n    \n    total_fruits = pears + strawberries\n    fruits_per_friend = total_fruits // friends\n    \n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let the initial amount of money Bud had be x.\n    # After spending 1/4 on a book, 3/4 of x is left.\n    # Then she spent 2/5 of the remaining money on a bag.\n    # The cost of the bag is given as £60.\n\n    # Equation representing the cost of the bag:\n    # (2/5) * (3/4) * x = 60\n\n    # Solving for x:\n    x = (60 * 5/2) * (4/3)\n    \n    return x\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    ans = x * y\n    return ans\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    pages = 0\n    digits_used = 0\n    \n    for i in range(1, total_digits + 1):\n        if i < 10:\n            digits_used += 1\n        elif i < 100:\n            digits_used += 2\n        else:\n            digits_used += 3\n\n        if digits_used > total_digits:\n            break\n            \n        pages += 1\n    \n    return pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for number in range(201, 241, 2):  # Iterate through odd numbers\n        if number % 3 == 0 and number % 7 == 0:  # Check divisibility by 3 and 7\n            return number\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = ((70 / 7) - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total distance between the first and last peach tree\n    total_distance = (41 - 1) * 3  # 40 intervals of 3m each\n    \n    # Number of lamp posts is the total distance divided by the distance between lamp posts plus 1 for the first lamp post\n    num_lamp_posts = (total_distance // 8) + 1\n    \n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for unit_price in range(1, 1000):\n        total_price = unit_price * 72\n        if str(total_price)[1:4] == \"679\" and total_price % 100 >= 10:\n            return unit_price\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # in meters\n    speed = 40  # in meters per second\n\n    time_to_pass = train_length / speed\n    \n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # loop through all 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:  # check if sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, A, B = symbols('candies A B')\n    eq1 = Eq(4 * A, candies - 20)       # Equation for class A\n    eq2 = Eq(6 * B, candies + 16)       # Equation for class B\n    eq3 = Eq(A, 2 * B)                  # Class A has twice the students of class B\n\n    solutions = solve((eq1, eq2, eq3), (candies, A, B))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    plants = intervals + 1\n    return plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    spent_on_dvd = total_money / 3\n    remaining_money = total_money - spent_on_dvd\n    spent_on_book = remaining_money * 0.25\n    final_remaining_money = remaining_money - spent_on_book\n\n    return final_remaining_money\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for _ in range(years):\n        initial_rabbits *= 3\n        initial_rabbits -= initial_rabbits // 2\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Time taken to travel the first mile at 60 mph\n    time_1 = 1 / 60\n    # Time taken to travel the second mile at 30 mph\n    time_2 = 1 / 30\n    \n    # Total distance travelled\n    total_distance = 1 + 1\n    # Total time taken for both trips\n    total_time = time_1 + time_2\n    \n    # Average speed (total distance / total time)\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n    num_washes = (target_amount // amount_per_wash) + 1\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    initial_candies = 2\n    days_passed = 4 - 1  # Subtract 1 because she starts eating on the first day\n\n    candies_eaten = initial_candies * (2 ** days_passed)\n\n    return candies_eaten\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the unknown natural number greater than 1\n    x = symbols('x', integer=True, positive=True)\n    \n    # Set up the equations based on the remainders\n    eq1 = Eq((290 - a) % x, 0)\n    eq2 = Eq((235 - (a + 2)) % x, 0)\n    eq3 = Eq((200 - (a + 5)) % x, 0)\n\n    # Solve the system of equations for both x and a\n    solutions = solve((eq1, eq2, eq3), (x, a))\n\n    # Filter solutions to get the valid natural number (greater than 1)\n    ans = [s[0] for s in solutions if s[0] > 1]\n    \n    # Return the answer, it should be a unique number since it's greater than 1\n    return ans[0]\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_earnings_per_day = 70\n    number_of_working_days = 6  # Monday to Saturday\n    total_earnings = average_earnings_per_day * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smaller unknown angle\n    # Then 2x will be the larger unknown angle\n    x = symbols('x')\n    \n    # Sum of angles in a triangle is 180 degrees.\n    # Since one angle is a right angle (90 degrees), the sum of the other two angles will be 90 degrees.\n    equation = Eq(x + 2*x, 90)\n\n    # Solve the equation to find the value of x\n    angle_x = solve(equation, x)[0]\n    # The largest angle between the two is 2 times larger than angle x\n    largest_angle = 2 * angle_x\n\n    return largest_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for i in range(10):\n        for s in range(10):\n            if i != s:\n                is_val = int(f\"{i}{s}\")\n                pi_val = 4 * is_val\n                p, pi_last_digit = divmod(pi_val, 10)\n\n                if pi_last_digit == i and p != i and p != s and p < 10:\n                    return pi_val\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_sum = 765\n    total_members = 9\n\n    # Arithmetic sequence sum formula: (n/2)*(first_term + last_term) = total_sum\n    # Since the members are consecutive, the middle term is also the average: total_sum / total_members\n    middle_age = total_sum / total_members\n\n    return middle_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9*necklace + 5*earring, 1440)\n    equation2 = Eq(3*necklace + earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n    \n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    monday_to_saturday_sunshine_total = 3 * 6\n    sunday_sunshine = 10\n    total_sunshine = monday_to_saturday_sunshine_total + sunday_sunshine\n    total_days = 7\n    average_sunshine_per_day = total_sunshine / total_days\n    return average_sunshine_per_day\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed\n\n    walking_time_to_school = 24  # min for the whole journey\n    distance_to_school = walking_speed * walking_time_to_school  # total distance\n\n    half_distance = distance_to_school / 2\n    walking_time_for_half = half_distance / walking_speed\n    running_time_for_half = half_distance / running_speed\n\n    total_time = walking_time_for_half + running_time_for_half\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_trees = 79\n    total_distance = 320\n    # The number of intervals between trees is one less than the number of trees\n    interval_count = total_trees - 1\n    # The distance between each tree is the total distance divided by the number of intervals\n    distance_between_trees = total_distance / interval_count\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be Kim's savings\n    # 1/3 of savings given to mother: x/3\n    # Amount spent on dresses and earrings: 177 + 129\n    # Amount left: x - (x/3 + 177 + 129)\n    # The amount left is half of what she gave her mother: (x - (x/3 + 177 + 129)) = (1/2) * (x/3)\n\n    x = symbols('x')\n    equation = Eq(x - (x / 3 + 177 + 129), (1/2) * (x / 3))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # Since the baskets are identical, we need to find the partitions of 6\n    # such that the order of the numbers doesn't matter.\n    # This is the partition of a number into at most 3 parts.\n    partitions = 0\n    \n    # The possible partitions of 6 into at most 3 parts are:\n    # [6], [5, 1], [4, 2], [4, 1, 1], [3, 3], [3, 2, 1], [2, 2, 2]\n    # However, since the baskets are identical, we only count distinct partitions.\n    # So we only consider [6], [5, 1], [4, 2], [3, 3], and [2, 2, 2].\n    # [4, 1, 1], and [3, 2, 1] counts as [4, 2] and [3, 3] respectively since the baskets are identical.\n    # Thus, there are 5 distinct partitions.\n    \n    partitions = 5\n    return partitions\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n\n    num_of_full_pieces = total_length // cut_length\n    length_left_over = total_length % cut_length\n    \n    return length_left_over\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    whole_number = 1\n    fraction_numerator = 3\n    fraction_denominator = 100\n    decimal = whole_number + (fraction_numerator / fraction_denominator)\n    return decimal\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    teams = 8\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    answer_sum = 0\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            answer_sum += N\n    return answer_sum\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    days = 9\n    total_skirts = sum([(skirts_per_day * (1 + day)) for day in range(days)])\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if 2 * chickens + 4 * cows == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    sequence_start = 11\n    common_difference = 3\n    numbers_to_check = range(30, 61)  # Start from 30 to 60 inclusive\n    found_numbers = []\n\n    for num in numbers_to_check:\n        if (num - sequence_start) % common_difference == 0:\n            found_numbers.append(num)\n\n    return found_numbers\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    number = \"\"\n    i = 1\n    while len(number) < 2023:\n        number += str(i)\n        i += 1\n    ans = int(number[2022])\n    return ans\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    for class_size in range(1, total_sweets + 1):\n        if total_sweets % class_size == 0 and total_sweets // class_size >= 5:\n            return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n    \n    # Use sympy's solve function to solve the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    # Calculate the cost of 5 bananas using the price of 1 banana from the solutions\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 150000\n    tax_paid = 15000\n    first_bracket = 50000\n    second_bracket = income - first_bracket\n    tax_rate_first_bracket = 0.08\n    tax_rate_second_bracket = 0.08 + T/100\n\n    # Equation representing the total tax paid\n    equation = Eq(first_bracket * tax_rate_first_bracket + second_bracket * tax_rate_second_bracket, tax_paid)\n    \n    # Solve for T\n    T_value = solve(equation, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    score_unattempted = 0\n    total_score = 66\n\n    # Woody answered all but one of the questions\n    attempted_questions = total_questions - 1\n\n    # Let x be the number of correct answers\n    # Then (attempted_questions - x) is the number of incorrect answers\n    # The equation for the total score is:\n    # 4x - 2(attempted_questions - x) = total_score\n    # Solve this equation to find the number of correct answers\n\n    x = symbols('x')\n    equation = Eq(score_correct*x + score_incorrect*(attempted_questions - x), total_score)\n    correct_answers = solve(equation, x)\n\n    return correct_answers[0]\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return int(n)\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the amount of candy Rachel has originally\n    # Let a represent the amount of candy Alice has originally\n    r, a = symbols('r a')\n\n    # After Rachel gives Alice 10 pieces, they have the same amount of candy\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 pieces, Rachel has 3 times as much as Alice\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    sol = solve((equation1, equation2), (r, a))\n\n    # The total amount of candy they had originally is the sum of r and a\n    total_candy = sol[r] + sol[a]\n    \n    return int(total_candy)\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    days_in_january = 31\n    boys_in_club = 432\n    \n    # Using the Pigeonhole Principle\n    # Number of pigeonholes (days) = 31\n    # If we distribute the boys evenly, we will have at least\n    # ceiling(boys_in_club / days_in_january) boys on some day\n    min_boys_per_day = -(-boys_in_club // days_in_january) # Ceiling division\n\n    return min_boys_per_day\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # For the first digit (hundreds place), we cannot use 0, thus only 2 and 3 are available\n    # so there are 2 possibilities for the first digit.\n    \n    # For the second digit, we can use all three numbers, but we cannot use the one used in \n    # the first digit, so there are 2 possibilities here as well.\n    \n    # For the third digit, we only have 1 choice, which is the remaining number.\n    \n    # Since the choice of digit for each place is independent of the other, we multiply the number of choices\n    ans = 2 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    number_of_other_cars = 31 - 1\n    distance_between_cars = 5\n    number_of_gaps = 31\n    \n    total_length_of_cars = first_car_length + (other_cars_length * number_of_other_cars)\n    total_length_of_gaps = distance_between_cars * number_of_gaps\n\n    total_length = total_length_of_cars + total_length_of_gaps\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    a7 = 105  # 7th term\n    a8 = 120  # 8th term\n    a9 = 135  # 9th term\n\n    # Calculate common difference\n    common_difference = a8 - a7  # or a9 - a8\n\n    # Calculate first term, a1 = a7 - 6 * common_difference\n    a1 = a7 - 6 * common_difference\n\n    # Calculate 100th term, a100 = a1 + 99 * common_difference\n    a100 = a1 + 99 * common_difference\n\n    return a100\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10  # Pip initially has 5 boxes with 10 chocolates each\n    chocolates_given = 23  # Pip gives 23 chocolates to Helen\n\n    # Calculate the chocolates left after giving them to Helen\n    chocolates_left = total_chocolates - chocolates_given\n\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    \n    # Generate all permutations of the four cards\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDEFG'):\n        if p.index('A') in range(p.index('B') + 1, p.index('C')) or p.index('A') in range(p.index('C') + 1, p.index('B')):\n            if (p.index('D') == p.index('E') - 1) or (p.index('D') == p.index('E') + 1):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) / sarah_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_factor = 1 / 5\n    last_week_length = current_length / (1 + growth_factor)\n    return last_week_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    total_litres = 27 + 25 + 30\n    return total_litres\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    num_piles = 6\n    apples_per_pile = 8\n    total_apples = num_piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    return 1.8 - 0.57\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n\n    combinations = tops * bottoms\n\n    return combinations\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p represent the initial number of stickers Peter had.\n    p = symbols('p')\n\n    # Sam had 40 stickers more than Peter initially.\n    s = p + 40\n\n    # Sam gives 20% of his stickers to Peter.\n    p_after = p + 0.20 * s\n    s_after = s - 0.20 * s\n\n    # Peter gives 25% of his stickers to Sam after receiving stickers from Sam.\n    p_final = p_after - 0.25 * p_after\n    s_final = s_after + 0.25 * p_after\n\n    # The equation that represents the condition where Sam had 96 stickers more than Peter in the end.\n    equation = Eq(s_final - p_final, 96)\n\n    # Solve the equation.\n    solution = solve(equation, p)\n\n    # Return Peter's initial number of stickers.\n    return solution[0]\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_biscuits_cost = 7 * 73  # cost in pence\n    total_cakes_cost = 9 * 113  # cost in pence, converting £1.13 to 113p\n    total_cost = total_biscuits_cost + total_cakes_cost  # total cost in pence\n\n    total_cost_in_pounds = total_cost / 100  # converting the total cost to pounds\n    change = 20 - total_cost_in_pounds  # calculating the change from a £20 note\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Lunch finished at 2:50 PM\n    lunch_end_time = datetime.strptime('14:50', '%H:%M')\n    \n    # Lunch lasted for 20 minutes\n    lunch_duration = timedelta(minutes=20)\n    \n    # Time before watching TV\n    tv_time_duration = timedelta(minutes=20)\n    \n    # Time spent playing\n    play_time_duration = timedelta(minutes=10)\n    \n    # Calculate when Benson started eating lunch\n    lunch_start_time = lunch_end_time - lunch_duration\n    \n    # Calculate when Benson started watching TV\n    tv_start_time = lunch_start_time - tv_time_duration\n    \n    # Calculate when Benson reached home\n    home_arrival_time = tv_start_time - play_time_duration\n    \n    # Format the time Benson reached home\n    return home_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial as fact\n\ndef count_arrangements(n, r):\n    return fact(n) // fact(n - r)\n\ndef solution():\n    # Count the 3-digit possibilities\n    # We have 3 places to fill, and we need to exclude the 0 (cannot be the first digit)\n    # For the first place, we have 3 options (2, 1, 7), for the second and third we have 3 and 2 respectively\n    count_3_digit = 3 * count_arrangements(3, 2)\n\n    # Count the 4-digit possibilities\n    # We have 4 places to fill with 4 different digits\n    # All digits can be used as the first digit including 0\n    count_4_digit = count_arrangements(4, 4)\n    \n    # The total ways will be the sum of the two possibilities\n    total_ways = count_3_digit + count_4_digit\n    \n    return total_ways\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    num = 1\n    while True:\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    ans = 6.5 / 0.5\n    return ans\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    number_of_terms = 14\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = (number_of_terms / 2) * (first_term + last_term)\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    count, pages, nines = 0, 0, 181\n    while count < nines:\n        pages += 1\n        count += str(pages).count('9')\n    return pages\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let initial number of crystals be x\n    x = symbols('x')\n\n    # He sold (x/2 + 10) crystals to Yvonne\n    sold_to_yvonne = x / 2 + 10\n\n    # Then, he mined 20 more crystals\n    after_mining = x - sold_to_yvonne + 20\n\n    # After that, he sold 14 crystals to Cherlyn\n    sold_to_cherlyn = 14\n\n    # He has 35 crystals in the end\n    final_count = after_mining - sold_to_cherlyn\n\n    # Write the equation based on the story\n    equation = Eq(final_count, 35)\n\n    # Solve the equation to find the initial amount of crystals Jason had\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_rabbit_pattern = 2\n    pattern_total_rabbits = 1 + 2 + 2  # 1 black, 2 white, 2 grey\n    total_grey_rabbits = 14\n\n    # To find out the full patterns we can divide the total number of grey rabbits\n    # by the number of grey rabbits in one pattern\n    full_patterns = total_grey_rabbits // grey_rabbit_pattern\n\n    # Now multiply the full patterns by the number of rabbits in one full pattern\n    total_rabbits = full_patterns * pattern_total_rabbits\n\n    # If there's a remainder when dividing the grey rabbits, it means one more pattern started\n    if total_grey_rabbits % grey_rabbit_pattern:\n        total_rabbits += pattern_total_rabbits\n\n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    three_digit_numbers = []\n\n    for i in numbers:\n        for j in numbers:\n            for k in numbers:\n                if i != 0 and i != j and j != k and i != k:\n                    three_digit_numbers.append(int(f\"{i}{j}{k}\"))\n\n    largest_number = max(three_digit_numbers)\n    smallest_number = min(three_digit_numbers)\n\n    difference = largest_number - smallest_number\n\n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A = 12\n    class_B = 15\n    class_C = 18\n\n    # Calculate the Greatest Common Divisor (GCD) for class A and B\n    gcd_AB = gcd(class_A, class_B)\n    # Calculate the GCD for classes A, B, and C\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('1234'):\n        if p[-1] in '24':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    ans = 37 * 27\n    return ans\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    from math import sqrt\n\n    num = 180\n    factors = set()\n    \n    # Creating set of factors of 180\n    for i in range(1, int(sqrt(num)) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    \n    # Filtering factors that are also multiples of 9\n    factors_of_nine = [factor for factor in factors if factor % 9 == 0]\n    \n    return len(factors_of_nine)\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    # sum of known digits\n    sum_known_digits = 2 + 6 + 5 + 3 + 9\n\n    # trying possible values for 'a' and checking divisibility by 9\n    for a in range(10):\n        if (sum_known_digits + a) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3  # years\n\n    # Compound interest formula: A = P(1+r/n)^(nt), where n is the number of times interest is compounded per year.\n    # Since the interest is calculated yearly, n = 1\n    compound_interest = principal * (1 + rate)**time\n\n    return compound_interest\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = cost_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    # Cost in pence (1 pound = 100 pence)\n    one_sweet_cost = 12\n    three_sweet_deal_cost = 30\n    budget = 200  # Budget in pence\n\n    # First calculate the number of sweets bought by the deal\n    sweets_with_deal = (budget // three_sweet_deal_cost) * 3\n    \n    # Remaining budget after buying sweets with the deal\n    remaining_budget = budget % three_sweet_deal_cost\n    \n    # Additional sweets that can be bought with the remaining budget\n    additional_sweets = remaining_budget // one_sweet_cost\n    \n    # Total sweets\n    total_sweets = sweets_with_deal + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_when_10 = 10  # May's age when she is 10 years old\n    kenny_age_diff = 2  # Kenny is 2 years older than his younger brother\n\n    # Define symbols for Kenny's and his younger brother's current ages\n    kenny, brother = symbols('kenny brother')\n\n    # Equation for when May is 10 years old\n    equation1 = Eq((kenny + may_age_when_10) + (brother + may_age_when_10), 3 * may_age_when_10)\n\n    # Equation representing Kenny is 2 years older than his younger brother\n    equation2 = Eq(kenny, brother + kenny_age_diff)\n\n    # Solve the system of equations for Kenny's and his younger brother's current ages\n    solutions = solve((equation1, equation2), (kenny, brother))\n\n    kenny_current_age = solutions[kenny]\n    may_current_age = 7  # May's current age\n\n    # Calculate the age difference between Kenny and May this year\n    age_difference = kenny_current_age - may_current_age\n\n    return age_difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # This problem is equivalent to distributing 10 identical balls into 7 different boxes\n    # with at least 1 ball per box, which can be seen as (10 - 7) balls into 7 boxes without restriction,\n    # because we put one ball in each box first, leaving 3 balls to be freely distributed.\n    # This is an application of the stars and bars theorem (number of ways to put n indistinguishable items\n    # into k distinguishable bins), which gives us comb(n+k-1, k-1).\n    \n    balls_left = 10 - 7\n    boxes = 7\n    ways = comb(balls_left + boxes - 1, boxes - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Since there are 10 candies, the person who can always ensure that the total candies\n    # eaten after each round (both players have eaten) is a multiple of 3 can win.\n    # To maintain this strategy, Felix should eat in such a way that if he goes first,\n    # the number of candies remaining after his turn is 9, and then subsequently 6, and then 3.\n    # This way, after John's turn there will be 2 or 1 candies left, and Felix can eat them\n    # all and win.\n    #\n    # If Felix goes second, he should ensure that the total candies eaten after each round\n    # is a multiple of 3. This means that if John eats 1 candy, Felix should eat 2,\n    # and if John eats 2 candies, Felix should eat 1. This will also ensure that Felix\n    # eventually ends up eating the last candy.\n  \n    # Felix should go first and eat 1 candy, leaving 9 candies.\n    # No matter whether John eats 1 or 2 candies next, Felix should follow the\n    # strategy of keeping the remaining candies as a multiple of 3.\n    # If John eats 1 candy (8 left), Felix eats 2 (6 left);\n    # if John eats 2 candies (7 left), Felix eats 1 (6 left).\n    # And keeping the same strategy, Felix will eat the last candy.\n\n    # Felix's strategy is ensure that after each round (both players have eaten)\n    # the total candies consumed is a multiple of 3. This will allow him to eat\n    # the last candy and win.\n  \n    # Returning the tuple (Felix's optimal turn to go, Felix's strategy)\n    optimal_turn = 'first'  # Felix should go first\n    strategy = \"Eat 1 candy first, then ensure that the total candies left are always 9, 6, 3\"\n\n    return optimal_turn, strategy\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the capacity of the fish tank in litres\n    # If Mr Nelson uses a 5-litre pail, 4 litres of water will overflow, so the tank's capacity is 5 litres less than a multiple of 5\n    # If Mr Nelson uses a 3-litre pail, he needs 4 more pails of water, which means the tank's capacity is 3 litres more than a multiple of 3\n\n    # We are looking for a number that is 1 less than a multiple of 5 (because 4 litres overflow, so the total taken out is 5) \n    # and 2 litres less than a multiple of 3 (because 4 more pails of 3 litres are needed, so the total is 3*4 litres short)\n\n    for x in range(1, 1000):  # Making the range large enough to find the solution\n        if (x + 4) % 5 == 0 and (x - 3 * 4) % 3 == 0:\n            return x\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    \n    solved_value = solve(equation, x)\n    \n    return solved_value[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    pipe_length = 5\n    total_length_needed = 305\n    number_of_pipes = total_length_needed // pipe_length\n\n    if total_length_needed % pipe_length != 0:\n        number_of_pipes += 1  # Add an extra pipe if there's remaining length\n\n    return number_of_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n\n    for number in range(1, 2017):\n        underline_count = sum([(number % 2 == 0), (number % 3 == 0), (number % 4 == 0)])\n        if underline_count == 2:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count_3 = 0\n    page = 0\n    while count_3 < 28:\n        page += 1\n        count_3 += str(page).count('3')\n    return page\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    zoey_coins = [50, 20, 10, 5]\n    total = sum(zoey_coins)\n    for coin in zoey_coins:\n        if (total - coin) % 2 == 0 and (total - coin) // 2 not in zoey_coins:\n            lost_coin = coin\n            break\n    return lost_coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    girls = 8\n    boys = 12\n    girls_chosen = 4\n    boys_chosen = 3\n    ways_to_choose_girls = comb(girls, girls_chosen)\n    ways_to_choose_boys = comb(boys, boys_chosen)\n    total_ways = ways_to_choose_girls * ways_to_choose_boys\n    return total_ways\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    averages = [36, 38, 39, 45, 49]\n    total_sums = [avg * 4 for avg in averages]  # Calculate the sum of the 4 numbers for each average\n\n    # For the highest average case, the sum includes the largest number\n    largest_sum_includes_largest_number = total_sums[-1]\n\n    # The smallest sum excludes the largest number\n    smallest_sum_excludes_largest_number = total_sums[0]\n\n    # The largest number is thus the difference between the two sums\n    largest_number = largest_sum_includes_largest_number - smallest_sum_excludes_largest_number\n\n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # Convert 15.55 to minutes\n    second_bus_time = 16 * 60 + 35  # Convert 16.35 to minutes\n\n    time_arrival = first_bus_time + 4  # Arrival 4 minutes late for the first bus\n    wait_time = second_bus_time - time_arrival\n\n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    for boys in range(152):\n        girls = 152 - boys\n        if boys - boys / 11 == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    number_of_trees = (road_length // distance_between_trees) + 1\n    return number_of_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    capacity = 8\n    lorries = -(-workers // capacity)\n    return lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')  # Define the symbols for men and women\n\n    # Create equations based on the problem statement\n    equation1 = Eq(women, 4 * men)  # There were 4 times as many women as men\n    equation2 = Eq(women, men + 126)  # The number of women was 126 more than the number of men\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (men, women))\n\n    # Calculate total number of people in the concert hall\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n    \n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_three_days = 40\n    average_next_four_days = 20\n    pages_last_two_days = 60\n\n    total_pages = pages_first_three_days + (average_next_four_days * 4) + pages_last_two_days\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    num, _ = solve_congruence(*congruences)\n    \n    while num < 200:\n        if num >= 100:\n            return num\n        num += 4*5*9  # LCM of [4, 5, 9]\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):  # The first dice has 6 faces\n        for d2 in range(1, 7):  # The second dice has 6 faces\n            for d3 in range(1, 7):  # The third dice has 6 faces\n                # Check if all dice rolls are distinct and sum to 12\n                if d1 != d2 and d2 != d3 and d1 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    combined_ages = sum(grandsons_ages)\n\n    # Find how many years later their ages will sum up to Bill's age.\n    years_later = 0\n    while bill_age != combined_ages:\n        years_later += 1\n        bill_age += 1\n        combined_ages += len(grandsons_ages)  # Each grandson gets one year older\n        \n    return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # students per room scenarios\n    students_per_room_4 = 4\n    students_per_room_5 = 5\n    \n    # additional students and empty rooms\n    additional_students = 6\n    empty_rooms = 1\n    \n    # let's use a loop to look for the answer\n    for total_students in range(1, 1000):  # arbitrary large number\n        rooms_when_4_per_room = total_students // students_per_room_4\n        rooms_when_5_per_room = total_students // students_per_room_5\n        \n        remain_when_4_per_room = total_students % students_per_room_4\n        remain_when_5_per_room = total_students % students_per_room_5\n        \n        if remain_when_4_per_room == additional_students and remain_when_5_per_room == students_per_room_5:\n            # We have found the answer\n            return total_students\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    initial_sum = 7 * 9\n    new_sum = 6 * 10\n    removed_number = initial_sum - new_sum\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_remaining = total_people - people_left\n    return int(people_remaining)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n    \n    # Finding the least common multiple of the train intervals\n    interval = lcm(15, 12, 8)\n    \n    # Finding the time at which all three trains will arrive together after 10:00 am\n    hours_added, minutes_added = divmod(interval, 60)\n    next_time_hour = 10 + hours_added\n    next_time_minute = minutes_added\n    \n    # Adjusting for the next day scenario, if it crosses midnight\n    if next_time_hour >= 24:\n        next_time_hour -= 24\n    \n    return (next_time_hour, next_time_minute)\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_marks = 5\n    incorrect_marks = -2\n    total_marks = 79\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_marks + incorrect * incorrect_marks == total_marks:\n            return correct\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # The maximum number of students playing only two sports\n    max_two_sports = (swimmers + cyclists + table_tennis_players) - total_students\n    # The minimum number playing all three is the excess over the maximum possibility of two-sport players\n    min_all_three_sports = (swimmers + cyclists + table_tennis_players) - 2 * total_students\n\n    # Since the number cannot be negative, we take the maximum between the calculated minimum and 0\n    return max(min_all_three_sports, 0)\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for page in range(1, 106):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    value = (3999 * 2014.2014 + 3999.3999 * 2014) / 12.0012\n    return value\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_taken = 30  # in seconds\n    train_length = 360  # in meters\n\n    speed = train_length / time_taken  # speed = distance/time\n    return speed  # speed in meters/second\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    progress_per_day = 3 - 1\n    distance_to_climb = 11 - 3  # Subtract the first day's climb because it's unique\n\n    days = (distance_to_climb + progress_per_day - 1) // progress_per_day\n    return days + 1  # Add the first day\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n    \n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n    \n    return total_choices\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery_percent = 20\n    books_stationery = (books_stationery_percent / 100) * pocket_money\n    \n    transport = symbols('transport')\n    food = 3 * transport\n    savings = food - 6\n    \n    total_expenditure = books_stationery + transport + food\n    equation = Eq(pocket_money, total_expenditure + savings)\n\n    transport_solution = solve(equation, transport)\n    food_expenditure = 3 * transport_solution[0]\n    savings_value = food_expenditure - 6\n\n    savings_percent = (savings_value / pocket_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # By the Pigeonhole Principle, to guarantee 4 different colors, one must consider the worst case scenario.\n    # The worst case would be picking all marbles of the most abundant color, then all of the second most, \n    # and then all of the third, to finally get one of the fourth color.\n    # This ensures getting at least one marble of each color.\n\n    # Number of marbles of each color\n    red = 12 + 3  # combining both red counts\n    blue = 9\n    yellow = 8\n    # We don't count the last color, since we are considering the worst case and want to ensure \n    # we pick one of the last color after all others have been picked.\n\n    # The least number to draw to ensure four marbles of different colors is:\n    # All red, all blue, all yellow, and 1 from the remaining color (which will be different by default)\n    ans = red + blue + yellow + 1\n\n    return ans\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # The difference in numbering between the people standing opposite in the circle must be half of the total number of people in the game.\n    # If person 10 is opposite to person 24, the difference in their numbering is 24 - 10.\n    difference = 24 - 10\n    # Since the numbering increases by 2 for each person, to have the difference of 14, there must be half as many people, as the numbers increase by 2.\n    total_people = difference * 2\n    return total_people\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    for age in factors_of_66:\n        if (age - 4) % 6 == 0:\n            return age\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [i for i in range(10, 100) if 75 % i == 0]\n    for number in factors_of_75:\n        if number % 6 == 3:\n            return number\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    for i in range(10, 100):\n        if i - 41 == 50:\n            correct_diff = i - 14\n            return correct_diff\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_numbers = 0\n    \n    # Numbers starting with 3xxx\n    total_numbers += 5 * 4 * 3  # for 3267-3999 (5 choices for the second digit (2, 4, 5, 6, excluding 1 and 3), then 4, then 3)\n    \n    # Numbers starting with 4xxx\n    total_numbers += 6 * 5 * 4  # for 4000-5120 (6 choices for the second digit, then 5, then 4)\n    \n    # Numbers starting with 5xxx, we have to consider only those that are 50xx and 51xx\n    # Since 5120 will be the highest number we consider two cases: 5000-5099 and 5100-5120\n    # For 5000-5099\n    total_numbers += 5 * 4 * 3  # (5 choices for the second digit (1, 2, 3, 4, 6), then 4, then 3)\n    # For 5100-5120, only 3 choices for the second digit (1, 2, 3) since 4, 5, 6 are greater than 2\n    total_numbers += 3 * 4 * 3  # for 5100-5120 (3 choices for the third digit, then 4, then 3)\n    \n    return total_numbers\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([-1 if i % 2 == 0 else 1 for i in range(40, 21, -2)]) * 38\n    return ans\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount = 7320.5\n    years = 4\n\n    rate = (amount / principal) ** (1 / years) - 1\n\n    return round(rate, 4)\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    for n in range(1, 100):  # Assuming a reasonable upper limit for soldiers\n        if (n * n) + n + n + 1 == (n + 1) * (n + 1):\n            total_soldiers_now = (n + 1) * (n + 1)\n            return total_soldiers_now\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    return 56 / 21 * 3\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2 + 6.77 + 8.88\n    b = 6.77 + 8.88 + 6.3\n    c = 3.2 + 6.77 + 8.88 + 6.3\n    d = 6.77 + 8.88\n    \n    ans = (a * b) - (c * d)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_savings = 4410\n    january_savings = 2450\n    march_savings = 855\n\n    february_savings = total_savings - january_savings - march_savings\n\n    return february_savings\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_paint_time = 80  # minutes, for one hour and twenty minutes\n\n    num_pictures = total_paint_time / time_per_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n    total_seconds = minutes * seconds_per_minute\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    interest_rate = 0.08\n    years = 4\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n    \n    return present_value\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_ate = 5 * 4\n    apples_left = 20\n\n    total_apples_before = justin_ate + sisters_ate + apples_left\n\n    return total_apples_before\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total number of apples\n    total_apples = 30\n    # Number of children excluding Ann\n    other_children = 5\n    # Each child except Ann gets at least one apple\n    minimum_apples_for_others = other_children * 1\n    # Calculate the maximum number of apples Ann can get\n    max_apples_for_Ann = total_apples - minimum_apples_for_others\n\n    return max_apples_for_Ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:6]))\n        third_number = int(''.join(perm[6:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combinations when choosing a blouse and a pair of pants\n    blouse_pants_combinations = shirts * pants\n\n    # Combinations for shoes with the blouse and pants\n    blouse_pants_shoes_combinations = blouse_pants_combinations * shoes\n\n    # Combinations when choosing a dress\n    dress_combinations = dresses\n\n    # Combinations for shoes or heels with the dress\n    dress_shoes_heels_combinations = dress_combinations * (shoes + heels)\n\n    # Total combinations\n    total_combinations = blouse_pants_shoes_combinations + dress_shoes_heels_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    # Convert all masses to grams\n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n\n    # Find the mass of the pack of sand\n    sand_mass_g = total_mass_g - soil_mass_g\n\n    # Find the difference between the mass of the soil and sand\n    difference = abs(soil_mass_g - sand_mass_g)\n    \n    return difference\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    equation1 = Eq(james + nina, 22)\n    equation2 = Eq(nina - 4, james + 4)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1/i for j in range(1, 101) for i in range(1, j+1))\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    # Let x be the number of correct answers, then (10 - x) is the number of incorrect answers.\n    # The total score for the correct answers is 4x\n    # The total score for the incorrect answers is -2(10 - x)\n    # The sum of both scores gives Julie's total score, which is 29.\n\n    for x in range(11):\n        if 4 * x - 2 * (10 - x) == 29:\n            return x\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_sum = sum(range(1, 6))  # Sum of numbers in one pattern sequence\n    full_patterns_count = 52 // 5   # Number of complete patterns within 52 digits\n    remaining_digits_count = 52 % 5 # Number of digits in the incomplete pattern\n    \n    # Calculate the sum of digits for full patterns\n    full_pattern_sum = full_patterns_count * pattern_sum\n    # Calculate the sum of digits for the incomplete pattern\n    incomplete_pattern_sum = sum(range(1, remaining_digits_count + 1))\n\n    # Total sum of all the digits in the 52-digit number\n    total_sum = full_pattern_sum + incomplete_pattern_sum\n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n\n    num_kites = total_paper // paper_per_kite\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_trees = 79\n    road_length = 320\n    # There are 80 intervals between 79 trees\n    intervals = total_trees + 1\n\n    # The distance between each tree is the road length divided by the number of intervals\n    distance_between_trees = road_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen traded 10 fish for 4 rabbits => 10/4 fish per rabbit\n    fish_per_rabbit = 10 / 4\n\n    # Oscar traded 5 rabbits for 6 packs of wheat => 6/5 packs of wheat per rabbit\n    wheat_per_rabbit = 6 / 5\n\n    # To find out how many fish per pack of wheat, we multiply the ratios\n    fish_per_wheat = fish_per_rabbit * wheat_per_rabbit\n\n    # Now, to find out how many fish for 12 packs of wheat\n    fish_for_12_wheat = fish_per_wheat * 12\n\n    return fish_for_12_wheat\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    total_length = Fraction(10) + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n    num_short_rods = total_length / short_rod_length\n    return num_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost = 2800\n    deal_laptop_count = 30\n    laptops_needed = 20\n\n    cost_without_deal = single_laptop_cost * laptops_needed\n    cost_per_laptop_with_deal = deal_cost / deal_laptop_count\n    cost_with_deal = cost_per_laptop_with_deal * laptops_needed\n\n    savings = cost_without_deal - cost_with_deal\n\n    return savings\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def number_of_divisors(prime_factors):\n    # The function to calculate number of factors based on prime factors\n    # If a number has prime factorization a^p * b^q * c^r * ...\n    # Number of factors is (p+1)*(q+1)*(r+1)*...\n    count = 1\n    for prime in prime_factors:\n        count *= (prime_factors[prime] + 1)\n    return count\n\ndef solution():\n    # Given the highest common factor is 75, which is 3^1 * 5^2\n    common_factors = {3: 1, 5: 2}\n    \n    # M has 12 factors and N has 10 factors\n    # Since M and N only have prime factors 3 and 5\n    # We find combinations of powers of 3 and 5 that satisfy these factors\n    # We loop for possible exponents for 3, starting from the exponent in the common_factors (1 in this case)\n    # The minimum exponents for 5 is the one in the common_factors (2 in this case)\n    for m3_exp in range(common_factors[3], 100):\n        for m5_exp in range(common_factors[5], 100):\n            if number_of_divisors({3: m3_exp, 5: m5_exp}) == 12:\n                M = (3**m3_exp) * (5**m5_exp)\n                for n3_exp in range(common_factors[3], 100):\n                    for n5_exp in range(common_factors[5], 100):\n                        if number_of_divisors({3: n3_exp, 5: n5_exp}) == 10:\n                            N = (3**n3_exp) * (5**n5_exp)\n                            if N == M:\n                                continue\n                            return M + N\n    return None\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    num_penguins = solve(equation1, penguins)\n\n    return num_penguins[0]\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Assign the number of singing (S) and dancing (D) performances\n    num_singing = 6\n    num_dancing = 4\n    \n    # Initialize the number of ways to arrange\n    num_ways = 0\n    \n    # The number of positions between the dancing performances.\n    # There are num_dancing+1 possible positions (before the first, between two dances, and after the last).\n    num_positions = num_dancing + 1\n    \n    # Iterate over all valid numbers of singing performances that can be before the first, between, and after the last dancing\n    for s in range(num_positions):\n        # Remaining singing performances after placing into previous s positions\n        remaining_singing = num_singing - s\n        if remaining_singing < 0:\n            # If no more signing performances are left to be placed, skip the iteration\n            continue\n\n        # Distribute the remaining singing performances between the num_positions - 1 slots\n        # This is derived from the stars and bars combinatorial approach assuming at least one\n        # singing performance must be in each slot, we place s, and distribute the remaining\n        for i in range(num_positions - s):\n            # Calculate the number of ways to put i star singing performances in num_positions-s slots.\n            num_ways += factorial(remaining_singing - 1) // (factorial(i) * factorial(remaining_singing - 1 - i))\n    \n    # Multiply by the number of ways to arrange the dancing performances (4!).\n    num_ways *= factorial(num_dancing)\n    \n    return num_ways\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    actual_result = (-14 + 26) + 26\n    return actual_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_m = 4\n    ratio_k = 5\n\n    kelly_height = (matthew_height / ratio_m) * ratio_k\n\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percent = 35\n    total = 80\n\n    ans = (percent / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Iterate through all possible scores for one team at half-time\n    for team1_ht_score in range(4):\n        # Iterate through all possible scores for the other team at half-time\n        for team2_ht_score in range(3):\n            # Check if it's possible to reach the final score from the half-time score\n            if team1_ht_score <= 3 and team2_ht_score <= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n\n    cards_lost = original_cards * fraction_lost\n\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    # We can use a brute force approach and loop through all possible values of a and b\n    for a in range(1, 10):    # a cannot be 0 because it's the first digit of ab\n        for b in range(10):   # b can be 0 through 9\n            if int(f'{a}{b}') + int(f'{b}{a}') + b == int(f'{a}{a}{b}'):\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    clara, emma = symbols('clara emma')\n    equation = Eq(clara + emma, 1002)\n    clara_to_emma_ratio = Eq(clara, 5 * emma)\n\n    solutions = solve((equation, clara_to_emma_ratio), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    return comb(6, 2)\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b', integer=True)\n\n    # Given: (3/8) * g can swim, so (5/8) * g cannot swim\n    # Given: (3/5) * b can swim, so (2/5) * b cannot swim\n    # 20 pupils cannot swim total, and there is an equal number of boys and girls among them\n    \n    # Equation represents the number of boys and girls who cannot swim\n    equation1 = Eq((5/8) * g, (2/5) * b)\n    \n    # Equation represents the total number of pupils who cannot swim\n    equation2 = Eq((5/8) * g + (2/5) * b, 20)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Total number of pupils is the number of boys plus the number of girls\n    total_pupils = solutions[g] + solutions[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Find factors of the number of students that meet the condition\n    possible_factors = []\n    for i in range(2, 100):  # Limiting to 100 for practical purposes\n        for j in range(i, 100):  # Ensuring j >= i to avoid repeating pairs \n            if (i-1) * (j-1) == 1:  # Mike's position being second implies there's only one way\n                possible_factors.append((i, j))\n                \n    # Since Mike is always the 2nd, this means the total number of students in the class\n    # is the product of the dimensions - Mike's position\n    # Note: Mike can only be second in line if the rectangular array is 2xN or Nx2\n    # as those are the only orientations where one can be second in every counting direction\n    students_count = [i * j for i, j in possible_factors]\n    ans = min(students_count)  # Smallest number that allows Mike to be 2nd in line\n    \n    return ans\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mango_weight = half_full_weight * 2 - full_weight\n    empty_basket_weight = full_weight - mango_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    result = 85 / 100 * 400\n    return result\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Calculate the fraction of sweets Bud received\n    bud_fraction = 1 - (3 / 5)\n    \n    # Sweets left for Bud\n    sweets_for_bud = 16\n    \n    # Total sweets in the box initially\n    total_sweets = sweets_for_bud / bud_fraction\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    target_product = 6 * 5\n    percentage_of_40 = (target_product / 40) * 100\n    return percentage_of_40\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_per_cup = 30 / 3\n    total_cost_for_5_cups = cost_per_cup * 5\n    return total_cost_for_5_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    # Total number of rabbits\n    total_rabbits = 38\n    \n    # Number of big mushroom houses and their capacity\n    big_houses = 5\n    big_house_capacity = 4\n    \n    # Number of small mushroom houses\n    small_houses = 9\n    \n    # Calculate the number of rabbits that can be accommodated in big houses\n    rabbits_in_big_houses = big_houses * big_house_capacity\n    \n    # Remaining rabbits to be accommodated in small houses\n    remaining_rabbits = total_rabbits - rabbits_in_big_houses\n    \n    # Find how many rabbits can each small mushroom house accommodate\n    rabbits_per_small_house = remaining_rabbits // small_houses\n    \n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n\n    total_earnings = average_daily_earnings * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        ans += (-1)**(i+1) * (i**2)\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    # Initialize the base cases for the number of ways to reach steps 1, 2, and 3\n    ways = [0, 1, 2, 4]\n\n    # Calculate the ways to reach each subsequent step using inductive recursion\n    for i in range(4, 7):\n        ways.append(ways[i-1] + ways[i-2] + ways[i-3])\n    \n    # Return the number of ways to reach the 6th step\n    return ways[6]\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_of_numbers = 21 + 22 + 23\n    product_of_factors = 2 * 3\n    ans = sum_of_numbers // product_of_factors\n    return ans\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    return 21 + 27 + 19 - 17\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    abigail, ryan = symbols('abigail ryan')\n    \n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n    \n    solutions = solve((equation1, equation2), (abigail, ryan))\n    \n    ryan_age_in_2_years = solutions[ryan] + 2\n    \n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_ship = 33\n    speed_current = 3\n    distance = 150\n\n    speed_upstream = speed_ship - speed_current\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans if ans < 100 else None\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    start = 56\n    end = 92\n    multiple = 4\n\n    start_multiple = (start + multiple - 1) // multiple * multiple\n    end_multiple = end // multiple * multiple\n\n    if start_multiple > end or end_multiple < start:\n        return 0\n    \n    num_multiples = (end_multiple - start_multiple) // multiple + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    halfway = (3.5 + 6.9) / 2\n    return halfway\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n\n    # Sum of arithmetic series formula: n/2 * (first_term + last_term)\n    sum_series = num_terms / 2 * (first_term + last_term)\n\n    return sum_series\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum([i if (i//2)%2 == 1 else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    ans = 80 * 125 * 63\n    return ans\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base = 9\n    ones_digit_cycle = [base**i % 10 for i in range(1, 5)]\n    exponent = 99\n    cycle_length = len(ones_digit_cycle)\n    ones_digit_index = (exponent % cycle_length) - 1  # -1 to adjust for zero-based indexing\n\n    return ones_digit_cycle[ones_digit_index]\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Claire's current age\n    claire_current_age = symbols('claire_current_age')\n\n    # Create the equation based on the given information\n    equation = Eq(claire_current_age + 6, 3 * claire_current_age)\n\n    # Solve the equation\n    claire_current_age_solution = solve(equation, claire_current_age)\n\n    # Calculate Claire's age two years from now\n    claire_future_age = claire_current_age_solution[0] + 2\n\n    return claire_future_age\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote actual_journey_time as the time train took to travel\n    # and suppose scheduled_journey_time is the time it should have taken.\n    actual_journey_time, scheduled_journey_time = symbols('actual_journey_time scheduled_journey_time')\n\n    # The journey took 11/12 of the time it should have done.\n    equation1 = Eq(actual_journey_time, scheduled_journey_time * 11/12)\n\n    # It arrived in Leeds 5 minutes late after leaving London 15 minutes late.\n    # This means actual_journey_time is scheduled_journey_time - 10 minutes.\n    equation2 = Eq(actual_journey_time, scheduled_journey_time - (15 - 5))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (actual_journey_time, scheduled_journey_time))\n\n    return solutions[scheduled_journey_time]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    # Perform the calculation step by step\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_product = total_product - known_product\n    missing_number = missing_product / 5.42\n    \n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # Assume Susan uses a 50p coin to pay as it is the smallest coin that can cover 44p without needing exact change\n    fare = 44\n    coin_used = 50\n\n    # Change to be given by the driver\n    change = coin_used - fare\n\n    # Compute the number of coins that change hands\n    # Susan gives 1 coin to the driver, and will receive the change in the smallest number of coins\n    coins_from_driver = 0\n    for coin in [20, 10, 5, 2, 1]:  # List of possible UK coin denominations smaller than 50p\n        while change >= coin:\n            coins_from_driver += 1\n            change -= coin\n\n    # The total number of coins includes the coin Susan gives and the coins she receives as change\n    total_coins = 1 + coins_from_driver\n    \n    return total_coins\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # To guarantee she gets 4 different colored marbles, she could:\n    # Draw all 4 reds, then draw up to 6 blues (without getting the 7th green),\n    # and finally, she must draw 1 more which would be either the green she was missing or the orange.\n    # This would get her at least one of each color.\n    # Therefore, she needs to draw 4 (red) + 6 (blue) + 1 (green or orange) marbles.\n    ans = 4 + 6 + 1\n    return ans\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_chickens = 9\n    total_legs = legs_per_chicken * total_chickens\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    daily_advance = 3\n    nightly_slip = 1\n    net_advance = daily_advance - nightly_slip\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += daily_advance\n        if current_distance >= total_distance:\n            break\n        current_distance -= nightly_slip\n\n    return days\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # This is a problem of distributing n identical items into r distinct bins.\n    # Using the formula for combinations with repetition:\n    # C(n+r-1, r-1)  -> here n=19-4 (since each of 4 kids should get at least one book), r=4\n    n = 19 - 4  # 15 books to distribute as 1 book is already given to each kid\n    r = 4       # 4 kids\n\n    # Number of ways to distribute n identical items into r bins with each bin having at least one item:\n    # C(n+r-1, r-1) = (n+r-1)! / ((r-1)! * n!)\n    ways = factorial(n + r - 1) // (factorial(r - 1) * factorial(n))\n\n    return ways\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for motorbikes (m), tricycles (t), and vans (v)\n    m, t, v = symbols('m t v')\n    \n    # Equations based on the problem description\n    # m_bikes have 2 wheels each, trikes have 3 wheels, vans have 4 wheels\n    equation1 = Eq(2*m + 4*v, 3*t + 35)  # motorbikes + vans = trikes + 35 wheels\n    equation2 = Eq(3*t + 4*v, 2*m + 13)  # trikes + vans = motorbikes + 13 wheels\n    equation3 = Eq(2*m + 3*t + 4*v, 101)  # Total number of wheels\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n    \n    # Calculate how many more motorbikes than vans there are\n    return solutions[m] - solutions[v]\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 // 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D = symbols('A B C D')\n    D = 41  # Given the value for Tank D\n\n    # Tank A contains 5 times as much water as Tank B\n    equation1 = Eq(A, 5 * B)\n    # Tank B contains 5 more litres of water than Tank C\n    equation2 = Eq(B, C + 5)\n    # The total amount of water in Tank C and Tank D is equal to the total amount in Tank A\n    equation3 = Eq(C + D, A)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since we're distributing identical items into different groups and no group can be empty,\n    # we're essentially looking for the number of solutions to the equation:\n    # x1 + x2 + x3 = 6 where each xi > 0 (since no pencil case can be empty).\n\n    # This can be solved using the \"stars and bars\" combinatorial method.\n    # If we have 6 pens to distribute, we have 5 spaces between them to put 2 dividers (since we have 3 cases).\n    # These dividers will determine the distribution of the pens.\n    # This translates to the problem of choosing 2 positions out of 5 to place the dividers.\n\n    from math import comb\n    return comb(5, 2)  # n-1 choose k-1 (6-1 choose 3-1)\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = 0\n    for i in range(2, 41, 4):\n        ans += i**2 - (i-2)**2\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    total_cups_needed = 30\n    gallons_needed = total_cups_needed / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_Pip = 9\n    people_behind_Bud = 10\n    # Since Pip is in front of Bud, we count him once.\n    # Pip himself is also included in the count.\n    total_people = people_in_front_of_Pip + 1 + people_behind_Bud\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    numbers = [4, 5, 6, 9, 3, 9]  # given numbers excluding p, q\n    total_sum = 6 * 8  # average * number of items\n    sum_of_given_numbers = sum(numbers)\n    remaining_sum = total_sum - sum_of_given_numbers\n    \n    # We want to minimize q, so we want to maximize p.\n    # The difference between the highest value and the lowest value is 6.\n    max_possible_p = min(numbers) + 6  # The minimum number is 3, so max p is 3+6=9.\n    max_possible_p = min(max_possible_p, 9)  # ensuring p does not exceed existing maximum which is 9\n\n    # Let's try to give p the maximum value without exceeding combined sum.\n    for p in range(max_possible_p, 2, -1):\n        q = remaining_sum - p\n        if q - max(numbers) == 6:  # difference between the highest value and q is 6\n            return q  # q is the highest possible value when p is maximized\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) / difference) + 1\n\n    return int(term_number)\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Since 2014 has digits 2, 0, 1, 4, we are looking for \n    # permutations of 2 more 2's, 1's, and 0's and two of any number\n    # representing the day and month, which must be valid.\n    \n    # Create all permutations of 2 zeros, 2 ones, 2 twos, and two 'x' placeholders\n    # where 'x' will later represent a valid day or month digit.\n    digits = '001122xx'\n    perms = set(permutations(digits))\n    \n    # Check each permutation\n    for perm in perms:\n        year = '2014'\n        month = ''.join(perm[4:6])\n        day = ''.join(perm[6:])\n        \n        # Replace 'x' with '3' and '4' to check for validity\n        # '3' and '4' were chosen arbitrarily because we need some digit to represent 'x'\n        for d in ['3', '4']:\n            month = month.replace('x', d, 1)\n            day = day.replace('x', d, 1)\n            \n            # Check if month and day form a valid date\n            # Month should be between 01 and 12\n            # Day should be between 01 and 31\n            # We do not need to check for exact day/month validity (i.e., 30 vs 31 days in a month)\n            # since we are iterating through all possibilities and permutations\n            if '00' not in [month, day] and '13' not in month and '32' not in day:\n                # Check if month is valid\n                if int(month) in range(1, 13):\n                    # We will count all valid days since our permutation will cover all possibilities\n                    # including correct number of days in a particular month, i.e., if month is '02'\n                    # (February), permutations will have at most '28' as day which is valid for all\n                    # years in this problem since all 'february days' (01-28) are covered by permutations.\n                    if int(day) in range(1, 32):\n                        count += 1\n\n    return count\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a, b = 2, 3\n    while b < 100:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both = symbols('both')\n    football = 3 * both\n    basketball = 4 * both\n    total_students = 36\n\n    equation = Eq(football + basketball - both, total_students)\n\n    solutions = solve(equation, both)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We have the following congruences:\n    # number ≡ 3 (mod 7)\n    # number ≡ 7 (mod 11)\n    # number ≡ 9 (mod 13)\n\n    # Using Chinese Remainder Theorem to solve the system of congruences\n    congruences = [(3, 7), (7, 11), (9, 13)]\n    number, _ = solve_congruence(*congruences)\n\n    # Find the smallest five-digit number satisfying the congruences.\n    while number < 10000:\n        number += 7 * 11 * 13  # Increase number by the product of the moduli\n\n    return number\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    term_number = 21\n    common_difference = 5\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    # Define the new operation\n    def custom_operation(a, b):\n        return ((a * b + 16) / (a + b)) ** 2\n\n    # Calculate the operation step by step\n    result_1_2 = custom_operation(1, 2)  # (1*2)\n    result_1_2_3 = custom_operation(result_1_2, 3)  # ((1*2)*3)\n    result_1_2_3_4 = custom_operation(result_1_2_3, 4)  # (((1*2)*3)*4)\n    final_result = custom_operation(result_1_2_3_4, 5)  # ((((1*2)*3)*4)*5)\n\n    # Find the largest integer not exceeding the result\n    ans = int(final_result)\n\n    return ans\n\n# Calling the function and storing the result in `ans`\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    ans = (2+1)*(1+1)*(1+1)  # Using the prime factorization 2^2 * 3^2 * 7\n    return ans\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Adam's speed in km/h\n    adam_speed = 60\n    # Jacob's speed in km/h\n    jacob_speed = 80\n    # Jacob's travel time in hours until he reached home\n    jacob_travel_time = 3\n    # Additional time Adam needs to reach home in hours\n    adam_additional_time = 0.5\n\n    # Calculate the distance traveled by Jacob to his home\n    jacob_distance_home = jacob_speed * jacob_travel_time\n    \n    # Calculate the total time Adam travels until he reaches home\n    adam_travel_time = jacob_travel_time + adam_additional_time\n    \n    # Calculate the distance traveled by Adam to his home\n    adam_distance_home = adam_speed * adam_travel_time\n\n    # Calculate the total distance between their homes\n    # Since they are driving in opposite directions from the same starting point,\n    # the distance between their homes is the sum of the distances each traveled.\n    distance_apart = jacob_distance_home + adam_distance_home\n\n    return distance_apart\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n    # Using the Pigeonhole Principle: If you have n+1 pigeons and n pigeonholes, at least one pigeonhole must contain two or more pigeons.\n    max_cakes_in_one_layer = (total_cakes + total_layers - 1) // total_layers\n    return max_cakes_in_one_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    paid_gst = 0.91\n    original_price = paid_gst / gst_rate\n    return original_price\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # There are 2 blue and 2 yellow marbles (4 in total)\n    # According to the Pigeonhole Principle, if Lucy takes more marbles \n    # than the total number of colors, she will have at least 2 of one color.\n    # Taking 1 of each color (blue and yellow) will result in 2 marbles,\n    # but there's no guarantee they will be the same color.\n    # Hence, if Lucy takes 1 more, she's guaranteed to have 2 of the same color.\n    # So, Lucy must take at least 3 marbles.\n    return 3\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = 1000\n    \n    first_weight_g = 2.49 * kg_to_g\n    second_weight_g = 670\n    third_weight_g = (3 * kg_to_g) + 80\n    \n    total_weight_g = first_weight_g + second_weight_g + third_weight_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    next_meet_time_seconds = lcm(ashley_time, ben_time, charlie_time)\n    \n    # Convert seconds to hours and minutes\n    hours, seconds = divmod(next_meet_time_seconds, 3600)\n    minutes, seconds = divmod(seconds, 60)\n\n    # The meet time is 10.00 AM plus the hours and minutes they next meet\n    meet_hour = 10 + hours\n    meet_minute = 0 + minutes\n\n    # Adjust if there's an overflow in hours\n    if meet_minute >= 60:\n        meet_hour += meet_minute // 60\n        meet_minute %= 60\n\n    meet_hour %= 24  # Adjust in case of passing over midnight\n\n    # Formatting time to hh:mm format\n    meet_time = f\"{meet_hour:02d}:{meet_minute:02d}\"\n\n    return meet_time\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time = 60  # total exercise time in minutes\n    cycling_fraction = 1/3\n    cycling_time = total_time * cycling_fraction  # time spent cycling\n    jogging_time = total_time - cycling_time  # time spent jogging\n    return jogging_time\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    first_term = 22\n    difference = 18 - 22  # common difference between the terms\n\n    # 2 is the last known term in the sequence, the next term would be:\n    next_term = 2 + difference\n\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    total_apples = 30\n    children = 6\n    largest_possible = total_apples\n\n    # Since each child must get at least one apple and different number of apples,\n    # We start with the minimum distribution: 1, 2, 3, 4, 5, ...\n    # Subtract the minimum apples that first 5 children will get (1+2+3+4+5)\n    min_apples_distributed_to_others = sum(range(1, children)) \n    largest_possible -= min_apples_distributed_to_others\n\n    return largest_possible\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    # Given values\n    distance_miles = 273\n    sam_miles_per_gallon = 72.8\n    tom_extra_gallons = 6 + 3/4\n\n    # Calculate petrol used by Sam's car to cover the distance\n    sam_gallons_used = distance_miles / sam_miles_per_gallon\n\n    # Calculate total petrol used by Tom's car to cover the distance\n    tom_gallons_used = sam_gallons_used + tom_extra_gallons\n\n    # Calculate average rate of petrol consumption for Tom's car\n    tom_miles_per_gallon = distance_miles / tom_gallons_used\n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    age = solve(equation, justin)[0]\n    \n    return age\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # To guarantee two M&Ms of different colors, Bart should take the worst-case scenario,\n    # which is taking all of one color first.\n    # Since there are more brown M&Ms than any other color, he can take all of those.\n    num_brown = 5\n\n    # Then, he needs to take just one more, which could be red or yellow, to ensure a different color.\n    # So the answer is the number of brown M&Ms plus one more.\n    ans = num_brown + 1\n\n    return ans\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum((2*i + 1)**2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    outfit_ways = shirts * skirts\n    return outfit_ways\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Pattern: Each number is the previous number multiplied by 3.\n    # 1 * 3 = 3, next we need to find the number before 27 that follows the pattern\n    ans = 27 // 3  # this gives us the previous number in the sequence\n\n    return ans\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    a7 = 105  # 7th term\n    a8 = 120  # 8th term\n    a9 = 135  # 9th term\n\n    # Common difference can be found using two consecutive terms\n    d = a8 - a7\n\n    # General formula for nth term: a_n = a_1 + (n-1)*d\n    # Since we need to find the 100th term, we use n=100\n    # We can find the first term (a_1) using the 7th term and the common difference:\n    # a_7 = a_1 + 6*d => a_1 = a_7 - 6*d\n    a1 = a7 - 6*d\n\n    # Now find the 100th term\n    a100 = a1 + (100 - 1)*d\n\n    return a100\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    num1_base10 = int('45', 7)\n    num2_base10 = int('66', 7)\n    sum_base10 = num1_base10 + num2_base10\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    # Let the number of oranges originally be 3x and lemons be 5x\n    # After selling 48 oranges, we have (3x - 48) oranges left\n    # The new ratio is 1:2, so the number of lemons is 2 * (3x - 48)\n    # According to the new ratio, 5x (lemons at first) == 2 * (3x - 48)\n    # Solve for x:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x, 2 * (3*x - 48))\n    solution = solve(equation, x)\n\n    # The number of lemons at first would be 5x\n    num_lemons = 5 * solution[0]\n\n    return num_lemons\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    rabbits = 8\n    days = 5\n\n    total_carrots = carrots_per_day_per_rabbit * rabbits * days\n    \n    return total_carrots\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5/8) * 160\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let's use algebra to define the equations\n    # Let m be the current age of the mother and d be the current age of the daughter.\n    # The difference in age between the mother and daughter remains constant.\n\n    # From the first statement:\n    # m + (m - d) = 75  (1) (When the daughter becomes the mother's current age m, the mother will be m + (m - d))\n    \n    # From the second statement:\n    # m - d - (d - 3) = d (2) (When the mother was the daughter's current age, the daughter was 3 years old)\n\n    # Simplify (1) and (2) to solve for m and d\n    d = symbols('d')\n    m = 75 - (d - 3)\n    daughter_current_age = solve(m - d - (d - 3) - d, d)[0]\n    mother_current_age = m.subs(d, daughter_current_age)\n\n    return mother_current_age\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import product\nfrom collections import Counter\n\ndef solution():\n    year = '2014'\n    valid_dates_count = 0\n\n    for mmdd in product(range(0, 10), repeat=4):\n        date = year + ''.join(map(str, mmdd))\n        digit_count = Counter(date)\n        if digit_count['0'] == digit_count['1'] == digit_count['2']:\n            month = int(date[4:6])\n            day = int(date[6:])\n            if 1 <= month <= 12 and 1 <= day <= 31:\n                if month in [4, 6, 9, 11] and day <= 30:\n                    valid_dates_count += 1\n                elif month == 2 and day <= 28:\n                    valid_dates_count += 1\n                elif month in [1, 3, 5, 7, 8, 10, 12]:\n                    valid_dates_count += 1\n\n    return valid_dates_count\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # To ensure 3 red apples, Isabella has to take all non-red apples\n    # and then take 3 red apples.\n    non_red_apples = 11 + 7  # green and yellow apples\n    red_apples_needed = 3\n\n    # The smallest number of apples she needs to take to make sure \n    # she gets 3 red apples is the sum of non-red apples plus 3 red apples.\n    apples_to_take = non_red_apples + red_apples_needed\n\n    return apples_to_take\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    original_value = 200\n    new_value = 204\n    \n    percentage_change = ((new_value - original_value) / original_value) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Horse eats 1/2 a bale a day\n    # Cow eats 1/3 a bale a day\n    # Sheep eats 1/12 a bale a day\n\n    horse = 1/2\n    cow = 1/3\n    sheep = 1/12\n\n    # The rate at which all three animals eat together in a day\n    total_rate = horse + cow + sheep\n\n    # Total number of bales of hay\n    total_bales = 22\n\n    # Number of days the bales will last\n    days = total_bales / total_rate\n\n    return days\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    # Assume all boys are right-handed, subtract from total right-handed to find minimum right-handed girls.\n    min_right_handed_girls = right_handed - (total_pupils - girls)\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    spent_amount = 6400\n    discount_ratio = 0.8\n    saved_amount = spent_amount / (1 - discount_ratio)\n    return saved_amount - spent_amount\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a round-robin tournament, each team plays with every other team once.\n    # Total matches = Comb(6, 2) = 6! / (2! * (6-2)!)\n    total_matches = (6 * 5) // (2 * 1)\n    \n    # Since there are 3 possible results for each match (win, lose, draw),\n    # The total points given out in each match will either be 2 (1 win, 1 lose)\n    # or 2 (2 draws).\n    # Therefore, each match contributes 2 points to the total point pool.\n    \n    # Total points = total matches * 2\n    total_points = total_matches * 2\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    capacity = 8\n    minibuses_needed = (children + capacity - 1) // capacity\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # There are four colors, to ensure 4 different colored marbles,\n    # Jane must take at least one of each color.\n    # Start with the number of marbles for the most abundant color, which is green:\n    marbles_needed = 7  # All green marbles\n\n    # Then she needs to take enough marbles to be guaranteed one of each of the other colors\n    # even in the worst case scenario that she picks all marbles of one color before getting a different one.\n\n    # One marble of the second most abundant color (blue):\n    marbles_needed += 6  # All blue marbles\n\n    # One marble of the third most abundant color (red):\n    marbles_needed += 4  # All red marbles\n\n    # Lastly, she needs to pick one orange marble to guarantee she has four different colors.\n    # Since there are only 2 orange marbles, she can't get all of them without getting the fourth color.\n    marbles_needed += 1  # One orange marble\n\n    return marbles_needed\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n    \n    # Equation 1: boys = girls + 90\n    equation1 = Eq(boys, girls + 90)\n    \n    # Equation 2: girls_swim / girls_not_swim = 31 / 49\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)\n    \n    # Equation 3: boys_swim = boys_not_swim - 120\n    equation3 = Eq(boys_swim, boys_not_swim - 120)\n    \n    # Equation 4: girls + boys = 1690\n    equation4 = Eq(girls + boys, 1690)\n\n    # Equation 5: total swimmers + total non-swimmers = total pupils\n    equation5 = Eq(girls_swim + girls_not_swim + boys_swim + boys_not_swim, 1690)\n\n    # Equation 6: Set the total number of girls to be the sum of girls who can swim and girls who can't\n    equation6 = Eq(girls, girls_swim + girls_not_swim)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), \n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n    \n    ans = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return ans\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if (num % 2 == 0 and\n                num % 3 == 0 and\n                num % 5 == 0 and\n                num % 7 == 6):\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    n = 1\n\n    while True:\n        # keep factorial number\n        temp_n = n\n        while temp_n % 2 == 0:\n            count_2 += 1\n            temp_n //= 2\n        while temp_n % 5 == 0:\n            count_5 += 1\n            temp_n //= 5\n\n        # Since 10 = 2 * 5, we need to check the minimum of count_2 and count_5,\n        # to determine the number of zeros at the end of the factorial of n.\n        if min(count_2, count_5) == 28:\n            break\n\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 42):\n        if isprime(a):\n            for b in range(2, 42):\n                if isprime(b) and (3 * a + 7 * b == 41):\n                    return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    # Calculate cost per piece for each option\n    cost_per_piece_4pc = 7 / 4\n    cost_per_piece_6pc = 8.5 / 6\n    \n    # Compare the cost per piece to determine which is a better buy\n    better_buy = \"4pc\" if cost_per_piece_4pc < cost_per_piece_6pc else \"6pc\"\n    \n    return better_buy\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60  # Number of times the game is played\n    bet_amount = 1  # Amount bet each time\n    win_amount = 10  # Amount received if the player wins\n    \n    # Calculate probability of the sum being greater than 10\n    # Possible sums greater than 10 are: 11 and 12\n    # Combinations resulting in sum of 11: (5,6), (6,5)\n    # Combinations resulting in sum of 12: (6,6)\n    # So there are 3 favorable outcomes.\n    \n    total_combinations = 6 * 6  # Total outcomes for two dice\n    favorable_outcomes = 3  # Outcomes where the sum is greater than 10\n    \n    probability_win = favorable_outcomes / total_combinations\n    \n    # Expected winnings\n    expected_winnings = probability_win * win_amount * total_rolls\n    \n    # Expected expenditure (since the player bets every time)\n    expected_expenditure = bet_amount * total_rolls\n    \n    # The expected loss is the expenditure minus the winnings\n    expected_loss = expected_expenditure - expected_winnings\n    \n    return expected_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    # Kiera spent 740 on phone, let's call the remaining salary after buying the phone as R.\n    # She then spent 75% of R on rent, which leaves her with 25% of R.\n    # If the 25% of R is 1/5 of her entire salary S, then we can set up the equation: 0.25R = S/5\n    # Therefore, R = 2S/5\n    # We also know from the question that she had (S - 740) remaining after buying the phone.\n    # So we set R = S - 740 which gives us the equation: S - 740 = 2S/5\n    # Solving for S will give us Kiera's salary for the month.\n\n    # Let S be the salary\n    S = 740 / (1 - 0.75 * (2/5))\n    return S\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_without_3_apples = 280\n    weight_of_3_apples = total_weight_with_apples - remaining_weight_without_3_apples\n    weight_of_5_apples = weight_of_3_apples * 5 / 3\n    basket_weight = total_weight_with_apples - weight_of_5_apples\n    \n    return basket_weight\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    numbers = [2, 3, 4]\n    unique_numbers = set()\n\n    for i in range(1, len(numbers)+1):\n        for perm in permutations(numbers, i):\n            unique_numbers.add(int(''.join(map(str, perm))))\n\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    minutes_passed = 0\n    while True:\n        # Convert current hour and minutes to minutes since midnight\n        current_time = (2 * 60 + 31) + minutes_passed\n        # Calculate the new hour and minute\n        hour, minute = divmod(current_time, 60)\n        if hour == 24:\n            # Reset hour upon reaching 24 to simulate a real clock\n            hour = 0\n        # Add leading zeros to single digit minutes and hours\n        time_str = f'{hour:02d}{minute:02d}'\n        # Check if the digits 0, 1, 2, 3 are all present\n        if all(digit in time_str for digit in '0123'):\n            break\n        minutes_passed += 1\n    return minutes_passed\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    after_drinking = 100 + 150  # ml after class\n    before_class = after_drinking * 2  # ml before class (double because had drunk half)\n    original_amount = before_class\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    equation1 = Eq(first_hour + 26, second_hour)\n    equation2 = Eq(first_hour + second_hour, 40)\n    \n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the amount of money both had originally\n    x = symbols('x')\n    \n    # Lynn spent $160, so she has x - 160 left\n    # Mary spent $58, so she has x - 58 left, which is thrice the amount Lynn has\n    # Therefore, we have the equation: x - 58 = 3 * (x - 160)\n    equation = Eq(x - 58, 3*(x - 160))\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    # Lynn had x - 160 left after spending\n    lynn_money_left = solution[0] - 160\n    \n    return lynn_money_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n    \n    def triangle(A, B):\n        return 5 * A - B * B\n    \n    ans = triangle(diamond(4, 2), 6)\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n\n    # Grapes sold on Monday\n    sold_monday = total_grapes * (3 / 7)\n\n    # Remaining after Monday\n    remaining_after_monday = total_grapes - sold_monday\n\n    # Grapes sold on Tuesday\n    sold_tuesday = remaining_after_monday * (3 / 8)\n\n    # Remaining grapes\n    remaining_grapes = remaining_after_monday - sold_tuesday\n\n    # Grapes in each small bag\n    grapes_per_bag = 3 / 4\n\n    # Number of small bags packed\n    num_bags = remaining_grapes / grapes_per_bag\n\n    return int(num_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    remaining_tickets_percentage = 100 - 60\n    total_tickets = 28 / (remaining_tickets_percentage / 100)\n    \n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    # The dividend in a division with a remainder is given by:\n    # dividend = divisor * quotient + remainder\n    # The minimum value of the dividend occurs when the divisor is the smallest it can be\n    # Since the remainder must be less than the divisor, the smallest divisor we can have\n    # is one more than the remainder.\n    divisor = remainder + 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jerry's current age be 'jerry' and Devi's current age be 'devi'\n    jerry, devi = symbols('jerry devi')\n\n    # Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n    \n    # In 4 years, the ratio of their ages will be 5:7\n    equation2 = Eq((jerry + 4) / (devi + 4), 5/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jerry, devi))\n    \n    # Jerry's current age is the solution for 'jerry'\n    return solutions[jerry]\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Initial incorrect tens and ones for the subtrahend\n    incorrect_tens = 5\n    incorrect_ones = 3\n    \n    # Correct tens and ones for the subtrahend\n    correct_tens = 3\n    correct_ones = 2\n    \n    incorrect_difference = 36\n    \n    # Calculate the actual difference using the correction in the tens and ones place \n    # Add the difference caused by the tens place error\n    # Subtract the difference caused by the ones place error\n    correct_difference = incorrect_difference + (incorrect_tens - correct_tens) * 10 - (incorrect_ones - correct_ones)\n\n    return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    result = 41\n    initial_number = (result + 4) / 5\n    return initial_number\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n\n    if total_ml % jug_capacity == 0:\n        num_jugs = total_ml // jug_capacity\n    else:\n        num_jugs = (total_ml // jug_capacity) + 1\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50\n    target_percentage = 0.9\n    blue_balls = 1\n    \n    red_balls_to_remove = total_balls - (blue_balls / (1 - target_percentage))\n\n    return int(red_balls_to_remove)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    ans = sum(100 / i for i in range(97, 0, -1))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    total_matches = 220\n    weight_of_matches = total_weight_with_matches - empty_box_weight\n    weight_of_one_match = weight_of_matches / total_matches\n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cows, birds = symbols('cows birds')\n    \n    # Equation representing the total number of animals\n    equation1 = Eq(cows + birds, 1300)\n    # Equation representing the total number of legs\n    equation2 = Eq(4*cows + 2*birds, 3440)\n    \n    solutions = solve((equation1, equation2), (cows, birds))\n    \n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for velocity components of each car\n    # and the combined car post-collision\n    v_north, v_west, v_combined = symbols('v_north v_west v_combined')\n\n    # Conservation of momentum in the north direction:\n    # m1 * v1 + m2 * v2 = (m1 + m2) * v_combined_north\n    # Car 1 (north) has 500 kg * 20 m/s momentum\n    # Car 2 (west) has zero momentum in north direction\n    # After collision, the combined mass is 1000 kg\n    eq_north = Eq(500 * 20 + 500 * 0, 1000 * v_north)\n\n    # Conservation of momentum in the west direction:\n    # m1 * v1 + m2 * v2 = (m1 + m2) * v_combined_west\n    # Car 1 (north) has zero momentum in west direction\n    # Car 2 (west) has 500 kg * 30 m/s momentum\n    # After collision, the combined mass is 1000 kg\n    eq_west = Eq(500 * 0 + 500 * 30, 1000 * v_west)\n\n    # Solve the system of equations for the north and west velocity components\n    solutions = solve((eq_north, eq_west), (v_north, v_west))\n\n    # Calculate the magnitude of the combined velocity vector\n    # Using Pythagorean theorem since the velocities are perpendicular\n    v_combined = (solutions[v_north]**2 + solutions[v_west]**2)**0.5\n\n    # Return the magnitude of the velocity vector the instant after impact\n    return v_combined\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    # Iterate from the largest 3-digit number down to the smallest and check for all conditions\n    for number in range(999, 99, -2):  # Iterating over odd numbers only\n        hundreds_digit, tens_digit, units_digit = [int(d) for d in str(number)]\n        # Check divisibility by 9 and if tens digit is divisible by 4\n        if number % 9 == 0 and tens_digit % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    return (18 - 17) + (16 - 15) + (14 - 13)\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    # Let's denote the number of pens Ben has originally as x.\n    # After giving Ben 28 pens, Jenny has 83 - 28 pens.\n    # Jenny and Ben will have the same number of pens, so:\n    # 83 - 28 = x + 28\n    \n    # Solve the equation for x:\n    x = (83 - 28) - 28\n    \n    return x\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([x*(-1)**(i+1) for i, x in enumerate(range(64, 43, -2))])\n    return ans\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_weeks = 8\n    total_books = books_per_week * total_weeks\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    distance = (21 - 1) * 2  # Total distance covered by the trees\n    num_lamp_posts = (distance // 10) + 1  # Number of lamp posts needed\n    \n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd = symbols('laptop dvd')\n\n    # 5 laptops and 4 DVDs cost $14438\n    eq1 = Eq(5 * laptop + 4 * dvd, 14438) \n    # 1 laptop and 1 DVD cost $2960\n    eq2 = Eq(laptop + dvd, 2960)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (laptop, dvd))\n\n    return solutions[dvd]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n\n    types_of_handbags = sizes * colors\n\n    return types_of_handbags\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "def solution():\n    for circle in range(10):\n        for square in range(10):\n            for triangle in range(10):\n                for star in range(10):\n                    if (len(set([circle, square, triangle, star])) == 4 and \n                        circle + circle == square and\n                        square + circle == star and\n                        star + star == triangle):\n                        return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    # Initialize counter for pairs\n    count = 0\n    \n    # We are given that numbers are from 1 to 100\n    for i in range(1, 101):\n        for j in range(i + 1, 101):\n            # If the sum is a multiple of 5, we have a valid pair\n            if (i + j) % 5 == 0:\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_length = 5\n    full_patterns = 2000 // pattern_length\n    remaining_digits = 2000 % pattern_length\n\n    # Sum of digits in one pattern: 1+2+3+4+5\n    sum_one_pattern = sum(range(1, pattern_length + 1))\n    \n    # Sum of all full patterns\n    sum_full_patterns = sum_one_pattern * full_patterns\n\n    # Sum of remaining digits (if any)\n    sum_remaining_digits = sum(range(1, remaining_digits + 1))\n\n    # Total sum\n    total_sum = sum_full_patterns + sum_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    aaron_weight = 45\n    new_avg_after_aaron = 61\n    \n    # Let x be the total weight of the group before Aaron joined, and y be the number of people\n    # The total weight after Aaron joined is then x + aaron_weight\n    # The average after Aaron joined is (x + aaron_weight) / (y + 1) = new_avg_after_aaron\n    # Therefore, x + aaron_weight = new_avg_after_aaron * (y + 1)\n\n    ben_weight = 71\n    new_avg_after_ben = 62\n\n    # Similarly, the total weight after Ben joined is x + aaron_weight + ben_weight\n    # The new average after Ben joined is (x + aaron_weight + ben_weight) / (y + 2) = new_avg_after_ben\n    # Therefore, x + aaron_weight + ben_weight = new_avg_after_ben * (y + 2)\n\n    # We have two equations with two unknowns (x and y):\n    # Equation 1: x + aaron_weight = new_avg_after_aaron * (y + 1)\n    # Equation 2: x + aaron_weight + ben_weight = new_avg_after_ben * (y + 2)\n\n    # We can solve these equations for x and y\n\n    # From Equation 1: x = new_avg_after_aaron * (y + 1) - aaron_weight\n    # Substitute x in Equation 2: new_avg_after_aaron * (y + 1) - aaron_weight + ben_weight = new_avg_after_ben * (y + 2)\n    # Simplify it to get y: new_avg_after_aaron * y + new_avg_after_aaron - aaron_weight + ben_weight = new_avg_after_ben * y + 2 * new_avg_after_ben\n    # y = (new_avg_after_aaron - aaron_weight + ben_weight - 2 * new_avg_after_ben) / (new_avg_after_ben - new_avg_after_aaron)\n\n    y = (new_avg_after_aaron - aaron_weight + ben_weight - 2 * new_avg_after_ben) / (new_avg_after_ben - new_avg_after_aaron)\n\n    # Once we get y, we can calculate x using Equation 1:\n    x = new_avg_after_aaron * (y + 1) - aaron_weight\n\n    # The average weight before Aaron and Ben joined is x / y\n    average_before = x / y\n\n    return average_before\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15  # total cost in pounds\n    coffee_cost = 3.69  # cost of coffee in pounds\n    milk_cost = 0.89  # cost of milk in pounds (converted from pence to pounds)\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hours_passed in range(1, 12):\n        hours_remaining = 12 - hours_passed\n        if hours_passed == 2 * hours_remaining:\n            return hours_passed\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Worst case: taking out all balls of one color and one less than needed of another color\n    # before getting 4 balls of the same color\n    # Blue balls = 5, orange balls = 4, yellow balls = 2\n    # Sheila could take out 3 blue, 3 orange, and 2 yellow balls and not have 4 of the same color.\n    # The next ball she takes out must give her 4 of the same color.\n    max_blue = 3\n    max_orange = 3\n    max_yellow = 2\n    ans = max_blue + max_orange + max_yellow + 1  # The next one guarantees 4 of the same color\n    return ans\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    orange_price_per_kg = 1.5\n    mango_price_per_kg = 2.3\n    oranges_weight = 4.1\n    mangoes_weight = 2\n\n    total_cost = (orange_price_per_kg * oranges_weight) + (mango_price_per_kg * mangoes_weight)\n\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # Known numbers\n    mean_value = 5                # The mean of the numbers\n    total_numbers = len(numbers) + 1  # Total amount of numbers including 'a'\n\n    # Calculate the sum of the known numbers\n    sum_known_numbers = sum(numbers)\n\n    # Calculate the sum of all numbers including 'a' (mean * total numbers)\n    total_sum = mean_value * total_numbers\n\n    # The value of 'a' is the total sum minus the sum of the known numbers\n    a = total_sum - sum_known_numbers\n\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Total work is considered 1 job\n    work_per_day_A = 1 / 15\n    work_per_day_B = 1 / 10\n\n    # Work done by A and B together in 4 days\n    work_done_4_days = 4 * (work_per_day_A + work_per_day_B)\n\n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_4_days\n\n    # Days for B to finish the remaining job\n    days_for_B_to_finish = remaining_work / work_per_day_B\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Sum of the first sequence from 1 to 13\n    n = 13\n    sum_first_sequence = n * (n + 1) // 2\n\n    # Sum of the second sequence from 1 to 12\n    n = 12\n    sum_second_sequence = n * (n + 1) // 2\n\n    # Total sum\n    total_sum = sum_first_sequence + sum_second_sequence\n    \n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    difference = original_price - reduced_price\n    percentage_reduction = (difference / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    total_difference = 52\n    students = 0\n    layer = 0\n\n    while True:\n        boys = (layer * 2 + 1) ** 2\n        girls = layer ** 2\n        if boys - girls == total_difference:\n            students = boys + girls\n            break\n        layer += 1\n\n    return students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    # As there are 1000 bottles, we need to find the minimum number of binary digits (bits)\n    # capable of representing up to 1000 unique states to conduct a binary search.\n    # This requires the use of the minimum number of test tubes to test all bottles in parallel.\n    \n    import math\n    num_bottles = 1000\n    \n    # Log base 2 calculation will give us the number of bits required to represent all bottles,\n    # which is equivalent to the number of test tubes needed for a single test.\n    num_test_tubes = math.ceil(math.log(num_bottles, 2))\n    \n    return num_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 5 == 1 and i % 6 == 1 and i % 7 == 1:\n            return i\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Ducklings and baby geese have 2 legs each, lambs have 4 legs each\n    duck_legs = 4 * 2\n    goose_legs = 2 * 2\n    \n    # Remaining legs are all from lambs\n    remaining_legs = 36 - (duck_legs + goose_legs)\n    \n    # Each lamb has 4 legs, so divide remaining legs by 4 to find number of lambs\n    num_lambs = remaining_legs // 4\n    \n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    litres_to_millilitres = 2.5 * 1000\n    return litres_to_millilitres\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    remaining_after_day4 = remaining_sweets * (4/3)\n    remaining_after_day3 = remaining_after_day4 * (5/4)\n    remaining_after_day2 = remaining_after_day3 * (6/5)\n    initial_sweets = remaining_after_day2 * (7/6)\n\n    return initial_sweets\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_cookies = symbols('total_cookies')\n    \n    # Charlene kept half of the cookies plus 8 cookies.\n    charlene_kept = (1/2) * total_cookies + 8\n    \n    # Emerald got the remaining cookies.\n    emerald_got = total_cookies - charlene_kept\n    \n    # Emerald ate a third of what she got plus 4 cookies.\n    emerald_ate = (1/3) * emerald_got + 4\n    \n    # Hebe got the remaining cookies from Emerald.\n    hebe_got = emerald_got - emerald_ate\n    \n    # Hebe ate a quarter of what she got and had 42 left.\n    equation = Eq((1/4) * hebe_got + 42, hebe_got)\n\n    # Solve for the total number of cookies Charlene had at first.\n    total_cookies_sol = solve(equation, total_cookies)\n    \n    return total_cookies_sol[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    # Let n be the number of teams in the league\n    n = Symbol('n')\n    \n    # Each team plays n-1 other teams at home and n-1 teams away, hence 2(n-1) games for each team\n    # The total number of games is n*(n-1), since each match is counted for two teams\n    # Divide by 2 since each match is counted twice\n    equation = (n*(n-1))/2 - 30\n    \n    # Solve for n\n    num_teams = solve(equation, n)\n    \n    # Filter out the negative solution, as the number of teams cannot be negative\n    num_teams = [int(team) for team in num_teams if team > 0]\n    \n    return num_teams[0]  # return the positive solution\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    return 528 + 30\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    uniforms_per_day = 720 / 5\n    total_days_needed = 3600 / uniforms_per_day\n    return total_days_needed\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Define a function to compute the number of ways to climb to the ith step\n    def climb_ways(i):\n        # Base cases: 0 ways to climb to step 0, 1 way to climb to step 1 (just stand on it), \n        # and 1 way to climb to step 2 (either one step at a time, or a single two-step).\n        ways = [0, 1, 2]\n        # Fill out the list with the number of ways to reach the rest of the steps\n        for j in range(3, i + 1):\n            ways.append(ways[j - 1] + ways[j - 2])\n        return ways[i]\n    \n    # To include the 5th step in his path, we need to calculate the number of different ways\n    # to get to the 5th step, and then the number of different ways to get from the 5th step to the 10th step.\n    ways_to_5th_step = climb_ways(5)\n    # From the 5th step to the 10th step is the same as the total number of ways to climb 5 steps,\n    # because the sequence of steps taken from the 5th to the 10th step is independent of the steps taken to get to the 5th step.\n    ways_from_5th_to_10th = climb_ways(5)\n    \n    # The total number of ways to climb the stairs including the 5th step\n    # is the product of the number of ways to get to the 5th step and the number of ways to get from the 5th to 10th step.\n    total_ways = ways_to_5th_step * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solve the system of equations for the values of the numbers\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Return the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = 45\n    boys = symbols('boys')\n    \n    equation = Eq(girls, 3 * boys - 21)\n    \n    solutions = solve(equation, boys)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    factors = [2, 2, 2, 3, 8, 5, 5, 25]\n    product = 1\n    for factor in factors:\n        product *= factor\n    \n    zeros_count = 0\n    while product % 10 == 0:\n        zeros_count += 1\n        product //= 10\n    \n    return zeros_count\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(40, 51):\n        if (i ** 0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_amount = 150\n    cup_amount = 40\n    cups_poured = 3\n    water_left = initial_amount - (cup_amount * cups_poured)\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for each item's cost\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Three equations representing the given information\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister) \n    \n    # The sum of their ages in 10 years will be 53\n    equation2 = Eq((alice + 10) + (sister + 10), 53) \n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from sympy import symbols, Eq, solve, factorial\n\n    n = symbols('n', integer=True)\n    eq = Eq(n*(n+1)*(n+2)*(n+3), 3024)\n    solutions = solve(eq, n)\n    largest_number = max(solutions) + 3\n\n    return largest_number\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bob, alan = symbols('bob alan')\n    \n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    solutions = solve((equation1, equation2), (bob, alan))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n    \n    # Least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n    \n    # Minimum number of marker packs to get at least 1000 markers\n    min_packs = -(-1000 // pack_lcm)\n\n    return min_packs * 4  # Since he buys 4 packs of each size\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    n_students = 10\n    # Each handshake involves 2 students, so each student will partake in (n_students - 1) handshakes.\n    # But this counts each handshake twice (once for each student), so we divide by 2 to avoid double counting.\n    total_handshakes = (n_students * (n_students - 1)) // 2\n    return total_handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    return abs(20 * 0.01 * 90 - 90 * 0.01 * 20)\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit = morning_fruit - afternoon_fruit\n    return more_fruit\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_weight = 10\n\n    water_weight = (water_ratio / orange_ratio) * orange_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Let's first convert repeating decimals to fractions.\n\n    # For 0.1̇199251̇7\n    # Let x = 0.1̇199251̇7\n    # Then 10^6 * x = 119925.1̇199251̇7\n    # Subtracting these two equations,\n    # (10^6 - 1) * x = 119925\n    # Therefore, x = 119925 / (10^6 - 1)\n\n    # For 0.2̇34567̇\n    # Let y = 0.2̇34567̇\n    # Then 10^5 * y = 23456.7̇34567̇\n    # Subtracting these two equations,\n    # (10^5 - 1) * y = 23456\n    # Therefore, y = 23456 / (10^5 - 1)\n\n    # We will iterate over the number of digits, starting with 7 as the first matching digit and find the least n\n    from fractions import Fraction\n\n    x = Fraction(119925, 10**6 - 1)\n    y = Fraction(23456, 10**5 - 1)\n\n    n = 6  # initializing to 6, since we're starting to check from the 7th digit onwards\n    while True:\n        # Checking if the nth decimal place of x and y are equal.\n        \n        # To find the nth digit, we can multiply the fraction by 10^n and extract the integer part\n        x_nth_digit = int((x * 10**n).numerator / (x * 10**n).denominator) % 10\n        y_nth_digit = int((y * 10**n).numerator / (y * 10**n).denominator) % 10\n\n        if x_nth_digit == y_nth_digit:\n            return n\n        else:\n            n += 1\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    # Given scores from the first four judges\n    scores = [7.9, 8.3, 8.8, 8.6]\n    # The minimum average score needed to win\n    required_average = 8.5\n    \n    # Calculate the total score required for all five judges to have an average of 8.5\n    total_score_required = required_average * 5\n    \n    # Calculate the total score from the first four judges\n    current_total_score = sum(scores)\n    \n    # Calculate the minimum score the fifth judge can award\n    min_score_fifth_judge = total_score_required - current_total_score\n    \n    return min_score_fifth_judge\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 10000\n    total_interest = 816\n\n    # Let r be the interest rate per year\n    r = symbols('r')\n    \n    # Interest for the first year = principal * r\n    # Interest for the second year = (principal + Interest for the first year) * r\n    # Total interest for two years = Interest for the first year + Interest for the second year\n    \n    equation = Eq(principal * r + (principal + principal * r) * r, total_interest)\n\n    interest_rate = solve(equation, r)\n\n    return float(interest_rate[0])*100  # convert to percentage\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n    \n    if remainder >= divisor:\n        return False  # Johnny's error: remainder cannot be equal or greater than divisor\n\n    correct_product = quotient * divisor\n    correct_answer = correct_product + remainder\n\n    return correct_answer\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_number = symbols('original_number')\n    equation = Eq(2 * original_number + 7, 43)\n    solution = solve(equation, original_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hannah_speed = symbols('hannah_speed')\n    peter_speed = hannah_speed + 15\n\n    # Given ratio of time taken is 3:4, hence the ratio of their speeds is 4:3 (since speed inversely propotional to time)\n    equation = Eq(4 * hannah_speed, 3 * peter_speed)\n\n    hannah_speed_value = solve(equation, hannah_speed)\n\n    return hannah_speed_value[0]\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    # Total pages\n    total_pages = 550\n\n    # Pages read on the first and last day\n    first_day_pages = 30\n    last_day_pages = 70\n\n    # Total pages read except the first and last day\n    remaining_pages = total_pages - first_day_pages - last_day_pages\n\n    # Since he reads the same amount more each day,\n    # we need to find the common difference of the arithmetic sequence.\n    # The sum of an arithmetic sequence is given by n/2 * (first_term + last_term)\n    # We combine the formula of the sum with the remaining pages to find the number of terms.\n\n    # We let n be the number of days he read except the first and the last days\n    # Hence, the total days are n + 2\n    # Now we express remaining_pages as an arithmetic sum: remaining_pages = n/2 * (2*first_day_pages + (n-1)d)\n    # Our goal is to solve for d (the amount he read more each day than the day before)\n\n    # We have n/2 * (first_day_pages + last_day_pages) = total_pages - first_day_pages - last_day_pages\n    # Which simplifies to n/2 * (first_day_pages + first_day_pages + (n-1)d) = remaining_pages\n    # Therefore, (n/2) * (2 * first_day_pages + (n - 1) * d) = remaining_pages\n    # From this, we get a quadratic equation for n: n^2 * d + n * (2 * first_day_pages - d) - 2 * remaining_pages = 0\n\n    # Using the quadratic formula to solve for n\n    # We know that a = d, b = 2 * first_day_pages - d, c = -2 * remaining_pages\n    # and n = (-b + sqrt(b^2 - 4ac)) / (2a) or n = (-b - sqrt(b^2 - 4ac)) / (2a)\n\n    # We start a loop from 1 and increase the common difference (d) until the quadratic equation is satisfied\n    # We also know that d must be an integer because pages can't be fractional.\n    # When we find a value for d that satisfies the quadratic equation,\n    # we have found the common difference, which is what we are looking for.\n    from math import sqrt\n\n    # Start from d = 1, since he reads more each day\n    d = 1\n    while True:\n        # Calculate discriminant\n        discriminant = ((2 * first_day_pages - d) ** 2) - (4 * d * (-2 * remaining_pages))\n        # If discriminant is negative, no real solution exists\n        if discriminant < 0:\n            d += 1\n            continue\n        # We calculate n using the quadratic formula\n        n = (-2 * first_day_pages + d + sqrt(discriminant)) / (2 * d)\n        if n.is_integer():\n            # n should be a whole number; float checking for integer is due to Python's floating-point arithmetic\n            return d\n        d += 1\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    # Emily sold thrice as many tickets as Victor\n    equation1 = Eq(emily, 3 * victor)\n\n    # Victoria sold 68 more tickets than Emily\n    equation2 = Eq(victoria, emily + 68)\n\n    # Total tickets sold by Emily, Victor, and Victoria\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    return 3.7 + 5.7\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent = 23 + 35\n    time_for_short_answers = total_time - time_spent\n    return time_for_short_answers\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    total_ways = 4 * 3 * 2  # Total ways without restriction\n    joe_mike_same_entrance = 1 * 1 * 3  # Ways for Joe and Mike to use the same entrance\n    ans = total_ways - joe_mike_same_entrance\n    return ans\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # in meters per second\n    crossing_time = 45  # in seconds\n    train_length = 850  # in meters\n    \n    # The train covers its own length plus the length of the tunnel in the crossing time\n    total_distance_covered = train_speed * crossing_time\n    \n    # The length of the tunnel is the total distance minus the length of the train\n    tunnel_length = total_distance_covered - train_length\n    \n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    # The formula to determine the maximum number of regions (R) that can be formed with n circles is\n    # R = n^2 + n + 2\n    \n    # For 5 circles\n    n = 5\n    regions_from_circles = n**2 + n + 2\n    \n    # Each line can intersect with each of the circles at 2 points at most,\n    # creating an additional region with each intersection\n    additional_regions_from_line = n * 2 \n    \n    # Adding the original region that the line will divide into two parts\n    additional_regions_from_line += 1\n    \n    # The total number of parts the plane can be divided into is the sum of the regions from the circles\n    # and additional regions from the line\n    total_regions = regions_from_circles + additional_regions_from_line\n    \n    return total_regions\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_fifty, original_one = symbols('original_fifty original_one')\n\n    # Owen had some fifty-cent and one-dollar coins. 2/7 of his coins were fifty-cent\n    equation1 = Eq(original_fifty, 2/7 * (original_fifty + original_one))\n\n    # His mother gave him 10 one-dollar coins and five-dollars’ worth of fifty-cent coins (10 fifty-cent coins).\n    final_fifty = original_fifty + 10  # because $5 in fifty-cent coins is 10 coins\n    final_one = original_one + 10\n\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins.\n    equation2 = Eq(final_one, 2 * final_fifty)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (original_fifty, original_one))\n\n    # Total number of coins Owen had at first\n    total_original_coins = solutions[original_fifty] + solutions[original_one]\n\n    return total_original_coins\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Cost for the first 3 tons\n    fixed_cost = 4 * 3 + 4  # Rate for the first 3 tons plus the fixed service fee\n\n    # Remaining amount for additional water\n    remaining_amount = 109 - fixed_cost  # Subtracting fixed costs from total amount\n\n    # Additional tons she can use (at 3 dollars per ton)\n    additional_tons = remaining_amount // 3  # Use floor division to find whole tons\n\n    # Total tons of water\n    total_tons = 3 + additional_tons  # Add the first 3 tons\n\n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cookies each person has\n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n\n    # Given conditions converted into equations\n    equation1 = Eq(bala, daniel + 320)\n    equation2 = Eq(bala, amelia / 2)\n    equation3 = Eq(carl, 3 / 4 * (amelia + bala + daniel))\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n    equation5 = Eq(amelia, 160)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = 1\n\n    # Dividend = divisor * quotient + remainder\n    # Since we want the smallest possible dividend, we should find the smallest divisor\n    # that allows for the remainder of 6. Since the remainder must be less than the divisor,\n    # the smallest divisor possible, in this case, is 7 (one more than the remainder).\n\n    smallest_divisor = remainder + 1\n    smallest_dividend = smallest_divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9 + 0  # Eve's, Alice's, and Irene's candies\n    number_of_girls = 3\n\n    candies_each_girl_gets = total_candy // number_of_girls\n    return candies_each_girl_gets\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples / 3 + oranges / 2, 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for each person's amount of money\n    noah, pete, howard = symbols('noah pete howard')\n\n    # Creating equations based on the information given\n    equation1 = Eq(noah + pete, 75)            # Noah and Pete had $75 together\n    equation2 = Eq(noah + howard, 145)         # Noah and Howard had $145 together\n    equation3 = Eq(howard, 3 * pete)           # Howard had 3 times as much money as Pete\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    # Let x be the time the lazy gardener takes to mow the lawn on his own\n    # Quick gardener's work rate:  1 lawn per 12 hours = 1/12 lawn per hour\n    # Lazy gardener's work rate:   1 lawn per x hours = 1/x lawn per hour\n    # Combined work rate: (1/12 + 1/x) lawns per hour\n    \n    # They together mow the lawn in 8 hours, which means their combined work rate is 1/8 lawn per hour\n    # So, we have the equation: 1/12 + 1/x = 1/8\n    \n    # Solving for x:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/12 + 1/x, 1/8)\n\n    solution = solve(equation, x)[0]  # take the first solution\n\n    return solution\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    # Let x be the number of tomatoes Matthew had at first\n    # After giving 7 tomatoes to Matthew, Belinda has 36 - 7 tomatoes left\n    # They both have the same number of tomatoes, so we set up the equation:\n    # 36 - 7 = x + 7\n    # Solve for x:\n    x = 36 - 7 - 7\n    return x\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    initial_amount = 182\n    dress_cost = 5 * x\n    skirt_cost = 3 * x\n    remaining_amount = 5 * x\n\n    equation = Eq(initial_amount - dress_cost - skirt_cost, remaining_amount)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n    \n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    \n    return ans\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    green_line_frequency = 5\n    red_line_frequency = 6\n    \n    from math import lcm\n    minutes_until_sync = lcm(green_line_frequency, red_line_frequency)\n    \n    time_sync_hour = 5 + minutes_until_sync // 60\n    time_sync_minute = minutes_until_sync % 60\n    \n    return f\"{time_sync_hour}:{str(time_sync_minute).zfill(2)} am\"\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990\n    half_full_jug_ml = jug_capacity_ml / 2\n    capacity_per_cup_ml = half_full_jug_ml / 3\n    return capacity_per_cup_ml\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.50\n    spent_money = total_money - saved_money\n    \n    # Let x be the amount spent on transportation, thus 2x is spent on food.\n    # We then have x + 2x = spent_money, solving for x gives us the amount spent on transportation.\n    transportation = spent_money / 3\n    food = 2 * transportation\n\n    return food\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    total = 0\n    product = 1\n    \n    for i in range(2, 16, 2):\n        product *= i  # Multiply the current number\n        if i > 2:\n            product *= (i - 1)  # Multiply the number before it if it is not the first term\n        total += product  # Add the product to the total\n    \n    return total\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n    \n    position_from_back = total_cars - position_from_front + 1\n    \n    return position_from_back\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    distance_per_tree = 3                          # Distance for each tree in meters\n    number_of_trees = 101                          # Total number of trees Olivia passes\n    walking_time_to_101th_tree = 3 * 60            # Time in seconds to walk to the 101th tree\n    total_distance_to_101th_tree = distance_per_tree * (number_of_trees - 1)  # Since it's from the first tree to the 101th, we consider 100 tree intervals.\n\n    # Calculate Olivia's walking speed in meters per second\n    walking_speed = total_distance_to_101th_tree / walking_time_to_101th_tree\n\n    # Calculate the time it takes to travel to school (4000 meters) with the found walking speed\n    total_time_to_school = 4000 / walking_speed\n\n    # Convert time to school from seconds to minutes\n    total_time_to_school_minutes = total_time_to_school / 60\n\n    return total_time_to_school_minutes\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    cost_of_5_bananas = 5 * solutions[banana]\n    \n    return float(cost_of_5_bananas)\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return round(cost_for_250_grams, 2)\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(6, 52, 5))\n    return sum_of_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Trade between Owen and Oscar: 5 fish for 2 rabbits => 1 rabbit is worth 2.5 fish\n    rabbit_fish_ratio = 5 / 2\n\n    # Trade between Oscar and Dennis: 4 rabbits for 7 packs of wheat => 1 pack of wheat is worth 4/7 rabbits\n    wheat_rabbit_ratio = 7 / 4\n\n    # Combined ratio: 1 pack of wheat in terms of fish\n    wheat_fish_ratio = wheat_rabbit_ratio * rabbit_fish_ratio\n\n    # Owen wants to give Dennis fish for 14 packs of wheat\n    fish_for_14_wheat = 14 * wheat_fish_ratio\n\n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Since the sequence progresses with a common difference (i.e., it's an arithmetic sequence),\n    # we use the sum of squares formula: n/6 * (n + 1)(2n + 1)\n    # However, we have 4^2, 8^2, etc., which is 4*(1^2), 4*(2^2), ..., 4*(31^2)\n    # Thus, we first find the number of terms in the sequence and then apply the formula accordingly.\n    \n    n = 124 // 4  # Divide by 4 as the sequence steps are multiples of 4\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Since each term is squared after being multiplied by 4, we factor out 4^2 from the sum\n    ans = 4**2 * sum_of_squares\n    return ans\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for scenario in set(permutations([1, 2, 3, 3], 4)):\n        if len(set(scenario)) >= 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    # Define the total number of questions and Valerie's score\n    total_questions = 6\n    correct_score = 5\n    wrong_score = -2\n    total_score = 23\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_score + wrong_answers * wrong_score\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation1 = Eq(justin + 18, 4 * (justin - 6))\n\n    solution = solve(equation1, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    total_time = time_per_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows and g be the initial number of goats\n    c, g = symbols('c g')\n    \n    # initially 65% were cows (% is removed by dividing by 100), so rest 35% were goats\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 animals, cows became 85% (65% + 20%)\n    equation2 = Eq(0.85 * (c + g + 240), c + 240)\n    \n    # The number of goats doubled\n    equation3 = Eq(g * 2, g + 240)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    for cookies in range(1, 9*8):\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    return 828 + 191\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    discount_threshold1 = 20\n    discount_threshold2 = 50\n    discount1 = 4\n    discount2 = 15\n\n    # Check the conditions for discount\n    if total_cost >= discount_threshold2:\n        total_cost -= discount2\n    elif total_cost >= discount_threshold1:\n        total_cost -= discount1\n\n    return total_cost\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    number, _ = solve_congruence(*congruences)\n    while number < 100:\n        return number\n        number += 4 * 5 * 6  # Increase by the least common multiple to find other solutions\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial as f\n\n    # Number of ways to arrange two boys at each end: permutations of 2 boys.\n    boys_permutations = f(2)  # P(2,2) = 2!\n\n    # Number of ways to arrange three girls in the middle: permutations of 3 girls.\n    girls_permutations = f(3)  # P(3,3) = 3!\n\n    # Apply the rule of multiplication since the boys and girls groups are independent.\n    # Total number is the product of permutations of boys and girls.\n    total_arrangements = boys_permutations * girls_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    # Given ages\n    ages = [6, 9, 10]\n    \n    # Tom's age is a multiple of 3, and since Jason is younger than Tom, Adam must be the one who is 9 years old\n    # as 9 is the only age which is a multiple of 3 and not the largest age.\n    adam_age = 9\n\n    return adam_age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # In the worst case you draw all the balls of two colors before getting a ball of the third color.\n    # You have to draw 5 red + 5 white + 1 (to make sure you have a yellow)\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    num_str = '2023'\n    n = 1\n    while True:\n        num = int(num_str * n)\n        if num % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 / 21\n    return int(ans)\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Since Avril needs to get the largest possible number of apples, let's first give 1 apple to each of the other five children:\n    num_children = 5\n    minimum_apples_to_others = sum(range(1, num_children + 1))\n    \n    # Now, subtract the number of apples given away from the total to see what is left for Avril:\n    remaining_apples_for_avril = 28 - minimum_apples_to_others\n    \n    return remaining_apples_for_avril\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    original_sum = original_average * 2\n    new_sum = new_average * 3\n    added_number = new_sum - original_sum\n    return added_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime\n\n    # Time format for calculation\n    time_format = \"%H:%M\"\n    \n    # Hannah's schedule times\n    left_school_time = \"15:22\"\n    caught_bus_time = \"16:01\"\n    drop_off_time = \"16:19\"  # 16:01 + 18 minutes bus trip \n    got_home_time = \"16:35\"\n\n    # Convert string times to datetime objects\n    left_school = datetime.strptime(left_school_time, time_format)\n    caught_bus = datetime.strptime(caught_bus_time, time_format)\n    drop_off = datetime.strptime(drop_off_time, time_format)\n    got_home = datetime.strptime(got_home_time, time_format)\n\n    # Calculate walking times\n    walk_to_bus_stop = (caught_bus - left_school).total_seconds() / 60.0\n    walk_home_from_drop_off = (got_home - drop_off).total_seconds() / 60.0\n\n    # Total walking time\n    total_walk_time = walk_to_bus_stop + walk_home_from_drop_off\n\n    return int(total_walk_time)\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    last_term = 79\n    common_difference = 23 - 16\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    \n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amounts of Ken and Lisa as 'ken' and 'lisa' respectively\n    ken, lisa, x = symbols('ken lisa x')\n\n    # Ken initially has $15 more than Lisa\n    original_amount_eq = Eq(ken, lisa + 15)\n    \n    # After Ken gives 'x' amount to Lisa, he has $21 less than Lisa\n    after_giving_eq = Eq(ken - x, lisa + x - 21)\n\n    # Solve the system of equations\n    solutions = solve((original_amount_eq, after_giving_eq), (ken, lisa, x))\n\n    # The value of 'x' is the amount Ken gave to Lisa\n    return solutions[x]\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5 / 8\n    laptop_cost = total_money * fraction_spent\n    return laptop_cost\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = 0\n    for i in range(1, 10):\n        if i <= 5:\n            trophies += i\n        else:\n            trophies += (10 - i)\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    total_boys = 290\n    more_boys_than_girls = 80\n    \n    total_girls = total_boys - more_boys_than_girls\n    total_children = total_boys + total_girls\n    \n    percentage_boys = (total_boys / total_children) * 100\n    \n    return percentage_boys\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    joyce_speed_ratio = 3  # Joyce's part of the speed ratio\n    lori_speed_ratio = 2   # Lori's part of the speed ratio\n    time_seconds = 10  # Time in seconds\n\n    joyce_speed = (joyce_speed_ratio / lori_speed_ratio) * lori_speed\n    distance_jocye_runs = joyce_speed * time_seconds\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    blue = 18\n    red = 6\n    orange = 8\n\n    # To ensure getting 2 red marbles, we must consider the worst-case scenario\n    # where we might get all the blue and orange marbles first.\n\n    # We can take all blue and orange marbles out, and then we will take one red marble out for sure.\n    marbles_to_take = blue + orange + 1\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    total_cookies = 100\n    num_days = 5\n    difference = 6\n\n    # Let the number of cookies he ate on the first day be x.\n    # Then the arithmetic sequence of cookies he ate over 5 days is: x, x+6, x+12, x+18, x+24.\n    # The sum of an arithmetic sequence is: (first_term + last_term) * num_terms / 2.\n    # So we have the equation: (x + (x + 4 * 6)) * 5 / 2 = 100.\n    # Simplify the equation to find x, the number of cookies he ate on the first day.\n    \n    first_plus_last_term = total_cookies * 2 / num_days\n    first_day_cookies = (first_plus_last_term - 4 * difference) / 2\n\n    return int(first_day_cookies)\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_num = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_num = int(''.join(map(str, sorted(digits))))\n    return largest_num - smallest_num\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    count = 0\n    for i in range(1, 31):\n        if (i % 2 == 0) + (i % 3 == 0) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    last_term = first_term + (num_rows - 1) * common_difference\n    total_athletes = (first_term + last_term) * num_rows // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    return 221 * 4\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Initially, the probability of picking a car is 1/3 regardless of the gate.\n    # However, after one of the other gates (which must be a goat) is revealed,\n    # the probability changes.\n    # There are now two scenarios to consider - staying or switching:\n    # Staying means you still have the 1/3 chance you started with (since you picked one gate out of three).\n    # Switching means you now have a 2/3 chance, because initially there was a 2/3 chance the car was not behind your gate,\n    # and since the host is forced to reveal a goat in one of the other two gates,\n    # switching will give you the car if it wasn't behind your initial gate.\n    # Hence, the best strategy is to switch gates.\n\n    # Always choose to switch to the other gate after one gate is revealed to have a goat.\n    gate_to_choose = 2\n\n    # The actual probability calculation is unnecessary here since we know the optimal strategy,\n    # but let's return the probability for educational purposes.\n    probability_of_winning_by_switching = 2 / 3\n\n    return probability_of_winning_by_switching\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Define the sequence as per the given pattern\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n    \n    # Sort the sequence to find the median\n    sequence.sort()\n    \n    # Calculate the median\n    n = len(sequence)\n    if n % 2 == 0:  # If even number of elements, take mean of two middle elements\n        median = (sequence[n // 2 - 1] + sequence[n // 2]) / 2\n    else:  # If odd number of elements, take the middle element\n        median = sequence[n // 2]\n    \n    return median\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    # Start from the smallest number that satisfies the first condition\n    number = 2\n    while True:\n        # Check if the number satisfies all three conditions\n        if number % 4 == 2 and number % 3 == 2 and number % 7 == 1:\n            return number\n        # Increment the number by the LCM of 4 and 3 to maintain the remainders with respect to 4 and 3\n        number += 12\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    total_spent = 6 * 'x'\n    return total_spent\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    sum = 0\n    for i in range(1, 31):\n        sum += i * (i + 1)\n    return sum\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Number of pokemon caught per minute by one trainer is constant\n    rate_per_trainer_per_minute = 7 / (7 * 7)\n    \n    # Total number of trainers needed to catch 49 pokemon in 49 minutes\n    # Since each trainer catches 1 pokemon in 7 minutes,\n    # the number of trainers needed is unchanged.\n    num_trainers_needed = 49 / (49 * rate_per_trainer_per_minute)\n    \n    return int(num_trainers_needed)\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from itertools import permutations\n\ndef solution():\n    # Total different books\n    books = 7\n    # Number of students\n    students = 3\n    # Use permutations since the books and students are distinct\n    ways = len(list(permutations(range(books), students)))\n    return ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    people = 13  # Tommy and his 12 friends\n    minutes_per_person = 142\n    total_minutes = people * minutes_per_person\n    return total_minutes\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # Since the number is repeated \"928\" which sums up to 19 repeatedly\n    sum_of_digits = 19\n    \n    # 99-digit number implies \"928\" is repeated 33 times\n    repeats = 99 // 3\n    \n    # Total sum of all digits\n    total_sum = sum_of_digits * repeats\n    \n    # Find the remainder when total_sum is divided by 9\n    remainder = total_sum % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    op = symbols('op')\n    equation = Eq(op * 9 + 47 - op, 84 + 27)\n    \n    solved_op = solve(equation, op)\n    \n    return solved_op[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n\n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest_num = min(numbers, key=lambda num: abs(num - target))\n    return closest_num\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # The cost of one 'Sour Sweets' bar is 12p, and Eliot pays with three £1 coins, i.e., 300p.\n    # The cost of one 'Chocolate Drops' bar is 17p, and Maya pays with four £1 coins, i.e., 400p.\n    # Let's denote the number of bars each person bought as 'n' and\n    # 'change' as the amount of change they both receive.\n    # Equating their change:\n    # change = 300 - 12n = 400 - 17n\n    # Solving for 'n'\n    # 12n + 17n = 400 - 300\n    # n = (400 - 300) / (12 + 17)\n    \n    n = (400 - 300) // (12 + 17)\n    \n    return n\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [1, 3, 5, 7]\n    \n    # The smallest even number will end with a '0'\n    # Since we have the digits [1, 3, 5, 7], we can consider '0' as the last digit\n    # Now we find the smallest combination of the remaining three digits by sorting them\n    smallest_three_digits = sorted(digits)\n    \n    # Construct the smallest 4-digit number using the smallest digits found\n    smallest_number = smallest_three_digits[0] * 1000  # Thousands place\n    smallest_number += smallest_three_digits[1] * 100   # Hundreds place\n    smallest_number += smallest_three_digits[2] * 10    # Tens place\n    # Since we consider the last digit as '0', we do not need to add anything for the ones place\n    \n    return smallest_number\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    spent_on_cds = 75\n    remaining_after_cds = initial_money - spent_on_cds\n    spent_on_batteries = 1/4 * remaining_after_cds\n    remaining_after_batteries = remaining_after_cds - spent_on_batteries\n    condition = Eq(remaining_after_batteries, initial_money / 3)\n\n    solutions = solve(condition, initial_money)\n\n    return float(solutions[0])\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    return solutions[jackson] + 3\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66*2 + 66*3\n    equation2 = 66*5\n    return equation1 == equation2\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the price of one pork dumpling and one bun\n    dumpling, bun = symbols('dumpling bun')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(6 * dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * dumpling + 1 * bun, 41)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (dumpling, bun))\n\n    return solutions[dumpling]\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_price = 2.5\n    additional_price_per_km = 1.2\n    total_cost = 8.5\n    base_distance = 1.8\n\n    additional_cost = total_cost - base_price\n    additional_distance = additional_cost / additional_price_per_km\n\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    apples = 80\n    min_apples_per_student = 3\n    \n    # Since at least one student must get at least 3 apples,\n    # let's find the maximum number of students where one can\n    # receive 3 apples and the rest receive 1 apple each.\n    # This is the scenario where we have the largest class size.\n    \n    # The case where one student has 3 apples, the rest share the remaining,\n    # so we have 80 - 3 apples to distribute one per student.\n    class_size = (apples - 3) + 1  # +1 accounts for the student with 3 apples\n    \n    return class_size\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    x, y, z = symbols('x y z')\n\n    # Equation 1: sum of the three numbers is 56\n    eq1 = Eq(x + y + z, 56)\n\n    # Without loss of generality, let x <= y <= z\n    # Equation 2: average of the smallest two numbers is 14\n    eq2 = Eq((x + y) / 2, 14)\n\n    # Equation 3: average of the largest two numbers is 22\n    eq3 = Eq((y + z) / 2, 22)\n\n    # Solve the equations to find the values of x, y, z\n    solutions = solve((eq1, eq2, eq3), (x, y, z))\n\n    # The median is the number in the middle, which is y\n    median = solutions[y]\n\n    return median\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10 # total litres of orange juice\n    per_container = 2 # litres per container\n\n    # Calculate the number of containers needed\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    # Given data\n    boys = 36\n    girls = 12\n    big_car_capacity = 4\n    small_car_capacity = 2\n\n    # Calculating the number of cars needed for boys and girls\n    big_cars_needed = boys // big_car_capacity\n    small_cars_needed = girls // small_car_capacity\n\n    # Total number of cars\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received = 8\n    original = received * 2\n    return original\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces = 56\n    pounds_per_ounce = 1 / 16\n    kg_per_pound = 1 / 2.2\n\n    pounds = ounces * pounds_per_ounce\n    kilograms = pounds * kg_per_pound\n\n    return round(kilograms, 1)\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    current_sum_ages = 36 + 42 + 7\n    target_sum_ages = 100\n\n    years_needed = target_sum_ages - current_sum_ages\n\n    return years_needed\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]  # Assuming that there's only one solution.\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculate the sum of the ascending part\n    ascending_sum = sum(range(5, 81))\n    # Calculate the sum of the descending part, excluding 80 since it's not repeated\n    descending_sum = sum(range(5, 80))\n    # The final answer is the sum of both parts\n    ans = ascending_sum + descending_sum\n    return ans\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = (32 + 4) / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        A = (100 * perm[0] + 10 * perm[1] + perm[2]) + \\\n            (100 * perm[1] + 10 * perm[2] + perm[3]) + \\\n            (100 * perm[2] + 10 * perm[3] + perm[4]) + \\\n            (100 * perm[3] + 10 * perm[4] + perm[5]) + \\\n            (100 * perm[4] + 10 * perm[5] + perm[6]) + \\\n            (100 * perm[5] + 10 * perm[6] + perm[7]) + \\\n            (100 * perm[6] + 10 * perm[7] + perm[8])\n        max_A = max(max_A, A)\n    return max_A\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    total = 0\n    for i in range(3, 2013, 7):\n        total += 2019 / (i * (i + 7))\n    return total\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "def solution():\n    from math import factorial\n    \n    # There are 5 people to arrange, but A must be to the left of B and B must be to the left of C.\n    # If we consider A, B, and C as a single unit ABC, there are now 3 units to arrange (ABC, D, and E).\n    # We can arrange these 3 units in 3! ways.\n    units_ways = factorial(3)\n    \n    # Inside the ABC unit, A must be to the left of B, and B must be to the left of C.\n    # There's only 1 way to arrange A, B, and C in this way.\n    abc_ways = 1\n\n    # Considering the arrangements of ABC as a unit and the internal arrangement of ABC:\n    total_ways = units_ways * abc_ways\n\n    # Additionally, D and E could be arranged in 2! ways, regardless of the position of A, B, and C.\n    de_ways = factorial(2)\n\n    # Finally, multiply the ways to arrange units by the ways to arrange D and E.\n    ans = total_ways * de_ways\n\n    return ans\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Observing the pattern in puzzle:\n    # (A * B) = ((A - 1) ** 2)\n    # where A and B are the same two-digit number\n    # Applying this pattern to 55:\n    num = 55\n    return (num - 1) ** 2\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    red, yellow, blue = symbols('red yellow blue')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # Since the question requires to form three-digit numbers, \n    # the leading digit cannot be 0, leaving us with two choices: 2 or 3.\n\n    # For the second digit, we have all three choices (0, 2, 3)\n    \n    # For the third digit, we are left with two choices, \n    # because we cannot repeat the digit used in the first place. \n\n    # So, we have 2 options for the first digit, \n    # 3 options for the second digit, \n    # and 2 options for the third digit.\n    \n    ans = 2 * 3 * 2\n    return ans\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    total_score = 36 * 89\n    girls_total_score = girls * 88\n    boys_total_score = boys * 91\n    \n    equation = Eq(girls_total_score + boys_total_score, total_score)\n    \n    girls_count = solve(equation, girls)[0]\n    \n    return girls_count\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    total_work = 1\n    alice_work_per_day = 1 / 40\n    bob_work_per_day = 1 / 60\n    total_days = 27\n    alice_work_days = total_days\n\n    for days_off in range(total_days + 1):\n        alice_total_work = alice_work_per_day * (alice_work_days - days_off)\n        bob_total_work = bob_work_per_day * total_days\n        if alice_total_work + bob_total_work >= total_work:\n            return days_off\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples_of_6_and_9 = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples_of_6_and_9.append(i)\n    return multiples_of_6_and_9\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    perms = [''.join(p) for p in permutations('012345', 6)]\n    perms = sorted(set(perms))\n    return int(perms[504])\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, white, black = symbols('red white black')\n    \n    # Since the ratio of red to white balls is 1:2, we can say red = white/2\n    equation1 = Eq(red, white / 2)\n    \n    # Since the ratio of white to black balls is 3:4, we can say white = (3/4)*black\n    equation2 = Eq(white, 3 * black / 4)\n    \n    # The total number of balls is the sum of red, white and black balls which is equal to 136\n    equation3 = Eq(red + white + black, 136)\n    \n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n    \n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    a7 = 105  # 7th term\n    a8 = 120  # 8th term\n    a9 = 135  # 9th term\n    \n    # Calculate common difference\n    d = a8 - a7  # or a9 - a8, both will give the same result\n    \n    # Calculate the first term using the 7th term\n    a1 = a7 - (7 - 1) * d\n    \n    # Calculate the 100th term now\n    a100 = a1 + (100 - 1) * d\n    \n    return a100\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Worst case is you take one of each color each time,\n    # so to be sure to have at least one matching pair,\n    # you need to take out 1 more than the number of different colors of socks.\n    number_of_colors = 2\n    min_socks_to_take = number_of_colors + 1\n    return min_socks_to_take\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    combined_age_now = combined_age_4_years_ago + 3 * 4  # Adding 4 years for each dog\n    combined_age_in_2_years = combined_age_now + 3 * 2  # Adding 2 years for each dog\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = 4**2 / 2\n    return int(n)\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # Original ratio\n    equation1 = Eq(ryan / audrey, 2 / 7)\n    \n    # After buying and giving away marbles\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minutes = 30\n    \n    # Calculate the angle of the hour hand from 12:00\n    hour_angle = (hour % 12) * 30 + (minutes / 60) * 30\n    \n    # Calculate the angle of the minute hand from 12:00\n    minute_angle = minutes * 6\n    \n    # Calculate the difference between the two angles\n    angle = abs(hour_angle - minute_angle)\n    \n    # The angle should be the smaller angle between the two hands\n    angle = min(angle, 360 - angle)\n    \n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4  # 5 apples each for four sisters\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n\n    total_students = piano_only + violin_only + both\n\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2 # black, white, red\n    full_patterns = total_beads // pattern_length\n    remaining_beads = total_beads % pattern_length\n    total_black_beads = full_patterns * (3 + 3) # black beads in a full pattern\n    \n    if remaining_beads > 3:\n        total_black_beads += 3\n    else:\n        total_black_beads += remaining_beads\n        \n    return total_black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27  # Sum of all required minutes for activities\n\n    school_arrival_time = datetime.strptime(\"7:45 AM\", \"%I:%M %p\")\n    \n    wake_up_time = school_arrival_time - timedelta(minutes=total_minutes)\n\n    return wake_up_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    sum_positive = sum(range(1, 61, 4)) + sum(range(2, 61, 4))\n    sum_negative = sum(range(3, 61, 4)) + sum(range(4, 61, 4))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    for chickens in range(52):\n        ducks = chickens\n        cows = 51 - chickens - ducks\n        if 2 * chickens + 2 * ducks + 4 * cows == 160:\n            return chickens\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                total = c1 + c2 + c3\n                totals.add(total)\n\n    return len(totals)\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice / 5\n    abigail_drank = 200\n    anna_drank = 120\n    \n    juice_left = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n    \n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # in nautical miles\n    time_days = 13\n    time_hours = 22\n    total_time_hours = time_days * 24 + time_hours  # convert days to hours and add the remaining hours\n\n    average_speed = total_distance / total_time_hours  # calculate average speed in nautical miles per hour\n\n    return round(average_speed)  # round to the nearest integer\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    entrances = [1, 2, 3, 4]\n    people = ['Joe', 'Mike', 'Tina']\n    valid_entries = []\n\n    for perm in permutations(entrances, len(people)):\n        for joe_entrance in perm:\n            for mike_entrance in perm:\n                for tina_entrance in perm:\n                    if joe_entrance != mike_entrance:\n                        valid_entries.append((joe_entrance, mike_entrance, tina_entrance))\n\n    # Remove duplicates since order of entry is not important\n    valid_entries_set = set(valid_entries)\n\n    return len(valid_entries_set)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # liters\n    concentration1 = 0.40  # 40%\n\n    volume2 = 3  # liters\n    concentration2 = 0.70  # 70%\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    new_concentration = total_juice / total_volume\n\n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let w be the initial number of women, m be the initial number of men.\n    w, m = symbols('w m')\n\n    # After first bus, number of women is w - 36\n    # After first bus, this number of women becomes 3/5 of men: w - 36 = (3/5) * m\n    equation1 = Eq(w - 36, (3/5) * m)\n\n    # After second bus, number of men becomes m - 48 and is equal to the number of women after first bus\n    # m - 48 = w - 36\n    equation2 = Eq(m - 48, w - 36)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, m))\n\n    # The total number of people initially at the bus stop is the sum of initial women and men\n    total_people = solutions[w] + solutions[m]\n\n    return total_people\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    starting_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away_again = 777\n\n    stamps_left = (starting_stamps - gave_to_sister + bought_stamps - gave_away_again)\n\n    return stamps_left\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n\n    # Albert is directly behind Bella, so we don't count him separately\n    total_people = people_in_front_of_bella + people_behind_albert + 2  # Bella and Albert\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    return sum(numbers)\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import isprime\n\n    for number in range(20, 31):\n        if isprime(number):\n            return number\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Fatouma's current age as 'f'.\n    f = symbols('f')\n\n    # We construct the equation based on the given information.\n    # In two years' time Fatouma's age will be (f + 2).\n    # Five years ago, Fatouma's age was (f - 5).\n    # According to Fatouma, (f + 2) is twice the age she was five years ago (2 * (f - 5)).\n    equation = Eq(f + 2, 2 * (f - 5))\n\n    # Now we solve the equation for 'f' to find Fatouma's current age.\n    solution = solve(equation, f)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "from itertools import combinations\n\ndef solution():\n    ans = []\n    for combo in combinations(range(1, 14), 3):\n        if sum(combo) == 14 and len(set(combo)) == 3:\n            ans.append(combo)\n    return ans\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = (1 * 3 * 8) + (2 * 6 * 16) + (3 * 9 * 24)\n    denominator = (1 * 2 * 4) + (2 * 4 * 8) + (3 * 6 * 12)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) + 1   # first multiple of 11 after 50\n    last_multiple = 150 // 11         # last multiple of 11 before 150\n\n    count = last_multiple - first_multiple + 1\n\n    return count\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    # Total number of different heights possible\n    total_heights = 132 - 124 + 1  # inclusive of 132 and 124\n\n    # If at least 4 students are of the same height (using Pigeonhole Principle)\n    # class size = 3 (pigeons) * number of heights (pigeonholes) + 1\n    class_size = 3 * total_heights + 1\n\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 50\n    amount_paid = 5 * 100 # Convert pounds to pence\n    change = amount_paid - total_cost\n    return change / 100 # Convert pence back to pounds\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solutions = solve(equation)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # Winning positions are when the number of oranges is not a multiple of 4.\n    # To make sure to win, Fred needs to take oranges so that the number of oranges\n    # left is a multiple of 4 after his turn.\n    # 15 is not a multiple of 4, but 12 is the closest multiple of 4.\n    # So Fred needs to take: 15 - 12 = 3 oranges.\n    return 3\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    cooking_duration = timedelta(hours=1, minutes=25)\n    ready_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    start_time = ready_time - cooking_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    # Total students in individual competitions\n    go_students = 42\n    checkers_students = 55\n    chess_students = 33\n\n    # Students in multiple competitions\n    go_checkers_students = 18\n    go_chess_students = 10\n    checkers_chess_students = 9\n\n    # Students in all three competitions\n    all_three_students = 5\n\n    # Using the Inclusion-Exclusion Principle for three sets\n    total_students = (go_students + checkers_students + chess_students\n                      - go_checkers_students - go_chess_students - checkers_chess_students\n                      + all_three_students)\n\n    return total_students\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n\n    total_cost = tickets * cost_per_ticket\n\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3\n\n    total_distance = (num_poles - 1) * distance_between_poles\n\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    p = 1\n    cube_root = 245 ** (1/3)\n    \n    while not cube_root.is_integer():\n        p += 1\n        cube_root = (245 * p) ** (1/3)\n    \n    return p\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_to_meters = 736 / 100\n    return cm_to_meters\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum([i * (-1)**(i % 2) for i in range(64, 45, -2)])\n    return ans\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    E, S, A, M, O = symbols('E S A M O')\n    S, A, S, M, O = symbols('S A S M O', integer=True)  # redefining variables as integers\n    digits = range(10)\n\n    # Solving the equation assuming all the letters are different digits\n    equation = Eq(E*1000 + S*100 + S*10 + E + 2018, S*10000 + A*1000 + S*100 + M*10 + O)\n\n    # Trying all combinations of digits\n    for e in digits:\n        for s in digits:\n            for a in digits:\n                for m in digits:\n                    for o in digits:\n                        if len(set([e, s, a, m, o])) == 5:  # Make sure all digits are different\n                            temp_sol = solve((equation.subs(E, e).subs(S, s).subs(A, a).subs(M, m).subs(O, o)), (S, A, S, M, O))\n                            if temp_sol:\n                                return sum(temp_sol.values())\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year = 36000\n    last_year_min = this_year * 1/4\n    last_year = last_year_min + 1\n    return last_year\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    present_students = total_students - 1 - 1\n\n    attendance_rate = (present_students / total_students) * 100\n\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    return 8 * (15/5)\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    sum_of_series = sum([(i-1)/i for i in range(2, 2018)])\n    return sum_of_series\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 270 * 0.30\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    original_ratio = Eq(apples / oranges, 3/8)\n    new_ratio = Eq((apples - 1) / oranges, 1/3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Calculate the difference in ages.\n    age_diff = 26 - 20\n    \n    # Calculate how many years later their sum will be 48.\n    years_later = (48 - (20 + 26)) // 2\n    \n    # Add the age difference to get the sum of age 48.\n    years_later += age_diff\n\n    return years_later\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(x - 100))\n    return closest_number\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Given Tim's positions:\n    # 4th from front to back -> there are 3 people in front of him\n    # 3rd from back to front -> there are 2 people behind him\n    # 1st from left to right -> he is at the leftmost position\n    # 4th from right to left -> there are 3 people to his right\n    \n    # Calculate the total number of rows: 3 (in front of Tim) + 1 (Tim) + 2 (behind Tim)\n    rows = 3 + 1 + 2\n    # Calculate the total number of columns: 1 (Tim's position) + 3 (to his right)\n    columns = 1 + 3\n\n    # Total number of band members is rows multiplied by columns\n    total_members = rows * columns\n\n    return total_members\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    total_amount = 150\n    daily_savings = 2.40\n\n    days_needed = total_amount / daily_savings\n    weeks_needed = days_needed / 7\n\n    return int(weeks_needed) if weeks_needed.is_integer() else int(weeks_needed) + 1\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    initial_sum = sum(range(1, 15))\n    final_sum = initial_sum + 2019\n\n    for i in range(1, final_sum // 8):\n        if sum(range(i, i + 8)) == final_sum:\n            return i\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    mixed_number = 6 + 1/2\n    fraction = 1/4\n    ans = mixed_number / fraction\n    return ans\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weights of one rabbit (r), one chicken (c), and one kangaroo (k)\n    r, c, k = symbols('r c k')\n\n    # Given equation: 2 rabbits = 6 chickens -> 2r = 6c -> r = 3c\n    equation1 = Eq(2 * r, 6 * c)\n\n    # Given equation: 3 kangaroos = 4 rabbits -> 3k = 4r\n    equation2 = Eq(3 * k, 4 * r)\n\n    # Solve the equations to find the relationship between kangaroos and chickens\n    solutions = solve((equation1, equation2), (r, c, k))\n\n    # One kangaroo in terms of chickens\n    kangaroo_in_chickens = solutions[k] / solutions[c]\n\n    return kangaroo_in_chickens\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_perms = factorial(len(word))\n    divisor = 1\n    for count in letter_counts.values():\n        divisor *= factorial(count)\n    return total_perms // divisor\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # Time taken for each task\n    cut_wood_time = 3\n    weave_grass_time = 1\n    dry_wood_time = 5\n    mow_grass_time = 1\n    prepare_food_time = 1\n    soak_grass_time = 1\n    choose_wood_time = 1\n\n    # Tasks that can be performed simultaneously\n    simultaneous_tasks = [cut_wood_time + choose_wood_time + dry_wood_time, # Choosing and cutting wood, then drying it\n                          mow_grass_time + soak_grass_time + weave_grass_time] # Mowing, soaking, and weaving grass\n\n    # Maximum time taken for simultaneous tasks\n    max_simultaneous_time = max(simultaneous_tasks)\n\n    # Total preparation time is the longest task plus the time to prepare food\n    total_time = max_simultaneous_time + prepare_food_time\n\n    return total_time\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    multiplication_result = common_factor * (836 + 162 + 2)\n    return multiplication_result\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n    num_notes = total_amount / note_value\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is in the middle and also the 7th from the front.\n    # This means there are 6 positions in front of her,\n    # and since she's in the middle, there must also be 6 positions behind her.\n    # Total dwarves = positions in front + positions behind\n    total_dwarves = 6 + 6\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    # To guarantee that the school with the most participants had at least 4 participants,\n    # each school must have 3 participants at most to avoid being the school with 4.\n    # Use the pigeonhole principle, with each pigeonhole being a school.\n    # To find the maximum number of schools, divide the total number of participants\n    # by 3 and round up, because if we have a remainder, we would still need an\n    # additional school to accommodate those participants.\n    max_schools = -(-participants // 3)  # Ceiling division\n\n    return max_schools\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "网络故障，请重试"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n    \n    # Number of terms in arithmetic sequence: n = (last_term - first_term) / difference + 1\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Sum of arithmetic sequence: sum = n/2 * (first_term + last_term)\n    ans = num_terms / 2 * (first_term + last_term)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    sum_frac_parts = 0\n    for i in range(1, 2019):\n        frac_part = (2018 + i) / 5 - int((2018 + i) / 5)\n        sum_frac_parts += frac_part\n\n    return sum_frac_parts\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for num in range(1000, 10000):\n        if (num % 6 == 0) and ((num // 6) ** 0.5).is_integer():\n            if (num * 6) ** (1/3) % 1 == 0:\n                return num\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    faster_speed = 48\n    slower_speed = 36\n    speed_difference = faster_speed - slower_speed\n\n    extra_distance = 70\n    time_taken = extra_distance / speed_difference\n    \n    distance_faster = faster_speed * time_taken\n    distance_slower = slower_speed * time_taken\n\n    total_distance = distance_faster + distance_slower\n\n    return total_distance\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Since Tim is 4th from the front and 3rd from the back,\n    # there must be 4 - 1 people in front of him and 3 - 1 people behind him.\n    # That means there are a total of (4 - 1) + 1 + (3 - 1) people in the vertical line.\n    vertical_lines = (4 - 1) + 1 + (3 - 1)\n\n    # Similarly, Tim is 4th from the left and 7th from the right,\n    # hence there are 4 - 1 people to his left and 7 - 1 people to his right.\n    # That means there are (4 - 1) + 1 + (7 - 1) people in the horizontal line.\n    horizontal_lines = (4 - 1) + 1 + (7 - 1)\n\n    # The total number of band members is the product of the number of people\n    # in the vertical line times the number of people in the horizontal line.\n    total_band_members = vertical_lines * horizontal_lines\n\n    return total_band_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import gcd\n\ndef lcm(x, y):\n    return (x * y) // gcd(x, y)\n\ndef solution():\n    numbers = [2, 3, 8]\n    common_lcm = lcm(numbers[0], numbers[1])\n    for i in range(2, len(numbers)):\n        common_lcm = lcm(common_lcm, numbers[i])\n    return common_lcm\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    number = 1\n    while True:\n        if number % 4 == 3 and number % 7 == 1 and number % 9 == 5:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amounts = set()\n\n    # Brother could have any amount from 0 to (total_amount - 1) // 2, \n    # as Zoey should have twice as much.\n    for brother_amount in range((total_amount - 1) // 2 + 1):\n        brother_amounts.add(brother_amount)\n\n    # Find out what Zoey ends up with after losing each coin and \n    # check if it's twice as much as one of the possible brother's amounts.\n    for coin in [50, 20, 10, 5]:\n        if (total_amount - coin) // 2 in brother_amounts:\n            lost_coin = coin\n            break\n\n    return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (4/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Total chocolates is unknown (t)\n    # Number of friends is unknown (f)\n    t, f = symbols('t f')\n\n    # If Natalia gives each friend 18 pieces of chocolate, she has 41 pieces left.\n    equation1 = Eq(t, 18 * f + 41)\n\n    # If she gives each friend 23 pieces, she is short of 34 pieces.\n    equation2 = Eq(t + 34, 23 * f)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, f))\n\n    # Get the total number of chocolates (t)\n    total_chocolates = solutions[t]\n\n    # If she gives each friend 20 pieces, calculate leftovers\n    leftovers = total_chocolates - 20 * solutions[f]\n\n    return leftovers\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed fractions to improper fractions\n    num1 = 3 + Fraction(5, 9)\n    num2 = 6 + Fraction(4, 9)\n\n    # Add the two numbers\n    result = num1 + num2\n\n    # Simplify the result\n    simplified_result = result.limit_denominator()  # This step is optional as the result is already in the simplest form\n\n    return simplified_result\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    # Let x be the number of students and y be the number of boats originally.\n    # From the problem statement, we have two equations:\n    # (y + 1) * 6 = x (Each boat holds exactly 6 people if one boat is added)\n    # (y - 1) * 9 = x (Each boat holds exactly 9 people if one boat is subtracted)\n    \n    # Thus, we can solve these equations as follow:\n    for y in range(1, 100):  # Assume a reasonable upper limit for the number of boats.\n        if (y + 1) * 6 == (y - 1) * 9:\n            x = (y + 1) * 6  # Calculate the number of students using either equation.\n            return x\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(chai_seng, rasidah + 48)\n    \n    # Rasidah spent 3/5 of her money\n    rasidah_spent = rasidah * (3/5)\n    \n    # Chai Seng spent 6/7 of his money\n    chai_seng_spent = chai_seng * (6/7)\n    \n    # Remaining balances\n    rasidah_left = rasidah - rasidah_spent\n    chai_seng_left = chai_seng - chai_seng_spent\n    \n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, rasidah_left / 2)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    # Amount of money Rasidah had at first\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    # All possible digits for the number in increasing order\n    for th in range(1, 10):   # Thousands digit must be between 1 and 9\n        for h in range(th, 10):  # Hundreds\n            for t in range(h, 10):  # Tens\n                # Calculate ones digit based on the condition\n                o = th + h + t\n                # Ensure that the ones digit is still a single digit and check if the sum is 16\n                if o < 10 and th + h + t + o == 16:\n                    return o\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    two_digit_numbers = set()\n\n    # Two loops to form two-digit numbers\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != '0':  # The first digit cannot be 0 for a two-digit number\n                two_digit_numbers.add(d1 + d2)\n                \n    ans = len(two_digit_numbers)\n    return ans\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007) ** 2\n    return ans\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    pair_count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                pair_count += 1\n    return pair_count\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6, 8]\n    max_num = 0\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 4 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance based on her uphill journey\n    uphill_distance = 3 * 5  # hours * mph\n    \n    # Calculate the distance based on her downhill journey\n    downhill_distance = 2 * 10  # hours * mph\n    \n    # Since the distance uphill and downhill is the same, we take either\n    total_distance = uphill_distance + downhill_distance\n    \n    # Total time taken for both parts of the trip\n    total_time = 3 + 2  # hours\n    \n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Initial charge variables\n    base_rate = 2\n    additional_rate = 1\n    service_fee = 3\n    total_amount = 63\n    \n    # Calculate the cost of the first 5 kWh\n    base_cost = 5 * base_rate\n    \n    # calculate the remaining amount after the base cost and fixed service fee\n    remaining_amount = total_amount - base_cost - service_fee\n    \n    # Calculate additional kWh used\n    additional_kWh = remaining_amount / additional_rate\n    \n    # Total kWh\n    total_kWh = 5 + additional_kWh\n\n    return total_kWh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    ans = 54 / (63 / 7)\n    return ans\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    final_value_rounded = round(final_value, 1)\n\n    return final_value_rounded\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    A = B = 0\n    for x in range(1, 10):\n        for y in range(10):\n            A = x * 10 + y\n            B = 400 + 10 * x + y\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    from sympy import primefactors\n\n    # Factorize 4320 to find its prime factors\n    factors_4320 = primefactors(4320)\n\n    # Factorize (3/2)^n for all integer values of n can only contribute a factor of 3\n    factors_3_over_2 = [3]\n\n    # Count the factors of 3 in 4320\n    count_3_in_4320 = 0\n    for factor in factors_4320:\n        while factor % 3 == 0 and factor > 1:\n            count_3_in_4320 += 1\n            factor /= 3\n\n    # The maximum power of (3/2) that 4320 can be multiplied by to remain an integer is\n    # determined by the number of times 3 appears in its prime factors\n    ans = count_3_in_4320\n\n    return ans\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    cookies_per_small_box = 600\n\n    small_boxes_needed = total_cookies // cookies_per_small_box\n    if total_cookies % cookies_per_small_box != 0:\n        small_boxes_needed += 1\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # From the given information\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    at_least_one_pass = 43\n\n    # Using the inclusion-exclusion principle: n(A ∪ B ∪ C) = n(A) + n(B) + n(C) - n(A ∩ B) - n(A ∩ C) - n(B ∩ C) + n(A ∩ B ∩ C)\n    # Since we want the maximum number of pupils that could have possibly passed all three, we need to minimize the number of pupils\n    # passing two tests. This can be achieved if all pupils who passed Science and English also passed Math, which is the larger set\n    # considering 30 pupils passed Math, and 25+28 = 53 pupils passed Science and English together.\n\n    # Minimizing n(A ∩ B) + n(A ∩ C) + n(B ∩ C): assume that these intersections are the same pupils, so count them only once instead of twice.\n    min_two_tests_pass = math_pass - (at_least_one_pass - math_pass)\n\n    # Since we've already accounted for those pupils passing two tests once, the count for n(A ∩ B ∩ C) will not subtract them again.\n    # Hence, n(A ∩ B ∩ C) = n(A) + n(B) + n(C) - at_least_one_pass\n    pupils_pass_all_three = math_pass + science_pass + english_pass - at_least_one_pass\n\n    # However, if our calculated passed all three tests is less than the max two tests pass, we have some students being counted more than once\n    # in the two test pass group, which is not allowed and should be adjusted.\n    if pupils_pass_all_three < min_two_tests_pass:\n        pupils_pass_all_three = min_two_tests_pass\n\n    return pupils_pass_all_three\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    juice_in_first_punch = 20 * 0.35\n    juice_in_second_punch = 30 * 0.60\n    total_juice = juice_in_first_punch + juice_in_second_punch\n    concentration = (total_juice / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of grain originally in warehouse B be x tons\n    warehouse_b_original = symbols('x')\n\n    # Write the equation based on the description:\n    # warehouse A had 50 tons, 12 tons were added, and now has 2 times the grain of warehouse B after it shipped out 16 tons\n    equation = Eq(50 + 12, 2 * (warehouse_b_original - 16))\n\n    # Solve the equation to find the original amount in warehouse B\n    solution_b_original = solve(equation, warehouse_b_original)\n\n    return solution_b_original[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    # Given that we are looking for a prime number in a sequence of primes\n    primes = [29, 31, 41, 43]\n    \n    # Prime numbers are separated by even gaps except for 2 and 3\n    # In this case, since we have an increasing list of primes, we can assume the pattern continues\n    # The missing prime should be two numbers after 31 and two numbers before 41\n    # Therefore, the missing number is 31 + 2*2 = 35 + 2 = 37, which is a prime\n    missing_prime = 31 + (41 - 31) // 2\n \n    return missing_prime\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n    \n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = 'COLLEGE'\n    letter_freq = {letter: word.count(letter) for letter in set(word)}\n    ways = factorial(len(word))\n\n    for freq in letter_freq.values():\n        ways //= factorial(freq)\n\n    return ways\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    fish_for_rabbit = 3  # Owen gives 3 fishes for 1 rabbit\n    rabbit_for_wheat = 2 / 3  # Oscar trades 2 rabbits for 3 packs of wheat\n\n    # Calculate how many fishes are needed for 1 pack of wheat\n    fish_for_wheat = fish_for_rabbit * rabbit_for_wheat\n\n    return fish_for_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 1000):  # Assuming a reasonable upper limit for number of people\n        benches_when_3_per_bench = people // 3\n        extra_people_when_3_per_bench = people % 3\n\n        benches_when_7_per_bench = people // 7\n        extra_benches_when_7_per_bench = people % 7\n\n        if extra_people_when_3_per_bench == 7 and extra_benches_when_7_per_bench == 3 * 7:\n            return people\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    for pencils in range(400, 501):\n        if pencils % 4 == 1 and pencils % 5 == 2 and pencils % 7 == 4:\n            return pencils\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10):\n            for x3 in range(10):\n                if x1 + x2 + x3 == 9:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio1 = 2\n    ratio2 = 3\n    larger_share = (ratio2 / (ratio1 + ratio2)) * total_amount\n    return larger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    mass_full, mass_empty = symbols('mass_full mass_empty')\n    equation1 = Eq((5/6) * mass_full + mass_empty, 4.6)\n    equation2 = Eq((2/3) * mass_full + mass_empty, 4.45)\n\n    solutions = solve((equation1, equation2), (mass_full, mass_empty))\n\n    mass_empty_grams = solutions[mass_empty] * 1000  # convert kg to grams\n\n    return mass_empty_grams\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(1, 5):  # hundreds place can't be 0 and sum is 5, max digit is 4\n        for j in range(0, 5):  # tens place can be 0 but sum of all is 5\n            for k in range(1, 10, 2):  # ones place has to be odd, so 1, 3, 5, 7, or 9\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fav_number = symbols('fav_number')\n    equation = Eq(fav_number * 2 - 3, 19)\n    solution = solve(equation, fav_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    return 123 * 321\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    \n    # After transfer, each room will have half the total number of pupils\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 0\n    num_pages = 0\n\n    while total_digits < 1101:\n        num_pages += 1\n        digits_in_page = len(str(num_pages))\n        total_digits += digits_in_page\n\n    # Since the last page would have gone over the limit, subtract one page\n    if total_digits > 1101:\n        num_pages -= 1\n\n    return num_pages\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 21)])\n    return ans\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    \n    total = ginnie + lyn\n    return total\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    n = 1\n    while True:\n        term = n*(n+1)//2\n        if term >= 100:\n            break\n        n += 1\n    # The largest two-digit number is the previous term in the sequence\n    ans = (n-1)*n//2\n    return ans\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's as B, and Carl's as C.\n    # According to the problem, we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    \n    # Sum all equations:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n    # 2*A + 2*B + 2*C = 292\n    # Sum of weights is therefore 292 / 2 because each person is counted twice.\n    total_weight = 292 / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_cost = 23\n    book_cost = 3.40\n    magazine_cost = 1.60\n\n    max_books = int(total_cost / book_cost)\n    for books in range(max_books + 1):\n        for magazines in range(int(total_cost / magazine_cost) + 1):\n            if books * book_cost + magazines * magazine_cost == total_cost:\n                return magazines\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_given_notebooks = 38\n    # Let's assume Andy's sister has X notebooks.\n    # Equation would be: Andy - 38 = Sister + 38\n    # Where Sister is X and Andy is 149\n    sister_notebooks = andy_notebooks - 2 * sister_given_notebooks\n    return sister_notebooks\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    sum_of_sequence = n * (n + 1) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n    \n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if i % 7 == 0 and 7007 % i == 0:\n            factors.append(i)\n            # Since we are looking for only two 2-digit multiples,\n            # we break when we find two such factors.\n            if len(factors) == 2:\n                break\n    sum_of_factors = sum(factors)\n    return sum_of_factors\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    # Calculate the sum of fractions inside the brackets\n    bracket_sum = (5/8) + (1/17)\n    # Multiply the result of the sum by 8\n    product = bracket_sum * 8\n    # Add the remaining fraction to the result of the multiplication\n    result = product + (9/17)\n    # Returning the final result\n    return result\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age is less than 100\n        if int(str(age) + '0', base=3) == age:\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Given ratio for orchids:tulips\n    equation1 = Eq(orchids, 3/5 * tulips)\n\n    # The total number of flowers is 3616\n    equation2 = Eq(orchids + tulips + roses, 3616)\n\n    # Flowers left after selling\n    # Sold 40% orchids, 1/5 tulips and 25% roses\n    # Left = Total - Sold\n    equation3 = Eq((orchids - 0.4 * orchids) + (tulips - tulips/5) + (roses - 0.25 * roses), 2644)\n\n    # Solving the equations to find the number of orchids, tulips and roses initially\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    factorial = 1\n    for i in range(1, 7):\n        factorial *= i\n    return factorial\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for prime1 in range(2, 55):\n        prime2 = 55 - prime1\n        if is_prime(prime1) and is_prime(prime2):\n            return prime1 * prime2\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variables\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Set up the system of equations based on the given information\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the system of equations for the price of one basketball and one volleyball\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    # Return the price of one volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    ans = None\n    \n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                if len({2, 0, A, M, C, 1, 9}) == 7:  # Ensure all digits are different\n                    number = 20000000 + A*1000000 + M*100000 + C*1000 + 190\n                    if number % 9 == 0:  # Check divisibility by 9\n                        sum_digits = 2 + 0 + A + M + C + 1 + 9\n                        if sum_digits % 9 == 0:  # The sum of the digits must be divisible by 9\n                            ans = A + M + C\n                            return ans\n    return ans\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variables\n    A, B, C = symbols('A B C')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n    \n    # Solve the system of equations for the variables\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Extract the value of B\n    return solutions[B]\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Let's assume the cost of 1 piece of chocolate cake is 'x'\n    # and the cost of 1 piece of cheesecake is 'y'.\n    # According to the problem:\n    # 3x = 2y and 3y = 5 * 9 (since 1 cookie costs $9)\n    # We can solve this system of equations for x.\n\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n\n    equation1 = Eq(3*x, 2*y)\n    equation2 = Eq(3*y, 5*9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    total_candy = 36\n    candy_difference = 22 - 6 # The difference in candies left after eating the same amount\n\n    # Total candy minus Mike and Valeria's candies after eating the same amount\n    candy_shared = total_candy - (6 + 22)\n\n    # Since they eat the same amount, Valeria's current candy minus the shared amount minus difference\n    # should equal to Mike's current candy\n    # Valeria's current candy is (candy_shared // 2) + candy_difference\n    valerias_candy = (candy_shared // 2) + candy_difference\n\n    return valerias_candy\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 / (2 * 7)\n    return int(n)\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n\n    # When Melissa was 8, her mother was 32, meaning the age difference is 24 years.\n    age_difference = 32 - 8 \n    \n    # Now, Melissa's mother is three times as old as Melissa.\n    equation = Eq(mother_now, 3 * melissa_now)\n\n    # The difference in age still remains 24 years.\n    equation_age_difference = Eq(mother_now - melissa_now, age_difference)\n\n    # Solve the system of equations to find Melissa's current age.\n    solutions = solve((equation, equation_age_difference), (melissa_now, mother_now))\n\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert recurring decimals to fraction\n    recurring_decimal = 4 + Fraction(73, 99)\n    \n    # Non-recurring decimals are kept as is (as floats for comparison)\n    non_recurring_1 = 4.73\n    non_recurring_2 = 4.77\n    non_recurring_3 = 4.737\n    \n    # Find the smallest one by comparing them\n    smallest = min(recurring_decimal, non_recurring_1, non_recurring_2, non_recurring_3)\n\n    return float(smallest)\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants_after_joel = 4\n\n    # Joel removes 2 less than half, so before Joel removed the plants\n    plants_before_joel = (remaining_plants_after_joel + 2) * 2\n\n    # Valerie removes 3 less than half, so before Valerie removed the plants\n    plants_before_valerie = (plants_before_joel + 3) * 2\n\n    # Ethan removes 1 less than half, so before Ethan removed the plants\n    initial_plants = (plants_before_valerie + 1) * 2\n\n    return initial_plants\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # Since 6/7 = 0.857142 repeated endlessly, identifying the repeating part is key\n    repeating_sequence = [8, 5, 7, 1, 4, 2]\n\n    # The sum of the first 58 digits after decimal point can be calculated\n    # by finding the sum of the sequence repeated several times until reaching 58 digits\n    sum_repeating_sequence = sum(repeating_sequence)\n    \n    # Calculate how many complete sets of the sequence fit within 58 digits\n    complete_sets = 58 // len(repeating_sequence)\n    \n    # Calculate the remaining digits after accounting for the complete sets\n    remaining_digits = 58 % len(repeating_sequence)\n    \n    # Calculate the total sum of the full repeating sets\n    sum_full_sets = sum_repeating_sequence * complete_sets\n    \n    # Calculate the sum of the remaining digits\n    sum_remaining_digits = sum(repeating_sequence[:remaining_digits])\n    \n    # Final sum is the sum of the full sets and the remaining digits\n    ans = sum_full_sets + sum_remaining_digits\n    \n    return ans\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n\n    distance = train_length + tunnel_length\n    time = distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    sold_second_batch = (remaining_eggs * 2) + 7\n    remaining_after_first_sale = remaining_eggs + sold_second_batch\n    total_eggs = (remaining_after_first_sale * 2) - 16\n\n    return total_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33+29+34+28+27+30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    final_price = 21\n    increase_percentage = 0.40\n    original_price = final_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p1 be the number of P1 students and p6 be the number of P6 students\n    p1, p6 = symbols('p1 p6')\n\n    # Equation representing the total number of students\n    equation1 = Eq(p1 + p6, 120)\n\n    # Equation representing the total number of buckets of water carried.\n    # Each P6 carried 2 buckets, and every 2 P1 students carried 1 bucket.\n    equation2 = Eq(2 * p6 + (1/2) * p1, 180)\n\n    # Solving the system of equations for p1 and p6\n    solutions = solve((equation1, equation2), (p1, p6))\n\n    # Returning the number of P1 students\n    return solutions[p1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    # There are two possible outcomes for each coin toss: heads or tails.\n    # When we toss a coin two times, there are 2 outcomes for the first toss,\n    # and for each outcome of the first toss, there are 2 outcomes for the second toss.\n    # Therefore, the total number of possible outcomes is the product of the number of outcomes per toss.\n    \n    outcomes_per_toss = 2\n    total_tosses = 2\n    total_outcomes = outcomes_per_toss ** total_tosses\n    \n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the length of the segment PA\n    x = symbols('x')\n    # Let s be the side length of the cube\n    s = symbols('s')\n    \n    # From PB, PC, PD, and PG we get the following equations\n    # x^2 + s^2 = (60√10)^2\n    # x^2 + s^2 + s^2 = (60√5)^2\n    # x^2 + 2s^2 = (120√2)^2\n    # x^2 + 3s^2 = (36√7)^2\n    \n    # Set up the equations\n    eq1 = Eq(x**2 + s**2, 60**2 * 10)\n    eq2 = Eq(x**2 + 2 * s**2, 60**2 * 5)\n    eq3 = Eq(x**2 + 3 * s**2, 36**2 * 7)\n    \n    # Solve the system of equations for x and s\n    solutions = solve((eq1, eq2, eq3), (x, s))\n    \n    # There will be two solutions (positive and negative) for x, we only need the positive one\n    ans = max(solutions[x])\n    \n    return ans\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "from math import gcd\n\ndef solution():\n    pencils = 55\n    pens = 143\n    gcf = gcd(pencils, pens)\n    return gcf\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # ratio of fish to rabbit\n    fish_to_rabbit = 3 / 1\n    \n    # ratio of rabbits to packs of wheat\n    rabbit_to_wheat = 1 / (3 / 2)\n    \n    # combined ratio of fish to packs of wheat\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n    \n    return fish_to_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # The correct calculation\n    correct_solution = quotient * divisor + remainder\n\n    # Johnny’s calculation\n    johnnys_solution = quotient * remainder + divisor\n\n    # Check if Johnny's solution is correct\n    if correct_solution == johnnys_solution:\n        is_correct = True\n    else:\n        is_correct = False\n\n    # If incorrect, return the correct solution\n    if not is_correct:\n        correct_working = f\"{quotient} * {divisor} + {remainder} = {correct_solution}\"\n    else:\n        correct_working = \"Johnny's answer was correct.\"\n\n    return (is_correct, correct_working)\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n    ans = len(ways)\n    return ans, ways\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes_needed = 66.5 / apples_per_box\n    return int(total_boxes_needed) if total_boxes_needed.is_integer() else int(total_boxes_needed) + 1\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = ['2', '7', '9']\n    primes_found = set()\n\n    for i in range(1, 4):  # Length of numbers from 1 to 3\n        for p in permutations(digits, i):\n            num = int(''.join(p))\n            if isprime(num) and num < 100:\n                primes_found.add(num)\n\n    return len(primes_found)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n    denominator = (Fraction(62, 75) - 0.16)\n    first_division = numerator / denominator\n\n    second_numerator = (3.5 + Fraction(14, 3) + Fraction(32, 15))\n    second_denominator = (0.5 * (Fraction(21, 20) + 4.1))\n    second_division = second_numerator / second_denominator\n\n    answer = first_division / second_division\n\n    return float(answer)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of students in the canteen at first\n    # Let g be the number of girls in the canteen now\n    x, g = symbols('x g')\n\n    # Equation representing 40% of the students being boys at first\n    equation1 = Eq(0.4 * x, x - g)\n    \n    # Equation representing the change when 16 boys left and 16 girls entered\n    equation2 = Eq((0.4 * x - 16) / (x + 16 - 16), 2 / 15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, g))\n\n    # Return the number of girls now\n    return solutions[g]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for N in range(1000, 10000):\n        str_N = str(N)\n        for i in range(4):\n            M = int(str_N[:i] + str_N[i+1:])\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for price of banana and pear\n    banana, pear = symbols('banana pear')\n    \n    # Equation 1: Max buys 1 banana and 2 pears equals 94p\n    equation1 = Eq(banana + 2 * pear, 94)\n    \n    # Equation 2: Emily buys 1 banana and 1 pear equals 62p\n    equation2 = Eq(banana + pear, 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    percent_swimming = 82\n    percent_jogging = 54\n    percent_neither = 16\n\n    swimming = (percent_swimming / 100) * total_students\n    jogging = (percent_jogging / 100) * total_students\n    neither = (percent_neither / 100) * total_students\n\n    both = swimming + jogging - (total_students - neither)\n\n    return int(both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    A_rate = 1 / 15\n    # B's work rate per day\n    B_rate = 1 / 10\n    \n    # Work done together in 4 days\n    work_done = (A_rate + B_rate) * 4\n    \n    # Remaining work after 4 days\n    remaining_work = 1 - work_done\n    \n    # Days required for B to finish the remaining work\n    B_days = remaining_work / B_rate\n    \n    return B_days\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    term1 = (1 + 0.23 + 0.34)\n    term2 = (0.23 + 0.34 + 0.65)\n    term3 = (1 + 0.23 + 0.34 + 0.65)\n    term4 = (0.23 + 0.34)\n\n    ans = (term1 * term2) - (term3 * term4)\n\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    number_of_tickets = 16\n    cost_per_ticket = 112\n    total_cost = number_of_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "from math import gcd\n\ndef solution():\n    a = 16\n    b = 28\n    return gcd(a, b)\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Linda's rate is 1 problem per 5 minutes\n    linda_rate = 1 / 5\n    \n    # Cici's rate is 1 problem per 6 minutes\n    cici_rate = 1 / 6\n    \n    # Combined rate is the sum of their individual rates\n    combined_rate = linda_rate + cici_rate\n    \n    # Total time in minutes for 2 hours\n    total_time = 2 * 60\n    \n    # Total problems solved is the combined rate multiplied by the total time\n    total_problems = combined_rate * total_time\n    \n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have 37 - x apples and John will have 15 + x apples\n    # According to the question, Amy needs to have 4 more apples than John\n    # Hence, we have the equation: (37 - x) = (15 + x) + 4\n\n    # Now, solving for x\n    x = (37 - 4 - 15) // 2\n\n    return x\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    odd_number = 15\n    return odd_number\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_by = 18\n    bus_interval = 45\n    \n    wait_time = bus_interval - (late_by % bus_interval)\n    \n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Let's find the rate of consumption for goats and rabbits in \"units\" per day.\n    # If 14 goats eat for 15 days, then 1 goat eats for 14*15 days.\n    goat_eating_days = 14 * 15\n    # Similarly, if 70 rabbits eat for 8 days, then 1 rabbit eats for 70*8 days.\n    rabbit_eating_days = 70 * 8\n    \n    # Since 1 goat eats as much as 4 rabbits a day, we can express the goat's consumption\n    # in terms of rabbit's consumption:\n    # 1 goat_eating_day = 4 rabbit_eating_days\n    # goat_eating_days = 4 * rabbit_eating_days\n    # Thus, the pasture has 4 * rabbit_eating_days\n    pasture_amount = 4 * rabbit_eating_days  # total amount of pasture in \"rabbit-eating-day\" units\n\n    # Now, we want to feed 17 goats and 20 rabbits.\n    # The daily consumption for them will be 17 goats * 4 + 20 rabbits\n    daily_consumption = 17 * 4 + 20  # total daily consumption in \"rabbit-eating-day\" units\n    \n    # Lastly, we divide the total pasture amount by the daily consumption to get the\n    # number of days the pasture can feed 17 goats and 20 rabbits.\n    days = pasture_amount / daily_consumption\n\n    return days\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x, y + 83)  # There are 83 more Prizes X than Prizes Y\n    equation2 = Eq(z, x + 24)  # There are 24 more Prizes Z than Prizes X\n    equation3 = Eq(x + y + z, 283)  # Total of 283 prizes\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    length_of_road = 150\n    distance_between_trees = 10\n\n    # Start and end points are both included, hence we add 1\n    number_of_trees = (length_of_road // distance_between_trees) + 1\n\n    return number_of_trees\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    equation1 = Eq((1/4)*chan, (1/3)*toh + 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sandra, tasha, riley = symbols('sandra tasha riley')\n    \n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 * sandra / 5)\n    equation3 = Eq(tasha - riley, 60)\n    \n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height_climbed = 0\n    night_slide_increment = 1\n    day = 0\n\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        height_climbed -= night_slide_increment\n        night_slide_increment += 1   \n\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    number = 4\n    repeat = 3\n    total = 0\n\n    for i in range(1, repeat + 1):\n        total += int(str(number) * i)\n\n    return total\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    known_numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    mean_of_numbers = 37\n    total_numbers = 10\n\n    sum_of_known_numbers = sum(known_numbers)\n    total_sum = mean_of_numbers * total_numbers\n\n    missing_number = total_sum - sum_of_known_numbers\n    return missing_number\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    total_months = 3\n\n    total_savings = january_savings + february_savings + march_savings\n    mean_savings = total_savings / total_months\n\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    return (9**2) - 7\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    # Mapping for letters in \"Angel\" to numbers\n    angel_mapping = {'A': 0, 'n': 1, 'g': 4, 'e': 7, 'l': 5}\n    devil_mapping = {'D': 4, 'e': 0, 'v': 5, 'i': 2, 'l': 2}\n\n    # Convert \"Angel\" using the given mapping\n    angel_password = ''.join(str(angel_mapping[letter]) for letter in \"Angel\")\n\n    # Andy's try for \"Devil\"\n    andy_try = \"4005220912\"\n\n    # Create the correct password for \"Devil\" using mapping\n    devil_password = ''.join(str(devil_mapping[letter]) for letter in \"Devil\")\n\n    # Check if Andy can unlock the treasure chest\n    can_unlock = (andy_try == devil_password)\n    return (can_unlock, devil_password) if not can_unlock else (can_unlock, \"Andy can unlock the treasure chest\")\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    from fractions import Fraction\n\n    # Converting repeating decimals to fractions\n    term1 = Fraction(1, 90)    # 0.0(1)\n    term2 = Fraction(12, 90)   # 0.1(2)\n    term3 = Fraction(23, 90)   # 0.2(3)\n    term4 = Fraction(34, 90)   # 0.3(4)\n    term5 = Fraction(45, 90)   # 0.4(5)\n    term6 = Fraction(54, 90)   # 0.5(4)\n    term7 = Fraction(78, 90)   # 0.7(8)\n\n    # Adding the fractions\n    result = term1 + term2 + term3 + term4 + term5 + term6 + term7\n    \n    # Converting the fraction to decimal\n    ans = float(result)\n\n    return ans\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2035):\n        for j in range(i+1, 2035):\n            for k in range(j+1, 2035):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    max_sheep = (total_sheep + total_pens - 1) // total_pens\n\n    return max_sheep\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    a, x = symbols('a x')\n    equation = Eq(sqrt(x), sqrt(a) - 2/sqrt(a))\n    \n    # Solve for x in terms of a\n    x_solution = solve(equation, x)[0]\n    \n    # Now find sqrt(x^2 + 8x) in terms of a using x_solution\n    expression = sqrt(x_solution**2 + 8 * x_solution)\n    \n    # Simplify the expression to get the final result in terms of a\n    simplified_expression = expression.simplify()\n\n    return simplified_expression\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys_age = 18 * 16.2\n    total_girls_age = 27 * 16.7\n    total_age = total_boys_age + total_girls_age\n    mean_age = total_age / 45\n    return mean_age\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    raye_cycle = 6\n    simon_cycle = 12\n    taylor_cycle = 16\n\n    ans = lcm(raye_cycle, simon_cycle, taylor_cycle)\n\n    return ans\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Number has remainder 1 when divided by 6, and remainder 8 when divided by 13\n    congruences = [(1, 6), (8, 13)]\n\n    # Using the Chinese Remainder Theorem to find a solution that satisfies the given congruences\n    num = solve_congruence(*congruences)\n\n    # Checking if the number is in the specified range (between 200 and 300)\n    while num[0] < 200:\n        num = (num[0] + num[1], num[1])\n    \n    return num[0]\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Worst case scenario:\n    # Sara takes out all the yellow balls, which are the least in number (5 balls), \n    # and then she needs to take out green balls. There are 7 green balls, \n    # but she only needs to take out 4 of them to be sure that either all the yellow \n    # or green balls get to 5.\n    # After that, if she hasn't got 5 balls of the same color, \n    # she must take only one red ball to be certain to have 5 balls\n    # of the same color because no matter what, she will have either 5 green or 5 yellow.\n    # So she takes out 4 more balls (to avoid the chance that all 5 yellow are taken first).\n    \n    yellow_balls = 5\n    red_balls_to_be_certain = 1  # Because after 5 yellows, 1 red will ensure there are 5 of some color.\n    green_balls_needed = yellow_balls - 1  # At most 4 greens required, because 5th ball ensures either 5 yellow or 5 green\n\n    total_balls = yellow_balls + green_balls_needed + red_balls_to_be_certain\n\n    return total_balls\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    # Mapping from letter to digit for the word \"Angel\" based on the number 0141705021\n    angel_mapping = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n    \n    # Define the word Devil based on the pattern of Letter to Digit from \"Angel\"\n    devil_number = angel_mapping['D'] + angel_mapping['e'] + angel_mapping['v'] + angel_mapping['i'] + angel_mapping['l']\n    \n    # Check if Andy's input matches the pattern for \"Devil\". If not, provide the correct number.\n    andy_input = '4005220912'\n    if devil_number == andy_input:\n        return True\n    else:\n        # Complete the mapping for the letters in \"Devil\" that are not in \"Angel\" based on Andy's input\n        angel_mapping['D'] = andy_input[0]\n        angel_mapping['v'] = andy_input[2]\n        angel_mapping['i'] = andy_input[3]\n        \n        # Create the correct password for \"Devil\"\n        correct_password = angel_mapping['D'] + angel_mapping['e'] + angel_mapping['v'] + angel_mapping['i'] + angel_mapping['l']\n        return correct_password\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    tenth_term = 31\n    common_difference = 3\n    n = 10\n\n    first_term = tenth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    # Iterate over all possible ways to sum to 6 with positive integers\n    for i in range(1, 6):  # i is the first number\n        for j in range(i, 6):  # j is the second number, starting from i to avoid duplications\n            if i + j == 6:  # If i and j sum to 6, we have a valid combination\n                count += 1\n            else:\n                # If i and j don't sum to 6, we can try to find a third number k\n                for k in range(j, 6):  # k starts from j to avoid duplications\n                    if i + j + k == 6:  # If i, j, k sum to 6, we have a valid combination\n                        count += 1\n                    else:\n                        # If i, j, and k don't sum to 6, we can try to find a fourth number l\n                        for l in range(k, 6):\n                            if i + j + k + l == 6:  # If i, j, k, l sum to 6, we have a valid combination\n                                count += 1\n    return count\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30\n    sam_speed = 1  # m/s\n    ben_speed = 0.6  # m/s\n    total_swim_time = 10 * 60  # Convert minutes to seconds\n    \n    combined_speed = sam_speed + ben_speed\n    distance_per_meeting = pool_length / combined_speed\n    num_meetings = total_swim_time / distance_per_meeting\n\n    return int(num_meetings)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # Breaking down the numbers into their individual digits\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    \n    # Applying the operation as defined\n    ans = a*b + c*d\n    \n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    height_doris = 126\n    total_height_bc = average_bob_cindy * 2\n    total_height_bcd = total_height_bc + height_doris\n    average_height_bcd = total_height_bcd / 3\n    return average_height_bcd\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for their current ages.\n    destin, nephew = symbols('destin nephew')\n\n    # Create the equations based on the problem statement.\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    equation2 = Eq(destin - 6, 5 * (nephew - 6))\n\n    # Solve the system of equations for Destin and his nephew's current ages.\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    # Calculate the sum of their ages in 10 years' time.\n    sum_ages_in_10_years = (solutions[destin] + 10) + (solutions[nephew] + 10)\n\n    return sum_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    \n    # Total number of pencils is the average times the number of pupils\n    total_pencils = 35 * 40\n    girls = 40 - boys\n\n    # Equations based on the average pencils\n    equation = Eq(20 * boys + 60 * girls, total_pencils)\n\n    solutions = solve((equation, boys))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of pies each of them had\n    x = symbols('x')\n    \n    # After the transactions, Mrs Tan has x + 12 pies\n    # and Mrs Lim has x - 4 pies\n    # Mrs Tan now has twice as many pies as Mrs Lim, i.e., x + 12 = 2 * (x - 4)\n    equation = Eq(x + 12, 2 * (x - 4))\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Return the number of pies each of them had at first\n    return solution[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = '135'\n    all_combinations = list(permutations(digits))\n    return len(all_combinations)\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    departure = datetime.strptime('6:35 AM', '%I:%M %p')\n    arrival = datetime.strptime('10:22 AM', '%I:%M %p')\n\n    time_taken = arrival - departure\n    ans = time_taken.seconds // 60\n\n    return ans\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"3456\"\n    pattern_length = len(pattern)\n    digits_sum = sum(map(int, pattern))\n\n    full_patterns, remaining_digits = divmod(50, pattern_length)\n    total_full_patterns_sum = full_patterns * digits_sum\n    partial_pattern_sum = sum(map(int, pattern[:remaining_digits]))\n\n    ans = total_full_patterns_sum + partial_pattern_sum\n    \n    return ans\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    # Since division is the inverse of multiplication, we can flip the divisor and multiply.\n    ans = 3 * (5 / 3) * (7 / 5) * (9 / 7) * (13 / 9) * (15 / 13)\n    return ans\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    sweets_first_group = 6\n    \n    # First group: 3/5 of the students receiving 6 sweets each\n    num_students_first_group = (3/5) * total_sweets / sweets_first_group\n    \n    remaining_sweets = total_sweets - num_students_first_group * sweets_first_group\n    sweets_second_group = 4\n    \n    # Second group: 1/4 of the remaining students receiving 4 sweets each\n    num_students_second_group = (1/4) * (remaining_sweets / sweets_second_group)\n    \n    remaining_sweets_after_second_group = remaining_sweets - num_students_second_group * sweets_second_group\n    sweets_third_group = 5\n    \n    # Rest of the students receiving 5 sweets each\n    num_students_third_group = remaining_sweets_after_second_group / sweets_third_group\n    \n    # Total number of students\n    total_students = num_students_first_group + num_students_second_group + num_students_third_group\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    numbers = [6, 12, 35, 175, 245, 300]\n    unpicked = None\n\n    for candice_combo in combinations(numbers, 3):\n        candice_product = prod(candice_combo)\n        remaining_numbers = [num for num in numbers if num not in candice_combo]\n        \n        for candy_combo in combinations(remaining_numbers, 2):\n            candy_product = prod(candy_combo)\n            \n            if candice_product == candy_product:\n                unpicked_number = set(numbers) - set(candice_combo) - set(candy_combo)\n                unpicked = unpicked_number.pop()\n                break\n        if unpicked is not None:\n            break\n\n    return unpicked\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    return 3.88 - 1.111\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    toms_age_now = 10\n    fathers_age_when_tom_reaches_fathers_age_now = 70\n    fathers_current_age = fathers_age_when_tom_reaches_fathers_age_now - (fathers_age_when_tom_reaches_fathers_age_now - toms_age_now)\n\n    return fathers_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    result = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    return result\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def is_composite(n):\n    if n < 4:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef solution():\n    for odd in range(999, 0, -2):  # start from a large odd number and go backwards\n        can_split = False\n        for a in range(2, odd):\n            if is_composite(a):\n                for b in range(2, odd):\n                    if is_composite(b) and a != b:\n                        c = odd - (a + b)\n                        if c > 1 and is_composite(c) and c != a and c != b:\n                            can_split = True\n                            break\n                if can_split:\n                    break\n        if not can_split:\n            return odd\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n    \n    # Determine the least common multiple of the two packet sizes\n    packet_lcm = lcm(25, 20)\n    \n    # Since she starts both on the same day, we simply add the lcm to the start date\n    start_day = 1\n    new_start_day = start_day + packet_lcm\n    \n    # Find out the month and day she will start the new packets\n    days_in_month = 31 # March has 31 days\n    month = \"March\" # Since we won't exceed a month, no need to calculate the month\n    \n    # If the new_start_day is larger than the number of days in March, adjust for the new month\n    if new_start_day > days_in_month:\n        new_start_day -= days_in_month\n        month = \"April\"\n    \n    return f\"{new_start_day}th {month}\"\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) / 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert mixed fractions to improper fractions\n    first_num = 3 + 1/4\n    second_num = 1 + 3/4\n    \n    # Calculate the difference and convert to decimal\n    diff = first_num - second_num\n\n    return diff\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    # For an isosceles triangle with a perimeter of 12, the two equal sides must be greater than 1\n    # and the third side must be less than the sum of the two equal sides.\n    for equal_side in range(2, 12 // 2 + 1):\n        third_side = 12 - 2 * equal_side\n        if equal_side > third_side:\n            continue  # Inequality condition is not met\n        count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_money = 580\n    boy_amount = 8\n    girl_amount = 5\n\n    # Equation for total prize money\n    money_eq = Eq(boys * boy_amount + girls * girl_amount, total_money)\n    # There are thrice as many boys as girls\n    ratio_eq = Eq(boys, 3 * girls)\n\n    # Solve equations\n    solutions = solve((money_eq, ratio_eq), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    both_teams = (sports_team + art_team) - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n    # elder + younger = 42  => equation1\n    # younger - x = elder / 2  => equation2, where \"x\" years ago\n    # elder - x = younger  => equation3\n\n    # From equation3: x = elder - younger\n    # Replace x in equation2:\n    # younger - (elder - younger) = elder / 2\n    # 2*younger - elder = elder / 2\n    # 4*younger - 2*elder = elder\n    # 4*younger = 3*elder\n    # But from equation1 we have: elder = 42 - younger\n    # So we get 4*younger = 3*(42 - younger)\n\n    equation1 = Eq(elder + younger, 42)\n    equation2 = Eq(4*younger, 3*(42 - younger))\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_initial_strawberries = 86\n    lena_gave_away = 29\n    lena_final_strawberries = 100\n\n    strawberries_received = lena_final_strawberries - (lena_initial_strawberries - lena_gave_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A_students = 8\n    class_B_students = 12\n    class_C_students = 20\n\n    # GCD of Class A and B students\n    gcd_A_B = gcd(class_A_students, class_B_students)\n\n    # GCD of all three classes\n    gcd_all_classes = gcd(gcd_A_B, class_C_students)\n\n    return gcd_all_classes\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    pass_first_exam = 25\n    fail_second_exam = 12\n    pass_second_fail_first = 3\n\n    # Using the Inclusion-Exclusion Principle\n    pass_only_first_exam = pass_first_exam - (total_students - fail_second_exam - pass_second_fail_first)\n\n    return pass_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Direct A to D\n    direct_AD = 6\n    \n    # A to B to D\n    A_B = 7\n    B_D = A_B * 2 # Since B to C doesn't matter; only B to D routes count\n    \n    # A to C to D\n    A_C = 4\n    C_D = A_C * 2\n    \n    # Total ways\n    return direct_AD + B_D + C_D\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300  # Total kilograms of hay\n    cattle = 5       # Number of cattle\n    days = 10        # Number of days the hay will last\n\n    # Calculate the amount of hay one cattle eats in one day\n    daily_hay_per_cattle = total_hay / (cattle * days)\n\n    return daily_hay_per_cattle\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be the number of chocolate cupcakes, and ch be the number of cheese cupcakes\n    c, ch = symbols('c ch')\n    \n    # c + ch = 255 (total cupcakes)\n    # (1 - 0.4) * c = (1 - 0.75) * ch (cupcakes left after selling)\n    \n    equation1 = Eq(c + ch, 255)\n    equation2 = Eq(0.6 * c, 0.25 * ch)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (c, ch))\n    \n    # cupcakes left after selling\n    chocolate_left = 0.6 * solutions[c]\n    cheese_left = 0.25 * solutions[ch]\n    return chocolate_left\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    first_term = 3\n    difference = 4\n\n    # Find the last term below or equal to 100\n    last_term = (100 // 4) * 4 + 3\n\n    # If last_term is greater than 100, subtract the difference to get the correct last term\n    if last_term > 100:\n        last_term -= difference\n\n    # Calculate the number of terms using the arithmetic sequence formula\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Calculate the sum using the arithmetic sequence sum formula\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    boxes = total_avocados // per_box\n\n    return boxes\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    from fractions import Fraction\n\n    # total students\n    total_students = 39\n    # let the number of boys be b and the number of girls be g\n    # we have b + g = 39 (equation 1)\n    # and 1/4 of boys is equal to 2/5 of the girls\n    # therefore 1/4 * b = 2/5 * g (equation 2)\n\n    for b in range(total_students + 1):\n        g = total_students - b\n        if Fraction(1, 4) * b == Fraction(2, 5) * g:\n            return b - g\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3 / 8\n    seedlings_killed = total_seedlings * fraction_killed\n    seedlings_survive = total_seedlings - seedlings_killed\n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n    days = total_locusts // daily_consumption\n    remaining_locusts = total_locusts - (days * daily_consumption)\n    if remaining_locusts == 0:\n        ans = daily_consumption\n    else:\n        ans = remaining_locusts\n    return ans\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    total_cost = 20\n    pencil_cost = 2\n    pencil_quantity = 3\n    pen_quantity = 2\n\n    total_pencil_cost = pencil_cost * pencil_quantity\n    total_pen_cost = total_cost - total_pencil_cost\n    cost_per_pen = total_pen_cost / pen_quantity\n\n    return cost_per_pen\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12*92 + 22*82 + 32*72\n    return ans\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of $5 notes be x and $10 notes be y\n    x, y = symbols('x y')\n\n    # Total notes equation\n    eq1 = Eq(x + y, 116)\n\n    # Remaining $10 and $5 notes after the purchase\n    eq2 = Eq(y - 0.60 * y, (4/7) * (x - 0.25 * x))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Spent notes\n    spent_5_notes = 0.25 * solutions[x]\n    spent_10_notes = 0.60 * solutions[y]\n\n    # Total cost of bag\n    total_cost = spent_5_notes * 5 + spent_10_notes * 10\n\n    return total_cost\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    # Let d = Don's original number of stickers, b = Ben's original number of stickers\n    # According to the ratio 2:3\n    # d/b = 2/3 => 3d = 2b\n\n    # After Don bought another 10 stickers and Ben lost 5 stickers, their stickers became:\n    # Don's stickers = d + 10, Ben's stickers = b - 5\n    # The ratio 6:7 can be written as (d + 10)/(b - 5) = 6/7\n\n    # Now we have two equations:\n    # 3d = 2b\n    # 7(d + 10) = 6(b - 5)\n\n    # We will solve these two equations for d and b using sympy's solve function.\n\n    from sympy import symbols, Eq, solve\n\n    d, b = symbols('d b')\n\n    equation1 = Eq(3 * d, 2 * b)  # 3d = 2b\n    equation2 = Eq(7 * (d + 10), 6 * (b - 5))  # 7(d + 10) = 6(b - 5)\n\n    solutions = solve((equation1, equation2), (d, b))\n\n    # d is the number of stickers Don had at first.\n    return solutions[d]\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    from sympy import divisors\n\n    ages = divisors(210)\n    # Filter out divisors that are greater than or equal to 10, \n    # as children are all under 10.\n    ages = [age for age in ages if age < 10]\n\n    # Iterate over each unique combination of three divisors\n    # to find the possible ages of the children\n    for i in range(len(ages)):\n        for j in range(i + 1, len(ages)):\n            for k in range(j + 1, len(ages)):\n                if ages[i] * ages[j] * ages[k] == 210:\n                    # The youngest child's age being ages[i]\n                    return ages[i]\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    result = 726 * 8\n    return round(result, 1)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    sum_even = sum(range(2, 2017, 2))  # Sum of the even terms\n    sum_odd = sum(range(3, 2016, 2))   # Sum of the odd terms\n    ans = sum_even - sum_odd           # Subtract the sum of odds from the sum of evens\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    number_to_subtract = remainder if remainder == 0 else 25 - remainder\n    return number_to_subtract\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_give = (amy_toys - sally_toys) // 2\n\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "网络故障，请重试"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    # Intialize the max product value to zero\n    max_product = 0\n\n    # Loop through possible values of a\n    for a in range(1, 31):\n        # Loop through possible values of b\n        for b in range(1, 31 - a):\n            # Calculate value of c\n            c = 31 - a - b\n            # Calculate product abc\n            product = a * b * c\n            # If this product is larger than the current max_product, update it\n            if product > max_product:\n                max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    common_difference = 2\n    \n    num_terms = ((last_term - first_term) // common_difference) + 1\n    return num_terms\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.5\n    jason = serena / 5\n    william = jason - 1.54\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # The given expression 1*3 + 3*5 + 5*7 + ... + 39*41 can be noticed as (2n-1)(2n+1)\n    # This is equal to (2n-1)^2 + (2n-1) for n in range(1,21)\n    # With the given that 1^2 + 2^2 + 3^2 + ... + 20^2 = 2870\n    # We can calculate the required expression using this information\n    \n    sum_of_squares = 2870  # Given\n    \n    # Calculate the sum of (2n-1)\n    sum_of_odds = sum(2*n-1 for n in range(1, 21))\n    \n    # The required sum is sum_of_squares + sum_of_odds\n    result = sum_of_squares + sum_of_odds\n    \n    return result\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial\n\ndef solution():\n    total_students = 7\n    twin_brothers = 2\n    triplet_sisters = 3\n    others = total_students - twin_brothers - triplet_sisters\n\n    # Treat the triplet sisters as a single unit first.\n    # There are (others + 1) units because the triplet group can be placed \n    # in between the other students or at the ends.\n    units = others + 1\n\n    # Calculate the permutations of all units (including the triplet group as one unit).\n    perms_of_units = factorial(units)\n\n    # Now, calculate the arrangements of the twins around the units.\n    # Each twin brother can go on either side of the units, but not together.\n    perms_of_twins = (units - 1) * units\n\n    # The triplet sisters can be permuted among themselves in 3! ways.\n    perms_of_triplets = factorial(triplet_sisters)\n\n    # Combine all the permutations together.\n    total_permutations = perms_of_units * perms_of_twins * perms_of_triplets\n\n    return total_permutations\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150  # length of the road in meters\n    distance_between_trees = 10  # distance between trees in meters\n\n    # Since trees are planted at both ends, subtract the length of one interval from the road length\n    # Then divide the resulting length by the distance between trees to get the number of intervals\n    # Add 1 to account for the initial tree\n    num_trees = ((road_length - distance_between_trees) // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    milk_needed = milk_per_cup * cups_needed\n    return milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    # Since the number is divisible by 99, it's also divisible by 9 and 11.\n    # Divisibility rule for 9: The sum of the digits must be divisible by 9.\n    # Divisibility rule for 11: The difference between the sum of the digits in the odd positions and the sum of the digits in the even positions must be divisible by 11.\n    # The given digits: 2 + 1 + 3 + 5 = 11\n    # We need to find two digits x and y to complete the number such that:\n    # (2 + x + 3) - (1 + y + 5) must be divisible by 11\n    # The sum of all digits (2 + 1 + x + y + 3 + 5) must be divisible by 9\n\n    for x in range(10):\n        for y in range(10):\n            if (2 + x + 3 - 1 - y - 5) % 11 == 0 and (2 + 1 + x + y + 3 + 5) % 9 == 0:\n                return f'21{x}{y}35'\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - 1/2)\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percent_wear_glasses = 20\n    total_girls = 25\n\n    num_girls_with_glasses = (percent_wear_glasses / 100) * total_girls\n\n    return int(num_girls_with_glasses)\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Assuming the first day of the vacation can be any day of the week\n    # In 55 days, there are 7 full weeks plus 6 extra days\n    full_weeks = 55 // 7\n    extra_days = 55 % 7\n\n    # There are definitely 7 full weeks where each week has 1 Friday\n    guaranteed_fridays = full_weeks\n\n    # In the best case scenario, the vacation starts on a Saturday, which means\n    # the extra 6 days will have 1 Friday.\n    # In the worst case scenario, the vacation starts on a Friday, which means\n    # the extra 6 days won't have any additional Friday.\n\n    # Since we need the greatest number of Fridays,\n    # we consider the best case scenario where there's an additional Friday.\n    extra_friday = 1\n\n    # Total Fridays is the sum of guaranteed Fridays from full weeks and the extra Friday\n    total_fridays = guaranteed_fridays + extra_friday\n\n    return total_fridays\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    lcm = 2 * 3 * 4 * 5 * 6 * 8 * 9\n    N = 5\n    while True:\n        if N % 2 == 0 and N % 3 == 0 and N % 4 == 0 and N % 5 == 0 and N % 6 == 0 and N % 8 == 0 and N % 9 == 0 and N % 7 == 5:\n            break\n        N += lcm\n    return N\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n    \n    total_cost = cost_per_mug * 7 + cost_per_pen * 5\n    change = 10 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils * (1 / 5)\n    pupils_going_to_cathedral = total_pupils - pupils_away\n\n    return int(pupils_going_to_cathedral)\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    num_students = 320\n    days_in_week = 7\n\n    # Apply the Pigeonhole Principle\n    min_students_in_most_populated_week = (num_students // days_in_week) + 1\n\n    return min_students_in_most_populated_week\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - remaining_weight_with_2_apples\n    weight_of_basket = remaining_weight_with_2_apples - 2 * (weight_of_3_apples / 3)\n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    return max(0.25, 0.3)\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    # Since the question is \"$$1$$\" and considering the knowledge point routes,\n    # it seems like a trivial question which is asking to solve for the value of an implied equation \"x = 1\"\n    # where 1 is the solution.\n    \n    # Assign the value 1 to the variable ans.\n    ans = 1\n    \n    # Return the solution to the equation, which is 1.\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    rate = 1.5 / 100\n\n    # The formula for compound interest is A = P(1 + r/n)^(nt)\n    # However, since the interest is paid yearly, n = 1, we simplify the formula to A = P(1 + r)^t\n    # We need to find t such that 37100 = 35000(1 + 0.015)^t\n    # Let's transform the equation and solve for t:\n    # (37100/35000) = (1 + 0.015)^t\n    # t = log(37100/35000) / log(1 + 0.015)\n\n    from math import log\n\n    t = log(final_amount / principal) / log(1 + rate)\n\n    # Since time cannot be fractional in this context, we round it to the nearest whole number\n    t = round(t)\n\n    return t\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cups = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cups\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least common multiple of 3 and 7\n    ans = lcm\n    while True:\n        if str(ans)[-1] == '2':  # Check if number ends with 2\n            break\n        ans += lcm  # Increase by the least common multiple to maintain the property\n        \n    return ans\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    # Formulate the equations based on the problem statement\n    # Equation representing 3 times as many cookies as cakes\n    equation1 = Eq(cookies, 3 * cakes)\n    # Equation representing the total number of cookies and cakes left after selling\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    # Extract the number of cookies left (cookies sold = 39)\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    return 2 * 7\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song_per_child = 3  # minutes\n    num_songs_per_child = 2\n    num_children = 50\n\n    total_time = time_per_song_per_child * num_songs_per_child * num_children\n\n    return total_time\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    digit_value_higher_place = 3 * 10**5\n    digit_value_lower_place = 3 * 10**2\n    difference = digit_value_higher_place - digit_value_lower_place\n    return difference\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    # Let x be the time John takes to build the wall on his own\n    # Let y be the time Jonah takes to build the wall on his own\n    # Let z be the time Angus takes to build the wall on his own\n\n    # John, Jonah, and Angus together take 27 hours. Therefore, their combined work rate is 1/27\n    # Jonah and Angus together take 36 hours. Therefore, their combined work rate is 1/36\n    # We want to find the individual work rate of John, defined as 1/x\n\n    # The sum of individual work rates is equal to the combined work rate when working together\n    # (1/x) + (1/y) + (1/z) = 1/27\n    # (1/y) + (1/z) = 1/36\n\n    # Let's express the work rate of Jonah and Angus in terms of x using these equations\n    # Since John is not working with Jonah and Angus, we have\n    # (1/x) + (1/36) = 1/27\n\n    # Solve for x\n    x = 1 / (1 / 27 - 1 / 36)\n    \n    return x\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought - donuts_eaten\n\n    return total_donuts\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2 ** 17 % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # This problem is solved using the concept of the Chicken McNugget Theorem (Frobenius Coin Problem)\n    # The theorem states that for any two relatively prime positive integers a and b, the greatest integer that cannot be written in the form\n    # ax + by for nonnegative integers x and y is ab - a - b\n\n    coin1 = 4  # $4z coin\n    coin2 = 5  # $5z coin\n\n    ans = coin1 * coin2 - coin1 - coin2\n    return ans\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    combined_age_5_years_ago = 14\n    combined_age_now = combined_age_5_years_ago + 2 * 5\n    combined_age_in_3_years = combined_age_now + 2 * 3\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(0, 10):\n        for b in range(0, 10):\n            num = 108200 + a * 10 + b\n            if num % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3*apple + 4*pear, 1.81)\n    equation2 = Eq(5*apple + 2*pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    weight_4_apples_4_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_4_apples_4_pears.evalf()\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # If d is the greatest common divisor of the 10 numbers,\n    # then each of the numbers is of the form d*k, where k is an integer.\n    # The sum of the 10 numbers is then d * (k1 + k2 + ... + k10) = 1001.\n    # Since 1001 is the product of the primes 7*11*13,\n    # the maximum value of d is obtained when the sum of ki values is the smallest,\n    # which happens when each ki is 1. In this case, d equals to the entire product.\n    \n    # The sum of the smallest possible 10 numbers that each ki equals to 1 is 7 * 11 * 13.\n    d_max = 7 * 11 * 13\n    return d_max\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys - boys / 11, girls - 5)\n    equation2 = Eq(boys + girls, 152)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    ans = 475 + 138\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    return 42 + 21 + 16 + 44 + 37\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    \n    num_boxes = total_pencils / pencils_per_box\n    \n    return int(num_boxes)\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n    total_stickers_amanda_cathy = solutions[amanda] + solutions[cathy]\n\n    return total_stickers_amanda_cathy\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_per_day = 50\n    become_adults_in_days = 30\n    total_days = 40\n    \n    # Adult fleas only come from eggs laid at least 30 days ago. Therefore, for the \n    # first 30 days there will be no new adults.\n    # New adults will only start to appear from the eggs laid on day 1 to day 10\n    new_adults = eggs_per_day * (total_days - become_adults_in_days)\n    \n    return new_adults\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3) + 24\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    total_people = french + japanese + italian - french_japanese - french_italian - japanese_italian + all_three\n    return total_people\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_litres = 12\n    fraction_water = 3 / 4\n    litres_water = total_litres * fraction_water\n    return litres_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    number_of_rows = 22\n    common_difference = 3\n    total_students = (number_of_rows * (2 * first_term + (number_of_rows - 1) * common_difference)) // 2\n    return total_students\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    # Set up the relationship between M and N based on the problem statement\n    # M = 50000 + abcd\n    # N = abcd * 10 + 5\n    # M - N = 50000 + abcd - (abcd * 10 + 5) = 22122\n\n    # Simplify the equation to find abcd\n    # 49995 - (10 - 1) * abcd = 22122\n    # 49995 - (9 * abcd) = 22122\n    \n    # Solve for abcd\n    abcd = (49995 - 22122) // 9\n\n    return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert the mixed numbers to improper fractions\n    num1 = Fraction(21*286 + 21, 286)\n    num2 = Fraction(6*2530 + 647, 2530)\n    num3 = Fraction(1*2829 + 1370, 2829)\n\n    # Perform the calculation\n    result = num1 / num2 * num3\n\n    # Return the result as a mixed number (integer part and fractional part)\n    integer_part = result.numerator // result.denominator\n    fractional_part = Fraction(result.numerator % result.denominator, result.denominator)\n\n    ans = (integer_part, fractional_part)\n    return ans\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # The cuboid has dimensions 6x10x12. When cut into 720 small cubes, each small cube has a side length of 1.\n    # Each face of the cuboid has a unique number of small cubes that have exactly one face painted.\n    # The number of small cubes with exactly one face painted from each large face of the cuboid is\n    # equal to the area (in small cubes) of the face minus the edges, since the cubes at the edges\n    # would have more than one face painted.\n\n    # the unpainted edge lengths (in small cubes) on the 6x10 face will be 4x8\n    unpainted_edge_face1 = (6 - 2) * (10 - 2)\n    \n    # the unpainted edge lengths (in small cubes) on the 10x12 face will be 8x10\n    unpainted_edge_face2 = (10 - 2) * (12 - 2)\n    \n    # the unpainted edge lengths (in small cubes) on the 6x12 face will be 4x10\n    unpainted_edge_face3 = (6 - 2) * (12 - 2)\n\n    # Each large face has a matching opposite face. Therefore, we multiply each count by 2.\n    one_painted_face_cubes = 2 * (unpainted_edge_face1 + unpainted_edge_face2 + unpainted_edge_face3)\n    \n    return one_painted_face_cubes\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    percentage = 30\n    total = 1600\n    \n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the rate at which Star types and n be the rate at which Nini types\n    s, n = symbols('s n')\n\n    # Star types for 5 hours and then Nini types for 20 hours to finish 1 job\n    equation1 = Eq(5*s + 20*n, 1)\n\n    # Star types for 20 hours and Nini types for 8 hours to finish 1 job\n    equation2 = Eq(20*s + 8*n, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Get Nini's rate\n    nini_rate = solutions[n]\n\n    # Find out how long it will take for Nini to finish the job by herself\n    nini_time = 1 / nini_rate\n\n    return nini_time\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # Prime factorization of 140 = 2^2 * 5 * 7\n    # Each pile must have an odd number of candies which mean\n    # The distribution is in terms of powers of 5 and 7\n    # Since there are no restrictions on the number of piles,\n    # We can treat the number of piles as adding 1 to each power possibility\n    # For powers of 5 (0 or 1), this gives us 2 options (5^0 or 5^1)\n    # For powers of 7 (0 or 1), this gives us 2 options (7^0 or 7^1)\n    # The two 2's are ignored as they'd make the pile count even.\n    power_of_5 = 2\n    power_of_7 = 2\n    return (power_of_5) * (power_of_7)\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85\n    cost_pencil = 0.38\n    cost_ruler = 0.59\n\n    remaining_money = total_money - (cost_pencil + cost_ruler)\n\n    return remaining_money\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # There are 20 keys and 20 classrooms.\n    total_keys = 20\n    total_classrooms = 20\n\n    # In the worst case, every time the warden tries a key, it is for the wrong classroom.\n    # For each key, if he tries 19 times, he is guaranteed to get the right one on the 20th try,\n    # because there is only one key and one classroom left.\n    # This happens for every key except the last two: for the second to last key,\n    # he only needs at most 2 tries, and for the last key, he needs only one try.\n\n    # So the total is the sum of all tries for each key:\n    tries = sum(range(1, total_keys)) + 1  # +1 for the last key\n\n    return tries\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Tom takes 4 stones from Stack B, so Stack A has 20 stones and Stack B has 16 stones.\n    # To ensure a win, Jerry must take stones in a way that leaves an equal number of stones in both stacks.\n\n    # Jerry can take 4 stones from Stack A to make both stacks equal (16 stones each).\n    # After that, no matter how Tom takes stones, Jerry can always take the same amount from the other stack\n    # This will eventually lead Jerry to take the last stone.\n\n    # Number of stones Jerry must take\n    jerry_stones = 20 - 16\n    # From which stack Jerry must take\n    jerry_stack = 'A'\n\n    return f\"Jerry must take {jerry_stones} stone(s) from Stack {jerry_stack}.\"\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # When unfolding a newspaper, each sheet contains two leaves (a left and a right page side by side). \n    # Each left side of the sheet is an odd number, and the right side is an even number (the next one).\n    # Since the sheets are taken in pairs, the third sheet will contain pages 5 and 6.\n    page_left = 5\n    page_right = 6\n    # Add both page numbers to get the solution.\n    sum_of_page_numbers = page_left + page_right\n    return sum_of_page_numbers\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_of_girls = 3 / 7\n    number_of_girls = total_students * fraction_of_girls\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    num1 = 2017 / 2018\n    num2 = 20172017 / 20182018\n    num3 = 201720172017 / 201820182018\n    \n    ans = (num1 + num2) / num3\n    \n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peach = 6\n    peach_to_apple = 3 / 2\n\n    watermelon_to_apple = watermelon_to_peach * peach_to_apple\n    return watermelon_to_apple\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    pages = 0\n    digits_used = 0\n\n    for i in range(1, total_digits + 1):\n        if i < 10:  # 1-9\n            digits_used += 1\n        elif i < 100:  # 10-99\n            digits_used += 2\n        else:  # 100 and above\n            digits_used += 3\n        \n        if digits_used > total_digits:\n            break\n        pages = i\n\n    return pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    # Since the pattern is adding and subtracting the same number except the first number,\n    # all other numbers cancel out each other, so the final result is just the first number.\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Since there are equal numbers of each colored pen in both boxes initially,\n    # and the goal is to have at least 15 pens of each colour in Box A,\n    # we need to calculate how many pens will be left in Box A after taking 20 pens.\n    # No matter what pens are taken out, since pens are indistinguishable within the same color,\n    # the operation of taking pens from one box and putting them into another doesn't affect the total.\n    \n    # We calculate the minimum number of pens needed to be returned after simply taking out 20 pens,\n    # to ensure that there are at least 15 pens of each color in Box A.\n\n    # When 20 pens are removed from Box A arbitrarily, we can end up with a minimum of 5 pens of one color if all 20 are of the same color.\n    # In this worst-case scenario, we would need to return 10 pens of that color back to Box A to make it 15.\n\n    # However, the question isn't about a specific color but any color, so once we've met the condition for one,\n    # it naturally applies to others because we always transfer the same number of pens between boxes.\n\n    # Thus, we need to return at least 10 pens back to Box A to ensure Jane has at least 15 pens of each color in Box A.\n\n    return 10\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = sum(len(str(i)) for i in range(1, 92))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time_hour = 9\n    start_time_minute = 15\n    end_time_hour = 23  # Using 24-hour format\n    end_time_minute = 6\n\n    start_minutes = start_time_hour * 60 + start_time_minute\n    end_minutes = end_time_hour * 60 + end_time_minute\n\n    duration = end_minutes - start_minutes\n\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_students = 0\n    for boys in range(0, 1000, 2):  # Increment boys by 2 for the square layer structure\n        girls = boys - 2\n        if girls < 0:\n            girls = 0\n        total_boys = boys * boys\n        total_girls = girls * girls\n        if total_boys - total_girls == 32:\n            total_students = total_boys + total_girls\n            break\n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    return float(1/8)\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centres = 16\n\n    # Since there are more soft-centres chocolates than milk chocolates,\n    # all milk chocolates must have soft-centres.\n    soft_centred_milk_chocolates = milk_chocolates\n\n    # Remaining soft-centres must be plain chocolates\n    soft_centred_plain_chocolates = soft_centres - soft_centred_milk_chocolates\n\n    return soft_centred_plain_chocolates\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    quotient, remainder, dividend, divisor = symbols('quotient remainder dividend divisor')\n\n    # Given values\n    quotient_val = 29\n    remainder_val = 11\n    sum_dividend_divisor = 431\n\n    # Equations based on the problem statement\n    equation1 = Eq(dividend, divisor * quotient + remainder)\n    equation2 = Eq(dividend + divisor, sum_dividend_divisor)\n    equation3 = Eq(quotient, quotient_val)\n    equation4 = Eq(remainder, remainder_val)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (dividend, divisor))\n\n    # Calculate the difference between the dividend and the divisor\n    difference = abs(solutions[dividend] - solutions[divisor])\n\n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage = 12.5 / 100\n    violin_players = 11\n\n    total_pupils = violin_players / percentage\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cups = 30 + 50 + 20\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    \n    average_cost_per_cup = total_cost / total_cups\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    price_per_bar = 50\n    C = n * price_per_bar\n    return C\n\nans = solution(1) # Example use with 1 bar, replace with required `n` value"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represent the number of each type of coin\n    x = symbols('x')\n    \n    # Since we have equal numbers of each type of coin, we form an equation based on their total value\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n    \n    # Solving for x gives us the number of each type of coin\n    num_coins_each_type = solve(equation, x)[0]\n    \n    # The total number of coins is 4 times the number of each type since we have 4 types of coins\n    total_coins = num_coins_each_type * 4\n    \n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n    total_fruits = Eq(apples + pears, 105)\n    sold_apples = apples * (1/3)\n    sold_pears = pears * (2/5)\n    remaining_apples = apples - sold_apples\n    remaining_pears = pears - sold_pears\n    relation = Eq(remaining_apples, (5/6) * remaining_pears)\n  \n    solutions = solve((total_fruits, relation), (apples, pears))\n    \n    apples_sold = solutions[apples] / 3\n    pears_sold = 2 * solutions[pears] / 5\n\n    return int(apples_sold + pears_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    ratio_equation = Eq(A/B, 4/5) & Eq(B/C, 5/6)\n    difference_equation = Eq(C - A, 10)\n\n    solutions = solve((ratio_equation, difference_equation), (A, B, C))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total possible games played with 6 students, each playing once with every other student\n    total_games = (6 * 5) // 2  # combination nC2 where n=6\n    \n    # Total points available for all games, 2 points for a win\n    total_points = total_games * 2\n    \n    # Sum of points of the five students\n    points_of_five_students = 7 + 6 + 5 + 4 + 3\n    \n    # Remaining points will be the points of the sixth student\n    sixth_student_points = total_points - points_of_five_students\n    \n    return sixth_student_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')  # Original weights of bags A and B\n\n    # Original ratio equation: A / B = 5 / 3\n    eq1 = Eq(A / B, 5 / 3)\n\n    # New ratio after transferring 10g from A to B: (A - 10) / (B + 10) = 7 / 5\n    eq2 = Eq((A - 10) / (B + 10), 7 / 5)\n\n    # Solve the system of equations for A and B\n    solutions = solve((eq1, eq2), (A, B))\n\n    # Compute the total weight\n    total_weight = solutions[A] + solutions[B]\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    boys_count = 9\n    girls_count = (boys_count / boys_to_girls_ratio) * 5\n    return girls_count\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total = 378\n    first_line = 22\n    last_line = 62\n    \n    # Sum of arithmetic sequence: total = n/2 * (first_line + last_line)\n    # We are looking for the difference (d) and the number of terms (n)\n    # We know that last_line = first_line + (n-1)*d, rearrange to find n in terms of d\n    # n = (last_line - first_line) / d + 1\n    # Replace n in the total equation and solve for d using the known values\n    \n    # Iterate over possible values of d until we find an integer solution for n\n    for d in range(1, last_line - first_line + 1):\n        n = (last_line - first_line) / d + 1\n        if n.is_integer() and (n * (first_line + last_line) // 2) == total:\n            return d\n    \n    return None  # In case no solution is found\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    str_product = str(product)\n    ans = len(str_product) - len(str_product.rstrip('0'))\n    return ans\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # Convert all to grams\n    largest_mass = max(masses)\n    return largest_mass\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n\n    # Group students A, B, C, and D as one unit, so we have 9 units to arrange.\n    units_arrangements = factorial(9)\n\n    # The 4 students within their own group can be arranged in 4! ways.\n    students_within_group_arrangements = factorial(4)\n\n    # The total number of ways they can line up is the product of the two.\n    total_arrangements = units_arrangements * students_within_group_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_ratio = 6/11\n    girls_count = total_children * girls_ratio\n    boys_count = total_children - girls_count\n    return int(boys_count)\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orange, apple, grape, pineapple = symbols('orange apple grape pineapple')\n\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(orange + apple + grape + pineapple, 25)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (orange, apple, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation: boys = girls - 65\n    equation1 = Eq(boys, girls - 65)\n    # Equation after some boys and girls left: boys - 2/5 * boys = girls - 3/7 * girls\n    equation2 = Eq(boys - 2/5 * boys, girls - 3/7 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate the total number of students left in the hall\n    boys_left = solutions[boys] - 2/5 * solutions[boys]\n    girls_left = solutions[girls] - 3/7 * solutions[girls]\n    total_left = boys_left + girls_left\n\n    return total_left\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # The smallest difference will occur when the numbers are as close to each other as possible.\n    # This means we want to minimize the most significant digits when they differ\n    # and keep the rest the same. For example:\n    # Smaller number: 123456789\n    # Larger number:  123456798\n    # The difference is 9 (the last two digits are swapped)\n  \n    # If we consider the most significant digit where they differ, they should differ by 1\n    # and all lesser significant digits should be the same.\n\n    # Once the smallest non-zero digit is set to the last position for the smaller number,\n    # the next smallest digit must be in the last position for the larger number to minimize the difference.\n\n    # Create the two closest possible numbers by swapping the last two digits in the sequence 123456789\n    smaller_number = int('123456789')  # The smallest 9-digit number with all unique digits\n    larger_number = int('123456798')   # Swap the last two digits (89 -> 98)\n\n    # Compute the difference\n    difference = larger_number - smaller_number\n\n    return difference\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_bricks = symbols('total_bricks')\n    \n    # Using inverse operations to build the equations step by step backwards from the last information\n    third_trip = 68\n    remaining_after_third = 25\n\n    second_trip = (remaining_after_third + third_trip - 11) * 2\n    remaining_after_second = remaining_after_third + third_trip\n\n    first_trip = (remaining_after_second + second_trip - 26) * 2\n    total_initial_bricks = remaining_after_second + second_trip + first_trip\n\n    # Solve the equation to find the total number of bricks initial count\n    equation = Eq(total_initial_bricks, total_bricks)\n    solution = solve(equation, total_bricks)\n\n    return solution[0]\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import Rational\n\n    # There are 3 dog barking incidents per week, and 1000 days is approximately 142.857 weeks\n    total_barks = 3 * (1000 / 7)\n\n    # Probability that on any given barking incident a theft is occurring\n    probability_theft_during_bark = (2 / total_barks) * 0.9\n\n    return probability_theft_during_bark\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of girls, boys, and swimming abilities\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n    \n    # Set up equations based on the problem statements\n    equation1 = Eq(boys, girls + 90)  # There are 90 more boys than girls\n    equation2 = Eq(girls_swim/girls_not_swim, 31/49)  # Ratio of girls who can swim to who cannot\n    equation3 = Eq(boys_swim, boys_not_swim - 120)  # 120 fewer boys can swim than not\n    equation4 = Eq(girls + boys, 1690)  # Total pupils in the school\n    equation5 = Eq(girls, girls_swim + girls_not_swim)  # Total girls is the sum of swimmers and non-swimmers\n    equation6 = Eq(boys, boys_swim + boys_not_swim)  # Total boys is the sum of swimmers and non-swimmers\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n    \n    # Extract the number of pupils who can not swim\n    total_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n    \n    return total_not_swim\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    result = 2412 // 9\n    return result\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    # Calculate the number of permutations for arranging 3 kids\n    # Since all kids are distinct, the number of ways to arrange them\n    # is the factorial of the number of kids\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers_per_pupil1, excess1 = 13, 190\n    stickers_per_pupil2, excess2 = 17, 50\n    total_stickers, pupils = symbols('total_stickers pupils')\n\n    equation1 = Eq(total_stickers - pupils * stickers_per_pupil1, excess1)\n    equation2 = Eq(total_stickers - pupils * stickers_per_pupil2, excess2)\n\n    solutions = solve((equation1, equation2), (total_stickers, pupils))\n\n    return solutions[total_stickers]\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Since it's a square array, the number of students must be a perfect square\n    # Also, for Mike to be 2nd in line from any direction, he must be seated at (2,2) in that square,\n    # so the array must be at least 3x3.\n    # We need to find the perfect square where (2,2) is the second seat in both axes. This is 3x3 = 9.\n    ans = 3**2\n    return ans\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    sum_of_ages_now = 22\n    sum_of_ages_future = 40\n    years_until_sum_is_40 = sum_of_ages_future - sum_of_ages_now\n\n    return years_until_sum_is_40\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 21):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Create a dictionary to hold the number of ways to reach each step\n    steps_ways = {0: 1}  # Base case: There's 1 way to stand at the bottom (0 steps) before starting.\n\n    # Loop through each step from 1 to 10 and calculate the number of ways to reach it\n    for i in range(1, 11):\n        # The number of ways to reach the current step is the sum of the ways to reach two steps before and three steps before\n        steps_ways[i] = steps_ways.get(i - 2, 0) + steps_ways.get(i - 3, 0)\n    \n    return steps_ways[10]\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Using sympy to solve the equation\n    from sympy import symbols, Eq, solve\n\n    # Set symbols for the digits of the combination lock number\n    # Let the combination be a 1000s place, b 100s place, c 10s place, d 1s place\n    a, b, c, d = symbols('a b c d')\n\n    # Original number is 1000a + 100b + 10c + d\n    # New number when the last digit is moved to the front is 1000d + 100a + 10b + c\n\n    # Equation based on the given condition: new number - original number = 5877\n    equation = Eq(1000*d + 100*a + 10*b + c - (1000*a + 100*b + 10*c + d), 5877)\n    \n    # Add constraints that each digit should be between 0 and 9\n    constraints = (a >= 0, a <= 9, b >= 0, b <= 9, c >= 0, c <= 9, d >= 0, d <= 9)\n\n    # Solve the equation with the constraints\n    solutions = solve((equation,) + constraints, (a, b, c, d), dict=True)\n\n    # Assuming there is only one unique solution that fits the criteria\n    solution = solutions[0]\n\n    # Original combination is 1000a + 100b + 10c + d\n    original_combination = solution[a]*1000 + solution[b]*100 + solution[c]*10 + solution[d]\n\n    return original_combination\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    minimum_dividend = 1 * quotient + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    num = \"1998\"\n    count = len(num)\n    while int(num) % 33 != 0:\n        num += \"1998\"\n        count += len(\"1998\")\n    return count\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    n = 5\n    a = n\n    b = n ** 2\n    c = n ** 3\n\n    group_sum = a + b + c\n\n    return group_sum\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_round = 1/4\n    total_distance = 3.75\n    num_rounds = total_distance / distance_per_round\n    return int(num_rounds)\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = (boys / boys_to_girls_ratio)\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    num = 100  # start with the smallest possible three-digit integer\n    while not (num % 5 == 3 and num % 6 == 4 and num % 9 == 1):\n        num += 1  # increment the number until all conditions are satisfied\n    return num\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Since 14:21 is the same as 2:3 (both sides divided by 7)\n    # 10:x must also be reduced to the same ratio to be equivalent, which is 2:3\n    # 10/x = 2/3\n    \n    # Rearrange the proportion to find x\n    x = (10 * 3) / 2\n    \n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for number in range(10, 100, 10):  # Generate two-digit numbers that end in \"0\"\n        if number % 6 == 0 and number % 9 == 0:  # Check multiplicity with 6 and 9\n            return number\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    max_int = 27\n    count = 0\n    current_sum = 0\n    while current_sum < max_int:\n        count += 1\n        current_sum += count\n    return count - 1\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    initial_value = 5832\n    tens_to_add = 7 * 10  # 7 tens means 70\n    correct_answer = initial_value + tens_to_add\n\n    johnny_answer = 5839\n    is_correct = johnny_answer == correct_answer\n    \n    return correct_answer if not is_correct else johnny_answer\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # Total length in cm (3m = 300cm)\n    piece1_cm = 147\n    piece2_cm = 32.5\n    piece3_cm = 67\n    \n    # Calculate the length of the fourth piece\n    piece4_cm = total_length_cm - (piece1_cm + piece2_cm + piece3_cm)\n    \n    return piece4_cm\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    from itertools import product\n    \n    # Define the probabilities for A, B and C passing the test.\n    probabilities = [(0.5, 0), (0.5, 1), (0.4, 0), (0.4, 1), (0.2, 0), (0.2, 1)]\n    \n    # Get the cartesian product of probabilities for A, B and C\n    outcomes = list(product(probabilities, repeat=3))\n    \n    # Determine the number of passes based on outcomes\n    pass_counts = {0: 0, 1: 0, 2: 0, 3: 0}\n    for outcome in outcomes:\n        # Each outcome is a tuple of tuples; we are interested in the second element (1 or 0)\n        pass_count = sum(pass_result[1] for pass_result in outcome)\n        pass_counts[pass_count] += 1\n    \n    # Get the count for the most likely number of people passing the test\n    most_likely_passes = max(pass_counts, key=pass_counts.get)\n    \n    return most_likely_passes\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n    \n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    return 308 - 197\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    total_papers = 18\n    interval = 3\n    leaves_required = (total_papers - 1) // interval\n    \n    return leaves_required\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    part1 = (101 + 234 + 567) * (234 + 567 + 89)\n    part2 = (101 + 234 + 567 + 89) * (234 + 567)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # Start with 1\n    for i in range(2, 11):  # From 1/2 to 9/10\n        ans += (i - 1) * (1/i)\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n\n    # Initial ratio of watches to caps\n    equation1 = Eq(watches/caps, 8/11)\n\n    # After selling 88 caps, the new ratio\n    equation2 = Eq(watches/(caps - 88), 12/11)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    total_houses = 10\n    passed_houses = 6\n    time_between_six_houses = 30  # in minutes\n\n    # As the time taken is directly proportional to the number of houses passed,\n    # we can use the unitary method to calculate the time taken for one house and then for all ten houses.\n    time_per_house = time_between_six_houses / (passed_houses - 1)\n    total_time = time_per_house * (total_houses - 1)\n\n    return total_time\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    # Iterate through possible values for the four digits, considering the given constraints\n    for A in range(1, 10): # First digit must be non-zero\n        for D in range(1, 10, 4): # Last digit must be 4 times the first digit and non-zero\n            if A == D // 4: # Check the relationship between first and last digits\n                B = A - 1 # Second digit is one less than the first\n                C = D - 1 # Third digit must be one less than the last digit due to multiplication by 4 reversing the digits\n                if len({A, B, C, D}) == 4: # Check if all digits are different\n                    ABCD = A * 1000 + B * 100 + C * 10 + D # Construct the original number\n                    DCBA = D * 1000 + C * 100 + B * 10 + A # Construct the reversed number\n                    if ABCD * 4 == DCBA: # Check if the number multiplied by 4 is its reverse\n                        return ABCD # Return the found number\n    return None # If no solution is found\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # total length in meters\n    total_length_cm = total_length_m * 100  # convert meters to centimeters\n\n    # Let the length of the shorter piece be x.\n    # Then the length of the longer piece is 2x.\n    # The total length is x + 2x = 3x.\n    # We know that 3x = total_length_cm.\n\n    shorter_piece_length_cm = total_length_cm / 3\n    longer_piece_length_cm = 2 * shorter_piece_length_cm\n\n    return longer_piece_length_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # If Jack wants to ensure that he wins, he must leave a multiple of 12 (1+11) for Ken\n    # So he must pick a number such that (2015 - picked_number) is a multiple of 12\n    # Therefore, 2015 modulo 12 gives us the number to pick to leave a multiple of 12 for Ken\n    \n    picked_number = 2015 % 12\n    return picked_number\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, we know that b = 0\n    # We also have the point (4, 8) that the line passes through.\n    x = 4\n    y = 8\n    # We can now use the point to determine the slope (m) of the line.\n    # Slope (m) can be calculated by dividing the change in y by the change in x.\n    m = y / x\n    \n    # Since we know that b = 0, the linear equation is simply y = mx\n    # We substitute the determined value of m into the equation.\n    linear_equation = f\"y={m}x\"\n    \n    return linear_equation\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    number = \"1200031093\"\n    return int(number)\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # the pattern is ●○●○○, which has 2 black balls (●) and 3 white balls (○)\n    # we find the total pattern sets needed to get 92 white balls\n    pattern_white = 3\n    total_patterns = 92 // pattern_white\n    white_balls_left = 92 % pattern_white\n    \n    # correcting for the remainder of white balls\n    if white_balls_left > 0:\n        total_patterns += 1\n    \n    # calculating the total balls, each pattern set has 5 balls (2 black and 3 white)\n    total_balls = total_patterns * 5 \n    \n    # accounting for the excess black balls if there were remaining white balls\n    if white_balls_left == 1:  # if there was one extra white ball, we have one extra black ball  \n        total_balls -= 1\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    # Loop through all the hours (00 to 23)\n    for hour in range(24):\n        # Loop through all the minutes (00 to 59)\n        for minute in range(60):\n            # Convert hour and minute to strings and concatenate\n            time_str = f\"{hour:02d}{minute:02d}\"\n            # Count how many times '4' appears in the string\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    num = 2015\n    return sum(int(d) for d in str(num)) % 2\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Since the dwarfs were born in seven consecutive years,\n    # their ages form an arithmetic sequence with a common difference of 1 year.\n    # If we denote the age of the youngest dwarf as a, then the ages are:\n    # a, a+1, a+2, a+3, a+4, a+5, a+6\n    # The sum of the ages of the youngest three is given as 42.\n    # So we have the following equation: a + (a+1) + (a+2) = 42\n\n    for a in range(1, 42):\n        if a + (a + 1) + (a + 2) == 42:\n            # Now we find the age of the oldest dwarf, which is a+6\n            return a + 6\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    return 78 + 263 - 174\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if pears % 6 == 2 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    final_passengers = 22\n    remaining_after_second_stop = final_passengers / (2/3)\n    initial_passengers = remaining_after_second_stop / (3/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    sharpened_shorter_mm = 4\n    current_length_cm = original_length_cm - (sharpened_shorter_mm / 10)\n    return current_length_cm\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Calculate the time for each segment of the race\n    time_first_segment = 420 / 7  # Time = Distance / Speed\n    time_middle_segment = 620 / 5\n    time_last_segment = (1200 - 420 - 620) / 8  # 1200 is the total length of the race\n\n    # Sum up the time for each segment to get the total time\n    total_time = time_first_segment + time_middle_segment + time_last_segment\n\n    return total_time\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    sam, peter, john_initial, john_final = symbols('sam peter john_initial john_final')\n\n    # Equation 1: Sam and Peter's sticker ratio\n    equation1 = Eq(sam, 7/5 * peter)\n\n    # Equation 2: John's stickers increase by 80%\n    equation2 = Eq(john_final, john_initial * 1.8)\n\n    # Equation 3: Sam gave 20% of his stickers to John\n    equation3 = Eq(john_final, john_initial + sam * 0.2)\n\n    # Equation 4: Peter gave 20% of his stickers to John\n    equation4 = Eq(john_final, john_initial + peter * 0.2)\n\n    # Equation 5: Sam had 20 stickers more than John in the end\n    equation5 = Eq(sam - sam * 0.2, john_final + 20)\n\n    # Solve equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (sam, peter, john_initial, john_final))\n\n    # Peter's initial stickers\n    return solutions[peter]\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_average = 89\n    current_total = current_average * 4  # Total score of 4 tests\n    desired_average = 95\n    test_full_score = 100\n    \n    # Assume Paul takes 'n' more tests with full marks\n    n = 0\n    while True:\n        total_tests = 4 + n\n        new_total = current_total + n * test_full_score\n        new_average = new_total / total_tests\n        if new_average >= desired_average:\n            break\n        n += 1\n    \n    return n\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    for ten_notes in range(73):  # Since he has a total of 72 notes, he can't have more than 72 ten dollar notes\n        two_notes = 72 - ten_notes \n        spent_ten_notes = 0.9 * ten_notes\n        spent_two_notes = 0.75 * two_notes\n        if ten_notes - spent_ten_notes == 2 * (two_notes - spent_two_notes):\n            gift_cost = 10 * spent_ten_notes + 2 * spent_two_notes\n            return gift_cost\n        \nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    meters_per_day = 75\n    days = 4\n    total_length = meters_per_day * days\n    return total_length\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    # 1/a + 1/b = 1/9\n    equation1 = Eq(1/a + 1/b, 1/9)\n    # 1/a + 1/c = 1/12\n    equation2 = Eq(1/a + 1/c, 1/12)\n    # 1/b + 1/c = 1/18\n    equation3 = Eq(1/b + 1/c, 1/18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    a_rate = solutions[a]\n    b_rate = solutions[b]\n    c_rate = solutions[c]\n\n    # The rate at which all three hoses fill the pool together\n    combined_rate = 1/a_rate + 1/b_rate + 1/c_rate\n\n    # The time to fill the pool with all three hoses on\n    time_to_fill = 1 / combined_rate\n\n    return time_to_fill\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # There are three colors, so we take one from each color to try to avoid duplicates.\n    markers_taken_without_duplicate = 3\n\n    # To be sure to get at least 2 of the same color, we take one more.\n    markers_taken_to_ensure_duplicate = markers_taken_without_duplicate + 1\n\n    return markers_taken_to_ensure_duplicate\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    # Let x be the number of $2 notes and y be the number of $5 notes.\n    # x + y = 58 => x = 58 - y\n    # 2x + 5y = 164\n    # Replace x from the first equation into the second equation:\n    # 2(58 - y) + 5y = 164\n    # Solve for y:\n    for y in range(59):  # y can't be more than 58\n        x = 58 - y\n        if 2 * x + 5 * y == 164:\n            return y\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    seventh_term = 105\n    common_difference = 120 - 105\n    nth_term = 100\n\n    # General formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # Where a_n is the nth term, a_1 is the first term, n is the term number, and d is the common difference\n    # However, we need to adjust the term number, as seventh_term is given as a_7 instead of a_1\n    # The adjusted term number for a_1 would be n' = 100 - 7 + 1\n\n    adjusted_nth_term = nth_term - 7 + 1\n\n    # Now we can calculate the 100th term using the adjusted term number\n    hundredth_term = seventh_term + (adjusted_nth_term - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the price of one muffin, then price of one cupcake is 3x\n    x = symbols('x')\n    \n    # Cellina spent 5/9 of her money on 36 cupcakes and 32 muffins.\n    # Let's set up the first equation for this condition.\n    # 36 cupcakes * 3x + 32 muffins * x = (5/9)*total_money\n    first_spending = Eq(36 * 3 * x + 32 * x, (5 / 9))\n\n    # She then used 1/6 of her money to buy more cupcakes\n    # She spent a total of $187.50 on all cupcakes\n    # Let's set up the second condition.\n    # total_money*(1/6) + price_already_spent_on_cupcakes = 187.50\n    # price_already_spent_on_cupcakes = 36 * 3 * x\n    second_spending = Eq((1 / 6) + (36 * 3 * x), 187.5)\n    \n    # Combining the two conditions, we'll get the total money Cellina had\n    combined_eqs = Eq((5 / 9) + (1 / 6), 187.5)\n    \n    # Now solve for the total money\n    total_money_solution = solve(combined_eqs)[0]\n    \n    # Now we can use the total money to solve for the price of one muffin\n    x_solution = solve(first_spending.subs(5 / 9 * total_money_solution, (5 / 9)), x)[0]\n    \n    # Finally, calculate the amount spent on muffins:\n    # 32 muffins * price of one muffin\n    money_spent_on_muffins = 32 * x_solution\n\n    return money_spent_on_muffins\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Minimum number of marbles in each box is 2, except for two boxes that can have the same number.\n    # Since all marbles have to be in multiples of 2, we start filling boxes with the smallest even numbers.\n    # As there are 10 boxes and 2 can contain the same number, we have 9 different multiples of 2 to consider.\n    # Therefore, we will fill 8 boxes with unique even numbers, starting from 2 (minimum even number > 0)\n    # and the last two boxes will contain the next even number.\n    \n    marbles = list(range(2, 2*9, 2))  # Smallest unique multiples of 2 for 8 boxes.\n    marbles.append(marbles[-1])  # Adding the same number of marbles as in the last unique box to two boxes.\n    \n    min_marbles = sum(marbles)  # Sum all marbles to get the smallest number.\n    \n    return min_marbles\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    ans = sum(range(1, 10)) + sum(range(4, 9))  # the sequence 1+2+3+...+9 added to 4+5+6+...+8\n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n\n    pigeons_per_cage = total_pigeons // total_cages\n    if total_pigeons % total_cages != 0:\n        pigeons_per_cage += 1\n\n    return pigeons_per_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # The number of sprinklers needed is one less than the number of parterres,\n    # since a sprinkler can cover the space between two parterres.\n    num_parterres = 1007\n    num_sprinklers = num_parterres - 1\n\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    number = 1991\n    while True:\n        number += 1\n        if str(number) == str(number)[::-1]:\n            return number - 1991\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    equation = Eq(8 + (total_length/6 + 4), total_length * (5/12))\n\n    solution = solve(equation, total_length)\n\n    return solution[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    three_digit_numbers = permutations(digits, 3)\n    count = sum(1 for _ in three_digit_numbers)\n    return count\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry, (7/5) * alexis)\n\n    # Marry and Alexis give 20% of their stickers to Charlotte\n    combined_stickers = marry + alexis\n    charlotte_new = charlotte + 0.20 * combined_stickers\n\n    # As a result, Charlotte's stickers increased by 80%\n    equation2 = Eq(charlotte_new, charlotte * 1.80)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    equation3 = Eq(marry - 0.20 * marry, charlotte_new + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # If after giving away 440 caps Justin had 5/9 of his collection left,\n    # then 4/9 of his collection is equal to the 440 caps he gave away\n    part_ratio = 4/9\n    initial_caps = 440 / part_ratio  # Calculate the initial number of caps\n\n    ans = int(initial_caps)  # Convert to int, as we can't have a fraction of a cap\n    return ans\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    perimeter = (144 + 204) * 2  # The perimeter of the field\n    number_of_corners = 4  # Number of corners\n    total_wheat_along_sides = 116 - number_of_corners  # Wheat on the sides excluding corners\n\n    distance_between_two_wheats = perimeter / total_wheat_along_sides\n\n    return distance_between_two_wheats\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    # The smallest multiple of 35 will be 35 itself, but we need one that ends with 35 and sum of all digits is 35.\n    # We know that a number ending with 35 will be divisible by 5, so the last digit must be 5.\n    # Now we will try each multiple of 35 and check their digit sum until we find one which satisfies the condition.\n\n    i = 1\n    while True:\n        num = 35 * i\n        if str(num).endswith('35'):\n            digit_sum = sum(int(digit) for digit in str(num))\n            if digit_sum == 35:\n                return num\n        i += 1\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_nuts = 112\n    sunny_nuts = 20\n    rainy_nuts = 12\n    \n    # Let the number of rainy days be x\n    # Then the number of sunny days will be (total_days - x)\n    \n    # total_nuts = (total_days - x) * sunny_nuts + x * rainy_nuts\n    # Solve for x\n    x = (total_days * sunny_nuts - total_nuts) / (sunny_nuts - rainy_nuts)\n\n    return int(x)\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Cost of bottles in pence\n    single_bottle_cost = 15\n    two_bottle_cost = 28\n    five_bottle_pack_cost = 60\n\n    # Minimum money needed (initialize to a large number)\n    min_money = float('inf')\n\n    # The maximum number of 5-bottle packs Ben can buy\n    max_five_packs = 17 // 5\n\n    # Iterate through all possible combinations of 5-bottle packs, 2-bottle packs, and 1-bottle\n    for five_packs in range(max_five_packs + 1):\n        for two_packs in range((17 - 5 * five_packs) // 2 + 1):\n            one_bottles = 17 - (5 * five_packs + 2 * two_packs)\n            total_cost = (five_packs * five_bottle_pack_cost) + (two_packs * two_bottle_cost) + (one_bottles * single_bottle_cost)\n\n            if total_cost < min_money:\n                min_money = total_cost\n\n    # Convert pence to pounds\n    ans = min_money / 100\n    return ans\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each round eliminates half of the players.\n    # To find out how many rounds we need, we just need to find out\n    # how many times we can divide the number of players by 2 until we get to 1.\n    \n    num_players = 4\n    rounds = 0\n    \n    # Keep dividing the number of players by 2 until we reach 1\n    while num_players > 1:\n        num_players /= 2\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    both_correct = 7\n    first_correct_only = 10 - both_correct\n    second_correct_only = 15 - both_correct\n    one_question_correct = first_correct_only + second_correct_only\n    return one_question_correct\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    days_off = (end_date - start_date).days + 1\n\n    return days_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts of candy Rachel and Alice have.\n    rachel, alice = symbols('rachel alice')\n\n    # Equation representing that after giving away 10 pieces, they have the same amount.\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Equation representing that after eating 8 pieces each, Rachel has 3 times as many as Alice.\n    equation2 = Eq(rachel - 18, 3 * (alice - 8))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Total number of pieces of candy originally.\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in m/s\n    time = 5  # time in seconds\n\n    length_of_train = speed * time  # distance = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(6):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Define the original expression\n    expression = \"285+15/5-2\"\n    \n    # Using eval to evaluate the expression with different combinations of brackets\n    results = set()  # Use a set to keep track of unique results\n    results.add(eval(expression))  # without any brackets\n\n    # Possible single pair brackets combinations\n    results.add(eval(\"(285+15)/5-2\"))\n    results.add(eval(\"285+(15/5)-2\"))\n    results.add(eval(\"285+15/(5-2)\"))\n\n    # Possible two pairs of brackets combinations\n    results.add(eval(\"((285+15)/5)-2\"))\n    results.add(eval(\"(285+(15/5))-2\"))\n    results.add(eval(\"285+(15/(5-2))\"))\n\n    # There are no other valid combinations with two pairs of brackets that change the result\n    \n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    solution = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solution[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    # Define the cost of a towel and a brush\n    towel_cost = 10\n    brush_cost = 3\n\n    # Define the total spent amount\n    total_spent = 59\n\n    # Calculate the maximum number of brushes Bud can buy\n    brush_count = 0\n    while (brush_cost * brush_count < 10) and ((total_spent - brush_cost * brush_count) % towel_cost == 0):\n        brush_count += 1\n\n    # Since brush count now is the number of brushes exceeding the £10 constraint,\n    # we subtract one to meet the \"spent less than £10 on brushes\" condition\n    return brush_count - 1\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "def solution():\n    from fractions import Fraction\n    ans = Fraction(0.49).limit_denominator()\n    return ans\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    # total teddy bears made\n    total_bears = 35\n    # number of days\n    days = 5\n    # since each day she makes 2 more bears than the day before\n    # we have an arithmetic sequence with common difference of 2\n    # let the number of bears she made on the first day be a\n    # then the number of bears made on the 5th day is a + 4*2 = a + 8\n    # the sum of an arithmetic progression is given by the formula\n    # S = n/2 * (first_term + last_term)\n    # 35 = 5/2 * (a + a + 8)\n    # solving for a we get\n    a = (total_bears / days) - 4 # subtract the 4 because it's 2 times the common difference\n    # number of teddy bears made on the fifth day is a + 8\n    fifth_day_bears = a + 8\n    return fifth_day_bears\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    # we can represent the equation as: 7x + 8 = 71\n    result_number = 71\n    multiplied_by = 7\n    added_number = 8\n    \n    # To find the original number, we need to perform the inverse operations\n    # First subtract the added number, then divide by the multiplied number\n    original_number = (result_number - added_number) / multiplied_by\n    \n    return original_number\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    count = 0\n    for digit_1 in [1, 8]: # The first digit cannot be 0 in a three-digit number\n        for digit_2 in [0, 1, 8]:\n            if digit_2 != digit_1:\n                for digit_3 in [0, 1, 8]:\n                    if digit_3 != digit_1 and digit_3 != digit_2:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n    \n    # To ensure we draw a blue marble, we must consider the worst-case scenario\n    # where we draw all pink and grey marbles first.\n    worst_case_non_blue = pink + grey\n    \n    # To then ensure we get a blue one, we need to draw one more after all non-blue ones.\n    draw_to_ensure_blue = worst_case_non_blue + 1\n    \n    return draw_to_ensure_blue\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    return 262 + 8\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n\n    total_miles = miles_per_day * days_in_two_weeks\n\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n\n    price_of_computer = sales_tax_paid / sales_tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from sympy import isprime\n\ndef solution():\n    def is_coprime(a, b):\n        return isprime(a + b)\n    \n    def permute_and_count(sequence, current_perm):\n        if len(current_perm) == len(sequence):\n            return 1\n        \n        count = 0\n        for i in sequence:\n            if i not in current_perm:\n                if not current_perm or is_coprime(current_perm[-1], i):\n                    count += permute_and_count(sequence, current_perm + [i])\n        \n        return count\n    \n    sequence = list(range(1, 9))\n    count = permute_and_count(sequence, [])\n    \n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3 / 10\n    whole = 6 / 7\n    percentage = (part / whole) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Equation representing the difference in numbers\n    equation1 = Eq(b, g - 30)\n\n    # Equation representing the numbers of students remaining after a fraction left the hall\n    equation2 = Eq((3/5)*b, (5/8)*(g - (3/5)*b))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Number of boys initially present at the graduation ceremony\n    num_boys = solutions[b]\n\n    return num_boys\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f represent the number of frogs before the magic\n    # Let d represent the number of dragonflies before the magic\n    f, d = symbols('f d')\n\n    # Equation 1: The amount of frogs is 9 more than that of dragonflies initially\n    equation1 = Eq(f, d + 9)\n\n    # After the magic show, the total number of animals should remain the same\n    # So the initial number of frogs + dragonflies = final number of frogs + dragonflies\n    # Equation 2: f + d = 11 frogs + 10 dragonflies (after the magic show)\n    equation2 = Eq(f + d, 11 + 10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (f, d))\n\n    return solutions[f]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - 9 - 19 - 29 - 39 - 49 - 59\n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    apples_amy = 26\n    apples_john = 8\n    s = (apples_amy - apples_john) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    ans = (4 * 4) + 4  # Solving the equation (24 - x) / 4 = 4  =>  x = (4 * 4) + 4\n    return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Work rates for pairs (A+B), (B+C), (A+C)\n    rate_ab = 1/3\n    rate_bc = 1/4\n    rate_ac = 1/8\n    \n    # Individual work rates (A), (B), (C)\n    rate_a = (rate_ab + rate_ac) - rate_bc\n    rate_b = (rate_ab + rate_bc) - rate_ac\n    rate_c = (rate_ac + rate_bc) - rate_ab\n\n    total_rate = rate_a + rate_b + rate_c\n\n    time_together = 1 / total_rate\n\n    return time_together\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Initial expression without brackets\n    expression = \"285+15/5-2\"\n    \n    # Different ways to insert brackets\n    expressions_with_brackets = [\n        f\"(285+15)/5-2\",\n        f\"285+(15/5)-2\",\n        f\"285+15/(5-2)\",\n        f\"(285+15/5)-2\",\n        f\"285+(15/5-2)\",\n        f\"(285+15/5-2)\",\n        f\"(285+15)/5-2\",\n        f\"285/15/(5-2)\"\n    ]\n    \n    # Evaluate each expression and add unique results to the set\n    results = set()\n    for expr in expressions_with_brackets:\n        results.add(eval(expr))\n    \n    # The number of unique results is the answer\n    return len(results)\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of 15% sugar water needed\n    x = symbols('x')\n    \n    # Equation for the total amount of sugar from both types of sugar water\n    total_sugar = Eq(2 * 0.45 + x * 0.15, (2 + x) * 0.25)\n    \n    # Solve for x\n    amount_x = solve(total_sugar, x)\n    \n    return amount_x[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Johnson and Vicky's coins\n    johnson, vicky = symbols('johnson vicky')\n\n    # Equation for the total number of coins\n    total_coins_eq = Eq(johnson + vicky, 48)\n\n    # Equation after Johnson gives Vicky 8 coins\n    after_giving_eq = Eq(vicky + 8, johnson - 8 - 2)\n\n    # Solve the system of equations\n    solution_dict = solve((total_coins_eq, after_giving_eq), (johnson, vicky))\n\n    # Johnson's coins\n    return solution_dict[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(candies / kids, 18)\n    equation2 = Eq(candies / (kids + 2), 15)\n\n    solutions = solve((equation1, equation2, candies - kids * 18 - 12), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2018):\n        number_str = '2' * i\n        number = int(number_str)\n        total_sum += number\n        total_sum %= 100000  # Keep the last 5 digits at each step\n    return total_sum\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    # We have the equation: (number + 6) * 7 = 77\n    # To find the number, we perform the inverse operations in the reverse order.\n    \n    # First, we divide 77 by 7\n    result_after_adding_6 = 77 / 7\n    \n    # Then, we subtract 6 from the result\n    original_number = result_after_adding_6 - 6\n    \n    return int(original_number)\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    equation1 = Eq(david, 3 * eugene)     # David has thrice as many cupcakes as Eugene\n    equation2 = Eq(david, eugene + 14)    # David has 14 more cupcakes than Eugene\n\n    solutions = solve((equation1, equation2), (david, eugene))\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n    total_cookies = 1170\n\n    # After transactions\n    sam_ate = sam / 4\n    tim_bought = tim / 5\n    \n    # Equation 1: initial cookies for Sam and Tim\n    eq1 = Eq(sam + tim, total_cookies)\n    # Equation 2: Sam has 663 fewer cookies than Tim after transactions\n    eq2 = Eq( (sam - sam_ate) + 663, tim + tim_bought)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (sam, tim))\n\n    # Sam's cookies eaten\n    cookies_eaten = solutions[sam] / 4\n\n    return cookies_eaten\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    return 297 + 196 + 388 + 199\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_weight = 0.6\n    total_cost = 11.4\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    kg_per_day = 24 / 6\n    kg_over_8_days = kg_per_day * 8\n    return kg_over_8_days\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry's rate of working\n    jerry_rate = 1 / 18\n    # Combined rate of Tom and Jerry\n    combined_rate = 1 / 6\n    # Tom's rate of working\n    tom_rate = combined_rate - jerry_rate\n    # Time taken by Tom to do the job alone\n    tom_time = 1 / tom_rate\n    return tom_time\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    number = symbols('number')\n    \n    # Condition: remainders are 1 when divided by 2, 3, 4, and 6\n    # Also, divisible by 7\n    equations = [\n        Eq(number % 2, 1), \n        Eq(number % 3, 1),\n        Eq(number % 4, 1),\n        Eq(number % 6, 1),\n        Eq(number % 7, 0)\n    ]\n    \n    # Solve equations with the condition that number is between 200 and 300\n    solutions = solve((equations), (number))\n    \n    # Filter solutions to find the one in the proper range\n    solution_in_range = [sol for sol in solutions if 200 <= sol <= 300]\n    \n    return solution_in_range[0]\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David walks at increased speed\n    t = symbols('t')\n\n    # Distance walked at initial speed is 150m/min for 10 mins\n    initial_speed_time = 10\n    initial_speed_distance = 150 * initial_speed_time\n\n    # New speed is 150m/min + 50m/min = 200m/min\n    new_speed = 150 + 50\n    \n    # Total distance = Distance at initial speed + Distance at new speed\n    total_distance = initial_speed_distance + new_speed * t\n    \n    # Equation representing total distance David walked\n    equation = Eq(total_distance, 3700)\n\n    # Solve the equation for t (time walked at increased speed)\n    t_solution = solve(equation, t)\n\n    # Total time spent = Initial time (10 mins) + time at increased speed\n    total_time = initial_speed_time + t_solution[0]\n\n    return total_time\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # Calculate how many packets can be bought with $20\n    packets_bought = 20 // 4\n\n    # Calculate the number of free sweets received\n    free_sweets = packets_bought // 2\n\n    # The maximum number of sweets is the count of sweets from packets plus free sweets\n    max_sweets = packets_bought * 8 + free_sweets\n\n    return max_sweets\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1 / 4)\n    return decimal_number\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Distribute one piece of candy to each child first, to satisfy\n    # the condition that each child gets at least one piece.\n    total_candy = 88 - 8\n    \n    # Now figure out the least number of pieces for the child\n    # who gets the most, by distributing the rest of the candy\n    # so that the difference between any two children is exactly one.\n    # The distribution will be as even as possible, so start by \n    # giving the first child the least amount of additional candy and incrementing\n    # up to the last child.\n    \n    # To model this, we first form a sequence which represents the \n    # difference in the number of candies between each child:\n    # 0, 1, 2, 3, ..., (7 - 1)\n    sequence = list(range(8 - 1))\n    \n    # Then, we distribute the remaining candies according to these differences\n    # as long as there are candies left. Each round, each child gets one more candy\n    # than the last, in sequence. When we run out of candies, the last value given\n    # will indicate the least number for the child with the most amount of candies.\n    while total_candy >= len(sequence):\n        total_candy -= sum(sequence) + len(sequence)  # Distribute and move to the next layer\n        sequence = [x + 7 for x in sequence]\n    \n    # When we can no longer distribute to all children evenly,\n    # the last child gets whatever is left, which will be the least\n    # amount for the child who has the most pieces.\n    least_most_pieces = 1 + sequence[-1] + total_candy\n    \n    return least_most_pieces\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initial counts of counters\n    pink = 5\n    purple = 7\n    orange = 8\n    initial_total = pink + purple + orange\n\n    # Chances of choosing a pink counter\n    initial_chance = pink / initial_total\n\n    # Double the chances of choosing a pink counter\n    double_chance = 2 * initial_chance\n\n    # Find how many extra pink counters needed to double the chances\n    # Let x be the number of extra pink counters to be added\n    # The new chance should be (pink + x) / (initial_total + x)\n    # So the equation will be (pink + x) / (initial_total + x) = double_chance\n    # Solving for x gives us the number of extra pink counters needed\n\n    # Let's setup the equation: (pink + x) / (initial_total + x) = 2 * (pink / initial_total)\n    # And solve for x\n    x = symbols('x')\n    equation = Eq((pink + x) / (initial_total + x), double_chance)\n    extra_counters = solve(equation, x)\n\n    return extra_counters[0]\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    # 40% more boys than girls\n    equation1 = Eq(boys, 1.4 * girls)\n    # After 24 boys and 24 girls left\n    equation2 = Eq(boys - 24, 1.5 * (girls - 24))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let x be the number of stamps Sally gave to Ting\n    # After giving away x stamps, Sally has (40 - x) stamps\n    # Ting has (32 + x) stamps\n    # The ratio of Sally's stamps to Ting's stamps is 1:2\n    # (40 - x) / (32 + x) = 1 / 2\n    # Solving for x will give us the number of stamps Sally gave to Ting\n    # And Ting's final amount will be 32 + x\n\n    sally_original = 40\n    ting_original = 32\n    ratio_sally = 1\n    ratio_ting = 2\n\n    x = symbols('x')\n    equation = Eq((sally_original - x) / (ting_original + x), ratio_sally / ratio_ting)\n    solution_x = solve(equation, x)\n\n    # Adding x to Ting's original stamps to find out how many she has in the end\n    ting_final = ting_original + solution_x[0]\n    return ting_final\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    def trailing_zeroes(n):\n        count = 0\n        while n >= 5:\n            n //= 5\n            count += n\n        return count\n\n    factorial_value = factorial(16)\n    ans = trailing_zeroes(factorial_value)\n    \n    return ans\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # To ensure 2 pairs of the same color, consider the worst case scenario\n    # She might take out all 4 black, all 4 grey before getting any pair\n    # After that, she needs just 2 reds to get one pair\n    # To guarantee the second pair, she would take 1 more sock\n    # which could be black or grey, forming a pair with the socks already taken out.\n    num_socks = 4 + 4 + 2 + 1\n\n    return num_socks\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 7, 47)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    sh_to_la = 12.25\n    la_to_sh = 12.25 + 1.5  # 90 minutes is 1.5 hours\n    total_time = sh_to_la + la_to_sh\n    return total_time\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n    # Given that the number of cupcakes and muffins were initially equal\n    equation1 = Eq(cupcakes, muffins)\n    # After selling, muffins left is twice the number of cupcakes left\n    equation2 = Eq(muffins - 12, 2 * (cupcakes - 60))\n\n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n\n    # Total number of cupcakes and muffins Demi had at first\n    total = solutions[cupcakes] + solutions[muffins]\n\n    return total\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of pocket money Helen receives each day\n    x = symbols('x')\n\n    # Helen spends $5 each day, so what she saves per day is (x - 5)\n    # George gets $3 more than Helen, so he receives (x + 3) each day\n    # George spends $5 each day, so what he saves per day is (x + 3 - 5) = (x - 2)\n    \n    # The amount of money Helen has saved when she has $60 is directly the number of days\n    # times the money she saves per day, because Helen saves (x - 5) each day:\n    helen_saved = (x - 5) * (60 / (x - 5))\n\n    # Similarly, the amount of money George has saved is the number of days\n    # times the money he saves each day, and he has $90 more than Helen:\n    george_saved = (x - 2) * (60 / (x - 5)) + 90\n\n    # Setup the equation based on their savings\n    equation = Eq(george_saved, helen_saved + 90)\n\n    # Solve the equation to find the value of x\n    solutions = solve(equation, x)\n\n    # Filter positive solutions since pocket money cannot be negative\n    helen_pocket_money = next(sol for sol in solutions if sol > 0)\n\n    return helen_pocket_money\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    ans = sum(range(1, 31)) + sum(range(1, 30))\n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_students = 18\n    reading_students = 22\n\n    both_classes = sport_students + reading_students - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    # Let the initial amount of money Eddi and Wiya have be 3x and 2x respectively\n    # Eddi's new amount is 3x + 4, and the new ratio is 8:5\n    # The new amount of money Eddi and Wiya have will be 8y and 5y respectively, where y is a new factor\n    # Based on the ratio, we have the equations:\n    # 3x + 4 = 8y (After Eddi gets $4 from Lisa)\n    # 2x = 5y (Wiya's amount remains the same)\n    # By solving these 2 equations, we can find the value of x and y, then calculate Wiya's amount (2x)\n    \n    # Equation 1: (3x + 4)/8 = y\n    # Equation 2: 2x/5 = y\n    \n    # y = (3x + 4)/8\n    # y = 2x/5\n    \n    # Thus (3x + 4)/8 = 2x/5\n    # 5*(3x + 4) = 8*2x\n    # 15x + 20 = 16x\n    # x = 20\n\n    # Now calculate Wiya's amount which is 2*x:\n    x = 20\n    wiya_money = 2 * x\n\n    return wiya_money\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, d = symbols('a d')\n\n    # 9th term: a + 8d\n    # 15th term: a + 14d\n    # 20th term: a + 19d\n    # 12th term: a + 11d\n\n    # Equation 1: 9th term is 18 more than the 15th term\n    # a + 8d = (a + 14d) + 18\n    equation1 = Eq(a + 8 * d, (a + 14 * d) + 18)\n\n    # Equation 2: Sum of the 20th term and the 12th term is 88\n    # (a + 19d) + (a + 11d) = 88\n    equation2 = Eq((a + 19 * d) + (a + 11 * d), 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Calculate the 32nd term: a + 31d\n    a_val = solutions[a]\n    d_val = solutions[d]\n    term32 = a_val + 31 * d_val\n\n    return term32\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # First part of the trip\n    speed_first_part = 40  # in km/h\n    time_first_part = 2  # in hours\n    distance_first_part = speed_first_part * time_first_part  # in km\n\n    # Second part of the trip\n    speed_second_part = 70  # in km/h\n    distance_second_part = 280  # in km\n    time_second_part = distance_second_part / speed_second_part  # in hours\n\n    # Total trip\n    total_distance = distance_first_part + distance_second_part  # in km\n    total_time = time_first_part + time_second_part  # in hours\n\n    # Average speed\n    average_speed = total_distance / total_time  # in km/h\n\n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_sevens = 8 * 9 * 9\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n\n    for penpals_3_page in range(total_penpals + 1):\n        penpals_4_page = total_penpals - penpals_3_page\n        if (penpals_3_page * 3) + (penpals_4_page * 4) == total_pages:\n            return penpals_3_page\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    ans = minutes / 60\n    return ans\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    str_number = str(number)\n    digit_value = int(str_number[-3]) * 10**2\n    return digit_value\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    days_in_packets = lcm(25, 20)\n    start_day = 1  # 1st March\n    \n    end_day = start_day + days_in_packets - 1\n    \n    # since March has 31 days, April has 30 days, and we need to handle this on a month by month basis\n    march_days = 31\n    april_days = 30\n    \n    if end_day <= march_days:\n        # next starting date in same month of March\n        month = 'March'\n        day = end_day\n    else:\n        end_day -= march_days\n        while True:\n            if end_day <= april_days:\n                month = 'April'\n                break\n            else:\n                end_day -= april_days\n    \n            if end_day <= march_days:\n                month = 'May'\n                break\n            else:\n                end_day -= march_days\n    \n            # since the LCM of the two numbers 25 and 20 is less than a year,\n            # the while loop will break within these three conditions\n\n    return f\"{end_day}th {month}\"\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # For the given problem, we first find the number of ways to arrange \n    # the four dancing performances with space between them for singing performances.\n    # We can consider that there are 5 spots (D_S_D_S_D_S_D_S_D) where D stands for dance and S for sing.\n    # In these spots, we can put the 6 singing performances where at least 1 singing performance goes between two dance performances.\n    \n    # Number of ways to choose 4 spots for dancing out of the 5 available spots\n    dance_spots = factorial(5) / (factorial(4) * factorial(5 - 4))\n    \n    # Number of permutations for the 6 singing performances \n    sing_permutations = factorial(6)\n    \n    # Calculate the final answer by multiplying the two\n    ans = dance_spots * sing_permutations\n    return int(ans)\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    from fractions import Fraction\n\n    A = 1\n    A_delta_a1 = Fraction(1, 2)\n    A_delta_a2 = Fraction(2, 3)\n    A_delta_a3 = Fraction(7, 8)\n    A_delta_a4 = Fraction(29, 30)\n    A_delta_a5 = Fraction(139, 144)\n    A_delta_a6 = Fraction(839, 840)\n    \n    a1 = A - A_delta_a1 \n    a2 = A - A_delta_a2\n    a3 = A - A_delta_a3\n    a4 = A - A_delta_a4\n    a5 = A - A_delta_a5\n    a6 = A - A_delta_a6\n\n    a0 = Fraction(A) - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    m = a0.numerator\n    n = a0.denominator\n\n    return m + n\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # All possible digits based on teacher's hints\n    possible_digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n    \n    # 5430 -> None of them is right -> Exclude these digits\n    possible_digits -= set('5430')\n    \n    # 8642 -> Two of the digits are right and in the right position\n    # Therefore, the digits in the positions where 8765 and 1023 coincide with 8642 cannot be used.\n    # Since 8 and 6 are in the same position in 8765 and 8642 and teacher's hint says that in 8765,\n    # two digits are correct but in the wrong position, it implies 8 and 6 cannot be the first and third digits\n    # Since in 1023 and 8642, the digits 1 and 3 are in different positions, they cannot be the second and fourth digits.\n    # Considering all hints, 6 and 4 must be the correct digits in the right positions.\n\n    # The correct number must be of the form _6_4, where _ are digits not yet determined\n    # Based on the hints for 8765 and 1023, 0, 1, 7, and 3 are potentially correct and in the wrong positions\n\n    # So, let's try the remaining possible digits (2 and 9) in the first position and check the conditions\n    for d1 in possible_digits - set('64'):\n        for d2 in possible_digits - set('64'):\n            if d1 != d2:  # Since all digits must be unique\n                guess_number = d1 + '6' + d2 + '4'\n                # Check if it satisfies the conditions for the number 1023\n                count_1023 = sum(1 for x, y in zip(guess_number, '1023') if x == y)\n                # Check if it satisfies the conditions for the number 8765\n                count_8765 = sum(1 for x, y in zip(guess_number, '8765') if x == y)\n                \n                # If the number matches the conditions for both guessed numbers, return it\n                if count_1023 == 2 and count_8765 == 2:\n                    return int(guess_number)\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let the original number be n\n    n = symbols('n')\n\n    # Equation for the mistake (dividing by 4 and subtracting 25)\n    mistake_eq = Eq(n / 4 - 25, 2021)\n\n    # Solve for n\n    mistaken_n = solve(mistake_eq, n)[0]\n\n    # Equation for the correct calculation (multiplying by 4 and adding 25)\n    correct_eq = 4 * mistaken_n + 25\n\n    return correct_eq\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from sympy import factorint\n    \n    # Find the prime factors of each number\n    factors_75 = factorint(75)\n    factors_56 = factorint(56)\n    factors_12 = factorint(12)\n    factors_105 = factorint(105)\n    \n    # Sum the powers of 2 and 5 from each factorization\n    power_of_2 = factors_75.get(2, 0) + factors_56.get(2, 0) + factors_12.get(2, 0) + factors_105.get(2, 0)\n    power_of_5 = factors_75.get(5, 0) + factors_56.get(5, 0) + factors_12.get(5, 0) + factors_105.get(5, 0)\n    \n    # The number of zeros is determined by the minimum of the power of 2 and power of 5\n    number_of_zeros = min(power_of_2, power_of_5)\n    \n    return number_of_zeros\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    chloe_to_donna_ratio = 4\n    difference = 816\n    donna_books = difference / (chloe_to_donna_ratio - 1)\n\n    return int(donna_books)\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x + 4) / 8), 3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    adults, children, boys, girls = symbols('adults children boys girls')\n    equation1 = Eq(adults, 3 * children)\n    equation2 = Eq(boys, 2 * girls)\n    equation3 = Eq(adults, girls + 176)\n    \n    # Since boys + girls = children, we can write:\n    equation4 = Eq(children, boys + girls)\n    \n    # And since adults = 3 * children and boys = 2 * girls,\n    # We can replace adults in equation3 with 3 * children\n    # And boys with 2 * girls, so we have:\n    # 3 * children = girls + 176\n    # 2 * girls + girls = children\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (adults, children, boys, girls))\n\n    total_people = solutions[adults] + solutions[children] + solutions[boys] + solutions[girls]\n    \n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # because the ones digit in 9^1 is 9, 9^2 is 1, 9^3 is 9, 9^4 is 1, and so on.\n    # there's a repeating pattern every 2 powers: 9, 1, 9, 1, ...\n    # find the remainder of 99 divided by 2 to determine the ones digit.\n    exponent_remainder = 99 % 2\n    if exponent_remainder == 1:\n        return 9  # if the remainder is 1, then the ones digit is 9 (since it's the first in the pattern)\n    else:\n        return 1  # if the remainder is 0, then the ones digit is 1 (since it's the second in the pattern)\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193):\n        if isprime(a):\n            b = (193 - 3*a) / 11\n            if b.is_integer() and isprime(int(b)):\n                return int(a + b)\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            if 7 * (10*a + b) == 100*a + b:\n                return 10*a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n    \n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    annabella_cost = solutions[banana] + solutions[apple]\n    \n    return annabella_cost\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_initial = 3\n    houses_built_initial = 14\n    days_initial = 4\n\n    workers_final = 9\n    days_final = 2\n\n    # Calculate the rate of how many houses can be built by one worker in a day\n    houses_per_worker_per_day = houses_built_initial / (workers_initial * days_initial)\n\n    # Calculate how many houses can be built by 9 workers in 2 days\n    houses_built_final = workers_final * days_final * houses_per_worker_per_day\n\n    return int(houses_built_final)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    # Calculate the GCD of first two numbers\n    result = gcd(12, 15)\n    # Calculate the GCD of the result with the third number\n    result = gcd(result, 60)\n    \n    return result\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    min_product = float('inf')\n    for bob in range(11, 28):\n        for fido in range(1, bob):\n            rex = 28 - bob - fido\n            if fido == bob - 10 and rex != fido and rex != bob and rex > fido:\n                product = bob * rex * fido\n                min_product = min(min_product, product)\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    \n    children_fraction = 2 / 5\n    women_fraction = 1 / 4\n    men_fraction = 1 - (children_fraction + women_fraction)\n    \n    equation = Eq(children_fraction * total_people, men_fraction * total_people + 20)\n    \n    solutions = solve(equation, total_people)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for cost per ball\n    cost_per_ball = symbols('cost_per_ball')\n    \n    # Adam's initial amount of money is the same in both scenarios.\n    # If he buys 5 balls and has $15 left, we can say that his initial money is cost_per_ball*5 + $15\n    # If he buys 8 balls and needs $12 more, his initial money is also cost_per_ball*8 - $12\n    # Therefore, both expressions equal the same initial amount, and we can set them equal to each other:\n    equation = Eq(cost_per_ball*5 + 15, cost_per_ball*8 - 12)\n    \n    # Solve the equation for cost_per_ball\n    solution = solve(equation, cost_per_ball)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "from math import gcd\n\ndef solution():\n    max_sum = 0\n    for A in range(100, 1000):\n        for B in range(100, 1000):\n            if gcd(A, B) == 75 and len(set(str(A))) < 3 and len(set(str(B))) < 3:\n                max_sum = max(max_sum, A + B)\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9  # height after second bounce in cm\n    bounce_factor = 1/3\n\n    # Calculate height after first bounce\n    height_after_first_bounce = height_after_second_bounce / bounce_factor\n\n    # Calculate initial height\n    initial_height = height_after_first_bounce / bounce_factor\n\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    from fractions import Fraction\n    \n    # Evaluate the first complex fraction\n    numerator1 = Fraction(1, 30) + Fraction(1, 6)\n    denominator1 = Fraction(2, 25)\n    first_complex_fraction = numerator1 / denominator1\n    \n    # Evaluate the second complex fraction\n    numerator2 = 2 - Fraction(2, 3)\n    denominator2 = Fraction(8, 3)\n    second_complex_fraction = numerator2 / denominator2\n    \n    # Calculate the final answer\n    ans = first_complex_fraction + second_complex_fraction\n    \n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the masses of Xuanxuan, Lingling, and Jay\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    # Given equations\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    # Return Xuanxuan's mass\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, solve\n\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    # Lee and Nancy together finish 1 job in 10 hours\n    together_rate = 1 / 10\n\n    # Equation 1: lee_rate + nancy_rate = together_rate\n    equation1 = lee_rate + nancy_rate - together_rate\n\n    # Equation 2: Lee works 6 hours and Nancy works 20 hours to complete 1 job\n    equation2 = 6 * lee_rate + 20 * nancy_rate - 1\n\n    # solve the equations for lee_rate and nancy_rate\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    # Get Nancy's rate and calculate how long it would take her to finish the job alone\n    nancy_time_to_finish = 1 / solutions[nancy_rate]\n\n    return nancy_time_to_finish\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_pupils = 40 + 30\n    total_average = 90\n    total_marks = total_average * total_pupils\n    \n    class_a_average = symbols('class_a_average')\n    class_b_average = class_a_average + 7\n    \n    # Equations based on the total marks\n    equation = Eq((class_a_average * 40) + (class_b_average * 30), total_marks)\n    \n    class_a_average_value = solve(equation, class_a_average)\n    class_b_average_value = class_a_average_value[0] + 7\n    \n    return class_b_average_value\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Calculate the denominators for each fraction within the complex fraction\n    denom1 = 2007 * 2008\n    denom2 = 2008 * 2009\n    denom3 = 2009\n\n    # Since the fractions have a common denominator, we can sum them up directly\n    sum_denoms = (denom2 * denom3 + denom1 * denom3 + denom1 * denom2) / (denom1 * denom2 * denom3)\n\n    # The value of the complex fraction is the reciprocal of the sum\n    ans = 1 / sum_denoms\n\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    count = 0\n    # The number of ten-pence coins Jeremy uses can range from 0 to 5\n    for ten_p in range(6):\n        # The number of twenty-pence coins Jeremy uses can range from 0 to 3\n        for twenty_p in range(4):\n            # Jeremy has only one fifty-pence coin, so he uses either 0 or 1\n            for fifty_p in range(2):\n                if ten_p * 10 + twenty_p * 20 + fifty_p * 50 == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    num_boats = (students + boat_capacity - 1) // boat_capacity\n    return num_boats\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    return 11 - 2 + 7 - 4 + 2\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    result = (250250**2) - (250249 * 250251)\n    return result\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    # People in front of Mark = Total people - Mark - People behind Mark\n    # Mark is one person, hence \"-1\"\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    digits = 0\n    for number in range(1, 201):\n        digits += len(str(number))\n    return digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        num = int(f'9{a}8{a}')\n        if num % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # For a number to be divisible by 4, the last two digits must be divisible by 4.\n    # We only need to find J such that 5J6 is divisible by 4.\n    for J in range(10):  # J can be 0-9 because it's a single digit.\n        if (int(f\"5{J}6\")) % 4 == 0:  # check divisibility by 4\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    equation1 = Eq(5*table + 12*chair, 720)\n    equation2 = Eq(table, chair + 25)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n    \n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n    \n    solutions = solve((equation1, equation2), (apple, peach))\n    \n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    # We have the equation (x + 7) * 6 = 66\n    # Applying inverse operations to solve for x:\n    \n    # Divide both sides by 6\n    intermediate = 66 / 6\n    \n    # Subtract 7 from the result to get the original number\n    original_number = intermediate - 7\n    \n    return original_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    water_audrey = 177\n    water_jane = water_audrey + 32\n    total_water = water_audrey + water_jane\n    \n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*9 - 2*x, 33)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    return 36 + 17 + 18 + 24 + 33\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # Let the time spent going up the hill be 5t and going down the hill be 4t\n    # The total time spent is 360 minutes, so 5t + 4t = 360\n    total_time = 360\n    up_time = (5/9) * total_time\n    down_time = (4/9) * total_time\n\n    # Let the speed going down the hill be x and going up the hill be x-10\n    # Distance is speed multiplied by time\n    # Total distance is the sum of distances going up and down\n    # down_speed - up_speed = 10\n    down_speed = up_time / down_time * 10 + 10\n    up_speed = down_speed - 10\n\n    # Calculate distances\n    up_distance = up_time * up_speed\n    down_distance = down_time * down_speed\n\n    # Total distance is the sum of up_distance and down_distance\n    total_distance = up_distance + down_distance\n\n    # Return the total distance\n    return total_distance\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    n = 24  # since the last term is 23 times 24^2\n    sum_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_cubes = ((n * (n + 1)) // 2) ** 2\n\n    # We calculate the dot product of two sequences: [0, 1, 2, ..., 23] and [1^2, 2^2, 3^2, ..., 24^2]\n    # Based on the distributive law, we subtract the product of sums of cubes and squares\n    # Hence, the dot product is sum_cubes - sum_squares\n    ans = sum_cubes - sum_squares\n\n    return ans\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    packets_25 = 25\n    packets_20 = 20\n\n    least_common_multiple = lcm(packets_25, packets_20)\n    \n    days = least_common_multiple // 1  # Since she takes one a day of each type\n\n    # March 1 is start, so subtract 1 day when calculating the new start date\n    next_start_day = days - 1\n\n    return next_start_day\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    for days in range(1, 94):  # Since we cannot use more watermelons than we have\n        remaining_watermelons = 94 - 9 * days\n        remaining_pineapples = 138 - 9 * days\n        if remaining_pineapples == 3 * remaining_watermelons:\n            return days\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_by_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_by_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom, jerry, years = symbols('tom jerry years')\n\n    # Tom will be twice his age in 4 years\n    equation1 = Eq(tom + 4, 2 * tom)\n\n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n\n    # Solve for Tom's and Jerry's current age\n    current_ages = solve((equation1, equation2), (tom, jerry))\n\n    tom_age = current_ages[tom]\n    jerry_age = current_ages[jerry]\n\n    # Jerry's age to be doubled\n    equation3 = Eq(jerry + years, 2 * jerry)\n\n    # Solve for years when Jerry's age will be doubled\n    years_when_double = solve(equation3, years)\n\n    return years_when_double[0]\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n\n    difference = fruits_per_truck - fruits_per_car\n\n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    arrival_time = (9 * 60) + 22  # Convert 9:22 AM to minutes\n    bus_interval = 35  # Bus leaves every 35 minutes\n    first_bus_time = (9 * 60) + 15  # Convert 9:15 AM to minutes\n\n    # Find the next bus time after Aiden's arrival\n    while first_bus_time < arrival_time:\n        first_bus_time += bus_interval\n\n    # Calculate the waiting time\n    wait_time = first_bus_time - arrival_time\n\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n\n    num_weeks = days_until_birthday // days_in_a_week\n\n    return num_weeks\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    # Eddie's walking speed\n    speed_eddie = 62\n    # Brother's walking speed\n    speed_brother = 70\n\n    # They meet after 5 minutes\n    time_meeting = 5\n\n    # Eddie's distance to the meeting point\n    distance_eddie = speed_eddie * time_meeting\n    # Brother's distance to the meeting point\n    distance_brother = speed_brother * time_meeting\n\n    # Total distance from home to the mall is the sum of the distances Eddie and his brother walked\n    total_distance = distance_eddie + distance_brother\n\n    return total_distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import primerange, isprime\n\n    my_age = 7\n    brother_age = 5\n    mother_age = 29\n    father_age = 31\n    \n    for year in range(2017 + 1, 10000):  # Assuming solution within the year 10000\n        my_age += 1\n        brother_age += 1\n        mother_age += 1\n        father_age += 1\n        \n        if all(isprime(age) for age in [my_age, brother_age, mother_age, father_age]):\n            return father_age\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((i**2 for i in range(3, 52, 2))) - sum((i**2 for i in range(4, 51, 2)))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n    # The number of lamp posts is the number of 3-flower groups plus 1\n    num_lamp_posts = (total_flowers // flowers_between_lamps) + 1\n    # The length of the road divided by the number of intervals between lamp posts\n    distance_between_lamps = 50 / (num_lamp_posts - 1)\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n = 7\n    ans = 1 + n*(n+1)//2 + (n*(n-1)//2)*(n-2)//3\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_to_each_friend = 15\n    number_of_friends = 8\n\n    books_given_away = books_given_to_each_friend * number_of_friends\n    books_packed_in_box = total_books - books_given_away\n\n    return books_packed_in_box\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lora, mother = symbols('lora mother')\n    equation1 = Eq(mother, 3 * lora)\n    equation2 = Eq(lora + mother, 44)\n    \n    solutions = solve((equation1, equation2), (lora, mother))\n    \n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # Find the unit digit of a power of 4\n    # The pattern of unit digits for powers of 4 is: 4, 6, 4, 6, ..., which repeats every 2 steps.\n    # Since 2008 is even, the unit digit will be 6.\n    return 6\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    num = \"ninety thousand and nine\"\n    num_words = {'ninety': 90, 'thousand': 1000, 'and': '', 'nine': 9}\n    parts = num.split()\n    number = 0\n    for part in parts:\n        if part in num_words:\n            number = number * num_words.get(part, 1) + num_words.get(part, 0)\n    return number\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    male_fraction = 3 / 5\n    \n    male_adults = total_adults * male_fraction\n    return int(male_adults)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    \n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to the shops\n    paths_to_audio = 6\n    paths_to_book = 4\n    paths_to_chapel = 5\n\n    # Number of paths from shops to school\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n\n    # Using the multiplication principle to find the total paths from home to school\n    total_paths = (paths_to_audio * paths_audio_to_school +\n                   paths_to_book * paths_book_to_school +\n                   paths_to_chapel * paths_chapel_to_school)\n    \n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let the weights of Adam, Ben, and Carl be A, B, and C respectively.\n    # We have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Adding all the equations, we get:\n    # 2(A + B + C) = 102 + 97 + 93\n    total_double = 102 + 97 + 93\n    # To find the total weight A + B + C, we divide by 2\n    total_weight = total_double / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    arrival_hour = 12\n    arrival_minute = 40\n\n    stay_hours = 2\n    stay_minutes = 40\n\n    leave_hour = arrival_hour + stay_hours + (arrival_minute + stay_minutes) // 60\n    leave_minute = (arrival_minute + stay_minutes) % 60\n\n    # Since the time is in PM and it exceeds 12, we need to consider the 12-hour clock format\n    if leave_hour > 12:\n        leave_hour -= 12\n\n    return f\"{leave_hour}:{str(leave_minute).zfill(2)} PM\"\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins * (1/3)\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n    \n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.5 + twenty_pence_coins * 0.2\n    \n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    belle_sticks = 49\n    added_sticks = 11\n\n    eddie_sticks = (belle_sticks + added_sticks) * 2 - added_sticks\n\n    return eddie_sticks\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    warmer_by = 12\n    exeter_temp = glasgow_temp + warmer_by\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        ""
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    total_boxes = 6\n    total_weight = weight_per_box * total_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    # Let's denote x as the number of coins John has, and y as the number of coins Kofi has.\n    # We can formulate two equations based on the information given in the problem:\n    # 1. John and Kofi together have 25 coins, so x + y = 25\n    # 2. If John gives Kofi 4 coins, Kofi will have three fewer coins than John,\n    #    which means y + 4 = x - 4 - 3\n\n    # We'll now solve these two equations to find the value of x (the number of coins John has).\n\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbols for two variables\n    x, y = symbols('x y')\n\n    # Define the equations\n    eq1 = Eq(x + y, 25)\n    eq2 = Eq(y + 4, x - 4 - 3)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_each = total_tea // 2\n    tea_to_give = tea_each - 179\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [2, 4, 6]\n    perm = permutations(digits)\n    \n    count = sum(1 for _ in perm)\n    \n    return count\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamps = 50\n    distance_between_lamps = 2  # in meters\n\n    # Since there are lamp posts at opposite ends, we don't count the last lamp post for distance\n    road_length = (num_lamps - 1) * distance_between_lamps\n\n    return road_length\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    total_heads = 53\n    total_feet = 102\n    \n    for special_rabbits in range(total_heads + 1):\n        normal_rabbits = total_heads - special_rabbits\n        if (normal_rabbits * 4 + special_rabbits * 2) == total_feet:\n            return normal_rabbits, special_rabbits\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    # Calculate the price per one banana\n    price_per_banana = 98 / 7\n    \n    # Calculate the price for 13 bananas\n    total_price_for_13_bananas = price_per_banana * 13\n    \n    # Convert the total price for 13 bananas to pounds (since 1 pound = 100p)\n    total_price_in_pounds = total_price_for_13_bananas / 100\n    \n    # Given that we have 10 pounds, calculate the change\n    change = 10 - total_price_in_pounds\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    fraction = 1 / 70\n    decimal_str = format(fraction, '.560f')\n    ans = int(decimal_str[502])\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_sweets_after_eating = 4\n    sweets_received_by_neelesh = neelesh_sweets_after_eating + 1  # Adding the sweet that Neelesh ate\n    total_sweets = sweets_received_by_neelesh * 6  # Because Neelesh got 1/6 of the total sweets\n    ayesha_sweets_left = total_sweets - sweets_received_by_neelesh\n\n    return ayesha_sweets_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(3) / Fraction(1, 3)\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    # Calculate the numerator\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    \n    # Calculate the denominator\n    denominator = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    \n    # Calculate the final answer\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the initial number of gummy bears and l represent the initial number of lollipops\n    g, l = symbols('g l')\n\n    # Given the initial ratio of gummy bears to lollipops is 5:7\n    equation1 = Eq(g/l, 5/7)\n\n    # After adding 120 pieces to each, the ratio becomes 4:5\n    equation2 = Eq((g+120)/(l+120), 4/5)\n\n    # Solve the system of equations to find the values of g and l\n    solutions = solve((equation1, equation2), (g, l))\n\n    # Calculate the total pieces of candy now\n    total_candy_now = solutions[g] + 120 + solutions[l] + 120\n\n    return total_candy_now\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):  # a can range from 1 to 424 (inclusive)\n        b = 425 - a          # Ensure that a + b equals 425\n        if a < b and gcd(a, b) == 1:  # a must be less than b and gcd(a,b) should be 1 for fraction to be simplified\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    # Total number of marbles\n    total_marbles = 560\n    \n    # Number of marbles in Box A\n    box_a = 80\n    \n    # Let x be the number of marbles in Box C\n    # Therefore, Box B will have 2x marbles\n    # The sum of marbles in all boxes is equal to the total number of marbles\n    # So: box_a + 2x + x = total_marbles\n    # Solving for x: x = (total_marbles - box_a) / 3\n    box_c = (total_marbles - box_a) // 3\n    \n    return box_c\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    stone_to_pounds = 14\n\n    david_weight_pounds = david_weight_stone * stone_to_pounds\n    weight_difference = abs(andrew_weight_pounds - david_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 25  # 10th term in the sequence\n    common_difference = 3  # Common difference in the sequence\n    n = 10  # The term position of the nth_term\n\n    first_term = nth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    sum_numbers = sum(numbers)\n    total_sum = sum_numbers * 3\n    return total_sum\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the base 3 numbers to base 10 for calculation\n    num1_base10 = int(str(12101), 3)\n    num2_base10 = int(str(2210), 3)\n    \n    # Perform the subtraction in base 10\n    result_base10 = num1_base10 - num2_base10\n    \n    # Convert the result back to base 3\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n    \n    return int(ans)\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 3.20 * 0.5 * 0.5\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # List the numbers that will not differ by 5 if chosen.\n    forbidden_differences = set(range(1, 21))  # Set of first 20 positive integers\n    max_sets = []\n\n    # Iterate over the set and remove numbers that differ by 5\n    while forbidden_differences:\n        num = forbidden_differences.pop()\n        current_set = {num}\n        for diff in range(1, 5):\n            forbidden_differences.discard(num + diff)    # Remove numbers that would create a difference of 5\n            forbidden_differences.discard(num - diff)    # Remove numbers that would create a difference of 5\n        max_sets.append(current_set)\n\n    # The length of the max_sets would give us the maximum number of n that we can have.\n    n = sum(len(s) for s in max_sets)\n\n    return n\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake, biscuit = symbols('cake biscuit')\n\n    equation1 = Eq(1*cake + 2*biscuit, 450)\n    equation2 = Eq(2*cake + 3*biscuit, 800)\n\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John's and his mother's current ages\n    john, mother = symbols('john mother')\n\n    # Given: John's age in 8 years is the same as his mother's age 20 years ago\n    # So, we create the equation based on that information\n    equation1 = Eq(john + 8, mother - 20)\n\n    # We also know at some point mother's age was 5 times John's age\n    # We are not sure about the exact time, but we know the difference between their ages will remain constant\n    # This difference is obtained from equation1\n    age_difference = mother - john\n\n    # We create another equation based on the age difference and the 5 times age factor\n    equation2 = Eq(mother, 5 * (mother - age_difference))\n\n    # We then solve the equations to find the current ages of John and his mother\n    solutions = solve((equation1, equation2), (john, mother))\n\n    # The question asks for John's age when his mother was 5 times his age\n    # So we find John's age at that time\n    johns_age_when_mother_5_times = mother / 5\n    johns_age_at_that_time = johns_age_when_mother_5_times.subs(mother, solutions[mother])\n\n    return johns_age_at_that_time\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct_answer = 12\n    total_questions = correct_answers + wrong_answers\n\n    total_marks = correct_answers * marks_per_correct_answer\n    average_mark = total_marks / total_questions\n\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    numerator = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    denominator = ((2017 + 1/3) - 2016.875) * 17\n    fraction = numerator / denominator * (3 + 23/32)\n\n    return fraction\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for B in range(1, 10):\n        for _1 in range(10):\n            total_pencils = int(f\"{B}{_1}{B}\")\n            if total_pencils % 44 == 0:\n                pencils_per_pupil = total_pencils // 44\n                return pencils_per_pupil\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the number of letters each student wrote\n    kevin, sara, james = symbols('kevin sara james')\n    \n    # Creating equations based on the problem statement\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n    \n    # Returning the number of letters Kevin wrote\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 6, 7)\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = {M % i for i in range(2, 11)}\n        if len(remainders) == 9 and all(x != 0 for x in remainders):\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    # Tom's speed is 1 lap per 24 minutes\n    # William's speed is 1 lap per 8 minutes\n    # LCM of 24 and 8 gives the time (in minutes) at which they meet for the first time\n    import math\n    # Find the least common multiple (LCM) of 24 and 8\n    lcm = math.lcm(24, 8)\n    return lcm\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    # since the relationship between what Romily and Reema collect is provided\n    # but the actual amounts are not given, it's impossible to determine\n    # the exact amount that Reema collected without more information.\n    # Therefore, we return None or an indication that it cannot be solved with given info.\n    return \"Cannot be determined with the given information\"\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    allison, ben, eunice = symbols('allison ben eunice')\n    \n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n    \n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    \n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n    \n    # Using Inclusion-Exclusion Principle to find the intersection of two sets\n    both_competitions = math_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize the number 28 into its prime factors\n    factors = factorint(28)  \n    print(factors)\n    # To make a perfect square, each prime factor's exponent needs \n    # to be an even number. If it's odd, multiply by that prime fact.\n    perfect_square_mult = 1\n    for prime, exp in factors.items():\n        if exp % 2 != 0:\n            perfect_square_mult *= prime\n\n    return perfect_square_mult\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n    \n    num_posts = (field_length // post_interval) + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers = [10, 20, 30, 50, 60, 70]\n    negative_numbers = [6, 16, 26, 46, 56, 66]\n\n    ans = sum(positive_numbers) - sum(negative_numbers)\n    \n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Total time spent by Benson after arriving home until lunch finished\n    total_time_spent = timedelta(minutes=(10 + 20 + 20))  # 10 min playing, 20 min TV, 20 min lunch\n    # Lunch finished at 2:50 pm\n    lunch_finished_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    # Calculate the time Benson reached home\n    home_reached_time = lunch_finished_time - total_time_spent\n\n    return home_reached_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "import math\n\ndef solution():\n    # Since A and B always have to be next to each other, we can treat them as one unit.\n    # Therefore, we have 5 units to arrange: (AB), C, D, E, F\n    units = 5\n\n    # The number of arrangements for these 5 units is 5 factorial.\n    arrangements_for_units = math.factorial(units)\n\n    # A and B can be arranged in 2! ways within themselves, since they can swap places.\n    arrangements_for_A_and_B = math.factorial(2)\n\n    # The total number of ways they can line up is the product of these two.\n    total_arrangements = arrangements_for_units * arrangements_for_A_and_B\n\n    return total_arrangements\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n\n    for _ in range(years):\n        initial_rabbits = (initial_rabbits * 5) / 2\n    \n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y):\n    x = symbols('x')\n    equation = Eq(6 * x, y)\n    return equation\n\nans = solution(symbols('y'))"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n    \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n    \n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    steps = symbols('steps')\n    \n    # If Peter walks 1 step per second, he takes 10 seconds to reach the top.\n    # steps = 10 + speed_of_escalator * 10\n    equation1 = Eq(steps, 10 + 10)\n\n    # If Peter walks 2 steps per second, he takes 8 seconds to reach the top.\n    # steps = 16 + speed_of_escalator * 8\n    equation2 = Eq(steps, 16 + 8)\n\n    solution = solve((equation1, equation2), (steps))\n\n    return solution[steps]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 / 34) * 25\n    return ans\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of each color of balloons\n    r, g, p = symbols('r g p')\n    \n    # Given relations between the number of balloons\n    eq1 = Eq(r, g / 4) \n    eq2 = Eq(r, 3 * p / 5) \n    \n    # Mass equations according to the color and total mass\n    eq3 = Eq(4 * r + 5 * g + 7 * p, 642)\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3), (r, g, p))\n    \n    return solutions[p]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    # Starting with the minimum class size where one student gets exactly 5 sweets\n    for class_size in range(total_sweets // 5, 0, -1):\n        if total_sweets % class_size == 0:\n            return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    addition = 2 * 135\n    original_multiplication = 246 * 135\n    result = original_multiplication + addition\n    return result\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500  # the length of the road in meters\n    interval = 5  # the interval between trees in meters\n    trees_count = (road_length // interval) + 1  # +1 to include the tree at the other end\n\n    return trees_count\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    # We start from the largest two-digit number, 99, and go backwards\n    for number in range(99, 9, -1):\n        if (number - 3) % 4 == 0 and (number - 3) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n\n    ans = tens + hundredths + thousandths\n    return ans\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    return 25 / 100 * 1200\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    difference = 30\n\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n    \n    children = (total_stickers - remaining_stickers) // stickers_per_child\n    \n    return children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_to_sally = total_blocks / 4\n    remaining_blocks = total_blocks - given_to_sally\n    return remaining_blocks\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds_digit in range(1, 5):  # Since it's an even number less than 8 (to be doubled for ones)\n        for tens_digit in range(0, 10, 2):  # Since it's an even number\n            ones_digit = 2 * hundreds_digit  # Condition (c)\n            if (ones_digit != hundreds_digit and ones_digit != tens_digit and\n                    tens_digit != hundreds_digit and ones_digit < 10 and\n                    (100 * hundreds_digit + 10 * tens_digit + ones_digit) % 18 == 0 and\n                    hundreds_digit < tens_digit):  # Conditions (b), (d), and divisibility by 18 (2 and 9)\n                return (100 * hundreds_digit + 10 * tens_digit + ones_digit)\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Sally and Ken's chocolates\n    sally_init, ken_init = symbols('sally_init ken_init')\n\n    # Initial ratio equation\n    ratio_eq = Eq(sally_init / ken_init, 5 / 7)\n\n    # Ken gives 24 chocolates to Sally\n    sally_end = sally_init + 24\n    ken_end = ken_init - 24\n\n    # After giving chocolates, Sally has twice as much as Ken\n    final_ratio_eq = Eq(sally_end, 2 * ken_end)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, final_ratio_eq), (sally_init, ken_init))\n\n    # Extract Ken's amount in the end\n    ken_final = solutions[ken_init] - 24\n\n    return ken_final\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    total_cost = solutions[pencil] + solutions[notebook]\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    # Set the initial free hours and the total parking bill.\n    free_hours = 40\n    total_bill = 82\n\n    # Next, calculate the additional hours parked using the different rates:\n    additional_bill = total_bill\n\n    # Hours between 60 and more with $15 per hour rate\n    if additional_bill > 10 * 8:  # Amount exceeding $80\n        hours_above_60 = (additional_bill - 80) / 15\n        additional_bill -= hours_above_60 * 15\n    else:\n        hours_above_60 = 0\n\n    # Hours between 50 and 60 with $8 per hour rate\n    if additional_bill > 50 * 1:  # Amount exceeding $50\n        hours_50_to_60 = (additional_bill - 50) / 8\n        additional_bill -= hours_50_to_60 * 8\n    else:\n        hours_50_to_60 = 0\n\n    # Hours between 40 and 50 with $5 per hour rate\n    hours_40_to_50 = additional_bill / 5\n\n    # Total parking hours equals free hours plus additional paid hours\n    total_hours_parked = free_hours + hours_40_to_50 + hours_50_to_60 + hours_above_60\n\n    return int(total_hours_parked)\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip = bill * 0.20\n    tax = bill * 0.10\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    triangle_sides = 3\n    square_sides = 4\n\n    ans = (square_sides * 2) - triangle_sides\n\n    return ans\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 0.12\n\n    new_pay = original_pay * (1 + increase_percentage)\n\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits = 1014\n    pages = 0\n    current_digits = 0\n\n    while current_digits < digits:\n        pages += 1\n        current_digits += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    ans = 89 * 19\n    return ans\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent_weekly) * weeks\n\n    difference = joanna_total - amy_total\n\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(57 + magic_number, 4 * (9 + magic_number))\n\n    solved = solve(equation, magic_number)\n\n    return solved[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(2, 1) * comb(13, 4)  # Total ways to choose a teacher and 4 students\n    ways_no_female = comb(2, 1) * comb(7, 4)  # Total ways to choose a teacher and 4 male students\n    ways_at_least_one_female = total_ways - ways_no_female  # Subtracting the no-female scenarios from total\n    return ways_at_least_one_female\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num = symbols('num')\n\n    equation = Eq(3 * num + 6, num + 16)\n\n    answer = solve(equation, num)\n\n    return answer[num]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    \n    months_to_pay_debt = debt / monthly_salary\n    \n    return months_to_pay_debt\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 8):\n        total_sum += (i * 10) - (i * 10 - 4)\n    total_sum += 2021\n    return total_sum\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + sister + 10 + 10, 53)\n    \n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    term_difference = 15 - 10\n    common_difference = (fifteenth_number - tenth_number) / term_difference\n    twelfth_number = tenth_number + (2 * common_difference)\n    return twelfth_number\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # The degree of a monomial is the sum of the exponents of the variables in it.\n    # For the monomial -x^3 * y^(2n), the degree is 3 + 2n.\n    # According to the problem, the degree is 5, so we have:\n    # 3 + 2n = 5\n    # Solving for n:\n    n = (5 - 3) / 2\n    return int(n)\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    cups = 45\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n\n    total_milk = cups * milk_per_cup\n    total_tea = cups * tea_per_cup\n\n    total_amount = total_milk + total_tea\n\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    nth_term = lambda n: 5 * n\n    return nth_term(10)\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')\n    \n    sarah_total = 8 * book_price + 3 * 0.40\n    rebecca_total = 3 * book_price + 8 * 0.40\n    equation = Eq(sarah_total, rebecca_total + 1.00)\n    \n    book_cost = solve(equation, book_price)[0]\n\n    return book_cost\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of gummy bears each person bought\n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(angela, bernice + 2) # Angela buys 2 more gummy bears than Bernice\n    equation2 = Eq(bernice, candice + 8) # Bernice buys 8 more gummy bears than Candice\n    equation3 = Eq((angela + bernice + candice) * 6, 342) # Total cost in pence\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since we know the median is 20 and the list is already sorted,\n    # the middle value (or the average of the two middle values) must be 20.\n    # Therefore: n+8 is the fifth value in the list and is the median.\n    # Solving the equation n+8 = 20 gives us n = 12\n    \n    n = 20 - 8\n    \n    # Now we calculate the mean by adding all the numbers\n    # and dividing by the total count which is 10\n    mean = (n + (n+2) + (n+3) + (n+5) + (n+7) + (n+8) + (n+11) + (n+14) + (n+16) + (n+19)) / 10\n    \n    return mean\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a, b, c represent the weights of the three apples, where a < b < c\n    a, b, c = symbols('a b c')\n    \n    # After eating the largest apple, the mean weight of the remaining two is 70 grams\n    equation1 = Eq((a + b)/2, 70)\n    \n    # After eating the lightest apple, the mean weight of the remaining two is 105 grams\n    equation2 = Eq((b + c)/2, 105)\n    \n    # Since b is the weight of the apple that is not eaten in both scenarios, eliminate b\n    solutions = solve((equation1, equation2), (a, c))\n    \n    # Calculate the weight difference between the heaviest (c) and the lightest (a) apple\n    weight_difference = solutions[c] - solutions[a]\n    \n    return weight_difference\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10\n    container_volume = 2\n\n    num_containers = total_volume / container_volume\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the first number be x, then the next two consecutive numbers will be x+1 and x+2\n    # Then, the sum of these three numbers would be x + (x + 1) + (x + 2) = 60\n    # 3x + 3 = 60\n    # 3x = 60 - 3\n    # x = (60 - 3) / 3\n    first_number = (60 - 3) // 3\n    # The largest of the three numbers is the third one, which is x + 2\n    largest_number = first_number + 2\n    \n    return largest_number\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    for A in range(10):\n        if (A + A + A + A) % 10 == A:\n            return A\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_members = 4\n\n    # Total handshakes if all members shook hands\n    total_handshakes = total_members * (total_members - 1) // 2\n\n    # Handshakes that did not happen between the 4 members\n    missed_handshakes = non_shaking_members * (non_shaking_members - 1) // 2\n\n    # Subtracting the missed handshakes from the total possible handshakes\n    handshakes_that_happened = total_handshakes - missed_handshakes\n\n    return handshakes_that_happened\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for num in range(1, 10):\n        new_num = int(str(num) + '0')\n        if new_num - num == 27:\n            return num\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Since Bob is always the 3rd in line no matter from which direction he counts\n    # The array must be a 3x3 grid because Bob must be in the center of such an array\n    num_animals = 3 * 3\n    return num_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Calculate total distance based on the number of plum trees and distance between them\n    total_distance = (41 - 1) * 4  # Subtract 1 because we have trees at both ends\n    \n    # Calculate number of pine trees based on the distance and interval between pine trees\n    # We add one to include the tree at the starting point\n    num_pine_trees = (total_distance // 5) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 / 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple_over_100 = (100 // 11 + 1) * 11\n    largest_multiple_under_300 = (300 // 11) * 11\n    return smallest_multiple_over_100 + largest_multiple_under_300\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_sum = 4000 * 12\n    correct_sum = incorrect_sum - 2800 + 3040\n    correct_average = correct_sum / 12\n    return correct_average\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    # Equation 1: 2*durian + 3*honeydew = 77\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    # Equation 2: durian = 2*honeydew (Each durian costs twice as much as each honeydew)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6+x), 9*x + 32)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the height of each stack\n    # let a, b, c be the number of one-cent, two-cent, and five-cent coins respectively\n    x, a, b, c = symbols('x a b c')\n\n    # Given that 6 one-cent coins have the same height as 5 two-cent coins\n    # 6a = 5b  -> a/b = 5/6, equations represent the proportion between a and b\n    equation1 = Eq(6 * a, 5 * b)\n\n    # Given that 4 one-cent coins have the same height as 3 five-cent coins\n    # 4a = 3c -> a/c = 3/4, equations represent the proportion between a and c\n    equation2 = Eq(4 * a, 3 * c)\n\n    # Each stack is of equal heights thus we can write the height of stack as a product of number of coins and their respective heights\n    # a*1/6 = b*1/5 = c*1/4, using the proportion for each\n    # assuming the height of one-cent coin is 1, then height of two-cent coin is 6/5, height of five-cent coin is 6/4 \n    # hence, equation3 can be represented as:\n    equation3 = Eq(a / 6, b / 5)\n    equation4 = Eq(b / 5, c / 4)\n\n    # Given that he used a total of 124 coins\n    # a + b + c = 124\n    equation5 = Eq(a + b + c, 124)\n\n    # solve the system of equations for a, b, c\n    solution = solve((equation1, equation2, equation5), (a, b, c))\n\n    # Once we have the number of each type of coin, we calculate the total value\n    total_value = solution[a] * 1 + solution[b] * 2 + solution[c] * 5\n\n    return total_value\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n\n    for green_pens in range(1, 100):\n        blue_pens = (2 / 5) * green_pens\n        red_pens = green_pens / 4\n\n        # Ensure we have whole numbers of pens and total pens is less than 100\n        if blue_pens.is_integer() and red_pens.is_integer() and (blue_pens + green_pens + red_pens) < 100:\n            max_red_pens = max(max_red_pens, red_pens)\n\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_amount = 200\n    spent_on_books = initial_amount * 0.25\n    remaining_after_books = initial_amount - spent_on_books\n    spent_on_dvd = remaining_after_books * 0.20\n    remaining_after_dvd = remaining_after_books - spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    monthly_components = m / 12\n    return monthly_components\n\nans = solution(36) # Example usage with m = 36, you can replace 36 with any value of m"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for num in range(999999, 100000, -1):\n        if str(num) == str(num)[::-1]:\n            if num % 6 == 0:\n                return num\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n    total_children = initial_boys + initial_girls + children_joined\n    return total_children\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_in_6_days = 42\n    days_to_eat = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days_to_eat\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length = 1.83  # meters\n    short_by = 0.10  # meters (10 cm converted to meters)\n    actual_length = desired_length - short_by\n    return actual_length\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_needles = 2540\n    sold_pins = 1820\n    remaining_items = total_pins_needles - sold_pins\n    \n    # According to the wrong calculation provided above: 4u = 1820, then 1u would be 455\n    # Let's assume the incorrect solution is that there are 455 needles left and sold 4/5 of them\n    needles_sold_wrong = (4/5) * 455\n    remaining_needles_wrong = 455 - needles_sold_wrong\n    remaining_pins_wrong = remaining_items - remaining_needles_wrong\n    \n    # Check if the remaining pins and needles are equal in the wrong solution\n    if remaining_needles_wrong == remaining_pins_wrong:\n        is_correct = True\n    else:\n        is_correct = False\n    \n    # Find the correct solution if the above is incorrect\n    if not is_correct:\n        # Let's denote the initial number of needles as n.\n        # She sold 4/5 of the needles, so she has 1/5 (n) needles left.\n        # We also know she has a total of 2540 - 1820 = 720 pins and needles left and equal numbers of pins and needles,\n        # which means 720/2 = 360 pins and 360 needles.\n        needles_left = 360\n        \n        return (is_correct, needles_left)\n    else:\n        return (is_correct, int(remaining_needles_wrong))\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    length_pattern = len(pattern)\n\n    sum_pattern = sum(pattern)\n    full_repeats = 41 // length_pattern\n    remainder = 41 % length_pattern\n\n    sum_first_41_numbers = (full_repeats * sum_pattern) + sum(pattern[:remainder])\n\n    return sum_first_41_numbers\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the initial amount of water in container B be x mL\n    A, B = symbols('A B')\n    \n    # Given that A had 350 mL more water than B initially\n    equation1 = Eq(A, B + 350)\n    \n    # After spilling 500 mL from A, B has twice as much as A\n    equation2 = Eq(B, 2 * (A - 500))\n    \n    # Solve for A and B\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2 / 7) * 315\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of marbles Wei Yan had\n    x = symbols('x')\n\n    # He gave 3/8 of them to his friends\n    remaining_after_friends = x - (3/8)*x\n\n    # He gave 5/7 of the remaining marbles to his brother\n    remaining_after_brother = remaining_after_friends - (5/7)*remaining_after_friends\n\n    # His cousin gave him 408 marbles\n    final_count = remaining_after_brother + 408\n\n    # In the end, he had twice as many marbles as he had at first\n    equation = Eq(final_count, 2*x)\n\n    # Solve the equation to find the original number of marbles\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    for two_p in range(0, 47 // 2 + 1):\n        for five_p in range(0, 47 // 5 + 1):\n            if (two_p * 2 + five_p * 5) == 47:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = ((9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11)\n    denominator = (1 / 8 - 1 / 9 + 1 / 10 - 1 / 11)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Given that Brian is 14 and his father is 41 at that time.\n    brian_age = 14\n    father_age = 41\n\n    # Calculate the age difference\n    age_difference = father_age - brian_age\n\n    # The next time their ages are the reverse of each other, the age difference should still hold.\n    while True:\n        brian_age += 1\n        father_age += 1\n        # Check if Brian's age is the reverse of his father's.\n        if str(father_age) == str(brian_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "from itertools import combinations\n\ndef solution():\n    apples = 11\n    piles = 3\n    ways = list(combinations(range(1, apples+(piles-1)), piles-1))\n    return len(ways)\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    number1 = 654876\n    number2 = 279745\n    \n    rounded_number1 = round(number1, -2)\n    rounded_number2 = round(number2, -2)\n    \n    estimated_difference = rounded_number1 - rounded_number2\n    \n    return estimated_difference\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_to_pass_tree = 16  # in seconds\n    length_of_train = 480   # in meters\n    \n    # Speed is distance / time\n    speed_of_train = length_of_train / time_to_pass_tree  # in meters/second\n\n    # Converting meters/second to kilometers/hour\n    speed_of_train_kmh = speed_of_train * 3.6  # 1 m/s = 3.6 km/h\n\n    return speed_of_train_kmh\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for x1 in range(1, 8):\n        for x2 in range(1, 8 - x1 + 1):\n            if x1 + x2 == 8:\n                count += 1\n            for x3 in range(1, 8 - x1 - x2 + 1):\n                if x1 + x2 + x3 == 8:\n                    count += 1\n                for x4 in range(1, 8 - x1 - x2 - x3 + 1):\n                    if x1 + x2 + x3 + x4 == 8:\n                        count += 1\n                    for x5 in range(1, 8 - x1 - x2 - x3 - x4 + 1):\n                        if x1 + x2 + x3 + x4 + x5 == 8:\n                            count += 1\n                        for x6 in range(1, 8 - x1 - x2 - x3 - x4 - x5 + 1):\n                            if x1 + x2 + x3 + x4 + x5 + x6 == 8:\n                                count += 1\n                            for x7 in range(1, 8 - x1 - x2 - x3 - x4 - x5 - x6 + 1):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 8:\n                                    count += 1\n    return count\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5kg = cost_per_kg * 3.5\n    return cost_for_3_5kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2 / 5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5/8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n    \n    road_length = (total_lampposts - 1) * distance_between_lampposts\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    failed_percentage = (failed_pupils / total_pupils) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_numbers_sum = sum([number for number in range(1, 51) if '3' in str(number)])\n    return erased_numbers_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n\n    ans = pastas * sauces * toppings\n\n    return ans\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # The worst case scenario occurs when each key is tried once more than it needs to be for each door\n    # except for the last two. For the second last door, since all keys except one have been tried, only one\n    # attempt is needed. For the last door, the last remaining key will surely work.\n    \n    # Therefore, the number of attempts for each of the first 8 doors will be 10,\n    # for the 9th door it will be 1, and the 10th door will need no attempts.\n    \n    # Hence, the total number of attempts is:\n    attempts = (8 * 10) + 1\n    \n    return attempts\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    poppers_per_bag = 12\n\n    full_bags, leftover_poppers = divmod(total_guests, poppers_per_bag)\n\n    return leftover_poppers\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # since we only need the last digit, we can consider the pattern of last digits of 7 powers:\n    # 7^1 = 7  -> last digit 7\n    # 7^2 = 49 -> last digit 9\n    # 7^3 = 343 -> last digit 3\n    # 7^4 = 2401 -> last digit 1\n    \n    # and this pattern repeats every 4 numbers (7, 9, 3, 1)\n    pattern = [7, 9, 3, 1]\n\n    # we need to find the last digit of 7^(2023), we use modulo 4 since the pattern repeats every 4\n    last_digit_index = 2023 % 4\n\n    # if the remainder is 0, it means the last digit is the last of the pattern,\n    # if it's 1, it's the first of the pattern, and so on.\n    if last_digit_index == 0:\n        last_digit_index = 4\n\n    # get the last digit\n    ans = pattern[last_digit_index - 1]  # we subtract 1 because list index starts from 0\n    return ans\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n    from sympy import root\n\n    getcontext().prec = 6  # Setting precision to 6 decimal places for intermediate calculation\n\n    # 13.3 repeating is 40/3 since 13.333333... = 13 + 1/3\n    numerator_part1 = root(Decimal(40)/3, 3)\n\n    # 4.09 repeating is 37/9 since 4.090909... = 4 + 1/9\n    numerator_part2 = (Decimal(37)/9)**2\n\n    # 11.1 repeating is 100/9 since 11.111111... = 11 + 1/9\n    denominator = Decimal('59.24') - root(Decimal(100)/9, 2)\n\n    result = (numerator_part1 * numerator_part2) / denominator\n\n    ans = round(result, 3)  # Rounding off to the nearest 3 decimal places\n    \n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    number = ''.join(str(i) for i in range(1, 31))\n    return int(number[46:])\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome number would be 10001\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome number would be 999999\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    number_to_pick = 2\n    combinations = comb(total_children, number_to_pick)\n    return combinations\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    girls = boys * 3  # Because three quarters are girls and one quarter is boys, so girls are 3 times the boys\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for banana and apple\n    banana, apple = symbols('banana apple')\n\n    # Ellie's payment equation: 2 bananas + 3 apples = 1.50\n    eq1 = Eq(2*banana + 3*apple, 1.50)\n\n    # Beth's payment equation: 3 bananas + 2 apples = 1.45\n    eq2 = Eq(3*banana + 2*apple, 1.45)\n\n    # Solving the system of equations\n    solution = solve((eq1, eq2), (banana, apple))\n\n    # How much does Annabella pay for 1 banana and 1 apple?\n    annabella_pay = solution[banana] + solution[apple]\n\n    return annabella_pay\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    # Let 'x' be the number of years later when the sum of their ages will be 60.\n    # Age of Sara after x years = age of Sara now + x = 8 + x\n    # Age of Lucy after x years = age of Lucy now + x = 36 + x\n    # The sum of their ages after x years = (8 + x) + (36 + x) = 60\n    \n    # We can setup an equation and solve for x.\n    # 8 + x + 36 + x = 60\n    # 2x + 44 = 60\n    # 2x = 60 - 44\n    # 2x = 16\n    # x = 16 / 2\n    # x = 8\n    \n    x = (60 - (8 + 36)) // 2\n    return x\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    two_seater_capacity = two_seater_benches * 2\n    three_seater_capacity = three_seater_benches * 3\n\n    total_capacity = two_seater_capacity + three_seater_capacity\n    return total_capacity\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_price = 15.49\n    payment = 16  # Since we are paying with £1 coins, we at least pay £16.\n    change = payment - book_price\n    return round(change, 2)  # Round to 2 decimal places to represent pence accurately.\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    ans = sum((-1)**(i+1) * (97 + 2*i) for i in range(1, 12))\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 + 1/7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the current age of the older brother as 'o' and younger brother as 'y'\n    o, y = symbols('o y')\n\n    # When the older brother was y years old, the younger brother was 12\n    equation1 = Eq(o - y, 12)\n\n    # When the younger brother will be o years old, the older brother will be 27\n    equation2 = Eq(o + (o - y), 27)\n\n    # Solve the system of equations for 'o' and 'y'\n    solutions = solve((equation1, equation2), (o, y))\n\n    # We are interested in the current age of the older brother\n    return solutions[o]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    max_single_gloves = 4 # She can take at most 4 single gloves of different colors\n    one_more_glove = 1 # She needs to take at least one more to ensure a pair\n    ans = max_single_gloves + one_more_glove\n    return ans\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let f be the number of footballs and b be the number of basketballs initially\n    f, b = symbols('f b')\n    \n    # Original ratio of footballs to basketballs is 2/5\n    original_ratio = Eq(f, 2*b/5)\n    \n    # After selling 16 basketballs, the ratio of footballs to basketballs is 2/3\n    new_ratio = Eq(f, 2*(b-16)/3)\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (f, b))\n    \n    # Total number of footballs and basketballs initially\n    total = solutions[f] + solutions[b]\n    \n    return int(total)\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8\n    last_multiple = 82 // 8 * 8\n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n    return num_multiples\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    max_junctions = 13 * (13 - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increase_rate = 0.10\n    decrease_rate = 0.10\n\n    after_spring_festival = original_price * (1 + increase_rate)\n    after_lantern_festival = after_spring_festival * (1 - decrease_rate)\n\n    return after_lantern_festival\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers Sam and Peter originally have\n    sam, peter = symbols('sam peter')\n\n    # According to the problem:\n    # Sam originally had 40 more stickers than Peter\n    equation1 = Eq(sam, peter + 40)\n    # Sam gave 20% of his stickers to Peter\n    equation2 = Eq(sam - 0.2 * sam, sam - (sam - (peter + 40)) * 0.2)\n    # Peter gave 25% of his new total (original amount plus what Sam gave him) to Sam\n    equation3 = Eq(peter + (sam - (peter + 40)) * 0.2 - 0.25 * (peter + (sam - (peter + 40)) * 0.2), peter + (sam - (peter + 40)) * 0.2 - 0.25 * (peter + 0.2 * sam))\n    # In the end, Sam had 96 stickers more than Peter\n    equation4 = Eq(sam + 0.25 * (peter + 0.2 * sam) - 0.2 * sam, peter + (sam - (peter + 40)) * 0.2 - 0.25 * (peter + 0.2 * sam) + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter))\n\n    # Return the initial amount of stickers Peter had\n    return solutions[peter]\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert 7.2 minutes to hours\n    total_time_hours = 7.2 / 60\n    \n    # Define the speeds in km/h\n    students_speed = 8     # Speed of the students\n    teacher_speed = 12     # Running speed of the teacher\n    \n    # The teacher runs at a relative speed when going towards and away from the end.\n    # When going towards the head, the relative speed is the sum of both speeds.\n    # When going back to the end, the relative speed is the difference of both speeds.\n    \n    # The sum of the time it takes for the teacher to go to the head and back\n    # is equal to the total time spent (7.2 minutes or total_time_hours in hours).\n    \n    # Let's denote the length of the line as 'x'.\n    # Now, time = distance / speed\n    # Time to head = x / (teacher_speed + students_speed)\n    # Time to end = x / (teacher_speed - students_speed)\n    # total_time_hours = (x / (teacher_speed + students_speed)) + (x / (teacher_speed - students_speed))\n    \n    # Solve for 'x' using the equation above.\n    # Rearrange the equation to solve for x:\n    # x = total_time_hours / (1 / (teacher_speed + students_speed) + 1 / (teacher_speed - students_speed))\n    \n    relative_speed_to_head = teacher_speed + students_speed\n    relative_speed_to_end = teacher_speed - students_speed\n    \n    x = total_time_hours / (1 / relative_speed_to_head + 1 / relative_speed_to_end)\n    \n    # Calculate the length of the line\n    length_of_line = x * students_speed  # Since students move as well during the teacher's run\n    \n    return length_of_line\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    # Flora's age this year\n    flora_age = 5\n\n    # Flora's age two years ago\n    flora_age_two_years_ago = flora_age - 2\n\n    # Father's age two years ago\n    fathers_age_two_years_ago = 9 * flora_age_two_years_ago\n\n    # Father's age this year\n    fathers_age = fathers_age_two_years_ago + 2\n\n    return fathers_age\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate games in group stage\n    # Each group has 16/4 = 4 people,\n    # and each person plays against others in their group.\n    # A single round-robin in a group of 4 means each team\n    # plays 3 games, so since there are 4 groups, we multiply by 4.\n    group_games = (4 * (4 - 1) // 2) * 4\n\n    # Calculate games in knockout stage\n    # Each stage halves the number of players\n    # 8 to 4: 4 games\n    # 4 to 2: 2 games\n    # 2 to 1: 1 game for the winner and 1 game for the third place\n    knockout_games = 4 + 2 + 1 + 1\n    \n    total_games = group_games + knockout_games\n    return total_games\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets = [i for i in range(31, 40) if i % 4 == 0 and i % 6 == 0]\n    return sweets[0]\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    result = 122.55 + 9.45 + 13.21 - 3.21\n    ans = round(result, 2)  # Ensure that the result is rounded to two decimal places\n    return ans\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 20 / 60\n    early_time = 10 / 60\n    \n    # Speeds in km/h\n    speed1 = 4\n    speed2 = 6\n    \n    # Let the distance be 'd' km,\n    # Time taken to travel at speed1 (4km/h) = d/4\n    # Time taken to travel at speed2 (6km/h) = d/6\n    \n    # According to the problem, d/6 = d/4 - 1/2 (convert 30 min to 1/2 hour)\n    # 2 * d/6 = d/4 - 1/4 (from both sides subtract d/6)\n    # (2d - d)/6 = 1/4\n    # d/6 = 1/4\n    # d = (1/4) * 6\n    \n    d = (1/4) * 6\n    \n    return d\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for number in range(2, 51, 2):  # 25 even numbers starting from 2\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    value_in_pounds = 1.25\n    value_in_pence = value_in_pounds * 100  # Convert pounds to pence\n    \n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining_candy = 3\n\n    # Ken took 1 less than half of the remaining pieces, so before Ken took his candy\n    # there were 2*(remaining_candy + 1) pieces\n    before_ken = 2 * (remaining_candy + 1)\n\n    # Nini took 3 more than half of the remaining pieces, so before Nini took her candy\n    # there were 2*(before_ken - 3) pieces\n    before_nini = 2 * (before_ken - 3)\n\n    # Ivy took 2 less than half of the remaining pieces, so before Ivy took her candy\n    # there were 2*(before_nini + 2) pieces\n    before_ivy = 2 * (before_nini + 2)\n\n    # Eddie took 1 more than half of the pieces, so before Eddie took his candy\n    # there were 2*(before_ivy - 1) pieces\n    before_eddie = 2 * (before_ivy - 1)\n\n    return before_eddie\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_distance = 18\n    daily_climb = 7\n    sixth_day_climb = 3\n    sixth_day_position = sixth_day_climb * 6\n\n    # On the sixth day, the snail should have climbed out if it didn't slide at night.\n    # Therefore, the slide distance is the difference between total distance and position on the sixth day.\n    slide_distance = (sixth_day_position - total_distance) / 5  # Slide for 5 nights\n\n    return slide_distance\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    arrangements = set(permutations('CYZZ'))\n    return len(arrangements)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        ""
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    total_paintbrushes = 99\n    for boys in range(1, total_paintbrushes // 3):\n        girls = 3 * boys\n        if (2 * girls + 3 * boys) == total_paintbrushes:\n            return girls\n        \nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    # Students in each class\n    a_students = 12\n    b_students = 16\n    c_students = 20\n\n    # Calculate the greatest common divisor (GCD) of the three numbers\n    gcd_ab = gcd(a_students, b_students)\n    gcd_abc = gcd(gcd_ab, c_students)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n    total_average = 82\n\n    total_score_all = total_average * (total_boys + total_girls)\n    total_score_boys = average_boys * total_boys\n\n    total_score_girls = total_score_all - total_score_boys\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    \n    # Length of smaller pieces for Alyson, Clara, and Joyce\n    alyson_piece = 2\n    clara_piece = 3\n    joyce_piece = 5\n    \n    # Calculate the least common multiple of the lengths of the pieces\n    shortest_length = lcm(alyson_piece, clara_piece, joyce_piece)\n    \n    return shortest_length\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    marked = 25\n    caught_second_time = 200\n    caught_first_time = 100\n    \n    proportion_marked = marked / caught_second_time\n    total_fish = caught_first_time / proportion_marked\n    \n    return round(total_fish)\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_food_units = 12 * 15  # Total food units = rabbits * days\n    days_for_20_rabbits = total_food_units / 20\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    difference = 121 - 124\n    n = 15\n\n    # General formula for the nth term of an arithmetic sequence\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n    solutions = solve((equation1, equation2), (boys, girls))\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10 + 22\n    dress_cost = 56\n    additional_money_needed = dress_cost - susan_money\n    return additional_money_needed\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    # Import necessary library\n    from sympy import symbols, solve, Eq\n\n    # Declare symbols for each individual's amount of sweets\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    # Create equations based on the information provided\n    eq1 = Eq(chloe + maggie + lily, 187)              # Chloe, Maggie and Lily have $187 sweets together\n    eq2 = Eq(maggie + lily + george, 327)             # Maggie, Lily and George have $327 sweets together\n    eq3 = Eq(george, 5 * chloe)                       # George has 5 times the sweets Chloe has\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (chloe, maggie, lily, george))\n\n    # Calculate total amount of sweets all of them have\n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n\n    return total_sweets\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wake_up_time = datetime.strptime('07:40', '%H:%M')\n    starts_breakfast = wake_up_time + timedelta(minutes=25)\n    finishes_breakfast = starts_breakfast + timedelta(minutes=10)\n    leaves_for_school = finishes_breakfast\n    arrives_at_school = leaves_for_school + timedelta(minutes=35)\n    # She is 5 minutes late, so registration was 5 minutes before she arrived\n    registration_time = arrives_at_school - timedelta(minutes=5)\n    return registration_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    mass_per_packet = 0.23\n    packets = 6\n\n    total_mass = mass_per_packet * packets\n\n    return total_mass\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    ans = 952 + 139\n    return ans\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 78 // 2 + 1):\n        for three_gram_weights in range(0, 77 // 3 + 1):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Calculate the sum of cubes for numbers from 1 to 20\n    n = 20\n    sum_cubes_1_to_20 = ((n * (n + 1)) // 2) ** 2\n\n    # Calculate the sum of cubes for numbers from 1 to 9\n    n = 9\n    sum_cubes_1_to_9 = ((n * (n + 1)) // 2) ** 2\n\n    # Subtract the sum from 1 to 9 from the sum from 1 to 20\n    ans = sum_cubes_1_to_20 - sum_cubes_1_to_9\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    num_quarters = total_amount * 4\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_scores = 90 * 5  # average score * number of assignments\n    scored_points = 96 + 85 + 89 + 92  # sum of the known scores\n    fifth_score = total_scores - scored_points  # score of the fifth assignment\n\n    return fifth_score\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    # Starting from the smallest possible number that leaves a remainder of 3 when divided by 4\n    # which is 7, we increase by step of 1 to check for the least number that satisfies all conditions\n    card_number = 7\n    while True:\n        if (card_number % 4 == 3) and (card_number % 5 == 4) and (card_number % 7 == 6):\n            break\n        card_number += 1\n    return card_number\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of girls be g and the number of boys be b.\n    g, b = symbols('g b')\n    \n    # Total number of students is the sum of girls and boys.\n    equation1 = Eq(g + b, 1690)\n\n    # There are 90 more boys than girls.\n    equation2 = Eq(b - g, 90)\n\n    # Ratio of girls who can swim to those who cannot.\n    girls_can_swim = 31 / 80 * g\n    girls_cannot_swim = 49 / 80 * g\n\n    # Number of boys who can swim.\n    boys_cannot_swim = b / 2 + 60  # 120 less than boys who cannot swim implies b = 2 * boys_can_swim - 240.\n    boys_can_swim = b / 2 - 60\n\n    # Solve for the number of girls and boys.\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Calculate the number of pupils who cannot swim.\n    total_cannot_swim = girls_cannot_swim.subs(g, solutions[g]) + boys_cannot_swim.subs(b, solutions[b])\n\n    return int(total_cannot_swim)\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure we have at least 5 different colors with at least 10 pencils for each color,\n    # we need to consider the worst-case scenario for drawing pencils.\n    # This scenario would involve picking the maximum number of pencils of the same color\n    # until we are forced to have 5 different colors with the specified number of pencils for each.\n\n    # Draw 74 pencils from 4 colors since we are still not guaranteed to have 10 pencils of a 5th color (295 pencils).\n    # Next, we draw 10 pencils from the 5th color to guarantee 10 pencils of that color.\n\n    # Calculate the number of pencils drawn in the worst-case scenario:\n    pencils_drawn = (74 * 4) + 10\n    \n    return pencils_drawn\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    capacity = 34\n    coaches = (pupils + capacity - 1) // capacity\n    return coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    original_ratio = Eq(pip/bud, 4/7)\n    new_ratio_after_gift = Eq((pip)/(bud + 5), 8/15)\n\n    solutions = solve((original_ratio, new_ratio_after_gift), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Total perimeter\n    perimeter = (144 + 204) * 2\n    \n    # Number of spaces between the wheats\n    # Since there's wheat at every corner, we have to subtract 4 from the total\n    spaces = 116 - 4\n    \n    # Distance between every two wheats\n    distance = perimeter / spaces\n    \n    return distance\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    # The last digit of a number is only affected by the last digit of the factors.\n    # Therefore, we only need to focus on the last digit of 5^20 * 7^30.\n    # The last digit of any power of 5 is 5.\n    last_digit_5 = 5 \n    # The last digits of powers of 7 cycle every four powers: 7, 9, 3, 1, ...\n    # Since 30 is divisible by 4, the last digit of 7^30 is the same as the last digit of 7^4.\n    last_digit_7 = 7**4 % 10 \n    \n    # Calculate the last digit of the product.\n    ans = (last_digit_5 * last_digit_7) % 10\n\n    return ans\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    import math\n    length1 = 39\n    length2 = 52\n    greatest_common_divisor = math.gcd(length1, length2)\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols\n    A, B = symbols('A B')\n\n    # Equations based on Simon and Peter's scores\n    equation1 = Eq(4*A + 4*B, 36)\n    equation2 = Eq(2*A + 3*B, 22)\n\n    # Solve the system of equations for A and B\n    solution_values = solve((equation1, equation2), (A, B))\n\n    # Calculate the score for someone with three A grades and five B grades\n    score = 3*solution_values[A] + 5*solution_values[B]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    people_sharing = 2\n    joe_squares = total_squares // people_sharing\n\n    return joe_squares\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    primes = [p for p in range(2, 46) if all(p % d != 0 for d in range(2, int(p**0.5) + 1))]\n    \n    for a in primes:\n        for b in primes:\n            for c in primes:\n                if a != b and b != c and a != c:  # Ensuring all prime numbers are different\n                    if a + b != c and a + c != b and b + c != a:  # A's statement\n                        if b - 1 + 7 in primes and b - 1 + 7 != a and b - 1 + 7 != b and b - 1 + 7 != c:  # B's statement\n                            if 2 * c in primes:  # C is checking for a non-prime\n                                if a + b == 2 * c or a + 2 * c == b or b + 2 * c == a:  # Teacher's confirmation\n                                    return a + b + c\n    return None\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    return 4 + 2 + 7 - 1  # Laura's position + 2 children + Amanda's position from the end - 1 (since Laura is included in Amanda's count)\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    A = 2  # smallest prime number\n    B = 4  # smallest composite number\n    C = 1  # neither prime nor composite number (1 is not considered prime or composite)\n    D = A - 2  # 2 less than the smallest prime number\n    E = 9  # largest composite number up to 10\n    F = 5  # only has factors 1 and itself (5)\n    G = 4  # greatest factor of 8, except 8 itself\n    H = 6  # lowest multiple of 6\n\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n    return phone_number\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_off = 42\n    people_on = 60\n    people_after = 322\n\n    people_before = people_after - people_on + people_off\n    return people_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_per_day = 24 * 60 * 60\n    fraction_of_day = (1/4) * (1/6) * (1/8)\n    seconds = seconds_per_day * fraction_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers each person originally had\n    marry_init, alexis_init, charlotte_init = symbols('marry_init alexis_init charlotte_init')\n\n    # Ratio of stickers between Marry and Alexis\n    ratio_eq = Eq(marry_init, 7/5 * alexis_init)\n\n    # Marry and Alexis give 20% of their stickers to Charlotte\n    marry_after = marry_init - 0.2 * marry_init\n    alexis_after = alexis_init - 0.2 * alexis_init\n    charlotte_after = charlotte_init + 0.2 * (marry_init + alexis_init)\n\n    # Charlotte's stickers increased by 80%\n    charlotte_increase_eq = Eq(charlotte_after, charlotte_init * 1.8)\n\n    # Marry had 20 stickers more than Charlotte in the end\n    marry_more_eq = Eq(marry_after, charlotte_after + 20)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, charlotte_increase_eq, marry_more_eq), (marry_init, alexis_init, charlotte_init))\n\n    # Return the number of stickers Alexis had at first\n    return solutions[alexis_init]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    all_permutations = set(permutations(digits))\n    valid_permutations = {perm for perm in all_permutations if perm[0] != '0'}\n    return len(valid_permutations)\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(0, 10):\n            for k in range(0, 10):\n                # Pip's number: ijkl (where l = i)\n                pip_number = int(f\"{i}{j}{k}{i}\")\n                # Bud's number: lkji (where l = i)\n                bud_number = int(f\"{k}{j}{i}{i}\")\n                # Check if they add up to 5510\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    import math\n    # Eddie and his parents can be considered as one unit, plus the other people.\n    # First, determine the number of ways to arrange this single unit within the line-up.\n    # This is simply the factorial of the number of units, which is the family unit\n    # plus the remaining individuals.\n\n    # If there are n other people besides Eddie's family, then there are (n+1)! ways\n    # to arrange all the individuals, since the family counts as one unit.\n    # Now multiply by the number of ways to arrange Eddie and his parents within this unit (3!).\n    # This assumes Eddie and his family can be in any order within the unit.\n\n    # Given no specific number of other people is provided, we'll assume\n    # the family of 3 is the only group to consider.\n    family_unit = 3  # Eddie, mom, and dad\n    total_units = 1  # Just the family unit as one\n    \n    ways_to_arrange_family = math.factorial(family_unit)\n    ways_to_arrange_total = math.factorial(total_units)\n\n    # The total number of ways they can be arranged comes from the product of\n    # arranging the whole family as a unit and arranging the members within that unit\n    total_ways = ways_to_arrange_family * ways_to_arrange_total\n\n    return total_ways\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    grass_for_1_cow_for_1_day = (25 * 10) # Amount of grass needed for 25 cows for 10 days\n\n    # Total amount of grass is the same, so we can set 25*10*1 cow-day grass equal to 15*20 cow-day grass\n    cow_days = 25 * 10\n\n    # Calculate number of cows that can be fed for 50 days\n    cows_for_50_days = cow_days / 50\n\n    return int(cows_for_50_days)\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3\n    third_day = second_day * (5 / 3)\n    total = first_day + second_day + third_day\n    return int(total)\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    # Let the original number of oranges be 3x and the original number of lemons be 5x\n    # After selling 48 oranges, the number of oranges becomes 3x - 48\n    # The new ratio is 1:2, so the new number of oranges can be written as y and lemons as 2y\n    # So, we have the proportion 3x - 48 : 5x = y : 2y\n    # From the proportion, we can write the equation (3x - 48)/5x = 1/2\n    # Solving for x gives us the original number of lemons, which is 5x\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3 * x - 48) / (5 * x), 1/2)\n    solution_x = solve(equation, x)[0]\n    lemons = 5 * solution_x\n\n    return lemons\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Treat the maths books as one unit and English books as one unit since they have to be together.\n    # We have 3 other books + 1 unit of maths books + 1 unit of English books = 5 units in total.\n    total_units = 5\n    \n    # Calculate permutations for these 5 units.\n    unit_permutations = factorial(total_units)\n    \n    # Now, calculate permutations for maths and English books among themselves.\n    math_books_permutations = factorial(3)\n    english_books_permutations = factorial(2)\n    \n    # Total different ways will be the product of the permutations.\n    total_ways = unit_permutations * math_books_permutations * english_books_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_percentage = 30\n    extra_discount = 100\n    tax_rate = 10\n\n    discounted_price = original_price * (1 - discount_percentage / 100)\n    price_after_extra_discount = discounted_price - extra_discount\n    final_price = price_after_extra_discount * (1 + tax_rate / 100)\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + people_behind + judy\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes_possible = 250 / flour_per_cake\n    return int(cakes_possible)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    total_days = 12\n    total_work = ivy_rate * total_days\n\n    # Let x be the days Kevin worked\n    for x in range(1, total_days + 1):\n        if total_work + kevin_rate * x >= 1:\n            return total_days - x\n            \nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n\n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    missing_number = (32 * 8) // 20\n    return missing_number\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    pages = 95\n    max_days = 0\n\n    # Since the sequence of pages read each day is strictly increasing and starts from 1,\n    # the maximum number of days corresponds to the longest arithmetic progression \n    # that sums up to 95, with the common difference of 1\n    for day in range(1, pages):\n        sum_pages = day * (day + 1) // 2\n        if sum_pages <= pages:\n            max_days = day\n        else:\n            break\n\n    return max_days\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    dividend = 379\n    divisor = 6\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n\n    num_ways = factorial(9) // factorial(9 - 4)\n\n    return num_ways\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price = 100  # in pence (equivalent to £1.00)\n\n    price_increase = new_price - original_price\n    percentage_increase = (price_increase / original_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_percentage = 8 / 100\n    gst_amount = bracelet_cost * gst_percentage\n    total_cost = bracelet_cost + gst_amount\n    return total_cost\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # In the worst case, Cindy could pick a black sock, then a red sock, \n    # alternating until she has one of each color. \n    # The next sock she picks must match one of the previous ones.\n    # There are 4 black and 4 red socks, so the maximum she can draw without \n    # getting a pair is one fewer than the total number of colors times two.\n    # This is because after this many draws, there are no other colors left to draw,\n    # and any subsequent draw will complete a pair.\n    black_socks = 4\n    red_socks = 4\n    num_colors = 2\n\n    # After picking one black and one red, she can still continue without having a pair\n    socks_without_pair = (black_socks - 1) + (red_socks - 1) + 1\n\n    # Whatever sock she pulls next must result in a pair. Therefore,\n    # we add one to the total to get the required number of socks.\n    socks_to_ensure_pair = socks_without_pair + 1\n\n    return socks_to_ensure_pair\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    # Let number of bicycles be 'b' and tricycles be 't'\n    # Each bicycle has 2 wheels, and each tricycle has 3 wheels\n    # b + t = 300 (total number of tricycles and bicycles)\n    # 2*b + 3*t = total number of wheels\n    # The total number of tricycle wheels (3*t) is 180 more than the total number of bicycle wheels (2*b)\n    # Hence, 3*t - 2*b = 180\n    \n    t = symbols('t')  # Using t as the symbol\n    b = 300 - t  # From the first equation, we replace b in terms of t\n    \n    # Now we solve the second equation\n    equation = Eq(3*t - 2*(300 - t), 180)\n    solutions = solve(equation, t)\n    \n    # We find the number of bicycles by substituting back the value of t\n    num_bicycles = 300 - solutions[0]\n\n    return num_bicycles\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n    \n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    depreciation_factor = (1 - depreciation_rate) ** years\n    final_value = initial_value * depreciation_factor\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Given the pattern 1 black, 2 white, 2 grey and there are 14 grey rabbits\n    # The pattern repeats every 5 rabbits (1B + 2W + 2G)\n    # For every set of 5 rabbits, there are 2 grey rabbits.\n    \n    # Calculate the number of complete patterns (sets of 5 rabbits) for 14 grey rabbits\n    complete_patterns = 14 // 2\n    \n    # Calculate the number of rabbits in the complete patterns\n    rabbits_in_complete_patterns = complete_patterns * 5\n    \n    # Calculate the remaining grey rabbits that don't complete a pattern\n    remaining_grey_rabbits = 14 % 2\n    \n    # To get the maximum number of rabbits, assume that any remaining grey rabbits \n    # were part of a full set that includes 1 black and 2 white rabbits\n    if remaining_grey_rabbits > 0:\n        extra_rabbits = 1 + 2 + remaining_grey_rabbits # 1 black and 2 white\n    else:\n        extra_rabbits = 0\n        \n    # Sum up the rabbits in complete patterns and any extra rabbits \n    # to get the maximum total number of rabbits\n    total_rabbits = rabbits_in_complete_patterns + extra_rabbits\n    \n    return total_rabbits\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015 * 2015 - 2016 * 2014\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrapped = 20\n    chocolate_with_foil = 15\n    not_chocolate_not_foil = 9\n\n    chocolate_not_foil = (total_biscuits - foil_wrapped) - not_chocolate_not_foil\n    chocolate_biscuits = chocolate_with_foil + chocolate_not_foil\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    result = 3.5 * 0.8 + 5.5 * 0.8 + 4/5\n    \n    return result\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of crystals Jason had initially\n    x = symbols('x')\n    \n    # Equation based on the problem statement\n    equation = Eq((x / 2 + 10) + 20 - 14, x - 35)\n\n    # Solving the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original speed be s (in metres per minute) and the time be t (in minutes)\n    s, t = symbols('s t')\n    \n    # If speed increases by 25%, the new speed is 1.25s and the time decreases by 20 minutes, so the new time is t - 20\n    eq1 = Eq(1.25 * s * (t - 20), s * t)\n\n    # If speed decreases by 45m/min, the new speed is s - 45 and the time increases by 75%, so the new time is 1.75t\n    eq2 = Eq((s - 45) * 1.75 * t, s * t)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (s, t))\n\n    # Calculate the distance\n    distance = solutions[s] * solutions[t]\n    \n    return distance.evalf()\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Since the number of trailing zeros in a product is determined by the pairs of 2s and 5s in its prime factorization,\n    # and 10 is 2 multiplied by 5, we only need to count the pairs of 2s and 5s.\n    # There are 15 fives and 10 twos\n    \n    # The number of zeros is equal to the minimum of the count of 2s and 5s, because each pair of (2,5) makes a 10.\n    num_zeros = min(15, 10)  # 10 twos and 15 fives will result in 10 pairs of (2,5), each giving one zero\n    \n    return num_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n\n    # Olaf had thrice as many carrots as Anna initially\n    equation1 = Eq(olaf, 3 * anna)\n    # Olaf gave away 335 carrots, so now Olaf has olaf - 335 carrots\n    # After giving away carrots, Anna had twice as many carrots as Olaf\n    equation2 = Eq(anna, 2 * (olaf - 335))\n\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    total_permutations = len(list(permutations(digits)))\n    # Since the decimal point can be placed in 4 positions (after each digit),\n    # the total possibilities are the number of permutations multiplied by 4\n    return total_permutations * 4\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n    Bala_behind_Ali = 1\n\n    total_people = people_in_front_of_Ali + Bala_behind_Ali + people_behind_of_Bala\n\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number_with_decimals = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number_with_decimals, 1)\n    is_tongtong_correct = rounded_number == 9764.0\n    return rounded_number if not is_tongtong_correct else \"Tongtong is correct.\"\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return int(total_age)\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_cost_pence = 85\n    total_pounds = 30\n    total_pence = total_pounds * 100\n    number_of_plants = total_pence // plant_cost_pence\n    \n    return number_of_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    \n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    # Start searching from the smallest set of consecutive numbers\n    n = 4\n    while True:\n        # Check if all four consecutive numbers are composite\n        if not all(any(i % j == 0 for j in range(2, i)) for i in range(n, n+4)):\n            n += 1\n        else:\n            # If all four are composite, return their sum\n            return sum(range(n, n+4))\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # According to the Pigeonhole Principle, to ensure picking at least one ball of each color,\n    # the magician has to pick at least one ball more than the total amount of the two colors with the fewer balls.\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n    \n    # We add the smallest two numbers of balls and then add one to ensure we pick at least one of the greatest colors' ball.\n    number_of_picks = blue_balls + red_balls + 1\n\n    return number_of_picks\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Total cars = Black cars + Blue cars\n    # Since all cars are either black or blue, there are also 60 - 18 = 42 black cars.\n    black_cars = total_cars - blue_cars\n\n    # Total Fords = Black Fords + Blue Fords\n    # There are 25 black Dodges, so black Fords = black cars - black Dodges\n    black_fords = black_cars - black_dodges\n\n    # Blue Fords = Total Fords - Black Fords\n    blue_fords = fords - black_fords\n\n    return blue_fords\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Use the solve_congruence function from sympy to find the smallest number\n    # that satisfies the given congruences\n    congruences = [(5, 11), (1, 7)]\n    smallest_number = solve_congruence(*congruences)[0]\n    \n    return smallest_number\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_earnings_per_day = 120\n    number_of_workdays = 5  # Monday to Friday\n\n    total_earnings = average_earnings_per_day * number_of_workdays\n\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    # Allocate at least 1 apple to each child\n    apples_left = total_apples - children\n    \n    # Pigeonhole principle: if n pigeons are put into m pigeonholes with n > m,\n    # then at least one pigeonhole must contain more than one pigeon.\n    # In this case, we are trying to find the least apples that the most apple-getting child receives\n    # after every other child has received at least one apple.\n    # Distribute the remaining apples evenly to 7 children, as 1 child will receive the most. \n    # If apples_left is evenly distributed among 7 children, what remains will go to the 8th child.\n    most_apples = (apples_left // (children - 1)) + 1  # +1 for the apple already received by the child\n\n    # Since the last child gets the remaining apples, check if there's a remainder\n    if apples_left % (children - 1) != 0:\n        most_apples += 1\n\n    return most_apples\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    marks_correct = 3\n    marks_wrong = -2\n    total_marks = 125\n\n    for correct_questions in range(total_questions + 1):\n        wrong_questions = total_questions - correct_questions\n        if (correct_questions * marks_correct) + (wrong_questions * marks_wrong) == total_marks:\n            return correct_questions\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    result = (3/8) * 960\n    return result\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(gcd(60, 72), 84)\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    starting_point = (10 - (30 % 12)) % 12\n    if starting_point == 0:\n        starting_point = 12\n\n    return starting_point\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(\"296{}12\".format(digit))\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    seq = [2, 2]\n    while len(seq) < 2011:\n        next_num = (seq[-1] + seq[-2]) % 10\n        seq.append(next_num)\n    return seq[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31\n    while True:\n        m_squared = sum([(2 * i - 1) for i in range(12, k+1)])\n        m = m_squared ** 0.5\n        if m.is_integer():\n            return int(m)\n        k += 1\n        \nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    initial_distance = 2 * 40  # Distance driven in the first 2 hours.\n    remaining_distance = 280   # Remaining distance to be driven.\n    total_distance = initial_distance + remaining_distance  # Total distance driven.\n\n    time_for_initial_distance = 2  # Time spent driving the initial distance.\n    time_for_remaining_distance = remaining_distance / 70  # Time spent for the remaining distance.\n    total_time = time_for_initial_distance + time_for_remaining_distance  # Total time spent driving.\n\n    average_speed = total_distance / total_time  # Average speed for the whole trip.\n    \n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has $15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    # Colin gives Bob $25 cards\n    # Bob now has $3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    remainder_423 = 423 % 4\n    remainder_326 = 326 % 4\n\n    product_remainder = (remainder_423 * remainder_326) % 4\n\n    return product_remainder\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = (original_amount + (saved_per_day * days_saved)) - lent_to_brother - spent_on_snacks\n\n    return current_amount\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let's assume total visitors to be x\n    # 37% of the visitors were men, so men = 0.37x\n    # women and children ratio = 4:5\n    # Let women be 4y and children be 5y, since they are in the ratio 4:5\n    # We also know men - children = 12\n    # So, 0.37x - 5y = 12 and 4y + 5y = x - 0.37x = 0.63x (since rest are women and children)\n    # Therefore, 9y = 0.63x and 0.37x - 5y = 12\n    # We solve these two equations to find the number of women (4y)\n    \n    from sympy import symbols, solve\n\n    x, y = symbols('x y')\n    equation1 = (0.37*x) - (5*y) - 12\n    equation2 = (9*y) - (0.63*x)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    women = 4 * solutions[y]\n\n    return int(women)\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_cow_per_day = 1\n\n    total_grass = cows * days * grass_per_cow_per_day\n\n    return total_grass\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one banana and one apple\n    banana, apple = symbols('banana apple')\n\n    # Ellie's payment equates to the cost of 2 bananas and 3 apples\n    equation1 = Eq(2 * banana + 3 * apple, 3)\n\n    # Beth's payment equates to the cost of 3 bananas and 2 apples\n    equation2 = Eq(3 * banana + 2 * apple, 4)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the cost for 10 bananas and 10 apples\n    annabella_payment = 10 * solutions[banana] + 10 * solutions[apple]\n\n    return annabella_payment\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Create the equation based on the problem statement\n    equation = Eq((89 - x), 12 * (45 - x))\n\n    # Solve the equation\n    amount_sold = solve(equation, x)\n\n    return amount_sold[0]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n    \n    # Probability both trains are not late\n    prob_both_not_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n    \n    # Probability at least one train is late\n    prob_at_least_one_late = 1 - prob_both_not_late\n    \n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_had = 86\n    lena_gave_away = 29\n    lena_left = lena_had - lena_gave_away\n    lena_final = 100\n    \n    strawberries_mother_gave = lena_final - lena_left\n    return strawberries_mother_gave\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_numbers = 90  # Since 2-digit numbers start from 10 to 99 inclusive\n    numbers_without_six = 8 * 8  # 1st digit options (1-9 except 6), 2nd digit options (0-9 except 6)\n\n    numbers_with_at_least_one_six = total_numbers - numbers_without_six\n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1/4/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/5/2023\", \"%d/%m/%Y\")\n    day_off = (end_date - start_date).days + 1  # +1 to include the start date\n\n    return day_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    n = 30\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_to_2023 = (2 ** 2023) % 10\n    sum_last_digit = (last_digit_2023_squared + last_digit_2_to_2023) % 10\n    ans = (sum_last_digit ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    total_numbers = 2022 # Numbers less than 2023\n    divisible_by_7 = total_numbers // 7\n    divisible_by_17 = total_numbers // 17\n    divisible_by_both = total_numbers // (7 * 17)\n\n    ans = total_numbers - (divisible_by_7 + divisible_by_17 - divisible_by_both)\n    return ans\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n\n    relative_speed = speed_a + speed_b\n\n    time = distance / relative_speed\n\n    return time\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    max_intersections = num_lines * (num_lines - 1) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5 = 5 ** 20 % 10\n    last_digit_7 = 7 ** 20 % 10\n    \n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    radius_semicircle = 14 / 2  # Radius of the semicircle\n    radius_quadrant = 14 / 2    # Radius of the quadrant (which is half of AB or CD)\n\n    pi = 22 / 7\n\n    # Perimeter of the 2 semicircles\n    perimeter_semicircles = 2 * pi * radius_semicircle\n\n    # Perimeter of the 2 quadrants (half of the circumference of a full circle with radius 14/2)\n    perimeter_quadrants = 2 * (pi * radius_quadrant)\n\n    # The straight line segments do not contribute to the perimeter since they are internal\n\n    # Total perimeter is the sum of perimeters of semicircles and quadrants\n    total_perimeter = perimeter_semicircles + perimeter_quadrants\n\n    return total_perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n\n    return gcd(pencils, pens)\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 3/5)\n    total_watermelons = remaining_after_first_day / (1 - 1/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    return 2.99 + 12.99 + 22.99\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, sam, jim = symbols('ahmad sam jim')\n    \n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n    \n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n    \n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pasta_packets = 6\n    pasta_price_per_packet = 95  # in pence\n    total_pasta_price = pasta_packets * pasta_price_per_packet  # in pence\n\n    rice_packets = 5\n    total_spend_pence = 1170  # converting pounds to pence\n\n    rice_price_per_packet = symbols('rice_price_per_packet')\n    total_rice_price = rice_packets * rice_price_per_packet\n\n    total_price_equation = Eq(total_pasta_price + total_rice_price, total_spend_pence)\n\n    rice_price_solution = solve(total_price_equation, rice_price_per_packet)\n\n    return rice_price_solution[0]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for num in range(600, 700, 5):  # Since the number is divisible by 5, it must end with 0 or 5\n        if num % lcm == 0:  # The number must also be divisible by the LCM of 3, 5, and 7\n            return num\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_noodles = 10\n    chosen_noodles = 6\n\n    ways_to_choose = comb(total_noodles, chosen_noodles)\n    \n    return ways_to_choose\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    a, b, c = 1, 1, 2\n    while True:\n        if a + 1 / (b + 1 / (c)) == 13 / 10:\n            break\n        c += 1\n        if c > 9:\n            b += 1\n            c = 1\n        if b > 9:\n            a += 1\n            b = 1\n    return a + 2 * b + 3 * c\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the number of days it takes for the lazy decorator to paint the house alone\n    l = symbols('l')\n    \n    # 1/20 is the part of the house the energetic one can paint in a day\n    # 1/l is the part of the house the lazy one can paint in a day\n    # Together, they can paint 1/12 of the house in a day\n\n    equation = Eq((1/20) + (1/l), 1/12)\n\n    # Solve the equation for l\n    days_lazy = solve(equation, l)\n\n    return days_lazy[0]\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2 / 3 * 45)\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # If the sum of 15 consecutive numbers is 1650, we calculate the average.\n    average = 1650 / 15\n    \n    # Since the numbers are consecutive, the average is also the middle number.\n    # Let's denote the smallest number as x. Then, the largest number would be x + 14.\n    # The middle number is the average of the smallest and largest number, so it is (x + (x + 14)) / 2.\n    # Hence the average is x + 7.\n    # We can find x by subtracting 7 from the average.\n    smallest_number = average - 7\n    \n    # Once we have the smallest number, we can find the largest by adding 14 to it.\n    largest_number = smallest_number + 14\n    \n    # The sum of the largest and the smallest number is then:\n    sum_largest_smallest = smallest_number + largest_number\n\n    return sum_largest_smallest\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while pies % 4 != 0 or pies % 6 != 0:\n        pies += 1\n    return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def count_digit_occurrences(n, digit):\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count(str(digit))\n    return count\n\ndef solution():\n    total_pages = 200\n    digit_to_count = 4\n    ans = count_digit_occurrences(total_pages, digit_to_count)\n    return ans\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys_in_line = 3\n    girls_in_line = 2\n    total_boys = 42\n\n    ratio = total_boys / boys_in_line\n    total_girls = ratio * girls_in_line\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for num in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    for a in range(8):\n        if (a % 8) == 6:\n            break\n    for b in range(8):\n        if (b % 8) == 7:\n            break\n\n    remainder = (a + b) % 8\n    return remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    skirts = 8\n\n    cloth_used_for_skirts = cloth_per_skirt * skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n\n    blouses = 2\n    cloth_per_blouse = remaining_cloth / blouses\n    \n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    seq = \"\"  # This will hold the concatenation of the numbers as string\n    num = 1  # Start with number 1 and increment subsequently\n    \n    # Build the sequence string until its length reaches 2019 or more\n    while len(seq) < 2019:\n        seq += str(num)\n        num += 1\n    \n    # 2019th character in the sequence string (0-based index in Python)\n    ans = int(seq[2018])\n    return ans\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    return sum(range(1, 12))\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    all_combinations = set(permutations(digits, 4))  # Using a set to get unique permutations\n    return len(all_combinations)\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # Total mass in kilograms\n    basket_mass_kg = 500 / 1000  # Basket mass converted to kilograms\n    kitten_mass_kg = 0.6  # Mass of one kitten in kilograms\n    number_of_kittens = 4  # Number of kittens\n    \n    # Total mass of kittens in kilograms\n    total_kittens_mass_kg = number_of_kittens * kitten_mass_kg\n    \n    # Mass of the cat in kilograms\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + total_kittens_mass_kg)\n    \n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    new_price = original_price * (1 + increase_percentage / 100)\n    \n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 3 + 4 + 1  # Three brothers, four sisters, and Mary\n    eggs_bought = family_members * (family_members - 1)  # Each person buys an egg for every other member\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "from datetime import datetime\n\ndef solution():\n    format = \"%H:%M\"\n    time_of_leaving = datetime.strptime(\"7:50\", format)\n    time_of_arrival = datetime.strptime(\"8:40\", format)\n    \n    travel_time = time_of_arrival - time_of_leaving\n    return travel_time.total_seconds() / 60  # convert to minutes\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, banana = symbols('apples banana')\n    equation1 = Eq(3 * apples + banana, 32)\n    equation2 = Eq(6 * apples + banana, 53)\n\n    solutions = solve((equation1, equation2), (apples, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    n = 5  # The term position of the missing number\n    # The sequence follows the pattern of the sum of consecutive natural numbers\n    # which is a triangular number sequence. The n-th term is given by n * (n + 1) / 2\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'm' be the initial amount of money Samuel had\n    m = symbols('m')\n\n    # After spending 1/6 of his money and an additional $5 on a DVD\n    remaining_after_dvd = m - (m / 6) - 5\n\n    # Then he spent 2/5 of his remaining money and an additional $12 on magazines\n    remaining_after_magazines = remaining_after_dvd - (2 / 5) * remaining_after_dvd - 12\n\n    # He had $24 left\n    equation = Eq(remaining_after_magazines, 24)\n    \n    # Solving the equation for 'm'\n    solution = solve(equation, m)\n    \n    # The solution is the initial amount of money\n    return solution[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_money_after_bag = 80 / (1 - 3/5)\n    initial_money = remaining_money_after_bag / (1 - 1/5)\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47  # Total volume of oil in the barrel\n    volume_poured_to_bottle = 5  # Volume of oil poured into a bottle\n    number_of_tanks = 6  # Number of tanks to pour the remaining oil into\n\n    remaining_oil = total_volume - volume_poured_to_bottle  # Calculate the remaining oil after pouring into the bottle\n    volume_per_tank = remaining_oil / number_of_tanks  # Calculate volume of oil in each tank\n\n    return volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    # Let x be the number of years from now when the condition will be met\n    # Creating an equation based on the ages and the given multiple\n    # 72 + x = 5 * (8 + x)\n\n    # Solving for x\n    x = symbols('x')\n    equation = Eq(72 + x, 5 * (8 + x))\n\n    # Finding the solution for x\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Calculate the position of Bud from the front by subtracting 10 from the total number of children and adding 1\n    # Position of Bud from the front is equal to the position of Pip from the front plus 4 children in between plus 1 for Pip\n    # Hence, total number of children is equal to the position of Bud from front plus 9 (the position of Bud from the end minus 1)\n    \n    pip_position_from_front = 8\n    bud_position_from_end = 10\n    children_between = 4\n\n    # Bud's position from the front is Pip's position plus the children between them plus 1 (for Pip)\n    bud_position_from_front = pip_position_from_front + children_between + 1\n\n    # Total number of children in the queue is Bud's position from front plus Bud's position from back minus 1\n    total_children = bud_position_from_front + bud_position_from_end - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Bob has $b$ cards, and Alan has $a$ cards\n    b, a = symbols('b a')\n    \n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(b, a + 15)\n    \n    # Bob now has 3 times as many as Alan after Colin gives Bob 25 cards\n    equation2 = Eq(b + 25, 3 * a)\n\n    # Solving the system of equations for b and a\n    solutions = solve((equation1, equation2), (b, a))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_amount = 2000\n    final_amount = 2519.42\n    years = 3\n\n    # Define the symbol for the interest rate\n    r = symbols('r')\n\n    # Compound interest formula: A = P (1 + r/n)^(nt)\n    # where P is the principal amount, r is the annual interest rate,\n    # n is the number of times that interest is compounded per year,\n    # and t is the time the money is invested for in years.\n    # In our case, interest is compounded annually so n = 1\n\n    # The equation is final_amount = initial_amount * (1 + r)^years\n    equation = Eq(final_amount, initial_amount * (1 + r)**years)\n\n    # Solve the equation for r\n    interest_rate = solve(equation, r)[0]\n    \n    # Since we want the rate as a percentage rounded to the nearest tenth of a percent\n    interest_rate_percent = round(interest_rate * 100, 1)\n\n    return interest_rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Calculate the sum of odd numbers from 1 to 50\n    sum_odds = sum(range(1, 51, 2))\n\n    # Calculate the sum of even numbers from 1 to 50\n    sum_evens = sum(range(2, 51, 2))\n\n    # Calculate the difference between the sums of evens and odds\n    difference = sum_evens - sum_odds\n\n    return difference\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Let n be the total number of elderly\n    # Let x be the total number of oranges Janice has\n    \n    # If she gave 20 oranges to each elderly, 10 elderly will not receive any oranges.\n    # Therefore, there are (n - 10) elderly who would receive oranges if each got 20.\n    # This means x = 20 * (n - 10)\n    \n    # If she gave 16 oranges to each elderly, she would have enough oranges to pack 25 boxes of 2 dozen oranges each.\n    # Therefore, x = 16 * n = 25 * 24\n    # Solve these two equations to find n and x:\n    \n    # 20 * (n - 10) = 16 * n\n    # 16 * n = 25 * 24\n    \n    # Solve for n:\n    # 20n - 200 = 16n\n    # 4n = 200\n    # n = 50\n    \n    # Now solve for x:\n    # x = 16 * n\n    # x = 16 * 50\n    # x = 800\n    \n    # Now we need to divide the total number of oranges by the number of elderly:\n    # Each elderly should get x / n oranges.\n    # Each elderly should get 800 / 50 oranges.\n    \n    n = 50\n    x = 800\n    \n    oranges_per_elderly = x // n\n    \n    return oranges_per_elderly\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Given m~Δ~n = 5m + 3n\n    # and x~Δ~9 = 37\n\n    # Let's solve for x using the definition of the operation\n    # We know that m~Δ~n = 5m + 3n, so we substitute m with x and n with 9\n    # x~Δ~9 = 5x + 3*9 ⟶ equation (1)\n    # 5x + 27 = 37\n    \n    # Now we solve for x by subtracting 27 from both sides\n    # 5x = 37 - 27\n    # 5x = 10\n    # x = 10 / 5\n    x = 10 / 5\n\n    # We return the value of x\n    return int(x)\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # To be sure to get 4 balls of the same color, Sheila could take all balls of the other two colors first.\n    # Hence, we assume the worst case scenario.\n    # If she takes all blue balls (5 balls) and all orange balls (4 balls), she is still not sure to have 4 balls of the same color.\n    # However, as soon as she takes one more ball (either a blue, an orange, or a yellow), she will have 4 balls of the same color.\n    # So the number of balls she needs to take is 5 (blue) + 4 (orange) + 1 (any) = 10.\n\n    return 5 + 4 + 1\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    part_weight = 27\n    soil_removed_fraction = 1/5\n\n    soil_removed_weight = full_weight - part_weight\n    full_soil_weight = soil_removed_weight / soil_removed_fraction\n    empty_wheel_barrow_weight = full_weight - full_soil_weight\n\n    return empty_wheel_barrow_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be Tim's cookies, y be Tyler's cookies.\n    t, y = symbols('t y')\n    \n    # Equation: 1/6 of Tim's cookies = 3/8 of Tyler's cookies\n    equation1 = Eq(t / 6, y * 3 / 8)\n    \n    # After selling 96 cookies, Tim has 9 times as many as Tyler\n    equation2 = Eq(t, (y - 96) * 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, y))\n    \n    # Tim's original number of cookies\n    tim_cookies = solutions[t]\n    # Tyler's original number of cookies\n    tyler_cookies = solutions[y]\n\n    # The total number of cookies at first\n    total_cookies = tim_cookies + tyler_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of vanilla cupcakes be 'v'\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Set up the equations according to the problem statement\n    eq1 = Eq(chocolate, vanilla + 72)  # chocolate cupcakes are 72 more than vanilla\n    eq2 = Eq(blueberry, vanilla - 36)  # blueberry cupcakes are 36 less than vanilla\n    eq3 = Eq((chocolate - chocolate / 6) + (vanilla - 2 * vanilla / 3) + (blueberry - 7 * blueberry / 9), 427)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (chocolate, vanilla, blueberry))\n    \n    chocolate_cupcakes_sold = solutions[chocolate] / 6  # Because 1/6th were sold\n    \n    return chocolate_cupcakes_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    interval1 = 24\n    interval2 = 30\n    first_departure = 9 * 60 # convert 9am to minutes past midnight\n\n    next_common_departure = first_departure + lcm(interval1, interval2)\n\n    # Find the hour and minute of the next common departure.\n    hour = next_common_departure // 60\n    minute = next_common_departure % 60\n\n    # Convert to 12-hour format if the hour is greater than 12.\n    if hour > 12:\n        hour -= 12\n\n    return f\"{hour}:{minute:02d} a.m.\" if next_common_departure < 12 * 60 else f\"{hour}:{minute:02d} p.m.\"\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3/4\n    gallons_poured = 24\n\n    full_tank = gallons_poured / part_filled\n\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    red_initial, white_initial = symbols('red_initial white_initial')\n    red_pip, white_bud = symbols('red_pip white_bud')\n\n    # Equations based on the problem statement\n    equation1 = Eq(red_initial / white_initial, 3/2)\n    equation2 = Eq((red_initial + red_pip) / white_initial, 5/3)\n    equation3 = Eq((red_initial + red_pip) / (white_initial + white_bud), 5/4)\n    equation4 = Eq(white_bud, red_pip + 100)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (red_initial, white_initial, red_pip, white_bud))\n\n    # Return the number of white marbles initially\n    return solutions[white_initial]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Since a divided by 8 has a remainder of 6, we can express a as 8k + 6 where k is some integer\n    # Since b divided by 8 has a remainder of 7, we can express b as 8m + 7 where m is some integer\n\n    # (a + b) then is (8k + 6) + (8m + 7) = 8(k + m) + 13\n    # When you divide that by 8, the remainder is the same as the remainder of 13 divided by 8,\n    # because the term 8(k + m) will be completely divisible by 8\n\n    # The remainder of 13 divided by 8 is 5\n    remainder_of_a_plus_b = 5\n\n    return remainder_of_a_plus_b\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark - david, 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Desks in front of Jessica's\n    desks_in_front_of_jessica = 5\n\n    # Desks behind Judy's\n    desks_behind_judy = 7\n\n    # Desks between Jessica and Judy\n    desks_between_jessica_and_judy = 1\n\n    # Total desks = Desks in front of Jessica + Desks between Jessica and Judy + Desks behind Judy + Jessica's desk + Judy's desk\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy + 1 + 1\n\n    return total_desks\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n    \n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for number in range(2, 57):\n        count += str(number).count('6')\n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the total weight of the group before anyone joined\n    # Let n be the number of people in the group before anyone joined\n    # Then the average weight before Aaron joined is x/n\n\n    # When Aaron joins, the total weight is x + 45, and the number of people is n + 1\n    # The new average weight is (x + 45) / (n + 1) = 61\n\n    # When Ben joins, the total weight is x + 45 + 71, and the number of people is n + 2\n    # The new average weight is (x + 45 + 71) / (n + 2) = 62\n\n    # We can set up the system of equations:\n    # (x + 45) / (n + 1) = 61\n    # (x + 45 + 71) / (n + 2) = 62\n\n    # From the first equation: x + 45 = 61 * (n + 1)\n    # From the second equation: x + 45 + 71 = 62 * (n + 2)\n\n    # Let's solve these equations:\n    from sympy import symbols, Eq, solve\n\n    x, n = symbols('x n')\n    equation1 = Eq(x + 45, 61 * (n + 1))\n    equation2 = Eq(x + 45 + 71, 62 * (n + 2))\n\n    solutions = solve((equation1, equation2), (x, n))\n\n    # The average weight before Aaron and Ben joined is the total weight divided by the number of people,\n    # which is x/n\n    average_weight_before = solutions[x] / solutions[n]\n\n    return average_weight_before\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white = 1991\n    black = 1000\n    total_taken = 2989\n    \n    while total_taken > 0:\n        # if both balls taken out are the same color, it doesn't change the difference between white and black ball counts\n        # if they are different, one black is removed, and one white is put back, effectively removing one black\n        if white > black:\n            # more white balls, so likely we take two white balls, put one back, and then add a black from bag B\n            white -= 1\n            black += 1\n        else:\n            # more or equal black balls, likely we take two black balls\n            black -= 1\n        total_taken -= 2\n    \n    # After all balls are taken out, only one color will be left\n    if white > black:\n        return white, 'white'\n    else:\n        return black, 'black'\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "def solution():\n    for i in range(10000, 100000):\n        num_str = str(i)\n        if '0' in num_str or len(set(num_str)) != len(num_str):\n            continue\n        if int(num_str[0]) * int(num_str[1:3]) * int(num_str[3:]) == i:\n            return i\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    # Number of people-hours required to build the bridge\n    # people_hours = people * time\n    people_hours = 6 * 15\n\n    # Number of people needed to build the bridge in 2 hours\n    # people = people_hours / time\n    people_needed = people_hours / 2\n\n    return people_needed\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # converting metres to centimetres\n    return int(n)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    total_money = 30\n    sweet_price = 3.99\n    magazine_price = 2.50\n    stickers_price = 0.70\n    pizza_price = 10.99\n    orange_juice_price = 1.50 * 4\n\n    total_spent = sweet_price + magazine_price + stickers_price + pizza_price + orange_juice_price\n    change_left = total_money - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    # Iterate over possible splits of the number 5\n    for i in range(1, 5):\n        for j in range(1, 5):\n            if i + j == 5:\n                count += 1\n            for k in range(1, 5):\n                if i + j + k == 5:\n                    count += 1\n                for l in range(1, 5):\n                    if i + j + k + l == 5:\n                        count += 1\n    return count // 2  # Dividing by 2 to account for duplicates (order doesn't matter)\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for unit in range(2, 10):  # The unit digit goes from 2 to 9\n        hundred = unit - 2  # The hundred digit must be two less than the unit\n        for ten in range(0, 10):  # The ten digit can be any from 0 to 9\n            count += 1  # Each valid combination is a new \"good-number\"\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two unknowns\n    mass_daughter, mass_mr_han = symbols('mass_daughter mass_mr_han')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(mass_mr_han, 3 * mass_daughter) # Mr Han's mass is three times his daughter's mass\n    equation2 = Eq(mass_daughter + mass_mr_han, 91.2) # Total mass\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mass_daughter, mass_mr_han))\n\n    return solutions[mass_mr_han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - 2/5)\n    initial_chocolates = remaining_after_students / (1 - 0.8)\n\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        ans += (2 * i - 1)\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # If Samantha has more votes than anyone else, she must have more than a third of the votes.\n    # Since 25 votes are cast, we divide 25 by 3 and take the ceiling to find the minimum number of votes Samantha could have.\n    total_votes = 25\n    min_votes_for_majority = total_votes // 3 + 1 # plus one to ensure she has more than anyone else\n    \n    return min_votes_for_majority\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    unique_totals = set()\n    \n    for i in coin_values:\n        for j in coin_values:\n            for k in coin_values:\n                total = i + j + k\n                unique_totals.add(total)\n                \n    return len(unique_totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def count_ones_in_position(position, length):\n    count_per_cycle = 10 ** (length - position - 1)\n    complete_cycles = (130 // (10 ** length))\n    ones_in_complete_cycles = complete_cycles * count_per_cycle\n\n    remainder = 130 % (10 ** length)\n    ones_in_incomplete_cycle = max(0, remainder - (10 ** (length - position - 1)) + 1)\n\n    if position == length - 1:\n        ones_in_incomplete_cycle = min(10 ** (length - position - 1), remainder + 1)\n\n    return int(ones_in_complete_cycles + ones_in_incomplete_cycle)\n\ndef solution():\n    total_ones = 0\n    num_length = len(str(130))\n    for pos in range(num_length):\n        total_ones += count_ones_in_position(pos, num_length)\n    return total_ones\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x + 7, 5 * (x + 1))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Using the compound interest formula A = P(1 + r/n)^(nt), where:\n    # A = the future value of the investment/loan, including interest\n    # P = the principal investment amount (initial deposit or loan amount)\n    # r = the annual interest rate (decimal)\n    # n = the number of times that interest is compounded per year\n    # t = the number of years the money is invested or borrowed for\n    \n    # In this case, P = 6000, A = 8029.35, t = 5 years, compounded annually (n = 1)\n    \n    principal = 6000\n    amount_after_5_years = 8029.35\n    t = 5\n    n = 1\n    \n    r = symbols('r', positive=True)  # interest rate\n    # Equation for compound interest\n    equation = Eq(principal * (1 + r/n)**(n*t), amount_after_5_years)\n    \n    # Solving for the interest rate (r)\n    interest_rate_decimal = solve(equation, r)[0]\n    \n    # Converting the decimal interest rate to a percentage\n    x = interest_rate_decimal * 100\n\n    return round(x.evalf(), 2)\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    # Initial count of digits used\n    digits_used = 0\n    current_max_page = 0\n    \n    # Counting digits for one-digit page numbers (1-9)\n    for i in range(1, 10):\n        digits_used += 1\n        if digits_used > 291:\n            return current_max_page\n        current_max_page = i\n    \n    # Counting digits for two-digit page numbers (10-99)\n    for i in range(10, 100):\n        digits_used += 2\n        if digits_used > 291:\n            return current_max_page\n        current_max_page = i\n    \n    # Counting digits for three-digit page numbers\n    for i in range(100, 1000):\n        digits_used += 3\n        if digits_used > 291:\n            return current_max_page\n        current_max_page = i\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_pages = symbols('total_pages')\n    read = total_pages / 6  # Since the ratio is 1:5, 1 part read -> total_pages/6\n    not_read = 5 * read\n\n    equation = Eq(read + 80, 0.7 * total_pages)\n    ans = solve(equation, total_pages)\n\n    return ans[0]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Total points together\n    total_points = 95\n    # Points difference\n    points_diff = 15\n    # Total questions\n    total_questions = 10\n    \n    # Let's x be the number of correct answers CC got\n    # Then Vivi will have x + 3 correct answers (since 15 points difference means 3 more correct answers because 10 - (-5) = 15)\n    \n    # CC's points: 10*x - 5*(10 - x)\n    # Vivi's points: 10*(x + 3) - 5*(10 - (x + 3))\n    # The sum of their points is 95.\n    \n    # We can set up the equation based on the conditions given:\n    # (10*x - 5*(10 - x)) + (10*(x + 3) - 5*(10 - (x + 3))) = 95\n    \n    # Now solve for x:\n    for x in range(total_questions + 1): # CC can correctly answer 0 to 10 questions\n        if (10*x - 5*(10 - x)) + (10*(x + 3) - 5*(10 - (x + 3))) == total_points:\n            return x\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    girls_per_room = 5\n    teachers = 6\n    teachers_per_room = teachers // 3\n\n    # Calculate number of rooms for girls and teachers\n    rooms_for_girls = girls // girls_per_room\n    rooms_for_teachers = teachers // teachers_per_room\n\n    if girls % girls_per_room > 0:  # Check if there's a remainder of girls needing another room\n        rooms_for_girls += 1\n\n    total_rooms = rooms_for_girls + rooms_for_teachers\n    \n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    # Weight of flour needed for 15 people\n    flour_for_15 = 650\n    # Number of people we want to make the cake for\n    people = 18\n\n    # Calculate the weight of flour needed per person\n    flour_per_person = flour_for_15 / 15\n\n    # Calculate the weight of flour needed for 18 people\n    flour_needed = flour_per_person * people\n\n    return flour_needed\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_price = 6.34\n    child_price = 4.75\n    adults = 2\n    children = 3\n    \n    total_cost = (adult_price * adults) + (child_price * children)\n    \n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        ""
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    # Let x and y be the two original numbers\n    x = Symbol('x')\n    y = Symbol('y')\n\n    # Equation 1: The sum of two numbers is 11.63\n    eq1 = Eq(x + y, 11.63)\n    \n    # Equation 2: The shifted decimal sum is 5.87\n    # One number is shifted by decimal, so one number is either 10x or x/10\n    eq2 = Eq(10*x + y, 5.87)\n    eq3 = Eq(x + 10*y, 5.87)\n\n    # We have two possible cases here, solve both\n    solutions1 = solve((eq1, eq2), (x, y))\n    solutions2 = solve((eq1, eq3), (x, y))\n    \n    # We'll check which one of these gives a positive solution\n    for sol in [solutions1, solutions2]:\n        x_val, y_val = sol[x], sol[y]\n        if x_val > 0 and y_val > 0:\n            # Calculate the difference between the two numbers and multiply by 100\n            diff = abs(x_val - y_val) * 100\n            return int(diff)\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_in_m = 1000\n    mm_value = 7000000\n    m_value = mm_value / mm_in_m\n    return m_value\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    total_members = 99\n    # Let's denote the members with variables x,y,z for Science, Literature, and Math\n    # From the problem, we get the equations x/y = 9/10 and y/z = 5/7\n    # We also know that x + y + z = 99\n    # Let's express x, y, z interms of a common variable to solve the equations easily\n    \n    # Assume the number of Literature members (y) as common variable = 10k (because of 9:10 ratio)\n    # Then Science members (x) would be 9k (because of 9:10 ratio)\n    # Mathematics members (z) would be 7k*2 (because of 5:7 ratio and Literature members was 10k, which is 5*2)\n    \n    # Therefore, x + y + z = 9k + 10k + 14k = 33k\n    # Now, we can find the value of k as it should be total_members / 33\n    k = total_members / 33\n    \n    # Now we can calculate the actual number of members in Science, Literature, and Math\n    science_members = 9 * k\n    literature_members = 10 * k\n    math_members = 14 * k\n    \n    # Members difference between Math and Literature club\n    difference = math_members - literature_members\n    \n    return int(difference)\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # The smallest possible non-zero positive integer divisor\n\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    blue_marbles = 4\n    yellow_marbles = 3\n    red_marble = 1\n    \n    # To be sure of getting 3 marbles of the same colour, we consider the worst case scenario.\n    # Taking the maximum possible marbles without getting 3 of the same color:\n    marbles_taken_without_3_of_same = (blue_marbles - 1) + (yellow_marbles - 1) + (red_marble - 1)\n    \n    # Now we add one more marble to ensure we get at least 3 of the same color.\n    marbles_to_be_sure = marbles_taken_without_3_of_same + 1\n    \n    return marbles_to_be_sure\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n    \n    # When Melissa was 8, her mother was 32, so the age difference is 32 - 8\n    age_difference = 32 - 8\n    \n    # Now, Melissa's mother is three times as old as Melissa\n    equation1 = Eq(mother_now, 3 * melissa_now)\n\n    # The difference in their ages is always the same\n    equation2 = Eq(mother_now - melissa_now, age_difference)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n    \n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side has 6 flowers, but we have to subtract the corner flowers because they are counted twice\n    # once for each side that intersects at the corner.\n    flowers_per_side = 6\n    corner_flowers = 1\n    \n    # Total flowers for all sides minus the corner flowers counted twice\n    total_flowers = (flowers_per_side * 4) - (corner_flowers * 4)\n    \n    # Add the corner flowers back once\n    total_flowers += 4\n    \n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    num = 48\n    factors = [i for i in range(1, num+1) if num % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = original_length - (piece1 + piece2)\n\n    lengths = [piece1, piece2, piece3]\n    difference = max(lengths) - min(lengths)\n\n    return difference\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Cost of book and bag together\n    total_cost = 132\n    \n    # Let the original amount Li Yan had be x\n    # She spent 1/3 of x on book: (1/3)x\n    # Remaining money after buying book: x - (1/3)x = (2/3)x\n    # She spent 1/2 of the remainder on a bag: (1/2)(2/3)x = (1/3)x\n    # The book and bag cost 132 in total:\n    # (1/3)x + (1/3)x = 132\n    # (2/3)x = 132\n    # x = 132 / (2/3)\n    # x = 132 * (3/2)\n    original_amount = total_cost * (3 / 2)\n\n    # Thomas' mistake was in adding fractions that represent different parts of the remaining amount,\n    # not the total amount; thus his answer is incorrect.\n    return original_amount\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n    equation2 = Eq(basketball - volleyball, 10)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    length_of_pattern = len(pattern)\n    full_repetitions = 47 // length_of_pattern\n    remaining_digits = 47 % length_of_pattern\n    sum_of_full_repetitions = sum(map(int, pattern)) * full_repetitions\n    sum_of_remaining_digits = sum(map(int, pattern[:remaining_digits]))\n    total_sum = sum_of_full_repetitions + sum_of_remaining_digits\n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_for_6 = 2.52\n    cost_per_bottle = cost_for_6 / 6\n    cost_for_9 = cost_per_bottle * 9\n    return round(cost_for_9, 2)\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    total_avg = 35\n    boys_avg = 20\n    girls_avg = 60\n\n    # Let x be the number of boys and (40-x) the number of girls.\n    # total_avg * total_pupils = boys_avg * x + girls_avg * (40 - x)\n    x = symbols('x')\n    equation = Eq(boys_avg * x + girls_avg * (total_pupils - x), total_avg * total_pupils)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_problems = 25\n    total_points = 61\n    for correct_jack in range(total_problems + 1):\n        incorrect_jack = total_problems - correct_jack\n        points_jack = (correct_jack * 4) - incorrect_jack\n        if points_jack == total_points:\n            for correct_johnson in range(correct_jack):\n                incorrect_johnson = total_problems - correct_johnson\n                points_johnson = (correct_johnson * 4) - incorrect_johnson\n                if points_johnson == total_points:\n                    not_answered_jack = total_problems - correct_jack\n                    return not_answered_jack\n    return None\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # price per cupcake for the first 20\n    price_per_cupcake = 4.50\n    # shipping and handling\n    shipping_handling = 12.00\n    # discounted price for cupcakes over 20\n    discount = 0.20\n    # total bill\n    total_bill = 120.00\n    \n    # If Kate ordered 20 or fewer cupcakes\n    if (total_bill - shipping_handling) / price_per_cupcake <= 20:\n        number_of_cupcakes = (total_bill - shipping_handling) / price_per_cupcake\n    else:\n        # Calculate the cost for the first 20 cupcakes\n        cost_for_first_20 = 20 * price_per_cupcake + shipping_handling\n        # Calculate the number of cupcakes over 20\n        number_of_additional_cupcakes = (total_bill - cost_for_first_20) / (price_per_cupcake * (1 - discount))\n        # Total number of cupcakes\n        number_of_cupcakes = 20 + number_of_additional_cupcakes\n    \n    return int(number_of_cupcakes)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pig, goat = symbols('pig goat')\n\n    equation1 = Eq(3 * pig + goat, 440)\n    equation2 = Eq(pig + 2 * goat, 280)\n\n    solutions = solve((equation1, equation2), (pig, goat))\n\n    total_cost = 5 * solutions[pig] + 5 * solutions[goat]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    additional_pence = 57\n\n    total_pence = total_pounds * 100 + additional_pence\n    ans = total_pence / 100\n\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(str(num) + '1') == 3 * int('1' + str(num)):\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front_of_rose = 9\n    rose_position_from_back = 12\n    total_people = people_in_front_of_rose + rose_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of days it takes for the lazy decorator to paint the house on their own\n    x = symbols('x')\n    \n    # Equation: (1/10 + 1/x) * 6 = 1\n    # Explanation: (Energetic's work per day + Lazy's work per day) * 6 days = 1 house painted\n    equation = Eq((1/10 + 1/x) * 6, 1)\n    \n    # Solve for x\n    days_lazy = solve(equation, x)[0]\n    \n    return days_lazy\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_difference = 42\n\n    # Grandmother's current age\n    grandmother_age_now = john_age_now + grandmother_age_difference\n\n    # Both ages in 2 years\n    john_age_in_2_years = john_age_now + 2\n    grandmother_age_in_2_years = grandmother_age_now + 2\n\n    # Total age in 2 years\n    total_age_in_2_years = john_age_in_2_years + grandmother_age_in_2_years\n\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number John thought of\n    x = symbols('x')\n\n    # Set up the equation according to the problem\n    equation = Eq((x + 45) / 3, 2 * x)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Get the solution as number (not a list)\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    thought_number = (result - 10) / 2\n    return thought_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Since each brother must have at least two books, distribute two books to each first.\n    remaining_books = 10 - 2*3 # 10 total books - 2 books per 3 brothers\n    \n    # Iterate through each possible number for the first brother, ensuring there's at least 1 book for each other brother.\n    for x1 in range(0, remaining_books + 1):  # +1 because range is exclusive on the upper bound\n        for x2 in range(0, remaining_books - x1 + 1):\n            x3 = remaining_books - x1 - x2\n            count += 1  # This combination is possible, count it.\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    red = 12\n    blue = 9\n    yellow = 8\n    green = 3\n\n    # Since we want to ensure 4 marbles of different colours,\n    # in the worst case, we have to consider the scenarios where we pick\n    # the maximum number of marbles of one colour before we get to the fourth colour.\n    # Hence we might pick all greens + all yellows, and still need to draw more.\n    # Since we want to guarantee the fourth colour, \n    # we have to draw at least one more than all of greens and yellows combined.\n\n    # In the worst-case scenario, we would draw all greens and yellows first.\n    worst_case = green + yellow + 1  # We add 1 to ensure we get a fourth colour.\n\n    return worst_case\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    number_str = '5' * 19 + '0' + '9' * 19  # replace square with 0 to find its positional value\n    for digit in range(10):\n        test_number = int(number_str[:19] + str(digit) + number_str[20:])\n        if test_number % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_book = 1 / 5\n\n    total_pages = pages_read_first_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Since the children are standing from shortest to tallest,\n    # the 9 children before Tom are shorter and 20 children after Tom are taller.\n    # The maximum height Tom can have is if he's taller than those 9 children\n    # by the smallest possible difference, which is 1 cm for each child.\n    # We then add 9 cm to Tom's height for each of those children,\n    # starting from a base height of 1 cm for the first child.\n    \n    # Starting from 1 cm\n    base_height = 1 \n    \n    # 9 children before Tom each 1 cm shorter\n    height_before_tom = base_height + 9 \n    \n    # The maximum height of Tom would be 1 cm less than the 131 cm tall child\n    max_height_tom = 131 - (31 - 10)\n\n    return max_height_tom\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # Two-digit numbers start at 10 and end at 99\n        if number % 10 == 6:       # Ends in 6 if it's divisible by 10 with a remainder of 6\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    last_purchase = 105.6 - 14.4\n    total_spent = last_purchase + 105.6\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let x be the number of storybooks Anthea has at first.\n    # After giving 4 storybooks, Jason and Anthea will have the same number of books.\n    # Therefore, Jason will have 30 - 4 books, Anthea will have x + 4 books.\n    # Setting up the equation: 30 - 4 = x + 4\n    \n    # Solve the equation to find x\n    jason_books_after_giving = 30 - 4\n    anthea_books_after_receiving = jason_books_after_giving  # They have the same number after Jason gives 4 books to Anthea\n    anthea_books_initial = anthea_books_after_receiving - 4\n    \n    # The difference between Jason and Anthea at first\n    difference = 30 - anthea_books_initial\n    \n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2021):\n        a, b = b, a + b\n        a %= 3  # Only the remainder is important for our purpose\n        b %= 3\n    return a\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n\n    equation = Eq((208 - magic_number), 9 * (136 - magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Let x be the number of students\n    # Let y be the total number of gifts\n    # According to the problem statement, we have two equations:\n    # y = 5x + 3 (1)\n    # y = 4x + 9 (2)\n    # We need to find a solution for x such that both (1) and (2) are true\n    \n    # Since both equations equal y, we can set them equal to each other:\n    # 5x + 3 = 4x + 9\n    \n    # Let's solve for x\n    x = 9 - 3  # Subtract 3 from both sides\n    x = x // (5 - 4)  # Divide both sides by (5 - 4) to solve for x\n    \n    return x\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    number = 840\n    factors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all permutations of the digits 1 through 8\n    perms = permutations(range(1, 9), 2)\n    \n    # Convert each permutation to an integer and sort them\n    numbers = sorted([10 * a + b for a, b in perms])\n    \n    # Find numbers satisfying the given conditions\n    for i, num in enumerate(numbers):\n        tens, ones = divmod(num, 10)\n        if ones == 2 * tens:  # smallest number condition\n            smallest = num\n        if tens + ones == 9:  # largest number condition\n            largest = num\n        if tens - ones == 5:  # second largest number condition\n            second_largest = num\n        if sum(divmod(num, 10)) % 2 == 1:  # only one odd number\n            odd_number = num\n\n    # Make a list of the numbers we have found\n    found_numbers = [smallest, largest, second_largest, odd_number]\n    \n    # The second smallest number is the one not listed above\n    # and also different from the odd number (if the odd number is not already one of the smallest/largest)\n    all_numbers = set(numbers)\n    for num in found_numbers:\n        all_numbers.discard(num)\n    \n    second_smallest = min(all_numbers - {odd_number})\n    \n    return second_smallest\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts of money that Alan, Bella, and Chloe have\n    alan, bella, chloe = symbols('alan bella chloe')\n    \n    # Alan's money to Bella's money is in the ratio 4:3\n    equation1 = Eq(alan / bella, 4 / 3)\n    \n    # The total amount of money they have is £200\n    equation2 = Eq(alan + bella + chloe, 200)\n    \n    # Alan has £20 more than Chloe\n    equation3 = Eq(alan, chloe + 20)\n\n    # Solve the system of equations\n    result = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    # Chloe's amount is what we are interested in\n    return result[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_price = 7.85\n    bar_price = 1.83 * 2\n    total_cost = box_price + bar_price\n    payment = 20\n\n    change = payment - total_cost\n\n    return change\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # There are 3 family members who can stand in any order between Lily and her mother\n    # Lily is always on the left end and her mother is always on the right end\n    number_of_family_members_in_between = 3\n\n    # These family members can be arranged in factorial(number_of_family_members_in_between) ways\n    num_ways_to_line_up = factorial(number_of_family_members_in_between)\n\n    return num_ways_to_line_up\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    difference = 4\n    last_term = 99\n\n    # Calculate the number of terms in the sequence\n    n = ((last_term - first_term) / difference) + 1\n    \n    # The sum of an arithmetic sequence is given by: n/2 * (first_term + last_term)\n    total_seats = n/2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):  # smallest two-digit number is 10\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    pounds = 1.28\n    pence = 0.57\n\n    ans = pounds - pence\n    return ans\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/2) * remaining\n\n    equation = Eq(children, men + 140)\n\n    total = solve(equation, total_visitors)\n\n    return total[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    \n    # Sam has 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gives 20% of his stickers to Peter\n    sam_after_giving = sam - 0.20 * sam\n    peter_after_receiving = peter + 0.20 * sam\n    \n    # Peter gives 25% of his new total stickers to Sam\n    sam_final = sam_after_giving + 0.25 * peter_after_receiving\n    peter_final = peter_after_receiving - 0.25 * peter_after_receiving\n    \n    # In the end, Sam has 96 stickers more than Peter.\n    equation2 = Eq(sam_final, peter_final + 96)\n\n    initial_stickers = solve((equation1, equation2), (sam, peter))\n    \n    return initial_stickers[peter]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # The average of three numbers is 120\n    average_initial = 120\n    # With a fourth number, the average becomes 150\n    average_final = 150\n\n    # Total of the initial three numbers\n    total_initial = average_initial * 3\n    # Total of the final four numbers\n    total_final = average_final * 4\n\n    # The fourth number is the difference between the final and initial totals\n    fourth_number = total_final - total_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    m = 5\n    sum_of_squares = lambda x: (x * (x + 1) * (2 * x + 1)) // 6\n    kimmy_answer = sum_of_squares(n) - sum_of_squares(m - 1)\n    correct_answer = sum_of_squares(n) - sum_of_squares(m - 1)\n    return correct_answer\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    correct_points = 5\n    incorrect_points = -2\n    total_questions = 20\n    total_points = 51\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == total_points:\n            return correct\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    # After spending 6/11 of the money and additional $5\n    money_after_highlighters = initial_money - (6/11) * initial_money - 5\n\n    # Then she spent 3/10 of the remainder and additional $12\n    money_after_pens = money_after_highlighters - (3/10)*money_after_highlighters - 12\n    \n    # Remaining money is $30\n    equation = Eq(money_after_pens, 30)\n    \n    # Solving the equation for initial money\n    ans = solve(equation, initial_money)\n\n    return ans[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    ans = 543 * 6\n    return ans\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Sally's current age be s and Gillian's current age be g\n    s, g = symbols('s g')\n\n    # Given ratio (s/g) is 2/7\n    ratio_now = Eq(s/g, 2/7)\n\n    # In 15 years, the ratio (s+15)/(g+15) will be 1/2\n    ratio_future = Eq((s+15)/(g+15), 1/2)\n\n    # Solve the system of equations for s and g\n    ages_now = solve((ratio_now, ratio_future), (s, g))\n\n    # Return Sally's current age\n    return ages_now[s]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n\n    actual_subtrahend = 75\n    # Normally, Result = Minuend - Subtrahend\n    # Here, Result + Mistaken_Subtrahend = Minuend\n    # And we know Mistaken_Result + Mistaken_Subtrahend = Minuend\n    minuend = mistaken_result + mistaken_subtrahend\n    # Now, find the actual result using the correct subtrahend\n    actual_result = minuend - actual_subtrahend\n\n    return actual_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    count = 0\n    for i in range(1, 41):\n        if i % 3 == 0 and i % 4 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk = 20\n    lily_walk = hook_walk - 5\n    return lily_walk\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    mass_per_apple = 1 / 9  # Mass of one apple in kg\n    apples_used_per_cake = 4  # Number of apples used to bake one cake\n    total_mass_of_apples = 8  # Total mass of apples used in kg\n\n    total_apples_used = total_mass_of_apples / mass_per_apple  # Total number of apples used\n    number_of_cakes = total_apples_used / apples_used_per_cake  # Number of cakes the baker can bake\n\n    return int(number_of_cakes)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    # Find the numerator that makes the equation true by inverse operation:\n    # Multiply 35 by 9 (the denominator) to find the numerator that results in 35 when divided by 9.\n    numerator = 35 * 9\n    \n    return numerator\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    number_of_seeds = 12\n\n    circumference = distance_between_seeds * number_of_seeds\n    \n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3/8) * 32\n    return ans\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    total_pieces = 16\n    original_pieces = 10\n    cut_into_three = total_pieces - original_pieces\n\n    return cut_into_three // 2\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    average_boys = 10\n    average_all = 14\n\n    total_score_all = (total_boys + total_girls) * average_all\n    total_score_boys = total_boys * average_boys\n    total_score_girls = total_score_all - total_score_boys\n\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    for n in range(1, 100):\n        if ((n+1)**2 - n**2 == 25) and (n**2 + 9 == (n + 1)**2 - 16):\n            break\n    return n**2 + 9\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Initially, the 50 postcards are divided into 5 envelopes, so each envelope has 10 postcards.\n    postcards_per_original_envelope = 50 // 5\n    \n    # Since the new postcards are divided equally into 2 envelopes, and these must have the same number\n    # of postcards as the original envelopes, each of the new envelopes also has 10 postcards.\n    postcards_per_new_envelope = postcards_per_original_envelope\n    \n    # To find the total number of postcards after her friends give her more, we need to know how many\n    # postcards are in the 2 new envelopes. Since each envelope has 10 postcards, the total postcards in \n    # new envelopes is 2 * 10.\n    new_postcards = 2 * postcards_per_new_envelope\n    \n    # The total number of postcards is the sum of the original postcards and the new postcards.\n    total_postcards = 50 + new_postcards\n    \n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Since for each coin there exists exactly one other of the same value,\n    # Harry has an even number of coins, and the total is £2.50.\n    # We must break down £2.50 into pairs of coins with the same value.\n    # Possible coin values in the UK are (in pence): 1, 2, 5, 10, 20, 50, 100, 200\n    # Since we are looking for pairs, we divide the total change by 2 to\n    # consider which coins could make up half the amount (£1.25 -> 125 pence)\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]\n    half_change = 125  # In pence\n\n    # We identify the coin of smallest value by trying the largest coins first\n    # and then moving towards the smaller ones, as this will give us the\n    # smallest remaining coin after subtracting pairs of larger coins.\n    for coin in reversed(coins):\n        if half_change - coin >= 0:\n            half_change -= coin\n            break\n    \n    # The coin of the smallest value will be the remaining amount,\n    # because if there was a coin smaller than the remaining amount,\n    # that coin would have been subtracted instead of the one we chose.\n    smallest_coin = half_change\n    \n    return smallest_coin\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    sold_portion = 0.75\n    burnt_fraction = 3 / 5\n    extra_burnt = 42\n\n    # Let x be the total number of cookies baked\n    # The number of cookies burnt is (3/5)x\n    # The number of cookies remaining after burning is x - (3/5)x = (2/5)x\n    # The number of cookies sold is 75% of the remaining cookies, which is 0.75 * (2/5)x\n    # According to the problem, the number of cookies burnt is 42 more than the cookies sold\n    # Thus, we have the equation: (3/5)x = 0.75 * (2/5)x + 42\n    # Simplify the equation: (3/5)x - 0.75 * (2/5)x = 42\n    # (3/5)x - (3/2)(1/5)x = 42\n    # (3/5)x - (3/10)x = 42\n    # Multiply by 10 to clear denominators: 6x - 3x = 420\n    # 3x = 420\n    # x = 140\n    # Jolie initially baked 140 cookies\n\n    # Solve for x\n    x = 420 // 3\n\n    return x\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80  # Cost in pounds\n    weight_ratio = 250 / 100\n    cost_for_250g = cost_per_100g * weight_ratio\n    return cost_for_250g\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    apples = 27\n    capacity = 4\n    containers = (apples + capacity - 1) // capacity\n    return containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10):  # Iterate through possible digits for the tens place\n        for special_number in range(i * 10 + 9, 1000, 10):  # Check for special numbers in correct range\n            new_number = int('9' + str(special_number)[:-1])  # Construct new number by placing 9 at the beginning\n            if new_number == 4 * special_number:  # Check if the condition is met\n                return special_number  # Return the special number when the condition is satisfied\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    return 50 - 21 - 19\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        number = int(f\"107{y}\")\n        if number % 6 == 0:\n            return y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for number in range(10, 100): # loop for all 2-digit numbers\n        if number % 4 == 1 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n    \n    # There are 6 students and one position is fixed for Laura in the front\n    remaining_spots = 5  \n    # Rita cannot stand at the end so she has 4 choices of remaining spots\n    rita_choices = 4\n    # The rest of the students can be arranged in the remaining spots\n    rest_arrangements = factorial(remaining_spots - 1)  \n    \n    # The total arrangements are equal to Rita's choices multiplied by the arrangements of the rest\n    total_ways = rita_choices * rest_arrangements \n\n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let the total length of the road be x.\n    # Jerry has driven 3/7 of the distance, so Kevin has driven 4/7 of the distance.\n    # Jerry's speed is (2/5)x mph since he travels 2/5 of the road length each hour.\n    # Kevin's speed is 80 mph.\n    # Therefore, the ratio of Jerry's speed to Kevin's speed is (3/7) / (4/7).\n\n    jerry_speed_to_kevin_speed_ratio = 3 / 4\n    kevin_speed = 80  # mph\n\n    # Calculate Jerry's speed using the ratio and Kevin's speed.\n    jerry_speed = jerry_speed_to_kevin_speed_ratio * kevin_speed\n    \n    # Since Jerry travels 2/5 of the road's length each hour, we can set up the equation:\n    # jerry_speed = (2/5) * x\n    # x is the length of the road.\n    # Therefore, we can find x by rearranging the equation:\n    # x = jerry_speed / (2/5)\n    x = jerry_speed / (2/5)\n\n    return x\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    def operation(a, b):\n        return (a + b) * a\n\n    ans = operation(4, 7)\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    initial_discount = 0.50\n    additional_discount = 0.20\n    items_bought = 8\n\n    # Calculate the price after the initial 50% discount\n    discounted_price = regular_price * (1 - initial_discount)\n\n    # Since at least 5 items were bought, calculate the price after the additional 20% discount\n    final_price = discounted_price * (1 - additional_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    apples_sold = 88\n    fraction_sold = 4 / 7\n\n    total_apples = apples_sold / fraction_sold\n    \n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Convert Singapore departure time to London time\n    singapore_departure_str = '24/08 05:00'\n    singapore_departure = datetime.strptime(singapore_departure_str, '%d/%m %H:%M')\n    london_departure = singapore_departure - timedelta(hours=7)\n\n    # London arrival time\n    london_arrival_str = '24/08 11:00'\n    london_arrival = datetime.strptime(london_arrival_str, '%d/%m %H:%M')\n\n    # Calculate flight duration\n    flight_duration = london_arrival - london_departure\n\n    # Return the total flight duration in hours and minutes\n    return flight_duration.total_seconds() / 3600.0\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pupils = 40\n    avg_pencils = 35\n    boys_avg_pencils = 20\n    girls_avg_pencils = 60\n    \n    # Let b be the number of boys. Therefore, 40-b will be the number of girls.\n    # Total pencils can also be calculated by (number of boys * average for boys) + \n    # (number of girls * average for girls), which needs to be equal to total pupils * average pencils per pupil.\n    # b*20 + (40-b)*60 = 40*35\n    \n    # Simplify the equation to find b\n    b = (total_pupils*avg_pencils - (total_pupils-girls_avg_pencils)*girls_avg_pencils) / (boys_avg_pencils - girls_avg_pencils)\n    \n    return int(b)\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # The probability Sally wins one game and loses or draws the other\n    prob_win_lose_or_draw = 0.3 * (1 - 0.3 - 0.1)\n    # The probability Sally draws or loses one game and wins the other\n    prob_lose_or_draw_win = (1 - 0.3 - 0.1) * 0.3\n\n    # Since these are two distinct events we add the probabilities\n    total_probability = prob_win_lose_or_draw + prob_lose_or_draw_win\n\n    return total_probability\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    remainder_4 = 32\n    remainder_7 = 3\n\n    # Since the number of lollipops left when dividing by 4 is 32,\n    # we know the total number of lollipops is 32 more than a multiple of 4.\n    # Similarly, the number of lollipops is 3 more than a multiple of 7.\n    # We can use a loop to find the smallest number that satisfies both conditions.\n\n    lollipops = remainder_4  # Starting point\n\n    # Looping until we find a number that leaves a remainder of 3 when divided by 7\n    while lollipops % 7 != remainder_7:\n        lollipops += 4  # The number of lollipops increases by multiples of 4\n\n    return lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n\n    # The differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # GCD of the differences will be the largest possible D\n    D = gcd(gcd(diff1, diff2), diff3)\n\n    # To calculate the remainder, we can now divide any one of the numbers by D\n    R = 2010 % D\n\n    return D + R\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # Decimal form of 1/13 shows recurring sequence, which repeats every 6 digits\n    recurring_sequence = '076923'\n    \n    # Find the position in the recurring sequence\n    position = (2012 - 1) % 6\n    \n    # Find the digit in the 2012th decimal place\n    digit = recurring_sequence[position]\n\n    return int(digit)\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # 2-digit numbers start from 10 to 99\n        if (number % 10 + number // 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e, the number of Eddi's cards, and w, the number of Wiya's cards\n    e, w = symbols('e w')\n\n    # The initial ratio of their cards\n    equation1 = Eq(8 * w, 7 * e)\n\n    # The new ratio after Eddi gives 4 cards to Wiya\n    equation2 = Eq(18 * (w + 4), 17 * (e - 4))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, w))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*(2*x - 2), 30 - 3*x)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # Red to blue ratio is 5:6\n    red_marbles = (5 / 6) * blue_marbles\n    # Red is twice the number of green\n    green_marbles = red_marbles / 2\n    # Total marbles\n    total_marbles = blue_marbles + red_marbles + green_marbles\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "from fractions import Fraction\n\ndef solution():\n    num = (2017 + Fraction(7, 8)) * (3 + Fraction(2, 3)) - 2016.875 * Fraction(11, 3)\n    den = (2017 + Fraction(1, 3)) - 2016.875\n    frac = (num / (den * 17)) * (3 + Fraction(23, 32))\n    ans = frac.numerator / frac.denominator\n    return ans\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n    \n    # Class A has 47 more students than Class B\n    original_diff = Eq(a - b, 47)\n    \n    # Move x students from Class A to Class B\n    # Then Class A will have 9 more students than Class B\n    x = symbols('x')\n    new_diff = Eq((a - x) - (b + x), 9)\n    \n    # Solve the system of equations\n    solutions = solve((original_diff, new_diff), (a, b, x))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece_one = 5.3\n    piece_two = 3.8\n\n    third_piece = total_length - piece_one - piece_two\n\n    return third_piece\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330\n    turtle_speed = 30\n    total_distance = 6990\n    sleep_time = 215\n    start_delay = 10\n\n    # Calculate the distance each of them covered during the first 10 minutes\n    rabbit_distance_before_sleep = rabbit_speed * start_delay\n    turtle_distance_after_10_minutes = turtle_speed * start_delay\n    \n    # Calculate the distance the rabbit has to cover after waking up\n    remaining_distance_for_rabbit = total_distance - rabbit_distance_before_sleep\n    \n    # Compute the time it would take the rabbit to finish the race after waking up\n    time_for_rabbit_to_finish = remaining_distance_for_rabbit / rabbit_speed\n    \n    # Calculate the time it takes for the turtle to arrive the finish line\n    remaining_distance_for_turtle = total_distance - turtle_distance_after_10_minutes\n    time_for_turtle_to_finish = remaining_distance_for_turtle / turtle_speed\n\n    # Total time spent by rabbit from the beginning till finish including sleep\n    total_time_for_rabbit = start_delay + sleep_time + time_for_rabbit_to_finish\n\n    # Check who finished first and compute the distance between them\n    if total_time_for_rabbit < time_for_turtle_to_finish:\n        winner = \"rabbit\"\n        turtle_distance_when_rabbit_finishes = turtle_speed * total_time_for_rabbit\n        distance_between = total_distance - turtle_distance_when_rabbit_finishes\n    else:\n        winner = \"turtle\"\n        rabbit_running_time_after_nap = total_time_for_rabbit - (start_delay + sleep_time)\n        rabbit_distance_when_turtle_finishes = rabbit_distance_before_sleep + rabbit_speed * rabbit_running_time_after_nap\n        distance_between = total_distance - rabbit_distance_when_turtle_finishes\n\n    return (winner, distance_between)\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's declare the symbols for number of boys, adults, and girls\n    boys, adults, girls = symbols('boys adults girls')\n\n    # Equation representing twice as many adults as boys\n    equation1 = Eq(adults, 2 * boys)\n\n    # Equation representing thrice as many girls as boys\n    equation2 = Eq(girls, 3 * boys)\n\n    # Equation representing the total number of people\n    equation3 = Eq(boys + adults + girls, 480)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    oddtastic_count = 0\n    \n    for num in range(1, 1000):\n        all_odd = all(int(digit) % 2 != 0 for digit in str(num))\n        if all_odd:\n            oddtastic_count += 1\n\n    return oddtastic_count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    # Iterate through possible combinations where sum of digits is 5\n    # Since it's a 3-digit number, the hundreds digit can't be 0\n    for hundreds in range(1, 6):  # Hundreds digit can be 1 to 5\n        for tens in range(0, 6):\n            for ones in range(0, 6, 2):  # Ones digit must be even to make an odd number\n                if hundreds + tens + ones == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # We have two equations based on the problem statement:\n    # y - x = 57 (difference between the two numbers)\n    # x + y = 77 (sum of the two numbers)\n    \n    # We can solve for x using algebra:\n    # Adding the two equations eliminates y:\n    # (y - x) + (x + y) = 57 + 77\n    # 2y = 134\n    # y = 134 / 2\n    # y = 67\n    \n    # Now we can find x using the sum equation:\n    # x + y = 77\n    # x + 67 = 77\n    # x = 77 - 67\n    # x = 10\n    \n    # Since we need to find the smaller number, we return x\n    return 10\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_cost_pence = total_cost_pounds * 100\n    total_avocados = total_pairs * 2  # Each pair contains 2 avocados\n\n    cost_per_avocado = total_cost_pence / total_avocados\n    return cost_per_avocado\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    outcomes = [i+j for i in range(1, 7) for j in range(1, 7)]\n    frequency = {}\n    \n    for outcome in outcomes:\n        if outcome in frequency:\n            frequency[outcome] += 1\n        else:\n            frequency[outcome] = 1\n\n    most_likely_score = max(frequency, key=frequency.get)\n    return most_likely_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    number_of_girls = solve(equation, girls)\n\n    return number_of_girls[0]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    number_of_tables = 8\n    \n    # People at the corners of the long table\n    corner_people = 4\n    \n    # People along the long edges\n    # Each square table contributes 3 people to the long edge, but since they are now connected, we subtract the shared corners.\n    long_edge_people = 3 * number_of_tables - 2\n    \n    # People along the short edges, the two ends of the long table (2 people from each square table)\n    short_edge_people = 2 * 2\n    \n    # Total number of people around the long table is the sum of all edges\n    total_people = corner_people + 2 * long_edge_people + short_edge_people\n    \n    return total_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each person's marbles\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n\n    # System of equations based on the problem statement\n    equation1 = Eq(andrew, xavier / 3)             # A = X/3\n    equation2 = Eq(xavier, andrew + 30)            # X = A + 30\n    equation3 = Eq(andrew, (boris + jeffery + xavier)/3 - 30)  # A = (B + J + X)/3 - 30\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, boris, jeffery, xavier))\n    \n    # Return the sum of Jeffery and Boris's marbles\n    return solutions[boris] + solutions[jeffery]\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    total_heads = 28\n    total_legs = 88\n\n    # Let the number of rhinos/deer be x and the number of ostriches be y.\n    # Each rhino/deer has 4 legs and each ostrich has 2 legs.\n    # So we get the system of equations:\n    # x + y = total_heads (1)\n    # 4x + 2y = total_legs (2)\n    \n    # From equation (1), we can express y in terms of x: y = total_heads - x.\n    # Substituting y in equation (2) we get:\n    # 4x + 2(total_heads - x) = total_legs\n    # 4x + 2*total_heads - 2x = total_legs\n    # 2x = total_legs - 2*total_heads\n    # x = (total_legs - 2*total_heads) / 2\n\n    x = (total_legs - 2 * total_heads) // 2\n    return x\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    pages = 0\n    digits = 0\n\n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "from sympy import divisor_count\n\ndef solution():\n    ans = 0\n    for i in range(15, 1000, 15):  # Searching multiples of 15\n        if divisor_count(i) == 15:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Calculate the last digit of 32^33 and 22^29 separately\n    last_digit_32_pow_33 = pow(32, 33, 10)\n    last_digit_22_pow_29 = pow(22, 29, 10)\n    \n    # Calculate the difference and find its last digit\n    ones_digit = (last_digit_32_pow_33 - last_digit_22_pow_29) % 10\n    \n    return ones_digit\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Initialize the total people count and difference between numbers of students and teachers\n    total_people = 0\n    diff_st_te = 52\n\n    # Iterate over possible square sizes starting from a minimum size of 3x3\n    # (since it needs at least one inner layer)\n    size = 3\n    while True:\n        # Calculate the number of students and teachers based on square size\n        students = size**2 - (size - 2)**2\n        teachers = (size - 2)**2 - (size - 4)**2\n\n        # If the size is odd, the innermost layer will be students\n        if size % 2 == 1:\n            students += 1\n        else:\n            teachers += 1\n        \n        # Calculate the current difference\n        current_diff = students - teachers\n\n        # Check if the current difference matches the required difference\n        if current_diff == diff_st_te:\n            total_people = size**2  # Total people equals the outer square size squared\n            break\n        \n        # Increment the size to check next possible square size\n        size += 2\n    \n    return total_people\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    # A is a 2-digit number, ranging from 10 to 99\n    # B is a 4-digit number, ranging from 1000 to 9999\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(max_diff, B - A)\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    n = 12  # total number of players\n    k = 6   # number of players to choose\n    return comb(n, k)\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Equation based on the first sentence\n    equation1 = Eq(apples, (5/7) * oranges)\n\n    # Equation based on the second sentence\n    # After buying 12 more oranges, Danny has (oranges + 12) oranges and still the same number of apples\n    # It is given that now he has (2/3) times apples compared to oranges\n    equation2 = Eq(apples, (2/3) * (oranges + 12))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    base = 8\n    power_of_base = 2\n    product = 8 * 80 * 100\n    \n    missing_number = product // (base ** power_of_base)\n\n    return missing_number\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    # Perform the computation to get x, y, z such that\n    # 2014/37 = 54 + 1/(x + 1/(y + 1/z))\n    \n    # Subtract 54 to get the fractional part\n    fraction = 2014 / 37 - 54\n    \n    # Find 1/fraction to get x + 1/(y + 1/z)\n    x_part = 1 / fraction\n    x = int(x_part)\n\n    # Subtract x to isolate the remaining fraction\n    fraction = x_part - x\n    \n    # Find 1/fraction to get y + 1/z\n    y_part = 1 / fraction\n    y = int(y_part)\n\n    # Subtract y to isolate the remaining fraction\n    fraction = y_part - y\n    \n    # z is the reciprocal of the remaining fraction\n    z = int(1 / fraction)\n    \n    return x + y + z\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # After selling x kilograms, the big bucket has 89-x kilograms left\n    # After selling x kilograms, the small bucket has 45-x kilograms left\n    equation = Eq(89 - x, 12 * (45 - x))\n\n    # Solve the equation\n    sold_amount = solve(equation, x)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    endpoint = 10\n    total_count = 30\n    clock_numbers = 12\n\n    # Modulate the total count to fit within a clock cycle\n    start_point = (endpoint - total_count % clock_numbers) % clock_numbers\n    # If the start point is 0, it means he started from 12\n    start_point = start_point if start_point != 0 else clock_numbers\n\n    return start_point\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    total_jackpot = 131112\n    num_people = 9\n    \n    amount_per_person = total_jackpot // num_people\n    \n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2 / 3) * snake_hibernation\n    frog_hibernation = (5 / 4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    price_shoes = 78\n    price_socks = 12\n    total_aliens = 1 + 5  # including himself and his 5 brothers\n    legs_each_alien = 5\n\n    # total number of shoes and socks needed for all aliens\n    shoes_needed = total_aliens * legs_each_alien\n    socks_needed = total_aliens * legs_each_alien\n\n    # since shoes are sold in 5s and socks in pairs, we divide by that number and multiply by price\n    total_shoes_cost = (shoes_needed / 5) * price_shoes\n    total_socks_cost = (socks_needed / 2) * price_socks\n\n    # total cost is the sum of total shoes cost and total socks cost\n    total_cost = total_shoes_cost + total_socks_cost\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    num = 100\n    while True:\n        if (num % 5 == 1) and (num % 6 == 1) and (num % 7 == 1):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import isprime\n\n    # From the equations, we can see:\n    # a = 26 + b - 31\n    # c = 20 + a - 26 = -10 + b\n    # So, we'll find a prime number b, then calculate prime numbers a and c based on b.\n\n    ans = None\n    b = next(i for i in range(2, 31) if isprime(i))\n    a = 26 + b - 31\n    c = -10 + b\n    \n    if isprime(a) and isprime(c):\n        ans = a * b * c\n\n    return ans\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # Convert total time to hours as speed is in km/h\n    total_time_hours = 54 / 60\n\n    # Let's denote the distance between home and park as x km.\n    # Time to jog to the park at 5 km/h is x/5 hours.\n    # Time to jog back at 4 km/h is x/4 hours.\n    # The total time is the sum of these two times, which is 54 minutes or 0.9 hours.\n    # So, the equation is:\n    # x/5 + x/4 = 0.9\n\n    # Now we will solve for x using algebra\n    # Multiply by 20 to avoid fractions: 4x + 5x = 20 * 0.9\n    x = (20 * total_time_hours) / (4 + 5)\n\n    return x\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    n = 30\n    sum_numbers = n * (n + 1) // 2\n    \n    return sum_numbers\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    # Let the number of boys be b.\n    # Then the number of girls will be b + 8.\n    # The total number of pupils is the number of girls plus the number of boys.\n    # So we have the equation: b + (b + 8) = 26.\n    # Solving for b we get b = (26 - 8) / 2.\n\n    b = (26 - 8) // 2\n    girls = b + 8\n\n    return girls\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    both = symbols('both')\n\n    apples = 3 * both\n    bananas = 5 * both\n    total_students = 35\n\n    equation = Eq(apples + bananas - both, total_students)\n\n    solutions = solve(equation, both)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # defining the symbols\n    joleen, rennie = symbols('joleen rennie')\n\n    # equation for the relationship between their pies\n    equation1 = Eq(joleen, rennie + 5)\n    # equation for the fractional relationship\n    equation2 = Eq(3/4 * rennie, 2/3 * joleen)\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (joleen, rennie))\n\n    # summing the number of pies baked by Joleen and Rennie\n    total_pies = solutions[joleen] + solutions[rennie]\n\n    return total_pies\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    orange_pie_kg = 550 / 1000\n    orange_juice_kg = 1050 / 1000\n\n    remaining_oranges_kg = total_oranges_kg - (orange_pie_kg + orange_juice_kg)\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n\n    total_cost = price_per_computer * number_of_students\n\n    return total_cost\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let n be the time it takes for Nancy to finish the job by herself\n    n = symbols('n')\n    \n    # Lee's work rate is the reciprocal of the total time they need to finish the job together\n    lee_rate = 1 / 10\n    \n    # Nancy's work rate is the reciprocal of the time she needs to finish the job by herself\n    nancy_rate = 1 / n\n    \n    # Writing two equations based on the given working conditions\n    equation1 = Eq(10 * (lee_rate + nancy_rate), 1)  # If they work together, they finish the job in 10 hours\n    equation2 = Eq(20 * nancy_rate + 6 * lee_rate, 1)  # Nancy works for 20 hours and Lee works for 6 hours\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), n)\n    \n    return solutions[n]\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0\n        for y in range(10):  # y can be 0\n            A = 10 * x + y  # Value of A based on place value\n            B = 20 * x + y  # Value of B based on place value\n            if B == 6 * A + 25:\n                return A\n    return None\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    total_days = 5\n\n    total_chairs = sum(first_day_chairs + difference * i for i in range(total_days))\n\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence_in_pounds = 3.00 * 100\n    percentage = (15 / pence_in_pounds) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n    \n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n    \n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    return (12 / 25) * 100\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Blue marbles: 4, Yellow marbles: 3, Red marbles: 1\n    # To ensure he gets 3 marbles of the same color, consider the worst-case scenario:\n    # He could take 2 blue, then 2 yellow, and then 1 red before he is forced to take\n    # a 3rd marble of either blue or yellow to make a set of 3 of the same color.\n    \n    # So the number of marbles he needs to take is:\n    # 2 (blue) + 2 (yellow) + 1 (red) + 1 (either blue or yellow to make a set of 3) = 6\n    \n    return 6\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for children in range(100, 191):\n        if children % 4 == 3 and children % 13 == 12:\n            return children\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    return -10 + 3\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14\n    paid_amount = 100  # £1 is equivalent to 100p\n    change = paid_amount - total_cost\n    return change\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Sebastian and Garrett's current ages\n    sebastian_current_age, garrett_current_age = symbols('sebastian_current_age garrett_current_age')\n\n    # Set up equations based on the problem statement\n    age_relation_eq = Eq(sebastian_current_age, garrett_current_age - 24)\n    future_age_eq = Eq(garrett_current_age + 10, 3 * (sebastian_current_age + 10))\n\n    # Solve the system of equations\n    solutions = solve((age_relation_eq, future_age_eq), (sebastian_current_age, garrett_current_age))\n\n    # Return Garrett's current age\n    return solutions[garrett_current_age]\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    sales_tax = 90\n    price_of_sofa = sales_tax / tax_rate\n\n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    people = 4\n    days = 7\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = travel_cost_per_person * people\n    total_hotel_cost = hotel_cost_per_day_per_person * days * people\n    total_spending_money = spending_money_per_person * people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Equation representing the initial relationship between boys and girls\n    # 65 fewer boys than girls\n    eq1 = Eq(b, g - 65)\n\n    # Equations representing the number of boys and girls left after recess\n    # Equal number of boys and girls remain\n    eq2 = Eq((2/5)*b, (3/7)*g)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (b, g))\n\n    # Calculate the number of students remaining in the hall after recess\n    # Subtract the number that left from the original number\n    boys_remaining = (3/5) * solutions[b]\n    girls_remaining = (4/7) * solutions[g]\n\n    # Sum the boys and girls remaining\n    total_students_remaining = boys_remaining + girls_remaining\n\n    return int(total_students_remaining)\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n\n    total_earnings = march_earnings + april_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    term_number = 20\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from itertools import permutations\n\ndef solution():\n    total_permutations = set(permutations(\"ORANGES\"))\n    count_total = len(total_permutations)\n\n    vowels_permutations = set(permutations(\"OAE\"))\n    count_with_all_vowels_together = 0\n\n    for vowel_perm in vowels_permutations:\n        for perm in permutations(\"RNGS\" + \"\".join(vowel_perm)):\n            if \"\".join(vowel_perm) in \"\".join(perm):\n                count_with_all_vowels_together += 1\n    \n    count_with_all_vowels_together //= len(vowels_permutations)  # To avoid overcounting\n    ans = count_total - count_with_all_vowels_together\n\n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges, bananas = symbols('apples oranges bananas')\n    \n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n    \n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Define the factorial function to calculate arrangements\n    def fact(n):\n        return factorial(n)\n\n    # Treat each set of similar books as a single unit for now\n    # Hence, 4 sets: Math, Chemistry, Physics, and 1 Biology book\n    # Arrange these 4 units on the shelf in 4! ways\n    unit_arrangements = fact(4)\n\n    # Now, calculate the arrangements of books within their own units\n    # For math books, it's 4!, for chemistry it's 3!, for physics it's 2!, and biology is just 1!\n    within_unit_arrangements = fact(4) * fact(3) * fact(2) * fact(1)\n    \n    # Total arrangements is the product of unit arrangements and within unit arrangements\n    total_arrangements = unit_arrangements * within_unit_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    ans = 70017007\n    return ans\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n    height_kilometers = height_meters / meters_to_kilometers\n    return height_kilometers\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # The sum of Mary and her son's current age.\n    current_sum_ages = 45\n    \n    # After 5 years, both Mary and her son will be 5 years older.\n    # Therefore, the total increase in their combined ages will be 5 years for each.\n    # Since there are 2 people, we multiply the 5 years increase by 2.\n    increase_in_ages = 5 * 2\n    \n    # The sum of their ages in 5 years' time will be their current combined age\n    # plus the increase calculated above.\n    future_sum_ages = current_sum_ages + increase_in_ages\n    \n    return future_sum_ages\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    # Let x represent the initial number of stickers Eugene had.\n    # Let y represent the initial number of stickers Melvin had.\n    # Let z represent the initial number of stickers David had.\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    # Given that Eugene gave Melvin twice as many stickers as Melvin had, we have:\n    # Eugene's stickers after the transaction: x - 2y\n    # Melvin's stickers after the transaction: y + 2y = 3y\n\n    # Given that Melvin gave David as many stickers as David had, we have:\n    # Melvin's stickers after the transaction: 3y - z\n    # David's stickers after the transaction: z + z = 2z\n\n    # Given that David gave Eugene as many stickers as Eugene had left:\n    # David's stickers after the transaction: 2z - (x - 2y)\n    # Eugene's stickers after the transaction: (x - 2y) + (x - 2y) = 2x - 4y\n\n    # The final ratio of Eugene's to Melvin's to David's stickers was 46:12:7, so we have:\n    # (2x - 4y) / (3y - z) / (2z - (x - 2y)) = 46 / 12 / 7\n\n    # And the total number of stickers is 260:\n    # x + y + z = 260\n\n    equation1 = Eq(x + y + z, 260)\n    equation2 = Eq((2 * x - 4 * y) / (3 * y - z) / (2 * z - (x - 2 * y)), 46 / 12 / 7)\n\n    # Solve the system of equations for x, y, z\n    solutions = solve((equation1, equation2), (x, y, z))\n\n    # Since we need the initial amount of stickers Eugene had, we return x\n    return solutions[x]\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n\n    # Principle of multiplication: total number of ways \n    # is the product of the number of ways in each category\n    combinations = category1 * category2 * category3\n\n    return combinations\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "from sympy import primerange, solve, symbols, Eq\n\ndef solution():\n    a, b, c = symbols('a b c')\n    \n    # The three given equations according to the problem\n    eq1 = Eq(31 + a, 26 + b)\n    eq2 = Eq(26 + b, 20 + c)\n    \n    # We only need to solve two equations since they are transitive\n    solutions = solve((eq1, eq2), (a, b, c))\n    \n    a_val = solutions[a]\n    b_val = solutions[b]\n    c_val = solutions[c]\n    \n    # Check if the values for a, b, and c are actually prime\n    primes = list(primerange(1, 100)) # Generating a list of primes is enough\n    if a_val in primes and b_val in primes and c_val in primes:\n        ans = a_val * b_val * c_val\n    else:\n        ans = None # In case the solutons are not prime numbers\n        \n    return ans\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    # The perimeter of the triangle is 12\n    perimeter = 12\n    for side in range(1, perimeter // 2):  # Iterate over possible lengths for one side\n        for base in range(1, perimeter - 2 * side + 1):  # Iterate over possible lengths for the base\n            # Check if it forms an isosceles triangle\n            if side + side + base == perimeter:\n                count += 1\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    num_people = 6\n    num_seats = 8\n    \n    # Circular permutations (n-1)! where n is the number of people,\n    # since rotating doesn't change the seating arrangement\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys_initial, girls_initial = symbols('boys_initial girls_initial')\n\n    boys_final = boys_initial + 12\n    girls_final = girls_initial - 8\n\n    equation1 = Eq(boys_initial, girls_initial)\n    equation2 = Eq(boys_final, 2 * girls_final)\n\n    solutions = solve((equation1, equation2), (boys_initial, girls_initial))\n\n    total_initial = solutions[boys_initial] + solutions[girls_initial]\n    return total_initial\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Solution using strategy for the game of Nim:\n    # The key is to make the nim-sum (xor-sum) of the pile sizes equal to zero after your move.\n    \n    # The nim-sum of 35 and 24\n    nim_sum = 35 ^ 24\n    \n    if nim_sum == 0:\n        # If the nim-sum is 0 initially, which means Wei'er holds the winning position.\n        winner = \"Wei'er\"\n    else:\n        # If the nim-sum is not 0, Eddie has a winning strategy by making a move that results in a nim-sum of 0.\n        winner = \"Eddie\"\n\n        # Eddie's winning strategy: find the number of matches to take to make the nim-sum 0.\n        # (This code is to illustrate the strategy, but the winning move is trivial when it's Eddie's first turn)\n        for matches in range(1, 36):  # Can take at most all the matches from pile A\n            new_nim_sum = (35 - matches) ^ 24\n            if new_nim_sum == 0:\n                # Found the winning move, Eddie should take matches from pile A.\n                winning_move = (\"A\", matches)\n                break\n            elif matches < 25:  # Check if there's a winning move taking from pile B\n                new_nim_sum = 35 ^ (24 - matches)\n                if new_nim_sum == 0:\n                    # Found the winning move, Eddie should take matches from pile B.\n                    winning_move = (\"B\", matches)\n                    break\n    if winner == \"Eddie\":\n        return winner, winning_move\n    else:\n        return winner\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    return sum(range(31, 42))\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum = 0\n    for i in range(80, 55, -4):\n        sum += (i - (i-2))\n    return sum\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    answer = 21 * (2 / 7)\n    return answer\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 5, 7]\n    digit_perms = permutations(digits, 3)\n    count = len(list(digit_perms))\n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 25):\n        if isprime(i) and isprime(25 - i):\n            return i * (25 - i)\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Speeds for each section\n    speed_1 = 7  # m/s for the first 280m\n    speed_middle = 5  # m/s for the middle 400m\n    speed_sprint = 8  # m/s for the final stage\n\n    # Distances for each section\n    distance_1 = 280  # m for the first section\n    distance_middle = 400  # m for the middle section\n    distance_sprint = 800 - (distance_1 + distance_middle)  # m for the final stage\n\n    # Time calculation for each section\n    time_1 = distance_1 / speed_1  # time for the first section\n    time_middle = distance_middle / speed_middle  # time for the middle section\n    time_sprint = distance_sprint / speed_sprint  # time for the sprint section\n\n    # Total time calculation\n    total_time = time_1 + time_middle + time_sprint\n\n    return total_time\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    \n    length_ribbon_1 = 15\n    length_ribbon_2 = 45\n    \n    largest_piece_length = gcd(length_ribbon_1, length_ribbon_2)\n    \n    return largest_piece_length\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between = 2  # meters\n\n    # Total length is the distance between each lamp post times the number of gaps between lamp posts.\n    # Since there are lamp posts at both ends of the road, the number of gaps is one less than the number of lamp posts.\n    length_of_road = distance_between * (num_lamp_posts - 1)\n\n    return length_of_road\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    students = 6\n    min_peaches = (total_peaches + students - 1) // students\n    return min_peaches\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)              # chocolate is 72 more than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)              # blueberry is 36 less than vanilla\n    equation3 = Eq(chocolate / 6 + 2 * vanilla / 3 + 7 * blueberry / 9, 427)  # cupcakes left after selling\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate how many chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    halfway_number = (18 + 52) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    start_page = 15\n    end_page = 40\n\n    ans = end_page - start_page + 1\n\n    return ans\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    total_sum = 140\n    # Since they are seven consecutive numbers, we call the smallest number n.\n    # Then the numbers are n, n+1, n+2, n+3, n+4, n+5, n+6.\n    # Their sum is 7n + (1+2+3+4+5+6) = 140.\n    sum_consecutive = sum(range(1, 7))\n    n = (total_sum - sum_consecutive) // 7\n    return n\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2 / 9) * 36\n    return int(result)\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (6, 7), (6, 9)]\n    children_count = solve_congruence(*congruences)\n\n    return children_count[0]\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hours = 6\n    start_time_minutes = 52\n    end_time_hours = 8\n    end_time_minutes = 24\n\n    start_time_total_minutes = start_time_hours * 60 + start_time_minutes\n    end_time_total_minutes = end_time_hours * 60 + end_time_minutes\n\n    duration_minutes = end_time_total_minutes - start_time_total_minutes\n\n    return duration_minutes\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_card_cost = 10 * 45  # pence\n    stamp_cost = 10 * 27  # pence\n    total_cost_pence = post_card_cost + stamp_cost\n    total_cost_pounds = total_cost_pence / 100  # Convert pence to pounds\n    \n    change = 10 - total_cost_pounds  # Subtract from £10 note\n\n    return change\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # Total ways to arrange Chantel, Tony, and Cale around the table with Claire's seat fixed\n    total_ways = 3!\n    \n    # Ways to arrange where Tony sits face to face with Claire\n    face_to_face_ways = 1 # Tony's position is fixed face to face with Claire\n    \n    # Ways to arrange the other two (Chantel and Cale) are the remaining seats\n    chantel_cale_ways = 2! # Chantel and Cale can switch places\n    \n    # Subtract the face-to-face arrangements from the total\n    non_face_to_face_ways = total_ways - (face_to_face_ways * chantel_cale_ways)\n    \n    return non_face_to_face_ways\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    tables_per_day_frank = 180 / 10\n    tables_per_day_ryan = 180 / 15\n    more_tables_per_day = tables_per_day_frank - tables_per_day_ryan\n    return more_tables_per_day\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    q, t = symbols('q t')  # q = total questions, t = time in minutes\n    eq1 = Eq(q, 4 * (t + 5))  # If she marks 4 questions a minute, she takes t+5 minutes\n    eq2 = Eq(q, 6 * (t - 5))  # If she marks 6 questions a minute, she takes t-5 minutes\n    \n    solution = solve((eq1, eq2), (q, t))\n\n    return solution[q]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    smallest_mass = 7.35\n    return smallest_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 96):\n        nums = [i, i+1, i+2, i+3, i+4]\n        for j in range(5):\n            for k in range(j+1, 5):\n                for l in range(k+1, 5):\n                    sum_3_nums = nums[j] + nums[k] + nums[l]\n                    if sum_3_nums % 37 == 0:\n                        remaining_indices = {0, 1, 2, 3, 4} - {j, k, l}\n                        for m in remaining_indices:\n                            for n in remaining_indices - {m}:\n                                sum_other_3_nums = sum_3_nums + nums[m] + nums[n] - nums[4 - m - n]\n                                if sum_other_3_nums % 60 == 0:\n                                    return nums[4] # largest of the five consecutive numbers\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    marks_for_correct = 5\n    marks_deducted_for_wrong = 2\n\n    # Let x be the number of correct answers\n    # Therefore, (total_questions - x) will be the number of incorrect answers.\n    for x in range(total_questions + 1):\n        if (x * marks_for_correct) - ((total_questions - x) * marks_deducted_for_wrong) == 79:\n            return x\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    amount_raised = 165  # in pounds\n    cake_price = 0.75    # in pounds (75 pence)\n    num_cakes = amount_raised / cake_price\n    return int(num_cakes)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_restaurant = total_money * (3/7)\n    remaining_money = total_money - spent_restaurant\n    spent_enrichment = remaining_money * (2/9)\n    money_left = remaining_money - spent_enrichment\n\n    return money_left\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_each_should_have = total_candies // 2\n    candies_amy_should_give = amy_candies - candies_each_should_have\n\n    return candies_amy_should_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    return 5*x + 1*y\n\nans = solution"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Time taken for 3 chimes is 6 seconds\n    # The interval between each chime is the same\n    # So if there are 2 intervals between 3 chimes,\n    # there would be 5 intervals between 6 chimes\n    three_chimes_time = 6\n    intervals_for_three_chimes = 3 - 1\n    interval_time = three_chimes_time / intervals_for_three_chimes\n    \n    # Calculate the number of intervals for 6 chimes\n    intervals_for_six_chimes = 6 - 1\n    six_chimes_time = interval_time * intervals_for_six_chimes\n    \n    return six_chimes_time\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # Total work units for P and Q, considering work units as (days*hours)\n    P_work_units = 12 * 8  # Work units P can complete the job\n    Q_work_units = 8 * 10  # Work units Q can complete the job\n\n    # Daily work rate for P and Q\n    P_daily_rate = P_work_units / (12 * 8)  # Work units P does in one day\n    Q_daily_rate = Q_work_units / (8 * 10)  # Work units Q does in one day\n\n    # Combined daily rate when working 8 hours per day\n    combined_daily_rate = (P_daily_rate + Q_daily_rate) * 8\n\n    # Calculate how many whole days they need to complete the job\n    total_work_units = P_work_units  # Total work units required for the job\n    days_required = total_work_units / combined_daily_rate\n\n    # Rounding up since we cannot have a fraction of a day\n    import math\n    whole_days_required = math.ceil(days_required)\n\n    return whole_days_required\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    length_m = 3.2\n    length_cm = 30\n    length_m_in_cm = length_m * 100\n\n    difference = length_m_in_cm - length_cm\n\n    return difference\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    sum_squares = 3 * 10 * (10 + 1) * (2 * 10 + 1) // 6\n    return sum_squares\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for page_number in range(1, 41):\n        total_digits += len(str(page_number))\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    # Cost of potatoes per kilogram in pounds\n    cost_per_kg = 56 / 100  \n    \n    # Total cost for 5 kilograms\n    total_cost = 5 * cost_per_kg \n    \n    # Total amount Lindsey has in pounds\n    total_amount = 10  \n    \n    # Change returned to Lindsey\n    change = total_amount - total_cost  \n    \n    return round(change, 2)  # Rounding to 2 decimal places to represent pounds\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    # 120 prime factors are: 2^3 * 3^1 * 5^1\n    # (exponent of prime factor 2 + 1) * (exponent of prime factor 3 + 1) * (exponent of prime factor 5 + 1)\n    ans = (3 + 1) * (1 + 1) * (1 + 1)\n    return ans\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    from math import sqrt, floor\n\n    number = 180\n    min_difference = float('inf')  # Start with an infinitely large difference\n\n    # Calculate the square root of the number for an efficient search\n    for factor1 in range(1, floor(sqrt(number)) + 1):\n        if number % factor1 == 0:\n            factor2 = number // factor1\n            difference = abs(factor2 - factor1)\n            min_difference = min(min_difference, difference)\n    \n    return min_difference\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let x be the time in minutes it takes for Max to cover the distance\n    # Since Luca's speed is 2/3 of Max's speed, Luca takes 3/2 times longer to walk the same distance\n    # This means Luca takes 3/2 * x minutes to cover the distance\n    # According to the information given, Luca takes 10 more minutes than Max to cover the distance\n    # So we have the equation: 3/2 * x = x + 10\n    # Solving for x gives us the time it takes Max to cover the distance\n    \n    x = symbols('x')\n    equation = Eq((3/2) * x, x + 10)\n    max_time = solve(equation, x)[0]\n\n    # If Luca had walked at double his usual speed, his time would be half of what it normally is\n    # Hence, the time taken by Luca at double speed would be (3/2 * max_time) / 2\n    luca_time_double_speed = (3/2 * max_time) / 2\n\n    return float(luca_time_double_speed)\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temperature = -8\n    midday_temperature = 13\n    overall_change = midday_temperature - midnight_temperature\n\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(6, 16):  # The range is from 6 to 15 as it is between 5 and 15\n        if num % 3 == 0 and 27 % num == 0:  # The number is a multiple of 3 and a factor of 27\n            return num\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_weight = total_weight_durian + total_weight_watermelon\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Calculate the correct number of wrong answers\n    # Let x be the number of wrong answers Tom had.\n    # Then, the number of correct answers would be (40 - x).\n    # Score from correct answers = 2 * (40 - x)\n    # Score deducted from wrong answers = x * (-1)\n    # Total score is the sum of the above, which is equal to 71.\n    # We can set up an equation: 2 * (40 - x) - x = 71\n    # Simplify and solve for x:\n    \n    total_questions = 40\n    total_score = 71\n    mark_correct = 2\n    mark_wrong = -1\n    \n    x = symbols('x')\n    equation = Eq(mark_correct * (total_questions - x) + mark_wrong * x, total_score)\n    \n    wrong_answers = solve(equation, x)[0]\n    \n    return wrong_answers\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Calculate the distance covered during jogging (from 6:30 AM to 7:30 AM)\n    jogging_time_hours = 1\n    jogging_speed_mph = 6.5\n    jogging_distance = jogging_time_hours * jogging_speed_mph\n\n    # Calculate the distance covered during walking (from 7:30 AM to 9:30 AM)\n    walking_time_hours = 2\n    walking_speed_mph = 4.5\n    walking_distance = walking_time_hours * walking_speed_mph\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 13 patterns that are not 'A's.\n    # To ensure getting at least one 'A', one must draw all non-'A's plus one.\n    non_a_cards = 13 * 3 # 3 non-A patterns\n    must_draw = non_a_cards + 1 # to ensure at least one 'A'\n    return must_draw\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let x be the number of pens and pencils she originally had.\n    # After giving away 5 pencils, she has x - 5 pencils left.\n    # She had twice as many pens as pencils, so she has 2 * (x - 5) pens.\n    # She then bought another 18 pens, so she has 2 * (x - 5) + 18 pens in the end.\n    # But since the number of pens is the same as the number of pencils originally, we have x = 2 * (x - 5) + 18.\n    # Now we solve for x.\n    \n    # 2 * (x - 5) + 18 = x\n    # 2x - 10 + 18 = x\n    # 2x - x = 10 - 18\n    # x = -8\n    \n    # The value of x is negative, which is not possible for a count of pens or pencils,\n    # so we need to reevaluate our equation:\n    \n    # We know that:\n    # After giving away 5 pencils, she still has x - 5 pencils.\n    # She has 2 * (x - 5) pens before buying more.\n\n    # Before buying more pens, the total pens she had was equal to the total pencils she originally had.\n    # So we have the equation:\n    # 2 * (x - 5) = x\n\n    # Solving that we get:\n    # 2x - 10 = x\n    # x = 10\n    \n    # Now after buying 18 more pens, the total number of pens she has is:\n    # 2 * (x - 5) + 18\n    # 2 * (10 - 5) + 18\n    # 2 * 5 + 18\n    # 10 + 18\n    # 28\n    \n    return 28\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for i in range(1, 226):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length_1 = 45\n    cut_length_2 = 40\n    remaining_length = total_length - 2 * cut_length_1\n    num_of_cuts = remaining_length // cut_length_2\n\n    return num_of_cuts\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20\n    grams_needed_for_100_cookies = 100 / cookies_per_gram\n    return grams_needed_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    possibilities_per_place = 3  # 6, 7, or 8\n    return possibilities_per_place ** 3  # Three places for the three-digit number\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count_zeros = 0\n    number = 1\n    \n    while True:\n        str_number = str(number)\n        count_zeros += str_number.count('0')\n        \n        if count_zeros >= 100:\n            break\n        \n        number += 1\n        \n    return number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_drank_weekly = 9  # liters\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank_weekly\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bud, pip, tom = symbols('bud pip tom')\n    \n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180\n    duration_fast = 6\n    speed_slow = 120\n    duration_slow = 8\n    \n    distance_fast = speed_fast * duration_fast\n    distance_slow = speed_slow * duration_slow\n    total_distance = distance_fast + distance_slow\n    \n    return total_distance\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    left_handed_ratio = 0.1\n    girls_left_handed_ratio = 0.25\n\n    left_handed_students = left_handed_tennis_players / left_handed_ratio\n    total_students = left_handed_students / girls_left_handed_ratio\n\n    return int(total_students)\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Since they are consecutive whole numbers, we can represent them as:\n    # x, x+1, x+2, x+3, x+4, x+5, x+6, x+7\n    # The sum of these numbers is:\n    # 8x + 28\n    # According to the question, this sum is equal to 2012:\n    # 8x + 28 = 2012\n    # Solving for x gives us the first number in the sequence, \n    # and x+7 gives us the largest number.\n    x = (2012 - 28) // 8\n    largest_number = x + 7\n    return largest_number\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    other_cars = total_cars - red_cars - blue_cars\n\n    return int(other_cars)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    elias_front = 25  # People in front of Elias\n    danya_back = 14   # Danya's position from the back\n    # Since Elias is directly behind Danya, the total number of people is the sum of\n    # people in front of Elias, Danya's position from the back, and Elias himself.\n    total_people = elias_front + danya_back + 1\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1/3\n    peter_rate = 1/6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    frac = 42 / 35\n    percentage = frac * 100\n    return percentage\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of students in class A and class B\n    A, B = symbols('A B')\n\n    # The initial condition: A is 5/7 of B\n    initial_condition = Eq(A, 5/7 * B)\n\n    # The condition after transferring 3 students: A+3 is 4/5 of B-3\n    transfer_condition = Eq(A+3, 4/5 * (B-3))\n\n    # Use sympy's solve function to find the number of students in class A and class B\n    solutions = solve((initial_condition, transfer_condition), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    dividend = 52248\n    divisor = 12\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let's denote the side of the small square (boys only) as 'x'\n    # Then, the number of boys in the choir would be 'x^2'\n    # After adding 17 girls in a way that the formation is still a square,\n    # The new side of the square would be 'x + 1'\n    # Thus, the total number of students in the larger square would be '(x + 1)^2'\n    \n    # So, we have the equation: (x + 1)^2 - x^2 = 17\n    # Simplifying the equation: x^2 + 2x + 1 - x^2 = 17\n    # So, 2x + 1 = 17\n    # Hence, x = (17 - 1) / 2\n    # Thus, x = 8\n    \n    # Therefore, the total number of boys in the choir is:\n    x = (17 - 1) // 2\n    num_boys = x * x\n    \n    return num_boys\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the distance be 'd' kilometers\n    # Let the initial speed be 's' kilometers per hour\n    d, s = symbols('d s')\n\n    # Equation 1: s * 6 = d (since it takes 6 hours from 1 p.m. to 7 p.m.)\n    equation1 = Eq(s * 6, d)\n\n    # Equation 2: (s + 2) * 5 = d (arrives an hour earlier, so it takes 5 hours,\n    # and the speed is 2 km/h faster)\n    equation2 = Eq((s + 2) * 5, d)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (d, s))\n\n    # Return the distance 'd'\n    return solutions[d]\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye has at first.\n    # She exchanged 5 times, so she must have given 3 * 5 bottles to get 4 bottles.\n    # Since she got 1 more than expected, the expected bottles would have been 4 - 1 = 3.\n    # So, without the extra bottle, she must have given 3 * 5 bottles to get 3 bottles.\n    # Therefore, she started with 3 * 5 + the remainder after exchanging 5 times.\n    # The remainder would be x % 3 since each full set of 3 bottles can be exchanged.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x // 3, 5)\n    # Solve the equation where she must have given 3 * 5 (15) bottles in sets of 3\n    # to get 3 bottles, which means she has given 5 sets hence we divide by 3.\n    # Considering that she got 1 more bottle than expected (4 instead of 3 expected with 5 exchanges),\n    # we know that she should have exactly 3 * (number of exchanges) bottles.\n\n    expected_bottles = (5 - 1) * 3  # expected number of bottles if she had gotten only 3 bottles per 5 exchanges\n    solution_set = solve(Eq(x // 3 * 3, expected_bottles), x)\n\n    # Since Faye managed to get 4 bottles out of 5 exchanges, she could have only had a remainder of 2 bottles \n    # after the exchanges because that is the maximum remainder possible when dividing by 3 (since 3 remainder 0 \n    # would mean just another exchange possible). So we need to add this remainder to the solution.\n\n    initial_bottles = max(solution_set) + 2  # we use max to ensure we get the positive solution\n\n    return initial_bottles\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate = 125  # in millilitres per second\n    litres_to_millilitres = 1000  # 1 litre = 1000 millilitres\n\n    total_millilitres = total_litres * litres_to_millilitres\n    time_in_seconds = total_millilitres / flow_rate\n\n    return time_in_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages, digits = 0, 0\n    while digits < 237:\n        pages += 1\n        digits += len(str(pages))\n    return pages - 1\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    # Incorrect and correct difference\n    diff_incorrect = 1268 - 1082\n    # Incorrect and correct averages\n    avg_incorrect = 1468\n    avg_correct = 1462\n    # Average difference is also the difference in totals due to one day incorrect recording\n    diff_avg = avg_incorrect - avg_correct\n    # The number of days is the difference in totals divided by the difference per day\n    days = diff_incorrect / diff_avg\n    return int(days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    time_to_cut_into_4 = 12  # It takes 12 minutes to cut into 4 pieces\n    num_cuts_for_4_pieces = 4 - 1  # To get 4 pieces, Mr Tung needs to make 3 cuts\n    num_cuts_for_12_pieces = 12 - 1  # To get 12 pieces, 11 cuts are needed\n    \n    # Time to make one cut\n    time_per_cut = time_to_cut_into_4 / num_cuts_for_4_pieces\n    \n    # Total time to make 11 cuts\n    time_to_cut_into_12 = time_per_cut * num_cuts_for_12_pieces\n    \n    return time_to_cut_into_12\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_tree = current_year - birth_year\n    return age_of_tree\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    tenth_term = 31\n    common_difference = 3\n    terms = 10\n\n    first_term = tenth_term - (terms - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # represent the ages of Lily, Marry, and Carol\n    lily, marry, carol = symbols('lily marry carol')\n\n    # given equations based on the problem\n    equation1 = Eq(4 * lily * marry * carol, 2240)\n    equation2 = Eq(carol, marry + 2)\n    equation3 = Eq(marry, lily + 1)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n    \n    # iterate over solutions to find the positive integer solutions for the ages\n    for sol in solutions:\n        if all(isinstance(age, int) and age > 0 for age in sol):\n            return sol[carol]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Chewy's incorrect working: (8x + 8) / 2 - 3 * (x + 6) = 4x + 4 - 3x - 18\n    # Correct the working\n    correct_expr = ((8*x + 8)/2) - 3*(x + 6)\n    # Simplify the expression\n    corrected_eq = Eq(correct_expr, 0)\n    # Solve the corrected equation\n    correct_answer = solve(corrected_eq, x)\n\n    return correct_answer[0]\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the common difference d\n    d = symbols('d')\n    \n    # Define the symbol for the first term a1\n    a1 = symbols('a1')\n\n    # Equation based on the given that the 9th term is 18 more than the 15th term\n    # a1 + 8d = (a1 + 14d) + 18 -> a1 + 8d - a1 - 14d = 18\n    eq1 = Eq(a1 + 8*d - (a1 + 14*d), -18)\n\n    # Equation based on the given that the sum of the 20th term and the 12th term is 88\n    # (a1 + 19d) + (a1 + 11d) = 88 -> 2a1 + 30d = 88\n    eq2 = Eq((a1 + 19*d) + (a1 + 11*d), 88)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a1, d))\n\n    # Extract the solutions\n    a1_solution = solutions[a1]\n    d_solution = solutions[d]\n\n    # Calculate the 32nd term\n    a32 = a1_solution + 31*d_solution\n\n    return a32\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    \n    red_flowers_fraction = 2 / 5\n    purple_flowers_fraction = 1 / 8\n    \n    red_flowers = total_flowers * red_flowers_fraction\n    purple_flowers = total_flowers * purple_flowers_fraction\n\n    return int(red_flowers + purple_flowers)\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # There are 10 identical marbles, so every distribution can be represented as\n    # (number of marbles in pile 1, number of marbles in pile 2)\n    # Since the marbles are identical, the order of the piles doesn't matter.\n    # We can represent the distribution as (x, 10 - x)\n    # where x is the number of marbles in the first pile and ranges from 0 to 10.\n    # However, since we want two piles, x cannot be 0 or 10 because that would result in one pile.\n    # Therefore, x can range from 1 to 9, which results in 9 different ways.\n    \n    # But these distinctions take into account the order of the piles.\n    # When considering two piles with identical marbles, (1,9) and (9,1) should be considered the same.\n    # We need to consider this to prevent overcounting.\n    # Therefore, we divide by 2 to correct for overcounting.\n    \n    return (9 + 1) // 2\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    ans = 6444 // 18\n    return ans\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # Conversion: 1 liter = 1.056688 quarts\n    coke_liters = 2.5\n    cup_quarts = 0.5\n    coke_quarts = coke_liters * 1.056688\n    \n    num_cups = coke_quarts / cup_quarts\n    return round(num_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # To guarantee 3 toy cars of the same color, Jeremy will need to pick\n    # at most 2 red cars and 2 blue cars and 2 white cars before selecting\n    # a car of the third color. This is because even if he picks in the worst\n    # case scenario (alternating colors), by the time he has 2 of each color,\n    # the next car he picks must be the third of one of the colors.\n\n    # Red cars = 5, Blue cars = 9, White cars = 4\n    red_cars = 2\n    blue_cars = 2\n    white_cars = 2\n\n    # Selecting two of each color first\n    cars_picked = red_cars + blue_cars + white_cars\n\n    # The next car picked will guarantee 3 of the same color\n    cars_picked += 1  # This is the third car of the same color\n\n    return cars_picked\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    lengths_cm = [85, 200, 147]  # lengths of the wood in centimeters (2m converted to 200cm)\n    total_length_cm = sum(lengths_cm)  # sum the lengths\n    total_length_m = total_length_cm / 100  # convert total length to meters\n\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    return 2 + 34/100\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    total_legs = 64\n    ant_legs = 6\n    spider_legs = 8\n\n    max_ants = 0\n    while (total_legs - max_ants * ant_legs) % spider_legs != 0:\n        max_ants += 1\n\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins Vivian and Justin have\n    vivian, justin = symbols('vivian justin')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    # Return the number of coins Vivian has\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    final_stamps = 34\n    stamps_given_to_sister = 14\n    stamps_bought = 11\n    stamps_used = 2\n\n    initial_stamps = final_stamps + stamps_given_to_sister + stamps_used - stamps_bought\n    \n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres_conversion_factor = 1000  # 1 litre is 1000 millilitres\n    millilitres = 7.5 * litres_to_millilitres_conversion_factor\n    return millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n\n    # On the fourth bounce, it reached 36 meters, which is half of the height of the third bounce\n    equation = Eq(h * (3 ** 2) / (2 ** 2), 36)\n\n    height = solve(equation, h)\n\n    return height[0]\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the two original numbers as x and y\n    x, y = symbols('x y')\n\n    # Equation for the sum of the two numbers\n    equation1 = Eq(x + y, 11.63)\n\n    # Equation when Oliver shifted the decimal point to the left in one number\n    equation2 = Eq(x + y/10, 5.87)\n\n    # Solve the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return one hundred times the difference between the two original numbers\n    difference = solutions[x] - solutions[y]\n    return abs(difference * 100)\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent = initial_amount / 2\n    remaining_amount = initial_amount - spent\n    return remaining_amount\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if b != a:\n                for c in range(10):\n                    if c not in [a, b]:\n                        for d in range(10):\n                            if d not in [a, b, c]:\n                                for e in range(10):\n                                    if e not in [a, b, c, d]:\n                                        number = int(f'8{a}{b}{c}{d}{e}')\n                                        if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                                            return number\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # in pence\n    cost_whole_cd = 899  # in pence, £8.99 is 899p\n\n    total_cost_separate = 12 * cost_per_song  # cost of all songs bought individually\n    savings = total_cost_separate - cost_whole_cd\n\n    return savings\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):  # Two-digit numbers range from 10 to 99\n        original = i\n        reversed_num = int(str(original)[::-1])  # Reverse the number\n        if original > reversed_num:\n            difference = original - reversed_num\n        else:\n            difference = reversed_num - original\n        results.add(difference)\n\n    # Observation: All differences are multiples of 9\n    is_multiple_of_nine = all(result % 9 == 0 for result in results)\n    \n    # The final result is whether all answers are multiples of 9\n    ans = is_multiple_of_nine\n    return ans\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123'\n    all_combinations = set(permutations(digits, 2)) \n    return len(all_combinations)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    digits = list(range(10))\n    \n    # To minimize the difference, assign the smallest digits to the most significant places of the two numbers\n    # Sort the digits to make the smallest number in decreasing order for the most significant digits\n    small = digits[1:]  # Exclude 0 for the most significant place\n    small.sort()  # Sort the smaller number in ascending order\n    large = digits[:]\n    large.sort(reverse=True)  # Sort the larger number in descending order\n    \n    # Place the smallest digit (0) in the second most significant place of the smaller number\n    small.insert(1, small.pop(small.index(0)))\n    \n    # Convert lists of digits to numbers\n    small_number = int(''.join(map(str, small)))\n    large_number = int(''.join(map(str, large)))\n\n    # The difference between the largest and smallest number\n    difference = large_number - small_number\n    \n    return difference\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    sam, peter = symbols('sam peter')\n    \n    # Equation 1: Sam had 40 stickers more than Peter.\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gives 20% of his stickers to Peter\n    sam_gives = 0.20 * sam\n    peter_after_sam_gives = peter + sam_gives\n    \n    # Peter gives 25% of his stickers (after receiving from Sam) to Sam\n    peter_gives = 0.25 * peter_after_sam_gives\n    sam_after_peter_gives = sam - sam_gives + peter_gives\n    \n    # Equation 2: In the end, Sam had 96 stickers more than Peter.\n    equation2 = Eq(sam_after_peter_gives, peter_after_sam_gives + 96)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_seconds = 15\n    length_meters = 450\n\n    # Speed is distance divided by time\n    speed_m_per_s = length_meters / time_seconds\n\n    # Convert to kilometers per hour by multiplying with 3.6 (3600 / 1000)\n    speed_km_per_h = speed_m_per_s * 3.6\n\n    return speed_km_per_h\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt_weight = 8\n    water_weight = 32\n    total_weight = salt_weight + water_weight\n\n    percent_concentration = (salt_weight / total_weight) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    percentage = 70\n    total = 40\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    # Ratio of pen cost to pencil cost\n    ratio = pen_cost // pencil_cost\n\n    return ratio\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2\n\n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    num_friends = 4\n    cards_sent_by_each = num_friends - 1\n    total_cards = num_friends * cards_sent_by_each\n\n    return total_cards\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n\n    total_water = initial_water + jug_capacity * jugs_added\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    chloe, david, emily = symbols('chloe david emily')\n\n    # Given conditions\n    alan = 74\n    bilal = 86\n    total = 400\n\n    # Equations based on the problem statement\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, total)\n\n    # Use sympy's solve function to solve the equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    total_cookies = (9 * 3) + (15 * 2) + (10 * 2)\n    total_days = 3 + 2 + 2\n    average_cookies = total_cookies / total_days\n    return average_cookies\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david_off = symbols('david_off')\n    \n    # Candy's work rate per day\n    candy_rate = 1 / 20\n    # David's work rate per day\n    david_rate = 1 / 25\n    \n    # Equation representing the total work done\n    total_work = Eq(candy_rate * 12 + david_rate * (12 - david_off), 1)\n\n    # Solve for the days David took off\n    days_off = solve(total_work, david_off)\n\n    return days_off[0]\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's Third Law of Motion, the force exerted by the table on the book (normal force)\n    # is equal in magnitude and opposite in direction to the force of gravity acting on the book (its weight).\n    book_mass = 20  # Given in Newtons, which is also the weight of the book\n\n    # The magnitude of the force exerted by the table is equal to the weight of the book\n    table_force = book_mass\n\n    return table_force\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    income = 140000\n    tax_paid = 15100\n    initial_tax_rate = 0.05\n    over_50k_tax_rate = (tax_paid - 50000 * initial_tax_rate) / (income - 50000)\n    T = over_50k_tax_rate - 0.08\n    \n    return T * 100  # to convert from decimal to percentage\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guy_age_expr = y - 3\n    return guy_age_expr\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    total_fruits = symbols('total_fruits')\n\n    # Given facts to equations   \n    apples = 4/5 * total_fruits\n    pears = total_fruits - apples\n    removed_fruits = 3/4 * total_fruits\n    \n    # Remaining fruits\n    remaining_apples = 1/8 * apples\n    remaining_pears = 30\n    \n    # Total remaining fruits are what's left after removing 3/4 of the fruits\n    remaining_fruits = total_fruits - removed_fruits\n    \n    # Equation based on remaining apples and remaining pears\n    equation = Eq(remaining_fruits, remaining_apples + remaining_pears)\n    \n    # Solve the equation for the total number of fruits\n    solutions = solve(equation, total_fruits)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # To ensure 6 balls of the same type, Lily needs to consider the worst case.\n    # The worst case scenario would be if she takes out all other types of balls until only one type is left.\n\n    # Since there are 9 basketballs, she could take out all other types of balls first.\n    # This means all 6 footballs and all 3 volleyballs, plus 5 basketballs to ensure she has 6 of the same type.\n    balls_to_take_out = 6 + 3 + 5\n\n    return balls_to_take_out\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    # Assuming acceleration due to gravity (g) is 9.81 m/s^2 (standard on Earth's surface)\n    g = 9.81  # m/s^2\n\n    # Height (h) from which the ball is dropped\n    h = 5.0  # meters\n\n    # We can use the kinematic equation for an object in free fall: v^2 = u^2 + 2gh\n    # where u is the initial velocity (0 m/s in this case, since the ball is gently pushed),\n    # v is the final velocity, g is acceleration due to gravity and h is the height.\n\n    # Compute the final velocity (v) as the ball strikes the ground\n    v = sqrt(0 + 2 * g * h)  # Final velocity in m/s\n\n    return v\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    cakes = 6\n    cakes_needed = 10\n    \n    time_per_cake = time_for_6_cakes / cakes\n    total_time_for_10_cakes = time_per_cake * cakes_needed\n    \n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of stickers and y be the number of pupils\n    x, y = symbols('x y')\n\n    # If he gives 13 stickers to each pupil, he will have 190 stickers left\n    equation1 = Eq(x - 13 * y, 190)\n\n    # If he gives 17 stickers to each pupil, he will have 50 stickers left\n    equation2 = Eq(x - 17 * y, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "def solution():\n    from math import comb\n    \n    # If each kid gets at least one orange, we have (13 - 3) oranges left to distribute\n    # This simplifies to a problem of placing two dividers in the 10 remaining \"spots\" to divide the oranges\n    # This is equivalent to choosing 2 positions out of 12 (10 oranges + 2 dividers), which is \"12 choose 2\"\n    \n    ans = comb(12, 2)\n    return ans\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # Since we are looking for the smallest possible number, let's start from the smallest number with digit sum of 20\n    # Which is 2000 (2 + 0 + 0 + 0 = 20). We'll then increment from this number to find the one divisible by 11\n    # keeping in mind the divisibility rule for 11 (sum of digits at odd positions - sum of digits at even positions is divisible by 11)\n    number = 2000\n    while True:\n        str_num = str(number)\n        odd_sum = sum(int(str_num[i]) for i in range(0, len(str_num), 2))  # Sum of digits at odd positions\n        even_sum = sum(int(str_num[i]) for i in range(1, len(str_num), 2))  # Sum of digits at even positions\n        if (odd_sum - even_sum) % 11 == 0 and sum(int(digit) for digit in str_num) == 20:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    for s in range(1, 10):\n        for a in range(0, 10):\n            if a != s:\n                for m in range(0, 10):\n                    if m not in (s, a):\n                        for o in range(0, 10):\n                            if o not in (s, a, m):\n                                for g in range(0, 10):\n                                    if g not in (s, a, m, o):\n                                        sasmo = s * 10000 + a * 1000 + s * 100 + m * 10 + o\n                                        ogams = o * 10000 + g * 1000 + a * 100 + m * 10 + s\n                                        if sasmo * 4 == ogams:\n                                            return sasmo\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "def solution():\n    import math\n\n    # Initial speed\n    v_0 = 5  # m/s\n\n    # Height of the building\n    h = 30  # meters\n\n    # Angle of the shot\n    angle = 45  # degrees\n\n    # Convert angle to radians\n    angle_rad = math.radians(angle)\n\n    # Initial speed components\n    v_0x = v_0 * math.cos(angle_rad)\n    v_0y = v_0 * math.sin(angle_rad)\n\n    # Acceleration due to gravity\n    g = 9.81  # m/s^2\n\n    # Time taken to reach the ground: solving quadratic equation given by\n    # 0 = h + v_0y * t - (1/2) * g * t^2 to find positive t\n    # Using formula: t = (-b + sqrt(b^2 - 4ac)) / 2a\n    # Here a = -1/2g, b = v_0y, c = h\n    a = -0.5 * g\n    b = v_0y\n    c = h\n\n    # Discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Positive time solution\n    t = (-b + math.sqrt(discriminant)) / (2*a)\n\n    # Final speed components\n    v_fx = v_0x  # Horizontal velocity remains unchanged\n    v_fy = v_0y - g * t  # Vertical velocity\n\n    # Final speed magnitude\n    v_f = math.sqrt(v_fx**2 + v_fy**2)\n\n    return v_f\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2  # sandwiches, burgers\n    drink_options = 3  # coffee, milk, tea\n    dessert_options = 4  # cake, pudding, ice-cream, pie\n\n    total_combinations = food_options * drink_options * dessert_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    container_A = 48\n    container_B = 28\n    total_water = container_A + container_B\n\n    equal_volume = total_water / 2\n\n    water_to_transfer_from_A = container_A - equal_volume\n\n    return water_to_transfer_from_A\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n    \n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n    \n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n    \n    eight_elephants_as_pigs = 8 * solutions[elephant] * solutions[pig] / solutions[pig]\n    \n    return eight_elephants_as_pigs\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 2000\n    amount = 2519.42\n    rate = symbols('rate')\n    years = 3\n\n    equation = Eq(principal * (1 + rate) ** years, amount)\n\n    solutions = solve(equation, rate)\n\n    # We need to find the positive solution since rates are positive values.\n    rate_solution = [sol.evalf() for sol in solutions if sol > 0][0]\n\n    return rate_solution\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    total_change = 0.40\n    total_cost = total_paid - total_change\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mangoes, lychees = symbols('mangoes lychees')\n    equation1 = Eq(24 * mangoes + 20 * lychees, 1160)\n    equation2 = Eq(lychees, 2 * mangoes - 6)\n\n    solutions = solve((equation1, equation2), (mangoes, lychees))\n\n    return solutions[lychees]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    return 60 / 100 * (2 / 5) * 75\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 18 / 100\n    tax_percent = 10 / 100\n\n    tip_amount = bill * tip_percent\n    tax_amount = bill * tax_percent\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # Arrange all singing performances SSSSSS\n    # There are 7 positions to insert dancing performances _S_S_S_S_S_S_\n    # At least 1 singing performance between every 2 dancing: _DS_DSDS_DS_\n    # We treat 2D as a single unit, so we have only one way to put 2D\n    # With 4 Ds, we can have 2 units of 2D or 1 unit of 2D and 2 single Ds\n    # Now calculate the number of arrangements for each scenario\n    \n    # Scenario 1: 2 units of 2D, 1 simple D and 5 S in 7 positions => (2DD) (2DD) D SSSSS\n    # Permutations of D and S: 7! / (2! * 1! * 5!)\n    # But we need to divide by 2! again to account for the repetition of (2DD) units\n    scenario_1 = factorial(7) // (factorial(2) * factorial(1) * factorial(5) * factorial(2))\n    \n    # Scenario 2: 1 unit of 2D and 2 single Ds and 5 S in 7 positions => (2DD) D D SSSSS\n    # Permutations of D and S: 7! / (1! * 2! * 5!)\n    # We don't need to divide by 2! as the single D's are distinct\n    scenario_2 = factorial(7) // (factorial(1) * factorial(2) * factorial(5))\n    \n    # The total number of arrangements\n    return scenario_1 + scenario_2\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_five_boxes = 350\n    weight_per_box = total_weight_five_boxes / 5\n    total_weight_three_boxes = weight_per_box * 3\n    return total_weight_three_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial as fact\n\ndef solution():\n    # Treat four comics as one unit and six fictions as another unit\n    # There are 2! ways to arrange these two units\n    unit_permutations = fact(2)\n\n    # Within the comics, there are 4! ways to arrange them\n    comic_permutations = fact(4)\n\n    # Within the fictions, there are 6! ways to arrange them\n    fiction_permutations = fact(6)\n\n    # Total permutations is the product of the permutations of the units and permutations within each unit\n    total_permutations = unit_permutations * comic_permutations * fiction_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7/10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    total_points = 155\n    question_points = 10\n    wrong_penalty = 5\n    justin_advantage = 15\n\n    # Let dora_correct be the number of questions Dora answered correctly.\n    # Since each correct answer gives 10 points, Dora's points are 10 * dora_correct.\n    # Justin has 15 more points than Dora, so Justin's points are (10 * dora_correct) + justin_advantage.\n    \n    # The total number of points is the sum of Justin's and Dora's points.\n    # So, we set up the equation:\n    # 10 * dora_correct (Dora's points) + (10 * dora_correct + justin_advantage) (Justin's points)\n    # minus 5 times the number of questions they got wrong or skipped\n    # (20 - dora_correct) is the number of questions Dora got wrong or skipped,\n    # and (20 - (dora_correct + justin_advantage/points_per_question)) is the same for Justin\n\n    for dora_correct in range(11):  # Dora can answer between 0 and 10 questions correctly.\n        justin_correct = dora_correct + justin_advantage / question_points\n        dora_wrong_skip = 10 - dora_correct\n        justin_wrong_skip = 10 - justin_correct\n\n        if 10 * (dora_correct + justin_correct) - wrong_penalty * (dora_wrong_skip + justin_wrong_skip) == total_points:\n            return dora_correct\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    # Let y be the number of groups in Class B\n\n    # According to the question, the students in Class A are divided into 3 groups.\n    # Each group in Class A sold 12 candies on average.\n    # Therefore, the total candies sold by Class A = 3 * 12\n\n    total_candies_A = 3 * 12\n\n    # The average number of candies sold by each group in both Class A and Class B is 8.\n    \n    # We know there are 3 groups in Class A and 4 in Class B, 7 groups in total.\n    total_groups = 3 + 4  # Class A groups + Class B groups\n\n    # So, the total candies sold by both Class A and Class B = total_groups * average\n    total_candies_AB = total_groups * 8\n\n    # To find the total candies sold by Class B, we subtract the total candies sold by Class A from the total candies sold by A and B.\n    total_candies_B = total_candies_AB - total_candies_A\n\n    # Now, we divide the total candies sold by Class B by the number of groups in Class B (which is 4) to find the average number of candies sold by each group in Class B.\n    average_candies_B = total_candies_B / 4\n\n    return average_candies_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    # 1 job is completed by Lee and Nancy working together for 10 hours\n    equation1 = Eq(1, 10 * (lee_rate + nancy_rate))\n    \n    # 1 job is also completed by Lee working for 6 hours and then Nancy for 20 hours\n    equation2 = Eq(1, 6 * lee_rate + 20 * nancy_rate)\n\n    # Solve for individual rates\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    # The time it will take for Nancy to finish the job by herself is 1 job / nancy_rate\n    nancy_time = 1 / solutions[nancy_rate]\n\n    return nancy_time\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    remaining_length = total_length - used_length\n    number_of_shorter_pieces = 10\n\n    length_of_each_piece = remaining_length / number_of_shorter_pieces\n    \n    return length_of_each_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_second_stop = 22\n    remaining_after_first_stop = remaining_after_second_stop * 3\n\n    initial_passengers = remaining_after_first_stop * 5 // 2\n\n    return initial_passengers\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    result = 45 / 100 * 80\n    return result\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "def solution():\n    from math import comb\n    num_flavours = 7\n    num_doughnuts = 2\n\n    ans = comb(num_flavours, num_doughnuts)\n    return ans\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for white, milk, and dark chocolates\n    white, milk, dark = symbols('white milk dark')\n\n    # create the equations based on the problem description\n    ratio_eq = Eq(white/milk, 3/7)\n    ratio_eq2 = Eq(milk/dark, 7/5)\n    difference_eq = Eq(dark - white, 8)\n\n    # solve the equations\n    solutions = solve((ratio_eq, ratio_eq2, difference_eq), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_students = symbols('total_students')\n    \n    badminton_lovers = total_students / 4 + 3\n    remaining_students = total_students - badminton_lovers\n    table_tennis_lovers = remaining_students / 3 - 3\n    football_lovers = 25\n    \n    equation = Eq(badminton_lovers + table_tennis_lovers + football_lovers, total_students)\n    \n    number_of_students = solve(equation, total_students)\n    \n    return number_of_students[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    red_balls = 5\n    green_balls = 10\n\n    required_prob = 1/3\n    # Let x be the number of red balls to add for the probability of getting a green ball to be 1/3\n    # P(Green) = green_balls / (red_balls + green_balls + x)\n    # 10 / (5 + 10 + x) = 1/3\n    # Solve for x:\n    x = (green_balls / required_prob) - red_balls - green_balls\n    \n    return int(x)\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    larger_square_side = 6\n    smaller_square_side = 3\n    \n    squares_per_side = larger_square_side // smaller_square_side\n    total_squares = squares_per_side ** 2\n    return total_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    \n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5  # 5p spent by Avril\n    fraction = 1 / 4  # One-quarter of her money\n    initial_money = spent / fraction  # Calculate initial money\n\n    return initial_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peter, sam = symbols('peter sam')\n\n    # Sam Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    # peter gets sam * 20%\n    equation2 = Eq(peter + sam * 0.20, sam - sam * 0.20)\n\n    # Peter gave 25% of his stickers to Sam\n    # sam gets peter * 25%\n    new_peter_stickers = peter + sam * 0.20 - (peter + sam * 0.20) * 0.25\n    new_sam_stickers = sam - sam * 0.20 + (peter + sam * 0.20) * 0.25\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation3 = Eq(new_sam_stickers, new_peter_stickers + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (peter, sam))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Since we're only interested in the one's digit of the answer\n    # we can get the one's digit of the numbers 32^33 and 22^29\n    ones_digit_32_pow_33 = (32 ** 33) % 10\n    ones_digit_22_pow_29 = (22 ** 29) % 10\n    \n    # Now we subtract the one's digits and modulo 10 again to get the result\n    ans = (ones_digit_32_pow_33 - ones_digit_22_pow_29) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_6s(number):\n        count = 0\n        while number > 0:\n            if number % 10 == 6:\n                count += 1\n            number //= 10\n        return count\n\n    max_pages = 1\n    total_6s = 0\n\n    while total_6s < 18:\n        total_6s += count_6s(max_pages)\n        max_pages += 1\n\n    return max_pages - 1\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d2 != d3 and d1 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Given that the second ratio is 4:9, and the first ratio should be equivalent to the second\n    # We can set up the equation ?/81 = 4/9\n    missing_number = (4 * 81) / 9\n    return missing_number\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    climb_up = 5\n    slide_down = 3\n    jumps = 0\n    current_height = 0\n\n    while current_height < total_height:\n        jumps += 1\n        current_height += climb_up\n        if current_height >= total_height:\n            break\n        if jumps % 2 == 0:\n            current_height -= slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((2*n)**3 / (2*n*(2*n-1)*(2*n+1)) for n in range(1, 1007)) + 1/4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if num % 16 == 0 and (num + 1) % 5 == 0 and (num**0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    last_term = 39\n    difference = 21 - 15\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_mark = 4\n    wrong_mark = -2\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if (correct_answers * correct_mark + incorrect_answers * wrong_mark) == 152:\n            return correct_answers\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    total_cans = cans_per_day * 9\n    return total_cans\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # To share 16 sausages among 24 people, each person should get 16/24,\n    # which simplifies to 2/3 of a sausage.\n    # We can cut each sausage into three equal parts, that gives us a total\n    # of 16 * 3 = 48 parts.\n    # These 48 parts are enough to give each person 2 parts (since 24 * 2 = 48).\n    # This means we can make 2 cuts on each sausage to get 3 parts.\n    # Hence, for 16 sausages, we would make 16 * 2 = 32 cuts.\n\n    return 16 * 2  # Total number of cuts needed\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7                           # RAINBOW has 7 letters\n    total_vowels = 3                            # A, I, O are the vowels\n    total_consonants = total_letters - total_vowels # 7 - 3 = 4 consonants\n\n    # Total arrangements without any restrictions\n    total_arrangements = factorial(total_letters)\n\n    # Arrangements where vowels are together\n    # Treat vowels as a single entity plus the 4 consonants = 5 entities\n    vowels_together = factorial(total_vowels) * factorial(total_consonants + 1)\n\n    # Total allowed arrangements = all arrangements - vowel-together arrangements\n    arrangements_without_vowels_together = total_arrangements - vowels_together\n\n    return arrangements_without_vowels_together\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Wendy's age now and Vivien's age now\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Equation 1: Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Equation 2: Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time\n    wendy_in_5_years = solutions[wendy] + 5\n    \n    return wendy_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water in Container B at first\n    x = symbols('x')\n    # Container A initially had x + 350 mL of water\n    # Container A has x + 350 mL - 500 mL after spilling\n    # Container B has 2 times the water in Container A after spilling\n    equation = Eq(x, 2 * (x + 350 - 500))\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    # Amount of water in Container A at first is x + 350 mL\n    initial_water_in_A = solution[0] + 350\n\n    return initial_water_in_A\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    num1, num2, num3 = 39, 51, 147\n    gcd_result = gcd(gcd(num2 - num1, num3 - num1), num3 - num2)\n\n    return gcd_result\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    digits = 0\n    \n    # Digits in one-digit page numbers (1-9)\n    digits += 9\n    \n    # Digits in two-digit page numbers (10-99)\n    digits += 2 * (99 - 10 + 1)\n    \n    # Digits in three-digit page numbers (100-325)\n    digits += 3 * (325 - 100 + 1)\n    \n    return digits\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"STATISTIC\"\n    total_perms = set(permutations(word))\n    count = 0\n    for perm in total_perms:\n        if \"TT\" not in ''.join(perm):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n    total_tickets = first_week + second_week + third_week\n    \n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Let n be the number of team members, including Lovelle.\n    # Each of the 5 team members who spoke to Lovelle said 3 sentences, giving us 5 * 3 = 15 sentences.\n    sentences_spoken_by_5 = 5 * 3\n    \n    # Each of the team members who did not speak to Lovelle, which is 12 members, \n    # must have spoken 3 sentences to each of the other 11 non-speaking members.\n    # So each non-speaking member speaks 3 * 11 sentences.\n    sentences_spoken_by_non_speaking = 12 * 3 * 11\n    \n    # Lovelle also spoke 3 sentences to each of the 5 team members, \n    # thus she spoke 3 * 5 sentences.\n    sentences_spoken_by_lovelle = 3 * 5\n    \n    # The total number of sentences spoken is the sum of all the above.\n    total_sentences = sentences_spoken_by_5 + sentences_spoken_by_non_speaking + sentences_spoken_by_lovelle\n    \n    # However, since each sentence is a communication between two members, \n    # we counted each sentence twice. Thus we divide total sentences by 2.\n    # Also, since each member said 3 sentences to each other member,\n    # we can find n by dividing the distinct sentence count by 3.\n    n = total_sentences / (2 * 3)\n    return int(n)\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for total in range(1, 1000):  # Let's start with a reasonable range\n        remaining_after_music_lesson = total - 2\n        shared_at_break = remaining_after_music_lesson // 3\n        if remaining_after_music_lesson % 3 == 0:  # Check if it's exactly one third\n            remaining_after_break = remaining_after_music_lesson - shared_at_break\n            if remaining_after_break % 4 == 0:  # Check if it can be equally divided over 4 lessons\n                return total\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_rate = 50  # pieces per hour\n\n    time_needed = total_pieces / average_rate\n\n    return time_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah_before, mark = symbols('sarah_before mark')\n\n    equation1 = Eq(sarah_before, mark + 20)\n    equation2 = Eq(sarah_before + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah_before, mark))\n\n    return solutions[sarah_before]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    return (2018 - 20 + 18) // 8\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # First chest can be opened with 1 out of 9 keys, so 9 attempts.\n    attempts_for_first_chest = 9\n\n    # Second chest can then be opened with 1 out of remaining 8 keys, so 8 attempts.\n    attempts_for_second_chest = 8\n\n    # Similarly, 7 attempts for the third chest and 6 attempts for the fourth chest.\n    attempts_for_third_chest = 7\n    attempts_for_fourth_chest = 6\n\n    # The total attempts will be the sum of the attempts needed for each chest.\n    total_attempts = (attempts_for_first_chest +\n                      attempts_for_second_chest +\n                      attempts_for_third_chest +\n                      attempts_for_fourth_chest)\n\n    return total_attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Analyze the pattern in the sequence\n    sequence = [2945, 3445, 3245, 3745, 4045, 3845]\n    differences = [sequence[i] - sequence[i - 1] for i in range(1, len(sequence))]\n\n    # The pattern is +500, -200, +500, ?, +500, -200\n    # The missing term comes after +500 and before +500\n    # Therefore, the missing term should be -200 less than 4045\n    missing_term = 4045 - 200\n\n    return missing_term\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    return sum(i**2 for i in range(1, 26, 2))\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    \n    solution = solve(equation, h)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    total_mushrooms = 40\n    extra_mushrooms_first_hour = 26\n\n    # Let x be the number of mushrooms gathered in the first hour\n    # Then the number of mushrooms gathered in the second hour would be x + extra_mushrooms_first_hour\n    # According to the problem, total mushrooms gathered are equal to 40.\n\n    # Equation: x + (x + extra_mushrooms_first_hour) = total_mushrooms\n    # 2x + extra_mushrooms_first_hour = total_mushrooms\n    # 2x = total_mushrooms - extra_mushrooms_first_hour\n    # x = (total_mushrooms - extra_mushrooms_first_hour) / 2\n\n    first_hour_mushrooms = (total_mushrooms - extra_mushrooms_first_hour) / 2\n    second_hour_mushrooms = first_hour_mushrooms + extra_mushrooms_first_hour\n\n    return int(second_hour_mushrooms)\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    years = 6\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    women, men = symbols('women men')\n    \n    # There were 4 times as many women as men\n    equation1 = Eq(women, 4 * men)\n    # Each woman ate 2 mini cupcakes and each man ate 5 mini cupcakes. They ate 182 mini cupcakes in total.\n    equation2 = Eq(2 * women + 5 * men, 182)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (women, men))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    number_of_coins = 11\n    diameter_of_coin = 1.85\n    total_length = diameter_of_coin * (number_of_coins - 1) + diameter_of_coin\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    second_term = 8\n    n = 14\n    difference = second_term - first_term\n\n    last_term = first_term + (n - 1) * difference\n    sum_sequence = (n / 2) * (first_term + last_term)\n\n    return sum_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    # Given fraction equation 3/12 = □/20\n    # Cross multiply to find the value of □\n    numerator = 3 * 20\n    denominator = 12\n    ans = numerator // denominator  # Use integer division since □ should be an integer\n    \n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = (participants * (participants - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    num_people = 8\n    # Subtract 1 because in a circular arrangement, one position is fixed\n    # due to rotational symmetry.\n    num_orders = factorial(num_people - 1)\n    return num_orders\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    temp_difference = night_temp - morning_temp\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # Since we are only interested in the last digit of the result,\n    # we can focus on the last digit of powers of 2 and 3.\n\n    # Last digits of powers of 2 repeat every 4: [2, 4, 8, 6]\n    # 2017 % 4 = 1, so the last digit after raising 2 to 2017 will be the same as 2^1\n    last_digit_2 = 2\n\n    # Last digits of powers of 3 repeat every 4: [3, 9, 7, 1]\n    # 2017 % 4 = 1, so the last digit after raising 3 to 2017 will be the same as 3^1\n    last_digit_3 = 3\n\n    # Multiply the last digits of both powers to get the last digit of the entire expression\n    last_digit = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ants_initial = symbols('ants_initial')\n\n    ants_after_sweeping = ants_initial * (1 - 3/4)\n    ants_after_running = ants_after_sweeping * (1 - 2/5)\n    ants_final = ants_after_running + 185\n\n    equation = Eq(ants_final, 2 * ants_initial)\n\n    ans = solve(equation, ants_initial)\n\n    return ans[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_day1 = 89\n    books_day2 = 11\n    total_spent = (books_day1 + books_day2) * book_cost\n    return total_spent\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be 'a' and the common difference be 'd'\n    a, d = symbols('a d')\n    \n    # Sum of the first four terms: S_1_to_4 = a + (a + d) + (a + 2*d) + (a + 3*d)\n    # Sum of the last four terms: S_5_to_8 = (a + 4*d) + (a + 5*d) + (a + 6*d) + (a + 7*d)\n    # According to the problem, S_5_to_8 - S_1_to_4 = 32\n\n    equation = Eq((a + 4*d) + (a + 5*d) + (a + 6*d) + (a + 7*d) - (a + (a + d) + (a + 2*d) + (a + 3*d)), 32)\n    \n    # Solve the equation for 'd'\n    common_difference = solve(equation, d)\n\n    return common_difference[d]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    last_square_root = 7\n    next_square_root = last_square_root + 1\n    next_number = next_square_root ** 2\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    current = 1\n    for _ in range(2021):\n        current = current * 2 + 4\n        if current >= 100:\n            current %= 100 \n\n    return current\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import lcm\n\n    # Number of flashes by red light in one minute is 4\n    red_flashes_per_minute = 4\n    # Number of flashes by green light in one minute is 6\n    green_flashes_per_minute = 6\n\n    # The least common multiple will give us how many times per minute they flash together\n    flashes_together_per_minute = lcm(red_flashes_per_minute, green_flashes_per_minute)\n\n    # Number of minutes in an hour\n    minutes_in_hour = 60\n\n    # Since they flash together at every multiple of the LCM within the hour, \n    # the number of times they flash together in an hour is the hour divided by the LCM\n    # Including the first and the last time\n    flashes_together_in_hour = (minutes_in_hour // flashes_together_per_minute) + 1 \n\n    return flashes_together_in_hour\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 41):\n        if isprime(a):\n            b = (41 - 3*a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    midpoint = (4.5 + 10.3) / 2\n    return midpoint\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    sale_price = 6500\n    profit_percent = 30 / 100\n    cost_price = sale_price / (1 + profit_percent)\n    \n    desired_profit = 5000\n    new_sale_price = cost_price + desired_profit\n    new_profit_percent = (new_sale_price - cost_price) / cost_price\n    \n    return new_profit_percent * 100\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    solutions = solve(equation, n)\n\n    return solutions\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_drink_ml = (120 / (1 - 3/5))\n    water_ml_per_bottle = total_drink_ml - 120\n    water_ml_for_6_bottles = water_ml_per_bottle * 6\n    return water_ml_for_6_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kilograms = 8.2\n    grams_per_kilogram = 1000\n    n = kilograms * grams_per_kilogram\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    return factorial(len(\"EARTH\"))\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    time_walked = 10\n    \n    # Simon and his friend's distance from school after walking away for 10 minutes\n    simon_distance = simon_speed * time_walked\n    friend_distance = friend_speed * time_walked\n    \n    # Simon's speed when he runs back to school\n    simon_run_speed = simon_speed * 2\n    \n    # Time taken for Simon to run back to school\n    time_simon_runs = simon_distance / simon_run_speed\n    \n    # Friend's additional distance while Simon runs back\n    friend_additional_distance = friend_speed * time_simon_runs\n    \n    # Total distance Simon's friend is from school when Simon gets back\n    total_friend_distance = friend_distance + friend_additional_distance\n    \n    return total_friend_distance\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = *perm, (perm[0] + perm[1] == 9) and 1\n        send = s*1000 + e*100 + n*10 + d\n        more = m*1000 + o*100 + r*10 + e\n        money = m*10000 + o*1000 + n*100 + e*10 + y\n        if s and m and send + more == money:\n            return money\n    return None\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_balls = 2 + 2 + 2 + 1  # Sum of all identical items and the green ball\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n\n    # Compute permutations with identical items using the multinomial coefficient\n    ways = factorial(total_balls) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls) * factorial(1))\n    \n    return ways\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5        # in litres\n    container_factor = 0.25   # the size of the other container compared to the dispenser\n    cup_volume = 150          # volume of one cup in millilitres\n    num_cups = 14             # number of cups\n    \n    # Volume taken by the container\n    container_volume = initial_volume * container_factor  # in litres\n    \n    # Total volume taken by cups, converting ml to litres by dividing by 1000\n    cups_total_volume = (cup_volume * num_cups) / 1000    # in litres\n    \n    # Water left in the dispenser\n    water_left = initial_volume - (container_volume + cups_total_volume)  # in litres\n    \n    return water_left\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    from math import factorial\n\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n\n    return count_derangements(7)\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"2{digit1}{digit2}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Sort the times to cross the bridge\n    times = [1, 2, 5, 10]\n    \n    # Initialize the total time\n    total_time = 0\n    \n    # While there are more than one person on the starting side\n    while len(times) > 1:\n        # If we are left with only three people, it's a special case\n        if len(times) == 3:\n            # Two fastest cross, fastest returns, two slowest cross, fastest returns\n            total_time += times[0] + 2 * times[1] + times[2]\n            break\n        else:\n            # Calculate time if two slowest go together and two fastest help them cross\n            case1 = times[-1] + times[0] + 2 * times[1] + times[-2]\n            # Calculate time if two slowest are helped across one by one by the fastest\n            case2 = 2 * times[0] + times[-1] + times[-2]\n            \n            # Choose the faster scenario\n            total_time += min(case1, case2)\n            \n            # Remove the two who have crossed\n            del times[-2:]\n    \n    return total_time\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = (100 // 7) * 7\n    if n == 100:\n        n -= 7\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pages_per_day = symbols('pages_per_day')\n    \n    original_time = 8\n    faster_time = original_time - 2\n    additional_pages_per_day = 2\n    \n    # Equations for the number of pages Anny writes each day on the original and faster rate\n    equation1 = Eq(pages_per_day * original_time, (pages_per_day + additional_pages_per_day) * faster_time)\n    \n    # Solve for pages per day\n    pages_per_day_solution = solve(equation1, pages_per_day)[0]\n    \n    # Calculate total pages to finish\n    total_pages = pages_per_day_solution * original_time\n    \n    return total_pages\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate of baking bread\n    pip_rate = 5 / 20\n    # Bud's rate of baking bread\n    bud_rate = 3 / 15\n    \n    # Total time of baking\n    total_time = 40\n    \n    # Calculate loaves of bread baked by Pip and Bud in 40 minutes\n    pip_bread = pip_rate * total_time\n    bud_bread = bud_rate * total_time\n    \n    # Total loaves baked by both in 40 minutes\n    total_bread = pip_bread + bud_bread\n    \n    return int(total_bread)\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Since Yohan is taking socks without looking, we can use the Pigeonhole Principle.\n    # To ensure getting a pair of white socks, Yohan might have to go through the worst-case scenario:\n    # taking out all red and black socks before reaching a pair of white socks.\n\n    # Number of socks of other colors before Yohan is forced to get a white pair:\n    max_other_socks = 10 + 10  # red socks + black socks\n  \n    # Once Yohan has all red and black socks out, the next two socks will guarantee a pair of white socks\n    max_white_socks = 2\n\n    # Total number of socks Yohan must take to guarantee a pair of white socks\n    max_socks = max_other_socks + max_white_socks\n  \n    return max_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = 1  # We can assign any value to 'a' since we are simplifying.\n    ans = (12 * a) / 4 + (2 * a) * 5\n    return ans\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = 1  # Assign a symbolic value to d for simplicity\n    ans = (6 * d) + (5 * d) - d\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # As the house increased by 10% to reach a value of £11,000, that was the 110% value of the original price\n    # This means:\n    # 110% * original_price = £11,000\n    # original_price = £11,000 / 110% = £11,000 / 1.1\n    original_price = 11000 / 1.1\n\n    # In the second year, the house loses 10% of its value.\n    # After the first year, house price = original_price + 10%\n    # After the second year, house price = original_price - 10%\n    # Final price after loss = 90% of initial price after first year\n    final_price_after_loss = original_price * 0.9\n\n    # Profit or loss = final price after loss - original price\n    profit_or_loss = final_price_after_loss - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    equation = Eq((3/8 + 1/6) * cookies + 33, cookies)\n\n    initial_cookies = solve(equation, cookies)\n\n    return initial_cookies[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * (i+2))\n    \n    sequence.sort()\n    median_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        median = sequence[median_index]\n    \n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 3) * 5, 35)\n    result = solve(equation, x)\n    \n    return result[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Start date is May 5th, known to be a Monday\n    start_date = datetime(2020, 5, 5)  # Year is arbitrary because we are just looking for weekdays\n    end_date = datetime(2020, 6, 7)\n\n    current_date = start_date\n    sunday_count = 0\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # In Python, Monday is 0 and Sunday is 6\n            sunday_count += 1\n        current_date += timedelta(days=1)\n\n    return sunday_count\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    # Let the initial number of red balls be 3x and white balls be 2x\n    from sympy import symbols, Eq, solve\n\n    x, pip, bud = symbols('x pip bud')\n\n    # After Pip adds red balls, the ratio becomes 5:3\n    equation1 = Eq((3*x + pip) / (2*x), 5/3)\n\n    # Bud adds white balls and the number of white balls becomes 2x+bud\n    # The new ratio becomes 5:4\n    equation2 = Eq((3*x + pip) / (2*x + bud), 5/4)\n\n    # Bud puts 100 more white balls than the red balls put by Pip\n    equation3 = Eq(bud, pip + 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, pip, bud))\n\n    # Initial number of white balls is 2x\n    initial_white_balls = 2 * solutions[x]\n\n    return initial_white_balls\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n    num_buckets = total_litres // bucket_capacity\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed_fraction = 1/4\n    left_handed_pupils = total_pupils * left_handed_fraction\n    not_left_handed_pupils = total_pupils - left_handed_pupils\n\n    return int(not_left_handed_pupils)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # Total amount of flour in kg\n    num_packets = 25  # Number of packets to be filled\n\n    flour_per_packet = total_flour / num_packets  # Flour in each packet\n\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # A number is divisible by 3 if the sum of its digits is divisible by 3.\n    # A number is divisible by 4 if the last two digits form a number that is divisible by 4.\n    # Since the number is 5K27K, we must find a digit K such that (5 + K + 2 + 7 + K) is divisible by 3\n    # and that 7K is divisible by 4. We'll start by checking the divisibility by 4.\n    \n    for K in range(10):\n        if (70 + K) % 4 == 0:  # Check last two digits divisibility by 4\n            # Now check if the sum of all digits is divisible by 3\n            if (5 + K + 2 + 7 + K) % 3 == 0:\n                return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the common multiplier for the ratio 4:3 for cookies: brownies before giving away\n    # Let cookies = 4x, brownies = 3x\n\n    x = symbols('x')\n\n    # After giving away 6 brownies, the ratio became 12:7\n    # We still have 4x cookies, but now (3x - 6) brownies\n\n    # Set up the equation based on the new ratio\n    equation = Eq((4 * x) / (3 * x - 6), 12 / 7)\n\n    # Solve for x\n    x_solution = solve(equation, x)\n\n    # Calculate how many were originally baked\n    cookies = 4 * x_solution[0]\n    brownies = 3 * x_solution[0]\n\n    # Calculate the total amount of cookies and brownies\n    total = cookies + brownies\n\n    return total.evalf()\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Calculate the work rate for 4 companies building a 900 m expressway in 5 days\n    work_rate_per_company_per_day = 900 / (4 * 5)\n    \n    # Calculate the total amount of work needed for a 5400 m expressway\n    total_work = 5400\n    \n    # Calculate the total work rate for 6 companies\n    total_work_rate_for_six_companies = 6 * work_rate_per_company_per_day\n    \n    # Calculate the number of days required for 6 companies to build a 5400 m expressway\n    days_required = total_work / total_work_rate_for_six_companies\n    \n    return days_required\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # He first sells the horse at $20, so he profits $20 - $10 = $10\n    profit1 = 20 - 10\n    # He then sells the horse again at $40, so he profits $40 - $30 = $10\n    profit2 = 40 - 30\n    # The total profit is the sum of the two individual profits\n    total_profit = profit1 + profit2\n\n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_tickets = 6\n    adam_spends = 93\n    claire_spends = 124\n\n    price_per_ticket = adam_spends / adam_tickets\n    claire_tickets = claire_spends / price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 10\n    last_term = 31\n    common_difference = 3\n    first_term = last_term - (nth_term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    # All numbers from 1 to 8\n    all_numbers = set(range(1, 9))\n    max_card = 0\n\n    # Iterate over all possible combinations of 4 cards adding up to 23\n    for a in range(1, 9):\n        for b in range(a + 1, 9):\n            for c in range(b + 1, 9):\n                for d in range(c + 1, 9):\n                    if a + b + c + d == 23:\n                        # Remaining cards after Player One's cards are taken\n                        remaining_cards = all_numbers - {a, b, c, d}\n                        # The highest card from Player Two's possible cards\n                        max_card = max(max_card, max(remaining_cards))\n\n    return max_card\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    # Total shoes to clean\n    total_shoes = 9 * 2\n\n    # Time taken by each cobbler to clean one shoe\n    time_per_shoe = 2\n\n    # Rate at which each cobbler cleans\n    rate_per_cobbler = 1 / time_per_shoe\n    \n    # Combined rate for both cobblers\n    combined_rate = 2 * rate_per_cobbler\n\n    # Shortest time to clean all shoes\n    shortest_time = total_shoes / combined_rate\n\n    return shortest_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    def square_sum(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    ans = sum(square_sum(i) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    packet_size = 7\n\n    packets_needed = (total_cookies + packet_size - 1) // packet_size\n\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    score = 168\n    \n    # Let's assume all attempted questions were answered correctly\n    # Then the maximum score possible by answering all attempted questions correctly\n    max_score = 4 * attempted\n    \n    # Since the actual score is less than the maximum possible score,\n    # for each incorrect question the difference in score increases by 5\n    score_diff = max_score - score\n    \n    # The number of incorrect questions can be calculated by dividing the score difference by 5\n    incorrect_questions = score_diff // 5\n    \n    # The number of correct questions is the total attempted questions minus incorrect questions\n    correct_questions = attempted - incorrect_questions\n    \n    return correct_questions\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "def solution():\n    from math import comb\n    total_players = 6\n    handshakes = comb(total_players, 2) \n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    \n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n    \n    dumplings_to_give = luna_dumplings - dumplings_each\n    \n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    number = two_thirds_of_number * (3/2)\n    three_quarters_of_number = (3/4) * number\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        if B == 0:  # A 4-digit number can't start with 0\n            continue\n        CBCD = 1000 * C + 100 * B + 10 * C + D\n        CDBC = 1000 * C + 100 * D + 10 * B + C\n        BDEC = 1000 * B + 100 * D + 10 * E + C\n        if CBCD + CDBC == BDEC:\n            return BDEC\n    return None\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n    least_common_multiple = lcm(6, 8, 9, 15)\n    packs_needed = -(-1000 // least_common_multiple)  # Ceiling division to get at least 1000 markers\n    return packs_needed * least_common_multiple\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "def solution():\n    from math import factorial\n\n    total_letters = 9        # Total letters in 'CHALLENGE'\n    total_consonants = 6     # Total consonants in 'CHALLENGE'\n    total_vowels = 3         # Total vowels in 'AEE', considering them as a single entity\n\n    # Treat the three vowels AEE as a single entity, then we have 7 entities to arrange\n    # (6 consonants + 1 vowel group). This can be done in 7! ways.\n    arrangements_7_entities = factorial(total_consonants + 1)\n\n    # Within the vowel group 'AEE', they can be rearranged in a way that counts the repetition\n    # of 'E'. There are 2 'E', so we must divide by 2! to correct for over-counting.\n    arrangements_vowels = factorial(total_vowels) // factorial(2)\n\n    # The total number of ways is the product of the arrangements of the 7 entities and the\n    # arrangements within the vowel group.\n    total_ways = arrangements_7_entities * arrangements_vowels\n\n    return total_ways\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250\n    nov_to_dec = 400 * 2\n\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_carrot_cake_price = 4 * 5\n    total_cheesecake_price = 1 * 10\n    total_chocolate_cake_price = 5 * 12\n    \n    total_cakes = 4 + 1 + 5\n    total_price = total_carrot_cake_price + total_cheesecake_price + total_chocolate_cake_price\n    \n    average_price = total_price / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n\n    cost_per_person = total_cost / num_people\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    # Let's denote the divisor and the quotient as 'd'.\n    # Based on the problem, we have dividend = divisor * quotient + remainder\n    # Since divisor is equal to quotient, we get dividend = d * d + 7\n    # We need to find the least such dividend, which happens when d is at its minimum.\n    # Since the remainder is 7, the divisor/quotient must be at least 8 to have a valid division.\n    # Because if d was 7 or less, the remainder would be invalid as it cannot be equal to or greater than the divisor.\n\n    d = 8  # The minimum possible value for our divisor/quotient\n    dividend = d * d + 7\n    \n    return dividend\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n    equation1 = Eq(cars, 4 / 3 * bikes)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    solutions = []\n\n    for total in range(2, 100, 2):  # total is even and less than 100\n        equation3 = Eq(cars + bikes + lorries, total)\n        sol = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n        if sol[cars] > 0 and sol[bikes] > 0 and sol[lorries] > 0 and all(isinstance(n, (int, int)) for n in sol.values()):\n            solutions.append(sol)\n\n    return solutions[0] if solutions else None\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    value_after_depreciation = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_depreciation\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    n = 12\n\n    twelfth_term = first_term + (n - 1) * difference\n    return twelfth_term\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance_per_minute = 25\n\n    # When there is one entrance\n    one_entrance_no_wait_time = 16\n\n    # The total number of visitors that have lined up in 16 minutes\n    total_visitors = visitors_per_minute * one_entrance_no_wait_time\n\n    # When there are two entrances\n    two_entrances_check_in_rate = check_in_per_entrance_per_minute * 2\n\n    # Time it takes for two entrances to clear the line\n    two_entrances_no_wait_time = total_visitors / two_entrances_check_in_rate\n\n    return two_entrances_no_wait_time\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    cube_root = (245)**(1/3)\n    p = cube_root**3 / 245\n    return int(p)\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    num_days = total_pages / pages_per_day\n\n    return num_days\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    return (6**2) - (4**2)\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    book_expense = 0.10 * initial_amount\n    remaining_after_book = initial_amount - book_expense\n    dvd_expense = 0.20 * remaining_after_book\n    remaining_after_dvd = remaining_after_book - dvd_expense\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    # The decimal part of 1/3 is repeating '3'.\n    sum_of_digits = 3 * 1000\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    day_climb = 5\n    night_slide = 3\n    net_distance = day_climb - night_slide\n    burrow_depth = 16\n    days = 0\n    total_climbed = 0\n    \n    while total_climbed < burrow_depth:\n        days += 1\n        total_climbed += day_climb\n        \n        if total_climbed >= burrow_depth:\n            break\n        \n        total_climbed -= night_slide\n    \n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    \n    number_before_adding = final_number - added_number\n    original_number = number_before_adding / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    num_games = len(scores)\n    total_goals = sum(scores)\n    mean_goals = total_goals / num_games\n\n    return mean_goals\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges_initial, lemons_initial = symbols('oranges_initial lemons_initial')\n\n    # Ratio before selling the oranges\n    equation1 = Eq(oranges_initial / lemons_initial, 3/5)\n\n    # Ratio after selling the oranges\n    equation2 = Eq((oranges_initial - 48) / lemons_initial, 1/2)\n\n    # Solving the two equations to find the number of lemons initially\n    solutions = solve((equation1, equation2), (oranges_initial, lemons_initial))\n\n    return solutions[lemons_initial]\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    result = 8102 - 2018\n    return result\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # The number of ways to choose 1 fruit from 3 types is C(3,1).\n    # The number of ways to choose 2 fruits from 3 types is C(3,2).\n    # The number of ways to choose 3 fruits from 3 types is C(3,3).\n    # Total number of ways to choose fruits is sum of all above.\n\n    from math import comb\n    total_ways = comb(3, 1) + comb(3, 2) + comb(3, 3)\n    \n    # Using Pigeonhole Principle, adding 1 to ensure at least two students choose the same combination\n    num_students = total_ways + 1 \n\n    return num_students\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percent = 10\n    discount_amount = (discount_percent / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    amount_spent = 10\n    fraction_of_total = 1/4\n\n    initial_amount = amount_spent / fraction_of_total\n\n    return initial_amount\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    for cats in range(32):\n        total_legs = 3 * 2 + 2 * 2 + 1 * 4 + cats * 4\n        if total_legs == 32:\n            return cats\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n    \n    class_a_students = 45\n    class_b_students = 75\n    class_c_students = 210\n\n    gcd_ab = gcd(class_a_students, class_b_students)\n    gcd_abc = gcd(gcd_ab, class_c_students)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Judy's current age as 'judy' and her father's current age as 'father'\n    judy, father = symbols('judy father')\n    \n    # Given equations based on the problem statement:\n    # Judy's father is 33 years older than her: father = judy + 33\n    # The sum of their ages is 63 years old: judy + father = 63\n    \n    # Our goal is to find the number of years 'n' ago when father's age was four times Judy's age:\n    # father - n = 4 * (judy - n)\n    \n    # We need to solve the two given equations first to find judy and father's current ages.\n    equation1 = Eq(father, judy + 33)\n    equation2 = Eq(judy + father, 63)\n    \n    # Solving the system of equations for judy and father\n    current_ages = solve((equation1, equation2), (judy, father))\n\n    # Unpack the ages of Judy and her father\n    judy_age = current_ages[judy]\n    father_age = current_ages[father]\n\n    # Now, let's find the number of years ago 'n' when the father was four times as old as Judy\n    n = symbols('n')\n    age_equation = Eq(father_age - n, 4 * (judy_age - n))\n\n    # Solve for n\n    years_ago = solve(age_equation, n)\n\n    return years_ago[0]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    num_teams = 11\n    num_matches = comb(num_teams, 2)  # Combination of selecting 2 teams out of 11 to play a match\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*(x - 1), 9 - 2*(x + 1))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n    \n    ans = phi(4, phi(8, 3))\n    return ans\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    # Let x be the current age of the older brother\n    # Let y be the current age of the younger brother\n    older_current_age, younger_was_age, older_will_be_age = symbols('x y 27')\n    \n    # When the older brother was the same age as the younger brother is now, the younger was 12\n    equation1 = Eq(older_current_age - younger_was_age, y - 12)\n    \n    # When the younger brother is as old as the older brother is now, the older will be 27\n    equation2 = Eq(younger_was_age + (older_current_age - y), 27)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (older_current_age, younger_was_age))\n    \n    # Return the current age of the older brother\n    return solutions[older_current_age]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    lcm = 6 * 8 * 9 * 15 // (2 * 2 * 3 * 3 * 5)  # LCM of 6, 8, 9, 15\n    min_markers = (1000 // lcm) * lcm\n    if min_markers < 1000:\n        min_markers += lcm\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of rooms\n    x = symbols('x')\n\n    # If there are 4 people in each room, then 4x is the number of beds available\n    # and we know that 40 students do not have dormitories, so there are 4x + 40 students in total\n    # If there are 6 people in each room, then 6x is the number of beds available\n    # and we know that there are 24 extra beds, so 6x - 24 is the number of students\n    # These two expressions for the number of students must be equal, hence the equation\n    equation = Eq(4 * x + 40, 6 * x - 24)\n\n    # Solve for x\n    solution_x = solve(equation, x)\n\n    # The number of rooms is the solution for x\n    return solution_x[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    # A is 25 greater than B\n    equation1 = Eq(A, B + 25)\n    \n    # After adding 35 to A, A is 6 times greater than B\n    equation2 = Eq(A + 35, 6 * B)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (A, B))\n\n    return solution[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n\n    # Calculate the common difference\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n\n    # Calculate the first term (a1)\n    first_term = tenth_term - (10 - 1) * common_difference\n\n    # Calculate the 102nd term\n    n = 102\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    part_eaten = 3/5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / part_eaten\n    sweets_left = total_sweets - sweets_eaten\n\n    return int(sweets_left)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_age_future = 15\n\n    age_difference = jane_age_future - jane_age_now\n    john_age_future = john_age_now + age_difference\n\n    return john_age_future\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n    solutions = solve(equation, x)\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n\n    marked_price = cost_price * 1.20\n    selling_price = marked_price * 0.80\n    loss = marked_price - selling_price - cost_price\n\n    equation = Eq(loss, 40)\n    cost_price_value = solve(equation, cost_price)\n\n    return cost_price_value[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    return ((7 + 3) * 11) - (7 + (3 * 11))\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Rate of tap X (tank per minute)\n    rate_x = 1 / 10\n    # Rate of both taps together\n    rate_both = 1 / 6\n    # Rate of tap Y (tank per minute)\n    rate_y = rate_both - rate_x\n    # Time for tap Y to fill the tank alone (minutes)\n    time_y = 1 / rate_y\n\n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    only_apples = 20 - 10  # Students who like only apples\n    only_strawberries = 30 - 10  # Students who like only strawberries\n    both = 10  # Students who like both\n    neither = 5  # Students who like neither\n\n    total_students = only_apples + only_strawberries + both + neither\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    xuanrui, yaokuan = symbols('xuanrui yaokuan')\n\n    # The equation for the total markers they had originally\n    equation1 = Eq(xuanrui + yaokuan, 708)\n\n    # The equation for the markers left after transactions\n    equation2 = Eq(xuanrui - 532, yaokuan - (3/7) * yaokuan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (xuanrui, yaokuan))\n\n    return solutions[xuanrui]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percentage = 12\n    discount_amount = (discount_percentage / 100) * usual_price\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    return 62 + 48 + 18 + 32\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_points = 44\n    points_per_correct = 6\n    points_per_wrong = -2\n    total_questions = 10\n\n    # let x be the number of correct answers and y be the number of wrong answers.\n    # we have the system of equations:\n    # x + y = total_questions (10)\n    # points_per_correct*x + points_per_wrong*y = total_points (44)\n\n    # from the first equation, we can express y as: y = total_questions - x\n    # substituting y in the second equation we get:\n    # points_per_correct*x + points_per_wrong*(total_questions - x) = total_points\n    # 6x - 2(10 - x) = 44\n    # 6x - 20 + 2x = 44\n    # 8x = 64\n    # x = 8\n\n    correct_answers = (total_points + points_per_wrong * total_questions) // (points_per_correct - points_per_wrong)\n\n    return correct_answers\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial = 1\n    sum_facts = 0\n    for i in range(1, 9):\n        factorial *= i\n        sum_facts += factorial\n\n    ans = sum_facts % 100\n    return ans\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    volume_a = 300\n    concentration_a = 0.20\n    volume_b = 300\n    concentration_b = 0.30\n\n    sugar_a = volume_a * concentration_a\n    sugar_b = volume_b * concentration_b\n\n    total_volume = volume_a + volume_b\n    total_sugar = sugar_a + sugar_b\n\n    mixture_concentration = (total_sugar / total_volume)\n\n    return mixture_concentration\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for marbles\n    ahmad, ryan = symbols('ahmad ryan')\n\n    # Equations based on the problem statement\n    equation1 = Eq(ahmad + ryan, 1442)\n    equation2 = Eq(ahmad, 6 * ryan)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n\n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n\n    # Marbles Ahmad should give to Ryan\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollar_amount = 1000\n    exchange_rate = 2.50  # 1 pound = $2.50\n    pounds_worth = dollar_amount / exchange_rate\n    return pounds_worth\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    final_twos = 175\n\n    # Let x be the number of original $2 notes and y be the number of $10 notes\n    # x + y = 95           (1)\n    # When exchanged, $10 notes become 5 * $2 notes\n    # So x + 5y = 175      (2)\n\n    # We solve these equations for x and y\n    for y in range(total_notes + 1):  # We cannot have more than 95 notes of any kind\n        x = total_notes - y\n        if x + 5 * y == final_twos:\n            break  # Found the solution\n    return x\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    spacing_length = 1\n\n    remaining_length = total_length - head_length\n    carriage_total_length = carriage_length + spacing_length\n\n    num_carriages = remaining_length // carriage_total_length\n\n    # Including the head of the train\n    return num_carriages + 1\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    ones_count = 0\n    tens_count = 0\n    hundreds_count = 0\n    \n    # Count occurrences of 8 in the ones place\n    for i in range(1, 289):\n        if i % 10 == 8:\n            ones_count += 1\n    \n    # Count occurrences of 8 in the tens place\n    for i in range(1, 289):\n        if (i // 10) % 10 == 8:\n            tens_count += 1\n    \n    # Count occurrences of 8 in the hundreds place\n    for i in range(1, 289):\n        if i // 100 == 8:\n            hundreds_count += 1\n            \n    return ones_count + tens_count + hundreds_count\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_points = 2\n    wrong_points = -1\n    total_score = 82\n\n    # Let x be the number of correct answers\n    # The number of wrong answers then is total_questions - x\n    # Equation: correct_points*x + wrong_points*(total_questions - x) = total_score\n    for x in range(total_questions + 1):\n        if correct_points*x + wrong_points*(total_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 0\n    while True:\n        if (24 * x - 8) % 25 == 0:\n            y = (24 * x - 8) // 25\n            if y >= 0:\n                return x\n        x += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    A = 10 * x + y\n    B = 100 * 2 * x + 10 * 2 * y\n\n    equation = Eq(B, 6 * A + 25)\n\n    solutions = solve(equation)\n\n    # Since x and y are digits, we need to filter valid solutions (0 <= x, y <= 9)\n    valid_solutions = [s for s in solutions if all(0 <= dig <= 9 for dig in s.values())]\n\n    if valid_solutions:\n        valid_solution = valid_solutions[0]\n        A_value = 10 * valid_solution[x] + valid_solution[y]\n        return A_value\n    else:\n        return None\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price - (original_price * discount_rate)\n    final_price = discounted_price + (discounted_price * increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    cost_per_kg_bag1 = 5 / 2.5\n    cost_per_kg_bag2 = 7.70 / 4\n    \n    return \"2.5kg\" if cost_per_kg_bag1 < cost_per_kg_bag2 else \"4kg\"\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum([1/i for i in range(2001, 2011)])\n    S = 1 / S_inverse\n    ans = int(S)\n    return ans\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    return 521 - 173 - 127\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    least_value = solve_congruence(*congruences)\n\n    return least_value[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n    mass_half_full = (mass_quarter_full + mass_three_quarters_full) / 2\n\n    empty_jar_mass = mass_quarter_full - (mass_half_full - mass_quarter_full)\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n    \n    # Because trees are planted at both ends, we subtract the interval once from the road length,\n    # then divide by the interval and add 1 for the initial tree.\n    trees_per_side = (road_length - interval) // interval + 1\n    \n    # Since trees are planted on both sides, we multiply by 2.\n    total_trees = trees_per_side * 2\n    \n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    ans = lcm(5, 10, 12)\n    return ans\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n    total_length = (bus_length * number_of_buses) + (distance_between_buses * (number_of_buses - 1))\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # equation representing the process with the mistake\n    mistake_eq = Eq(x / 4 - 25, 2021)\n    # solving the equation to find the original number\n    original_number = solve(mistake_eq, x)[0]\n    # the correct process with the original number\n    correct_answer = 4 * original_number + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    number_of_blocks = 42\n\n    unit_height = height_of_28_blocks / 28\n    height_of_42_blocks = unit_height * number_of_blocks\n\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    ans = 4.8 * 5\n    return ans\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    difference = 1\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for e in range(10):\n        # Construct the number with E at the specified position\n        number = int(f\"2{e}3{e}2\")\n        # Check divisibility by 9\n        if number % 9 == 0:\n            return e\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # Since x:5 = y:3, we can write this as x/5 = y/3.\n    # This means that y = (3/5) * x \n    # x and y are therefore in a directly proportional relationship.\n    # When x = 5, we can substitute this value into the equation to find y.\n    x = 5\n    y = (3/5) * x\n    \n    return y\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Given 4th and 6th terms of a Fibonacci-like sequence\n    a4 = 6\n    a6 = 15\n\n    # We need to backtrack to a3 and a5 using the property of the sequence\n    # a6 = a5 + a4 => a5 = a6 - a4\n    a5 = a6 - a4\n\n    # Similarly, a5 = a4 + a3 => a3 = a5 - a4\n    a3 = a5 - a4\n\n    # Now we can calculate a7 using a6 and a5\n    # a7 = a6 + a5\n    a7 = a6 + a5\n\n    return a7\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    original_cost = 200\n    selling_price_above_cost = original_cost * 1.5\n    discount = selling_price_above_cost * 0.1\n    final_selling_price = selling_price_above_cost - discount\n    profit = final_selling_price - original_cost\n\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 0\n    while True:\n        original_count = m**2 + 5\n        new_count = original_count + 18\n        n = int(new_count**0.5)\n        if n**2 == new_count:\n            break\n        m += 1\n    return original_count\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):  # Start from 99 down to 10\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x+3)/4 + (6+4*x)/3, (7*x+22)/8)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    ans = sum([9, 11, 8, 12, 7, 13, 6, 14, 5, 14])\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    a, b, c = 12, 15, 18\n    gcd_ab = gcd(a, b)\n    gcd_abc = gcd(gcd_ab, c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 5 * 60  # Convert 5 p.m. to minutes\n    badminton_duration = 45  # Badminton duration in minutes\n    jogging_duration = 30  # Jogging duration in minutes\n\n    total_time = start_time + badminton_duration + jogging_duration\n    stop_hour = total_time // 60  # Convert total minutes back to hours\n    stop_minute = total_time % 60  # Remaining minutes\n\n    # Since the time is PM, add 12 to the hours to get the time in 24-hour format\n    stop_time = f\"{stop_hour % 24}:{stop_minute:02d} {'PM' if stop_hour < 24 else 'AM'}\"\n    \n    return stop_time\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n    \n    original_sum = original_average * total_numbers\n    new_sum = new_average * total_numbers\n    \n    difference_in_sum = original_sum - new_sum\n    changed_number = 16\n    \n    original_number = difference_in_sum + changed_number\n    \n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    number = 1  # Start with the smallest natural number\n    while True:\n        if number % 5 == 3 and number % 6 == 5:\n            return number\n        number += 1  # Check the next natural number\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    # girls' total score\n    girls_total = girls * 88\n    # boys' total score\n    boys_total = boys * 91\n    \n    # equation: Average score of the class\n    equation = Eq((girls_total + boys_total) / 36, 89)\n    \n    num_girls = solve(equation, girls)\n    \n    return num_girls[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    rex_questions = total_questions - 1\n    rex_score = 66\n    \n    for correct_answers in range(rex_questions + 1):\n        incorrect_answers = rex_questions - correct_answers\n        score = 4 * correct_answers - 2 * incorrect_answers\n        if score == rex_score:\n            return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # Define possible edges for a cube\n    cube_edges = [(1,2), (1,3), (1,4), (1,5), (2,3), (2,6), (3,7), (4,5), (4,8), (5,6), (6,7), (7,8), (2,4), (3,6), (5,7), (1,8)]\n    # Define edges for Q3 shape (based on graph theory, Q3 can be considered as a 3-dimensional cube)\n    q3_edges = [(1,2), (1,4), (1,6), (2,3), (2,7), (3,4), (3,8), (4,5), (5,6), (5,7), (6,7), (7,8)]\n    \n    # Find the difference between the set of cube edges and Q3 edges\n    diff = set(cube_edges) - set(q3_edges)\n    \n    # The number of edges in cube not in Q3 shape\n    return len(diff)\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # David's sugar\n    david_sugar = 800 * 0.05\n    # Eugene's sugar\n    eugene_sugar = 200 * 0.30\n    # Felix's sugar\n    felix_sugar = 300 * 0.10\n\n    # Total sugar\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    # Total solution\n    total_solution = 800 + 200 + 300\n\n    # Concentration of the resulting sugar solution\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    ans = 715 - 364\n    return ans\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n\n    total_pens = black_pens + blue_pens + green_pens\n\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gill, andrew = symbols('gill andrew')\n\n    total_pencils = Eq(andrew + gill, 62)\n    difference_pencils = Eq(gill, andrew + 18)\n\n    solutions = solve((total_pencils, difference_pencils), (gill, andrew))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    total_fruit_juice = (20 * 0.35) + (30 * 0.60)\n    concentration = (total_fruit_juice / total_volume) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    people = 4\n    handshakes = comb(people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x = original number of badges\n    x = symbols('x')\n\n    # 5/7 of the badges sold on the first day, so 2/7 remain\n    # 1/3 of the remaining badges sold on the second day\n    # She had 2/3 of 2/7 left after the second day, which is 4/21 of the original number of badges\n    # She then made 354 more badges\n    # In the end, she had 3 times the original number, so 3*x\n    # So, (4/21)*x + 354 = 3*x\n\n    equation = Eq((4/21)*x + 354, 3*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n\n    boxes_needed = -(-total_cookies // cookies_per_box)  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Since we want the smallest number, we start with 7 as the first digit.\n    # The difference between 7 and any other digit should be 4 or less.\n    # To keep the number the smallest, we should choose the smallest possible digits\n    # for the second and third place that obey the rule.\n    \n    first_digit = 7  # The choice for one of the digits is given to be 7.\n    \n    # The smallest digit we can have is 0, but with 7 as the starting digit and \n    # the difference needing to be 4 or less, the smallest we can do is 3.\n    second_digit = 3\n    \n    # The smallest digit that is different from 3 and within 4 of both 7 and 3 is 0.\n    third_digit = 0\n    \n    # Now we want to minimize the three digit number, the digit farthest to the left should be\n    # as small as possible, given the rules. Since the first digit is 7 by choice, we make it the second digit.\n    # So the smallest digit, 0, is the first digit and the second smallest, 3, is the last.\n    smallest_number = second_digit * 100 + first_digit * 10 + third_digit\n    \n    return smallest_number\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    # Define a function to calculate the sum of squared digits\n    def sum_of_squares(num):\n        return sum(int(digit)**2 for digit in str(num))\n    \n    # Calculate the sum of squared digits for the 'Angel' password\n    angel_sum = sum_of_squares(141705021)\n    \n    # Calculate the sum of squared digits for Andy's attempt at the 'Devil' password\n    devil_attempt_sum = sum_of_squares(4005220912)\n    \n    # Check if Andy's sum matches the 'Angel' sum\n    if devil_attempt_sum == angel_sum:\n        return True  # Andy can unlock the treasure chest\n    else:\n        # If not, Andy cannot unlock it. We then provide the correct password\n        # We find a permutation of 'Angel' that matches the same sum\n        from itertools import permutations\n        \n        angel_digits = [0, 1, 4, 1, 7, 0, 5, 0, 2, 1]\n        # Generate all unique permutations of the angel_digits\n        for perm in set(permutations(angel_digits)):\n            if sum_of_squares(int(''.join(map(str, perm)))) == angel_sum:\n                return False, int(''.join(map(str, perm)))  # Return the correct password\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # Number of players\n    players = 4\n    # In each round, half of the players are eliminated\n    # So calculate the number of rounds: log2(number of players)\n    from math import log2\n    num_rounds = log2(players)\n    return int(num_rounds)\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):  # Counting from page 1 to page 100\n        count += str(i).count('2')  # Count the occurrences of the digit '2' in each page number\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_by_A = 266\n    not_by_B = 178\n    \n    only_A_or_B = not_by_A + not_by_B\n    both_A_and_B = only_A_or_B - total_exhibits\n  \n    return both_A_and_B\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # Since the magician wants at least one ball of each color, we have to consider the worst-case scenario.\n    # This would be picking all balls of one color, then all of another color, after which the next ball\n    # is guaranteed to be of the third color.\n    # This is the application of the Pigeonhole Principle, where if you have n bins (colors) and m items (balls),\n    # you will fill at least one bin with ceil(m/n) items. We are doing the opposite, trying to guarantee\n    # that we will have picked from all bins.\n\n    # The maximum number of balls we could pick without guaranteeing a ball of the third color\n    # is the sum of the two largest amounts of colored balls.\n    max_single_colors = 10 + 13  # red balls + green balls\n    \n    # The next ball picked guarantees the third color, so we add one\n    ans = max_single_colors + 1\n\n    return ans\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    skirt, blouse = symbols('skirt blouse')\n    \n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n    \n    solutions = solve((equation1, equation2), (skirt, blouse))\n    \n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Since 8A - 3B has to be a multiple of 3, then\n    # 8A modulo 3 should be equal to 3B modulo 3.\n    # Also, given that A & B are primes, we need to check for primes\n    # where 8A is congruent to 0 modulo 3.\n    # As all primes other than 2 are odd, they will have a remainder of 1 or 2 modulo 3,\n    # except for 3 itself. Thus, 8A modulo 3 for a prime other than 3 will be 2\n    # (as 8 is 2 modulo 3, and multiplying by a number with modulo 3 of 1 or 2\n    # will not give a modulo of 0), except for when A is 3, in which case 8A modulo 3 is 0.\n    \n    # Therefore, in order for 8A - 3B to be a multiple of 3, A must be 3.\n    \n    A = 3\n    return A\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    last_year_value = 110000\n    original_value = last_year_value / 1.1\n    \n    this_year_value = last_year_value * 0.9\n    profit_or_loss = this_year_value - original_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    roses = 3\n    jasmines = 4\n    daisy = 1\n\n    # Flowers of the same kind need to be put together, so there are factorial(group_number) ways to arrange the groups\n    group_number = 3  # Roses, Jasmines, and Daisy\n    group_arrangement = factorial(group_number)\n\n    # Each group of flowers can also be permuted among themselves\n    rose_permutations = factorial(roses)\n    jasmine_permutations = factorial(jasmines)\n    # Daisy permutations is 1, because there's only one daisy, so it's omitted in calculation\n\n    total_ways = group_arrangement * rose_permutations * jasmine_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    # Calculate the product 1 * 2 *...* 6\n    multiple_six = 1*2*3*4*5*6\n    \n    # Calculate the product 1 * 2 *...* 8\n    multiple_eight = 1*2*3*4*5*6*7*8\n    \n    # Count possible values of m that are multiples of multiple_six and factors of multiple_eight\n    count = 0\n    for m in range(multiple_six, multiple_eight + 1, multiple_six):\n        if multiple_eight % m == 0:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    sum_value = 60\n    count = 1\n    while sum_value > count:\n        sum_value -= count\n        count += 1\n    return count\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    # Initialize variables for the number of pies and friends\n    pies = 0\n    friends = 0\n\n    # Iterate until we find a number of pies that satisfies both conditions\n    while True:\n        # If pies are divided among friends giving each 5 pies, 3 are left\n        if (pies - 3) % 5 == 0:\n            friends = (pies - 3) // 5\n            # If each friend received one more pie, there would be a shortage of 2 pies\n            if (pies + 2) % 6 == 0 and (pies + 2) // 6 == friends:\n                return pies\n        pies += 1\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount = 20 / 100\n    new_price = original_price * (1 - discount)\n    \n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    ans = 12321 // 9\n    return ans\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_min = 20        # ml per min\n    mins_per_hour = 60            # min\n    ml_to_litres = 1 / 1000       # conversion factor from ml to litres\n\n    water_leaked_in_hour = leak_rate_per_min * mins_per_hour * ml_to_litres\n\n    return water_leaked_in_hour\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solve_alphametic():\n    for perm in permutations(range(10), 4):\n        s, e, e2, n = perm\n        if s == 0:  # the first digit can't be 0\n            continue\n        see = 100 * s + 10 * e + e\n        add = 100 * e + 10 * e2 + s\n        more = 100 * s + 10 * e2 + e2\n        if see % 10 == s and add % 100 // 10 == e and more // 100 == s:\n            return see\n\ndef solution():\n    ans = solve_alphametic()\n    return ans\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    age = 0\n    while True:\n        age += 1\n        if all(age % i == 1 for i in [2, 3, 4, 6]) and age % 7 == 0:\n            return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    # Equation 1: 2*watermelon + 3*honeydew = 48\n    equation1 = Eq(2*watermelon + 3*honeydew, 48)\n    # Equation 2: honeydew = 2*watermelon (each honeydew costs twice as much as each watermelon)\n    equation2 = Eq(honeydew, 2*watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are three different colors, so to guarantee at least one pair, take one from each color\n    # After that, taking one more is bound to result in a pair\n    socks_needed = 3 + 1\n    return socks_needed\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    # Dominic has twice as many sweets as Hannah\n    equation1 = Eq(dominic, 2 * hannah)\n    # Abdul has 3 times as many sweets as Dominic\n    equation2 = Eq(abdul, 3 * dominic)\n    # The sum of their sweets is 63\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    original_pieces = 10\n    final_pieces = 16\n    diff_pieces = final_pieces - original_pieces\n\n    pieces_cut_into_three = diff_pieces // 2\n\n    return pieces_cut_into_three\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Worst case scenario, you take one of each color;\n    # then one more will guarantee two of the same color.\n    count = 1 + 1 + 1  # two different colors + one guaranteed the same\n    return count\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000\n    ans = number - 20\n    return ans\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    return 6.3 + 8.7 + 9.6 - 2.6\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4\n    water_left = 7\n\n    original_volume = (pails_filled * water_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = (35 / 5 + 1) / 6\n    return c\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Given x^20 * y^15 * z^5 = 243\n    # We know that 243 is 3^5. Therefore, we can express the equation as:\n    # (x^4 * y^3 * z)^5 = 3^5\n    # Taking the fifth root of both sides, we get:\n    # x^4 * y^3 * z = 3\n    # We need to find the value of x^8 * y^6 * z^2\n    # Which is the square of what we found above (x^4 * y^3 * z)^2\n    # Therefore:\n    \n    value = 3 ** 2  # Squaring the value we found\n    \n    return value\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for books and pencil boxes\n    books, pencil_box = symbols('books pencil_box')\n\n    # Two equations based on the given problem\n    equation1 = Eq(2 * books + 3 * pencil_box, 42)\n    equation2 = Eq(2 * books + 6 * pencil_box, 60)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (books, pencil_box))\n\n    # Returning the cost of one pencil box\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    product_of_digits = 1\n    for i in range(1, 2011):\n        while i % 10 == 0: # We remove all factors of 10 to avoid trailing zeros\n            i //= 10\n        product_of_digits = (product_of_digits * i) % 100000 # Keep the last five digits\n        while product_of_digits % 10 == 0: # We remove factors of 10 again\n            product_of_digits //= 10\n    return product_of_digits % 10\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_of_six = 6 * 150\n    avg_height_of_four = 150 - 2\n    total_height_of_four = 4 * avg_height_of_four\n    total_height_of_two = total_height_of_six - total_height_of_four\n    avg_height_of_two = total_height_of_two / 2\n\n    return avg_height_of_two\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "def solution():\n    from math import comb\n    total_participants = 10\n    handshakes = comb(total_participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    per_day_paving = 50\n\n    days_needed = total_length / per_day_paving\n    \n    return int(days_needed)\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cows = 8\n    days = 4\n    daily_fodder_per_cow = 10\n\n    total_fodder = cows * days * daily_fodder_per_cow\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n\n    dog_to_chicken_weight_ratio = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n\n    return dog_to_chicken_weight_ratio\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Initialize the total_count to keep track of the number of elements\n    total_count = 0\n    # Initialize a list to store the count of each number\n    sequence_counts = []\n    \n    for i in range(1, 9):\n        total_count += i\n        sequence_counts.append(total_count)\n\n    # Calculate the position of the median\n    # If the sequence length is odd, the median is the middle number\n    # If the sequence length is even, the median is the average of the two middle numbers\n    if total_count % 2 == 0:  # Even number of elements\n        median_pos1 = total_count // 2\n        median_pos2 = median_pos1 + 1\n        # Find the median values\n        median_val1 = next(num for num, count in enumerate(sequence_counts, 1) if count >= median_pos1)\n        median_val2 = next(num for num, count in enumerate(sequence_counts, 1) if count >= median_pos2)\n        # Return the average of the two medians\n        ans = (median_val1 + median_val2) / 2\n    else:  # Odd number of elements\n        median_pos = (total_count + 1) // 2\n        ans = next(num for num, count in enumerate(sequence_counts, 1) if count >= median_pos)\n        \n    return ans\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    from sympy import factorint\n\n    # Finding x\n    # Given: 42 * x = 42^2\n    # which implies x = 42\n    x = 42\n\n    # Finding y\n    # 42 * y = prime_factorization with all exponents equal to 1\n    # We know 42 = 2 * 3 * 7\n    # 42 * y should have all prime factors with exponents 1\n    # Thus, 42 * y should be a product of distinct primes, 2 * 3 * 7 are already in 42\n    # y should be the least positive integer, which means y = 1\n    y = 1\n\n    # The sum of x and y\n    return x + y\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let's use x to represent the total number of marbles Larry had at first\n    x = symbols('x')\n\n    # According to the problem, (5/12 of x) + 30 + 26 + 35 should equal to the total number of marbles (x)\n    equation = (5/12) * x + 30 + 26 + 35 - x\n    \n    # Solve for x\n    initial_marbles = solve(equation, x)\n\n    # Return the solution\n    return initial_marbles[0]\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # total weight of the solution in grams\n    concentration = 0.22  # concentration of sugar in the solution\n\n    sugar_weight = total_weight * concentration  # weight of sugar in the solution\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for number in range(1, 100):\n        total += sum(int(digit) for digit in str(number))\n    return total\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jill_sweets be the number of sweets Jill originally has\n    # Let jess_sweets be the number of sweets Jess originally has\n    jill_sweets, jess_sweets = symbols('jill_sweets jess_sweets')\n\n    # From the first condition, Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill_sweets, (6/5) * jess_sweets)\n\n    # After Jill gives eight sweets to Jess\n    # Jill has (jill_sweets - 8) sweets, Jess has (jess_sweets + 8) sweets\n\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill_sweets - 8, (4/7) * (jess_sweets + 8))\n\n    # Solve the simultaneous equations to find the number of sweets each has\n    solutions = solve((equation1, equation2), (jill_sweets, jess_sweets))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jill_sweets] + solutions[jess_sweets]\n\n    return total_sweets\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    part_given = total_money * (1/4)\n    return part_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') / 3:\n            return num\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    # Let the cost of a pie be x dollars\n    # Then the cost of a cake is x + 13 dollars\n\n    # Total money collected can be written in terms of x\n    # 15x (from pies) + 7(x + 13) (from cakes)\n    # 15x + 7x + 7 * 13 = 1848\n    # 22x + 91 = 1848\n    # 22x = 1848 - 91\n    x = (1848 - 91) / 22\n\n    # The ratio of the number of pies to cakes sold is 4:1,\n    # which means for every 4 pies, 1 cake is sold\n    # Since the price for 4 pies is 4x, and for 1 cake is x + 13,\n    # The ratio of the money collected from the pies to cakes will hold,\n    # i.e., for every $15 collected from pies, we collect $7 from cakes.\n\n    # Money collected for cakes\n    money_cakes = 7 / 22 * 1848\n\n    # The number of cakes sold is the money collected for cakes divided by the price per cake\n    num_cakes = money_cakes / (x + 13)\n    \n    return int(num_cakes)\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    current_date = datetime.now()\n    years_ago = timedelta(days=(38 * 365.25 + 6 * 30.4375))  # Average days per year and month\n    birth_date = current_date - years_ago\n\n    return birth_date.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of money Hanson had at first.\n    x = symbols('x')\n    \n    # After spending 1/4 of his money and an additional $3, he is left with 3/4 of his money minus $3.\n    money_after_CDs = x - (x / 4 + 3)\n    \n    # He then spends 3/5 of the remaining money and an additional $6, and is left with $24.\n    equation = Eq(money_after_CDs - (3 / 5 * money_after_CDs + 6), 24)\n    \n    # Solving the equation for x gives us the amount of money Hanson had at first.\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']  # Digits that can make the number even\n    count = 0\n    \n    for perm in permutations(digits, 4):  # Generate all 4-digit combinations\n        if perm[-1] in even_digits:  # Check if the last digit is even\n            if perm[0] != '0':  # Check if the first digit is not zero\n                count += 1\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads_count = []\n    for beads in range(40, 81):\n        if beads % 4 == 0 and beads % 7 == 0:\n            beads_count.append(beads)\n    return beads_count[0]\n    \nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Since we are only interested in the units digit, we can look at the patterns\n    # in the units digit of the powers of 9.\n    # The units digits repeat in a cycle: 9, 1, 9, 1, ...\n    # For odd powers of 9 (like 9^2015), the units digit is 9.\n    # For even powers of 9 (like 9^2016), the units digit is 1.\n    \n    # Thus, the sum of 9^2015 (units digit 9) and 9^2016 (units digit 1) will have a\n    # units digit of 0 (since 9 + 1 = 10, and we only consider the units digit).\n    \n    return 0\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # Total number of men and women\n    men = 5\n    women = 3\n\n    # Calculate arrangements of men: 5!\n    men_arrangements = factorial(men)\n\n    # Places to insert women: there are 6 possible positions (including the ends)\n    # _ M _ M _ M _ M _ M _\n    positions_for_women = men + 1\n\n    # Choose 3 positions from the 6 to place women: C(6, 3)\n    women_positions = factorial(positions_for_women) // (factorial(women) * factorial(positions_for_women - women))\n\n    # Calculate arrangements for women: 3!\n    women_arrangements = factorial(women)\n\n    # Total arrangements is the product of the arrangements of men,\n    # positions to choose for women, and arrangements of women\n    total_arrangements = men_arrangements * women_positions * women_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n\n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Let d be the distance between the library and the school in meters\n    # Qiqi's speed is 60 m/min and Weiling's speed is 72 m/min\n    qiqi_speed = 60\n    weiling_speed = 72\n    \n    # Weiling starts 2 minutes after Qiqi, and arrives 4 minutes earlier than Qiqi\n    time_diff = 2 + 4\n    \n    # Time taken by Qiqi to travel the distance d is d / qiqi_speed\n    # Time taken by Weiling to travel the distance d is (d / weiling_speed) + 2 (since she starts 2 minutes later)\n    # Weiling's time to travel is also Qiqi's time minus the total time difference (4 + 2 minutes)\n    # So, we have the equation: (d / weiling_speed) + 2 = (d / qiqi_speed) - time_diff\n    \n    # Solving the above equation for d:\n    d = (qiqi_speed * weiling_speed * time_diff) / (weiling_speed - qiqi_speed)\n    return d\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = symbols('income')\n\n    tax_for_first_30000 = 0.01 * T * 30000\n    tax_for_rest = 0.01 * (T + 3) * (income - 30000)\n    total_tax = tax_for_first_30000 + tax_for_rest\n    equation = Eq(total_tax, (0.01 * (T + 1)) * income)\n\n    income_solution = solve(equation, income)\n\n    # Filter for income greater than 30000, as it's given that any amount above 30000 is taxed differently\n    income_value = [i for i in income_solution if i > 30000]\n\n    return income_value[0]\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45 / 100\n    amount = 540\n    ans = percentage * amount\n    return ans\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    marc_time_str = \"11:50 AM\"\n    marc_time = datetime.strptime(marc_time_str, '%I:%M %p')\n\n    # Correct Marc's slow watch by adding 15 minutes\n    marc_corrected_time = marc_time + timedelta(minutes=15)\n\n    # Time after half an hour has passed\n    half_hour_later = marc_corrected_time + timedelta(minutes=30)\n\n    # Instead of correcting George's fast watch, we simulate its time by subtracting 7 minutes\n    george_time = half_hour_later - timedelta(minutes=7)\n\n    return george_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[h]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    distance_covered_in_3_jumps = (3 * 3) - 2\n    remaining_distance_after_full_cycles = 31 % distance_covered_in_3_jumps\n    full_cycles = 31 // distance_covered_in_3_jumps\n    jumps_needed = full_cycles * 3\n    if remaining_distance_after_full_cycles > 0:\n        jumps_needed += remaining_distance_after_full_cycles if remaining_distance_after_full_cycles <= 3 else remaining_distance_after_full_cycles + 1\n    return jumps_needed\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    total_marks = 90\n    correct_mark = 5\n    wrong_mark = -1\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_mark + wrong * wrong_mark == total_marks:\n            return correct\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    # A's work rate per hour\n    rate_a = 1 / 10\n    # B's work rate per hour\n    rate_b = 1 / 15\n    # Combined work rate\n    combined_rate = rate_a + rate_b\n    # Time taken to paint the house together\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Drawing all marbles of one color plus three more ensures at least one of each of the other three colors.\n    max_one_color = max(12, 9, 8, 3)  # Find the color with the most marbles (red in this case)\n    marbles_to_draw = max_one_color + 3  # Add 3 to the max to ensure getting 4 different colors\n    return marbles_to_draw\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for number in range(1, 101):\n        if number % 3 == 0 and number % 7 == 0 and (number - 2) % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Gigi's age when Jenny was 22 years old on 15th May 1995\n    gigi_age_1995 = 45 - (2002 - 1995)\n\n    # Jenny's age when Gigi was 22 years old\n    jenny_age_when_gigi_22 = 22 - (gigi_age_1995 - 22)\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    term = first_term\n    count = 0\n    \n    while term > 0:\n        term += difference\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    ans = 1.29 * 1000\n    return ans\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    # the sum of the digits of a number divisible by 9 has to be divisible by 9\n    digits_sum = 2 + 0 + 1 + 9 + 0 + 4 + 0 + 6  # sum of the given digits\n    for A in range(10):  # A must be a digit, so it ranges from 0 to 9\n        if (digits_sum + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 3 == 0 and i % 8 == 0 and str(i).endswith('2'):\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    return 2.5 * 7 * 4\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import timedelta, date\n\n    start_date = date(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    \n    end_date = start_date + duration\n\n    return end_date\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377/6 * 5/3)\n\n    result = numerator / denominator\n    rounded_result = round(result, 3)\n\n    return rounded_result\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_ship = 25\n    speed_current = 3\n    distance = 140\n\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_rate = 0.15\n    sale_price = original_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelet_price = 0.99\n    card_price = 1.98\n    total_cost = (5 * bracelet_price) + (2 * card_price)\n    return total_cost\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n\n    # The number of ways to divide the apples into two groups with different numbers is\n    # simply to give from 1 to (total_apples - 1) apples to one group, and the rest to the other.\n    # This is because if you give k apples to one group, the other group will have\n    # total_apples - k apples, and to keep the groups different, k cannot equal total_apples - k.\n    # So, the number of ways is just the number of possible k values.\n    \n    # Since we want to ensure one group doesn't have all the apples and every group has at least one,\n    # the maximum k can be is total_apples - 1 and minimum k is 1.\n    count = total_apples - 1\n\n    return count\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost = 3.25\n    total_cupcake_cost = 3 * cupcake_cost\n    total_can_cost = total_cost - total_cupcake_cost\n    cost_per_can = total_can_cost / 2\n    \n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        score = correct * 5 - wrong * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds for easy calculations\n    # 9 minutes is the period when 3 traffic lights turn green together\n    all_green_period = 9 * 60  # in seconds\n\n    # first traffic light changes every 30 seconds\n    first_light_period = 30  # in seconds\n\n    # second traffic light changes every 0.75 minutes, convert to seconds\n    second_light_period = 0.75 * 60  # in seconds\n\n    # calculating the least common multiple of the two known periods\n    first_two_lcm = lcm(first_light_period, int(second_light_period))\n\n    # search for the smallest period for the third light that is more than 30s\n    third_light_period = first_two_lcm\n    while third_light_period < all_green_period:\n        if all_green_period % third_light_period == 0:\n            return third_light_period\n        third_light_period += 1\n\n    return third_light_period\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i + 1] - differences[i] for i in range(len(differences) - 1)]\n    next_second_difference = second_differences[-1]\n    next_first_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_first_difference\n\n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    known_numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean_value = 5\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "from itertools import permutations\n\ndef solution():\n    players = ['B', 'C', 'D']\n    count = 0\n    for seq in permutations(players):\n        if seq[0] != 'A' and seq[-1] != 'A':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Let's assume x buses for group A, and y buses for group B\n    # So we know that 36*x + 11 (members from group A) must fill exactly 36*(y+1) seats from group B\n    # This gives us the equation: 36*x + 11 = 36*(y+1)\n    # We don't know x and y, but we know that the total number of possible photographs\n    # is the same as the number of members from both groups (since each A takes a picture with each B).\n\n    # Let's use brute force to find the possible x,y since the numbers are quite small.\n    for x in range(1, 100):  # Assuming we won't need more than 99 buses for either group\n        for y in range(1, 100):\n            if 36*x + 11 == 36*(y+1):\n                group_a_members = 36*x\n                group_b_members = 36*y + 11\n                total_pictures = group_a_members * group_b_members\n\n                # Now, find how many full rolls of film are used\n                full_rolls, remaining_pictures = divmod(total_pictures, 36)\n\n                # Since we are asked for how many MORE pictures the last roll can take,\n                # we need to find the pictures remaining for the last (potentially partially used) roll.\n                # If there are no remaining pictures, it means the last roll is full and can take 0 more pictures.\n\n                return 36 - remaining_pictures if remaining_pictures else 0\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, ming = symbols('daniel ming')\n\n    # Daniel is four times as old as Ming\n    equation1 = Eq(daniel, 4 * ming)\n    # Six years later, the sum of their ages is 62\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    # Solve the equations to find the ages of Daniel and Ming\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    # Return Daniel's current age\n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_grams = 25\n    number_of_girls = 250\n    total_weight_grams = weight_per_paper_grams * number_of_girls\n    grams_per_kilogram = 1000\n    total_weight_kilograms = total_weight_grams / grams_per_kilogram\n    return total_weight_kilograms\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "def solution():\n    cards = [1, 2, 8, 9]\n    largest_product = 0\n    \n    for i in range(4):\n        for j in range(4):\n            if j != i:\n                for k in range(4):\n                    if k != i and k != j:\n                        l = 6 - i - j - k  # Since 0+1+2+3=6, l will be the index not used so far\n                        number1 = cards[i] * 10 + cards[j]\n                        number2 = cards[k] * 10 + cards[l]\n                        product = number1 * number2\n                        if product > largest_product:\n                            largest_product = product\n                            \n    return largest_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Given values\n    length_of_line = 3  # meters\n    time_first_bridge = 8  # seconds\n    time_second_bridge = 10  # seconds\n    length_first_bridge = 9  # meters\n\n    # Calculate the speed using the first bridge\n    # The length that actually moves through is the bridge length, plus the line length\n    total_distance_first_bridge = length_first_bridge + length_of_line\n    # Speed is distance divided by time\n    speed = total_distance_first_bridge / time_first_bridge\n\n    # Calculate the length of the second bridge\n    # The time to cross the second bridge is known, so use speed to find distance\n    total_distance_second_bridge = speed * time_second_bridge\n    # Subtract the length of the line to get the bridge length\n    length_second_bridge = total_distance_second_bridge - length_of_line\n    \n    return length_second_bridge\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum([(2*i + 2)**2 - (2*i)**2 for i in range(1, 501)])\n    return ans\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime(\"11:55 AM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"1:40 PM\", \"%I:%M %p\")\n    \n    duration = end_time - start_time\n    duration_in_minutes = duration.total_seconds() / 60\n    \n    return int(duration_in_minutes)\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left_side = 11\n    right_side = 7\n    crystal = 1  # Crystal herself\n\n    # People in P1 class = people on Crystal's left side + Crystal + people on Crystal's right side\n    num_people = left_side + crystal + right_side\n\n    return num_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 3 == 0 and i % 11 == 0:\n            if (i - 1) % 2 == 0 and (i - 1) % 7 == 0:\n                return i\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    product = 2688\n    for i in range(1, int(product ** (1/3)) + 1):\n        if product % i == 0:\n            n1 = i\n            if (n1 % 2 == 0) and (product % (n1 * (n1 + 2)) == 0):\n                n2 = n1 + 2\n                n3 = n1 + 4\n                if n1 * n2 * n3 == product:\n                    return n3\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    # Maddy has to split 10 cupcakes into two groups with different numbers\n    # Group 1 can have from 1 to 9 cupcakes (since Group 2 needs at least 1)\n    # For every specific number of cupcakes in Group 1, Group 2 will have the rest\n    # The number of ways she can divide is therefore 9 different possibilities\n\n    count = 9  # Possible ways: (1,9), (2,8),..., (9,1)\n    return count\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(224)\n    num_factors = 1\n    for power in factors.values():\n        num_factors *= (power + 1)\n    \n    return num_factors\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('8:30', '%H:%M')\n    lesson_duration = timedelta(minutes=45)\n    moving_period = timedelta(minutes=5)\n\n    break_start_time = start_time + 3 * lesson_duration + 2 * moving_period\n    return break_start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):      # hundreds digit can't be zero\n        for b in range(10):     # tens digit\n            for c in range(10): # ones digit\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return a * 100 + b * 10 + c\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    num1 = 28\n    num2 = 84\n    num3 = 126\n\n    ans = gcd(gcd(num1, num2), num3)\n\n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    full_boxes = total_eggs // eggs_per_box\n    \n    return full_boxes\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    for ten_notes in range(1, 57):\n        five_notes = 57 - ten_notes\n        spent_ten = 0.6 * ten_notes\n        spent_five = 0.25 * five_notes\n        remaining_ten = ten_notes - spent_ten\n        remaining_five = five_notes - spent_five\n        if remaining_ten == 2 * remaining_five:\n            cost_of_bag = spent_ten * 10 + spent_five * 5\n            return cost_of_bag\n            \nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n    \n    equation1 = Eq(troy, 5 * adam)  # Troy had 5 times as many coins as Adam initially\n    equation2 = Eq(adam + 24, troy / 3)  # After Adam took 24 more coins, he had 1/3 as many coins as Troy\n    \n    solutions = solve((equation1, equation2), (troy, adam))\n\n    adam_coins = solutions[adam]\n    troy_coins = solutions[troy]\n\n    total_coins_initially = adam_coins + troy_coins\n\n    return total_coins_initially\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    \n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n    \n    solutions = solve((equation1, equation2), (wands, cards))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        digits = [int(digit) for digit in str(number)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # even number, so ones digit has to be even\n                if hundreds + tens + ones == 8 and len({hundreds, tens, ones}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Worst case to get 5 green beads:\n    # Drawing all blue and white beads first\n    blue_beads = 5\n    white_beads = 6\n    \n    # Then draw 4 green (not enough for sure 5)\n    green_beads_short_of_5 = 4\n    \n    # Drawing one more will guarantee 5 green beads\n    minimum_draws = blue_beads + white_beads + green_beads_short_of_5 + 1\n\n    return minimum_draws\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the original amount of money Hanson had\n    initial_money = symbols('initial_money')\n    \n    # First spending: 1/4 of his money and an additional $3\n    spent_on_CDs = initial_money / 4 + 3\n    \n    # Money left after buying CDs\n    remaining_after_CDs = initial_money - spent_on_CDs\n    \n    # Second spending: 3/5 of the remaining money and an additional $6\n    spent_on_batteries = 3 / 5 * remaining_after_CDs + 6\n    \n    # Money left after buying batteries\n    remaining_after_batteries = remaining_after_CDs - spent_on_batteries\n    \n    # He was left with $24\n    equation = Eq(remaining_after_batteries, 24)\n    \n    # Solve the equation to find how much money Hanson had at first\n    solution = solve(equation, initial_money)\n    \n    # Assuming there's only one solution, return that solution\n    return solution[0]\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of days B takes to complete the job alone\n    x = symbols('x')\n    \n    # A can finish the job in x/2 days because A is twice as good as B\n    # A is able to finish the job in 12 days less than B\n    equation1 = Eq(x/2, x - 12)\n\n    # Solve for x\n    days_B = solve(equation1, x)[0]\n\n    # Work rates for A and B\n    work_rate_A = 1 / (days_B / 2)  # A's work rate\n    work_rate_B = 1 / days_B        # B's work rate\n\n    # Combined work rate\n    combined_work_rate = work_rate_A + work_rate_B\n\n    # The time it takes for them to finish the job together is the reciprocal of the combined work rate\n    time_together = 1 / combined_work_rate\n\n    return time_together\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 0 (mod 11)\n    congruences = ((1, 5), (1, 6), (0, 11))\n\n    # Using the Chinese Remainder Theorem to solve the congruences\n    ans, _ = solve_congruence(congruences)\n\n    return ans\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # In a single round-robin tournament with n participants, n*(n-1)/2 games are played\n    # Since there are 4 groups with 4 people each, we need to calculate the games for one group and multiply it by 4\n    group_games = (4 * (4 - 1)) // 2\n    total_group_games = group_games * 4\n\n    # Calculate the number of games in the knockout rounds\n    # There will be rounds for top 8, top 4, top 2, and then the 3rd place playoff\n    knockout_games = 8 // 2 + 4 // 2 + 2 // 2 + 2 // 2\n\n    # Total games is the sum of group stage games and knockout stage games\n    total_games = total_group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces, they will have the same number of candies\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "def solution():\n    from math import factorial\n\n    total_plants = 9\n    plants_to_arrange = 4\n    \n    # Permutation formula is n! / (n - r)!\n    ans = factorial(total_plants) / factorial(total_plants - plants_to_arrange)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    likes_banana = 18\n    likes_apple = 12\n    \n    both = likes_banana + likes_apple - total_people\n\n    return both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given = 76\n    stickers_bought = 65\n\n    stickers_start = stickers_end - stickers_bought + stickers_given\n\n    return stickers_start\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n\n    equation1 = Eq(pineapple - apple, 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 0):\n            break\n    return number\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    return (1/2) * (16 / (1/4))\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    # Using permutation to generate all possible numbers\n    for perm in permutations('0123456789'):\n        # If the leftmost digit is not 8, skip this permutation\n        if perm[0] != '8':\n            continue\n        \n        # Check the divisibility from 2 to 10\n        if all(int(''.join(perm[:i])) % i == 0 for i in range(2, 11)):\n            return ''.join(perm)\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    matthew_tomatoes = belinda_tomatoes - 7\n\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    base_efficiency = 10\n    increased_efficiency = base_efficiency * (1 + 50 / 100)\n    return increased_efficiency\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # Calculate the difference between the two numbers\n    difference = 2012 - 1274\n    \n    # Initialize the maximum value of D-R\n    max_value = 0\n    \n    # Loop through the possible divisors, which are the factors of the difference\n    for D in range(1, difference + 1):\n        if difference % D == 0 and D % 2 != 0:  # D must be odd\n            R = 2012 % D\n            if D - R > max_value:\n                max_value = D - R\n    \n    return max_value\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if 4 * rabbits + 2 * ducks == 20:\n            return rabbits\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Initialize an array to represent if the position is winning (True) or losing (False)\n    dp = [False] * 53\n    # Initialize the choices that a player can make\n    choices = [1, 3, 4, 6]\n\n    # Build the dynamic programming table from 1 to 52\n    for i in range(1, 53):\n        # For each possible choice, check if the current player can win\n        for choice in choices:\n            if i - choice >= 0 and not dp[i - choice]:\n                dp[i] = True\n                break\n    \n    # Check whether the first position is a winning one\n    if dp[52]:\n        # If the first position is winning for the current player,\n        # then Betty should go first and follow the winning strategy\n        ans = (\"First\", \"Choose the number that leaves Abby in a losing position.\")\n    else:\n        # If the first position is losing for the player to move,\n        # then Betty should go second and wait for Abby to make a mistake\n        ans = (\"Second\", \"Wait for Abby to make a mistake.\")\n\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import prod\n\n    # Since 15 and 21 are factors of the number and they have a common factor of 3,\n    # the number must be a multiple of lcm(15, 21) = 3 * 5 * 7 = 105\n    # Therefore, the number can be expressed as 105 * k, where k is a factor of the number.\n    # To have exactly eight factors, k must be a square of a prime (p^2),\n    # because the number of factors of a number n = p1^a * p2^b * ... is (a+1)*(b+1)*...\n    # and we need (2+1)*(1+1) = 8 factors. Thus, k has to be a prime squared.\n\n    # Let's find possible values of k by analyzing prime factors\n    primes = [2, 5, 7, 11, 13, 17, 19, 23, 29, 31]  # A list of primes to check\n    factors = []\n\n    for p in primes:\n        if 105 % p != 0:  # Avoid primes that are already in 105\n            k = p**2\n            if 105 * k % 15 == 0 and 105 * k % 21 == 0:  # Check if 15 and 21 are factors\n                number = 105 * k\n                break\n\n    # Now that we have the number, let's find all its factors\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.append(i)\n            if i != number // i:  # Avoid adding a square root twice\n                factors.append(number // i)\n\n    # The sum of all the factors\n    return sum(factors)\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We need to find a number that satisfies the following congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    initial_amount = 630\n    given_to_grace = (5/7) * initial_amount\n    remainder = initial_amount - given_to_grace\n    given_to_evelyn = (1/9) * remainder\n    final_amount = remainder - given_to_evelyn\n    return final_amount\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Calculate the last digit of each term individually\n    last_digit_4_power = (4 ** (2009 % 4)) % 10  # 4 repeats its last digit every 4 powers\n    last_digit_6_power = (6 ** (2010 % 4)) % 10  # 6 has the same last digit for any power\n\n    # Add the last digit of each term to find the last digit of the expression\n    last_digit_sum = (last_digit_4_power + last_digit_6_power) % 10\n\n    return last_digit_sum\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    count = 0\n    for two_gram_weights in range(32):  # Because five 2-gram weights would already be 10 grams, and we need 63.\n        for five_gram_weights in range(13):  # Because thirteen 5-gram weights would already be 65 grams, and we need 63.\n            total_weight = two_gram_weights * 2 + five_gram_weights * 5\n            if total_weight == 63:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_for_four = 4 * average_height_of_four\n    total_height_for_other_two = total_height_for_six - total_height_for_four\n    average_height_for_other_two = total_height_for_other_two / 2\n    return average_height_for_other_two\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    correct_points = 4\n    incorrect_points = -2\n    total_score = 66\n    not_attempted = 1\n\n    # Let's calculate the total score if all questions were answered correctly\n    max_score = (total_questions - not_attempted) * correct_points\n\n    # Each incorrect answer reduces the score by correct_points - incorrect_points (which is 4 - (-2) = 6 points)\n    score_difference = max_score - total_score\n    incorrect_answers = score_difference // (correct_points - incorrect_points)\n\n    # The number of correct answers is the total answered questions minus incorrect answers\n    correct_answers = (total_questions - not_attempted) - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let a be the first term and d the common difference of the arithmetic sequence\n    # The sum of the first n terms of an arithmetic sequence can be computed using the formula\n    # S_n = n/2 * (2a + (n-1)d)\n    # We have two equations from the given information\n    # S_8 = 8/2 * (2a + (8-1)d) = 32\n    # S_22 = 22/2 * (2a + (22-1)d) = 44\n    # From the first equation, we get a + 7d/2 = 4 => a + 3.5d = 4\n    # From the second equation, we get a + 21d/2 = 2 => a + 10.5d = 2\n    # We can solve these two equations to find the value of a and d\n    \n    # Let's now express S_15 using the formula and the values of a and d we've found\n    # S_15 = 15/2 * (2a + (15-1)d)\n    \n    # To get S_15, we'll just need to replace the values of a and d from the earlier equations\n    \n    # Solving for a and d\n    # Let's arrange the equations:\n    # a + 3.5d = 4\n    # a + 10.5d = 2\n    # Let's subtract the first equation from the second, to eliminate a and solve for d\n    # (a + 10.5d) - (a + 3.5d) = 2 - 4\n    # a + 10.5d - a - 3.5d = -2\n    # 7d = -2\n    # d = -2 / 7 -> The common difference\n    d = -2 / 7\n    \n    # Now let's put the value of d in the first equation to solve for a\n    # a + 3.5*(-2/7) = 4\n    # a - 1 = 4\n    # a = 5 -> The first term\n    a = 5\n    \n    # Now we replace the values of a and d in the S_15 formula\n    S_15 = (15/2) * (2*a + (15-1)*d)\n    return S_15\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    sum_to_20 = sum(range(1, 21))\n    sum_to_19 = sum(range(1, 20))\n    ans = sum_to_20 + sum_to_19\n    return ans\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n    # a and c fill the pool with a contributing 18 tons\n    equation1 = Eq(a + c, 18 + c)\n    # b and c fill the pool with b contributing 27 tons\n    equation2 = Eq(b + c, 27 + c)\n    # flow rate of b is twice that of a\n    equation3 = Eq(b, 2 * a)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    # Total capacity of the pool: a + b + c\n    total_capacity = solutions[a] + solutions[b] + solutions[c]\n    return total_capacity\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n\n    # The total number of colors we can assign to each letter.\n    total_colors = 5\n\n    # There are 4 distinct positions to fill with different colors.\n    positions = 4\n\n    # Calculate the permutations of 5 colors taken 4 at a time.\n    perm = factorial(total_colors) // factorial(total_colors - positions)\n\n    return perm\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age == age // 2:\n            return age\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_amount = 9.32\n    increase_fraction = 1/10\n    increased_amount = original_amount + (original_amount * increase_fraction)\n    return increased_amount\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    # Let n be the total number of questions\n    # To find n, we set up an equation based on the given information\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n\n    # On the 1st day, Andrew completed 7 more than half of all the questions: (1/2) * n + 7\n    first_day = (1/2) * n + 7\n\n    # Remaining questions after the 1st day: n - first_day\n    remaining_after_first_day = n - first_day\n\n    # On the 2nd day, he completed 5 fewer than half of the remaining questions: (1/2) * remaining_after_first_day - 5\n    second_day = (1/2) * remaining_after_first_day - 5\n\n    # Remaining questions after the 2nd day: remaining_after_first_day - second_day\n    remaining_after_second_day = remaining_after_first_day - second_day\n\n    # On the 3rd day, he finished the remaining 23 questions: remaining_after_second_day = 23\n    third_day = remaining_after_second_day - 23\n\n    # We can now form the equation and solve for n:\n    equation = Eq(third_day, 0)\n    total_questions = solve(equation, n)\n\n    return total_questions[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    frac_value = 4 / 25\n    decimal_value = 0.17\n    return \"4/25\" if frac_value > decimal_value else \"0.17\"\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Assume the number of meatballs each student gets is x\n    # Then, there are x + 20 meatballs before the last student comes, \n    # and x + 10 meatballs after the last student comes.\n    # This means that the initial total number of meatballs (total_meatballs) can be expressed as:\n    # total_meatballs = m * x + 20, where m is the number of initial students\n    # After the last student gets x meatballs, the total becomes:\n    # total_meatballs - x = m * x + 10\n    # Since total_meatballs is the same in both cases, we can set the equations equal to each other:\n    # m * x + 20 = m * x + x + 10\n    # Solving for x, we get:\n    # x = 20 - 10 = 10\n    \n    # The number of meatballs each student gets is 10.\n    return 10\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    # Initial amount of water in the jug in milliliters\n    initial_amount = 1000  # Since 1 litre = 1000 milliliters\n\n    # Amount poured into each cup in milliliters\n    poured_amount_per_cup = 200\n    \n    # Total amount poured into 3 cups\n    total_poured = 3 * poured_amount_per_cup\n\n    # Remaining amount of water in the jug\n    remaining_amount = initial_amount - total_poured\n\n    return remaining_amount\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    # Known terms\n    term_10 = 23\n    term_15 = 38\n\n    # Calculate the common difference\n    common_difference = (term_15 - term_10) / (15 - 10)\n\n    # Now we have the common difference, get the 12th term\n    term_12 = term_10 + common_difference * (12 - 10)\n    \n    return term_12\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    ans = sum(1 for i in range(1, 251) if int(i**0.5)**2 == i)\n    return ans\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the original number of roses, and d be the original number of daisies.\n    r, d, n = symbols('r d n')\n    \n    # We know there are 300 roses and daisies in total.\n    total_flowers_original = Eq(r + d, 300)\n    \n    # In n months, the number of roses will be 280 and daisies will be 180.\n    # Since the planter plants the same number of roses and daisies every month,\n    # let's say the planter plants x roses and x daisies each month.\n    # Therefore, in n months, the planter will have planted n*x roses and daisies respectively.\n    # Which means, r + n*x = 280 and d + n*x = 180\n    roses_future = Eq(r + n, 280)\n    daisies_future = Eq(d + n, 180)\n    \n    # Solve the system of equations\n    solutions = solve((total_flowers_original, roses_future, daisies_future), (r, d, n))\n    \n    return solutions[r]\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 10 + 20 + 30\n    total_correct = 10 * 0.20 + 20 * 0.80 + 30 * 0.90\n    overall_percentage = (total_correct / total_problems) * 100\n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Calculate the area of one 6 dm side length square brick in cm^2\n    area_one_brick_6dm = (6 * 10) ** 2\n\n    # Calculate the total area to be covered in cm^2\n    total_area = area_one_brick_6dm * 80\n\n    # Calculate the number of bricks needed if each brick is 64 cm^2\n    num_bricks_64cm2 = total_area / 64\n\n    return int(num_bricks_64cm2)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bottle, bag = symbols('bottle bag')\n    \n    # 2 bottles + 3 bags = £2.55 (convert pence to pounds for consistency)\n    equation1 = Eq(2 * bottle + 3 * bag, 2.55)\n    # 1 bottle = 1 bag + 15p (convert pence to pounds for consistency)\n    equation2 = Eq(bottle, bag + 0.15)\n    \n    solutions = solve((equation1, equation2), (bottle, bag))\n    \n    return solutions[bag]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    all_possible_numbers = permutations('134578', 6)\n    \n    for number_tuple in sorted(all_possible_numbers, reverse=True):\n        number_str = ''.join(number_tuple)\n        number = int(number_str)\n        if number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    # Let's denote the number of girls as g and the number of boys as b.\n    # We have two equations:\n    # 1) g + b = total_pupils\n    # 2) g = b + 30\n    # We can substitute the second equation into the first to find b and then g.\n    # g = (total_pupils - 30) / 2 + 30\n    girls = (total_pupils - 30) // 2 + 30\n    return girls\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    for i in range(2, n):  # start checking from 2 to 91, as 1 and n are not valid divisors for primes\n        if n % i == 0:  # if n is divisible by i\n            return (i, n // i)  # return the divisors\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    ans = 0\n    for girls_per_side in range(1, 100, 2):  # girls are in even layers, starting from 1, 3, 5,...\n        boys_per_side = girls_per_side + 2  # boys are always on the outside, one layer more on each side\n        boys = boys_per_side ** 2  # total boys in the square\n        girls = girls_per_side ** 2  # total girls in the square\n        if boys - girls == 31:  # condition given in the problem\n            ans = boys + girls  # sum of boys and girls gives total students\n            break\n    return ans\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    ribbon_a_length = 10\n    ribbon_b_length = 5 * ribbon_a_length\n    total_length = ribbon_a_length + ribbon_b_length\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n\n    ans = comb(total_players, team_size)\n    \n    return ans\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + profit_percent / 100)\n    \n    alternative_profit = 5000\n    alternative_profit_percent = (alternative_profit / cost_price) * 100\n    \n    return alternative_profit_percent\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    # 4 times itself 2018 times is 2**4036 (because 4 is 2**2 and 2**2 * 2018 = 2**4036)\n    power_of_four = 2 ** (2 * 2018)\n    # 25 times itself 2018 times is 5**4036 (because 25 is 5**2 and 5**2 * 2018 = 5**4036)\n    power_of_twenty_five = 5 ** (2 * 2018)\n    \n    # Multiply 2**4036 by 5**4036 to get 10**4036\n    A = power_of_four * power_of_twenty_five\n\n    # The number of digits in a number is given by taking the logarithm (base 10) of the number\n    # and then adding 1 and taking the floor of that value. Since A is exactly 10**4036,\n    # the number of digits is 4036 + 1.\n    num_digits = 4036 + 1\n    \n    return num_digits\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            x3 = 10 - x1 - x2\n            if x3 > 0 and len({x1, x2, x3}) == 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):  # ensure x2 is greater than x1\n            for x3 in range(x2+1, 14):  # ensure x3 is greater than x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2  # Count Danny and Emily themselves\n\n    total_people = people_in_front_of_emily + danny_and_emily + people_behind_danny\n    \n    return total_people\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    # Let x be the total number of apples Mr. Aziz had initially.\n    # According to the problem:\n    # (1 - 1/5) * x - 80 = 0.3 * x\n    # Simplifying this equation gives us:\n    # 4/5 * x - 80 = 0.3 * x\n    # Multiply both sides by 5 to clear the fraction:\n    # 4 * x - 400 = 1.5 * x\n    # Now we isolate x:\n    # 4 * x - 1.5 * x = 400\n    # 2.5 * x = 400\n    # x = 400 / 2.5\n    # x = 160\n    # Since he is left with 30% of the apples, we calculate 30% of 160:\n    # 0.3 * x\n    # 0.3 * 160 = 48\n    # Mr. Aziz had 48 apples in the end.\n    apples_in_the_end = 0.3 * (400 / 2.5)\n    return int(apples_in_the_end)\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first number be 'x'\n    x = symbols('x')\n    # Consecutive even numbers increase by 2 each time. Hence, we can express them as:\n    # x, x+2, x+4, x+6, x+8, x+10, x+12\n    \n    # The fourth number is x+6\n    # The first number is x and the seventh number is x+12\n    # The fourth number is larger than one-third of the sum of the first and seventh numbers by 6\n    equation = Eq(x+6, (1/3) * (x + (x+12)) + 6)\n    \n    # Solve for x\n    first_number = solve(equation, x)[0]\n    \n    # Calculate the sum of these seven numbers\n    sum_seven_numbers = sum(first_number + 2*i for i in range(7))\n    \n    return sum_seven_numbers\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    wood_length = 52\n    # Since the wood is cut into two pieces of equal length\n    length_of_each_piece = wood_length / 2\n    return length_of_each_piece\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    kilometers = 1.5\n    meters = kilometers * 1000\n    return meters\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    sum_remaining = total_sum - 180\n    average_remaining = sum_remaining / 8\n    return average_remaining\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    purple, yellow, white, red = symbols('purple yellow white red')\n    \n    # Twice as many purple orchids as yellow orchids\n    equation1 = Eq(purple, 2 * yellow)\n    # 3 times as many yellow orchids as white orchids\n    equation2 = Eq(yellow, 3 * white)\n    # There are 38 red and white orchids\n    equation3 = Eq(red + white, 38)\n    # 28 orchids are red\n    equation4 = Eq(red, 28)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n    \n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    trees_on_one_side = (length_of_highway // distance_between_trees) + 1\n    total_trees = trees_on_one_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    n = 20\n    first_odd_number = 1\n    common_difference = 2\n    th_20th_odd = first_odd_number + (n - 1) * common_difference\n    return th_20th_odd\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place after overtaking 5 cars,\n    # it means he was initially 7th (because he was last and then became 2nd).\n    # Hence, there were 6 cars ahead of him before he started overtaking.\n\n    # The total number of cars is therefore the number of cars he overtook (5)\n    # plus the one car that finished first, as well as his own car.\n    total_cars = 5 + 1 + 1\n\n    return total_cars\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    initial_rings = johnny_rings + amber_rings + remaining_rings\n\n    return initial_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_current = 8\n    mike_current = 48\n    age_difference = mike_current - eddie_current\n\n    eddie_future = 18\n    mike_future = eddie_future + age_difference\n\n    return mike_future\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book = 15.99\n    amy_book = lily_book + 8.01\n    total = lily_book + amy_book\n    return total\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    sum_of_interior_angles = (sides - 2) * 180\n    interior_angle = sum_of_interior_angles / sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_last_4_digits = 0\n    for i in range(1, 21):\n        number = int(\"5\" * i)\n        sum_last_4_digits = (sum_last_4_digits + number) % 10000\n    return sum_last_4_digits\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    men_for_one_wall = 2\n    days_for_one_wall = 3\n\n    # Calculate the man-days required for one wall\n    man_days_for_one_wall = men_for_one_wall * days_for_one_wall\n\n    # Define a function that calculates the time for y men to build x walls\n    def time_to_build(x_walls, y_men):\n        # Calculate the total man-days for x walls\n        total_man_days = x_walls * man_days_for_one_wall\n        \n        # Calculate the time required for y men to build x walls\n        time = total_man_days / y_men\n        return time\n\n    # We use variables x and y, as per the question, to represent the number of walls and men respectively\n    x = symbols('x')\n    y = symbols('y')\n    ans = time_to_build(x, y)\n\n    return ans\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 0.25\n    women_fraction = 1/5\n\n    men_count = total_people * men_percentage\n    women_count = total_people * women_fraction\n\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    total_shirts = 72\n    # Let the number of checked shirts be x\n    # Then the number of white shirts is 7x\n    # x + 7x = 72\n    # 8x = 72\n    # x = 72 / 8\n    checked_shirts = total_shirts // 8\n    white_shirts = 7 * checked_shirts\n    \n    return white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    number, _ = solve_congruence(*congruences)\n    return number\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 2 != 0 and num % 9 == 0 and (num // 10) % 10 % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_days = 9\n    total_pages = pages_per_day * total_days\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    numbers = [72, 60, 48, 36, 24, 12]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # As no picture or specific pattern description is provided in the question, \n    # it's impossible to produce a solution. A picture or a clear description of the \n    # pattern is necessary to solve this question. \n\n    # If the pattern described involves a known sequence or a mathematical pattern, \n    # then the code to find the value of a specific term could be written here. \n    # However, without further information, no meaningful solution can be provided.\n\n    # Placeholder for the actual solution when the pattern is provided.\n    ans = None\n    \n    return ans\n\n# Since no information is provided about the pattern, \n# the function call is commented out.\n# ans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Using the Pigeonhole Principle, to ensure 2 balls of the same color\n    # We consider the worst case scenario where we draw the maximum number of balls without getting two of the same color\n    # We draw all 5 green balls (the smallest quantity) and continue with 1 red and 1 white\n    # The next draw, no matter what, will ensure at least a pair of the same color\n    draws = 5 + 1 + 1 + 1  # 5 green, 1 red, 1 white, and 1 more for the guaranteed pair\n    return draws\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(final_value, 2)\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_children = 390\n\n    equation1 = Eq(girls / 3, boys / 2)\n    equation2 = Eq(boys + girls, total_children)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congs = [(3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congs)\n\n    return ans[0]\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def digit_sum(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solution():\n    m = 1\n    while True:\n        if digit_sum(m) == 5 * digit_sum(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    jan_to_apr = 4 * 300\n    may_to_july = 3 * 250\n    aug_to_sep = 750\n    oct_to_dec = 3 * 300\n    total_spent = jan_to_apr + may_to_july + aug_to_sep + oct_to_dec\n    average_per_month = total_spent / 12\n    return average_per_month\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = three_quarters_of_number * 4 / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = (100 - 2) / 100\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    temperature_drop = temperature_bottom - temperature_top\n    return temperature_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    # Let the number of years it will take for Tom to reach his father's current age be \"x\"\n    # Then, Tom's father's current age is \"x + tom_age\"\n    # Also, father's age when Tom reaches father's current age will be \"x + (x + tom_age)\"\n    # According to the problem, \"x + (x + tom_age)\" should equal father_future_age\n    # Therefore, we can set up the following equation:\n    # 2 * x + tom_age = father_future_age\n    # We can solve for x, and then calculate father's current age as \"x + tom_age\"\n\n    x = (father_future_age - tom_age) / 2\n    father_current_age = x + tom_age\n\n    return int(father_current_age)\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n\n    children_count = total_passengers - (men_count + women_count)\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n    \n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n    \n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    train_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + train_duration + walk_duration\n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    answers = []\n    for N in range(200):\n        if sum([int(d) for d in base_n(N, 4)]) == 5 and \\\n           sum([int(d) for d in base_n(N, 6)]) == 8 and \\\n           sum([int(d) for d in base_n(N, 8)]) == 9:\n            answers.append(N)\n    return answers\n\ndef base_n(num, b):\n    return ((num == 0) and \"0\") or (base_n(num // b, b).lstrip(\"0\") + \"0123456789ABCDEF\"[num % b])\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    first_digit_options = 2  # Can only be 2 or 3 for a three-digit number\n    second_digit_options = 3  # Can be 0, 2, or 3\n    third_digit_options = 3  # Can also be 0, 2, or 3\n\n    count = first_digit_options * second_digit_options * third_digit_options\n    return count\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six_hotdogs = 1.10\n    number_of_hotdogs = 12\n    cost_per_hotdog = cost_per_six_hotdogs / 6\n    total_cost = cost_per_hotdog * number_of_hotdogs\n    return total_cost\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16     # pence\n    total_money_in_p = 200 # £2 = 200 pence\n    bags_of_crisps = total_money_in_p // price_per_bag\n    \n    return bags_of_crisps\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    ans = 8.3 * 40\n    return ans\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    difference = 14\n\n    # Let x be the number of acorns Dale had before the exchange\n    # Then Chip had x + difference acorns before the exchange\n    # After the exchange, they both have x + difference/2 acorns each\n    # The equation model for the total acorns after the exchange is:\n    # 2*(x + difference/2) = total_acorns\n\n    x = (total_acorns - difference) / 2\n\n    chip_initial = x + difference\n\n    return chip_initial\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2  # Total number of books\n    fiction_books = 6     # Number of fiction books\n    comic_books = 2       # Number of comic books\n\n    # Calculate the number of ways to arrange the books using the formula for permutations of identical objects:\n    # n! / (n1! * n2! * ... * nk!), where n is the total number of items and n1, n2, ..., nk are the number\n    # of identical items of each type.\n    ans = factorial(total_books) / (factorial(fiction_books) * factorial(comic_books))\n\n    return int(ans)\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for num in range(1, 100):\n        if num % 2 == 0 and num % 4 == 0 and num % 3 == 0 and (num ** 0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    target_sum = 51\n    ans = 0\n    \n    # Find the smallest prime that we can use to make up the target_sum\n    # by using the largest prime possible as many times as we can,\n    # and then the rest with the smallest prime (2)\n    for prime in reversed(primes):\n        if prime <= target_sum:\n            # Calculate the count of this prime number\n            count = target_sum // prime\n            \n            # Subtract the sum of these primes from the target_sum\n            target_sum -= prime * count\n            \n            # Increment the ans by the count used\n            ans += count\n            \n        # If no target_sum left, we've found our answer\n        if target_sum == 0:\n            break\n            \n        # If remaining target_sum is not zero but less than the current prime,\n        # try to find the answer with smaller primes\n        if target_sum < prime:\n            continue\n    \n    # If there is a remainder, at least one more prime (smallest prime which is 2) will be added\n    if target_sum > 0:\n        ans += 1  # Using the smallest prime (2) to complete the target sum\n    \n    return ans\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')  # Let x represent the cost of one CD\n    total_cost = 8 * x  # Total cost for 8 CDs\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    novels, science_books = symbols('novels science_books')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (novels, science_books))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum(i if i % 2 == 0 else -i for i in range(1, 41))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    rate = 2 / 100\n    time = 1\n    \n    interest = principal * rate * time\n    \n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    three_page_letters = 0\n    \n    # Hypothesizing all letters are 4 pages\n    four_page_letters = total_pages // 4\n    \n    # Adjusting the hypothesis by decreasing the count of 4 page letters\n    # and increasing the count of 3 page letters\n    while four_page_letters * 4 + three_page_letters * 3 != total_pages or four_page_letters + three_page_letters != total_penpals:\n        four_page_letters -= 1\n        three_page_letters = total_penpals - four_page_letters\n    \n    return three_page_letters\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 24 == 0 and num // 24 == 36:\n            return num\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apple_pie_kg = 750 / 1000\n    apple_juice_kg = 1025 / 1000\n    remaining_apples_kg = total_apples_kg - (apple_pie_kg + apple_juice_kg)\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    her_position_from_back = 15\n    total_people = people_in_front + her_position_from_back - 1 # Subtract 1 because Amy is counted twice\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    duration_in_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / duration_in_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Worst case is drawing all balls of two colors first.\n    # So we can draw 5 red and 5 white which is 5+5=10 balls.\n    # And then we draw one more ball, which will be yellow for sure.\n    ans = 5 + 5 + 1\n    return ans\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    total_length = 12.75\n    # Let the length of the shorter piece be x.\n    # Then the length of the longer piece is 2x.\n    # According to the problem, x + 2x = total_length\n    shorter_piece = total_length / 3\n    longer_piece = 2 * shorter_piece\n    \n    return longer_piece\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # Given that Linda's favorite book is the 14th book from the left\n    # and there are 6 books on the right of her favorite book,\n    # the total number of books is 14 + 6.\n    \n    total_books = 14 + 6\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200  # grams\n    # When each dimension is halved, the volume becomes (1/2)^3 of the original volume\n    new_volume = original_volume * (1/2)**3\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    # Let x be the number of coins they get in the class.\n    # Gigi has 120 + x coins after the class.\n    # Lily has 24 + x coins after the class.\n    # The amount of coins Gigi has is now 3 times the amount of coins Lily has.\n    # Therefore, we can set up the equation: 120 + x = 3 * (24 + x)\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the variable x\n\n    # Create the equation based on the problem\n    equation = Eq(120 + x, 3 * (24 + x))\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The solution is the number of coins they get in the class\n    return solution[0]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 21))\n    total_cards = 20\n    non_prime_cards = total_cards - len(primes)\n    return non_prime_cards\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    difference = 41 - 14\n    for i in range(1, difference):\n        brian_age = 14 + i\n        father_age = 41 + i\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(1, 10, 2): # odd numbers only\n                if hundreds + tens + ones == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since it takes 5 minutes to boil one egg,\n    # and assuming we can only boil one egg at a time,\n    # the least amount of time to boil 3 eggs sequentially is 3 times 5 minutes.\n    time_per_egg = 5\n    total_time = time_per_egg * 3\n    return total_time\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    num_cabins = (students + cabin_capacity - 1) // cabin_capacity\n    return num_cabins\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be a and the common difference be d\n    a, d, n = symbols('a d n', real=True)\n  \n    # Based on the problem, we set up the following equations:\n    # sum of the first 4 numbers: a + (a + d) + (a + 2d) + (a + 3d) = 124\n    eq1 = Eq(4*a + 6*d, 124)\n    \n    # sum of the last 4 numbers: (a + (n-4)d) + (a + (n-3)d) + (a + (n-2)d) + (a + (n-1)d) = 156\n    eq2 = Eq(4*a + 6*d + 4*(n-4)*d, 156)\n    \n    # total sum of sequence: (n/2) * (2a + (n-1)d) = 210\n    eq3 = Eq(n*(2*a + (n-1)*d)/2, 210)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (a, d, n))\n    \n    # Choose the solution for n that is positive since the number of terms can't be negative\n    for sol in solutions:\n        if sol[n] > 0:\n            return sol[n]\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16  # in kilograms\n    cookie_dough_g = 45       # in grams\n    brownie_dough_g = 150     # in grams\n    num_cookies = 240\n    num_brownies = 2\n\n    total_dough_used_g = (num_cookies * cookie_dough_g) + (num_brownies * brownie_dough_g)\n    total_dough_used_kg = total_dough_used_g / 1000  # converting grams to kilograms\n    \n    dough_left_kg = initial_dough_kg - total_dough_used_kg\n    return dough_left_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    # Let's denote the variable for today's calorie intake as 'c'\n    # According to the problem, Dan can take in less calories than yesterday, which means today's calories 'c' is less than yesterday's calories.\n    # c < calories_yesterday\n    # In Python, we can't return an inequality directly. Instead, we represent the inequality as a string.\n    inequality = \"c < {}\".format(calories_yesterday)\n    \n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # Perform the inverse of the second day: add 2, then multiply by 2\n    after_first_day = (remaining_biscuits + 2) * 2\n    # Perform the inverse of the first day: add 4, then multiply by 2\n    total_biscuits = (after_first_day + 4) * 2\n    return total_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    initial_amount = 100\n    days_passed = 15\n    money = initial_amount\n\n    for day in range(1, days_passed + 1):\n        if day % 2 == 1:  # odd day, deposit £5\n            money += 5\n        else:  # even day, spend £8\n            money -= 8\n\n    return money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    index = (1004 - 1) % pattern_length\n\n    ans = pattern[index]\n    return ans\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    number_of_children = 5\n\n    wine_gums_per_child = total_wine_gums // number_of_children\n\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298 \n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n    return sum_series\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = 1234567890  + 987654321\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Chocolate variables\n    chocolates, friends = symbols('chocolates friends')\n\n    # equations based on the problem statement\n    equation1 = Eq(friends * 18 + 41, chocolates)\n    equation2 = Eq(friends * 23, chocolates + 34)\n\n    # solve the system of equations to find the number of chocolates and friends\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    # chocolates left if she gives each friend 20 pieces\n    chocolates_left = solutions[chocolates] - solutions[friends] * 20\n\n    return chocolates_left\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "from itertools import combinations\n\ndef is_perfect_square(n):\n    return int(n ** 0.5) ** 2 == n\n\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef solution():\n    candidates = [n for n in range(100, 1000) if n % 27 == 0 or n % 7 == 0 or sum_of_digits(n) == 17 or is_perfect_square(n) or 89100 % n == 0]\n    for combo in combinations(candidates, 3):\n        truth_combo = [\n            combo[0] % 27 == 0,\n            combo[0] % 7 == 0,\n            sum_of_digits(combo[0]) == 17,\n            is_perfect_square(combo[0]),\n            89100 % combo[0] == 0\n        ]\n        if truth_combo.count(True) == 3 and all(\n            combo[1] % 27 != 0,\n            combo[1] % 7 != 0,\n            sum_of_digits(combo[1]) != 17,\n            not is_perfect_square(combo[1]),\n            89100 % combo[1] != 0\n        ):\n            return combo[0]\n    \nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    return 84.8 / 400\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_money = 200\n    spent_on_book = 0.15 * initial_money\n    remaining_money = initial_money - spent_on_book\n    spent_on_dvd = 0.30 * remaining_money\n    money_left = remaining_money - spent_on_dvd\n    \n    return money_left\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let m represent the number of push-ups Mulan can do\n    # The inequality representing Mulan can do more push-ups than the best boy soldier who can do 50 push-ups\n    # is m > 50\n    m = symbols('m')\n    inequality = m > 50\n\n    return inequality\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n    balloons_still_needed = total_balloons_needed - (balloons_blown_up - balloons_burst)\n\n    return balloons_still_needed\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    current_games_played = 84\n    total_teams = 13\n    total_games = total_teams * (total_teams - 1) // 2\n    games_remaining = total_games - current_games_played\n    return games_remaining\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    pieces = 88\n    children = 8\n    # The least possible number of pieces the child with the most candies can get\n    # can be found by giving the least number of candies (1, 2, ..., 7) to the other children\n    min_pieces_other_children = sum(range(1, children))  # Children are 1-indexed\n    least_pieces_most_child = pieces - min_pieces_other_children\n    return least_pieces_most_child\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, there are:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    # For Jerry to guarantee a win, he should leave both stacks with equal numbers of stones.\n    # Because in any subsequent move, Tom will be forced to take stones from one stack, allowing Jerry to take the same amount from the other stack\n    # This will eventually force Tom to take the last stone.\n    # So, Jerry should take stones from Stack A.\n    \n    # Number of stones Jerry must take from Stack A to equalize both stacks:\n    stones_to_take = 20 - 16\n    # The stack from which Jerry must take stones:\n    stack = 'A'\n    return stones_to_take, stack\n\n# Assign the output of the solution function to the variable `ans`.\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4\n    water_left_over = 7\n    \n    original_volume = (pails_filled * water_per_pail) + water_left_over\n\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let the number of girls be 7x and boys be 9x\n    # According to the problem, 9x - 7x = 16 (since there are 16 more boys than girls)\n    # Solving for x\n    x = 16 // 2  # (9x - 7x = 2x, hence 2x = 16)\n\n    # Total number of pupils in class 1A is the sum of boys and girls\n    total_pupils = 7 * x + 9 * x\n    return total_pupils\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = sum(range(1, 37+1)*3 - 36)\n    difference = correct_sum - 2011\n    wrong_number = difference // 2\n    mistaken_person = wrong_number // 3 + 1\n    \n    return mistaken_person\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    total_balls = 160\n    # The average number of balls per student is total_balls / 5.\n    # Since the numbers are consecutive, the middle number is the average.\n    average_balls = total_balls // 5\n    # The largest number will be two steps ahead of the average\n    most_balls = average_balls + 2\n    return most_balls\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            M = hundreds * 100 + ones\n            S = hundreds + ones\n            if M == 67 * S:\n                reverse_M = ones * 100 + hundreds\n                return reverse_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    # Convert 2 metres to centimetres\n    total_length_cm = 2 * 100  # 1 metre = 100 centimetres\n    \n    # The length of each piece\n    piece_length_cm = 6  # 6 centimetres\n    \n    # Calculate the number of complete pieces\n    num_complete_pieces = total_length_cm // piece_length_cm\n    \n    return num_complete_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_selected = 7\n    return comb(total_balls, balls_selected)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n\n    # Set up the equation based on the given complex fraction\n    equation = Eq(1 + 1 / (a + 1 / (b + 1 / c)), 13 / 10)\n\n    # Find the solution that provides integer values for a, b, and c\n    solutions = solve(equation, (a, b, c))\n\n    # There could be multiple solutions but we need the one with all integers\n    for sol in solutions:\n        if all(isinstance(num, int) for num in sol):\n            return sol[0] + 2 * sol[1] + 3 * sol[2]\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    power = 30\n    ones_digit_pattern = [base ** i % 10 for i in range(1, 5)]\n    return ones_digit_pattern[(power - 1) % 4]\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n\n    days_needed = total_pages / pages_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    # Let x be the number of correct answers, y be the number of incorrect answers\n    # Each correct answer gives 5 points: 5x points\n    # Each incorrect answer loses 3 points: -3y points\n    # Total number of questions: x + y = 20\n    # Total points: 5x - 3y = 52\n    # We need to solve the system of equations for x and y\n\n    for correct_answers in range(21):  # Loop from 0 to 20 inclusive\n        wrong_answers = 20 - correct_answers\n        total_points = 5 * correct_answers - 3 * wrong_answers\n        if total_points == 52:\n            return correct_answers\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 1\n    while days * (days + 1) / 2 <= 100:\n        days += 1\n    return days - 1\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    result = (0.3 * 100) / 150\n    return result\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls - boys, 12)\n    equation2 = Eq(girls + boys, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    return sum(number for number in range(1, 21) if number % 6 == 1)\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    # Total weight of the solution\n    total_solution_weight = 600\n    # Percentage of sugar in the solution\n    sugar_percentage = 0.48\n    # Amount of sugar in the solution\n    sugar_amount = sugar_percentage * total_solution_weight\n    # Since the rest of the solution is water, we find the amount of water by subtracting sugar amount from total\n    water_amount = total_solution_weight - sugar_amount\n    return water_amount\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    # 9 times 5 turned into addition operation\n    # would be adding 9 for 5 times\n    ans = 9 + 9 + 9 + 9 + 9\n    return ans\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let the age of the youngest dwarf be x, then the age of other dwarfs in increasing order are:\n    # x, x+1, x+2, x+3, x+4, x+5, x+6\n    # The youngest three's ages add up to 42 years: x + (x+1) + (x+2) = 42\n    # This simplifies to: 3x + 3 = 42\n    # Solve for x to find the age of the youngest dwarf\n    x = (42 - 3) // 3\n    \n    # Once we have the age of the youngest dwarf, we can find the sums of the ages of the oldest three dwarfs\n    # They are (x+4) + (x+5) + (x+6)\n    sum_oldest_three = (x+4) + (x+5) + (x+6)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    result = 19 + 199 + 1999 + 19999 + 199999 + (4/5) * 5\n    return result\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n\n    result = total_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for a, b, c, d which can only be digits (0-9)\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    # Set the limits for a, b, c, d (since they are digits, they can only be 0-9)\n    limits = (a >= 1, a <= 9, b >= 0, b <= 9, c >= 0, c <= 9, d >= 0, d <= 9)\n    \n    # Create the equation based on the problem statement\n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + a, 1370)\n\n    # Solve the equation with the given limits\n    solutions = solve((equation,) + limits, (a, b, c, d))\n\n    # Get the numercial value of abcd once the solution is found\n    abcd_val = 1000 * solutions[a] + 100 * solutions[b] + 10 * solutions[c] + solutions[d]\n    return abcd_val\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    total_years_future = 35\n\n    num_years = total_years_future - (janice_age + sister_age)\n    return num_years\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_for_three_tests = 75 * 3\n    total_for_two_tests = 172\n    marks_in_remaining_test = total_for_three_tests - total_for_two_tests\n    \n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        ans += sum([j / i for j in range(1, i + 1)])\n        ans += sum([(i - j) / i for j in range(1, i)])\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets, milk_chocolates = symbols('total_sweets milk_chocolates')\n    \n    # Fruit drops is 6 and represents 2/7th of the milk chocolates\n    equation1 = Eq(6, (2/7) * milk_chocolates)\n    \n    # number of milk chocolates is 3/4th of total sweets\n    equation2 = Eq(milk_chocolates, (3/4) * total_sweets)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_sweets, milk_chocolates))\n    \n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    volleyball, football = symbols('volleyball football')\n    \n    # One football and two volleyballs cost $60\n    equation1 = Eq(football + 2 * volleyball, 60)\n    \n    # Two footballs and getting back $16 means they cost $60 - 16 = $44\n    equation2 = Eq(2 * football, 44)\n    \n    solutions = solve((equation1, equation2), (volleyball, football))\n    \n    return solutions[volleyball]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, mode\n    from itertools import permutations\n\n    # Start with an initial guess for the ages, given the mode, median, and range\n    ages = [7, 7, 8, 8, 15]  # Sorted ages\n    possible_ages = []\n\n    # Find all permutations and filter out the ones that don't meet the conditions\n    for ages_perm in permutations(ages):\n        if mean(ages_perm) == 9 and median(ages_perm) == 8 and mode(ages_perm) == 7:\n            possible_ages.append(ages_perm)\n\n    # Among the valid combinations, pick out the second oldest ages and return the unique values\n    second_oldest_ages = {comb[3] for comb in possible_ages}\n    return list(second_oldest_ages)[0]\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    ans = 1000 - 630\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    # Calculate the sum of integers from 1 to 20\n    n = 20\n    sum_of_integers = (n * (n + 1)) // 2\n    \n    # Use the formula: 1³ + 2³ + 3³ + ... + n³ = (1 + 2 + 3 + ... + n)²\n    ans = sum_of_integers ** 2\n    return ans\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n    \n    return int(sum_of_series)\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    num_books = 3  # since there's one book for each subject\n    return factorial(num_books)\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # A can't be in the first or last position so we have 3 choices for A's position\n    positions_for_A = 3\n    \n    # Once A's position is chosen, we have 4 remaining people to arrange in the \n    # remaining 4 positions. This is a straightforward permutation:\n    # 4 people can be arranged in 4! (factorial) ways.\n    import math\n    arrangements_for_others = math.factorial(4)\n    \n    # Total number of ways to line up is the product of the two\n    total_arrangements = positions_for_A * arrangements_for_others\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # First clue: 1703\n    # Two of the digits and their positions are correct.\n    # This means any number we consider must have two digits from (1, 7, 0, 3) in the same position\n    \n    # Second clue: 2745\n    # Two of the digits are correct, but not in the right position.\n    # Since none of the positions can be the same as 2745, we check the digits\n    # against 1703, finding which two digits can be correct but in another position.\n    \n    # Third clue: 3541\n    # All the digits are correct but in the wrong position.\n    # This means the number contains 3, 5, 4, 1 but not in these positions.\n    \n    # John's number: _ _ _ _\n    # We use process of elimination to find the correct positions of 3541.\n    \n    for i in range(1000, 10000):\n        str_i = str(i)\n        \n        # All digits must be different\n        if len(set(str_i)) != 4:\n            continue\n\n        # Check against first clue: 1703\n        if (str_i[0] == '1' and str_i[2] == '0') or (str_i[0] == '1' and str_i[3] == '3') \\\n        or (str_i[1] == '7' and str_i[2] == '0') or (str_i[1] == '7' and str_i[3] == '3'):\n            # Check against second clue: 2745 (only check for digits, not positions)\n            if '7' in str_i and '5' in str_i and str_i[0] != '2' and str_i[1] != '7' \\\n            and str_i[2] != '4' and str_i[3] != '5':\n                # Check against third clue: 3541 (all digits but different positions)\n                if str_i[0] != '3' and str_i[1] != '5' and str_i[2] != '4' \\\n                and str_i[3] != '1' and '3' in str_i and '5' in str_i and '4' in str_i and '1' in str_i:\n                    return int(str_i)\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n\n    ans = math.ceil(math.log2(16))\n    \n    return ans\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # let the number of yellow flowers be y\n    # number of red flowers is 3 times yellow flowers, so it's 3y\n    # number of pink flowers is y - 7, and it's given as 3 (pink flowers)\n    # hence y - 7 = 3, solving for y gives us y = 10 (yellow flowers)\n    # therefore, the number of red flowers is 3 * 10 = 30 (red flowers)\n    # total number of red and yellow flowers is y + 3y = 4y = 4 * 10 = 40\n    return 40  # red and yellow flowers altogether\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys_girls_ratio_morning = 3/2  # The number of boys was 50% more than the number of girls.\n    after_boys_joined, after_girls_joined = 12, 12  # The number of boys and girls joined in the afternoon.\n    ratio_afternoon = 19/14  # The ratio of the number of boys to girls became 19:14.\n    \n    # Let the number of girls in the morning be 'g'.\n    g = symbols('g')\n    \n    # Boys in the morning\n    b = boys_girls_ratio_morning * g\n    \n    # Boys and Girls in the afternoon\n    boys_afternoon = b + after_boys_joined\n    girls_afternoon = g + after_girls_joined\n    \n    # Equation based on the afternoon ratio\n    eq = Eq(boys_afternoon / girls_afternoon, ratio_afternoon)\n    \n    # Solve the equation to find the number of girls in the morning\n    g_value = solve(eq, g)[0]\n    \n    # Find the number of boys in the morning\n    b_value = boys_girls_ratio_morning * g_value\n    \n    # Total children in the afternoon\n    total_afternoon = boys_afternoon.subs(g, g_value) + girls_afternoon.subs(g, g_value)\n    \n    return total_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    initial_ratio = Eq(apples / oranges, 3 / 8)\n    new_ratio = Eq((apples - 1) / oranges, 1 / 3)\n\n    solutions = solve((initial_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for h in range(1, 10): # hundreds digit, can't be zero\n        for l in range(0, 10): # tens digit, can be zero\n            for u in range(1, 10): # units digit, can't be zero\n                if l < h and l < u:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    # This problem is an example of a Derangement Problem also known as subfactorials or !n\n    # For n = 6, the number of derangements is !6\n    # Formula to find nth Derangement: !n = (n - 1) * (!(n - 1) + !(n - 2)) with base cases !0 = 1 and !1 = 0 \n\n    # Base cases\n    derangement_0 = 1\n    derangement_1 = 0\n    # Number of students\n    n = 6  \n\n    # compute nth derangement using the recursive relationship\n    derangement_n_minus_2 = derangement_0  # !4\n    derangement_n_minus_1 = derangement_1  # !5\n    derangement_n = 0                       # !6\n\n    for i in range(2, n+1):\n        derangement_n = (i - 1) * (derangement_n_minus_1 + derangement_n_minus_2)\n        derangement_n_minus_2 = derangement_n_minus_1\n        derangement_n_minus_1 = derangement_n\n    \n    return derangement_n\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_money = 48\n    total_classmates = 10\n    notebook_cost = 3\n    colour_pencils_cost = 9\n    \n    for colour_pencils in range(total_classmates+1):\n        notebooks = total_classmates - colour_pencils\n        if notebooks * notebook_cost + colour_pencils * colour_pencils_cost == total_money:\n            return colour_pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n    first_floor_seating = first_floor_rows * seats_per_row\n\n    second_floor_students = total_students - first_floor_seating\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    current_term = 56\n    ratio = current_term // 28  # Find the common ratio\n\n    next_term = current_term * ratio  # Calculate the next term\n\n    return next_term\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first of the consecutive even numbers be x\n    # Then the numbers are x, x + 2, x + 4, x + 6, x + 8, x + 10\n    # The sum of these six numbers is 6x + 30 = 510\n    # Solving for x gives us the value of the first number\n    x = (510 - 30) // 6\n\n    # Once we have the first number, we can find the rest and calculate the mean and median\n    numbers = [x + i * 2 for i in range(6)]\n    mean = sum(numbers) / 6\n    median = (numbers[2] + numbers[3]) / 2\n\n    # The difference between the mean and the median is:\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    for i in range(1, 51):\n        while i % 2 == 0:\n            count_2 += 1\n            i /= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i /= 5\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for number in range(3, 48):  # We want to include the number 47 as well.\n        count += str(number).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    helen_original = 18\n    oliver_original = 22\n\n    helen, oliver = symbols('helen oliver')\n    equation1 = Eq(helen - oliver, 10)\n    equation2 = Eq(helen + oliver, helen_original + oliver_original)\n\n    solutions = solve((equation1, equation2), (helen, oliver))\n\n    return solutions[helen]\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    card_A = 40\n    card_B = card_A / 2\n    card_C = card_B / 2\n    total_value = card_A + card_B + card_C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n    sugar_weight = total_weight * sugar_concentration\n    \n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    first_climb = 23\n    first_descent = 31\n    second_climb = 17\n\n    final_height = initial_height + first_climb - first_descent + second_climb\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    from math import log10\n    \n    N = 5**100\n    num_digits = int(log10(N)) + 1\n    \n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    ans = 25 * 71\n    return ans\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n    equation = Eq(strawberries + 448, mangoes)\n    equation_after_giving_away = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((equation, equation_after_giving_away), (strawberries, mangoes))\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Assuming the smallest number is x, the numbers are x, x+1, x+2, x+3, x+4\n    # Their sum is 5*x + 10 (1+2+3+4), which equals to 40\n    # So we solve for x: 5*x + 10 = 40\n    # Simplifying we get 5*x = 30, so x = 6\n    x = (40 - 10) // 5\n    return x\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    total_primes = 25\n    composite_numbers = total_numbers - total_primes - 1  # Subtract 1 for the number 1, which is neither prime nor composite.\n\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    return 2 * 13 * 3.5\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0134689'\n    numbers = set(int(''.join(p)) for p in permutations(digits, 5) if p[0] != '0')\n    multiples_of_9 = [num for num in numbers if num % 9 == 0]\n    \n    max_difference = (max(multiples_of_9) - min(multiples_of_9)) // 9\n\n    return max_difference\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    given_away = 8\n\n    remaining_sweets = total_sweets - given_away\n\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    fourth_term = 39\n    twelfth_term = 57\n    difference = (twelfth_term - fourth_term) / (12 - 4)\n    first_term = fourth_term - (4 - 1) * difference\n    return int(first_term)\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = [1, 3, 5, 2]\n    largest_number = int(''.join(map(str, sorted(digits, reverse=True))))\n\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4400004\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_sum = 987\n    incorrect_addend = 540\n    correct_addend = 450\n    difference = incorrect_addend - correct_addend\n    correct_sum = incorrect_sum - difference\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    # amount of salt in the first solution (30 grams of 30% solution)\n    salt1 = 30 * 0.30\n    # amount of salt in the second solution (20 grams of 20% solution)\n    salt2 = 20 * 0.20\n    # total amount of salt\n    total_salt = salt1 + salt2\n    # total weight of the two solutions before adding water\n    total_weight = 30 + 20\n    # final concentration desired is 10%\n    final_concentration = 0.10\n    # let x be the amount of water to be added\n    # the new total weight will be total_weight + x\n    # the new concentration will be the total_salt / (total_weight + x)\n    # according to the problem, the new concentration should be 10%\n    # so we have the equation total_salt = final_concentration * (total_weight + x)\n    # we solve for x\n    x = total_salt / final_concentration - total_weight\n    return x\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To ensure 29 balls of one color, we need to account for the worst case scenario,\n    # which is getting all balls of the other two colors first\n    # If we pick all 40 red and all 30 white balls, we still don't have 29 balls of one color\n    # Hence we need to pick 29 blue balls after that to ensure the condition\n    # So the minimum number of balls we should catch is:\n    red_balls = 40\n    white_balls = 30\n    blue_balls_to_ensure = 29  # To make sure we get 29 blue balls\n    \n    balls_needed = red_balls + white_balls + blue_balls_to_ensure\n    \n    return balls_needed\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # For the worst case, we have to account for the possibility of drawing\n    # maximally distinct cards first, to force the next card to be a repeat in number.\n\n    # We could draw 2 cards of each number (2 of hearts, spades, diamonds, clubs):\n    # Total distinct numbers drawn = 2 cards * 13 numbers = 26 cards\n\n    # The next card drawn must be the 3rd card of some number,\n    # which will give us 3 cards with the same number.\n    # So we need to add 1 to the 26 distinct cards to ensure 3 cards with the same number.\n\n    return 26 + 1\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # m/min\n    vicky_speed = 250    # m/min\n    race_distance = 3000  # m\n\n    johnson_time = race_distance / johnson_speed  # time taken by Johnson in minutes\n    vicky_time = race_distance / vicky_speed      # time taken by Vicky in minutes\n\n    time_difference = vicky_time - johnson_time   # time difference in minutes\n\n    return time_difference\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import isprime\n\n    prime_count = sum(isprime(n) for n in range(1, 21))\n    total_count = 20\n    proportion = prime_count / total_count\n\n    return round(proportion, 2)\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    given_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_numbers = 8\n    mean_value = 8\n    \n    sum_of_given_numbers = sum(given_numbers)\n    missing_number = (mean_value * total_numbers) - sum_of_given_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "import itertools\n\ndef solution():\n    count = 0\n    # Generate all permutations of the students except C\n    for p in itertools.permutations('ABCDEFGH'):\n        p = ''.join(p)\n        # Check if C is between A and B\n        if (p.index('A') < p.index('C') < p.index('B')) or (p.index('B') < p.index('C') < p.index('A')):\n            # Check if D and E are next to each other\n            if 'DE' in p or 'ED' in p:\n                # Check if F and G are next to each other\n                if 'FG' in p or 'GF' in p:\n                    count += 1\n    # Divide by 2 because DE and FG pairs can be swapped\n    return count // 2\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    # Define the prices for notebooks and calendars\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    \n    # Initialize a set to store unique total prices\n    total_prices = set()\n    \n    # Calculate all possible total prices and add them to the set\n    for notebook_price in notebook_prices:\n        for calendar_price in calendar_prices:\n            total_prices.add(notebook_price + calendar_price)\n    \n    # The number of unique total prices is the number of different combinations\n    return len(total_prices)\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of lime solution transferred\n    x = symbols('x')\n\n    # For bottle A (5L total, 10% concentration)\n    # Initial lime amount = 5 * 0.10\n    # After transfer: (5 * 0.10 - 0.10 * x) + 0.20x liters of lime in 5L solution\n    # New concentration of bottle A = ((5 * 0.10 - 0.10 * x) + 0.20 * x) / 5\n\n    # For bottle B (3L total, 20% concentration)\n    # Initial lime amount = 3 * 0.20\n    # After transfer: (3 * 0.20 - 0.20 * x) + 0.10x liters of lime in 3L solution\n    # New concentration of bottle B = ((3 * 0.20 - 0.20 * x) + 0.10 * x) / 3\n\n    # Set the new concentrations equal to each other and solve for x\n    equation = Eq(((5 * 0.10 - 0.10 * x) + 0.20 * x) / 5, ((3 * 0.20 - 0.20 * x) + 0.10 * x) / 3)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n\n    return rows_needed\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    result_str = ''\n    num_123s = 123\n\n    for i in range(1, num_123s + 1):\n        result_str += '123' * i\n\n    num = int(result_str)\n    \n    # Convert to string and check the required digit (considering the index from the end)\n    hundreds_digit = int(str(num)[-3])\n\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Given ratio of length to breadth of the original painting\n    original_length = 90\n    original_ratio_length = 5\n    original_ratio_breadth = 2\n    \n    # Calculate original breadth based on the ratio and given length\n    original_breadth = (original_length / original_ratio_length) * original_ratio_breadth\n    \n    # The length of the lego should be 70.5 cm smaller than the original painting\n    lego_length = original_length - 70.5\n    \n    # Calculate the maximum size of the breadth of the lego keeping the same proportion\n    lego_breadth = (lego_length / original_ratio_length) * original_ratio_breadth\n    \n    return lego_breadth\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amounts = []\n    \n    # Losing the 50-cent coin\n    if (total_amount - 50) == 2 * (total_amount - (total_amount - 50)):\n        brother_amounts.append(50)\n\n    # Losing the 20-cent coin\n    if (total_amount - 20) == 2 * (total_amount - (total_amount - 20)):\n        brother_amounts.append(20)\n\n    # Losing the 10-cent coin\n    if (total_amount - 10) == 2 * (total_amount - (total_amount - 10)):\n        brother_amounts.append(10)\n\n    # Losing the 5-cent coin\n    if (total_amount - 5) == 2 * (total_amount - (total_amount - 5)):\n        brother_amounts.append(5)\n\n    ans = brother_amounts[0]  # She lost only one coin; hence, there will be only one solution\n    return ans\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Using the inclusion-exclusion principle\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_speed = 8  # m/s\n    jaan_distance = 200  # metres\n    jaan_time = jaan_distance / jaan_speed  # seconds\n    kane_distance = jaan_distance - 12.5  # metres\n    kane_speed = kane_distance / jaan_time  # m/s\n\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10\n\n    total_price = cake_price + milk_price\n    actual_pay = total_price - voucher\n\n    return actual_pay\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1 + 1/4\n    overtime_rate = normal_rate * overtime_multiplier\n    normal_hours = 8\n    total_hours = 10\n    overtime_hours = total_hours - normal_hours\n\n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    ans = (35 / 100) * 60\n    return ans\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let J be the fraction of the job John does in one minute,\n    # R be the fraction of the job Raj does in one minute, and\n    # P be the fraction of the job Pete does in one minute.\n    J, R, P = symbols('J R P')\n\n    # All three together can finish the job in 60 minutes (1 hour).\n    equation1 = Eq(J + R + P, 1/60)\n\n    # John and Raj together can finish the job in 72 minutes (1 hour 12 minutes).\n    equation2 = Eq(J + R, 1/72)\n\n    # Raj and Pete together can finish the job in 90 minutes (1 hour 30 minutes).\n    equation3 = Eq(R + P, 1/90)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (J, R, P))\n\n    # Raj's rate is R, to find out the time for him alone to finish the job,\n    # we take the reciprocal of his rate, which will give us the time in minutes.\n    time_for_raj = 1 / solutions[R]\n\n    return time_for_raj\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 3 and number % 7 == 3:\n            return number\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    num_repeats = 99 // 9  # Each repeat has 9 digits, 99 digits total => 99/9 repeats\n    remainder = (928 % 9) * num_repeats  # Calculate the remainder of one group and multiply it by the number of groups\n    return remainder % 9  # Take the remainder of the sum when divided by 9 to get the final answer\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30/43)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the younger brother and y be the current age of the elder brother.\n    x, y = symbols('x y')\n\n    # Equation 1: Sum of the current ages of both brothers.\n    equation1 = Eq(x + y, 42)\n\n    # Equation 2: A few years ago, the younger brother was half the age of the current elder brother's age.\n    # Let 'a' be the number of years ago when this happened.\n    # A few years ago: elder brother was y-a which is equal to the current age of the younger brother x.\n    # A few years ago: younger brother was x-a which was half of the elder brother's current age y.\n    # The statement \"when the elder brother was at the current age of the younger brother\" translates to y-a = x.\n    # So we have x-a = y/2. However, since y-a equals x, we can replace y/2 with x/2.\n    equation2 = Eq(x - (y - x), y/2)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The problem asks for the age of the elder brother.\n    return solutions[y]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # To ensure removing at least three of the same color, consider the worst-case scenario:\n    # Let's take 2 balls of each color. This would still not guarantee 3 of the same color.\n    # After 2 white, 2 blue, 2 green, and 2 orange, the next ball must guarantee 3 of the same color.\n    # Therefore, we need to take 2 + 2 + 2 + 2 + 1 = 9 balls to ensure at least three of the same color.\n\n    ans = 2 * 4 + 1  # Taking 2 of each color and 1 more to ensure 3 of same color\n\n    return ans\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original = tens * 10 + ones\n            swapped = ones * 10 + tens\n            if swapped == original // 3 + 3:\n                return original\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Each congruence x = 1 (mod 5), x = 1 (mod 6), x = 1 (mod 7) \n    # is represented as a tuple (remainder, modulus)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Solve the system of congruences\n    lcm, remainder = solve_congruence(*congruences)\n    \n    return remainder\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    # Let n be the number of teams\n    # Every team plays with each other 2 times\n    # n * (n - 1) is the total number of games if each pair of teams played once\n    # because each team plays the other n-1 teams.\n    # Since each pair plays twice, the total number of matches is n * (n - 1) * 2\n    # We set this equal to 30 and solve for n\n    matches = 30\n\n    for n in range(1, matches + 1):\n        if n * (n - 1) * 2 == matches:\n            return n\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return round(boxes_needed)\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let the length of the rope be x meters\n    # Let the circumference of the tree be y meters\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(10 * y + 3, x)  # If ten turns around the tree is left 3 meters\n    equation2 = Eq(12 * y - 3, x)  # If 12 turns is missing another 3 meters\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    y_value = solutions[y]\n\n    # Calculate how many meters around 8 turns left\n    rope_left = 8 * y_value\n\n    return rope_left.evalf()\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later for the sum of their ages to be 40\n    x = symbols('x')\n    \n    # Let g be George's current age, and s be his sister's current age\n    # According to the problem, we have g + s = 34\n    # After x years, their ages will be g+x and s+x respectively,\n    # and the sum will be (g+x) + (s+x) = 40\n    \n    # We can form an equation based on the above information\n    equation = Eq((g + x) + (s + x), 40)\n    \n    # Replacing g + s with 34 as per the given condition\n    solution = solve(equation.subs(g + s, 34), x)\n    \n    # There will be only one solution, which will be the number of years later\n    return solution[0]\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # According to the Pigeonhole Principle, to ensure at least 5 people come from the same country,\n    # we use the formula (number of countries - 1) * (number of minimum participants from each country - 1) + 1.\n    # Ivy's mistake was to multiply by 5 directly. The correct approach is to use 5 - 1, which is 4, because we want AT LEAST 5 participants.\n    num_countries = 11\n    min_participants_for_same_country = 5\n    ans = (num_countries - 1) * (min_participants_for_same_country - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    x_val, y_val, z_val = solutions[x], solutions[y], solutions[z]\n\n    return x_val + y_val + z_val\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    \n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    \n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A != 0 and B != 0:\n            SEND = 1000 * S + 100 * E + 10 * N + D\n            MORE = 1000 * M + 100 * O + 10 * R + E\n            MONEY = 10000 * M + 1000 * O + 100 * N + 10 * E + Y\n            if SEND + MORE == MONEY:\n                return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    # Total four-digit numbers from 1000 to 1999\n    total_numbers = 1000\n    \n    # Four-digit numbers greater than 1499 starting from 1500 to 1999\n    numbers_greater_than_1499 = 1999 - 1499\n    \n    # Calculate the probability\n    probability = numbers_greater_than_1499 / total_numbers\n    \n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    kitty, nora = symbols('kitty nora')\n    \n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n    \n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution() "
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine = 54  # Catherine's number of cards\n    ben = catherine - 5  # Ben's number of cards, which is 5 less than Catherine's\n    ash = 3 * ben  # Ash's number of cards, three times Ben's\n    return ash\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    spent = (3 / 7) * total_money\n    not_spent = total_money - spent\n    difference = spent - not_spent\n\n    equation = Eq(difference, 12)\n\n    total_money_solution = solve(equation, total_money)\n\n    amount_spent_on_bag = spent.subs(total_money, total_money_solution[0])\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    final_number = 28\n    original_number = (final_number - 6) / 2\n    return int(original_number)\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Since there are seven dwarfs born in seven consecutive years, we can denote their ages as:\n    # y, y+1, y+2, y+3, y+4, y+5, y+6 where y is the age of the youngest dwarf\n    \n    # According to the information given, the ages of the youngest three add up to 42:\n    # y + (y + 1) + (y + 2) = 42\n    # We can simplify this to get a value for y\n    y = (42 - 3) / 3\n    \n    # The ages of the oldest three can then be expressed as:\n    # (y + 4) + (y + 5) + (y + 6)\n    # We calculate this sum given the value of y we have found\n    oldest_three_sum = (y + 4) + (y + 5) + (y + 6)\n    \n    return int(oldest_three_sum)\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    n = 111\n    m = 7\n\n    ans = n - sum(range(1, m))\n\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    ans = (1/6) * n * (n + 1) * (2*n + 1) * (5**2)\n    return int(ans)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    total_toys = Eq(A + B + C, 659)\n    toys_A_and_B = Eq(A + B, 447)\n    toys_B_and_C = Eq(B + C, 335)\n\n    solutions = solve((total_toys, toys_A_and_B, toys_B_and_C), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - (13 * pupils), 190)\n    equation2 = Eq(stickers - (17 * pupils), 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n\n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    num = 72\n    factors = set()\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    ans = sum(numbers) / len(numbers)\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls, boys + 30)\n    equation2 = Eq(girls + boys, 500)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one file and one storybook\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n\n    # First equation from the problem statement\n    eq1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n\n    # Second equation from the problem statement\n    eq2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (file_cost, storybook_cost))\n\n    # Find the total cost of 1 file and 1 storybook\n    total_cost = solution[file_cost] + solution[storybook_cost]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_sausages = 21\n    \n    total_sausages_before = initial_trays * initial_mean\n    total_trays_now = initial_trays + 1\n    total_sausages_now = total_sausages_before + additional_sausages\n    \n    new_mean = total_sausages_now / total_trays_now\n    \n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit goes from 1 to 9\n        for tens in range(0, 10):  # tens digit goes from 0 to 9\n            for ones in range(1, 10):  # ones digit goes from 1 to 9\n                if tens < hundreds and tens < ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    ans = (3 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (263 + 137) / 20  # Speed of the train (distance/time)\n    second_bridge_length = speed * 27 - 137  # Total distance covered in 27 seconds - length of the train\n    return second_bridge_length\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani_money = 456\n    brenda_money = 528\n    total_money = rani_money + brenda_money\n    equal_amount = total_money // 2\n    \n    money_to_give = brenda_money - equal_amount\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(2/5 * blue, 3/5 * red)\n    equation2 = Eq(blue + red, 125)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue] - solutions[red]\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + (4567 * 7890)\n    denominator = (4568 * 7890) - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "def solution():\n    from math import factorial\n    \n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # Each student must get at least one book.\n    # First, we choose three books to give each student one.\n    # Then we distribute the remaining four books to three students.\n    # This can be done using stars and bars method: (n+k-1 choose k)\n    # where n is the number of books and k is the number of students minus 1.\n\n    # Choose the first book for each student\n    first_three_books = combinations(7, 3)\n\n    # Distribute the remaining four books among three students\n    remaining_books = combinations(4 + 3 - 1, 4)\n\n    total_ways = first_three_books * remaining_books\n    return total_ways\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n\n    # 3 watches + 5 handbags = $915\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    # 4 watches + 2 handbags = $632\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # Solve the system of equations for the price of a watch and handbag\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # Calculate the total cost of 2 such watches and 2 such handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Grandmother's age in 2008\n    grandmother_age_2008 = 80\n\n    # Daughter's age in 1996\n    daughter_age_1996 = 40\n\n    # Calculate the year difference between 1996 and 2008\n    year_diff = 2008 - 1996\n\n    # Daughter's age in 2008\n    daughter_age_2008 = daughter_age_1996 + year_diff\n\n    # Grandmother’s age when daughter was born\n    grandmother_age_birth = grandmother_age_2008 - daughter_age_2008\n\n    return grandmother_age_birth\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # Starting from one piece for each child, find the least number of pieces\n    # the child with the most can get, considering that all others should get distinct\n    # and lesser amounts. We will increase the number of candies for the child with\n    # the most until the remaining candies can be distributed among the others.\n    candies = 88\n    children = 8\n    minimum_candies_for_max_child = children * (children - 1) // 2\n    \n    while True:\n        # Calculate the total number of candies given to children other than\n        # the one with the most, which should be a sum of consecutive numbers.\n        total_candies_for_others = sum(range(1, children))\n        # Calculate the remaining candies for the child with the most.\n        remaining_candies = candies - total_candies_for_others\n        # Check if the remaining candies for the child with the most is already\n        # greater than the next expected candy count for the child with the second\n        # most candies. If it is, break the loop.\n        if remaining_candies > minimum_candies_for_max_child:\n            return remaining_candies\n        else:\n            # Increment the minimum required candies for the child with the most\n            # to maintain distinct counts of candies.\n            minimum_candies_for_max_child += 1\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # Since A starts and the ball must return to A after 3 passes,\n    # the only possibilities for the 2nd and 3rd passes are B, C, D (excluding A).\n    # 1st pass: A -> (B, C, or D)\n    # 2nd pass: (B, C, or D) -> (B, C, or D) but not to the one who passes it.\n    # 3rd pass: (B, C, or D) -> A\n    \n    # A can pass to 3 different people.\n    passes_from_A = 3\n    \n    # Those 3 can then pass to 2 other people (not back to A and not to themselves).\n    passes_from_second = 2\n    \n    # Therefore, the total number of different methods is the product of the possibilities of each pass.\n    total_methods = passes_from_A * passes_from_second\n    \n    return total_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    # Nicole had thrice as many tokens as Eddy.\n    equation1 = Eq(nicole, 3 * eddy)\n\n    # After Nicole used 130 tokens and Eddy used 38 tokens, they had 24 tokens left altogether.\n    equation2 = Eq((nicole - 130) + (eddy - 38), 24)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    return 3.5 * 0.8 + 5.5 * 0.8 + 4 / 5 * 1\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    total_salt = leroy_salt + lenny_salt\n    total_solution = 200 + 300\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    total_candy = 36\n    candy_eaten_each = (36 - (6 + 22)) // 2\n    valeria_candy_now = 22 + candy_eaten_each\n\n    return valeria_candy_now\n    \nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "from math import factorial\n\ndef solution():\n    total_people = 8\n    # Treat A and B as a single person when they stand together.\n    # There are 7 entities to arrange (6 individuals + 1 pair).\n    arrangements_with_ab_together = factorial(7)\n    \n    # For each of the arrangement, A and B can switch places.\n    arrangements_ab_positions = 2\n    \n    # Now calculate the number of ways in which C and D can be next to each other\n    # so we can subtract that from the total.\n    # There are 6 entities to arrange (5 individuals + 1 pair of C and D).\n    arrangements_with_cd_together = factorial(6)\n    \n    # For each of these arrangements, C and D can switch places as well.\n    arrangements_cd_positions = 2\n    \n    # Now we multiply the number of ways A and B can be together with the \n    # number of ways they can switch positions with each other.\n    valid_arrangements_with_ab = arrangements_with_ab_together * arrangements_ab_positions\n    \n    # And multiply the number of ways C and D can be together (which we want to exclude)\n    # with the number of ways they can switch positions.\n    invalid_arrangements_with_cd = arrangements_with_cd_together * arrangements_cd_positions\n    \n    # Subtract the invalid arrangements from the valid ones to get the final answer\n    ans = valid_arrangements_with_ab - invalid_arrangements_with_cd\n    \n    return ans\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    k = int((12 ** 50) ** (1 / 75))\n    return k\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    final_oranges = 133\n    thrown_away = 34\n    bought_oranges = 25\n\n    initial_oranges = final_oranges - bought_oranges + thrown_away\n\n    return initial_oranges\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi_operation(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    # Calculate 14 Psi 13\n    result1 = psi_operation(14, 13)\n    # Calculate (14 Psi 13) Psi 12\n    ans = psi_operation(result1, 12)\n\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    count = 0\n    for i in range(1, 20):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    total_students = 36\n    total_score = total_students * 89\n    boys_score = 91\n    girls_score = 88\n    \n    # Let g be the number of girls\n    for g in range(total_students + 1):\n        b = total_students - g  # The number of boys\n        if g * girls_score + b * boys_score == total_score:\n            return g\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Number of cats, dogs, and rabbit are known, so calculate their total legs\n    total_legs_except_birds = 2 * cat_legs + 2 * dog_legs + 1 * rabbit_legs\n\n    # Subtract total legs except birds from the total number of legs to get bird legs\n    bird_legs_total = 28 - total_legs_except_birds\n\n    # Divide bird legs by 2 to get the number of birds\n    num_birds = bird_legs_total / bird_legs\n\n    return int(num_birds)\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    original_team = 5\n    original_time = 6\n    new_fence_length_factor = 2\n    new_time = 5\n\n    # Calculate work done by one person in one hour (unitary rate)\n    one_person_work = 1 / (original_team * original_time)\n\n    # Total work for new fence (twice the original work)\n    total_work_new_fence = one_person_work * new_fence_length_factor * original_team * original_time\n\n    # Minimum number of people required to finish the new work in less than new_time hours\n    people_needed = total_work_new_fence / new_time\n\n    # Since we can't have a fraction of a person, we round up to the nearest whole number\n    from math import ceil\n    min_people = ceil(people_needed)\n\n    return min_people\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    # Given Alison needs 12 minutes to walk from the first floor to the fifth floor\n    # This means Alison crosses 5 - 1 = 4 flights\n    flights_per_12_minutes = 4\n    \n    # We need to find out how many flights Alison can cross in 30 minutes\n    # Calculate flights per minute\n    flights_per_minute = flights_per_12_minutes / 12\n    \n    # Calculate the number of flights in 30 minutes\n    flights_in_30_minutes = flights_per_minute * 30\n    \n    return flights_in_30_minutes\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_mass = 300\n    concentration_sugar = 0.35\n    sugar_mass = total_mass * concentration_sugar\n    water_mass = total_mass - sugar_mass\n    return water_mass\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    return cookies_per_gram * 21.6\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    n_base_8_str = '12345654321'\n    n_base_10 = int(n_base_8_str, 8)\n    \n    remainder_7 = n_base_10 % 7\n    remainder_9 = n_base_10 % 9\n    \n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(belt + wallet + handbag, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    return 96 // 3\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    # Combined age of two cats three years ago\n    combined_age_three_years_ago = 7\n    \n    # Age increase for each cat after three years plus additional four years\n    age_increase_per_cat = 3 + 4\n    \n    # Total age increase for both cats\n    total_age_increase = 2 * age_increase_per_cat\n    \n    # Combined age of two cats in four years' time\n    combined_age_in_four_years = combined_age_three_years_ago + total_age_increase\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    # Equation for buying 2 similar books and 3 similar magazines\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n\n    # Equation for buying 1 book and 1 magazine\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = (n * (n + 1) * (n + 2)) // 3\n    return ans\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    return 637 - 473\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    # Factorize the number 2016\n    factors = []\n    for i in range(1, int(2016**0.5)+1):\n        if 2016 % i == 0:\n            factors.extend([i, 2016 // i])\n    \n    # Get the set of unique factors\n    factors = set(factors)\n    \n    # Count the number of perfect squares\n    count_squares = sum([1 for factor in factors if (factor**0.5).is_integer()])\n\n    return count_squares\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    for i in range(1, 60):\n        if i + (i + 1) + (i + 2) == 60:\n            return i + 2\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    big_pail, small_pail = symbols('big_pail small_pail')\n    \n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n    \n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n    \n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A == 0 or C == 0:\n            continue\n        num1 = A * 101 + B * 10\n        num2 = C * 101 + D * 10\n        if num1 + num2 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # The worst-case scenario to ensure getting at least 1 yellow shirt involves\n    # picking all shirts of other colors first. So Annabella takes out all the\n    # orange, pink, and brown shirts.\n    total_other_shirts = 6 + 4 + 12  # Total number of non-yellow shirts\n\n    # After taking out all other shirts, the next shirt Annabella takes out\n    # must be yellow.\n    ans = total_other_shirts + 1  # +1 to get the first yellow shirt\n\n    return ans\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division\n\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    return 3.2 + 6.41 + 0.207\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    return (9 + 99 + 199 + 2999 + 39999) + (4/5)*5 + 1\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    # Define the equation\n    equation = Eq(6*x, 2 - (3*x - 16))\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Notice the difference between the numbers given in the sequence\n    difference1 = 80 - 73  # 7\n    difference2 = 73 - 66  # 7\n\n    # Both differences are the same, suggesting a constant decrement.\n    # We can assume the pattern continues with the same difference\n\n    # To find the missing number, apply the same difference to the first and second number\n    missing_number = 94 - difference1\n\n    return missing_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    for age in range(1, 7*6*4*3*2):  # We can use 7*6*4*3*2 as an upper bound as it's the LCM of divisors * 7\n        if all(age % i == 1 for i in [2, 3, 4, 6]) and age % 7 == 0:\n            return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    carton_ml = 1000\n\n    total_ml_sold = (wine_glass_ml * wine_glasses_sold) + (tumbler_ml * tumblers_sold)\n    cartons_needed = total_ml_sold / carton_ml\n\n    return int(cartons_needed) if total_ml_sold % carton_ml == 0 else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for initial quantities of avocados (A), peaches (P), and lemons (L)\n    A, P, L = symbols('A P L')\n\n    # Initial ratios given by the problem\n    original_ratio_eq = Eq(A/P, 2/9) & Eq(P/L, 9/8)\n\n    # New ratio of peaches to lemons after some fruit is sold\n    new_ratio_eq = Eq((P - 12)/(L - 60), 6/5)\n\n    # Express A and L in terms of P from the original ratio equations\n    ratios_solutions = solve(original_ratio_eq, (A, L))\n\n    # Substitute the expressions for A and L into the new ratio equation\n    substituted_eq = new_ratio_eq.subs({A: ratios_solutions[A], L: ratios_solutions[L]})\n\n    # Solve for the value of P (number of peaches before selling)\n    P_value = solve(substituted_eq, P)[0]\n\n    # Compute A and L using the solved P\n    A_value = ratios_solutions[A].subs(P, P_value)\n    L_value = ratios_solutions[L].subs(P, P_value)\n\n    # Calculate the remaining fruits after selling\n    avocados_left = A_value - 52\n    peaches_left = P_value - 12\n    lemons_left = L_value - 60\n\n    # Return the total number of fruits left\n    return avocados_left + peaches_left + lemons_left\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Since we only need the last digit of the number, we look at the pattern of the last digits for powers of 2.\n    # The pattern for the last digit of powers of 2 is 2, 4, 8, 6 and repeats every 4 steps.\n    # We only need to find the position of the last digit in this repeating pattern.\n\n    # We can find the equivalent position in the 4-step cycle as 859433 modulo 4\n    cycle_position = 859433 % 4\n\n    # Now we map the cycle position to the last digit. We create a dictionary to hold this mapping.\n    last_digit_mapping = {1: 2, 2: 4, 3: 8, 0: 6}\n\n    # Get the last digit from the mapping (if cycle position is 0, we take the last element of the cycle)\n    last_digit = last_digit_mapping[cycle_position if cycle_position != 0 else 4]\n\n    return last_digit\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    return 125 * 32 * 25 * 7\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    facing_students = 0\n    for i in range(1, 61):\n        if i % 3 == 0 and i % 5 == 0:  # multiple of both 3 and 5 will turn around twice\n            facing_students += 1\n        elif i % 3 == 0 or i % 5 == 0:  # multiple of either 3 or 5 will turn around once\n            continue\n        else:  # not a multiple, remains facing the teacher\n            facing_students += 1\n    return facing_students\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    lcm_of_2_4_6 = 12  # LCM of 2, 4, and 6 is 12 because they are all factors of 12\n    age = lcm_of_2_4_6 + 1  # age when divided by 2, 4, or 6 leaves remainder 1\n\n    # Check for multiple of 12 + 1 that leaves a remainder of 5 when divided by 7\n    while age % 7 != 5:\n        age += lcm_of_2_4_6  # Increment age by LCM of 2, 4, and 6 until we find the correct age\n\n    return age\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    jess, jill = symbols('jess jill')\n    \n    # Jill has six sweets for every five sweets Jess has\n    # jill = (6/5) * jess\n    equation1 = Eq(jill, (6/5) * jess)\n    \n    # After trading sweets:\n    # jess_new = jess + 8\n    # jill_new = jill - 8\n    # jill_new = (4/7) * jess_new\n    equation2 = Eq(jill - 8, (4/7) * (jess + 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n    \n    # The total number of sweets\n    total_sweets = solutions[jess] + solutions[jill]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    max_num = 0\n    # Consider all permutations of the numbers 1 through 7.\n    for num_cards in range(1, 8):  # We will try to use from 1 to all 7 cards\n        for comb in permutations(range(1, 8), num_cards):\n            current_num = int(\"\".join(map(str, comb)))\n            if all(current_num % int(str(d)) == 0 for d in comb):  # Check divisibility by all digits used\n                max_num = max(max_num, current_num)  # Update max_num if necessary\n    return max_num\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    ans = 0\n    for i in range(1, 900, 2):\n        sum_ = 0\n        for j in range(i, 900, 2):\n            sum_ += j\n            if sum_ == 900:\n                ans = max(ans, (j - i) // 2 + 1)\n                break\n            elif sum_ > 900:\n                break\n    return ans\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let a be Adam's weight, b be Ben's weight, and c be Carl's weight.\n    \n    # According to the question:\n    # Adam and Ben together weigh 102 kg, so a + b = 102.\n    # Ben and Carl together weigh 97 kg, so b + c = 97.\n    # Adam and Carl together weigh 93 kg, so a + c = 93.\n\n    # Adding the three equations we get:\n    # 2a + 2b + 2c = 102 + 97 + 93\n    # Dividing both sides by 2 to find the total weight:\n    total_weight = (102 + 97 + 93) / 2\n    \n    return int(total_weight)\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    remainder = 2\n    divisor = 53\n    quotient = 120 // divisor  # Find the quotient when 120 is divided by 53\n    smallest_number = (quotient + 1) * divisor + remainder  # Calculate the next number that gives a remainder of 2\n    \n    return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    ans = min(numbers)\n    return ans\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_meters = 2\n    height_centimeters = 2\n    height_in_meters = height_meters + (height_centimeters / 100)\n    return height_in_meters\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test = 60\n    second_test = first_test * 1.25\n    third_test = second_test * 0.80\n\n    total_marks = first_test + second_test + third_test\n\n    return total_marks\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_saving = 13\n    february_saving = 18\n    march_saving = 5\n    total_savings = january_saving + february_saving + march_saving\n    mean_saving = total_savings / 3\n    return mean_saving\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    return is_prime(233)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    total = 0\n    for i in range(7, 106, 7):\n        total += i**2\n    return total\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum_of_money = 4.22 + 31.49 + 0.76\n    return sum_of_money\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(130, 151))\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    first_multiple = 56 // 4 if 56 % 4 == 0 else (56 // 4 + 1)\n    last_multiple = 92 // 4\n    count_multiples = last_multiple - first_multiple + 1\n    return count_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We have the following three congruences:\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    congruences = [(2, 3), (3, 4), (4, 5)]\n\n    # Using the Chinese Remainder Theorem to solve for x\n    x, _ = solve_congruence(*congruences)\n\n    # Since we want a positive whole number less than 100, we will make sure the result fits into this range.\n    while x < 100:\n        if x > 0:\n            return x\n        x += 3*4*5  # Increment x by the least common multiple of 3, 4, and 5 until it is less than 100\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    t = symbols('t')  # time to travel back upstream\n\n    # Speed of the ship in still water\n    v_ship = 15  # in km/h\n\n    # Distance between Magic Town and Super Town\n    distance = 144  # in km\n\n    # Time it takes to travel downstream\n    t_downstream = 8  # in hours\n\n    # Downstream speed\n    v_stream = distance / t_downstream - v_ship  # in km/h\n\n    # Equation: the distance equals the speed of the ship against the stream times the time\n    equation = Eq((v_ship - v_stream) * t, distance)\n\n    # Solve the equation to find the time to travel back upstream\n    solutions = solve(equation, t)\n\n    # Return the time required to come back from Super Town to Magic Town\n    return solutions[0]\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    return comb(15, 2)\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote:\n    # k - the amount of food the kangaroo eats per day\n    # h - the amount of food the hippo eats per day, which is k + 45\n\n    k = symbols('k')\n    h = k + 45\n\n    # After 20 days, the total amount of food the hippo has eaten is 20 * h\n    # After 20 days, the total amount of food the kangaroo has eaten is 20 * k\n    # We are given that the hippo has eaten 10 times the amount of the kangaroo after 20 days\n\n    equation = Eq(20 * h, 10 * (20 * k))\n\n    # Now solve for k\n    k_value = solve(equation, k)[0]\n\n    # Now we can calculate h\n    h_value = k_value + 45\n\n    # The hippo has consumed h amount of food per day for 20 days\n    total_food_hippo = 20 * h_value\n\n    return total_food_hippo\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    waiting_time = timedelta(hours=1, minutes=25)\n    start_time = datetime.strptime(\"15:15\", \"%H:%M\")\n    meet_time = start_time + waiting_time\n    return meet_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Given remainder conditions\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for j in range(2, 21) for i in range(j, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Rate of work for worker A\n    worker_A_rate = 1 / 15\n    \n    # Rate of work for worker B\n    worker_B_rate = 1 / 20\n    \n    # Combined rate of work when both work together\n    combined_rate = worker_A_rate + worker_B_rate\n    \n    # Work done in the 2 days both worked together\n    work_done = 2 * combined_rate\n    \n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    \n    # Time for worker A to finish the remaining work\n    remaining_time = remaining_work / worker_A_rate\n    \n    return remaining_time\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # You take one green and one blue, that's 2 balls,\n    # but you could have either color.\n    # So to ensure you get at least two of the same color,\n    # you need to take one more. That's 3 balls in total.\n    return 3\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    zodiac_signs = 12\n    # To ensure that there are at least 11 students with the same zodiac sign,\n    # we use the Pigeonhole Principle (assuming the worst-case scenario where each zodiac sign \n    # is evenly distributed among the students before we get 11 students with the same sign).\n    students_needed = (zodiac_signs - 1) * 11 + 1\n    \n    return students_needed\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef count_valid_permutations(perm):\n    # Find the indices for A, B, C, D, E, F, G\n    A_index = perm.index('A')\n    B_index = perm.index('B')\n    C_index = perm.index('C')\n    D_index = perm.index('D')\n    E_index = perm.index('E')\n    F_index = perm.index('F')\n    G_index = perm.index('G')\n\n    # Check if A is between B and C\n    if not (min(B_index, C_index) < A_index < max(B_index, C_index)):\n        return False\n\n    # Check if D and E are together\n    if abs(D_index - E_index) != 1:\n        return False\n    \n    # Check if F and G are not adjacent\n    if abs(F_index - G_index) == 1:\n        return False\n    \n    return True\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for perm in permutations(students):\n        if count_valid_permutations(perm):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Use the Pigeonhole principle. In the worst case, she picks all yellow and white balls.\n    # After that, any next ball must be black ensuring 10 balls of the same color.\n    yellow_balls = 5\n    white_balls = 15\n    # Since she wants 10 balls of the same color, she can pick all yellow and white balls.\n    # Then, she continues to pick black balls until she gets 10 black ones.\n    min_balls_to_take = yellow_balls + white_balls + (10 - 1) + 1\n\n    return min_balls_to_take\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    seat_number_start = 3\n    total_children = 9\n    \n    # Calculate the seat number that gets the last candy\n    last_candy_seat_number = (seat_number_start + (total_candies - 1)) % total_children\n    \n    # If last_candy_seat_number is 0, that means the last seat (9th seat) receives the candy\n    if last_candy_seat_number == 0:\n        last_candy_seat_number = total_children\n    \n    return last_candy_seat_number\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    number_of_terms = 60\n    common_difference = 3\n    last_term = first_term + (number_of_terms - 1) * common_difference\n\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n\n    # Compute the least common multiple of 7 and 3\n    days_until_next = lcm(7, 3)\n\n    return days_until_next + 2  # plus 2 because they eat together on the 2nd\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Using the Inclusion-Exclusion Principle\n    both = children_with_dogs + children_with_cats - total_children\n    \n    return both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    n = 19\n    total_sum = (n * (n + 1)) // 2\n    return total_sum\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    range_of_data = max(data) - min(data)\n    return range_of_data\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirts, shirts = symbols('skirts shirts')\n\n    # Number of shirts is 36 less than the number of skirts\n    equation1 = Eq(shirts, skirts - 36)\n\n    # After selling 2/3 of her shirts and 5/6 of her skirts, she had 72 shirts and skirts left\n    equation2 = Eq((1 - 2/3) * shirts + (1 - 5/6) * skirts, 72)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (skirts, shirts))\n\n    # Get the number of skirts\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    total_saving = monthly_saving * total_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    length_of_material = 100\n    width_of_material = 80\n    length_of_cloak = 5\n    width_of_cloak = 4\n\n    cloaks_from_length = length_of_material // length_of_cloak\n    cloaks_from_width = width_of_material // width_of_cloak\n\n    total_cloaks = cloaks_from_length * cloaks_from_width\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Given data\n    speed_to = 20\n    total_distance = 120 * 2  # Going and returning\n    avg_speed_desired = 30\n\n    # Let the speed at which he returns be x miles/hour\n    speed_from = symbols('speed_from')\n    \n    # The time taken to travel to the place is distance/speed\n    time_to = total_distance / (2 * speed_to)\n    \n    # The time taken to return is distance/speed, which we define as an equation\n    # Average speed is total distance / total time\n    # We want the average speed to be 30 miles/hour\n    eq = Eq(total_distance, avg_speed_desired * (time_to + (120 / speed_from)))\n    \n    # Solve the equation for speed_from\n    speed_return = solve(eq, speed_from)\n\n    return speed_return[0]\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    ans = solve_congruence(*congruences)\n\n    # Check for solutions within the specified range (400-800)\n    start, step = ans[0], ans[1]\n    count = (400 - start) // step\n    biscuits = start if count < 0 else start + count * step\n    while biscuits < 400:\n        biscuits += step\n    return biscuits if biscuits <= 800 else None\n\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    # Total ratio units\n    total_ratio_units = nell_ratio + joe_ratio\n\n    # Since 4 parts correspond to 24 sweets, we find the number of sweets per part\n    sweets_per_ratio_unit = nell_sweets / nell_ratio\n\n    # Total sweets\n    total_sweets = sweets_per_ratio_unit * total_ratio_units\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    count = 0\n    \n    # Count the number of digits for numbers 1-9 (one digit each)\n    count += 1 * 9\n    \n    # Count the number of digits for numbers 10-34 (two digits each)\n    count += 2 * (34 - 9)\n\n    return count\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make 1 cut, which results in 2 pieces.\n    # To obtain 5 pieces, the man has to make 4 cuts.\n    # Therefore, we simply multiply the number of cuts by the time per cut.\n    cuts_needed = 4\n    time_per_cut = 2\n    total_time = cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    ans = 31.6 * 7\n    return ans\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    total = 120 * 3\n    new_average = 110\n    new_total = new_average * 4\n    number_to_add = new_total - total\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for each individual's number of marbles\n    jovan, sean, heman = symbols('jovan sean heman')\n\n    # Set up the equations according to the problem\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(heman, jovan + 240)\n\n    # Solve the system of equations for the variables\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, heman))\n\n    # Calculate the total number of marbles by adding the number of marbles for each individual\n    total_marbles = solutions[jovan] + solutions[sean] + solutions[heman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if (140 + m) == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    total_hay = horses_initial * days_initial\n    days_final = total_hay / horses_final\n\n    return days_final\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = num_terms * (first_term + last_term) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    numbers = [6, 9, 12]\n    gcf = gcd(numbers[0], numbers[1])\n    gcf = gcd(gcf, numbers[2])\n    return gcf\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the variables for each person's mass\n    john, andy, charles = symbols('john andy charles')\n\n    # Given equations\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # The total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_length = 900\n    companies = 4\n    days = 5\n    \n    # Total work done by 4 companies in 5 days\n    total_work_done = companies * days\n    \n    # Length per company per day\n    length_per_company_per_day = total_length / total_work_done\n    \n    return length_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_set_price = 78\n    sock_pair_price = 12\n    aliens = 6  # The alien and his 5 brothers\n    legs = 5  # Number of legs per alien\n\n    # Since each alien has 5 legs, and a set of 5 individual shoes is for one alien\n    total_shoe_cost = shoe_set_price * aliens\n    \n    # Pairs of socks needed (a pair for each leg)\n    total_sock_pairs_needed = legs * aliens\n\n    # Since each pair of socks contains 2 socks, and each leg needs only one sock, divide by 2\n    total_sock_pairs_cost = (total_sock_pairs_needed / 2) * sock_pair_price\n\n    total_cost = total_shoe_cost + total_sock_pairs_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    deviations = [abs(x - data_mean) for x in data]\n    mad = mean(deviations)\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "from math import comb\n\ndef solution():\n    total_oranges = 13\n    total_kids = 3\n    \n    # Since someone might not get any orange, we can give 1 virtual orange to each kid to ensure each kid gets something.\n    # Then the remaining oranges (total_oranges - total_kids) will be distributed.\n    # After that, we subtract the virtual oranges we added.\n    adjusted_oranges = total_oranges + total_kids\n    \n    # Calculate combinations with repetition\n    ans = comb(adjusted_oranges - 1, total_kids - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Bud, Pip, Tom = symbols('Bud Pip Tom')\n\n    equation1 = Eq(Bud, 3 * Pip)\n    equation2 = Eq(Tom, 2 * Bud)\n    equation3 = Eq(Bud + Pip + Tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (Bud, Pip, Tom))\n\n    return solutions[Tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # We iterate through the possible digits for a 4-digit number\n    for digit1 in range(10):\n        for digit2 in range(10):\n            for digit3 in range(10):\n                for digit4 in range(10):\n                    original_number = digit1*1000 + digit2*100 + digit3*10 + digit4\n                    new_number = digit4*1000 + digit2*100 + digit3*10 + digit1\n                    # If the new number is larger by 5877, we found our solution\n                    if new_number - original_number == 5877:\n                        return original_number\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d represent the number of David's $0.50 cookies\n    # Let j represent the number of Jeremy's $0.50 cookies\n    # Let t represent the number of Jeremy's $0.10 cookies\n    d, j, t = symbols('d j t')\n\n    # David's cookies cost thrice as much as Jeremy's cookies.\n    # Since David only has $0.50 cookies:\n    # Cost of David's cookies = 3 * (Cost of Jeremy's cookies)\n    # 0.50 * d = 3 * (0.50 * j + 0.10 * t)\n\n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies\n    # j = (3/5) * t\n\n    # There were 60 fewer $0.10 cookies than $0.50 cookies\n    # t + 60 = d\n\n    # David had only $0.50 cookies\n    d_value = 1\n    equations = (\n        Eq(0.50 * d, 3 * (0.50 * j + 0.10 * t)),\n        Eq(j, (3/5) * t),\n        Eq(t + 60, d_value)\n    )\n\n    # Solve the system of equations\n    solutions = solve(equations, (d, j, t))\n\n    # Jeremy's cookies worth = $0.50 * j + $0.10 * t\n    jeremy_cookies_worth = 0.50 * solutions[j] + 0.10 * solutions[t]\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    candy_combinations = list(combinations(cards, 2))\n    candice_combinations = list(combinations(cards, 3))\n\n    candy_products = {a * b: (a, b) for a, b in candy_combinations}\n    candice_products = {a * b * c: (a, b, c) for a, b, c in candice_combinations}\n\n    common_products = set(candy_products).intersection(set(candice_products))\n\n    for product in common_products:\n        chosen_numbers = set(candy_products[product] + candice_products[product])\n        for card in cards:\n            if card not in chosen_numbers:\n                return card\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_values = [49, 80, 32, 66, 8, 58]\n    ans = list(filter(lambda x: (x-4) % 7 == 0, possible_values))[0]\n    return ans\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_first_and_fifth = 20\n    distance_per_interval = distance_between_first_and_fifth / (5 - 1)\n    \n    total_distance = 200\n    num_intervals = total_distance / distance_per_interval\n    \n    total_trees = num_intervals + 1  # Include the first tree\n    \n    return int(total_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12\n    rate_B = 1 / 8\n    combined_rate = rate_A + rate_B\n    time_to_fill_half_tank = (1/2) / combined_rate\n    return time_to_fill_half_tank\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # The original equation\n    original_equation = (36 * 21) / (6 * 7)\n    \n    # Jason's first simplification is correct since multiplication is associative\n    # and division can be distributed over multiplication\n    step1 = 36 * 21 / 6 * 7  # Equal to original_equation\n    # Jason's mistake is in the next step, where he incorrectly associates division and multiplication\n    # Correct step: Divide 36 by 6 first, then proceed with multiplication\n    correct_step2 = (36 / 6) * 21 * 7\n    \n    # Checking Jason's answer\n    jasons_answer = 6 * 7 * 21\n    if original_equation == jasons_answer:\n        ans = jasons_answer  # If by accident Jason's answer was correct\n    else:\n        ans = correct_step2  # The correct answer after fixing the mistake\n\n    return ans\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    side_of_larger_square = 1\n\n    while True:\n        total_people = (side_of_larger_square ** 2)\n        boys = total_people - girls\n        side_of_smaller_square = int(boys ** 0.5)  # sqrt of boys\n\n        if side_of_smaller_square ** 2 == boys and (side_of_larger_square - side_of_smaller_square) * 2 + (side_of_smaller_square ** 2) == total_people:\n            return boys\n\n        side_of_larger_square += 1\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    # Ann is the 8th person\n    ann_position = 8\n    # There are 3 people between Ann and David\n    people_between = 3\n    # David is the second last, meaning there is 1 person behind David\n\n    # Calculate David's position based on Ann's position and the number of people between them\n    david_position = ann_position + people_between + 1\n    # Total number of people in the queue is David's position plus 1 (the person behind David)\n    total_people = david_position + 1\n\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    pages_with_8 = 22\n    count = 0\n    page = 1\n    while count < pages_with_8:\n        if '8' in str(page):\n            count += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    sum_of_numbers = 555\n\n    third_number = sum_of_numbers - first_number - second_number\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(n * 12, 8 * 9)\n    \n    ans = solve(equation, n)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To ensure we have 29 balls of one color, 28 of another, and 10 of the last color\n    # we consider the worst-case scenario.\n\n    # If we want 29 balls of one color, we need to consider the scenario in which\n    # we pick all balls of the other two colors first. That is, we pick all 40 red balls\n    # and all 30 white balls, which are not enough for 29 of the same color.\n    red_and_white = 40 + 30\n\n    # Now, add 28 more balls of a color (blue), which will still not assure us 29 of the\n    # same color, because we could have 28 blue and 1 red or white.\n    red_white_blue = red_and_white + 28\n\n    # Finally, add one last ball to ensure we have 29 of at least one color.\n    # At this stage, we are guaranteed to have 29 of either red, white, or blue,\n    # because even if we pick the remaining balls from the least obtained color,\n    # that would make it 29.\n    total_balls = red_white_blue + 1\n\n    return total_balls\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_height = 9\n    climb_up = 3\n    slide_down = 1\n    net_climb = climb_up - slide_down\n    day = 0\n    height_after_last_day = total_height - climb_up\n\n    while day * net_climb < height_after_last_day:\n        day += 1\n    \n    return day + 1\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 6 * 1.5 + 4 * x - 19\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england_mountain = 978\n    height_world_highest_mountain = 8848\n\n    difference = height_world_highest_mountain - height_england_mountain\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    for number in primes:\n        if number < 50 and number % 3 == 2 and number % 5 == 2:\n            return number\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the amounts Alicia, Beth and Casey had originally\n    alicia, beth, casey = symbols('alicia beth casey')\n    # Alicia spent half of her money\n    alicia_spent = alicia / 2\n    # Beth spent $60\n    beth_spent = 60\n    # Casey spent three times as much as Alicia did\n    casey_spent = 3 * alicia_spent\n    # Equations based on the conditions\n    equation1 = Eq(alicia - alicia_spent, beth - beth_spent)\n    equation2 = Eq(alicia - alicia_spent, casey - casey_spent)\n    equation3 = Eq(alicia + beth + casey, 900)\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n    # Returning the amount Alicia had originally\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since the factorial of any number greater than 4 ends with a last digit of 0\n    # (because it contains the product of 2 and 5), the last digit of 2014! is 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    factors = [2, 2, 3, 8, 5, 5, 5]\n    product = 1\n    for factor in factors:\n        product *= factor\n    count_zeros = 0\n    while product % 10 == 0:\n        product //= 10\n        count_zeros += 1\n    return count_zeros\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6\n    denominator = 20\n    target_numerator = 30\n    target_denominator = (denominator * target_numerator) // numerator\n    \n    return target_denominator\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    # Let's represent the number as x.\n    # The reverse operations would be:\n    # {(1 + 8) * 8} / 3 = x + 6\n    # Solving for x:\n\n    x = ((1 + 8) * 8) / 3 - 6\n    return x\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_number = symbols('original_number')\n    new_number = original_number * 10\n    equation = Eq(original_number + new_number, 253)\n    \n    original_number_value = solve(equation, original_number)\n    \n    return original_number_value[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    # Total number of cookies eaten in five days\n    total_cookies = 100\n    # The difference in the number of cookies eaten each day\n    difference = 6\n    # Number of days\n    num_days = 5\n    # Using the formula for the sum of an arithmetic series: total_cookies = (num_days/2) * (2*first_day + (num_days - 1) * difference)\n    # Rearrange the equation to solve for the first day:\n    # 2*first_day + (num_days - 1) * difference = (2*total_cookies) / num_days\n    # 2*first_day = (2*total_cookies) / num_days - (num_days - 1) * difference\n    # first_day = ((2*total_cookies) / num_days - (num_days - 1) * difference) / 2\n    first_day = ((2 * total_cookies) / num_days - (num_days - 1) * difference) / 2\n\n    return int(first_day)\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    number_of_boxes = 8\n\n    remaining_seashells = (initial_seashells - given_to_sister - given_to_friend + picked_seashells)\n    seashells_per_box = remaining_seashells // number_of_boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for num in range(1, 90):\n        if num % 9 == 0 and (num + 1) % 5 == 0:\n            is_prime = True\n            for i in range(2, int((num - 1) ** 0.5) + 1):\n                if (num - 1) % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return num\n    return None\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n    \n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n    \n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n    \n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n    \n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    amount = 250\n\n    ans = (percentage / 100) * amount\n    \n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n    \n    # 4 men and 4 women can be arranged separately in 4! ways each.\n    # First, choose an arrangement for the men (4! ways),\n    # then for each man's position, there's an arrangement for the women (another 4! ways).\n    # Also, the line can start either with a man or with a woman so we need to multiply by 2.\n    ans = 2 * (factorial(4) ** 2)\n    \n    return ans\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"HAPPY\")\n    repeat_p = \"HAPPY\".count(\"P\")\n    \n    ans = factorial(total_letters) // factorial(repeat_p)\n    return ans\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for page in range(1, 481):\n        count += str(page).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_3_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_3_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n    \n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n    \n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n    \n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n    \n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    total_children = 12 / (1 - (2/5))\n    boys = (2/5) * total_children\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "from sympy import divisors\n\ndef solution():\n    num = 96\n    factors = divisors(num)\n    return len(factors)\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_Peter = 9\n    people_behind_John = 10\n    Peter_and_John = 2  # Since both Peter and John are counted\n    total_people = people_in_front_of_Peter + Peter_and_John + people_behind_John\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 900 * 0.10 * 0.60\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Assuming that St Petersburg is 3 hours ahead of England\n    time_difference = 3\n    \n    # Start time in England at 12 noon\n    departure_time = datetime.strptime('12:00', '%H:%M')\n    \n    # Flight duration\n    flight_duration = timedelta(hours=4)\n    \n    # Arrival time in England time zone\n    arrival_time_england = departure_time + flight_duration\n    \n    # Adjust time for St Petersburg time zone\n    arrival_time_st_petersburg = arrival_time_england + timedelta(hours=time_difference)\n\n    # Format output to match requested format (hour without leading zero)\n    arrival_time_str = arrival_time_st_petersburg.strftime('%-I:%M %p')\n\n    return arrival_time_str\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n    \n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 2):\n        N, O = perm\n        if N != 0: # N shouldn't be 0 as it is a two-digit number\n            NO = 10 * N + O\n            return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum([50 - i if i % 2 == 0 else - (50 - i) for i in range(0, 20, 2)])\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # Since there are only 3 different colors,\n    # Cindy needs to pick one more than 3 times the number of colors\n    # to ensure she gets at least one pair of the same color.\n    # This is an application of the Pigeonhole Principle.\n\n    num_colors = 3\n    socks_to_pick = (num_colors * 1) + 1\n    \n    return socks_to_pick\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 1000\n    weight_in_kg = 2.5\n    ans = weight_in_kg * kg_to_grams\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3/8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Calculate the total number of children in the classroom\n    total_children = total_sweets // (fraction_boys * sweets_per_boy + (1 - fraction_boys) * sweets_per_girl)\n\n    # Calculate the number of girls in the classroom\n    number_of_girls = total_children * (1 - fraction_boys)\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_factor = 1 / 5  # 1 km in the ground is represented by 5 cm on the map\n    distance_map_cm = 12  # distance on the map in cm\n    distance_ground_km = distance_map_cm * scale_factor  # distance on the ground in km\n    return distance_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(102-i))\n    \n    return product\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kph = 7.2  # kilometers per hour\n    time_seconds = 24  # time in seconds\n\n    # Convert speed to meters per second (m/s)\n    speed_mps = (speed_kph * 1000) / (60 * 60)\n\n    # Calculate distance in meters\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n    \n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n    \n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n    \n    return solutions[tommy]\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let the number be n\n    n = symbols('n')\n    \n    # Setting up the equation based on remainders\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n    \n    # Sum of quotients when n divided by 6, 7, and 8 is 265\n    eq4 = Eq((n // 6) + (n // 7) + (n // 8), 265)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), n)\n    \n    # Return the positive solution as the number\n    ans = [s for s in solutions if s.is_real and s > 0]\n    return ans[0]\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    maths_students = 70\n    language_students = 54\n    \n    both_classes = maths_students + language_students - total_students\n    only_maths = maths_students - both_classes\n    \n    return only_maths\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3, 2)\n    for i in range(3, 10):\n        result *= Fraction(i, i+1)\n    return float(result)\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Explanation is not required, just verification.\n    # According to the given knowledge point, we know:\n    # A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n    # A composite number is a positive integer that has at least one positive divisor other than one or the number itself.\n    # In other words, a composite number is any positive integer greater than one that is not a prime number.\n\n    # Check if Pip's statement is correct:\n    is_pip_correct = True  # Assume Pip's statement is correct\n\n    # Check the definition of a composite number:\n    for i in range(2, 11):  # Find composite numbers up to 10\n        prime = True  # Assume current number is prime\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False  # Number is not prime\n                break\n        if prime and i != 1:\n            continue  # Skip prime numbers\n        if i == 1:\n            is_pip_correct = False  # 1 is not a composite number, but it's not prime either.\n            break\n\n    # Return True only if Pip's statement is completely correct, which it is not\n    return is_pip_correct\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):\n        for x2 in range(1, 12):\n            if x2 != x1:\n                for x3 in range(1, 12):\n                    if x3 != x1 and x3 != x2:\n                        x4 = 12 - (x1 + x2 + x3)\n                        if x4 > 0 and x4 != x1 and x4 != x2 and x4 != x3:\n                            count += 1\n    return count // 24  # Dividing by the number of permutations for each group\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    i = 0\n    while True:\n        num = 40309 + i\n        if str(num) == str(num)[::-1]:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kasia_keeps = 13\n    sweets_shared = total_sweets - kasia_keeps\n    lucie_gets = sweets_shared / 2\n    lucie_gives_to_joan = (2 / 7) * lucie_gets\n    lucie_keeps = lucie_gets - lucie_gives_to_joan\n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    total_diff = 52\n\n    # Start from the difference of 2 because the smallest square that can have\n    # a difference in the number of boys and girls is 3 x 3 (8 boys and 1 girl).\n    for side_length in range(3, 10000, 2):  # The side length of the square must be odd\n        boys = (side_length * 4) - 4  # Boys are on the outer layer, 4 sides, minus 4 corners\n        girls = (side_length - 2) ** 2  # Girls form the next inner square\n        diff = boys - girls\n        \n        if diff == total_diff:\n            total_students = (side_length ** 2)  # Total = side_length squared\n            return total_students\n    \n    return None\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let's assume the total pension to be 1 (as a whole)\n    friday_expense = 1 / 4     # He spends one quarter on Friday\n    remaining_after_friday = 1 - friday_expense\n\n    saturday_expense = remaining_after_friday / 3   # He spends one third of what remains on Saturday\n    remaining_after_saturday = remaining_after_friday - saturday_expense\n\n    return remaining_after_saturday   # This is the fraction left for the rest of the week\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the total litres of water needed for the fish tank\n    # Using a 5-litre pail, 4 litres will overflow, so the tank holds (x - 4) litres\n    # Using a 3-litre pail, he needs x/3 + 4 more pails of 3 litres each\n    # So the equation is: (x/3 + 4) * 3 = x\n    # Simplify the equation to find x:\n    x = symbols('x')\n    equation = Eq((x / 3 + 4) * 3, x + 4)\n    solution = solve(equation, x)[0]\n    return solution\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults_to_children = 1 / 4\n    adults = total_people / (1 + ratio_adults_to_children)\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    school_bags = 3  # There are 3 different types of school bags\n    pencil_boxes = 4  # There are 4 different types of pencil boxes\n\n    # Applying the principle of multiplication\n    ans = school_bags * pencil_boxes\n\n    return ans\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the original number of apples is 3x and pears is 4x\n    apples, x = symbols('apples x')\n    # Original ratio\n    original_apples = 3 * x\n    original_pears = 4 * x\n\n    # After replacement\n    new_apples = original_apples + 36\n    new_pears = original_pears - 36\n\n    # Given condition: the number of apples becomes 1.5 times the number of pears\n    equation = Eq(new_apples, 1.5 * new_pears)\n\n    # Solve for x\n    solutions = solve((equation, Eq(original_apples, apples)), (x, apples))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    # The repeating decimal pattern is \"6129303\"\n    pattern = \"6129303\"\n    pattern_sum = sum(int(digit) for digit in pattern)  # Sum of digits in one full pattern\n    \n    full_patterns = 212 // len(pattern)  # Number of full repeating patterns within 212 digits\n    remaining_digits = 212 % len(pattern)  # Number of digits in the partial pattern\n    \n    # Sum of digits for full patterns\n    full_pattern_sum = full_patterns * pattern_sum\n    \n    # Sum of remaining digits\n    remaining_sum = sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    # Total sum\n    total_sum = full_pattern_sum + remaining_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # Let x be the side of the original square\n    # Then the total soldiers originally is x^2\n    # After adding 31 soldiers and 1 row and 1 column, the total becomes (x + 1)^2\n    # So we have the equation x^2 + 31 = (x + 1)^2 to solve for x\n    \n    # Solve the equation for x\n    x = 1\n    while x**2 + 31 != (x + 1)**2:\n        x += 1\n    \n    # Now we find the total soldiers which is (x + 1)^2\n    total_soldiers = (x + 1)**2\n    return total_soldiers\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_needed = ginkgo_trees - 1\n    return willow_trees_needed\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    ans = (36 / 100) * 50\n    return ans\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    n = 1\n    zeros = 0\n    factorial_5s = 0\n\n    while zeros < 28:\n        n += 1\n        k = n\n        while k % 5 == 0:\n            factorial_5s += 1\n            k //= 5\n        zeros = factorial_5s\n\n    return n - 1\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    ans = (2/3) * 729\n    return ans\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Since we have multiple socks of green and white,\n    # we could have 7 green and 4 white and still not have two pairs of the same color.\n    # Then, the next sock (regardless of color) will assure us to have at least\n    # two pairs of the same color (could be green or white, or even a yellow one if we pick it).\n    # But, if we picked the single black sock or one of the two red socks first,\n    # we would need one extra sock to assure the two pairs.\n    \n    # Total socks picked without guarantee of two pairs = green + white + red or black\n    socks_without_pair = 7 + 4 + 1  # We take one red or the single black\n\n    # The next sock we pick guarantees the two pairs\n    socks_for_two_pairs = socks_without_pair + 1\n\n    return socks_for_two_pairs\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09\n    chocolate_bar_price = 0.55\n    ten_pound_note = 10.00\n\n    total_cost = (5 * lemonade_price) + (6 * chocolate_bar_price)\n    change = ten_pound_note - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    vowels_count = factorial(3)     # Total permutations of vowels A, I, O\n    consonants_count = factorial(4) # Total permutations of consonants R, N, B, W\n    \n    total_permutations = factorial(7) # Total permutations of the word RAINBOW\n    \n    # Total permutations where vowels are together treated as a single unit\n    permutations_with_vowels_together = vowels_count * factorial(5)\n    \n    # Subtracting the permutations where vowels are together from total permutations\n    ans = total_permutations - permutations_with_vowels_together\n    return ans\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '3728'\n    all_possible_numbers = [''.join(p) for p in permutations(digits)]\n    \n    odd_numbers = [int(x) for x in all_possible_numbers if int(x) % 2 != 0]\n    \n    min_odd_number = min(odd_numbers)\n\n    return min_odd_number\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if 36 % num == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    num_people = 12\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)\n    equation2 = Eq(3 * chickens, 5 * cows)\n    equation3 = Eq(2 * goats, 10 * cows)\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    total_feet = 2 * solutions[chickens] + 4 * (solutions[goats] + solutions[cows])\n\n    return total_feet\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_current = symbols('sam_current')\n    equation = Eq(sam_current + 4, 2 * (sam_current - 4))\n\n    sam_age = solve(equation, sam_current)[0]\n\n    return sam_age\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # S_n = n/2 * (2a + (n - 1)d), where S_n is the sum of the first n terms,\n    # a is the first term, and d is the common difference.\n    # Using the formula for the sum of an arithmetic progression:\n    # S_10 = 10/2 * (2a + (10 - 1)d) = 20\n    # S_30 = 30/2 * (2a + (30 - 1)d) = 90\n    \n    # From the first equation (for S_10):\n    # 5 * (2a + 9d) = 20 => 2a + 9d = 4\n    # From the second equation (for S_30):\n    # 15 * (2a + 29d) = 90 => 2a + 29d = 6\n\n    # Now we have a system of linear equations:\n    # 2a + 9d = 4  (1)\n    # 2a + 29d = 6 (2)\n\n    # Subtract (1) from (2):\n    # (2a + 29d) - (2a + 9d) = 6 - 4 => 20d = 2\n    \n    # Solve for d:\n    d = 2 / 20\n\n    return d\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_amy_to_penny = 5/4\n\n    # stickers_penny is the number of stickers Penny has\n    stickers_penny = total_stickers / (1 + ratio_amy_to_penny)\n\n    return int(stickers_penny)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for page in range(1, 151):\n        count += str(page).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes_per_day = 9\n    days = 6\n    \n    words_per_day = words_per_minute * minutes_per_day\n    total_words = words_per_day * days\n    \n    return total_words\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6  # speed in kilometers per hour\n    time_s = 300  # time in seconds\n\n    # Convert speed to meters per second (1 km/h = 1000 m/3600 s)\n    speed_mps = speed_kmh * (1000/3600)\n\n    # Calculate distance travelled in meters\n    distance_m = speed_mps * time_s\n\n    return distance_m\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let x be the total number of apples Jack has.\n    # According to the problem:\n    # Jack sold 40 apples, which is 4/7 of the apples he brought \n    # => apples brought = 7/4 * 40\n    apples_brought = (7/4) * 40\n    \n    # He brought 1/2 of all apples he has\n    # => apples brought = 1/2 * x\n    # Therefore, 1/2 * x = 7/4 * 40\n    x = (7/4 * 40) * 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let the four numbers in a row be a, b, c, d\n    # The average of the first two numbers is 10 => (a + b) / 2 = 10 => a + b = 20\n    # The average of the last two numbers is 22 => (c + d) / 2 = 22 => c + d = 44\n    # The average of the first and last numbers is 14 => (a + d) / 2 = 14 => a + d = 28\n    \n    # We need to find the average of the two middle numbers b and c => (b + c) / 2\n    \n    # We have two equations now:\n    # a + b = 20 (1)\n    # a + d = 28 (2)\n    \n    # To find the sum of b + c, we can subtract equation (2) from the sum of (a + b + c + d)\n    # a + b + c + d = 20 + 44 = 64\n    # Subtracting a + d from the total sum we get:\n    # b + c = 64 - (a + d)\n    # b + c = 64 - 28\n    # b + c = 36\n    \n    # Now, the average of b and c is (b + c) / 2\n    avg_middle_numbers = 36 / 2\n    return avg_middle_numbers\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    ans = sum(range(200, 209, 2))\n    return ans\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    closest_num = None\n    min_difference = float('inf')\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        difference = abs(num - 2978)\n        if difference < min_difference:\n            min_difference = difference\n            closest_num = num\n    return closest_num\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    # Using the formula for maximum number of regions created by n lines:\n    # R(n) = n(n+1)/2 + 1\n    # where R(n) is the maximum number of regions created by n lines\n    n = 10\n    ans = n * (n + 1) // 2 + 1\n    return ans\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    n = (last_term - first_term) // difference + 1\n\n    # Calculate the sum using the formula for the sum of an arithmetic sequence:\n    # sum = n/2 * (first_term + last_term)\n    total_seats = n * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for i in range(200, 501):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    # Prime factorization of 7007\n    prime_factors = []\n    n = 7007\n    for i in range(2, n + 1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n\n    # Since we need two 2-digit numbers and 7007 is a product of them,\n    # we shall pair the prime factors to form two 2-digit numbers\n    # Possible pairs that form 2-digit numbers are (7, 73) and (7 * 7, 13)\n    # which are (7, 73) and (49, 13).\n    # Only (7, 73) are two 2-digit multiples of 7.\n    a, b = 7, 73\n\n    # Return the sum of the factors\n    return a + b\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    # Set the initial result after operations\n    result = 50\n    \n    # Perform inverse operations\n    # Add 10 (inverse of subtracting 10)\n    result += 10\n    \n    # Divide by 2 (inverse of multiplying by 2)\n    number_thought = result / 2\n    \n    return number_thought\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    A_and_B_average = 22\n    C = 19\n\n    # Sum of A and B\n    A_plus_B = 2 * A_and_B_average\n    \n    # Sum of A, B, and C\n    sum_of_ABC = A_plus_B + C\n    \n    # Average of A, B, and C\n    average_ABC = sum_of_ABC / 3\n    \n    return average_ABC\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "from datetime import datetime\n\ndef solution():\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n    age = death_date.year - birth_date.year\n    # If the birthday has not yet occurred in the year of death\n    if (death_date.month, death_date.day) < (birth_date.month, birth_date.day):\n        age -= 1\n    return age\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n\n    # Using the Pigeonhole principle where n pigeons are put into m pigeonholes.\n    # If n > m, then at least one pigeonhole must contain more than one pigeon.\n    max_cakes = (total_cakes - 1) // layers + 1\n\n    return max_cakes\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let's denote the sum of ages for Chinese, English, and Mathematics teachers as C, E, and M respectively.\n    \n    # We have the following equations based on average ages:\n    # (C + E) / 2 = 34 => C + E = 68\n    # (E + M) / 2 = 36 => E + M = 72\n    # (C + M) / 2 = 44 => C + M = 88\n    \n    # Summing all these equations we get:\n    # (C + E) + (E + M) + (C + M) = 68 + 72 + 88\n    sum_of_double_pairs = (68 + 72 + 88)\n    \n    # Since C + E + M was added twice, divide by 2 to get the total sum of the ages of the teachers\n    sum_of_ages = sum_of_double_pairs / 2\n    \n    # The average age would then be the sum of the ages divided by the number of teacher groups (3 in this case)\n    average_age = sum_of_ages / 3\n    \n    return average_age\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    side_length = 1\n    while side_length * side_length <= 23:\n        side_length += 1\n    side_length -= 1  # Last valid whole number side length\n    rope_cut = side_length * side_length\n    return rope_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    subtract_from = (21 + 1) * 7\n    subtract = 20 + (1 * 7)\n    ans = subtract_from - subtract\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    result = 0\n    for i in range(1, 2019):\n        result += (2018 + i) / 5 - ((2018 + i) // 5)\n    return result\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    first_term = 11\n    num_terms = 10\n    total_sum = 425\n    \n    # We know that the sum of an arithmetic progression is S_n = n/2 * (a_1 + a_n)\n    # From the above formula, we can express a_n in terms of n, a_1, and S_n: a_n = (2*S_n/n) - a_1\n    # The difference, d, between any two adjacent terms is then (a_n - a_1) / (n-1)\n    \n    last_term = (2 * total_sum / num_terms) - first_term\n    difference = (last_term - first_term) / (num_terms - 1)\n    \n    return int(difference)\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia + 18, benson)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n    \n    total_money = solutions[chelsia] + solutions[benson]\n\n    return total_money\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    total_sum = 357\n    number_of_terms = 7\n\n    # Since these are consecutive odd numbers, the difference is 2\n    average = total_sum // number_of_terms\n    smallest_number = average - 2*(number_of_terms // 2)\n\n    return smallest_number\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "import math\n\ndef solution():\n    total = math.factorial(5)\n    repeat_1 = math.factorial(2)\n    ans = total // repeat_1\n    return ans\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 / 10\n    year_5_girls = year_5_students * 3 / 5\n\n    return int(year_5_girls)\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1/i for i in range(1995, 2009))\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one table and one chair\n    table, chair = symbols('table chair')\n\n    # Create the system of equations based on the problem statement\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    # Return the cost of one table\n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for number in range(200, 401):\n        if (number % 3 == 2 and \n            number % 4 == 2 and \n            number % 5 == 2 and \n            number % 7 == 5):\n            return number\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Carter's and Martin's speeds\n    carter_speed, martin_speed = symbols('carter_speed martin_speed')\n\n    # Martin's speed is 20 m/min faster than Carter's speed\n    equation1 = Eq(martin_speed, carter_speed + 20)\n\n    # The ratio of time taken by Martin and Carter is 9:13\n    # Since the race is the same length, time taken is inversely proportional to the speed\n    # Therefore, 9/13 = carter_speed/martin_speed\n    equation2 = Eq(9 / 13, carter_speed / martin_speed)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (carter_speed, martin_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # The only even prime number is 2 since every other even number has at least two distinct divisors: 1 and themselves, and an additional divisor 2.\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Fred and George rate when working together\n    rate_together = 1 / 6\n    # Fred's rate on his own\n    rate_fred = 1 / 9\n    # George's rate on his own (George's rate is the difference between the combined rate and Fred's rate)\n    rate_george = rate_together - rate_fred\n    # Time taken by George on his own is the inverse of his rate\n    time_george = 1 / rate_george\n    \n    return time_george\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    total_cloth = 18\n    cloth_left = total_cloth - x\n    return cloth_left\n\n# Example usage:\n# ans = solution(5) # Replace 5 with the actual amount of cloth used for the dress"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # We can take out 14 red apples and still have no guarantee of a pair of the same colour.\n    # To ensure we get a pair of the same colour, we then take out one more apple,\n    # which will either be red, making a pair with the red apples, or yellow, making a pair with the yellow apples.\n    return 14 + 1\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Initial ratio of red to black pens\n    initial_ratio_red = 3\n    initial_ratio_black = 7\n\n    # Final ratio of red to black pens\n    final_ratio_red = 5\n    final_ratio_black = 13\n\n    # Number of red pens in the end\n    final_red_pens = 20\n\n    # Since the final number of red pens is 20 and the final ratio is 5:13,\n    # we can find the multipler for the red pens.\n    # Final red pens (20) = initial_red_pens * (final_ratio_red / initial_ratio_red) - pens_sold\n    # pens_sold = initial_red_pens - final_red_pens\n    # Also, since the same number of red and black pens are sold, we have:\n    # initial_red_pens * (final_ratio_red / initial_ratio_red) = initial_black_pens * (final_ratio_black / initial_ratio_black)\n    # initial_red_pens / initial_black_pens = final_ratio_red / final_ratio_black = initial_ratio_red / initial_ratio_black\n    # From the final ratio and the number of red pens we have,\n    # we can find the multiplier and hence the initial number of red pens.\n\n    # Calculate the multiplier for the initial red pens\n    red_multiplier = final_red_pens / final_ratio_red\n\n    # Calculate the initial number of red pens\n    initial_red_pens = red_multiplier * initial_ratio_red\n\n    # Calculate the number of red pens sold\n    red_pens_sold = initial_red_pens - final_red_pens\n\n    return int(red_pens_sold)\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    return 2.42 * 1.6\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Let b represent the number of birds.\n\n    # Each cat has 4 legs\n    cat_legs = 2 * 4\n    # Each dog has 4 legs\n    dog_legs = 2 * 4\n    # Each rabbit has 4 legs\n    rabbit_legs = 1 * 4\n    # Each bird has 2 legs\n    bird_legs = 2\n    \n    # The total number of legs (excluding birds) is:\n    total_legs_excluding_birds = cat_legs + dog_legs + rabbit_legs\n\n    # The number of bird legs is:\n    number_of_bird_legs = 28 - total_legs_excluding_birds\n\n    # The number of birds is the number of bird legs divided by 2\n    num_birds = number_of_bird_legs / bird_legs\n    \n    return int(num_birds)\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    # There are 5 possible entrances for each person, and 4 people in total.\n    # Each person can choose any entrance independently of the others.\n    # Therefore, the total number of ways is 5^4.\n    num_entrances = 5\n    num_people = 4\n    \n    ans = num_entrances**num_people\n    \n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Initial value after first year increase by 5%\n    initial_value_after_increase = 10500\n    # Assuming 5% increase implies initial value was 100%, so calculate the value before 5% increase\n    initial_value = initial_value_after_increase / 1.05\n    \n    # Current value after 5% decrease from the value after first 5% increase\n    current_value = initial_value_after_increase * 0.95\n    \n    # Calculate the profit or loss by subtracting the original price from the current value\n    profit_or_loss = current_value - initial_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_div_by_5 = 200 // 5\n    count_div_by_7 = 200 // 7\n    count_div_by_5_and_7 = 200 // (5 * 7)\n\n    ans = count_div_by_5 + count_div_by_7 - count_div_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(11, 20) if 42 % i == 0]\n    ans = factors_of_42[0] if factors_of_42 else None\n    return ans\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]  # Given numbers\n    target_average = 6\n    total_numbers = 4\n\n    # Sum of numbers = average * total numbers\n    required_sum = target_average * total_numbers\n\n    # Number in the box = required sum - sum of given numbers\n    number_in_box = required_sum - sum(numbers)\n    \n    return number_in_box\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of a pen and a ruler\n    pen, ruler = symbols('pen ruler')\n    \n    # Create equations based on the problem statement\n    # The total cost of 2 rulers and 9 pens is $21.60\n    equation1 = Eq(2 * ruler + 9 * pen, 21.60)\n    # A ruler costs $0.90 more than a pen\n    equation2 = Eq(ruler, pen + 0.90)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pen, ruler))\n    \n    # The cost of each ruler\n    return solutions[ruler]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    bags_needed = -(-total_weight // bag_weight)  # Ceiling division\n    return bags_needed\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126 + 50  # inverse of step 8\n    day = result % 100  # retrieve the day of birth\n    month = (result - day) // 100  # retrieve the month of birth after reversing operations from steps 5 to 7\n    return (month, day)\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n    \n    for num in range(1, 50):\n        if num % 3 == 2 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for perm in permutations(digits):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n    return None\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Calculate the sum of the first sequence: 4 + 8 + 12 + ... + 396 + 400\n    first_term = 4\n    last_term = 400\n    common_difference = 4\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_first_sequence = (number_of_terms / 2) * (first_term + last_term)\n    \n    # Calculate the sum of the second sequence: 396 + 392 + ... + 8 + 4\n    # The second sequence has the same sum as the first one, so we double it\n    total_sum = 2 * sum_of_first_sequence\n    \n    return int(total_sum)\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_cost = 5\n    refill_cost = 1\n    total_money = 10\n    \n    # He can buy 1 initial cup, and then spend the rest on refills\n    remaining_money_after_initial = total_money - initial_cup_cost\n    number_of_refills = remaining_money_after_initial // refill_cost\n    \n    # Total cups of coke = initial cup + refills\n    total_cups_of_coke = 1 + number_of_refills\n    return total_cups_of_coke\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Number of peaches eaten by 1 monkey in 1 day\n    peaches_per_monkey_per_day = 96 // (3 * 2)\n    \n    # Number of peaches eaten by 5 monkeys in 4 days\n    total_peaches = peaches_per_monkey_per_day * 5 * 4\n    \n    return total_peaches\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    ans = 729 // 9\n    return ans\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = factorial(2)\n    comic_books = factorial(3)\n    science_books = factorial(4)\n    book_types = factorial(3)\n\n    total_ways = story_books * comic_books * science_books * book_types\n\n    return total_ways\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    base_tax = 0.06 * 50000\n    additional_income = income - 50000\n    total_tax_paid = 10000\n\n    equation = Eq(base_tax + additional_income * (0.06 + T / 100), total_tax_paid)\n\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # Since each friend must get at least 1 ice-cream, we give each one ice-cream.\n    remaining_ice_creams = 5 - 3\n\n    # Now we have to distribute the remaining 2 identical ice-creams to the 3 friends.\n    # This is a problem of partitioning 2 identical items into 3 parts.\n    # Using the formula for distributing n identical objects among r distinct objects,\n    # which is (n + r - 1) choose (r - 1), here n=2, r=3.\n\n    from math import comb\n    ans = comb(remaining_ice_creams + 3 - 1, 3 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Calculate the total expenses for each period\n    jan_to_mar_expense = 450 * 3\n    apr_to_jul_expense = 350 * 4\n    aug_to_oct_expense = 1250\n    nov_to_dec_expense = 400 * 2\n\n    # Calculate the total expenses for the year\n    total_year_expense = jan_to_mar_expense + apr_to_jul_expense + aug_to_oct_expense + nov_to_dec_expense\n\n    # Calculate the average monthly expenses for the year\n    average_monthly_expense = total_year_expense / 12\n\n    return average_monthly_expense\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # in meters per minute\n    cycling_speed = 60  # in meters per minute\n\n    # Assume the distance one way is d meters\n    # Time taken to walk to the library: d / walking_speed\n    # Time taken to cycle back from the library: d / cycling_speed\n    # Total time for the trip: d / walking_speed + d / cycling_speed\n    # Total distance for the trip: 2 * d\n\n    # Average speed = total distance / total time\n    average_speed = (2 * d) / (d / walking_speed + d / cycling_speed)\n\n    # Simplify the above expression (since d is on both numerator and denominator,\n    # it will cancel out):\n    average_speed = (2 * walking_speed * cycling_speed) / (walking_speed + cycling_speed)\n\n    return average_speed\n\n# Assume d is the same for both directions and will cancel out in the calculation\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the amount of money Sophie's mother gave her.\n    # The cost of one serving of ice cream is the total money she had plus $2.30, divided by 5 servings.\n    # The cost for 3 servings is the same as the cost for one serving times 3.\n    # The amount of money Sophie had left after buying 3 servings is $0.30.\n\n    # From the information given:\n    # (x + 2.30) / 5 * 3 + 0.30 = x\n    # We find x by solving the above equation:\n    x = (5 * 0.30 - 2.30) / (5 - 3)\n    \n    return x\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9/x, y/2)\n    x_value = 3\n    y_value = solve(equation.subs(x, x_value), y)\n\n    return y_value[0]  # This should give the value of y when x=3.\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    # Define the digits we want to use\n    digits = ['2', '3', '5', '6']\n\n    # Generate all possible permutations of these digits\n    permuts = permutations(digits)\n\n    # Find the permutations that form odd numbers and convert them to integers\n    odd_numbers = []\n    for p in permuts:\n        num = int(''.join(p))\n        if num % 2 != 0:\n            odd_numbers.append(num)\n\n    # Find the smallest odd number\n    ans = min(odd_numbers)\n\n    return ans\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    # the total number of sweets is a number in the form of 1270 + M\n    # we know that 1270 + M is divisible by 25 (because each bag has the same number of sweets)\n    \n    # we can iterate over M from 0 to 9 and check which one makes the number divisible by 25\n    for M in range(10):\n        total_sweets = 1270 + M\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # You would need to take out 8 balls at most to ensure you have at least two of the same color.\n    # This is because in the worst-case scenario, you could take out 7 balls of different colors (1 of each).\n    # At the 8th draw, you are guaranteed to have a pair of the same color.\n\n    # Since we have 7 green balls and 8 blue balls, the most you could take out without\n    # repeating a color is 7 balls (1 green + 6 blue, or 1 blue + 6 green).\n    # Therefore, the next ball (8th ball) would have to be of the same color as one of the\n    # ones you have already taken out.\n\n    # The answer does not depend on which color comes out first, just the number of draws to ensure\n    # at least one pair, so we have our final answer.\n    return 8\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Think of a number (let's assume the number is x)\n    x = symbols('x')\n    \n    # Add 3\n    result = x + 3\n    \n    # Multiply by 2\n    result *= 2\n    \n    # Take away 2\n    result -= 2\n    \n    # Add 10\n    result += 10\n    \n    # Divide by 2\n    result /= 2\n    \n    # Take away the number you started with (x)\n    result -= x\n    \n    # Simplify the expression and return the result\n    return result.simplify()\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n\n    result = numerator / denominator\n\n    return round(result, 3)\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    cost_science_fiction = 20 * 4\n    cost_comic_books = 10 * 5\n    cost_novels = 20 * 6\n    total_cost = cost_science_fiction + cost_comic_books + cost_novels\n    \n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    # Case 1: Numbers where the first two digits are 7 (07X, 77X)\n    for i in range(10):\n        if i != 7:\n            count += 1  # as the third digit can't be 7\n\n    # Case 2: Numbers where the last two digits are 7 (X77)\n    # The first digit cannot be 0 and can't be 7 as it's already counted in Case 1\n    for i in range(1, 10):\n        if i != 7:\n            count += 1\n\n    # Case 3: Numbers with the first and last digits as 7 (7X7)\n    # The middle digit cannot be 7\n    for i in range(1, 10):\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, kyle = symbols('jack kyle')\n    # Original amount that Jack had is 5 times what Kyle had\n    equation1 = Eq(jack, 5 * kyle)\n    # After losing $72, Kyle has 2/7 of what Jack has left\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let x be the initial number of bracelets Felicia had\n    # Felicia sells 3/5 of her bracelets, leaving her with 2/5\n    # Janice originally has 96 bracelets\n    # Janice buys 3/5 * 2/5 of x, hence she will have 96 + 3/5 * 2/5 * x bracelets\n    \n    # After the transaction, the ratio of Felicia's bracelets to Janice's is 5:7\n    # (2/5 * x) / (96 + 3/5 * 2/5 * x) = 5/7\n    \n    # Solve for x using the equation\n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    equation = (2/5 * x) / (96 + (3/5 * 2/5) * x) - 5/7\n    initial_bracelets_felicia = solve(equation, x)[0]\n    \n    # Calculate the number of bracelets Janice buys\n    bracelets_bought = (3/5 * 2/5) * initial_bracelets_felicia\n    \n    return bracelets_bought\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Worst case scenario to not get a yellow shirt:\n    # Take all orange, pink, and brown shirts.\n    orange = 6\n    pink = 4\n    brown = 12\n    worst_case_non_yellow = orange + pink + brown\n\n    # To get one yellow shirt for sure, take one more after the worst case.\n    ans = worst_case_non_yellow + 1\n    return ans\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 0.35\n    total_individual_cost = individual_cost * 15\n    savings = total_individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal_amount = 20000\n    annual_interest_rate = 0.05\n    number_of_years = 11\n\n    final_amount = principal_amount * (1 + annual_interest_rate * number_of_years)\n\n    return final_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    # Using the formula for the sum of an arithmetic progression: S_n = (n/2)(2a + (n - 1)d)\n    # Where S_n is the sum of n terms, a is the first term, n is the number of terms, and d is the common difference\n    # Given S_n = 560, n = 20, d = 2, we need to find the smallest term a\n    \n    # We can rearrange the formula to solve for a:\n    # 560 = (20/2)(2a + (20 - 1) * 2)\n    # Simplify to solve for a\n    n = 20\n    S_n = 560\n    d = 2\n    \n    a = (S_n / (n / 2) - (n - 1) * d) / 2\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    day_progress = 3\n    night_slip = 2\n    well_depth = 8\n    total_climbed = 0\n    day_count = 0\n\n    while total_climbed < well_depth:\n        day_count += 1\n        total_climbed += day_progress\n        if total_climbed >= well_depth:\n            break\n        total_climbed -= night_slip\n    \n    return day_count\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    first_period_days = 4\n    second_period_days = 6\n    third_period_days = 5\n    \n    first_period_pages = 25\n    second_period_pages = 40\n    third_period_total_pages = 80\n    \n    total_days = first_period_days + second_period_days + third_period_days\n    total_pages = (first_period_days * first_period_pages) + (second_period_days * second_period_pages) + third_period_total_pages\n    \n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    brother_original = 12\n    while True:\n        penny_original = brother_original + 10\n        penny_after = 14\n        brother_after = 12\n        if penny_original - brother_after == brother_original + (penny_original - penny_after):\n            break\n        brother_original += 1\n    return brother_original\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_tree_A = 14\n    birds_tree_B = birds_tree_A + 7\n    total_birds = birds_tree_A + birds_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    return 123456789 * 987654321\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):\n        tens, ones = divmod(age, 10)\n        new_age = ones * 10 + tens + 1\n        if new_age * 2 == age:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Maximum cards Tom might draw without having 4 cards of the same suit\n    max_cards_without_four_of_a_kind = 3 * 4  # 3 from each suit\n    \n    # To be sure he has 4 cards of the same suit, add one more card\n    ans = max_cards_without_four_of_a_kind + 1\n    \n    return ans\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    sold_percentage = 0.60\n    unsold_tickets = 28\n    total_tickets = unsold_tickets / (1 - sold_percentage)\n    return int(total_tickets)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the amount spent\n    spent = symbols('spent')\n    \n    # Hayden's and Mitchell's money after spending\n    hayden_left = 1420 - spent\n    mitchell_left = 505 - spent\n    \n    # Equation representing the problem\n    equation = Eq(hayden_left, 4 * mitchell_left)\n    \n    # Solve the equation for the amount spent\n    solution = solve(equation, spent)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter_of_number = 15\n    number = one_quarter_of_number * 4\n    two_thirds_of_number = (2 / 3) * number\n    return two_thirds_of_number\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let the total number of people be x\n    # The fraction of children at the party is 1 - 3/7 = 4/7\n    # The fraction of children who are girls is 1 - 3/8 = 5/8\n    # So the number of girls is (4/7) * (5/8) * x = 45\n    # Solve for x to find the total number of people at the party\n    x = 45 / ((4/7) * (5/8))\n    return int(x)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    num_two_dollar_notes = 5\n    num_fifty_cent_coins = 7\n    cost_of_file = 11.95\n\n    total_two_dollar_notes = num_two_dollar_notes * 2  # Correct calculation for two-dollar notes\n    total_fifty_cent_coins = num_fifty_cent_coins * 0.50  # Correct conversion of cents to dollars\n\n    # The first error in Jim's calculation is when he adds two dollar notes and fifty-cent coins\n    # He incorrectly treats 350 cents as $350 instead of $3.50\n    total_amount = total_two_dollar_notes + total_fifty_cent_coins  # Correct total amount calculation\n\n    # The second error in Jim's calculation is when he subtracts the cost of the file\n    # He incorrectly subtracts $1.95 from $360 instead of the correct total amount\n    remaining_money = total_amount - cost_of_file  # Correct remaining money calculation\n\n    return round(remaining_money, 2)  # Round off to 2 decimal places to represent dollars\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    return sum(range(1, 101))\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    effective_climb = day_climb - night_slide\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n\n    return day_count\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n    \n    n = 18\n    r = 3\n\n    ans = factorial(n) // factorial(n-r)\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = (ginkgo_trees - 1) * 2\n    return willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_ship = 28\n    speed_current = 3\n    distance = 150\n\n    actual_speed_upstream = speed_ship - speed_current\n    time_taken = distance / actual_speed_upstream\n\n    return time_taken\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let A, B, C represent the weights of Adam, Ben and Carl respectively.\n\n    # According to the question:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Add all equations to get 2*(A + B + C)\n    total_twice = (102 + 97 + 93)  # (A + B) + (B + C) + (A + C)\n\n    # Divide by 2 to get the total weight (A + B + C)\n    total_weight = total_twice / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n\n    total_cost = ramen_price + pineapple_juice_price + roasted_duck_price\n\n    return total_cost\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    # Let's define the variables for each person's money\n    # A for Andrew, B for Brian and C for Christopher\n    A, B, C = symbols('A B C')\n\n    # Now we write the equations based on the problem description\n    # A + B = 40\n    # A + C = 37\n    # B + C = 25\n    \n    # Using these equations, we can solve for A, B, and C\n    equation1 = Eq(A + B, 40)\n    equation2 = Eq(A + C, 37)\n    equation3 = Eq(B + C, 25)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate the total amount they have altogether\n    total_money = sum(solutions.values())\n\n    return total_money\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight = 500  # in grams\n    cheese_cost_per_kg = 7.48  # in pounds\n    apple_cost = 0.12  # cost of one apple in pounds\n    yoghurt_cost = 0.46  # cost of one yoghurt in pounds\n    total_money = 10  # in pounds\n\n    cheese_cost = (cheese_weight / 1000) * cheese_cost_per_kg\n    apples_cost = 8 * apple_cost\n    yoghurts_cost = 2 * yoghurt_cost\n\n    total_cost = cheese_cost + apples_cost + yoghurts_cost\n    change = total_money - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the number of aircrafts Andy can sell per hour\n    a = symbols('a')\n    \n    # Andy and Zack together sell 1200 aircrafts in 6 hours, which means 200 aircrafts per hour\n    equation = Eq((a + 150) * 6, 1200)\n    \n    # Solve for 'a'\n    andy_rate = solve(equation, a)[0]\n    \n    # Calculate the time it would take for Andy to sell all the aircrafts by himself\n    andy_time = 1200 / andy_rate\n    \n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    people = 0\n    diff = 80\n    layer = 1  # Starting with the student layer\n    while True:\n        students = (layer * 2 + 1)**2\n        teachers = layer**2\n        people = students + teachers\n        if students - teachers == diff:\n            break\n        layer += 2  # We skip every second layer because it belongs to teachers\n\n    return people\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan = 74\n    bilal = 86\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_ratio = 2 + 7 + 6  # Sum of all individual parts of the ratio\n    total_volume = 300  # Total volume of the drink in ml\n\n    # Volume of orange juice (7 parts of the total ratio)\n    volume_orange_juice = (total_volume * 7) / total_ratio\n\n    return volume_orange_juice\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    savings = 1 * 7  # $1 saved every day for a week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    remaining_amount = original_amount + savings - lent_to_brother - spent_on_snacks\n    return remaining_amount\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    # create a function to get the amount before the meal according to the ratio and difference\n    def calculate_amounts(ratio, difference):\n        total_ratio = sum(ratio)\n        total_amount = difference * total_ratio / (ratio[0] - ratio[1])\n        return [amount * total_amount / total_ratio for amount in ratio]\n\n    # Define the extra amount Steve has over Mark\n    difference_steve_mark = 40\n\n    # Define the ratios\n    ratio_after_steve_paid = (3, 8, 9)\n    ratio_after_ryan_paid = (5, 4, 1)\n    ratio_after_mark_paid = (10, 1, 9)\n\n    # Calculate the amounts they each had before the meal\n    amounts_after_steve_paid = calculate_amounts(ratio_after_steve_paid, difference_steve_mark)\n    amounts_after_ryan_paid = calculate_amounts(ratio_after_ryan_paid, difference_steve_mark)\n    amounts_after_mark_paid = calculate_amounts(ratio_after_mark_paid, difference_steve_mark)\n\n    # Calculate how much each payment scenario costs\n    meal_cost_if_steve_paid = sum(amounts_after_steve_paid) - (ratio_after_steve_paid[0] * difference_steve_mark / sum(ratio_after_steve_paid))\n    meal_cost_if_ryan_paid = sum(amounts_after_ryan_paid) - (ratio_after_ryan_paid[0] * difference_steve_mark / sum(ratio_after_ryan_paid))\n    meal_cost_if_mark_paid = sum(amounts_after_mark_paid) - (ratio_after_mark_paid[0] * difference_steve_mark / sum(ratio_after_mark_paid))\n\n    # The actual meal cost is the same for all scenarios\n    return meal_cost_if_steve_paid  # or meal_cost_if_ryan_paid or meal_cost_if_mark_paid\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    initial_amount = 28.74\n    repayment = 10.50\n    remaining_after_repayment = initial_amount - repayment\n    spent_on_magazines = remaining_after_repayment / 2\n    amount_left = remaining_after_repayment - spent_on_magazines\n    return amount_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    # Start by determining the prime factorization of 44000\n    # to see which prime factors can create a cube number.\n    prime_factors = {}\n    n = 44000\n    divisor = 2\n    \n    while n > 1:\n        while n % divisor == 0:\n            prime_factors[divisor] = prime_factors.get(divisor, 0) + 1\n            n //= divisor\n        \n        # Since 44000 is an even number, we only ever need\n        # to increment the divisor once to 3, then we can\n        # check only odd divisors thereafter.\n        divisor += 1 if divisor == 2 else 2\n\n    # To divide 44000 by q and get a cube, the prime factors of q must cancel out the\n    # prime factors of 44000 in such a way that each remaining prime factor has a\n    # power that is multiple of 3.\n\n    # Since we are looking for the largest q such that 44000/q is a cube, we should\n    # try to leave as many prime factors of 44000 in the result as possible.\n    # Find the powers of prime factors in q, such that the remaining powers in 44000/q\n    # form a cube number. Hence, the factor's power in q should be the remainder of\n    # that prime factor's power when divided by 3 in the prime factorization of 44000.\n\n    q = 1\n    for factor, power in prime_factors.items():\n        power_remainder = power % 3\n        if power_remainder > 0:\n            q *= factor ** power_remainder\n\n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    width, length = symbols('width length')\n    \n    # defining the equations based on the problem statement\n    equation1 = Eq(length, 2 * width)  # length is twice the width\n    equation2 = Eq(2 * (length + width), 72)  # the perimeter of the rectangle is 72\n    \n    # solving the equations\n    solutions = solve((equation1, equation2), (width, length))\n    \n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    n = 81\n    num_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            num_factors += 1\n    return num_factors\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    static_friction_coefficient = 0.4  # coefficient of static friction\n    applied_force = 250  # force applied in N\n\n    # force of static friction cannot exceed the maximum static friction\n    max_static_friction = static_friction_coefficient * mass * 9.8  # F_friction = u * m * g\n\n    # since applied force is 250N and max static friction is calculated above,\n    # the actual force of static friction will be equal to the applied force until it reaches the threshold\n    force_of_static_friction = min(applied_force, max_static_friction)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    total_salt = (300 * 0.12) + (500 * 0.28)\n    total_solution = 300 + 500\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    term3 = 23\n    term15 = 155\n    position3 = 3\n    position15 = 15\n\n    common_difference = (term15 - term3) / (position15 - position3)\n\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    # B scored 50 points less than A\n    equation1 = Eq(b, a - 50)\n    # If B gave A 25 points, A would have 5 times B's score\n    equation2 = Eq(a + 25, 5 * (b - 25))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    n = 1\n    while True:\n        cube = n ** 3\n        square = int(cube ** 0.5)\n        if (square + 1) ** 2 == cube + 1:\n            return (square + 1) ** 2\n        n += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    # Let x be the number of buttons James originally has, and y be the number Nina originally has.\n    # From the problem, we know that:\n    # x + y = 24 (total number of buttons)\n    # y - 6 = x + 6 (after Nina gives James 6 buttons, they have the same number)\n    # Now we have a system of equations to solve for x and y.\n\n    # By solving the equations:\n    # y - x = 12 (from the second equation after simplifying)\n    # We can add this equation to the first one to isolate y:\n    # (x + y) + (y - x) = 24 + 12\n    # 2y = 36\n    # y = 18\n\n    # Nina originally has y buttons, which is now found to be 18.\n    return 18\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_worker_per_hour = (total_parts / total_workers) / total_hours\n\n    return parts_per_worker_per_hour\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    day_count = 0\n    distance_covered = 0\n\n    while distance_covered < total_distance:\n        day_count += 1\n        distance_covered += day_distance\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= night_distance\n        \n    return day_count\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # tax charged is $0.05 per bag used\n    tax_per_bag = 0.05\n    \n    # equation relating bags used (x) and tax charged (y): y = tax_per_bag * x\n    # This function doesn't have to solve for any values but to represent the equation.\n    \n    return f\"y = {tax_per_bag} * x\"\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction_value = 8 / 100\n    decimal_value = 0.7\n    \n    if fraction_value > decimal_value:\n        ans = \"8/100\"\n    else:\n        ans = \"0.7\"\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "def solution():\n    # convert mixed numbers to improper fractions\n    mixed_to_improper1 = (1 * 9 + 1) / 9\n    mixed_to_improper2 = (5 * 2 + 1) / 2\n\n    # multiply all fractions together\n    result = 3 * (4/5) * mixed_to_improper1 * mixed_to_improper2 * (3/11)\n\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_cost = 275\n    flat_fee = 30\n    daily_fee_5_days_or_less = 25\n    daily_fee_after_5_days = 20\n\n    # Cost if Steven rented the car for 5 days or less\n    max_cost_for_5_days = flat_fee + 5 * daily_fee_5_days_or_less\n    \n    if total_cost <= max_cost_for_5_days:\n        # If Steven's total cost is less than or equal to the max cost for 5 days,\n        # then he must have rented the car for total_cost minus flat fee divided by daily fee\n        days = (total_cost - flat_fee) / daily_fee_5_days_or_less\n    else:\n        # If Steven's total cost is more than the max cost for 5 days,\n        # then he rented the car for 5 days at $25 per day, and the rest at $20 per day\n        additional_days_cost = total_cost - max_cost_for_5_days\n        additional_days = additional_days_cost / daily_fee_after_5_days\n        days = 5 + additional_days\n\n    return int(days)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 rabbits = 8 * 2 chickens = 16 chickens\n    return 8 * 2\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    ans = 1\n    for denominator in range(2, 51):\n        ans *= (1 / (denominator + 1) - 1 / (100 - denominator))\n    return ans\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.10\n    total_distance = initial_height  # the initial fall\n    current_height = initial_height\n    \n    while current_height > 0:\n        current_height *= rebound_ratio  # height of the rebound\n        total_distance += current_height * 2  # going up and then down\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Given that the sum of the numbers on the four pages is 58\n    # Assume there are n sheets and we are considering the k-th sheet\n    # The pages numbers will be 2k-1, 2k, 2(n-k) + 1, and 2(n-k) + 2\n    # The sum of these numbers equals the given sum 58:\n    # (2k - 1) + (2k) + (2(n - k) + 1) + (2(n - k) + 2) = 58\n    # Simplify the equation: 4k + 4n = 60\n    # Which can be further simplified to n + k = 15 (since 4(n+k) = 60)\n    # Since k cannot be zero and n must be greater than k, we start with k=1 and increase\n\n    n = 0\n    for k in range(1, 15):\n        n = 15 - k\n        if n > k:\n            break\n\n    return n\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Initial condition\n    equation1 = Eq(green, yellow)\n\n    # After giving away cars\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # Green toy cars remaining in the end\n    green_remaining = solutions[green] - 60\n\n    return green_remaining\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    race_distance = 3000\n    buck_speed = 600  # meters per minute\n    elephant_speed = 250  # meters per minute\n\n    buck_time = race_distance / buck_speed  # Time taken by buck to finish race\n    elephant_time = race_distance / elephant_speed  # Time taken by elephant to finish race\n    time_difference = elephant_time - buck_time  # Time difference between buck and elephant\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Calculate sum of arithmetic sequence 4 to 400\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_forward = (num_terms * (first_term + last_term)) // 2\n    \n    # Since the sequence is symmetrical, the reverse sum is the same\n    sum_backward = sum_forward\n\n    # Add both sums together to get the final result\n    return sum_forward + sum_backward\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    percentage_bad = 15\n    number_bad_apples = (percentage_bad / 100) * total_apples\n    return number_bad_apples\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Given speeds in km/h\n    simon_speed = 80\n    wife_speed = 60\n\n    # Distance between offices in km\n    distance_between_offices = 15  \n\n    # Relative speed at which Simon is getting closer to his wife in km/h\n    relative_speed = simon_speed - wife_speed\n\n    # Time it takes for Simon to catch up to his wife in hours\n    catch_up_time = distance_between_offices / relative_speed\n\n    # Convert catch up time to minutes\n    catch_up_time_minutes = catch_up_time * 60\n\n    # Time when they both left their offices\n    departure_time = datetime.strptime('18:10', '%H:%M')\n\n    # Calculate the time when Simon overtakes his wife\n    overtaking_time = departure_time + timedelta(minutes=catch_up_time_minutes)\n\n    # Format the time to return only the hour and minute\n    return overtaking_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    return 123 - 67\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    cost_of_12_pencils = 1.80\n    cost_of_one_pencil = cost_of_12_pencils / 12\n    ratio_pen_to_pencil = 7 / 3\n    cost_of_one_pen = cost_of_one_pencil * ratio_pen_to_pencil\n    cost_of_five_pens = cost_of_one_pen * 5\n    return cost_of_five_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Assuming there are 2 types of drinks (coffee and milk)\n    # and 3 types of food items (hamburgers, burritos, and bagels)\n    num_drinks = 2\n    num_food_items = 3\n    \n    # The total number of different combinations Eddie can choose from\n    # is the product of the number of drink choices and food item choices\n    total_combinations = num_drinks * num_food_items\n    \n    return total_combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            lock_status = not True\n        else:\n            lock_status = True\n    \n        if i % 5 == 0:\n            lock_status = not lock_status\n    \n        if lock_status:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    total_minutes = 12\n    total_pancakes = pancakes_per_minute * total_minutes\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "from itertools import combinations\n\ndef solution():\n    # Defining the time each person takes\n    times = [5, 5, 9, 7]\n\n    # Initial total time\n    total_time = 0\n\n    # Sort times for convenience\n    sorted_times = sorted(times)\n\n    # Start crossing process\n    while len(sorted_times) > 3:\n        # Two slowest cross together or fastest goes back and forth with the slow ones\n        option1 = sorted_times[0] + 2 * sorted_times[1] + sorted_times[-1]\n        option2 = 2 * sorted_times[0] + sorted_times[-2] + sorted_times[-1]\n        \n        # Choose the faster option\n        total_time += min(option1, option2)\n        # Remove the two who have crossed\n        sorted_times = sorted_times[:-2]\n    \n    # When three people left, fare with two fastest one returning\n    if len(sorted_times) == 3:\n        total_time += sorted_times[0] + sorted_times[1] + sorted_times[2]\n    else:\n        # When two people left, they just cross once together\n        total_time += sorted_times[1]\n\n    return total_time\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n\n    original_price = sale_price / (1 - reduction_fraction)\n\n    return original_price\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Define a recursive function to calculate the number of\n    # ways to reach a certain step considering that he must step on step 5\n    def ways_to_step(current_step, must_step_on):\n        if current_step == must_step_on: # He must step on the 5th step\n            return 1\n        elif current_step > must_step_on:\n            return 0\n        return ways_to_step(current_step + 1, must_step_on) + ways_to_step(current_step + 2, must_step_on)\n\n    # Ways to step to the 5th step\n    to_5th_step = ways_to_step(0, 5)\n\n    # Ways to step from the 5th to the 10th step\n    to_10th_step = ways_to_step(5, 10)\n\n    # The total ways will be the ways to reach the 5th step\n    # multiplied by the ways to reach the 10th step from the 5th\n    return to_5th_step * to_10th_step\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500  # total length of the road\n    total_days = 5      # total time taken to pave the road\n\n    meters_per_day = total_length / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    people_per_country_to_ensure_9 = 8\n    participants = (countries * people_per_country_to_ensure_9) + 1\n    return participants\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    sum_of_sequence = 2014\n    num_terms = 53\n    \n    average = sum_of_sequence // num_terms\n    largest_number = average + (num_terms // 2)\n    \n    return largest_number\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # Find A from the mistake calculation\n    mistaken_number = 88\n    mistaken_result = 22\n    A = mistaken_number / mistaken_result\n\n    # Calculate the correct result using the correct number and found value of A\n    correct_number = 98\n    correct_result = correct_number / A\n    \n    return int(A), correct_result\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost_for_twelve = cost_per_calculator * 12\n    return total_cost_for_twelve\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas speed (laps per minute)\n    lucas_speed = 5 / 6\n    # Miller speed (laps per minute)\n    miller_speed = 5 / 10\n\n    # Relative speed (laps per minute)\n    relative_speed = lucas_speed - miller_speed\n\n    # Time taken to complete one lap at relative speed (minutes per lap)\n    time_for_one_overtake = 1 / relative_speed\n\n    return time_for_one_overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    # If $1670 is the rounded figure to the nearest $10,\n    # the greatest possible amount Rachel could have saved\n    # is just below the halfway point to the next ten dollars.\n    # So we subtract $1 from $1675 (the halfway point between $1670 and $1680).\n    maximum_saved = 1675 - 1\n    return maximum_saved\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    ans = hours * minutes_per_hour\n    return ans\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n  \n    children = (3/5) * total_visitors\n    remaining_visitors = total_visitors - children\n    men = (1/4) * remaining_visitors\n\n    equation = Eq(children, men + 120)\n\n    ans = solve(equation, total_visitors)[0]\n\n    return ans\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_rate = 80  # Cents for the first 15 minutes\n    additional_rate = 5  # Cents for each additional minute\n    total_cost = 140  # Total cost in cents\n\n    additional_cost = total_cost - base_rate\n    additional_minutes = additional_cost / additional_rate\n\n    total_minutes = 15 + additional_minutes\n    return int(total_minutes)\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age_now = 8\n    years_until_tim_is_mothers_current_age = 54 - tim_age_now\n    mothers_current_age = tim_age_now + years_until_tim_is_mothers_current_age\n    return mothers_current_age\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    # Convert the orange string length from meters to centimeters\n    orange_length_cm = 5.52 * 100  # 1 meter = 100 centimeters\n\n    # Calculate the purple string length using the ratio given\n    purple_length_cm = orange_length_cm / 9.2\n\n    # Calculate the green string length\n    green_length_cm = purple_length_cm + 24.9\n\n    # Convert the green string length from centimeters to meters\n    green_length_m = green_length_cm / 100  # 1 meter = 100 centimeters\n\n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    for A in range(10):\n        if int(f\"{A}{9}{8}{7}{6}{5}\") - int(f\"{4}{3}{2}{1}{0}{A}\") == int(f\"{A}{7}{4}{6}{3}{2}\"):\n            return A\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 2 == 0 and number % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Ivy's daily work rate\n    ivy_rate = 1 / 24\n    # Kevin's daily work rate\n    kevin_rate = 1 / 20\n\n    # Calculate combined work rate\n    combined_rate = ivy_rate + kevin_rate\n\n    # Total work done by Ivy and Kevin together in 18 days\n    total_work_done = 18 * ivy_rate\n    \n    # Remaining work to be done by Ivy alone\n    remaining_work = 1 - total_work_done\n\n    # Number of days Ivy needs to work alone to finish remaining work\n    ivy_days_alone = remaining_work / ivy_rate\n\n    # Kevin's days off is the total time minus the time Ivy works alone\n    kevin_days_off = 18 - ivy_days_alone\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the length of the shorter piece\n    x = symbols('x')\n    # the longer piece is 5 times the shorter piece\n    equation = Eq(x + 5*x, 49.5)\n    # solving the equation\n    length_shorter = solve(equation, x)[0]\n    length_longer = 5 * length_shorter\n\n    return round(length_longer, 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mom_per_day = 60\n    money_from_dad_per_day = 40\n    days = 3\n    total_money = (money_from_mom_per_day + money_from_dad_per_day) * days\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Let n be Nancy's work rate (books per day) and t be Tim's work rate (books per day).\n    # n = 1 book / 6 days = 1/6\n    # n + t = 1 book / 4 days = 1/4\n\n    # Calculate Tim's work rate\n    n = 1 / 6\n    t = (1 / 4) - n\n\n    # Calculate Tim's time by inverting the work rate\n    tim_days = 1 / t\n\n    return tim_days\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    days = 15\n    balance = 100\n    for day in range(1, days + 1):\n        if day % 2 == 1:  # Deposit days\n            balance += 5\n        else:  # Spending days\n            balance -= 8\n    return balance\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    proportion_year7_normal = 0.2  # 20% in decimal\n    proportion_year7_now = 0.1     # 10% in decimal\n    total_pupils_now = 400\n\n    # Let x be the total number of pupils normally at school.\n    # The number of Year 7 pupils originally at school is 0.2 * x.\n    # The number of Year 7 pupils now at school is 0.1 * 400.\n    # The number of Year 7 pupils missing is 0.2 * x - 0.1 * 400.\n    # The total number of pupils at school originally is x.\n    # After the Year 7 girls are missing for the sports match, the total is 400.\n    # Therefore, the equation is:\n    # x - (0.2 * x - 0.1 * 400) = 400\n    \n    # Simplify the equation\n    # x - 0.2 * x + 40 = 400\n    # 0.8 * x = 360\n    # x = 360 / 0.8\n\n    x = (total_pupils_now + total_pupils_now * proportion_year7_now) / proportion_year7_normal\n\n    return int(x)\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_height = 25\n    day_climb = 4\n    night_slide = 1\n    net_climb = day_climb - night_slide\n\n    # Since on the final day, the snail climbs out before sliding down,\n    # we need to check when it reaches or exceeds the well height before that night's slide.\n    current_height = 0\n    day = 0\n    while current_height < total_height:\n        day += 1\n        current_height += day_climb\n        if current_height >= total_height:\n            break\n        current_height -= night_slide\n\n    return day\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    distance_per_period = (3 * 3) - 2\n    tree_height = 31\n    jumps_per_period = 3\n\n    periods = (tree_height - 3) // distance_per_period\n    total_jumps = periods * jumps_per_period\n\n    height_after_periods = periods * distance_per_period\n\n    while height_after_periods < tree_height:\n        total_jumps += 1\n        height_after_periods += 3\n        if height_after_periods >= tree_height:\n            break\n        height_after_periods -= 2\n\n    return total_jumps\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    # the left money after buying the dress is 2/3 of the original money\n    # the left money after buying the shoes is 2/5 of the money after buying the dress\n    # 2/5 of 2/3 of the original money equals £40\n    # originally_money * (2/3) * (2/5) = 40\n    # originally_money = 40 / (2/3) / (2/5)\n    \n    original_money = 40 / (2/3) / (2/5)\n    \n    return original_money\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    sum_series = 0\n\n    # First term\n    sum_series += 1/(1*2)\n\n    # Second term\n    sum_series += 2/(2*4)\n\n    # Third term\n    sum_series += 3/(4*7)\n\n    # Fourth term\n    sum_series += 4/(7*11)\n\n    # Fifth term\n    sum_series += 5/(11*16)\n\n    # Sixth term\n    sum_series += 6/(16*22)\n\n    # Last term\n    sum_series += 1/22\n\n    return sum_series\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = (4 * a) + (0.6 * b)\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Given that there are 60 students on the outermost layer of the square\n    # Each side of the square would have 60/4 = 15 students\n    students_per_side = 60 // 4\n\n    # The total number of students in a square can be found by squaring\n    # the number of students per side\n    total_students = students_per_side ** 2\n\n    return total_students\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n    total_vehicles = symbols('total_vehicles')\n\n    equation1 = Eq(cars, bikes + bikes / 3)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    equation3 = Eq(total_vehicles, cars + bikes + lorries)\n    equations = (equation1, equation2, equation3)\n\n    # Test for all even values of total_vehicles\n    for total in range(2, 100, 2):\n        solutions = solve(equations, (cars, bikes, lorries, total_vehicles))\n        if all(val.is_integer and val > 0 for val in solutions.values()) and solutions[total_vehicles] == total:\n            return solutions\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = (18 * 20132013) - (2013 * 180018)\n    return ans\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = green_tiles = 0\n    # Each time we use (4 * layer - 4) tiles, because the corners are counted twice\n    while total_tiles > 0:\n        used_tiles = (layer * 4 - 4) if layer > 1 else 1\n        if used_tiles > total_tiles:\n            used_tiles = total_tiles\n        if layer % 2 == 1:\n            red_tiles += used_tiles\n        else:\n            green_tiles += used_tiles\n        total_tiles -= used_tiles\n        layer += 1\n    \n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n    else:\n        dominant_color = 'green'\n    difference = abs(red_tiles - green_tiles)\n\n    return (dominant_color, difference)\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variables\n    A_i, B_i, x = symbols('A_i B_i x')  # A_i: initial number of buttons in A, B_i: initial number in B, x: buttons added to A\n\n    # Equations based on the problem statement\n    equation1 = Eq(A_i, B_i + 64)      # A had 64 more buttons than B initially\n    equation2 = Eq(B_i - 2 * x, B_i - 28) # For every button added to A, 2 buttons are removed from B; B has 28 fewer than it initially did\n    equation3 = Eq((A_i + x + (B_i - 2 * x)), 4 * (B_i - 2 * x))  # The new total is 4 times the new amount in B\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A_i, B_i, x))\n\n    # Return the number of buttons in box A initially\n    return solutions[A_i]\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length_of_boulevard = 300\n    interval = 10\n\n    # The number of intervals is one less than the number of bins\n    # Since bins are placed at both ends, we start counting from 0\n    num_intervals = (length_of_boulevard // interval)\n\n    # The number of bins is the number of intervals plus one (for the bin at the starting point)\n    num_bins = num_intervals + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_wins_cards = 24\n    total_rounds = 12\n    cards_per_win = 4\n    cards_per_loss = -2\n\n    # Let x be the number of wins, then (total_rounds - x) will be the number of losses\n    # The equation based on cards gained and lost is:\n    # x * cards_per_win + (total_rounds - x) * cards_per_loss = total_wins_cards\n\n    # solving the equation for x gives us the number of wins\n    # Rearrange the above equation to find the number of wins\n    x = (total_wins_cards - total_rounds * cards_per_loss) / (cards_per_win - cards_per_loss)\n\n    # Now we can calculate the number of losses\n    losses = total_rounds - x\n    \n    return int(losses)\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_zeros(n):\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    numerator_zeros = count_zeros(999)\n    denominator_zeros = count_zeros(300)\n\n    ans = numerator_zeros - denominator_zeros\n    return ans\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n\n    total_flour = flour_per_cake * num_cakes\n\n    return total_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18\n    rounds = 0\n    while min(x, y, z) > 0:\n        if x >= y and x >= z:\n            x -= 3\n            y += 1\n            z += 1\n        elif y > x and y >= z:\n            y -= 3\n            x += 1\n            z += 1\n        else:\n            z -= 3\n            x += 1\n            y += 1\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # It takes 3 minutes to make 3 cuts to get 4 pieces (cutting a log into 4 pieces gives 3 intervals)\n    # For 8 pieces, we need 7 cuts.\n    # If 3 cuts take 3 minutes, then 1 cut takes 1 minute.\n    # So, 7 cuts take 7 minutes.\n    \n    time_per_cut = 3 / 3\n    total_cuts_needed = 8 - 1\n    total_time = time_per_cut * total_cuts_needed\n    \n    return int(total_time)\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # We want to find the number of solutions to the equation x + y + z = 7,\n    # where x, y, and z are non-negative integers representing the number of\n    # lollipops on each plate. As the plates are identical, the order of the\n    # lollipops does not matter.\n\n    # We can use stars and bars method to calculate this. The number of ways\n    # to allocate n indistinguishable items into k distinguishable bins is\n    # given by C(n + k - 1, k - 1), where C denotes combination.\n\n    # However, since the plates are also indistinguishable, we have to consider\n    # only unique distributions and not permutations. We solve this by considering\n    # cases for 0, 1, 2, or 3 non-empty plates.\n\n    from math import comb\n\n    # Cases:\n    # 3 non-empty plates: C(6, 2) - combinations to split lollipops into distinct groups\n    # 2 non-empty plates: C(7, 1) // 2 - we divide by 2 because order of plates does not matter\n    # 1 non-empty plate: 1 - only one way since all lollipops will be on one plate\n    # 0 non-empty plates (all empty): 1\n\n    ans = comb(6, 2) + (comb(7, 1) // 2) + 1 + 1\n\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    current_cards = (initial_cards - duplicates) + new_cards\n\n    return current_cards\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial as fac\n\n    # Treat Amy and Judy as one person, plus the other 6 people, we are arranging 7 \"people\"\n    arrange_7_people = fac(6)  # 7-1 because in a circle one position is fixed\n\n    # Amy and Judy can switch places between themselves in 2! ways\n    amy_judy_switch = fac(2)\n\n    # Total number of different orders\n    ans = arrange_7_people * amy_judy_switch\n\n    return ans\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 0\n    while True:\n        num_str = f\"26{'2011' * n}7\"\n        number = int(num_str)\n        if number % 33 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rasidah's and Chai Seng's initial money\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Equation 1: Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Equation 2: Chai Seng spent 6/7 of his money, thus has 1/7 left\n    # Equation 3: Rasidah spent 3/5 of her money, thus has 2/5 left\n    # Equation 4: Chai Seng had 1/2 as much money left as Rasidah after spending\n    equation2 = Eq((chai_seng * 1/7), (rasidah * 2/5) / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    # Return the amount of money Rasidah had at first\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, ben = symbols('andy ben')\n\n    # Originally Andy had 84 fewer cookies than Ben\n    equation1 = Eq(andy, ben - 84)\n\n    # Andy bought 1/3 more cookies and Ben bought 1/5 more cookies\n    andy_after = andy + andy / 3\n    ben_after = ben + ben / 5\n\n    # After the purchase, Andy had 1/3 as many cookies as Ben\n    equation2 = Eq(andy_after, ben_after / 3)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (andy, ben))\n\n    # Since we need the final amount of cookies that Andy has\n    andy_end = solutions[andy] + solutions[andy] / 3\n\n    return andy_end\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n    test_years = 5\n\n    # Calculate the amount after 5 years using the formula for simple interest\n    amount_after_5_years = principal * (1 + interest_rate * test_years)\n\n    if amount_after_5_years == final_amount:\n        return test_years\n\n    # If she is incorrect, calculate for the actual number of years\n    # Using formula A = P(1 + rt), where A is the final amount, P is the principal,\n    # r is the interest rate, and t is the time in years\n    # Rearrange formula to solve for t: t = (A - P) / (P * r)\n    actual_years = (final_amount - principal) / (principal * interest_rate)\n    \n    return round(actual_years)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "from math import gcd\n\ndef solution():\n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    def next_number(sequence):\n        if len(sequence) % 2 == 0:  # even index, next is negative\n            return -(abs(sequence[-1]) - 1)\n        else:  # odd index, next is positive\n            return abs(sequence[-1]) + 1\n        \n    sequence = [18, -16, 19, -15, 20]\n    n = next_number(sequence)\n    return n\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    # Given fraction equivalent\n    equivalent_fraction = 6 / 20\n    \n    # Given new numerator\n    new_numerator = 12\n    \n    # Find new denominator by keeping the fractions equivalent\n    new_denominator = new_numerator / equivalent_fraction\n    \n    return new_denominator\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Number of pupils passing each subject test\n    pass_math = 30\n    pass_science = 28\n    pass_english = 25\n\n    # Total number of pupils passing at least one test\n    pass_at_least_one = 43\n\n    # Calculate the maximum possible number of students passing all three tests\n    # Using the Inclusion-Exclusion Principle for three sets, and considering the upper bound situation\n    # min(pass_math + pass_science + pass_english - pass_at_least_one, min(pass_math, pass_science, pass_english))\n    pass_all_three = min(pass_math + pass_science + pass_english - pass_at_least_one, min(pass_math, pass_science, pass_english))\n\n    return pass_all_three\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total_sum = sum(1 / i for i in range(1, 8))\n    return int(total_sum)\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 6):  # Start at 1 because pencil cases cannot be empty\n        for x2 in range(1, 6):\n            x3 = 6 - (x1 + x2)\n            if x3 > 0:  # Ensure the third pencil case is not empty\n                count += 1\n    return count\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Tom saw 8 different two-digit numbers\n    # Possible two-digit numbers are from 10 to 99 (inclusive)\n    \n    possible_numbers = set(range(10, 100))\n    \n    # Numbers that are divisible or not divisible by the unknown number\n    divisible_by_unknown = {num for num in possible_numbers if (num % unknown == 0) or (unknown % num != 0)}\n    # Numbers that are divisible or not divisible by 24\n    divisible_by_24 = {num for num in possible_numbers if (num % 24 == 0) or (24 % num != 0)}\n    \n    # Since Tom raised his hand both times, his hat number must be in the intersection of both sets\n    possible_toms_numbers = divisible_by_unknown.intersection(divisible_by_24)\n    \n    # Iterate over every possible combination to find the sum of the numbers Tom saw\n    max_possible_sum = 0\n    for unknown in range(2, 100): # Skip 1, since all numbers are divisible by 1\n        seen_numbers_sum = 0\n        # Recalculate possibilities based on the new unknown value\n        divisible_by_unknown = {num for num in possible_numbers if (num % unknown == 0) or (unknown % num != 0)}\n        possible_toms_numbers = divisible_by_unknown.intersection(divisible_by_24)\n        \n        # If 4 students raised their hands for the unknown number, Tom must have seen 4 such numbers\n        if len(divisible_by_unknown) - 1 == 4:\n            for num in divisible_by_unknown:\n                if num in possible_toms_numbers and num != unknown:\n                    seen_numbers_sum += num\n            # If 6 students raised their hands for 24, Tom must have seen 6 such numbers\n            if len(divisible_by_24) - 1 == 6:\n                for num in divisible_by_24:\n                    if num in possible_toms_numbers and num != 24:\n                        seen_numbers_sum += num\n                        # Update the maximum sum found\n                        if seen_numbers_sum > max_possible_sum:\n                            max_possible_sum = seen_numbers_sum\n    \n    return max_possible_sum\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let the four numbers be a, b, c, and d (a > b > c > d)\n    # Average of the other three numbers when d is the smallest number:\n    # (a + b + c) / 3 = 39 - d\n    # Average of the other three numbers when a is the largest number:\n    # (b + c + d) / 3 = 51 - a\n    \n    # From the two equations above, we get two equations:\n    # a + b + c = 3 * (39 - d) = 117 - 3d\n    # b + c + d = 3 * (51 - a) = 153 - 3a\n    \n    # Subtract the second from the first to find 'a - d':\n    # a - d = (117 - 3d) - (153 - 3a)\n    # a - d = -36 + 3a + 3d\n    # 2a - 4d = -36\n    # a - 2d = -18\n    # Since a and d are positive whole numbers, and a > d, let's find the largest possible 'a'\n    # given that a - 2d = -18 and d > 0\n    \n    # We try maximum possible value for 'd', which is 17 (because if d were 18, a would be 0, invalid)\n    # a - 2*17 = -18\n    # a = -18 + 34\n    # a = 16\n    \n    # But we are looking for the largest possible 'a', so let's increment a and decrement d\n    # to get the largest 'a' such that 'd' is still positive\n    max_a = 16\n    d = 17\n    while d > 0:\n        max_a += 1\n        d -= 1\n\n    return max_a - 1  # Subtract 1 because we have found the value after 'd' becomes 0\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    # Speed of Ahmad\n    speed_ahmad = 80  # meters per minute\n    # Speed of younger brother\n    speed_brother = 50  # meters per minute\n    # Relative speed when Ahmad is returning and meets his brother\n    relative_speed = speed_ahmad + speed_brother  # meters per minute\n    # Distance from the school where Ahmad meets his brother\n    meeting_distance = 210  # meters\n    \n    # Time taken for Ahmad to meet his brother after Ahmad turns back from school\n    meeting_time = meeting_distance / relative_speed  # minutes\n\n    # Distance Ahmad covered before meeting his brother\n    distance_ahmad = meeting_time * speed_ahmad\n\n    # Total distance between the school and their home\n    # Ahmad's distance + the distance from meeting point to school\n    total_distance = distance_ahmad + meeting_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    from fractions import Fraction\n    \n    first_fraction_numerator = Fraction(1, 30) + Fraction(1, 6)\n    first_fraction_denominator = Fraction(2, 25)\n    first_fraction = first_fraction_numerator / first_fraction_denominator\n    \n    second_fraction_numerator = 2 - Fraction(2, 3)\n    second_fraction_denominator = Fraction(8, 3)\n    second_fraction = second_fraction_numerator / second_fraction_denominator\n    \n    result = first_fraction + second_fraction\n    \n    return float(result)\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    first_eight_value = 8 * 1000  # The place value of the first 8 is in the thousands\n    second_eight_value = 8 * 10    # The place value of the second 8 is in the tens\n    difference = first_eight_value - second_eight_value\n    return difference\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        if (int(f\"572{A}\") % 4 == 0) and (int(f\"572{A}\") % 5 == 0):\n            return A\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    addition = 0\n    while True:\n        if is_palindrome(40309 + addition):\n            return addition\n        addition += 1\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # Smallest 5-digit number is 10000, we find the smallest 5-digit palindrome which is a multiple of 45\n    for num in range(10001, 99999, 2):  # Palindromic numbers cannot be even, hence we increment by 2\n        if num % 45 == 0 and str(num) == str(num)[::-1]:\n            smallest_palindrome = num\n            break\n    \n    # Largest 5-digit number is 99999, we find the largest 5-digit palindrome which is a multiple of 45\n    for num in range(99999, 10000, -2):  # We decrement by 2 for the same reason as above\n        if num % 45 == 0 and str(num) == str(num)[::-1]:\n            largest_palindrome = num\n            break\n\n    # Calculate the difference\n    difference = largest_palindrome - smallest_palindrome\n    return difference\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    length_ribbon1 = 16\n    length_ribbon2 = 24\n    ans = gcd(length_ribbon1, length_ribbon2)\n    return ans\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the common supplement\n    # It's not actually a supplement. Instead, we initially have remainders, which are 1, 2, and 7.\n\n    # Step 2: Find the LCM of all the divisors\n    from math import lcm\n    lcm_of_divisors = lcm(5, 6, 11)  # The LCM of 5, 6, and 11\n\n    # Step 3: Solve the congruences\n    # We have the following congruences based on the problem statement:\n    # x ≡ 1 (mod 5)\n    # x ≡ 2 (mod 6)\n    # x ≡ 7 (mod 11)\n    congruences = [(1, 5), (2, 6), (7, 11)]\n\n    # Using the Chinese Remainder Theorem to find a solution for the congruences\n    result = solve_congruence(*congruences)\n\n    # The unknown = the common multiple of all the divisors - the common remainder\n    biscuits = result[0]\n\n    # Ensure the biscuits are less than 500\n    while biscuits < 500:\n        biscuits += lcm_of_divisors\n\n    biscuits -= lcm_of_divisors  # To get the largest solution under 500\n\n    return biscuits\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    position_of_Luna = 7\n    sheep_behind_Luna = 4\n    total_sheep = position_of_Luna + sheep_behind_Luna\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_wage = 18\n    desired_earnings = 270\n\n    hours_needed = desired_earnings / hourly_wage\n\n    return hours_needed\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        year_digits = str(year)\n        if len(set(year_digits)) == 4:  # Check if all digits are unique (no consecutive digits till now)\n            for perm in permutations(year_digits):\n                consecutive = True\n                for i in range(len(perm) - 1):\n                    if abs(int(perm[i]) - int(perm[i + 1])) != 1:\n                        consecutive = False\n                        break\n                if consecutive:\n                    lucky_years += 1\n                    break\n    return lucky_years\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        x_bags = [x for x in bags if x != red_marbles]\n        for combo in combinations(x_bags, 3):\n            if sum(combo) == 2 * (sum(x_bags) - sum(combo)):\n                return red_marbles\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    mean_all = symbols('mean_all')\n\n    # Equations based on the given problem\n    top_3_mean = 92\n    last_7_mean = mean_all - 6\n\n    # The sum of scores for the top 3 students\n    top_3_total = top_3_mean * 3\n\n    # The sum of scores for the last 7 students\n    last_7_total = last_7_mean * 7\n\n    # Equation representing the total score of all students equals to 10 times the mean\n    equation = Eq(top_3_total + last_7_total, 10 * mean_all)\n\n    # Solve the equation\n    mean_score = solve(equation, mean_all)\n\n    return mean_score[0]\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Andre and Beth's original number of sweets as A and B respectively.\n    A, B = symbols('A B')\n\n    # Initially, Andre and Beth both have a total of 24 sweets.\n    equation1 = Eq(A + B, 24)\n\n    # After their teacher gives them 4 sweets each, Andre now has 6 sweets more than Beth.\n    equation2 = Eq(A + 4, B + 4 + 6)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Beth's number of sweets after receiving the additional sweets\n    beth_sweets_now = solutions[B] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x\n    # The five consecutive even numbers will be x, x+2, x+4, x+6, x+8\n    # Their sum is 100, so we have the equation: x + (x+2) + (x+4) + (x+6) + (x+8) = 100\n    # This simplifies to 5x + 20 = 100\n    # Solving for x gives us x = (100 - 20) / 5\n    # So the smallest number is x\n    \n    x = (100 - 20) // 5\n    return x\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance_initial = 550  # in km\n    time_initial = 5        # in hours\n    time_final = 3          # in hours\n\n    speed = distance_initial / time_initial  # calculate the speed in km/h\n    distance_final = speed * time_final      # calculate the distance after 3 hours\n\n    return distance_final\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_apples = 150\n    remaining_fraction = 1 - (2/5)\n    \n    total_apples = remaining_apples / remaining_fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    jumps = 15 - 1  # Number of jumps is one less than the number of posts\n    distance = jumps * 3  # Each jump covers 3 inches\n    return distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    return 342 - (85 - 78) * 15\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of fruits\n    total_friends = 6  # Number of friends\n\n    fruits_per_friend = total_fruits / total_friends\n\n    return int(fruits_per_friend)\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from sympy import *\n\ndef solution():\n    x = symbols('x')\n    f = ((1 + x+x**2)**6).expand() # generating function for each pair\n\n    even_arrangements = sum([f.coeff(x, 2*i)*factorial(2*i) for i in range(6)])\n\n    total_arrangements = factorial(12) / (factorial(2)**6)\n\n    prob = simplify(even_arrangements / total_arrangements).evalf()\n\n    # Extracting numerator and denominator for gcd computation\n    numer = Fraction(prob).limit_denominator().numerator\n    denom = Fraction(prob).limit_denominator().denominator\n    \n    # Calculate gcd to ensure they are relatively prime\n    gcd_val = gcd(numer, denom)\n\n    # If gcd is not 1, reduce the fraction\n    if gcd_val != 1:\n        numer = numer // gcd_val\n        denom = denom // gcd_val\n    \n    # Since they are relatively prime now, we can add them directly\n    ans = numer + denom\n    return ans\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Rates of inlets A and B\n    rate_A = 1 / 36\n    rate_B = 1 / 48\n\n    # Sequences of minutes for inlets A and B\n    sequence_A = [1, 0, 2, 0, 1]  # A, B, A, B, A\n    sequence_B = [0, 2, 0, 1, 0]  # A, B, A, B, A\n\n    # Initialize total time and filled pool percentage\n    total_time = 0\n    filled_pool = 0\n\n    # Initialize sequence index\n    seq_index = 0\n\n    # Fill the pool by following the sequence\n    while filled_pool < 1:\n        total_time += 1\n        filled_pool += (sequence_A[seq_index] * rate_A + sequence_B[seq_index] * rate_B)\n        seq_index = (seq_index + 1) % 5  # Loop through the sequence\n\n    return total_time\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Alan and Bob's individual rates (rooms per hour)\n    alan_rate, bob_rate = symbols('alan_rate bob_rate')\n\n    # Alan and Bob can paint together in 4 hours, so their combined rate is 1 room per 4 hours\n    combined_rate = 1 / 4\n\n    # Given that Bob would take 6 hours on his own, his rate is 1 room per 6 hours\n    bob_individual_rate = 1 / 6\n\n    # Write the equation representing the combined work rate\n    equation = Eq(alan_rate + bob_individual_rate, combined_rate)\n\n    # Solve for Alan's rate\n    alan_solution = solve(equation, alan_rate)\n\n    # Calculate how long it would take Alan to paint the room on his own\n    alan_time = 1 / alan_solution[0]\n\n    return alan_time\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_per_correct = 10\n    points_per_incorrect = -3\n    total_questions = 10\n    \n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if correct * points_per_correct + incorrect * points_per_incorrect == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    n = 1\n    count = 0\n    while count < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            count += 1\n            temp //= 5\n    return n - 1\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    probability_rain_saturday = 0.7\n    probability_rain_sunday = 0.5\n    \n    # Probability it doesn't rain on Saturday = 1 - Probability it rains on Saturday\n    probability_not_rain_saturday = 1 - probability_rain_saturday\n    \n    # Probability it doesn't rain on Sunday = 1 - Probability it rains on Sunday\n    probability_not_rain_sunday = 1 - probability_rain_sunday\n    \n    # Probability it doesn't rain on both days = Probability it doesn't rain on Saturday * Probability it doesn't rain on Sunday\n    probability_not_rain_both_days = probability_not_rain_saturday * probability_not_rain_sunday\n    \n    # Probability it rains at least one day = 1 - Probability it doesn't rain on both days\n    probability_rain_at_least_one_day = 1 - probability_not_rain_both_days\n    \n    return probability_rain_at_least_one_day\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the weight of Henry, Fred, and Richard\n    henry, fred, richard = symbols('henry fred richard')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(henry + fred + richard, 204.56)\n    equation2 = Eq(richard, henry - 3.24)\n    equation3 = Eq(fred, richard + 5.6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    # Get Fred's weight from the solutions\n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    # Lucas starts with 10 full bottles and 1 empty bottle lent by the shop owner.\n    full_bottles = 10\n    empty_bottles = 1\n    # The number of bottles Lucas can drink is initially the 10 bottles he bought.\n    total_drunk = 10\n\n    while full_bottles > 0 or empty_bottles >= 2:\n        # Exchange empty bottles for new full bottles.\n        new_full_bottles = empty_bottles // 2\n        total_drunk += new_full_bottles\n\n        # Calculate remaining empty bottles: new empty ones and the leftover.\n        empty_bottles = new_full_bottles + empty_bottles % 2\n        \n        # Add the empty bottles from the drinken full bottles.\n        empty_bottles += full_bottles \n        \n        # Update the number of full bottles.\n        full_bottles = new_full_bottles\n\n        # If the shop owner's bottle was used to exchange, return it.\n        if empty_bottles > 0 and full_bottles == 0:\n            empty_bottles -= 1\n\n    return total_drunk\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_pos_from_front = 10\n    andrea_pos_from_back = 12\n\n    vanessa_pos_from_back = total_children - vanessa_pos_from_front + 1\n    andrea_pos_from_front = total_children - andrea_pos_from_back + 1\n\n    num_children_between = abs(andrea_pos_from_front - vanessa_pos_from_front) - 1\n\n    return num_children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    total_weeks = 7\n    initial_sweets = 320\n    sweets_bought_each_week = 30\n    final_sweets = 348\n    \n    total_sweets_bought = total_weeks * sweets_bought_each_week\n    total_sweets_available = initial_sweets + total_sweets_bought\n    sweets_eaten = total_sweets_available - final_sweets\n    \n    sweets_eaten_each_week = sweets_eaten / total_weeks\n    return int(sweets_eaten_each_week)\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(\"281\" + str(digit))\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t = symbols('t')\n\n    # Rate of draining pool A is 1/10 per minute\n    # Rate of draining pool B is 1/6 per minute\n\n    # Let x be the initial height of the water in each pool\n    # After t minutes, height of A's water is x - t*(1/10)*x\n    # After t minutes, height of B's water is x - t*(1/6)*x\n\n    # The equation for when A's height is 3 times B's height is:\n    # (x - t*(1/10)*x) = 3*(x - t*(1/6)*x)\n    equation = Eq((1 - t/10), 3 * (1 - t/6))\n\n    # Solve for t\n    time_to_equal_height = solve(equation, t)\n\n    return time_to_equal_height[0]\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let x be the number of sweets Yue Ying has.\n    # Chenxi has x + 5 sweets.\n    # After Chenxi gives Yue Ying 10 sweets:\n    # Yue Ying will have x + 10 sweets.\n    # Chenxi will have (x + 5) - 10 sweets.\n    # The difference in number of sweets they have now will be \n    # (x + 10) - ((x + 5) - 10) which simplifies to 10 - 5\n    difference_after = 10 - 5\n    return difference_after\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    return 1\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    amount = 200\n\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 69))\n    for prime in primes:\n        if 69 - prime in primes:\n            return 69 - 2 * prime\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # converting minutes to hours for uniformity in calculations\n    late_time = 12 / 60\n    early_time = 8 / 60\n    \n    # since time is inversely proportional to speed\n    # we can represent the relations as follows:\n    # (usual_speed / fast_speed) = (time_fast / (time_usual - late_time + early_time))\n    # where:\n    # usual_speed = 3 km/h (Wilson's usual speed)\n    # fast_speed = 7 km/h (Wilson's speed when he is early)\n    # time_fast = (time_usual - late_time + early_time) (Wilson's travel time when he is faster)\n    \n    # from the inverse proportions we know that\n    # usual_speed * time_usual = fast_speed * time_fast\n\n    # let distance be 'd', and time_usual = 't'\n    # 3 * t = 7 * (t - late_time + early_time)\n    # 3 * t = 7 * t - 7 * (late_time - early_time)\n    # 4 * t = 7 * (late_time - early_time)\n    # t = (7/4) * (late_time - early_time)\n\n    # now calculating the usual time 't'\n    t = (7 / 4) * (late_time - early_time)\n    \n    # now calculating the distance 'd'\n    # d = usual_speed * time_usual\n    d = 3 * t\n\n    return d\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Let students in school A originally be x\n    # Then students in school B originally would be 1050 - x\n    # According to the question, after transferring 20 students, school A will have x-20 students\n    # and school B will have (1050 - x) + 20 students\n    # And we are given that after transferring, school A has 10 more students than school B\n    # Setting up the equation: x - 20 = (1050 - x + 20) + 10\n    # Simplifying the equation gives us: x - (1050 - x + 30) = 10\n    # 2x - 1050 - 30 = 10\n    \n    # Solving the simplified equation\n    original_students_A = (1050 + 30 - 10) / 2\n    \n    return int(original_students_A)\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_points = 70\n    points_correct = 10\n    points_incorrect = -5\n    total_questions = 10\n    \n    # Let x be the number of correct answers\n    # Then total_questions - x will be incorrect answers\n    # Equation will be: 10*x - 5*(total_questions - x) = total_points\n    \n    for x in range(total_questions+1):\n        if points_correct * x + points_incorrect * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "import itertools\n\ndef solution():\n    # without parentheses\n    original_value = 15 + 5 * 5 + 15 - 6 + 7\n\n    # possible indices for the placement of the first parentheses\n    indices = [(i, j) for i in range(5) for j in range(i + 2, 6)]\n\n    max_value = original_value\n    # try each combination of two pairs of parentheses\n    for (first_open, first_close), (second_open, second_close) in itertools.combinations(indices, 2):\n        # skip if parentheses overlap\n        if first_close > second_open:\n            continue\n\n        # construct the expression with the current set of parentheses\n        parts = ['15+5*5+15-6+7']\n        expression = \"\".join(\n            parts[:first_open]\n            + ['(']\n            + parts[first_open:first_close]\n            + [')']\n            + parts[first_close:second_open]\n            + ['(']\n            + parts[second_open:second_close]\n            + [')']\n            + parts[second_close:]\n        )\n\n        # evaluate the expression and compare with max value\n        current_value = eval(expression)\n        if current_value > max_value:\n            max_value = current_value\n\n    return max_value\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from sympy import isprime\n\n    digits = '08072003'\n    primes = [int(c) for c in digits if isprime(int(c))]\n    largest_prime_less_than_50 = max(p for p in primes if p < 50)\n    \n    return largest_prime_less_than_50\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_of_five_numbers = 54 * 5\n    total_of_first_two_numbers = 48 * 2\n    total_of_last_three_numbers = total_of_five_numbers - total_of_first_two_numbers\n    average_of_last_three_numbers = total_of_last_three_numbers / 3\n    return average_of_last_three_numbers\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    students_taking_math = 20\n    students_taking_both = 11\n    students_taking_neither = 10\n\n    # Applying the Inclusion-Exclusion Principle\n    students_taking_writing_only = total_students - students_taking_math - students_taking_neither + students_taking_both\n\n    return students_taking_writing_only\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    terms = [1, 3, 5, 7, 9, 11, 13, 15, 17]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    def max_slices_after_cuts(cuts):\n        return (cuts * (cuts + 1)) // 2 + 1\n\n    max_slices = max_slices_after_cuts(4)\n    return max_slices\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n     \n    # Let teddy's age be t and father's age be f\n    t, f = symbols('t f')\n    \n    # Equation based on given conditions\n    equation1 = Eq(f, 7 * t)\n    equation2 = Eq(f - t, 40 - 5)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (t, f))\n    \n    # Teddy's age when his father is 40\n    teddys_age_when_father_is_40 = solutions[t] + (40 - solutions[f])\n    \n    return teddys_age_when_father_is_40\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_left = 10\n    toys_between = 5\n\n    rabbit_position_left = elephant_position_left + toys_between\n    rabbit_position_right = total_toys - rabbit_position_left + 1\n\n    return rabbit_position_right\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_people = symbols('total_people')\n    \n    # Fraction of the audience that were adults: 2/7\n    adults = (2/7) * total_people\n    \n    # Fraction of the audience that were not adults: 1 - (2/7) = 5/7\n    # Fraction of the non-adult audience that were boys: 4/5 of the non-adults\n    boys = (4/5) * (5/7) * total_people\n    \n    # Fraction of the audience that were girls: Remaining fraction of the audience\n    girls = total_people - adults - boys\n\n    # Given that there were 80 more adults than girls\n    adult_girl_difference = adults - girls - 80\n    \n    # Solve the equation for total_people\n    equation = Eq(adult_girl_difference, 0)\n    total_people_solution = solve(equation, total_people)\n    \n    return total_people_solution[0]\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 110):\n        total_sum += sum(int(digit) for digit in str(i))\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink_dolphins = 48 // (11 + 1)\n    return pink_dolphins\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    # The area of a triangle is 1/2 * base * height\n    # height = (2 * area) / base\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(2, 33, 3))\n    return sum_of_squares\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the denominator\n    # {{4}^{982}}-{{2}^{1963}} can be written as ({{2}^{2}})^{982}-{{2}^{1963}}\n    # Which simplifies to {{2}^{1964}} - {{2}^{1963}}\n    # Which is {{2}^{1963}}({{2}} - 1) = {{2}^{1963}}\n    \n    # Simplify the fraction\n    # {{2}^{2019}}/{{2}^{1963}} = {{2}^{(2019-1963)}}\n    # {{2}^{2019-1963}} = {{2}^{56}}\n    \n    # Since we are interested in the remainder of division by 5,\n    # we only need to calculate {{2}^{56}} mod 5\n    \n    # Using the property of modular exponentiation (a^b mod m = (a mod m)^b mod m)\n    remainder = pow(2, 56, 5)  \n\n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of chairs (and also tables)\n    x = symbols('x')\n\n    # After selling 42 tables, we will have x - 42 tables left\n    # After bringing in 24 chairs, we will have x + 24 chairs\n    # The number of chairs will be 4 times as many as tables now\n    # So we set up the equation x + 24 = 4 * (x - 42)\n    equation = Eq(x + 24, 4 * (x - 42))\n\n    # Solve the equation to find the value of x\n    solution = solve(equation, x)\n\n    # The original number of chairs (and also tables) is the solution found\n    return solution[0]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    return 35 / 100 * 700\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6, 1914 % 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for y in range(10):\n        if (int(\"106\" + str(y))) % 18 == 0:\n            return y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    \n    remaining_cookies = total_cookies - eaten_cookies\n    \n    return remaining_cookies\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):  # since it's a 3-digit number, the hundreds place can't be 0\n        for ten in range(0, 10):\n            for one in range(0, 10, 2):  # even number so the last digit has to be even\n                if hundred + ten + one == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    largest_number = 0\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"49{i}{j}\")\n            if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n                largest_number = max(largest_number, number)\n    return largest_number\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_integers = n * (n + 1) // 2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n\n    # Each motorcycle has 2 wheels\n    # Each car has 4 wheels\n    # Each lorry has 6 wheels\n\n    # The total number of vehicles is 27\n    equation1 = Eq(motorcycles + cars + lorries, 27)\n\n    # The total number of wheels is 96\n    equation2 = Eq(2 * motorcycles + 4 * cars + 6 * lorries, 96)\n\n    # The number of cars is equal to the number of lorries\n    equation3 = Eq(cars, lorries)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(ana, olaf + 116)  # Ana is 116 cm taller than Olaf\n    equation2 = Eq(kristoff, 5.5 * olaf)  # Kristoff is five and a half times the height of Olaf\n    equation3 = Eq(ana, 150)  # Ana is 150 cm\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    height_difference = solutions[kristoff] - solutions[ana]\n\n    return height_difference\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let's denote j as the mass of the jar and c as the mass of one chocolate.\n    # We have two equations based on the given information:\n    # j + 5c = 185  (1)\n    # j + 17c = 317 (2)\n    # Now let's solve these two equations to find j and c.\n    c = (317 - 185) / (17 - 5)\n    j = 185 - 5 * c\n  \n    # Now we need to find the mass of the jar with 10 chocolates.\n    mass_with_10_chocolates = j + 10 * c\n    \n    return int(mass_with_10_chocolates)\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700  # Total weight of the solution\n    sugar_concentration = 0.32  # Sugar concentration in the solution\n\n    # Calculate the weight of sugar in the solution\n    sugar_weight = total_weight * sugar_concentration\n    \n    # Calculate the weight of water in the solution\n    water_weight = total_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of fruits\n    apples, pears, mangoes = symbols('apples pears mangoes')\n    \n    # Given ratios\n    apples_cost_per_unit = 0.60\n    pears_cost_ratio = 2/3\n    mangoes_cost_ratio = 5\n    \n    # Calculate cost per unit for pears and mangoes based on the given ratios\n    pears_cost_per_unit = pears_cost_ratio * apples_cost_per_unit\n    mangoes_cost_per_unit = mangoes_cost_ratio * pears_cost_per_unit\n    \n    # Equations based on the problem statement\n    equation1 = Eq(apples * apples_cost_per_unit + pears * pears_cost_per_unit + mangoes * mangoes_cost_per_unit, 150)\n    equation2 = Eq(pears, 4/5 * apples)\n    equation3 = Eq(mangoes, 2/5 * apples)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apples, pears, mangoes))\n\n    # Calculate the total number of fruits\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n\n    return total_fruits\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left = 4\n    cabinets_right = 7\n    # Including Candy's cabinet\n    total_cabinets = cabinets_left + cabinets_right + 1\n    return total_cabinets\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 0.1\n    return result\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Divisibility rule for 2: The last digit must be even (0, 2, 4, 6, or 8).\n    # Divisibility rule for 5: The last digit must be 0 or 5.\n    # Given this, the last digit must be 0 to satisfy both.\n    # Divisibility rule for 3: The sum of the digits must be divisible by 3.\n    # Divisibility rule for 11: The difference between the sum of the digits in the\n    # odd positions and the sum of the digits in the even positions must be \n    # divisible by 11 (or be 0).\n    \n    # Our number is in the form of 1992abc where a, b, and c are digits and c=0.\n    # Check divisibility by 3 and 11 for the smallest values of a and b.\n    \n    # Optimized search since c is already known to be 0, we start with the\n    # smallest possible a and b that satisfy divisibility by 3 and 11\n    for a in range(10):\n        for b in range(10):\n            number = 1992000 + a*100 + b*10\n            if number % 3 == 0 and number % 11 == 0:\n                return number  # Return the smallest number meeting all divisibility criteria\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    avg_second_half = 65\n    months_in_half_year = 6\n    \n    total_second_half = avg_second_half * months_in_half_year\n    total_year = total_first_half + total_second_half\n    \n    avg_per_month = total_year / 12\n    \n    return avg_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    return total_permutations\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    # Hazel's age in three years\n    hazel_age_in_3_years = 9\n    \n    # Hazel's current age\n    hazel_current_age = hazel_age_in_3_years - 3\n    \n    # Jessica's current age (3 years younger than Hazel)\n    jessica_current_age = hazel_current_age - 3\n\n    # Hazel's age next year\n    hazel_next_year_age = hazel_current_age + 1\n\n    # Jessica's age next year\n    jessica_next_year_age = jessica_current_age + 1\n\n    # Their total age next year\n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = (last_term - first_term) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    a = 4811\n    b = 1981\n    \n    while b != 0:\n        a, b = b, a % b\n        \n    return a\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    average_six = 92\n    average_five = 94\n\n    total_six = average_six * 6\n    total_five = average_five * 5\n\n    sixth_score = total_six - total_five\n\n    return sixth_score\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    number_of_trees = 21\n\n    intervals = number_of_trees - 1\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    purchase_price = 65\n    selling_price = 74\n    remaining_pairs = 5\n    total_profit = 440\n    \n    profit_per_pair = selling_price - purchase_price\n    sold_pairs = total_profit / profit_per_pair\n    initial_pairs = sold_pairs + remaining_pairs\n    \n    return int(initial_pairs)\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Time the musical ended\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    \n    # Duration of the second half of the musical\n    half_duration = timedelta(hours=1, minutes=45) // 2\n    \n    # Calculate the start time by subtracting the duration of second half from the end time\n    start_time = end_time - half_duration\n\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_at_the_end = 30\n    cars_exit = 10\n    cars_enter = 8\n\n    cars_at_the_beginning = cars_at_the_end - cars_enter + cars_exit\n\n    return cars_at_the_beginning\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    # Let the original number be x\n    # According to the question:\n    # (((x * 2) / 4) ** 2 - 4) / 10 = 6\n    # Solve the equation for x\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = (((x * 2) / 4) ** 2 - 4) / 10 - 6\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    daily_fill = 10\n    nightly_leak = 3\n    net_daily_fill = daily_fill - nightly_leak\n    first_day_fill = 3\n\n    # Since 3 liters were filled on the first day, we subtract this from the total.\n    remaining_water_needed = total_water_needed - first_day_fill\n\n    # Now we calculate the number of days required to fill the remaining water.\n    days_required = (remaining_water_needed + net_daily_fill - 1) // net_daily_fill\n\n    # Since the first day we already filled 3 liters, we need to add 1 to the days.\n    total_days = days_required + 1\n\n    return total_days\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    ans = 1234 - 566\n    return ans\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visit = 24\n    ginny_visit = 36\n\n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return lcm\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30, \n        (1/3) * 36, \n        (1/4) * 40, \n        (1/5) * 60, \n        (1/6) * 96\n    ]\n    smallest = min(amounts)\n    largest = max(amounts)\n    ans = largest - smallest\n    return ans\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the time when Kit stopped playing games\n    stop_time = datetime.strptime(\"11:20 PM\", \"%I:%M %p\")\n    \n    # Calculate the duration Kit played games in minutes\n    game_duration = timedelta(minutes=225)\n    \n    # Subtract the duration from the stop_time to find the start_time\n    start_time = stop_time - game_duration\n    \n    # Format the start_time in 12-hour clock notation\n    return start_time.strftime(\"%I:%M %p\").lstrip('0')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Darrell could draw all the marbles of other colours before getting the first green one.\n    # So, the worst case is drawing all blue, white, and black marbles before the first green.\n    blue, white, black = 5, 9, 2\n\n    # Calculate the total marbles drawn before getting the first green one.\n    draws_before_green = blue + white + black + 1  # Plus one to get the first green\n\n    return draws_before_green\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    # Half an hour has 1800 seconds\n    total_seconds = 30 * 60\n\n    # Start with number 1, initialize the current second and the current number\n    current_second = 1\n    current_number = 1\n\n    # Keep writing numbers until we run out of seconds\n    while current_second + len(str(current_number)) <= total_seconds:\n        # The next second to start writing the next number\n        current_second += len(str(current_number))\n        # Move on to the next number\n        current_number += 1\n\n    # Return the last number we finished writing\n    return current_number - 1\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_per_3_minutes = 27\n    toys_per_minute = toys_per_3_minutes / 3\n    \n    return toys_per_minute\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    # Each year, rabbit population triples first and then halves.\n    # Let's simulate this process for each year.\n    for _ in range(years):\n        initial_rabbits = (initial_rabbits * 3) / 2\n\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Let Candy's speed be c meters per minute\n    # Then Ivy's speed will be c + 20 meters per minute\n    # Candy started 6 minutes later, so by the time Candy starts, Ivy has already walked 6 * (c + 20)\n    # When they meet after another 12 minutes, Ivy walked an additional 12 * (c + 20)\n    # In total Ivy walked 18 * (c + 20) meters\n    # Candy has walked for 12 minutes, so Candy walked 12 * c meters\n    # The total distance is the sum of the distances walked by both, and it should be 1200 meters\n    # So we have 18c + 360 + 12c = 1200\n    # That simplifies to 30c + 360 = 1200\n    # Now we solve for c\n\n    # Subtract 360 from both sides\n    c = (1200 - 360) / 30\n\n    return c\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays against every other player once.\n    # So each player plays 7 matches.\n    # The maximum number of wins is achieved by the player who wins all their matches.\n    # Therefore, the champion has 7 wins.\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    # Assuming the initial height is 0 meters.\n    initial_height = 0\n    # The snail climbs up 6 meters during the day except for the 7th day.\n    climb_up_day = 6\n    # On the 7th day, the snail climbs only 2 meters.\n    climb_up_seventh_day = 2\n    # Total well depth to climb out.\n    total_well_depth = 20\n    \n    # Calculate the total height the snail climbed in the 6 days before the 7th day.\n    # Since the snail slides down during the night, the net height climbed over 6 days will be less than 36 meters.\n    height_after_six_days = initial_height + (climb_up_day * 6)\n    \n    # On the 7th day, the snail climbs out with a climb of 2 meters.\n    # Hence, after 7 days, the snail has climbed out. This is the first time the snail doesn't slide down.\n    # The height climbed on the 7th day is the remaining height to escape the well.\n    remaining_height_seventh_day = total_well_depth - height_after_six_days\n    \n    # The actual height climbed on the 7th day is given, which is 2 meters.\n    # So, the difference between the remaining height and the height climbed gives the distance slid down at night.\n    slide_down_night = remaining_height_seventh_day - climb_up_seventh_day\n\n    return slide_down_night\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    total_hours = 120 / puffs_per_hour\n    return total_hours\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    # Mass of the first metal\n    mass_first_metal = 6\n    # Nickel concentration in the first metal\n    nickel_concentration_first = 0.45\n\n    # Mass of the second metal\n    mass_second_metal = 14\n    # Nickel concentration in the second metal\n    nickel_concentration_second = 0.60\n\n    # Calculate the mass of nickel in both metals\n    nickel_mass_first = mass_first_metal * nickel_concentration_first\n    nickel_mass_second = mass_second_metal * nickel_concentration_second\n\n    # Calculate the total mass of the new metal\n    total_mass_new_metal = mass_first_metal + mass_second_metal\n\n    # Calculate the total mass of nickel in the new metal\n    total_nickel_mass_new_metal = nickel_mass_first + nickel_mass_second\n\n    # Calculate the percent concentration of nickel in the new metal\n    nickel_concentration_new_metal = (total_nickel_mass_new_metal / total_mass_new_metal) * 100\n\n    return nickel_concentration_new_metal\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    max_product = 0\n    for numbers in combinations_with_replacement(range(1, 14), 4):\n        if sum(numbers) == 13:\n            product = 1\n            for number in numbers:\n                product *= number\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward = 8\n    mother = 32\n    years = 0\n    while mother != 3 * (edward + years):\n        years += 1\n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1cm represents 6m in reality\n    playground_length_plan = 5  # the length of the playground on the plan in cm\n\n    real_length_playground = playground_length_plan * scale_ratio\n    return real_length_playground\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):  # 2-digit numbers start from 10 to 99\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    for n in range(1, 1000):  # We assume the number of students is less than 1000 for this problem.\n        if ((n + 11) == ((n ** 0.5) + 1) ** 2) and ((n + 1) ** 0.5 == ((n + 12) ** 0.5) - 1):\n            return n\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n\n    number_of_boxes = total_money // cost_per_box\n\n    return number_of_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_apples = 30\n    average_apples = 26\n\n    # girls_unknown, use variable g for girls\n    g = symbols('g')\n\n    # Equation for total apples\n    total_apples = boys * boys_apples + g * 20\n    # Equation for total people\n    total_people = boys + g\n    # Equation for average\n    equation = Eq(total_apples / total_people, average_apples)\n\n    # Solve the equation for g\n    solutions = solve(equation, g)\n\n    return solutions[0] # Return the number of girls\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n    pencil = pen - 0.5\n    total_cost = Eq(pen + pencil, 4.5)\n\n    price_pen = solve(total_cost, pen)[0]  # solve returns a list, get first element which is the solution\n\n    return price_pen\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_A = 673\n    difference = 56\n    tank_B = tank_A + difference\n    return tank_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketballs, volleyballs = symbols('basketballs volleyballs', integer=True)\n    \n    # Total number of balls equation: basketballs + volleyballs = 12\n    eq1 = Eq(basketballs + volleyballs, 12)\n\n    # Total cost equation: 30 * basketballs + 25 * volleyballs = 340\n    eq2 = Eq(30 * basketballs + 25 * volleyballs, 340)\n\n    # Solving the system of equations to find the number of basketballs and volleyballs\n    solutions = solve((eq1, eq2), (basketballs, volleyballs))\n\n    return solutions[basketballs]\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000  # Mr Rich's total wealth\n    richie_share = total_wealth * (1/3)  # Richie's share\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)  # Thrifty's share\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)  # Bounty's share\n    archie_share = remaining_after_thrifty - bounty_share  # Archie's share\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    to_lily = total_candy * (3/4)\n    remaining = total_candy - to_lily\n    to_brother = remaining * (1/3)\n    judy_has_now = remaining - to_brother\n    return judy_has_now\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum([sum([1 / i for j in range(1, i)]) for i in range(2, 61)])\n    return round(ans, 4)\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mass of mint candies in each container\n    x = symbols('x')\n    \n    # Since the ratio of mint to chocolate stays the same, the fractions indicate the mass of strawberry candies relative to the whole container\n    # We can define the total mass of each container in terms of x\n    container1 = 5/2 * x\n    container2 = 7/2 * x\n    container3 = 9/2 * x\n    \n    # The total mass of all containers\n    total_mass = container1 + container2 + container3\n\n    # Equation for the total mass given in the problem\n    equation = Eq(total_mass, 1371)\n\n    # Solve for x\n    solutions = solve(equation, x)\n    \n    # Calculate the mass of strawberry candies in each container\n    strawberry_mass1 = 2/5 * container1.subs(x, solutions[0])\n    strawberry_mass2 = 2/7 * container2.subs(x, solutions[0])\n    strawberry_mass3 = 2/9 * container3.subs(x, solutions[0])\n    \n    # Total mass of strawberry candies is the sum of strawberry masses in each container\n    total_strawberry_mass = strawberry_mass1 + strawberry_mass2 + strawberry_mass3\n    \n    return total_strawberry_mass\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the amounts Roy and Dennis have\n    roy, dennis = symbols('roy dennis')\n\n    # Equation representing the total sum of money they have\n    total_sum_eq = Eq(roy + dennis, 340)\n\n    # Equation after Roy spends 2/3 of his money\n    roy_left_eq = Eq(roy - 2/3 * roy, dennis/2)\n\n    # Equation after Dennis spends 1/4 of his money\n    dennis_left_eq = Eq(dennis - 1/4 * dennis, 2 * (roy - 2/3 * roy))\n\n    # Solve the system of equations\n    solutions = solve((total_sum_eq, roy_left_eq, dennis_left_eq), (roy, dennis))\n\n    # Extract the amount of money Dennis had in the end\n    dennis_end = solutions[dennis] - 1/4 * solutions[dennis]\n\n    return dennis_end\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 // 25\n    return ans\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    # Initialize the variables\n    remaining_digits = 300\n    digits_per_num = 1  # number of digits each number uses\n    last_page = 0       # the last page number\n\n    # While there are enough digits to form page numbers with the current number of digits\n    while remaining_digits >= digits_per_num * 9 * (10 ** (digits_per_num - 1)):\n        # Deduct the total number of digits used in this 'digit tier'\n        remaining_digits -= digits_per_num * 9 * (10 ** (digits_per_num - 1))\n        # Update the last page of this 'digit tier'\n        last_page += 9 * (10 ** (digits_per_num - 1))\n        # Increment the digit count per number\n        digits_per_num += 1\n    \n    # Calculate the pages for the remaining digits\n    pages_in_final_tier = remaining_digits // digits_per_num\n    \n    # Update the final last page number\n    last_page += pages_in_final_tier\n    \n    return last_page\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 693 into its prime factors\n    factors = factorint(693)\n    # To make a perfect square, each prime factor's exponent must be even\n    # Multiply the current exponents by 2 and divide by the current exponent then take the product\n    product = 1 \n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            product *= prime\n\n    return product\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    ball_cost = 20.45\n    num_balls = 8\n    num_hula_hoops = 6\n\n    total_ball_cost = ball_cost * num_balls\n    total_hula_hoop_cost = total_cost - total_ball_cost\n    cost_per_hula_hoop = total_hula_hoop_cost / num_hula_hoops\n\n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Unit digit of a power of 13 repeats in cycles of 4: 3, 9, 7, 1\n    unit_digit_13 = pow(13, 242, 10)\n    \n    # Unit digit of a power of 17 repeats in cycles of 4: 7, 9, 3, 1\n    unit_digit_17 = pow(17, 379, 10)\n    \n    # Unit digit of a power of 4 repeats in cycles of 2: 4, 6\n    unit_digit_4 = pow(4, 2012, 10)\n\n    # Unit digit of the final result\n    ans = (unit_digit_13 + (unit_digit_17 * unit_digit_4)) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution_A = solve(equation, A)\n    return solution_A[0]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    cost_per_kg = 7.50\n    steak_weight = 3 + 1/2\n    total_cost = cost_per_kg * steak_weight\n    money_on_hand = 20\n\n    additional_money_needed = total_cost - money_on_hand\n    return additional_money_needed if additional_money_needed > 0 else 0\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position_from_start = 12\n\n    eddie_position_from_end = total_people - eddie_position_from_start + 1\n\n    return eddie_position_from_end\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    friday = symbols('friday')\n    \n    saturday = friday + 27\n    sunday = friday - 14\n    \n    equation = Eq(friday + saturday + sunday, 475)\n    \n    solution = solve(equation, friday)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte_initial, charlotte_final = symbols('marry alexis charlotte_initial charlotte_final')\n\n    eq1 = Eq(marry, 7/5 * alexis)                                # Marry had 7/5 as many stickers as Alexis\n    eq2 = Eq(charlotte_final, charlotte_initial + 0.8 * charlotte_initial) # Charlotte's stickers increased by 80%\n    eq3 = Eq(marry - 0.2 * marry, charlotte_final + 20)         # Marry had 20 stickers more than Charlotte after giving away 20%\n    eq4 = Eq(alexis - 0.2 * alexis, charlotte_initial)           # Alexis gave 20% of her stickers to Charlotte\n    \n    solutions = solve((eq1, eq2, eq3, eq4), (marry, alexis, charlotte_initial, charlotte_final))\n\n    alexis_stickers = solutions[alexis]\n\n    return alexis_stickers\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of a light bowling ball\n    x = symbols('x')\n\n    # Equation representing the total mass of the 12 bowling balls\n    equation = Eq(6 * x + 6 * 2 * x, 65.7)\n\n    # Solve the equation for x\n    mass_of_light_ball = solve(equation, x)[0]\n\n    # Returning the mass of a light bowling ball rounded to the nearest kg\n    return round(mass_of_light_ball)\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for digit1 in range(1, 10):  # The first digit can't be 0\n        for digit2 in range(0, 10):  # The second digit can be from 0 to 9\n            # Construct the palindromic number and increment the count\n            count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq((A + B)/2, 50)\n    equation2 = Eq((B + C)/2, 43)\n    equation3 = Eq((A + C)/2, 45)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    average_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_juice = 8 * 3  # Total amount of juice in liters\n    juice_consumed = 9   # Amount of juice consumed in liters\n    container_volume = 5 # Volume of each container in liters\n\n    remaining_juice = total_juice - juice_consumed  # Remaining juice in liters\n    containers_needed = -(-remaining_juice // container_volume)  # Containers needed (ceiling division)\n\n    return containers_needed\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n\n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    # Let x be the number of pens Denise has.\n    # Jay has 6 times as many pens as Denise, so Jay has 6 * x pens.\n    # Together, they have x + 6 * x pens.\n    # According to the problem, together they have 126 pens.\n    # So we have the equation x + 6 * x = 126.\n\n    # Solve for x.\n    x = 126 // 7  # Simplify the equation to x = 126 / 7.\n\n    return x\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_bar_price = 1.26\n    total_cost_chocolate = 5 * chocolate_bar_price\n    cost_per_cookie = total_cost_chocolate / 6\n    money_init = 9.05\n    cost_of_cookies = 4 * cost_per_cookie\n    money_left = money_init - cost_of_cookies\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Every 3 boys share one ball\n    boys_sharing = boys / 3\n\n    # Every 2 girls share one ball\n    girls_sharing = girls / 2\n\n    # Total number of balls\n    balls_equation = Eq(boys_sharing + girls_sharing, 250)\n\n    # Total number of children\n    children_equation = Eq(boys + girls, 650)\n\n    # Solve the system of equations\n    solutions = solve((balls_equation, children_equation), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Initially, let's denote g as the number of girls and b as the number of boys in the classroom.\n    g, b = symbols('g b')\n\n    # After 25 girls go out, the number of girls left in the classroom is g - 25.\n    # According to the information given, g - 25 becomes 2/3 of the number of boys b.\n    equation1 = Eq(g - 25, (2/3) * b)\n\n    # After 15 boys go out to play soccer, we have b - 15 boys remaining.\n    # It is given that the remaining number of boys and girls are equal now.\n    equation2 = Eq(b - 15, g - 25)\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Calculate the initial total number of students (g + b)\n    total_students_initially = solutions[g] + solutions[b]\n\n    return total_students_initially\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    # Iterate over possible hundreds, tens, and units digits\n    for hundreds in range(1, 10):  # Hundreds can be 1-9\n        for tens in range(10):      # Tens can be 0-9\n            for units in range(10): # Units can be 0-9\n                if (hundreds + tens + units == 8) and (units % 2 == 0):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let x be the number of 10-cent coins and y be the number of 50-cent coins\n    total_value = 7590  # Convert total value to cents for easier calculation\n    ratio_x = 8\n    ratio_y = 3\n    value_x = 10  # value of one 10-cent coin in cents\n    value_y = 50  # value of one 50-cent coin in cents\n\n    # Since the coins are in the ratio 8:3\n    # 8 * value_x * x + 3 * value_y * y = total_value\n    # Simplify the ratio equation: ratio_x * x = ratio_y * y\n    # ratio_x * value_x * x + ratio_y * value_y * x = total_value (substitute y with x * ratio_x / ratio_y)\n    # Solve the equation for x\n    x = total_value / (ratio_x * value_x + (ratio_y * value_y * (ratio_x / ratio_y)))\n\n    # Calculate the value of y based on x\n    y = (ratio_x / ratio_y) * x\n\n    # Calculate the total value of the 50-cent coins\n    total_value_y = y * value_y\n\n    return total_value_y / 100  # Convert the result back to dollars\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8 * 11, x * 9 + 34)\n    solution = solve(equation)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    decrease_temp = 12\n    midnight_temp = midday_temp - decrease_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.2\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    # Volume of the prism = Base area * height\n    # Volume of the square hole = Hole area * height\n    # Subtract the volume of the hole from the total volume to get the volume of the remaining prism.\n    # Total volume of the prism = Volume of the remaining prism + Volume of the hole\n    # Height of the prism = Total volume of the prism / (Base area - Hole area)\n    \n    base_side_length = 7  # cm\n    hole_side_length = 3  # cm\n    total_volume_prism = 320  # cm^3\n\n    base_area = base_side_length ** 2  # cm^2\n    hole_area = hole_side_length ** 2  # cm^2\n    \n    remaining_base_area = base_area - hole_area  # cm^2\n    \n    height_prism = total_volume_prism / remaining_base_area  # cm\n    \n    return height_prism\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    import math\n\n    # Since rotations are considered the same, we fix one person's (Amy's) seat as the reference.\n    # Then we have 7 seats remaining for other people.\n    # Judy must sit next to Amy to satisfy the condition they must sit together.\n    # So there are 2 choices for Judy (left or right of Amy).\n    \n    judy_choices = 2\n    \n    # The remaining 6 seats can be filled by the other 6 people in 6! ways.\n    other_people_permutations = math.factorial(6)\n    \n    # The total number of different orders is then the product of these two figures.\n    total_orders = judy_choices * other_people_permutations\n    \n    return total_orders\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    num = 2008\n    # Find which triangular number section the 2008th number falls into.\n    n = 1\n    while (n * (n + 1)) // 2 < num:\n        num -= (n * (n + 1)) // 2\n        n += 1\n    # The number is the position within its triangular section.\n    ans = num\n    return ans\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5  # weight of one x in grams\n    y_weight = (3 * x_weight) / 10  # weight of one y in grams, from the balance equation 3x = 10y\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    terms = [6, 10, 14, 18, 22, 26]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n\n    # Equation based on the question\n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n\n    # Number of tomatoes sold\n    tomatoes_sold = 27\n\n    # Solve the equation\n    solution = solve((equation, Eq(tomatoes, tomatoes_sold)), (tomatoes, cucumbers))\n\n    return solution[cucumbers]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    \n    # generate all permutations of the three numbers\n    perm = permutations([3, 5, 9], 3) \n    \n    # get the number of permutations\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # hundreds digit, cannot be 0\n        for j in range(10):  # tens digit\n            for k in range(10):  # ones digit\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    start = 2\n    difference = 5\n    end = 100\n    numbers = list(range(start, end+1, difference))\n    return sum(numbers)\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Information given:\n    term_16 = 100  # The 16th term in the sequence is 100\n    total_terms = 31  # Total number of terms/nights\n    difference = 6  # Each night she ate 6 more than the night before\n\n    # Since the 16th term is 100, we can calculate the first term\n    # General formula for nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # 100 = a_1 + (16 - 1) * 6\n    \n    a_1 = 100 - (16 - 1) * difference  # Calculate the first term\n\n    # Sum of an arithmetic sequence:\n    # S_n = n/2 * (a_1 + a_n)\n    # We can calculate the last term using the first term and difference:\n    a_n = a_1 + (total_terms - 1) * difference  # Calculate the last term\n\n    # Now calculate the sum of the sequence:\n    S_n = total_terms / 2 * (a_1 + a_n)\n\n    return int(S_n)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_away = total_bags / 3\n    remaining = total_bags - given_away\n    return remaining\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Chris must ensure that after his turn, there are an even number of matches left.\n    # This allows him to always mirror Dylan's moves and win the game.\n    \n    # Let's check if Chris can ensure victory by taking either 1 or 2 matches:\n    # 1. If Chris takes 1 match, there will be 6 left, which is even.\n    #    Dylan can then take 1 or 2 matches, but no matter what, Chris can always mirror him.\n    #    So if Dylan takes 1, Chris also takes 1 and vice versa until the last match.\n    # 2. If Chris takes 2 matches, 5 will be left, which is odd.\n    #    Dylan can then take 1 match to make it 4, which is even, and then mirror Chris's moves to win.\n    \n    # Therefore, Chris must take away 1 match to ensure victory.\n    return 1\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:  # A cannot be zero as it is the first digit in a 3-digit number\n            ABC = 100 * A + 10 * B + C\n            return ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        ABAC = A * 1000 + B * 100 + A * 10 + C\n        DBEC = D * 1000 + B * 100 + E * 10 + C\n        ACEDC = A * 10000 + C * 1000 + E * 100 + D * 10 + C\n        \n        if A != 0 and D != 0 and ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time = (9 * 60) + 23\n    afternoon_time = (13 * 60) + 6\n    minutes_between = afternoon_time - morning_time\n    return minutes_between\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    a = 64\n    b = 36\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assuming from the problem statement, \n    # we need to find the total number of available choices (restaurants).\n    # However, since there is no specific data given about the number of restaurants, \n    # the problem is unsolvable with the given information.\n    # Normally, you would just return the number of available restaurants.\n    # For the sake of this example, I will return a placeholder value.\n    # Please provide the number of restaurants to get the actual answer.\n    number_of_restaurants = 1  # Placeholder value, replace this with the actual number of restaurants.\n    return number_of_restaurants\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # sum of 1 to 9\n    sum_to_9 = sum(range(1, 10))\n    # sum of 8 to 1 \n    sum_to_1 = sum(range(1, 9))\n    # total sum\n    total_sum = sum_to_9 + sum_to_1\n    return total_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook_price, pencil_case_price, eraser_price = symbols('notebook_price pencil_case_price eraser_price')\n\n    equation1 = Eq(notebook_price + pencil_case_price, 6)\n    equation2 = Eq(pencil_case_price + eraser_price, 8)\n    equation3 = Eq(3 * notebook_price + 4 * pencil_case_price + 5 * eraser_price, 50)\n\n    solutions = solve((equation1, equation2, equation3), (notebook_price, pencil_case_price, eraser_price))\n\n    return solutions[pencil_case_price]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = sum([(53 - i * 6) - (50 - i * 6) for i in range(6)])\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    time_taken = distance // speed\n    correct_time = distance / speed\n\n    return correct_time if time_taken != correct_time else time_taken\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, E, _ = p\n        if A == 0:  # Validate 'A' is not 0 because it's the first digit of a four-digit number\n            continue\n        value = 1001 * A + 110 * E  # Construct the number with given digits\n        return value\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_family_members = 4\n    average_age = 25\n    total_age = total_family_members * average_age\n\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    \n    dad_age = total_age - (harry_age + mom_age + sister_age)\n    \n    return dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    measurements = [83 * 100, 200, 8, 1/2 * 100]  # Convert all measurements to centimeters\n    door_height_cm = 200  # Typical classroom door height in centimeters\n\n    closest_measurement = min(measurements, key=lambda x: abs(x - door_height_cm))\n\n    return closest_measurement\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 0\n    page_number = 0\n\n    while total_digits < 450:\n        page_number += 1\n        if page_number >= 100:\n            digits_per_page = 3\n        elif page_number >= 10:\n            digits_per_page = 2\n        total_digits += digits_per_page\n\n    return page_number if total_digits == 450 else page_number - 1\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    result = 6.48 / 6\n    return result\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - 5/12  # Fraction of money left after purchasing lunch\n    remaining_after_dinner = 1 - 2/7  # Fraction of money left after purchasing dinner\n    \n    # Calculating the total remaining fraction after both meals\n    total_remaining_fraction = remaining_after_lunch * remaining_after_dinner\n    \n    # Since he had $45 left, we can find the initial amount by dividing the leftover by the remaining fraction\n    initial_amount = 45 / total_remaining_fraction\n    \n    return initial_amount\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits_per_page = 1\n    current_max = 9\n    total_digits = 0\n    page_count = 0\n\n    while total_digits < 1524:\n        if page_count < current_max:\n            total_digits += digits_per_page\n            page_count += 1\n        else:\n            digits_per_page += 1\n            current_max = current_max * 10 + 9\n\n    return page_count\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = ((5 - 1) * 5) / 2  # Total games played in the tournament\n    games_won_by_others = 2 + 1 + 4 + 3  # Total games won by the other players\n    games_won_by_gina = total_games - games_won_by_others  # Games won by Gina\n    return int(games_won_by_gina)\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    difference = largest_number - smallest_number\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Constants\n    g = 9.81  # acceleration due to gravity (m/s^2)\n    theta = math.radians(20)  # convert slope angle to radians\n    d = 400  # distance along the slope (m)\n    mu = 0.2  # coefficient of kinetic friction\n\n    # Components of the forces\n    # Frictional force = mu * normal force\n    # Normal force = mg * cos(theta), where m is mass, g is gravity\n    # Component of gravitational force parallel to slope = mg * sin(theta)\n    \n    # Since the skier starts from rest, initial velocity u = 0\n    # Use the work-energy principle: Work done by net force = change in kinetic energy\n    # Work done by gravity = m * g * sin(theta) * d\n    # Work done against friction = -mu * m * g * cos(theta) * d\n    # Change in kinetic energy = 0.5 * m * v^2 - 0 (because initial kinetic energy is 0)\n    \n    # Setting work done by net force equal to change in kinetic energy and solving for v gives us:\n    # m * g * sin(theta) * d - mu * m * g * cos(theta) * d = 0.5 * m * v^2\n    # The mass m cancels out:\n    # g * sin(theta) * d - mu * g * cos(theta) * d = 0.5 * v^2\n    \n    # Solving for v (final velocity):\n    # v^2 = 2 * (g * sin(theta) * d - mu * g * cos(theta) * d)\n    v_squared = 2 * (g * math.sin(theta) * d - mu * g * math.cos(theta) * d)\n    v = math.sqrt(v_squared)  # Take the square root to get the final velocity\n\n    return v\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    # Let x be the number of correct answers Avril had\n    # Let y be the number of correct answers Eddie had\n    # Each correct answer gives 10 points, and each incorrect/sub-missed answer deducts 5 points.\n    # Total questions are 10. So each incorrect answer will subtract from the total questions.\n    # Points of Avril = 10*x + 5*(10-x) = 10x + 50 - 5x = 5x + 50\n    # Points of Eddie = 10*y + 5*(10-y) = 10y + 50 - 5y = 5y + 50\n    # Avril's points + Eddie's points = 155\n    # 5x + 50 + 5y + 50 = 155\n    # Eddie's points - Avril's points = 15\n    # (5y + 50) - (5x + 50) = 15\n    # 5y - 5x = 15\n    # We have two equations: 5x + 5y = 55 and 5y - 5x = 15\n    # Solve these two equations to find x.\n\n    # We can simplify the equations further by dividing them by 5\n    # x + y = 11 (Equation 1)\n    # y - x = 3 (Equation 2)\n\n    # Adding equation 1 and equation 2: x + y + y - x = 11 + 3, 2y = 14, y = 7\n    # Subtract equation 1 from equation 2: y - x - x - y = 3 - 11, -2x = -8, x = 4\n\n    y = (11 + 3) // 2\n    x = (11 - 3) // 2\n    \n    return x\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    # Define the cost per shirt and per bag\n    price_per_shirt = 5\n    price_per_bag = 10\n    total_spent = 300\n\n    # Calculate number of groups based on Marcus' workings\n    price_per_group = price_per_shirt + price_per_bag\n    num_groups = total_spent // price_per_group\n\n    # Calculate number of shirts bought based on Marcus' workings\n    shirts_per_group = 4 # since for every 4 shirts, she buys 1 bag\n    shirts_bought_by_marcus = num_groups * shirts_per_group\n    \n    # Calculate the correct number of shirts bought\n    # Since for every 4 shirts there's 1 bag, the cost for each 'group' of 4 shirts and 1 bag is:\n    cost_per_group_correct = 4 * price_per_shirt + price_per_bag\n    # Now calculate the actual number of groups she could buy with $300\n    num_groups_correct = total_spent // cost_per_group_correct\n    # Calculate the number of shirts she actually bought, which is 4 times the number of groups\n    shirts_bought_correct = num_groups_correct * 4\n\n    # Is Marcus correct?\n    correct_answer = shirts_bought_correct == shirts_bought_by_marcus\n    return (correct_answer, shirts_bought_correct)\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Work rates for men and women\n    men_rate = 1 / (6 * 5)  # one man's work rate\n    women_rate = 1 / (5 * 6)  # one woman's work rate\n    \n    # Combined work rate for 10 men and 5 women\n    combined_rate = 10 * men_rate + 5 * women_rate\n    \n    # Time to complete the job with the combined work rate\n    time_to_complete = 1 / combined_rate\n    \n    return time_to_complete\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original number of boys and girls\n    original_state = Eq(boys, 3 * girls)\n\n    # After 12 boys left and 20 girls joined\n    after_state = Eq(boys - 12, girls + 20)\n\n    # Solve the system of equations\n    solutions = solve((original_state, after_state), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n    \n    weight_A = 56\n    weight_B = 96\n    weight_C = 120\n    \n    # Calculate the greatest common divisor (GCD) of the weights\n    # to find the greatest possible mass for each small packet\n    gcd_AB = gcd(weight_A, weight_B)\n    greatest_mass = gcd(gcd_AB, weight_C)\n    \n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # A minimum of one apple should be given to each child.\n    # That means initially we distribute 1 apple to each child, consuming 6 apples.\n    # We are left with 30 - 6 = 24 apples.\n    # To find the smallest maximum number of apples the kid could get,\n    # we divide the remaining apples evenly among the kids first\n    # before we start adding an extra to the kid with the most apples.\n    remaining_apples = 30 - 6\n    children = 6\n    \n    # Evenly distribute the remaining apples\n    min_evenly_distributed = remaining_apples // children\n    \n    # Since we're seeking the smallest maximum, we add one more apple\n    # to the smallest even distribution (to the child that will get the most)\n    # The reason for this is that, if we give more than one additional apple,\n    # we would not be finding the smallest possible maximum.\n    smallest_possible_maximum = min_evenly_distributed + 1\n    \n    # Add the initial apple that was given to every child.\n    return smallest_possible_maximum + 1\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # Let the number of apples be a\n    # Then the number of bananas will be 2a (since for every apple there are 2 bananas)\n    # And the number of oranges will be 3a (since for every apple there are 3 oranges)\n    # The sum of fruits is 24: a + 2a + 3a = 24\n    # 6a = 24\n    # a = 24 / 6\n    a = 24 / 6\n    # The number of bananas is 2 times the number of apples\n    bananas = 2 * a\n    return int(bananas)\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    anna_age = 8 + years\n    mother_age = 44 + years\n    equation = Eq(mother_age, 3 * anna_age)\n\n    solution = solve(equation, years)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Given lengths in cm\n    short_ribbon_length = 40\n    long_ribbon_length = 70\n\n    # Given numbers of ribbons\n    may_short_ribbons = 7\n    nancy_long_ribbons = 18\n\n    # The total length difference in cm (1 meter = 100 cm)\n    length_difference = 2.4 * 100\n\n    # Calculate Nancy's total ribbon length\n    nancy_total_length = nancy_long_ribbons * long_ribbon_length\n\n    # Calculate May's total ribbon length, which is Nancy's total length plus the difference\n    may_total_length = nancy_total_length + length_difference\n\n    # Calculate how much length is taken by May's short ribbons\n    may_short_total_length = may_short_ribbons * short_ribbon_length\n\n    # The remaining length must be from May's long ribbons\n    may_long_total_length = may_total_length - may_short_total_length\n\n    # Calculate the number of long ribbons May has\n    may_long_ribbons = may_long_total_length / long_ribbon_length\n\n    # Calculate the total number of ribbons May has\n    may_total_ribbons = may_short_ribbons + may_long_ribbons\n\n    return may_total_ribbons\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    for chickens in range(13):  # Since chickens can be from 0 to 12\n        rabbits = 12 - chickens\n        if (chickens * 2 + rabbits * 4) == 34:\n            return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    result = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return result\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    red_ratio = 3\n\n    total_paint = 1  # litre\n    red_paint = (red_ratio / total_ratio) * total_paint\n\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of books in shelf A, y be the number of books in shelf B\n    x, y = symbols('x y')\n    \n    # If A gives B 40 books, they would have the same number of books\n    equation1 = Eq(x - 40, y + 40)\n    \n    # If B gives A 40 books, A would have 3 times as many books as B\n    equation2 = Eq(x + 40, 3 * (y - 40))\n    \n    # Solving the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Original number of books in shelf A\n    return solutions[x]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    known_numbers = [9, 7, 5, 8, 4, 1, 8]\n    total_numbers = 8\n    mean_of_numbers = 6\n\n    sum_of_known_numbers = sum(known_numbers)\n    total_sum = mean_of_numbers * total_numbers\n    missing_number = total_sum - sum_of_known_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    money_given_to_sister = total_money / 4\n    money_left = total_money - money_given_to_sister\n\n    return money_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # To minimize the number of apples for the child who gets the most,\n    # we need to distribute the apples as evenly as possible among the other children.\n    # We start by giving each child 1 apple which is a must since each child should get at least one apple.\n    # This would leave us with 50 - 8 = 42 apples to distribute.\n    \n    # Next, we need to distribute the remaining apples in such a way that each child gets a different number.\n    # If the children are sorted by the number of apples, the difference between each child should be at least 1.\n    # For children 2 to 7 (six children), we can give them a minimum of 1, 2, 3, ..., 6 more apples.\n    # This way, we use up 1 + 2 + 3 + 4 + 5 + 6 = 21 apples, out of the 42 remaining.\n    \n    # The last child (child 8) would get whatever is left, which is the maximum number of apples.\n    # Let's calculate this number.\n    \n    remaining_apples = 42 - sum(range(1, 7))  # Subtract the used apples to find what's left\n    max_apples_for_last_child = 1 + remaining_apples  # Add one because we gave one apple initially\n    \n    return max_apples_for_last_child\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Use the proportion of cows to days\n    # If 8 cows can be fed for 10 days, then the total amount of grass is 8 * 10 cow-days\n    total_grass = 8 * 10\n    \n    # Similarly, if 4 cows can be fed for 15 days, the total amount of grass should be the same\n    # total_grass(cow-days) = 4 cows * 15 days\n    # We can validate this by calculating total_grass as 4 * 15 and checking if it's equal to 8 * 10\n    # Since this is given by the problem and total_grass remains constant, we don't actually need to calculate it again\n    \n    # We need to find out how many cows can be fed for 5 days\n    # Let the number of cows that can be fed for 5 days be x\n    # total_grass = x cows * 5 days\n    # We set this equal to the known total_grass and solve for x\n    x = total_grass / 5\n    \n    return x\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02  # kg\n    mass_per_packet = total_mass_for_12_packets / 12\n    total_mass_for_4_packets = mass_per_packet * 4\n    return total_mass_for_4_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    total_cost = 83\n    tape_cost = 9\n    tape_total_cost = 3 * tape_cost\n    cd_total_cost = total_cost - tape_total_cost\n    cd_cost = cd_total_cost / 4\n    return cd_cost\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    incorrect_divisor = 122\n    difference = 99.396\n    \n    # The difference occurs because the divisor should be 1.22 instead of 122, \n    # so the ratio between the incorrect divisor and correct divisor is 100.\n    # Hence, the difference is the difference between dividing by 1.22 and by 122,\n    # which is the result when divided by 1.22 subtract the result when divided by 122,\n    # and this is equal to the result when divided by 1.22 minus 1/100 of itself.\n    # Therefore, we can set up the equation: result / 1.22 - result / 100 = difference\n    \n    # Solve the equation to find the correct result.\n    corrected_result = difference / (1 - (1 / 100))\n  \n    return corrected_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let the number of cards Hisham has be x\n    # Then Melissa has 2x cards\n    # After giving y cards from Melissa to Hisham they both have the same number of cards\n    # So, we have Hisham's new card count as x + y\n    # And Melissa's new card count as 2x - y\n    # And we need to find y such that x + y = 2x - y -> 2y = x\n    # Also, the total number of cards does not change: x + 2x = 876 -> 3x = 876\n    x = total_cards // 3\n    y = x // 2\n    return y\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    final_number = 35\n    number_before_adding = final_number - 8\n    original_number = number_before_adding / 3\n    return original_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    import math\n    num_boys = 28\n    num_girls = 32\n    greatest_num_of_groups = math.gcd(num_boys, num_girls)\n    return greatest_num_of_groups\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # Convert litres to millilitres by multiplying by 1000\n    return n\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    a, b = symbols('a b')\n\n    # From the problem statement, we get the following system of equations:\n    # a + b = third term\n    # b + (a + b) = fourth term which is equal to 6\n    # (a + b) + (b + (a + b)) = fifth term\n    # (b + (a + b)) + ((a + b) + (b + (a + b))) = sixth term which is equal to 15\n\n    # Simplifying we get:\n    equation1 = Eq(a + b + b + (a + b), 6) # This reduces to Eq(2*a + 3*b, 6)\n    equation2 = Eq(b + (a + b) + ((a + b) + (b + (a + b))), 15) # This reduces to Eq(3*a + 5*b, 15)\n\n    # Solve the equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    a_value, b_value = solutions[a], solutions[b]\n\n    # Now we can compute the seventh term in the sequence\n    third_term = a_value + b_value\n    fourth_term = b_value + third_term\n    fifth_term = third_term + fourth_term\n    sixth_term = fourth_term + fifth_term\n    seventh_term = fifth_term + sixth_term\n\n    return seventh_term\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * (sum(1 / (i * (i + 5)) for i in range(1, 32, 5)))\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = '47583'\n    smallest_odd_num = float('inf')\n\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n\n        # Check if the number is odd and a 5-digit number\n        if num % 2 == 1 and num > 9999:\n            smallest_odd_num = min(smallest_odd_num, num)\n\n    return smallest_odd_num\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Calculate the work rates\n    men_rate = 1 / (24 * 16) # work rate for one man\n    women_rate = 1 / (16 * 24) # work rate for one woman\n    \n    # Calculate the combined work rate for 10 men and 6 women\n    combined_rate = (10 * men_rate) + (6 * women_rate)\n    \n    # Calculate the number of days needed for 10 men and 6 women to complete the job\n    days_needed = 1 / combined_rate\n    \n    return days_needed\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # Number of rectangles\n    n = 4\n    # Formula to calculate maximum number of regions formed by n rectangles\n    ans = n * (n + 1) + 1\n    return ans\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = bill_coins * 4\n    return jim_coins\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n    total_permutations = factorial(total_people)\n    eddie_middle_permutations = factorial(total_people - 1)\n    return total_permutations - eddie_middle_permutations\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    ratio = (24 / 96) ** (1 / 2)\n    missing_number = 96 * ratio\n\n    return int(missing_number)\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    \n    watch = total_money / 3\n    tie = 56\n    remaining_money = 3 * total_money / 8\n    \n    # Total spent is money spent on watch and tie\n    spent = watch + tie\n    \n    # Equation for the remaining money\n    equation = Eq(total_money - spent, remaining_money)\n    \n    # Solve the equation for total money\n    total_money_solution = solve(equation, total_money)[0]\n    \n    # Calculate how much he spent altogether\n    total_spent = spent.subs(total_money, total_money_solution)\n    return total_spent\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    # Rule of divisibility by 11: The difference between the sum of the digits in the \n    # odd positions and the sum of the digits in the even positions must be 0 or divisible by 11\n    min_value = float('inf')\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for perm in permutations(digits):\n        # Checks the divisibility condition for 11\n        if (sum(perm[0::2]) - sum(perm[1::2])) % 11 == 0:\n            value = int(''.join(map(str, perm)))\n            if value < min_value:\n                min_value = value\n    return min_value\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    time_to_pass = 10  # seconds\n\n    # relative speed\n    relative_speed = train_speed + eddie_speed  # m/s\n    \n    # distance covered in the time it takes for the train to pass is the length of the train\n    train_length = relative_speed * time_to_pass\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    result = solve_congruence(*congruences)\n\n    return result[0]\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    operations = ['+', '*']\n    for signs in product(operations, repeat=3):\n        expression = f\"1{signs[0]}2{signs[1]}3{signs[2]}4\"\n        max_value = max(max_value, eval(expression))\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_questions = 12\n    total_marks = 63\n    correct_marks = 8\n    incorrect_marks = -3\n    \n    for correct_answers in range(0, total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_marks + incorrect_answers * incorrect_marks == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    total_distance = 700 + 900  # the total distance is the length of the train plus the length of the bridge\n    speed = 400  # the speed of the train\n\n    # time = distance / speed; converting minutes to seconds by multiplying with 60\n    time = total_distance / speed  # time taken to cross the bridge completely\n\n    return time\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Calculate the average of the first 5 numbers\n    avg_first_5 = 10 / 5\n    # Calculate the average of the last 5 numbers\n    avg_last_5 = 120 / 5\n    # Calculate the average of all the numbers in the sequence\n    avg_all = (avg_first_5 + avg_last_5) / 2\n    # Calculate the sum of all the 60 numbers\n    sum_all = avg_all * 60\n    return sum_all\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1997 - 2):\n        a, b = b, (a + b) % 3\n    return a\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Peter's initial number of stickers as 'p'.\n    # According to the problem, Sam initially had 'p + 40' stickers.\n    p = symbols('p', real=True, positive=True)\n\n    # Sam gives 20% of his stickers to Peter, so he remains with 80%.\n    # Peter now has his initial number 'p' plus the 20% of Sam's stickers '0.2 * (p + 40)'.\n    # Peter then gives 25% of the stickers he now holds to Sam.\n    # In the end, Sam has 96 more stickers than Peter.\n\n    # After Sam gives stickers to Peter:\n    peter_after_sam = p + 0.2 * (p + 40)\n    sam_after_sam = (p + 40) - 0.2 * (p + 40)\n\n    # After Peter gives stickers to Sam:\n    peter_final = peter_after_sam - 0.25 * peter_after_sam\n    sam_final = sam_after_sam + 0.25 * peter_after_sam\n\n    # Equation based on the final sticker count (Sam has 96 more than Peter):\n    equation = Eq(sam_final - peter_final, 96)\n\n    # Solve the equation to find the value of 'p'.\n    result = solve(equation, p)\n\n    return result[0]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current, mom_current = symbols('hazel_current mom_current')\n    \n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel_current * 3, hazel_current + 12)\n    # On Hazel's 18th birthday, her mom will be three times her age\n    equation2 = Eq(mom_current + 18 - hazel_current, 3 * 18)\n    \n    solutions = solve((equation1, equation2), (hazel_current, mom_current))\n    # The question asks for her mom's current age\n    return solutions[mom_current]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    # Current ages of Peter, Pip, and Pit\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    \n    # The years that need to pass for Peter's age to be the sum of his sons' ages\n    years_passed = 0\n    \n    # Loop until Peter's age equals the sum of Pip's and Pit's ages\n    while peter_age != (pip_age + pit_age):\n        years_passed += 1\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n    \n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_n = (n * (n + 1)) // 2\n    ans = sum_of_n ** 2\n    return ans\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 possible pairs of consecutive numbers in a 52 card deck\n    # For each pattern, we can draw one card of each number without getting a consecutive pair.\n    # So, we can draw 4 * (13 - 1) cards without being sure of having a consecutive pair.\n    \n    max_non_consecutive_draws = 4 * (13 - 1)\n    \n    # To ensure we have a pair of consecutive numbers, we must draw one more card.\n    return max_non_consecutive_draws + 1\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    half_number = 10\n    original_number = half_number * 2\n    return original_number\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Each sheet has 4 page numbers because there are 2 on the front and 2 on the back.\n    # The newspaper unfolded implies that the pages are laid out consecutively from 1 to 36.\n    # The fifth sheet will therefore have page numbers: 5th from the front and 5th from the back.\n    # Since the back page is 36, the front page is 1, second last page is 35, and the second page is 2, and so on.\n    # Therefore, the numbers decrease by 2 from the back and increase by 2 from the front for consecutive sheets.\n    # For the fifth sheet:\n    # Front page number on the fifth sheet will be 1 + (5-1)*2 = 4*2 + 1 = 9\n    # Back page number on the fifth sheet will be 36 - (5-1)*2 = 36 - 4*2 = 36 - 8 = 28\n    # The other two page numbers will be consecutive to these, 9 + 1 = 10 and 28 - 1 = 27\n    # So, the fifth sheet has page numbers 9, 10, 27, and 28.\n\n    # Sum of all page numbers:\n    return 9 + 10 + 27 + 28\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    num_laptops = symbols('num_laptops')\n    \n    # Original cost of each laptop\n    cost_per_laptop = symbols('cost_per_laptop')\n\n    # Selling price of each laptop is $2000\n    sell_price_per_laptop = 2000\n\n    # Original total profit\n    original_profit = 60000\n\n    # Calculate original total cost for all laptops\n    original_total_cost = (sell_price_per_laptop - cost_per_laptop) * num_laptops - original_profit\n\n    # New cost per laptop after decrease\n    new_cost_per_laptop = cost_per_laptop - (1/5) * cost_per_laptop\n\n    # New total profit which is increased by 30%\n    new_profit = original_profit * 1.3\n\n    # Define the equation based on new total cost and new profit\n    new_total_cost_equation = Eq((sell_price_per_laptop - new_cost_per_laptop) * num_laptops - new_profit, original_total_cost)\n\n    # Solve the equation for the number of laptops\n    solutions = solve(new_total_cost_equation, num_laptops)\n\n    # Return the number of laptops as the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    difference = 4\n    last_term = 80\n    \n    number_of_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_of_terms = number_of_terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    single_digits = 9  # Digits from 1 to 9\n    double_digits = (99 - 10 + 1) * 2  # Digits from 10 to 99\n    triple_digits = (129 - 100 + 1) * 3  # Digits from 100 to 129\n\n    ans = single_digits + double_digits + triple_digits\n\n    return ans\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    for a in range(1, 29):  # a must be less than 28 as M % 28 is in the pattern\n        for r in range(1, 7):  # remainders must be less than 7 (the smallest divisor)\n            M = 0\n            # forming the arithmetic sequence [r, r + diff, r + 2*diff, r + 3*diff]\n            remainders = [r, r + r, r + 2*r, r + 3*r]\n            # checking if the remainders are correct when divided by 7, 9, a, 28 respectively\n            if remainders[0] % 7 == r and remainders[1] % 9 == r + r and remainders[2] % a == r + 2*r and remainders[3] % 28 == r + 3*r:\n                # calculate M with the last remainder since it must be the largest\n                M = remainders[3] + 28 * k  # loop with different k values to find minimum M\n                # Note: This equation comes from the remainder theorem which says\n                #       \"For any integer M, if M divided by n leaves remainder r,\n                #       then M = n * k + r for some integer k.\"\n                for k in range(1, a):  # check different k until finding the minimum M that fits\n                    if (M - r) % 7 == 0 and (M - (r + r)) % 9 == 0 and (M - (r + 2*r)) % a == 0 and (M - (r + 3*r)) % 28 == 0:\n                        return M  # return the smallest M value that satisfies the conditions\n                    M += 28\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    students = 0\n    # Let n be the number of layers of boys and m be the number of layers of girls\n    # Total number of layers is l = n + m\n    # Total number of students will be (2*l-1)^2\n    # Boys will occupy the corners which add l^2 to their total count\n    # The difference between boys and girls is 36\n    # We can set up the equation: boys - girls = 36 => l^2 = 36\n    # Thus, l = 6 (since the number of layers cannot be negative)\n    # The total number of students is (2*l-1)^2\n    l = 6\n    students = (2*l - 1)**2\n    return students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    men_days_for_first_trench = 3 * 2\n    first_trench_length = 120\n    second_trench_length = 880\n    number_of_men_for_second_trench = 4\n\n    length_per_man_day_first_trench = first_trench_length / men_days_for_first_trench\n\n    men_days_needed_for_second_trench = second_trench_length / length_per_man_day_first_trench\n\n    days_needed_for_second_trench = men_days_needed_for_second_trench / number_of_men_for_second_trench\n\n    return days_needed_for_second_trench\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_time = 4\n\n    # Calculate the combined rate of Ellie and Gloria\n    combined_rate = total_people / combined_time\n\n    # Calculate the rate at which Gloria works per week\n    gloria_rate = combined_rate - ellie_rate\n\n    # Calculate the time it will take for Gloria to finish the work by herself\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2 * 15 / 5\n    return int(numerator)\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    first_shelf = 18\n    second_shelf = 24\n    books_moved = 0\n\n    while second_shelf != 2 * (first_shelf - books_moved):\n        books_moved += 1\n        second_shelf += 1\n\n    return books_moved\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let the total number of pupils be x\n    # Then, the remaining pupils after excluding those in the band would be x - 5\n    # 3/4 of the remaining pupils are in the choir, so 3/4 * (x - 5) are in the choir\n    # 2/9 of the class are neither in the band nor the choir, so 2/9 * x are neither\n    # The sum of the pupils in the band, choir, and neither should equal the total number of pupils x\n    # Therefore, we can set up the equation: 5 + 3/4*(x - 5) + 2/9*x = x\n    # Simplify and solve for x\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 + (3/4) * (x - 5) + (2/9) * x, x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_sec = 20\n    distance_m = 300\n    speed_m_per_s = distance_m / time_sec\n    speed_km_per_h = speed_m_per_s * 3.6 # converting m/s to km/h\n    \n    return speed_km_per_h\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "from fractions import Fraction\n\ndef solution():\n    numerators = [285*7+6, 181*11+10, 153*13+12]\n    denominators = [7, 11, 13]\n    \n    # Find the sum in the numerator part\n    numerator_sum = sum(Fraction(n, d) for n, d in zip(numerators, denominators))\n    \n    # Find the sum in the denominator part\n    denominator_sum = sum(Fraction(1, d) for d in denominators)\n    \n    # Calculate the final result\n    ans = numerator_sum / denominator_sum\n    \n    # Convert the answer to simplest fractional form if not integer\n    ans = ans.numerator // ans.denominator if ans.denominator == 1 else ans\n    return ans\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    lollipops_left_4 = 32\n    lollipops_left_7 = 3\n    \n    # Since there are 3 lollipops in the last box when using 7 per box, we know the total amount of lollipops\n    # must be 3 more than a multiple of 7. This also must be the case for 32 lollipops remaining when using\n    # 4 per box. So we start checking from 32 upwards adding 4 each time to find a number that also conforms to\n    # being 3 more than a multiple of 7.\n    \n    total = 32\n    while (total - 3) % 7 != 0:\n        total += 4\n    \n    return total\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    common_difference = (ninth_term - third_term) // (9 - 3)\n    \n    eleventh_term = third_term + (11 - 3) * common_difference\n    return eleventh_term\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    nums = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    ans = sum([i**3 for i in nums])\n    return ans\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    long_tube, short_tube = symbols('long_tube short_tube')\n    equation = Eq(8 * long_tube + 5 * short_tube, 47)\n    # Since we are interested in the number of long tubes, we need to find the maximum\n    # number of long tubes that can be used without exceeding the total count of 47 balls.\n    # We'll start by finding the maximum number of long tubes that can be used and reduce\n    # the count until a solution exists that satisfies the equation.\n    \n    max_long_tubes_possible = 47 // 8  # Integer division\n    \n    for num_long_tubes in range(max_long_tubes_possible, -1, -1):\n        sol = solve(Eq(8 * num_long_tubes + 5 * short_tube, 47), short_tube)\n        if sol[short_tube].is_integer and sol[short_tube] >= 0:  # Checking that the solution is valid\n            return num_long_tubes\n    \n    return None  # If no solution is found (should not be the case based on the problem statement)\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    discounted_price = original_price * (1 - discount)\n\n    return discounted_price\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let F be the total number of bracelets Felicia had initially\n    # Let J be the total number of bracelets Janice had initially, which is given as 96\n    \n    # According to the problem, Janice bought 2/5 of the bracelets Felicia sold\n    # Since Felicia sold 3/5 of her bracelets, Janice bought (2/5)*(3/5)*F = (6/25)*F bracelets from Felicia\n    \n    # After selling and buying, Felicia has (5/5 - 3/5)*F = (2/5)*F bracelets left\n    # And Janice has J + (6/25)*F bracelets\n    \n    # The new ratio of bracelets is Felicia's to Janice's = 5:7\n    # Therefore, (2/5)*F / (J + (6/25)*F) = 5 / 7\n    \n    # We can now set up an equation to solve for F\n    # Simplifying the ratio we get: 7*(2/5)*F = 5*(J + (6/25)*F)\n    \n    # Substitute the value of J with 96\n    # 7*(2/5)*F = 5*(96 + (6/25)*F)\n    # (14/5)*F = 480 + (30/25)*F\n    # Multiply both sides by 25 to clear the denominator\n    # 70*F = 12000 + 6*F\n    # 64*F = 12000\n    # F = 12000 / 64\n    # F = 187.5, which is the initial number of bracelets Felicia had\n    \n    # Number of bracelets Janice bought from Felicia is (6/25) of F\n    num_bracelets_bought = (6/25) * 187.5\n\n    return int(num_bracelets_bought)\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    sum = 9 + 99 + 999 + 9999\n    return sum\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the other number Will is multiplying by 432 (since he forgot the decimal point)\n    # The incorrect multiplication result is therefore 432 * x\n    # The correct result should have been 4.32 * x, which is 0.01 times 432 * x\n    # Therefore, the difference between the incorrect and correct result is given by:\n    # incorrect_result - correct_result = 2138.4\n    # (432 * x) - (4.32 * x) = 2138.4\n    # (432 - 4.32) * x = 2138.4\n    # 427.68 * x = 2138.4\n    # Solve for x: x = 2138.4 / 427.68\n\n    x = 2138.4 / 427.68\n    # Now calculate the correct result, which is 4.32 * x\n    correct_result = 4.32 * x\n\n    return correct_result\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of boys be b and girls be g\n    b, g = symbols('b g')\n\n    # Given that each boy was given 5 candies and each girl was given 3 candies\n    # The total number of candies is 448\n    equation1 = Eq(5*b + 3*g, 448)\n\n    # There were 8 more girls than boys\n    equation2 = Eq(g, b + 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Number of children in total is the sum of boys and girls\n    total_children = solutions[b] + solutions[g]\n\n    return total_children\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    milk, fruit = symbols('milk fruit')\n    \n    original_ratio = Eq(milk / fruit, 7/9)\n    new_ratio = Eq((milk - 8) / fruit, 2/3)\n    \n    solutions = solve((original_ratio, new_ratio), (milk, fruit))\n    \n    return solutions[milk]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    for B in range(1, 3*5):  # The search range can start from 1 and go up to the product of 3 and 5.\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Calculate the difference in years between the two given dates\n    years_difference = 2008 - 1996  # 12 years\n    \n    # Calculate the age of grandmother in 1996\n    grandmother_age_in_1996 = 80 - years_difference  # 68 years old\n    \n    # Calculate how old the grandmother was when the mum was born by\n    # subtracting mother's age in 1996 from grandmother's age in 1996\n    grandmother_age_when_mum_born = grandmother_age_in_1996 - 40\n    \n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            break\n    return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lemonade, plus_1000 = symbols('lemonade plus_1000')\n    \n    total_bottles = 350\n    income = 2012\n    price_lemonade = 4\n    price_plus_1000 = 7\n    \n    # Equations based on problem statement\n    equation1 = Eq(lemonade + plus_1000, total_bottles) # Total Selling Bottles\n    equation2 = Eq(price_lemonade * lemonade + price_plus_1000 * plus_1000, income) # Total Income\n\n    solutions = solve((equation1, equation2), (lemonade, plus_1000))\n    \n    # Since the question asks for the minimum number of \"1000 Plus\" bottles sold, we need to find the maximum number of \n    # lemonade bottles sold because the maximum lemonade would mean the minimum \"1000 Plus\"\n    max_lemonade_sold = max(solutions, key=lambda x: x[0])[0]\n    \n    # Now calculate the number of \"1000 Plus\" bottles for the case of maximum lemonade sold\n    min_plus_1000_sold = total_bottles - max_lemonade_sold\n\n    return min_plus_1000_sold\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    friends = 60 // 4\n    apples_needed = friends * (4 + 1)\n    return apples_needed\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # Given numbers\n    numbers = [2017, 2758, 3670]\n    \n    # Calculate the differences between the numbers\n    # Since the remainders are the same when divided by A, the differences\n    # between the numbers should be multiples of A.\n    diffs = [numbers[i+1] - numbers[i] for i in range(len(numbers)-1)]\n    \n    # The possible values of A are the divisors of the gcd of differences.\n    from math import gcd\n    # Find gcd of the differences\n    common_diff_gcd = gcd(diffs[0], diffs[1])\n    \n    # Find divisors of the gcd.\n    possible_values_of_A = set()\n    # 1 and the number itself are always divisors\n    possible_values_of_A.add(1)\n    possible_values_of_A.add(common_diff_gcd)\n    \n    # Check all numbers up to the square root of the gcd (optimization)\n    for i in range(2, int(common_diff_gcd**0.5)+1):\n        if common_diff_gcd % i == 0:\n            possible_values_of_A.add(i)            # i is a divisor\n            possible_values_of_A.add(common_diff_gcd // i)  # the quotient is also a divisor\n    \n    # Return the sum of possible values of A\n    return sum(possible_values_of_A)\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Take all red and black socks, and then one more sock to guarantee a pair of white\n    max_socks_without_white_pair = 10 + 10\n    # The next one must be white, forming a pair\n    required_socks_for_white_pair = max_socks_without_white_pair + 1\n    \n    return required_socks_for_white_pair\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    for groups_of_6 in range(25):\n        groups_of_4 = 24 - groups_of_6\n        if (groups_of_6 * 6) + (groups_of_4 * 4) == 112:\n            return groups_of_6\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Average of three numbers is 60\n    average_three = 60\n    # Total sum of three numbers\n    sum_three = average_three * 3\n    \n    # New average with the fourth number is 90\n    average_four = 90\n    # Total sum of four numbers\n    sum_four = average_four * 4\n    \n    # The fourth number is the difference between the total sum of four numbers and three numbers\n    fourth_number = sum_four - sum_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    metres = 0.52\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    # Since A, B, and C can only take values from 0 to 9, we iterate over the possible values\n    for A in range(1, 10):  # A cannot be 0 as it's a 3-digit number\n        for B in range(10):  # B can be 0\n            for C in range(10):  # C can also be 0\n                # Check if A, B, C meets the criteria mentioned (same letters represent same number)\n                # According to the problem's unique representation condition,\n                # we need to ensure that all digits A, B, and C are unique.\n                if len({A, B, C}) == 3:  # Check for unique values\n                    # As per statement each letter represent different number, no need to form any equation                   \n                    # Simply return the first valid number found\n                    return A * 100 + B * 10 + C\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Ratio of fish to rabbit\n    fish_to_rabbit = 3 / 2\n    # Ratio of rabbit to packs of wheat\n    rabbit_to_wheat = 3 / 4\n    # Since Owen wants to trade fish directly for packs of wheat,\n    # we need to find the combined ratio of fish to packs of wheat.\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n\n    # Now we find out how many fish are needed for 8 packs of wheat.\n    # If x fish is needed for 8 packs, then we know\n    # fish_to_wheat equals x / 8\n\n    # Solving for x\n    x = fish_to_wheat * 8\n\n    return x\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return change\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the price of the purse before discount as 'x'.\n    purse_original = symbols('x')\n\n    # Calculate the original price of the handbag before the discount.\n    handbag_original = 428 / (1 - 0.20)\n\n    # The equation for the total discount combining handbag and purse.\n    total_discount_eq = Eq((handbag_original - 428) + (purse_original * 0.28), 121)\n\n    # Solve the equation for the original price of the purse.\n    solutions = solve(total_discount_eq, purse_original)\n\n    # Return the price of the purse before discount.\n    return float(solutions[0])\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    from math import factorial\n\n    n = factorial(25)\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n\n    return count\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Let \"0.A2\" be represented by x. Now, the decimal has a recurring pattern of A2 which means\n    # x = 0.A2A2A2...\n    # Multiplying x by 100 shifts two decimal places: 100x = A2.A2A2A2...\n    # Subtracting x from 100x, we get: 99x = A2\n    # So, x = A2/99\n    \n    # The first 20 digits after the decimal point are A and 2 repeated 10 times.\n    # Hence, the sum of these digits is 10*(A + 2).\n    \n    # According to the problem, 10*(A + 2) = 80\n    # Simplifying, we get: A + 2 = 8, which means A = 6.\n    # Therefore, the value of A is 6.\n    \n    return 6\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    climb_rate = 4\n    slide_rate = 1\n    net_climb = climb_rate - slide_rate\n    distance_covered = 0\n    day = 0\n    \n    while distance_covered < total_distance:\n        day += 1\n        distance_covered += climb_rate  # Snail climbs up during the day\n        if distance_covered >= total_distance:\n            break  # Snail has reached the top of the well\n        distance_covered -= slide_rate  # Snail slides down during the night\n\n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    return times_per_week * weeks\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Jogging duration from 6:30 AM to 7:00 AM in hours\n    jogging_duration = 0.5\n    \n    # Walking duration from 7:00 AM to 8:00 AM in hours\n    walking_duration = 1\n    \n    # Speed of jogging in miles per hour\n    jogging_speed = 6\n    \n    # Speed of walking in miles per hour\n    walking_speed = 5\n    \n    # Distance traveled during jogging\n    jogging_distance = jogging_speed * jogging_duration\n    \n    # Distance traveled during walking\n    walking_distance = walking_speed * walking_duration\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let x be the original amount of money Elvin had\n    chair_cost = 120\n    remaining_after_chair = 1 - 0.40  # He spent 40% on a jacket, so 60% is remaining\n    remaining_after_shopping = 0.30   # He had 30% of his original amount left\n\n    # Based on the problem, we can write the equation:\n    # remaining_after_shopping * x = remaining_after_chair * (x - chair_cost)\n    # 0.30x = 0.60 * (x - 120)\n    # Solving for x gives us the initial amount\n\n    x = (remaining_after_chair * chair_cost) / (remaining_after_shopping - (remaining_after_chair * remaining_after_shopping))\n\n    return x\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import lcm\n\ndef solution():\n    return lcm(6, 10)\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    # Using the Pigeonhole Principle\n    min_books_in_top_layer = (total_books + layers - 1) // layers\n\n    return min_books_in_top_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Ahmad originally bought\n    x = symbols('x')\n    \n    # Total cost of the original books\n    total_original_cost = 3.50 * x\n    \n    # Total cost of the 2 additional books\n    total_additional_cost = 2 * 6\n    \n    # The new average cost and total books after buying 2 more books\n    new_average_cost = 4\n    total_books = x + 2\n    \n    # The total cost after buying 2 more books\n    total_cost = new_average_cost * total_books\n    \n    # Create the equation based on the new average cost\n    equation = Eq(total_cost, total_original_cost + total_additional_cost)\n    \n    # Solve the equation to find the number of books Ahmad originally bought\n    solution = solve(equation, x)\n    \n    # The total number of books he bought altogether\n    total_books_bought = solution[0] + 2 # add the 2 additional books to the original number\n    \n    return total_books_bought\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for i in range(1, 4):\n        for j in range(4):\n            for k in range(4):\n                if i != j and i != k and j != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = -4  # Since each term decreases by 4\n\n    # The nth term of an arithmetic sequence can be found by:\n    # nth_term = first_term + (n - 1) * difference\n    # We need to find n such that nth_term < 0\n    \n    # 0 > 50 + (n - 1) * (-4)\n    # 0 > 50 - 4n + 4 \n    # 4n > 54\n    # n > 13.5\n  \n    # Since n needs to be a whole number and the term before the first negative\n    # term must also be a whole number, we take the floor of 13.5\n    num_terms = 13\n\n    return num_terms\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            current_product = a * b * c\n            if current_product > max_product:\n                max_product = current_product\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) * 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    cheese_weight_in_grams = 1.2 * 1000  # Convert kg to grams\n    piece_weight = 30\n    number_of_pieces = cheese_weight_in_grams / piece_weight\n    return int(number_of_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # Convert 2.5 liters to quarts (1 liter = 1.05668821 quarts)\n    coke_quarts = 2.5 * 1.05668821\n    \n    # Capacity of the cup in quarts\n    cup_capacity = 0.5\n    \n    # Number of cups Hannah can drink (rounded to the nearest integer)\n    num_cups = round(coke_quarts / cup_capacity)\n    \n    return num_cups\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # Known values\n    B = 2\n    D = 0\n    \n    # Loop through possible values\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    # Making sure all digits are unique\n                    if len({A, B, C, D, E, F}) == 6:\n                        ABCDEF = int(f\"{A}{B}{C}{D}{E}{F}\")\n                        EFABCD = int(f\"{E}{F}{A}{B}{C}{D}\")\n                        \n                        # Checking the given equation\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Time spent jogging (from 6:30am to 7:30am)\n    jogging_time_hours = 1\n    \n    # Time spent walking (from 7:30am to 9:30am)\n    walking_time_hours = 2\n    \n    # Speed during jogging\n    jogging_speed_mph = 6\n    \n    # Speed during walking\n    walking_speed_mph = 5\n    \n    # Distance covered while jogging\n    jogging_distance_miles = jogging_speed_mph * jogging_time_hours\n    \n    # Distance covered while walking\n    walking_distance_miles = walking_speed_mph * walking_time_hours\n    \n    # Total distance traveled\n    total_distance_miles = jogging_distance_miles + walking_distance_miles\n    \n    return total_distance_miles\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n\n    # Original relationship\n    equation1 = Eq(angel, 5/6 * belle)\n    # After Angel threw away 58 sweet wrappers\n    equation2 = Eq(angel - 58, 0.75 * belle)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children and y be the original amount of money in pence\n    x, y = symbols('x y')\n\n    # If there was 20p more, it would be enough for each child to receive 70p\n    # Equation: y + 20 = 70 * x\n    equation1 = Eq(y + 20, 70 * x)\n\n    # If each child was to receive 60p, then 2.10 pounds (or 210p) would be left over\n    # Equation: y - (60 * x) = 210\n    equation2 = Eq(y - (60 * x), 210)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Number of children is the solution for x\n    return solutions[x]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remittance_percentage = 0.20\n    bank_charge_percentage = 0.005\n\n    remittance_amount = salary * remittance_percentage\n    bank_charge = remittance_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for vase1 in range(1, 10):\n        for vase2 in range(1, 10):\n            for vase3 in range(1, 10):\n                if vase1 + vase2 + vase3 == 10 and len(set([vase1, vase2, vase3])) == 3:\n                    count += 1\n    return count // 6  # Divide by 6 to account for permutations of vases\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    initial_amount = -76.20\n    payment = 120.75\n    final_amount = initial_amount + payment\n    return final_amount\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10**6):  # Limiting the search within a reasonable range\n        original_num = int(str(i) + '9')\n        new_num = int('9' + str(i))\n        if new_num == 4 * original_num:\n            return original_num\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Since Dilly can only identify by color, we will consider the worst case scenario.\n    # Dilly keeps taking gloves out with the aim of getting a matched pair by color.\n    # Hence, Dilly could take out all gloves of one kind without getting a matched pair.\n    # First taking 1 left-hand blue glove (worst case, not forming a pair).\n    # Next, taking 2 left-hand green gloves (worst case, still no matching pair).\n    # Continuing, taking 3 right-hand blue gloves (worst case, possible match in color but still not a pair).\n    # At this point, no matter what glove Dilly takes out next, it would form a matching pair in color.\n    # Therefore, we add 1 to the count from the previous steps.\n    \n    # The smallest number of gloves to guarantee a matching pair in color is:\n    number_of_gloves = 1 + 2 + 3 + 1\n    return number_of_gloves\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n    \n    start_date = datetime.strptime('2nd March', '%dst %B') if '1st' in '2nd March' else \\\n                 datetime.strptime('2nd March', '%dnd %B') if '2nd' in '2nd March' else \\\n                 datetime.strptime('2nd March', '%drd %B') if '3rd' in '2nd March' else \\\n                 datetime.strptime('2nd March', '%dth %B')\n\n    end_date = datetime.strptime('15th April', '%dst %B') if '1st' in '15th April' else \\\n               datetime.strptime('15th April', '%dnd %B') if '2nd' in '15th April' else \\\n               datetime.strptime('15th April', '%drd %B') if '3rd' in '15th April' else \\\n               datetime.strptime('15th April', '%dth %B')\n\n    # Increment the year for end_date since no year is given, but we know the trip ends in April\n    # which comes after March, thus implying that the year is the same for both dates\n    end_date = end_date.replace(year=start_date.year)\n    \n    # Calculate the difference in days\n    trip_length = (end_date - start_date).days + 1  # +1 to include the start day in the count\n\n    return trip_length\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45 / 100\n    new_price = original_price * (1 + increase_percentage)\n    \n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean_value = 6\n    total_count = 8\n\n    total_sum = mean_value * total_count\n    current_sum = sum(known_numbers)\n    missing_number = total_sum - current_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Initial interval and the number of holes already dug\n    initial_interval = 3\n    holes_dug = 30\n\n    # New interval after the supervisor's order\n    new_interval = 5\n\n    # The circumference of the garden\n    circumference = 300\n\n    # The remaining distance to be covered after 30 holes have been dug\n    # The 30th hole is at position 30 * initial_interval\n    distance_covered = holes_dug * initial_interval\n    remaining_distance = circumference - distance_covered\n\n    # Compute the number of new holes to be dug at 5m intervals, not counting the hole at 0\n    # since it will overlap with the hole when the gardeners complete the circle\n    additional_holes = (remaining_distance // new_interval) - (1 if remaining_distance % new_interval == 0 else 0)\n\n    return additional_holes\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    def climbing_ways(steps):\n        if steps <= 1:\n            return 1\n        else:\n            return climbing_ways(steps - 1) + climbing_ways(steps - 2)\n    \n    ways_to_step_5 = climbing_ways(5)  # Calculating ways to reach the 5th step\n    ways_from_step_5_to_10 = climbing_ways(10 - 5)  # Calculating ways from 5th to 10th step\n\n    # Total ways is the product of the ways to reach 5th step and from 5th to 10th\n    total_ways = ways_to_step_5 * ways_from_step_5_to_10\n    return total_ways\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n\n    return total_combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of sweets Rachel has,\n    # and let a represent the number of sweets Alice has.\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces of sweet, then they would have the same number of sweets.\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 pieces of sweet, Rachel has 3 times as many pieces of sweet left over as Alice.\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of sweets they had originally\n    total_sweets = solutions[r] + solutions[a]\n\n    return total_sweets\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    # Eddie is on the left end and Avril is next to Eddie, so treat them as a single entity.\n    # We then have 5 students + 1 entity (Eddie and Avril) to arrange.\n    remaining_students = 5  # (7 - 2) because Eddie and Avril's positions are fixed\n\n    # Calculate the permutations for the remaining students plus the Eddie-Avril entity.\n    total_permutations = factorial(remaining_students + 1)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    from itertools import combinations\n\n    # Generate all unique combinations of positions to insert brackets\n    positions = list(combinations(range(5), 2))\n    max_value = -float('inf')  # Initialize with negative infinity\n\n    # Original equation parts\n    eq_parts = ['15', '+', '5', '*', '5', '+', '15', '-', '6', '+', '7']\n\n    # Iterate through all unique combinations of positions to insert brackets\n    for comb in combinations(positions, 2):\n        # Make sure the brackets do not overlap\n        if comb[0][1] < comb[1][0]:\n            # Construct the equation with the current bracket positioning\n            new_eq = eq_parts[:]\n            new_eq.insert(comb[1][1] * 2 + 1, ')')\n            new_eq.insert(comb[1][0] * 2, '(')\n            new_eq.insert(comb[0][1] * 2 + 1, ')')\n            new_eq.insert(comb[0][0] * 2, '(')\n\n            # Evaluate the equation and check if it's the current maximum\n            try:\n                value = eval(''.join(new_eq))\n                if value > max_value:\n                    max_value = value\n                    max_equation = ''.join(new_eq)  # Preserve the max equation representation\n            except Exception as e:\n                pass  # Ignore invalid bracket positions that cause evaluation errors\n\n    return max_value, max_equation\n\nans, eq = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    pages = 0\n    digits_used = 0\n    \n    for i in range(1, total_digits+1):\n        if i < 10:\n            digits = 1\n        elif i < 100:\n            digits = 2\n        elif i < 1000:\n            digits = 3\n        else:\n            break\n        \n        if digits_used + digits > total_digits:\n            break\n        else:\n            digits_used += digits\n            pages += 1\n        \n    return pages\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    # Ivan's total score for five assignments\n    ivan_total = 80 * 5\n    \n    # Billy's total score for the first four assignments\n    billy_total_first_four = 89 * 4\n    \n    # Billy's target average after five assignments\n    billy_target_average = 80 + 10\n    \n    # Billy's required total score to achieve target average\n    billy_required_total = billy_target_average * 5\n    \n    # Billy's score required for the fifth assignment\n    billy_fifth_score = billy_required_total - billy_total_first_four\n    \n    return billy_fifth_score\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length / pipe_length\n    return int(num_pipes) if num_pipes.is_integer() else int(num_pipes) + 1\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # Every whole number from 1 to 999 can be paired with a unique whole number to make the sum of 1000.\n    # For example, 1 + 999, 2 + 998, ..., 499 + 501, 500 + 500\n    # We are only looking for pairs of whole numbers, so we don't consider order.\n    # The case of 500 + 500, however, is unique as both numbers are the same,\n    # so instead of adding 1 as we do for each pair, we only count this once.\n    \n    # Number of ways excluding the middle pair (500 + 500)\n    ways_excluding_middle = (1000 - 1) // 2\n    \n    # We need to add back the single case where the two numbers are the same\n    ways_including_middle = ways_excluding_middle + 1\n    \n    return ways_including_middle\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    term_7 = 39\n    term_8 = 44\n    term_9 = 49\n    common_difference = term_8 - term_7\n\n    term_100 = term_7 + (100 - 7) * common_difference\n\n    return term_100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(1260)\n    m = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            m *= prime\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(1, 28):\n        if (i % 4 == 3) and (i % 7 == 3):\n            return i % 28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    from math import gcd\n\n    # Function to find the Least Common Multiple (lcm)\n    lcm = lambda a, b: abs(a*b) // gcd(a, b)\n\n    least_common_multiple = lcm(8, 11)\n\n    # Since the number leaves a remainder of 6 when divided by 8 or 11,\n    # the number must be of the form lcm(8,11) * k + 6, where k is an integer\n    # Also, as it is a two-digit number, it must be between 10 and 99\n    for k in range(1, 100):\n        number = least_common_multiple * k + 6\n        if 10 <= number <= 99:\n            return number\n    return None\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # The ones digit of a number is only affected by the ones digit of its base when exponentiated.\n    # We can look at the pattern of the ones digit as we raise 9 to successive powers.\n    ones_digit = 9\n    pattern = []\n\n    # Find the pattern of ones digits for powers of 9 till the pattern repeats\n    while ones_digit not in pattern:\n        pattern.append(ones_digit)\n        ones_digit = (ones_digit * 9) % 10  # Multiplying by 9 and getting the new ones digit.\n\n    # Pattern repeats after a fixed number of powers, let's find the length of the repeating pattern\n    pattern_length = len(pattern)\n    \n    # 999^99 has the same ones digit as 9^99 because only the ones digit of the base affects the ones digit of the result.\n    # We now find the position of the ones digit in our pattern for 9^99\n    position_in_pattern = 99 % pattern_length\n\n    # If position is zero, we take the last element of the pattern, otherwise we take (position - 1) because of 0-based indexing\n    ones_digit_of_result = pattern[-1] if position_in_pattern == 0 else pattern[position_in_pattern - 1]\n\n    return ones_digit_of_result\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    # Let x be the total value of the 5 ponies excluding Rein Beau\n    # Initial average value of ponies in the small stable is x/3\n    # Initial average value of ponies in the large stable is also x/3\n    \n    # After Rein Beau moves, the average value in the small stable becomes (x - 250000) / 2\n    # After Rein Beau moves, the average value in the large stable becomes (x + 250000) / 4\n    \n    # According to the problem, both averages increase by £10 000 after Rein Beau moves.\n    # (x - 250000)/2 = x/3 + 10000\n    # (x + 250000)/4 = x/3 + 10000\n    \n    # Solve for x using these equations:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation1 = Eq(((x - 250000) / 2), (x / 3) + 10000)\n    equation2 = Eq(((x + 250000) / 4), (x / 3) + 10000)\n    \n    solutions = solve((equation1, equation2), (x))\n    \n    # The total value is the value of x plus the value of Rein Beau\n    total_value = solutions[x] + 250000\n    \n    return total_value\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234 + 50  # adding 50 to reverse the last step of the trick\n    result //= 50       # dividing by 50 to reverse the multiplication by 50\n    \n    # Subtract 1 to reverse the addition of 1 done after multiplying the month by 4\n    day = result % 100  # the last two digits represent the day after reversing the operations\n    month = (result - day) // 100  # the remaining number represents the month\n\n    # Reverse the initial operation: multiplying the number of the month by 4 and adding 1\n    month = (month - 1) // 4\n\n    return (day, month)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    total_stickers = 38 + 14\n    stickers_left = total_stickers - 9\n    return stickers_left\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    # Since we're only interested in the remainder, we can use the property of powers of 2 mod 3\n    remainder = 2 ** 2015 % 3\n    return remainder\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n\n    # Consider the 4 pupils insisting to stand together as one unit.\n    # So we have 5 units to arrange (1 unit of 4 pupils and 4 single pupils)\n    units = factorial(5)\n\n    # Now arrange the 4 pupils who insist on standing together among themselves.\n    arrangement_within_unit = factorial(4)\n\n    # The total arrangements are the product of the two possibilities.\n    total_arrangements = units * arrangement_within_unit\n\n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_solution = sugar + water\n    \n    percent_concentration = (sugar / total_solution) * 100\n    \n    return percent_concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Let the first of the three consecutive numbers be x.\n    # Then the next two consecutive numbers would be (x + 1) and (x + 2).\n    # The sum of these three numbers is given by:\n    # x + (x + 1) + (x + 2) = 60\n    # Simplifying this expression gives:\n    # 3x + 3 = 60\n    # Subtracting 3 from both sides gives:\n    # 3x = 57\n    # Dividing by 3 gives us x:\n    x = 57 // 3\n\n    # The largest of the three numbers is x + 2:\n    largest_number = x + 2\n    \n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    for gold_medals in range(81):  # Possible number of gold medals can range from 0 to 80\n        silver_medals = 80 - gold_medals  # Total medals minus the number of gold medals\n        if gold_medals * 5 + silver_medals * 4 == 331:\n            return gold_medals\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_lamb = 8.70\n    cost_beef = 9.40\n    weight_lamb = 7\n    weight_beef = 30\n    \n    total_cost = (cost_lamb * weight_lamb) + (cost_beef * weight_beef)\n    \n    return total_cost\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the work rate of the master as m and apprentice as a\n    m, a = symbols('m a')\n\n    # Equation representing work done by 1 master and 3 apprentices in 4 days to complete 1 task\n    equation1 = Eq(4 * (m + 3*a), 1)\n\n    # Equation representing work done by 2 masters and 1 apprentice in 3 days to complete 1 task\n    equation2 = Eq(3 * (2*m + a), 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Work rate of the apprentice\n    apprentice_rate = solutions[a]\n\n    # Time taken by 1 apprentice to complete the task\n    time_for_apprentice = 1 / apprentice_rate\n\n    return time_for_apprentice\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_spectators = symbols('total_spectators')\n    \n    # Equation based on the information given\n    equation = Eq(total_spectators - (1/3) * total_spectators - (5/8) * (2/3) * total_spectators, 80)\n    \n    # Solve the equation for the total number of spectators\n    solutions = solve(equation, total_spectators)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Since we have:\n    # 5★2 = 8 => 5 * 2 - 2 = 8 => 10 - 2 = 8\n    # 2★5 = 5 => 2 + 5 = 5 (This seems incorrect since 2 + 5 = 7)\n    # 6★3 = 15 => 6 * 3 - 3 = 15 => 18 - 3 = 15\n    # 8★2 = 14 => 8 * 2 - 2 = 14 => 16 - 2 = 14\n    \n    # We can conclude that the operation defined by Johnson is like this:\n    # a★b = a * b - b if a > b Otherwise, if b > a, a★b could be a + b = b\n    \n    # However, since 2★5 = 5 is not valid for any normal arithmetic operation,\n    # we assume that ★ implies that when the second number is bigger, the result is the second number.\n    # Therefore, if a < b, a★b = b\n    \n    # With this operation, let's calculate 11★10:\n    \n    a = 11\n    b = 10\n    \n    if a > b:\n        ans = a * b - b\n    else:\n        ans = b\n    \n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # distance between elephant and rabbit\n    distance = 5\n    # position of elephant from left\n    position_elephant = 10\n    # position of rabbit from right\n    position_rabbit = 9\n\n    # total = position of elephant from left + position of rabbit from right + distance - 1 (since one of the positions is counted twice)\n    total_dolls = position_elephant + position_rabbit + distance - 1\n    \n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    # Step-by-step calculation\n    inside_brackets = (11/52) / (2 + 3/4) * (4.3 - 1.8)\n    ans = 0.4 * inside_brackets * 26\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    num_students = 0\n    for boy_layer in range(100):  # Assuming the number won't go beyond 100 layers\n        # Each \"boy_layer\" corresponds to a square of boys with side length of \"boy_layer*2 + 1\"\n        # Each \"girl_layer\" corresponds to a square of girls inside the square of boys\n        girl_layer = boy_layer - 1\n        \n        boys = (boy_layer * 2 + 1)**2 if boy_layer >= 0 else 0\n        girls = (girl_layer * 2 + 1)**2 if girl_layer >= 0 else 0\n        \n        num_boys = boys - girls\n        num_girls = girls - (girl_layer - 1)**2 if (girl_layer - 1) >= 0 else girls\n        \n        if num_boys - num_girls == 32:\n            num_students = boys + girls\n            break\n    \n    return num_students\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, months, planted_each_month = symbols('original_roses original_daisies months planted_each_month')\n\n    equation1 = Eq(original_roses + original_daisies, 300)\n    equation2 = Eq(original_roses + months * planted_each_month, 280)\n    equation3 = Eq(original_daisies + months * planted_each_month, 180)\n    equation4 = Eq(original_roses - original_daisies, 280 - 180)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (original_roses, original_daisies, months, planted_each_month))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n\n    prime_nums = list(primerange(50, 61))  # 61 is exclusive\n    ans = sum(prime_nums)\n\n    return ans\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    difference = (fifteenth_term - tenth_term) // (15 - 10)\n    \n    first_term = tenth_term - (10 - 1) * difference\n    \n    nth_term = first_term + (102 - 1) * difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    chinese_books_and_comics = total_books - english_books\n    \n    # Let the number of comics be x,\n    # then the number of Chinese books is 2x.\n    # So, x + 2x = chinese_books_and_comics\n\n    comics = chinese_books_and_comics / 3\n\n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n    average_score = total_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # To minimize the number of apples for the child with the most,\n    # we must first ensure that all other children get a unique number\n    # of apples that is as small as possible.\n    # In order to give distinct amounts to each child, we can start distributing\n    # like this: 1, 2, 3, ..., which is an arithmetic series.\n    # For 7 children (since the 8th will get the most), their minimum distribution is:\n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 apples.\n    \n    # Calculate the total apples given to the first 7 children in the series\n    min_apples = sum(range(1, 8))\n    \n    # Calculate the apples remaining for the 8th child\n    remaining_apples = 50 - min_apples\n    \n    return remaining_apples\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    ans = ((1/30 + 1/6) / (2/25)) + ((2 - 2/3) / (8/3))\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for i in range(1, 8):\n        count += 1  # splitting into two non-zero numbers i and (8-i)\n    return count // 2  # dividing by 2 to eliminate duplicate pairs such as (1,7) and (7,1)\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    num_boxes = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n    equation1 = Eq(3*apple + 5*orange, 270)\n    equation2 = Eq(3*apple + 7*orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    max_no_bow_ties_no_spectacles = total_men - max(bow_ties, spectacles)\n    \n    return max_no_bow_ties_no_spectacles\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    base_amount = 350\n    percentage_of_base = 20 / 100\n    fifty_percent_of_percentage = 50 / 100\n    \n    ans = base_amount * percentage_of_base * fifty_percent_of_percentage\n    return ans\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n\n    equation = Eq(blue + red + green, 112)\n\n    solutions = solve(equation, blue)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = 414 * (1/3)\n    return result\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since each child gets at least one apple and no two can have the same number,\n    # start by giving each child one apple and order them by increasing number of apples.\n    # Remaining apples after giving each child one apple:\n    remaining_apples = 19 - 5\n    \n    # Create an array to represent the apples distributed to the children in ascending order:\n    children = [1,2,3,4,remaining_apples + 1] # Assume the last child gets all the remaining apples\n    \n    # Now, reduce the number of apples from the child with the most until we resolve conflicts\n    index = 3 # start checking from the second last child because the last child has the most.\n    \n    while children[index] >= children[index+1]:\n        children[index] -= 1\n        children[index-1] += 1\n        children.sort()\n    \n    return children[-1] # the most apples after resolving conflicts\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    import math\n    \n    # Treat Ali and Bala as one unit plus the other three individuals (Charles, Ella, and Dan).\n    number_of_units = 4  # AliBala, Charles, Ella, Dan\n    \n    # Calculate permutations for these 4 units.\n    permutations_of_units = math.factorial(number_of_units - 1)  # Dan is fixed at the furthest left, so permutation for remaining 3 units.\n    \n    # Ali and Bala can be arranged in 2! ways since they must stand together.\n    permutations_of_Ali_Bala = math.factorial(2)\n    \n    # Total different arrangements will be permutations of units multiplied by permutations of Ali and Bala.\n    total_arrangements = permutations_of_units * permutations_of_Ali_Bala\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Set-up the rate of trade between the items\n    fish_to_rabbit = 3 / 2  # Owen gives 3 fishes for 2 rabbits\n    rabbit_to_wheat = 4 / 3  # Oscar gives 3 rabbits for 4 packs of wheat\n    \n    # To determine the direct trade rate between fish and wheat, multiply the two rates\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat  # This is fish per pack of wheat\n    \n    # Number of fishes Owen needs to give for 1 pack of wheat\n    fishes_for_one_wheat = 1 / fish_to_wheat\n    \n    # Number of fishes Owen needs to give for 8 packs of wheat\n    fishes_for_eight_wheat = fishes_for_one_wheat * 8\n    \n    return fishes_for_eight_wheat\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    import math\n    ans = math.gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 140 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    for x in range(10, 100):  # range for two-digit numbers\n        for y in range(10, 100):  # range for two-digit numbers\n            if abs(x - y) == 36:  # incorrect difference\n                # Getting the tens and ones of both numbers\n                x_tens = x // 10\n                x_ones = x % 10\n                y_tens = y // 10\n                y_ones = y % 10\n                # Mistakes made by Serene\n                mistaken_y = (y_tens + 2) * 10 + (y_ones - 1)\n                if mistaken_y == y + 21:\n                    return abs(x - (y + 21))  # correct difference\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Worst-case scenario: drawing all balls of one color first, then all of another color.\n    # Ultimately, we draw at least one ball from the third color to meet the condition.\n    # As such, we need to account for the possibility of drawing all of the red and white balls first.\n    max_red_white = 15 + 9  # All red and white balls\n\n    # The next ball drawn must be yellow, which gives us at least 3 different colored balls.\n    # So we add one more to the count.\n    min_draw = max_red_white + 1  # Add one for the guaranteed yellow ball\n\n    return min_draw\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    terms = (35 - 2) // 3 + 1\n    sum_seq = (2 + 35) * terms // 2\n    return sum_seq\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    number_of_classes = 4\n    average_students = total_students / number_of_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n\n    length_left = total_length - (used_for_fences + used_for_woods)\n\n    return length_left\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [2, 7, 8]\n    permutation_list = list(permutations(digits, 3))\n    \n    return len(permutation_list)\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n    \n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    return solutions[ellen] + solutions[lenny]\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    total_income = 120000\n    first_50000_tax = 0.06 * 50000\n    remaining_income_tax = (0.06 + T) * (total_income - 50000)\n\n    tax_paid = first_50000_tax + remaining_income_tax\n    equation = Eq(tax_paid, 10000)\n\n    solution_T = solve(equation, T)\n\n    return solution_T[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "from itertools import permutations\n\ndef solution():\n    smallest_difference = float('inf')  # Initialize to a very large number\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for perm in permutations(digits, 10):  # Generate all 10-digit permutations\n        first_number = int(''.join(map(str, perm[:5])))  # First 5 digits as number\n        second_number = int(''.join(map(str, perm[5:])))  # Last 5 digits as number\n        # Check if this permutation gives a smaller difference and update if necessary\n        if 0 not in (perm[0], perm[5]):\n            difference = abs(first_number - second_number)\n            if difference < smallest_difference:\n                smallest_difference = difference\n    return smallest_difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_ways = 0\n    presents = ['car', 'puzzle', 'calculator', 'p1', 'p2', 'p3', 'p4']  # The seven different presents\n    \n    # Permute through all ways to distribute presents\n    for perm in permutations(presents, 5):\n        if 'car' in perm[:2] and ('puzzle' in perm[:2] or 'calculator' in perm[:2]):\n            total_ways += 1\n\n    return total_ways\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # length of the train in meters\n    tunnel_length = 500  # length of the tunnel in meters\n    speed = 10  # speed of the train in meters per second\n    \n    # Total distance the train needs to cover to completely pass through the tunnel\n    total_distance = train_length + tunnel_length\n    \n    # Time taken to pass the total distance at the given speed\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    # Let b represent Buzz's weight and j represent Jessie's weight.\n    # As per the problem statement, we have two equations:\n    # b = 3 * j (Buzz is three times as heavy as Jessie)\n    # b = j + 450 (Buzz is 450g heavier than Jessie)\n    # By combining the equations, we can solve for b (Buzz's weight)\n    \n    # Substitute the value of j from the second equation into the first\n    # 3 * j = j + 450\n    # 2 * j = 450\n    # j = 450 / 2\n    j = 450 / 2\n    \n    # Now that we have Jessie's weight, we can find Buzz's weight b\n    # b = 3 * j\n    b = 3 * j\n    \n    return b\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    price_per_pound = 49\n    pounds_bought = 2\n    total_cost_pence = price_per_pound * pounds_bought\n    total_paid_pence = 100  # £1 is equal to 100 pence\n\n    change_pence = total_paid_pence - total_cost_pence\n\n    return change_pence\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime\n\ndef solution():\n    n = 0\n    while True:\n        if (isprime(n) and isprime(n + 4) and isprime(n + 6) and\n                isprime(n + 132) and isprime(n + 250)):\n            return n\n        else:\n            n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rabbit1, rabbit2, rabbit3 = symbols('rabbit1 rabbit2 rabbit3')\n    equation1 = Eq(rabbit2, rabbit1 + 2)\n    equation2 = Eq(rabbit3, rabbit2 - 0.8)\n    equation3 = Eq(rabbit1 + rabbit2 + rabbit3, 19.7)\n\n    solutions = solve((equation1, equation2, equation3), (rabbit1, rabbit2, rabbit3))\n\n    return solutions[rabbit1]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200  # total weight of the sugar solution\n    concentration = 0.15  # sugar concentration (15%)\n\n    sugar_weight = total_weight * concentration  # weight of sugar in grams\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    speed_jack = 15\n    speed_rose = 10\n    time_to_meet = 10\n\n    # Relative speed with which Jack is approaching Rose\n    relative_speed = speed_jack - speed_rose\n    \n    # Distance between Town A and Town B\n    distance = relative_speed * time_to_meet\n    \n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum([((2 * i + 2)**2 - (2 * i)**2) for i in range(1, 1010)])\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    return 42.3 + 10.5 + 2.7 - 4.5\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    count_7 = 5000 // 7\n    count_13 = 5000 // 13\n    count_7_and_13 = 5000 // (7 * 13)\n\n    ans = count_7 + count_13 - count_7_and_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(len(\"SUCCESS\")) // (factorial(3) * factorial(2) * factorial(2))\n    forbid_permutations = factorial(5) // (factorial(2) * factorial(2))  # 5 spaces between 6 non-S characters, with duplicate U and C\n\n    ans = total_permutations - forbid_permutations * 6  # 6 positions for 3 S's without being adjacent\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n    \n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n    \n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    days_david = symbols('days_david')\n    days_emma = 14 - days_david\n    work_done_by_david = days_david / 10\n    work_done_by_emma = days_emma / 18\n    \n    equation = Eq(work_done_by_david + work_done_by_emma, 1)\n\n    days_david_solved = solve(equation, days_david)\n    \n    days_emma_worked = 14 - days_david_solved[0]\n    return days_emma_worked\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    tshirts_bought = 138\n    money_left = 56\n    tshirts_total = 145\n\n    cost_per_tshirt = money_left / (tshirts_total - tshirts_bought)\n    total_money = cost_per_tshirt * tshirts_total\n\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    sum_of_cubes = (100 * 101 // 2) ** 2\n    sum_of_integers = 100 * 101 // 2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    total_numbers = 14\n    average = 119\n    total_sum = average * total_numbers\n    middle_sum = total_sum / 2\n    middle_number = middle_sum / (total_numbers/2)\n    smallest_number = middle_number - (total_numbers - 1) * 2 / 2\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    total_heights = 132 - 124 + 1  # Possible heights from shortest to tallest\n    min_class_size = total_heights * 3 + 1  # Worst case + 1 for pigeonhole principle\n\n    return min_class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_rate = 12 / 100\n    new_pay = original_pay * (1 + increase_rate)\n\n    return new_pay\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel needs 12 minutes to cut a piece of wood into 5 sections.\n    # That means she makes 4 cuts in 12 minutes (since 5 sections require 4 cuts).\n    cuts_for_5_sections = 5 - 1\n    time_for_4_cuts = 12\n    \n    # If she needs to cut the piece of wood 5 times, that means she needs to make 5 more cuts.\n    cuts_needed = 5\n    \n    # The time needed for one cut can be calculated.\n    time_per_cut = time_for_4_cuts / cuts_for_5_sections\n    \n    # Now calculate the time needed for 5 cuts.\n    time_needed_for_5_cuts = time_per_cut * cuts_needed\n    \n    return time_needed_for_5_cuts\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount_pence = 126  # Convert £1.26 into pence\n    sum_coins = total_amount_pence // (2 + 5)  # Since there are equal numbers of 2p and 5p coins\n    return sum_coins * 2  # Total number of coins (2 for each 2p and 5p)\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Since we only care about the ones digit of the number, we can consider\n    # the pattern of the ones digit of 3's powers:\n    # 3^1 = 3 -> ones digit is 3\n    # 3^2 = 9 -> ones digit is 9\n    # 3^3 = 27 -> ones digit is 7\n    # 3^4 = 81 -> ones digit is 1\n    # 3^5 = 243 -> ones digit is 3, the pattern repeats every 4 powers\n    # Therefore, we only need to find the remainder of 2009 divided by 4\n    # and take the corresponding ones digit from the pattern.\n    \n    remainder = 2009 % 4\n    \n    if remainder == 0:\n        return 1\n    elif remainder == 1:\n        return 3\n    elif remainder == 2:\n        return 9\n    else: # remainder == 3\n        return 7\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # let total_people be the total number of people at the party\n    # adults = 2/5 * total_people\n    # remaining_people = total_people - adults = total_people - 2/5 * total_people = 3/5 * total_people\n    # boys = 5/9 * remaining_people = 5/9 * 3/5 * total_people = 1/3 * total_people\n    # girls = remaining_people - boys = 3/5 * total_people - 1/3 * total_people\n    # total number of girls is given as 36\n    # Calculate the total number of people using the number of girls\n\n    # 36 = 3/5 * total_people - 1/3 * total_people\n    # 36 = (3/5 - 1/3) * total_people\n    # 36 = (9/15 - 5/15) * total_people\n    # 36 = 4/15 * total_people\n    # total_people = 36 / (4/15)\n    # total_people = 36 * 15 / 4\n    total_people = 36 * 15 // 4\n\n    return total_people\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    number = 2 * 5   # The smallest even multiple of 5\n    while True:\n        if (number ** 0.5) % 1 == 0:  # Checking if it's a square number\n            return number\n        number += 2 * 5  # Incrementing to the next even multiple of 5\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n\n    child_ticket_cost = 30\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from math import comb\n\ndef solution():\n    n_books = 20 + 4 - 1  # adding 3 imaginary books as dividers\n    n_kids = 4 - 1  # 3 dividers for 4 kids\n\n    # We can use combinations here as it is similar to placing dividers between books.\n    # This is also known as \"stars and bars\" method.\n    ans = comb(n_books, n_kids)\n    return ans\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men = 3\n    days = 30\n    new_men = 2\n\n    work = men * days\n    new_days = work / new_men\n\n    return new_days\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    will_now = symbols('will_now')\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n    will_age_now = solve(equation, will_now)\n    \n    return will_age_now[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    total_ways = trains + cars + boats\n\n    return total_ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    num_days = total_pages / pages_per_day\n\n    return int(num_days)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each child gets at least two books, so we start by giving two books to each child\n    # That's 2 * 5 = 10 books already distributed\n    # Remaining books to distribute = 30 - 10 = 20 books\n\n    # Now we need to break down the remaining 20 books to 5 kids\n    # This is equivalent to putting 20 identical items into 5 distinct bins\n    # The formula for distributing n identical items into r distinct bins\n    # is comb(n + r - 1, r - 1)\n\n    # In our case, n=20 (books) and r=5 (kids)\n    ans = comb(20 + 5 - 1, 5 - 1)\n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n    \n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 40/100 * mike)\n    equation3 = Eq(mason + 550, mike)\n    \n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_litres = total_soup / 1000  # Convert from ml to litres\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n    balance = principal * ((1 + rate) ** time)\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_either = likes_one_direction + likes_the_vamps - likes_both\n    likes_neither = total_girls - likes_either\n\n    return likes_neither\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\n\ndef solution():\n    operations = ['+', '-', '*', '/']\n    operation_permutations = permutations(operations)\n    max_sum = float('-inf')\n    second_largest_term = None\n    \n    for ops in operation_permutations:\n        term1 = eval(f'(1/2){ops[0]}(1/9)')\n        term2 = eval(f'(1/3){ops[1]}(1/8)')\n        term3 = eval(f'(1/4){ops[2]}(1/7)')\n        term4 = eval(f'(1/5){ops[3]}(1/6)')\n        current_sum = term1 + term2 + term3 + term4\n        terms = sorted([term1, term2, term3, term4])\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            second_largest_term = terms[-2]\n    \n    A, B = second_largest_term.as_integer_ratio()\n    return A + B\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    tree_interval = 5\n    \n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one jug and one cup\n    cost_jug, cost_cup = symbols('cost_jug cost_cup')\n\n    # Equations based on the given problem\n    equation1 = Eq(4 * cost_jug + 5 * cost_cup, 85)\n    equation2 = Eq(2 * cost_jug + 2 * cost_cup, 40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_jug, cost_cup))\n    \n    # Get the cost of a single cup\n    cup_value = solutions[cost_cup]\n\n    return cup_value\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # UK coin denominations less than 44p: 1p, 2p, 5p, 10p, 20p.\n    # To minimize the number of coins, we should start with the largest denomination\n    # and work our way down. As Susan needs to pay 44p, she can pay with the following:\n    \n    # A 50p coin, and get 6p in change which involves 2 coins (1 coin from Susan and 1 coin as change)\n    # A 20p and a 50p coin, no change which involves 2 coins (2 coins from Susan)\n    # 2 20p coins and a 5p coin, and get 1p in change which involves 4 coins (3 coins from Susan and 1 coin as change)\n    # Susan's goal is to minimize the total number of coins changing hands, so she will use the 50p coin option.\n    # This is the smallest number of coins as it involves only 2 coins.\n    return 2\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    num_classrooms = 27\n    num_chairs_each = 28\n    total_chairs = num_classrooms * num_chairs_each\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Rational\n\n    x = symbols('x')\n    # Set up the inequality according to the problem statement\n    inequality = (x + 3) / (2*x + 5) > Rational('0.505')\n    \n    # Solve the inequality\n    possible_values = solve(inequality, x)\n    \n    # Find the largest integer less than the upper bound of x\n    largest_integer = int(possible_values[0].evalf()) - 1\n    \n    return largest_integer\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    amount_spent = 89.65\n    amount_left = 20.35\n\n    initial_amount = amount_spent + amount_left\n\n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    points = 12\n    # The hypotenuse of the right-angled triangles is the diameter of the circle.\n    # For each hypotenuse, or diameter, there are two points that it passes through.\n    # Since the circle is divided into 12 equal parts, there are 6 diameters.\n    diameters = points // 2\n\n    # For each diameter, we can choose any of the remaining 10 points to form a right triangle.\n    # Because the triangle is right-angled, we can't choose the points that the diameter passes through.\n    other_points = points - 2\n\n    # Each diameter gives us `other_points` number of right-angled triangles.\n    right_triangles = diameters * other_points\n\n    return right_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Given values\n    a10 = 23  # 10th term of the sequence\n    a15 = 38  # 15th term of the sequence\n    n10 = 10  # position of the 10th term\n    n15 = 15  # position of the 15th term\n\n    # Calculate the common difference of the sequence\n    common_difference = (a15 - a10) / (n15 - n10)\n\n    # Calculate the first term of the sequence using the 10th term\n    a1 = a10 - common_difference * (n10 - 1)\n\n    # Calculate the 12th term using the first term and common difference\n    a12 = a1 + common_difference * (12 - 1)\n\n    return a12\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    terms = [1/1, 1/2, 2/4, 3/7, 4/11, 5/16, 6/22, 7/29, 1/29]\n    fractions = [\n        terms[i] / terms[i+1] for i in range(len(terms)-1)\n    ]\n    ans = sum(fractions)\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    A = 24\n    B = 36\n    C = 42\n\n    # Calculate the greatest common divisor of A, B, and C\n    g = gcd(gcd(A, B), C)\n\n    return g\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([4 * i for i in range(1, 101)])  # Simplified series adding every 4 numbers starting from 1\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_lunch_cost = 4.36\n    total_days = 5\n\n    total_cost = children * daily_lunch_cost * total_days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n    total_points = 76\n\n    # Let x be the number of correct answers\n    # number of incorrect answers will be (total_questions - x)\n\n    for x in range(total_questions + 1):\n        if x * correct_points + (total_questions - x) * incorrect_points == total_points:\n            return x\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    fraction = 3 / 8\n    total_kg = 16\n    result = fraction * total_kg\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    \n    marked_price = cost_price * 1.2\n    selling_price = marked_price * 0.9\n    profit = selling_price - cost_price\n    \n    equation = Eq(profit, 120)\n\n    cost_price_solution = solve(equation, cost_price)\n\n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = total_sheep * (5/8)\n    white_sheep = total_sheep * (1/4)\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n\n    total_cost = cost_per_person * number_of_people\n    \n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    ans = balls_per_box * 6\n    return ans\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2 * x + 5)\n    \n    # Solving the absolute value equation\n    solutions = solve(equation, x)\n\n    # Filtering the valid solutions\n    valid_solutions = [s.evalf() for s in solutions if s.is_real]\n    return valid_solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    from math import factorial\n\n    # First part: four different colored socks in a row\n    # This is a permutation problem since the order matters\n    perms_different_socks = factorial(4)\n\n    # Second part: two different colored pairs of socks in a row\n    # This is a combination problem since we treating pairs as indistinguishable\n    # But since we are arranging these pairs in a row, it becomes a permutation problem among the pairs themselves\n    # First find the permutations of the pairs if they were distinguishable\n    perms_pairs = factorial(4)\n    # Since within each pair, the order does not matter, we divide by the permutations within each pair\n    # There are two pairs, and within each pair, there are 2! ways to arrange them (which we don't consider different)\n    perms_indistinguishable_pairs = perms_pairs // (factorial(2) * factorial(2))\n\n    return perms_different_socks, perms_indistinguishable_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0\n        for b in range(10):  # b can be 0 to 9\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    ans = 9 * 59\n    return ans\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    num_handshakes = num_people * (num_people - 1) // 2\n    return num_handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    # number of points on the circumference\n    points = 10\n\n    # number of points needed to form a triangle\n    triangle_vertices = 3\n\n    # calculate the number of combinations\n    num_triangles = comb(points, triangle_vertices)\n\n    return num_triangles\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    # Let's declare variables for Andre's and Beth's original amounts of sweets\n    andre = (24 + 8) / 2 + 6 / 2\n    beth = andre - 6\n    \n    # Since beth's current sweets include the 4 sweets given by the teacher,\n    # we subtract 4 to find out how many sweets Beth had originally\n    beth_current = beth - 4\n    \n    return beth_current\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure Anthea wins, she needs to leave a number of apples such that\n    # Ben can only take 1, 2, or 3 apples leaving Anthea in a position to always\n    # take the last apple.\n    # If Anthea leaves 4 apples to Ben, he can only take 1, 2, or 3 apples, and\n    # Anthea can take the remainder, ensuring her win.\n    # So we need to reduce the number of apples to a multiple of 4 after Anthea's turn.\n    # Hence, the initial number of apples Anthea should take is the remainder\n    # of the total number of apples when divided by 4.\n    \n    total_apples = 18\n    apples_to_take = total_apples % 4  # This guarantees leaving a multiple of 4 for Ben.\n    \n    return apples_to_take if apples_to_take != 0 else 3  # If the remainder is 0, she should take 3.\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the mass of the table and chair\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n    \n    # Create the equations based on the problem description\n    equation1 = Eq(3 * table_mass, 4 * chair_mass)\n    equation2 = Eq(table_mass, chair_mass + 2)\n    \n    # Solve the equations\n    solution = solve((equation1, equation2), (table_mass, chair_mass))\n    \n    # Return the mass of a table\n    return solution[table_mass]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    taller_than_180 = 4500\n    taller_than_190 = 750\n\n    between_180_and_190 = taller_than_180 - taller_than_190\n\n    return between_180_and_190\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n\n    # Judy has 2 choices as she can stand either at the first position or the last position.\n    judy_choices = 2\n\n    # After Judy's position is fixed, we have 5 friends to arrange in a queue. Which can be arranged in 5! ways.\n    friends_arrangements = factorial(5)\n\n    # Using the multiplication principle to find the total number of different ways.\n    total_ways = judy_choices * friends_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    # Andre and Beth originally had a total of 24 sweets\n    equation1 = Eq(andre + beth, 24)\n    \n    # The teacher gave them 4 sweets each, now Andre has 6 more than Beth\n    equation2 = Eq(andre + 4, beth + 4 + 6)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    # We are interested in how many sweets Beth has now\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari driver finished in second place,\n    # it means one car is still in front of him.\n    # He overtook 5 cars to get to this position.\n    # Therefore, before overtaking he was in 6th place (1 car in front + 5 cars overtaken).\n    # NOTE: The 6th place is counted from last to first, thus he was ahead of 5 cars and behind the rest.\n    # That means there were 5 cars behind him when he finished the race.\n    # So, he was in 6th place, and there were 5 more cars behind him.\n    # Now to find the total number of cars, we add the 5 cars behind him,\n    # the 1 car still in front, and the Ferrari itself.\n    total_cars = 5 + 1 + 1  # cars behind + car in front + the Ferrari itself\n\n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Reverse the operation by doing the opposite\n    # Multiply by 12 first, then add 6\n    result_after_operations = 2\n    initial_number = (result_after_operations * 12) + 6\n    return initial_number\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    elder_maths, elder_english, younger_maths, younger_english = symbols('elder_maths elder_english younger_maths younger_english')\n\n    # Equations based on the problem statement\n    equation1 = Eq(elder_maths, younger_maths + 10)\n    equation2 = Eq(younger_english, elder_english + 4)\n    equation3 = Eq(elder_maths + elder_english, 88)\n    equation4 = Eq(younger_english, younger_maths + 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (elder_maths, elder_english, younger_maths, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # Total sum of the 4 numbers is 4 times the average\n    total_sum = 4 * 130\n    \n    # The total sum of the remaining 3 numbers is 3 times the new average\n    remaining_sum = 3 * 110\n    \n    # The number removed is the difference between the total sum of 4 numbers and the remaining sum of 3 numbers\n    removed_number = total_sum - remaining_sum\n    \n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    first_light_period = 1 * 60  # period in seconds\n    second_light_period = 1.5 * 60  # period in seconds\n    target_period = 9 * 60  # 9 minutes in seconds\n\n    lcm_period = lcm(first_light_period, second_light_period)\n    \n    third_light_period = lcm_period\n    while third_light_period < target_period:\n        third_light_period += lcm_period\n\n    if third_light_period < 30:\n        third_light_period = 30\n\n    return third_light_period\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # To ensure victory, Leo must take the number of apples such that the remaining\n    # number of apples is a multiple of 3. This is because from that point, Leo can\n    # always take 3 - x apples after Mia takes x apples, thus ensuring he gets the last one.\n    \n    # Since the total number of apples is 14, Leo can choose to take either 1 or 2 apples initially.\n    # We need to find which initial move will leave the total number of apples as a multiple of 3.\n    \n    # Try taking 1 apple first. If 14 - 1 is not a multiple of 3, then Leo should take 2 apples.\n    if (14 - 1) % 3 == 0:\n        return 1\n    else:\n        return 2\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the number of silver spoons equal to the value of 3 gold rings be x\n    # 12 silver spoons = (3/4) * 6 gold rings\n    # 1 silver spoon = (3/4) * (6/12) gold rings = (3/4) * 0.5 gold rings\n    # x silver spoons = 3 gold rings\n    # x * (3/4) * 0.5 gold rings = 3 gold rings\n    # x = 3 / ((3/4) * 0.5)\n    x = 3 / ((3/4) * 0.5)\n    return int(x)\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    total_diff = 55\n    students = 0\n    layer = 0\n    \n    while True:\n        boys = (layer * 2 + 1) ** 2\n        girls = (layer * 2) ** 2 if layer > 0 else 0\n        diff = boys - girls\n        \n        if diff == total_diff:\n            students = boys + girls\n            break\n        layer += 1\n    \n    return students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    # Cost of whiteboard marker is $3, paintbrush is $1\n    marker_cost = 3\n    paintbrush_cost = 1\n\n    # Teacher paid $28 in total for 12 items\n    total_paid = 28\n    total_items = 12\n\n    # Let's assume all items are paintbrushes first\n    all_paintbrushes_cost = total_items * paintbrush_cost\n    # The extra money paid when compared to the all paintbrushes assumption is for whiteboard markers\n    extra_paid = total_paid - all_paintbrushes_cost\n\n    # Since each whiteboard marker costs $3 instead of $1 for a paintbrush, the difference ($2) will determine the number of whiteboard markers\n    markers_bought = extra_paid // (marker_cost - paintbrush_cost)\n\n    return markers_bought\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'f' be the number of female teachers\n    f = symbols('f')\n\n    # Equation: (3 * 75 + 60 * f) / (3 + f) = 65\n    equation = Eq((3 * 75 + 60 * f) / (3 + f), 65)\n\n    # Solve for the number of female teachers 'f'\n    num_female_teachers = solve(equation, f)\n\n    return num_female_teachers[0]\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora is 5th from the front and 7th from the back, so there must be 4 people in front of her\n    # and 6 people behind her. Adding Cora herself, that makes a total of 11 rows.\n    rows = 5 + 7 - 1\n\n    # Cora is 2nd from the left and 4th from the right, so there must be 1 person to her left\n    # and 3 people to her right. Adding Cora herself, that makes a total of 5 columns.\n    columns = 2 + 4 - 1\n\n    # To find the total number of students, we multiply the number of rows by the number of columns.\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "from math import sqrt\n\ndef solution():\n    # For a number to be a square number, all prime factors must be in pairs.\n    # Prime factorization of 33 is 3 x 11\n    # Prime factorization of 55 is 5 x 11\n    # To make the product a square number, we need pairs of each prime.\n    # We already have 11 twice and need one more 3 and one more 5 to make pairs.\n    # Therefore, m has to be at least 3 x 5 = 15 to make the product a square number.\n    m = 3 * 5\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since each plate must have at least 2 pieces, we start by placing 2 pieces on each plate.\n    starting_pieces = 2\n    total_candy = 8\n    plates = 3\n    # We have already placed 2 pieces on each plate, so we subtract this from the total.\n    remaining_candy = total_candy - starting_pieces * plates\n    \n    # The problem now reduces to finding the number of ways to distribute the remaining candies\n    # over 3 plates which is equivalent to finding the number of non-negative integer solutions \n    # to the equation x1 + x2 + x3 = remaining_candy\n    # which is a stars and bars problem and the solution is C(n+k-1, k-1),\n    # where n is the number of items to distribute (remaining_candy) and k is the number of bins (plates).\n    \n    # Applying the stars and bars formula\n    from math import comb\n    ways = comb(remaining_candy + plates - 1, plates - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "import math\n\ndef solution():\n    # Since Star must be the first runner, we only need to arrange the remaining 4 teammates.\n    # The number of ways to arrange n distinct objects is n! (n factorial).\n    # Therefore, we need to calculate the factorial of 4 for the remaining teammates.\n    ans = math.factorial(4)\n    return ans\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # Initialize the smallest integer\n    smallest_integer = None\n\n    # Find all 4-digit increasing integers and create decreasing and different order numbers\n    for i in range(1, 10):\n        for j in range(i+1, 10):\n            for k in range(j+1, 10):\n                for l in range(k+1, 10):\n                    increasing_int = int(f\"{i}{j}{k}{l}\")\n                    decreasing_int = int(f\"{l}{k}{j}{i}\")\n                    sum_of_two = increasing_int + decreasing_int\n                    remaining_sum = 26352 - sum_of_two\n                    # The remaining_sum will also be a four-digit integer\n                    if 1000 <= remaining_sum <= 9999:\n                        # Calculate number using the same digits\n                        remaining_digits = set([i, j, k, l])\n                        for m in range(1, 10):\n                            if m not in remaining_digits: continue\n                            for n in range(10):\n                                if n not in remaining_digits or n == m: continue\n                                for o in range(10):\n                                    if o not in remaining_digits or o in [m, n]: continue\n                                    for p in range(10):\n                                        if p not in remaining_digits or p in [m, n, o]: continue\n                                        permutation_int = int(f\"{m}{n}{o}{p}\")\n                                        if permutation_int + sum_of_two == 26352:\n                                            smallest_integer = min([increasing_int, decreasing_int, permutation_int])\n                                            return smallest_integer\n    return smallest_integer\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # Analyze the given outcomes to deduce a pattern or rule\n    # Looking at the examples, we can hypothesize that the operation could involve\n    # multiplying the two numbers and adding a certain function of the two numbers.\n    # Let's suppose the operation is a * b + f(a, b), where f is a function to be determined.\n    # By trying to identify a pattern, one possible function for f is using the sum\n    # of the numbers times two, because: \n    # f(2, 4) -> 2 * 4 + (2 + 4) * 2 = 8 + 12 = 20 (so we are missing 24)\n    # f(5, 7) -> 5 * 7 + (5 + 7) * 2 = 35 + 24 = 59 (so we are missing 45)\n    # f(1, 5) -> 1 * 5 + (1 + 5) * 2 = 5 + 12 = 17 (so we are missing 11)\n    # f(7, 10) -> 7 * 10 + (7 + 10) * 2 = 70 + 34 = 104 (so we are missing 42)\n    # We notice that the missing number is doubling each subsequent number in a and b\n    # We can then try to assume f(a, b) = a * b + (a + b) * 2 + 2 * a * b\n\n    # Define the operation\n    def operation(a, b):\n        return a * b + (a + b) * 2 + 2 * a * b\n\n    # Compute 6 otimes 12 using the determined operation\n    return operation(6, 12)\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # It takes 60 minutes to cut into 31 segments, which means making 30 cuts.\n    time_for_31_segments = 60  # minutes\n    cuts_for_31_segments = 31 - 1\n    \n    # Time per cut\n    time_per_cut = time_for_31_segments / cuts_for_31_segments\n    \n    # Number of cuts to make 50 segments\n    cuts_for_50_segments = 50 - 1\n    \n    # Total time to make 49 cuts for 50 segments\n    time_for_50_segments = time_per_cut * cuts_for_50_segments\n    \n    return time_for_50_segments\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The number leaves a remainder of 1 when divided by 3\n    con1 = (1, 3)\n    # The number leaves a remainder of 3 when divided by 5\n    con2 = (3, 5)\n    # The number leaves a remainder of 5 when divided by 7\n    con3 = (5, 7)\n\n    ans = solve_congruence(con1, con2, con3)\n\n    # Since we are looking for a number between 100 and 200, we iterate through multiples of the lcm\n    # until we find the number in the correct range\n    lcm = ans[1]\n    num = ans[0]\n    while num < 100:\n        num += lcm\n    if num > 200:\n        num = None\n\n    return num\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number_minus_30_percent = 210\n    number = number_minus_30_percent / (1 - 0.3)\n    return number\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            break\n    return year - 2002\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    numerator = factorial(len(word))\n    denominator = 1\n\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n\n    num_ways = numerator // denominator\n\n    return num_ways\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percent = 45 / 100\n    increased_price = original_price + (original_price * increase_percent)\n    return increased_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n\n    total_money_each_day = money_from_mum + money_from_dad\n    total_days = 3\n\n    total_money = total_money_each_day * total_days\n\n    return total_money\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the problem\n    candy_start, nancy_start = 11, 9\n    candy_end, nancy_end = symbols('candy_end nancy_end')\n    flowers_given = symbols('flowers_given')\n\n    # Equation 1: Total flowers with Candy after giving some to Nancy\n    equation1 = Eq(candy_end, candy_start - flowers_given)\n    \n    # Equation 2: Total flowers with Nancy after receiving some from Candy\n    equation2 = Eq(nancy_end, nancy_start + flowers_given)\n    \n    # Equation 3: After the transfer, Nancy has 8 more flowers than Candy\n    equation3 = Eq(nancy_end, candy_end + 8)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (candy_end, nancy_end, flowers_given))\n\n    return solutions[candy_end]\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    result = 36 * 24  # Reversing the division to find the missing number\n    return result\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n    x_solution = solve(equation, x)\n    \n    return x_solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_friday = -5\n    midday_saturday = 17\n\n    change = midday_saturday - midnight_friday\n\n    return change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    addend = 1\n    while term <= 50:\n        addend += 1\n        term += addend\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43\n    booklet_cost_p = 185  # converting £1.85 to pence\n    total_cost_p = (3 * pen_cost_p) + (4 * booklet_cost_p)\n    total_paid_p = 1000  # converting £10 to pence\n\n    change_p = total_paid_p - total_cost_p  # change in pence\n    change_in_pounds = change_p / 100  # converting pence back to pounds\n\n    return change_in_pounds\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    # Total people = people in front of Sibel + Sibel herself + people behind her (position from back - 1 because it includes Sibel)\n    total_people = people_in_front + 1 + (position_from_back - 1)\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    population = 5351935  # Assuming this is the current population figure\n    return population\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    # Loop through all possible 3-digit numbers\n    for number in range(100, 1000):\n        str_num = str(number)\n        # Check if the difference between adjacent digits is at least 7\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and \\\n           abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(5000, 10000):\n        thousands = int(str(i)[0])\n        hundreds = int(str(i)[1])\n        tens = int(str(i)[2])\n        ones = int(str(i)[3])\n        if hundreds > 0 and tens > 0 and ones > 0:\n            if thousands % hundreds == 0 and thousands % tens == 0 and thousands % ones == 0:\n                count += 1\n        elif hundreds == 0 and tens > 0 and ones > 0:\n            if thousands % tens == 0 and thousands % ones == 0:\n                count += 1\n        elif hundreds > 0 and tens == 0 and ones > 0:\n            if thousands % hundreds == 0 and thousands % ones == 0:\n                count += 1\n        elif hundreds > 0 and tens > 0 and ones == 0:\n            if thousands % hundreds == 0 and thousands % tens == 0:\n                count += 1\n        elif hundreds == 0 and tens == 0 and ones > 0:\n            if thousands % ones == 0:\n                count += 1\n        elif hundreds > 0 and tens == 0 and ones == 0:\n            if thousands % hundreds == 0:\n                count += 1\n        elif hundreds == 0 and tens > 0 and ones == 0:\n            if thousands % tens == 0:\n                count += 1\n        elif hundreds == 0 and tens == 0 and ones == 0:\n            # if all are zeros, it's not a 4-digit number, so continue to next iteration\n            continue\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 10))\n    return primes[2]\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # Based on the given information, we create a set for each attempt\n    # where each set contains digits presumed correct at their respective positions.\n    possible_digits = [{}, {}, {}, {}]\n\n    # We then analyze the attempts and record possible correct digits.\n    \n    # For 5648, two digits are wrong, so two are potentially right.\n    # We cannot make full assumption yet, so we store digits as possible options for each position.\n    for i, d in enumerate(\"5648\"):\n        possible_digits[i][d] = possible_digits[i].get(d, 0) + 1\n    \n    # Same approach for 3628, 3147, and 5629.\n    for i, d in enumerate(\"3628\"):\n        possible_digits[i][d] = possible_digits[i].get(d, 0) + 1\n    for i, d in enumerate(\"3147\"):\n        possible_digits[i][d] = possible_digits[i].get(d, 0) + 1\n    for i, d in enumerate(\"5629\"):\n        possible_digits[i][d] = possible_digits[i].get(d, 0) + 1\n    \n    # We know that none of the digits in 1258 are correct.\n    # We remove them from our possible options for each position.\n    for i, d in enumerate(\"1258\"):\n        if d in possible_digits[i]:\n            del possible_digits[i][d]\n\n    # We now need to find out which digits are correct.\n    # After filtering based on attempts, we conclude the correct digits \n    # for the positions where there is only one option left.\n    correct_combination = ''\n    for pos in possible_digits:\n        for d, count in pos.items():\n            # if a digit appear only once, it could not be correct\n            if count == 1:\n                correct_combination += d\n\n    return correct_combination\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the tilde symbol as a variable, say 'x'\n    x = symbols('x')\n    \n    # The equation is (x + 7) / 9 = 9; let's represent it as an equation\n    equation = Eq((x + 7) / 9, 9)\n    \n    # Solve the equation for 'x'\n    solution = solve(equation, x)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    position_difference = abs(22 - 4)\n    number_of_children = position_difference * 2\n\n    return number_of_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    common_difference = 4\n    num_weeks = 10\n\n    # Total number of coins collected over the first ten weeks is the sum of the first ten terms of the arithmetic sequence\n    # Sum of the first n terms of an arithmetic sequence is given by: (n/2) * (first_term + last_term)\n    last_term = first_term + (num_weeks - 1) * common_difference\n    total_coins = (num_weeks / 2) * (first_term + last_term)\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2  # Gina had a quarter as many dresses as Lily\n    fiona_dresses = gina_dresses // 4  # Fiona had a quarter as many dresses as Gina\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    years = (final_amount / principal) ** (1 / interest_rate) - 1\n    return round(years)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_quarter_full = 250  # mass of jar when 1/4 full\n    mass_three_quarters_full = 350  # mass of jar when 3/4 full\n\n    # The difference in mass between 3/4 full and 1/4 full is due to the mass of half the marmite\n    mass_half_marmite = mass_three_quarters_full - mass_quarter_full\n\n    # The mass of 1/4 full jar includes the mass of 1/4 marmite and the empty jar\n    # Therefore, the mass of the empty jar is the mass of 1/4 full jar minus the mass of 1/4 marmite\n    mass_empty_jar = mass_quarter_full - (mass_half_marmite / 2)\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each student's mark\n    A, B, C, D, E = symbols('A B C D E')\n    \n    # Given average marks equations\n    avg_A_B_C = Eq((A + B + C) / 3, 95)\n    avg_B_C_D = Eq((B + C + D) / 3, 94)\n    \n    # Given conditions on marks\n    condition_E = Eq(E, 96)\n    condition_B_D = Eq(B, D)\n    \n    # Given condition that A has the highest mark and they are all above 91\n    A_highest = A > E\n    all_above_91 = (A > 91) & (B > 91) & (C > 91) & (D > 91) & (E > 91)\n    \n    # Solve the system of equations\n    solutions = solve((avg_A_B_C, avg_B_C_D, condition_E, condition_B_D, A_highest, all_above_91), (A, B, C, D, E))\n    \n    # There might be multiple solutions, so filter the one where A is the highest and B, C, D, E are following with E being the second highest\n    valid_solutions = [s for s in solutions if s[A] > s[E] and s[E] > s[B] and s[E] > s[C] and s[E] > s[D]]\n    \n    # Since there should be only one valid solution, take the first one\n    D_score = valid_solutions[0][D]\n    \n    return D_score\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_fraction_liter = 9.1 * (1/7)\n    cups_total_milliliters = 4 * 350\n    cups_total_liters = cups_total_milliliters / 1000\n\n    remaining_soda = total_soda_liters - bottle_fraction_liter - cups_total_liters\n    \n    return remaining_soda\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    total_average = 65\n    male_teachers = 3\n    male_average = 75\n    female_average = 60\n\n    # Total weight of all teachers = average weight * total number of teachers\n    # Total weight of male teachers = average weight * number of male teachers\n    # Total weight of female teachers = average weight * number of female teachers\n    # Total number of teachers = number of male teachers + number of female teachers\n\n    # Let's denote the number of female teachers as \"female_teachers\"\n    # We can set up the total weight equation as follows:\n\n    # total_average * (male_teachers + female_teachers) = male_average * male_teachers + female_average * female_teachers\n    # Expanding the equation and solving for \"female_teachers\" gives us:\n    # female_teachers = (total_average * male_teachers - male_average * male_teachers + total_average * female_teachers) / female_average\n\n    # female_teachers = (total_average * (male_teachers + female_teachers) - male_average * male_teachers) / female_average\n    # Now we know the left hand side of the equation is just the total weight of all teachers minus the total weight of male teachers, which we want to equate to the total weight of female teachers:\n    # total_weight_of_all_teachers - total_weight_of_male_teachers =  total_weight_of_female_teachers\n\n    # Given total_average (for all teachers) and male_average, we can calculate total_weight_all_teachers and total_weight_male_teachers.\n    # Then we can divide by female_average to find the number of female teachers.\n\n    total_weight_of_all_teachers = total_average * (male_teachers + female_teachers)\n    total_weight_of_male_teachers = male_average * male_teachers\n\n    # Now we write an equation based on the above explanations and solve for the number of female teachers.\n    female_teachers = (total_weight_of_all_teachers - total_weight_of_male_teachers) / female_average\n\n    # We have an issue here: we do not have the total number of teachers,\n    # so we cannot directly calculate total_weight_of_all_teachers without knowing it.\n    # However, we can express it in terms of female_teachers.\n\n    # Rewriting the equation:\n    # total_average * (male_teachers + female_teachers) - male_average * male_teachers = female_average * female_teachers\n    # Simplifying it:\n    female_teachers = ((total_average * male_teachers) - male_average * male_teachers) / (female_average - total_average)\n\n    return female_teachers\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father_current, son_current = symbols('father_current son_current')\n\n    equation1 = Eq(father_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(father_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (father_current, son_current))\n\n    return solutions[father_current]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import sqrt\n\n    # Given values\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    amplitude = 0.08  # amplitude in meters (converted from cm)\n\n    # Total energy E of the oscillator is given by E = 1/2 * k * A^2\n    total_energy = 0.5 * k * amplitude**2\n\n    # When the block is x = 4.0 cm from equilibrium position,\n    # the potential energy in the spring PE = 1/2 * k * x^2\n    x = 0.04  # position in meters from equilibrium (converted from cm)\n    potential_energy = 0.5 * k * x**2\n\n    # The kinetic energy KE at position x is KE = E - PE\n    kinetic_energy = total_energy - potential_energy\n\n    # The speed v of the block at position x can be found using KE = 1/2 * m * v^2\n    # Therefore, v = sqrt(2 * KE / m)\n    speed = sqrt(2 * kinetic_energy / m)\n\n    # Return both total energy and speed as a tuple\n    return (total_energy, speed)\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # Since Rose wants to ensure her victory,\n    # she will aim to leave a multiple of 3 marbles after her first move\n    # so no matter how Kylie plays, Rose can always win.\n    # The possible number of marbles that ensures Rose's victory would be all multiples of 3 (3, 6, 9, 12)\n    # Working backward from 14, the first move that leaves a multiple of 3 is removing 1 marble (14 - 1 = 13, not a multiple of 3)\n    # Removing 2 leaves a multiple of 3 (14 - 2 = 12), which ensures Rose's victory.\n    \n    rose_first_move = 2\n    return rose_first_move\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    # Given that a and b are square roots of 2023, we can infer that:\n    # a = sqrt(2023) and b = sqrt(2023)\n    # The question asks for the value of a + b - ab\n    # a + b - ab = sqrt(2023) + sqrt(2023) - (sqrt(2023)*sqrt(2023))\n\n    a = 2023**0.5\n    b = 2023**0.5\n\n    ans = a + b - a * b\n\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pence = 45 * 100  # Convert £45 to pence\n    coin_value = 5  # Value of each 5p coin in pence\n    num_coins = total_pence // coin_value  # Calculate the number of 5p coins\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the distance Bud runs in one minute.\n    x = symbols('x')\n    \n    # Each minute, Pip runs 20 metres more than Bud.\n    # So in one minute, Pip runs x + 20 metres.\n    \n    # In 3 minutes, Bud runs 3 * x metres, and Pip runs 3 * (x + 20) metres.\n    \n    # Together, they run 540 metres in 3 minutes.\n    equation = Eq(3 * x + 3 * (x + 20), 540)\n    \n    # Solve the equation for x to find the distance Bud runs in one minute.\n    solution = solve(equation, x)\n    \n    # Calculate the distance Pip runs in the 3 minutes.\n    distance_pip = 3 * (solution[0] + 20)\n    \n    return distance_pip\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the original number of coins in box A as 'a' and in box B as 'b'.\n    a, b, c = symbols('a b c')\n    \n    # Based on the problem statement, we create equations:\n    equation1 = Eq(a, 4 * b)  # Box A has four times as many coins as Box B\n    equation2 = Eq(c + (0.06 * a) + (0.2 * b), 1220)  # Coins transferred to Box C\n    equation3 = Eq(c, 1.22 * (c - (0.06 * a) - (0.2 * b)))  # After transfer, C has 22% more coins\n    \n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    return solutions[a]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    initial_coffee_percentage = 60\n    final_coffee_percentage = 40\n    \n    # Let the initial total bottles be 100 (for easy percentage calculation)\n    initial_total_bottles = 100\n    initial_coffee = (initial_coffee_percentage / 100) * initial_total_bottles\n    initial_tea = initial_total_bottles - initial_coffee\n    \n    # After buying more tea, coffee still makes up 40% of the total\n    final_coffee = initial_coffee  # number of coffee bottles remains the same\n    final_total_bottles = (final_coffee / final_coffee_percentage) * 100\n    final_tea = final_total_bottles - final_coffee\n    \n    # Calculate the percentage increase\n    increase = final_tea - initial_tea\n    percent_increase = (increase / initial_tea) * 100\n    \n    return percent_increase\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Convert the hexadecimal numbers to base 10 integers\n    num1 = int('2A3', 16)\n    num2 = int('17B', 16)\n\n    # Perform the addition in base 10\n    result_base10 = num1 + num2\n\n    # Convert the result from base 10 back to hexadecimal\n    ans = hex(result_base10)[2:].upper()  # [2:] to remove '0x' prefix and upper() to have uppercase letters\n\n    return ans\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable x\n    x = symbols('x')\n\n    # Define the linear equation 3(2x + 1) = 75\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the solution for x\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 300 * 0.4 * 0.3 * 0.25\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_sales = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_price = total_sales / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    total_vehicles = 24\n    total_wheels = 86\n\n    # Assume all vehicles are tricycles, which have 3 wheels each\n    all_tricycles_wheels = 3 * total_vehicles\n\n    # Calculate the excess wheels assuming all vehicles are tricycles\n    # Each car added will replace a tricycle, thus adding an extra wheel\n    excess_wheels = total_wheels - all_tricycles_wheels\n\n    # Since each car has one more wheel than a tricycle, the number of excess wheels\n    # gives us the number of cars\n    cars = excess_wheels\n\n    # The rest are tricycles\n    tricycles = total_vehicles - cars\n\n    return tricycles\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    time_for_washing_watermelons = 1\n    time_for_washing_glasses = 3\n    time_for_juicer_working = 4\n    time_for_pouring_juice = 1\n\n    total_time = (time_for_washing_watermelons + time_for_washing_glasses +\n                  time_for_juicer_working + time_for_pouring_juice)\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    # Lewis has 60 pence which is £0.60\n    lewis_money = 0.60\n    # James has £1.10\n    james_money = 1.10\n    # Sum of their money\n    total_money = lewis_money + james_money\n    return total_money\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"WINNING\")\n    w_count = \"WINNING\".count('W')\n    i_count = \"WINNING\".count('I')\n    n_count = \"WINNING\".count('N')\n    g_count = \"WINNING\".count('G')\n\n    ans = factorial(total_letters) // (factorial(w_count) * factorial(i_count) * factorial(n_count) * factorial(g_count))\n    return ans\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # The range starts at 3 since each stack must have at least 3 books\n    for x1 in range(3, 14):\n        for x2 in range(3, 14):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n\n    def D(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (D(n - 1) + D(n - 2))\n\n    ans = D(6)\n    return ans\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    lemonade_price = 4\n    plus_price = 7\n    total_income = 2012\n    total_bottles = 350\n    \n    for num_plus in range(total_bottles + 1):\n        num_lemonade = total_bottles - num_plus\n        income = (num_lemonade * lemonade_price) + (num_plus * plus_price)\n        if income == total_income:\n            return num_plus\n    \n    return None\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Define the current ratio of blue to red pens\n    current_ratio_blue = 3\n    current_ratio_red = 5\n    \n    # Calculate the current number of blue pens\n    total_pens = 96\n    total_ratio = current_ratio_blue + current_ratio_red\n    current_blue_pens = (current_ratio_blue / total_ratio) * total_pens\n    \n    # Calculate the new total number of pens after adding 60 red pens\n    new_red_pens = total_pens - current_blue_pens + 60\n    new_total_pens = current_blue_pens + new_red_pens\n    \n    # Calculate the number of blue pens so that 40% of the pens are blue\n    blue_pen_percentage = 40 / 100\n    blue_pens_needed = blue_pen_percentage * new_total_pens\n    \n    # Calculate the number of blue pens added\n    blue_pens_added = blue_pens_needed - current_blue_pens\n    \n    return int(blue_pens_added)\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2 # mass of the object in kg\n    final_velocity = 8 # final velocity in m/s\n    time = 4 # time in seconds\n\n    acceleration = final_velocity / time # calculating acceleration (final_velocity = acceleration * time)\n    force = mass * acceleration # Force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # According to the Chicken McNugget Theorem (also known as Frobenius Coin Problem)\n    # For any two relatively prime positive integers m and n, the greatest integer\n    # that cannot be written in the form am + bn for nonnegative integers a and b\n    # is mn - m - n.\n\n    box_small = 3\n    box_large = 7\n\n    ans = box_small * box_large - box_small - box_large\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from sympy import factorint\n    from itertools import combinations\n\n    # All possible numbers\n    all_numbers = set(range(1, 14))\n    \n    # Function to find numbers with a unique amount of factors\n    def unique_factors(numbers):\n        factor_counts = {}\n        for number in numbers:\n            factors = factorint(number)\n            count = 1\n            for exponent in factors.values():\n                count *= (exponent + 1)\n            if count not in factor_counts:\n                factor_counts[count] = [number]\n            else:\n                factor_counts[count].append(number)\n        # Return numbers which have a unique count of factors in the given set of numbers\n        return [number for number, count in factor_counts.items() if len(count) == 1]\n\n    # Two students know their number so there must be two unique factor counts\n    # within the set of numbers they can see\n    for combo in combinations(all_numbers, 9):\n        seen_numbers = set(combo)\n        uniques = unique_factors(seen_numbers)\n        if len(uniques) != 2:  # two students should know their numbers\n            continue\n\n        # Alice knows her number is odd, so the unseen numbers must all be even\n        # or have one odd. We continue if there's more than one odd in the unseen numbers.\n        unseen_numbers = all_numbers - seen_numbers\n        if sum(1 for num in unseen_numbers if num % 2 != 0) > 1:\n            continue\n        \n        # We now know the unseen numbers have either all even or one odd\n        # The one odd can only be the number 1 since Alice is sure hers is odd\n        # so if 1 is not in unseen_numbers, it should be assigned to Alice\n        # which will be odd, and the others will all be even.\n        if 1 in unseen_numbers and sum(1 for num in unseen_numbers if num % 2 != 0) != 1:\n            continue\n\n        # May is between Alice and Marc by +- 1 and knows her number\n        # since May knows her number and it's between two other numbers we can infer\n        # that it cannot be 1 also because if it was 2 (which is not possibility due to\n        # her number being odd) it would leave no number smaller than 2 for Marc,\n        # This indicates that the students with the unique counts of factors cannot be the smallest\n        # numbers since those would not be able to have a number both smaller and larger by 1 within the seen numbers\n        if 1 in seen_numbers and 2 in seen_numbers:\n            continue\n\n        # If we reach here, we have a valid set of unseen numbers\n        product = 1\n        for num in unseen_numbers:\n            product *= num\n        return product\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of incorrect answers as 'i'.\n    # Then the number of correct answers 'c' is 12 more than three times 'i'.\n    i = symbols('i')\n    c = 3 * i + 12\n\n    # Each correct answer gives 5 points and each incorrect or unanswered deducts 2 points.\n    # The total points for all answers is 151.\n    equation = Eq(5 * c - 2 * i, 151)\n\n    # Now we solve for 'i'.\n    solutions = solve((equation,), (i,))\n\n    # Find out the number of correct answers based on 'i'.\n    correct_answers = 3 * solutions[i] + 12\n\n    return correct_answers\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    friends_count = 11\n\n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / friends_count\n\n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n    sum_decimal = num1 + num2\n    ans = ''\n    while sum_decimal > 0:\n        ans = str(sum_decimal % 7) + ans\n        sum_decimal = sum_decimal // 7\n    return ans\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    total_matches = sum([4, 6, 2, 1, 3, 5]) // 2\n    # Each student has played total_matches matches,\n    # so the number of matches for F can be calculated \n    # by subtracting the number of matches played by\n    # A, B, C, D, E, and G from the total matches.\n    F_matches = total_matches * 6 - (4 + 6 + 2 + 1 + 3 + 5)\n    return F_matches\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Cici's and Linda's current ages.\n    cici, linda = symbols('cici linda')\n\n    # Create equation based on the given information:\n    # When Cici was born, Linda was 11 years old.\n    equation1 = Eq(cici, linda - 11)\n\n    # The sum of their ages 4 years later will be 37.\n    equation2 = Eq(cici + 4 + linda + 4, 37)\n\n    # Solve the system of equations for Cici's and Linda's current ages.\n    solutions = solve((equation1, equation2), (cici, linda))\n\n    # Linda's age 3 years later\n    linda_age_3_years_later = solutions[linda] + 3\n\n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # To find a number that is divisible by all but two consecutive numbers\n    # from 1 to 20, we need to find the least common multiple (LCM) of the numbers\n    # from 1 to 20 and then exclude pairs of consecutive numbers to see which can't\n    # be divisors of such a number.\n\n    from math import gcd\n\n    # Function to find LCM of two numbers\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    # Find the LCM of all numbers from 1 to 20\n    number_lcm = 1\n    for i in range(1, 21):\n        number_lcm = lcm(number_lcm, i)\n\n    # We iterate through all pairs of consecutive numbers to check for\n    # which pair, when excluded, the number can still remain divisible\n    # by all others. The LCM divided by such a pair should not be an integer (have a remainder).\n\n    # As the problem guarantees a solution, when found, we stop searching.\n    for excluded_number in range(1, 20):  # Consecutive number pairs from 1-2 to 19-20\n        if number_lcm % excluded_number != 0 and number_lcm % (excluded_number + 1) != 0:\n            # Return the sum of the pair of consecutive numbers because this pair\n            # alone are not factors of the LCM, and thus, by the nature of LCM,\n            # also not factors of number N.\n            return excluded_number + (excluded_number + 1)\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of stamps Jamie-Anne and Natasha have\n    stamps_jamie, stamps_natasha = symbols('stamps_jamie stamps_natasha')\n\n    # Equation 1: The ratio of Jamie's stamps to Natasha's stamps is 5:3\n    equation1 = Eq(stamps_jamie / stamps_natasha, 5 / 3)\n\n    # Equation 2: Jamie has 18 more stamps than Natasha\n    equation2 = Eq(stamps_jamie, stamps_natasha + 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (stamps_jamie, stamps_natasha))\n    total_stamps = solutions[stamps_jamie] + solutions[stamps_natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_of_numbers = 0\n    quotient_remainder_limit = 160 // 15 + 1  # Smallest quotient to satisfy the condition\n\n    while True:\n        number = 15 * quotient_remainder_limit + quotient_remainder_limit\n        if number > 160:\n            sum_of_numbers += number\n        else:\n            break\n        quotient_remainder_limit += 1\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    return min_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    # Distance from home to school and school to home\n    distance_one_way = 300\n    \n    # Speed going uphill (from home to school) and downhill (from school to home)\n    speed_uphill = 10\n    speed_downhill = 30\n    \n    # Time taken to go uphill and downhill\n    time_uphill = distance_one_way / speed_uphill\n    time_downhill = distance_one_way / speed_downhill\n    \n    # Total distance for the round trip = 2 * distance one way\n    total_distance = 2 * distance_one_way\n    \n    # Total time for the round trip\n    total_time = time_uphill + time_downhill\n    \n    # Average speed for the round trip\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    num_people = 4\n    num_entrances = 5\n    \n    # Since each person can choose any of the 5 entrances regardless of what the others choose,\n    # and the order of entrance matters,\n    # it's simply a permutation of 5 options taken 4 times with repetition allowed.\n    ans = num_entrances ** num_people\n    \n    return ans\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches // peaches_per_bag\n    \n    return num_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Calculate the number of apples, pears, and oranges that can be distributed\n    distributable_apples = 226 - 10\n    distributable_pears = 352 - 28\n    distributable_oranges = 157 - 13\n\n    # Find the greatest common divisor for the distributable fruits\n    gcd_value = gcd(gcd(distributable_apples, distributable_pears), distributable_oranges)\n\n    # The largest possible number of students is the greatest common divisor\n    return gcd_value\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    import math\n    # Judy can stand in the first position with the rest 5 friends arranged in 5! ways.\n    # Also, Judy can stand in the last position with the rest 5 friends arranged in 5! ways.\n    \n    # Using the multiplication principle, we multiply the 2 possible positions for Judy by the 5! arrangements for her friends.\n    count_ways = 2 * math.factorial(5)\n    \n    return count_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number_1 = 6\n    lcm = 12\n    \n    for number_2 in range(1, lcm + 1):\n        if number_1 * number_2 % lcm == 0:\n            # Check if number_2 only has common factors 1 and 2 with number_1\n            if set([1, 2]).issuperset(set(factor for factor in range(1, number_2 + 1)\n                                           if number_1 % factor == 0 and number_2 % factor == 0)):\n                return number_2\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    total_digits = 0\n    number = 1\n    while total_digits < 200:\n        digits_in_number = len(str(number))\n        total_digits += digits_in_number\n        number += 1\n    number -= 1\n\n    total_digits -= len(str(number))\n    index_in_number = 200 - total_digits - 1\n\n    return int(str(number)[index_in_number])\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    qualified_points = 5\n    unqualified_penalty = -18\n    total_days = 4\n    daily_production = 500\n    total_points = 9931\n\n    # Let x be the number of unqualified products over the total days\n    # Then the number of qualified products is total_days * daily_production - x.\n    # Each qualified product brings 5 points, each unqualified product brings -18 points,\n    # The total score is equal to 9,931 points over four days.\n\n    # Setting up the equation:\n    # 5 * (total_days * daily_production - x) - 18 * x = total_points\n    # 5 * total_days * daily_production - 5x - 18x = total_points\n    # (5 * total_days * daily_production - total_points) / (5 + 18) = x\n\n    x = (5 * total_days * daily_production - total_points) / (qualified_points + abs(unqualified_penalty))\n    qualified = total_days * daily_production - x\n\n    return int(qualified)\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost = symbols('cost')\n    \n    # Shirt price is cost + $40\n    price = cost + 40\n\n    # Customer buys it with 20% off: price * (1 - 20%)\n    discounted_price = price * 0.8\n\n    # Profit is $12: discounted_price - cost = $12\n    profit_equation = Eq(discounted_price - cost, 12)\n\n    # Solve for cost\n    cost_value = solve(profit_equation, cost)\n    \n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be Daniel's current age and x be his daughter's current age\n    d, x = symbols('d x')\n\n    # Two years ago, Daniel's age was 6 times his daughter's age\n    equation1 = Eq((d - 2), 6 * (x - 2))\n\n    # Two years from now, Daniel's age will be 4 times his daughter's age\n    equation2 = Eq((d + 2), 4 * (x + 2))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (d, x))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let x be the distance from P to the meeting point when April turns back.\n    # The distance April covers when going back until meeting Baye is 1800 - x.\n    # Since she meets Baye 800 meters from Q, we can set up the equation:\n    # 1800 - x = 4(x - 800)\n    # Solving for x gives:\n    x = (1800 + 4 * 800) / 5\n    \n    # Now, we can find how far Baye is from Q when April reaches P.\n    # The ratio of their speeds is 1:4, so by the time April covers 1800 meters back to P,\n    # Baye will cover 1800 / 4 meters from the meeting point towards P.\n    distance_baye_covers = 1800 / 4\n\n    # Therefore, Baye's distance from Q when April reaches P is:\n    baye_distance_from_Q = 800 - distance_baye_covers\n    \n    return baye_distance_from_Q\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    # Initial condition\n    equation1 = Eq(hens, 6 * roosters)\n\n    # After increasing the number by 60 each\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hens, roosters))\n\n    # Total number of chickens before the increase\n    total_chickens = solutions[hens] + solutions[roosters]\n\n    return total_chickens\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_sum_existing = 7 * 12\n    total_sum_with_new = 8 * 11\n    eighth_number = total_sum_with_new - total_sum_existing\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    period = \"538462\"\n    period_length = len(period)\n    position = 2021\n    digit_index = (position - 1) % period_length\n    return int(period[digit_index])\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = sum(str(x).count('9') for x in range(1, 101))\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # The smallest two-digit palindromic number is 11 and the largest three-digit\n    # palindromic number is 999. Since the first digit cannot be 0,\n    # we only have to consider 9 options for the first digit (1-9).\n    \n    # Two-digit palindromic numbers (xx)\n    for i in range(1, 10):\n        count += 1  # two-digit numbers are simply the same digit repeated\n\n    # Three-digit palindromic numbers (xyx)\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # the first and third digits are the same, the middle digit can be anything from 0 to 9\n            \n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    book_cost = (1 / 3) * total_money\n    bag_cost = (2 / 5) * total_money\n    \n    equation = Eq(book_cost + bag_cost, 132)\n    \n    solution = solve(equation, total_money)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    first_part = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    second_part = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = first_part - second_part\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Worst case: Darrell has to pick all the beads of other colors\n    # before he can be sure to have 5 green beads.\n    # So, he must pick all blue and white beads first.\n    blue_beads = 5\n    white_beads = 6\n    # To ensure 5 green beads, Darrell must pick 4 green beads + 1 guaranteed to be green\n    green_beads_needed = 4\n    # Calculate the total number of beads Darrell must draw\n    total_draws = blue_beads + white_beads + green_beads_needed + 1\n    return total_draws\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    divisible_by_5 = 105 // 5\n    divisible_by_7 = 105 // 7\n    divisible_by_5_and_7 = 105 // (5 * 7)\n\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    # Calculate the digits used in single, double and triple digit page numbers\n    single_digits = 9  # from 1 to 9\n    double_digits = (99 - 10 + 1) * 2  # from 10 to 99\n    triple_digits = (215 - 100 + 1) * 3  # from 100 to 215\n    \n    # Total digits used\n    total_digits = single_digits + double_digits + triple_digits\n    \n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(\"1\" + str(num)) == int(str(num) + \"1\") / 3:\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    # for pages 1-9, we have 1 digit per page\n    total_digits += 1 * 9\n    # for pages 10-81, we have 2 digits per page\n    total_digits += 2 * (81 - 9)\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # Time taken to walk from the first floor to the fourth floor (3 floors up)\n    time_to_fourth_floor = 12  # in minutes\n    \n    # Since he is walking at a constant speed, doubling the number of floors (from 3 to 6) will double the time.\n    time_to_eighth_floor = time_to_fourth_floor * (8 - 1) / (4 - 1)\n\n    return time_to_eighth_floor\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x, y, z be the number of apples in the three identical baskets\n    x, y, z = symbols('x y z')\n\n    # Since the baskets are identical, the order doesn't matter\n    # Therefore, we can consider cases where x <= y <= z\n    # That way we avoid counting permutations of the same distribution\n\n    count = 0\n    for x_val in range(7):  # x can be from 0 to 6\n        for y_val in range(x_val, 7):  # y can be from x to 6 (as x <= y)\n            for z_val in range(y_val, 7):  # z can be from y to 6 (as y <= z)\n                if x_val + y_val + z_val == 6:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio of birds to squirrels\n    ratio_birds_to_squirrels = 8 / 5\n    \n    # Assume the initial number of birds and squirrels (based on ratio)\n    birds = 8  # Here we are taking the ratio as actual numbers where possible\n    squirrels = 5  # Same here\n\n    # Increase of 20% in the number of squirrels\n    squirrels_increased = squirrels * 1.20\n\n    # Since the total number remains the same, and the number of squirrels increased,\n    # the number of birds must have decreased by the same number.\n    total_initial = birds + squirrels\n    total_after = total_initial  # total number remains the same\n\n    # Birds decreased by the amount squirrels increased (since total is constant)\n    birds_after = total_after - squirrels_increased\n\n    # Calculate the percentage of birds that flew away\n    birds_flew_away_percentage = ((birds - birds_after) / birds) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor + 1):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizza_per_month = 15\n    num_months = 5  # March to July is 5 months\n\n    total_pizzas = average_pizza_per_month * num_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n    # Fiona and Gary picked 973 of strawberries in total\n    equation1 = Eq(fiona + gary, 973)\n    # Fiona and Harold picked 1823 of strawberries in total\n    equation2 = Eq(fiona + harold, 1823)\n    # Harold picked 6 times as many strawberries as Gary\n    equation3 = Eq(harold, 6 * gary)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n\n    num_days = ((last_term - first_term) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Define a custom operation based on the patterns found\n    def custom_operation(a, b):\n        return (a - 1) * (b // a)\n\n    # Calculate using the custom operation\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice = 8 * 3  # 8 cartons, each with 3 liters of juice\n    juice_left = total_juice - 9  # after drinking 9 liters\n    container_volume = 5  # volume of each container in liters\n    \n    if juice_left % container_volume == 0:\n        containers_needed = juice_left // container_volume\n    else:\n        containers_needed = (juice_left // container_volume) + 1\n    \n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50  # The last term of the series\n    ans = (n * (n + 1)) // 2  # Sum of the first n natural numbers\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    for A, R, T, C, D in permutations(range(1, 10), 5):\n        if (D + A + R + T == 11) and (T + A + R + T == 12) and (C + A + R + T == 13):\n            return A + R + T\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 9):\n        if (5/9) < (9/A) < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    num_friends = 4\n    cards_sent_by_each = num_friends - 1\n    total_cards = num_friends * cards_sent_by_each\n\n    return total_cards\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys and g represent the number of girls\n    b, g = symbols('b g')\n\n    # Equation representing the first condition:\n    # 1/4 of the boys is equal to 2/5 of the girls\n    equation1 = Eq((1/4) * b, (2/5) * g)\n\n    # Equation representing the total number of students\n    equation2 = Eq(b + g, 39)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Calculate the difference between the number of boys and girls\n    difference = solutions[b] - solutions[g]\n\n    return difference\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    left_of_Tanya = 3\n    right_of_Tanya = 5\n    Tanya = 1\n\n    total_members = left_of_Tanya + Tanya + right_of_Tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n    \n    # Generate all four-digit prime numbers in descending order\n    four_digit_primes = list(primerange(1000, 10000))[::-1]\n    \n    for prime in four_digit_primes:\n        if 87878 % prime == 0:\n            return prime\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    distance1 = 280\n    speed1 = 7\n    time1 = distance1 / speed1\n\n    distance2 = 400\n    speed2 = 5\n    time2 = distance2 / speed2\n\n    distance3 = 800 - (distance1 + distance2)  # Remaining distance\n    speed3 = 8\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5\n    van_capacity = 12\n    vans_needed = -(-total_weight // van_capacity)  # Ceiling division\n\n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel_initial, patrick_initial = symbols('daniel_initial patrick_initial')\n    \n    # Daniel gave away 24 stickers\n    daniel_final = daniel_initial - 24\n    \n    # Patrick bought 10 more stickers\n    patrick_final = patrick_initial + 10\n    \n    # Patrick had twice as much as Daniel finally\n    equation = Eq(patrick_final, 2 * daniel_final)\n    \n    # Initially, they had the same number of stickers\n    same_initial_condition = Eq(daniel_initial, patrick_initial)\n    \n    # Solve the equations\n    solutions = solve((equation, same_initial_condition), (daniel_initial, patrick_initial))\n\n    return solutions[daniel_initial]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) // 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def count_partitions(n, max_value):\n        if n == 0:\n            return 1\n        elif n < 0 or max_value == 0:\n            return 0\n        else:\n            with_max = count_partitions(n - max_value, max_value)\n            without_max = count_partitions(n, max_value - 1)\n            return with_max + without_max\n\n    ans = count_partitions(5, 5) - 1  # Subtract 1 to exclude the number itself\n    return ans\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82\n    plane_height = 569\n    vertical_distance = plane_height - whale_depth\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # The maximum number of boys who can be right handed\n    max_right_handed_boys = total_pupils - girls\n    \n    # The minimum number of girls who are right-handed\n    min_right_handed_girls = right_handed - max_right_handed_boys\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # Construct the smallest number by arranging digits in ascending order\n    smallest_number = int(''.join(map(str, range(1, 10))))\n    \n    # Construct the largest number by arranging digits in descending order\n    largest_number = int(''.join(map(str, range(9, 0, -1))))\n    \n    # The smallest possible difference will be the difference between\n    # two consecutive numbers of this constructed form.\n    # Since we have all digits from 1 to 9, the consecutive number\n    # will have the least significant digit (LSD) changed by 1.\n    \n    # Decrease the LSD of the largest number by 1 to get the closest smaller number\n    closest_smaller_number = largest_number - 1\n    \n    # Calculate the smallest possible difference\n    smallest_difference = closest_smaller_number - smallest_number\n    \n    return smallest_difference\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruit = symbols('total_fruit')\n    apples = (2/3) * total_fruit\n    bananas = (1/9) * total_fruit\n    lemons = total_fruit - apples - bananas\n\n    equation = Eq(apples - lemons, 12)\n    solution = solve(equation, total_fruit)\n\n    lemons_count = solution[0] - (2/3) * solution[0] - (1/9) * solution[0]\n\n    return lemons_count\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_worker = 6\n    total_skirts = 0\n    for day in range(1, 10):\n        workers = day\n        total_skirts += workers * skirts_per_worker\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    prob_over_20 = 0.6\n    prob_over_25_given_over_20 = 0.3 / prob_over_20\n    return prob_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Number of taps\n    taps = 5\n    # Time for taps to fill 1 litre jug in minutes\n    time_for_1_litre = 2\n    # Rate of one tap (litres per minute)\n    rate_per_tap = 1 / (taps * time_for_1_litre)\n    # Volume of jug to fill in litres\n    jug_volume = 500 / 1000 # Convert ml to litres\n    # Time for one tap to fill 500ml jug\n    time_for_500ml = jug_volume / rate_per_tap\n    \n    return time_for_500ml\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_erasers, brother_erasers = symbols('john_erasers brother_erasers')\n\n    equation1 = Eq(john_erasers, brother_erasers + 32)\n    equation2 = Eq(john_erasers + brother_erasers, 246)\n\n    solutions = solve((equation1, equation2), (john_erasers, brother_erasers))\n\n    return solutions[brother_erasers]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    a = 1\n    while a * a + a + a < 399:\n        a += 1\n    return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    difference = 20\n\n    sally_height = ben_height + difference\n\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n    children = 3 / 5 * total_visitors\n    remaining_visitors = total_visitors - children\n    men = 1 / 2 * remaining_visitors\n    equation = Eq(children - men, 140)\n\n    total_visitors_solution = solve(equation, total_visitors)\n\n    return total_visitors_solution[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 6, 7, 8]\n    all_permutations = list(permutations(digits, 3))\n    max_sum = 0\n\n    for i, perm1 in enumerate(all_permutations):\n        for j, perm2 in enumerate(all_permutations):\n            if i != j and not set(perm1).intersection(set(perm2)):\n                num1 = perm1[0] * 100 + perm1[1] * 10 + perm1[2]\n                num2 = perm2[0] * 100 + perm2[1] * 10 + perm2[2]\n                max_sum = max(max_sum, num1 + num2)\n\n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume = 2000  # Volume in millilitres\n    volume_drank = 350     # Volume drank in millilitres\n    remaining_volume = initial_volume - volume_drank\n    return remaining_volume\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    percentage = 40\n    total_amount = 3280\n\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let the amount of grass grown per day be G units\n    # Let the amount of grass a horse eats per day be H units\n    # 1 horse eats as much as 4 sheep, hence 1 sheep eats H/4 units per day\n    \n    # From the problem statement:\n    # 20H * 12 = G * 12 (Equation 1 - all grass eaten by 20 horses in 12 days)\n    # 60 * H/4 * 24 = G * 24 (Equation 2 - all grass eaten by 60 sheep in 24 days)\n\n    # Equation 1 can be re-arranged to G = 20H\n    # Equation 2 can be re-arranged to G = 60 * H/4\n    \n    # It implies that 20H = 60H/4\n    # Thus, 20H = 15H and H, the grass that a horse eats per day, is irrelevant now, we can cancel it out\n\n    # Now let's calculate how much grass 12 horses and 88 sheep eat per day:\n    # 12 horses eat 12H units per day\n    # 88 sheep eat 88H/4 = 22H units per day\n    # Combined they eat 12H + 22H = 34H units per day\n    \n    # We know that G = 20H, so the grassland produces enough grass for 20 horses\n    # If 34 horses were to eat, they can finish the grass in X days where:\n    # 34H * X = 20H * 12\n    # X = (20H * 12) / 34H\n    # Cancel out the H terms:\n    # X = (20 * 12) / 34\n\n    days = (20 * 12) / 34\n    return days\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # The sequence alternates with two rules.\n    # Analyzing the pattern, we can see that:\n    # 1 (+7) -> 8 (*2) -> 16 (+7) -> 23 (*2) -> 46 (+7) -> 53 \n    # Following the same rules, the next number should be 53 multiplied by 2.\n\n    next_number = 53 * 2\n\n    return next_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the flow rates of pipes A, B, and C\n    a, b, c = symbols('a b c')\n\n    # Equation 1: When A and C are on, A contributes 18 tons\n    # Equation 2: When B and C are on, B contributes 27 tons\n    # Equation 3: Flow rate of B is twice that of A\n    equation1 = Eq(a + c, 18)\n    equation2 = Eq(b + c, 27)\n    equation3 = Eq(b, 2 * a)\n\n    # Solving the system of equations for a, b, and c\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Calculate the total pool capacity using either of the equations\n    pool_capacity = solutions[a] + solutions[c] + solutions[b]\n\n    return pool_capacity\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    games_played = 20\n    payment_per_game = 500\n    goals_per_game = 2\n    payment_per_goal = 100\n\n    total_payment_for_games = games_played * payment_per_game\n    total_payment_for_goals = games_played * goals_per_game * payment_per_goal\n\n    total_earnings = total_payment_for_games + total_payment_for_goals\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kg = 8\n    cost_per_kg = total_cost / total_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "def solution():\n    for M in range(1, 10):  # M cannot be 0\n        for A in range(0, 10):\n            for T in range(0, 10):\n                for H in range(0, 10):\n                    if len({M, A, T, H}) == 4:  # All digits are different\n                        if (M*1000 + A*100 + T*10 + H) + (H*1000 + T*100 + A*10 + M) == 12221:\n                          return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    def operation_sun(n, m):\n        return sum(n + 2 * i for i in range(m))\n    \n    ans = operation_sun(1, 10)\n    return ans\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        if str(number).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n    cost_per_ball = total_cost / number_of_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of $2 notes and y be the number of $5 notes\n    x, y = symbols('x y')\n\n    # Cindy had a total of 55 pieces of notes at first\n    total_notes = Eq(x + y, 55)\n\n    # She spent 1/3 of the number of $2 notes and received another 8 pieces of $5 notes\n    spent_and_received = Eq(y + 8, (2/3) * x + y)\n\n    # After that, the number of $5 notes she had was 3/7 of the remaining number of notes\n    ratio_notes = Eq(y + 8, (3/7) * ((2/3) * x + (y + 8)))\n\n    # Solve the system of equations\n    solutions = solve((total_notes, spent_and_received, ratio_notes), (x, y))\n\n    # Calculate the amount of money Cindy had at first\n    amount_at_first = 2 * solutions[x] + 5 * solutions[y]\n\n    return amount_at_first\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial as fact\n    \n    # Three spots will be occupied by Mr. Spencer and his 2 children.\n    # There are 2! ways to arrange the children around Mr. Spencer.\n    children_permutations = fact(2)\n    \n    # Mr. Spencer and his children can be considered a single unit now.\n    # So we have 4 units to arrange (Mr. Spencer with children + 3 other people)\n    # There are 4! ways to arrange these units.\n    unit_permutations = fact(4)\n    \n    # Total arrangements is the product of both permutations.\n    total_permutations = children_permutations * unit_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_remain = total_sweets - sweets_eaten\n    sweets_given_away = sweets_remain / 3\n    sweets_left = sweets_remain - sweets_given_away\n    \n    return sweets_left\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    marks_per_correct = 5\n    marks_deducted_per_wrong = 2\n    total_marks = 23\n\n    for correct_questions in range(total_questions + 1):\n        wrong_questions = total_questions - correct_questions\n        if correct_questions * marks_per_correct - wrong_questions * marks_deducted_per_wrong == total_marks:\n            return correct_questions\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    from math import gcd\n\n    for B in range(1, 25):  # B must be a factor of 24\n        if 24 % B == 0:\n            A = 24 // B\n            if 52 % B == 0:\n                C = 52 // B\n                return A + C\n\n    return None\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*(x - 3) + 6*x, 28)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # in meters per minute\n    \n    time_taken = distance / speed  # time = distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # Treat groups (ABC and EF) as single entities plus the other 3 individual students = 5 entities\n    num_entities = 5\n\n    # Calculate permutations of these 5 entities\n    entity_permutations = factorial(num_entities)\n\n    # Within the ABC group, there are 3! permutations\n    abc_permutations = factorial(3)\n\n    # Within the EF group, there are 2! permutations\n    ef_permutations = factorial(2)\n\n    # Total permutations is the product of the permutations of the entities and the permutations within the groups\n    total_permutations = entity_permutations * abc_permutations * ef_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result_after_operations = 18\n    \n    # Reverse the operations\n    result_before_adding = result_after_operations - 7\n    original_number = result_before_adding * 3\n    \n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    first_odd = 1\n    difference = 2\n    term_position = 20\n\n    nth_odd = first_odd + (term_position - 1) * difference\n\n    return nth_odd\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scarfs_per_day, total_scarfs = symbols('scarfs_per_day total_scarfs')\n    # Original plan\n    equation1 = Eq(scarfs_per_day * 6, total_scarfs)\n    # New plan\n    equation2 = Eq((scarfs_per_day + 24) * (6 - 2), total_scarfs)\n\n    solutions = solve((equation1, equation2), (scarfs_per_day, total_scarfs))\n\n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students and y be the number of sweets\n    x, y = symbols('x y')\n\n    # If he gives each student 6 sweets, he'll be short of 26 sweets\n    equation1 = Eq(x * 6, y + 26)\n\n    # If he gives each student 5 sweets, he'll be short of 5 sweets\n    equation2 = Eq(x * 5, y + 5)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    # Let's denote the original number of boys as 5x and girls as 3x\n    # After 15 boys leave, the number of boys is 5x - 15\n    # The new ratio of boys to girls is 5:6\n    # So, we have the equation (5x - 15) / 3x = 5 / 6\n    # Solving for x gives us the initial number of boys and girls\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5*x - 15) / (3*x), 5/6)\n    x_value = solve(equation, x)[0]\n\n    # The total number of pupils in the school band at first is the sum of boys and girls\n    # so it will be 5x + 3x\n    total_pupils = 8 * x_value\n\n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1+1, 15):\n            x3 = 15 - x1 - x2\n            if x1 < x2 < x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 15 + 1, 2))\n    return series_sum\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(675)  \n    square_factors = {k: v % 2 for k, v in factors.items()}  \n    \n    B = 1\n    for factor, power in square_factors.items():\n        if power != 0:\n            B *= factor\n\n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount = 1/3\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    # Shelby's age 5 years ago\n    shelby_age_5_years_ago = 65 - 5\n    # Josh's age 5 years ago\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    # Josh's current age\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    product = 10 * 20 * 30 * 40\n    return product\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price_pence = 695\n    single_can_price_pence = 65\n    total_individual_price_pence = single_can_price_pence * 12\n    \n    savings = total_individual_price_pence - multipack_price_pence\n    \n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    # Initialize the count\n    count = 0\n    \n    # Count numbers between 3267 and 4000\n    # First digit is 3, so we only need to find permutations for the next three digits\n    count += 5 * 4 * 3  # P(5,3) because we can't use 3 anymore and the remaining digits are 1,2,4,5,6\n        \n    # Count numbers in the 4000s\n    # First digit is 4, which means for the next three positions we can use 1,2,3,5,6 (5 options each)\n    count += 5 * 5 * 4 * 3  # P(5,3) for each of the three remaining positions\n        \n    # Count numbers in the 5000s (we cannot use 5 as one of the next digits)\n    # First digit is 5, so for the second digit we can use 1,2,3,4,6 (4 options since it has to be at least 2)\n    # For the remaining two positions, we can use any of the remaining four digits\n    count += 4 * 4 * 3  # P(4,2) for the two remaining positions\n    \n    return count\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    adam, ben, carl = symbols('adam ben carl')\n    \n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n    \n    # The total weight will be (adam + ben + carl) plus carl again because we counted carl twice when adding equation1 and equation3\n    # Similarly, we'll add ben by considering equation1 and equation2\n    # Finally, we'll add adam by considering equation2 and equation3\n    # (adam + ben) + (ben + carl) + (adam + carl) - (adam + ben + carl) = \n    # = adam + 2 * ben + carl + adam + carl - (adam + ben + carl) = \n    # = 102 + 97 + 93 = 292\n    # However, since adam, ben, and carl are each counted twice in the sum of equations, we divide by 2\n    total_weight = (102 + 97 + 93) / 2\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, banana = symbols('apples banana')\n\n    equation1 = Eq(3 * apples + banana, 32)\n    equation2 = Eq(6 * apples + banana, 53)\n\n    solutions = solve((equation1, equation2), (apples, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    combined_rate = 1 / 4\n    bob_rate = 1 / 6\n\n    alan_rate = combined_rate - bob_rate\n    alan_time = 1 / alan_rate\n\n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    diff = singapore_stamps - malaysia_stamps\n\n    return diff\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    \n    balance = principal * (1 + rate) ** time\n    \n    return balance\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n    \n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    return 10024 + 3968\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    num_weeks = 26\n    total_food = weekly_food * num_weeks\n    return total_food\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_score = symbols('original_score')\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    score = solve(equation, original_score)\n    \n    return score[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    votes_for_peter = 35\n    votes_for_others = 22 + 27\n    votes_remaining = total_votes - votes_for_peter - votes_for_others\n    \n    # Peter needs one more vote than half of the remaining votes to win without fail\n    extra_votes_needed = (votes_remaining // 2) + 1\n    \n    return extra_votes_needed\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, nicholas = symbols('alex nicholas')\n    \n    # Alex spends $58, so he has alex - 58 left\n    # Nicholas spends $13, so he has nicholas - 13 left\n    # nicholas - 13 is 6 times (alex - 58)\n    equation1 = Eq(nicholas - 13, 6 * (alex - 58))\n\n    # They have the same amount of money at first\n    equation2 = Eq(alex, nicholas)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alex, nicholas))\n\n    alex_amount = solutions[alex]\n    nicholas_amount = solutions[nicholas]\n\n    # The total amount they had altogether at first\n    total_amount = alex_amount + nicholas_amount\n\n    return total_amount\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    return 250 - 6*6 - 8*8\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_later = 28\n    day_codes = {\n        0: '0001',  # Sunday\n        1: '0002',  # Monday\n        2: '0003',  # Tuesday\n        3: '0004',  # Wednesday\n        4: '0005',  # Thursday\n        5: '0006',  # Friday\n        6: '0007',  # Saturday\n    }\n    \n    day_of_week_code = (1 + days_later) % 7  # Monday is coded as 1\n    return day_codes[day_of_week_code]\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n    used_flour = total_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a_to_two_thirds = 9\n    a = a_to_two_thirds ** (3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    position_value = 6 * 10**-3\n    return position_value\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n    # To compute the number of poles, divide (road_length - interval) by the interval\n    num_poles = int((road_length - interval) / interval)\n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_items = 52\n    difference = 10\n\n    # Let the number of rulers be 'r'\n    # Then the number of pencils will be 'r + difference'\n    # The sum of pencils and rulers is total_items\n    # r + (r + difference) = total_items\n    # 2r + difference = total_items\n    # Solve for 'r':\n    r = (total_items - difference) / 2\n\n    return int(r)\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean = 11\n    total = mean * (len(numbers) + 1)\n    x = total - sum(numbers)\n\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    high_seven_value = 7 * 10**3  # The value of the 7 in the thousand's place\n    low_seven_value = 7 * 10**1   # The value of the 7 in the ten's place\n    difference = high_seven_value - low_seven_value\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return round(total_cost_for_12)\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_dress, red_dress, yellow_dress = symbols('blue_dress red_dress yellow_dress')\n    \n    equation1 = Eq(blue_dress, 2 * red_dress)\n    equation2 = Eq(yellow_dress, blue_dress + 2.40)\n    equation3 = Eq(blue_dress + red_dress + yellow_dress, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue_dress, red_dress, yellow_dress))\n\n    return solutions[blue_dress]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Take out 3 marbles of each color first\n    # At this point, we cannot guarantee that we have 4 of the same color\n    marbles_taken = 3 * 3\n    \n    # Take out one more marble to ensure we have at least 4 of the same color\n    marbles_taken += 1\n    \n    return marbles_taken\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    boys = 200\n\n    total_ratio = boys_ratio + girls_ratio\n    girls = boys * girls_ratio / boys_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    fraction_str = str(1 / 3)[2:1002]  # calculate 1/3 and get the first 1000 digits after the decimal point\n    ans = sum(int(digit) for digit in fraction_str)  # sum those digits\n    return ans\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15\n    amount = 29\n    result = (percentage / 100) * amount\n    return result\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original concentration in container A\n    x = symbols('x')\n\n    # Initial mass of water in containers A, B, C\n    mA = 30\n    mB = 40\n    mC = 50\n\n    # Mass transfer steps:\n    # 1. 10 grams of solution of concentration x added to A\n    A_concentration = (mA * 0 + 10 * x) / (mA + 10)\n    \n    # 2. 10 grams of solution from A (with concentration A_concentration) added to B\n    B_concentration = (mB * 0 + 10 * A_concentration) / (mB + 10)\n    \n    # 3. 10 grams of solution from B (with concentration B_concentration) added to C\n    C_concentration = (mC * 0 + 10 * B_concentration) / (mC + 10)\n\n    # The final concentration in container C is given as 0.5%\n    equation = Eq(C_concentration, 0.005)\n\n    # Solving for x\n    original_concentration = solve(equation, x)[0]\n\n    return original_concentration\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    start = 2\n    end = 100\n    difference = 2\n    # Count multiples of 2 from the start to the end\n    ans = int((end - start) / difference + 1)\n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n\n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    factors_2016 = [2, 2, 2, 2, 2, 3, 3, 7]\n    factors_1377 = [3, 3, 3, 17]\n\n    # Step 1: Find common age factors from last year and this year\n    common_factors = [f for f in factors_1377 if f in factors_2016]\n\n    # Step 2: Find the ages of the cousins this year\n    ages_this_year = []\n    for factor in common_factors:\n        factors_2016.remove(factor)\n        factors_1377.remove(factor)\n        ages_this_year.append(factor)\n\n    # Since only two factors are common, the youngest cousin's age increased by 2 over last year\n    ages_this_year.append(factors_2016.pop())\n\n    # Step 3: Calculate the product of their ages two years ago\n    ages_two_years_ago = [age - 2 for age in ages_this_year]\n    product_two_years_ago = 1\n    for age in ages_two_years_ago:\n        product_two_years_ago *= age\n\n    return product_two_years_ago\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "from math import factorial\n\ndef solution():\n    # Treat the two people who want to stand next to each other as a single unit.\n    # There are now 4 units to arrange (the single unit of the two people plus the three individuals).\n    arrangements_of_units = factorial(4)\n    \n    # The two people who want to stand next to each other can be arranged in 2! ways themselves.\n    arrangements_within_unit = factorial(2)\n    \n    # Total arrangements is the product of the arrangements of the units and the arrangements within the unit.\n    total_arrangements = arrangements_of_units * arrangements_within_unit\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_3_days = 33\n    average_last_4_days = 18\n    total_last_4_days = average_last_4_days * 4\n    total_week = total_first_3_days + total_last_4_days\n    average_per_day = total_week / 7\n\n    return average_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    # Calculate the amount of nickel in each metal\n    nickel_in_first_metal = 12 * 0.40\n    nickel_in_second_metal = 13 * 0.60\n    \n    # Total nickel \n    total_nickel = nickel_in_first_metal + nickel_in_second_metal\n    \n    # Total mass of the new metal\n    total_mass = 12 + 13\n    \n    # Calculate the percent concentration of nickel in the new metal\n    concentration_nickel = (total_nickel / total_mass) * 100\n    \n    return concentration_nickel\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament, each player plays every other player once.\n    # With 8 players, each player will play 7 games.\n    # Since no ties occurred and everyone has a different number of wins:\n    # The champion must win all their games to have a unique number of wins.\n    # Therefore, the champion records 7 wins in the tournament.\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    # Use the formula for the sum of an arithmetic series\n    # sum = n * (first term + last term) / 2\n    # Here, first term a = 1 and we use the sum given by John to solve for n\n    # We have sum = 3405\n    # Assume the double-counted number is x and the correct sum is S, so\n    # 3405 = S + x\n    # and since S = n * (n + 1) / 2, we get\n    # 3405 = n * (n + 1) / 2 + x\n\n    # We will find such n that S is closest to but not greater than 3405\n    S = 0\n    n = 0\n    while S <= 3405:\n        n += 1\n        S = n * (n + 1) // 2\n        if S > 3405:\n            n -= 1\n            break\n\n    # Now we compute the correct sum S using this n\n    S = n * (n + 1) // 2\n    \n    # The number he added twice is then the difference between what he thought the sum was and the actual sum\n    x = 3405 - S\n\n    return x\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # sum of first n terms of an arithmetic progression is given by S_n = n/2 * (2a + (n - 1)d)\n    # where a is the first term and d is the common difference\n    # we have two equations:\n    # S_6 = 6/2 * (2a + (6 - 1)d) = 64\n    # S_12 = 12/2 * (2a + (12 - 1)d) = 156\n    # Solving these two equations will give us a and d\n    # After finding a and d, we'll calculate S_18\n\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    \n    # equation 1 represents the sum of the first 6 terms\n    eq1 = Eq(6 / 2 * (2 * a + (6 - 1) * d), 64)\n    # equation 2 represents the sum of the first 12 terms\n    eq2 = Eq(12 / 2 * (2 * a + (11) * d), 156)\n\n    # solving the equations to get the values of a and d\n    sol = solve((eq1, eq2), (a, d))\n\n    # with a and d, we calculate the sum of the first 18 terms\n    a_value = sol[a]\n    d_value = sol[d]\n    S_18 = 18 / 2 * (2 * a_value + (18 - 1) * d_value)\n\n    return S_18\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be the total number of chickens and p be the number of chickens per pen initially.\n    c, p = symbols('c p')\n    \n    # Initial scenario: c = 24 * p\n    initial_condition = Eq(c, 24 * p)\n    \n    # After building 6 more pens, the number of chickens per pen reduced by 6.\n    # New scenario: c = (24 + 6) * (p - 6)\n    new_condition = Eq(c, (24 + 6) * (p - 6))\n    \n    # Solve the equations for c (the total number of chickens)\n    solutions = solve((initial_condition, new_condition), (c, p))\n    return solutions[c]\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    possibilities = set()\n    remainder = 3\n\n    # Start from 1 since divisor and quotient cannot be 0\n    for divisor in range(1, 40):\n        for quotient in range(1, 40):\n            # Calculate the dividend using the equation: divisor * quotient + remainder\n            dividend = divisor * quotient + remainder\n            # Calculate the sum of divisor, dividend, quotient and remainder\n            total = dividend + divisor + quotient + remainder\n            # Check if the total adds up to 40\n            if total == 40:\n                possibilities.add(dividend / quotient)\n\n    ans = len(possibilities)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    history_to_math_ratio = 7 / 8\n    total_history_club = total_math_club * history_to_math_ratio\n    return int(total_history_club)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse the digits\n    number1 = int(str(729)[::-1])\n    number2 = int(str(26)[::-1])\n    # Perform subtraction\n    result = number1 - number2\n    # Reverse the result for Zog representation\n    ans = int(str(result)[::-1])\n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    return gcd(45, 60)\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_current_age = 10\n    ashley_age_three_years_ago = ashley_current_age - 3\n    brother_age_three_years_ago = ashley_age_three_years_ago - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    speed = 20  # speed of the train in meters per second\n    time = 30  # time to pass the bridge in seconds\n    train_length = 160  # length of the train in meters\n\n    # Distance covered by the train to pass the bridge completely = speed * time\n    distance_covered = speed * time\n\n    # Length of the bridge = Total distance covered - Length of the train\n    bridge_length = distance_covered - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n\n    difference = hebe_score - emily_score\n\n    return int(difference)\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Speeds\n    speed_jogging = 9     # in km per hour\n    speed_walking = 7.5    # in km per hour\n    \n    # Times\n    time_jogging = 0.5     # from 6:30 a.m. to 7:00 a.m. (30 minutes)\n    time_walking = 1       # from 7:00 a.m. to 8:00 a.m. (1 hour)\n    \n    # Distance calculation\n    distance_jogging = speed_jogging * time_jogging\n    distance_walking = speed_walking * time_walking\n    \n    # Total distance\n    total_distance = distance_jogging + distance_walking\n    \n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are two possibilities for the first digit: 3 or 4 (cannot be 0)\n    first_digit_options = 2\n    \n    # Since each digit can be used more than once,\n    # both the second and third digits have 3 possibilities: 0, 3, or 4\n    second_digit_options = 3\n    third_digit_options = 3\n    \n    # The total number of different three-digit numbers is the product\n    # of the number of options for each digit\n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    games_won, games_lost = symbols('games_won games_lost')\n\n    equation1 = Eq(games_won, 2 * games_lost)\n    equation2 = Eq(games_won + games_lost, 63)\n\n    solutions = solve((equation1, equation2), (games_won, games_lost))\n\n    return solutions[games_lost]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    return (55 - 44) * 13\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the original number of cows and g represent the original number of goats.\n    c, g = symbols('c g')\n\n    # Original condition: given that 65% of the animals were cows\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 animals, the cows make up 85% of the total\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # The number of goats doubled\n    equation3 = Eq(2 * g, g + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    # We need the original number of goats g\n    return solutions[g]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # Calculate permutations for 3 girls as a group, 3 boys and 3 teachers.\n    # We consider the 3 girls as a single entity since they want to stand together.\n    single_entity = 1\n    boy_count = 3\n    teacher_count = 3\n    total_entities = single_entity + boy_count + teacher_count\n    \n    # Calculating the permutations of the girls, boys, and teachers\n    total_permutations_entities = factorial(total_entities)\n    \n    # Now calculate permutations for the girls among themselves\n    girl_permutations = factorial(3)\n    \n    # Calculate permutations for the boys and teachers with the condition that\n    # no two boys can stand adjacent to each other. We can insert 3 boys into the\n    # slots between teachers and the single entity (girls as a group). We have 5 \n    # such slots (before and after the single entity, and between the 3 teachers).\n    \n    # Choosing 3 slots out of 5 to place the boys\n    boy_slots = factorial(5) // (factorial(5 - boy_count) * factorial(boy_count))\n    \n    # Due to the constraints, the total number of permutations is\n    ans = total_permutations_entities * girl_permutations * boy_slots\n\n    return ans\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    area_x = (3**2 * (3**0.5)) / 4\n    area_y = (9**2 * (3**0.5)) / 4\n    ans = area_y / area_x\n    return ans\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 7 == 4 and number % 8 == 4 and number % 9 == 4:\n            return number\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Tristan spent 5x on 12 pens and 3x on 5 pencils\n    equation = Eq(12 * 5 * x + 5 * 3 * x, 120)\n    \n    # Solving for x\n    solved_x = solve(equation, x)\n    \n    return solved_x[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5  # Total number of eligible students\n    students_to_choose = 2  # Number of students to choose\n\n    # Calculate the combinations of choosing 2 students from 5\n    ways_to_select = comb(total_students, students_to_choose)\n\n    return ways_to_select\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    return (8 * 9 * 10) - (1 * 2 * 3)\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 2 # (including the option of not choosing the soup)\n    desserts = 3 # (including the option of not choosing the dessert)\n    \n    combinations = appetisers * main_courses * soups * desserts\n    \n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The child count when grouped by 8 left 3 out\n    # The child count when grouped by 9 left 1 out\n    # This gives us the two congruences:\n    # child_count ≡ 3 (mod 8)\n    # child_count ≡ 1 (mod 9)\n    congruences = ([3, 8], [1, 9])\n    \n    child_count, _ = solve_congruence(*congruences)\n    \n    # Now we need to find the first such number between 100 and 200\n    while child_count < 100:\n        child_count += 8 * 9\n\n    return child_count\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of blue balls be x.\n    blue_balls = symbols('blue_balls')\n    \n    # Total number of balls in the bag is 4 red + x blue.\n    total_balls = 4 + blue_balls\n    \n    # Probability of the first ball being red is 4/(4+x).\n    # Probability of the second ball being red (without replacement) is 3/(4+x-1).\n    \n    # The product of these probabilities is the probability that both balls are red.\n    probability = (4 / total_balls) * (3 / (total_balls - 1))\n    \n    # According to the problem, this probability equals to 2/7.\n    equation = Eq(probability, 2/7)\n    \n    # Solve for the number of blue balls.\n    solutions = solve(equation, blue_balls)\n    \n    return solutions[0]\n\nans = solution()\n\n# Output the answer\nans"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    first_term = 6\n    common_difference = 5\n    n = (41 - first_term) // common_difference + 1  # Number of terms\n\n    sum_of_sequence = n * (first_term + (n - 1) * common_difference // 2)\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n\n    # Therefore, 1 dog = 8 * 2 chickens\n    chickens_per_dog = 8 * 2\n\n    return chickens_per_dog\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        ""
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # If 3/5 of the cake is eaten and 2 slices are given away with 4 slices left,\n    # This means 2/5 of the cake is equal to 2 + 4 slices.\n    remaining_slices = 2 + 4\n\n    # Calculate the total number of slices by taking the remaining 2/5 of the cake.\n    total_slices = (5 / 2) * remaining_slices\n\n    return int(total_slices)\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    return 51+50-45+40-35+30-25+20-15\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    # Place value of the first 3 is 3 hundred thousands (3 * 10^5)\n    first_three_place_value = 3 * (10**5)\n    \n    # Place value of the second 3 is 3 tens (3 * 10^1)\n    second_three_place_value = 3 * (10**1)\n    \n    # The difference between the two place values\n    ans = first_three_place_value - second_three_place_value\n    \n    return ans\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    pencils = 7\n    cases = 2\n    min_pencils_in_a_case = (pencils + cases - 1) // cases\n    return min_pencils_in_a_case\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # To minimize the number of red squares, we want to maximize the distribution of numbers before any number reaches 5 occurrences.\n    # Since there are 10 possible digits (0 to 9), we can put each digit 4 times (which is less than 5, so they won't be painted red).\n    # For the remaining 20 squares, we will be forced to use at least one digit for the fifth time, which will make that square red.\n    # We can distribute these remaining 20 squares among the other 9 digits (again, each less than 5 times to minimize red squares).\n    \n    # Initial 4 occurrences of each digit, none red.\n    non_red_squares = 10 * 4  # 40 squares with no reds\n    \n    # Remaining squares to distribute\n    remaining_squares = 100 - non_red_squares  # 60 squares remaining\n    \n    # Distribute remaining squares among 9 digits to avoid any reaching 5 occurrences\n    max_squares_per_digit_before_red = 4\n    red_squares = remaining_squares // max_squares_per_digit_before_red\n\n    # If there's a remainder, that means we have to use an additional digit which would make more squares red\n    if remaining_squares % max_squares_per_digit_before_red != 0:\n        red_squares += 1\n\n    return red_squares\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        term += common_difference\n        num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_on_folder = 2.89\n    received_from_father = 4 / 5\n    \n    remaining_amount = initial_amount - spent_on_folder + received_from_father\n    \n    return remaining_amount\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_time = symbols('mike_time')\n    danny_time = symbols('danny_time')\n\n    # If they work together, they finish the job in 10 hours\n    equation1 = Eq((1/mike_time + 1/danny_time), 1/10)\n\n    # Mike types 8 hours and then Danny types 13 hours, they finish the job\n    equation2 = Eq((8/mike_time + 13/danny_time), 1)\n\n    solutions = solve((equation1, equation2), (mike_time, danny_time))\n\n    # We want to find out only how long it will take Danny, so we return danny_time\n    return solutions[danny_time]\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for x in range(32, 100):  # smallest two same digits number is 1000 which is close to 32^2, largest 4-digit number is 9999 which is close to 100^2\n        num = x ** 2\n        if str(num)[1] == str(num)[0] and str(num)[3] == str(num)[2]:\n            return num\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    n = 1\n    zeros = 0\n    while zeros < 28:\n        k = n\n        while k % 5 == 0:\n            k /= 5\n            zeros += 1\n        n += 1\n    return n - 1\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n    # Each side will have chess pieces including the corners, but we avoid double counting the corners.\n    # The number of chess per side is the side length divided by the interval plus 1 for the corner.\n    chess_per_side = side_length // interval + 1\n    # Since the corners are counted in two sides, we subtract the 4 corners to avoid double counting.\n    total_chess = 4 * chess_per_side - 4\n    return total_chess\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    total_distance = 780\n    remaining_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    # The combined speed of Tim and Bob is the sum of their individual speeds\n    combined_speed = tim_speed + bob_speed\n\n    # They close the gap by (total_distance - remaining_distance) kilometers\n    distance_covered = total_distance - remaining_distance\n\n    # The time it takes is the distance covered divided by their combined speed\n    time = distance_covered / combined_speed\n\n    return time\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    # Define the operation a ⨁ b as a summation from a to a+b\n    def custom_op(a, b):\n        return sum(a + i for i in range(b + 1))\n    \n    # Define the equation m ⨁ 10 = 66 and solve for m\n    for m in range(66):\n        if custom_op(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    climbed_distance = 0\n    day_count = 0\n\n    while climbed_distance < total_distance:\n        day_count += 1\n        climbed_distance += day_distance\n        if climbed_distance >= total_distance:\n            break\n        climbed_distance -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    # The sum of all five numbers\n    total_sum = 5 * 5\n    \n    # The sum of the given four numbers\n    given_sum = 3 + 4 + 6 + 10\n    \n    # The fifth number is the total sum minus the sum of the given numbers\n    fifth_number = total_sum - given_sum\n    \n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from sympy import lcm\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n\n    least_days = lcm(akon_cycle, ben_cycle, cris_cycle)\n    return least_days\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            for perm in permutations(digits):\n                sequence = list(map(int, perm))\n                if sequence == sorted(sequence) and sequence[1] == sequence[0] + 1 and sequence[2] == sequence[1] + 1 and sequence[3] == sequence[2] + 1:\n                    count += 1\n                    break\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    sequence = '8354'  # Pattern in the recurring decimal\n    sequence_sum = sum(int(digit) for digit in sequence)  # Sum of one full pattern\n    full_patterns = 84 // len(sequence)  # Number of full patterns in required digits\n    remaining_digits = 84 % len(sequence)  # Number of remaining digits after full patterns\n\n    total_sum = full_patterns * sequence_sum + sum(int(sequence[i]) for i in range(remaining_digits))\n    return total_sum\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    num_people = 3\n    average_distance = total_distance / num_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # The time between each strike is the total time minus the time of all strikes\n    # divided by the number of intervals between strikes (number of strikes - 1)\n    time_between_strikes = (43 - 6 * 3) / (6 - 1)\n    \n    # The total time for 12 strikes is the time of all strikes plus the time\n    # between them times the number of intervals (number of strikes - 1)\n    total_time_for_12_strikes = 12 * 3 + time_between_strikes * (12 - 1)\n    \n    return total_time_for_12_strikes\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # Number of pens to be distributed (n) and number of kids (k)\n    n, k = 20, 6\n    \n    # This problem can be considered as distributing (n - k) indistinguishable objects\n    # into k distinguishable boxes, where each box must contain at least one object.\n    # This is equivalent to partitioning the number (n - k) into exactly k parts.\n    # This is called a \"stars and bars\" problem, and the number of ways to do this\n    # is given by the binomial coefficient C(n - k - 1, n - k - k),\n    # where C(n, k) = n! / (k!*(n-k)!).\n\n    # Compute the factorial of a number\n    def fact(x):\n        return factorial(x)\n\n    # Calculate binomial coefficient C(n-k-1, k-1) which is C(13, 5)\n    ans = fact(n - k - 1) // (fact(k - 1) * fact(n - 2 * k))\n    \n    return ans\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    students = 0\n    while True:\n        m_squared = (students - 5)\n        n_squared = (students + 18)\n        if (m_squared**0.5).is_integer() and (n_squared**0.5).is_integer():\n            return students\n        students += 1\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    # Initial conditions\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n    \n    # Directly calculate the number of people needed for 2 hours\n    # Assuming all people work at the same rate, we use the inverse proportionality rule\n    needed_people = initial_people * (initial_hours / target_hours)\n    \n    return int(needed_people)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    num_quizzes = 4\n    total_time_minutes = time_per_quiz * num_quizzes\n    total_time_hours = total_time_minutes / 60  # convert minutes to hours\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Numbers from 100 to 999\n    no_zero_three_digit_numbers = 9 * 9 * 8  # Numbers without zeros, no 0 for hundreds, tens, or ones\n    at_least_one_zero_numbers = total_three_digit_numbers - no_zero_three_digit_numbers\n    return at_least_one_zero_numbers\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    speed = 30  # in meters per second\n    kinetic_energy = 0.5 * mass * speed**2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for i in range(101, 200):\n        if all(i % j == 1 for j in [3, 4, 5]) and i % 7 == 2:\n            return i\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - first_term\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 5), (2, 6), (2, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0] if ans[0] < 300 else None\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # The greatest odd number that can be in the ones place is 9\n    ones_place = 9\n    # The smallest digit should be in the thousand place to make the smallest 4-digit number\n    # considering that all digits are different, the second smallest would be 1 as 0 can't be used\n    thousands_place = 1\n    # The hundreds and tens place digits add up to 13\n    # We need to find the smallest combination for hundreds+tens to satisfy the condition\n    # Let's try with hundreds_place starting from 1 as well (smallest possible non-zero)\n    for hundreds_place in range(1, 10):\n        tens_place = 13 - hundreds_place\n        # Check if the tens place is a digit (0-9) and not equal to hundreds_place and thousands_place and ones_place\n        if tens_place < 10 and tens_place != hundreds_place \\\n           and tens_place != thousands_place and tens_place != ones_place:\n            # We have found the smallest possible combination\n            break\n\n    # Construct the smallest 4-digit number with the found digits\n    number = thousands_place * 1000 + hundreds_place * 100 + tens_place * 10 + ones_place\n\n    return number\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let's denote Jerry's speed as s (miles/hour)\n    # so Kevin's speed is 1.5s\n    # They cover a total of 225 miles\n    # Time taken to meet is the same for both, so we have\n    # distance = speed * time\n    # For Jerry: s * time = distance_jerry\n    # For Kevin: 1.5s * time = distance_kevin\n    # Their combined distance covered will be 225 miles, so\n    # distance_jerry + distance_kevin = 225\n    # Replacing distance_kevin with its equivalent in terms of s and time gives:\n    # s * time + 1.5s * time = 225\n    # This simplifies to 2.5s * time = 225\n    # Since Jerry and Kevin are meeting each other, the ratio of their distances will be the inverse of their speeds' ratio\n    # So the ratio of distances is 1 (Jerry) to 1.5 (Kevin)\n\n    # total parts = 1 (for Jerry) + 1.5 (for Kevin) = 2.5 parts\n    total_parts = 2.5\n\n    # Jerry's part = total distance / total parts\n    jerry_part = 225 / total_parts\n\n    return jerry_part\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    wall_width = 4800\n    picture_width = 210\n    total_pictures = 10\n\n    # Space taken by the pictures themselves (10 pictures)\n    space_taken_by_pictures = total_pictures * picture_width\n\n    # Total space excluding the pictures (the wall width minus space taken by pictures)\n    total_space_excluding_pictures = wall_width - space_taken_by_pictures\n\n    # The number of intervals between pictures is one less than the number of pictures\n    number_of_intervals = total_pictures - 1\n\n    # The spacing between the pictures is the total space excluding the pictures divided by the number of intervals\n    spacing_between_pictures = total_space_excluding_pictures / number_of_intervals\n\n    # The center of the wall\n    center_of_wall = wall_width / 2\n\n    # Distance from the left wall to the center of third picture \n    # is 1 full picture width plus 1.5 times the spacing (because the first picture is at the extreme)\n    distance_to_third_picture_center = (1.5 * spacing_between_pictures) + (picture_width / 2)\n    \n    # The distance for the third picture from the vertical line down the centre of the wall\n    # is the distance to the third picture center minus the center of the wall\n    distance_from_wall_center = abs(distance_to_third_picture_center - center_of_wall)\n\n    return distance_from_wall_center\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    height_fraction = 0.75\n    current_height = 1  # start with 100%\n    target_height = 0.25\n    bounces = 0\n\n    while current_height >= target_height:\n        current_height *= height_fraction\n        bounces += 1\n\n    return bounces\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    # This is an arithmetic sequence where a = 5 (first term) and d = 3 (common difference)\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doris_age = 10\n    uncle_age = symbols('uncle_age')\n\n    # uncle's current age + (uncle's age - doris_age) = 40\n    equation = Eq(uncle_age + (uncle_age - doris_age), 40)\n\n    age_sol = solve(equation, uncle_age)\n\n    return age_sol[0]\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'b' represent the cost of a banana and 'a' represent the cost of an apple.\n    b, a = symbols('b a')\n    \n    # Ellie's transaction gives us the first equation: 2b + 3a = 1.50\n    eq1 = Eq(2 * b + 3 * a, 1.50)\n    \n    # Beth's transaction gives us the second equation: 3b + 2a = 1.45\n    eq2 = Eq(3 * b + 2 * a, 1.45)\n    \n    # Solving the system of equations will give us the individual prices of a banana and an apple.\n    solutions = solve((eq1, eq2), (b, a))\n    \n    # Annabella pays for 1 banana and 1 apple, which is b + a.\n    annabella_pays = solutions[b] + solutions[a]\n    \n    return annabella_pays\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    \n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # Adding an underline which represents an unknown number u to 8 to get 15\n    # This creates the equation: 8 + u = 15\n    u = 15 - 8\n\n    # Since Timothy decided that the answer must be 7 as an indivudal number,\n    # we should check if this reasoning holds true.\n    timothy_answer = 7\n    is_correct = (u == timothy_answer)\n\n    # If the reasoning is correct, return Timothy's answer.\n    # If not, return the correct answer found by solving the equation.\n    return timothy_answer if is_correct else u\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return (20 - 5) - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original amount of money Jerry had.\n    x = symbols('x')\n    \n    # After spending $200 on a watch.\n    remaining_after_watch = x - 200\n    \n    # Then he spends 2/7 of his remaining money on a shirt.\n    remaining_after_shirt = remaining_after_watch - (2/7) * remaining_after_watch\n    \n    # He finally has 1/3 of the original amount of money left.\n    equation = Eq(remaining_after_shirt, x/3)\n    \n    # Solve the equation to find the original amount of money x.\n    original_money = solve(equation, x)\n    \n    return original_money[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # First, let's consider Tom and Harry as a single entity since they must stand together,\n    # so we have in total 6 entities to arrange (5 students + the Tom&Harry group)\n    arrangements_6 = factorial(6)\n    \n    # However, Tom and Harry can be arranged within their group in 2!=2 ways (Tom on the left, Harry on the right, and vice versa).\n    tom_harry_arrangements = factorial(2)\n\n    # Ronda must stand at the furthest right, so there is only 1 way to place her,\n    # hence this does not change the number of arrangements for the remaining 6 entities\n\n    # The total arrangements are the product of the arrangements of the 6 entities\n    # and the arrangements within the Tom&Harry group\n    total_arrangements = arrangements_6 * tom_harry_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_amount = 5000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1664\n    \n    amount_after_three_years = initial_amount * interest_first_three_years\n    total_amount = amount_after_three_years * interest_last_two_years\n    \n    return round(total_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    lowest_possible_price = (rounded_price // 100) * 100\n    if lowest_possible_price + 99 < rounded_price:\n        lowest_possible_price += 100\n    return lowest_possible_price + 1\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the usual speed (km/h) and y be the usual time (hours)\n    x, y = symbols('x y', real=True, positive=True)\n    \n    # When the speed is increased by 20%, time decreases by 1 hour\n    equation1 = Eq(x * 1.20 * (y - 1), x * y)\n    \n    # When the car travels the first 200 km at usual speed and then increases its speed by 25% for the remaining part,\n    # the time is decreased by 12 minutes (0.2 hours)\n    equation2 = Eq(200/x + (x * y - 200) / (x * 1.25), y - 0.2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the distance between city P to city Q: distance = speed * time\n    distance = solutions[x] * solutions[y]\n\n    return distance\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_tests = 4\n    current_average = 89\n    desired_average = 95\n    full_score = 100\n\n    total_current_score = current_tests * current_average\n    additional_tests_needed = 0\n    \n    # Assuming Paul scores full marks in all additional tests,\n    # find the number of additional tests needed to achieve the average of 95 or more\n    while True:\n        total_possible_score = total_current_score + additional_tests_needed * full_score\n        new_average = total_possible_score / (current_tests + additional_tests_needed)\n        if new_average >= desired_average:\n            break\n        additional_tests_needed += 1\n\n    return additional_tests_needed\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance_first_part = 540\n    speed_first_part = 9\n    time_first_part = distance_first_part / speed_first_part\n\n    distance_second_part = 300\n    speed_second_part = 6\n    time_second_part = distance_second_part / speed_second_part\n\n    distance_third_part = 1000 - distance_first_part - distance_second_part\n    speed_third_part = 10\n    time_third_part = distance_third_part / speed_third_part\n\n    total_time = time_first_part + time_second_part + time_third_part\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    # Doris's current age\n    doris_age = 10\n    \n    # Let 'x' be the uncle's current age\n    # When Doris reaches the uncle's current age, the difference in their ages will still be the same\n    # So, uncle's age when Doris reaches his current age will be x + (x - doris_age)\n    \n    # According to the uncle's statement, when Doris reaches his current age, he will be 40 years old\n    # Thus, we have the equation: x + (x - doris_age) = 40\n    \n    # Simplifying the equation gives us: 2x - doris_age = 40\n    # Solving for x gives us: x = (40 + doris_age) / 2\n    uncle_age = (40 + doris_age) / 2\n    \n    return int(uncle_age)\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # Lia and Liz each prepare an extra performance\n    performances = total_classes + extra_performances\n    return performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # speed of the train in m/s\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed  # time in seconds\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep, cows = symbols('sheep cows')\n    \n    # Original ratio of sheep and cows\n    original_ratio = Eq(sheep, (5/7) * cows)\n\n    # New ratio after changes\n    new_ratio = Eq(cows - 7, (3/4) * (sheep + 21))\n\n    solutions = solve((original_ratio, new_ratio), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    book, pencil_box = symbols('book pencil_box')\n\n    # Formulate equations based on the given information\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    start_time = 8 * 60 + 30  # Convert 08:30 to total minutes\n    end_time = 9 * 60 + 25    # Convert 09:25 to total minutes\n\n    n = end_time - start_time  # Calculate the difference in minutes\n\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    a_efficiency = 2\n    b_efficiency = 1\n    a_days = 6\n\n    # Efficiency is work done per day, therefore A's work per day is 1/6\n    # Since A's efficiency is twice B's, B's work per day is 1/12\n    a_work_per_day = 1 / a_days\n    b_work_per_day = a_work_per_day / a_efficiency\n\n    # Combined work per day when A and B work together\n    combined_work_per_day = a_work_per_day + b_work_per_day\n\n    # Number of days required to complete the job when working together\n    days_together = 1 / combined_work_per_day\n\n    return days_together\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Define the current sum of their ages\n    current_sum = 22\n    # Calculate the number of years it will take for the sum of their ages to be 30\n    years_until_sum_30 = 30 - current_sum\n    # Return the number of years\n    return years_until_sum_30\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost_cents = 50\n    mamee_cost_cents = haribo_cost_cents - 30\n    big_packet_jelly_cost_cents = 6 * mamee_cost_cents\n    big_packet_jelly_cost_dollars = big_packet_jelly_cost_cents / 100\n\n    return big_packet_jelly_cost_dollars\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n\n    # Anna and Belle received fraction\n    fraction_anna = 3/8\n    fraction_belle = 1/4\n\n    # Equation representing the relationship between what Anna and Belle received\n    # and what Cathy and Dawn received\n    equation = Eq(fraction_anna * total_candies + fraction_belle * total_candies -\n                  (total_candies - (fraction_anna * total_candies + fraction_belle * total_candies)), 90)\n\n    # Solving the equation gives us the total number of candies.\n    sol = solve(equation, total_candies)\n\n    return sol[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    left_numerator = 18\n    left_denominator = 36\n    right_denominator = 32\n    \n    right_numerator = (left_numerator / left_denominator) * right_denominator\n\n    return right_numerator\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants_after_joel = 4\n    plants_before_joel_removes = (remaining_plants_after_joel + 2) * 2\n    \n    remaining_plants_after_valerie = plants_before_joel_removes\n    plants_before_valerie_removes = (remaining_plants_after_valerie + 3) * 2\n    \n    remaining_plants_after_ethan = plants_before_valerie_removes\n    initial_plants = (remaining_plants_after_ethan + 1) * 2\n\n    return initial_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # the number of fish balls Mr Tan made at first\n    eq = Eq(x - (3/4)*x - (1/3)*(1/4)*x + 506, 2*x)  # equation representing the problem\n\n    ans = solve(eq, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    # Let v represent the number of vanilla cupcakes Sally originally had.\n    # Then, the number of chocolate cupcakes is v + 72.\n    # And, the number of blueberry cupcakes is v - 36.\n    # After selling 1/6 of the chocolate, 2/3 of the vanilla, and 7/9 of the blueberry cupcakes,\n    # The total number of cupcakes left is:\n    # (5/6)*(v + 72) + (1/3)*v + (2/9)*(v - 36) = 427\n\n    from sympy import symbols, Eq, solve\n    v = symbols('v')\n\n    cupcakes_left_eq = Eq((5/6)*(v + 72) + (1/3)*v + (2/9)*(v - 36), 427)\n    v_solution = solve(cupcakes_left_eq, v)\n\n    vanilla = v_solution[0]\n    chocolate = vanilla + 72\n    # Calculate how many chocolate cupcakes Sally sold\n    chocolate_sold = chocolate - (5/6)*chocolate\n    \n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    ans = 0.23 * 200\n    return ans\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) // 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    result = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return result\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys = 2\n    ratio_girls = 7\n\n    total_students = boys * (ratio_girls + ratio_boys) // ratio_boys\n\n    return total_students\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_price = 3\n    marble_price = strawberry_price + 2\n    cheese_price = 3 * marble_price\n    total_cheese_price = 2 * cheese_price\n    return total_cheese_price\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = (6*6 + 2 - 17) / 3\n    return int(circle)\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # According to the problem statement:\n    # x ≡ 1 (mod 3)\n    # x ≡ 3 (mod 5)\n    # x ≡ 5 (mod 7)\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    \n    # Using the Chinese Remainder Theorem to solve the congruence system\n    x, _ = solve_congruence(*congruences)\n    \n    # Find the number in the range 400 to 500\n    while x < 400:\n        x += 3 * 5 * 7\n\n    return x if x <= 500 else None\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    number = 36\n    factors_count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    green_apples = 8  # one green apple per pig\n    red_apples = 8 // 2  # one red apple for every two pigs\n    total_apples = green_apples + red_apples\n    return total_apples\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    result = solve_congruence(*congruences)\n\n    return result[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    return solutions[shirt] + solutions[pants]\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem statement\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    # Solve the congruences using Chinese Remainder Theorem\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    result = 54\n    original_number = (result * 4 - 178) / 2\n    return int(original_number)\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    apples = [42, 41, 30, 29, 38]\n    total_apples = sum(apples)\n    average_apples = total_apples / len(apples)\n    return average_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    fraction_died = 1/4\n    seeds_died = total_seeds * fraction_died\n    sunflowers_grown = total_seeds - seeds_died\n\n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers\n    mary_stickers, alexis_stickers, charlotte_stickers = symbols('mary_stickers alexis_stickers charlotte_stickers')\n\n    # Mary and Alexis had stickers in the ratio 7 : 5\n    ratio_eq = Eq(mary_stickers / alexis_stickers, 7/5)\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    mary_gave = mary_stickers * 0.20\n    alexis_gave = alexis_stickers * 0.20\n    total_given = mary_gave + alexis_gave\n    \n    # Charlotte’s stickers increased by 80%\n    charlotte_increase_eq = Eq(total_given, charlotte_stickers * 0.80)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    mary_final = mary_stickers - mary_gave\n    charlotte_final = charlotte_stickers + total_given\n    mary_charlotte_diff_eq = Eq(mary_final - charlotte_final, 20)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, charlotte_increase_eq, mary_charlotte_diff_eq), (mary_stickers, alexis_stickers, charlotte_stickers))\n\n    # Get the number of stickers Alexis had at first\n    return solutions[alexis_stickers]\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    # Let's say the original speed is 's' km/h and the distance is 'd' km.\n    # Original time to travel is 't' = 8 hours, hence d = s*t = 8s.\n\n    # She wants to arrive 1 hour early, thus new time is 't-1' = 7 hours.\n    # She must travel at 's + 5' km/h to achieve this.\n    # Therefore, new distance covered in the time 't-1' at 's+5' speed is d = (s + 5)*(t - 1) = (s + 5)*7.\n\n    # Since the distance 'd' doesn't change, the two distances are equal:\n    # 8s = (s + 5)*7\n\n    # Now solve for 's' to find the speed.\n    s = symbols('s')\n    equation = Eq(8 * s, (s + 5) * 7)\n    original_speed = solve(equation, s)[0]\n\n    # Now, use 's' to find the distance 'd' using the original speed 's' and time 't'. \n    d = original_speed * 8\n    return d\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    starting_money = 100  # Initial amount of pocket money\n    deposit = 10  # Amount deposited every other day\n    spend = 8  # Amount spent every other day following a deposit day\n\n    # Calculate the number of complete cycles of deposit and spend days (each cycle takes 2 days)\n    cycles = total_days // 2\n    remaining_days = total_days % 2\n\n    # In each cycle, Andy's money increases by deposit - spend (£10 - £8 = £2)\n    money_after_cycles = starting_money + (cycles * (deposit - spend))\n\n    # If there's an odd number of days, add one final deposit\n    if remaining_days > 0:\n        money_after_cycles += deposit\n\n    return money_after_cycles\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4!  # Total ways to arrange 4 people\n    opposite_ways = 2! * 2!  # Ways where Claire and Tony sit opposite\n\n    # Subtracting the number of ways where Claire and Tony sit opposite each other\n    # from the total ways to arrange all 4 people\n    ans = total_ways - opposite_ways\n    return ans\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    return numbers[4]\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "import math\n\ndef solution():\n    num_bottles = 1000\n    # Compute the minimum number of test tubes needed to test all bottles\n    # using binary representation of bottle numbers.\n    num_test_tubes = math.ceil(math.log(num_bottles, 2))\n\n    return num_test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs = 10\n    total_distance = 36  # in meters\n    remaining_chairs = total_chairs - 3  # removing 3 chairs\n\n    # Initial spacing is the distance over the number of intervals (9 intervals for 10 chairs)\n    initial_spacing = total_distance / (total_chairs - 1)\n\n    # New spacing will be over the remaining intervals after removing 3 chairs (6 intervals for 7 chairs)\n    new_spacing = initial_spacing * (total_chairs - 1) / (remaining_chairs - 1)\n\n    return new_spacing\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    for brother1 in range(2, 10):  # Brother 1 has at least 2 books\n        for brother2 in range(2, 10 - brother1 + 1):  # Brother 2 has at least 2 books, and together with Brother 1 they can't have more than 10 books\n            brother3 = 10 - brother1 - brother2\n            if brother3 >= 2:  # Brother 3 also needs to have at least 2 books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the fourth angle (smallest angle)\n    x = symbols('x')\n    \n    # let 5x be the third angle, which is five times larger than the fourth angle\n    # sum of angles in a quadrilateral is 360 degrees\n    # two of the remaining angles are right angles, so each is 90 degrees\n    equation = Eq(90 + 90 + 5*x + x, 360)\n    \n    # solve the equation for x\n    fourth_angle = solve(equation, x)[0]\n    \n    # calculate the size of the third angle which is the largest\n    largest_angle = 5 * fourth_angle\n    \n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    ways = [0] * 11\n    ways[0] = 1\n\n    for i in range(1, 5): # Calculating the number of ways to reach the 4th step\n        ways[i] = sum(ways[max(0, i-3):i])\n\n    for i in range(5, 11): # Calculating the number of ways to reach the 10th step without stepping on the 5th step\n        ways[i] = sum(ways[max(0, i - 3):i - 1])  # skip the 5th step\n\n    return ways[10]\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    for small in range(54 // 5 + 1):\n        for medium in range(54 // 7 + 1):\n            for large in range(54 // 10 + 1):\n                if small * 5 + medium * 7 + large * 10 == 54:\n                    min_boxes = min(min_boxes, small + medium + large)\n    if min_boxes == float('inf'):\n        return 0  # Not possible to buy exactly 54 apples\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors_of_7007 = []\n    # Find factors of 7007 that are 2-digit multiples of 7\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            factors_of_7007.append(i)\n    # Assuming the product of two such numbers is 7007\n    # and there are exactly two such numbers, as 7007 is a product of two primes\n    return sum(factors_of_7007)\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = [i for i in range(1, 10) for _ in range(i)]\n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_in_9_days = (cans_in_6_days / 6) * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance_per_minute = 25\n\n    # Calculate the total number of visitors after 16 minutes with one entrance\n    total_visitors = visitors_per_minute * 16\n\n    # Two entrances double the check-in rate\n    check_in_rate_with_two_entrances = check_in_per_entrance_per_minute * 2\n\n    # Find the time it takes for all visitors to check in with two entrances\n    time_with_two_entrances = total_visitors / check_in_rate_with_two_entrances\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60.0\n    miles = miles_per_hour * hours\n    \n    # Conversion factor from miles to kilometers\n    km_per_mile = 1.60934\n    kilometers = miles * km_per_mile\n    \n    return kilometers\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of frogs and d be the number of dragonflies initially\n    f, d = symbols('f d')\n\n    # Equation representing the situation before the magic show\n    equation1 = Eq(f, d + 9)\n\n    # After the magic show, there are 11 frogs and 10 dragonflies\n    # Some of the initial frogs turned into dragonflies and vice versa\n    # The total number of animals (frogs + dragonflies) stays the same\n    # Hence, the initial number of frogs 'f' plus initial number of dragonflies 'd' \n    # is equal to the total number of frogs and dragonflies after the show (11 + 10)\n    equation2 = Eq(f + d, 11 + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, d))\n\n    return solutions[f]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    distance_climbed = 5\n    distance_slid = 3\n    net_distance = distance_climbed - distance_slid\n    burrow_depth = 16\n    day = 0\n    total_distance = 0\n\n    while total_distance < burrow_depth:\n        day += 1\n        total_distance += distance_climbed\n        if total_distance >= burrow_depth:\n            break\n        total_distance -= distance_slid\n        \n    return day\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    cookies_left = total_cookies - given_away\n    number_of_bottles = cookies_left / cookies_per_bottle\n\n    return int(number_of_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for cookies (c) and muffins (m)\n    c, m = symbols('c m')\n\n    # Set up the equations according to the problem statement\n    # Number of cookies is 24 more than the number of muffins\n    equation1 = Eq(c, m + 24)\n    # After selling 3/4 of her muffins and 5/8 of her cookies, she had 74 left in total\n    equation2 = Eq((m - 3/4 * m) + (c - 5/8 * c), 74)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, m))\n\n    # Since we are looking for the number of cookies originally baked, return the value of 'c'\n    return solutions[c]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    max_number = 999  # The largest number with 3 digits.\n    remainder = max_number % 25\n    greatest_multiple = max_number - remainder\n    return greatest_multiple\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Define the costs for each item.\n    metro_ticket_cost = 2.5  # dollars, both ways, assuming $2.5 for Richard and each friend\n    coffee_cost = 3           # dollars each\n    entry_fee = 15            # dollars each for the game, assuming same for Richard and friends\n    \n    # Calculate the total cost for Richard himself.\n    richard_cost = (metro_ticket_cost + coffee_cost + entry_fee)\n\n    # Remaining money after paying for Richard's expenses\n    remaining_money = 40 - richard_cost\n\n    # Total cost per friend\n    friend_cost = (metro_ticket_cost + coffee_cost + entry_fee)\n    \n    # Calculate the number of friends.\n    num_friends = remaining_money // friend_cost\n\n    return int(num_friends)\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must be divisible by 9.\n    # Since it is not divisible by 5, A cannot be 0 or 5.\n    # We calculate the sum of the known digits first.\n    sum_known_digits = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    # We check A from 1 to 9, to keep the number even we can only consider even A (1, 3, 7, and 9 are ruled out).\n    for A in [2, 4, 6, 8]:\n        if (sum_known_digits + 3 * A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    speed_ratio = 13 / 2\n    extra_time_cyclist_minutes = 143\n\n    # Let the time taken by driver be t hours\n    # Then the time taken by cyclist will be t + extra_time_cyclist_minutes/60 hours\n    # Speed = Distance / Time\n    # The distances are the same, so the ratio of their speeds should be inversely proportional to the ratio of their times\n    # Therefore, 13/2 = (t + extra_time_cyclist_minutes/60) / t\n    \n    # Solve for t\n    t = extra_time_cyclist_minutes / ((speed_ratio - 1) * 60)\n\n    return t\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    num_weeks = 30\n    total_carrots = carrots_per_week * num_weeks\n    return total_carrots\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum([i for i in range(1, n+1)]) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    cost_sausage_rolls = 4 * 24\n    cost_hotdogs = 5 * 81\n    cost_drinks = 7 * 20\n\n    total_cost = cost_sausage_rolls + cost_hotdogs + cost_drinks\n    \n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # If statement 1 were correct, then all others would be as well, which is a contradiction.\n    # If statement 2 were correct, it would contradict itself.\n    # If statement 3 were correct, then there would be two correct statements, which is false.\n    # If statement 4 were correct, then all others including statement 1 would be correct, which is a contradiction.\n    # If statement 5 is the only correct one, it would mean that all others are incorrect, which is consistent.\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    total_shows = 5 + 3\n    # Choose 5 positions out of the 8 for singing shows\n    ways_to_choose_singing = factorial(8) // (factorial(5) * factorial(3))\n\n    # There are 6 possible positions for comedy shows, since they cannot be consecutive\n    # C can be placed after any S or at the beginning\n    # We have 5 S's and hence 6 positions to place C's: i.e., _S_S_S_S_S_\n    # Since Comedy shows cannot be consecutive, we can choose 3 positions out of those 6 for comedy shows\n    ways_to_place_comedy = factorial(6) // (factorial(3) * factorial(6 - 3))\n\n    # The final answer is the product of the two possibilities\n    ans = ways_to_choose_singing * ways_to_place_comedy\n    return ans\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    ways = trains + cars + flights\n\n    return ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of coins on the table\n    x = symbols('x')\n    # One quarter of the coins are showing heads\n    heads_before = x / 4\n    # After turning over two more coins, one third of the coins show heads\n    heads_after = (heads_before + 2) / x\n    \n    # Equation to represent the situation after turning over two coins\n    equation = Eq(heads_after, 1/3)\n    \n    # Solve the equation for x\n    num_coins = solve(equation, x)\n    \n    # There should be only one positive real solution representing the number of coins\n    return int(num_coins[0])\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500  # meters\n    total_days = 5  # days\n\n    meters_per_day = total_road / total_days\n    return meters_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Calculate the sum of the first 2100 digits by considering the repeating patterns\n    # The sequence of digits after the decimal point that repeats is 23456789\n\n    # Find how many complete sets of the repeating pattern fit into 2100 digits\n    num_complete_sets = 2100 // 8  # 8 is the length of the sequence 23456789\n    remaining_digits = 2100 % 8\n\n    # Calculate the sum of the digits in the complete sets\n    sum_complete_sets = num_complete_sets * sum(range(2, 10))  # sum(23456789)\n\n    # Calculate the sum of remaining digits\n    sum_remaining_digits = sum(range(2, 2 + remaining_digits))\n\n    # Calculate the total sum\n    ans = sum_complete_sets + sum_remaining_digits\n\n    return ans\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    values.sort()\n    middle_index = len(values) // 2\n    return values[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Equation is (5x + 7) / 4 = 8\n    equation = Eq((5 * x + 7) / 4, 8)\n    # Solving for x\n    solved_x = solve(equation, x)\n\n    return solved_x[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x / 2) - 9, 12)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for i in range(41, 60):\n        if i % 4 == 2 and i % 6 == 2:\n            return i\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n    smallest_even_number = float('inf')\n\n    # Generate all permutations of the given digits\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits:  # Check if the last digit is even\n            number = int(''.join(map(str, perm)))\n            if number < smallest_even_number:\n                smallest_even_number = number\n\n    return smallest_even_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(55 - 6 * (7 - x), 37)\n\n    # Solve the equation\n    solved = solve(equation, x)\n\n    # Get the solution\n    return solved[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let s be the speed of the escalator and n be the total number of steps\n    # When Peter walks at 1 step/sec, he takes 10 seconds to reach the top\n    # When Peter walks at 2 steps/sec, he takes 16 / 2 = 8 seconds to reach the top\n    # In both cases, Peter and the escalator together cover the total number of steps of the escalator\n    # So, we have two equations:\n    # 10 + 10s = n  (1)\n    # 16 + 8s = n   (2)\n    # By equating both, we get:\n    # 10 + 10s = 16 + 8s\n    # Solving for s\n    s = (16 - 10) / (10 - 8)\n    # Now find n using equation (1)\n    n = 10 + 10 * s\n    return n\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    ans = total_dollars * quarters_in_one_dollar\n    return ans\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_length = 2000\n    ans = (percentage / 100) * total_length\n    return ans\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    # Cost of the chocolate bar in pence\n    chocolate_bar_cost = 72\n\n    # Cost of each balloon in pence\n    balloon_cost = 20\n\n    # Amount paid and change received in pence\n    amount_paid = 1000  # £10\n    change_received = 388  # £3.88\n\n    # Total cost of items bought in pence\n    total_cost = amount_paid - change_received\n\n    # Cost of all the balloons in pence\n    balloons_cost = total_cost - chocolate_bar_cost\n\n    # Number of balloons bought\n    num_balloons = balloons_cost // balloon_cost\n\n    return num_balloons\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    kayak_capacity = 4\n    kayaks_needed = -(-students // kayak_capacity)  # Use ceil division to get the minimum kayaks needed\n    return kayaks_needed\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    # Total money Mark had initially\n    total_money = 243\n    \n    # Money spent on 5 cupcakes and 6 slices of pizza\n    spent_money = (2 / 9) * total_money\n    \n    # Let the cost of one cupcake be x and one slice of pizza be y\n    # According to the problem, the cost for 3 slices of pizza equals the cost of 2 cupcakes:\n    # 3y = 2x => y = (2/3)x\n    \n    # Now calculate the money for 5 cupcakes and 6 slices of pizza (substituting y)\n    # 5x + 6(2x/3) = spent_money\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    eq = Eq(5 * x + 6 * (2*x/3), spent_money)\n    cost_per_cupcake = solve(eq, x)[0]\n\n    # Money left after spending\n    money_left = total_money - spent_money\n\n    # Calculate greatest number of cupcakes that he could buy\n    max_cupcakes = money_left // cost_per_cupcake\n\n    return int(max_cupcakes)\n\n# Assign the result to `ans` variable\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    a = 4 * sqrt(3)\n\n    equation = Eq(3 * a, sqrt(3 * x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = (4 + 2) * 13\n    part2 = 4 + (2 * 13)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n    # Since the table rotation results in the same order, we fix one person's seat\n    # and then arrange the remaining 5 people in the other seats.\n    fixed_seats = factorial(5)\n    # The number of ways 5 people can be seated in 5 seats is the number of\n    # permutations of these 5 people, which is 5!.\n\n    return fixed_seats\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Since the difference between each Dwarf's age is 1 year and the youngest three add up to 42,\n    # we can let the age of the youngest be x.\n    # Then the next two are x+1 and x+2. Their sum is 3x + 3 = 42.\n    # Solving for x gives us the age of the youngest Dwarf.\n    x = (42 - 3) // 3\n    \n    # Now we find the ages of the oldest three, which are x+4, x+5, and x+6 (three more than the original x+1, x+2, x+3).\n    # Their sum is 3x + 15.\n    sum_oldest_three = 3 * x + 15\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):\n        if len(set(str(i))) == len(str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15  # Common difference between each month\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    # We rearrange the formula to solve for n: n = (a_n - a_1) / d + 1\n    num_months = ((last_term - first_term) // difference) + 1\n    \n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 3, 5]\n    perm = permutations(digits, 3)\n    \n    return len(list(perm))\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    import math\n\n    count = 0\n    num = 2\n    while True:\n        str_num = '2' + '5' * count\n        int_num = int(str_num)\n        if int_num > 25555:\n            break\n        if math.isqrt(int_num) ** 2 == int_num:\n            count += 1\n        count += 1\n    \n    return count - 1\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    original_pieces = 10\n    total_pieces_now = 16\n    cut_into_three = 3\n    cut_pieces = total_pieces_now - original_pieces\n\n    # Each paper that is cut increases total pieces by 2, so we divide cut pieces by 2\n    pieces_cut_into_three = cut_pieces // (cut_into_three - 1)\n    \n    return pieces_cut_into_three\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # 6 workers produce 120 parts in 4 minutes\n    # So, each worker produces 120 parts in 4 * 6 minutes\n    time_for_one_worker = 4 * 6\n    \n    # 3 workers produce the parts in 10 minutes\n    # So, each worker takes 10 * 3 minutes to produce the same number of parts\n    time_for_three_workers = 10 * 3\n    \n    # The ratio of time taken by one worker to three workers should give us the number of parts produced\n    parts_in_machine = (time_for_one_worker / time_for_three_workers) * 120\n\n    return int(parts_in_machine)\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    initial_value = 98\n    final_value = 44.1\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n\n    n = 1\n    for d in divisors(2240):\n        if is_square(2240 // d):\n            n = max(n, d)\n    return n\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimmers = 0.70 * total_pupils\n    swimming_girls = 200\n\n    non_swimmer_boys_percent = 0.40\n    swimming_boys = total_pupils - swimmers\n\n    swimming_boys = swimming_boys / non_swimmer_boys_percent\n    girls = total_pupils - swimming_boys\n    return int(girls)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples * 1/4\n    non_rotten_apples = total_apples - rotten_apples\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_value = 160\n    new_value = 168\n    increase = new_value - original_value\n    percentage_increase = (increase / original_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice_sack, oatmeal_packet = symbols('rice_sack oatmeal_packet')\n\n    equation1 = Eq(3 * rice_sack + 3 * oatmeal_packet, 36)\n    equation2 = Eq(rice_sack, 2 * oatmeal_packet)\n\n    solutions = solve((equation1, equation2), (rice_sack, oatmeal_packet))\n\n    return solutions[rice_sack]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol x, which we want to solve for\n    x = symbols('x')\n\n    # Define the equation based on the given equation after simplifying\n    equation = Eq(5*(6*x + 1) - 2*x, 89)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    # Using the given formula to find the sum of cubes of the first n natural numbers:\n    # 1³ + 2³ + 3³ + ...... + n³ = (1 + 2 + 3 + ...... + n)²\n    n = 12\n    sum_of_numbers = n * (n + 1) // 2\n    ans = sum_of_numbers ** 2\n    return ans\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the unknown quantity of 10% sugar water\n    x = symbols('x')\n\n    # Equation representing the total amount of sugar from both types\n    sugar_eq = Eq(4 * 0.30 + x * 0.10, (4 + x) * 0.26)\n\n    # Solve the equation for x\n    amount_10_percent_sugar_water = solve(sugar_eq, x)\n\n    return amount_10_percent_sugar_water[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    discounted_price = 32 - 4\n    total_discount = original_price - discounted_price\n    total_discount_percentage = (total_discount / original_price) * 100\n\n    return total_discount_percentage\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    chocolates_5_mass = 185\n    chocolates_17_mass = 317\n\n    mass_difference = chocolates_17_mass - chocolates_5_mass\n    chocolates_difference = 17 - 5\n\n    mass_per_chocolate = mass_difference / chocolates_difference\n\n    chocolates_10_mass = mass_per_chocolate * (10 - 5) + chocolates_5_mass\n\n    return chocolates_10_mass\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    n = 200\n    ways = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            ways += 1\n    return ways - 1  # subtract 1 for the number itself which is not a sum of equal parts\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - a - b + 1\n        \n    first_op = custom_op(2, 3)\n    ans = custom_op(first_op, 4)\n    \n    return ans\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    perimeter = 2 * (144 + 204) - 4  # Subtracting 4 because the corners are counted twice\n    num_divisions = 116 - 4  # Subtracting 4 corner wheats\n    distance_between_wheat = perimeter / num_divisions\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    remaining_after_visiting_friend = 2 * 7  # 2 weeks in days\n    total_after_visiting_friend = remaining_after_visiting_friend + 4  # including 4 days at a friend's house\n    total_holiday = 2 * total_after_visiting_friend  # since he spent half the holiday reading and relaxing\n    return total_holiday\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # If one cat catches one fish in 10 minutes,\n    # five cats would also catch five fish in 10 minutes\n    # because each cat catches its own fish independently of the others.\n    ans = 10\n    return ans\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l represent the initial amount of sweets Lana had,\n    # and m represent the initial amount of sweets Mark had.\n    l, m = symbols('l m')\n\n    # Set up the equation based on the given information\n    equation1 = Eq(l - l/3, m - 34)   # After Lana gave 1/3 away and Mark ate 34, they had the same amount\n    equation2 = Eq(l + m, 674)        # The sum of their sweets is 674\n\n    # Use the sympy solve function to solve the equations\n    solutions = solve((equation1, equation2), (l, m))\n\n    # Calculate how many more sweets Lana had than Mark at first\n    difference = solutions[l] - solutions[m]\n\n    return difference\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    pineapple, watermelon = symbols('pineapple watermelon')\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n    solutions = solve((equation1, equation2), (pineapple, watermelon))\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    perimeter = 2 * (144 + 204)\n    spaces = 116 - 4  # Subtracting the wheat on the corners\n    distance = perimeter / spaces\n    return distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    reverse_multiply = result / 9\n    reverse_divide = reverse_multiply * 4\n    original_number = reverse_divide - 3\n\n    return original_number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remaining_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remaining_bracelets\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    bracelets_needed = total_bracelets - bracelets_made\n\n    return int(bracelets_needed)\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_time = 4\n\n    # Work done by Ellie in 4 weeks.\n    ellie_work = ellie_rate * combined_time\n    # Work done by Gloria and Ellie together in 4 weeks.\n    total_work = total_people\n    # Work that can be attributed to Gloria in 4 weeks.\n    gloria_work = total_work - ellie_work\n    # Gloria's weekly rate.\n    gloria_rate = gloria_work / combined_time\n    # Time taken by Gloria alone to finish all the interviews.\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations('013456789', 4):\n        A, C, E, F = perm\n        num1 = int(f'5{2}0{C}{E}{F}')\n        num2 = int(f'6{E}{F}{2}0{A}')\n        \n        if 5 * num1 == 6 * num2:\n            return int(f'{F}{A}{C}{E}')\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    result = (3 / 8) * 48\n    return result\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    # Equation based on the amount of rice in each mixture: \n    # (0.4 * 15) + (x * 60) = (0.28 * (15 + 60))\n    # Solve for x (percent of rice in dogfood B)\n    x = (0.28 * (15 + 60) - 0.4 * 15) / 60\n    \n    # Convert the fraction to a percentage\n    percent_rice_B = x * 100\n\n    return percent_rice_B\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use algebra to solve this problem.\n    # Define symbols for the four distinct positive whole numbers\n    a, b, c, d = symbols('a b c d', integer=True, positive=True)\n\n    # Given that the sum of the smallest number (d) and the average of the other\n    # three numbers is 39, we can write the following equation:\n    equation1 = Eq(d + (a + b + c)/3, 39)\n\n    # Similarly, given that the sum of the largest number (a) and the average of\n    # the other three numbers is 51, we can write the following equation:\n    equation2 = Eq(a + (b + c + d)/3, 51)\n\n    # Now we solve the system of equations\n    # We'll also include the fact that a > b > c > d to satisfy the distinct and descending condition\n    solutions = solve((equation1, equation2, a - b, b - c, c - d), (a, b, c, d))\n\n    # We're looking for the largest possible value of the largest number a, considering\n    # integer solutions and the positivity constraint\n    max_a = max(solution[a] for solution in solutions if all(val.is_real for val in solution.values()))\n\n    return max_a\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    ml_per_minute = 15\n    minutes_per_hour = 60\n    hours = 2\n    ml_to_litres = 1 / 1000\n\n    total_ml = ml_per_minute * minutes_per_hour * hours\n    total_litres = total_ml * ml_to_litres\n\n    return total_litres\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # Since there are trees planted at both ends of the road, we can just divide the road length by the spacing to find the number of spaces between trees, and add 1 for the tree at the start\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Barbara's speed is 60 m/min, Catherine's is 45 m/min\n    # Let the distance to the mall be 'd' metres.\n    # By the time Barbara reaches the mall, Catherine still has 60 metres to go\n\n    # Barbara's travel time (in minutes) = d / 60\n    # Catherine's travel time (in minutes) = (d - 60) / 45\n\n    # Since they start at the same time, their travel times are the same\n    # Thus, d / 60 = (d - 60) / 45\n    # Cross multiply to solve for 'd':\n    # 45d = 60 * (d - 60)\n    \n    # Solve for d\n    d = (60 * 60) / (60 - 45)\n    \n    return d\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, pen = symbols('book pen')  # Define symbols for the book and pen\n\n    # System of equations based on the problem\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_received = 2 * 10 + 5 * 5 + 4 * 0.20\n    total_spent = 100 - total_received\n    return total_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts for A, B, and C.\n    A, B, C = symbols('A B C')\n\n    # Given the ratio A to B is 4:3\n    equation1 = Eq(A / B, 4/3)\n    \n    # Given A has £20 more than C\n    equation2 = Eq(A, C + 20)\n\n    # They have a total of £200\n    equation3 = Eq(A + B + C, 200)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the amount C has\n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    \n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_for_one_plate = 3  # minutes\n    total_time = 18  # minutes\n\n    num_plates = total_time / time_for_one_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    nini, dad = symbols('nini dad')\n\n    # Equation 1: Dad's age is 25 years older than Nini's age\n    eq1 = Eq(dad, nini + 25)\n\n    # Equation 2: After 5 years, Dad's age is 8 less than two times Nini's age\n    eq2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (nini, dad))\n\n    # Nini's age this year\n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    turned_students = set()\n    \n    # Students who report multiples of 4\n    for i in range(1, 51):\n        if i % 4 == 0:\n            turned_students.add(i)\n    \n    # Students who report multiples of 6\n    for i in range(1, 51):\n        if i % 6 == 0:\n            if i in turned_students:\n                turned_students.remove(i)\n            else:\n                turned_students.add(i)\n    \n    return 50 - len(turned_students)\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    sold_first_day = total_pears * 2 / 5\n    remaining_after_first_day = total_pears - sold_first_day\n    sold_second_day = remaining_after_first_day * 7 / 9\n\n    return int(sold_second_day)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # Since at least one student gets at least 3 apples, we can first give 3 apples to one student.\n    remaining_apples = 29 - 3\n    \n    # Now, every student must get at least 1 apple, this is a use of the Pigeonhole Principle.\n    # Subtracting 1 from the remaining apples for each student, the class size will be the maximum number\n    # of students such that each can get at least one apple.\n    class_size = 1  # We already have 1 student who got 3 apples\n    while remaining_apples > 0:\n        remaining_apples -= 1\n        class_size += 1\n    \n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    pick_boy = boys\n    pick_girl = girls\n    ans = pick_boy * pick_girl\n    return ans\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n    \n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reversed_num = int(str(num)[::-1])\n            if num != reversed_num and isprime(reversed_num):\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original = 140\n    new = 87.5\n    change = new - original\n    percent_change = (change / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g represent the initial number of green balls, and b represent the initial number of blue balls\n    g, b = symbols('g b')\n    \n    # Equation 1: Total initial number of balls\n    equation1 = Eq(g + b, 140)\n    \n    # Equation 2: The condition after removing balls\n    equation2 = Eq(g - 28, b - (2/5) * b)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n    \n    # The number of blue balls initially\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since the alcoholic visits three bars at random, the probability of the\n    # alcoholic being at any given bar is 1/3.\n    # When the alcoholic is not at two of the bars, the probability of being \n    # at the third bar is therefore 1 (certainty), because the alcoholic\n    # has to be at one of the three bars.\n    probability = 1\n    return probability\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n    \n    equation1 = Eq(eliot, 2 * cousin)\n    equation2 = Eq(eliot + 4, 16)\n    \n    solutions = solve((equation1, equation2), (eliot, cousin))\n    \n    return solutions[cousin] + 4\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) // 2\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    # The number of caught and marked fish is 100.\n    # The number of caught fish in the second catch is also 100.\n    # Among the second catch, 16 fish are found to be marked.\n    \n    # The proportion of marked fish caught the second time should be roughly equal \n    # to the proportion of marked fish in the entire pond.\n    # Let's denote the total number of fish in the pond as F.\n    # So the proportion of marked to unmarked in the total population is 100/F.\n    \n    # This proportion should be approximately equal to the ratio observed in the second sample,\n    # which is, 16 marked out of 100 caught the second time: 16/100.\n    \n    # Therefore, we have the equation 100/F = 16/100.\n    # Solving for F gives us the estimated number of fish in the pond.\n    # F = 100 * (100/16)\n    F = 100 * (100/16)\n    return int(F)\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let x be the distance Nancy walked when they meet.\n    # Randy then walks x + 10 meters when they meet.\n    # Nancy's walking distance is 2/3 of Randy's. So we have:\n    # Nancy's distance: x\n    # Randy's distance: x + 10\n    # x = 2/3 * (x + 10)\n    # To solve for x, we will calculate it directly\n    \n    x = (2 / 3) * (x + 10)\n    # Solve for x\n    x = 20  # from the equation x = (2/3) * (x + 10) => 3x = 2x + 20, it simplifies to x = 20.\n    \n    # Now we find out the total distance they walked together:\n    total_distance_walked = x + (x + 10)  # Nancy's distance + Randy's distance\n    \n    return total_distance_walked\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    x = 2014\n    n = 100  # the repeating cycle is two digits long (14)\n    repeated_decimal = x / (n - 1)\n    \n    # Multiply by 9900 to find x\n    ans = repeated_decimal * 9900\n    \n    return int(ans)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    equation1 = Eq(ali, (bronson + charlie)/2 - 5)\n    equation2 = Eq(bronson, 2 * ali)\n\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2)) # sum of 20, 18, 16, 14, 12, 10\n    sum2 = sum(range(9, 20, 2))  # sum of 19, 17, 15, 13, 11, 9\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    \n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    \n    # In 10 years, their total age is 53 years old\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n    \n    # Solve for Alice's age\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    # Alice's age now\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(0, 10):\n            for one in range(0, 10, 2):\n                if hundred + ten + one == 8 and len({hundred, ten, one}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(10000, 100000):  # We are looking for a five-digit number\n        original_number = i * 10 + 2  # create the six-digit number with 2 at units place\n        new_number = int('2' + str(i))  # Shift the 2 to the beginning\n        if new_number == original_number / 3:  # If new_number is one-third of original_number\n            return original_number\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    passed_second_failed_first = 3\n\n    passed_only_first = passed_first - (total_students - failed_second - passed_second_failed_first)\n\n    return passed_only_first\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are:\n    # x ≡ 3 (mod 5)\n    # x ≡ 6 (mod 8)\n    # x ≡ 7 (mod 9)\n    congruences = [(3, 5), (6, 8), (7, 9)]\n\n    # Solve the congruences using the Chinese Remainder Theorem\n    x, _ = solve_congruence(*congruences)\n\n    # Now find the smallest x that is between 500 and 1000.\n    while x < 500:\n        x += 5 * 8 * 9  # LCM of moduli\n\n    return x if x < 1000 else None\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n    bars_left = total_bars % people\n    return bars_left\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    sum_of_numbers = (100 + 10 + 1) * (a + b + c)\n    return sum_of_numbers\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            product = ab * ba\n            if product % 100 == 0 and product // 100 % 10 == 0:\n                return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of potatoes in a small sack\n    x = symbols('x')\n\n    # Large sack holds 20% more potatoes than the small one, so it holds x + 0.2x\n    # The sum of potatoes in one large sack and one small sack is 77\n    equation = Eq(x + x * 1.2, 77)\n    \n    # Solve for x\n    number_of_potatoes_small_sack = solve(equation, x)[0]\n    \n    # Calculate the number of potatoes in the large sack\n    number_of_potatoes_large_sack = number_of_potatoes_small_sack * 1.2\n    \n    return number_of_potatoes_large_sack\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # She sold half of the apples and 35 oranges, leaving an equal number of oranges and apples\n    equation = Eq(oranges - 35, apples / 2)\n\n    # The total number of oranges and apples is 125\n    total_equation = Eq(oranges + apples, 125)\n\n    # Solve the system of equations\n    solutions = solve((equation, total_equation), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    decimal_value = 5 / 9\n    ans = round(decimal_value, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome is 10001\n    least_5_digit_palindrome = 10001\n    # The greatest 6-digit palindrome is 999999\n    greatest_6_digit_palindrome = 999999\n\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity = 6\n    min_cabins = (students + capacity - 1) // capacity\n    return min_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    total_digits = 0\n\n    for i in range(1, 59):\n        total_digits += len(str(i))\n\n    return total_digits\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    digit_count = 0\n    num = 1200\n    \n    while digit_count < 2011:\n        digit_count += len(str(num))\n        if digit_count < 2011:\n            num -= 1\n    \n    # Subtract extra count\n    extra_digits = digit_count - 2011\n    num_str = str(num)\n    \n    return int(num_str[-(extra_digits + 1)])\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins = symbols('coins', integer=True)\n    heads_before_flip = coins / 4\n    heads_after_flip = heads_before_flip + 2\n    equation = Eq(heads_after_flip, coins / 3)\n    \n    total_coins = solve(equation, coins)\n\n    return total_coins[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    books_right_of_picture_book = 6\n    position_from_left = 14\n\n    total_books = position_from_left + books_right_of_picture_book\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    last_multiple = 50 // 5 * 5\n    num_multiples = last_multiple // 5\n    sum_multiples = (num_multiples * (5 + last_multiple)) // 2\n    return sum_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    # Speed of the first planet\n    speed_first_planet = 30 # km/min\n    \n    # Speed of the second planet\n    speed_second_planet = 40 # km/min\n\n    # Total time before the collision\n    time_before_collision = 5 # minutes\n\n    # Distance travelled by the first planet\n    distance_first_planet = speed_first_planet * time_before_collision\n    \n    # Distance travelled by the second planet\n    distance_second_planet = speed_second_planet * time_before_collision\n\n    # Total distance apart 5 minutes ago\n    total_distance = distance_first_planet + distance_second_planet\n\n    return total_distance\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, motorbikes = symbols('cars motorbikes')\n\n    # A car has 4 tyres and a motorbike has 2 tyres.\n    # Total number of tyres is 490.\n    equation1 = Eq(4*cars + 2*motorbikes, 490)\n\n    # There are in total 140 cars and motorbikes.\n    equation2 = Eq(cars + motorbikes, 140)\n\n    solutions = solve((equation1, equation2), (cars, motorbikes))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    first_digit_options = 5  # 1-5 (excluding 0)\n    second_digit_options = 6  # 0-5 (including 0)\n    total_numbers = first_digit_options * second_digit_options\n    return total_numbers\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 8\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_amount = 64\n    discount_percentage = 20 / 100\n\n    original_price = paid_amount / (1 - discount_percentage)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5\n    total_volume = 36\n    apple_juice_ratio = 4\n\n    apple_juice_volume = (apple_juice_ratio / total_ratio) * total_volume\n    return apple_juice_volume\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n\n    # Setting up the equations according to the conditions given:\n    equation1 = Eq(190 % n, a)\n    equation2 = Eq(137 % n, a + 4)\n    equation3 = Eq(101 % n, a + 6)\n\n    # Solve the equations to find the common divisor n and the remainder a\n    sol = solve((equation1, equation2, equation3), (a, n))\n\n    # Find the valid solution which is a positive divisor n\n    for s in sol:\n        if s[1] > 0:\n            valid_solution = s\n            break\n\n    # Find the remainder when 299 is divided by this number n\n    remainder = 299 % valid_solution[1]\n    \n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    effective_distance_per_day = distance_per_day - slide_per_night\n\n    days = (total_distance - distance_per_day) // effective_distance_per_day + 1\n    \n    if (total_distance - distance_per_day) % effective_distance_per_day != 0:\n        days += 1\n    \n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number_to_round = 8.765\n    rounded_number = round(number_to_round, 1)\n    return rounded_number\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_kg = 960\n    per_box_kg = 8\n    total_boxes = total_kg // per_box_kg\n    return total_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    added_number = 12\n\n    original_number = (result - added_number) / 2\n\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 13 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25/100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = classes * students_per_class * donation_per_student\n    \n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, \n              67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, \n              137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n\n    max_sum = 0\n    for x in primes:\n        y = (200 - x) / (x + 2 - 1)\n        if y.is_integer() and y in primes and y != x and y > 0:\n            if x + y > max_sum:\n                max_sum = x + y\n    \n    return int(max_sum)\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    count_2 = 2\n    count_3 = 2\n    count_4 = 1\n    count_5 = 1\n\n    ans = factorial(total_digits) // (factorial(count_2) * factorial(count_3) * factorial(count_4) * factorial(count_5))\n\n    return ans\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    amount_spent = 2\n    fraction_of_total = 1 / 4\n    total_money = amount_spent / fraction_of_total\n    return total_money\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    \n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezy, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(sleepy, 80)\n    equation7 = Eq(doc + sleepy, dopey + sneezy)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    total_height = sum(solutions.values())\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    num_teams = 8\n    rounds_played = (num_teams * (num_teams - 1)) // 2\n    return rounds_played\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = Fraction(31, 6) + Fraction(31, 5)\n    denominator = Fraction(1, 6) + Fraction(1, 5)\n    result = numerator / denominator\n    return result\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    perm = permutations(digits)  # generate all permutations of the digits\n    numbers = sorted(int(''.join(p)) for p in perm)  # sort the permuted numbers\n    return numbers[4]  # return the fifth number\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    rate_per_day = 1000 / 5\n    days = 2600 / rate_per_day\n    return days\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    miles_per_hour = 250 / 5\n    distance_in_3_hours = miles_per_hour * 3\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    \n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60):\n        if (num % 8 == 3) and (num % 7 == 6):\n            return num\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # Number of terms in the sequence\n    num_terms = 90 - 12 + 1  # inclusive of both 12 and 90\n\n    # If the number of terms is even, then there will be an equal number of odd and even numbers\n    # Hence their sum will be even.\n    # If the number of terms is odd, then there will be one more odd number than even numbers.\n    # This implies that the sum will be odd since the sum of even number of odds is even, and adding one more odd to an even sum will make it odd.\n    is_even = (num_terms % 2 == 0)\n\n    # Return 'Even' or 'Odd' based on the condition\n    ans = 'Even' if is_even else 'Odd'\n    return ans\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let's denote the numbers on the hats of Qiang, Rory, and Sophia as q, r, and s respectively.\n    # We can represent the sums they see as follows:\n    # Qiang sees r + s = 11\n    # Rory sees q + s = 17\n    # Sophia sees q + r = 22\n\n    # Since each person adds the numbers they see on the other two hats, \n    # if we sum all of the visible sums and divide by 2, we should get the sum of the numbers on all three hats.\n    total_sum = (11 + 17 + 22) // 2\n    \n    # Once we have the sum of the numbers on all three hats, we can find each individual number:\n    q = total_sum - 11  # Number on Qiang's hat\n    r = total_sum - 17  # Number on Rory's hat\n    s = total_sum - 22  # Number on Sophia's hat\n    \n    # The largest number will be the max of q, r, s\n    largest_number = max(q, r, s)\n\n    return largest_number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    number_of_trees = 30\n    distance_between_trees = 5\n\n    length_of_road = (number_of_trees - 1) * distance_between_trees\n\n    return length_of_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    result = 1\n    for i in range(2, 10):\n        result *= (1 + 1/i)\n    return result\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n    \n    count = 0\n    for prime in range(2, 21):\n        if isprime(prime):\n            if isprime(prime + 6) or isprime(prime - 6):\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol x\n    x = symbols('x')\n\n    # Total distance is the sum of distances covered in each interval\n    # Distance = Speed * Time, here time is in hours, so we divide minutes by 60.\n    equation = Eq((x * 0.5) + ((x - 20) * 0.5) + ((x + 10) * 0.5), 70)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Since we're looking for a real-world value, we choose the positive solution\n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    digits = 0\n    for page in range(1, 346):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_capacity = 25\n    buses_needed = -(-total_people // max_capacity)  # Ceiling division\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let total_prize be the total prize money\n    total_prize = symbols('total_prize')\n    \n    # Denise got 1/5 of the total prize for singles competition and 1/15 for doubles competition.\n    # So, (1/5 + 1/15) of the total prize money equals £360.\n    equation = Eq((1/5 + 1/15) * total_prize, 360)\n\n    # Solving the equation to find the total prize money\n    total_prize_value = solve(equation, total_prize)[0]\n    \n    return total_prize_value\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # There is only one way for the coach to be in the middle.\n    coach_ways = 1\n    \n    # There are 2 ways for the captain to stand next to the coach (either on the left or the right)\n    captain_ways = 2\n    \n    # There are 5 players left to arrange, and they can stand in any order.\n    # So, we calculate the permutations of these 5 players.\n    players_ways = factorial(5)\n    \n    # Use the principle of multiplication to find the total arrangements.\n    total_ways = coach_ways * captain_ways * players_ways\n    \n    return total_ways\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    total_students = 0\n    layer = 0  # Starting from the outermost layer\n\n    # Increment layers until the difference between boys and girls is 20\n    while True:\n        boys = (layer * 4 + 1)**2 - (layer * 4 - 1)**2 if layer > 0 else 1\n        girls = (layer * 4 + 1)**2 - boys - 4 * layer\n        if boys - girls == 20:\n            total_students = (layer * 4 + 1)**2\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the number of penguins\n    p = symbols('p')\n\n    # If the staff gives 3 fish to each penguin, there will be 25 fish left.\n    # Total fish = 3*p + 25\n    fish_when_3_per_penguin = 3*p + 25\n\n    # If the staff gives 6 fish to each penguin, one penguin gets only 1 fish.\n    # (p - 1) penguins get 6 fish each, and 1 penguin gets 1 fish.\n    # Total fish = 6*(p-1) + 1\n    fish_when_6_per_penguin = 6*(p-1) + 1\n\n    # Equate both expressions to find the total number of fish\n    equation = Eq(fish_when_3_per_penguin, fish_when_6_per_penguin)\n\n    # Solve for the number of penguins\n    solution_ = solve(equation, p)\n\n    # Extract the only solution which is the number of penguins (if it's a positive integer)\n    num_penguins = next(iter(filter(lambda x: x.is_integer and x > 0, solution_)), None)\n\n    return num_penguins\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    return cube_root + square\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_ = 0\n    for i in range(1, 31):\n        n = int((0.5 + (0.25 + 2 * i)**0.5))\n        sum_ += n\n    return sum_\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    sum_value = 0.25 * 20 + 1/5 * 30 + 2/3 * 18\n    return sum_value\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n    remaining_votes = total_votes - (alice_votes + betty_votes + cindy_votes)\n\n    # Cindy must have 1 more vote than the sum of votes of the others to ensure her win\n    required_votes = (alice_votes + betty_votes - cindy_votes + 1)\n\n    # If there aren't enough remaining votes, Cindy can't ensure a win\n    if required_votes > remaining_votes:\n        return None\n    \n    return required_votes\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    from fractions import Fraction\n    from math import pow\n    \n    # Calculate the first part of the expression\n    first_numerator = 7 / Fraction(-10, 3)  # Division by -3.33... (repeating 3)\n    first_denominator = (-0.027)**(1/3)    # Cube root of -0.027\n    first_part = first_numerator / first_denominator\n    \n    # Calculate the second part of the expression\n    second_numerator = 2**3 / 4**2         # 2 cubed divided by 4 squared\n    second_denominator = 0.125 * (1.8 - (0.2 * 7))  # 0.125 times [1.8 - (0.2 times 7)]\n    second_part = second_numerator / second_denominator\n    \n    # Calculate the third part of the expression\n    third_numerator = Fraction(0.1)                 # 0.1 as a fraction\n    # Convert repeating decimal to fraction\n    # 0.142857 represents the repeating part, which is equal to 1/7\n    third_denominator = Fraction(1, 7)\n    third_part = third_numerator / third_denominator + (2 * 0.3)\n    \n    # Calculating the entire expression\n    ans = first_part + second_part - third_part\n    \n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    # The mistake in the workings is in assuming that Chelsia's and Brian's total money can be calculated as 24 * 24.\n    # Instead, we should find the value of 'u' first and then calculate their total money.\n    from sympy import symbols, Eq, solve\n    \n    # Let 'u' be the common unit for both Chelsia's and Brian's money\n    u = symbols('u')\n    \n    # The equations based on the problem statement\n    # 3/4 * Chelsia's money (3/4 * c) is equal to 5/6 of Brian's money (5/6 * b)\n    # Chelsia has $24 more than Brian (c = b + 24)\n    equation1 = Eq(3/4 * (u + 24), 5/6 * u)\n    \n    # Solve for 'u' which represents Brian's money\n    solved_u = solve(equation1, u)[0]\n    \n    # Calculate Chelsia's money\n    chelsia_money = solved_u + 24\n    \n    # Calculate the total money Chelsia and Brian have together\n    total_money = solved_u + chelsia_money\n    \n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina's age on 10th May 2005\n    gina_age_2005 = 50\n    \n    # James' age on 10th May 1997\n    james_age_1997 = 20\n    \n    # Year difference between 2005 and 1997\n    year_diff = 2005 - 1997\n    \n    # James' year of birth\n    james_birth_year = 1997 - james_age_1997\n    \n    # Gina's age when James was born\n    gina_age_when_james_born = gina_age_2005 - (year_diff + james_age_1997)\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for actual sales\n    sales = symbols('sales', real=True, positive=True)\n\n    # Commission for the first 25000 dollars\n    commission1 = 0.02 * 25000\n\n    # Commission for the amount over 25000 dollars\n    commission2 = 0.05 * (sales - 25000)\n\n    # Condition for sales being not more than 25000\n    commission_expr1 = commission1 if sales <= 25000 else commission1 + commission2\n\n    # Total salary is base salary plus commission\n    salary = Eq(2500 + commission_expr1, 3300)\n\n    # Solve for the actual sales\n    sales_value = solve(salary, sales)[0]\n\n    return sales_value\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # Original ratio\n    equation1 = Eq(ryan / audrey, 2 / 7)\n    \n    # New ratio after transactions\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n   \n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    # average height of the team\n    average_team_height = 150\n    \n    # average height of the four players\n    average_four_players = average_team_height - 2\n    \n    # total height of the four players\n    total_height_four_players = 4 * average_four_players\n    \n    # total height of the six players\n    total_height_six_players = 6 * average_team_height\n    \n    # total height of the other two players\n    total_height_other_two = total_height_six_players - total_height_four_players\n    \n    # average height of the other two players\n    average_other_two = total_height_other_two / 2\n    \n    return average_other_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    prob_first_attempt = 0.4\n    # Probability of failing the first attempt but passing on the second\n    prob_second_attempt = (1 - prob_first_attempt) * 0.5\n    # Probability of failing the first two attempts but passing on the third\n    prob_third_attempt = (1 - prob_first_attempt) * (1 - 0.5) * 0.3\n\n    # Add all probabilities to get the probability of passing before the fourth attempt\n    prob_passing_before_fourth = prob_first_attempt + prob_second_attempt + prob_third_attempt\n\n    return prob_passing_before_fourth\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    page = 0\n    digits_used = 0\n\n    while True:\n        page += 1\n        digits_in_page = len(str(page))\n        digits_used += digits_in_page\n        if digits_used >= total_digits:\n            break\n\n    return page\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n    ans = num_fruits * num_vegetables\n    return ans\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    n = 30\n    first_term = 50\n    difference = -1\n    last_term = first_term + (n - 1) * difference\n\n    sum_n_terms = n * (first_term + last_term) // 2\n    return sum_n_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    rate_per_hour = 50\n    time_needed = total_pieces / rate_per_hour\n    return time_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial = 1\n    for i in range(1, 16):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        count += 1\n        factorial //= 10\n\n    return count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define a symbol for grandpa's age\n    grandpas_age = symbols('grandpas_age')\n\n    # Let's translate Grandpa's statement into an equation\n    equation = Eq((grandpas_age / 4) + 32, grandpas_age - 22)\n\n    # Solve the equation to find grandpa's age\n    solution = solve(equation, grandpas_age)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    num_students = 0\n    diff_boys_girls = 44\n    side_length = 1\n\n    while True:\n        if side_length % 2 == 0:\n            girls = side_length ** 2\n            boys = girls + diff_boys_girls\n        else:\n            boys = side_length ** 2\n            girls = boys - diff_boys_girls\n\n        if girls % (side_length - 1) == 0 and boys % side_length == 0 and (side_length - 1) ** 2 == girls:\n            num_students = boys + girls\n            break\n\n        side_length += 1\n\n    return num_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    # The snail climbs a reduced amount only on the 6th day.\n    days_to_reduce = 6\n    # Calculate the total distance climbed until the day before the reduction.\n    total_distance_before_reduction = (days_to_reduce - 1) * 7\n    \n    # If the total distance climbed was at least 18 meters, the snail would not slide down anymore.\n    # Hence, the reduction happens the day it reaches or exceeds the burrow height.\n    if total_distance_before_reduction >= 18:\n        slide_down = 0\n    else:\n        # Calculate the distance climbed on the reduction day.\n        total_distance_reduction_day = total_distance_before_reduction + 3\n        \n        # Since the snail gets out on the 6th day, it should reach exactly 18 meters.\n        # The slide down distance is the difference between the height after climbing on the 6th day\n        # and the height reached by the end of the 5th day.\n        slide_down = total_distance_reduction_day - total_distance_before_reduction\n\n    return slide_down\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_for_second = 0\n    total_apples = 48\n    \n    # X + Y + Z + W = total_apples, and X, Y, Z, W are different positive integers.\n    # Let Y be the apples that the second student received\n    # Y should be as large as possible, so we try to assign the smallest values for X, Z, and W.\n    # We start with Y, then X (smallest value > 0), then Z (smallest value > X), then W (smallest value > Z)\n    # Note: W is the count for the last student, and will be the remaining apples \n    for Y in range(total_apples, 0, -1):\n        for X in range(1, Y):\n            for Z in range(X + 1, Y):\n                W = total_apples - (X + Y + Z)\n                if W > Z:\n                    max_apples_for_second = Y\n                    return max_apples_for_second\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Function to calculate the time taken for two people to cross together\n    def two_crossing_time(person1, person2):\n        return max(person1, person2)\n\n    # Mechanics of Crossing\n    eddie, jack, rose, mary = 1, 2, 5, 10\n    total_time = 0\n\n    # Step 1: Eddie and Jack cross, Eddie comes back\n    total_time += two_crossing_time(eddie, jack) + eddie\n\n    # Step 2: Rose and Mary cross, Jack comes back\n    total_time += two_crossing_time(rose, mary) + jack\n\n    # Step 3: Eddie and Jack cross again\n    total_time += two_crossing_time(eddie, jack)\n\n    return total_time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original length be x, width be y\n    x, y = symbols('x y')\n    \n    # The equation for the perimeter after increasing the length\n    equation1 = Eq(2 * (x + 12) + 2 * y, 38)\n    \n    # The equation for the perimeter of the original rectangle\n    original_perimeter = Eq(2 * x + 2 * y)\n    \n    # Solving the equations\n    solutions = solve(equation1, (x, y))\n\n    # Calculating the original perimeter\n    original_perimeter_value = 2 * solutions[x] + 2 * solutions[y]\n\n    return original_perimeter_value\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = 0\n    for i in range(1, 90, 2):\n        ans += i**2 - (i + 1)**2\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    number_of_students = 4\n    ans = factorial(number_of_students)\n    return ans\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Possible choices for Jenny on each day\n    choices = ['chocolate', 'peaches', 'strawberries']\n    \n    # First day she eats chocolate, so we only need to calculate for the next 2 days\n    # Counter for the number of ways to eat over the three days\n    count = 0\n\n    # Loop through the choices for the second day, cannot be chocolate\n    for second_day in choices[1:]:\n        # Loop through the choices for the third day, cannot be the same as the second day\n        for third_day in choices:\n            if third_day != second_day:  # Make sure not to eat the same as the previous day\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # We want to find the combinations of two positive integers that sum up to 8.\n    # Since order doesn't matter (1+7 is the same as 7+1), we are essentially looking\n    # for partitions of 8 into 2 parts. Each number has to be at least 1,\n    # and the maximum number for each part would be 7 (as 1 + 7 = 8).\n    \n    total_ways = 0\n    # We can just loop from 1 to half of 8 (because the rest would be mirrored combinations)\n    for i in range(1, 8//2 + 1):\n        total_ways += 1\n    \n    return total_ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from fractions import Fraction\n    remaining_after_tv = 1 - Fraction(5, 9)\n    remaining_after_table = remaining_after_tv * (1 - Fraction(3, 4))\n    total_salary = 160 / remaining_after_table\n    cost_of_tv = total_salary * Fraction(5, 9)\n    return cost_of_tv\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # Since the table is circular, we fix one person and arrange the others around them\n    num_people = 7\n    ans = factorial(num_people - 1) \n    \n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    result = 50 / (5/3)\n    return result\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for John's and Emma's current ages\n    john, emma = symbols('john emma')\n\n    # We are told that in 3 years' time, the sum of their ages will be 27\n    future_sum = Eq(john + emma + 3 + 3, 27)\n\n    # We also know that Emma's age is the difference between her own and John's ages\n    age_difference = Eq(emma, john - emma)\n\n    # Now we solve the system of equations\n    solutions = solve((future_sum, age_difference), (john, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_earnings_per_day = 70\n    number_of_working_days = 6\n    total_weekly_earnings = average_earnings_per_day * number_of_working_days\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "def solution():\n    from math import comb\n    ans = comb(15, 3)\n    return ans\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed (km/h)\n    tom_speed = 48\n    # Jack's speed (km/h)\n    jack_speed = 50\n    \n    # Tom's lead time (hours)\n    lead_time = 3\n    # Additional time they have been traveling towards each other (hours)\n    additional_time = 5\n    \n    # Tom traveled for lead_time + additional_time\n    tom_distance = tom_speed * (lead_time + additional_time)\n    # Jack traveled for additional_time\n    jack_distance = jack_speed * additional_time\n    \n    # Total distance they are apart after 5 hours of traveling towards each other\n    remaining_distance = 15\n    \n    # The total distance between A and B is the sum of the distances each has traveled plus remaining distance\n    total_distance = tom_distance + jack_distance + remaining_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Since \"Water\" section has 36 degrees in the pie chart,\n    # it represents 36 / 360 = 0.1 (or 10%) of the total.\n    water_percentage = 36 / 360\n    \n    # We are given that 30% chose cola, and 25% (one quarter) chose tea.\n    # Since 7 people chose coffee, we can represent the coffee as following:\n    coffee_people = 7\n    \n    # If we combine cola, tea, coffee (people), and water percentages,\n    # we get the total percentage of people who chose a drink.\n    cola_percentage = 0.30 # Cola is 30%\n    tea_percentage = 0.25 # Tea is a quarter\n    \n    # Now, let's represent coffee percentage, which we don't know,\n    # but we have the number of people who chose coffee.\n    # Let total_people be the total number of people who took the survey.\n    # coffee_percentage = coffee_people / total_people\n    \n    # Sum of percentages of all drinks should be equal to 100% (or 1)\n    # tea_percentage + coffee_percentage + cola_percentage + water_percentage = 1\n    # 0.25 + (coffee_people / total_people) + 0.30 + 0.10 = 1\n    # coffee_people / total_people = 0.35 (since 0.25 + 0.30 + 0.10 = 0.65 and 1 - 0.65 = 0.35)\n    # coffee_people = 0.35 * total_people\n    # Hence, 7 = 0.35 * total_people\n    # total_people = 7 / 0.35\n    \n    total_people = coffee_people / 0.35\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the number of children and d represent the number of dogs\n    c, d = symbols('c d')\n\n    # Each child has 2 legs, each dog has 4 legs, and there are 56 legs in total\n    equation1 = Eq(2*c + 4*d, 56)\n    # There are 3 times as many dogs as children\n    equation2 = Eq(d, 3*c)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, d))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    two_fifths_absent = 18\n    three_fifths_present = two_fifths_absent\n    total_number_of_pupils = (5/3) * three_fifths_present\n    return int(total_number_of_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 + 5)\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday - sunday, 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    # Calculate the numbers of trees on each side (subtracting the corners from one side to avoid counting them twice)\n    trees_on_length_side = (length // spacing) + 1\n    trees_on_width_side = (width // spacing) + 1\n\n    # Total trees on both length sides (minus 2 for the corners counted twice) and both width sides\n    total_trees = (2 * trees_on_length_side + 2 * trees_on_width_side) - 4\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_in_meters = 1.36\n    height_in_cm = height_in_meters * 100\n    return height_in_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_amount = 500\n    tax_rate = 0.03\n    tax_amount = initial_amount * tax_rate\n    final_amount = initial_amount - tax_amount\n    return final_amount\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    # solve equations with a for loop since there are at least two adults\n    for adults in range(2, 110 // 20 + 1):  # Start with 2 adults and go up\n        children = (110 - (adults * 20)) / 15\n        # Check if the number of children is an integer (whole number)\n        if children.is_integer():\n            return int(children)\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10**8):\n        if int(str(i)[-1] + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_orange_squash = 750  # in millilitres\n    ratio_squash_to_water = 1 / 9\n    total_mixture_per_part = total_orange_squash / ratio_squash_to_water\n    total_litres = total_mixture_per_part / 1000  # convert millilitres to litres\n    number_of_bottles = int(total_litres)\n    return number_of_bottles\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_side = 0.6 * 100\n    ans = 180 / left_side\n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Define the total cost\n    total_cost = 132\n\n    # Calculate the cost of the bag using Thomas's mistake\n    # He did not calculate the half of the remainder\n    cost_per_unit = total_cost / 5  # according to Thomas's wrong calculation\n\n    # Calculate the correct cost of the book\n    book_cost = cost_per_unit * 3  # as the book is 3 units (1/3 of the initial amount)\n\n    # Calculate the correct initial amount\n    initial_amount = book_cost * 3  # as the book cost is 1/3 of the initial amount\n\n    return initial_amount\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 4):\n        # Construct the original 6-digit number using B=2, D=0 and perm\n        ABCDEF = int(f\"2{perm[0]}0{perm[1]}{perm[2]}{perm[3]}\")\n        EFABCD = int(f\"{perm[2]}{perm[3]}2{perm[0]}0{perm[1]}\")\n        \n        # Check the given condition\n        if 5 * ABCDEF == 6 * EFABCD:\n            # The answer is FACE\n            FACE = f\"{perm[1]}{perm[2]}2{perm[3]}\"\n            return int(FACE)\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Last 2 digits of a number x is equivalent to x mod 100.\n    # Use the fact that (a * b) mod n = [(a mod n) * (b mod n)] mod n.\n    # For large powers, we can use the fact that for any number a,\n    # a mod n where n = 10^k repeats every phi(10^k) numbers, where\n    # phi is the Euler's totient function and here phi(100) = 40.\n\n    # Calculate 6^2015 mod 100\n    # Here, euler_totient_100 = 40 (Euler's totient function for 100),\n    # and since 2015 mod 40 = 15, we only need to compute 6^15 mod 100.\n    euler_totient_100 = 40\n    power_mod = pow(6, 2015 % euler_totient_100, 100)\n\n    # Calculate (2015 * 6) mod 100\n    multiply_mod = (2015 * 6) % 100\n\n    # Calculate 2015^6 mod 100\n    # We only need the last two digits of 2015^6 which can be calculated using pow function\n    last_digits_of_base = 2015 % 100\n    base_power_mod = pow(last_digits_of_base, 6, 100)\n\n    # Sum the mod 100 of each term to get the last two digits of the entire expression\n    ans = (power_mod + multiply_mod + base_power_mod) % 100\n\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulus = 7\n    \n    remainder = pow(base, exponent, modulus)\n    \n    return remainder\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    return 8234 - 909\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Given:\n    # The first 5 factors of the number are 1, 2, 4, 7, 8\n    # The number has 8 factors in total.\n\n    # Since 1 and the number itself are always factors, \n    # and we know that 2, 4, 7, 8 are factors,\n    # the sixth factor would be the number divided by 2,\n    # the seventh factor would be the number divided by 4, and\n    # the eighth factor would be the number divided by 7.\n\n    # As 8 is a factor, we just need to find the number n such that n / 8 = 7,\n    # because 7 is also a factor and we know that n/7 would give us 8.\n    # So n is the least common multiple of 7 and 8.\n    \n    # To find the least common multiple (LCM) of 7 and 8, \n    # since they are coprime (no common factors other than 1),\n    # the LCM is simply their product.\n\n    number = 7 * 8\n    return number\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percentage = 10\n    discount_amount = original_price * (discount_percentage / 100)\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    height = 40\n    climb_up = 5\n    slide_down = 3\n    jumps = 0\n    current_height = 0\n\n    while current_height < height:\n        jumps += 1\n        current_height += climb_up\n        if current_height >= height:\n            break\n        # Monkey falls down after every 2 jumps\n        if jumps % 2 == 0:\n            current_height -= slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original total number of animals be 'total'\n    # Let the original number of goats be 'goats'\n    total, goats = symbols('total goats')\n\n    # 65% initially are cows, so goats are 100% - 65% = 35% of the total initially\n    equation1 = Eq(goats, total * 0.35)\n\n    # 240 more cows and goats are added, and goats are doubled while cows increase 20%\n    # Since the number of goats is doubled, there are now twice as many goats (2 * goats)\n    # The new total is (total + 240)\n    equation2 = Eq(total * 0.65 + 240 * 0.20, (total + 240) * 0.65)\n\n    # Now we can solve for both total and goats\n    solutions = solve((equation1, equation2), (total, goats))\n\n    # We only need the number of goats at first\n    return solutions[goats]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let x be the total number of cookies in the box\n    # 1680 cookies were sold in the first month, so James kept x - 1680\n    # In the second month, James sold 7/20 more, which is (7/20) * 1680 more\n    more_sold_second_month = (7 / 20) * 1680\n    # Total sold in second month\n    total_sold_second_month = 1680 + more_sold_second_month\n    # James kept x - total_sold_second_month in the second month\n    # It's also given that the amount James kept decreased by 3/20 from the first month to the second\n    # So, (x - 1680) - (x - total_sold_second_month) = (3 / 20) * x\n    # Now we simplify this equation to find x\n    from sympy import symbols, solve, Rational\n\n    x = symbols('x')\n    kept_decrease = (3 / 20) * x\n    equation = (x - 1680) - (x - total_sold_second_month) - kept_decrease\n    # solve the equation for x\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # Jolene is 6th from the front\n    # Amy is 8th from the back\n    # Amy is directly behind Jolene, so Jolene is also 7th from the back\n    return 6 + 8 - 1  # Subtract 1 since Amy is directly behind Jolene, not one more person in between.\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    # Using Chinese Remainder Theorem\n    # x = 1 (mod 5), x = 2 (mod 6), x = 9 (mod 11)\n\n    from sympy.ntheory.modular import solve_congruence\n    congruences = [(1, 5), (2, 6), (9, 11)]\n\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    # Number of sunflowers on each side (excluding the corners)\n    sunflowers_per_side = side_length // distance_apart - 1\n\n    # Total sunflowers on the sides (5 sides)\n    total_sunflowers_on_sides = sunflowers_per_side * 5\n\n    # Sunflowers on the corners (5 corners)\n    total_sunflowers_on_corners = 5\n\n    # Total number of sunflowers planted\n    total_sunflowers = total_sunflowers_on_sides + total_sunflowers_on_corners\n\n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    cost_per_stamp = 46  # in pence\n    amount_available = 3 * 100  # in pence (£3 is equivalent to 300p)\n\n    num_stamps = amount_available // cost_per_stamp\n\n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    boat_capacity = 7\n    trip_time = 2\n    trips_without_return_trip = (adventurers // boat_capacity)\n    trips_with_return = (adventurers - boat_capacity * trips_without_return_trip) * 2 if adventurers % boat_capacity else 0\n    \n    total_trip_time = (trips_without_return_trip - 1) * 2 * trip_time + trips_with_return\n    \n    return total_trip_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let t be the time Ryan would have taken at his usual speed\n    # Distance is the same for both speeds; therefore:\n    # Distance = Usual speed * Usual time = Reduced speed * (Usual time + Time delay)\n    # 45t = 30(t + 2)\n    \n    # Solve for t\n    t = (30 * 2) / (45 - 30)\n    \n    return t\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    ans = 58 * 36\n    return ans\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n\n    return factorial(100) // factorial(98)\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Calculate the sum from 3 to 10\n    sum_forward = sum(range(3, 11))  # 3+4+5+6+7+8+9+10\n\n    # Calculate the sum from 3 to 6\n    sum_backward = sum(range(3, 7))  # 3+4+5+6\n\n    # The total sum is sum_forward plus sum_backward minus 3 because 3 is counted twice\n    total_sum = sum_forward + sum_backward - 3\n\n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def partition(n, max_part):\n        if n == 0:\n            return 1\n        if n < 0 or max_part == 0:\n            return 0\n        return partition(n, max_part - 1) + partition(n - max_part, max_part)\n\n    ans = partition(5, 5) - 1  # Subtracting 1 to exclude the number itself (5)\n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, a + b\n        a, b = a % 3, b % 3  # Only care about remainder when dividing by 3\n    return b\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219 ** 2) / (14 / 3 + 38 / 59)\n    denominator = 2.501 ** 3\n    ans = round(numerator / denominator, 3)\n    return ans\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students and y be the number of sweets\n    x, y = symbols('x y')\n\n    # Equation1 when giving each student 6 sweets, Mr. Lim is short of 26 sweets\n    # So the total sweets needed would be 6*x and the sweets he has is y, thus y = 6*x - 26\n    equation1 = Eq(y, 6*x - 26)\n\n    # Equation2 when giving each student 5 sweets, Mr. Lim is short of 5 sweets\n    # So the total sweets needed would be 5*x and the sweets he has is y, thus y = 5*x - 5\n    equation2 = Eq(y, 5*x - 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # The difference in the number of fruits between two neighbouring trees is 1.\n    # This creates an arithmetic sequence with a common difference of 1.\n    # Assume the number of fruits on the first tree is x, the next tree will have (x + 1) fruits,\n    # and so on until the 8th tree which will have (x + 7) fruits.\n    # The sum of an arithmetic sequence is given by:\n    # sum = (first_term + last_term) * number_of_terms / 2\n    # Here, sum is 225, number_of_terms is 8, first_term is x, and last_term is (x + 7)\n    # So, 225 = (x + (x + 7)) * 8 / 2\n    # Simplify the equation to find the value of x:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + (x + 7)) * 8 / 2, 225)\n    solutions = solve(equation, x)\n\n    # Check for integer solutions, because the number of fruits must be a whole number.\n    integer_solutions = [s for s in solutions if s.is_integer]\n\n    # Check if the number of fruits on each tree is positive, because negative fruits don't make sense.\n    positive_integer_solutions = [s for s in integer_solutions if all(s + i >= 0 for i in range(8))]\n\n    # It is possible if there is at least one positive integer solution.\n    is_possible = len(positive_integer_solutions) > 0\n    return is_possible, positive_integer_solutions[0] if is_possible else \"Not possible\"\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo_current, son_current = symbols('leo_current son_current')\n\n    # When Leo was the age of his son, the son was 4 years old => leo_current - son_current = son_current - 4\n    equation1 = Eq(leo_current - son_current, son_current - 4)\n\n    # When the son reaches Leo's current age, Leo will be 70 years old => son_current + (leo_current - son_current) = 70\n    equation2 = Eq(son_current + (leo_current - son_current), 70)\n\n    solutions = solve((equation1, equation2), (leo_current, son_current))\n\n    return solutions[leo_current]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    eq1 = Eq(blouse + dress, 41)\n    eq2 = Eq(4 * blouse + 3 * dress, 140)\n    \n    solutions = solve((eq1, eq2), (blouse, dress))\n    \n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # calculating total permutations for 4 singing performances\n    singing_permutations = factorial(4)\n    \n    # since there must be at least one singing performance between every two dancing performances\n    # the singing performance slots can be considered as 'S' and dancing performance as 'D'\n    # thus, there are 5 places where we can place the 3 dancing performances: _ S _ S _ S _ S _\n    # We can choose 3 out of these 5 slots for the dancing performances in combination(C(5,3))\n    dancing_positions = factorial(5) // (factorial(3) * factorial(5-3))\n    \n    # The total arrangement ways is the product of singing_permutations and dancing_positions\n    total_arrangements = singing_permutations * dancing_positions\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    for years_later in range(1, 100):  # Assuming it will happen within the next 100 years\n        heidi_age = 8 + years_later\n        dad_age = 50 + years_later\n        if dad_age == 4 * heidi_age:\n            return years_later\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    ans = 554 + 479\n    return ans\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    n = 60\n    count_5 = 0\n    for i in range(1, n+1):\n        while i % 5 == 0:\n            count_5 += 1\n            i = i // 5\n    ans = count_5\n    return ans\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Calculate the sum of the first three numbers\n    sum_first_three = 3 * 120\n\n    # Calculate the sum of the four numbers\n    sum_four_numbers = 4 * 150\n\n    # Calculate the fourth number\n    fourth_number = sum_four_numbers - sum_first_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    right_side = 11 * 14 + 26\n    ans = right_side / 15\n    return ans\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, solve, Eq, sqrt\n\n    r = symbols('r')\n    equation = Eq(216*r, sqrt(216*r)**2)\n    solutions = solve(equation)\n\n    # Since 216 = 2^3 * 3^3, a square number times r must result in a power of 2^x * 3^y where x and y are even.\n    # To find r, we take 216 and multiply by a factor such that the exponent of 2 and 3 are both even.\n    # To make the power of 2 even, it must be multiplied by 2 (to make it 2^4).\n    # The powers of 3 are already even (3^3), so no need to adjust.\n    # r must therefore be the factor that makes the powers of 2 even, and that is 2.\n    \n    ans = 2\n\n    return ans\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    result = (3 / 13) * 52\n    return result\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    net_distance_per_day = 8 - 3\n    # The snail climbs out on the 9th day, so for the first 8 days it climbs this net distance\n    total_distance_after_8_days = net_distance_per_day * 8\n    # On the 9th day, the snail climbs 8 meters to get out of the well, so we add 8 to the total.\n    well_depth = total_distance_after_8_days + 8\n    \n    return well_depth\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_rate = 15 / 100\n    discounted_price = original_price * (1 - discount_rate)\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = remainder + 1\n    smallest_dividend = quotient * smallest_divisor + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    know_french = 75\n    know_japanese = 45\n    know_both = (know_french + know_japanese) - total_teachers\n    know_only_french = know_french - know_both\n    return know_only_french\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n    \n    total_ways = factorial(6)  # Total ways without any restriction\n    teddy_at_left = factorial(5)  # Ways when Teddy is at the furthest left\n    \n    return total_ways - teddy_at_left\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n\n    result = total_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if (i // 10 + i % 10) % 7 == 0:  # Sum of the digits is a multiple of 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = -4\n\n    # nth term of the arithmetic sequence is given by: a_n = a_1 + (n-1)d\n    # To find the number of terms before the first negative term,\n    # we set a_n < 0 and solve for n\n\n    # a_1 + (n-1)d < 0\n    # 50 + (n-1)(-4) < 0\n    # 50 - 4n + 4 < 0\n    # 54 < 4n\n    # 13.5 < n\n    # n > 13.5, since n must be a whole number, the first negative term is at n = 14\n    # However, we need the number of terms before the first negative term, so we subtract 1\n\n    n = 14 - 1\n\n    return n\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    ans = (1000**2 - 990**2) + (980**2 - 970**2) + (20**2 - 10**2)\n    return ans\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag, drink = symbols('bag drink')\n\n    # Rachel's purchases: 3 bags + 5 drinks = 4.90\n    equation1 = Eq(3 * bag + 5 * drink, 4.90)\n    \n    # Rosie's purchases: 1 bag + 3 drinks = 2.70\n    equation2 = Eq(bag + 3 * drink, 2.70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bag, drink))\n\n    return solutions[bag]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    for A in range(100, 1000):\n        if A % 75 != 0:\n            continue\n        a_digits = set(str(A))\n        for B in range(A + 1, 1000):\n            if B % 75 != 0:\n                continue\n            b_digits = set(str(B))\n            if len(a_digits.union(b_digits)) <= 4:\n                max_sum = max(max_sum, A + B)\n    return max_sum\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    return sum(range(1, 10))\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = 0\n    sign = 1  # Start with positive sign\n\n    # Loop through the values from 20 to 2 with step size of -2\n    for n in range(20, 1, -2):\n        total += sign * n\n        sign *= -1  # Alternate the sign\n\n    return total\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    terms = [8, 32, 72, 128, 200, 288, 392, 512, 648]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    total_sum = 280\n    # Since the numbers are consecutive and there are seven of them,\n    # the middle number is the average, which is total_sum / 7\n    middle_number = total_sum // 7\n    \n    # The largest number is 3 more than the middle number\n    # because the numbers are consecutive\n    largest_number = middle_number + 3\n    \n    return largest_number\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    for i, throw in enumerate(throws):\n        if throw == 6:\n            continue\n        if i > 0 and throws[i-1] == 6:\n            position -= throw\n        else:\n            position += throw\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    # Equation 1: Total money at first\n    equation1 = Eq(alex + brayden, 756)\n    # Equation 2: Money relation after Alex gives $65 to Brayden\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # We can start with a reasonable range\n        remaining_after_music = gums - 2  # ate 2 during music\n        shared_at_break = remaining_after_music // 3  # shared one third\n        remaining_after_break = remaining_after_music - shared_at_break\n        if remaining_after_break % 4 == 0:  # ate an equal amount in each of the next four lessons\n            return gums  # the smallest number that satisfies the conditions\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # Calculate permutations of storybooks (S) and magazines (M) separately\n    # There can be at most 4 slots between the storybooks to place the magazines\n    # The arrangement can be visualized as: S_M_S_M_S_M_S_M_S\n    # There are 5 slots (4 between the storybooks and 1 after the last storybook)\n    # We need to place 5 magazines in these 5 slots\n    # This is equivalent to distributing 5 identical objects into 5 distinct boxes\n    # which is C(5 + 5 - 1, 5) for combinations with repetitions\n    ways_to_place_magazines = factorial(5 + 5 - 1) // (factorial(5) * factorial(5 - 1))\n\n    # Calculate the permutations of the storybooks and magazines themselves\n    # Since the storybooks are distinct, we have 5! ways to arrange them\n    # Same for the magazines, also 5! ways\n    permutations_of_storybooks = factorial(5)\n    permutations_of_magazines = factorial(5)\n\n    # Total number of ways is the product of the above calculated permutations\n    total_ways = ways_to_place_magazines * permutations_of_storybooks * permutations_of_magazines\n\n    return total_ways\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate_money = 13\n    james_money = 28\n    total_money = kate_money + james_money\n    equal_amount = total_money / 2\n    money_given_by_james = james_money - equal_amount\n    return money_given_by_james\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = int(f\"42{A}28{B}\")\n            if number % 99 == 0:\n                return A * 10 + B\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_initial = 10 * 10  # Initial total sum of ten numbers\n    total_final = 9 * 9      # Final total sum of nine numbers after removing one\n\n    removed_number = total_initial - total_final\n\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6  # Lucy's speed in kilometers per hour\n    time_s = 300  # Time in seconds\n    # Convert speed to meters per second (1 km/h = 1000 m / 3600 s)\n    speed_mps = (speed_kmh * 1000) / 3600\n    # Calculate distance walked in meters\n    distance_m = speed_mps * time_s\n    return distance_m\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sum, each_brother, each_sister = symbols('total_sum each_brother each_sister')\n\n    # When the sister is included\n    equation1 = Eq(each_brother, total_sum / 4)\n    # When only the brothers share the money\n    equation2 = Eq(each_brother + 20, total_sum / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_sum, each_brother))\n\n    return solutions[total_sum]\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    return 25 * 4 * 13\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    n_terms = (21 + 1) // 2  # As formula considers 1^3+2^3+...+n^3, n is even here.\n    sum_of_series = (n_terms * (n_terms + 1) // 2) ** 2  # (1+2+...+n)^2 formula\n    return sum_of_series\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # The sum of some 4 of these 5 numbers for each given average\n    sums = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n    total_sum = sum(sums)\n\n    # Since the sum of all 5 numbers should be the sum of the given four number groups minus 4 times the excluded number\n    # total_sum = 5 * sum(all_numbers) - 4 * excluded_number\n    # We have 5 sums, hence we sum them up and subtract 4 times the common number among the 5 different groups\n    # We are subtracting the shared number (excluded from one group each time) 4 times because it was not included in each sum.\n    common_number = total_sum % 5\n\n    # The largest sum (for the highest average) minus the common number gives the largest number\n    largest_number = max(sums) - common_number\n\n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    fraction_art = 1/3\n    fraction_science = 4/5\n\n    art_equals_science = art_books * fraction_art\n    science_books = art_equals_science / fraction_science\n\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    # Let the number of stickers Katelyn has be x\n    # Then Jared has x + 60 stickers\n    # According to the ratio, Jared has 5/2 times the stickers Katelyn has.\n    # So, we can form the equation: x + 60 = (5/2) * x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 60, (5/2) * x)\n\n    # Solving the equation to find x\n    katelyn_stickers = solve(equation, x)[0]\n\n    # Computing Jared's stickers\n    jared_stickers = katelyn_stickers + 60\n\n    # Total stickers\n    total_stickers = katelyn_stickers + jared_stickers\n\n    return total_stickers\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the number of beads left after giving some away\n    red_left, green_left, blue_left = symbols('red_left green_left blue_left')\n\n    # Given conditions:\n    # 1. Lauren had 350 beads left after giving away some beads\n    equation1 = Eq(red_left + green_left + blue_left, 350)\n    \n    # 2. There were 2 times as many red beads as green beads left\n    equation2 = Eq(red_left, 2 * green_left)\n    \n    # 3. The number of blue beads left was 50 fewer than the number of red beads left\n    equation3 = Eq(blue_left, red_left - 50)\n\n    # 4. Lauren gave away 112 blue beads, so the total number of beads initially would be the sum of beads left and beads given away:\n    # Since Lauren had the same number of red, green and blue beads at first, we assume red_initial = green_initial = blue_initial\n    # Therefore, the number of beads she had initially for each color would be blue_left + 112\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red_left, green_left, blue_left))\n\n    # Substitute the solution into initial blue beads calculation\n    blue_initial = solutions[blue_left] + 112\n\n    return blue_initial\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.05 ** 3\n    interest_last_two_years = 1.10 ** 2\n\n    investment_after_three_years = initial_investment * interest_first_three_years\n    total_investment_after_five_years = investment_after_three_years * interest_last_two_years\n\n    return round(total_investment_after_five_years, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(ni, -2) for ni in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    import math\n    num_books = [42, 63, 28]\n    ans = math.gcd(math.gcd(num_books[0], num_books[1]), num_books[2])\n    return ans\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # If we want to share 16 sausages among 24 people equally,\n    # each person should get 16/24 = 2/3 of a sausage.\n    # Therefore, we need to make cuts in such a way that each\n    # cut creates pieces that can be grouped into sets of 2/3.\n\n    # We can cut each sausage into 3 equal parts, which requires 2 cuts per sausage.\n    # This gives us 16 * 3 pieces in total (48 pieces), and we need to give\n    # each person 2 pieces (since 2 pieces represent the 2/3 of a sausage).\n\n    # Total number of cuts for 16 sausages = 16 sausages * 2 cuts per sausage\n    cuts = 16 * 2\n\n    return cuts\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    star_rate, nini_rate = symbols('star_rate nini_rate')\n    \n    # If Star types 5 hours then Nini types 20 hours, they will finish the job\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    \n    # If Star types 20 hours then Nini types 8 hours, they will finish the job\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n    \n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n    \n    # Time for Nini to finish the job by herself\n    nini_time_to_finish = 1 / solutions[nini_rate]\n    \n    return nini_time_to_finish\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n    flight_duration = timedelta(hours=3, minutes=25) # assumed duration from given facts or common knowledge\n    time_difference = timedelta(hours=3) # time difference between Manchester and St Petersburg\n\n    departure_time = st_petersburg_time - flight_duration - time_difference\n\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Number of companies\n    companies = 4\n    # Time taken by all companies to build 900m expressway\n    time_for_900m = 5\n    # Work done by all companies in 5 days\n    work_done = companies * time_for_900m\n    \n    # New situation with 1 company\n    new_companies = 1\n    # Length of the new expressway\n    new_length = 2700\n    # Calculate the work done by one company in 5 days\n    one_company_work = work_done / companies\n    \n    # Calculate total time for one company to build 2700m expressway\n    total_time_for_2700m = (new_length / 900) * (work_done / one_company_work)\n    \n    return total_time_for_2700m\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    pounds = kg * kg_to_lbs\n    return pounds\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    ben_height = jane_height - difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben's position from the front\n    ben_front = 6\n    \n    # Frank's position from the back\n    frank_back = 9\n    \n    # Number of people between Ben and Frank\n    between_count = 10\n    \n    # Total people in the queue as per Ben's conclusion\n    total_people = ben_front + between_count + frank_back\n    \n    return total_people\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Qiqi's speed\n    q_speed = 60  # m/min\n    # Weiling's speed\n    w_speed = 72  # m/min\n\n    # Weiling starts 2 minutes later\n    w_late_start = 2 # minutes\n    # Weiling arrives 4 minutes earlier\n    w_early_arrival = 4 # minutes\n\n    # Let d be the distance between the library and the school\n    # Weiling's travel time (t - 2 minutes because she starts later, t is Qiqi's travel time)\n    # Qiqi arrives (t + 4 minutes after Weiling)\n    # Weiling's travel time is Qiqi's travel time minus 6 minutes (2 minutes start later + 4 minutes arrive earlier)\n\n    # Time for Qiqi to travel distance d\n    # t_qiqi = d / q_speed\n\n    # Time for Weiling to travel distance d\n    # t_weiling = d / w_speed\n    \n    # We know that t_weiling = t_qiqi - 6,\n    # so we can set up the following equation based on the speeds and times:\n    # d / w_speed = (d / q_speed) - 6\n    \n    # Solve for d:\n    # (d / 72) = (d / 60) - 6\n    # d = 72 * ((d / 60) - 6)\n    # d = (6 / 5) * d - 432\n    # d - (6 / 5) * d = -432\n    # d * (1 - (6 / 5)) = -432\n    # d * (-1 / 5) = -432\n    # d = -432 * (-5)\n    # d = 2160\n\n    # Now we calculate the distance using the derived formula\n    d = 2160\n\n    return d\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    # Given ratio of coffee to milk is 3:8, and 6 liters of coffee is used\n    # Let the number of litres of Latte be represented by x\n    # The amount of milk will then be x * (8/3) because the amount of milk is (8/3) times the amount of coffee\n    # According to the ratio, the sum of the parts of coffee and milk gives the total Latte\n    # Therefore, coffee + milk = Latte\n    # => 6 + (8/3 * 6) = Latte\n    # Solve for x (litres of Latte)\n\n    coffee = 6\n    ratio_coffee_to_latte = 3 / (3 + 8) # This is the part of the Latte that is coffee\n    latte = coffee / ratio_coffee_to_latte\n\n    return latte\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for number in range(102, 1000):  # Start at 102 because it's the smallest 3-digit number with remainder 2 for both modulo 8 and 11\n        if number % 8 == 2 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    total = sum((-1)**(i+1) * (34 - i*2) for i in range(1, 17))\n    return total\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    return 72 / 100 * 140\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_marbles = symbols('total_marbles')\n\n    # Equation: (2/5) * total_marbles + (1/3) * total_marbles + 96 = total_marbles\n    equation = Eq((2/5) * total_marbles + (1/3) * total_marbles + 96, total_marbles)\n    \n    # Solve the equation\n    solution = solve(equation, total_marbles)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    remainder = (42663 ** 2) % 9\n    return remainder\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    sum_last_4_digits = 0\n    current_number = 0\n\n    for i in range(1, 2016):\n        current_number = current_number * 10 + 1\n        sum_last_4_digits = (sum_last_4_digits + current_number) % 10000\n\n    return sum_last_4_digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # Worst case scenario:\n    # First marble: We take a blue or yellow (1 marble taken)\n    # Second marble: We take a marble of the other color (2 marbles taken)\n    # Third marble: We must have taken 2 marbles of the same color by now (3 marbles taken)\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    max_product = 2019\n    next_year_product = 2020\n\n    # John is one year older than Mary, so we use j for John's age and j-1 for Mary's age.\n    # The ages of their three children can be represented as c, c+2, c+4 respectively.\n    # We will iterate over possible ages for John (j) and the youngest child (c) to find a solution\n    for j in range(1, max_product):\n        for c in range(1, max_product):\n            # Calculate Mary's age\n            m = j - 1\n            # Calculate current products of their ages\n            parents_product_current = j * m\n            children_product_current = c * (c + 2) * (c + 4)\n            \n            # Check if current year's products are less than max_product\n            if parents_product_current < max_product and children_product_current < max_product:\n                # Calculate next year's products\n                parents_product_next_year = (j + 1) * (m + 1)\n                children_product_next_year = (c + 1) * (c + 3) * (c + 5)\n                \n                # Check if next year's products are greater than next_year_product\n                if parents_product_next_year > next_year_product and children_product_next_year > next_year_product:\n                    # Calculate and return sum of all ages this year\n                    return j + m + c + (c + 2) + (c + 4)\n    # If no solution found within the range, return None\n    return None\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Calculate the unit digit for each part of the expression\n    # The unit digit of 13^242 is the same as the unit digit of 3^242, which repeats every 4 powers: 3, 9, 7, 1\n    unit_digit_13_242 = 3**2 % 10  # 2 is the remainder when 242 is divided by 4, hence we raise 3 by 2\n\n    # The unit digit of 17^379 is the same as the unit digit of 7^379, which repeats every 4 powers: 7, 9, 3, 1\n    # Since 379 % 4 = 3, we raise 7 by 3\n    unit_digit_17_379 = 7**3 % 10\n    \n    # The unit digit for 4^2012 repeats every 2 powers: 4, 6\n    # Since 2012 is even, the unit digit of 4^2012 is 6\n    unit_digit_4_2012 = 6\n    \n    # Calculate the unit digit of the whole expression\n    unit_digit = (unit_digit_13_242 + unit_digit_17_379 * unit_digit_4_2012) % 10\n\n    return unit_digit\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = 8 - 11\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let's denote the original sum of money as x\n    # According to the problem we know that:\n    # x - 36 (money spent on plates) - 3/4 * (x - 36) (money spent on cups) = 1/6 * x (remaining money)\n    \n    # Let's solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - 36 - (3/4) * (x - 36), (1/6) * x)\n\n    original_sum_money = solve(equation, x)\n\n    return original_sum_money[0]\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = p\n        A = 100*a + 10*b + c + \\\n            100*b + 10*c + d + \\\n            100*c + 10*d + e + \\\n            100*d + 10*e + f + \\\n            100*e + 10*f + g + \\\n            100*f + 10*g + h + \\\n            100*g + 10*h + i\n        max_sum = max(max_sum, A)\n    return max_sum\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile = 2 * 60 + 30  # Time in seconds to travel 1 mile\n    time_1_hour = 1 * 60 * 60  # Time in seconds for 1 hour\n\n    miles_in_1_hour = time_1_hour / time_per_mile\n\n    return miles_in_1_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    # Initialize the count of numbers found and the current number to check\n    count = 0\n    number = 8\n    \n    while True:\n        if str(number)[0] == '8':  # Check if the leftmost digit is 8\n            count += 1\n            if count == 2012:  # If the 2012th number is found, return it\n                return number\n        number += 1  # Increment number to check the next integer\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Let the middle term (third term) in the sequence be x.\n    # Then the five consecutive terms will be x-2, x-1, x, x+1, and x+2.\n    # The sum of these terms will give us the total number of balls which is 160.\n    # (x-2) + (x-1) + x + (x+1) + (x+2) = 160\n    # 5x = 160\n    # x = 160 / 5\n    # x = 32\n    # The student with the most balls will have the last term which is x+2.\n    # x+2 = 32 + 2\n    max_balls = (160//5) + 2\n    return max_balls\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    count = 0\n    # Since there is a restriction on how many envelopes each box should contain,\n    # we subtract the minimum required amount first.\n    # Then we distribute the remaining envelopes freely among the four boxes.\n    remaining_envelopes = 15 - (2 + 4 + 3)  # Minimum for boxes A, B, and C.\n\n    # Now we distribute the remaining 6 envelopes to the 4 mailboxes.\n    # Each mailbox can have from 0 to all of the remaining envelopes.\n    for a in range(0, remaining_envelopes + 1):\n        for b in range(0, remaining_envelopes - a + 1):\n            for c in range(0, remaining_envelopes - (a + b) + 1):\n                # The fourth mailbox will have the rest of the envelopes.\n                d = remaining_envelopes - (a + b + c)\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 25 / 100 * 80\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, solve\n\n    income = symbols('income')\n\n    tax_equation = income * 0.15 - (income - 20000) * 0.05 - 7000\n\n    ans = solve(tax_equation, income)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2*(x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 * 0.1\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Since 1/13 is a recurring decimal, we find the recurring cycle.\n    recurring_cycle = '076923'\n    cycle_length = len(recurring_cycle)\n    \n    # 2022nd decimal place corresponds to (2022-1) mod cycle_length index of recurring_cycle\n    index = (2022 - 1) % cycle_length\n    \n    # digit in the 2022th decimal place\n    digit = recurring_cycle[index]\n    \n    return int(digit)\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    length1 = 28\n    length2 = 14\n    length3 = 56\n\n    gcd12 = gcd(length1, length2)\n    gcd123 = gcd(gcd12, length3)\n\n    return gcd123\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    # Assume all animals are chickens with 2 legs.\n    all_chickens_legs = 2 * total_animals\n    # Calculate the leg difference when assuming all are chickens\n    leg_difference = total_legs - all_chickens_legs\n    # Since each rabbit will contribute 2 more legs than a chicken, divide the difference by 2 to find the number of rabbits\n    rabbits = leg_difference / 2\n    # The rest are chickens\n    chickens = total_animals - rabbits\n\n    return int(chickens)\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    total_boys = 17\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    students_home_lunch = 5\n    boys_home_lunch = 3\n    \n    girls = total_students - total_boys\n    girls_packed_lunch = total_students - (boys_packed_lunch + girls_school_lunch + students_home_lunch)\n    \n    return girls_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark = 20 * 6\n    total_milk = 20 * 5\n    total_strawberry = 20 * 4\n    total_cost = total_dark + total_milk + total_strawberry\n    total_chocolates = 20 + 20 + 20\n    average_cost = total_cost / total_chocolates\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    daily_rate = 720 / 5\n    total_days = 3600 / daily_rate\n    return total_days\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of packs in both stores\n    x = symbols('x')\n\n    # After store A sold 290 packs, it has x - 290 packs left\n    # At the same time, store B has 3 times the number of packs in store A\n    # So, store B has 3 * (x - 290) packs\n    # The total initial packs is the sum of packs in store A and B which is 2 * x\n    # 3 * (x - 290) = x -> number of packs in Store A after selling is a third of store B\n    \n    equation = Eq(3 * (x - 290), x)\n\n    # Solve the equation to find the initial number of packs in both stores\n    solution = solve(equation, x)\n\n    # The answer is twice the initial number of packs in one store, as both stores had an equal number\n    ans = solution[0] * 2\n    return ans\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    last_number = 100\n    divisor = 12\n    # Subtract 1 since we want numbers strictly less than 100\n    num_divisible = (last_number - 1) // divisor\n    return num_divisible\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation = Eq(10*(x+1) - 5*(x+1) - 28, 2)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # Train's speed in m/s\n    time = 19   # Time taken to pass the tree in seconds\n\n    # Since distance = speed * time\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let x be the amount of work the man does in 1 day (drinking orange juice)\n    # Let y be the amount of work the wife does in 1 day (drinking orange juice)\n\n    # According to the problem, the work done by the man in 15 days is 1 barrel of orange juice\n    # So we have the equation x * 15 = 1\n\n    # If they work together, they finish in 12 days\n    # Together they do x + y amount of work in 1 day\n    # So (x + y) * 12 = 1\n\n    # Solving this linear system\n    man_days = 15\n    together_days = 12\n\n    # From man's work equation: x = 1 / man_days\n    x = 1 / man_days\n    # From the together work equation: x + y = 1 / together_days\n    y = (1 / together_days) - x\n    \n    # The wife's work in 1 day is y, so the days she needs to drink 1 barrel on her own is 1 / y\n    wife_days = 1 / y\n\n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    ans = int(result)\n    return ans\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_fruits = 18 + 30\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n    total_wheels = wheels_per_tricycle * num_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    unit_price = 16\n    books_to_buy = 5\n    books_to_get_free = books_to_buy // 3\n    total_books = books_to_buy + books_to_get_free\n    price_paid = unit_price * books_to_buy\n    \n    return price_paid\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    children = (2/5 * total_people - 190) / 1\n    women = 2/5 * total_people\n    men = 3 * children\n\n    equation = Eq(women + men + children, total_people)\n    \n    solutions = solve(equation, total_people)\n\n    return int(solutions[0])\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_num = symbols('sam_num')\n\n    equation = Eq(2 * sam_num + 6, 3 * sam_num - 3)\n\n    sam_number_solution = solve(equation, sam_num)\n\n    return sam_number_solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number of boys\n    boys = symbols('boys')\n    girls = 40 - boys  # Total pupils minus boys gives girls\n    \n    # The total number of pencils is average per pupil times the number of pupils\n    total_pencils = 35 * 40\n    \n    # Equations based on the average pencils per boys and per girls\n    equation = Eq(boys * 20 + girls * 60, total_pencils)  # boys * average_boys + girls * average_girls = total_pencils\n    \n    # Solve the equation for the number of boys\n    solutions = solve(equation, boys)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154  # m below sea level\n    mount_fuji_tip = 3776  # m above sea level\n\n    distance = mount_fuji_tip - turpan_depression_base\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    num = 7059\n    while num % 4 != 0:\n        num += 1\n    return num - 7059\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for page_num in range(1, 201):\n        count += str(page_num).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    # The pattern of the summation is the sum of numbers each having consecutive 1s\n    # starting from 1 one up to 50 ones. This is an arithmetic sequence when considering\n    # each number as the sum of powers of 10. Hence we can simplify the sum:\n    # 1 = 10^0\n    # 11 = 10^0 + 10^1\n    # 111 = 10^0 + 10^1 + 10^2\n    # And so on\n    # The last two digits of any number is its remainder when divided by 100\n    total_sum, mod = 0, 100\n\n    for i in range(1, 51):\n        # Since each term can be represented as a geometric series with a ratio of 10\n        # and 'i' number of terms, we can sum them up and compute modulo 100\n        sum_of_term = (10**i - 1) // 9\n        total_sum += sum_of_term\n\n    # Taking mod 100 gives us the last two digits\n    ans = total_sum % mod\n    return ans\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the price of an apple and y be the price of a banana\n    x, y = symbols('x y')\n\n    # Form the equations based on the information provided\n    equation1 = Eq(6 * x + 7 * y)\n    equation2 = Eq(8 * x + 4 * y)\n\n    # Solve for the price of an apple (x) and a banana (y)\n    solutions = solve((equation1 - equation2,), (x, y))\n\n    # Calculate the number of bananas Einstein could afford if he spent all his money on bananas\n    bananas = equation1.rhs / solutions[y]\n\n    return int(bananas)\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    incorrect_divisor = 211\n    difference = 98.01\n    incorrect_result = difference * incorrect_divisor\n\n    correct_divisor = 2.11\n    correct_result = incorrect_result / correct_divisor\n\n    return round(correct_result, 2)\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_students = math_students + art_students - total_students\n\n    return both_students\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, choon_mui = symbols('john choon_mui')\n\n    equation1 = Eq(john, choon_mui)\n    equation2 = Eq(john - 30, 4 * (choon_mui - 150))\n\n    solutions = solve((equation1, equation2), (john, choon_mui))\n\n    john_left = solutions[john] - 30\n    \n    return john_left\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    from itertools import combinations_with_replacement\n\n    # Number of envelopes to distribute after fulfilling the conditions\n    remaining_envelopes = 15 - (2 + 4 + 3)  # Conditions for boxes A, B, C\n    ways = 0\n\n    # Generate all combinations with replacement for remaining envelopes across 4 boxes\n    for combo in combinations_with_replacement(range(4), remaining_envelopes):\n        # Check if the combination meets the conditions\n        # Specifically, make sure box D doesn't have more than remaining_envelopes - 1\n        count = [0] * 4\n        for box in combo:\n            count[box] += 1\n\n        if count[0] >= 2 and count[1] >= 4 and count[2] >= 3:\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_in_minute = 60\n    minutes_in_hour = 60\n    hours_in_day = 24\n    days_in_week = 7\n\n    seconds_in_week = seconds_in_minute * minutes_in_hour * hours_in_day * days_in_week\n\n    return seconds_in_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    equation2 = Eq(female_first_day * 1.15 + male_first_day * 0.82, 1354)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n    \n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n\n    # Reconstructing the number of eggs after the first sale\n    # Let's denote the remaining eggs after the first sale as x\n    # After the second sale, he sold 4 eggs fewer than half of x and 15 eggs were left\n    # Which means before the second sale there were 15 + (15 + 4) = 34 eggs\n    x = 34\n\n    # Reconstructing the initial number of eggs\n    # He sold 5 eggs more than half of the initial number n\n    # Which means half the number of eggs before the first sale was x - 5\n    # Therefore, the initial number of eggs n = 2 * (x - 5)\n    n = 2 * (x - 5)\n\n    return n\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    miles = miles_per_hour * hours\n    kilometers = miles * 1.60934\n    \n    return kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10 / 100  # Converting percentage to a decimal\n    increase_amount = original_amount * percentage_increase\n    new_amount = original_amount + increase_amount\n    return new_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8  # The actual length of the yacht in meters.\n    scale_ratio = 20     # The scale ratio 1:20.\n\n    # Calculating the length of the model by dividing the actual length by the scale ratio.\n    model_length_m = actual_length_m / scale_ratio\n    \n    # Converting meters to centimeters by multiplying by 100 (since 1m = 100cm).\n    model_length_cm = model_length_m * 100\n\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    # Inclusion-Exclusion Principle for two sets: |A ∪ B| = |A| + |B| - |A ∩ B|\n    likes_either = likes_one_direction + likes_the_vamps - likes_both\n\n    # Girls who like neither = Total number of girls - girls who like either one or both\n    likes_neither = total_girls - likes_either\n\n    return likes_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # Number of derangements for 4 objects is !4\n    # Using the formula !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    n = 4\n    derangements = factorial(n)\n    for i in range(1, n+1):\n        derangements += (-1)**i * factorial(n) / factorial(i)\n    \n    return int(derangements)\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return ways, count\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    effective_climb = climb_per_day - slide_per_night\n    days = 0\n    distance_covered = 0\n\n    while distance_covered < total_distance:\n        days += 1\n        distance_covered += climb_per_day\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slide_per_night\n    \n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    initial_amount = 12000\n    interest_rate = 0.10\n    years = 2\n\n    final_amount = initial_amount * ((1 + interest_rate) ** years)\n\n    return final_amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    result = 2.4 * (3.7 + 1.3) / 2\n    return result\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_wage = 78 / 6.5\n    weekly_pay = hourly_wage * 8 * 5  # Assuming a week has 5 working days\n    debt_remaining = 700 - weekly_pay\n\n    return debt_remaining\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    \n    start_time = end_time - work_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    for A in range(10):\n        if 9 * (A * (1111) + 10 * (A + 11)) == A * (10000) + A * (1000) + A * (100) + A * (10) + A:\n            return A\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        digits = str(number)\n        if digits.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    weeks_to_days_arjun = 2 * 7\n    days_yahya = 10\n    ans = lcm(weeks_to_days_arjun, days_yahya)\n    return ans\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n    \n    # Distances in meters\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - distance1 - distance2  # Total distance - (distance1 + distance2)\n    \n    # Time = Distance / Speed\n    \n    # Time for each segment in seconds\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    # Total time = Sum of times for all segments\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for d1 in range(10):\n        for d4 in range(10):\n            number = int(f\"2{d1}9{d4}\")\n            if number % 3 == 0 and number % 5 == 0:\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_apart = 7\n\n    num_trees = (highway_length - distance_apart) // distance_apart\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    return 34 + 2 - 11 + 14\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note_value = 50\n    loss = cost_of_shoes + fake_note_value\n    return loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5 / 7) * 112\n    return result\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Treating students A, B, and C as a single unit, we have 8 units to arrange.\n    units_arrangement = factorial(8)\n    \n    # The students A, B, and C can arrange themselves in 3! different ways.\n    abc_arrangement = factorial(3)\n    \n    # The total number of arrangements is the product of the two.\n    total_arrangements = units_arrangement * abc_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Starting with the digit '1', the smallest number will also start with '1'\n    # To get the smallest number after removing 46 digits, we should remove\n    # digits starting from the end just before the last '1' appears in sequence \"2930\"\n    # This means we get to keep \"123456789101112...2829\" and part of \"30\" after 29,\n    # as removing the last '3' and '0' from \"30\" would result in '0', which is not allowed\n\n    sequence = ''\n    for i in range(1, 31):  # Generate the number sequence up to 30 (inclusive)\n        sequence += str(i)\n\n    # To ensure the smallest number, we keep the last '1' at the end of \"30\",\n    #  which means we can remove the '3' and following 45 digits to its left\n    position_to_keep = sequence.rfind('1', 0, len(sequence) - 2) + 1\n    smallest_number_with_last_1 = sequence[:position_to_keep] + sequence[-1]\n    \n    # Number of digits to be removed from the end, excluding the last '1'\n    remove_count = 46 - 1\n    # Remove the last digit for count times\n    smallest_number = smallest_number_with_last_1[:-remove_count]\n    \n    # Since we are only interested in the answer, which is the smallest number, we return it\n    return int(smallest_number)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total_marbles = james + linda + ben\n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    return (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    ruler_length = 20\n    overlap_length = 3\n    num_rulers = 3\n\n    total_length = (num_rulers * ruler_length) - (overlap_length * (num_rulers - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Calculate time spent jogging and walking\n    jogging_hours = 1  # from 6:30 AM to 7:30 AM\n    walking_hours = 2  # from 7:30 AM to 9:30 AM\n    \n    # Calculate distance covered jogging and walking\n    jogging_speed_mph = 6\n    walking_speed_mph = 5\n    \n    jogging_distance = jogging_speed_mph * jogging_hours\n    walking_distance = walking_speed_mph * walking_hours\n    \n    # Calculate total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    recycle_ratio = 7\n    total_new_cups = 0\n\n    while used_cups >= recycle_ratio:\n        new_cups = used_cups // recycle_ratio\n        total_new_cups += new_cups\n        used_cups = used_cups % recycle_ratio + new_cups\n\n    return total_new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    return 2000 - 222\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # Convert plot length from meters to centimeters\n    planting_distance_cm = 15  # Distance between each cauliflower plant in centimeters\n    first_offset_cm = 20  # Distance from the start to the first cauliflower plant in centimeters\n    cauliflower_width_cm = 45  # Width of one cauliflower plant in centimeters\n\n    # Since the cauliflowers can't overlap, the space taken by each cauliflower is\n    # the planting distance plus its width (except the last one which doesn't need the extra plant distance)\n    space_per_cauliflower_cm = planting_distance_cm + cauliflower_width_cm\n    \n    # Calculate the total available space for planting by subtracting the first offset\n    available_space_cm = plot_length_cm - first_offset_cm\n    \n    # Calculate the total number of cauliflowers by dividing the available space \n    # by the space taken by each cauliflower\n    num_cauliflowers = available_space_cm // space_per_cauliflower_cm\n    \n    return num_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_days = 6\n    total_pages = (14 * 3) + (9 * 2) + 12\n    average_pages_per_day = total_pages / total_days\n    return average_pages_per_day\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    a, b, c = 8, 12, 20\n    gcd_ab = gcd(a, b)\n    gcd_abc = gcd(gcd_ab, c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # symbols for members in the Badminton and Bowling clubs\n    B, b = symbols('B b')\n\n    # Equation for the original number of members\n    # Badminton Club had thrice as many members as the Bowling Club\n    equation1 = Eq(B, 3 * b)\n    # After leaving members, both clubs had the same number of members\n    equation2 = Eq(B - 36, b - 4)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (B, b))\n\n    # The number of members in each club after members left\n    end_members_Badminton = solutions[B] - 36\n    end_members_Bowling = solutions[b] - 4\n\n    return end_members_Badminton, end_members_Bowling\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * (10**2)  # speed of sound in meters per second\n    distance = 1.5 * (10**3)  # distance in meters (1.5 kilometers)\n\n    time = distance / speed_of_sound  # time in seconds\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    num_factors = 0\n\n    for i in range(1, number + 1):\n        if number % i == 0:\n            num_factors += 1\n\n    return num_factors\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    ans = number1 - number2\n    return ans\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    # Total value of numbers is 504\n    # Average value is 126\n    # Thus, we have 504 / 126 = 4 cards\n    \n    # The difference between the greatest and smallest is 6\n    # Let the smallest number be x, then the next cards would be x+2, x+4, x+6\n    # Because each card has a different 3 digit odd number.\n    \n    # The sum of these numbers should equal 504\n    # So, x + (x + 2) + (x + 4) + (x + 6) = 504\n    \n    # Simplifying the equation we get 4x + 12 = 504\n    # Solve for x (the smallest number)\n    x = (504 - 12) / 4\n\n    return int(x)\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n\n    for i in range(301, 1000):\n        while i % 2 == 0:\n            count_2 += 1\n            i = i // 2\n        while i % 5 == 0:\n            count_5 += 1\n            i = i // 5\n\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_fractions = sum(1 / i for i in range(10, 20))\n    return int(sum_fractions)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    return 2\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):\n        if i % 6 == 0 and (i - 1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speed of the golden rabbit and the sea turtle\n    speed_rabbit = 330  # m/min\n    speed_turtle = 30   # m/min\n\n    # Distance of the race\n    total_distance = 6990  # meters\n\n    # Total time the rabbit ran before sleeping\n    rabbit_run_time_before_sleep = 10  # minutes\n\n    # Distance the rabbit ran before sleeping\n    rabbit_distance_before_sleep = speed_rabbit * rabbit_run_time_before_sleep\n\n    # Total sleeping time of the rabbit\n    rabbit_sleep_time = 215  # minutes\n\n    # Since rabbit is sleeping, let's calculate the distance covered by the turtle in that time\n    turtle_distance_during_rabbit_sleep = speed_turtle * (rabbit_sleep_time + rabbit_run_time_before_sleep)\n\n    # Check if the turtle finished the race during the rabbit's sleep\n    if turtle_distance_during_rabbit_sleep >= total_distance:\n        # If the turtle finished the race, find the distance between them\n        finish_time = total_distance / speed_turtle\n        remaining_distance = speed_rabbit * finish_time - rabbit_distance_before_sleep\n        winner = \"turtle\"\n    else:\n        # Calculate how much distance is left for the rabbit after waking up\n        rabbit_remaining_distance = total_distance - rabbit_distance_before_sleep\n        \n        # Calculate the time it takes for the rabbit to finish the remaining distance\n        rabbit_time_to_finish = rabbit_remaining_distance / speed_rabbit\n        \n        # Total time the turtle ran until the rabbit finishes\n        turtle_total_run_time = rabbit_time_to_finish + rabbit_run_time_before_sleep + rabbit_sleep_time\n        \n        # Total distance covered by the turtle when the rabbit finishes the race\n        turtle_distance_when_rabbit_finishes = turtle_total_run_time * speed_turtle\n        \n        # Check if the turtle finished the race\n        if turtle_distance_when_rabbit_finishes >= total_distance:\n            # If did, the winner is the rabbit, and check for the distance between them\n            winner = \"rabbit\"\n            distance_between = 0\n        else:\n            # If it did not, the rabbit is the winner and calculate the distance\n            winner = \"rabbit\"\n            distance_between = total_distance - turtle_distance_when_rabbit_finishes\n\n    return (winner, distance_between)\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pupils = 1690\n    boys_more_than_girls = 90\n    girls_ratio_swim = 31\n    girls_ratio_not_swim = 49\n    boys_diff_swim_not_swim = 120\n\n    # Define symbols for the number of girls and boys\n    G, B = symbols('G B')\n\n    # Equations based on the problem statement\n    eq1 = Eq(B, G + boys_more_than_girls)  # There are 90 more boys than girls\n    eq2 = Eq(G + B, total_pupils)  # Sum of boys and girls is 1690\n    \n    # Solve the equations to find the number of girls (G) and boys (B)\n    solutions = solve((eq1, eq2), (G, B))\n    girls = solutions[G]\n    boys = solutions[B]\n\n    # Find the number of girls who can swim and who cannot\n    girls_can_swim = (girls_ratio_swim / (girls_ratio_swim + girls_ratio_not_swim)) * girls\n    girls_cannot_swim = girls - girls_can_swim\n\n    # Find the number of boys who can swim and who cannot. Boys who can swim = x, boys who cannot swim = x + 120\n    boys_cannot_swim = boys - boys_diff_swim_not_swim / 2\n    boys_can_swim = boys - boys_cannot_swim\n\n    # Total pupils who cannot swim is the sum of girls and boys who cannot swim\n    pupils_cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return int(pupils_cannot_swim)\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    only_english = 20 - 15\n    only_math = 35 - 15\n    both = 15\n    total_students = only_english + only_math + both\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    annual_increase = 0.10\n\n    # Calculate the amount before the last increase (2019)\n    amount_2019 = final_amount / (1 + annual_increase)\n\n    # Calculate the amount before the previous increase (2018)\n    amount_2018 = amount_2019 / (1 + annual_increase)\n\n    return amount_2018\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n    \n    # Total number of different ways to arrange 7 people\n    total_arrangements = factorial(7)\n    \n    # The number of ways 3 specific people can stand next to each other\n    # We treat these 3 people as a single unit first, so we have 5 units to arrange (4 individuals + 1 group)\n    grouped_arrangements = factorial(5)\n    \n    # Multiply by the number of ways to arrange the 3 people within the group\n    arrangements_within_group = factorial(3)\n    \n    # Total number of ways 3 specific people can stand next to each other\n    total_grouped_arrangements = grouped_arrangements * arrangements_within_group\n    \n    # Subtract the number of arrangements where the 3 specific people are next to each other\n    # from the total number of arrangements to get the number of arrangements where they don't\n    ans = total_arrangements - total_grouped_arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    nth_term = 25\n    number_of_rows = 25\n    difference = (nth_term - first_term) / (4 - 1)  # (nth row - first row) / (n - 1)\n\n    # Calculate the last term using arithmetic progression formula:\n    # last_term = first_term + (number_of_rows - 1) * difference\n    last_term = first_term + (number_of_rows - 1) * difference\n\n    # Calculate the sum of the arithmetic progression\n    # sum = (number_of_rows / 2) * (first_term + last_term)\n    total_athletes = (number_of_rows / 2) * (first_term + last_term)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1/2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    n = 789\n    count = 0\n    current_power = 5\n    while n // current_power != 0:\n        count += n // current_power\n        current_power *= 5\n    return count\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term + 1)\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let x be the number of students in Team B\n    total_score_A = 76 * 20\n    average_combined = 70\n    # Total combined score = average_combined * (20 + x)\n    # Total combined score also equals total_score_A + 67 * x\n    # Therefore, we have the following equation:\n    # 70 * (20 + x) = total_score_A + 67 * x\n    # Solve for x:\n    x = (total_score_A - average_combined * 20) / (average_combined - 67)\n    return int(x)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    min_participants_per_school = 3\n    # Using the Pigeonhole Principle, we add 1 to the divisor to ensure \n    # that even if all schools have 3 participants, one school will have at least 4\n    max_schools = participants // (min_participants_per_school + 1)\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n\n    total_cost = cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    # Iterate through each hour of the day\n    for hour in range(24):\n        # Check if the hour contains a '4'\n        if '4' in str(hour):\n            # If hour contains a '4', every minute of that hour will have at least two '4's\n            count += 60\n        else:\n            # If hour does not contain a '4', we check each minute\n            for minute in range(60):\n                # Check if the minute contains a '4'\n                if '4' in str(minute):\n                    # If minute contains a '4', increment count\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    min_product = float('inf')\n    \n    for perm in permutations(digits, 6):\n        num1 = perm[0] * 100 + perm[1] * 10 + perm[2]\n        num2 = perm[3] * 100 + perm[4] * 10 + perm[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n            \n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    # The maximum value for ABCD is 9876 (with digits 9,8,7,6) since A-G are from 1-9\n    max_abcd = 9876\n    # The minimum value for EFG is 123 since A-G are from 1-9\n    min_efg = 123\n    # Initially set the largest_product and least_product as None\n    largest_product = None\n    least_product = None\n\n    # Generate all permutations of 1-9 digits\n    for perm in permutations(range(1, 10), 7):\n        A, B, C, D, E, F, G = perm\n        # Calculate the 4-digit and 3-digit numbers\n        ABCD = A*1000 + B*100 + C*10 + D\n        EFG = E*100 + F*10 + G\n        # Check if the sum of the two numbers is 1993\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            # Update the largest and least products if necessary\n            if largest_product is None or product > largest_product:\n                largest_product = product\n            if least_product is None or product < least_product:\n                least_product = product\n\n    # Return the difference between the largest and least products\n    return largest_product - least_product\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    # Maximum value on a die is 6, thus to minimize the number of rolls\n    # we aim to get 6 each time\n    target_position = 25\n    max_die_value = 6\n    \n    # Calculate minimum rolls needed, use ceil to round up since\n    # you can't roll a die a fraction of a time\n    from math import ceil\n    min_rolls = ceil(target_position / max_die_value)\n    \n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 19\n    last_term = 2019\n    common_difference = 50\n\n    # Number of terms in the arithmetic sequence\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Sum of the arithmetic sequence\n    sum_seq = (n * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens_digit in range(1, 10):  # The tens digit should be at least 1 for a 2-digit number\n        for ones_digit in range(10):\n            if tens_digit + ones_digit == 15:\n                return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb_rate = 40\n    slip_back = 10\n    net_climb = climb_rate - slip_back\n    hours = 0\n    \n    while depth > 0:\n        hours += 1\n        depth -= net_climb \n        if depth <= 0:\n            break\n        depth += slip_back\n    \n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "def solution():\n    from sympy import isprime\n\n    # Start checking from 29 downwards since we want the largest prime < 30\n    for number in range(29, 0, -1):\n        if isprime(number):\n            return number\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    original_typists = 5\n    sick_typists = 2\n    active_typists = original_typists - sick_typists\n    original_time_minutes = 20\n    original_word_count = 6000\n    target_word_count = 9000\n    \n    # Find the rate of typing per typist per minute\n    rate_per_typist_per_minute = original_word_count / (original_typists * original_time_minutes)\n    \n    # Calculate the time needed for the remaining typists to type out 9000 words\n    time_needed = target_word_count / (active_typists * rate_per_typist_per_minute)\n    \n    return time_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    price_per_cabbage = 0.96\n    total_cabbages = 8\n    total_lettuces = 6\n    \n    total_cost = price_per_cabbage * total_cabbages\n    price_per_lettuce = total_cost / total_lettuces\n\n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    original_distance = 30   # The original distance between the first and last potted plant\n    original_number_of_plants = 11   # The original number of potted plants\n    new_number_of_plants = 3   # The number of potted plants after removal\n\n    # The original number of intervals is one less than the number of plants\n    original_number_of_intervals = original_number_of_plants - 1\n    \n    # The new number of intervals is one less than the new number of plants\n    new_number_of_intervals = new_number_of_plants - 1\n    \n    # The new interval is the original distance divided by the new number of intervals\n    new_interval = original_distance / new_number_of_intervals\n\n    return new_interval\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13 * 60 + 52  # convert 13:52 to total minutes\n    end_time = 14 * 60 + 5     # convert 14:05 to total minutes\n    duration_in_minutes = end_time - start_time\n\n    cost_per_minute = 14  # cost per minute in pence\n    total_cost = duration_in_minutes * cost_per_minute\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    total_sum = sum(divisors(20))\n    return total_sum\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    percentage = 40\n    total_amount = 320\n    \n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # The pattern for a three-digit number is ABC where A, B, C = 2 or 3\n    # Possible combinations for at least one 2 and one 3:\n    # 232, 233, 322, 323, 332, 333, 223, 322, 232, which is 3^3 - 2\n    # Deduct case where all digits are the same, which is 2 (222 and 333)\n    ans = 3**3 - 2\n    return ans\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('17 Oct 2023', '%d %b %Y')\n    end_date = datetime.strptime('20 Dec 2023', '%d %b %Y')\n    \n    sundays_count = 0\n    current_date = start_date\n    \n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # 6 corresponds to Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)\n        \n    return sundays_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_price = pen_price + ruler_price\n    return total_price\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    ans = 251 * 27\n    return ans\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n    equation1 = Eq(4*apple + 3*peach, 10)\n    equation2 = Eq(2*apple + 2*peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n    \n    # Time for traffic lights in seconds\n    first_light_time = 30              # half a minute\n    second_light_time = 45             # 0.75 minutes\n    third_light_min_time = 30          # at least 30 seconds\n\n    # Each traffic light turns green every 9 minutes so all three should have\n    # a common cycle with this period in seconds\n    common_cycle = 9 * 60              # 9 minutes converted to seconds\n\n    # Calculate least common multiple for the first two traffic lights\n    lcm_first_second = lcm(first_light_time, second_light_time)\n\n    # Now we need to find the third light time that will form a common cycle\n    # with the 9-minute period and is also a multiple of the lcm of first two lights\n    for third_light_time in range(third_light_min_time, common_cycle + 1, first_light_time):\n        if lcm(lcm_first_second, third_light_time) == common_cycle:\n            return third_light_time\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    ways = factorial(5)\n    \n    return ways\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the cost of a strawberry tart and a be the cost of an apple tart\n    s, a = symbols('s a')\n\n    # The lady bought twice as many apple tarts as strawberry tarts\n    # She spent an equal amount on each type, so cost is the same: s * number_of_strawberry = 2a * number_of_apple\n    # A strawberry tart cost $0.40 more than an apple tart: s = a + 0.40\n    # She paid a total of $40: number_of_strawberry * s + number_of_apple * a = 40\n    # Because she bought twice as many apples as strawberries: number_of_apple = 2 * number_of_strawberry\n    # Let's use number_of_strawberry as n and replace number_of_apple with 2n\n    # We get the equation: n * s + 2n * a = 40\n\n    # From the two relationships we have: s = a + 0.40 and n * (a + 0.40) + 2n * a = 40\n    # Substituting s in the total cost equation we get: n * (a + 0.40) + 2 * n * a = 40\n    # Simplifying: 3 * n * a + 0.4 * n = 40\n\n    # Use n = number_of_strawberry and a = cost_of_apple_tart\n    # Let's express everything in terms of 'a'\n    n = (40 - 0.4 * n) / (3 * a)\n    # Now let's solve this equation for 'n' considering that 2a = s - 0.4\n    equation = 3 * a * n + 0.4 * n - 40\n\n    # We use another equation that comes from s = a + 0.4\n    equation2 = Eq(s, a + 0.4)\n\n    solutions = solve((equation, equation2), (n, a, s))\n\n    # Because she bought twice as many apple tarts, we need to multiply the number of strawberry tarts by 3\n    total_tarts = 3 * solutions[n]\n\n    return int(total_tarts)\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase_amount = new_price - original_price\n    percentage_increase = (increase_amount / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces = symbols('total_pieces')\n    fitted_after_first_day = 0.20 * total_pieces\n    fitted_after_second_day = fitted_after_first_day + 60\n    unfitted_after_second_day = total_pieces - fitted_after_second_day\n\n    equation = Eq(fitted_after_second_day / unfitted_after_second_day, 2/5)\n    \n    total_pieces_solution = solve(equation, total_pieces)\n\n    return total_pieces_solution[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n\n    children_between_henry_and_tony = total_children - (henry_position_from_left + tony_position_from_right - 1)\n    \n    return children_between_henry_and_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    millimetres_in_a_metre = 1000\n    metres = 2\n    millimetres = metres * millimetres_in_a_metre\n    return millimetres\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    not_multiple_of_ten = [i for i in range(1, 101) if i % 10 != 0]\n\n    ans = (len(not_multiple_of_ten) / total_numbers) * 100\n    return ans\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    original_loan = 4\n    paid_back = original_loan * 0.30\n    still_owed = original_loan - paid_back\n\n    return still_owed\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Number of legs for each animal type\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Number of each animal type\n    cats = 2\n    dogs = 2\n    rabbits = 1\n\n    # Total number of legs for cats, dogs, and rabbit\n    total_legs_non_birds = (cats * cat_legs) + (dogs * dog_legs) + (rabbits * rabbit_legs)\n\n    # Remaining legs for birds\n    remaining_legs_for_birds = 28 - total_legs_non_birds\n\n    # Calculating number of birds\n    birds = remaining_legs_for_birds // bird_legs\n\n    return birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km per hour\n    rose_speed = 10  # Rose's speed in km per hour\n    time = 10  # time they meet in hours\n\n    # Distance = Speed * Time\n    jack_distance = jack_speed * time\n    rose_distance = rose_speed * time\n\n    # Total distance between Town A and Town B\n    total_distance = jack_distance + rose_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    # Melvin's original number of cards\n    melvin_original = 40\n    \n    # Melvin gained from Nelson, 5/8 of his original number of cards\n    melvin_gained_first = (5/8) * melvin_original\n    \n    # Both Melvin and Nelson lost to Oliver, 1/4 of Melvin's original number of cards each\n    loss_to_oliver_each = (1/4) * melvin_original\n    melvin_lost_to_oliver = loss_to_oliver_each\n    nelson_lost_to_oliver = loss_to_oliver_each\n    \n    # Melvin's balance after first gain and loss\n    melvin_balance_after_first = melvin_original + melvin_gained_first - melvin_lost_to_oliver\n    \n    # In the final round, Melvin gained 1/8 of his original number of cards from Nelson\n    melvin_gained_final = (1/8) * melvin_original\n    \n    # Melvin's final balance of cards\n    melvin_final = melvin_balance_after_first + melvin_gained_final\n    \n    # Since they all have the same number of cards at the end, we can assign Melvin's final balance to Nelson and Oliver\n    nelson_final = melvin_final\n    oliver_final = melvin_final\n    \n    # Calculating Nelson's original number of cards\n    # Nelson's original = Nelson's final + lost to Oliver in first round - Melvin's gain in round 1 - Melvin's gain in final round\n    nelson_original = nelson_final + nelson_lost_to_oliver - melvin_gained_first - melvin_gained_final\n    \n    # The original total number of cards is the sum of the original cards of Melvin, Nelson, and Oliver\n    total_original = melvin_original + nelson_original + oliver_final\n    \n    return total_original\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    # List of cards with their respective numbers\n    cards = [6, 12, 35, 175, 245, 300]\n    \n    # Find all possible combinations of 2 cards (for Candy) and 3 cards (for Candice)\n    candy_combinations = list(combinations(cards, 2))\n    candice_combinations = list(combinations(cards, 3))\n   \n    # Store the products of each combination\n    candy_products = {prod(c): c for c in candy_combinations}\n    candice_products = {prod(c): c for c in candice_combinations}\n    \n    # Find the common product\n    common_product = set(candy_products.keys()).intersection(set(candice_products.keys()))\n    \n    # Assuming there is only one common product\n    common_product = common_product.pop()\n   \n    # Get the cards chosen by Candy and Candice\n    candy_chosen = candy_products[common_product]\n    candice_chosen = candice_products[common_product]\n   \n    # Find the card not picked, by checking the difference between all cards and the chosen ones\n    all_chosen = set(candy_chosen).union(set(candice_chosen))\n    not_picked = set(cards).difference(all_chosen).pop()\n\n    return not_picked\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = sum([i for i in range(1, 25) if 24 % i == 0 and i % 2 != 0])\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let x be the age Polly is when her age equals the sum of her children's ages.\n    # When Polly is x years old, her first child is x - 20 years old,\n    # the second child is x - 20 - 2 years old, and\n    # the third child is x - 20 - 4 years old.\n\n    # Set up the equation where Polly's age is the sum of her children's ages\n    # x = (x - 20) + (x - 20 - 2) + (x - 20 - 4)\n\n    # Simplify the equation:\n    # x = 3x - 66\n    # 2x = 66\n    # x = 33\n\n    # Polly will be 33 years old.\n    return 33\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = (num_terms * (first_term + last_term)) // 2\n\n    return total_sum\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    # Applying the law of addition and multiplication\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n    \n    # The result is the sum of the two parts\n    ans = part1 + part2\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20\n    multiple = 5\n\n    suitcase_weight = total_weight / (multiple - 1)\n\n    return suitcase_weight\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    combined_age_4_years_ago = 10\n    # Every year, each of the two dogs age by 1 year.\n    # So, in 4 years, the combined age will increase by 4 * 2 years.\n    increase_over_4_years = 4 * 2\n    combined_age_now = combined_age_4_years_ago + increase_over_4_years\n    # In another 2 years, the combined age will increase by 2 * 2 years.\n    increase_over_next_2_years = 2 * 2\n    combined_age_in_2_years = combined_age_now + increase_over_next_2_years\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # According to the problem, we have:\n    # y - x = 39 (1)\n    # x + y = 59 (2)\n    # We can solve these two equations to find the value of x\n\n    # Add equations (1) and (2)\n    # y - x + x + y = 39 + 59\n    # 2y = 98\n    # y = 49\n    # Now substitute the value of y in equation (2) to find x\n    # x + 49 = 59\n    # x = 59 - 49\n    x = 10\n\n    # x is the smaller number\n    return x\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m = symbols('m')\n    \n    # Converting the given expression into an equation\n    # According to given condition, \\overline{14m} = 8 * \\overline{1m} - 3\n    # Which means 140 + m = 8 * (10 + m) - 3\n    \n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n    \n    # Solving the equation for m\n    value_of_m = solve(equation, m)\n    \n    return value_of_m[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A * B, 30)\n    equation2 = Eq(B * C, 35)\n    equation3 = Eq(C * A, 42)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Since we're solving for natural numbers, we filter out non-natural solutions\n    natural_solutions = [s for s in solutions if all(x.is_integer and x > 0 for x in s)]\n\n    # There may be multiple solution sets due to the symmetry of the equations.\n    # Therefore, we return the sum of A, B and C for the first natural number solution set.\n    ans = sum(natural_solutions[0])\n\n    return ans\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\n# Example usage:\n# x = number of passengers in the beginning\n# y = number of passengers getting on at the stop\nans = solution(x, y)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percent_value = 15\n    total_amount = 340\n\n    ans = (percent_value / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n\n    while True:\n        justin_age += 1\n        mother_age += 1\n        years += 1\n        if mother_age == 3 * justin_age:\n            break\n\n    return years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    factorial_result = 1  # We start with the identity of multiplication\n    for i in range(1, 11):  # We want to calculate factorial of 10, so it goes from 1 to 10\n        factorial_result *= i  # Multiply by each number from 1 to 10\n    return factorial_result\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cora, qingle = symbols('cora qingle')\n    \n    # After Cora gives Qingle 8 sweets, Qingle will have 4 more sweets than Cora\n    equation = Eq(cora - 8, qingle + 8 - 4)\n    \n    # Solve the equation\n    solutions = solve(equation, (cora, qingle))\n    \n    # The difference in the number of sweets they have at first\n    difference = solutions[cora] - solutions[qingle]\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin, we know that b = 0.\n    # We can use the point (4, 8) to find the slope m.\n    \n    x1, y1 = 0, 0  # The origin\n    x2, y2 = 4, 8  # The given point\n    \n    # The slope m is given by the change in y divided by the change in x.\n    m = (y2 - y1) / (x2 - x1)\n    \n    # We know b = 0, so the equation is y = mx + b.\n    b = 0\n    \n    # Returning the equation as a string in the format requested.\n    equation = f\"y={m}x+{b}\"\n    return equation\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of seashells\n    # J before the exchange, E before the exchange\n    J, E = symbols('J E') \n\n    # Equation for initial ratio of seashells\n    equation1 = Eq(J, 5*E/7)\n\n    # Equation after Eric gives Jane 6 seashells\n    equation2 = Eq((J + 6)/(E - 6), 11/13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (J, E))\n\n    # Calculate the total number of seashells they have\n    total_seashells = solutions[J] + solutions[E]\n\n    return total_seashells.evalf()\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    warren_adds = 20\n    naida_subtracts = 1\n    \n    while warren_adds >= 1:\n        current_number += warren_adds\n        largest_number = max(largest_number, current_number)\n        current_number -= naida_subtracts\n        \n        warren_adds -= 1\n        naida_subtracts += 1\n    \n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    \n    combined_rate = first_faucet_rate + 3 * other_faucet_rate\n    time_to_fill = 1 / combined_rate\n    \n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    # Prime factors crucial for ending zeros are 2 and 5\n    # A zero is created by multiplication of 2 and 5\n    # We need to count the total number of 2's and 5's pairs in the prime factorization of the product\n\n    # Prime factorization of each number\n    prime_factors = {\n        48: {2: 4},         # 48 = 2^4 * 3\n        925: {5: 2},        # 925 = 5^2 * 37\n        38: {2: 1},         # 38 = 2 * 19\n        435: {5: 1}         # 435 = 5 * 3 * 29\n        # Note that other prime factors like 3, 19, 37, and 29 are not important for this task\n    }\n\n    # Count the total number of 2's and 5's\n    count_2 = sum(d[2] for d in prime_factors.values() if 2 in d)\n    count_5 = sum(d[5] for d in prime_factors.values() if 5 in d)\n\n    # Number of zeros at the end is determined by the minimum of (count of 2's, count of 5's)\n    # This is because a zero is produced by one pair of 2 and 5\n    num_zeros = min(count_2, count_5)\n\n    return num_zeros\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    even_permutations = [int(''.join(map(str, perm))) for perm in permutations(digits) if perm[-1] % 2 == 0]\n    smallest_even = min(even_permutations)\n    return smallest_even\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    overlapping_pupils = piano_pupils / 4\n    \n    neither = total_pupils - (piano_pupils + violin_pupils - overlapping_pupils)\n    return int(neither)\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    rate_of_interest = 0.05\n    time_in_years = 11\n\n    final_amount = principal * (1 + rate_of_interest * time_in_years)\n\n    return final_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    # Let x be the number of passengers at the start\n    # After the first stop: x - (2/5)*x passengers left on the bus\n    # After the second stop: (x - (2/5)*x) - (1/3)*(x - (2/5)*x) = 22 passengers left on the bus\n    \n    # Rearrange the equation to solve for x\n    # (x - (2/5)*x) - (1/3)*(x - (2/5)*x) = 22\n    # (3/5)*x - (1/3)*(3/5)*x = 22\n    # (3/5)*x * (1 - (1/3)) = 22\n    # (3/5)*x * (2/3) = 22\n    # x = 22 / ((3/5) * (2/3))\n    # x = 22 / (2/5)\n    # x = 22 * (5/2)\n    \n    x = 22 * (5/2)\n    \n    return int(x)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import sympy as sp\n\n    # The isosceles right triangle has legs of length 2.\n    # Let's use a coordinate system where the right angle is at the origin (0, 0),\n    # and the legs lie along the x and y axes.\n\n    # The area of the isosceles right triangle is\n    area_triangle = (2 * 2) / 2\n\n    # A quarter circle with radius 1 centered at the origin lies entirely within the triangle,\n    # and the area of this quarter circle is what we are interested in.\n    area_quarter_circle = sp.pi * (1**2) / 4\n\n    # The probability that a randomly chosen point is within the quarter circle, and thus\n    # at a distance of less than 1 from the right angle, is the ratio of the quarter circle's\n    # area to the triangle's area.\n    probability = area_quarter_circle / area_triangle\n\n    return float(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):  # First digit can't be zero\n        for D in range(1, 10):  # Last digit can't be zero and must be 4 times the first digit\n            if A == D * 1/4:\n                for B in range(1, 10):\n                    if B == A - 1:\n                        for C in range(1, 10):\n                            if C != A and C != B and C != D:\n                                original = 1000 * A + 100 * B + 10 * C + D\n                                reversed_num = 1000 * D + 100 * C + 10 * B + A\n                                if original * 4 == reversed_num:\n                                    ans = original\n                                    return ans\n    return None\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    final_result = 25\n    number_before_adding = final_result - 10\n    original_number = number_before_adding * 3\n\n    return original_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    ans = sum(range(1, 9))\n    return ans\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Time Hannah left school\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    \n    # Time Hannah caught the bus\n    time_caught_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    \n    # Time Hannah's bus trip ended\n    bus_trip_time = timedelta(minutes=18)\n    time_bus_trip_ended = time_caught_bus + bus_trip_time\n\n    # Time Hannah got home\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Calculate total walking time\n    walking_time_before_bus = time_caught_bus - time_left_school\n    walking_time_after_bus = time_got_home - time_bus_trip_ended\n    \n    total_walking_time = walking_time_before_bus + walking_time_after_bus\n    \n    # Answer should be in minutes\n    ans = total_walking_time.total_seconds() / 60\n    \n    return int(ans)\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_values = len(numbers) + 1  # Considering 'a' as the additional number\n    total_sum = mean_value * total_values  # sum of all numbers including 'a'\n    sum_of_known = sum(numbers)\n    a = total_sum - sum_of_known\n\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    left_side = 2030452\n    constant_terms = 30000 + 452\n\n    missing_number = (left_side - constant_terms) // 2\n\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    length_per_piece_cm = total_length_cm / 2\n    length_per_piece_m = length_per_piece_cm / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # There are 3 possible colors for the socks, hence by Pigeonhole principle,\n    # Lina needs to take out 3 + 1 socks to ensure she has at least one pair of the same color.\n    ans = 3 + 1\n    return ans\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7 # Including Victoria\n    rows_in_total = 1 + 1 + 8 # Including the row of Victoria\n    total_pupils = pupils_in_victoria_row * rows_in_total\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_for_remaining_test = total_marks_for_3_tests - 172\n    return marks_for_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown number\n    x = symbols('x')\n\n    # Build the equation based on the problem statement\n    equation = Eq((x + 3) / 4 * 9, 81)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # Since we expect a single solution for a linear equation, return that solution\n    return solutions[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    # Calculate the numerator\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    \n    # Calculate the denominator\n    denominator = sum(1 / ((11 + (i - 1)) * (20 - (i - 1))) for i in range(1, 6))\n    \n    # Calculate the final result\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    # Mr. Smith's mixed drink\n    sugar_mrs = 300 * 0.5 + 600 * 0.2 # mL of sugar\n    total_volume_mrs = 300 + 600       # total mL of drink\n\n    # Mrs. Smith's mixed drink\n    sugar_mrss = 700 * 0.1             # mL of sugar (without the x% sugar drink)\n    total_volume_mrss = 700 + 300      # total mL of drink (including the x% sugar drink)\n\n    # Let x be the sugar percentage in the second drink for Mrs. Smith\n    # Setting the percentage of sugar in both drinks equal to each other:\n    # (sugar_mrs / total_volume_mrs) = (sugar_mrss + 300 * (x / 100)) / total_volume_mrss\n    # Solve for x:\n    x = ((sugar_mrs / total_volume_mrs) * total_volume_mrss - sugar_mrss) / 3\n\n    return round(x, 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    return (17 - 2) / 5\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * (3/4)\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = remaining_after_lily * (1/3)\n    remaining_after_brother = remaining_after_lily - given_to_brother\n    return remaining_after_brother\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols\n    start_time, jog_speed = symbols('start_time jog_speed')\n    \n    # Given distance at specific time points\n    distance_at_8 = 6300  # distance at 8:00 am\n    distance_at_830 = 1800  # distance at 8:30 am\n    \n    # Equations based on the problem\n    # Distance = Speed * Time\n    # Time at 8:30 am is 0.5 hour after 8:00 am\n    # Equation for distance at 8:00 am\n    equation1 = Eq(distance_at_8, jog_speed * (0.5 - start_time))\n    # Equation for distance at 8:30 am\n    equation2 = Eq(distance_at_830, jog_speed * (0.5 - (start_time + 0.5)))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (start_time, jog_speed))\n\n    # Calculate the time he reaches his friend's house, which is when the distance is 0\n    # Time = Distance / Speed, so when Distance is 0, the time is the start_time\n    time_reach = solutions[start_time] + 0.5\n\n    # Since the start was at 8:00 am, we need to convert the time_reach to actual time\n    hours = int(time_reach)\n    minutes = int((time_reach - hours) * 60)\n    \n    # Time format to add with 8:00 am\n    additional_time = \"{:02}:{:02}\".format(hours, minutes)\n    \n    # Split the time to get hours and minutes\n    additional_hours, additional_minutes = map(int, additional_time.split(':'))\n    \n    # Since we know he started at 8:00 am, we just add the additional_time to 8:00 am\n    final_hour = 8 + additional_hours\n    final_minutes = 0 + additional_minutes\n    \n    # If minutes go above 60, adjust the hours and minutes accordingly\n    if final_minutes >= 60:\n        final_hour += final_minutes // 60\n        final_minutes = final_minutes % 60\n    \n    # Return the time in 24-hour format\n    return \"{:02d}:{:02d}\".format(final_hour, final_minutes)\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_10 = 10\n    kenny_age_diff = 2\n    kenny_current, brother_current = symbols('kenny_current brother_current')\n\n    # May is currently 7, so in 3 years\n    may_current = 7\n    kenny_in_3_years = kenny_current + 3\n    brother_in_3_years = brother_current + 3\n\n    # Statement:...the sum of the ages of my younger brother and I will be 3 times that of your age (when May is 10)\n    equation1 = Eq(kenny_in_3_years + brother_in_3_years, 3 * may_age_10)\n\n    # Kenny is 2 years older than his younger brother\n    equation2 = Eq(kenny_current, brother_current + kenny_age_diff)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (kenny_current, brother_current))\n\n    # Kenny's age difference with May\n    kenny_may_age_diff = solutions[kenny_current] - may_current\n\n    return kenny_may_age_diff\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Let m be the number of muffins and d be the number of donuts.\n    # Price for 1 muffin is $2 and for 1 donut is $10/7.\n    \n    # Since she bought 54 more donuts than muffins, \n    # m + 54 = d\n    \n    # She spent half of her money on donuts and half on muffins.\n    # Let x be the total money Amy had.\n    # Then (10/7 * d) * 1/2 = ((m * 2) * 1/2\n    # => (10/7 * (m + 54)) * 1/2 = (m * 2) * 1/2\n    # => 10/7 * (m + 54) = m * 2\n    # => 10*(m + 54) = 14*m\n    # => 10m + 540 = 14m\n    # => 4m = 540\n    # => m = 135\n    # Hence, d = m + 54 = 135 + 54 = 189\n    \n    # Amy spent half of her money on donuts which is 189 donuts,\n    # and the price for one donut is $10/7.\n    # Therefore, the total amount she spent on donuts is:\n    # (189 * (10/7)) / 2 = 1890/14 = 135\n    \n    # The amount she spent on donuts is half of what she had,\n    # so the total amount she had initially is twice that amount:\n    # x = 135 * 2 = 270\n    \n    return 270\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    distance_between_teeth = 30 / (9 - 4)  # Distance between 4th and 9th teeth is for 5 intervals\n    total_length_mm = distance_between_teeth * (100 - 1)  # There are 99 intervals between 100 teeth\n    total_length_cm = total_length_mm / 10  # Converting mm to cm\n\n    return total_length_cm\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Given values\n    total_weight_kg = 5\n    cost_price_pounds = 10\n    weight_per_bag_kg = 250 / 1000  # converting grams to kilograms\n    selling_price_per_bag_pence = 65\n    \n    # Calculate the number of bags\n    no_of_bags = total_weight_kg / weight_per_bag_kg\n    \n    # Convert cost price to pence\n    cost_price_pence = cost_price_pounds * 100\n    \n    # Calculate total selling price\n    total_selling_price_pence = no_of_bags * selling_price_per_bag_pence\n    \n    # Calculate profit in pence\n    profit_pence = total_selling_price_pence - cost_price_pence\n    \n    # Convert profit to pounds\n    profit_pounds = profit_pence / 100\n    \n    # Calculate percentage profit\n    percentage_profit = (profit_pounds / cost_price_pounds) * 100\n    \n    return round(percentage_profit, 2)\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    num_children = 5\n    \n    # If we want to maximize the number of apples one child gets, we need to minimize what the other children get.\n    # Since each child should get at least one apple, we distribute one apple to each of the four other children.\n    apples_for_others = 1 * (num_children - 1)\n    \n    # Subtract the apples given to others from the total to find the maximum for one child.\n    max_apples_for_one = total_apples - apples_for_others\n    \n    return max_apples_for_one\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    return 46563 + 9785 + 859\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_arrangements = 5!  # Total ways to arrange 5 people\n    adjacent_arrangements = 4! * 2  # Ways to arrange when 2 specific people stand together\n\n    non_adjacent_arrangements = total_arrangements - adjacent_arrangements\n\n    return non_adjacent_arrangements\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sold = total_vegetables * (2/3)\n    tuesday_sold = (total_vegetables - monday_sold) * (2/5)\n    return monday_sold, tuesday_sold\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Given\n    grandmother_age_in_2008 = 80\n    mum_age_in_1996 = 40\n\n    # Calculate the years when the given ages were reached\n    year_when_grandmother_was_80 = 2008\n    year_when_mum_was_40 = 1996\n\n    # Calculate the difference in years between the two events\n    years_difference = year_when_grandmother_was_80 - year_when_mum_was_40\n\n    # Calculate the age of the grandmother in the year when mum was 40\n    grandmother_age_when_mum_was_40 = grandmother_age_in_2008 - years_difference\n\n    # Mum's age when she was 25\n    mum_age_when_she_was_25 = 25\n\n    # Calculate the age of the grandmother when mum was 25\n    age_difference_between_mum_and_grandmother = mum_age_in_1996 - mum_age_when_she_was_25\n    grandmother_age_when_mum_was_25 = grandmother_age_when_mum_was_40 - age_difference_between_mum_and_grandmother\n\n    return grandmother_age_when_mum_was_25\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum_of_series = sum((-1)**(i-1) * (5 * i) for i in range(1, 172))\n    return sum_of_series\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    P, Q = symbols('P Q')\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n    \n    solutions = solve((equation1, equation2), (P, Q))\n    \n    return solutions[Q]\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # We want to ensure 16 balls of one color and 13 balls of another color.\n    # Let's consider the worst-case scenario. In the worst case, we're picking the balls in such an order\n    # that we're always getting the most color distributed set of balls.\n\n    # The worst-case scenario would be picking up 15 balls of each color first, because 16th of any\n    # would ensure we get 16 of that color. So, we can pick up to 15 of each of the 5 colors without satisfying the condition.\n    max_pick_without_satisfying = 15 * 5 \n\n    # Now, let's pick an additional 12 balls of one color, to reach 13 of that color.\n    # At this point, we have 15 balls of four colors and 27 of one color, but still don't have 16 of one color and 13 of another.\n\n    # Now, we pick another ball. This last ball, regardless of its color, will give us either 16 of that color\n    # (if it's the color of which we already have 15), or it will give us 13 of a color (if it's the color of which we have 27).\n    # So the total balls picked is the 75 already picked + 12 more of the same color + 1 more ball.\n\n    total_balls = max_pick_without_satisfying + 12 + 1\n\n    return total_balls\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # There are 5 identical ice-cream cones to distribute\n    # Each of Zyan, Xuan Ying, and SiCheng must get at least 1 ice-cream cone\n    # Let's denote the number of ice-cream cones each friend gets as z, x, and s respectively\n    # We know that z + x + s = 5, with the constraint that z, x, s >= 1\n    # Since each must get one cone, we can subtract 1 cone each to meet the constraint\n    # and then distribute the remaining (5 - 3 = 2) cones freely which is a problem of\n    # distributing 'n' identical items into 'r' distinct groups.\n    \n    # After giving 1 ice-cream cone to each, we have 2 ice-cream cones remaining to distribute\n    # This is equivalent to finding the number of non-negative integer solutions to:\n    # z + x + s = 2\n    \n    # This is an application of the \"Stars and Bars\" theorem (Theorem One, with n=k and k=r-1):\n    # The number of ways to distribute n identical items into r distinct groups\n    # is C(n+k-1, k) where C is the binomial coefficient\n    \n    # In this case, we have n=2 items (remaining cones) and r=3 groups (friends)\n    # and we need C(n+r-1, n) = C(2+3-1, 2) = C(4, 2)\n    \n    from math import comb\n    ans = comb(4, 2)\n    return ans\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(2 * table + 5 * chair, 220)\n    equation2 = Eq(table, 3 * chair)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, 3 * A)\n    equation3 = Eq(C + A, 10)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent_money = 1.55 + 2.25\n    remaining_ratio = 4/5\n    initial_money = spent_money / (1 - remaining_ratio)\n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 0.40 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    Joann_coins = 3\n    Sana_coins = 6\n    Nancy_coins = 8\n    \n    total_coins = Joann_coins + Sana_coins + Nancy_coins\n    \n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    lucas_to_mother_ratio = 3 / 5\n    mother_to_lucas_ratio = 5 / 3\n\n    mother_distance = remaining_distance / (1 + mother_to_lucas_ratio)\n    lucas_distance = total_distance - (mother_distance + remaining_distance)\n    \n    return lucas_distance\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    num_terms = 30\n\n    # Sum of an arithmetic series formula: n/2 * (2a + (n - 1) * d)\n    sum_of_terms = num_terms / 2 * (2 * first_term + (num_terms - 1) * common_difference)\n    \n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n\n    # Find the number of pizzas per person (unit rate)\n    unit_rate = pizzas_initial / people_initial\n\n    # Calculate the total number of pizzas needed for 35 people\n    pizzas_needed = unit_rate * people_final\n\n    return int(pizzas_needed) if pizzas_needed.is_integer() else round(pizzas_needed)\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_to_sister = total_biscuits * 1/4\n    left_for_freddie = total_biscuits - given_to_sister\n    return left_for_freddie\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Julie, Marion and Ethan's earnings\n    julie, marion, ethan = symbols('julie marion ethan')\n    \n    # Marion earns twice the amount Julie earns\n    equation1 = Eq(marion, 2 * julie)\n    \n    # Ethan earns 5 times the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)\n    \n    # The difference in pay between Marion and Ethan is 168\n    equation3 = Eq(ethan - marion, 168)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n    \n    # The total earnings of Julie, Marion and Ethan\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n    return total_earnings\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    big_class, small_class = symbols('big_class small_class')\n\n    # Equations based on the problem statement\n    equation1 = Eq(2 * big_class + 2 * small_class, 48)  # Total number of apples\n    equation2 = Eq(3 * big_class + 2 * small_class, 55)  # Total number of oranges\n\n    solutions = solve((equation1, equation2), (big_class, small_class))\n\n    return solutions[small_class]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    from math import sqrt, floor\n\n    max_val = 2016 * 72\n    count = 0\n    for i in range(1, floor(sqrt(max_val)) + 1):\n        if i ** 2 <= max_val and (i ** 2) % 72 == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    result = solve_congruence(*congruences)\n\n    return result[0]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    percent_change = ((new_value - original_value) / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made_with_40g = 100\n    desired_cookies = 150\n    butter_per_cookie = 40 / cookies_made_with_40g  # Calculate grams of butter needed for one cookie\n    butter_needed = butter_per_cookie * desired_cookies  # Calculate total grams of butter needed\n\n    return butter_needed\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let danny's current age be d and efron's current age be e\n    d, e, n = symbols('d e n')\n    \n    # creating equations based on the problem statement\n    equation1 = Eq(d - e, 30)       # Efron is 30 years younger than Danny\n    equation2 = Eq(d / e, 8/3)      # current ratio of their ages is 8:3\n    \n    # After n years their ages will be d+n and e+n respectively\n    # New ratio of their ages will be (d+n)/(e+n) = 5/3\n    equation3 = Eq((d + n) / (e + n), 5/3)\n    \n    # solving the set of equations for d, e and n\n    solutions = solve((equation1, equation2, equation3), (d, e, n))\n    \n    # We return the number of years 'n' after which the ratio becomes 5:3\n    return solutions[n]\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    teams = 16\n    rounds = 0\n\n    while teams > 1:\n        teams /= 2\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # Ways to choose one pencil and one ruler\n    pencil_ruler_ways = pencils * rulers\n    # Ways to choose one ruler and one pen\n    ruler_pen_ways = rulers * pens\n    # Ways to choose one pen and one pencil\n    pen_pencil_ways = pens * pencils\n\n    # Total ways to choose any two items\n    total_ways = pencil_ruler_ways + ruler_pen_ways + pen_pencil_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Number of games played in the group stage\n    # Each group of 4 teams plays a single round-robin tournament, \n    # which means each team plays 3 games, so the group plays 3*4/2 games\n    # There are 8 groups, so we multiply by 8.\n    group_games = 8 * (3 * 4 // 2)\n    \n    # Number of games in the knockout round\n    # Top 16: 16 teams, 8 games\n    # Top 8: 8 teams, 4 games\n    # Top 4: 4 teams, 2 games\n    # Top 2: 2 teams, 1 game\n    # Third place match: 1 game\n    knockout_games = 8 + 4 + 2 + 1 + 1\n    \n    total_games = group_games + knockout_games\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    ans = 0\n    for digit_2 in range(1, 10):  # second digit must be 1 through 9, the first digit cannot be more than 9\n        digit_1 = 1 + 2 * digit_2\n        if digit_1 > 9:\n            continue  # if the first digit is greater than 9, skip\n        for digit_3 in range(0, 10):  # third digit can be 0 through 9\n            if 9 < (digit_1 + digit_2 + digit_3) < 14:\n                ans += 1\n    return ans\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    equation1 = Eq(ball + racket, 30)\n    equation2 = Eq(racket, ball + 28)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    n = 1\n    while n * (n - 1) // 2 != 15:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    n = 224\n    i = 1\n    factors = 0\n    while i <= n:\n        if n % i == 0:\n            factors += 1\n        i += 1\n    ans = factors\n    return ans\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / 0.7\n    return number\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    total_ways = pencil_colours * ruler_colours * pen_colours\n    return total_ways\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_points = 44\n\n    # Let x be the number of correctly answered questions\n    # Then total_questions - x is the number of questions answered incorrectly\n    # The total score is the score from correct answers plus the score from incorrect answers\n    # correct_points * x + incorrect_points * (total_questions - x) = total_points\n    # Then we can solve for x\n    for x in range(total_questions + 1):\n        if correct_points * x + incorrect_points * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, t_shirt = symbols('shorts t_shirt')\n\n    equation1 = Eq(2 * shorts + 3 * t_shirt, 26)\n    equation2 = Eq(2 * shorts + 5 * t_shirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, t_shirt))\n\n    return solutions[t_shirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    # Let the number of triangles be T\n    # Let the number of quadrilaterals be Q\n    # Let the number of pentagons be P (=2)\n    P = 2\n    sides = 394\n\n    # Each triangle has 3 sides, each quadrilateral has 4 sides, and each pentagon has 5 sides\n    # Total sides = 3T + 4Q + 5P\n    # We know that Q = T + 82, so we can substitute Q for T\n    # We also know the total number of sides is 394, so we can set up the equation:\n    # 3T + 4Q + 5P = 394\n    # Substituting Q for T gives:\n    # 3T + 4(T + 82) + 5(2) = 394\n    # Solving for T:\n\n    T = (sides - 5 * P - 4 * 82) // (3 + 4)  # Integer division because the number of shapes must be an integer\n    Q = T + 82\n\n    return Q\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    return sum(numbers)\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):  # Tens place can be from 1 to 9\n        ones = tens - 3\n        if 0 <= ones < tens:  # Ones place must be 3 less than tens and non-negative\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n\n    third_term = first_term + 2 * common_difference\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets Rachel and Alice have\n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces of sweet, they would have the same number of sweets\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If they both eat 8 pieces of sweet, Rachel has 3 times as many pieces left over as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of sweets originally\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    num_posts = 4\n    distance_between_posts = 25\n    total_distance = (num_posts - 1) * distance_between_posts\n    \n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm_value = 3 * 5 * 7  # Least common multiple (LCM) of 3, 5, and 7\n    for i in range(100, 1000):\n        if i % lcm_value == 0 and str(i).startswith('6'):\n            return i\n    return None\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Total number of students\n    total_students = 150\n    # Total number of teams\n    total_teams = total_students // 3\n\n    # Given information\n    teams_with_1_boy = 15\n    teams_with_2_or_more_boys = 27\n\n    # Calculate the number of all-boy teams and all-girl teams\n    all_boy_teams = teams_with_2_or_more_boys - teams_with_1_boy\n    all_girl_teams = all_boy_teams // 2\n\n    # Calculate the number of teams with exactly one girl\n    teams_with_1_girl = total_teams - (teams_with_1_boy + teams_with_2_or_more_boys + all_girl_teams)\n\n    # Calculate the number of girls\n    girls_in_all_girl_teams = all_girl_teams * 3\n    girls_in_1_girl_teams = teams_with_1_girl * 1\n\n    total_girls = girls_in_all_girl_teams + girls_in_1_girl_teams\n\n    return total_girls\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, -2 + 3 * pears)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # 1 dog = 8 rabbits = 8 * 2 chickens\n    # Therefore, 1 dog = 16 chickens\n    ans = 8 * 2\n    return ans\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # To ensure a matching pair (either blue or green), Dilly can take out gloves one by one.\n    # After taking out 4 gloves, there is a possibility that she takes out all the 4 right-hand gloves.\n    # Since there are more green gloves than blue, taking the 5th glove guarantees a matching pair of green gloves.\n    \n    return 5\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert numbers from base 7 to base 10\n    num1_base10 = int(str(61), 7)\n    num2_base10 = int(str(34), 7)\n    \n    # Perform the subtraction in base 10\n    result_base10 = num1_base10 - num2_base10\n    \n    # Convert the result back to base 7\n    if result_base10 == 0:\n        ans = '0'\n    else:\n        ans = ''\n        while result_base10 > 0:\n            ans = str(result_base10 % 7) + ans\n            result_base10 //= 7\n    \n    return ans\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # The distance does not change.\n    # Let d be the distance from Town A to Town B\n    # If Ben cycles at 10 km/h, he arrives at 10 am. Let t be the time he starts in hours.\n    # d = 10 km/h * (10 am - t)\n\n    # If Ben cycles at 15 km/h, he arrives at 8 am.\n    # d = 15 km/h * (8 am - t)\n\n    # Equating the two expressions for d gives:\n    # 10 * (10 - t) = 15 * (8 - t) \n    # Solving for t gives t = 6 am\n\n    # We want to find the speed required to arrive at 9 am.\n    # Let s be the required speed\n    # d = s km/h * (9 am - 6 am)\n    # d = 3 * s\n    \n    # Now we know that d = 10 * 4 from the first condition (d = 10 km/h * (10 am - 6 am))\n    # So we can equate 3 * s to 40 km to find s:\n    # 3 * s = 40\n    # s = 40 / 3\n\n    s = 40 / 3\n    return s\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies = 5 * 12\n    total_students = 5 + 1\n    candies_each = total_candies // total_students\n    return candies_each\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    for cards in range(1, 4*5*7):  # we do not need to check numbers higher than the product of the divisors\n        if all([cards % 4 == 3, cards % 5 == 4, cards % 7 == 6]):\n            return cards\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120  # Initial cost of the bike\n    depreciation_rate = 0.04  # Depreciation rate per year\n    years = 5  # Number of years\n\n    # Calculate the final value after depreciation\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    letters = 'REVISE'\n    freq = {char:letters.count(char) for char in set(letters)}\n    denominator = 1\n    for key in freq:\n        denominator *= factorial(freq[key])\n    ans = factorial(len(letters)) // denominator\n    return ans\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    # Starting with a minimal square with side length of 1 (one boy), increasing by 2 layers each step (one for boys, one for girls)\n    side_length = 1\n    total_boys = 1  # The first boy in the center\n    total_girls = 0\n\n    # Difference given in the problem\n    boy_girl_diff = 52\n\n    # As long as the difference between boys and girls does not equal the required difference, keep adding layers\n    while (total_boys - total_girls) != boy_girl_diff:\n        side_length += 2\n        # Add boys on the outer layer\n        total_boys += side_length * 4 - 4  # Each new layer of boys contains side_length * 4 - 4 boys (corners are counted once)\n        side_length += 2\n        # Add girls on the next inner layer\n        total_girls += (side_length - 2) * 4 - 4  # We subtract 2 from side_length to account for the new layer and not count corners\n\n    # Calculate the total number of students\n    total_students = total_boys + total_girls\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, yuna = symbols('eugene yuna')\n\n    # Create the equations based on the problem statements\n    equation1 = Eq(eugene, 3 * yuna)\n    equation2 = Eq(yuna + 76, 7/9 * (eugene))\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (eugene, yuna))\n\n    return solution[eugene]\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    return 285\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_percentage = 35\n    sale_price = normal_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # The sum of the digits of a number is divisible by 9 if the number itself is divisible by 9\n    # So we need to find 'A' such that 1+2+3+4+5+A is divisible by 9.\n    # Sum of the given digits: 1+2+3+4+5 = 15\n    # The smallest 'A' such that 15+A is divisible by 9 is: A = 3 (because 15 + 3 = 18 is divisible by 9).\n\n    A = 3\n\n    # Now check the remainder when the number is divided by 4.\n    # For a number with the format $\\overline{12345A}$, only the last two digits affect the remainder when divided by 4.\n    # Thus, we only need to consider the number $\\overline{5A}$.\n\n    two_digit_number = int(f\"5{A}\")\n\n    # Calculate the remainder of two_digit_number when divided by 4.\n    remainder = two_digit_number % 4\n\n    return remainder\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n    \n    # red_flowers = 1/2 * total_flowers\n    # remaining_flowers = total_flowers - red_flowers\n    # pink_flowers = 4/7 * remaining_flowers\n    equation = Eq((1/2 * total_flowers) - (4/7 * (total_flowers - 1/2 * total_flowers)), 6)\n    \n    solution = solve(equation, total_flowers)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "from fractions import Fraction\n\ndef solution():\n    num = Fraction(5, 1) + Fraction(1, 7) + Fraction(3, 1) + Fraction(3, 11) + Fraction(1, 1) + Fraction(13, 23)\n    denom = Fraction(3, 1) + Fraction(3, 7) + Fraction(2, 1) + Fraction(2, 11) + Fraction(1, 1) + Fraction(1, 23)\n    result = num / denom\n    return result\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (2 * n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n\n    number_of_kids = 3\n    # The number of ways to arrange 'n' unique items in a row is n!\n    ans = factorial(number_of_kids)\n\n    return ans\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    return (65 + 3) // 4\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To ensure Kelly's victory, she needs to make sure Dan is left with either 1 or 2\n    # matches on his final turn because those are the only options he would have.\n\n    # Working backwards, for Dan to be left with that situation, Kelly needs to\n    # leave 4 matches on her last turn (because then Dan can pick only 1 or 2,\n    # and Kelly can pick the remaining matches on her next turn).\n\n    # In general, Kelly needs to always leave a multiple of 3 (3n + 1) for Dan.\n    # Let's determine the initial move for Kelly:\n    \n    # Since there are 11 matches, the closest multiple of 3 that is less than 11\n    # is 9. So if Kelly leaves 10 matches for Dan (11-1), Dan can only pick 1 or 2,\n    # and then Kelly can keep following the strategy of leaving 3n + 1 matches.\n    # This guarantees her win.\n\n    initial_matches = 11\n    # Kelly's move\n    kelly_move = initial_matches % 3\n    if kelly_move == 0:\n        kelly_move = 3  # If it's a multiple of 3, take away 3 to get to 3n + 1\n    \n    return kelly_move\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, nicole = symbols('jason nicole')\n\n    initial_jason = 20 \n    jason_after = initial_jason + 18 \n    nicole_after = jason_after - 5 \n    \n    equation = Eq(nicole - 18, nicole_after)\n\n    initial_nicole = solve(equation, nicole)[0]\n\n    return initial_nicole\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_count in range(77 // 2 + 1):\n        if (77 - 2 * two_gram_count) % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    # Let number of cars be c and number of motorcycles be m\n    # Each car has 4 wheels and each motorcycle has 2 wheels\n    # Total number of vehicles is 27 so c + m = 27 (equation 1)\n    # Total number of wheels is 78 so 4c + 2m = 78 (equation 2)\n\n    for c in range(28):  # Since the number of cars cannot exceed the total number of vehicles\n        m = 27 - c  # From equation 1\n        if 4 * c + 2 * m == 78:  # Check if it satisfy equation 2\n            return c\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original dimensions are 1 unit each for simplicity because we are looking at ratios.\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n\n    # Increase the length by 10%.\n    new_length = original_length * 1.10  # 10% increase\n\n    # Reduce the breadth to 4/5 of original.\n    new_breadth = original_breadth * (4/5)  # 80% of original breadth\n\n    # The ratio of new height to original height is 11:10.\n    new_height = original_height * (11/10)  # 10% increase\n\n    # Calculate new volume.\n    new_volume = new_length * new_breadth * new_height\n\n    # Calculate original volume.\n    original_volume = original_length * original_breadth * original_height\n\n    # Express the new volume as a percentage of its original volume.\n    volume_percentage = (new_volume / original_volume) * 100\n    \n    return volume_percentage\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    num_marshals = 9\n\n    # Convert the total distance to meters\n    total_distance_m = total_distance_km * 1000\n\n    # Since marshals are spread out in equal intervals, we need to find the number of intervals\n    # There is one less interval than the number of marshals\n    num_intervals = num_marshals - 1\n\n    # The distance between two marshals is the total distance divided by the number of intervals\n    distance_between_marshals = total_distance_m / num_intervals\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed1 = 180  # meters per minute\n    time1 = 6     # minutes\n    speed2 = 120  # meters per minute\n    time2 = 8     # minutes\n    \n    # Calculate the distance traveled at each speed\n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n    \n    # Total distance is the sum of the distances\n    total_distance = distance1 + distance2\n    \n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    interest_rate = 0.03\n\n    # Interest for the first year\n    first_year_interest = principal * interest_rate\n    # Total amount after the first year\n    total_after_first_year = principal + first_year_interest\n\n    # Interest for the second year\n    second_year_interest = total_after_first_year * interest_rate\n\n    return second_year_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 80  # 1 hour and 20 minutes is 80 minutes\n    pictures_painted = total_minutes / minutes_per_picture\n    return int(pictures_painted)\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Since the total number of tiles is 400, a square wall would be 20x20 tiles.\n    # Each layer consists of a square ring of tiles.\n\n    # The size of each color layer in terms of a square.\n    # Red layers: 20x20, 16x16, 12x12, 8x8, 4x4\n    # Green layers: 18x18, 14x14, 10x10, 6x6, 2x2\n\n    # Calculate the number of red and green tiles by summing the total number of tiles in each layer of the respective color.\n    # Layer thickness is 1 tile, so there are 2 layers less for each inner square layer.\n    red_tiles = (20*20 + 16*16 + 12*12 + 8*8 + 4*4)\n    green_tiles = (18*18 + 14*14 + 10*10 + 6*6 + 2*2)\n\n    # The dominant color and its excess number of tiles over the other color.\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    excess_tiles = abs(red_tiles - green_tiles)\n\n    return (dominant_color, excess_tiles)\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_number = 1 + (4 / 7)\n    decimal_number = round(mixed_number, 1)\n    return decimal_number\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"\n    sequence_length = len(recurring_sequence)\n    index = (69 - 1) % sequence_length  # Subtracting 1 because the sequence starts at index 0\n    ans = int(recurring_sequence[index])\n\n    return ans\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = total_salt / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    remaining_sweets = y / 2\n    return remaining_sweets\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of widgets Megacorp sold in 2014\n    x = symbols('x')\n\n    # Vastco sold 68% more widgets than Megacorp in 2014\n    vastco_2014 = x * 1.68\n\n    # Vastco's widget sales rose by 32% in 2015\n    vastco_2015 = vastco_2014 * 1.32\n\n    # In 2015, Vastco sold 44% more widgets than Megacorp\n    # Let y be the number of widgets Megacorp sold in 2015\n    y = symbols('y')\n    equation = Eq(vastco_2015, y * 1.44)\n\n    # Solve for y in terms of x\n    megacorp_2015 = solve(equation, y)[0]\n\n    # Calculate the percentage increase for Megacorp from 2014 to 2015\n    percentage_increase_megacorp = ((megacorp_2015 - x) / x) * 100\n\n    return percentage_increase_megacorp\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Calculate the total profit Ken planned to make\n    planned_profit = 0.50\n\n    # Calculate the profit made on the first day\n    first_day_profit_from_sold_goods = 0.70 * 0.50\n\n    # Calculate the expected profit from all goods (if all were sold at a 50% profit)\n    expected_total_profit = 1.00 * 0.50\n\n    # Actual total profit made\n    actual_total_profit = planned_profit * 0.82\n\n    # Profit made from the second day's sales\n    second_day_profit_from_sold_goods = actual_total_profit - first_day_profit_from_sold_goods\n\n    # Calculate the profit percentage made on the second day\n    # based on the percentage of goods sold on the second day (30% left after first day)\n    second_day_profit_percentage = second_day_profit_from_sold_goods / 0.30\n\n    # The goods were sold at a certain discount on the second day, let's find the discount rate\n    # Discount rate is the difference between the planned profit and the actual profit for the second day\n    discount_rate = expected_total_profit - second_day_profit_percentage\n\n    return discount_rate * 100  # Convert to percentage\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of the sons and daughters\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Equations based on the given information\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son, older_son + 3)\n    equation3 = Eq(younger_daughter, older_daughter + 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n    \n    # Finding the youngest child's age from the solutions\n    youngest_age = min(solutions[older_son], solutions[younger_son], solutions[older_daughter], solutions[younger_daughter])\n\n    return youngest_age\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits in the ranges 1-9, 10-99, and 100-113\n    digits_1_to_9 = 9  # From 1 to 9, there are 9 x 1-digit numbers\n    digits_10_to_99 = (99 - 10 + 1) * 2  # From 10 to 99, there are 90 x 2-digit numbers\n    digits_100_to_113 = (113 - 100 + 1) * 3  # From 100 to 113, there are 14 x 3-digit numbers\n\n    # Sum the number of digits\n    total_digits = digits_1_to_9 + digits_10_to_99 + digits_100_to_113\n    return total_digits\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    work = workers * days_for_3_workers  # Total work done is the product of workers and days\n    days_for_1_worker = work / 1  # Number of days for 1 worker to do the same work\n    return days_for_1_worker\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48  # Initial number of bottles bought\n    empty_bottles = 48  # Initial empty bottles after drinking\n\n    while empty_bottles >= 4:\n        # Exchange bottles\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        \n        # Update empty bottles count: subtract bottles exchanged and add new empty bottles\n        empty_bottles = empty_bottles - new_bottles * 4 + new_bottles\n\n        # Borrow one empty bottle if possible\n        if empty_bottles == 3:\n            total_bottles += 1\n            empty_bottles = 0  # Borrowed bottle needs to be returned\n\n    return total_bottles\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let's denote the total number of pearls originally on the strand as 'x'.\n    # According to the problem:\n    # Half fell onto the floor, so we have x/2 pearls on the floor.\n    # A fourth rolled under a chair, so we have x/4 pearls under the chair.\n    # A sixth fell into her lap, so we have x/6 pearls in her lap.\n    # And 3 pearls remained on the strand.\n\n    # The sum of all pearls should equal the original number of pearls (x).\n    # So, we have the equation: x/2 + x/4 + x/6 + 3 = x\n\n    # To solve for x, we find a common denominator and combine the terms.\n    # The least common multiple of 2, 4, and 6 is 12, so we rewrite the fractions:\n    # (6/12)x + (3/12)x + (2/12)x + 3 = x\n    # (11/12)x + 3 = x\n\n    # We can now combine like terms and solve for x:\n    # (11/12)x - x = -3\n    # (-1/12)x = -3\n    # Multiply both sides by -12:\n    # x = 36\n\n    # So the original number of pearls on the strand was 36.\n    return 36\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Create all permutations for the group of four people\n    for entrance_plan in permutations(range(1, 4), 4):\n        if len(set(entrance_plan)) != 3:\n            # Skip the permutation if not all three entrances are used\n            continue\n        count += 1\n    return count\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for John's and his brother's number of erasers\n    john, brother = symbols('john brother')\n\n    # Equation 1: The sum of John's and his brother's erasers is 246\n    equation1 = Eq(john + brother, 246)\n    \n    # Equation 2: John has 32 more erasers than his brother\n    equation2 = Eq(john, brother + 32)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    total_earnings = 92\n\n    # Assume all glasses are delivered safely first\n    safe_deliveries = total_glasses\n    broken_glasses = 0\n\n    # Calculate the amount over if all were safe\n    amount_over = (safe_deliveries - broken_glasses) - total_earnings\n\n    # Since for each broken glass, the difference between safe deliveries and broken glasses decreases by 2\n    broken_glasses = amount_over // 2\n\n    return broken_glasses\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    black_rabbits, white_rabbits, grey_rabbits = symbols('black_rabbits white_rabbits grey_rabbits')\n    \n    equation1 = Eq(black_rabbits, white_rabbits + 14)\n    equation2 = Eq(grey_rabbits, white_rabbits - 2)\n    equation3 = Eq(black_rabbits + white_rabbits + grey_rabbits, 84)\n    \n    solutions = solve((equation1, equation2, equation3), (black_rabbits, white_rabbits, grey_rabbits))\n    \n    return solutions[white_rabbits]\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    result = (40 - 4) / 2\n    return result\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the number of boats, y is the total number of people\n    equation1 = Eq((x - 1) * 9, y)\n    equation2 = Eq((x + 1) * 6, y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7  # The cost of one banana\n    cost_for_15_bananas = 15 * cost_per_banana  # The total cost for 15 bananas\n    total_money_in_pence = 12 * 100  # Total money in pence (£12)\n    change = total_money_in_pence - cost_for_15_bananas  # Change in pence\n    \n    return change / 100  # Convert change into pounds\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for num in range(1, 57, 2):\n        if num + (num + 2) + (num + 4) == 57:\n            return num\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # Since we know that x / 3 = 2, we can deduce that x must be 6\n    # Because 6 is the only number in the list that, when divided by 3, equals 2.\n    x = 6\n    \n    # Now that we've found x, the expression can be complete\n    ans = x // 3\n    return ans\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # In a round-robin tournament, each team plays every other team exactly once.\n    # If there are n teams, then the total number of games played is n*(n-1)/2 = 45\n    # We need to find n such that n*(n-1)/2 = 45.\n    # This is a quadratic equation: n^2 - n - 90 = 0\n    \n    # We can use the quadratic formula to solve for n\n    # The quadratic formula: n = ( -b ± sqrt(b^2 - 4ac) ) / (2a)\n    # for the equation an^2 + bn + c = 0\n    # Here, a = 1, b = -1, c = -90\n    \n    from math import sqrt\n    \n    a = 1\n    b = -1\n    c = -90\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Calculate the two solutions for the quadratic equation\n    n1 = (-b + sqrt(discriminant)) / (2*a)\n    n2 = (-b - sqrt(discriminant)) / (2*a)\n    \n    # Because we can't have a negative number of teams, we only take the positive solution\n    # Also, the number of teams must be an integer\n    n = int(max(n1, n2))\n\n    return n\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    return 495 // 9\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for num in range(5, 16):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n\n    pencils = 32\n    pens = 40\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John and Peter's cookies\n    john, peter = symbols('john peter')\n\n    # Equation1: John had 180 more cookies than Peter\n    equation1 = Eq(john, peter + 180)\n    \n    # Equation2: After transactions, John has 1/2 as many cookies as Peter left\n    # John sold 4/5, so he has 1/5 left; Peter sold 3/10, so 7/10 left\n    equation2 = Eq(1/5 * john, 1/2 * (7/10 * peter))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (john, peter))\n\n    # Return John's original number of cookies\n    return solutions[john]\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    initial_average = 60\n    total_tests = 4\n    new_test_score = 70\n\n    total_score = (initial_average * total_tests + new_test_score)\n    new_average = total_score / (total_tests + 1)\n\n    return new_average\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')  # Initialize min_sum to be the maximum possible float value\n\n    for perm in permutations(digits):\n        num1 = perm[0] * 10 + perm[1]  # Create the first 2-digit number\n        num2 = perm[2] * 10 + perm[3]  # Create the second 2-digit number\n        sum_of_nums = num1 + num2  # Calculate the sum of the two numbers\n        if sum_of_nums < min_sum:  # Check if we have found a new minimum sum\n            min_sum = sum_of_nums  # Update min_sum to the new minimum value\n\n    return min_sum\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for first_digit in range(1, 10):  # first digit can be any from 1 to 9\n        for second_digit in range(10):  # second digit can be any from 0 to 9\n            third_digit = first_digit + second_digit\n            if third_digit < 10:  # third digit must be less than 10 to be a valid digit\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    discount_a = 0.1  # 10% discount for buying 3 cups\n    discount_b = 0.2  # 20% discount for buying 5 cups\n    \n    # Calculating the total cost for different scenarios\n    # Scenario 1: getting 10% off for buying 3 cups twice\n    cost_scenario_1 = 3 * full_price_per_cup * (1 - discount_a) * 2\n    \n    # Scenario 2: buying 5 cups with 20% off\n    # and 1 cup at full price\n    cost_scenario_2 = 5 * full_price_per_cup * (1 - discount_b) + full_price_per_cup\n    \n    # Choosing the cheaper option\n    ans = min(cost_scenario_1, cost_scenario_2)\n    return ans\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    apples_horses = total_horses * 20\n    apples_pigs = total_pigs * 15\n    apples_rabbits = total_rabbits * 5\n\n    total_apples = apples_horses + apples_pigs + apples_rabbits\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    average_apples_per_animal = total_apples / total_animals\n\n    return average_apples_per_animal\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (2, 7),  # Represents the equation x ≡ 2 (mod 7)\n        (3, 9),  # Represents the equation x ≡ 3 (mod 9)\n        (4, 11)  # Represents the equation x ≡ 4 (mod 11)\n    ]\n\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a_students, b_students, peaches = symbols('a_students b_students peaches')\n    # Equation 1: Class A peaches equation\n    equation1 = Eq(peaches, 5 * a_students + 10)\n    # Equation 2: Class B peaches equation\n    equation2 = Eq(peaches, 8 * b_students - 2)\n    # Equation 3: Class A has 3 more students than class B\n    equation3 = Eq(a_students, b_students + 3)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (a_students, b_students, peaches))\n    \n    return solutions[peaches]\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    s = 0\n    for i in range(1, 2018):\n        s += int(\"2\" * i)\n    s %= 100000  # Get the last 5 digits\n    return s\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    benson_spent = 74\n    jayden_spent = 120\n    total_money = 590\n\n    # Let benson_left be the amount Benson had left.\n    # Let jayden_left be the amount Jayden had left.\n    # Benson had left 3 times as much as Jayden had left.\n    # Benson's initial amount = benson_spent + benson_left\n    # Jayden's initial amount = jayden_spent + jayden_left\n    # Combined initial amount = Benson's initial amount + Jayden's initial amount = total_money\n\n    # From the conditions we can write the following equations:\n    # benson_left = 3 * jayden_left\n    # (benson_spent + benson_left) + (jayden_spent + jayden_left) = total_money\n\n    # Now we solve for jayden_left using those equations:\n\n    # jayden_left + 3 * jayden_left = total_money - (benson_spent + jayden_spent)\n    # 4 * jayden_left = total_money - (benson_spent + jayden_spent)\n    jayden_left = (total_money - (benson_spent + jayden_spent)) / 4\n\n    return jayden_left\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_drink = 12\n    fraction_water = 3/4\n    water_in_drink = total_drink * fraction_water\n    return water_in_drink\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    product = 547 * 479\n    n = product % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for number in range(1, 381):\n        if number * number + number == 380:\n            return number\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_pet_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Let's define the speed of Betty as B meters per minute\n    # and the speed of Kevin as K meters per minute.\n    \n    # From the information given, we have:\n    # - After 6 minutes, Betty is at the grocery store.\n    #   Therefore, the distance from the cinema to the grocery store is 6 * B.\n    # - At this time, Kevin has walked 150 meters, so Kevin's speed is 150/6 = 25 meters/minute.\n    # - After walking 3 more minutes, Kevin arrives at the store, which means:\n    #   Kevin walks 3 * 25 = 75 meters in the next 3 minutes to reach the store.\n    # - Hence, the total distance from cinema to grocery store is 150 + 75 = 225 meters.\n    # - Betty will be 900 meters away from cinema after the additional 3 minutes.\n    #   This means Betty has walked 6 * B (to store) + 3 * B (additional) = 225 + 3 * B.\n    #   Substituting 225 for 6 * B we get: 225 + 3 * B = 900 => 3 * B = 675 => B = 225 meters/minute.\n    \n    # Now we know Betty's speed as well as the total distance from cinema to grocery store:\n    # B = 225 meters/minute, Distance = 225 meters.\n    # Time taken by Betty to reach the grocery store is 225 / 225 = 1 minute.\n    \n    # Time taken by Kevin to reach the grocery store is (150 meters + 75 meters) / 25 meters/minute = 9 minutes.\n    \n    # Betty left earlier than Kevin by 9 - 1 = 8 minutes.\n    \n    return 8\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    total_volume = 300\n    raspberry_part = 1\n\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_volume\n\nans = solution()"
    ]
}