{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    def sum_of_squares(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n\n    ans = sum_of_squares(15) - sum_of_squares(4)\n    return ans\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction = 14 / 27\n    \n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction\n    \n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9\n    end_time = 10\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / (1 - 0.4)\n    original_amount = remaining_after_bag / (1 - 0.2)\n    return original_amount\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for i in range(1, 100): # We can assume the number of students in one row of the original square can't be too high, so we use 100 for the example\n        original_square = i**2\n        additional_students = original_square + 5 # Original square plus surplus\n        new_square = (i + 1)**2 # One row and one column added\n        # Check if the difference between the new square and the original plus surplus is 26\n        if new_square - additional_students == 26:\n            return additional_students\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy has to give to John.\n    # After giving x apples, Amy will have (amy - x) apples and John will have (john + x) apples.\n    # We want Amy to have 4 more apples than John: amy - x = john + x + 4\n    # Solving for x: x = (amy - john - 4) / 2\n    x = (amy - john - 4) / 2\n    return int(x)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    return 167 - 43\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n    profit_percentage = 0.10\n    loss_percentage = 0.10\n\n    # Calculate the original cost price of the house where the owner made a profit\n    cost_price_profit = sale_price / (1 + profit_percentage)\n    # Calculate the original cost price of the house where the owner made a loss\n    cost_price_loss = sale_price / (1 - loss_percentage)\n\n    # Calculate the profit and loss\n    profit = sale_price - cost_price_profit\n    loss = cost_price_loss - sale_price\n\n    # Calculate the overall profit or loss; positive value indicates profit, negative value indicates loss\n    overall_profit_loss = profit - loss\n    \n    return overall_profit_loss\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n-r)\n\n    ans = permutations(9, 4)\n    return ans\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure Fred wins, he needs to leave a multiple of 4 oranges after his turn.\n    # This is because no matter how many oranges George takes (1, 2, or 3),\n    # Fred can always take a number that makes the total taken in the round 4.\n    # When it comes down to 4 oranges, Fred can take the last ones and win.\n    \n    # Total oranges is 15. If Fred leaves 12, no matter what George does,\n    # Fred can keep the difference at a multiple of 4 until only 4 are left, which he can then take.\n    # To leave 12 oranges, Fred must take 3 in the first turn.\n    first_turn_take = 15 % 4\n    return first_turn_take if first_turn_take != 0 else 3\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    shirt_pants_combinations = shirts * pants * shoes\n    dress_combinations_with_shoes = dresses * shoes\n    dress_combinations_with_heels = dresses * heels\n    \n    total_combinations = shirt_pants_combinations + dress_combinations_with_shoes + dress_combinations_with_heels\n\n    return total_combinations\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age = symbols('tom_age')\n    dad_age = 43\n\n    equation = Eq(dad_age, 4 * tom_age - 5)\n\n    tom_age_solution = solve(equation, tom_age)\n\n    return tom_age_solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n\n    if fraction_value > decimal_value:\n        ans = \"3/20 is larger\"\n    elif fraction_value < decimal_value:\n        ans = \"0.16 is larger\"\n    else:\n        ans = \"They are equal\"\n\n    return ans\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    total_skipping = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = (total_skipping + total_long_jump) - (2 * both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    jogging_speed = 8  # Sara's jogging speed in km/h\n    jogging_time = 2   # Sara's jogging time in hours from 6.30 to 8.30 a.m.\n    walking_speed = jogging_speed / 2   # Sara's walking speed in km/h\n    walking_time = 1   # Sara's walking time in hours from 8.30 to 9.30 a.m.\n\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    # A can be in one of the three middle positions\n    for position_A in [1, 2, 3]:\n        # B can be in any of the four remaining positions\n        for position_B in range(5):\n            # C can be in any of the three remaining positions\n            for position_C in range(5):\n                if position_A != position_B and position_A != position_C and position_B != position_C:\n                    # A should be between B and C\n                    if position_B < position_A < position_C or position_C < position_A < position_B:\n                        # 2 more students can be arranged in the remaining 2 positions in 2! ways\n                        count += 2 * 1\n    return count\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def custom_op_diamond(M, N):\n        return M * N + N + 1\n        \n    def custom_op_square(M, N):\n        return 8 * M - N * N\n        \n    first_part = custom_op_diamond(7, 6)\n    ans = custom_op_square(first_part, 9)\n    \n    return ans\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    A = sum(Fraction(1, d) for d in range(1, 6))\n    A = A * 60\n    return A.numerator\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # Power of 2 raised to 100 will definitely end with 6.\n    last_digit_2 = (2**100) % 10\n    \n    # Power of 7 raised to 100 will end with 1.\n    last_digit_7 = (7**100) % 10\n    \n    # Power of 9 raised to 100 will end with 1.\n    last_digit_9 = (9**100) % 10\n    \n    # Now find the last digit of the product of the last digits\n    last_digit = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = 19 // 2  # The last number 19 is the 10th odd number\n    ans = (1/3)*n*(n+1)*(2*n+1)  # Using the formula for the sum of squares of first n odd numbers\n    return int(ans)\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # The smallest number of marbles in the biggest pile is when the distribution \n    # between piles is the most even, with pile sizes strictly increasing.\n    # Start by finding the smallest pile sizes that are strictly increasing.\n\n    # Initialize the minimum for the largest pile to 16, as it cannot be higher.\n    min_biggest_pile = 16\n\n    # We iterate through all possible combinations for the 4 piles,\n    # ensuring each pile has a different number of marbles and their\n    # sum is equal to 16.\n    for a in range(1, 16):\n        for b in range(a + 1, 16):\n            for c in range(b + 1, 16):\n                for d in range(c + 1, 16):\n                    if a + b + c + d == 16:\n                        # If the current largest pile is smaller than the minimum we found,\n                        # update the minimum.\n                        if d < min_biggest_pile:\n                            min_biggest_pile = d\n\n    return min_biggest_pile\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    p = 2\n    while True:\n        if is_prime(p) and is_prime(p + 107):\n            return p\n        p += 1  # only need to check the next prime number\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    total_students = 92\n    minibus_capacity = 6\n\n    minibusses_needed = -(-total_students // minibus_capacity)\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    cupcakes_per_egg = 15 / 3\n    eggs = cupcakes / cupcakes_per_egg\n    return int(eggs)\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_time_for_floors = 12\n    number_of_intervals = 3  # from the first floor to the fourth floor, there are 3 intervals\n    time_per_interval = total_time_for_floors / number_of_intervals\n\n    return time_per_interval\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    ans = sum((i**2 + (i+1)**2) / (i * (i+1)) for i in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Let n be the number of girls\n    # The sum of the heights with the correct recording (S_correct)\n    # and the sum of the heights with the incorrect recording (S_incorrect) are related by:\n    # S_correct = S_incorrect - 126 + 162\n    # The average height is the sum of the heights divided by the number of girls:\n    # 163 = (S_incorrect - 126 + 162) / n\n    # 159 = S_incorrect / n\n    # By solving these two equations we get S_incorrect = 159 * n\n    # and 163 = (159 * n - 126 + 162) / n\n    # Simplifying the right side we get 163 = 159 + (162 - 126) / n\n    # Which gives 163 = 159 + 36 / n\n    # Then 4 = 36 / n\n    # Therefore n = 36 / 4\n\n    # Calculate the number of girls n\n    n = 36 / 4\n\n    return int(n)\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of £5, £10, and £20 notes\n    five, ten, twenty = symbols('five ten twenty')\n\n    # Since there are an equal number of each note, we can say they're all equal to some common variable 'n'\n    n = symbols('n')\n\n    # Set up the equation for the total value of the notes\n    total_value_eq = Eq(5 * n + 10 * n + 20 * n, 280)\n\n    # Solve the equation to find the number of notes 'n'\n    solved_values = solve(total_value_eq, n)\n\n    # Since we're only interested in the number of notes, and there are an equal number of each, we can return any\n    return solved_values[n] * 3\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    return (24 / 100) * 25\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = (48 * 17) + (17 * (3 * 48)) - (3 * 17)\n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # Calculate the sum of the first n odd numbers\n    n = (13 + 1) // 2  # (last number + 1) to get the count of the odd numbers, divided by 2 as they are every other number\n    sum_of_n_numbers = n * (n + 1) // 2  # Sum of the first n natural numbers formula\n    ans = sum_of_n_numbers ** 2  # The square of the sum of n numbers\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n\n    ans = hash_op(200, 199)\n    for i in range(188, 0, -1):\n        ans = hash_op(ans, i)\n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    ans = 1.5 * 1.3333333333333333 * 1.25 * 1.2 * 1.1666666666666667 * 1.1428571428571428 * 1.125 * 1.1111111111111112\n    return ans\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken, beth = symbols('ken beth')\n\n    # Ken had $75 more seashells than Beth\n    equation1 = Eq(ken, beth + 75)\n    # 4/5 of the number of seashells Beth had was equal to 2/5 of the number of seashells Ken had\n    equation2 = Eq((4/5) * beth, (2/5) * ken)\n\n    solutions = solve((equation1, equation2), (ken, beth))\n\n    # Total number of seashells they have together\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    capacity = 4\n\n    containers = (total_apples + capacity - 1) // capacity\n\n    return containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the greatest common divisor (GCD) among the lengths of the ribbons\n    return gcd(gcd(56, 42), 84)\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    original_number = 9876543\n    ans = original_number + 10000\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for i in range(1, 50):\n        if (i ** 2 + 2) ** (1/3) % 1 == 0:\n            ans = i**2\n            return ans\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    return sum(range(1, 10)) + 7\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)  # The sum of two numbers is 11.63\n    equation2 = Eq(x + y/10, 5.87)  # Oliver's mistaken sum shifted one decimal\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    difference = abs(solutions[x] - solutions[y])\n    \n    return int(difference * 100)  # One hundred times the difference\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # Based on the pattern of the problem, it is evident that\n    # (1 + 1/2)(1 + 1/2^2)(1 + 1/2^4)...(1 + 1/2^(2^2009)) is a telescoping product.\n    # The terms will cancel out in such a way that the only remaining term\n    # on the left-hand side would be 1 + 1/2^1 = 3/2, and the last term would be 1 + 1/(2^(2^2009))\n    # Therefore, after canceling out, the expression simplifies to\n    # (3/2) * 2 = 3 = 2 * (1 - 1/(2^(2^n)))\n    # Dividing both sides by 2, we get\n    # 3/2 = 1 - 1/(2^(2^n))\n    \n    # To solve for n, we can see that\n    # 1 - 1/2^(2^n) = 1/2, which means 1/2^(2^n) = 1/2.\n    # Taking natural log on both sides gives us 2^n = 1 and hence n = 0.\n    \n    n = 0\n    return n\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n    \n    # Since the total number of notes is 40, we have the equation x + y = 40\n    eq1 = Eq(x + y, 40)\n    \n    # 40% of the $10 notes (which is 0.4 * x) and 25% of the $2 notes (which is 0.25 * y) were spent\n    # After spending, he has 4/5 as many $10 as $2 notes\n    # Remaining $10 notes is x - 0.4 * x and remaining $2 notes is y - 0.25 * y\n    eq2 = Eq((x - 0.4 * x) * 5, (y - 0.25 * y) * 4)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # Calculate the amount spent\n    amount_spent = solutions[x] * 10 * 0.4 + solutions[y] * 2 * 0.25\n    \n    return amount_spent\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # Each child must get at least 2 oranges, so we give them 2 each first.\n    # This leaves us with 13 - 2*3 = 7 oranges to divide.\n    oranges_left = 13 - 2 * 3\n\n    # Now the problem is reduced to finding the number of ways to distribute\n    # 7 indistinguishable oranges to 3 kids.\n    # We can do this by using stars and bars method, which is (n+k-1) choose (k-1),\n    # where n is the number of items to distribute and k is the number of kids.\n    # Here, n=7 (oranges left) and k=3 (kids), so we calculate comb(7+3-1, 3-1).\n    ways = comb(oranges_left + 3 - 1, 3 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    licia, krisnam, imran = symbols('licia krisnam imran')\n    \n    # Licia collected three times as many stamps as Krisnam\n    equation1 = Eq(licia, 3 * krisnam)\n    # Imran collected 138 more stamps than Licia\n    equation2 = Eq(imran, licia + 138)\n    # The total number of stamps collected is 2238\n    equation3 = Eq(licia + krisnam + imran, 2238)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n    \n    # Number of stamps Imran collected\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # P cannot be 0 as it is a 4-digit number\n            continue\n        paso = p*1000 + a*100 + s*10 + o\n        if paso % 2 == 0 and (p+a+s+o) % 2 != 0:\n            return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial amount of water Harry had, and y be the amount Liam had.\n    # Then we have the following equations:\n    x, y = symbols('x y')\n\n    # Equation for the total amount of water.\n    equation1 = Eq(x + y, 640)\n\n    # After transfer, Harry has (x + 90) and Liam has (y - 90).\n    # Harry would have thrice the amount of water as Liam.\n    equation2 = Eq(x + 90, 3 * (y - 90))\n\n    # Solving the equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day_questions = 3\n    common_difference = 3\n    num_days = 7\n    \n    total_questions = 0\n    for day in range(num_days):\n        total_questions += first_day_questions + day * common_difference\n    \n    return total_questions\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of days the wife will take to finish the barrel on her own.\n    x = symbols('x')\n\n    # 1 barrel / 15 days = rate of drinking for the man alone\n    # 1 barrel / x days = rate of drinking for the wife alone\n    # Their combined rate of drinking is the sum of their individual rates.\n    \n    # Equation representing the combined rate when they drink together and finish in 12 days.\n    # (1/15 + 1/x) = 1/12 [since they finish in 12 days together]\n    \n    equation = Eq((1/15) + (1/x), 1/12)\n    \n    # Solve the equation for x.\n    solution = solve(equation, x)[0]\n\n    return solution\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import product\n\ndef solution():\n    total_ways = 0\n    white_balls = 9\n    red_balls = 5\n    black_balls = 6\n    total_pick = 10\n    \n    # Iterate through all possible combinations of remaining balls\n    for white_left in range(3, 9):\n        for red_left in range(2, red_balls + 1):\n            for black_left in range(black_balls - 3, black_balls + 1):\n                # Calculate how many of each color are picked based on what's left\n                white_picked = white_balls - white_left\n                red_picked = red_balls - red_left\n                black_picked = black_balls - black_left\n                # Check if the total picked balls matches 10\n                if white_picked + red_picked + black_picked == total_pick:\n                    # Calculate the combinations for this specific pick scenario\n                    total_ways += (\n                        comb(white_balls, white_picked) *\n                        comb(red_balls, red_picked) *\n                        comb(black_balls, black_picked)\n                    )\n    \n    return total_ways\n\n# Define a function for calculating combinations\ndef comb(n, k):\n    from math import factorial\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Calculate the difference in the number of beans peeled each hour\n    second_diff = 28 - 20  # From 10 to 11 o'clock\n    third_diff = 36 - 28   # From 11 to 12 o'clock\n    \n    # Since the increment is the same, we find the common difference\n    common_diff = second_diff  # or third_diff, both are equal\n    \n    # Calculate the number of beans peeled in the first hour\n    first_hour_beans = 20 - common_diff\n\n    return first_hour_beans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let's denote the original number of pearls as x\n    # According to the problem, we have the following expression:\n    # x = (1/2) * x + (1/4) * x + (1/6) * x + 3\n    \n    # Solving for x:\n    # Combine like terms by finding a common denominator\n    common_denominator = 12  # The common denominator for 2, 4, and 6\n    x = (6/12) * x + (3/12) * x + (2/12) * x + 3\n    x = (11/12) * x + 3\n    \n    # Substract (11/12)*x from both sides\n    x - (11/12) * x = 3\n    \n    # Factor out x\n    x * (1 - (11/12)) = 3\n    x * (1/12) = 3\n\n    # Multiply both sides by 12 to solve for x\n    x = 3 * 12\n\n    return x\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    times_smaller = snake_length_cm / insect_length_cm\n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    addend = 2\n    while term < 100:\n        addend += 2\n        term += addend\n        if term >= 100:\n            return previous_term\n        previous_term = term\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # calculate the total of first three numbers\n    sum_first_three = 3 * 120\n    # calculate the total sum after the fourth number is added\n    sum_four_numbers = 4 * 150\n    # subtract to find the fourth number\n    fourth_number = sum_four_numbers - sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    mass_given_away = 0.76\n    mass_left = initial_mass - mass_given_away\n    return round(mass_left, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Since the numbers are consecutive even numbers, their differences will be 2.\n    # Suppose the first even number is 2k, the next consecutive even numbers will be 2k+2, 2k+4\n    # Given that 2k is a multiple of 7, 2k+2 is a multiple of 8 and 2k+4 is a multiple of 9\n    # We are looking for k such that:\n    # 2k is congruent to 0 (mod 7)\n    # (2k+2) is congruent to 0 (mod 8)\n    # (2k+4) is congruent to 0 (mod 9)\n    # This translates to:\n    # k is congruent to 0 (mod 7)\n    # k is congruent to -1 (mod 4) because 2k+2 can also be written as 2(k+1) and k+1 must be divisible by 4\n    # k is congruent to -2 (mod 9/2) because 2k+4 can also be written as 2(k+2) and k+2 must be divisible by 9/2\n    \n    # Now we need to find the smallest positive k that satisfies these congruences\n    # We will use the Chinese Remainder Theorem to solve these congruences\n\n    congruences = [(0, 7), (-1, 4), (-2, 9//2)]\n    k, mod = solve_congruence(*congruences)\n\n    # Calculating the consecutive even numbers\n    first_number = 2 * k\n    second_number = 2 * k + 2\n    third_number = 2 * k + 4\n\n    sum_of_numbers = first_number + second_number + third_number\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_half_full_weight = half_full_weight - (full_weight - half_full_weight)\n    empty_basket_weight = half_full_weight - mangoes_half_full_weight\n    return empty_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front, and there are 5 children between Pip and Bud.\n    # But since Pip is also counted among those between Pip and Bud, we should consider there are 4 children actually between them.\n    # Bud is 6th from the end.\n    # Thus, the number of children in the queue is Pip's position from the front + number of children between Pip and Bud + Bud's position from the end.\n    # Since Pip is in front of Bud, we do not count Pip's position twice.\n    \n    num_children_between_pip_and_bud = 4  # 5 children counting Pip, but we don't count Pip twice, so we subtract 1\n    pip_position_from_front = 6\n    bud_position_from_end = 6\n    \n    total_children_in_queue = pip_position_from_front + num_children_between_pip_and_bud + bud_position_from_end\n    \n    return total_children_in_queue\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate common difference\n    common_difference = (fourth_term - first_term) // (4 - 1)\n\n    # Calculate last term using arithmetic sequence formula\n    last_term = first_term + (total_rows - 1) * common_difference\n\n    # Calculate the sum of the arithmetic sequence\n    total_athletes = (total_rows * (first_term + last_term)) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_age_family_now = 29 * 6\n    total_age_parents_now = total_age_family_now - 64\n    total_age_parents_three_years_ago = total_age_parents_now - 3 * 2\n    average_age_parents_three_years_ago = total_age_parents_three_years_ago / 2\n    return average_age_parents_three_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    total_days = 5\n    target_paintings = 56\n    \n    paintings_per_day = total_paintings_done / total_days\n    remaining_paintings = target_paintings - total_paintings_done\n    more_days_needed = remaining_paintings / paintings_per_day\n    \n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    result = 3+3+3+3+3+3+3+3\n    ans = result // 3\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    total_papers = 18\n    interval = 3\n    leaves = total_papers // interval\n\n    return leaves\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import permutations\n\ndef solution():\n    times = [7, 9, 4, 10]\n    fastest_time = float('inf')\n\n    # Generate all permutations of boat crossings\n    for perm in permutations(times):\n        time_taken = 0\n        # Send the first two and return with the fastest\n        time_taken += max(perm[0], perm[1])\n        time_taken += perm[2]\n\n        # Send the two fastest and return with the fastest\n        time_taken += max(perm[2], perm[3])\n        time_taken += perm[0]\n\n        # Send the last two\n        time_taken += max(perm[0], perm[1])\n\n        fastest_time = min(time_taken, fastest_time)\n\n    return fastest_time\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # a5 = a1 + 4d\n    # a12 = a1 + 11d\n    # a12 - a5 = (a1 + 11d) - (a1 + 4d) = 50 - 8\n    # 7d = 42\n    # d = 42 / 7\n    common_difference = (50 - 8) / (12 - 5)\n    \n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    return 95 * (37 + 42 + 21)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    # Initial values for the arithmetic progression\n    first_term = 2\n    common_difference = 3\n    last_term = 242\n    \n    # Calculate the number of terms in the initial sequence\n    n = ((last_term - first_term) // common_difference) + 1\n    \n    # Since we erase 3 terms at each step, calculate how many steps we can perform\n    steps = (n - 3) // 3\n    \n    # Every three deletions, the sequence will have 6 more at the starting term\n    new_first_term = first_term + steps * 6\n    \n    # Calculating the second term after the last step\n    second_term = new_first_term + common_difference\n    \n    return second_term\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let's denote:\n    # Pip's weight as p,\n    # Bud's weight as b, and\n    # Bob's weight as o\n\n    # From the first statement, the average weight of Pip and Bud is 30 kg,\n    # So, (p + b) / 2 = 30\n    # p + b = 60\n\n    # From the second statement, the average weight of Pip and Bob is 33 kg,\n    # So, (p + o) / 2 = 33\n    # p + o = 66\n\n    # From the third statement, the average weight of Bud and Bob is 36 kg,\n    # So, (b + o) / 2 = 36\n    # b + o = 72\n\n    # Now, we have three equations:\n    # p + b = 60 (1)\n    # p + o = 66 (2)\n    # b + o = 72 (3)\n\n    # Let's subtract equation (1) from equation (2)\n    # (p + o) - (p + b) = 66 - 60\n    # o - b = 6 (4)\n\n    # Now add equation (4) to equation (3)\n    # (b + o) + (o - b) = 72 + 6\n    # 2o = 78\n    # o = 39\n\n    # Substitute o = 39 back into equation (2)\n    # p + 39 = 66\n    # p = 66 - 39\n    p = 66 - 39\n\n    return p\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    return sum(numbers)\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the usual speed in meters per minute and y be the distance of the journey in meters.\n    # It takes Maria 30 minutes to cover y meters at speed x, so y = 30x.\n    # When it rains, her speed is reduced by 20%, so her new speed is 0.8x meters per minute.\n    # She covers 2400 meters at reduced speed and takes 5 more minutes than usual to finish.\n    # So the total time spent is 30 + 5 = 35 minutes.\n    # The equation for the time at reduced speed is (y - 2400) / x + 2400 / (0.8x) = 35.\n    # We'll solve these two equations to find y.\n\n    x, y = symbols('x y')\n    equation1 = Eq(y, 30 * x)\n    equation2 = Eq((y - 2400) / x + 2400 / (0.8 * x), 35)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    eldest_boy = 1\n    younger_sisters = 4\n    younger_brothers = 3\n    total_children = eldest_boy + younger_sisters + younger_brothers\n    return total_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_days = 15\n    target_days = 7\n    original_people = 5\n\n    work_rate_per_person = 1 / (original_people * original_days)\n    total_work_for_bridge = 1\n    work_needed_per_day = total_work_for_bridge / target_days\n\n    people_needed = work_needed_per_day / work_rate_per_person\n    additional_people = people_needed - original_people\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let x be the original number of students in School A\n    # Let y be the original number of students in School B\n    # We know that x + y = 1050 (total number of students in both schools)\n    # After transferring 20 students from A to B, School A has x - 20 students\n    # And School B has y + 20 students\n    # We also know that after transfer, School A has 10 more students than School B\n    # Which gives us the equation: (x - 20) = (y + 20) + 10\n    # Simplifying the equation: x - y = 50\n    # Now we have two equations:\n    # x + y = 1050\n    # x - y = 50\n    # By solving these two equations, we can find the value of x\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 1050)\n    equation2 = Eq(x - y, 50)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3\n    rate_of_rise = 2\n    time_elapsed = 5.5  # from 5:00 am to 10:30 am\n\n    temp_at_1030am = initial_temp + (rate_of_rise * time_elapsed)\n\n    return temp_at_1030am\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the initial amount of money be x\n    x = symbols('x')\n    \n    # Spent half of her money plus $1 on clothing\n    remaining_after_shopA = (x / 2) - 1\n    \n    # Spent half of the remaining money plus $2 on a pair of shoes\n    remaining_after_shopB = (remaining_after_shopA / 2) - 2\n    \n    # Spent 1/3 of the remaining plus $3 on a bag\n    remaining_after_shopC = (remaining_after_shopB * (2/3)) - 3\n    \n    # Had $49 left\n    equation = Eq(remaining_after_shopC, 49)\n    \n    # Solve the equation to find the initial amount of money\n    initial_money = solve(equation, x)\n    \n    return initial_money[0]  # Return the solution as a number\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    ans = 12321 // 37\n    return ans\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the number of books on the top shelf\n    top_shelf = symbols('top_shelf')\n\n    # Each shelf has 3 fewer books than the shelf below it; this forms an arithmetic sequence\n    # There are 7 shelves, so the sequence will be: top_shelf, top_shelf + 3, ..., top_shelf + 18\n    # The sum of an arithmetic sequence is given by: n/2 * (first_term + last_term)\n\n    # The total number of books is the sum of the arithmetic sequence of the books per shelf\n    total_books = 280\n    equation = Eq(7/2 * (top_shelf + (top_shelf + 18)), total_books)\n\n    # Solve the equation\n    solution = solve(equation, top_shelf)\n\n    # Return the value for the top shelf\n    return solution[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # In the worst case, Darrell could draw all blue and white pencils before\n    # getting a green one. Since there are 3 blue and 3 white pencils, that's\n    # 3 + 3 = 6 pencils.\n    # To ensure Darrell gets a green one, he must draw one more after that.\n    # So the answer is 6 + 1 = 7\n    return 7\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n\n    possible_n_values = divisors(2240)\n    for n in possible_n_values:\n        if is_square(2240 // n):\n            ans = n\n            break\n\n    return ans\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import gcd\nfrom functools import reduce\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solution():\n    chores = [3, 5, 9, 21]  # Time periods for each chore in days\n    ans = reduce(lcm, chores)\n    return ans\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_students = math_students + art_students - total_students\n\n    return both_students\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of kids and y be the number of candies\n    x, y = symbols('x y')\n\n    # The equation from the first condition\n    equation1 = Eq(x * 18, y - 12)\n\n    # The equation from the second condition\n    equation2 = Eq((x + 2) * 15, y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for page in range(1, 311):\n        for digit in str(page):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost_for_11_items = cost_per_item * 11\n    return total_cost_for_11_items\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import pow, sqrt, cbrt\n\n    value = 16.7 - cbrt(((pow(-4.56, 2)-pow(8.1, 3)) / pow(7.2, 3)) / (-sqrt(6 + 3/4) + 30.15))\n    ans = round(value, 3)\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let n be the number of years later for the sum of their ages to be 48\n    # Oliver's age after n years = 20 + n\n    # Lin's age after n years = 26 + n\n    # Sum of their ages after n years = (20 + n) + (26 + n) = 48\n    \n    # Simplifying the equation\n    # 20 + n + 26 + n = 48\n    # 2n + 46 = 48\n    # 2n = 2\n    # n = 1\n    \n    # It will be 1 year later when the sum of their ages will be 48\n    n = 1\n    return n\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Jayden to Carter speed ratio\n    speed_ratio_jayden_to_carter = 7 / 4\n    \n    # Total distance\n    total_distance = 440\n    \n    # Jayden covers the whole distance when Carter covers (4/7) of the distance\n    carter_distance_first_meet = (4 / 7) * total_distance\n    \n    # Distance remaining for Carter after first meeting\n    remaining_distance = total_distance - carter_distance_first_meet\n    \n    # Since Jayden walks 7 meters while Carter walks 4 meters,\n    # In the remaining distance, Jayden will cover (7/11) * remaining_distance\n    # while Carter covers (4/11) * remaining_distance\n    # So, the distance to the second meeting place from place A\n    # is the distance Jayden covered before the first meeting plus \n    # the distance he covers after it until the second meeting\n    jayden_distance_second_meet = total_distance + (7 / 11) * remaining_distance\n    \n    return jayden_distance_second_meet\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Mr. and Mrs. Lim's current ages\n    mrs_age, mr_age = symbols('mrs_age mr_age')\n\n    # Equation representing the ratio of their ages 7 years ago\n    equation1 = Eq((mr_age - 7) / (mrs_age - 7), 6/5)\n\n    # Equation representing the sum of their current ages\n    equation2 = Eq(mr_age + mrs_age, 69)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n\n    # We take the solution for Mr. Lim's age which is a positive number\n    mr_age_solution = solutions[mr_age]\n\n    return mr_age_solution\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of stickers John had\n    # Let y be the original number of stickers Sam had\n    # Let ratio be the ratio y:z (Sam's stickers: Peter's stickers)\n    ratio = symbols('ratio')\n    x, y = symbols('x y')\n\n    # Given ratio y:z is 7:5, so Peter has (5/7)*y stickers initially\n    # Sam and Peter gave 20% of their stickers to John: John gains 0.2 * y + 0.2 * (5/7) * y stickers\n    # John's stickers increased by 80%, which means 1.8 * x = x + 0.2 * y + 0.2 * (5/7) * y\n    \n    equation1 = Eq(1.8 * x, x + 0.2 * y + 0.2 * (5/7) * y)\n    # Sam had 20 stickers more than John in the end:\n    # After giving away, Sam has y - 0.2 * y stickers left, which equals x + 20\n    equation2 = Eq(y - 0.2 * y, x + 20)\n    \n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    # Peter's original number of stickers is (5/7) times the number of stickers Sam had\n    peter_stickers = solutions[y] * (5/7)\n    \n    return peter_stickers\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    mean_of_five = 87\n    mean_of_six = 88\n    total_of_five = mean_of_five * 5\n    total_of_six = mean_of_six * 6\n    jim_score = total_of_six - total_of_five\n    \n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of baseball bats the shop purchased at first\n    x = symbols('x')\n\n    cost_price = 135 * x\n    selling_price_per_bat = 185\n    remaining_bats = 3\n    profit = 2945\n\n    # Calculate proceeds when 3 bats are left\n    proceeds = (x - remaining_bats) * selling_price_per_bat\n\n    # Set up the equation\n    equation = Eq(proceeds, cost_price + profit)\n\n    # Solve for x\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n    equation2 = Eq(raja, kumar)\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    capacity = 6\n    minibuses_needed = (total_boys + capacity - 1) // capacity\n    return minibuses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[triangle]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for the unknowns\n    chair_price = symbols('chair_price')\n\n    # Define the equation based on the problem statement\n    equation = Eq(1 * (chair_price + 160) + 5 * chair_price, 328)\n\n    # Solve the equation\n    solved = solve(equation, chair_price)\n\n    # Return the price of one chair\n    return solved[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    ans = 879 + 268\n    return ans\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    # Let the rate of water flow from hot tap be x (volume per minute)\n    # Then the rate of water flow from the cold tap is 2x (volume per minute)\n    # When working together, the rate is x + 2x = 3x (volume per minute)\n    # It takes 10 minutes to fill the bath, so the volume of the bath is 10 * 3x = 30x\n    # The time to fill the bath using just the cold tap is volume / rate of cold tap\n    # So the time with just the cold tap is (30x) / (2x) = 15 minutes\n    \n    return 15\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    mean_difference = 240\n\n    mean_last_6_numbers = (total_sum - 4 * (1111 - mean_difference)) / 6\n\n    return mean_last_6_numbers\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money_p = 60  # Pip's money in pence\n    bud_money_pounds = 1.10  # Bud's money in pounds\n  \n    # Convert Pip's money to pounds and add to Bud's money\n    total_money = (pip_money_p / 100) + bud_money_pounds\n  \n    return total_money\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 4):\n        I, S, P = p[0], p[1], p[2]\n        if I != 0 and P != 0:\n            IS = I * 10 + S\n            PI = P * 10 + I\n            if 4 * IS == PI:\n                return PI\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    distance_first = 280\n    speed_first = 7\n    time_first = distance_first / speed_first\n\n    distance_middle = 400\n    speed_middle = 5\n    time_middle = distance_middle / speed_middle\n\n    distance_last = 800 - distance_first - distance_middle\n    speed_last = 8\n    time_last = distance_last / speed_last\n\n    total_time = time_first + time_middle + time_last\n\n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    jocye_speed_ratio = 3\n    lori_speed_ratio = 2\n    lori_speed = 2  # meters per second\n\n    jocye_speed = (jocye_speed_ratio / lori_speed_ratio) * lori_speed\n    time = 10  # seconds\n\n    distance_jocye_runs = jocye_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    bike_value_after_years = initial_value * (1 - depreciation_rate) ** years\n    return round(bike_value_after_years, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    # Probability of living over 25 years given it is already over 20 years\n    probability_over_25 = probability_over_25_given_over_20 / probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # Don walks 360 metres\n    don_distance = 360\n    \n    # Total distance to the library is 780 metres\n    # Danny meets Don at 360 metres from the house so Danny has walked 780 - 360\n    danny_distance = 780 - 360\n    \n    # Don's speed is 60 metres per minute\n    don_speed = 60\n    \n    # Don and Danny start at the same time and meet at the same time\n    # Thus, they walk the same amount of time\n    \n    # Time = Distance / Speed\n    # We calculate the time it takes for Don to walk 360 metres\n    time = don_distance / don_speed\n    \n    # Danny's speed = Danny's distance / time\n    danny_speed = danny_distance / time\n    \n    return danny_speed\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    num_teams = 5\n    games_played = comb(num_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = rope_skipping + long_jump - 2 * both_events\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    flour_g = 1000 + 500  # Convert 1 kg 500 g to grams\n    sugar_g = 1000 + 200  # Convert 1 kg 200 g to grams\n    butter_g = 900        # Butter is already in grams\n\n    total_g = flour_g + sugar_g + butter_g\n    mixture_per_tin = total_g / 8\n\n    return mixture_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j / i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "from math import factorial\n\ndef solution():\n    # Number of people\n    n_people = 4\n    # Possible positions for A and B (far right or far left)\n    positions_for_ab = 2\n    # Once A and B are placed, the remaining two people can be arranged in 2! ways\n    arrangements_of_cd = factorial(n_people - 2)\n    # Total arrangements\n    total_arrangements = positions_for_ab * arrangements_of_cd\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    numerator = 20 * 27 // 30\n    return numerator\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # In the worst case, Janice has to pick all marbles of two colors\n    # without getting 4 of the same color. This is the use of the pigeonhole principle.\n    # The third marble of the same color can be taken with the maximum number of previous color marbles.\n\n    red_marbles = 10\n    blue_marbles = 5\n    green_marbles = 8\n\n    # To ensure she gets 3 marbles of two different colors and not 4 of same color\n    max_two_colors = (red_marbles - 1) + (blue_marbles - 1)\n\n    # The next marble she takes will ensure she has 4 of the same color\n    min_marbles_for_four = max_two_colors + 1\n\n    return min_marbles_for_four\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    # initialize the total digits variable\n    total_digits = 0\n    # initialize the current page variable\n    current_page = 1\n\n    # run a loop to calculate the total digits used till now\n    while total_digits < 792:\n        # calculate how many digits the current page number has\n        digits_in_current_page = len(str(current_page))\n        # increment the total digits by the digits from the current page number\n        total_digits += digits_in_current_page\n        # only move to the next page if we have not reached or exceeded the 792 digits limit\n        if total_digits <= 792:\n            current_page += 1\n        else:\n            # if the limit was exceeded by adding last page- reduce one page for the correct count\n            current_page -= 1\n\n    # return the total number of pages just before we exceed 792 total digits\n    ans = current_page\n    return ans\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    all_combinations = permutations(digits, 2)\n    unique_two_digit_numbers = set(int(str(a) + str(b)) for a, b in all_combinations)\n\n    return len(unique_two_digit_numbers)\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n\n    # The smallest even 4-digit number must have 4 (the smallest even number) in the unit's place\n    units_place = 4\n    remaining_digits = [d for d in digits if d != units_place]\n\n    # The smallest digit among the remaining digits should be at the thousand's place\n    thousands_place = min(remaining_digits)\n    remaining_digits.remove(thousands_place)\n\n    # The remaining two digits can be placed in ascending order for the smallest number\n    remaining_digits.sort()\n\n    # Construct the smallest 4-digit even number\n    smallest_number = thousand_place * 1000 + remaining_digits[1] * 100 + remaining_digits[0] * 10 + units_place\n    \n    return smallest_number\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n\n    work_done_by_one_worker_in_one_day = 1 / (workers * days)\n    days_needed_for_one_worker = 1 / work_done_by_one_worker_in_one_day\n\n    return days_needed_for_one_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    for x in range(1,10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 6 * A + 25:\n                return A\n    return None\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n\n    pupils_per_row = total_pupils // rows\n\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2*a + b, 18)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    # Initialize a counter for unlocked lockers\n    unlocked_count = 0\n\n    # Iterate through all locker numbers\n    for locker_num in range(1, 101):\n        # If locker number is divisible by 3, it gets locked\n        if locker_num % 3 == 0:\n            # If locker number is also divisible by 5, toggle the lock\n            if locker_num % 5 == 0:\n                # Skip toggle for lockers divisible by 3 and 5 (stays locked)\n                continue\n        else:\n            # If locker number is not divisible by 3, but divisible by 5, toggle the lock\n            if locker_num % 5 == 0:\n                # No action required since these lockers would be unlocked after this operation\n                pass\n            else:\n                # Count as unlocked if not divisible by 3 or 5\n                unlocked_count += 1\n\n    return unlocked_count\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDEFG'):\n        p_str = ''.join(p)\n        if ((p_str.index('A') - p_str.index('B')) * (p_str.index('A') - p_str.index('C')) < 0 and  # A between B and C\n            abs(p_str.index('D') - p_str.index('E')) != 1 and  # D is not next to E\n            abs(p_str.index('F') - p_str.index('G')) == 1):  # F is next to G\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    # We start by finding numbers that satisfy the remainder conditions\n    # and are less than 100 since we're looking for a two-digit integer.\n\n    # For the remainder 5 when divided by 7, the possible numbers would be\n    # in the sequence of 12, 19, 26, ..., 98 (7k + 5 and less than 100).\n    # For the remainder 11 when divided by 13, the sequence would be\n    # 11, 24, 37, ..., 98 (13j + 11 and less than 100).\n\n    # We need to find a common number in both sequences that is less than 100.\n    # We loop starting from the largest possible two-digit number (99)\n    # and decrement until we find a number that satisfies both conditions.\n    \n    for n in range(99, 10, -1):\n        if n % 7 == 5 and n % 13 == 11:\n            return n\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # The speed of Nicolas compared to Yiding is 4:3\n    nicolas_speed = 4\n    yiding_speed = 3\n\n    # When Nicolas reaches level 16\n    nicolas_final_level = 16\n\n    # Find Yiding's level by keeping the same ratio\n    yiding_final_level = (yiding_speed * nicolas_final_level) // nicolas_speed\n\n    return yiding_final_level\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_per_cake = symbols('cost_per_cake')\n    lucy_money = symbols('lucy_money')\n\n    equation1 = Eq(10 * cost_per_cake - lucy_money, 11)\n    equation2 = Eq(13 * cost_per_cake - lucy_money, 26)\n\n    solutions = solve((equation1, equation2), (cost_per_cake, lucy_money))\n\n    return solutions[cost_per_cake]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50  # Total mass of boys\n    total_mass_girls = 6 * 40  # Total mass of girls\n    total_children = 4 + 6  # Total number of children\n\n    average_mass = (total_mass_boys + total_mass_girls) / total_children\n\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1/(2-3)) - (4/(5-6)) - (7/(8-9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    num1 = 4.6\n    num2 = 13.8\n    halfway = (num1 + num2) / 2\n    return halfway\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_scores = 5 * 40  # Mean score times number of matches\n    known_scores = 37 + 53 + 29 + 41  # Sum of known scores\n    x = total_scores - known_scores  # Calculate unknown score x\n    \n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    ans = 4336 // 8\n    return ans\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')\n    repeat_e = 'CHEESE'.count('E')\n    repeat_c = 'CHEESE'.count('C')\n    repeat_h = 'CHEESE'.count('H')\n    repeat_s = 'CHEESE'.count('S')\n\n    ways = factorial(total_letters) // (factorial(repeat_e) * factorial(repeat_c) * factorial(repeat_h) * factorial(repeat_s))\n    \n    return ways\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # All possible three-digit numbers, excluding those starting with 0\n    no_sevens = 8 * 9 * 9  # All possible three-digit numbers without any 7s\n\n    # At least two sevens means either two sevens exactly or three sevens:\n    # Two sevens can be in 3 positions: (7,7,X), (7,X,7), or (X,7,7)\n    # Since the number is three-digit, X can be any digit from 0 to 9 except 7\n    two_sevens = (1 * 1 * 9) * 3\n\n    # Three sevens can only be one number: (7,7,7)\n    three_sevens = 1\n\n    # Total numbers with at least two sevens = all numbers - numbers with no sevens + numbers with exactly two or three sevens\n    at_least_two_sevens = total_three_digit_numbers - no_sevens + two_sevens + three_sevens\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # initial number of animals and cows\n    total_animals_initial, cows_initial, goats_initial = symbols('total_animals_initial cows_initial goats_initial')\n\n    # equations based on the problem statement\n    equation1 = Eq(cows_initial, 0.65 * total_animals_initial)\n    equation2 = Eq(goats_initial, total_animals_initial - cows_initial)\n    \n    # 240 more cows and goats are added, cows increase by 20%, goats doubled\n    cows_final = cows_initial + 0.20 * total_animals_initial\n    goats_final = 2 * goats_initial\n    total_animals_final = total_animals_initial + 240\n\n    # equations with the new numbers\n    equation3 = Eq(goats_final, total_animals_final - cows_final)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (total_animals_initial, cows_initial, goats_initial))\n\n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    # Try all six-digit numbers with 9 in the units column\n    for num in range(100000, 1000000):\n        if str(num)[-1] == '9':\n            new_num = int('9' + str(num)[:-1])\n            if new_num == 4 * num:\n                return num\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # Since the smallest possible positive divisor is 1\n    smallest_divisor = 1\n    # The dividend can be calculated by the formula: dividend = (divisor * quotient) + remainder\n    dividend = (smallest_divisor * quotient) + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Jonathan's current age as 'jonathan', and Abigail's age as 'abigail'.\n    jonathan, abigail = symbols('jonathan abigail')\n\n    # Creating the equations based on the problem statement.\n    equation1 = Eq(abigail, jonathan + 6) # Abigail is 6 years older than Jonathan\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6)) # Six years ago, she was twice as old as he was\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (jonathan, abigail))\n\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    alice_rate = 1 / 40\n    bob_rate = 1 / 60\n    total_days = 27\n    work_done = 0\n    alice_days_worked = 0\n    \n    for day in range(1, total_days + 1):\n        if work_done >= 1:\n            break\n        work_today = alice_rate + bob_rate\n        work_done += work_today\n        alice_days_worked += 1\n\n    alice_days_off = total_days - alice_days_worked\n    return alice_days_off\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n    \n    ans = new_operation(4, 3) - new_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n    \n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A != 0 and C != 0 and (100 * A + 10 * B + A) + (100 * C + 10 * D + C) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    # Let's denote the number of candies Bud has as 'b'.\n    # Since Pip has 2 more candies than Bud, Pip has 'b + 2' candies.\n    \n    # According to the problem, the total number of candies is 10,\n    # so we have the equation: b + (b + 2) = 10\n    \n    # Solving the equation for b gives us the number of candies Bud has,\n    # and subsequently we can find out how many candies Pip has.\n    \n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number of candies Bud has\n    b = symbols('b')\n    \n    # Equation representing the total number of candies\n    equation = Eq(b + (b + 2), 10)\n    \n    # Solve the equation\n    solution = solve(equation, b)\n    \n    # Number of candies Pip has: Bud's candies + 2\n    pip_candies = solution[0] + 2\n    \n    return pip_candies\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    prices = solve((equation1, equation2), (apple, banana))\n\n    cost_of_5_bananas = 5 * prices[banana]\n    \n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    total_days, total_pages = symbols('total_days total_pages')\n\n    # Create equations based on the problem statement\n    # Vanessa finishes 2 days late if she reads 30 pages a day\n    equation1 = Eq(30 * (total_days + 2), total_pages)\n    # Vanessa finishes 4 days early if she reads 39 pages a day\n    equation2 = Eq(39 * (total_days - 4), total_pages)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_days, total_pages))\n\n    # Since we need both the number of days and the number of pages,\n    # we return them as a tuple\n    return solutions[total_days], solutions[total_pages]\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the original components of the expression\n    a, b, c, d, e= 285, 15, 5, 2\n    \n    # Calculate all possible outcomes with different combinations of brackets\n    results = set()\n    results.add(a + (b / c) - e)\n    results.add(a + b / (c - e))\n    results.add((a + b) / c - e)\n    results.add(a + (b / (c - e)))\n    results.add((a + b / c) - e)\n    results.add(((a + b) / c) - e)\n    results.add((a + b / c - e))\n    results.add((a + b) / (c - e))\n\n    # Return the number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = '2020202202020220202'  # one complete cycle of the sequence\n    cycle_length = len(sequence)  # the length of the cycle\n    num_cycles = 535 // cycle_length  # complete cycles within 535 digits\n    remaining_digits = 535 % cycle_length  # digits outside a complete cycle\n\n    # Count the number of 2s in one complete cycle\n    twos_in_cycle = sequence.count('2')\n    # Number of 2s in all complete cycles\n    total_twos = num_cycles * twos_in_cycle\n    # Add the number of 2s in the incomplete cycle (remaining digits)\n    total_twos += sequence[:remaining_digits].count('2')\n\n    return total_twos\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    value = (1000 + 2000 + 2100) / 17\n    return value\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def delta_operation(x, y):\n        return (x**2) - (y**2) + x + y\n\n    return delta_operation(10, 9)\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_away_cookies = 55\n\n    remaining_cookies = (morning_cookies + afternoon_cookies) - given_away_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    ans = 3102 // 6\n    return ans\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins Owen had initially\n    # Let y be the number of one-dollar coins Owen had initially\n    x, y = symbols('x y')\n\n    # According to the problem, 2/7 of the coins were fifty-cent coins,\n    # so 5/7 of the coins were one-dollar coins.\n    equation1 = Eq(y, 5/7 * x)  \n\n    # His mother gave him 10 one-dollar coins and 5/5=10 fifty-cent coins.\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins.\n    equation2 = Eq((y + 10), 2 * ((2/7 * x) + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    # Let's denote the number of adult tickets as 'a' and child tickets as 'c'.\n    for a in range(19 + 1): # Since we sold 19 tickets, there can be at most 19 adult tickets.\n        c = 19 - a # The rest will be children tickets.\n        total = 5 * a + 3 * c # Calculate the total amount with the given price per ticket.\n        if total == 75: # We are looking for the combination where the total amount is $75.\n            return a # Return the number of adult tickets when the condition is met.\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belt, dress, shirt = symbols('belt dress shirt')\n    \n    # Given relations\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n    \n    # Calculate the difference between the cost of the dress and the shirt\n    difference = solutions[dress] - solutions[shirt]\n    \n    return abs(difference)\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_saving = 7\n    andy_total_saving = 378\n    brenda_daily_saving = 6\n\n    days_andy_saved = andy_total_saving // andy_daily_saving\n    brenda_total_saving = days_andy_saved * brenda_daily_saving\n\n    return brenda_total_saving\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original volume of cuboid = length * breadth * height\n    # Let the original length be L, breadth be B, and height be H.\n    # Original volume (V_original) = L * B * H\n\n    # New dimensions:\n    # New length = L + 10% of L = L * (1 + 10/100) = L * 1.1\n    # New breadth = B * 4/5\n    # New height = H * 11/10\n\n    # New volume (V_new) = (L * 1.1) * (B * 4/5) * (H * 11/10)\n    # V_new = L * B * H * 1.1 * 4/5 * 11/10\n\n    # Find the percentage of new volume compared to the original:\n    # Volume percentage = (V_new / V_original) * 100\n    volume_percentage = (1.1 * (4/5) * (11/10)) * 100\n\n    return volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "from math import factorial\n\ndef solution():\n    num_contestants = 8\n    num_prizes = 3  # Gold, Silver, Bronze\n\n    ans = factorial(num_contestants) / factorial(num_contestants - num_prizes)\n    return int(ans)\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    return comb(10, 3)\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_ = sum([30, 40, 50] * 3)\n    return sum_\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    total_points = 44\n    correct_points = 6\n    incorrect_penalty = -2\n    # Let x be the number of correct answers\n    # Then (total_questions - x) is the number of incorrect answers\n    # The total score is then x*correct_points + (total_questions - x)*incorrect_penalty\n    # We set up the equation x*correct_points + (total_questions - x)*incorrect_penalty = total_points\n    # and solve for x.\n\n    # Hypothesis: let's suppose all answers are correct, then the initial score is:\n    total_if_all_correct = total_questions * correct_points\n    # The difference caused by each incorrect answer (compared to a correct one) is:\n    diff_per_incorrect = correct_points - incorrect_penalty\n    # Now let's find how much we need to reduce from the total_if_all_correct to get the actual total_points:\n    points_to_reduce = total_if_all_correct - total_points\n    # Find the number of incorrect answers (which is the same as the number of points to reduce divided by the difference each incorrect answer makes):\n    incorrect_answers = points_to_reduce / diff_per_incorrect\n    # Since we know the total number of questions, we can find the number of correct answers:\n    correct_answers = total_questions - incorrect_answers\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 * 100 / remaining_work_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    equal_gathering = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total_mushrooms, equal_gathering), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    questions = 40\n    students = 5\n\n    # Assuming other 4 students solve the least number of questions and their count increases by 1 for each.\n    # 1+2+3+4 = 10 questions for other four students leaving 30 questions for Noa.\n    noa = questions - sum(range(1, students))\n\n    return noa\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person has initially\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Initial total marbles count equation\n    eq_total = Eq(anna + betsy + charlene, 168)\n\n    # Anna ends with (anna_initial - 8) marbles\n    # Betsy ends with (betsy_initial + 8 - 15) marbles\n    # Charlene ends with (charlene_initial + 15) marbles\n\n    # The ratios give us two more equations (with 2x, 5x, 7x being anna, betsy, and charlene's end counts respectively)\n    eq_ratio_anna = Eq(2 * (betsy + 7), anna - 8)\n    eq_ratio_betsy = Eq(2 * (betsy + 7), 5 * (anna - 8))\n    eq_ratio_charlene = Eq(7 * (anna - 8), charlene + 15)\n\n    # Solve the equations simultaneously for the initial counts of anna, betsy, and charlene\n    solutions = solve((eq_total, eq_ratio_anna, eq_ratio_betsy, eq_ratio_charlene), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging: 1 hour from 6:30 to 7:30\n    jogging_speed = 6.5 # miles per hour\n    jogging_distance = jogging_speed * 1 # miles\n    \n    # Time spent walking: 2 hours from 7:30 to 9:30\n    walking_speed = 4.5 # miles per hour\n    walking_distance = walking_speed * 2 # miles\n    \n    # Total distance\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    num = 4321\n    ans = round(num, -3)\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    meters = 9\n    centimeters_per_meter = 100\n\n    centimeters = meters * centimeters_per_meter\n    \n    return centimeters\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols\n    scan_age, ted_age = symbols('scan_age ted_age')\n\n    # Define the equations based on the given ratios\n    equation1 = Eq(scan_age / ted_age, 1/4)\n    equation2 = Eq((scan_age + 4) / (ted_age + 4), 1/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (scan_age, ted_age))\n    scan_age_solution = solutions[scan_age]\n    ted_age_solution = solutions[ted_age]\n\n    # Since we now know Scan's and Ted's current ages, we can create an equation for the ratio in the past\n    k = symbols('k') # k is the number of years ago\n    equation3 = Eq((scan_age_solution - k) / (ted_age_solution - k), 1/9)\n\n    # Solve for k\n    solution_for_k = solve(equation3, k)\n    k_solution = solution_for_k[0]\n\n    return k_solution\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol declaration\n    foldable, non_foldable = symbols('foldable non_foldable')\n\n    # Equations based on the problem statement\n    equation1 = Eq(foldable + non_foldable, 476)  # Total bikes\n    equation2 = Eq(5 / 9 * non_foldable + 4 / 7 * foldable, 476 - 208)  # Bikes left after sales\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (foldable, non_foldable))\n    \n    # Calculate the number of foldable bicycles sold\n    foldable_bicycles_sold = solutions[foldable] - (4 / 7 * solutions[foldable])\n\n    return foldable_bicycles_sold\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    climbed = 0\n    day = 0\n    daily_climb = 10\n    nightly_slide = 0\n\n    while climbed < height:\n        day += 1\n        climbed += daily_climb\n        if climbed >= height:\n            break\n        nightly_slide += 1\n        climbed -= nightly_slide\n\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Let's denote the number of guppies as g.\n    # According to the problem:\n    # Number of goldfish = 2 * g\n    # Number of mollies = 2 * (Number of goldfish) = 2 * 2 * g = 4 * g\n    # And total number of mollies is given as 276.\n    # So, 4 * g = 276\n    g = 276 / 4\n\n    # The difference between the number of mollies and guppies is:\n    # Number of mollies - Number of guppies = 276 - g\n    difference = 276 - g\n\n    return int(difference)\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # cm per meter\n    real_tree_height = 12  # meters\n    model_tree_height = real_tree_height * scale_ratio  # convert meters to centimeters\n\n    return model_tree_height\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    factors = [i for i in range(1, 21) if 20 % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000  # six thousand grams remaining\n    used_fraction = 5/8\n    remaining_fraction = 1 - used_fraction\n    \n    original_flour = remaining_flour / remaining_fraction\n    \n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Yohan needs to pick at least one pair of white socks.\n    # In the worst-case scenario, he picks all red and black socks before picking a white pair.\n    # Thus, he would have picked 10 red socks and 10 black socks.\n    # To guarantee that he gets at least one pair of white socks,\n    # he then needs to pick 2 white socks after that, which could lead to a pair in the worst case.\n    \n    max_number_of_socks = 10 + 10 + 2  # All red, all black, and then two whites\n    return max_number_of_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 765 * 0.60\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n\n    # The number of intervals between lamp posts is equal to the total number\n    # of flowers divided by the number of flowers between each pair of posts.\n    number_of_intervals = total_flowers / flowers_between_posts\n\n    # Adding 1 to intervals to get the number of lamp posts\n    number_of_lamp_posts = number_of_intervals + 1\n\n    # Distance between posts is total road length divided by number of intervals.\n    distance_between_posts = 50 / number_of_intervals\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # Using the Pigeonhole Principle:\n    # If there are n pigeonholes and k pigeons, and k > n,\n    # at least one pigeonhole must contain more than floor(k/n) pigeons.\n    #\n    # We have 20 students (pigeonholes) and we want at least one student\n    # to get 3 pieces of candy.\n    # This means (candies - 1) must be distributed among 20 students (pigeonholes),\n    # so that no pigeonhole (student) has 3 or more pigeons (candies).\n    #\n    # If each of the 20 students gets 2 pieces of candy, there are 40 candies in total.\n    # If one more candy is added, then there will be a student with at least 3 candies.\n\n    # candies - 1 = 2 * 20 (each student gets 2)\n    # candies = (2 * 20) + 1\n    candies = (2 * 20) + 1\n\n    return candies\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    ans = 1741 - 968\n    return ans\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    # total questions\n    total_questions = 20\n    # mark for correct answer\n    correct_mark = 8\n    # mark deducted for wrong answer\n    wrong_mark = 4\n    # Isabelle's score\n    isabelle_score = 100\n\n    # total marks if all answers were correct\n    total_correct_marks = total_questions * correct_mark\n\n    # since Isabelle got 100 marks, she must have gotten some wrong\n    # let x be the number of correct answers\n    # then (20 - x) is the number of wrong answers\n    # each wrong answer costs Isabelle not only the correct marks she missed (8 marks)\n    # but also an additional penalty of 4 marks\n    # so her final score is x * 8 (for correct answers) minus (20 - x) * 4 (for wrong ones)\n\n    # so we have the equation\n    # x * correct_mark - (total_questions - x) * wrong_mark = Isabelle's score\n\n    # let's solve for x\n    for x in range(total_questions+1):\n        if x * correct_mark - (total_questions - x) * wrong_mark == isabelle_score:\n            return x\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_count = 6\n    right_count = 14\n    favorite_book = 1\n    total_books = left_count + favorite_book + (right_count - favorite_book)\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    return 8 - 17\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    number = 48 * (5/4)\n    return number\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    n = 5\n\n    # Follow a geometric progression\n    fifth_number = first_number * (ratio ** (n - 1))\n\n    return fifth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10**7) * (5.4 * 10**-12)\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_per_friend = (total_sweets - sweets_for_sister) // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Start from the scenario where the distribution is most uneven:\n    # If the last child gets the most, let's find the maximum they can get.\n    # To ensure no two children get the same number of apples and each gets at least one,\n    # we can start giving 1 apple to the first child, 2 to the second, and so on until the 4th child.\n    # The remaining apples go to the 5th child.\n\n    # Number of apples distributed to the first four children if each gets one more than the previous\n    apples_distributed = sum(range(1, 5))  # 1 + 2 + 3 + 4\n    \n    # Subtract the already distributed apples from the total to find the maximum for the 5th child\n    max_apples_to_last_child = 19 - apples_distributed\n    \n    return max_apples_to_last_child\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12\n    margin = 1.5\n    distance_between = 3\n    \n    effective_length = side_length - 2 * margin\n    num_bushes_per_side = effective_length // distance_between\n    \n    total_bushes = num_bushes_per_side * 4\n    \n    return int(total_bushes)\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132  # km per hour\n    speed_slow_van = 78   # km per hour\n    time = 8              # hours\n\n    distance_apart = (speed_fast_van + speed_slow_van) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3) * (x - 1) - (1/4) * (3 * x + 1), 1/6)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work = 360\n    completed_percentage = 60\n    total_work = remaining_work / (1 - (completed_percentage / 100))\n    return int(total_work)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    original_score = symbols('original_score')\n\n    # Equation: original_score - 30 = (original_score / 2) + 10\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    # Solve the equation\n    score_solution = solve(equation, original_score)\n\n    return score_solution[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    def count_even_factors(number):\n        count = 0\n        for i in range(1, number + 1):\n            if number % i == 0 and i % 2 == 0:\n                count += 1\n        return count\n\n    ans = count_even_factors(78)\n    return ans\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given that 9 rabbits can be exchanged for 3 goats\n    # Thus, 1 goat is equivalent to 9/3 = 3 rabbits\n    rabbits_per_goat = 9 / 3\n    \n    # Given that 2 goats can be exchanged for 4 cows\n    # Thus, 1 cow is equivalent to 2/4 = 0.5 goats\n    goats_per_cow = 2 / 4\n    \n    # We want to find how many rabbits 2 cows can be exchanged for\n    # So, rabbits for 2 cows = 2 cows * goats_per_cow * rabbits_per_goat\n    rabbits_for_2_cows = 2 * goats_per_cow * rabbits_per_goat\n    \n    return rabbits_for_2_cows\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # P can complete the job in 12 days, 8 hours a day\n    p_days = 12\n    p_hours_per_day = 8\n    p_work_hours = p_days * p_hours_per_day\n\n    # Q can complete the job in 8 days, 10 hours a day\n    q_days = 8\n    q_hours_per_day = 10\n    q_work_hours = q_days * q_hours_per_day\n\n    # Calculate the work done by P in 1 hour\n    p_work_per_hour = 1 / p_work_hours\n\n    # Calculate the work done by Q in 1 hour\n    q_work_per_hour = 1 / q_work_hours\n\n    # Calculate the combined work per hour if P and Q work together\n    combined_work_per_hour = p_work_per_hour + q_work_per_hour\n\n    # Since they work 8 hours a day, multiply the combined work per hour by 8\n    combined_work_per_day = combined_work_per_hour * 8\n\n    # Calculate the total number of days required for P and Q to finish the job\n    days_to_complete = 1 / combined_work_per_day\n\n    return days_to_complete\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    skipped_questions = 3\n    correct_mark = 4\n    wrong_mark = -1\n    total_score = 168\n\n    # Number of questions answered (either right or wrong)\n    answered_questions = total_questions - skipped_questions\n\n    # Let x be the number of correct answers\n    # The rest (answered_questions - x) will be the wrong answers\n\n    # The total score is the sum of marks from correct and wrong answers\n    # total_score = x * correct_mark + (answered_questions - x) * wrong_mark\n\n    # Rearrange to solve for x\n    # total_score = x * correct_mark - x * wrong_mark + answered_questions * wrong_mark\n    # x * (correct_mark - wrong_mark) = total_score - answered_questions * wrong_mark\n    # x = (total_score - answered_questions * wrong_mark) / (correct_mark - wrong_mark)\n\n    x = (total_score - answered_questions * wrong_mark) // (correct_mark - wrong_mark)\n\n    return x\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of sets of 4 pencils and 5 pens\n    x = symbols('x')\n\n    # Initial amounts\n    pencils_init = 4 * x\n    pens_init = 5 * x\n\n    # After replacement\n    pencils_final = pencils_init + 1\n    pens_final = pens_init - 1\n\n    # New ratio equation: pencils_final / pens_final = 7/8\n    ratio_eq = Eq(pencils_final / pens_final, 7/8)\n\n    # Solve the equation\n    x_value = solve(ratio_eq, x)[0]\n\n    # Total number of pencils and pens in my desk\n    total = pencils_init + pens_init\n    total = total.subs(x, x_value)\n\n    return total\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    difference = 4\n    total_rows = 10\n\n    num_seats = total_rows / 2 * (2 * first_term + (total_rows - 1) * difference)\n\n    return int(num_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n\n    numbers = [10, 9, 8, 7, 6, 5, 4]\n    result = numbers[0]\n\n    for n in numbers[1:]:\n        result = custom_operation(result, n)\n        \n    return result\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    girls_percentage = 60  # Since 40% are boys, 60% must be girls\n    total_children = (girls * 100) / girls_percentage\n\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n    return remaining_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    start_missing_page = 14 + 1  # The page number right after the last non-missing page\n    end_missing_page = 35 - 1  # The page number right before the first non-missing page after missing ones\n    \n    # Since each sheet of newspaper has two pages (front and back), divide by 2 to get missing sheets\n    missing_sheets = (end_missing_page - start_missing_page + 1) // 2\n    return missing_sheets\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8 ** 2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tuna_price, curry_price = symbols('tuna_price curry_price')\n    \n    equation1 = Eq(curry_price, tuna_price - 0.20)\n    equation2 = Eq(12 * tuna_price + 19 * curry_price, 39.60)\n    \n    solutions = solve((equation1, equation2), (tuna_price, curry_price))\n    \n    return solutions[tuna_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    odd_digits = [1, 3]\n    count = 0\n    \n    for tens in digits:\n        if tens == 0:  # Cannot use 0 as the tens digit\n            continue\n        for units in odd_digits:\n            if tens != units:  # both digits must be different\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for number in range(1, 500):\n        if number % 5 == 1 and number % 8 == 4 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the cost of the books be x.\n    # Mike wants to earn a 60% profit on x, so the target profit is 0.6 * x.\n    target_profit = 0.6\n    \n    # On first day, he sold 70% of the books at a 60% profit.\n    # The profit from the first day is (70% of x) * 60% = 0.7 * x * 0.6\n    first_day_profit = 0.7 * 0.6\n\n    # Mike earned 80% of the target profit.\n    # Total profit = 80% of target profit = 0.8 * target_profit * x\n    total_profit = 0.8 * target_profit\n\n    # The profit from second day will be the total profit minus the first day profit.\n    # The second day profit is therefore (total_profit * x) - (first_day_profit * x)\n    second_day_profit = total_profit - first_day_profit\n\n    # The remaining books to sell on the second day is 30% of the books which cost is 0.3 * x.\n    remaining_books_cost = 0.3\n\n    # Let the discount rate on the second day be d.\n    d = symbols('d')\n\n    # On the second day, Mike sells the remaining books at a discount rate d.\n    # He earns (1-d) * (remaining_books_cost * x) from the remaining books.\n    # The profit from the second day is then ((1 - d) * (remaining_books_cost * x)) - (remaining_books_cost * x)\n    # We can thus construct an equation as follows:\n    equation = Eq(second_day_profit, ((1 - d) * remaining_books_cost) - remaining_books_cost)\n\n    # Solve for the discount rate d.\n    discount_rate = solve(equation, d)[0]\n\n    return float(discount_rate * 100)  # Convert the rate to percentage\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    balloons_for_boy = 2\n    balloons_for_girl = 4\n    boys = symbols('boys')\n    \n    # Let's assume the number of boys = boys\n    # Then the number of girls = total_children - boys\n    # Total number of balloons = boys * balloons_for_boy + (total_children - boys) * balloons_for_girl\n    \n    balloons_equation = Eq(boys * balloons_for_boy + (total_children - boys) * balloons_for_girl, total_balloons)\n    \n    boys_count = solve(balloons_equation, boys)\n    \n    return boys_count[0]\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_num = 10\n    end_num = 25\n    count = end_num - start_num + 1\n    return count\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n\n    meters_ridden = speed_m_per_min * time_minutes\n\n    return meters_ridden\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "from fractions import Fraction\n\ndef solution():\n    result = 1\n    for i in range(3, 20, 2):\n        result *= Fraction(1 + 2/i)\n    return float(result)\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_length_cm = 85\n    roll_length_cm = 2000\n    strings_needed = 400\n    total_length_needed = string_length_cm * strings_needed\n    rolls_needed = -(-total_length_needed // roll_length_cm) # Ceiling division\n\n    return rolls_needed\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma, john = symbols('emma john')\n\n    equation1 = Eq(john, emma + 7)\n    equation2 = Eq(emma + john + 6, 27)  # Both will be 3 years older so add 3+3=6 to the current total age\n\n    solutions = solve((equation1, equation2), (emma, john))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n            \nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    donation = salary / 4\n    spent_on_food = 5/6 * (salary - donation)\n    savings = salary - donation - spent_on_food\n    equation = Eq(spent_on_food, donation + 78)\n    \n    answer = solve(equation, salary)\n    \n    return answer[0]\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cows and goats\n    cows, goats = symbols('cows goats')\n\n    # Equation 1: 65% of the total animals were cows\n    equation1 = Eq(cows, 0.65 * (cows + goats))\n\n    # Equation 2: When 240 animals are added, the number of cows becomes 85% of the new total\n    equation2 = Eq(cows + 240, 0.85 * (cows + goats + 240))\n\n    # Equation 3: The number of goats doubled\n    equation3 = Eq(2 * goats, goats + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cows, goats))\n\n    # Extract the number of goats from the solutions\n    return solutions[goats]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)\n    last_digit_3 = pow(3, 2017, 10)\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # t is the time in minutes David walks before increasing speed\n    # s is the time in minutes David walks after increasing speed\n    t, s = symbols('t s')\n    \n    # The total distance covered before increasing speed (speed 150m/min for t minutes)\n    # Plus the total distance covered after increasing speed (speed 200m/min for s minutes)\n    equation = Eq(150 * t + 200 * (s + 10), 3700)\n    \n    # The total time is t + s + 10 (since he walked for s minutes at higher speed + 10 minutes initially)\n    solutions = solve(equation, (t, s))\n    \n    # We only expect one solution since we have one equation and two unknowns\n    # Total time includes the 10 minutes before increasing his speed\n    total_time = solutions[t] + solutions[s] + 10\n\n    return total_time\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans = solve_congruence(*congruences)\n    \n    # Filter the result to find the number less than 400\n    while ans[0] < 400:\n        return ans[0]\n        ans = (ans[0] + ans[1], ans[1])\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # To be divisible by 9, the sum of all the digits of the number must be divisible by 9\n    # Digits already in the number: 4, 7, 1, 9, which sum up to 21\n    fixed_sum = 4 + 7 + 1 + 9\n    \n    # Permutation of the remaining digits [0,2,3,5,6,8]\n    # Choosing three digits A, B, C from these to make the sum divisible by 9\n    for A in [0, 2, 3, 5, 6, 8]:\n        for B in [0, 2, 3, 5, 6, 8]:\n            for C in [0, 2, 3, 5, 6, 8]:\n                if A != B and B != C and A != C:  # All digits must be different\n                    if (fixed_sum + A + B + C) % 9 == 0:  # The total sum must be divisible by 9\n                        return (A + B + C), f\"47A1B9C\".replace(\"A\", str(A)).replace(\"B\", str(B)).replace(\"C\", str(C))\n\n# Store the result in variable ans\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    sweets_bought_each_week = 45\n    sweets_eaten_each_week = 60\n    \n    sweets_change_each_week = sweets_bought_each_week - sweets_eaten_each_week\n    sweets_left_desired = 150\n    \n    weeks = (initial_sweets - sweets_left_desired) / -sweets_change_each_week\n    \n    return int(weeks)\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of each apple and orange\n    apple, orange = symbols('apple orange')\n\n    # Jessie's purchase equation: 2 apples + 1 orange = 40p\n    eq1 = Eq(2 * apple + orange, 40)\n\n    # Bella's purchase equation: 1 apple + 2 oranges = 35p\n    eq2 = Eq(apple + 2 * orange, 35)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (apple, orange))\n\n    # Carrie's purchase: 1 apple + 1 orange\n    carrie_cost = solutions[apple] + solutions[orange]\n\n    return carrie_cost\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    digit_options = 3  # Since we can use 5, 6, and 7\n    positions = 3  # The number of positions in a three-digit number\n    # Each position can be any of the three digits.\n    # Therefore, the number of different three-digit numbers that can be formed is:\n    ans = digit_options ** positions\n    return ans\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2  # We start checking from 2 because there are always 2 sweets remaining\n    while not (sweets % 3 == 2 and sweets % 4 == 2 and sweets % 5 == 2 and sweets % 6 == 2):\n        sweets += 1\n    return sweets\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes = sport_class_students + reading_class_students - total_students\n    \n    return both_classes\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # Calculate the common difference (d) of the arithmetic sequence using the formula:\n    # a_n = a_1 + (n - 1) * d, where a_n is the n-th term and a_1 is the first term.\n    \n    # Given the 7th term (a_7) is 57 and the 15th term (a_15) is 89, we have the following equations:\n    # a_7 = a_1 + 6 * d = 57\n    # a_15 = a_1 + 14 * d = 89\n    \n    # By subtracting the two equations we eliminate a_1 and solve for d:\n    # (a_1 + 14 * d) - (a_1 + 6 * d) = 89 - 57\n    # 8 * d = 32\n    # d = 32 / 8\n    common_difference = (89 - 57) / (15 - 7)\n    \n    return common_difference\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_money = 140\n    money_spent_on_rackets = 2 * racket_price\n    remaining_money = total_money - money_spent_on_rackets\n    number_of_balls = remaining_money / ball_price\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Considering the worst-case scenario according to the Pigeonhole Principle\n    # Draw all balls of one color, then all balls of second color.\n    # Finally, the next ball drawn must be of the third color.\n    balls_to_have_three_diff = 4 + 4 + 1  # 4 purple + 4 white + 1 red\n    return balls_to_have_three_diff\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_rate = 4\n    jed_chocolates = 137\n    jed_rate = -6\n\n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_rate\n        jed_chocolates += jed_rate\n        week += 1\n\n    return week\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "from math import comb\n\ndef solution():\n    total_points = 12\n    # Choose any 2 points to form the hypotenuse, \n    # which uniquely determines a right angled triangle since the angle \n    # opposite the hypotenuse is always 90 degrees in a semicircle.\n    # There are total_points // 2 - 1 semi circles in the circle.\n    hypotenuse_ways = comb(total_points, 2)\n    right_angle_combinations = (total_points // 2 - 1) * hypotenuse_ways\n    \n    return right_angle_combinations\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    total_boxes = 6\n    eaten_donuts = 3\n\n    total_donuts = donuts_per_box * total_boxes\n    remaining_donuts = total_donuts - eaten_donuts\n\n    return remaining_donuts\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    left_durians = total_durians - sold_durians\n    \n    return int(left_durians)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for a box of apples and a box of oranges\n    apples, oranges = symbols('apples oranges')\n\n    # Create the equations based on the given information\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    # Expand the equation\n    expanded_equation = 5 * 6 * c - 5 * 1  # 30c - 5\n    \n    # Solve for c\n    c = (-35 + 5) / 30  # Add 5 on both sides then divide by 30\n    \n    return c\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # Since the tiger is 11th and standing in the exact middle, \n    # there must be 10 animals in front and 10 animals behind.\n    total_animals = 10 + 1 + 10  # The 1 in the middle is the tiger.\n    \n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Let's represent the total number of roses Nancy had after her mother brought some as 'total_roses'.\n    # Since each of the 4 vases has the same number of roses, and she originally divided 24 roses into 3 vases,\n    # we can say that each of the first 3 vases had 24 / 3 = 8 roses. \n    # This means, in the next arrangement, each of the 4 vases should have 8 roses (same as the original number per vase).\n    # Let total_roses / 4 = 8 (since each of the 4 new vases has 8 roses)\n    # Solve for total_roses.\n\n    roses_per_vase = 24 // 3\n    total_roses = roses_per_vase * 4\n    ans = total_roses + 24  # original 24 roses + the roses her mother brought\n    return ans\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return (100 - (33 + 34))\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 50\n    mamee_cost = haribo_cost - 30\n    jelly_cost = 6 * mamee_cost\n\n    return jelly_cost / 100  # convert cents to dollars\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    return number_to_words(number)\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    num, _ = solve_congruence(*congruences)\n    return num\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n\n    candies_will_hates = mint_candies\n    max_candies_will_can_eat = lemon_candies + cherry_candies\n\n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    number1 = -18\n    number2 = -2\n    midpoint = (number1 + number2) / 2\n    return midpoint\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    from itertools import permutations\n    \n    # Loop through all permutations of the digits 1-9, since 0 cannot be a leading digit.\n    for perm in permutations('123456789', 4):\n        AB = int(perm[0] + perm[1])\n        BC = int(perm[1] + perm[2])\n        CD = int(perm[2] + perm[3])\n        ABC = int(perm[0] + perm[1] + perm[2])\n        BCD = int(perm[1] + perm[2] + perm[3])\n        \n        # Check the divisibility conditions\n        if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n            return int(''.join(perm))  # If all conditions are met, return the concatenated number\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_2_cheese_cake = 2 * cheese_cake_price\n    return price_for_2_cheese_cake\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # define the congruences based on the problem statement\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    # use solve_congruence from sympy to find the solution to the system of congruences\n    num, _ = solve_congruence(*congruences)\n    \n    # we search for the smallest positive solution that is less than 80\n    while num < 80:\n        return num\n        num += 2 * 3 * 4 * 5  # increase by the product of moduli\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    num_games = num_teachers - 1  # In a single elimination tournament, number of games is one less than number of players\n\n    return num_games\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the sons' and daughters' ages\n    younger_son, older_son, younger_daughter, older_daughter = symbols('younger_son older_son younger_daughter older_daughter')\n    \n    # Create equations based on the information given\n    equation1 = Eq(younger_son + older_son + younger_daughter + older_daughter, 55)\n    equation2 = Eq(older_son, younger_son + 3)\n    equation3 = Eq(older_daughter, younger_daughter + 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (younger_son, older_son, younger_daughter, older_daughter))\n    \n    # Return the age of the youngest child\n    youngest_child_age = min(solutions[younger_son], solutions[older_son], solutions[younger_daughter], solutions[older_daughter])\n    \n    return youngest_child_age\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n    \n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = 20+19+18+17+16-15-14-13-12-11\n    return ans\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    w, h = symbols('w h')\n    \n    # Define the equations based on the given information\n    equation1 = Eq(2*w + 3*h, 433)\n    equation2 = Eq(5*w + 4*h, 701)\n    \n    # Solve the equations for the variables\n    solved_values = solve((equation1, equation2), (w, h))\n    \n    return solved_values[w]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    decimal_rep = \"428571\"  # The repeating sequence after the decimal point\n    sum_digits = 0\n    for i in range(58):\n        sum_digits += int(decimal_rep[i % len(decimal_rep)])\n    return sum_digits\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "def solution():\n    from math import factorial\n\n    total_books = 3 + 4 + 2 + 2\n    biographies = 3\n    science_fictions = 4\n    magazines = 2\n    practice_books = 2\n\n    ways = factorial(total_books) // (factorial(biographies) * factorial(science_fictions) * factorial(magazines) * factorial(practice_books))\n\n    return ways\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x grams of solution exchanged from A to B \n    x = symbols('x') \n\n    # After exchange, A has (50 - x) grams of its original solution and x grams of B's solution\n    concentration_a = ((50 * 0.11) - (0.11 * x) + (0.47 * x)) / 50\n\n    # After exchange, B has (50 - x) grams of its original solution and x grams of A's solution\n    concentration_b = ((50 * 0.47) - (0.47 * x) + (0.11 * x)) / 50\n\n    # Set the two concentrations equal\n    equation = Eq(concentration_a, concentration_b)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_length = 13\n    difference = 25\n    nicks_length = toms_length + difference\n    \n    # Since the question asks for the difference in length, which is the value by which Nick's string is longer\n    # we return the difference as the answer.\n    return difference\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    chicken_tenders_students = 18\n    total_students = 50\n\n    percentage = (chicken_tenders_students / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # convert meters to centimeters\n    distance_between_cauliflowers = 40  # in centimeters\n    first_cauliflower_distance = 20  # in centimeters\n\n    available_length_for_cauliflowers = plot_length_cm - 2 * first_cauliflower_distance\n    num_cauliflowers = (available_length_for_cauliflowers // distance_between_cauliflowers) + 1\n\n    return int(num_cauliflowers)\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # Since the cards can be rotated, the number of ways to arrange them into\n    # a three-digit number is simply the number of permutations of the three cards.\n    from itertools import permutations\n\n    # Create a set to avoid duplicate entries due to rotations of the same digits.\n    unique_numbers = set(permutations([1, 3, 6], 3))\n\n    # The number of unique permutations is the count of different three-digit numbers.\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    # There are 15 candies to distribute into 4 different piles.\n    # Use combinations to find the total ways to pick piles that\n    # are strictly increasing (different numbers in each pile)\n    # To ensure no pile is empty, consider candies numbered from 1 to 14\n    # (since one candy will be the last one), and choose 3 dividers among them.\n    total_candies = 14\n    dividers = 3\n\n    # Calculate the number of ways to place dividers\n    count = len(list(combinations(range(1, total_candies), dividers)))\n\n    return count\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    prime_list = []\n    for num in range(2, 50):  # We start at 2 because it's the smallest prime number\n        if isprime(num) and isprime(num + 6) and num + 6 < 50:\n            prime_list.append(num)\n        elif isprime(num) and isprime(num - 6) and num - 6 > 1:\n            prime_list.append(num)\n\n    return len(set(prime_list)), sorted(set(prime_list))\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    return 250 * 0.30\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    # First convert everything to metres\n    first_length = 3.7  # in metres\n    second_length = 64 / 100  # 64 cm to metres\n    third_length = 2 + 7 / 100  # 2 metres 7cm to metres\n    \n    # Add and then subtract the lengths in metres\n    total_length = (first_length + second_length) - third_length\n    \n    return total_length\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while True:\n        a, b = b, a + b\n        if a == 21:\n            return b\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # The sequence is a geometric progression where each term is double the previous term.\n    # The nth term of a geometric sequence can be found using the formula: a * r^(n-1)\n    # where 'a' is the first term and 'r' is the common ratio.\n    # In this case, the first term a = 1 and the common ratio r = 2.\n\n    # 20th number in the sequence\n    a20 = 1 * 2**(20 - 1)\n\n    # 17th number in the sequence\n    a17 = 1 * 2**(17 - 1)\n\n    # Dividing the 20th number by the 17th number\n    ans = a20 / a17\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_numbers = 35\n    half_sum = sum_of_numbers / 2\n    if sum_of_numbers % 2 == 0:\n        # If the sum is even, the largest product is the square of half of the sum\n        largest_product = half_sum ** 2\n    else:\n        # If the sum is odd, the largest product is obtained by multiplying the integers\n        # on either side of half of the sum\n        num1 = half_sum - 0.5\n        num2 = half_sum + 0.5\n        largest_product = num1 * num2\n\n    return int(largest_product)  # Ensure the result is an integer\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_earnings_per_day = 70\n    number_of_working_days = 6  # from Monday to Saturday\n\n    total_earnings = average_earnings_per_day * number_of_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # The total number of books that Alice, Becky, and Crystal have\n    total_books_abc = 60 * 3\n    \n    # When Dennis is counted in, the average number increases by 10\n    # This means the new average is 70 books per person, for 4 people\n    total_books_abcd = 70 * 4\n    \n    # The number of books Dennis has is the difference \n    # between the total books all four have and the total books of ABC\n    dennis_books = total_books_abcd - total_books_abc\n    \n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    well_depth = 16\n    total_distance = 0\n    days = 0\n\n    while total_distance < well_depth:\n        days += 1\n        total_distance += day_distance\n        if total_distance >= well_depth:\n            break\n        total_distance -= night_distance\n\n    return days\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    smallest_two_digit_prime = 11\n    largest_two_digit_square = 81  # Since 10^2 = 100, which is a three-digit number.\n\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_14 = 9\n    number_of_gaps_14 = 4 - 1  # Number of intervals from 1st to 4th flag\n    distance_between_flags = distance_14 / number_of_gaps_14\n    number_of_gaps_19 = 9 - 1  # Number of intervals from 1st to 9th flag\n    distance_19 = distance_between_flags * number_of_gaps_19\n    return distance_19\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_model_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_model_height = (john_model_height / ratio_john) * ratio_mike\n\n    return mike_model_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    # Check if 233 is a prime number or not\n    if 233 > 1:\n        for i in range(2, 233//2 + 1):\n            if (233 % i) == 0:\n                return \"No, Michael is incorrect.\"\n        return \"Yes, Michael is correct.\"\n    else:\n        return \"No, Michael is incorrect.\"\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    number = 4 + 0.6 + 0.07\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22\n    speed_of_current = 3\n    distance = 200\n    \n    downstream_speed = speed_in_still_water + speed_of_current\n    time_to_travel = distance / downstream_speed\n\n    return time_to_travel\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    sum_of_numbers = 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n    return sum_of_numbers\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_points = 36\n    correct_answer_points = 6\n    incorrect_answer_points = -2\n    total_questions = 10\n\n    # Let x be the number of correct answers and total_questions - x be the incorrect ones\n    # We have the equation: correct_answer_points * x + incorrect_answer_points * (total_questions - x) = total_points\n\n    for x in range(total_questions + 1):\n        if correct_answer_points * x + incorrect_answer_points * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n    total_ways = trains + buses + flights\n    return total_ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # There are 7 dancing (D) performances and 3 playing a sketch (P) performances.\n    # We need to ensure at least 1 D between every 2 Ps.\n    # Think of the 3 Ps as dividers splitting the sequence of Ds into at least 4 parts (including ends).\n    # Since there are 7 Ds, there are 6 spaces between them where Ps can be placed.\n    # We can place 3 Ps in these spaces in C(6,3) ways.\n    # We then arrange the 7 Ds and 3 Ps which we can do in 10!/(7!3!) ways.\n    # However, the P acting as separators are already fixed, the arrangement is therefore 7! for the Ds.\n\n    # Choose 3 places for Ps out of 6 possible spaces\n    placements = factorial(6) // (factorial(3) * factorial(6 - 3))\n    \n    # Arrange 7 Ds in 7! ways\n    arrangements_d = factorial(7)\n\n    # The total arrangements are the product of placements and arrangements_d\n    total_arrangements = placements * arrangements_d\n\n    return total_arrangements\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the variables we need to find a solution\n    peaches = symbols('peaches')\n    students_B = symbols('students_B')\n    \n    # Class A has 3 more students than class B\n    students_A = students_B + 3\n    \n    # Equation for class A: all peaches given to class A with 10 left\n    eq1 = Eq(peaches, 5 * students_A + 10)\n    \n    # Equation for class B: all peaches given to class B are 2 short\n    eq2 = Eq(peaches + 2, 8 * students_B)\n    \n    # Solve the system of equations for the number of peaches and the number of students in class B\n    solutions = solve((eq1, eq2), (peaches, students_B))\n    \n    return solutions[peaches]\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import symbols, solve, Eq, real_roots\n    \n    # Symbolic variable for h\n    h = symbols('h', real=True, positive=True)\n    \n    # The cube root of 28512 should be an integer if 28512/h is a cube number\n    # So, we are looking for h such that 28512 is a perfect cube times h\n    cube_root = 28512 ** (1/3)\n    # We round it because the cube root should give us an exact integer value for a cube\n    cube_number = round(cube_root) ** 3\n    \n    # Now that we have the cube number, we can find h by division\n    equation = Eq(28512/h, cube_number)\n    \n    # Solve for h\n    h_value = solve(equation, h)\n    \n    # Since the question asks for h and we expect it to be an integer, we take the integer part of the solution\n    return int(h_value[0])\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # To guarantee two M&M's of different colors, Bart can pick up to 2 chips of the same color.\n    # If he picks the same color twice, he should then pick from the next color.\n    # Assuming worst-case scenarios to ensure different colors are picked:\n    # First, he may pick 2 red chips.\n    red = 2\n    # Then, in the worst case, he can pick another 2 chips but of the yellow (as he didn't get a different color before).\n    yellow = 2\n    # So in the worst-case scenario, he has picked 2 reds and 2 yellows without a different color.\n    # The next chip he picks will definitely be of a different color (either yellow if he picked 2 reds initially,\n    # or brown if he picked 2 yellows after the reds).\n    # Therefore, after picking the 5th chip, he will have 2 M&M's chips of different colors for sure.\n    return red + yellow + 1  # Add 1 for the next chip he picks which gives him two different colors\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    from math import factorial\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    num_families = 10\n    handshakes_per_family = (num_families - 1) * 3  # Each family has 3 members\n    total_fathers_handshakes = handshakes_per_family * num_families  # Each father shakes hands with everyone else\n    total_mothers_handshakes = handshakes_per_family * (num_families - 1)  # Each mother shakes hands with all fathers and children\n    total_children_handshakes = handshakes_per_family * (num_families - 1)  # Each child shakes hands with all fathers and mothers\n    ans = total_fathers_handshakes + total_mothers_handshakes + total_children_handshakes\n    return ans\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415926 - 1\n    ans = a**2 - a*b\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits (1, 3, 5, 7, 9) that can be used to form a 3 digit number\n    count_first_digit = 5  # any odd number but zero (since it's a 3 digit number)\n    count_second_digit = 5  # any odd number\n    count_third_digit = 5   # any odd number\n\n    # The total number of such 3 digit numbers will be a product of all possibilities for each place\n    # Using the multiplication principle\n    total_numbers = count_first_digit * count_second_digit * count_third_digit\n\n    return total_numbers\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    # The pattern in the decimal part is 85274 and it repeats every 5 digits\n    decimal_pattern = \"85274\"\n    \n    # Find the index in the repeating pattern for the 79th digit\n    index_in_pattern = (79 - 1) % len(decimal_pattern)\n    \n    # Get the 79th digit from the pattern\n    digit = decimal_pattern[index_in_pattern]\n    \n    # Convert the digit to an integer\n    return int(digit)\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    # Start from the largest three-digit number and go down\n    for num in range(999, 99, -1):\n        if (num + 2009) % 17 == 0 and (num + 2009) % 19 == 0:\n            # When you find a number that satisfies the condition, return it\n            return num\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    hours_over_40 = bill // 5 if bill <= 5 * 10 else 10\n    bill -= hours_over_40 * 5\n\n    if bill > 0 and hours_over_40 == 10:\n        hours_over_50 = bill // 8 if bill <= 8 * 10 else 10\n        bill -= hours_over_50 * 8\n        hours_over_40 += hours_over_50\n\n    if bill > 0 and hours_over_40 == 20:\n        hours_over_60 = bill // 15\n        bill -= hours_over_60 * 15\n        hours_over_40 += hours_over_60\n\n    total_hours = 40 + hours_over_40\n    return total_hours\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = sum(range(1, 63))\n    sum_with_missing = 1939\n    missing_page_number = total_sum - sum_with_missing\n    return missing_page_number\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(1, 999):\n        if i + (i + 1) == 777:\n            return i + 2\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def count_ways(steps):\n        a, b, c = 1, 1, 2  # Base cases (similar to Fibonacci)\n        for i in range(3, steps + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\n    # Total ways to reach the 4th step\n    ways_to_4 = count_ways(4)\n    # Total ways to reach the 10th step from the 4th step (6 more steps to go)\n    # but since he can choose to step on 1, 2, or 3 steps at a time, we calculate\n    # 3 less steps because we are avoiding the 5th step (so 10 - 4 - 3 = 3).\n    ways_from_4_to_10 = count_ways(6)\n    \n    # The total ways will be the product of the two possibilities\n    # (ways to reach the 4th step) * (ways to reach the 10th step from the 4th step)\n    return ways_to_4 * ways_from_4_to_10\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 5\n    final_value = initial_value * (depreciation_rate ** years)\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    ans = 5 / 16\n    return ans\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_income_per_day = 60\n    total_days = 7  # Monday to Sunday is 7 days\n    total_income = average_income_per_day * total_days\n    return total_income\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Start with the smallest possible odd numbers\n    # The smallest odd number is 1, the second smallest is 3, and so on.\n    # Thus, the sum of the four smallest different odd numbers is: 1 + 3 + 5 + 7.\n    four_smallest_sum = sum(range(1, 8, 2))\n    \n    # Subtract this sum from the total to find the maximum possible value for the fifth number\n    max_fifth_number = 85 - four_smallest_sum\n    \n    # Return the result\n    return max_fifth_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')  # define symbols for tax rate and income\n\n    # Define the equations based on the given problem\n    equation1 = Eq(income * (T + 1) / 100, 30000 * T / 100 + (income - 30000) * (T + 3) / 100)\n    equation2 = Eq(income, 30000)  # Assume that income is at least $30,000\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (T, income))\n\n    return solutions[income]\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n    return closest_to_one\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_still_water = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_still_water + speed_current\n\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    # There are 60 seconds in a minute\n    # Two and a half minutes is the same as 2 + 0.5 = 2.5 minutes\n    n = 2.5 * 60  # Convert minutes to seconds\n    return n\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # To ensure that Jane gets 4 different coloured marbles in the worst case scenario,\n    # we consider the worst case for each previous draw before getting the fourth colour.\n    # The worst case scenario for getting 4 different colours would be if Jane picked all the marbles of each colour\n    # one by one until she is forced to have all four colours. This would be:\n    # The maximum number of marbles she can pick from the most plentiful colour without getting the fourth colour:\n    # This would be all but one of the maximum count of a single color of marble.\n    max_single_colour = max(4, 7, 6, 2) - 1\n\n    # Then she can pick all the marbles from the second most plentiful, third most plentiful and one from the fourth:\n    second_max = sorted([4, 7, 6, 2], reverse=True)[1]\n    third_max = sorted([4, 7, 6, 2], reverse=True)[2]\n    fourth_max = sorted([4, 7, 6, 2], reverse=True)[3]\n\n    # Total marbles picked will be the sum of these, which would guarantee the fourth colour in the worst case.\n    total_picked = max_single_colour + second_max + third_max + fourth_max\n    \n    return total_picked\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    total_value = 630  # Total value in cents.\n    total_coins = 21  # Total number of coins.\n\n    # Let x be the number of 50-cent coins and (total_coins - x) be the number of 20-cent coins.\n    # Equation for total value: 50x + 20(total_coins - x) = total_value.\n    for x in range(total_coins + 1):\n        if 50 * x + 20 * (total_coins - x) == total_value:\n            return x  # Number of 50-cent coins\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance between A and B\n    # Let s be the speed of Alan in meters per minute\n    d, s = symbols('d s')\n\n    # Speed of Phillip per minute is s + 15 meters\n    # It takes Alan 12 minutes to get to B, so it will take Phillip 12 - 3 = 9 minutes\n    equation1 = Eq(d, 12 * s)\n    equation2 = Eq(d, 9 * (s + 15))\n\n    solutions = solve((equation1, equation2), (d, s))\n    ans = solutions[d]\n    return ans\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(8, 4) * comb(12, 3)\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        number = int('2' + '5' * i)\n        root = number ** 0.5\n        if root.is_integer():\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    alice_original, tom_original = symbols('alice_original tom_original')\n\n    # Tom's amount after Alice spent her money\n    tom_after_alice_spent = 68.10\n    # Difference between Tom's amount and Alice's amount after she spent $36\n    difference = 25.40\n\n    # Equation representing Alice's remaining money after spending $36\n    alice_after_spent = alice_original - 36\n    # Equation stating that Alice has $25.40 less than Tom after she spent her money\n    equation = Eq(alice_after_spent, tom_after_alice_spent - difference)\n\n    # Solve for the original amount of money Alice had\n    solutions = solve((equation,), (alice_original,))\n\n    # Alice's original amount of money\n    alice_had_initially = solutions[alice_original]\n\n    return alice_had_initially\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    # Calculate the sum of the first set of numbers using the mean and the number of numbers\n    sum_of_first_set = 5 * 28\n    \n    # Calculate the sum of the second set of numbers using the mean and the number of numbers\n    sum_of_second_set = 12 * 11\n    \n    # Calculate the total sum of all numbers\n    total_sum = sum_of_first_set + sum_of_second_set\n    \n    # Calculate the total number of numbers\n    total_numbers = 5 + 12\n    \n    # Calculate the mean of all the numbers together\n    mean_of_all_numbers = total_sum / total_numbers\n\n    return mean_of_all_numbers\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount = 0.20\n    discounted_price = original_price * (1 - discount)\n    return discounted_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_length = 74\n    spaces_between_benches = 9 - 1  # The spaces are between benches, so there's one less than the number of benches\n    total_bench_length = total_length - (spaces_between_benches * 7)  # Subtracting the space taken by intervals between benches\n    length_of_one_bench = total_bench_length / 9  # Dividing by the number of benches to get the length of one bench\n    \n    return length_of_one_bench\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of students in class B and y be the total number of candies.\n    x, y = symbols('x y')\n    \n    # Equation for class A, with twice the number of students as class B and 20 more candies needed.\n    equation1 = Eq(4 * (2 * x) - y, -20)\n    # Equation for class B, with 6 candies for each student and 16 candies left.\n    equation2 = Eq(6 * x - y, 16)\n    \n    # Solving the equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Define the total number of arms Peter cut off\n    total_cut_arms = 21\n    # Define the number of arms that grow back each time\n    arms_regrowth = 1\n    # Define the number of arms cut before regrowth\n    arms_cut_before_regrowth = 5\n    \n    # The number of times new arms grew\n    grow_times = total_cut_arms // arms_cut_before_regrowth\n    \n    # The original number of arms is the total cut minus the number of times arms grew back\n    original_arms = total_cut_arms - (grow_times * arms_regrowth)\n    \n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # The third greatest number is 246.\n    third_greatest = 246\n    \n    # All numbers are different and whole, so to minimize the fourth greatest number,\n    # we maximize the sum of the remaining numbers.\n    # Given that the 1st and 2nd greatest numbers must be at least 1 more than the third we have:\n    first_greatest = 246 + 2\n    second_greatest = 246 + 1\n    \n    # To minimize the fourth number, we want to minimize the sum of the lower six numbers.\n    # We'll also assume they start from 1 and are consecutive (since they have to be whole, positive, and different).\n    # Hence the remaining numbers will be: 1, 2, 3, ..., 6 (sum is 21).\n    min_others_sum = sum(range(1, 7))\n    \n    # Now, calculate the sum of first three numbers:\n    sum_first_three = first_greatest + second_greatest + third_greatest\n    \n    # Total sum given:\n    total_sum = 2021\n    \n    # Calculate the remaining sum to be distributed among the fourth and other 6 numbers:\n    remaining_sum = total_sum - sum_first_three - min_others_sum\n    \n    # As we've minimized the sum of other numbers, the remaining amount is for the fourth number,\n    # which is the minimum value for the fourth greatest number.\n    fourth_greatest = remaining_sum\n    \n    return fourth_greatest\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # You have 6 gold and 6 silver coins\n    # In the worst case, to guarantee 1 gold and 1 silver coin,\n    # you have to take out all 6 coins of one color first before getting a different color coin\n    # So you need to take all 6 coins of one color, plus 1 more to ensure the second color\n    ans = 6 + 1\n    return ans\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    distance_1_to_5 = 20  # distance from the 1st tree to the 5th tree\n    number_of_intervals_1_to_5 = 4  # number of intervals between 1st and 5th tree\n    distance_per_interval = distance_1_to_5 / number_of_intervals_1_to_5  # distance between each tree\n\n    number_of_intervals_8_to_14 = 6  # number of intervals between 8th and 14th tree\n    distance_8_to_14 = number_of_intervals_8_to_14 * distance_per_interval  # total distance from the 8th to the 14th tree\n\n    return distance_8_to_14\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # A number is mutually exclusive (coprime) with another if their GCD is 1.\n    # When forming a circle, each number must be coprime with its two neighbors.\n    # To maximize the count, we only select prime numbers as they are coprime with all non-multiples.\n    # However, we must also ensure that the circle's last and first numbers are coprime.\n    # 1 is technically coprime with all numbers but we should exclude it to avoid [1, multiple of 2].\n    from sympy import primerange\n\n    # Get all prime numbers from 2 to 24\n    primes = list(primerange(2, 25))\n    \n    # We must remove any two primes that are not coprime, which can only happen if they are consecutive.\n    # In the range 1 to 24, this happens for [2, 3]. So we skip 2 and keep the rest of the primes.\n    primes.remove(2)\n\n    # The remaining primes can all be selected as they are mutually exclusive with each other.\n    max_selectable = len(primes)\n\n    return max_selectable\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_meters_per_minute = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n\n    distance = speed_meters_per_minute * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = (38 * 32) + (37 * 33) + (36 * 34)\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Devi and Jerry's current ages\n    devi, jerry = symbols('devi jerry')\n    \n    # Equation 1: Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n    \n    # Equation 2: In 4 years' time, the ratio of their age will be 5:7\n    equation2 = Eq((devi + 4) / (jerry + 4), 5 / 7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (devi, jerry))\n    \n    # Return Jerry's current age\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age = symbols('grey_age father_age')\n    # When Grey was born, his father was 30 years old.\n    # This year, the age of Grey's father is three times that of Grey's age.\n\n    equation1 = Eq(father_age - grey_age, 30)  # Father was 30 years older than Grey when Grey was born.\n    equation2 = Eq(father_age, 3 * grey_age)   # Father is now three times as old as Grey.\n\n    solutions = solve((equation1, equation2), (grey_age, father_age))\n\n    return solutions[father_age]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n\n    # Define the ratio of Pip's apples to Bud's apples\n    ratio_pip_to_bud = 5\n\n    # Let's assume Bud has 1 part (for simplicity), then Pip has 5 parts\n    parts_bud = 1\n    parts_pip = ratio_pip_to_bud * parts_bud\n\n    # Create a figure and a set of subplots\n    fig, ax = plt.subplots()\n\n    # Draw Bud's part (1 bar for Bud)\n    ax.barh(['Bud'], parts_bud, color='blue')\n\n    # Draw Pip's parts (5 bars for Pip)\n    ax.barh(['Pip'], parts_pip, color='red')\n\n    # Set the labels and title\n    ax.set_xlabel('Number of Apples')\n    ax.set_title('Parts Graph')\n\n    # Remove the y-axis ticks\n    ax.tick_params(axis='y', which='both', left=False)\n\n    # Display the graph\n    plt.show()\n\n    # There is no single answer to return as it's a graph display, it does not have an answer like a numerical problem.\n    return \"Graph displayed\"\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    fraction_value = numerator / denominator\n    ans = 10 * fraction_value\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    total_layers = 4\n    # Using the pigeonhole principle:\n    # The least number of books on the layer with the most books\n    # can be found by dividing total_books by total_layers and then adding 1\n    least_books_on_most_layer = (total_books // total_layers) + 1\n\n    return least_books_on_most_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    a1 = 48  # First term of the arithmetic sequence\n    an = 80  # Last term of the arithmetic sequence\n    d = 4    # Common difference\n\n    # Calculate the number of terms in the sequence\n    n = ((an - a1) / d) + 1\n\n    # Calculate the sum of the arithmetic sequence\n    sum_of_seats = (n / 2) * (a1 + an)\n\n    return int(sum_of_seats)\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits 3, 6, and 9 with 3 chosen each time\n    permutations_list = list(permutations([3, 6, 9], 3))\n\n    # The number of different three-digit numbers is the number of unique permutations\n    ans = len(permutations_list)\n\n    return ans\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    nums = [0.12, 0.345, 0.6789]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    # loop for hundreds place (it cannot be 0 for a three-digit number)\n    for i in range(1, 3):\n        # loop for tens place\n        for j in range(0, 3):\n            # loop for ones place\n            for k in range(0, 3):\n                # check if all digits are different, which they must be for our case\n                if i != j and i != k and j != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    \n    number = solve_congruence(*congruences)\n    \n    ans = [num for num in range(number[0], 200, number[1]) if 100 <= num < 200]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # For the minimum dividend, we assume the smallest possible positive divisor, which is 1.\n    # However, since our remainder is 3, the smallest possible divisor should be greater than 3 to have a remainder of 3.\n    # Thus the smallest positive divisor greater than the remainder is 4. \n    smallest_divisor = remainder + 1\n    dividend = quotient * smallest_divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Hazel_current = symbols('Hazel_current')\n    Jessica_current = Hazel_current - 3\n\n    # In three years, Hazel's age\n    Hazel_future = Hazel_current + 3\n\n    # Next year, Hazel's age and Jessica's age\n    Hazel_next_year = Hazel_future + 1\n    Jessica_next_year = Jessica_current + 1\n\n    # Total age next year\n    total_age_next_year = Hazel_next_year + Jessica_next_year\n\n    # Substitute Hazel_future (which is yyears old after 3 years)\n    yyears = symbols('yyears')\n    Hazel_current_age = Eq(Hazel_future, yyears)\n    \n    # Solve for Hazel's current age\n    Hazel_current_age_solution = solve(Hazel_current_age, Hazel_current)\n\n    # Substitute Hazel's current age solution into total age next year expression\n    total_age_next_year = total_age_next_year.subs(Hazel_current, Hazel_current_age_solution[0])\n\n    # The total age next year expression now only depends on 'yyears', which is given\n    # So we return the expression as the final answer\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows and g be the initial number of goats\n    c, g = symbols('c g')\n\n    # Initial condition: 65% of the animals are cows\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 animals, the number of cows has increased by 20%\n    equation2 = Eq(c + 240 * 0.20, 0.65 * (c + g) + 0.20 * (c + g))\n\n    # The number of goats has doubled after adding 240 animals\n    equation3 = Eq(2 * g, g + 240 - 240 * 0.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to cm\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # convert from m to cm\n    section3 = 150 / 10  # convert from mm to cm\n\n    # Sum all sections to obtain the total width in cm\n    total_width = section1 + section2 + section3\n\n    return total_width\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n    \n    uncle_current_age = uncle_future_age - (uncle_future_age - melanie_age)\n    \n    return uncle_current_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if i % 4 != 0 and i % 6 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"15:25\", \"%H:%M\")\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # The degree of the monomial is the sum of the exponents of all its variables.\n    # Given the monomial -x^3 * y^(2n), its degree is 3 + 2n.\n    # We are told that the degree is 5, so we can set up the equation 3 + 2n = 5.\n\n    # Now we solve for n.\n    n = (5 - 3) / 2\n\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    first = 2 + (3/8)\n    second = 6 + (9/12)\n    third = 1 + (14/16)\n\n    # Sum the three numbers\n    ans = first + second + third\n\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_3_years_later = amy_age_5_years_ago\n    sister_age_now = sister_age_3_years_later - 3\n    \n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    max_unique_cards = 13 * 4  # Maximum number of unique cards is 13 numbers/letters each in 4 suits\n    return max_unique_cards // 13 + 1 # We must draw one more than this number to ensure a match\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 21 and i % 2 == 0:\n            return i\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    for j in range(2, 20):\n        ans += sum(j/i for i in range(j + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    fraction = 3/5\n    part_value = 18\n\n    whole_amount = part_value / fraction\n\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cacti, sunflowers = symbols('cacti sunflowers')\n\n    # Given prices\n    cactus_price = 2\n    sunflower_price = 7\n\n    # Lavi spent a total of $156\n    total_spent_eq = Eq(cactus_price * cacti + sunflower_price * sunflowers, 156)\n\n    # Lavi bought 6 more cacti than sunflowers\n    cacti_more_eq = Eq(cacti, sunflowers + 6)\n\n    # Solving the system of equations\n    solutions = solve((total_spent_eq, cacti_more_eq), (cacti, sunflowers))\n\n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    cost_per_book = symbols('cost_per_book')\n\n    # Create equations based on the problem\n    sarah_cost = 8 * cost_per_book + 3 * 0.40  # Sarah's total cost\n    rebecca_cost = 3 * cost_per_book + 8 * 0.40  # Rebecca's total cost\n\n    # Equation: Sarah paid £1.00 more than Rebecca\n    cost_equation = Eq(sarah_cost, rebecca_cost + 1.00)\n\n    # Solve the equation for the cost_per_book\n    book_cost_solution = solve(cost_equation, cost_per_book)\n\n    return book_cost_solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares_sum = sum([i**2 for i in range(2, 21, 2)])\n    odd_squares_sum = sum([i**2 for i in range(1, 20, 2)])\n    ans = even_squares_sum - odd_squares_sum\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_litres = 17\n    jug_litres = 2\n    number_of_jugs = 6\n\n    water_poured = jug_litres * number_of_jugs\n    remaining_water = total_litres - water_poured\n\n    return remaining_water\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of fans of Liverpool and Manchester United\n    liverpool_fans, manchester_fans = symbols('liverpool_fans manchester_fans')\n    \n    # Create equations based on the given information\n    equation1 = Eq(liverpool_fans, manchester_fans + 1000)\n    equation2 = Eq(manchester_fans * 3, liverpool_fans + 472 + 1000 - 4836)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (liverpool_fans, manchester_fans))\n\n    return solutions[liverpool_fans]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    pencil_price = 40  # pence\n    sarah_paid_extra = 100  # pence, equivalent to 1.00 GBP\n\n    # Sarah's total cost is 8 books + 3 pencils\n    sarah_total = 8 * book_price + 3 * pencil_price\n\n    # Rebecca's total cost is 3 books + 8 pencils\n    rebecca_total = 3 * book_price + 8 * pencil_price\n\n    # Equation: Sarah paid 1 GBP more than Rebecca\n    equation = Eq(sarah_total, rebecca_total + sarah_paid_extra)\n\n    # Solve for the book price\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n    jack_points = andrew_points + jack_more_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    number_of_ways = comb(total_players, players_needed)\n    return number_of_ways\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_money = 3 + 2  # After giving $2 to Mike, Andy has $3 left.\n    \n    # Andy gave half of the remaining money to Nini\n    before_nini = remaining_money * 2\n    \n    # Gave half of the remaining money to Bob\n    before_bob = before_nini * 2\n    \n    # Gave half of the money to her mother\n    original_money = before_bob * 2\n    \n    return original_money\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, class_B_students = symbols('peaches class_B_students')\n    class_A_students = class_B_students + 3\n\n    equation1 = Eq(class_A_students * 5 + 10, peaches)\n    equation2 = Eq(class_B_students * 8 - 2, peaches)\n\n    solutions = solve((equation1, equation2), (peaches, class_B_students))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    current_number = 1\n    total_digits = 0\n    while True:\n        digit_count = len(str(current_number))\n        if total_digits + digit_count >= 2023:\n            break\n        total_digits += digit_count\n        current_number += 1\n    remaining_digits = 2023 - total_digits\n    return int(str(current_number)[remaining_digits - 1])\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of T-shirts and c be the number of caps.\n    t, c = symbols('t c')\n\n    # Equations based on the problem statement\n    ratio_equation = Eq(t / c, 8 / 5)                  # Equation for the ratio of T-shirts to caps\n    sales_equation = Eq((t / 4) * 3 + (c / 5) * 5, 132)  # Equation for the total sales\n\n    # Solve the equations\n    solutions = solve((ratio_equation, sales_equation), (t, c))\n\n    # Since it is asked for the number of T-shirts at first and it should be an integer, we return the integer value\n    return solutions[t]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 88  # The last two digits of the birth year\n    current_year = 98  # The last two digits of the current year\n    target_year = 1  # The last two digits of the target year\n\n    age_on_birthday = current_year - birth_year + 1  # Age on the next birthday, which is 31/12/99\n\n    # Age on 31/12/01 is simply three years after the 11th birthday\n    age_on_31_12_01 = age_on_birthday + 3\n\n    return age_on_31_12_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 6, 2, 5]\n    odd_numbers = []\n    \n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    \n    return min(odd_numbers)\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    return 9.95 - 2.6 - 3.42\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    boat_capacity = 6\n\n    trips = total_students // boat_capacity\n    if total_students % boat_capacity > 0:\n        trips += 1\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    nth_term = 36\n\n    ordinal_number = (nth_term - first_term) // common_difference + 1\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let x be the number of cards Eric has\n    # Therefore, Joe has 7x cards\n    # After giving away some cards, Joe will have 168 cards and Eric will also have 168 cards\n    # Setting up the equation: Joe's cards - given cards = 168 and Eric's cards + given cards = 168\n    # So, 7x - given cards = 168 and x + given cards = 168\n    # From the first equation, given cards = 7x - 168\n    # Plugging the expression for given cards into the second equation:\n    # x + (7x - 168) = 168\n    # Solving for x: 8x - 168 = 168 => 8x = 168 + 168 => x = (168 + 168) / 8\n    x = (168 + 168) / 8\n    # Now, we need to find the number of cards Joe gives away\n    # given cards = 7x - 168\n    given_cards = 7 * x - 168\n    return int(given_cards)\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    # ones and tens digit prime candidates\n    prime_digits = [2, 3, 5, 7]\n\n    # Check all combinations of two prime digits to form a two-digit number\n    for tens in prime_digits:\n        for ones in prime_digits:\n            N = 10 * tens + ones\n            if isprime(N):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_kids = 8\n    kids_escaped = 5\n    kids_caught_later = 9\n\n    total_kids_caught = (initial_kids - kids_escaped) + kids_caught_later\n\n    return total_kids_caught\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    minutes_to_paint_one_picture = 10\n    total_minutes_available = 80  # 1 hour 20 minutes is 80 minutes\n    \n    num_pictures = total_minutes_available / minutes_to_paint_one_picture\n    \n    return int(num_pictures)\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for num_people in range(1, 40):\n        if (19 - 6) == num_people // 2:\n            return num_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        x2 = 10 - x1\n        if x1 != x2:  # ensuring different numbers in each group\n            count += 1\n    ans = count // 2  # since each split is counted twice\n    return ans\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    import math\n    ans = math.factorial(5)\n    return ans\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    for anne_pears in range(1, total_pears):\n        charlie_pears = total_pears - anne_pears\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming = 14\n    joanne_swimming = 5\n    return amy_swimming - joanne_swimming\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    equation = Eq(1000 * a + 100 * b + 10 * c + d + 100 * a + 10 * b + c + 10 * a + b + a, 1370)\n    solutions = solve(equation, (a, b, c, d))\n\n    abcd_value = 1000 * solutions[a] + 100 * solutions[b] + 10 * solutions[c] + solutions[d]\n\n    return abcd_value\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n\n    # Isaac had 5 times as many stamps as Joseph initially\n    equation1 = Eq(isaac, 5 * joseph)\n\n    # After Joseph received 154 stamps, he had 9/10 as many stamps as Isaac\n    equation2 = Eq(joseph + 154, 9/10 * isaac)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n\n    factorial_29 = factorial(29)\n    ans = count_trailing_zeros(factorial_29)\n\n    return ans\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert base 8 number to base 10\n    N = int('12345654321', 8)\n\n    # Calculate the remainders\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n\n    # Sum the remainders\n    ans = remainder_7 + remainder_9\n\n    return ans\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Speed ratio of Linda to Ted is 3 : 4\n    # When they meet, Linda has jogged 1200m\n    # Hence, Ted has jogged (4/3) * 1200\n    ted_distance = (4 / 3) * 1200\n    \n    # The total distance is the sum of the distances Linda and Ted jogged\n    total_distance = 1200 + ted_distance\n    return total_distance\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        if (2 + 0 + 1 + 8 + A) % 9 == 0:\n            number = int(f\"2018{A}\")\n            return number % 8\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Ryan has 5 squirrels in front of him\n    ryan_front = 5\n    # Elvis has 7 squirrels behind him\n    elvis_behind = 7\n    # There is 1 squirrel between Ryan and Elvis\n    between = 1\n    # Ryan is in front of Elvis\n    # Total squirrels = Squirrels in front of Ryan + Ryan himself + Squirrel between\n    # + Elvis himself + Squirrels behind Elvis\n    total_squirrels = ryan_front + 1 + between + 1 + elvis_behind\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # This is a problem that is also known as \"derangement\" or \"subfactorial\"\n    # For n elements, the number of derangements is given by !n.\n    # The formula for subfactorial is: !n = (n-1)(!(n-1) + !(n-2))\n    # With initial conditions:!0 = 1 and !1 = 0\n    \n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            # Recursive formula to calculate subfactorial\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n    \n    # For 6 students\n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n\n    work_done_by_one_worker = 1 / (workers * days)\n    days_for_one_worker = 1 / work_done_by_one_worker\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    return 64 * 0.25\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((3 * x + 3) / 6, (5 * x - 2) / 8)\n    solution = solve(equation, x)\n    return solution[x]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pupils in School P originally\n    # and y be the number of pupils in School Q originally.\n    x, y = symbols('x y')\n\n    # We are given the ratio of pupils in School P to School Q is 2:3\n    equation1 = Eq(x / y, 2 / 3)\n\n    # We are also given that after admitting 240 pupils each,\n    # the ratio becomes 3:4\n    equation2 = Eq((x + 240) / (y + 240), 3 / 4)\n\n    # Solving the simultaneous equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return int(solutions[x])\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    return 45 * 0.30\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    sum_odd = sum(range(1, 20, 2))\n    return sum_odd\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Jack's current age\n    jack_current_age = symbols('jack_current_age')\n\n    # Setup the equation for the age problem based on the problem statement\n    equation = Eq(jack_current_age - 5, (jack_current_age + 8) / 2)\n\n    # Solve the equation for Jack's current age\n    solved_ages = solve(equation, jack_current_age)\n\n    # Return Jack's current age\n    return solved_ages[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    percentage_spent_on_bag = 70\n    remainder_after_bag = 100 - percentage_spent_on_bag\n    percentage_spent_on_purse = (3/8) * remainder_after_bag\n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('EDUCATION')\n    total_vowels = len('EAUIO')\n\n    # Total permutations of the letters\n    total_permutations = factorial(total_letters)\n\n    # Permutations of the vowels\n    vowel_permutations = factorial(total_vowels)\n\n    # Adjusted permutations where vowels are together (treated as a single entity)\n    vowels_together = vowel_permutations * factorial(total_letters - total_vowels + 1)\n\n    # Subtract the adjusted permutations from the total to get the case where vowels are not together\n    ans = total_permutations - vowels_together\n\n    return ans\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    original_students = 5\n    candies_each_original = 12\n    total_candies = original_students * candies_each_original\n    new_students = original_students + 1\n    candies_each_new = total_candies // new_students\n    return candies_each_new\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Given values\n    angle_BAC = 50  # m∠BAC\n    # The angles BPC, BAP, and PAC are supplementary since they make up a straight line (angle BPC is exterior).\n    # And since BP and CP are the bisectors, angles BAP = 1/2 * angle ABC and PAC = 1/2 * angle ACB.\n    # We also know that the angles in a triangle sum up to 180 degrees. \n\n    # From triangle ABC:\n    angle_ABC = (180 - angle_BAC) * 2 / 3  # since BP bisects it, BAP = 1/2 * angle ABC and BAC + BAP + BCP = 180\n    angle_ACB = angle_ABC  # since CP also bisects it and both are equal\n\n    # Calculating the measure of the angle BPC which is the exterior angle\n    angle_BPC = angle_ABC + angle_ACB  # exterior angle equals sum of opposite interior angles\n\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    sweets_bought = 11\n    wrappers = 11\n    total_sweets = sweets_bought\n\n    while wrappers >= 3:\n        # exchange wrappers for sweets\n        additional_sweets, wrappers = divmod(wrappers, 3)\n        # add exchanged sweets to total\n        total_sweets += additional_sweets\n        # add exchanged sweets' wrappers to current wrappers\n        wrappers += additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # symbols for each type of birds\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n    \n    # equations based on the problem statements\n    eq1 = Eq(two_tailed, 2 * eight_tailed + 5)\n    eq2 = Eq(three_tailed, six_tailed / 2 + 2)\n    eq3 = Eq(2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 2 * 8 * eight_tailed, 4 * (two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - 2)\n    eq4 = Eq(two_tailed + three_tailed + six_tailed + 2 * eight_tailed - (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed), 241)\n    \n    # solving the equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n    \n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    smallest_number = 10\n    while True:\n        if smallest_number % 5 == 4 and smallest_number % 7 == 4:\n            break\n        smallest_number += 1\n    return smallest_number\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    total_weight_kg = 5\n    cost_price_pounds = 10\n    weight_per_bag_g = 250\n    selling_price_per_bag_p = 65\n\n    # Convert total weight to grams (1 kg = 1000 g)\n    total_weight_g = total_weight_kg * 1000\n\n    # Calculate number of bags\n    number_of_bags = total_weight_g / weight_per_bag_g\n\n    # Calculate total selling price\n    total_selling_price_p = number_of_bags * selling_price_per_bag_p\n\n    # Convert selling price to pounds (1 pound = 100 pence)\n    total_selling_price_pounds = total_selling_price_p / 100\n\n    # Calculate profit\n    profit = total_selling_price_pounds - cost_price_pounds\n\n    # Calculate percentage profit\n    percentage_profit = (profit / cost_price_pounds) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    return sum(range(1, 11))\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of ways from Ayton to Beeton multiplied by the number of ways from Beeton to Ceeton\n    ways_Ayton_to_Beeton_Ceeton = 4 * 5\n    \n    # Number of ways from Ceeton to Deeton\n    ways_Ceeton_to_Deeton = 6\n\n    # Number of ways from Ayton to Deeton directly\n    ways_Ayton_to_Deeton_direct = 3\n\n    # Total number of ways using multiplication principle (Ayton->Beeton->Ceeton->Deeton) and addition\n    total_ways = (ways_Ayton_to_Beeton_Ceeton * ways_Ceeton_to_Deeton) + ways_Ayton_to_Deeton_direct\n\n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator = 15\n    denominator = 20\n    target_numerator = 3\n\n    ans = (denominator * target_numerator) / numerator\n\n    return ans\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_diff = 15 - 10\n\n    common_difference = (fifteenth_term - tenth_term) / position_diff\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n\n    return twelfth_term\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_days = 3\n    last_days = 5\n    first_avg = 135\n    last_avg = 151\n\n    total_trees = (first_days * first_avg) + (last_days * last_avg)\n    total_days = first_days + last_days\n\n    overall_avg = total_trees / total_days\n\n    return overall_avg\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq((149 + magic_number), 5 * (21 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    for number in range(1, 2017):\n        underline_count = 0\n        if number % 2 == 0:\n            underline_count += 1\n        if number % 3 == 0:\n            underline_count += 1\n        if number % 4 == 0:\n            underline_count -= 1  # Subtract one because multiples of 4 have already been counted as multiples of 2\n        if underline_count == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of money Joe had at first be 'j'\n    j = symbols('j')\n    \n    # Equation representing the remaining money after buying the ice-cream cones.\n    equation = Eq((3.75 - 2.50) + (j - 2.50), 5)\n\n    # Solve the equation for 'j'\n    solution = solve(equation, j)\n\n    return solution[0]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "def solution():\n    from math import comb\n\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Calculate combinations for each pair of options\n    salad_soup = comb(salads, 1) * comb(soups, 1)\n    salad_vegetables = comb(salads, 1) * comb(vegetables, 1)\n    salad_sandwiches = comb(salads, 1) * comb(sandwiches, 1)\n    soup_vegetables = comb(soups, 1) * comb(vegetables, 1)\n    soup_sandwiches = comb(soups, 1) * comb(sandwiches, 1)\n    vegetables_sandwiches = comb(vegetables, 1) * comb(sandwiches, 1)\n\n    # Add them all together to get the total number of different choices\n    total_choices = (salad_soup + salad_vegetables + salad_sandwiches + \n                     soup_vegetables + soup_sandwiches + vegetables_sandwiches)\n    \n    return total_choices\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 998 + 1, 2):  # Considering only 3-digit even numbers\n        digits_sum = sum(map(int, str(i)))  # Sum of the individual digits\n        if digits_sum == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 202 + magic_number\n    second_number = 22 + magic_number\n\n    equation = Eq(first_number, 6 * second_number)\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    total_students = 0\n    layer_difference = 32\n\n    # Starting from one boy at the outer layer, iteratively add layers of boys and girls\n    # and check the difference between boys and girls.\n    for layer in range(1, 500):  # Assuming a reasonable upper bound for layers\n        # Number of boys in the current outer layer (4 sides times 'layer' minus 4 corners)\n        boys = 4 * layer - 4\n        # Number of girls in the next inner layer (same calculation as for boys)\n        girls = 4 * (layer - 1) - 4 if layer > 1 else 0  # The innermost layer could be boys or girls\n\n        # If difference matches, calculate total students\n        if boys - girls == layer_difference:\n            # For each layer, we added 2 layers of students (boys then girls), except the first\n            total_students = (layer * layer) * 2 - (layer * layer)\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        # Check if all numbers are prime\n        if isprime(n) and isprime(n + 2) and isprime(n + 4) and isprime(n + 106) and isprime(n + 308):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters / 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mass of strawberries\n    x = symbols('x')\n    \n    # Equation representing the relation between mangoes and strawberries mass\n    equation = Eq(x + 448 - 900, 2*x)\n    \n    # Solve for x\n    mass_of_strawberries = solve(equation, x)[0]\n\n    return mass_of_strawberries\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_items = symbols('total_items')\n    # Convert fractions to represent parts of the total items\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n    \n    # Create equation based on the condition provided\n    equation = Eq(apples, lemons + 12)\n    \n    # Solve the equation for total_items\n    solutions = solve((equation), (total_items))\n    \n    # Calculate the number of lemons based on the total_items found\n    lemons_num = int(solutions[0]) - (2/3 * int(solutions[0])) - (1/9 * int(solutions[0]))\n    \n    return lemons_num\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let m be the original amount of money Max had, and a be the original amount of money Anthony had.\n    m, a = symbols('m a')\n\n    # If Max buys the chocolates, the remaining money he has is m - 12.\n    # The ratio of the remaining money is 2:5 (Max:Anthony), so 2(a) = 5(m - 12).\n    equation1 = Eq(2 * a, 5 * (m - 12))\n\n    # If Anthony buys the chocolates, the remaining money he has is a - 12.\n    # The ratio of the remaining money is 8:13 (Max:Anthony), so 8(a - 12) = 13m.\n    equation2 = Eq(8 * (a - 12), 13 * m)\n\n    # Solve the system of equations for m and a.\n    solutions = solve((equation1, equation2), (m, a))\n\n    # The answer is the original amount of money Max had.\n    return solutions[m]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    # Let's assume Liz initially had x red and x blue stickers, totaling 2x stickers.\n    # She gave away (2/3)x of her red stickers, so she had (1/3)x red stickers left.\n    # She was left with (1/4) of her total stickers, which is (1/4)*2x = (1/2)x stickers.\n\n    # Since she had (1/3)x red stickers left and (1/2)x total stickers left, it means\n    # she must have (1/2)x - (1/3)x = (1/6)x blue stickers left.\n\n    # Initially, she had x blue stickers and she was left with (1/6)x blue stickers, which means\n    # she gave away x - (1/6)x = (5/6)x blue stickers.\n\n    # The fraction of blue stickers Liz gave away is (5/6)x / x = 5/6.\n    \n    return 5/6\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # Define a helper function for nCr: n choose r (combinations)\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n        \n    # We apply \"stars and bars\" theorem to divide n indistinguishable items into k distinct groups.\n    # It's a combinatorial problem which can be solved by the formula C(n-1, k-1),\n    # where C is the binomial coefficient. Since each kid must get at least one pen we'll have (20 - 6) pens\n    # to distribute among 6 kids.\n    \n    n = 20 - 6  # pens after giving each kid one\n    k = 6 - 1   # partitions (or kids - 1)\n    \n    # Calculate the number of possible distributions\n    ans = nCr(n + k, k)\n    \n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    exponent = 2022\n    pattern = [4, 6, 4, 6]  # The unit digits repeat every 4 powers for base 4\n\n    # Find the position in the pattern for the 2022th power\n    pos_in_pattern = exponent % len(pattern)\n\n    # Since we're dealing with indexing starting from 0, we subtract 1\n    ans = pattern[pos_in_pattern - 1] if pos_in_pattern > 0 else pattern[-1]\n\n    return ans\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Start with the minimum number of marbles for the first three piles\n    for x4 in range(1, 16):\n        for x1 in range(1, x4):\n            for x2 in range(x1 + 1, x4):\n                for x3 in range(x2 + 1, x4):\n                    if x1 + x2 + x3 + x4 == 16:\n                        return x4  # Return the smallest possible number for the biggest pile\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_pages = (num_terms * (first_term + last_term)) // 2\n    \n    return total_pages\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    ans = smallest_6_digit_number - largest_5_digit_number\n    return ans\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123456'\n    three_digit_numbers = list(permutations(digits, 3))\n    count = 0\n    for number in three_digit_numbers:\n        if int(number[2]) % 2 == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n\n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    sequence = [3, 7, 11, 15, 19]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1992\n    while str(steps) != str(steps)[::-1]:\n        steps += 1\n    return steps - 1991\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Convert all lengths to millimetres\n    lengths_mm = {\n        \"10_mm\": 10, # 10 millimetres\n        \"100_cm\": 100 * 10, # 100 centimetres -> millimetres\n        \"10_m\": 10 * 1000, # 10 metres -> millimetres\n        \"2_km\": 2 * 1000000, # 2 kilometres -> millimetres\n        \"2800_cm\": 2800 * 10, # 2800 centimetres -> millimetres\n        \"2500_m\": 2500 * 1000, # 2500 metres -> millimetres\n        \"100_mm\": 100, # 100 millimetres\n        \"100_m\": 100 * 1000 # 100 metres -> millimetres\n    }\n    \n    # Find the key with the smallest value\n    smallest_length_key = min(lengths_mm, key=lengths_mm.get)\n    \n    # Return the smallest length\n    ans = lengths_mm[smallest_length_key]\n    return ans\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 2 / 3 * B)\n    equation2 = Eq(B, 4 / 5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    # Sum the decimal numbers\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    ans = sum(str(i).count('4') for i in range(1, 201))\n    return ans\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    legs_per_cow = 4\n    legs_per_duck = 2\n\n    # Let's suppose all animals are cows\n    # Total legs if all animals were cows\n    if_all_cows_legs = total_animals * legs_per_cow\n\n    # Excess legs when we consider all to be cows vs actual number of legs\n    excess_legs = if_all_cows_legs - total_legs\n \n    # Number of ducks is same as number of pairs of excess legs (since one duck has two legs less than a cow)\n    num_ducks = excess_legs / (legs_per_cow - legs_per_duck)\n\n    return int(num_ducks)\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    avg_height = 122.5  # average height of the group\n    num_girls = 11  # number of girls\n    num_boys = 5    # number of boys\n    total_children = num_boys + num_girls  # total number of children\n\n    # Let's denote the average height of the girls as 'avg_girls'\n    # and the average height of the boys as 'avg_boys'.\n    avg_girls, avg_boys = symbols('avg_girls avg_boys')\n\n    # We can set up the equations based on the given information:\n    equation1 = Eq(avg_height, (avg_girls * num_girls + avg_boys * num_boys) / total_children)\n    equation2 = Eq(avg_girls, avg_boys + 3.2)\n\n    # Solve the system of equations to find the average height of the girls\n    solutions = solve((equation1, equation2), (avg_girls, avg_boys))\n\n    return solutions[avg_girls]\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    triangles = 5\n    lines = triangles * 3\n    ans = 1  # Start with a single whole plane\n    \n    # Add lines one by one and use induction formula for plane division by lines\n    for i in range(1, lines + 1):\n        ans += i\n    \n    return ans\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7, 602 % 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    total_students = 70\n    total_average = 66\n    girls_average = 70\n    boys_average = 63\n\n    equation1 = Eq(girls + boys, total_students)\n    equation2 = Eq(girls_average * girls + boys_average * boys, total_average * total_students)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Total number of terms n = 9\n    n = 9\n    # Sum of the sequence S = 1503\n    S = 1503\n    \n    # For an arithmetic sequence, the sum S is given by\n    # S = n/2 * (first_term + last_term)\n    # Also knowing the sequence consists of consecutive odd numbers, the common difference d = 2\n    # Using S = n/2 * (2 * first_term + (n - 1) * d)\n    # We can solve for the first term:\n    # 1503 = 9/2 * (2 * first_term + (9 - 1) * 2)\n    # 1503 = 9/2 * (2 * first_term + 16)\n    # 1503 = 4.5 * (2 * first_term + 16)\n    # 1503 / 4.5 = 2 * first_term + 16\n    # 334 = 2 * first_term + 16\n    # 2 * first_term = 334 - 16\n    # first_term = (334 - 16) / 2\n    # first_term = 318 / 2\n    # first_term = 159\n    \n    first_term = (S / n - (n - 1)) // 2\n    return first_term\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    n1 = 32\n    term_n1 = 157\n    n2 = 108\n    term_n2 = 537\n\n    common_difference = (term_n2 - term_n1) / (n2 - n1)\n    first_term = term_n1 - (n1 - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    kate_remaining = 42\n    # Kate ate 1/4, so she received 42 / (3/4)\n    kate_received = kate_remaining / (3/4)\n\n    # Jane remaining after eating is kate_received, so before eating it was kate_received + 4\n    jane_remaining = kate_received + 4\n    # Jane ate 1/3, so she received jane_remaining / (2/3)\n    jane_received = jane_remaining / (2/3)\n\n    # Donna remaining after keeping is jane_received, so before keeping it was jane_received + 3\n    donna_remaining = jane_received + 3\n    # Donna kept half, so she had donna_remaining / (1/2)\n    donna_initial = donna_remaining / (1/2)\n\n    return donna_initial\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # Since A can't pass the ball back to themselves, and each pass must be to a different person\n    # First pass: A has 3 choices (to B, C, or D)\n    # Second pass: The recipient of the first pass has 2 choices (since they can't pass it back to A or to themselves)\n    # Third pass: The recipient of the second pass only has 1 choice, to pass it back to A\n    ans = 3 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_bag = 5\n    days = 5\n    total_cost = cost_per_bag * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    jason_books_initially = 30\n    books_given_to_anthea = 4\n    jason_books_after_giving = jason_books_initially - books_given_to_anthea\n    anthea_books_initially = jason_books_after_giving\n\n    difference_initially = jason_books_initially - anthea_books_initially\n\n    return difference_initially\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) / (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    from math import lcm\n\n    return lcm(4, 10)\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2  # speed in metres per second\n    time_in_minutes = 12\n    time_in_seconds = time_in_minutes * 60  # converting minutes to seconds\n    distance = speed * time_in_seconds\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    # Extracting the common factor from the two terms\n    common_factor = 4\n    # Dividing the terms by the common factor\n    term1 = 2020 // common_factor\n    term2 = 68 // common_factor\n    term3 = 505 // common_factor\n    term4 = 128 // common_factor\n    \n    # Multiplying the terms accordingly\n    multiplied_term1 = term1 * term2 * common_factor\n    multiplied_term2 = term3 * term4 * common_factor\n    \n    # Adding the two multiplied terms together\n    ans = multiplied_term1 + multiplied_term2\n    \n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    # Quantity of sugar in each solution\n    sugar_xavier = 100 * 0.25\n    sugar_yelena = 500 * 0.55\n    sugar_carol = 400 * 0.35\n    \n    # Total sugar after mixing\n    total_sugar = sugar_xavier + sugar_yelena + sugar_carol\n    \n    # Total solution weight after mixing\n    total_weight = 100 + 500 + 400\n    \n    # Concentration of sugar in the mixed solution\n    concentration = (total_sugar / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days B takes to finish the job alone\n    x = symbols('x')\n\n    # A's efficiency is twice B's, so A takes x/2 days to finish the job alone\n    # A finishes the job in 12 days less than B, which means x/2 = x - 12\n    equation = Eq(x/2, x - 12)\n\n    # Solve for x to find the number of days B takes to finish the job\n    days_B = solve(equation, x)[0]\n\n    # Now calculate A's time using the relationship given\n    days_A = days_B / 2\n\n    # A and B's one day work will be 1/days_A + 1/days_B\n    # Together they finish the job in 1 / (1/days_A + 1/days_B) days\n    work_per_day_A = 1 / days_A\n    work_per_day_B = 1 / days_B\n    \n    days_together = 1 / (work_per_day_A + work_per_day_B)\n\n    return days_together\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "def solution():\n    # Given that all different letters stand for different digits,\n    # we want to find what QP stands for where Q is the tens digit and\n    # P is the units digit.\n\n    # As the letters stand for different digits, this means they are\n    # distinct digits from 0-9. Since QP is a 2-digit number, Q cannot be 0.\n    # We need to check all possible combinations.\n\n    # The number formed by QP must be a multiple of both Q and P (implied by\n    # different factors part) Hence, QP must be divisible by Q and also by P.\n    \n    # We start by brute-forcing all possible combinations for Q and P\n    # where Q is between 1 and 9 (inclusive) and P is between 0 and 9.\n    # However, Q cannot be equal to P, as they are distinct digits.\n\n    for Q in range(1, 10):\n        for P in range(0, 10):\n            if Q != P:\n                QP = int(str(Q) + str(P))  # Combining Q and P to a 2-digit number\n                # Checking if the number is divisible by both Q and P\n                if QP % Q == 0 and QP % P == 0:\n                    return QP\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n\n    tissue_cost = total_paid - (newspaper_cost + change_received)\n    return tissue_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Since an equal number of boys and girls were initially present\n    initial_condition = Eq(boys, girls)\n\n    # 3/5 of the boys left, so we have 2/5 of boys remaining\n    # 42 girls left, so we have girls - 42 remaining\n    leaving_condition = Eq((2/5) * boys, girls - 42 + 12)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, leaving_condition), (boys, girls))\n\n    # Find the total number of students at the exhibition at first\n    total_students = solutions[boys] + solutions[girls]\n\n    return total_students\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    number1 = 11111111\n    number2 = 99999999\n    ans = number1 * number2\n    return ans\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123'\n    digit_permutations = list(permutations(digits))\n    total_numbers = len(digit_permutations)\n    \n    # Including all unique single and double digit numbers that can be formed\n    for i in range(1, len(digits)):\n        total_numbers += len(list(permutations(digits, i)))\n        \n    return total_numbers\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 + 3 * tomatoes\n    return cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Initial ratio\n    equation1 = Eq(boys/girls, 3/2)\n\n    # After 12 boys and 12 girls join\n    equation2 = Eq((boys + 12)/(girls + 12), 19/14)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children_afternoon = solutions[boys] + 12 + solutions[girls] + 12\n    return total_children_afternoon\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost = 12 * cost_per_case\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temp = -8\n    today_temp = 13\n    increase = today_temp - last_night_temp\n    return increase\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Let the distance from Mike's home to office be d km.\n    # If Mike travels at 3 km/h, he is 12 min late.\n    # If Mike travels at 5 km/h, he reaches 4 min early.\n    # Let the correct time to reach the office be t hours.\n\n    # Convert minutes to hours\n    late_time = 12 / 60\n    early_time = 4 / 60\n\n    # Speed = Distance / Time\n    # Time = Distance / Speed\n    # t + 12min/60 = d / 3\n    # t - 4min/60 = d / 5\n    \n    # To find d, equate the two expressions for t:\n    # d/3 - 12/60 = d/5 + 4/60\n    # Multiply both sides by 60 to clear the denominators:\n    # 20d - 12 = 12d + 4\n    # Simplify and solve for d:\n    # 8d = 16\n    # d = 16 / 8\n    # d = 2 km\n\n    # Distance from Mike's home to office is 2 km\n    return 2\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks, the number of arrangements is 4!\n    ways_diff_colors = factorial(4)\n\n    # For two pairs of different colored socks, it's 2 pairs placed in 2! ways,\n    # and each pair has 2! ways of arranging within itself, but since they are identical,\n    # we divide by 2! for each pair to correct for overcounting.\n    ways_two_pairs = (factorial(2) * (factorial(2)**2)) // (factorial(2)**2)\n\n    return ways_diff_colors, ways_two_pairs\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # The period of a pendulum T is determined by T = 2 * pi * sqrt(L / g),\n    # where L is the length of the pendulum and g is the acceleration due to gravity.\n    # Since we are given that the period on Earth is 1 second, we can solve for L.\n    # As we want the period on the Moon, where gravity is g/6, we use the formula with the adjusted gravity.\n\n    g_earth = 9.81  # acceleration due to gravity on Earth in m/s^2\n    period_earth = 1  # period on Earth in seconds\n\n    # To find L, we rearrange the formula to solve for L:\n    # T^2 = (2 * pi)^2 * L / g\n    # L = g * T^2 / (2 * pi)^2\n    L = g_earth * period_earth**2 / (2 * 3.14159265359)**2\n\n    # Now we calculate the period on the Moon using the formula with g_moon = g_earth / 6\n    g_moon = g_earth / 6\n    period_moon = 2 * 3.14159265359 * sqrt(L / g_moon)\n\n    return round(period_moon, 2)  # we round the answer to two decimal places\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    # We are given that there are 400 tiles in total which form a square\n    # so we can find the side length of the square by taking the square root of 400\n    side_length = int(400 ** 0.5)  # This would be 20\n\n    # Now, as per the pattern, the red layers are the 1st layer, 3rd layer, and so on (odd indexed)\n    # The green layers are the 2nd layer, 4th layer, and so on (even indexed)\n    # For each layer, the number of tiles is (side_length - 2*(layer_index-1))**2,\n    # where layer_index starts from 1\n\n    red_count = 0\n    green_count = 0\n\n    for layer_index in range(1, side_length // 2 + 1):  # each layer from the first to the middle\n        layer_side_length = side_length - 2 * (layer_index - 1)\n        layer_tile_count = layer_side_length ** 2\n        if layer_index % 2 == 1:  # If layer is odd, it's red\n            red_count += layer_tile_count\n        else:  # Else, it's green\n            green_count += layer_tile_count\n\n    # The middle tile will be added to the color which has an odd layer depth\n    if (side_length // 2) % 2 == 1:\n        red_count += 1\n    else:\n        green_count += 1\n\n    dominant_color = 'red' if red_count > green_count else 'green'\n    more_tiles = abs(red_count - green_count)\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_a = 23\n    length_b = 37\n    welded_length = 3\n\n    full_length = length_a + length_b - welded_length\n\n    return full_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):  # William can answer between 0 and 10 questions correctly\n        william_points = 6 * william_correct - 2 * (10 - william_correct)\n        justin_points = william_points + 24\n        if william_points + justin_points == 96:\n            return william_correct\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime(\"1 Mar 2023\", \"%d %b %Y\")\n    end_date = datetime.strptime(\"15 Apr 2023\", \"%d %b %Y\")\n    trip_length = end_date - start_date\n    \n    return trip_length.days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate per day\n    A_rate = 1 / 15\n    # B's work rate per day\n    B_rate = 1 / 10\n\n    # Work done by both in 3 days\n    work_done_by_both = 3 * (A_rate + B_rate)\n    \n    # Remaining work\n    remaining_work = 1 - work_done_by_both\n    \n    # Number of days B takes to finish the remaining work\n    days_B = remaining_work / B_rate\n    \n    return days_B\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    people_in_a_row = int(100**0.5)  # Since people are standing in a square array.\n    # Total people in outer layer = 4 sides of the square - 4 (since corners are counted twice)\n    people_in_outer_layer = 4 * people_in_a_row - 4\n    return people_in_outer_layer\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n\n    term = first_term\n    count = 0\n    while term > 0:\n        count += 1\n        term += difference\n    return count\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Analysis: Tom can guarantee a win if he leaves an equal number\n    # of cards in both piles at the end of his turn.\n    # The winning strategy for Tom is to make the piles even.\n    \n    # As Jane picks after Tom in each round, Tom should aim to equalize\n    # the number of cards in both piles after his turn. So, if Tom starts,\n    # he should equalize initially.\n    # Tom can pick 88 - 52 = 36 cards from Pile A.\n    \n    # This is the first move to ensure he is always able to mirror Jane's\n    # moves and maintain the equilibrium, forcing her into a position where\n    # she cannot make both piles equal.\n    \n    # Since Tom can always ensure the piles have an even number of cards\n    # after his turn, he will be certain to take the last card.\n    cards_to_pick_from_A = 88 - 52\n\n    return cards_to_pick_from_A\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let x be the initial amount of cash Hugo had.\n    # After giving 3/7 of his cash to his sister, he has 4/7 remaining.\n    # After giving 1/8 of the remaining 4/7 of his cash to his mum, he is left with (7/8)*(4/7) of his initial cash.\n    # Finally, he has $280 left, which is equal to (7/8)*(4/7)*x.\n    # Setting up the equation: (7/8)*(4/7)*x = 280\n    # Solving for x: x = 280 / ((7/8)*(4/7))\n    x = 280 / ((7/8) * (4/7))\n    return x\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    cups_per_loaf = 5 / 6\n    total_loafs = 24\n    cups_needed = cups_per_loaf * total_loafs\n    return cups_needed\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Assuming A is the sum of the four digits in the vertical form puzzle\n    # Which is consistent with the typical 'vertical form' from such puzzles where the sum of digits in each column gives the digits of A\n    # We have A = 1+0+0+0 (the thousands place)\n    #          + 0+0+0+0 (the hundreds place, as there's no carry over from the tens)\n    #          + 0+4+0+0 (the tens place)\n    #          + 5+4+1+9 (the ones place)\n    # We need to account for carry overs in the ones place to the tens, and potentially to the hundreds\n    # To get the exact value of A we need to simulate this addition column by column.\n    \n    # Adding the ones place: 5 + 4 + 1 + 9 = 19\n    # We keep 9 in the ones place and carry over 1 to the tens\n    \n    # Adding the tens place with carry over: 0 + 4 + 0 + 0 + 1 (carry over) = 5\n    \n    # Adding the hundreds place: 0 + 0 + 0 + 0 = 0 (no carry over)\n    \n    # Adding the thousands place: 1 + 0 + 0 + 0 = 1\n    \n    # Combining the digits together to find A:\n    # A = 1000s + 100s + 10s + 1s\n    # A = 1*1000 + 0*100 + 5*10 + 9\n    A = 1*1000 + 5*10 + 9\n    \n    return A\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n    \n    # Set up the equations based on the given ratios and total\n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    equation3 = Eq(red + white + black, 34)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    # Given equations\n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    # Calculate the cost of 10 cheesecakes and 10 logcakes\n    cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since 10! onwards already has 10 as a factor, the last digit will be 0.\n    # Any factorial equal to or greater than 10 will end in 0.\n    return 0\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    # Given dimensions of the prism including the hole\n    side_length = 5  # cm\n    hole_area = 1 * 1  # cm^2, the area of the hole\n    volume_with_hole = 480  # cm^3\n\n    # Calculate the volume of the prism without the hole\n    base_area = side_length**2  # cm^2, the area of the base\n    base_area_without_hole = base_area - hole_area  # subtracting the area of the hole\n\n    # Calculate the height of the prism using the volume without the hole\n    height = volume_with_hole / base_area_without_hole\n\n    return height\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Minimum apples a student can get is 3\n    min_apples = 3\n\n    # Total apples available for distribution\n    total_apples = 80\n\n    # Using the Pigeonhole Principle, we find the minimum number of students (n)\n    # such that n * (min_apples - 1) + 1 <= total_apples\n    # This simplifies to n <= (total_apples - 1) / (min_apples - 1)\n\n    max_students = (total_apples - 1) // (min_apples - 1)\n\n    # Since at least one student should get 3 apples, the class must have at least max_students + 1 individuals\n    # We add 1 because max_students gives the maximum number of students where someone gets less than 3 apples\n    return max_students + 1\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 11):\n        total_sum += i * (2 * i - 1)\n    return total_sum\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    # Cost of a pencil\n    pencil_cost = 5\n    # Cost of a pen\n    pen_cost = 15\n    # Owen needs to trade his pencils for one of Oscar's pens.\n    # So we need to find out how many pencils equal the cost of one pen.\n    pencils_for_one_pen = pen_cost / pencil_cost\n    return pencils_for_one_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    total = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return total\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y be the initial number of yellow beads and g be the initial number of green beads\n    y, g = symbols('y g')\n\n    # Initial ratio of yellow to green beads\n    equation1 = Eq(y/g, 3/2)\n\n    # After buying more beads, the new ratio of green to yellow beads (noting that the yellow beads become y+5 and green becomes g+20)\n    equation2 = Eq((g + 20) / (y + 5), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (y, g))\n\n    # Total number of beads he had at first\n    total_beads = solutions[y] + solutions[g]\n\n    return total_beads\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    numbers = [12, 102, 1002, 10002]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 6  # Dividing by 6 for permutation of 3 numbers\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    brother = 26\n    sisters = 13 * 2\n    remaining = 16\n\n    initial_marbles = brother + sisters + remaining\n\n    return initial_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # Two digit palindromes\n    for i in range(1, 10):\n        count += 1  # The numbers are 11, 22, ..., 99\n    # Three digit palindromes\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # The numbers are 101, 111, ..., 191, 202, ..., 999\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum([(2*i+1) for i in range(1, 21)])\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meeting_time = 4\n\n    # Calculate the distance they meet at\n    distance_met = meeting_time * (amy_speed + christen_speed)\n\n    # Calculate the time it takes for Christen to reach Amy's starting point\n    time_for_christen = distance_met / christen_speed\n\n    return time_for_christen\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    return 2570 / 10000\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n\n    # Generate all permutations of four digits\n    for perm in permutations(digits, 4):\n        # Check if the last digit is even and number doesn't start with 0\n        if perm[-1] in even_digits and perm[0] != '0':\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    total_marks = 110\n    correct_mark = 4\n    wrong_mark = -1\n\n    # Let x be the number of correct answers\n    # Therefore, 50 - x will be the number of wrong answers\n\n    # Setting up the equation:\n    # 4*x + (-1)*(50 - x) = 110\n    \n    # Solving for x:\n    x = (total_marks + (wrong_mark * total_questions)) / (correct_mark - wrong_mark)\n\n    return int(x)\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    # Ratio of lemon cakes to chocolate cakes is 4:5, hence 9 parts in total\n    lemon_cakes_portion = 4 / 9\n    lemon_cakes = lemon_cakes_portion * remaining_cakes\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Three-digit numbers start from 100 to 999\n        s = set(str(i))  # Set of unique digits of the number\n        if len(s) == 2:  # We want exactly two different digits\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    import math\n\n    def lcm(a, b):\n        return abs(a*b) // math.gcd(a, b)\n\n    nums = [2, 3, 4, 5, 6]\n    ans = 1\n    for num in nums:\n        ans = lcm(ans, num)\n\n    return ans\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily_books, judy_books = symbols('lily_books judy_books')\n    \n    # Let \"n\" be the number of books Lily sends to Judy\n    n = symbols('n')\n\n    # After sending \"n\" books, Lily and Judy will have the same amount\n    equation1 = Eq(lily_books - n, judy_books + n)\n\n    # Solve the system of equations\n    # Since they will have the same amount, we can use any of them to extract the difference (lily_books - judy_books) \n    solution = solve(equation1, (lily_books, judy_books))\n\n    # The difference in books between Lily and Judy at the start is 2 * n\n    difference = 2 * n\n\n    return difference\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # There are three players: Cici, Lily, April (C, L, A)\n    # Lily has the ball initially and there are two passes.\n    \n    # After Lily's first pass, there are two possibilities (Cici or April gets the ball)\n    first_pass_ways = 2\n    \n    # For the second pass, the player who received the ball can only pass to one other player\n    # There's only one possibility for each scenario of the first pass (if Cici got the ball,\n    # she passes to April and vice versa)\n    second_pass_ways = 1\n    \n    # The total number of passing ways is the product of the possibilities for each pass\n    passing_ways = first_pass_ways * second_pass_ways\n    \n    return passing_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    first_four_avg = 89\n    num_assignments = 4\n    fifth_score = 94\n    \n    total_score_first_four = first_four_avg * num_assignments\n    total_score_all_five = total_score_first_four + fifth_score\n    \n    avg_all_five = total_score_all_five / (num_assignments + 1)\n    \n    return avg_all_five\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    alan_amount = 74\n    bilal_amount = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(emily, david / 3)\n    equation4 = Eq(alan_amount + bilal_amount + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibbles = 11\n    wibble_arms = 6\n    total_arms = 81\n\n    total_wibble_arms = wibbles * wibble_arms\n    remaining_arms_for_wobbles = total_arms - total_wibble_arms\n    wobble_arms = 5\n\n    wobbles = remaining_arms_for_wobbles // wobble_arms\n\n    return wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n\n    max_possible_a = 179 // 7\n    max_possible_b = 179 // 9\n\n    for a in range(2, max_possible_a + 1):\n        for b in range(2, max_possible_b + 1):\n            if isprime(a) and isprime(b) and (7 * a + 9 * b == 179):\n                return a + b\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for ones in range(1, 10):\n                if hundreds + tens + ones == 15 and tens == 2 * hundreds and hundreds == ones + 1:\n                    return hundreds * 100 + tens * 10 + ones\n                    \nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15\n    total_amount = 420\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    minutes = 32\n    fraction = 1/4 * 1/6 * 1/8\n    total_minutes = minutes * fraction\n    seconds = total_minutes * 60\n    return seconds\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t = symbols('t')  # time in hours for Maverick to catch up\n    maverick_speed = 15  # Maverick's speed in km/h\n    kelvin_speed = 10  # Kelvin's speed in km/h\n    kelvin_start = 10  # Kelvin's head start in km\n\n    # Maverick's distance travelled = Kelvin's distance travelled + head start\n    equation = Eq(maverick_speed * t, kelvin_speed * t + kelvin_start)\n\n    # Solve for t\n    t_solution = solve(equation, t)[0]\n\n    # Convert to minutes\n    time_in_minutes = t_solution * 60\n    \n    # Check if the time is more than 24 minutes\n    if time_in_minutes > 24:\n        return time_in_minutes\n    else:\n        return 24   # Maverick's claim\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Define the new operation based on the given definition\n    def new_op(a, b):\n        return a + b - ((a * b) / 910)\n    \n    # Initialize the result with the last term in the sequence\n    result = 1\n    \n    # Iterate backwards from 2016 down to 2 and apply the new operation each time\n    for i in range(2, 2017):\n        result = new_op(i, result)\n    \n    return result\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    return (113 - 5) / 9\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    ans = boys * girls\n\n    return ans\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    from math import factorial\n\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Let's use the stars and bars method where we take into account that each child gets at least one eraser\n    # So we distribute one to each child first, and then distribute the remaining 3\n    # With 3 erasers and 2 dividers (which separate the erasers between 3 kids), we have a total of 5 positions\n    total_erasers = 6 - 3  # since each kid gets at least one\n    dividers = 2\n    total_positions = total_erasers + dividers\n\n    # Number of ways to choose positions for dividers (or the remaining erasers)\n    ways = combinations(total_positions, dividers)\n\n    return ways\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    correct_marks = 5\n    incorrect_marks = -2\n\n    total_score = 23\n    total_questions = 6\n\n    # Let x be the number of correct answers, then (total_questions - x) is the number of incorrect answers.\n    # So we get the equation: 5x + (-2)(6 - x) = 23\n    for x in range(total_questions + 1):\n        if correct_marks * x + incorrect_marks * (total_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    plum_tree_distance = 4 * (41 - 1)  # Total distance covered by plum trees\n    pine_tree_interval = 5  # Interval for pine trees\n\n    # The number of pine trees is the total distance divided by interval distance + 1\n    num_pine_trees = (plum_tree_distance // pine_tree_interval) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the younger man, and y be the current age of the older man\n    x, y = symbols('x y')\n\n    # When the older was the age of the younger, the younger was 4\n    equation1 = Eq(x - (y - x), 4)\n    # When the younger will be the age of the older, he will be 61\n    equation2 = Eq(y + (y - x), 61)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the younger man's current age\n    return solutions[x]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people_for_9_hours = 10\n    hours_needed = 3\n    rate_per_person = 1 / (people_for_9_hours * 9)  # Rate = work done / total time taken\n    people_for_3_hours = (1 / rate_per_person) / hours_needed\n    return int(people_for_3_hours)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Let 'money' be the total amount Bud had initially.\n    # She spent 1/3 of it on a book, so she had 2/3 of 'money' left.\n    # Then, she spent 2/5 of the remaining money on a bag, which costs £120.\n    \n    # Let the remaining money after buying the book be 'remaining_money'.\n    # remaining_money = 2/3 * money\n    \n    # The cost of the bag is 2/5 of the remaining money.\n    # bag_cost = 2/5 * remaining_money = 120\n    \n    # Now we can write an equation: 2/5 * (2/3 * money) = 120\n    # Solving for 'money':\n    money = 120 / (2/5) / (2/3)\n\n    return money\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1_petrol = 27\n    week2_petrol = 25\n    week3_petrol = 30\n\n    total_petrol = week1_petrol + week2_petrol + week3_petrol\n\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    # After the first day, there is 2/3 of the watermelons left\n    # After the second day, she sold 60% of what was left from the first day\n    # This means she has 40% of the 2/3 left, which equals 48 watermelons\n\n    watermelons_left_after_first_day = 48 / 0.4\n    total_watermelons = watermelons_left_after_first_day / (2/3)\n\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    sum_of_squares = (1/6) * n * (n + 1) * (2*n + 1)\n    m = 4\n    subtract_squares = (1/6) * m * (m + 1) * (2*m + 1)\n    ans = sum_of_squares - subtract_squares\n    return int(ans)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):  # ensure x2 > x1\n            for x3 in range(x2 + 1, 9):  # ensure x3 > x2\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    desks_between_jessica_and_judy = 1 \n\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy + 1 \n\n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    # Let's denote the original number of boys as b and girls as g.\n    # We have b + g = 152 (total number of students).\n    \n    # We remove 1/11 of the boys and 5 girls:\n    # And we are left with b - (b / 11) = g - 5 \n\n    # From the above two equations we can express:\n    # g = 152 - b\n\n    # Replacing g in the second equation and solving for b:\n    # b - (b / 11) = (152 - b) - 5\n    # b - (b / 11) = 147 - b\n    # b - b/11 + b = 147\n    # (11b - b + 11b) / 11 = 147\n    # 21b / 11 = 147\n    # 21b = 147 * 11\n    # b = (147 * 11) / 21\n    b = (147 * 11) // 21\n    \n    return b\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(0.75 * x - 5, 2.5)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start_value = 1000\n    step = -11\n\n    num = start_value\n    while num >= 0:\n        num += step\n    \n    return num + step\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    return (888 * 999) % 100\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    midpoint = 0.126\n    given_number = 0.11\n    other_number = (midpoint - given_number) + midpoint\n\n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n    sweets_per_classmate = total_sweets // classmates\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    ratio = 7 / 12  # toffees to chocolates\n    toffees = chocolates * ratio\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(factors(num)):\n            return num\n\ndef factors(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    total_cost = 2826\n    mango_cost = 56\n    mango_boxes = 24\n    lychee_boxes = 19\n    \n    lychee_cost_per_box = (total_cost - (mango_cost * mango_boxes)) / lychee_boxes\n    return lychee_cost_per_box\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    # The coins can be 1p, 2p, or 5p. \n    # We need to find unique sums of different combinations taking exactly 3 coins.\n    # A set is used to store unique sums.\n    unique_sums = set()\n\n    # Iterate through all possible combinations to get exactly 3 coins\n    for first_coin in (1, 2, 5):\n        for second_coin in (1, 2, 5):\n            for third_coin in (1, 2, 5):\n                # Sum the value of three chosen coins\n                total = first_coin + second_coin + third_coin\n                # Add the total to the set of unique sums\n                unique_sums.add(total)\n\n    # Count the number of unique sums which represents the different totals\n    ans = len(unique_sums)\n\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789', 3):\n        a, b, c = p\n        num1 = int(f'{a}2{b}')\n        num2 = int(f'{c}5')\n        product = num1 * num2\n        if str(product) == f'6{a}0{b}{c}':\n            return sum(map(int, p))\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3  # years\n\n    amount = principal * ((1 + rate) ** time)\n    \n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5 * (3 + x), 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    decimal_sum = 0.65 + 0.507 + 0.25\n    return decimal_sum\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    # Get all possible permutations of the list of digits\n    all_possible_numbers = permutations(['1', '1', '2', '2'], 3)\n    \n    # Convert tuples to set of integers to remove duplicates\n    unique_numbers = set(int(''.join(number)) for number in all_possible_numbers if number[0] != '0')\n    \n    return len(unique_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # assuming single digits for P, Q, R\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                if (P*100 + Q*10 + R)*4 == R*1000 + Q*100 + P*10 + R:\n                    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children who paid £10\n    # Let y be the number of children who paid £15\n    x, y = symbols('x y')\n\n    # Equation 1: The total number of children is 50\n    equation1 = Eq(x + y, 50)\n\n    # Equation 2: The total amount paid by the children is £555\n    equation2 = Eq(10*x + 15*y, 555)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    jog_time = 1  # from 7:30 AM to 8:30 AM\n    walk_time = 2  # from 8:30 AM to 10:30 AM\n\n    jog_speed = 5  # miles per hour\n    walk_speed = 3  # miles per hour\n\n    jog_distance = jog_time * jog_speed\n    walk_distance = walk_time * walk_speed\n\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the smallest number be n\n    # Then the sum of the five consecutive numbers would be n + (n+1) + (n+2) + (n+3) + (n+4)\n    # This simplifies to 5n + 10\n    # We know that the sum is 100, so we can set up the equation 5n + 10 = 100\n\n    # Solving for n gives us n = (100 - 10) / 5\n    n = (100 - 10) // 5\n    return n\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n\n    # Find the prime factors of 44000\n    prime_factors = factorint(44000)\n\n    # For the division to be a cube, all prime factors' powers need to be multiples of 3.\n    # So, we find the minimum power degree (less than 3) that each factor has to be raised to in order to reach the nearest multiple of 3.\n    # Those are the factors that need to be multiplied to q so that 44000/q is a cube.\n\n    q = 1\n    for factor, power in prime_factors.items():\n        power_mod_3 = power % 3\n        if power_mod_3 != 0:\n            q *= factor ** (3 - power_mod_3)\n\n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n\n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    remaining_balls = 2\n    \n    bags_used = (total_balls - remaining_balls) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # To ensure getting at least 3 cards with the same number, draw\n    # one card from each pattern plus one more card.\n    num_patterns = 4\n    cards_to_draw = (3 - 1) * num_patterns + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    possible_cards = {\n        'Spades': ['A', 'J', 'K'],\n        'Hearts': ['3', '5', 'K'],\n        'Diamonds': ['2', '7', 'J'],\n        'Clubs': ['A', '7']\n    }\n\n    # Initial conditions, both Eddie and Avril do not know the card\n    # After Eddie's statement, cards with unique suits or unique numbers can be eliminated\n    # because if there were unique suits or numbers, Eddie or Avril would know the card.\n    for suit, numbers in possible_cards.items():\n        if len(numbers) == 1:  # unique number in suit\n            del possible_cards[suit]\n\n    # Update the cards after Eddie's first statement\n    updated_possible_cards = {}\n    for suit, numbers in possible_cards.items():\n        updated_numbers = [number for number in numbers if sum(\n            number in values for values in possible_cards.values()) > 1]\n        # Remove the number if it is unique across all suits\n        if updated_numbers:\n            updated_possible_cards[suit] = updated_numbers\n\n    # After Avril's response, there should be only one card left with the number she was told,\n    # because now she knows for sure after Eddie's statement\n    number_known_by_avril = ''\n    for suit, numbers in updated_possible_cards.items():\n        for number in numbers:\n            if sum(number in values for values in updated_possible_cards.values()) == 1:\n                number_known_by_avril = number\n                card_suit = suit\n\n    # Eddie now knows the card after Avril's statement, so the card must be the only one\n    # left with the number that Avril identified in the suit it belongs to.\n    card = (card_suit, number_known_by_avril)\n\n    return card\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    num_trees = 21\n    intervals = num_trees - 1\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Andy has 149 notebooks\n    andy_notebooks = 149\n    \n    # He gives his sister 38 notebooks, they will have the same amount\n    notebooks_given = 38\n    \n    # Andy's sister's notebooks will be 149 - 38 after giving\n    sister_notebooks_after = andy_notebooks - notebooks_given\n    \n    # But since they have the same number after giving, we divide by 2 to get the initial count\n    sister_notebooks_before = sister_notebooks_after / 2\n    \n    return sister_notebooks_before\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90\n    number_of_gaps = 9 + 1 # Number of trees plus one (for the space after the last tree)\n\n    distance_between_each_tree = total_distance / number_of_gaps\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    original_number = 200\n    # Create a list of the digits in the original number\n    digits = [int(digit) for digit in str(original_number)]\n\n    # Change each digit to any other digit between 0 and 9\n    # Count if the resulting number is a prime\n    # Note that the first digit cannot be 0 as it would lead to a number with fewer digits\n    for i in range(len(digits)):\n        for replacement_digit in range(0 if i else 1, 10):\n            # Only change the digit if it is different from the original\n            if replacement_digit != digits[i]:\n                new_number_list = digits.copy()\n                new_number_list[i] = replacement_digit\n                new_number = int(\"\".join(map(str, new_number_list)))\n                if isprime(new_number):\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 72)\n    equation2 = Eq(x, 2 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    numbers_sum = 5 * 5  # mean * number of values\n    known_numbers_sum = 3 + 4 + 6 + 10\n    fifth_number = numbers_sum - known_numbers_sum\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n\n    total_people = people_in_front_of_emily + danny_position_from_back + 1  # Emily is directly behind Danny\n\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Emma cuts a piece of wood into 4 sections in 12 minutes.\n    # This means she makes 3 cuts (since 4 sections require 3 cuts).\n    # Time taken for each cut is therefore 12 minutes / 3 cuts\n    time_per_cut = 12 / 3\n    \n    # To cut the wood 5 times, we need 5 cuts.\n    # Total time needed for 5 cuts is the time per cut multiplied by 5\n    total_time_for_5_cuts = time_per_cut * 5\n    \n    return total_time_for_5_cuts\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Number of days within which the storybook is to be finished\n    days_to_finish = symbols('days_to_finish')\n    \n    # Equation for reading 30 pages a day\n    pages_total_30 = 30 * (days_to_finish + 2)\n    \n    # Equation for reading 39 pages a day\n    pages_total_39 = 39 * (days_to_finish - 4)\n    \n    # The total number of pages has to be the same, hence setting the equations equal\n    equation = Eq(pages_total_30, pages_total_39)\n    \n    # Solve the equation\n    days_solution = solve(equation, days_to_finish)\n    \n    # Calculate the total pages of the storybook using either reading plan\n    total_pages = 30 * (days_solution[0] + 2)\n    \n    return days_solution[0], total_pages\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    page_count = 0\n    occurrences_of_5 = 0\n\n    while occurrences_of_5 < 30:\n        page_count += 1\n        occurrences_of_5 += str(page_count).count('5')\n    \n    return page_count\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n\n    cost_per_cup = total_cost / number_of_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    sum1 = sum(range(6, 11))\n    sum2 = sum(range(1, 6))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    total_workers = 2\n    total_rooms = 4\n\n    total_days = total_rooms / (rooms_per_day_per_worker * total_workers)\n\n    return total_days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(apple + 2 * orange, 48)\n    equation2 = Eq(apple + 1 * orange, 31)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given = total_badges * (3/8)\n    badges_left = total_badges - badges_given\n    return badges_left\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        if str(number).count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n    \n    # Original amounts\n    original_elias = 5 * aileen\n    # After giving away and losing stickers\n    elias_left = original_elias - 88\n    aileen_left = aileen - 8\n\n    # Equating the stickers left for both\n    equation = Eq(elias_left, aileen_left)\n\n    # Solving the equation\n    solution = solve((equation), (aileen))\n\n    # Finding the original number of stickers for Elias and Aileen\n    aileen_stickers = solution[aileen]\n    elias_stickers = original_elias.subs(aileen, aileen_stickers)\n\n    return int(elias_stickers - 88), int(aileen_stickers - 8)\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    number_of_staircases = 3\n    total_steps = steps_per_staircase * number_of_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    people_behind = 14\n    total_people = 23\n    \n    people_in_front = total_people - people_behind - 1  # Subtract 1 to exclude Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    total_pieces = 104\n    ratio_g_th = 3 / 5\n    total_ratio = ratio_g_th + 1\n    pieces_by_gerald = total_pieces / total_ratio\n    pieces_by_thomas = total_pieces - pieces_by_gerald\n    difference = pieces_by_thomas - pieces_by_gerald\n    return int(difference)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    sum_result = sum(range(11, 32, 2))\n    return sum_result\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram_butter = 25 / 20\n    cookies_with_48_grams = cookies_per_gram_butter * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert base 8 numbers to base 10, perform addition and convert back to base 8\n    num1 = int('25', 8)\n    num2 = int('37', 8)\n    sum_base10 = num1 + num2\n    ans_base8 = oct(sum_base10)[2:]  # Remove the '0o' prefix that indicates octal in Python\n    return ans_base8\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    ans = (8/11) * 1.54\n    return ans\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the variables\n    boys, girls, adults, children = symbols('boys girls adults children')\n    \n    # construct the equations based on the problem statement\n    equation1 = Eq(boys, 2/7 * girls)\n    equation2 = Eq(adults, 2/3 * (boys + girls))\n    equation3 = Eq(adults, boys + 1228)\n    equation4 = Eq(children, boys + girls)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (boys, girls, adults, children))\n    \n    # calculate the total number of people at the park\n    total_people = solutions[boys] + solutions[girls] + solutions[adults]\n    \n    return total_people\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    dividend = 3597\n    divisor = 11\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    ans = 5987 + 67 + 983\n    return ans\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    cost_price = 150\n    selling_price = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let's denote the initial number of rackets as `n`.\n    # The initial total cost price is then 150 * n.\n    # The revenue when 8 rackets are left is (n - 8) * 175.\n    # According to the problem, the revenue minus the initial cost price is equal to the profit:\n    # (n - 8) * 175 - (150 * n) = 525\n    # We can solve this equation for n.\n\n    # Rearranging the terms, we get:\n    # 175n - 1400 - 150n = 525 => 25n = 1925 => n = 1925 / 25 => n = 77\n\n    n = (profit + remaining_rackets * selling_price) // (selling_price - cost_price)\n\n    return n\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    chloe_spent = 157\n    gordon_spent = 82\n    difference_in_spending = 25 - 20\n\n    days_passed = (chloe_spent - gordon_spent) / difference_in_spending\n    gordon_initial = gordon_spent + days_passed * 25\n\n    return gordon_initial\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    pocket_money = symbols('pocket_money')\n    price_per_ball = symbols('price_per_ball')\n    \n    # Equation for the first week\n    equation1 = Eq(pocket_money, 4 * price_per_ball + 27)\n    \n    # Equation for the next week\n    equation2 = Eq(pocket_money, 2 * price_per_ball + 151)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n    \n    # The solution for the amount of pocket money I get each week\n    ans = solutions[pocket_money]\n    \n    return ans\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n + (n*(n-1))//2 + (n*(n-1)*(n-2)*(n-3))//24\n    return ans\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2*(x - 9), 2*x - 4*(5 - x))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14 - 1):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - x1 - x2\n            if x1 < x2 < x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_value_P = symbols('total_value_P')\n    total_value_Q = symbols('total_value_Q')\n\n    # Before transferring the jewel\n    average_value_P_before = total_value_P / 3\n    average_value_Q_before = total_value_Q / 3\n\n    # After transferring the jewel\n    average_value_P_after = (total_value_P - 5000) / 2\n    average_value_Q_after = (total_value_Q + 5000) / 4\n\n    # According to the problem\n    equation1 = Eq(average_value_P_before + 1000, average_value_P_after)\n    equation2 = Eq(average_value_Q_before + 1000, average_value_Q_after)\n\n    solutions = solve((equation1, equation2), (total_value_P, total_value_Q))\n\n    # The total value of all jewels\n    total_value_of_all_jewels = solutions[total_value_P] + solutions[total_value_Q]\n\n    return total_value_of_all_jewels\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    # The number of trailing zeros in a factorial is determined by the number of times\n    # 10 is a factor in the product. Since 10 is made of 2 and 5, and there will be more\n    # 2s than 5s, the number of 5s will dictate the number of trailing zeros.\n    \n    # We only need to find out how many times 5 is a factor in the numbers from 1 to 10\n    # It is only a factor in 5 and 10. Since 10 is 2 * 5, there is an extra 5.\n    # Hence, there are 2 occurrences of the factor 5.\n    \n    # Thus, there will be 2 trailing zeros.\n    return 2\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons // 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.50\n    revenue = remaining_melons * selling_price_per_melon\n    profit = revenue - cost_price\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    # Rei divided the oranges and had 17 left, so the number of neighbours must be a factor of 150 - 17 = 133 oranges.\n    # She also divided the apples and had 5 left, so the number of neighbours must also be a factor of 100 - 5 = 95 apples.\n    # We are looking for the greatest common divisor of 133 and 95, since the number of neighbours must divide both numbers exactly.\n    from math import gcd\n\n    # Calculate the greatest common divisor of the two quantities after leftovers are removed.\n    neighbours = gcd(133, 95)\n\n    return neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length_cm = 10\n    cross_spacing_cm = 1\n    # The number of crosses is the line length divided by the spacing plus one\n    # for the first cross at the beginning of the line.\n    crosses = (line_length_cm // cross_spacing_cm) + 1\n    return crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # 'red, red, green, yellow, yellow, green' is the pattern which has a length of 6\n    balloons_total = 75\n    # Find the number of complete patterns\n    complete_patterns = balloons_total // pattern_length\n    # Find the number of balloons in the leftover part of the incomplete pattern (if there is any)\n    remaining_balloons = balloons_total % pattern_length\n\n    # There are two green balloons in each complete pattern\n    green_balloons = complete_patterns * 2\n\n    # Check the remaining balloons to see if there are any green ones\n    if remaining_balloons >= 3:\n        green_balloons += 1\n    if remaining_balloons == 6:\n        green_balloons += 1\n\n    return green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of marbles Sandra had more than Jessica at first\n    x = symbols('x')\n\n    # After giving away 13 marbles, Sandra has x - 13 marbles more than Jessica\n    # It turns into 6 fewer, thus the equation: x - 13 = -6\n    equation = Eq(x - 13, -6)\n\n    # Solve the equation\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1_and_6 = 60\n    number_of_intervals_1_to_6 = 5  # There are 5 intervals between lamp posts 1 and 6\n\n    distance_between_lamps = distance_between_1_and_6 / number_of_intervals_1_to_6\n\n    number_of_intervals_1_to_9 = 8  # There are 8 intervals between lamp posts 1 and 9\n\n    distance_between_1_and_9 = distance_between_lamps * number_of_intervals_1_to_9\n\n    return distance_between_1_and_9\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    remaining_strawberries = total_strawberries % 8\n    return remaining_strawberries\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    count_1 = 0\n    count_2 = 0\n    N = 0\n\n    while count_1 != 15 or count_2 != 14:\n        N += 1\n        count_1 += str(N).count('1')\n        count_2 += str(N).count('2')\n    \n    return N\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Each friend received 26 pieces of candy and there were 7 friends\n    candy_shared = 26 * 7\n    # Plus the 22 pieces Kate left with\n    candy_at_school = candy_shared + 22\n    # If she brought 2/3 of the candy to school, then 2/3 is equal to the candy at school\n    # Hence, the total candy is 3/2 times the candy at school\n    total_candy = 3/2 * candy_at_school\n    \n    return int(total_candy)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_current_floor = 9\n    bob_current_floor = 5\n    top_floor = 25\n\n    bob_final_floor = (bob_current_floor * top_floor) / andy_current_floor\n\n    return int(bob_final_floor)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (12 * 10 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wpm, total_words = symbols('wpm total_words') # wpm is words per minute\n    original_time = 3 # minutes\n    increased_wpm = wpm + 30\n    reduced_time = original_time - 1 # minutes\n\n    # Equation for original speed: total_words = wpm * original_time\n    equation1 = Eq(total_words, wpm * original_time)\n    # Equation for increased speed: total_words = increased_wpm * reduced_time\n    equation2 = Eq(total_words, increased_wpm * reduced_time)\n\n    solutions = solve((equation1, equation2), (wpm, total_words))\n\n    return solutions[total_words]\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    num_bags = 8\n    pens_per_bag = 4\n    total_pens = num_bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0]*10  # Initialize all lights to off (0).\n\n    # Ms. Lily presses every other light switch starting with 1.\n    for i in range(0, 10, 2):\n        lights[i] = 1 - lights[i]  # Toggle the light (0->1 or 1->0).\n\n    # Sam presses each even numbered light switch 7 times.\n    for i in range(1, 10, 2):\n        lights[i] = (lights[i] + 7) % 2  # Toggle the light 7 times.\n\n    # Count the number of lights that are on (1).\n    ans = sum(lights)\n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n    \n    equation1 = Eq(a, 2/3 * b)\n    equation2 = Eq(a + 4, 7/8 * (b - 4))\n    \n    solutions = solve((equation1, equation2), (a, b))\n    \n    total_water = solutions[a] + solutions[b]\n    \n    return total_water.evalf()\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    climb_distance = 3\n    slip_distance = 2\n    effective_distance_per_day = climb_distance - slip_distance\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += climb_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= slip_distance\n\n    return days\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900\n    initial_sugar_content = 0.06\n    final_sugar_content = 0.10\n\n    initial_sugar = initial_volume * initial_sugar_content\n    additional_sugar = (final_sugar_content * initial_volume - initial_sugar) / (1 - final_sugar_content)\n\n    return additional_sugar\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * number_of_days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    time_spent = 2  # hours\n    total_parts_needed = 100\n    \n    # Calculate the rate of production (parts per hour)\n    production_rate = parts_already_made / time_spent\n    \n    # Calculate the remaining parts needed\n    remaining_parts_needed = total_parts_needed - parts_already_made\n    \n    # Calculate the time needed to produce the remaining parts\n    time_needed = remaining_parts_needed / production_rate\n    \n    return time_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # In the worst case, you draw all balls of one color first, then all balls of another color.\n    # To ensure you have 3 different colored balls, you need to draw 1 more ball after that.\n    # That is: 5 red + 5 white + 1 more = 11.\n    # By this point, you are guaranteed to have all three colors.\n\n    balls_required = (5 + 5 + 1)  # The +1 is to ensure the third colour.\n\n    return balls_required\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # One less than the number of ways to take out 2 balls of different colors (without regard to order)\n    num_ways = comb(5, 2)\n    return num_ways + 1\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    # Number of teams\n    n = 3\n    # Number of matches in a round-robin tournament is given by n*(n-1)/2\n    num_matches = n * (n - 1) // 2\n\n    return num_matches\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of cards Hisham has be h\n    # Let the number of cards Melissa has be m\n    h, m = symbols('h m')\n\n    # We know that Melissa has twice as many cards as Hisham\n    equation1 = Eq(m, 2 * h)\n    \n    # Together, they have 876 cards\n    equation2 = Eq(h + m, 876)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (h, m))\n    \n    # Calculate the number of cards Melissa should give to Hisham\n    # so they have the same amount\n    cards_to_give = (solutions[m] - solutions[h]) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # Numbers divisible by 4 from 10 to 41 are: 12, 16, 20, 24, 28, 32, 36, 40 (8 numbers)\n    # Odd numbers from 10 to 41 are: 10 numbers (every second number)\n    # Even numbers not divisible by 4 from 10 to 41 are: 6, 14, 18, 22, 26, 30, 34, 38 (8 numbers)\n    # To ensure two numbers with a product divisible by 4, we either pick:\n    # 2 from the numbers divisible by 4 or\n    # 1 number divisible by 4 and 1 even number not divisible by 4 or\n    # 2 even numbers not divisible by 4 (one of them must be divisible by 2 but not 4, to make the product divisible by 4)\n    # Since we want to ensure the condition, we consider the worst case where we first pick all odd numbers, which cannot fulfill the condition.\n    # After picking all odd numbers, the next number we pick must meet the requirement, since no more odd numbers are left.\n    # Therefore, we take all 10 odd numbers plus one more number to ensure the condition is met.\n\n    return 10 + 1\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n    \nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable in the equation\n    x = symbols('x')\n\n    # Create the equation based on the given expression\n    equation = Eq(40 / (x + 5), 5)\n\n    # Solve the equation for x\n    result = solve(equation, x)\n\n    # Since we might get a list of solutions, we take the first solution\n    ans = result[0]\n\n    return ans\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar = 1 / 0.96\n    coffee_price_euro = 4.8\n    coffee_price_dollar = coffee_price_euro * euro_to_dollar\n    return coffee_price_dollar\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_value = float('-inf')\n    digits = range(1, 10)\n\n    for p in permutations(digits):\n        a, b, c, d, e, f, g, h, j = p\n        value = a + b / c + (d / e) * f - (g + h / j)\n        if value.is_integer() and value > max_value:\n            max_value = value\n\n    return int(max_value)\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    position_difference = 3 - 1\n    \n    common_difference = (third_term - first_term) / position_difference\n\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    length_cm = 220  # Convert 2m 20cm to cm\n    halved_length = length_cm / 2\n    return halved_length\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    A_plus_B_plus_C = 19\n    max_product = 0\n    \n    for A in range(1, A_plus_B_plus_C + 1):\n        for B in range(1, A_plus_B_plus_C - A + 1):\n            C = A_plus_B_plus_C - A - B\n            max_product = max(max_product, A * B * C)\n    \n    return max_product\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    original_books_total = 3900\n    new_books_total = 3900 + 510\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    ratio_total = ratio_chinese + ratio_malay + ratio_english\n    \n    original_chinese_books = (original_books_total * ratio_chinese) / ratio_total\n    original_malay_books = (original_books_total * ratio_malay) / ratio_total\n    original_english_books = (original_books_total * ratio_english) / ratio_total\n    \n    # Calculate the number of new Chinese and Malay books\n    new_chinese_books = original_chinese_books * 1.20\n    new_malay_books = original_malay_books * 1.10\n    \n    # Calculate the number of new English books\n    new_english_books = new_books_total - new_chinese_books - new_malay_books\n\n    # Calculate the percentage increase in the number of English books\n    increase_english_books_percentage = ((new_english_books - original_english_books) / original_english_books) * 100\n    \n    return increase_english_books_percentage\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = sum((50 - i) * (50 + i) for i in range(0, 5))\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Find the smallest two-digit prime number\n    smallest_two_digit_prime = min([num for num in primerange(10, 100)])\n\n    # Find the largest two-digit square number\n    largest_two_digit_square = max([i**2 for i in range(1, 10) if (i**2) < 100])\n\n    # Calculate the product\n    ans = smallest_two_digit_prime * largest_two_digit_square\n\n    return ans\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import gcd, lcm\n\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    total_juniors = 12\n    total_seniors = 8\n    average_juniors = 10\n    average_all = 14\n    \n    total_score_all = average_all * (total_juniors + total_seniors)\n    total_score_juniors = average_juniors * total_juniors\n    total_score_seniors = total_score_all - total_score_juniors\n    \n    average_seniors = total_score_seniors / total_seniors\n    \n    return average_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, the combined age of the 2 dogs was 10 years old.\n    combined_age_four_years_ago = 10\n    \n    # Since four years have passed, we need to add 4 years for each dog.\n    current_combined_age = combined_age_four_years_ago + 4*2\n    \n    # We need to find out what the combined age will be in 2 years.\n    combined_age_in_two_years = current_combined_age + 2*2\n\n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    answered_questions = total_questions - 1  # Rex answered all but one question\n    rex_score = 66\n    points_correct = 4\n    points_incorrect = -2\n\n    # Let's assume Rex got x questions correct.\n    # Then he got (answered_questions - x) questions incorrect.\n    # According to the point system:\n    # x * points_correct + (answered_questions - x) * points_incorrect = rex_score\n    # Solving for x gives us the number of correct answers.\n\n    for x in range(answered_questions + 1):\n        if x * points_correct + (answered_questions - x) * points_incorrect == rex_score:\n            return x\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # By the Pigeonhole Principle, if there are n containers and\n    # we want at least 2 apples in any container, we need to distribute\n    # a minimum of n + (n - 1)\n    # That is for 1 apple in each container plus one more in each except one container\n    containers = 10\n    # One less container since we know at least one container will have two apples\n    min_apples = containers + (containers - 1)\n    return min_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 / (10 ** 2022)\n    denominator = 92 / (10 ** 2023)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_per_butter = 160 / 50  # Number of cookies made per gram of butter\n    butter_needed = 300 / cookies_per_butter  # Butter needed for 300 cookies\n\n    return butter_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n    \n    # Before receiving money\n    equation1 = Eq(dedra, 4 * timm)\n    \n    # After receiving money\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n\n    solutions = solve((equation1, equation2), (dedra, timm))\n\n    return solutions[dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    length = 0\n    number = 1\n    while length < 1000:\n        length += len(str(number))\n        if length >= 1000:\n            break\n        number += 1\n    return int(str(number)[-(length - 1000) - 1])\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(3 * square - 2, 19)\n    solution = solve(equation, square)\n\n    return solution[0]\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_answer_percentage = 0.60\n    correct_answer_mark = 5\n    wrong_answer_deduction = 2\n    unanswered_mark = 1\n    total_marks = 264\n    \n    correct_answers = total_questions * correct_answer_percentage\n    wrong_answers = total_questions - correct_answers\n    \n    # Let's denote the number of correct answers as x. Then the wrong answers would be (correct_answers - x)\n    # The formula to calculate total marks is:\n    # total_marks = (number of correct answers) * (marks per correct) - (number of wrong answers) * (deduction per wrong) + (number of unanswered) * (mark per unanswered)\n    # Substituting values in the total_marks calculation as per knowledge point (Chicken-Rabbit Problems):\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x * correct_answer_mark - (correct_answers - x) * wrong_answer_deduction + (total_questions - correct_answers) * unanswered_mark, total_marks)\n    \n    solved_values = solve(equation, x)\n    \n    return solved_values[0]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n    \n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    # Using the inclusion-exclusion principle\n    total = A + C + E - (AC + AE + CE) + ACE\n    return total\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    return 6.91 - 0.13\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n\n    people_in_front = total_people - people_behind - 1\n\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial as fact\n    \n    total_pupils = 18\n    pupils_to_seat = 3\n\n    ans = fact(total_pupils) // fact(total_pupils - pupils_to_seat)\n    \n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the people involved\n    jack, jason, bruce, willie = symbols('jack jason bruce willie')\n\n    # Set up the equations based on the problem statement\n    jack_age = Eq(jack, 4)  # Jack is 4 years old\n    others_same_age = Eq(jason, bruce) & Eq(jason, willie)  # Jason, Bruce, Willie are of the same age\n    total_age = Eq(jack + jason + bruce + willie, 19)  # Sum of their ages is 19\n\n    # Solve the system of equations\n    solutions = solve((jack_age, others_same_age, total_age), (jack, jason, bruce, willie))\n\n    # Extract Jason's age from the solutions\n    return solutions[jason]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    erasers_left_5 = 3\n    erasers_short_6 = 2\n    difference = erasers_left_5 + erasers_short_6\n\n    friends = erasers_left_5 // (difference // 5)\n    \n    total_erasers = 5 * friends + erasers_left_5\n\n    return total_erasers\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Jake and John's current ages\n    jake, john = symbols('jake john')\n    \n    # Equation 1: The sum of their ages is 44\n    equation1 = Eq(jake + john, 44)\n    \n    # Equation 2: In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jake, john))\n    \n    # John's age in 14 years\n    john_in_14_years = solutions[john] + 14\n    \n    return john_in_14_years\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n\n    return rachel\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    future_value = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    present_value = future_value / ((1 + annual_interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    youngest = symbols('youngest')\n\n    # Intervals between children is 15 months, so the oldest is 8 intervals older than the youngest\n    # Since the oldest child is six times as old as the youngest, we have the equation:\n    equation = Eq(youngest * 6, youngest + 8 * 15)\n\n    sol = solve(equation, youngest)\n\n    return sol[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    from sympy import *\n\n    # Define variable\n    x = symbols('x')\n\n    # Original expression\n    expression = 15 + 5 * 5 + 15 - 6 + 7\n\n    # List of all possible expressions with two pairs of brackets\n    # Since we can only insert two pair of brackets and we need the smallest result,\n    # we iterate over the possible positions to put the brackets.\n    possible_expressions = [\n        (15 + 5) * (5 + 15 - 6) + 7,\n        (15 + 5 * 5) + (15 - 6) + 7,\n        (15 + 5) * 5 + (15 - 6 + 7),\n        15 + (5 * (5 + 15) - 6) + 7,\n        15 + (5 * 5 + 15) - (6 + 7),\n        15 + (5 * (5 + 15 - 6) + 7),\n        15 + 5 * (5 + (15 - 6 + 7)),\n        ((15 + 5) * 5 + 15) - 6 + 7\n    ]\n\n    # Initialize minimum expression value as infinite for comparison\n    min_value = float('inf')\n\n    # Evaluate each expression and find the minimum value\n    for expr in possible_expressions:\n        value = simplify(expr)\n        if value < min_value:\n            min_value = value\n\n    return min_value\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total = 0\n    for n in range(1, 2008):\n        total += (n**2 + (n + 1)**2) / (n * (n + 1))\n    return round(total)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for original_number in range(1000, 10000):\n        new_number = (original_number % 10) * 1000 + original_number // 10\n        if new_number - original_number == 5877:\n            return original_number\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    cayden = 10  # Assume Cayden initially has 10 sweets to give\n    jiaxiang = cayden - 5  # Jiaxiang has 5 fewer sweets than Cayden\n\n    # After giving Jiaxiang 10 sweets\n    cayden_after = cayden - 10\n    jiaxiang_after = jiaxiang + 10\n\n    # The difference in number of sweets they have now\n    difference_after = abs(cayden_after - jiaxiang_after)\n    \n    return difference_after\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) + 1\n    last_multiple = 150 // 11\n\n    num_multiples = last_multiple - first_multiple + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Average score of 5 pupils is 72%\n    average_5_pupils = 72\n    # Total score of 5 pupils\n    total_score_5_pupils = average_5_pupils * 5 \n\n    # New average score including Mary's score is 75%\n    new_average = 75\n    # Total score of 6 pupils including Mary\n    total_score_6_pupils = new_average * 6\n\n    # Mary's score is the difference between the total score of 6 pupils and 5 pupils\n    marys_score = total_score_6_pupils - total_score_5_pupils\n\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n\n    total_distance = train_length + bridge_length\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * (3/4)\n\n    return afternoon_cookies\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # Since the number is divisible by 9, sum of its digits must be divisible by 9\n    # Also, the number is odd, so the last digit must be odd\n    # The tens place digit must be divisible by 4\n    for i in range(9, 0, -1):\n        for j in range(9, -1, -1):\n            for k in range(9, 0, -2):\n                if (i + j + k) % 9 == 0 and j % 4 == 0:\n                    return int(f\"{i}{j}{k}\")\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    minutes_taken = distance // speed\n    return minutes_taken\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # To guarantee 4 different colored marbles, we draw all but 3 of one color,\n    # and then one more to ensure we have all 4 colors.\n\n    # Find the color with the maximum marbles (in this case, green) and draw all but 3.\n    max_color_count = max(4, 7, 6, 2)\n    draws = max_color_count - 3\n    \n    # Now we have guaranteed 3 different colors, draw one more to ensure the fourth color.\n    draws += 1\n    \n    return draws\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    return 0.2 * 7\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop = 11\n    midnight_temp = midday_temp - drop\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    notes_2, notes_10 = symbols('notes_2 notes_10')\n\n    # Equations based on the problem statement\n    total_notes_eq = Eq(notes_2 + notes_10, 38)\n    spent_notes_2_eq = Eq(notes_2 - 0.75 * notes_2, 3 * (notes_10 - 0.8 * notes_10))\n    remaining_notes_eq = Eq(0.2 * notes_10, 3 * (0.25 * notes_2))\n    \n    # Solve the equations\n    solutions = solve((total_notes_eq, spent_notes_2_eq, remaining_notes_eq), (notes_2, notes_10))\n    \n    # Calculate the cost of the fan\n    cost_of_fan = 0.8 * solutions[notes_10] * 10 + 0.75 * solutions[notes_2] * 2\n    \n    return int(cost_of_fan)\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_hives = 5\n    current_honey_production = 50\n    target_honey_production = 90\n\n    hives_needed = (target_honey_production / current_honey_production) * current_hives - current_hives\n\n    return int(hives_needed)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for Ali's and Kumar's erasers\n    ali, kumar = symbols('ali kumar')\n\n    # Initial ratio condition\n    equation1 = Eq(ali / kumar, 7 / 5)\n    # After Ali gives Kumar 10 erasers condition\n    equation2 = Eq((ali - 10) / (kumar + 10), 1 / 5)\n\n    # Solving the equations simultaneously\n    solutions = solve((equation1, equation2), (ali, kumar))\n\n    # Sum of erasers Ali and Kumar have \n    total_erasers = solutions[ali] + solutions[kumar]\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    nth_term = 23\n    common_difference = 3\n    nth_value = first_term + (nth_term - 1) * common_difference\n    return nth_value\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Total amount Angela paid with is five pounds, in pence it's 500 pence\n    total_amount = 500\n\n    # List of possible coins that are multiples of 5 and can be the change, in pence\n    possible_coins = [5, 10, 20, 50, 100, 200]\n\n    # Iterate through the possible coins to find the combination of five different coins\n    for coin1 in possible_coins:\n        for coin2 in possible_coins:\n            for coin3 in possible_coins:\n                for coin4 in possible_coins:\n                    for coin5 in possible_coins:\n                        # Check if all coins are different\n                        if len({coin1, coin2, coin3, coin4, coin5}) == 5:\n                            # Calculate the sum of these coins\n                            change_sum = coin1 + coin2 + coin3 + coin4 + coin5\n                            # If the sum of change is the remaining from 500 pence, we found the correct change\n                            if change_sum == total_amount - sum({coin1, coin2, coin3, coin4, coin5}):\n                                # Return how much she spent\n                                return sum({coin1, coin2, coin3, coin4, coin5})\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for banana and pear prices\n    banana, pear = symbols('banana pear')\n    \n    # Equations based on the problem statement\n    eq1 = Eq(1 * banana + 3 * pear, 84)\n    eq2 = Eq(1 * banana + 1 * pear, 48)\n    \n    # Solve the system of equations\n    solved_values = solve((eq1, eq2), (banana, pear))\n    \n    return solved_values[banana]\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Assign symbolic equations to Adam, Ben, and Carl's weights\n    from sympy import symbols, Eq, solve\n    adam, ben, carl = symbols('adam ben carl')\n    \n    # System of Equations\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 92)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n    \n    # Calculate total weight\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n    \n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards, 4):\n        if perm[0] in '58' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_b = symbols('days_b')\n    days_a = days_b - 5\n    \n    efficiency_a = 2\n    efficiency_b = 1\n    \n    work_done_a = efficiency_a * days_a\n    work_done_b = efficiency_b * days_b\n    \n    equation = Eq(work_done_a, work_done_b)\n    \n    days_b_solution = solve(equation, days_b)\n    \n    return days_b_solution[0]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    from math import factorial\n    \n    n_doughnuts = 11 - 4  # Subtract 1 doughnut per student to satisfy the condition of at least one doughnut each\n    n_students = 4 - 1    # We will have 3 partitions for 4 students\n    \n    # Calculate the number of ways to distribute the doughnuts using combination: C(n+k-1, k), \n    # where n is n_doughnuts and k is n_students\n    ans = factorial(n_doughnuts + n_students) // (factorial(n_doughnuts) * factorial(n_students))\n    \n    return ans\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    # We will use the divisibility test for 11,\n    # which is to alternate adding and subtracting the digits of the number\n    # If the result is divisible by 11, then so is the original number.\n\n    number_str = \"123456\"\n    number_list = [int(digit) for digit in number_str]\n\n    total = 0\n    for i, digit in enumerate(number_list):\n        if i % 2 == 0:\n            total += digit\n        else:\n            total -= digit\n\n    is_divisible = total % 11 == 0\n    remainder = total % 11\n\n    # If the total is not divisible by 11, then George is not correct.\n    correct = (remainder == 1)\n\n    # The number is divisible by 11 if the remainder is 0.\n    # Return if George is correct, and the correct remainder otherwise.\n    ans = (correct, remainder) if not correct else (correct, 'Divisible')\n    return ans\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    remaining_length_cm = 78  # remaining length in centimeters\n\n    # Convert remaining length from cm to m\n    remaining_length_m = remaining_length_cm / 100\n\n    # Length of icicle that had melted\n    melted_length_m = initial_length_m - remaining_length_m\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    ans = 0.40 * 650\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Initialize an array to store the number of ways to climb to each step\n    # dp[i] will store the number of ways to climb to the i-th step\n    dp = [0] * 10  # we need 10 elements since we have steps from 0 to 9\n    dp[0] = 1  # Base case: there's 1 way to be on the ground level (0th step)\n    \n    # Using bottom-up dynamic programming to fill the array\n    for i in range(1, 10):  # from 1st to 9th step\n        # For each step, the number of ways to get there is the sum of the number of ways\n        # to get to the previous step and the number of ways to get to the step 4 before it\n        if i >= 1:\n            dp[i] += dp[i - 1]\n        if i >= 4:\n            dp[i] += dp[i - 4]\n    \n    return dp[9]  # We want to find the number of ways to get to the 9th step\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    return 3549 // 7\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n\n    # First stop\n    off_first_stop = initial_passengers * 2 // 5\n    on_first_stop = 7\n    remaining_after_first_stop = initial_passengers - off_first_stop + on_first_stop\n\n    # Second stop\n    off_second_stop = remaining_after_first_stop // 4\n    on_second_stop = 13\n    remaining_after_second_stop = remaining_after_first_stop - off_second_stop + on_second_stop\n\n    return remaining_after_second_stop\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Start from 0.5 and increase by 0.5 each term, up to and including 10\n    # Use the given formula: 1³ + 2³ + 3³ + ...... + n³ = (1 + 2 + 3 + ...... + n)²\n    # However, our sequence starts from 0.5, so we need to adjust the formula accordingly\n    \n    # To adjust, we will scale the sequence from 0.5,1,1.5,...,10 to 1,2,3,...,20 and then divide the result by 8\n    n = int(10 / 0.5)  # This will count the number of terms (0.5, 1, 1.5, ..., 10)\n    \n    # Calculate the sum of the first n natural numbers\n    sum_n_natural_numbers = n * (n + 1) // 2\n    \n    # Use the formula for the sum of cubes of the first n natural numbers\n    ans = (sum_n_natural_numbers ** 2) / (8 ** 2)  # Dividing by 8 squared because we scaled the sequence up by 2\n\n    return ans\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    # Start at A (0,0), moves are as follows:\n    # East 15 km: A -> (15,0)\n    # North 3 km: (15,0) -> (15,3)\n    # West 9 km: (15,3) -> (6,3)\n    # North 5 km: (6,3) -> (6,8)\n    # Now calculate shortest distance from A to B using Pythagorean theorem\n    # Distance from A to B is the hypotenuse of a right-angled triangle with sides 6 km (east-west) and 8 km (north-south)\n    shortest_distance = (6**2 + 8**2)**0.5\n    return shortest_distance\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    # Mr Jones estimates to the nearest £5, so the least amount can be £2.5 less than the estimate\n    estimate = 35\n    least_amount = estimate - 2.5\n    return least_amount\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_duration_minutes = 8 * 60 + 20  # Convert total duration to minutes\n    activity_break_duration = 45 + 20  # Duration of an activity including the break after it\n    \n    # Subtract the break time after the last activity since it's not included in the total duration\n    activities_duration = total_duration_minutes - 20  \n    \n    # Calculate the number of activities\n    num_activities = activities_duration // activity_break_duration\n\n    return num_activities\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    sum_ages_now = 22\n    sum_ages_future = 40\n\n    difference = sum_ages_future - sum_ages_now\n    return difference\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for school1 in range(98, 103):\n        for school2 in range(98, 103):\n            school3 = 300 - school1 - school2\n            if 98 <= school3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_between_rabbit_and_elephant = 5\n    \n    rabbit_position_left_to_right = elephant_position_left_to_right - toys_between_rabbit_and_elephant - 1\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the time it takes for Tim to write the book by himself\n    t = symbols('t')\n\n    # Nancy's work rate is 1/6 of the book per day\n    # Tim's work rate is 1/t of the book per day\n    # Combined, their work rate is 1/4 of the book per day\n\n    # 1/6 (Nancy's rate) + 1/t (Tim's rate) = 1/4 (combined rate)\n    equation = Eq((1/6) + (1/t), 1/4)\n\n    # Solve the equation for 't'\n    solution = solve(equation, t)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 0\n    while True:\n        pencils += 1\n        if (pencils % 2 == 1 and\n            pencils % 3 == 2 and\n            pencils % 4 == 3 and\n            pencils % 5 == 4):\n            return pencils\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 3 + 1  # Ewan and his 3 sisters\n    biscuits_per_person = total_biscuits / people_count\n    return biscuits_per_person\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    total_mass = 172 * 1000 # Convert kilograms to grams\n    p_mass = 300\n    q_mass = 400\n    r_mass = 500\n\n    # P:Q:R = 7:3:2 ratios\n    p_ratio = 7\n    q_ratio = 3\n    r_ratio = 2\n\n    # Total ratio\n    total_ratio = p_ratio + q_ratio + r_ratio\n\n    # Mass per ratio\n    mass_per_ratio = total_mass / total_ratio\n\n    # Number of each packet\n    p_packets = mass_per_ratio / p_mass * p_ratio\n    q_packets = mass_per_ratio / q_mass * q_ratio\n    r_packets = mass_per_ratio / r_mass * r_ratio\n\n    # Total packets of ingredients used\n    total_packets = p_packets + q_packets + r_packets\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    \n    total_numbers = len(numbers) + 1  # Including the unknown 'a'\n    total_sum = mean_value * total_numbers  # Total sum of all numbers\n    \n    sum_known_numbers = sum(numbers)  # Sum of the known numbers\n    a = total_sum - sum_known_numbers  # The value of 'a'\n    \n    return a\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit, centimeters in this case\n    pink_length_cm = 2.5 * 100\n    blue_length_cm = 220\n    orange_length_cm = 30.5\n    \n    # Determine the longest ribbon by comparing their lengths\n    longest_length = max(pink_length_cm, blue_length_cm, orange_length_cm)\n    \n    if longest_length == pink_length_cm:\n        return \"pink\"\n    elif longest_length == blue_length_cm:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    # define the times for each activity in minutes\n    preparing_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    # calculate the total minimum time required\n    total_time = preparing_time + baking_time + washing_time + eating_time\n    \n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.5 \n\n    original_price = sale_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    # Numbers of each type of car\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n    \n    # Carrying capacity of each car type\n    red_capacity = 10\n    blue_capacity = 15\n    green_capacity = 20\n    \n    # Total capacities\n    total_red_capacity = red_cars * red_capacity\n    total_blue_capacity = blue_cars * blue_capacity\n    total_green_capacity = green_cars * green_capacity\n    \n    # Total number of people all cars can carry\n    total_capacity = total_red_capacity + total_blue_capacity + total_green_capacity\n    \n    # Total number of cars\n    total_cars = red_cars + blue_cars + green_cars\n    \n    # Calculate the average capacity\n    average_capacity = total_capacity / total_cars\n    \n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    rachel_speed = 84  # Rachel's speed in km/h\n    eleanor_time = 4  # Eleanor's total travel time in hours\n    rachel_distance_after = 39  # Distance Rachel is away from City F after meeting and 1.5 hours passed\n\n    # Rachel travels for 1.5 hours to meet Eleanor\n    rachel_distance_before = rachel_speed * 1.5\n\n    # Total distance Rachel travels is the sum of the distance before and after meeting Eleanor\n    total_rachel_distance = rachel_distance_before + rachel_distance_after\n\n    # Since Rachel and Eleanor meet at the same point and time, Eleanor's distance is equal to total Rachel Distance\n    eleanor_distance = total_rachel_distance\n\n    # Calculate the speed of Eleanor\n    eleanor_speed = eleanor_distance / eleanor_time\n\n    # Since Eleanor took 4 hours to travel from City F to City G, we calculate the distance\n    city_distance = eleanor_speed * eleanor_time\n\n    return city_distance\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    def calculate_odot(a, n):\n        return sum(int(str(a) * i) for i in range(1, n + 1))\n    \n    ans = calculate_odot(4, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n\n    percent_boys = (boys / total_students) * 100\n\n    return percent_boys\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import gcd\n    # define the time periods for lights in seconds\n    light1 = 60  # 1 minute\n    light2 = 90  # 1.5 minutes\n\n    # Least Common Multiple (LCM) for light1 and light2\n    lcm = (light1 * light2) // gcd(light1, light2)\n\n    # since all three lights turn green every 9 minutes, convert it to seconds\n    all_green = 9 * 60\n\n    # The smallest cycle for the third light can't be less than 30 seconds.\n    # It has to divide the LCM of the first two lights.\n    # It also should be a divisor of the time all lights turn green together.\n    for light3 in range(30, lcm + 1, 30):\n        if lcm % light3 == 0 and all_green % light3 == 0:\n            return light3\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25\n    \n    us_dollars = canadian_dollars / exchange_rate\n    \n    return us_dollars\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    ans = 8 + 10 - 1\n    return ans\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    max_score = 100\n    target_avg = 90\n    num_students = 5\n\n    min_sum = target_avg * num_students\n    max_sum = max_score * num_students - (num_students * (num_students - 1)) // 2\n    lowest_score = min_sum - (max_sum - min_sum)\n\n    return lowest_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the lengths of the ropes\n    A, B, C = symbols('A B C')\n    \n    # Setup the equations based on the problem statement\n    equation1 = Eq(A, 3 * B)               # Rope A is 3 times as long as Rope B\n    equation2 = Eq(C, B + 56)              # Rope C is 56 cm longer than Rope B\n    equation3 = Eq(A, C + 130)             # Rope A is 130 cm (1 m 30 cm) longer than Rope C\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Calculate the total length of the three ropes by summing their lengths\n    total_length = solution[A] + solution[B] + solution[C]\n\n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest = max(numbers)\n    smallest = min(numbers)\n    result = (2 * largest) - (3 * smallest)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    all_letters = ['A', 'B', 'C', 'D', 'E']\n    total_combinations = list(combinations(all_letters, 3))\n    \n    combinations_with_AB = [comb for comb in total_combinations if 'A' in comb and 'B' in comb]\n    \n    probability = len(combinations_with_AB) / len(total_combinations)\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n\n    male_students_percentage = 16\n    female_students_percentage = 10\n\n    male_students = (male_students_percentage / 100) * male_members\n    female_students = (female_students_percentage / 100) * female_members\n\n    total_students = male_students + female_students\n    total_members = male_members + female_members\n\n    students_percentage = (total_students / total_members) * 100\n\n    return students_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    concentration_mix1 = 35 / 100\n    concentration_mix2 = 50 / 100\n\n    total_juice = (200 * concentration_mix1) + (300 * concentration_mix2)\n    concentration_new_mix = (total_juice / total_volume) * 100\n\n    return concentration_new_mix\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * (48 / 4)\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n    amy_gives = (amy - john - 4) / 2\n    return amy_gives\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # let x be the total papers and y be the initial rate (papers per hour)\n    x, y = symbols('x y')\n\n    # After working for one hour at the initial rate y, she has x-y papers left\n    # She was planning to finish the remaining papers in 4 hours, which now requires 6 more papers per hour.\n    # So the new rate is y+6 and time is 4 hours to finish x-y papers.\n    # (y+6)*4 = x - y\n\n    # If she marks 10 more papers per hour, she would finish 1 hour earlier (in 3 hours instead of 4).\n    # So the rate would be y+10 and the remaining papers would be marked in 3 hours.\n    # (y+10)*3 = x - y\n\n    # Set up the two equations based on the two scenarios described above\n    equation1 = Eq((y+6)*4, x-y)\n    equation2 = Eq((y+10)*3, x-y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_series\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "def solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) What fraction of the chicken pies more than vegetable pies?\n    more_chicken = chicken_pies - vegetable_pies\n    fraction_more_chicken = more_chicken / chicken_pies\n\n    # (2) What fraction of the vegetable pies less than fruit pies?\n    less_vegetable = fruit_pies - vegetable_pies\n    fraction_less_vegetable = less_vegetable / fruit_pies\n\n    return fraction_more_chicken, fraction_less_vegetable\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n    markers_per_bag = 5\n    \n    num_bags = markers_left // markers_per_bag\n    \n    return num_bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n    \n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # since ab is a 2-digit number, a ranges from 1 to 9\n        for b in range(10):  # b is a single digit and can be 0 to 9\n            ab = a * 10 + b\n            ba = b * 10 + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percent = 0.20\n    sales_tax_percent = 0.10\n    \n    tip = bill * tip_percent\n    sales_tax = bill * sales_tax_percent\n    total_cost = bill + tip + sales_tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n\n    for i in range(1, 208):\n        total_sum += sum(map(int, str(i)))\n\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    designs_made = 24\n    fraction_made = 3/4\n\n    total_designs = designs_made / fraction_made\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    # Let 'w' be the cost of each wristband, so '3w' will be the cost of each cap.\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one wristband and the total money Caleb has.\n    w, total_money = symbols('w total_money')\n\n    # Equation for the purchase of 4 caps and 6 wristbands (2/5 of total money).\n    equation1 = Eq((4 * 3 * w) + (6 * w), 2 / 5 * total_money)\n\n    # Equation for the purchase of additional caps using 1/3 of remaining money.\n    remaining_money = total_money - (2 / 5 * total_money)\n    additional_cap_cost = (1 / 3) * remaining_money\n    # Let 'c' be the number of additional caps purchased with the remaining money.\n    c = symbols('c')\n    equation2 = Eq(3 * w * c, additional_cap_cost)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (w, c, total_money))\n\n    # Calculate the total number of caps bought (initially 4 + additional c)\n    total_caps = 4 + solutions[c]\n\n    return total_caps\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    v_initial, v_final, a, s = symbols('v_initial v_final a s')\n\n    # Given height initial (h_initial) = 3000 m\n    h_initial = 3000\n    # Given height final (h_final) = 2000 m\n    h_final = 2000\n    # Displacement (s) is difference in height (altitude)\n    s = h_initial - h_final\n    # Initial velocity (v_initial) = 0 m/s, because he starts from rest\n    v_initial = 0\n    # Acceleration due to gravity (a) = 9.81 m/s^2\n    a = 9.81\n\n    # Use the kinematic equation: v^2 = u^2 + 2as\n    equation = Eq(v_final**2, v_initial**2 + 2 * a * s)\n\n    # Solve for final velocity (v_final)\n    sol = solve(equation, v_final)\n\n    # We're interested in the positive root, since velocity will be positive in the downward direction\n    v_final = sol[1]\n\n    return v_final\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # There are 13 distinct number slots for the cards, and we need a sequence of 4 consecutive numbers.\n    # In the worst case, we can have 3 consecutive numbers in each of the first 10 slots (1-3, 2-4, ..., 10-12).\n    # This results in us having 30 distinct non-consecutive triplets without ensuring a sequence of 4 consecutive numbers.\n    # But once we draw one more card, we are guaranteed to have a sequence of 4 consecutive numbers, as it must\n    # either create a new sequence or extend one of the existing triplets to a sequence of 4.\n    # Hence, we need to draw 30 (existing triplets) + 1 (to guarantee the sequence of 4) = 31 cards.\n    \n    ans = 31\n    return ans\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    fixed_positions = {'A': '3', 'C': '1', 'G': '7'}\n    remaining_digits = [str(d) for d in range(10) if str(d) not in fixed_positions.values()]\n    for perm in permutations(remaining_digits):\n        B, D, E, F, H, I, J = perm\n        if int(B) % 2 == 0 and \\\n           int('3' + B) % 3 == 0 and \\\n           int('31' + D) % 4 == 0 and \\\n           int('31' + D + E) % 5 == 0 and \\\n           int('31' + D + E + F) % 6 == 0 and \\\n           int('31' + D + E + F + '7') % 7 == 0 and \\\n           int('31' + D + E + F + '7' + H) % 8 == 0 and \\\n           int('31' + D + E + F + '7' + H + I) % 9 == 0 and \\\n           int(J) == 0:\n            return {'A': '3', 'B': B, 'C': '1', 'D': D, 'E': E, 'F': F, 'G': '7', 'H': H, 'I': I, 'J': J}\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    actual_page = 1\n    printed_page = 1\n    \n    while printed_page < 89:\n        actual_page += 1\n        if actual_page % 3 != 0:\n            printed_page += 1\n    \n    return actual_page\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        for children in range(20):\n            if (adults * 5 + children * 3 == 75) and (adults + children == 19):\n                return adults\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3          # Number of multiples of 3\n    count_5 = 600 // 5          # Number of multiples of 5\n    \n    # Number of multiples of both 3 and 5, i.e., multiples of 15\n    count_15 = 600 // (3 * 5)  \n    \n    # Using the inclusion-exclusion principle to avoid counting multiples of both 3 and 5 twice\n    count = (count_3 + count_5) - count_15\n    \n    return count\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_current_age = 10\n    tom_future_age = 20\n    grandma_future_age = 60\n    age_difference = grandma_future_age - tom_future_age\n\n    grandma_current_age = tom_current_age + age_difference\n\n    return grandma_current_age\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies = symbols('candies')\n    students_b = symbols('students_b')\n\n    # Equation for class A (twice as many students as class B)\n    # (students_b * 2) * 4 = candies - 20\n    equation_a = Eq(4 * 2 * students_b, candies - 20)\n\n    # Equation for class B\n    # students_b * 6 = candies + 16\n    equation_b = Eq(6 * students_b, candies + 16)\n\n    # Solve the equations\n    solutions = solve((equation_a, equation_b), (candies, students_b))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    total_ways = 0\n    for ten_p in range(6):     # Jeremy can use 0 to 5 ten-pence coins\n        for twenty_p in range(4):  # Jeremy can use 0 to 3 twenty-pence coins\n            for fifty_p in range(2):  # Jeremy can use 0 to 1 fifty-pence coins\n                if ten_p*10 + twenty_p*20 + fifty_p*50 == 70:\n                    total_ways += 1\n    return total_ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # To ensure to have 2 stickers of the same colour,\n    # consider the worst-case scenario using the Pigeonhole Principle.\n    # If we take all the stickers of one color (say 3 reds),\n    # the next sticker taken must be of the other color (green in this example).\n    # This would make 4 stickers in total: 3 of one color + 1 of the other color.\n\n    return 4\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Maximum of other balls to not get 4 of the same color\n    max_other_colors = 3\n    # Picking 3 of each of the two other colors\n    balls_needed = max_other_colors * 2\n    # Ensuring the next ball is the 4th of the same color\n    balls_needed += 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # Ducklings have 2 legs each, baby geese have 2 legs each, and lambs have 4 legs each.\n    ducklings_legs = 4 * 2\n    geese_legs = 2 * 2\n\n    remaining_legs = 36 - (ducklings_legs + geese_legs)\n    \n    # Since each lamb has 4 legs, divide the remaining legs by 4 to find the number of lambs.\n    number_of_lambs = remaining_legs // 4\n\n    return number_of_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n\n    # 3 times as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n    \n    # Total sweets equation\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '1', '9', '2']\n    all_numbers = [''.join(p) for p in permutations(digits)]\n    max_number = max(all_numbers)\n    min_number = min(all_numbers)\n    difference = int(max_number) - int(min_number)\n    return difference\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Calculate the number of boxes in each layer of the pyramid\n    # Top layer (layer 1) has 1^2 boxes\n    layer1 = 1**2\n    # Second layer (layer 2) has 2^2 boxes\n    layer2 = 2**2\n    # Third layer (layer 3) has 3^2 boxes\n    layer3 = 3**2\n\n    # Sum the number of boxes in the top three layers\n    total_boxes = layer1 + layer2 + layer3\n\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return change\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    total_good_copies = 600\n\n    good_copies_A = (3/5) * total_good_copies\n    good_copies_B = (2/5) * total_good_copies\n\n    # For every 4 good copies A makes, it creates 1 bad one, so the total copies A makes is:\n    total_copies_A = good_copies_A * (5/4)\n\n    # For every 5 good copies B makes, it creates 1 bad one, so the total copies B makes is:\n    total_copies_B = good_copies_B * (6/5)\n\n    # Total number of copies including bad ones\n    total_copies = total_copies_A + total_copies_B\n\n    return int(total_copies)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    term = 1.2 + 1.23 + 1\n    ans = term * term - term * (1.2 + 1.23)\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for num in range(100, 200):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    farmer_rate, son_rate = symbols('farmer_rate son_rate')\n\n    # Equations based on the problem's description\n    # The farmer completes the work in 24 hours, so his work rate times 24 hours equals 1 job done\n    eq1 = Eq(farmer_rate * 24, 1)\n    # If the farmer and his son work together for 16 hours, the sum of their rates times 16 equals 1 job done\n    eq2 = Eq((farmer_rate + son_rate) * 16, 1)\n    # If the son helps for 6 hours and then they both finish in 16 hours,\n    # the son's work rate times the remaining 10 hours of work equals the father's work rate for 16 hours\n    eq3 = Eq(son_rate * (16 - 6), farmer_rate * 16)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (farmer_rate, son_rate))\n\n    # Calculate the time it would take for the son to do the job alone (1 job / son_rate)\n    son_time = 1 / solutions[son_rate]\n\n    return son_time\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n\n    total_smiles_in_january = average_smiles_per_day * days_in_january\n\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    \n    num_students = 40\n    side_length = math.isqrt(num_students)\n    \n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n    \n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    total_solution = 300 + 400 + 300\n    \n    concentration = total_sugar / total_solution\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # Height from which the ball is dropped\n    bounce_height = initial_height / 2  # Height to which the ball bounces back\n\n    total_distance = initial_height + bounce_height * 2  # Total distance traveled\n\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    # Number of dice rolls\n    total_rolls = 30\n    # Probability of rolling a 5 on a fair six-sided die\n    probability_of_5 = 1 / 6\n\n    # Expected value calculation\n    expected_number_of_5s = total_rolls * probability_of_5\n\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    ans = 999 - (999 % 36)  # Largest three-digit number is 999. We want to subtract the remainder when we divide by 36\n    return ans\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    children = ['H', 'L', 'R', 'O1', 'O2']  # 'O1' and 'O2' are the other two children\n    perms = permutations(children)\n    for p in perms:\n        if p.index('H') < p.index('L') < p.index('R') or p.index('R') < p.index('L') < p.index('H'):\n            continue\n        count += 1\n    return count\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    total_matches = 10 * (1 / (1 - (2/5) - (7/20)))\n    wins = (2/5) * total_matches\n    draws = (7/20) * total_matches\n    points = (3 * wins) + (1 * draws)\n    return int(points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    correct_quotient = 9\n    remainder = 2\n    divisor = 4\n    \n    wrong_answer = (correct_quotient * remainder) + divisor\n    correct_answer = (correct_quotient * divisor) + remainder\n    \n    is_correct = (wrong_answer == correct_answer)\n    \n    return (is_correct, correct_answer)\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    total = sum((-1)**(i+1) * (40 - 2*i) for i in range(20))\n    return total\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = (4 * 75) + (3 * 95)  # Total cost in pence\n    total_cost_in_pounds = total_cost / 100  # Convert pence to pounds\n    change = 10 - total_cost_in_pounds  # Calculate change from a £10 note\n    \n    return round(change, 2)  # Round the change to 2 decimal places\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    original_price = 4200\n    first_discount = 0.10 * original_price\n    price_after_first_discount = original_price - first_discount\n    second_discount = 0.20 * price_after_first_discount\n    final_price = price_after_first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the mean of the last 5 numbers as 'mean_last_5'\n    mean_last_5 = symbols('mean_last_5')\n    \n    # We know the mean of all 8 numbers\n    total_mean = 555\n    \n    # We know the mean of the first 3 numbers is 296 less than the mean of the last 5\n    mean_first_3 = mean_last_5 - 296\n    \n    # Equation based on the mean definition\n    # Sum of first 3 numbers / 3 = mean of first 3 numbers\n    # Sum of last 5 numbers / 5 = mean of last 5 numbers\n    # The total sum of 8 numbers = total_mean * 8\n    # This leads to the equation:\n    # (mean_first_3 * 3) + (mean_last_5 * 5) = total_mean * 8\n    \n    equation = Eq((mean_first_3 * 3) + (mean_last_5 * 5), total_mean * 8)\n    \n    # Solve the equation for 'mean_last_5'\n    mean_last_5_value = solve(equation, mean_last_5)[0]\n    \n    return mean_last_5_value\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    max_num = 100\n    # Counting by twos, starting at 2, all the way to 100\n    # All numbers counted will be even, hence multiples of two.\n    num_multiples = max_num // 2\n    return num_multiples\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(vicky, 99)\n    equation3 = Eq(kevin, timmy + 32)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    work_rate_per_person = 1 / (initial_people * initial_days)\n    total_work = initial_days * work_rate_per_person * initial_people\n\n    required_people = total_work / (target_days * work_rate_per_person)\n\n    additional_people = required_people - initial_people\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    baskets = 7\n    total_footballs = footballs_per_basket * baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    bud_position_from_front = pip_position + children_between + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Rasidah and Chai Seng\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    # Rasidah spent 3/5 of her money\n    rasidah_left = rasidah * (2/5)\n    # Chai Seng spent 6/7 of his money\n    chai_seng_left = chai_seng * (1/7)\n    # Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, rasidah_left / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    # Rasidah's initial amount of money is what we want to find\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_age = 53\n    mother_age = 81\n    years_ago = 0\n    \n    while True:\n        if (isaac_age - years_ago) * 3 == (mother_age - years_ago):\n            break\n        years_ago += 1\n    \n    return years_ago\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create the congruences based on the problem statement\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    age, _ = solve_congruence(*congruences)\n    \n    return age\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kilogram_conversion_factor = 2.2\n    kilograms = pounds / kilogram_conversion_factor\n    return kilograms\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        return sum(range(a, b)) - b\n\n    ans = custom_op(5, 10) - custom_op(4, 9)\n    return ans\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    distance_to_catch_up = 500\n    elena_speed = 8\n    cat_speed = 3\n    speed_difference = elena_speed - cat_speed\n\n    time_to_catch_up = distance_to_catch_up / speed_difference\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n    digits = [1, 2, 3]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(1, 21):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    # Observing the sequence and trying to find the pattern\n    # The differences between consecutive numbers are:\n    # 20 - 8 = 12\n    # 31 - 20 = 11\n    # 41 - 31 = 10\n    # 50 - 41 = 9\n    # It seems like we have a descending arithmetic sequence of differences (12, 11, 10, 9, ...)\n    \n    # Determine the next difference which should be 9 - 1 = 8\n    next_difference = 9 - 1\n    \n    # The last number in the given sequence is 50, so add the next_difference to find the next number\n    next_number = 50 + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "from itertools import permutations\n\ndef solution():\n    even_digits = ['0', '2', '4']\n    odd_digits = ['1', '3', '5']\n    count = 0\n\n    for perm in permutations('12345'):\n        if perm[-1] in even_digits:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            if tens + ones == 15:\n                return tens * 10 + ones\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    total_weight_initial = 8 * 50\n    total_weight_final = 9 * 52\n    extra_apple_weight = total_weight_final - total_weight_initial\n    return extra_apple_weight\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    on_lights = 0\n    for i in range(1, 251):\n        if int(i**0.5)**2 == i:\n            on_lights += 1\n    return on_lights\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    equation = Eq(sqrt(-x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    original_speed = 50  # pages per minute\n    increased_speed = original_speed + 20  # pages per minute\n    \n    # Let the total number of pages be x\n    # Time taken with original speed = x / original_speed\n    # Time taken with increased speed = x / increased_speed\n    # According to the problem: time with original speed - time with increased speed = 2 minutes\n    # (x / original_speed) - (x / increased_speed) = 2\n    # Solving for x:\n    time_difference = 2  # minutes\n    x = symbols('x')\n    equation = Eq((x / original_speed) - (x / increased_speed), time_difference)\n    total_pages = solve(equation, x)[0]\n\n    return total_pages\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    num_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n\n    while True:\n        start_date += one_year\n        # Adjust for leap years\n        if start_date.year % 4 == 0 and (start_date.year % 100 != 0 or start_date.year % 400 == 0):\n            start_date += one_day\n        # Check if the day is Monday\n        if start_date.weekday() == 0:\n            break\n    \n    ans = start_date.year\n    return ans\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # Limiting search space arbitrarily, could be larger/smaller based on problem constraints\n        dividend = divisor * 8 + 7  # Calculate dividend from divisor, quotient, and remainder\n        if dividend % divisor == 7:  # Check if remainder matches\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:30 AM is 1 hour\n    jogging_time = 1\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Walking time from 7:30 AM to 9:30 AM is 2 hours\n    walking_time = 2\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n    \n    money_saved = daily_savings * days_saved\n    total_amount = initial_amount + money_saved - lent_to_brother - spent_on_snacks\n    \n    return total_amount\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway_length = 900\n    companies = 4\n    days = 5\n\n    one_company_output_per_day = total_expressway_length / (companies * days)\n\n    return one_company_output_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    number_of_members = 30\n    \n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / number_of_members\n    \n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_rate = 80  # base rate in cents for up to 15 minutes\n    additional_rate = 5  # rate in cents for each additional minute\n    total_cost = 140  # total cost in cents\n\n    additional_cost = total_cost - base_rate\n    additional_minutes = additional_cost // additional_rate\n    total_minutes = 15 + additional_minutes\n\n    return total_minutes\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # The last digit of powers of 2 cycle every 4 steps: 2, 4, 8, 6\n    # Since 2017 mod 4 is 1, the last digit of 2^2017 is the same as 2^1\n    last_digit_2 = 2\n    \n    # The last digit of powers of 3 cycle every 4 steps: 3, 9, 7, 1\n    # Since 2017 mod 4 is 1, the last digit of 3^2017 is the same as 3^1\n    last_digit_3 = 3\n    \n    # Last digit of the product will be the product of the last digits\n    ans = (last_digit_2 * last_digit_3) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation = Eq(4 * x - 13, 55)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    def custom_operation(a, b):\n        return a + b - (a % 10) - (b % 10)\n    \n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(((number - 4) / 2) + 11, 37)\n\n    solved_number = solve(equation, number)\n\n    return solved_number[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    start = 56 // 5 + 1\n    end = 120 // 5\n\n    ans = end - start + 1\n\n    return ans\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 2*x + 7*x, 35)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina was 50 years old on 10th May 2005\n    gina_birth_year = 2005 - 50\n\n    # James was 20 years old on 10th May 1997\n    james_birth_year = 1997 - 20\n    \n    # We're asked to find James's age when Gina was 35\n    gina_age_35_year = gina_birth_year + 35\n    \n    # James's age at that time\n    james_age_when_gina_35 = gina_age_35_year - james_birth_year\n    \n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    # For the given question we can directly calculate the number of quarters in two and a half by multiplying by 4 (since a quarter is 1/4)\n    total = 2 + 1/2\n    num_quarters = total * 4\n    \n    return int(num_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position = 9\n    people_between = 2\n    \n    total_people = (lucy_position - 1) + (eddie_position - 1) - people_between\n    \n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    from sympy import isprime\n    \n    # Prime numbers less than 8 since remainder cannot be equal or larger than the divider.\n    primes = [p for p in range(2, 8) if isprime(p)]\n\n    # Check possible combinations of prime numbers that can be remainders\n    for p3 in primes:\n        for p5 in primes:\n            if p5 == p3:\n                continue\n            for p7 in primes:\n                if p7 in (p3, p5):\n                    continue\n                for p8 in primes:\n                    if p8 in (p3, p5, p7):\n                        continue\n                    n = 1\n                    # The number should simultaneously satisfy all four remainders when divided\n                    while True:\n                        if (n % 3 == p3) and (n % 5 == p5) and (n % 7 == p7) and (n % 8 == p8):\n                            return n\n                        n += 1\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length = 11 * 100 + 74  # Convert to centimeters\n    length_cut = 5 * 100 + 8      # Convert to centimeters\n    remainder = total_length - length_cut\n    stripe_length = remainder // 9  # Length of each stripe in centimeters\n    return stripe_length\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    result = 35\n    step1 = result + 21\n    step2 = step1 / 7\n    initial_number = step2 - 4\n    return initial_number\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Equation (1): Sum of all flowers\n    equation1 = Eq(orchids + tulips + roses, 3616)\n\n    # Equation (2): Ratio of orchids to tulips 3:5\n    equation2 = Eq(orchids / tulips, 3/5)\n\n    # Equation (3): Flowers left after sales\n    # 40% of orchids sold: 0.6 * orchids\n    # 1/5 of tulips sold: 0.8 * tulips\n    # 25% of roses sold: 0.75 * roses\n    equation3 = Eq(0.6 * orchids + 0.8 * tulips + 0.75 * roses, 2644)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    # Total pupils\n    total_pupils = 30\n    # Right-handed pupils\n    right_handed_pupils = 21\n    # Total girls\n    total_girls = 16\n    \n    # Non-right-handed pupils\n    non_right_handed = total_pupils - right_handed_pupils\n    \n    # Boys can all be not right-handed, so the non right-handed girls\n    # is the maximum of non right-handed pupils and total girls minus boys.\n    non_right_handed_girls = max(0, total_girls - non_right_handed)\n    \n    # The smallest number of girls who are right-handed\n    # is the total girls minus non right-handed girls.\n    right_handed_girls = total_girls - non_right_handed_girls\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    # Equation for total cost\n    equation1 = Eq(12 * books + 9 * files, 336)\n    # Equation for the quantity relationship between books and files\n    equation2 = Eq(books, files + 14)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    total_animals = 10\n    total_legs = 34\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    return 60.2 / 7\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    # Initialize a list to store the last digits of 1 to 9 raised to the power of 2013\n    last_digits = [pow(i, 2013, 10) for i in range(1, 10)]\n    # Calculate the sum of the last digits\n    total_last_digit = sum(last_digits)\n    # Find the ones digit of the total sum\n    ans = total_last_digit % 10\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # In the worst case scenario, Peter picks a sock of every color before he gets a matching pair.\n    # There are 3 colors, so after picking 3 socks, he still does not have a matching pair.\n    # The next sock he picks must create a pair, regardless of what color it is. \n    # So he must pick 4 socks to ensure he gets two socks of the same color.\n    return 4\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define the departure and arrival times with the Japan timezone\n    departure = datetime(2022, 7, 2, 20, 0)  # 8pm on July 2nd\n    arrival = datetime(2022, 7, 3, 1, 0)  # 1am on July 3rd\n\n    # Calculate the time difference between Japan and France\n    timezone_difference = timedelta(hours=7)\n\n    # Adjust the arrival time to Japan timezone\n    arrival_in_japan_timezone = arrival + timezone_difference\n\n    # Calculate the flight duration\n    flight_duration = arrival_in_japan_timezone - departure\n\n    return flight_duration.total_seconds() / 3600  # Return duration in hours\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n    \n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    pages = 131\n    count = 0\n\n    # Count the number of digits in each range\n    # 1-9: 9 pages with 1 digit each\n    count += 1 * 9\n\n    # 10-99: 90 pages with 2 digits each\n    count += 2 * 90\n\n    # 100-131: 32 pages (including 100) with 3 digits each\n    count += 3 * (pages - 99)\n\n    return count\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    unanswered_questions = 3\n    answered_questions = total_questions - unanswered_questions\n    score = 168\n    \n    # Let x be the number of correct answers.\n    # Then (answered_questions - x) is the number of incorrect answers.\n    # Each correct answer adds 4 points and each incorrect answer subtracts 1 point.\n    # 4x - (answered_questions - x) = score\n    # 4x - answered_questions + x = score\n    # 5x - answered_questions = score\n    # x = (score + answered_questions) / 5\n\n    correct_answers = (score + answered_questions) / 5\n    return correct_answers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, earring = symbols('necklace earring')\n    \n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n    \n    solutions = solve((equation1, equation2), (necklace, earring))\n    \n    total_cost = solutions[necklace] + solutions[earring]\n    \n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # There are 3 choices for each digit, but the first digit cannot be 0\n    # So, for the first place, we have 2 choices (1 or 2)\n    first_place_choices = 2 \n    \n    # For the second place, we have 3 choices (0, 1, or 2)\n    second_place_choices = 3\n    \n    # By the multiplication principle, total number of 2-digit numbers\n    total_numbers = first_place_choices * second_place_choices\n    \n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    total_sum = 200\n    even_count = 5\n    \n    # Each number in the sequence adds up to (total_sum / even_count)\n    # Since they are consecutive even numbers, they differ by 2\n    # Let the smallest even number be x, then the sequence is:\n    # x, x+2, x+4, x+6, x+8, and their sum is 5x + 20\n    # We can set up the equation 5x + 20 = total_sum and solve for x\n\n    # 5x = total_sum - 20\n    x = (total_sum - 20) / even_count\n    \n    return int(x)\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of sugar solution transferred\n    x = symbols('x')\n\n    # Initial amounts of sugar in each container\n    sugar_A = 50 * 0.10\n    sugar_B = 30 * 0.20\n\n    # Final amounts of sugar in each container after transfer\n    # Container A loses x grams of its solution and gains x grams of B's solution\n    sugar_A_final = sugar_A - (x * 0.10) + (x * 0.20)\n    # Container B loses x grams of its solution and gains x grams of A's solution\n    sugar_B_final = sugar_B - (x * 0.20) + (x * 0.10)\n\n    # Final volume of water in each container after transfer\n    volume_A_final = 50 - x + x  # remains 50g because x is transferred out and in\n    volume_B_final = 30 - x + x  # remains 30g for the same reason\n\n    # Final concentration of sugar should be same in both containers\n    # sugar_A_final/volume_A_final = sugar_B_final/volume_B_final\n    equation = Eq(sugar_A_final/volume_A_final, sugar_B_final/volume_B_final)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Return the first (and only) solution for x\n    return solution[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    result = 0\n    numerator = 100\n    for i in range(97, 0, -1):\n        result += numerator / i\n        numerator *= (i-3)\n    return result\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie needs 8 minutes to make 4 cuts to create 5 sections\n    # If she maintains the same speed, each cut takes 8 / 4 minutes\n\n    time_per_cut = 8 / 4\n\n    # To make 6 sections, she needs to make 5 cuts\n    # So, the total time needed is 5 cuts * time per cut\n\n    total_time = 5 * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n\n    # To win, Peter needs more than half of the total votes\n    votes_needed_to_win = total_votes // 2 + 1\n    \n    # How many more votes Peter needs\n    additional_votes_needed = votes_needed_to_win - peter_votes\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys - 7)\n    equation2 = Eq(boys + girls, 995)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    ans = 87 * 23\n    return ans\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    num1 = 31\n    num2 = 32\n    return max(num1, num2)\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_money_pence = 490  # Convert pounds to pence\n    for number in range(1, total_money_pence//5):  # Limit the loop by the least coin value\n        if ((5 + 10 + 20) * number) == total_money_pence:\n            return number * 3  # Total coins = 3 * number of each coin\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    n = 9  # number of terms\n    total_sweets = 135\n    # The sum of an arithmetic sequence is given by: total_sum = n/2 * (first_term + last_term)\n    # Also, last_term = first_term + (n-1) * difference\n    # We know that: total_sum = n/2 * (2*first_term + (n-1) * difference)\n    # Here, the difference is 3 (since he eats 3 more sweets each day)\n    difference = 3\n    total_sum = n/2 * (2 * first_term + (n-1) * difference)\n    # We can rewrite this equation to express the first_term in terms of total_sum and known values\n    # 135 = 9/2 * (2*first_term + (9-1) * 3)\n    # 135 = 9/2 * (2*first_term + 24)\n    # 135 = 9 * first_term + 9*12\n    # 135 - 9*12 = 9 * first_term\n    # (135 - 108) / 9 = first_term\n    first_term = (total_sweets - n * (difference/2)) / n\n    # Now we can use the first_term to find the last term\n    last_term = first_term + (n-1) * difference\n    return int(last_term)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = initial_amount * 0.10\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount_cents = 28 * 100\n    gift_cost_cents = 20 * 100\n    remaining_amount_cents = initial_amount_cents - gift_cost_cents\n    return remaining_amount_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n    amount = principal * (1 + rate) ** time\n    return amount\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    pages = 185\n    digits = 0\n\n    # Calculate the number of digits used for 1-9\n    digits += 9\n    \n    # Calculate the number of digits used for 10-99\n    digits += (99 - 10 + 1) * 2\n    \n    # Calculate the number of digits for 100-185\n    digits += (pages - 100 + 1) * 3\n\n    return digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary_before_raise = 24000\n    monthly_salary_before_raise = annual_salary_before_raise / 12\n    raise_percentage = 0.10\n    monthly_raise = monthly_salary_before_raise * raise_percentage\n    new_monthly_salary = monthly_salary_before_raise + monthly_raise\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    return 704 - 457\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):  # 1 to 12 for months\n        for day in range(1, 32):  # 1 to 31 for days, simplification since not all months have 31 days\n            if month * 31 + day * 12 == 376:\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    return (4.08 * 20 - 1.08 * 20) / 20\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sum = 0\n    for i in range(119, 98, -2):\n        sum += i if (i % 4 == 3) else -i\n    \n    return sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    total = 2022\n    count_div_7 = total // 7\n    count_div_17 = total // 17\n    count_div_7_17 = total // (7 * 17)\n    count_neither = total - (count_div_7 + count_div_17 - count_div_7_17)\n    return count_neither\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = cost_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_cost = 6 * 0.75  # reduced by a quarter\n    protractor_cost = 0.30 / 2  # half price\n\n    total_cost = (8 * calculator_cost) + (20 * protractor_cost)\n    \n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_ratio = 40\n    milk_ratio = 80\n    tom_flour = 25\n\n    tom_milk = (milk_ratio * tom_flour) / flour_ratio\n\n    return tom_milk\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    total_sweets = sweets_taken + sweets_left\n    return total_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    younger_age_now = 18\n    older_age_future = 62\n\n    # The age difference between the two elephants will remain constant.\n    age_difference = older_age_future - younger_age_now\n    older_age_now = younger_age_now + age_difference\n\n    return older_age_now\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Assume the amount of grass is G and the grass growth rate is r per week\n    # 27 oxen eat 27x grass per week, including the grass grown r, and they finish in 6 weeks: 27 * 6 * x + 6 * r = G\n    # 23 oxen eat 23x grass per week, including the grass grown r, and they finish in 9 weeks: 23 * 9 * x + 9 * r = G\n    # We have two equations:\n    # 27 * 6 * x + 6 * r = G\n    # 23 * 9 * x + 9 * r = G\n    # By equating them we can eliminate G:\n    # 27 * 6 * x + 6 * r = 23 * 9 * x + 9 * r\n    # We solve for r:\n    r = (27 * 6 - 23 * 9) / (9 - 6)\n    \n    # Now we need to find for how many weeks (w) 21 oxen will finish eating the grass\n    # 21 oxen eat 21x grass per week, including the grass growth rate r, until the grass is finished: 21 * w * x + w * r = G\n    # We will use the value of G found from the 27 oxen equation:\n    G = 27 * 6 * x + 6 * r\n    # Plug into the 21 oxen equation and solve for w:\n    w = G / (21 * x + r)\n\n    return w\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonne_to_kg = 1000\n    ans = (2/3) * 1.194 * tonne_to_kg\n    return ans\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's bike ride from 7:30am to 8:30am\n    bike_speed = 10  # miles per hour\n    bike_hours = 1   # 8:30am - 7:30am = 1 hour\n    bike_distance = bike_speed * bike_hours\n\n    # Ellen's train ride from 8:30am to 10:30am\n    train_speed = 50  # miles per hour\n    train_hours = 2   # 10:30am - 8:30am = 2 hours\n    train_distance = train_speed * train_hours\n\n    # Total travel distance\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # Since the balls are indistinguishable and boxes can be empty, this problem is equivalent\n    # to partitioning the number 5 using up to 3 parts, which corresponds to the \"stars and bars\" approach.\n    # Number of ways to distribute n identical items into k distinct boxes is given by\n    # Binomial(n + k - 1, k - 1).\n    \n    # Import comb function for combinations\n    from math import comb\n\n    num_balls = 5\n    num_boxes = 3\n\n    # Applying the \"stars and bars\" theorem\n    # The number of ways to put (distribute) n identical items into k distinct boxes\n    ans = comb(num_balls + num_boxes - 1, num_boxes - 1)\n\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02)**2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    total_marbles = 112\n    blue = total_marbles\n    for b in range(total_marbles):\n        red = b + 25\n        green = red + 32\n        if b + red + green == total_marbles:\n            blue = b\n            break\n    return blue\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "def solution():\n    from math import factorial\n    \n    # The word TEENAGE has 7 letters with the following counts of each letter:\n    # T: 1, E: 3, N: 1, A: 1, G: 1\n    total_letters = 7\n    e_count = 3\n\n    # The number of different ways to arrange the letters is the factorial of\n    # the total number of letters divided by the factorial of the count of each\n    # letter that is repeated.\n    ways_to_arrange = factorial(total_letters) // (factorial(e_count))\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas's positions give us information about the dimensions of the array.\n    # Since he is 3rd from the front and 2nd from the back, there must be 3 + 2 - 1 = 4 rows.\n    # Similarly, since he is 4th from the left and 3rd from the right, there must be 4 + 3 - 1 = 6 columns.\n    rows = 3 + 2 - 1\n    columns = 4 + 3 - 1\n\n    # The total number of students is the number of rows times the number of columns.\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Ema and Keng Wee's original amounts of money\n    ema, keng_wee = symbols('ema keng_wee')\n\n    # Set up the equation based on the problem statement\n    # Ema had $360 less than Keng Wee: ema = keng_wee - 360\n    # Ema spent 1/4 of her money: ema - (1/4)*ema\n    # Keng Wee spent 4/7 of his money: keng_wee - (4/7)*keng_wee\n    # In the end, Keng Wee and Ema had the same amount of money left:\n    # ema - (1/4)*ema = keng_wee - (4/7)*keng_wee\n\n    # Write the equation form of the problem\n    equation = Eq(ema - (1/4)*ema, keng_wee - (4/7)*keng_wee)\n\n    # Ema has 360 less than Keng Wee\n    ema_amount = Eq(ema, keng_wee - 360)\n\n    # Solve the system of equations\n    solutions = solve((equation, ema_amount), (ema, keng_wee))\n\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    \n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    num = 216\n    while True:\n        num += 1\n        if sum(int(digit) for digit in str(num)) == 9:\n            return num\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 36 / 4\n    one_tenth_of_square = one_fourth_of_36 * 10\n\n    return one_tenth_of_square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    g, b = symbols('g b')  # g for girls, b for boys\n\n    equation1 = Eq(g, 9/11 * b)\n    equation2 = Eq(g + 2, 10/11 * b)\n\n    solutions = solve((equation1, equation2), (g, b))\n\n    total_students_now = solutions[g] + solutions[b]\n\n    return total_students_now\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # Start with the first term which is 1\n    for i in range(2, 11):\n        # The pattern is an increasing sequence from 1/i to i/i and then a decreasing sequence from (i-1)/i to 1/i, for each i\n        increasing_sequence_sum = sum(1/i for j in range(1, i+1))\n        decreasing_sequence_sum = sum(1/i for j in range(i-1, 0, -1))\n        ans += increasing_sequence_sum + decreasing_sequence_sum\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2 * (3 * x - y), 2 * x + 4)\n\n    solution = solve(equation, (x, y))\n\n    x_value = solution[x]\n    y_value = solution[y]\n\n    brackets = 2 * x_value - y_value\n\n    return brackets\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas's position from the front and back gives the number of rows.\n    rows_front = 3\n    rows_back = 2\n    # Since Lucas cannot be counted twice, the total rows is front + back - 1\n    total_rows = rows_front + rows_back - 1\n    \n    # Lucas's position from the left and right gives the number of columns.\n    columns_left = 4\n    columns_right = 3\n    # Since Lucas cannot be counted twice, the total columns is left + right - 1\n    total_columns = columns_left + columns_right - 1\n    \n    # The total number of students is the number of rows * number of columns.\n    total_students = total_rows * total_columns\n    \n    return total_students\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = 3*31 + 2*17 + 1*78 + 105*100\n    change_pence = 5*100 - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor = symbols('trevor')\n    siobhan = symbols('siobhan')\n\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of tiles each person has\n    lim_tiles, tan_tiles = symbols('lim_tiles tan_tiles')\n\n    # Equation 1: Total number of tiles\n    equation1 = Eq(lim_tiles + tan_tiles, 390)\n    # Equation 2: Relationship between the number of tiles each person has\n    equation2 = Eq(lim_tiles, 5 * tan_tiles)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lim_tiles, tan_tiles))\n\n    # Calculate how many more tiles Mr Lim has than Mr Tan\n    more_tiles = solutions[lim_tiles] - solutions[tan_tiles]\n\n    return more_tiles\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_current_age = symbols('zehan_current_age')\n    equation = Eq(zehan_current_age + 12, 3 * zehan_current_age)\n\n    zehan_age_solution = solve(equation, zehan_current_age)\n    \n    return zehan_age_solution[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Total ways to choose 5 students out of 15 without any restrictions\n    total_ways = comb(15, 5)\n\n    # Total ways to choose 5 students when none of A, B, or C is chosen\n    # Which means choosing all 5 from the remaining 12 students\n    ways_without_ABC = comb(12, 5)\n\n    # Total ways to choose 5 students when two of A, B, or C are chosen\n    # We have 3 ways to choose which two of A, B, C are in the team\n    # And then we have to choose 3 more students from the remaining 12\n    ways_with_two_of_ABC = 3 * comb(12, 3)\n\n    # Total ways to choose 5 students when all of A, B, and C are chosen\n    # And then we choose 2 more from the remaining 12\n    ways_with_ABC = comb(12, 2)\n\n    # The total number of ways with exactly one of A, B, or C is:\n    ans = total_ways - (ways_without_ABC + ways_with_two_of_ABC + ways_with_ABC)\n    return ans\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n\n    cost_per_ticket = total_cost / number_of_tickets\n\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original amount of lemon juice be x\n    original_lemon_juice = symbols('original_lemon_juice')\n    \n    # After adding 80ml of lemon juice\n    new_lemon_juice = original_lemon_juice + 80\n    \n    # The ratio before adding was 2:3, which is equivalent to x/(3/2 * x)\n    original_water = (3/2) * original_lemon_juice\n    \n    # The new ratio after adding the lemon juice is 6:5, which is equivalent to (new_lemon_juice)/(5/6 * new_lemon_juice)\n    new_water = (5/6) * new_lemon_juice\n    \n    # But the amount of water remains the same since we're only adding lemon juice\n    # Thus, the original water is equal to the new water\n    equation = Eq(original_water, new_water)\n\n    # Solve the equation\n    solution = solve(equation, original_lemon_juice)\n    \n    # Return the original amount of lemon juice\n    return solution[0]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    savannah_ratio = 5\n    shaila_sweets = 36\n\n    total_sweets = shaila_sweets * (savannah_ratio + shaila_ratio) / shaila_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n    \n    # Kim gives 1/3 of her savings to her mother\n    amount_given_to_mother = savings / 3\n    \n    # Kim spends 177 for dresses\n    # Kim spends 129 for earrings\n    amount_spent_on_shopping = 177 + 129\n    \n    # Kim has remaining 50% of what she gave to her mother after shopping\n    remaining_amount = amount_given_to_mother / 2\n    \n    # savings is the sum of amount given to mother, shopping expenses, and the remaining amount\n    equation = Eq(amount_given_to_mother + amount_spent_on_shopping + remaining_amount, savings)\n    \n    # Solve the equation for savings\n    solution = solve(equation, savings)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Both French and Japanese = French + Japanese - Total\n    both_languages = french_teachers + japanese_teachers - total_teachers\n\n    # Only French = French - Both French and Japanese\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.3  # 30% increase\n    time_delay = 9 / 60  # 9 minutes in hours\n\n    # Distance = Speed * Time\n    # Distance with usual speed = Distance with increased speed\n    # Travel time decreases by the time delay when the speed is increased\n    # usual_speed * usual_time = increased_speed * (usual_time - time_delay)\n    # Solving for usual_time (time it would take at the usual speed without delay):\n    usual_time = (increased_speed * time_delay) / (increased_speed - usual_speed)\n\n    # Distance that the car has to travel:\n    distance = usual_speed * usual_time\n\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Let's reverse the operations\n    quotient = 80\n    # Multiply by 8\n    difference = quotient * 8\n    # Add 8\n    product = difference + 8\n    # Divide by 8\n    sum_with_number = product / 8\n    # Subtract 8\n    number = sum_with_number - 8\n    return number\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    return 21 / 0.3\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    # Electricity saved in the first half of the year\n    first_half_total = 366\n    # Number of months in the first half of the year\n    months_first_half = 6\n    \n    # Average electricity saved per month in the second half of the year\n    second_half_average = 65\n    # Number of months in the second half of the year\n    months_second_half = 6\n    \n    # Total electricity saved in the second half of the year\n    second_half_total = second_half_average * months_second_half\n    \n    # Total electricity saved in the whole year\n    total_year = first_half_total + second_half_total\n    # Number of months in the whole year\n    months_year = months_first_half + months_second_half\n    \n    # Average electricity saved per month in the whole year\n    average_per_month = total_year / months_year\n    \n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 1000):  # Arbitrary large number to search for solution\n        if i % 7 == 0 and (i - 2) % 9 == 0:  # Check the conditions given\n            return i\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    half = 22 // 2\n    return half\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original speed be x meters per minute and the original time be t minutes.\n    x, t = symbols('x t')\n\n    # If the speed increases by 25%, the new speed becomes 1.25x.\n    # The new time becomes 0.8t (since the time decreases by 20 minutes, which is a 20% decrease).\n    equation1 = Eq(0.8 * t, (x * 1.25 * t) / x - 20)\n\n    # If the speed decreases by 45 meters per minute, the new speed becomes x - 45.\n    # The new time becomes 1.75t (since the time increases by 75%).\n    equation2 = Eq(1.75 * t, (x * t) / (x - 45))\n\n    # Solve the system of equations for x and t\n    solutions = solve((equation1, equation2), (x, t))\n\n    # Calculate the distance which is original speed (x) times original time (t)\n    distance = solutions[x] * solutions[t]\n\n    return distance.evalf()\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n\n    # Assume all ropes are red.\n    all_red_length = total_ropes * 2\n\n    # Calculate the extra length if all ropes were red and compare with the total length.\n    # The difference divided by the 1 (since blue is 1 m longer than red) will give us the number of blue ropes.\n    extra_length = all_red_length - total_length\n    blue_ropes = extra_length // 1\n    \n    # Subtract the number of blue ropes from total to get the number of red ropes.\n    red_ropes = total_ropes - blue_ropes\n\n    return red_ropes\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n    \n    total_used = brownies + cookies + muffins\n    total_used = total_used.simplify()\n    \n    return total_used\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for a in range(1, 42):  # Since factors are positive integers, start at 1.\n        largest_factor = a + 41\n        if largest_factor % a == 0:  # Check if largest_factor is indeed a factor of a.\n            A = a\n            break\n    \n    seventh_multiple = A * 7  # The 7th multiple of A will be A * 7\n\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21\n    # Given ratio\n    ratio_height = 3\n    ratio_width = 4\n\n    # Find the width based on height and ratio\n    width = (height / ratio_height) * ratio_width\n\n    # Find the perimeter of the screen\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1)\n    for i in range(2, 12):\n        result *= Fraction(1 + 1/i)\n    return float(result)\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n    equation1 = Eq((1/2) * nathan, (1/5) * rosephine)\n    equation2 = Eq((1/5) * rosephine, (3/5) * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # The problem gives us two equations:\n    # y - x = 36 and x + y = 98\n    \n    # We can now solve these equations for x and y\n    \n    # From the first equation, y = x + 36\n    # Substitute y in the second equation: x + (x + 36) = 98\n    # Simplify: 2x + 36 = 98\n    # Solve for x: 2x = 98 - 36\n    x = (98 - 36) / 2\n    # x is the smaller number\n    return x\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number_str = \"3\" * 12  # Create a string of '3' repeated 12 times\n    number = int(number_str)  # Convert the string to an integer\n    remainder = number % 7  # Calculate the remainder of the division by 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Calculate the last digit of each of the numbers raised to the 100th power\n    last_digit_4 = (4 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n    last_digit_11 = (11 ** 100) % 10\n\n    # Multiply the last digits and find the last digit of the result\n    last_digit_product = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    \n    return last_digit_product\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    percent_correct = 0.70\n    correct_score = 3\n    wrong_score = -1\n    total_score = 78\n\n    correct_answers = total_questions * percent_correct\n    incorrect_answers = total_questions - correct_answers\n\n    # Let x be the number of questions answered correctly.\n    # Then the number of incorrect answers is correct_answers - x.\n    # The total score is then x * correct_score + (correct_answers - x) * wrong_score.\n    # We need to solve for x using the equation x * correct_score + (correct_answers - x) * wrong_score = total_score.\n\n    x = (total_score + incorrect_answers * wrong_score) / (correct_score - wrong_score)\n    return int(x)\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Given the cost of 6 files and 10 rulers is $40\n    # We assume the cost of one file is f and the cost of one ruler is r\n    # then we have 6f + 10r = 40\n    \n    # We can infer the relationship between the file and the ruler by unit price\n    # If 6 files cost the same as 10 rulers, then the cost of 1 file is equivalent to the cost of 10/6 or 5/3 rulers\n    # So, f = (5/3)r\n    \n    # Now we need to find the cost of 9 files and 15 rulers\n    # Substitute the value of f from the relationship into the equation for 9 files and 15 rulers\n    # cost = 9f + 15r\n    # cost = 9 * (5/3)r + 15r\n    # cost = 15r + 15r\n    # cost = 30r\n    \n    # We know that 6 * (5/3)r + 10r = 40\n    # Simplifying the above expression gives us 10r + 10r = 40\n    # 20r = 40\n    # r = 2\n    \n    # Now we can calculate the cost of 9 files and 15 rulers using r = 2\n    # cost = 30r\n    # cost = 30 * 2\n    cost = 60\n\n    return cost\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbols for John's and Jessie's amounts of money\n    john, jessie = symbols('john jessie')\n\n    # Equation 1 represents the ratio of John's to Jessie's money before the transfer\n    equation1 = Eq(john, 5/13 * jessie)\n    \n    # Equation 2 represents the ratio after Jessie gives John $600\n    equation2 = Eq(john + 600, 1/2 * (jessie - 600))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    # Calculate the total amount of money they have\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    total_ones = 15\n    total_twos = 14\n\n    # Check count of 1s and 2s in the sequence\n    count_ones = count_twos = 0\n    n = 1\n    while True:\n        str_n = str(n)\n        count_ones += str_n.count('1')\n        count_twos += str_n.count('2')\n\n        # Break the loop when the count of 1s and 2s match the required count\n        if count_ones == total_ones and count_twos == total_twos:\n            break\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "def solution():\n    from datetime import datetime\n\n    time_in = datetime.strptime('10:30', '%H:%M')\n    time_out = datetime.strptime('11:00', '%H:%M')\n    \n    time_diff = time_out - time_in\n    return time_diff.seconds // 60\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n    \n    # Initial ratios\n    equation1 = Eq(t_shirts / caps, 8 / 5)\n    \n    # Money collected\n    # Siti sold 1/4 of the T-shirts, each costing $3, and 1/5 of the caps, each costing $5.\n    equation2 = Eq((1/4) * t_shirts * 3 + (1/5) * caps * 5, 132)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t_shirts, caps))\n    \n    # Return the number of T-shirts Siti had at first, which must be an integer\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost_pence = (3 * 12) + (5 * 11)\n    total_paid_pence = 200  # £2 = 200p\n\n    change_pence = total_paid_pence - total_cost_pence\n    \n    pounds = change_pence // 100\n    pence = change_pence % 100\n\n    return (pounds, pence)\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_children = 7\n\n    oldest_age = youngest_age + (number_of_children - 1) * age_difference\n\n    return oldest_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    price_calendar = 6.97\n    price_ball = 2.99\n\n    total_spent = price_calendar + price_ball\n\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_left = 360  # in grams\n    flour_used_muffins = 1/5  # in kg\n    flour_used_cookies = 1/2  # in kg\n    total_flour_used = flour_used_muffins + flour_used_cookies  # in kg\n    total_flour_used_grams = total_flour_used * 1000  # convert kg to grams\n    initial_flour = total_flour_used_grams + flour_left  # total flour in grams\n    initial_flour_kg = initial_flour / 1000  # convert grams to kg\n    return initial_flour_kg\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    # Convert pounds to pence: £5 -> 500p\n    total_cost_pence = 500\n    \n    # Equation for the cost of oranges and lemons\n    equation = Eq(26 * oranges + 30 * lemons, total_cost_pence)\n\n    # Conditions: Gordon bought more than 0 of each fruit and the cost was exactly £5\n    possible_solutions = [(o, l) for o in range(total_cost_pence // 26 + 1)\n                          for l in range(total_cost_pence // 30 + 1)\n                          if 26 * o + 30 * l == total_cost_pence]\n    \n    # sum up the number of oranges and lemons for each solution\n    result = [o + l for o, l in possible_solutions]\n\n    # return all possible counts\n    return result\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n    # Since it's a circular arrangement, fix one person and arrange the others.\n    # The number of different orders is then (4-1)! = 3!\n    num_orders = factorial(3)\n    return num_orders\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_eggs = symbols('original_eggs')\n    equation = Eq(3 * original_eggs, original_eggs + 24)\n    \n    original_number = solve(equation, original_eggs)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n\n    ans = delta(star(delta(3, 4), 5), 6)\n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for number in range(1, 441):\n        count += str(number).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of male and female visitors\n    male, female = symbols('male female')\n\n    # Equations based on the problem statement\n    day1 = Eq(male, female + 450)\n    day2_male = male - 0.18 * male\n    day2_female = female + 0.15 * female\n    day2 = Eq(day2_male + day2_female, 1354)\n\n    # Solve the system of equations\n    solutions = solve((day1, day2), (male, female))\n\n    # Calculate the total number of visitors on the first day\n    total_first_day = solutions[male] + solutions[female]\n\n    return total_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n    initial_difference = 220\n    leo_salary = 180\n    jason_salary = 1100\n    final_ratio = 2\n\n    # Initial state: Leo = Jason + 220\n    equation1 = Eq(leo, jason + initial_difference)\n    # After salary Leo = Leo + 180, Jason = Jason + 1100\n    # Final state: Jason = 2 * Leo\n    equation2 = Eq(jason + jason_salary, final_ratio * (leo + leo_salary))\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    biographies = factorial(3)\n    science_fictions = factorial(4)\n    magazines = factorial(2)\n    schoolbooks = factorial(2)\n    \n    # Calculate the permutations with repetitions\n    ans = factorial(total_books) // (biographies * science_fictions * magazines * schoolbooks)\n    \n    return ans\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        if A == 0:  # A can't be 0 as it is the first digit in a five-digit number\n            continue\n        F = (2 * E) % 10\n        if F in p:\n            continue\n        G = (2 * E) // 10\n        H = (2 * D + G) % 10\n        if H in p or H == F:\n            continue\n        I = (2 * D + G) // 10\n        if (2 * C + I) % 10 != B:\n            continue\n        # We've found a combination that satisfies the condition\n        return E * 10000 + F * 1000 + C * 100 + B * 10 + H\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Partitions of number 7 into at most 3 parts\n    partitions = [\n        (7, 0, 0),  # 7 pencils in one case, and 0 in the others\n        (6, 1, 0),  # 6 pencils in one case, 1 in another case, and 0 in the last one\n        (5, 2, 0),  # and so on...\n        (5, 1, 1),\n        (4, 3, 0),\n        (4, 2, 1),\n        (3, 3, 1),\n        (3, 2, 2),\n        (2, 2, 3)\n    ]\n    # Since the pencil cases are identical, the order of the partition does not matter\n    # Therefore, we only have to count the unique partitions\n    return len(partitions)\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n\n    ans = robots_per_day * days_per_week\n    return ans\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    step = 9\n    \n    last_positive = start_number % step\n    \n    if last_positive == 0:\n        last_positive = step\n    \n    return last_positive\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3000000  # 3 million pounds\n    num_friends = 5\n\n    cost_per_friend = total_cost / num_friends\n    return cost_per_friend\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num_with_name, num_without_name = symbols('num_with_name num_without_name')\n    \n    equation1 = Eq(num_with_name + num_without_name, 50)\n    equation2 = Eq(num_with_name * 15 + num_without_name * 10, 555)\n\n    solutions = solve((equation1, equation2), (num_with_name, num_without_name))\n\n    return solutions[num_with_name]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1 # The position of the last student\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore time is 7 hours ahead of London time\n    # Singapore 05:00 is equivalent to London 22:00 the previous day\n    # Flight lands at London 11:00\n\n    # Convert times to 24-hour format\n    takeoff_singapore = 5\n    landing_london = 11\n\n    # Calculate duration of the flight\n    # Note: Since Singapore is ahead, we have landed on the same day we take off\n    # which means we need to adjust the time difference by adding 24 hours\n    # to the London time to calculate the flight duration.\n    duration = (landing_london + 24) - takeoff_singapore\n\n    return duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "def solution():\n    from math import factorial\n\n    # Given numbers of cards\n    hearts = 4\n    spades = 3\n    diamonds = 7\n    \n    # Total number of cards\n    total_cards = hearts + spades + diamonds\n    \n    # Calculate permutations with repetitions\n    ways = factorial(total_cards) // (factorial(hearts) * factorial(spades) * factorial(diamonds))\n\n    return ways\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    # First digit: the smallest multiple of 5 which is 5 itself.\n    first_digit = 5\n    # Second digit: the smallest odd number among the natural numbers which is 1.\n    second_digit = 1\n    # Third digit: the largest odd single digit number, which is 9.\n    third_digit = 9\n    # Fourth digit: the smallest even number in nature, which is 2.\n    fourth_digit = 2\n    # Fifth digit: the largest single digit that is a multiple of 2, which is 8.\n    fifth_digit = 8\n    # Sixth digit: the smallest odd number greater than 1 in nature, which is 3.\n    sixth_digit = 3\n    # Seventh digit: a number that is both a multiple of 2 and 5, which is 0 for a single digit.\n    seventh_digit = 0\n\n    # Combine all the digits to form the phone number.\n    phone_number = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    \n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages = 0\n    pages_per_day = 20\n    increase_per_day = 5\n    last_day_pages = 80\n\n    # read pages until the last day\n    while pages_per_day < last_day_pages:\n        total_pages += pages_per_day\n        pages_per_day += increase_per_day\n\n    # add the last day's pages\n    total_pages += last_day_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    # Using algebra to set up the equations\n    # Let t be the time David spent walking after increasing his speed\n    # David walks 150 metres per minute for the first 10 minutes, and then (150+50) metres for t minutes\n    \n    # Distance walked at the initial speed is 150 metres/minute * 10 minutes\n    initial_speed_distance = 150 * 10\n    \n    # Distance walked at the increased speed is (150 + 50) metres/minute * t minutes\n    increased_speed = 150 + 50\n    increased_speed_distance = increased_speed * t\n    \n    # The total distance is the sum of the two parts, which is given to be 3700 metres\n    total_distance = initial_speed_distance + increased_speed_distance\n    \n    # Set up the equation and solve for t\n    total_distance = 150 * 10 + (150 + 50) * t\n    # 3700 = 1500 + 200 * t\n    # 3700 - 1500 = 200 * t\n    # 2200 = 200 * t\n    t = (3700 - 1500) / 200  # Solving for t\n    \n    # Total time spent walking is the initial 10 minutes plus t minutes\n    total_time = 10 + t\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    males_first_day, females_first_day = symbols('males_first_day females_first_day')\n\n    # The number of male visitors was 450 more than the number of female visitors on the first day\n    equation1 = Eq(males_first_day, females_first_day + 450)\n\n    # On the second day, female visitors increased by 15%\n    females_second_day = females_first_day * 1.15\n\n    # The number of male visitors decreased by 18%\n    males_second_day = males_first_day * 0.82\n\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(females_second_day + males_second_day, 1354)\n\n    solutions = solve((equation1, equation2), (males_first_day, females_first_day))\n\n    return solutions[males_first_day]\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "from fractions import Fraction\n\ndef solution():\n    almonds = Fraction(4, 9)\n    cashews = Fraction(1, 3)\n    difference = almonds - cashews\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    # Incorrect Method\n    quotient = 9\n    remainder = 2\n    incorrect_total = (quotient * remainder) + 4\n    \n    # Correct Method\n    correct_total = (quotient * 4) + remainder\n\n    return correct_total\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_even = sum(range(2, 55, 2))  # Sum of even numbers from 2 to 54\n    sum_odd = sum(range(-50, 53, 2)) # Sum of odd numbers from -50 to 52\n    \n    ans = sum_even + sum_odd\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Setup the congruences based on the problem statement\n    congruences = [(3, 6), (4, 7), (1, 8)]\n\n    # Solve the system of congruences\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    for s in range(1, 10):\n        for a in range(10):\n            for m in range(10):\n                for o in range(10):\n                    for g in range(10):\n                        sasmo = 10000 * s + 1000 * a + 100 * s + 10 * m + o\n                        ogams = 10000 * o + 1000 * g + 100 * a + 10 * m + s\n                        if sasmo * 4 == ogams and len({s, a, m, o, g}) == 5:\n                            return sasmo\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g.\n    # We know that the total number of students is 40, hence g = 40 - b\n    \n    # Each boy distributed 4 bags, and each girl 3 bags. \n    # The boys distributed 62 more bags than the girls.\n    # So, the equation is 4*b = 3*g + 62\n    \n    # Replacing g with (40 - b) in the equation gives us:\n    # 4*b = 3*(40 - b) + 62\n    \n    # Solving this linear equation for b\n    from sympy import symbols, Eq, solve\n\n    b = symbols('b')\n    equation = Eq(4*b, 3*(40 - b) + 62)\n    num_boys = solve(equation, b)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n    median_index = len(sequence) // 2\n    \n    if len(sequence) % 2 == 0:\n        median = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        median = sequence[median_index]\n\n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((65 - x), 3 * (29 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1 / 6\n\n    expected_number_of_fives = total_rolls * probability_of_five\n\n    return expected_number_of_fives\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    return (12 / 18) * 6\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n    equation3 = Eq((A + B + C)/3, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # 6 dresses cost 7x each\n    dress_cost = 6 * 7 * x\n    # 3 skirts cost $35 each\n    skirt_cost = 3 * 35\n    # Total cost is $441\n    total_cost = Eq(dress_cost + skirt_cost, 441)\n    \n    # Solve for x\n    dress_price = solve(total_cost, x)\n    return dress_price[0]\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "网络故障，请重试"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for num in range(1, 1000, 2):\n        remainder_sum += num**2\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    # Nell's ratio is 4, Joe's ratio is 5, total ratio is 4+5=9\n    nell_ratio = 4\n    total_ratio = 4 + 5\n    \n    # Nell received 24 sweets, which corresponds to her part of the ratio\n    nell_sweets = 24\n\n    # Calculate the sweets per one ratio unit\n    sweets_per_ratio = nell_sweets / nell_ratio\n\n    # Calculate the total sweets\n    total_sweets = sweets_per_ratio * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    # Each place (hundreds, tens, ones) can be occupied by any of these odd digits\n    return 5 * 5 * 5\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n\n    equation1 = Eq(jamie_anne, natasha + 18)\n    equation2 = Eq(jamie_anne / natasha, 5 / 3)\n\n    solutions = solve((equation1, equation2), (jamie_anne, natasha))\n\n    return solutions[jamie_anne] + solutions[natasha]\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 as it is the first digit of a two-digit number\n        for b in range(10):  # b can be 0-9\n            if (10 * a + b) + (10 * b + a) + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the symbols for Sana and Mina's coins\n    sana, mina = symbols('sana mina')\n    \n    # Equation 1: Sana had 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n    \n    # Equation 2: Sana and Mina had 234 coins in total\n    equation2 = Eq(sana + mina, 234)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n    \n    # Calculate how many coins Mina had left after giving away 12\n    mina_left = solutions[mina] - 12\n    \n    return mina_left\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the original length and w be the original width\n    l, w = symbols('l w')\n\n    # Perimeter of new rectangle is the perimeter of the original rectangle plus 24 cm\n    # (since both lengths are increased by 12 cm)\n    equation = Eq(2*(l + 12) + 2*w, 38)\n\n    # We solve the equation to get the expression for the original length in terms of width\n    original_length_expr = solve(equation, l)[0]\n\n    # We express the perimeter of the original rectangle in terms of width w\n    original_perimeter = 2*original_length_expr + 2*w\n\n    # Since we need the numerical value of the original perimeter, and there's only one solution\n    # that fits the real world scenario where length and width are positive, we make an assumption:\n    # The length of the original rectangle has to be smaller than the length of the new rectangle.\n    # Therefore, we solve for w in the inequality l < l + 12, i.e., 0 < 12.\n    # Every positive value of w is a solution, but since we need the perimeter in the original situation\n    # and we have only one value for it, we assume the smallest integer value for w, which is 1.\n    # So we substitute w with 1 in the original perimeter formula.\n    \n    perimeter_of_original = original_perimeter.subs(w, 1)\n\n    # We can further simplify the expression of the perimeter if needed\n    perimeter_of_original = perimeter_of_original.simplify()\n\n    return perimeter_of_original\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    \n    weight_per_bag = 3/4\n    num_bags = remaining_after_tuesday / weight_per_bag\n    \n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n    \n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 300  # £3.00 is 300 pence\n    ans = (pence / pounds_to_pence) * 100\n    return ans\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    time_per_lamppost = 50 / (11 - 1)  # Calculate the time it takes to cycle past one lamppost\n    total_lampposts = 80 / time_per_lamppost + 1  # Calculate total lampposts after 80 seconds and add the first lamppost\n\n    return int(total_lampposts)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Jill counts 6 flowers on each side and 1 at each corner.\n    # But each corner flower is shared between two sides.\n    # So we need to subtract the extra count for each corner flower.\n\n    # First, we calculate the total flowers without considering the shared corners\n    total_flowers_without_shared_corners = 6 * 4\n\n    # However, each of the 4 corners is counted twice, so we should subtract 4 flowers\n    shared_corners = 4\n\n    # So the correct number of flowers is:\n    total_flowers = total_flowers_without_shared_corners - shared_corners\n\n    return total_flowers\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_extra_length = 56\n    football_field_length = basketball_court_length + football_field_extra_length\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    rina_discount = 0.20\n    rina_paid = 60\n    original_price = rina_paid / (1 - rina_discount)\n    ana_paid = 67.50\n    ana_discount = (original_price - ana_paid) / original_price\n    \n    return ana_discount * 100\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    from fractions import Fraction\n    \n    # Convert the boundaries into fractions to avoid floating point precision issues\n    lower_bound = Fraction(3, 10)\n    upper_bound = Fraction(5, 16)\n\n    s = 1  # Start testing from the smallest whole number for s\n    while True:\n        # Create fraction r/s in reduced form and check if it is within the bounds\n        r = (lower_bound * s).numerator\n        if lower_bound < Fraction(r, s) < upper_bound:\n            return s\n        s += 1\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    # Let the total number of steering wheels be denoted as 'total'\n    first_day = 300\n    second_day = 250\n    total_two_days = first_day + second_day\n    \n    # From the problem statement, total_two_days is 5/6 of the total\n    # Therefore, total = (total_two_days) / (5/6)\n    total = total_two_days / (5/6)\n    \n    return int(total)\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # We set up our equations based on the problem\n    # apples = 2/3 * total_items\n    # bananas = 1/9 * total_items\n    # lemons = total_items - apples - bananas\n    # apples - lemons = 12 \n\n    apples = 2 / 3 * total_items\n    bananas = 1 / 9 * total_items\n    lemons = total_items - apples - bananas\n    equation = Eq(apples - lemons, 12)\n\n    solutions = solve(equation, total_items)\n\n    # Since lemons = total_items - apples - bananas\n    # We can plug in the solution to find the number of lemons\n    lemons_count = solutions[0] - 2 / 3 * solutions[0] - 1 / 9 * solutions[0]\n\n    return lemons_count\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Since the number is between 40000 and 50000, the ten-thousands digit is 4\n    ten_thousands = 4\n    \n    # The digit in the hundreds place has a value of 800, which means it's 8\n    hundreds = 8\n    \n    # The digit in the thousands place is 1 more than the digit in the hundreds place\n    thousands = hundreds + 1  # which is 9\n    \n    # The digit in the ones place is the sum of all the factors of 4\n    factors_of_4 = [1, 2, 4]  # Factors of 4\n    ones = sum(factors_of_4)  # Sum of all factors\n    \n    # The digit in the tens place is the difference between the hundreds and ones\n    tens = hundreds - ones\n    \n    # Combine all the digits to form the number\n    number = (ten_thousands * 10000) + (thousands * 1000) + (hundreds * 100) + (tens * 10) + ones\n    \n    return number\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    total_capacity_in_children = 40\n    children_on_bus = 15\n    adult_capacity = 24\n    remaining_capacity_in_children = total_capacity_in_children - children_on_bus\n    # The equivalent number of adults that can fill the remaining space which was occupied by children\n    equivalent_adults_for_remaining_children = (remaining_capacity_in_children / total_capacity_in_children) * adult_capacity\n\n    return int(equivalent_adults_for_remaining_children)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28 to get its prime factors and their powers\n    factors = factorint(28)\n    \n    # To get a perfect square, all prime factors must be in pairs (even powers)\n    # Multiply the factors that are not in pairs by themselves to get the smallest number\n    smallest_multiplier = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            smallest_multiplier *= prime\n    \n    return smallest_multiplier\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_3min = 2\n    total_minutes = 12\n    pancakes_in_12min = (pancakes_per_3min / 3) * total_minutes\n\n    return int(pancakes_in_12min)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4-x, 5*x-8)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    total_sizes = 3\n    min_students_same_size = (total_students // total_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle_op(a, b):\n        return (a + 2) / b\n\n    return triangle_op(8, triangle_op(6, 4))\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define symbol for salary\n    salary = symbols('salary')\n    \n    # Write the equation based on the problem statement\n    # (total_salary - 740) * (3/4) + 740 + (1/5)*total_salary = total_salary\n    equation = Eq((salary - 740) * (3/4) + 740 + (1/5)*salary, salary)\n    \n    # Solve the equation for salary\n    solution = solve(equation, salary)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    russell_current = symbols('russell_current') # Define the symbol for Russell's current age\n\n    # Equation representing the word problem\n    equation = Eq(russell_current + 32, 4 * (russell_current - 16))\n\n    # Solve the equation\n    solution = solve(equation, russell_current)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 40 / 100 * 120\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    for people in range(2, 100):\n        if (people // 2) + 6 == 19 or -((people // 2) - 6) == 19:\n            return people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    # We loop through possible values of A and B, since A is the thousands and units digit,\n    # while B is the tens digit. C will be derived from the equation involving A and B.\n    for A in range(1, 10):  # A can't be 0 because it's the thousands place.\n        for B in range(10):  # B can be 0 through 9\n            # Constructing Pip's number with the variables A and B\n            Pip_number = int(f\"{A}{B}{B}{A}\")\n            \n            # Bud reverses the units and tens digits of Pip's number\n            Bud_number = int(f\"{A}{A}{B}{B}\")\n            \n            # Check if the sum of Pip's number and Bud's number is 5510\n            if Pip_number + Bud_number == 5510:\n                return Pip_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of students in Class 6A\n    # Then the original number of students in Class 6B is (x * (9/4))\n    # After reshuffling,\n    # Class 6A has x - 3 + 18 students\n    # Class 6B has (x * (9/4)) + 3 - 18 students\n    # Set them equal to each other because their number of students are now equal.\n    x = symbols('x')\n    equation = Eq(x - 3 + 18, (x * (9/4)) + 3 - 18)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The total number of students in Class 6A at first is x\n    return solution[0]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make 1 cut to create 2 pieces, \n    # so each subsequent cut also takes 2 minutes.\n    # To make 5 pieces, we need 4 cuts in total.\n    cuts_needed = 5 - 1\n    \n    # Multiply the number of cuts needed by the time per cut.\n    time_to_cut = cuts_needed * 2\n    \n    return time_to_cut\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    total_shelves = 15\n    total_spelling_books = 72\n    spelling_books_per_shelf = 9\n    math_books_per_shelf = 4\n\n    # Number of shelves with spelling books\n    shelves_with_spelling_books = total_spelling_books // spelling_books_per_shelf\n\n    # Number of shelves with math books\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n\n    # Total number of math books\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n\n    return total_math_books\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Jeffrey needs 6 minutes to walk up 3 floors (from the 1st to the 4th), \n    # which means he needs 2 minutes for each floor.\n    time_per_floor = 6 / 3\n\n    # To walk up from the first floor to the tenth floor, he needs to walk up 9 floors.\n    # So we just multiply the time he needs per floor with the number of floors he needs to walk up.\n    total_time = time_per_floor * 9\n\n    return total_time\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    # Original amounts\n    original_chocolate = 40\n    original_biscuits = 100\n    # Available biscuits\n    available_biscuits = 75\n    # Calculate chocolate needed by maintaining the same ratio\n    melted_chocolate = (available_biscuits * original_chocolate) / original_biscuits\n    return melted_chocolate\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    num_days_in_week = 7\n    total_earnings_in_week = average_daily_earnings * num_days_in_week\n    return total_earnings_in_week\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n\n    return total_combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    # Define a variable n\n    n = symbols('n')\n\n    # Create the equation based on the problem statement\n    equation = Eq(32 / n, n / 2)\n\n    # Solve the equation for n\n    solutions = solve(equation, n)\n\n    # Since we need the numerical value of n, we filter out the numerical solution\n    ans = [s.evalf() for s in solutions if s.is_real and s > 0][0]\n    return ans\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # In the first game, the 8th student is opposite to the 16th student\n    # This means that the circle has 16 - 8 = 8 students in between\n    # So the total number of students is 8 (in between) * 2 = 16\n\n    # In the second game, the 8th student is opposite to the 22nd student\n    # Meaning the circle now has 22 - 8 = 14 students in between\n    # So the new total number of students is 14 (in between) * 2 = 28\n    \n    # The difference in the number of students is 28 (second game) - 16 (first game)\n    new_students = 28 - 16\n    \n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances in meters\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)\n\n    # Time spent on each segment of the race\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time spent on the race\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9 * 6) - (7 * 6)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n    total_ways = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n    return total_ways\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n\n    # Original ratio\n    equation1 = Eq(lollipops / gum_drops, 5/7)\n\n    # New ratio after adding 120 to both\n    equation2 = Eq((lollipops + 120) / (gum_drops + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lollipops, gum_drops))\n\n    # Calculate total pieces of candy now\n    total_candy = solutions[lollipops] + solutions[gum_drops] + 120 + 120\n\n    return total_candy\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n\n    # Count digits for 1-9\n    total_digits += 1 * 9  # 9 pages with 1 digit\n\n    # Count digits for 10-99\n    total_digits += 2 * (99 - 10 + 1)  # 90 pages with 2 digits\n\n    # Count digits for 100-268\n    total_digits += 3 * (268 - 100 + 1)  # remaining pages with 3 digits\n\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from fractions import gcd\n\n    length = 136  # Converted to cm for simplification\n    width = 80    # Converted to cm for simplification\n\n    # Find the greatest common divisor to determine the largest square size\n    square_side = gcd(length, width)\n    \n    # Calculate how many squares can be cut from the paper\n    num_squares = (length // square_side) * (width // square_side)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    for hundreds in [4, 5, 7]:\n        for tens in [4, 5, 7]:\n            for ones in [5, 7]:  # ones place must be odd\n                count += 1  # each combination of numbers forms a valid odd three-digit number\n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b, c = symbols('a b c')\n    \n    # Equations based on the problem statement\n    total_marbles = Eq(a + b + c, 168)\n    after_charlene_gives = Eq(b + 15, c - 15)\n    after_betsy_gives = Eq(a + 8, b - 8)\n    final_ratio = Eq(a / b / c, 2 / 5 / 7)\n    \n    # Solve the equations\n    solutions = solve((total_marbles, after_charlene_gives, after_betsy_gives, final_ratio), (a, b, c))\n\n    # Calculate the number of marbles Betsy had at first\n    betsy_initial = solutions[b] + 8\n    \n    return betsy_initial\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_by_5 = (201 - 1) // 5\n    count_by_7 = (201 - 1) // 7\n    count_by_5_and_7 = (201 - 1) // (5 * 7)\n\n    count = count_by_5 + count_by_7 - count_by_5_and_7\n    return count\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # Use the formula for the number of games in a round-robin tournament where each team plays each other twice.\n    # n(n-1) = 2 * total_matches\n    # Solve for n\n    # In this case, total_matches = 30, so n(n-1) = 60\n    total_matches = 30\n    for n in range(1, total_matches + 1):\n        if n * (n - 1) == total_matches * 2:\n            return n\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for number in range(1000, 10000): # Check for 4 digit numbers, as original value must be a multiple of 10.\n        if number - int(str(number)[:-1]) == 135: # Compare original value and value without last digit\n            return number\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    ans = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return ans\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    trips_when_full = students // boat_capacity\n    remaining_students_after_full_trips = students % boat_capacity\n\n    if remaining_students_after_full_trips > 0:\n        # If there are any students left after full trips, it takes two more trips (one to get there and one to return the boat)\n        trips = 2 * trips_when_full + 2\n    else:\n        # If no students are left after full trips, it takes only one more trip to return the boat\n        trips = 2 * trips_when_full - 1\n\n    return trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote d as the price of 1 durian, p as the price of 1 pineapple, and w as the price of 1 watermelon\n    d, p, w = symbols('d p w')\n\n    # Chris's purchase: 1*d + 2*p + 3*w = 440\n    equation1 = Eq(1*d + 2*p + 3*w, 440)\n    \n    # Dylan's purchase: 4*d + 6*p + 9*w = 1625\n    equation2 = Eq(4*d + 6*p + 9*w, 1625)\n    \n    # We need to solve these equations to find the values of d, p, and w\n    solutions = solve((equation1, equation2), (d, p, w))\n    \n    # Return the price of one durian\n    return solutions[d]\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    hundreds = 3\n    tens = 2\n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    ans = (100) / (1 + (1/99))\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbol for each person's age\n    Frank, Alex, Paul = symbols('Frank Alex Paul')\n    \n    # Equation 1: Frank is older than Alex who is older than Paul\n    # Difference between Frank and Alex is same as between Alex and Paul\n    # Therefore, Frank - Alex = Alex - Paul\n    \n    # Equation 2: Sum of their ages is 99\n    # Frank + Alex + Paul = 99\n    \n    # Set up the equations\n    equation1 = Eq(Frank - Alex, Alex - Paul)\n    equation2 = Eq(Frank + Alex + Paul, 99)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (Frank, Alex, Paul))\n\n    # Return Alex's age\n    return solutions[Alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all permutations of the digits 1, 4, 6, 9\n    perms = permutations('1469')\n    \n    # Initialize sum and count of permutations\n    sum_numbers = 0\n    count = 0\n    \n    # Calculate the sum of all 4-digit numbers formed by the permutations\n    for perm in perms:\n        number = int(''.join(perm))\n        sum_numbers += number\n        count += 1\n        \n    # Calculate the average by dividing the sum by the count\n    average = sum_numbers / count\n    \n    return average\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students involved in the streaming exercise\n    # According to the question:\n    # 0.80x students chose Grade A Math\n    # 0.35x students chose Grade B Math\n    # 0.10x students chose neither\n    # 75 students chose both Grade A and Grade B Math\n    # Using inclusion-exclusion principle:\n    # Total students = students chose Grade A + students chose Grade B - students chose both + students chose neither\n    # x = 0.80x + 0.35x - 75 + 0.10x\n    # Solve for x:\n\n    # Rearrange the equation to solve for x\n    # x - 0.80x - 0.35x - 0.10x = -75\n    # x (1 - 0.80 - 0.35 - 0.10) = -75\n    # x * 0.75 = 75\n    x = 75 / 0.75\n\n    return int(x)\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    initial_condition = Eq(boys, girls)\n    boys_left = boys - 60\n    girls_left = girls - 12\n    final_condition = Eq(girls_left, 2 * boys_left)\n\n    solutions = solve((initial_condition, final_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for tens in range(10):\n        for ones in range(10):\n            if tens != ones and tens + ones == 15:\n                ans = 900 + tens * 10 + ones\n                if ans % 2 == 0:\n                    return ans\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # in km/h\n    car_speed = 120  # in km/h\n    time_difference = 3  # van starts 3 hours earlier\n\n    # Distance covered by van before car starts\n    van_distance_before_car_starts = van_speed * time_difference\n\n    # The relative speed between the car and the van\n    relative_speed = car_speed - van_speed\n\n    # Time it takes for the car to catch up to the van\n    time_to_catch_up = van_distance_before_car_starts / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "from itertools import combinations\n\ndef solution():\n    # clothing items counts\n    hats_count = 4\n    shirts_count = 3\n    pants_count = 2\n    skirts_count = 1\n\n    # hats are optional, so she can choose 0 to 4 hats\n    hat_options = sum([len(list(combinations(range(hats_count), i))) for i in range(hats_count + 1)])\n    \n    # shirts, pants and skirts are not optional, so she must choose all of them\n    outfit_combinations = hat_options * shirts_count * pants_count * skirts_count\n    \n    return outfit_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # The repetend of the decimal 0.010101... is 01, which has a period of 2.\n    # Therefore, the product of 0.010101... and itself is a product of two decimals with period 2.\n\n    # To calculate the number of digits in one repetend of the product, we can calculate the LCM (Least Common Multiple)\n    # of the periods of the two decimals. Since they are the same (both are 2), the LCM of 2 and 2 is 2.\n    # Therefore, the product will have the same period as each of the individual decimals.\n    # Hence, the number of digits in one repetend of the product is 2.\n\n    return 2\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Printer A's rate in pages per minute\n    rate_A = 300 / 12\n    # Printer B's rate in pages per minute\n    rate_B = 300 / 10\n    \n    # Total rate of A and B combined\n    combined_rate = rate_A + rate_B\n    \n    # Total time in half an hour (30 minutes)\n    time_in_minutes = 30\n    \n    # Number of pages printed by both in half an hour\n    pages_printed = combined_rate * time_in_minutes\n    \n    return int(pages_printed)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\n\ndef solution():\n    # List out all possible numbers and find their number of factors\n    all_numbers = list(range(1, 14))\n    factors_count = [len([j for j in range(1, i+1) if i % j == 0]) for i in all_numbers]\n    \n    # Pairs of numbers where the numbers of factors are unique\n    unique_factor_pairs = [(x, y) for (x, y) in combinations(all_numbers, 2) if factors_count[x - 1] != factors_count[y - 1]]\n    \n    # Search for the valid combination that matches the conditions\n    for comb in combinations(all_numbers, 9):\n        possible_pairs = [(x, y) for (x, y) in combinations(comb, 2) if (x, y) in unique_factor_pairs or (y, x) in unique_factor_pairs]\n        if len(possible_pairs) >= 2:  # Two students know their number\n            for alice_num in comb:\n                if alice_num % 2 == 1:  # Alice knows her number is odd\n                    if alice_num - 2 not in comb and alice_num - 1 in comb:  # May's conditions\n                        # Calculate the product of the numbers not picked\n                        not_picked = [num for num in all_numbers if num not in comb]\n                        return eval('*'.join(map(str, not_picked)))\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if day is valid for the month\n            if (month == 2 and day > 28) or \\\n               (month in [4, 6, 9, 11] and day > 30):\n                continue\n\n            # Form the date string\n            date_str = f\"{day:02d}/{month:02d}/2019\"\n\n            # Count the number of '3's in the date string\n            count += date_str.count('3')\n\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # create symbols for the number of durian, chocolate, and strawberry puffs\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n\n    # equation representing the ratio\n    equation1 = Eq(durian/chocolate, 3/4)\n    equation2 = Eq(chocolate/strawberry, 4/2)\n    # equation representing the total earnings\n    equation3 = Eq(durian*5 + chocolate*3 + strawberry*4, 560)\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (durian, chocolate, strawberry))\n\n    # Calculate the money collected from the sale of durian puffs\n    durian_earnings = solutions[durian] * 5\n\n    return durian_earnings\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Given: a 7x5x14 cuboid painted yellow and cut into 490 1x1x1 cubes.\n    # Each small cube having three faces painted will be at a vertex of the cuboid.\n    # Thus, there will be 8 such cubes (vertices on a cuboid) with three painted faces.\n    \n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):  # tens digit must be from 1 to 9\n        for ones in range(10):  # ones digit must be from 0 to 9\n            original = tens * 10 + ones\n            swapped = ones * 10 + tens\n            if swapped == (original // 3) + 3:\n                return original\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_amount = 10000\n    interest_first_three_years = 1.191\n    interest_last_two_years = 1.166\n    total_amount = round(initial_amount * interest_first_three_years * interest_last_two_years, 2)\n    return total_amount\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    items = symbols('items')\n    apples = (2/3) * items\n    bananas = (1/9) * items\n    lemons = items - apples - bananas\n    \n    # Rena bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n    \n    # Solve for items\n    total_items = solve(equation, items)[0]\n    \n    # Calculate the number of lemons\n    lemons_count = total_items - (2/3) * total_items - (1/9) * total_items\n\n    return int(lemons_count)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roll, donut = symbols('roll donut')\n\n    equation1 = Eq(5 * roll + 6 * donut, 14.70)\n    equation2 = Eq(roll, 3 * donut)\n\n    solutions = solve((equation1, equation2), (roll, donut))\n\n    return solutions[roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    students_school1 = 24\n    students_school2 = 36\n    students_school3 = 42\n\n    # Find the greatest common divisor (GCD) of the three numbers\n    gcd_12 = gcd(students_school1, students_school2)\n    gcd_123 = gcd(gcd_12, students_school3)\n\n    return gcd_123\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables A, B, C, D, Zachary, Yvonne, Xavier, and Waylon as symbolic integers\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon', integer=True)\n    \n    # Constraints as per the question\n    constraints = [\n        A > C,            # A is higher than C\n        A < D,            # A is lower than D\n        B < Xavier,       # B is lower than Xavier\n        D == 5 * Yvonne,  # D is 5 times Yvonne\n        Zachary + 2 < Xavier,  # (Zachary + 2) is lower than Xavier\n        Zachary + 2 > Waylon,  # (Zachary + 2) is higher than Waylon\n        Eq(Zachary, Yvonne + Xavier),  # Zachary's level is the sum of Yvonne and Xavier\n        # The following constraints account for point (4):\n        Eq(Xavier - (Zachary + 2), (Zachary + 2) - Waylon),\n        # Levels must be between 1 and 18\n        A >= 1, A <= 18,\n        B >= 1, B <= 18,\n        C >= 1, C <= 18,\n        D >= 1, D <= 18,\n        Zachary >= 1, Zachary <= 18,\n        Yvonne >= 1, Yvonne <= 18,\n        Xavier >= 1, Xavier <= 18,\n        Waylon >= 1, Waylon <= 18\n    ]\n    \n    # Solve the system of equations\n    solutions = solve(constraints)\n\n    # Iterate over all potential solutions and return value of A when all conditions are satisfied\n    for sol in solutions:\n        if all([1 <= sol[key] <= 18 for key in [A, B, C, D, Zachary, Yvonne, Xavier, Waylon]]):\n            return sol[A]\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3*notebook + 4*pencil_case, 18)\n    equation2 = Eq(4*pencil_case + 5*eraser, 45)\n\n    solutions = solve((equation1, equation2), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 8]\n    all_permutations = list(permutations(digits))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    needed_loafs = 24\n    cups_needed = needed_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    total_digits = 0\n    for number in range(7, 41):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Group stage games\n    teams_in_group = 4\n    # In a round-robin tournament of 4 teams, each team plays with every other team once\n    # Number of matches in a round-robin tournament of n teams: n*(n-1)/2\n    group_games = (teams_in_group * (teams_in_group - 1) / 2) * 8  # 8 groups\n    \n    # Knockout stage games\n    # There are two games for each of the top 8 (quarterfinals), top 4 (semifinals), top 2 (finals)\n    # Additionally, there's 1 game for third place\n    knockout_games = 8 + 4 + 2 + 1\n    \n    # Total number of games\n    total_games = group_games + knockout_games\n\n    return int(total_games)\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Given sum of first 9 terms (S9)\n    S9 = 99\n    # Given sum of first 27 terms (S27)\n    S27 = 540\n    \n    # Formula to find the sum of an arithmetic sequence S = n/2 * (2a + (n - 1)d)\n    # where n is the number of terms, a is the first term, and d is the common difference\n    \n    # S9 = 9/2 * (2a + (9 - 1)d) --> 99 = 4.5 * (2a + 8d) --> Equation (1)\n    # S27 = 27/2 * (2a + (27 - 1)d) --> 540 = 13.5 * (2a + 26d) --> Equation (2)\n    \n    # To find the first term (a) and the common difference (d), we solve the two equations:\n    # 4.5(2a + 8d) = 99\n    # 13.5(2a + 26d) = 540\n    \n    # Divide both sides to get the terms with a and d\n    # 2a + 8d = 99 / 4.5\n    # 2a + 26d = 540 / 13.5\n    \n    # Calculate the coefficients\n    coeff1 = 99 / 4.5\n    coeff2 = 540 / 13.5\n    \n    # Calculate 2a + 8d = coeff1 and 2a + 26d = coeff2\n    # then solve the two equations for a and d\n    a = (coeff2 - (3 * coeff1)) / 18  # Subtract 3 times the first equation from the second equation to eliminate 'a'\n    d = (coeff1 - (2 * a)) / 8  # Substitute the value of 'a' in the first equation to find 'd'\n    \n    # Now we want the sum of the first 16 terms (S16)\n    # S16 = 16/2 * (2a + (16 - 1)d)\n    S16 = 8 * (2 * a + 15 * d)\n    \n    return S16\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    red_flash_rate = 4  # red light flashes 4 times a minute\n    green_flash_rate = 6  # green light flashes 6 times a minute\n    total_minutes = 60  # one hour\n\n    # Find the least common multiple (LCM) of the two flash rates\n    # LCM of red_flash_rate and green_flash_rate gives us how often they flash together per minute\n    from math import lcm\n    lcm_flashes_per_minute = lcm(red_flash_rate, green_flash_rate)\n\n    # Calculate how many times both lights flash together in a minute\n    flashes_together_per_minute = lcm_flashes_per_minute / red_flash_rate\n\n    # Calculate the total number of times they flash together in an hour\n    total_flashes_together = total_minutes * flashes_together_per_minute\n\n    return int(total_flashes_together)\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # Initialize the total count and current iteration\n    total_count = 0\n    current_number = 1\n    \n    # Continue until we reach the target number of 12's\n    while total_count + current_number <= 12:\n        # Add the number of times the current number will be written\n        total_count += current_number\n        # Go to the next number\n        current_number += 1\n        \n    # When we have more than 12 numbers when writing all the 12s, we find the difference\n    # This represents how many 12s we actually need to write\n    num_twelves_to_write = 12 - total_count\n    \n    # The sequence consists of numbers up to the current number repeated that many times\n    # Therefore, to find the median, we look for the middle number of the total sequence up to and including 12\n    # We calculate the actual position of the median in the sequence, considering that all numbers up to 11 are complete\n    complete_numbers_count = 11 * (11 + 1) // 2\n    median_position = complete_numbers_count + (num_twelves_to_write + 1) // 2\n    \n    # Now we check where the median position falls\n    # If it falls within the numbers up to 11, we compute which number holds the median position\n    if median_position <= complete_numbers_count:\n        # Find the number at median_position\n        running_count = 0\n        for i in range(1, 12):\n            # Count how many times the number is written\n            running_count += i\n            # If our median position lies in the range for this number, return it as the median\n            if running_count >= median_position:\n                return i\n    # If it falls within the range of 12s, the median is 12\n    else:\n        return 12\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let x be the number we are looking for\n    # According to the problem, we have 3*x + 1 = 22\n    # To find x, we simply rearrange the equation to solve for x\n    x = (22 - 1) / 3\n    return int(x)\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(0.4 * total_paintings)\n    landscapes_french = 25\n    french_paintings = 40\n    still_lifes_french = french_paintings - landscapes_french\n    still_lifes = total_paintings - landscapes\n    still_lifes_not_french = still_lifes - still_lifes_french\n\n    return still_lifes_not_french\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of syrup and water\n    max_volume_per_glass = total_volume // 9  # Find the greatest volume that can be poured into each glass\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    weight1 = 100\n    weight2 = 400\n    concentration1 = 0.50\n    concentration2 = 0.80\n\n    total_weight = weight1 + weight2\n    rice_weight = weight1 * concentration1 + weight2 * concentration2\n    concentration = rice_weight / total_weight\n\n    return concentration\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = 0\n    current_number = 0\n    for i in range(2017):\n        current_number = current_number * 10 + 2\n        total_sum += current_number\n    last_five_digits = total_sum % 100000  # Get the last five digits\n    return last_five_digits\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay = 12 * 15  # Total amount of hay for 12 horses for 15 days\n    days_for_20_horses = total_hay / 20  # Dividing the total hay among 20 horses\n    \n    return days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # Loop through all possible 4-digit numbers\n    for num in range(1000, 10000):\n        str_num = str(num)\n        # Move the first digit to the ones place to form the new number\n        new_num = int(str_num[1:] + str_num[0])\n        # Check the condition given in the problem\n        if new_num - num == 4707:\n            return num  # House number found\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Define the current ages of Oliver and Lin\n    oliver_age = 20\n    lin_age = 26\n    \n    # Define the variable for the number of years that need to pass for the condition to be met\n    years_later = symbols('years_later')\n    \n    # Equation representing the sum of their ages equal to 48 years later\n    age_sum_equation = Eq((oliver_age + years_later) + (lin_age + years_later), 48)\n    \n    # Solve the equation\n    solution = solve(age_sum_equation, years_later)\n    \n    # Return the number of years required for the sum of their ages to be 48\n    return solution[0]\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age = 8\n    mother_age = 4 * sandra_age\n\n    difference_2_years_ago = (mother_age - 2) - (sandra_age - 2)\n\n    return difference_2_years_ago\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    start_year = 1901\n    end_year = 2000\n\n    leap_years = 0\n    for year in range(start_year, end_year + 1):\n        if (year % 4 == 0):\n            leap_years += 1\n\n    regular_years = (end_year - start_year + 1) - leap_years\n    total_days = (regular_years * 365) + (leap_years * 366)\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    days = 15\n    total_money = 100\n    \n    for day in range(1, days + 1):\n        if day % 2 == 1:\n            total_money += 10\n        else:\n            total_money -= 8\n    \n    return total_money\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    total_numbers = 99\n    divisible_by_3 = total_numbers // 3\n    divisible_by_7 = total_numbers // 7\n    divisible_by_both = total_numbers // (3 * 7)\n\n    numbers_not_divisible_by_3_or_7 = total_numbers - (divisible_by_3 + divisible_by_7 - divisible_by_both)\n\n    return numbers_not_divisible_by_3_or_7\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    hours = 12\n    strikes = sum(range(1, hours + 1))\n    return strikes\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    for i in range(1, 1000):\n        num = 35 * i\n        if str(num).endswith('35') and sum(int(digit) for digit in str(num)) == 35:\n            return num\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    y = symbols('y')\n    total_money = 8 * y\n    money_spent_on_watch = 4 * y\n    money_spent_on_handbag = 20\n    money_per_child = y - 5\n\n    # Calculating the total remainder after spending on the watch and handbag\n    remainder = total_money - money_spent_on_watch - money_spent_on_handbag\n\n    # The remainder is split between two children\n    total_given_to_children = 2 * money_per_child\n\n    # Setting up the equation to find y\n    equation = Eq(remainder, total_given_to_children)\n\n    solution = solve(equation, y)\n    return solution[0]\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_pence = 40  # total worth of ten-pence coins in pence\n    number_of_coins = total_pence / 10  # number of ten-pence coins\n\n    total_weight = weight_per_coin * number_of_coins  # total weight of the coins\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let the number of buttons James has be x.\n    # Then the number of buttons Nina has will be 22 - x.\n    # After Nina gives James 4 buttons, James will have x + 4 buttons.\n    # Nina will have (22 - x) - 4 buttons, which is 18 - x.\n    # According to the problem, after the exchange, they have the same number of buttons.\n    # So we get the equation: x + 4 = 18 - x\n    # Solving for x:\n    x = (18 - 4) / 2\n    # Now we know x, we can find the original number of buttons for Nina, which is 22 - x.\n    nina_buttons_original = 22 - x\n    return nina_buttons_original\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n    \n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_marks = 23\n    correct_marks = 5\n    wrong_deduction = -2\n    total_questions = 6\n\n    # Let x be the number of correct answers, then the number of wrong answers is (total_questions - x)\n    for x in range(total_questions + 1):\n        if x * correct_marks + (total_questions - x) * wrong_deduction == total_marks:\n            return x\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    adults_to_children_ratio = 1 / 4\n    adults = total_people / (1 + adults_to_children_ratio)\n    return int(adults)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given values\n    initial_speed = 10  # in meters per second\n    angle_degree = 37  # angle in degrees\n    g = 9.81  # gravitational acceleration in m/s^2\n\n    # Convert angle to radians for calculation\n    angle_radian = math.radians(angle_degree)\n\n    # Calculate the height using conservation of energy\n    # Initial kinetic energy = Potential energy at the highest point\n    # (1/2) * m * v^2 = m * g * h\n    # Cancel mass 'm' from both sides of the equation and solve for 'h'\n    # h = (v^2) / (2 * g)\n    # Include the factor of sin(angle) because we're interested in height along the vertical axis\n    height = (initial_speed ** 2) * (math.sin(angle_radian) ** 2) / (2 * g)\n\n    # Distance 'd' along the ramp is the hypotenuse of the right triangle where 'height' is opposite to angle\n    # sin(angle) = opposite / hypotenuse\n    # hypotenuse = opposite / sin(angle)\n    # Hence, d = h / sin(angle)\n    distance = height / math.sin(angle_radian)\n\n    return height, distance\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    seat_number = 3  # Starting seat number\n    num_children = 9\n\n    last_child_seat = (seat_number + total_candies - 1) % num_children\n    return last_child_seat if last_child_seat != 0 else num_children\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, balls = symbols('racket balls')\n\n    equation1 = Eq(racket + 3*balls, 536)\n    equation2 = Eq(2*racket + 3*balls, 904)\n\n    solutions = solve((equation1, equation2), (racket, balls))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Total number of balls for 2 groups of 4 balls of the same color is 8 balls. \n    \n    # The worst-case scenario is she takes all balls of one color, which is not 8 (5 blue), \n    # and all balls of a second color, which is not 8 either (4 orange), \n    # and then she starts taking balls of the last color, needing 3 more to make 8. \n    \n    # Therefore, she needs to take all blue balls (5), all orange balls (4),\n    # and 3 yellow balls to guarantee 2 groups of 4 balls of the same color.\n    \n    num_balls_needed = 5 + 4 + 3\n    \n    return num_balls_needed\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    num_players = 64\n    players_in_match = 4\n\n    # In a knockout tournament with 4 players per match, 3 players are knocked out in each match.\n    # Thus, the number of matches required is one less than the number of players,\n    # as each match will only produce one winner and one player will remain at the end.\n    \n    # Total number of players (num_players - 1) divided by players knocked out per match (players_in_match - 1)\n    num_matches = (num_players - 1) // (players_in_match - 1)\n    \n    return num_matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for n in range(1000, 10000):\n        str_n = str(n)\n        new_n = int(str_n[1:] + str_n[0])\n        if new_n - n == 4707:\n            return n\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    number_of_flour_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / number_of_flour_bags\n\n    return flour_weight\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # Sum of an arithmetic sequence S(n) = n/2 * (2a + (n - 1)d)\n    # S(9) = 72 -> 9/2 * (2a + (9 - 1)d) = 72\n    # S(23) = 736 -> 23/2 * (2a + (23 - 1)d) = 736\n    # We have two equations:\n    # 9a + 36d = 144 (1)\n    # 23a + 506d = 1472 (2)\n    \n    # We solve the linear equations for a (first term) and d (difference)\n    from sympy import symbols, Eq, solve\n    a, d = symbols('a d')\n    \n    # Setting up the equations based on the sum formula\n    equation1 = Eq(9 * a + 36 * d, 144)\n    equation2 = Eq(23 * a + 506 * d, 1472)\n    \n    # Use sympy's solve function to solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Find the first term and common difference from the solutions\n    a_value = solutions[a]\n    d_value = solutions[d]\n    \n    # Calculate the sum of the first 16 terms using the values found\n    S16 = 16 / 2 * (2 * a_value + (16 - 1) * d_value)\n    \n    return S16\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Given exchange rate and costs in the question prompt\n    exchange_rate = 5 / 14  # This is an example exchange rate, the actual rate is not provided\n    cost_of_cd_in_pounds = 14\n    amount_spent_in_pounds = 14\n\n    # Calculate the amount in St Petersburg's currency which is '5 times' the amount spent.\n    amount_in_st_petersburg_currency = amount_spent_in_pounds * exchange_rate\n    \n    # Calculate the number of CDs Richard could buy in St Petersburg\n    number_of_cds = amount_in_st_petersburg_currency // cost_of_cd_in_pounds\n    \n    return int(number_of_cds)\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef solution():\n    for age in [28, 39, 52, 84]:\n        if (age - 3)**0.5 % 1 == 0 and is_prime(age + 1) and ((age + 12)**(1/3)) % 1 == 0:\n            return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # for the worst-case scenario, Bart may pick all 3 red chips, and all 4 yellow chips before getting 2 different colors\n    # if he gets a brown one in the next pick, he will have 2 different colors for sure\n    # hence, 3 (red) + 4 (yellow) + 1 (brown)\n    ans = 3 + 4 + 1\n    return ans\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # When Andrew is at level 5, Bernice is at level 3 (ratio A:B = 5:3)\n    ratio_A_B = 5 / 3\n    \n    # When Bernice reaches level 6, Cassandra is at level 10 (ratio B:C = 6:10)\n    ratio_B_C = 6 / 10\n    \n    # To find ratio A:C, multiply both ratios (ratio A:B and ratio B:C)\n    ratio_A_C = ratio_A_B * ratio_B_C\n    \n    # Now we know that when Cassandra is at level 19, we can find Andrew's level using ratio A:C\n    level_Cassandra = 19\n    level_Andrew = ratio_A_C * level_Cassandra\n    \n    return int(level_Andrew)\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    # Define the repeating pattern\n    pattern = \"2345\"\n    \n    # Calculate the number of full patterns within 43 digits\n    full_patterns_count = 43 // len(pattern)\n    \n    # Calculate the remaining number of digits after the full patterns\n    remaining_digits_count = 43 % len(pattern)\n    \n    # Compute the sum of digits in one full pattern\n    sum_full_pattern = sum(int(digit) for digit in pattern)\n    \n    # Compute the sum of the remaining digits\n    sum_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits_count))\n    \n    # Total sum is the sum of all full patterns plus the sum of the remaining digits\n    total_sum = full_patterns_count * sum_full_pattern + sum_remaining_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    num_quizzes = 4\n    total_time_minutes = time_per_quiz * num_quizzes\n    total_time_hours = total_time_minutes / 60  # because there are 60 minutes in 1 hour\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    km_to_cm = 4.7 * 100000\n    return km_to_cm\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n    years = 0\n    \n    while sum(grandsons_ages) != grandpa_age:\n        grandpa_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        years += 1\n    \n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_cost, table_cost = symbols('chair_cost table_cost')\n\n    equation1 = Eq(table_cost, 3 * chair_cost)\n    equation2 = Eq(4 * table_cost + 9 * chair_cost, 504)\n\n    solutions = solve((equation1, equation2), (chair_cost, table_cost))\n\n    return solutions[chair_cost]\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n    \n    # Given 2⋁(x⋁4)=59, we need to find x.\n    # Let's denote y = x⋁4\n    # Thus, 2⋁y = 2 * y + 2 + y = 59\n    # 3y + 2 = 59\n    # 3y = 57\n    # y = 19\n    \n    y = 19\n    # Now we solve for x using the new operation definition with y and 4\n    # x⋁4 = x * 4 + x + 4 = y\n    # 5x + 4 = 19\n    # 5x = 15\n    # x = 3\n    \n    x = (y - 4) // 5\n    \n    return x\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    # Initialize the number of ways to 0\n    ways = 0 \n    # Loop through possible numbers of 5p's from 0 to the total amount divided by 5\n    for num_5p in range(0, 41, 5):\n        # Check if the remainder can be filled with 10p's\n        if (40 - num_5p) % 10 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -4  # Since the terms are decreasing\n\n    # To find the last term, we use the arithmetic series rule: Tn = a + (n - 1)d\n    # Solving for n when the term Tn is just less than 0\n    # 0 = 50 + (n - 1)(-4)\n    # (n - 1)(-4) = -50\n    # n - 1 = 50 / 4\n    # n = (50 / 4) + 1\n\n    num_terms = (50 // abs(difference)) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    # Start from the smallest 3-digit number\n    for number in range(100, 1000):\n        # Split the number into its digits\n        digits = [int(digit) for digit in str(number)]\n\n        # Compute the product of the digits\n        product = 1\n        for d in digits:\n            product *= d\n\n        # Check if the product is a 3-digit number\n        if 100 <= product <= 999:\n            return number\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_shafur_samuel_drive_together = 40 / 60  # hours\n\n    # Distance covered by Shafur and Samuel in the first 40 minutes\n    distance_shafur = 54 * time_shafur_samuel_drive_together  # km\n    distance_samuel = 66 * time_shafur_samuel_drive_together  # km\n\n    # Since they arrive at the same time and Samuel has to cover the extra distance he covered and turned back,\n    # the time it takes Shafur to cover the entire distance will be equal to the time it takes Samuel to cover the\n    # extra distance (back and forth) plus the entire distance.\n\n    # Distance traveled back and forth by Samuel\n    distance_back_forth = 2 * distance_samuel\n\n    # Let t be the time it took Shafur to travel from Town X to Town Y, and t+40/60 is the time it took Samuel after turning back.\n    # So using the relationship distance = speed * time, we have two equations:\n    # distance_shafur = 54t - 54 * 40/60\n    # distance_samuel = 66t - 66 * 40/60\n    \n    # Since Shafur and Samuel reach Town Y at the same time, the distances they cover are exactly the same.\n    # Therefore, we have one equation:\n    # 54t = 66(t - 40/60) + distance_back_forth\n\n    # We can solve for t as follows:\n    t = distance_back_forth / (66 - 54)\n\n    # Now we can find the distance from Town X to Town Y by using the time Shafur took to cover that distance.\n    distance_x_to_y = 54 * t\n\n    return distance_x_to_y + distance_shafur  # add the distance covered in the first 40 minutes\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    total_flowers = 68\n    flowers_per_vase = 9\n    vases_needed = (total_flowers + flowers_per_vase - 1) // flowers_per_vase\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    \n    return difference\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # First expression is 7 divided by -3.33 (which is -3 and 1/3) divided by cube root of -0.027\n    expr1 = (7 / (-10/3)) / (-0.027)**(1/3)\n    \n    # Second expression is 2 cubed divided by 4 squared divided by 0.125 times (1.8 minus 0.2 times 7)\n    expr2 = (2**3 / 4**2) / (0.125 * (1.8 - (0.2 * 7)))\n    \n    # Third expression is 0.1 divided by 0.142857 (which is 1/7)\n    expr3 = 0.1 / (1/7)  # or just 0.1 * 7\n    \n    # Combining all expressions together\n    ans = expr1 + expr2 - (expr3 + (2 * 0.3))\n    \n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first = 39 if 38 % 3 != 0 else 38\n    last = 81 - (81 % 3)\n    count = (last - first) // 3 + 1\n    return count\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import gcd\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    smallest_multiple = lcm(12, 15)\n\n    return smallest_multiple\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    total_pyramid_sum = sum(range(3, 11)) + sum(range(3, 10))\n    return total_pyramid_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Pip has £50 more than Bud.\n    equation1 = Eq(pip, bud + 50)\n\n    # The ratio of Pip's leftover pocket money to that of Bud is 6:5.\n    # pip_leftover / bud_leftover = 6 / 5\n    # pip_leftover = 6/5 * bud_leftover\n    equation2 = Eq((pip - 0.8*pip), (6/5)*(bud - 3/4*bud))\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_after_feb = 78\n    sold_in_feb = 13 + remaining_after_feb // 2\n    remaining_after_jan = remaining_after_feb + sold_in_feb\n    initial_phones = (remaining_after_jan - 22) * 2\n\n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths_of_number = 18\n    base_number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (base_number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_players = 5\n    games_played = num_players - 1\n    \n    return games_played\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    # Let the number of pencils be x\n    # Then the number of pens is x + 50\n    # Total number of pens and pencils is x + (x + 50) = 438\n    # Combine like terms: 2x + 50 = 438\n    # Subtract 50 from both sides: 2x = 388\n    # Divide both sides by 2: x = 194\n\n    pencils = (total_items - more_pens) / 2\n\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Calculate the total spent from January to April\n    jan_to_apr = 500 * 4\n    # Calculate the total spent from May to July\n    may_to_jul = 300 * 3\n    # August to September is given as a total (400), no multiplication needed\n    aug_to_sep = 400\n    # Calculate the total spent from October to December\n    oct_to_dec = 300 * 3\n    \n    # Calculate the total spent for the year\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    \n    # Calculate the average spent per month\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n\n    total_apples = (boxes * apples_per_box) + apples_from_bud\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_needed = 70 * 4\n    short_of = 15\n\n    money_mrs_koh_had = total_needed - short_of\n\n    return money_mrs_koh_had\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            break\n    return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1\n    return num_games\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # After the transactions\n    final_ratio = Eq(anna / betsy, 2 / 5)\n    final_ratio_2 = Eq(betsy / charlene, 5 / 7)\n    \n    # Total number of marbles after transactions\n    total_marbles_eq = Eq(anna + betsy + charlene, 168)\n    \n    # Transaction equations\n    transaction_1_eq = Eq(charlene - 15, betsy + 15)\n    transaction_2_eq = Eq(betsy + 7, anna - 8)\n    \n    # Solve the system of equations\n    solutions = solve((final_ratio, final_ratio_2, total_marbles_eq, transaction_1_eq, transaction_2_eq), (anna, betsy, charlene))\n\n    # Number of marbles Betsy had at first before transactions\n    betsy_initial = solutions[betsy] - 15 + 8\n\n    return betsy_initial\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # If the book is on the 8th shelf from the front and the 10th from the back,\n    # then there are 7 shelves before it and 9 shelves after it.\n    # The total number of shelves is the sum of the shelves before the book,\n    # the shelf with the book, and the shelves after the book.\n    total_shelves = 7 + 1 + 9\n\n    return total_shelves\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n    \n    # Prime factorization of 2016\n    factors = factorint(2016)\n    \n    # Create a list of prime factors with the correct multiplicity\n    prime_factors = []\n    for prime, multiplicity in factors.items():\n        prime_factors.extend([prime] * multiplicity)\n    \n    # Find possible groupings of the prime factors into four factors\n    ages = []\n    def find_ages(mult, start):\n        if len(ages) == 3:\n            ages.append(mult)\n            if sorted(ages) not in solutions and all(age < 10 for age in ages):\n                solutions.append(sorted(ages[:]))\n            ages.pop()\n            return\n        for i in range(start, len(prime_factors)):\n            ages.append(prime_factors[i])\n            find_ages(mult // prime_factors[i], i + 1)\n            ages.pop()\n    \n    solutions = []\n    find_ages(2016, 0)\n    \n    # Return the sum of ages from the first (and only) solution found\n    return sum(solutions[0])\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    rows = 7 + 4 - 1  # Since Chris is in both 7th from the front and 4th from the back, overlap counts once.\n    columns = 3 + 7 - 1  # Similarly, 3rd from the left and 7th from the right, overlap counts once.\n    \n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Four years ago, combined age of 2 dogs was 10 years\n    combined_age_four_years_ago = 10\n    \n    # Since four years have passed, we need to add 4 years for each dog\n    combined_age_now = combined_age_four_years_ago + 4 * 2\n\n    # We want to find the combined age in 2 years, so we add 2 years for each dog\n    combined_age_in_two_years = combined_age_now + 2 * 2\n\n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * 0.8 + 0.8\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_pence = symbols('ten_pence')\n    twenty_pence = 2 * ten_pence\n    five_pence = ten_pence / 2\n\n    total_amount_pence = 1575  # converting pounds to pence for simplicity\n    equation = Eq(5 * five_pence + 10 * ten_pence + 20 * twenty_pence, total_amount_pence)\n\n    ten_pence_solution = solve(equation, ten_pence)[0]\n    twenty_pence_solution = 2 * ten_pence_solution\n\n    return twenty_pence_solution\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return int(common_difference)\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy has as many sisters as brothers: (girls = boys - 1)\n    # Each girl has half as many sisters as brothers: (girls - 1 = 1/2 * (boys))\n\n    equation1 = Eq(girls, boys - 1)\n    equation2 = Eq(girls - 1, boys / 2)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_portion = 1 - (3/5)\n    remaining_weight = 60  # grams\n\n    original_weight = remaining_weight / remaining_portion\n\n    return original_weight\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2022, 5, 15)  # Assuming the year 2022, as no year was given\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    \n    while base_10_number > 0:\n        base_6_number = str(base_10_number % 6) + base_6_number\n        base_10_number //= 6\n\n    return base_6_number\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # Find the minimum number of apples for the kid who gets the most by trial and error\n    # Start assuming the maximum apples received by one child is 23 (since all children need at least one apple)\n    # and decrement this number systematically, checking each time if the remaining apples can be\n    # distributed among the rest of the children without any two receiving the same amount\n    remaining_apples = 27\n    for most_apples in range(23, 0, -1):  # Start from 23 and go downwards\n        temp = remaining_apples - most_apples  # Subtract the current guess from the total number of apples\n        possible_distribution = set()\n        for i in range(4, 0, -1):  # We now need to distribute temp among 4 children\n            for apple_count in range(1, temp):\n                if apple_count not in possible_distribution:  # Ensure unique counts as per the problem requirement\n                    possible_distribution.add(apple_count)\n                    temp -= apple_count\n                    break\n        if len(possible_distribution) == 4 and temp == 0:  # If the distribution was successful\n            return most_apples  # This is the minimum the child with the most can get\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Since Andy drove for 90 minutes, divide by 60 to get hours\n    # First 30 minutes at speed x: distance = x * 0.5 hours\n    # Second 30 minutes at speed (x-20): distance = (x-20) * 0.5 hours\n    # Last 30 minutes at speed (x+10): distance = (x+10) * 0.5 hours\n    # Total distance: x * 0.5 + (x-20) * 0.5 + (x+10) * 0.5 = 70 miles\n    \n    # Set up the equation\n    equation = Eq(x * 0.5 + (x - 20) * 0.5 + (x + 10) * 0.5, 70)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 0.10\n    total_cost = total_cost_per_person * number_of_people\n    total_tip = total_cost * tip_percentage\n    total_payment = total_cost + total_tip\n    note_value = 50\n    change_received = note_value - total_payment\n    \n    return change_received\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_in_minute = 60\n    return seconds_in_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    daily_climb = 4\n    nightly_slip = 2\n    distance_climbed = 0\n    day = 0\n\n    while distance_climbed < total_distance:\n        day += 1\n        distance_climbed += daily_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= nightly_slip\n\n    return day\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # To win, Jason needs to ensure that he leaves Belinda with a number of marbles that is\n    # a multiple of 4 after his last turn (1, 2 or 3 marbles can be taken to force a win).\n    # This is because no matter how many marbles Belinda takes (1, 2 or 3), Jason can take \n    # the remaining marbles to make the total taken in that round 4.\n    # Starting with 26 marbles, Jason must take 2 marbles on his first turn to leave 24 marbles.\n    # Effectively, Jason must control the game so that Belinda is always faced with a number of \n    # marbles that is a multiple of 4 after Jason's turn.\n\n    # If the total number of marbles left is a multiple of 4 at Jason's turn, he will be unable to make\n    # a move that leaves a multiple of 4 for Belinda's turn. Hence, Jason must make the first move\n    # so that the number of marbles left is not a multiple of 4. Then Jason can always take a number\n    # of marbles to maintain this situation until Belinda is forced to take the last marble.\n\n    # This strategy means that Jason must take 2 marbles on his first turn.\n    first_turn_take = 2\n    return first_turn_take\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    sum_of_series = lambda n: n * (5 + 5 * n) // 2  # Sum of arithmetic series formula\n    n = 1\n    while True:\n        if sum_of_series(n) % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6 / 7) * 42\n    return ans\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    nums = range(1, 25)\n    ways = [comb for comb in combinations(nums, 7) if sum(comb) == 25]\n    return ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # The 90% drinking time is not related to the calculation needed.\n    # The probability of choosing any one bar is 1/3 (since there are three bars).\n    # If the alcoholic is not in the first two bars, he must be in the third bar.\n    # Thus, the probability is 100% or 1, since it's the only remaining possibility.\n    probability = 1\n    return probability\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths = 18\n    whole_number = (three_sevenths * 7) / 3\n    five_sixths = (whole_number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the number of cows the pasture can sustain for 6 weeks\n    x = symbols('x')\n\n    # Since the pasture grows at a constant rate every week,\n    # we can say that the amount of cows times the weeks (c * w) is a constant value\n    equation1 = Eq(120 * 12, x * 6)\n    equation2 = Eq(150 * 8, x * 6)\n\n    # Solving the system of equations for x\n    ans = solve((equation1, equation2), (x))\n\n    return ans[x]\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime(\"%Y-%m-%d\")\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    # Let's denote v as the number of volunteers and t as the number of trees\n    for v in range(1, 1000):  # assuming the number of volunteers is less than 1000 for practical reasons\n        t = 4 * v + 5  # If each plants 4 trees, 5 will be left\n        if (t - 5) % 7 == 0 and (t - 5) // 7 == v - 1:\n            # This means if each plants 7 trees, one volunteer will have nothing to plant\n            return v, t\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    boys_more = 55\n    total_students = 0\n    \n    # We start by considering a small square and keep expanding it\n    # until the difference matches the 55 extra boys\n    side_length = 1  # Current side length of the square\n    while True:\n        if side_length % 2 == 0:\n            girls = side_length * side_length\n            boys = girls + boys_more  # 55 more boys than girls\n        else:\n            boys = side_length * side_length\n            girls = boys - boys_more\n        \n        total_students = girls + boys\n        \n        # Check if the current square satisfies the condition\n        if boys - girls == boys_more:\n            break\n        \n        side_length += 1  # Increase the side length for the next square\n\n    return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Equation representing the total number of stickers in bags A and B\n    equation1 = Eq(A + B, 270)\n\n    # Equation representing the new ratio after moving 56 stickers from bag A to B\n    equation2 = Eq((B + 56) / (A - 56), 3/2)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Since A and B are positive, choose the correct solution\n    A_solutions = [s[A] for s in solutions if s[A] > 0 and s[B] > 0]\n    ans = A_solutions[0]  # Get the first (and only in this case) solution\n\n    return ans\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # since the ratio is given as a proportion,\n    # we can setup the equation as 10/x = 14/21\n    # cross multiplying gives 10 * 21 = 14 * x\n    # solving for x gives x = (10 * 21) / 14\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    first_term = 5\n    common_difference = 6\n    n_terms = 7  # 1 for 5, 2 for 11, ..., 7 for 41\n\n    next_term = first_term + common_difference * n_terms\n\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    total_children = 74\n    bars_per_packet = 8\n    \n    packets_needed = (total_children + bars_per_packet - 1) // bars_per_packet\n    \n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 5 / 100 * 180\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        factors_sum = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                factors_sum += i\n                factors_sum += n // i\n        return factors_sum\n\n    n = 2\n    while True:\n        if sum_of_factors(n) == n:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    summation = 0\n    for i in range(15):\n        summation += (30 - i * 2) * (-1) ** i\n    return summation\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 25\n    common_difference = 28 - 25\n    n = 10\n\n    first_term = nth_term - (n - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    num_boxes = total_cakes // cakes_per_box\n    if total_cakes % cakes_per_box != 0:\n        num_boxes += 1\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    friends = 6\n\n    sweets_to_give = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_to_give // friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lovelle, makayla = symbols('lovelle makayla')\n    \n    equation1 = Eq(lovelle + makayla, 3998)\n    equation2 = Eq(lovelle - 462, makayla - (2/5)*makayla)\n    \n    solutions = solve((equation1, equation2), (lovelle, makayla))\n    \n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the variable for the total amount of money Irene had initially.\n    total_money = symbols('total_money')\n\n    # According to the problem, we create an equation\n    equation = Eq((1/4) * total_money + (2/7) * total_money, 225)\n\n    # Solve the equation for the total amount of money.\n    solution = solve(equation, total_money)\n\n    # Return the solution as final answer.\n    return solution[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # We would want to split the number 30 into as many parts as possible \n    # where each part would be a different positive integer. \n    # This can be done by starting from 1 and choosing each consecutive integer \n    # until we no longer can without exceeding the target sum.\n    \n    n, remaining_sum, ans = 1, 30, 0\n    while remaining_sum > 0:\n        # Keep adding the next integer to the combination\n        ans += 1\n        remaining_sum -= n\n        n += 1\n    return ans\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # If we select 9 cards of each color, we can still end up with 9 cards of each color without 10 of the same color.\n    # 9*3 + 1 guarantees that we will have at least 10 of one color due to the Pigeonhole Principle.\n    # The colors with less than 10 cards are 4, 8, and 12. So we take 9 from each and add 1 to guarantee the 10th card.\n    ans = (9 * 3) + 1\n    return ans\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap_distance = 1.1\n    # Subtracting one because there's no gap after the last daffodil\n    total_gaps = num_daffodils - 1\n    row_length = total_gaps * gap_distance \n    return row_length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    # Since the boxes are identical, we only need to consider the order of the number of stickers.\n    # We will use three loops to enumerate possibilities, making sure that each box has a different number of stickers.\n    for x1 in range(1, 9):  # First box\n        for x2 in range(x1 + 1, 9):  # Second box should have more stickers than the first\n            x3 = 9 - x1 - x2  # The third box will have the remaining stickers\n            if x3 > x2:  # Ensure the third box has more stickers than the second\n                count += 1  # Valid distribution, so we increase the count\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    ratio = 1.5  # Alex drinks 50% more than Jane.\n\n    # Let's assume Jane drinks 'x' ml. Then Alex drinks '1.5x' ml.\n    # The sum of what they drink is the total amount of juice in the bottle.\n    # Therefore, x + 1.5x = 150\n    # Solving for 'x' gives us Jane's share.\n    jane_share = total_juice / (1 + ratio)\n\n    # Alex's share is 50% more than Jane's share.\n    alex_share = ratio * jane_share\n\n    return alex_share\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48  # meters\n    walking_speed = 8  # meters per minute\n\n    minutes_taken = distance // walking_speed\n\n    return minutes_taken\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_students = 5 + 7\n    girls = 5\n    boys = 7\n    \n    # Total ways to choose 4 students without any restriction\n    total_ways = comb(total_students, 4)\n    \n    # Ways to choose 4 girls (no boys)\n    all_girls_ways = comb(girls, 4)\n    \n    # Subtract the case where the group contains only girls to ensure at least 1 boy\n    ways_with_at_least_one_boy = total_ways - all_girls_ways\n    \n    return ways_with_at_least_one_boy\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    # Given that 1/4 of 16 equals to 1/2 of x\n    # Which can be written as (1/4) * 16 = (1/2) * x\n    # Solving for x gives us x = (1/4 * 16) / (1/2)\n    return (1/4 * 16) / (1/2)\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_items = 18 + 30 + 18  # total number of pears, strawberries, and chocolates\n    friends = 6\n    fruits_per_friend = total_items // friends  # dividing equally among friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let's denote the total money Bud had at first as x.\n    # She spent 1/4 of it on a book, so she was left with 3/4 of the money.\n    # Then she spent 2/5 of the remaining money on a bag.\n    # According to the problem, the bag costs £60.\n    # So, the equation is: 2/5 * (3/4 * x) = 60\n    # Solving for x gives us the total money she had initially.\n\n    # The amount spent on the bag:\n    amount_bag = 60\n\n    # We reverse-calculate the remaining money before buying the bag,\n    # which is the whole after spending on the book, so we divide by 2/5.\n    remaining_money_after_book = amount_bag / (2/5)\n\n    # We reverse-calculate the initial money before buying the book by dividing by 3/4.\n    initial_money = remaining_money_after_book / (3/4)\n\n    return initial_money\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits_per_page = 1\n    used_digits = 0\n    page_count = 0\n\n    while used_digits < 157:\n        page_count += 1\n        if page_count >= 10 ** digits_per_page:\n            digits_per_page += 1\n        used_digits += digits_per_page\n    \n    return page_count\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 241, 2):  # Iterate over odd numbers between 200 and 241\n        if num % 3 == 0 and num % 7 == 0:  # Check if divisible by both 3 and 7\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = ((70 / 7 - 7) * 13)\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total distance between the first and the last peach tree\n    total_distance = (41 - 1) * 3\n    # Number of lamp posts is one more than the number of intervals\n    num_lamp_posts = (total_distance // 8) + 1\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            price_str = f\"{i}679{j}\"\n            price = int(price_str)\n            if price % 72 == 0:\n                return price // 72\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, candies = symbols('a b candies')\n\n    # if each in A gets 4 candies, 20 more needed -> 4*a = candies - 20\n    equation1 = Eq(4 * a, candies - 20)\n    # if each in B gets 6 candies, 16 left -> 6*b = candies - 16\n    equation2 = Eq(6 * b, candies - 16)\n    # A has twice the students in B -> a = 2*b\n    equation3 = Eq(a, 2 * b)\n\n    solutions = solve((equation1, equation2, equation3), (a, b, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # in meters\n    speed = 40          # in meters per second\n\n    time_to_pass = train_length / speed  # time = distance / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    dvd_cost = total_money / 3\n    remaining = total_money - dvd_cost\n    book_cost = remaining * 0.25\n    left = remaining - book_cost\n    return left\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    \n    for year in range(years):\n        # Rabbits multiply by 3 each year\n        initial_rabbits *= 3\n        # Wolves eat half the rabbits\n        initial_rabbits /= 2\n    \n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    time_for_first_mile = 1 / 60  # Time = Distance / Speed\n    time_for_second_mile = 1 / 30\n\n    total_time = time_for_first_mile + time_for_second_mile\n    total_distance = 2  # 1 mile + 1 mile\n\n    average_speed = total_distance / total_time  # Average Speed = Total Distance / Total Time\n\n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    wash_price = 1.40\n    target_amount = 12\n    num_washes = target_amount / wash_price\n    if num_washes == int(num_washes):\n        num_washes += 1\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    initial_candies = 2\n    days_passed = 3  # Since we start counting from the day after the first day\n    candies_eaten = initial_candies * (2 ** days_passed)\n    return candies_eaten\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    eq1 = Eq(290 % a, a)\n    eq2 = Eq(235 % a, a + 2)\n    eq3 = Eq(200 % a, a + 5)\n\n    result = solve((eq1, eq2, eq3), a)\n\n    # Since we are looking for a natural number greater than 1, filter out 1\n    natural_number = [num for num in result if num > 1]\n\n    return natural_number[0]\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    result = 901 - 582\n    return result\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6\n\n    total_weekly_earnings = average_daily_earnings * number_of_working_days\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    # since one angle is a right angle, it is 90 degrees\n    right_angle = 90\n    # let the smaller angle be x\n    # the larger angle will be 2x\n    # the sum of angles in a triangle is 180 degrees\n    # x + 2x + 90 = 180\n    # 3x = 180 - 90\n    # 3x = 90\n    # x = 30\n    smaller_angle = 30\n    # therefore the larger angle is 2x, which is 60 degrees\n    larger_angle = 2 * smaller_angle\n\n    return larger_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1234567890', 3):\n        if perm[0] != '0':\n            i, s, p = int(perm[0]), int(perm[1]), int(perm[2])\n            if 4 * (i * 10 + s) == p * 10 + i:\n                return p * 10 + i\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_sum = 765\n    num_members = 9\n\n    # The sum of an arithmetic sequence is given by: n/2 * (a1 + an)\n    # For nine consecutive numbers (n = 9) with their sum being 765,\n    # we can solve for the first term (a1) and the last term (an) knowing they are equally spaced.\n\n    # Since they are consecutive numbers, the difference (d) is 1\n    # Applying the formula for sum of arithmetic sequence: sum = n/2 * (2*a1 + (n - 1)*d),\n    # we get 765 = 9/2 * (2*a1 + 8) => 765*2/9 = 2*a1 + 8 => a1 = (765*2/9 - 8) / 2\n\n    first_age = (total_sum * 2 // num_members - (num_members - 1)) // 2\n\n    # The member sitting in the middle will be the fifth person\n    # Since the ages are consecutive, we can just add 4 to the first age (a1 + 4)\n    middle_age = first_age + (num_members // 2)\n\n    return middle_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    necklace, earring = symbols('necklace earring')\n\n    # Define equations based on given problem\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Calculate the total cost for 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_six_days = 3 * 6\n    total_sunshine_sunday = 10\n    total_sunshine_week = total_sunshine_six_days + total_sunshine_sunday\n    average_sunshine_week = total_sunshine_week / 7\n\n    return average_sunshine_week\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = walking_speed * 2  # m/min\n    walking_time_to_school = 24  # min\n\n    # Calculate the total distance to school\n    total_distance = walking_speed * walking_time_to_school\n\n    # Distance covered by walking half the journey\n    half_distance = total_distance / 2\n\n    # Time taken to walk half the distance\n    walking_half_time = half_distance / walking_speed\n\n    # Time taken to run the other half of the distance\n    running_half_time = half_distance / running_speed\n\n    # Total time taken for half the journey walking and half running\n    total_time = walking_half_time + running_half_time\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_trees = 79\n    total_distance = 320\n    interval_distance = total_distance / (total_trees + 1)\n\n    return interval_distance\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.5\n    girls_saw_movie = girls * 0.6\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n    \n    # 1/3 of savings given to mother\n    mother_part = savings / 3\n    \n    # Cost of dresses and earrings\n    expenses = 177 + 129\n    \n    # Amount left is 1/2 of what she gave to mother\n    amount_left = mother_part / 2\n    \n    # Equation representing the situation\n    # savings = amount given to mother + expenses + amount left\n    equation = Eq(savings, mother_part + expenses + amount_left)\n    \n    # Solve for savings\n    solution = solve(equation, savings)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    whole_number = 1\n    fraction = 3 / 100\n    ans = whole_number + fraction\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    results = []\n    for N in range(1, 2018):\n        if (2018 - 11) % N == 0:\n            results.append(N)\n    ans = sum(results)\n    return ans\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker = 6\n    total_skirts = 0\n\n    for day in range(1, 10):\n        workers = day\n        total_skirts += skirts_per_worker * workers\n        \n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    # Let's use x for chickens and y for cows\n    # We know that there are 8 animals in total and 26 legs\n    # So we have two equations:\n    # x + y = 8 (equation 1, represents the total number of animals)\n    # 2x + 4y = 26 (equation 2, represents the total number of legs)\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 8)\n    equation2 = Eq(2*x + 4*y, 26)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    return 77.5 * 0.52 + 5.2 * 2.25\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # This is a classic problem of partitions of an integer\n    # Since the baskets are identical, we are looking for the number of partitions of 6\n    # But we should also count the cases where one or two baskets are empty\n    # Partitions of 6 (no basket is empty): (1, 1, 4), (1, 2, 3)\n    # With one basket empty: (0, 1, 5), (0, 2, 4), (0, 3, 3)\n    # With two baskets empty: (0, 0, 6)\n    # Since the baskets are identical, we don't count permutations of the partitions\n    # We just count the number of unique partition sets\n    # Thus,\n    # (1, 1, 4) and (2, 2, 2) are considered the same because they both represent the partition {1, 1, 4}.\n    # Therefore, the distinct partitions are (1, 1, 4), (1, 2, 3), (0, 1, 5), (0, 2, 4), (0, 3, 3), and (0, 0, 6)\n    count = 6  # There are 6 possible ways\n    return count\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    n = 2023\n    digits = 0\n    num = 1\n\n    while True:\n        num_digits = len(str(num))\n        if digits + num_digits < n:\n            digits += num_digits\n            num += 1\n        else:\n            break\n\n    return int(str(num)[n - digits - 1])\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    # We know that each student gets at least 5 sweets, so we can start by determining\n    # the largest possible class size where each student would get 5 sweets\n    max_class_size = total_sweets // min_sweets_per_student\n\n    # We can only have a whole number of students\n    class_size = total_sweets // max_class_size\n\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # Equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    income = 150000\n    first_50k_tax_rate = 0.08\n    tax_paid = 15000\n    \n    # Tax paid on the first $50,000\n    first_50k_tax = 50000 * first_50k_tax_rate\n    \n    # Remaining tax paid\n    remaining_tax_paid = tax_paid - first_50k_tax\n    \n    # Income above $50,000 that is taxed at the higher rate\n    remaining_income = income - 50000\n    \n    # Higher tax rate\n    higher_tax_rate = remaining_tax_paid / remaining_income\n    \n    # Calculate T\n    T = (higher_tax_rate - first_50k_tax_rate) * 100\n\n    return T\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    for corrects in range(25):\n        incorrects = 24 - corrects\n        score = corrects * 4 - incorrects * 2\n        if score == 66:\n            return corrects\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    Rachel, Alice = symbols('Rachel Alice')\n    \n    # If Rachel gives Alice 10 pieces, they have the same number\n    equation1 = Eq(Rachel - 10, Alice + 10)\n    \n    # If they both eat 8 pieces, Rachel has 3 times as many pieces as Alice\n    equation2 = Eq((Rachel - 8) / 3, Alice - 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Rachel, Alice))\n    \n    # Calculate the total number of candies they had originally\n    total_candies = solutions[Rachel] + solutions[Alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    days_in_january = 31\n    boys_in_club = 432\n    \n    min_boys_per_day = boys_in_club // days_in_january\n    if boys_in_club % days_in_january != 0:\n        min_boys_per_day += 1\n        \n    return min_boys_per_day\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    digits = ['0', '2', '3']\n    count = 0\n\n    # Create all possible combinations for the first, second and third digit\n    for first_digit in digits[1:]:  # The first digit cannot be 0\n        for second_digit in digits:\n            for third_digit in digits:\n                if first_digit != second_digit and second_digit != third_digit and first_digit != third_digit:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_car_length = 4\n    number_of_other_cars = 31 - 1\n    space_between_cars = 5\n    total_spaces = 31 + 1  # spaces before the first car, between cars, and after the last car\n\n    total_length = first_car_length + (other_car_length * number_of_other_cars) + (space_between_cars * total_spaces)\n    \n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    seventh_term = 105\n    eighth_term = 120\n    ninth_term = 135\n    \n    common_difference = eighth_term - seventh_term\n\n    first_term = seventh_term - (7 - 1) * common_difference\n\n    hundredth_term = first_term + (100 - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n    leftover_length = total_length % cut_length\n    return leftover_length\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    difference = 3\n    acceptable_range = range(30, 61)  # from 30 to 60\n\n    ans = [term for term in acceptable_range if (term - first_term) % difference == 0]\n\n    return ans\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    chocolates_left = total_chocolates - chocolates_given_away\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n\n    for perm in permutations(cards, 4):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "def solution():\n    from itertools import permutations\n    \n    total_count = 0\n    # Get all permutations of the 7 students\n    for p in permutations('ABCDEFG'):\n        # Convert to a string for easier handling\n        perm_str = ''.join(p)\n        # Find the positions of A, B, and C\n        a_pos = perm_str.index('A')\n        b_pos = perm_str.index('B')\n        c_pos = perm_str.index('C')\n        # Check if A is between B and C\n        if b_pos < a_pos < c_pos or c_pos < a_pos < b_pos:\n            # Check if D and E are next to each other\n            if 'DE' in perm_str or 'ED' in perm_str:\n                total_count += 1\n\n    ans = total_count\n    return ans\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5   # Sum of the ratios for Sue, Sarah, and Ian\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) / sarah_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_biscuits_cost = 7 * 73  # Cost in pence\n    total_cakes_cost = 9 * 113  # Cost in pence (£1.13 -> 113p)\n    total_cost_pence = total_biscuits_cost + total_cakes_cost  # Total cost in pence\n    \n    note_value_pence = 2000  # £20 note in pence\n    \n    change_pence = note_value_pence - total_cost_pence  # Change in pence\n    change_pounds = change_pence / 100  # Change in pounds\n    \n    return round(change_pounds, 2)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    original_length = current_length / (1 + growth_rate)\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    # Given values\n    week1 = 27  \n    week2 = 25  \n    week3 = 30  \n\n    # Simple addition of the given values\n    total_litres = week1 + week2 + week3\n\n    return total_litres\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Peter's original number of stickers as p.\n    p = symbols('p')\n\n    # Sam had 40 stickers more than Peter initially.\n    s = p + 40\n\n    # Sam gave 20% of his stickers to Peter and Peter gave 25% of his stickers (after receiving from Sam) back to Sam.\n    # After transactions:\n    sam_final = s - 0.20 * s + 0.25 * (p + 0.20 * s)\n    peter_final = p + 0.20 * s - 0.25 * (p + 0.20 * s)\n\n    # In the end, Sam had 96 stickers more than Peter.\n    equation = Eq(sam_final - peter_final, 96)\n\n    # Solve the equation to find the number of stickers Peter had at first.\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n\n    combinations = tops * bottoms\n\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Defining the congruences based on the problem statement\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    \n    # Using the solve_congruence function from sympy to find the smallest number\n    smallest_number, _ = solve_congruence(*congruences)\n\n    return smallest_number\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime('14:50', '%H:%M')\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n\n    # Calculate the time when Benson started his lunch\n    lunch_start_time = lunch_end_time - lunch_duration\n\n    # Calculate the time when Benson started watching television\n    tv_start_time = lunch_start_time - tv_duration\n\n    # Calculate the time when Benson reached home\n    home_arrival_time = tv_start_time - play_duration\n\n    return home_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = \"12:40 PM\"\n    stay_duration = timedelta(hours=2, minutes=40)\n\n    arrival_time = datetime.strptime(arrival_time_str, '%I:%M %p')\n    leaving_time = arrival_time + stay_duration\n\n    ans = leaving_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n    return ans\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '0', '1', '7']\n    three_digit_numbers = set(permutations(digits, 3))\n    three_digit_numbers = {number for number in three_digit_numbers if number[0] != '0'}\n    \n    four_digit_numbers = set(permutations(digits, 4))\n    \n    count_three_digit = len(three_digit_numbers)\n    count_four_digit = len(four_digit_numbers)\n    \n    return count_three_digit + count_four_digit\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    num = 1\n    while True:\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 1):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = 6.5 / 0.5\n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    ans = 887 + 96\n    return ans\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    number_of_terms = 14\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 181:\n        page += 1\n        count += str(page).count('9')\n    return page-1\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    # We use a variable to represent the crystals Jason has at first.\n    # Let's name it initial_crystals.\n    \n    # After selling 10 more than half to Yvonne, he will have: initial_crystals - ((initial_crystals / 2) + 10) left.\n    # Then, he mined 20 more crystals in Singapore, now he has: initial_crystals - ((initial_crystals / 2) + 10) + 20\n    # After selling 14 crystals to Cherlyn, he ends up with: initial_crystals - ((initial_crystals / 2) + 10) + 20 - 14\n    \n    # We know that in the end, he has 35 crystals.\n    # Therefore the equation is: initial_crystals - ((initial_crystals / 2) + 10) + 20 - 14 = 35\n    \n    # Let's solve for initial_crystals:\n    initial_crystals = symbols('initial_crystals')\n    equation = Eq(initial_crystals - ((initial_crystals / 2) + 10) + 20 - 14, 35)\n\n    result = solve(equation, initial_crystals)\n\n    return result[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_ratio = 2\n    total_ratio = 1 + 2 + 2  # black + white + grey\n    grey_count = 14\n    \n    # Calculate total number of cycles (complete patterns), considering that there are grey_ratio grey rabbits in each cycle\n    cycles = grey_count // grey_ratio\n    \n    # Calculate minimum total number of rabbits\n    min_total_rabbits = cycles * total_ratio\n    remaining_grey = grey_count % grey_ratio\n    \n    # Check for any remaining grey rabbits that do not complete a cycle\n    if remaining_grey > 0:\n        min_total_rabbits += total_ratio\n\n    return min_total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    # Possible digits to choose from\n    digits = [0, 1, 5, 8]\n    \n    # Use max() and min() to find the largest and smallest three-digit numbers\n    # For the largest number, sort digits in descending order and join, but skip 0 if it is at the start\n    largest = int(''.join(map(str, sorted([d for d in digits if d != 0], reverse=True))))\n    # For the smallest number, place smallest non-zero digit at the start, then sort rest in ascending order\n    smallest = int(str(sorted([d for d in digits if d != 0])[0]) + ''.join(map(str, sorted(digits))))\n    \n    # Calculate the difference\n    difference = largest - smallest\n    \n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A = 12\n    class_B = 15\n    class_C = 18\n\n    # Find the Greatest Common Divisor (GCD) for class A and B\n    gcd_AB = gcd(class_A, class_B)\n\n    # Find the GCD of the previous result with class C\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3', '4']\n    even_digits = ['2', '4']\n    count = 0\n    for p in permutations(digits):\n        if p[-1] in even_digits:  # The last digit must be even\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    factors = 0\n    for i in range(1, 181):\n        if 180 % i == 0 and i % 9 == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = peter_age * (2/3)\n    \n    total_age = sarah_age + peter_age + mike_age\n    \n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n    return solution[u]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        number = int(f\"26{a}539\")\n        if number % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return round(amount, 2)\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n    \n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n    \n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    num_boxes = 12\n    total_cost = cost_per_box * num_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    # Since Roma can buy 3 for 30 pence, we need to calculate the maximum number of sets of 3 she can buy with £2\n    pounds_to_pence = 200  # £2 equals 200 pence\n    cost_per_set_of_three = 30  # cost of 3 sweets\n    cost_per_single = 12  # cost of a single sweet\n\n    # Calculate the maximum sets of 3 that can be bought\n    max_sets = pounds_to_pence // cost_per_set_of_three\n    remaining_pence = pounds_to_pence % cost_per_set_of_three\n\n    # Calculate how many additional single sweets can be bought with the remaining pence\n    additional_sweets = remaining_pence // cost_per_single\n\n    # The total number of sweets is the number of sets times 3 plus the additional singles\n    total_sweets = max_sets * 3 + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    may_age_now = 7\n    kenny_age_difference = 2\n    may_age_future = 10\n    kenny_younger_bro_future_age = symbols('kenny_younger_bro_future_age')\n    \n    # Kenny's younger brother's future age + Kenny's future age = 3 * May's future age\n    # Kenny's future age = kenny_younger_bro_future_age + kenny_age_difference\n    equation = Eq(kenny_younger_bro_future_age + (kenny_younger_bro_future_age + kenny_age_difference), 3 * may_age_future)\n    \n    # Solve the equation\n    kenny_younger_bro_future_age_sol = solve(equation, kenny_younger_bro_future_age)[0]\n    \n    # Calculate Kenny's age this year\n    kenny_age_future = kenny_younger_bro_future_age_sol + kenny_age_difference\n    kenny_age_now = kenny_age_future - (may_age_future - may_age_now)\n    \n    # Calculate how much older Kenny is than May this year\n    kenny_may_age_difference = kenny_age_now - may_age_now\n\n    return kenny_may_age_difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "def solution():\n    from math import comb\n\n    # We have 10 identical balls and want to put them into 7 different boxes.\n    # This is similar to putting 10 identical items into 7 distinct categories,\n    # which can be thought of as distributing 10 - 7 = 3 indistinguishable items into 7 categories.\n    # At least 1 ball in each box means we initially put 1 ball into each box and\n    # distribute the remaining (10 - 7) balls into the 7 boxes.\n    remaining_balls = 10 - 7\n\n    # We use combinations with repetitions (also known as \"stars and bars\" theorem):\n    # comb(n + k - 1, k) where n is the number of categories and k is the items to be distributed.\n    ans = comb(remaining_balls + 7 - 1, remaining_balls)\n    \n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Since the total candies to be eaten is 10, we can proceed by working backwards.\n    # If we think about the final state where 9 candies have been eaten, the next player to move can only eat 1 candy\n    # and will win the game. We need to ensure Felix is in a position where there are 9 candies eaten when it's his turn.\n    # By ensuring he always leaves a number of candies that is a multiple of 3 for John, Felix can win.\n    # For example, if Felix eats 2 on his first turn and then there are 8 candies left,\n    # no matter whether John eats 1 or 2 candies next, Felix can always eat 1 or 2 candies to leave\n    # a multiple of 3 for John (7 or 6 candies left after John's turn).\n    # So Felix should aim to always leave 6 or 3 candies after his turn, forcing John to leave 9 candies\n    # on the turn before Felix, allowing Felix to win.\n    \n    # Felix should go first and ensure on every turn he leaves a multiple of 3 candies for John.\n    \n    return \"Felix should go first\", \"by always leaving a multiple of 3 candies for John\"\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    return (4 + 5) * 3\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n\n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count_3s, pages = 0, 0\n    while count_3s < 28:\n        pages += 1\n        count_3s += str(pages).count('3')\n    return pages\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    total_cents = 50 + 20 + 10 + 5\n    brother_cents = total_cents // 3\n    lost_coins = [5, 10, 20, 50]\n\n    for coin in lost_coins:\n        if total_cents - coin == 2 * brother_cents:\n            return coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_choose_girls = comb(8, 4)\n    ways_to_choose_boys = comb(12, 3)\n    total_ways = ways_to_choose_girls * ways_to_choose_boys\n    return total_ways\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # We can compute the sum of the 4 numbers for each given average\n    sum_36 = 4 * 36\n    sum_38 = 4 * 38\n    sum_39 = 4 * 39\n    sum_45 = 4 * 45\n    sum_49 = 4 * 49\n\n    # If we sum up all the sums, we count each number 4 times except the largest one, which we count 5 times\n    total_sum = sum_36 + sum_38 + sum_39 + sum_45 + sum_49\n\n    # Let the sum of all 5 numbers be total\n    # Then the sum of the 4 smallest numbers will be total - largest_number\n    # We have 4*total - largest_number = total_sum\n\n    # We can now calculate total as one of the 4 sums minus the smallest number\n    smallest_number = sum_36\n    second_smallest = (sum_38 + sum_39 + sum_45 + sum_49) - 4 * smallest_number\n    # The sum of all five numbers\n    total = second_smallest + smallest_number\n\n    # Knowing the sum of the 4 smallest numbers, we know the largest one is 5 times itself minus the sum\n    largest_number = (5 * 49) - second_smallest\n\n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55   # Convert 15:55 to minutes since the start of the day\n    second_bus_time = 16 * 60 + 35  # Convert 16:35 to minutes since the start of the day\n    late_time = 4                   # 4 minutes late for the first bus\n\n    # Calculate the waiting time for the second bus after being 4 mins late for the first one\n    waiting_time = second_bus_time - (first_bus_time + late_time)\n\n    return waiting_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    return 456 - (170 - 144)\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = 152\n\n    # Equation representing removal of 1/11 of the boys and 5 girls\n    equation = Eq(boys - boys / 11, girls - 5)\n\n    # Equation representing the total number of students\n    total_equation = Eq(boys + girls, total_students)\n\n    # Solve the equations\n    solutions = solve((equation, total_equation), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    # The number of intervals between trees is one less than the number of trees\n    num_trees = (road_length // distance_between_trees) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    capacity = 8\n    num_lorries = (workers + capacity - 1) // capacity\n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    women, men = symbols('women men')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (women, men))\n\n    total_people = solutions[women] + solutions[men]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Andrew's and Louise's ages\n    andrew, louise = symbols('andrew louise')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(andrew, 3 * louise) # Andrew is three times as old as Louise\n    equation2 = Eq(andrew + louise, 84) # The sum of their ages is 84\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andrew, louise))\n    \n    # Return Louise's age\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days = 20 * 4\n    last_two_days = 60\n    total_pages = first_three_days + next_four_days + last_two_days\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The number has a remainder of 3 when divided by 4, 5, or 9\n    congruences = [(3, 4), (3, 5), (3, 9)]\n\n    # Solve the system of congruences using Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n\n    # Ensure the number is a positive three-digit number less than 200\n    while ans[0] < 100 or ans[0] > 200:\n        ans = (ans[0] + ans[1], ans[1])\n\n    return ans[0]\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # Let x be the total number of students.\n    # Define unknowns\n    rooms, x = symbols('rooms x')\n\n    # Create equations\n    equation1 = Eq(x % 4, 6)  # x leaves a remainder of 6 when divided by 4\n    equation2 = Eq(((x + 1) // 5) - 1, rooms)  # There is 1 room without students when x students are distributed 5 per room\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (rooms, x))\n\n    # Return the result\n    return solutions[x]\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for num in range(1, 2017):\n        underline_times = (num % 2 == 0) + (num % 3 == 0) + (num % 4 == 0)\n        if underline_times == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age_today = 70\n    grandsons_ages = [6, 12, 18]\n    sum_grandsons_ages = sum(grandsons_ages)\n    years_passed = 0\n\n    while bill_age_today != sum_grandsons_ages:\n        years_passed += 1\n        bill_age_today += 1\n        sum_grandsons_ages += 3\n\n    return bill_age_today\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n    \n    # Convert sugar weight to grams\n    sugar_weight_g = sugar_weight_kg * 1000\n    \n    total_weight_g = sugar_weight_g + pasta_weight_g + spaghetti_handful_g\n    \n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_initial = 7 * 9\n    total_sum_after_removal = 6 * 10\n    removed_number = total_sum_initial - total_sum_after_removal\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    fraction_leaving = 1/3\n    people_leaving = total_people * fraction_leaving\n    people_remaining = total_people - people_leaving\n    return int(people_remaining)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n    # Find the least common multiple of the three train intervals\n    interval_a = 15\n    interval_b = 12\n    interval_c = 8\n\n    # Calculate the least common multiple (LCM)\n    next_train_lcm = lcm(interval_a, interval_b, interval_c)\n\n    # Since the trains arrive at 10:00 am, we calculate the next arrival time\n    hours, minutes = divmod(next_train_lcm, 60)\n    next_arrival_hour = 10 + hours\n    next_arrival_minute = minutes\n\n    # Format the time properly\n    next_arrival_time = f\"{next_arrival_hour:02}:{next_arrival_minute:02}\"\n    return next_arrival_time\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    marks_correct = 5\n    marks_wrong = -2\n    total_marks = 79\n    \n    # Let x be the number of correct answers\n    # Then (total_questions - x) is the number of incorrect or unanswered\n    # The equation will be: marks_correct * x + marks_wrong * (total_questions - x) = total_marks\n    for x in range(total_questions + 1):\n        if marks_correct * x + marks_wrong * (total_questions - x) == total_marks:\n            return x\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Inclusion-Exclusion Principle for three sets\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    # The least possible number of students who play all three sports (|A ∩ B ∩ C| least) is when \n    # |A ∩ B|, |A ∩ C|, and |B ∩ C| are at their maximum\n    # Since the total number of students is the sum of individual groups minus the ones who are counted twice,\n    # the students counted in all three would be the amount that exceeds the total number of students.\n    \n    # Compute the maximum number of students playing any two sports:\n    max_two_sports = swimmers + cyclists + table_tennis_players - total_students\n    \n    # Now find the least possible number of students playing all three sports\n    # Assuming all students playing two sports are in the three-sport category\n    all_three_sports_least = swimmers + cyclists + table_tennis_players - (2 * max_two_sports)\n\n    return all_three_sports_least\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    common_factor = 3999 * 2014\n    term1 = common_factor * 2014.2014 / common_factor\n    term2 = 3999.3999 * 2014 / common_factor\n    result = (term1 + term2) / 12.0012\n\n    ans = common_factor * result\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time = 30  # time in seconds\n    distance = 360  # length of the train in meters\n\n    speed = distance / time  # speed in meters/second\n\n    return speed\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d2 != d3 and d1 != d3:\n                    if d1 + d2 + d3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_slide = 1\n    net_distance = day_distance - night_slide\n    \n    # The snail reaches or exceeds the total distance before sliding down on the last day\n    days = (total_distance - day_distance) // net_distance\n    final_distance = (days + 1) * day_distance - days * night_slide\n\n    # Check if the snail reaches the top on this day or needs another day\n    if final_distance < total_distance:\n        days += 1\n    \n    return days\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # To have 4 marbles of different colours in the worst-case scenario\n    # we have to consider that we might pick all marbles of one colour first.\n    # Start drawing from the colour with the highest count until we reach the smallest\n    \n    # Assume we draw all the red marbles first, which are 15 in total because\n    # there are 12 + 3 = 15 red marbles.\n    red_marbles = 12 + 3\n    # Thwen draw all the blue marbles, which are 9.\n    blue_marbles = 9\n    # Then draw all the yellow marbles, which are 8.\n    yellow_marbles = 8\n    # Now we are forced to get a marble of a different colour.\n    # So we draw one more marble which could be of any colour, at this point it will\n    # definitely be the fourth different colour because we have just 3 colours so far.\n    \n    # Total marbles drawn will be the sum of red, blue, yellow marbles and one more.\n    minimum_drawn = red_marbles + blue_marbles + yellow_marbles + 1\n\n    return minimum_drawn\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    total_choices = 8 + 6 + 4\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Since 10 is directly opposite to 24 in a circle and they are evenly spaced,\n    # the difference in positions must be half the total number of people.\n    \n    # We calculate the difference in numbers:\n    diff_in_numbers = 24 - 10\n    \n    # The difference in positions for an evenly spaced circle is half the total number of people (N/2).\n    # Given that each number corresponds to a position and the difference in numbers (diff_in_numbers) is N/2:\n    total_people = diff_in_numbers * 2\n\n    return total_people\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    total_money = 80\n    books_stationery_percentage = 20\n    savings_expenditure_difference = 6\n\n    books_stationery = (books_stationery_percentage / 100) * total_money\n    transport = (total_money - books_stationery) / 4\n    food = 3 * transport\n    savings = food - savings_expenditure_difference\n\n    savings_percentage = (savings / total_money) * 100\n\n    return savings_percentage\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    ans = 7.72 - 7.54\n    return ans\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [x for x in range(1, 67) if 66 % x == 0]\n    for age in factors_of_66:\n        if (age - 4) % 6 == 0:\n            return age\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_numbers = 0\n    \n    # Count numbers in the range starting with 4 is:\n    # We have one choice for the thousands digit (4)\n    # We have 5 options for the hundreds digit (1,2,3,5,6)\n    # We have 4 options for the tens digit \n    # We have 3 options for the units digit\n    total_numbers += 1 * 5 * 4 * 3\n    \n    # Count numbers in the range starting with 35, 36, 32, 31:\n    # Each of these has one choice for the thousands and hundreds digit\n    # We have 4 options for the tens digit\n    # We have 3 options for the units digit\n    total_numbers += 4 * 1 * 1 * 4 * 3\n    \n    # Count numbers in the range starting with 33:\n    # one choice for the thousands and hundreds digit (33)\n    # We have 4 options for the remaining tens digit (1,2,4,5)\n    # We have 3 options for the units digit\n    total_numbers += 1 * 1 * 4 * 3\n    \n    # Similar approach is used to count for starting with 5\n    # For numbers starting with 5:\n    # We have one choice for the thousands digit (5)\n    # We have 5 options for the hundreds digit (1,2,3,4,6)\n    # We have 4 options for the tens digit \n    # We have 3 options for the units digit\n    total_numbers += 1 * 5 * 4 * 3\n\n    return total_numbers\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for num in range(10, 100): # 2-digit numbers range from 10 to 99\n        if 75 % num == 0 and num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Little Miss Careless saw the subtrahend wrongly\n    wrong_subtrahend = 41\n\n    # She got 50 as her answer\n    wrong_result = 50\n\n    # The correct subtrahend\n    correct_subtrahend = 14\n\n    # We need to find the minuend\n    # According to the incorrect calculation: minuend - wrong_subtrahend = wrong_result\n    # So the minuend is\n    minuend = wrong_subtrahend + wrong_result\n\n    # Now we find the correct result with the correct subtrahend\n    correct_result = minuend - correct_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([40, 36, 32, 28, 24]) - sum([38, 34, 30, 26, 22])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4\n    apples_left = 20\n\n    initial_apples = justin_apples + sisters_apples + apples_left\n\n    return initial_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    P = 5000\n    A = 7320.5\n    n = 4\n\n    # A = P * (1 + r) ** n\n    # 7320.5 = 5000 * (1 + r) ** 4\n    # => (1 + r) ** 4 = 7320.5 / 5000\n    # => 1 + r = (7320.5 / 5000) ** (1/4)\n    # => r = (7320.5 / 5000) ** (1/4) - 1\n\n    r = (A / P) ** (1/n) - 1\n    return round(r, 4)  # Rounding to 4 decimal places to match the interest rate format\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # The side of the original square array\n    original_side = 0\n\n    # The number of soldiers after 31 soldiers joined\n    soldiers_after = 0\n\n    # Since the new array is square, the difference between the square of the\n    # new side (original_side + 1) and the square of the original side should\n    # be equal to 31\n    while (original_side + 1) ** 2 - original_side ** 2 != 31:\n        original_side += 1\n\n    # Calculate the number of soldiers after the new row and column have been added\n    soldiers_after = (original_side + 1) ** 2\n\n    return soldiers_after\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    total = 56\n    part = 21\n    fraction_of_total = part / total\n    ans = 3 / fraction_of_total\n    return ans\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    result = (3.2 + 6.77 + 8.88) * (6.77 + 8.88 + 6.3) - (3.2 + 6.77 + 8.88 + 6.3) * (6.77 + 8.88)\n    return result\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_savings = 4410\n    january_savings = 2450\n    march_savings = 855\n\n    february_savings = total_savings - january_savings - march_savings\n\n    return february_savings\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # time in minutes to paint one picture\n    total_time_available = 80  # total time in minutes (1 hour and 20 minutes)\n\n    number_of_pictures = total_time_available // time_for_one_picture\n\n    return number_of_pictures\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes_to_seconds_multiplier = 60\n    total_seconds = 8 * minutes_to_seconds_multiplier\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    interest_rate = 0.08\n    years = 4\n    \n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # We have 30 apples and need to distribute at least one apple to each of the five other children\n    # This leaves us with 30 - 5 = 25 apples that can be distributed in any way including to Ann\n    # Since we want to maximize the number of apples Ann can get, we give every other child one apple\n    # and give the rest to Ann\n    apples_for_ann = 30 - 5  # Since there are 5 other children\n\n    return apples_for_ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789', 7):\n        first_number = int(''.join(perm[0:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:7]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    # Outfit combinations if Cherry chooses to wear pants: 3 shirts * 2 pants * 4 shoes\n    pants_outfits = shirts * pants * shoes\n    \n    # Outfit combinations if Cherry chooses to wear a dress: 3 dresses * (4 shoes + 2 heels)\n    dress_outfits = dresses * (shoes + heels)\n    \n    # Total outfit combinations\n    total_outfits = pants_outfits + dress_outfits\n    \n    return total_outfits\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Object A, B, and C\n    A, B, C = symbols('A B C')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Return the mass of Object A\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, bear = symbols('book bear')\n\n    equation1 = Eq(4 * book + 8 * bear, 164)\n    equation2 = Eq(2 * book + 3 * bear, 67)\n\n    solutions = solve((equation1, equation2), (book, bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n    \n    # Convert the total mass to grams (1 kg = 1000 g)\n    total_mass_g += total_mass_kg * 1000\n    # Convert the mass of the soil to grams\n    soil_mass_g += soil_mass_kg * 1000\n    \n    # The mass of the pack of sand in grams\n    sand_mass_g = total_mass_g - soil_mass_g\n    \n    # Difference between the mass of the pack of soil and the mass of the pack of sand\n    diff_mass_g = abs(soil_mass_g - sand_mass_g)\n    \n    # Convert the difference back to kilograms and grams\n    diff_mass_kg = diff_mass_g // 1000  # kilograms part\n    diff_mass_g = diff_mass_g % 1000    # grams part\n\n    # As the question asks for only the difference, we need to convert\n    # the result to the desired format 0kg 0g if needed, otherwise just return the value in grams\n    if diff_mass_kg == 0:\n        return diff_mass_g\n    elif diff_mass_g == 0:\n        return diff_mass_kg * 1000\n    else:\n        return diff_mass_kg * 1000 + diff_mass_g\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    equation1 = Eq(james + nina, 22)\n    equation2 = Eq(james + 4, nina - 4)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        for j in range(1, i):\n            ans += j / i\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    points_correct = 4\n    points_wrong = -2\n    total_score = 29\n    \n    # Let x be the number of correct answers\n    # Therefore, the number of wrong answers is (total_questions - x)\n    # The total score is a sum of points from correct and wrong answers\n    # total_score = x * points_correct + (total_questions - x) * points_wrong\n    # We can now solve for x\n\n    # Rearrange the equation:\n    # 29 = 4x + 2(10 - x)\n    # 29 = 4x + 20 - 2x\n    # 29 - 20 = 2x\n    # 9 = 2x\n    # x = 4.5\n    \n    # Since the number of correct answers must be a whole number, we need to adjust it to the closest integer\n    correct_answers = (total_score - total_questions * points_wrong) / (points_correct + abs(points_wrong))\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "from sympy import divisors\n\ndef solution():\n    # The prime factors of M and N are 3 and 5.\n    # The highest common factor is 75, which implies both M and N are divisible by 75.\n    # Let M = 75 * a and N = 75 * b where a and b are coprime (GCD(a, b) = 1).\n    # Since 75 = 3^1 * 5^2, a and b can only be powers of 3 and/or 5.\n    # The number of divisors (including 1 and the number itself) a number n has \n    # is given by the product of (e_i + 1) where e_i are the exponents of \n    # its prime factorization n = p_1^e_1 * p_2^e_2 * ... * p_k^e_k.\n    \n    hcf = 75  # HCF of M and N\n    hcf_factors = divisors(hcf)  # Divisors of 75\n    hcf_prime_exp = [hcf_factors.count(3), hcf_factors.count(5)]  # Exponents of the prime factors of 75\n    \n    # We want to find additional powers of 3 and/or 5 to multiply by 75 such that the result has 12 factors for M\n    # and 10 factors for N. Since the prime factors of 75 are 3^1 and 5^2, the exponents in its prime \n    # factorization contribute to the number of divisors by the product of adding 1 to the exponents.\n    # Thus, we want the product (hcf_prime_exp[0] + a_exp + 1) * (hcf_prime_exp[1] + b_exp + 1) to equal the\n    # number of factors for M and N, where a_exp and b_exp are the additional exponents for a and b respectively.\n\n    # Try to find a and b such that HCF of M and N is 75\n    # and M has 12 factors and N has 10 factors\n    for a_exp in range(12):  # Since M and N are not likely to be very large, we can just try reasonable exponents\n        for b_exp in range(12):\n            m_factors_count = (hcf_prime_exp[0] + a_exp + 1) * (hcf_prime_exp[1] + 1)\n            n_factors_count = (hcf_prime_exp[0] + 1) * (hcf_prime_exp[1] + b_exp + 1)\n            if m_factors_count == 12 and n_factors_count == 10:\n                # Calculate M and N\n                M = hcf * (3 ** a_exp)\n                N = hcf * (5 ** b_exp)\n                return M + N\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "网络故障，请重试"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n    kites = total_paper / paper_per_kite\n    return int(kites)  # because you cannot make a fraction of a kite\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_length = 320\n    num_trees = 79\n    distance_between_trees = total_length / (num_trees + 1)\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen trades 10 fish for 4 rabbits, so the ratio is 10 fish / 4 rabbits.\n    fish_to_rabbits = 10 / 4\n\n    # Oscar trades 5 rabbits for 6 packs of wheat, so the ratio is 5 rabbits / 6 wheat packs.\n    rabbits_to_wheat = 5 / 6\n\n    # To find out how many fish per pack of wheat, multiply the two ratios.\n    # This gives us the continued ratio of fish to wheat packs.\n    fish_to_wheat = fish_to_rabbits / rabbits_to_wheat\n\n    # Now, we find out how many fish Owen should give for 12 packs of wheat.\n    fish_for_12_wheat = fish_to_wheat * 12\n\n    return fish_for_12_wheat\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    from fractions import Fraction\n\n    total_length = Fraction(10) + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n\n    num_short_rods = total_length / short_rod_length\n\n    return num_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_price_for_thirty = 2800\n\n    cost_without_deal = 20 * single_laptop_price\n    cost_with_deal_for_twenty = deal_price_for_thirty / 30 * 20\n\n    savings = cost_without_deal - cost_with_deal_for_twenty\n\n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Define a function to calculate the number of permutations of n items\n    def permutations(n, r):\n        return factorial(n) // factorial(n-r)\n\n    # Calculate the number of ways to arrange the 6 singing performances\n    singing_arrangements = permutations(6, 6)\n    \n    # There are 5 positions between the singing performances and 2 positions at the ends,\n    # making 7 positions where dancing performances can be placed\n    # We have to choose 4 positions out of these 7 for dancing performances\n    dancing_positions = permutations(7, 4)\n\n    # The final answer is the product of the two arrangements\n    return singing_arrangements * dancing_positions\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.35\n    discount_amount = original_price * discount_rate\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    fish_when_3_per_penguin = 3 * penguins + 5\n    fish_when_4_per_penguin = 4 * penguins - 15\n\n    equation = Eq(fish_when_3_per_penguin, fish_when_4_per_penguin)\n    number_of_penguins = solve(equation, penguins)\n\n    return number_of_penguins[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    total_earnings = hourly_rate * hours_worked\n    return total_earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    substracted_number = 26\n    # Since she subtracted instead of adding, we have to reverse the operation\n    correct_result = incorrect_result + (2 * substracted_number)\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height * ratio_kelly) / ratio_matthew\n\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 35 / 100 * 80\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Possible scores at halftime could range from 0 to the final score for both teams\n    for team1_score_ht in range(4): # Team 1 can have 0 to 3 goals by halftime\n        for team2_score_ht in range(3): # Team 2 can have 0 to 2 goals by halftime\n            # Both teams cannot score more goals during halftime than the final score\n            # Also, in the second half, Team 1 should score at least 3 - team1_score_ht, \n            # and Team 2 should score at least 2 - team2_score_ht\n            if team1_score_ht <= 3 and team2_score_ht <= 2 \\\n               and 3 - team1_score_ht >= 0 and 2 - team2_score_ht >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    total_cards = 56\n    fraction_lost = 3/8\n    cards_lost = total_cards * fraction_lost\n    return cards_lost\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if (10*a + b) + (10*b + a) + b == (100*a + 10*a + b):\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    # Let the number of cookies Emma baked be x\n    # Then, Clara baked 5 times as many cookies as Emma, i.e., 5x\n    # Together, they baked 1002 cookies, so x + 5x = 1002\n    # Solving for x we get 6x = 1002\n    # Thus, x = 1002 / 6\n    x = 1002 // 6\n    return x\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    num_students = 6\n    num_monitors = 2\n\n    return comb(num_students, num_monitors)\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total number of boys be b and girls be g\n    b, g = symbols('b g', integer=True)\n    \n    # According to the problem, 3/8 of the girls can swim and 3/5 of the boys can swim\n    # Also, equal number of boys and girls cannot swim\n    # Total pupils who cannot swim is 20, so boys who cannot swim are 10 and girls who cannot swim are 10.\n    \n    # 3/8 * g = number of girls who can swim\n    # g - (3/8 * g) = number of girls who cannot swim, which is equal to 10\n    # Similar process for boys\n    \n    # Setting up the equations based on the description\n    eq1 = Eq(g - (3/8) * g, 10)\n    eq2 = Eq(b - (3/5) * b, 10)\n\n    # Solve the system of equations for b and g\n    solutions = solve((eq1, eq2), (b, g))\n    \n    # Total number of pupils in the class is the sum of boys and girls\n    total_pupils = solutions[b] + solutions[g]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_half_weight = half_full_weight - (full_weight / 2)\n    empty_basket_weight = full_weight - (2 * mangoes_half_weight)\n    \n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    return 85 / 100 * 400\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_sweets = 16\n    pip_fraction = 3/5\n    total_sweets = bud_sweets / (1 - pip_fraction)\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    result = 6 * 5\n    percentage = (result / 40) * 100\n    return percentage\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # We are looking for a rectangular array where Mike's position is the second, no matter the direction.\n    # This means Mike is sitting at one of the four corners of the rectangle, but being second, his seat is next to a corner.\n    # The possible dimensions for the arrangement (rows x columns) might be (2 x N) or (M x 2), \n    # where M and N are greater than or equal to 3 so Mike can be second from any direction.\n    \n    count = 0\n    # Start with 3 because a row or column with only 2 seats would not allow Mike to be second from both directions.\n    for rows in range(3, 100): # Assuming the class is not larger than 100 in either direction\n        for cols in range(3, 100):\n            if rows == 2 or cols == 2:\n                count += rows * cols\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_cost_3_cups = 30\n    number_of_cups_initially = 3\n    number_of_cups_to_buy = 5\n\n    cost_per_cup = total_cost_3_cups / number_of_cups_initially\n    total_cost_5_cups = cost_per_cup * number_of_cups_to_buy\n\n    return total_cost_5_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_mushroom_capacity = 4\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n    total_rabbits = 38\n\n    rabbits_in_big_houses = big_mushroom_capacity * big_mushroom_houses\n    remaining_rabbits = total_rabbits - rabbits_in_big_houses\n    rabbits_per_small_house = remaining_rabbits / small_mushroom_houses\n\n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n    total_weekly_earnings = average_daily_earnings * days_in_a_week\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 8, 2))\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    children_at_school = total_children - absent_children\n    return children_at_school\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas = 15\n    months = 5  # From March to July is 5 months\n    total_pizzas = average_pizzas * months\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_of_numbers = 21 + 22 + 23\n    product_of_2_and_3 = 2 * 3\n    for i in range(1, sum_of_numbers):\n        if product_of_2_and_3 * i == sum_of_numbers:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    ryan_future_age = solutions[ryan] + 2\n\n    return ryan_future_age\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    # Initialize the list of ways to reach each step to 0 for 0 steps and 1 for 1, 2, 3 steps\n    # because there is 1 way to reach step 1 (1 step), 2 ways to reach step 2 (1+1, 2 steps),\n    # and 4 ways to reach step 3 (1+1+1, 1+2, 2+1, 3 steps)\n    ways = [0, 1, 2, 4]\n    \n    # Calculate ways to reach further steps using previous results\n    for i in range(4, 7):\n        ways_to_reach_i = ways[i - 1] + ways[i - 2] + ways[i - 3]\n        ways.append(ways_to_reach_i)\n    \n    # The total different ways to reach the sixth step is the sixth element of the ways list\n    return ways[6]\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    distance = 150\n\n    # Speed upstream is speed in still water minus speed of the current\n    speed_upstream = speed_in_still_water - speed_of_current\n\n    # Time is distance divided by speed\n    time = distance / speed_upstream\n\n    return time\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences based on the problem statement\n    congruences = [(2, 3), (3, 4), (4, 5)]\n\n    # Using the Chinese Remainder Theorem to find the smallest such number\n    ans = solve_congruence(*congruences)\n\n    # Returning the first element of the tuple which contains the solution\n    return ans[0]\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n        \n    last_multiple = (92 // 4) * 4\n    \n    count_multiples = (last_multiple - first_multiple) // 4 + 1\n    \n    return count_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    mid_point = (3.5 + 6.9) / 2\n    return mid_point\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum([i if i % 4 < 2 else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # Find the ones digit for the powers of 9\n    # 9^1 ends with 9, 9^2 ends with 1, 9^3 ends with 9, 9^4 ends with 1, and so on...\n    # The pattern of ones digit for 9^x is 9, 1, 9, 1, ...\n\n    # Since 99 is odd, the ones digit of 9^99 will be the same as 9^1, which is 9\n    return 9\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    # Let's denote Claire's current age as 'x'\n    # In 6 years, Claire's age will be x + 6\n    # According to the problem, in 6 years, she will be three times her current age: 3 * x\n    # So we have the equation x + 6 = 3 * x\n\n    # Solving for x\n    x = symbols('x')\n    equation = Eq(x + 6, 3 * x)\n    current_age = solve(equation, x)[0]\n\n    # Claire's age two years from now would be her current age plus 2\n    age_in_two_years = current_age + 2\n\n    return age_in_two_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    # Let x be the original journey time in hours.\n    # It took 11/12 of the original journey time, so the time taken is 11/12 * x.\n    # The train was 15 minutes late leaving and 5 minutes late arriving, so it lost 10 minutes overall.\n    # 10 minutes is 1/6 of an hour, so we can say that (11/12 * x) - x = -1/6.\n    # Solving this equation gives x, the original journey time in hours.\n\n    x = symbols('x')\n\n    # Make an equation based on the above explanation:\n    equation = Eq((11/12) * x - x, -1/6)\n\n    # Solve the equation:\n    original_journey_time = solve(equation, x)\n\n    # Convert the time from hours to minutes by multiplying by 60 (since we want the answer in minutes):\n    original_journey_time_minutes = original_journey_time[0] * 60\n\n    return original_journey_time_minutes\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    # Perform the arithmetic calculation\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    current_year = 2022\n    next_interesting_year = current_year + 1\n\n    while not set(str(next_interesting_year)) <= {'0', '2'}:\n        next_interesting_year += 1\n\n    return next_interesting_year - current_year\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    # Distributive property: a * (b + c) = a * b + a * c\n    # From the equation 5.42 * 25 = 5.42 * box + 5.42 * 5\n    # We can determine the missing number in the box by subtracting 5 (the known factor) from 25 (the total factor)\n    total_factor = 25\n    known_factor = 5\n    missing_number = total_factor - known_factor\n    return missing_number\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Number of marbles of each color\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # We apply the Pigeonhole Principle to find the worst case scenario.\n    # We take all marbles of one color less one less to avoid getting 4 different colors.\n    # After reaching that number, we need one more draw to ensure the 4th color.\n    draws = (green - 1) + (blue - 1) + (orange - 1) + 1\n\n    return draws\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return total_legs\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    height = 9\n    day_climb = 3\n    night_slide = 1\n    days = 0\n    current_height = 0\n\n    # The snail needs to reach height or more without considering the slide back at night\n    while current_height < height:\n        days += 1\n        current_height += day_climb\n        if current_height >= height:\n            break\n        current_height -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n-r))\n    \n    # Since each kid gets at least one book, we give one book to each kid.\n    # Now we have 19 - 4 = 15 books left to divide among the kids.\n    # We use nCr with repetition for this, which is nCr(n+k-1, k-1) where n=15 and k=4.\n    return nCr(15 + 4 - 1, 4 - 1)\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # Possible coins in pence: 1p, 2p, 5p, 10p, 20p, 50p, 100p (1 pound), 200p (2 pounds)\n    # Smallest number of coins would involve giving the largest possible coins first\n    # Hence, Susan could give either a 50p coin or any combination of coins that sum up to a value \n    # greater than 44p (since the driver can give her change)\n    \n    # Let's check if Susan gives a 50p coin\n    coins_used = 1  # One 50p coin\n    change_to_receive = 50 - 44  # Change the driver has to give back to Susan (6p)\n\n    # Now, let's determine the smallest number of coins the driver can give to Susan as change\n    # Starting from the largest coin value smaller than the change needed\n    coin_values = [20, 10, 5, 2, 1]\n    change_coins = 0\n\n    for coin in coin_values:\n        while change_to_receive >= coin:\n            change_to_receive -= coin\n            change_coins += 1\n    \n    # Total coins that change hands are the coins Susan gives plus the coins she receives as change\n    total_coins = coins_used + change_coins\n\n    return total_coins\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a = 2\n    b = 3\n    while b < 100:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since the pencil cases cannot be empty, start by putting one pen in each case.\n    # We have distributed 3 pens, so there are 6 - 3 = 3 pens left to distribute.\n    remaining_pens = 6 - 3\n\n    # Now, we can distribute the remaining 3 pens among the 3 pencil cases in:\n    # (n + r - 1) choose (r - 1) ways where n is the number of remaining items\n    # to distribute, and r is the number of slots (pencil cases).\n    # This is equivalent to a stars and bars problem (also known as balls and urns).\n    # We use combinations from the math library to compute this.\n    from math import comb\n    ways = comb(remaining_pens + 3 - 1, 3 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((i + 2) ** 2 - i ** 2 for i in range(2, 41, 4))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_per_cup = 1 / 6  # gallons of milk needed for one cup\n    order_size = 30  # number of cups ordered\n    total_milk_needed = milk_per_cup * order_size  # total gallons of milk needed for the order\n    return total_milk_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    # Pip and Bud are two distinct people in the line\n    pip_and_bud = 2\n\n    # Total is the sum of people in front of Pip, behind Bud, and Pip and Bud themselves\n    total_people = people_in_front_of_pip + people_behind_bud + pip_and_bud\n\n    return total_people\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent the number of motorbikes, t represent the number of tricycles, and v represent the number of vans\n    m, t, v = symbols('m t v')\n    \n    # Motorbikes have 2 wheels, tricycles have 3 wheels, and vans have 4 wheels\n    # We have three equations based on the problem statement\n    equation1 = Eq(2 * m + 4 * v, 3 * t + 35)  # Motorbike and van wheels are 35 more than tricycle wheels\n    equation2 = Eq(3 * t + 4 * v, 2 * m + 13)  # Tricycle and van wheels are 13 more than motorbike wheels\n    equation3 = Eq(2 * m + 3 * t + 4 * v, 101) # Total number of wheels\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n\n    # Compute the difference between the number of motorbikes and vans\n    motorbikes_vans_diff = solutions[m] - solutions[v]\n\n    return motorbikes_vans_diff\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the amount of water in each tank\n    A, B, C, D = symbols('A B C D')\n\n    # Equation1: Tank A contains 5 times as much water as Tank B\n    equation1 = Eq(A, 5 * B)\n    # Equation2: Tank B contains 5 more litres of water than Tank C\n    equation2 = Eq(B, C + 5)\n    # Equation3: Total amount of water in Tank C and Tank D is equal to Tank A\n    equation3 = Eq(C + D, A)\n    # Tank D contains 41 litres of water\n    D = 41\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3.subs('D', D)), (A, B, C))\n\n    # Solution for the amount of water in Tank B\n    return solutions[B]\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_of_last = ((last_term - first_term) // difference) + 1\n\n    return term_of_last\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    total_students = 36\n    both_symbol = 'b'\n    \n    # Let b represent the number of students who like both sports.\n    b = symbols(both_symbol)\n\n    # Number of students who like football is 3 times those who like both: 3b\n    # Number of students who like basketball is 4 times those who like both: 4b\n    # According to the inclusion-exclusion principle for two sets:\n    # Number of students who like either football or basketball = \n    # number who like football + number who like basketball - number who like both\n    # 36 = 3b + 4b - b\n    equation = Eq(3 * b + 4 * b - b, total_students)\n\n    solutions = solve(equation, b)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Each congruence can be written in the form of (remainder, modulo)\n    congruences = [(3, 7), (7, 11), (9, 13)]\n    smallest_number, _ = solve_congruence(*congruences)\n\n    return smallest_number\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Speed of Adam\n    speed_adam = 60  # km/h\n    # Speed of Jacob\n    speed_jacob = 80  # km/h\n    # Time taken by Jacob to reach home\n    time_jacob = 3  # hours\n    # Time remaining for Adam to reach home\n    time_adam_remaining = 0.5  # 30 minutes is 0.5 hours\n\n    # Total time taken by Adam to reach home\n    time_adam = time_jacob + time_adam_remaining  # hours\n\n    # Distance covered by Adam\n    distance_adam = speed_adam * time_adam  # km\n    # Distance covered by Jacob\n    distance_jacob = speed_jacob * time_jacob  # km\n\n    # Total distance apart\n    total_distance_apart = distance_adam + distance_jacob\n\n    return total_distance_apart\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21  # the term number we want to find\n\n    # Use the formula for the nth term of an arithmetic sequence: an = a1 + (n - 1)d\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef count_valid_dates(year):\n    valid_dates_count = 0\n    \n    # Generate all possible combinations of 2 zeros, 2 ones, 2 twos, and 2 other digits\n    for perm in permutations('0011223456789', 8):\n        # The last two digits must form a valid day (01-31)\n        day = int(''.join(perm[6:]))\n        if day < 1 or day > 31:\n            continue\n        \n        # The two middle digits must form a valid month (01-12)\n        month = int(''.join(perm[4:6]))\n        if month < 1 or month > 12:\n            continue\n\n        # Check if the date is valid for the month\n        if month in {1, 3, 5, 7, 8, 10, 12}:\n            is_valid = True\n        elif month in {4, 6, 9, 11}:\n            is_valid = day <= 30\n        elif month == 2:\n            is_valid = day <= 29 if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) else day <= 28\n        else:\n            is_valid = False\n\n        # The first four digits must form the year we're interested in\n        if ''.join(perm[:4]) == str(year) and is_valid:\n            valid_dates_count += 1\n\n    return valid_dates_count\n\ndef solution():\n    # Divide the count by 4! to account for permutations of 0, 1, and 2 \n    # as we are not interested in the order of these digits within the date.\n    ans = count_valid_dates(2014) // (2 * 2)\n    return ans\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    def custom_mult(a, b):\n        return ((a * b + 16) / (a + b)) ** 2\n    \n    step1 = custom_mult(1, 2)\n    step2 = custom_mult(step1, 3)\n    step3 = custom_mult(step2, 4)\n    ans = custom_mult(step3, 5)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # Since 252 = 36 * 7, we will find the prime factorization of both numbers\n    # The prime factorization of 36 is 2^2 * 3^2\n    # The prime factorization of 7 is 7^1\n    # Therefore, the prime factorization of 252 is 2^2 * 3^2 * 7^1\n\n    # The total number of factors of a number is found by\n    # adding one to each of the exponents in its prime factorization and then multiplying these together\n    num_factors = (2 + 1) * (2 + 1) * (1 + 1)  # (exponents + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # Applying the pigeonhole principle, we divide the cakes by the number of layers\n    # It gives us the minimum number of cakes that must be in the layer with the most cakes, if the cakes were evenly distributed\n    # But since we need \"at least how many cakes\", we need to take the ceiling of the result\n    min_cakes_per_layer = total_cakes // total_layers\n    if total_cakes % total_layers:\n        min_cakes_per_layer += 1\n\n    return min_cakes_per_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    total_paid = 0.91\n    original_price = total_paid / gst_rate\n    return original_price\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Based on the Pigeonhole Principle, in the worst case scenario,\n    # Lucy would pick all marbles of one color and the first marble of the other color\n    # before guaranteeing to get 2 marbles of the same color.\n    \n    # There are 2 colors.\n    num_colors = 2\n    \n    # There are 2 marbles of each color.\n    marbles_per_color = 2\n    \n    # In the worst case scenario, Lucy would take all marbles of one color and one from the other color.\n    marbles_to_take = (num_colors - 1) * marbles_per_color + 1\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = lambda kg: kg * 1000\n    total_g = kg_to_g(2.49) + 670 + kg_to_g(3) + 80\n    return total_g\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of the three lap times\n    least_common_multiple = lcm(56, 80, 105)\n\n    # Convert the least common multiple from seconds to minutes and seconds\n    minutes, seconds = divmod(least_common_multiple, 60)\n\n    # Calculate the new time by adding minutes and seconds to 10:00 a.m.\n    start_hour = 10\n    start_minute = 0\n    new_hour = start_hour + (start_minute + minutes) // 60\n    new_minute = (start_minute + minutes) % 60\n\n    # Format the new time\n    new_time = f\"{new_hour:02d}:{new_minute:02d}:{seconds:02d}\"\n\n    return new_time\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Given numbers \n    numbers = [4, 5, 6, 9, 3, 9]\n    # Given average of all numbers\n    average = 6\n    \n    # Total sum of given numbers with two unknowns p and q \n    total_with_pq = average * (len(numbers) + 2)\n    \n    # Calculate the sum of known numbers\n    sum_of_known_numbers = sum(numbers)\n    \n    # Calculate the sum of unknowns p and q\n    sum_of_pq = total_with_pq - sum_of_known_numbers\n\n    # The min number is 3 from the given numbers\n    # difference between the highest value and the lowest value is also 6\n    # max number can be 3 + 6 = 9 \n    # since p < q. so, the lowest possible value for q will be when q = 9 (maximum value)\n    # and p will be sum_of_pq - q\n    q = 9\n    p = sum_of_pq - q\n    \n    # However, if p turns out to be 9 as well (or any number from the given numbers), \n    # It would contradict the given that all numbers are whole numbers and p < q.\n    # So, we keep incrementing q until p is a value less than q \n    # and not in the list of given numbers (ensuring whole numbers condition)\n    while p >= q or p in numbers:\n        q += 1\n        p = sum_of_pq - q\n    \n    return q\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time = 60  # total exercise time in minutes\n    cycling_fraction = 1/3\n    jogging_time = total_time * (1 - cycling_fraction)  # time spent jogging is the rest of the time\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin_age_now = symbols('justin_age_now')\n\n    # Equations based on the problem\n    equation = Eq(justin_age_now + 18, 4 * (justin_age_now - 6))\n\n    # Solve the equation\n    justin_current_age = solve(equation, justin_age_now)\n\n    return justin_current_age[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    difference = 22 - 18  # The common difference in the sequence\n    last_term = 2  # The last known term in the sequence\n    next_term = last_term - difference  # The next term in the sequence\n\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Define the maximum apples for the kid with the most apples\n    max_apples = 0\n    # Iterate starting from the largest amount possible to the smallest\n    for first_kid in range(30, 0, -1):\n        # Initialize the total apples to the first kid's apples\n        total_apples = first_kid\n        # Initialize the number of remaining kids\n        remaining_kids = 5\n        # Initialize the next kid's apples to one less than the first kid\n        next_kid_apples = first_kid - 1\n        # Distribute the apples to the remaining kids\n        while remaining_kids > 0 and next_kid_apples > 0:\n            total_apples += next_kid_apples\n            next_kid_apples -= 1\n            remaining_kids -= 1\n        # If all apples are distributed and each kid got at least one apple\n        if total_apples == 30 and remaining_kids == 0:\n            # Update the maximum apples for the first kid\n            max_apples = first_kid\n            break\n    return max_apples\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    sam_mpg = 72.8  # Sam's car average\n    distance = 273  # Total distance travelled by both\n\n    # Sam's total petrol consumption for the trip\n    sam_gallons = distance / sam_mpg\n\n    # Tom's total petrol consumption is 6 3/4 gallons more than Sam's\n    tom_gallons = sam_gallons + 6 + 3/4\n\n    # Tom's average miles per gallon\n    tom_mpg = distance / tom_gallons\n\n    return tom_mpg\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    red = 3\n    yellow = 4\n    brown = 5\n    \n    # To guarantee two chips of different colors, take all of one color + 1 more to ensure at least one of the other two colors.\n    ans = max(red, yellow, brown) + 1\n\n    return ans\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    num_shirts = 2\n    num_skirts = 2\n\n    num_ways = num_shirts * num_skirts\n\n    return num_ways\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Since we know the 7th, 8th and 9th values of the sequence, we can determine the common difference\n    value_7th = 105\n    value_8th = 120\n    value_9th = 135\n\n    # Calculate the common difference\n    common_difference = value_8th - value_7th\n\n    # Calculate the first term of the sequence using 7th term\n    first_term = value_7th - (6 * common_difference)\n\n    # Calculate the 100th term\n    term_100th = first_term + (99 * common_difference)\n\n    return term_100th\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert from base 7 to decimal\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n\n    # Add the numbers in decimal\n    decimal_sum = num1 + num2\n\n    # Convert the sum back to base 7\n    base_7_sum = ''\n    while decimal_sum > 0:\n        remainder = decimal_sum % 7\n        base_7_sum = str(remainder) + base_7_sum\n        decimal_sum = decimal_sum // 7\n        \n    return base_7_sum\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese = 9\n    mexican = 3\n    fast_food = 2\n\n    total_choices = chinese + mexican + fast_food\n    \n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the number of oranges and lemons\n    oranges = symbols('oranges')\n    lemons = symbols('lemons')\n    \n    # Equation based on the initial ratio 3:5\n    initial_ratio = Eq(oranges/lemons, 3/5)\n    \n    # Equation based on the final ratio after selling 48 oranges, becomes 1:2\n    final_ratio = Eq((oranges - 48)/lemons, 1/2)\n    \n    # Solving the equations to find the number of lemons\n    solutions = solve((initial_ratio, final_ratio), (oranges, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    num_rabbits = 8\n    days = 5\n    total_carrots = carrots_per_day_per_rabbit * num_rabbits * days\n\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate the rate of hay consumption for each animal per day\n    horse_eat_rate = 1 / 2\n    cow_eat_rate = 1 / 3\n    sheep_eat_rate = 1 / 12\n    \n    # Calculate total hay consumption per day\n    total_eat_rate_per_day = horse_eat_rate + cow_eat_rate + sheep_eat_rate\n    \n    # Calculate how many days 22 bales of hay will last\n    days = 22 / total_eat_rate_per_day\n    \n    return days\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Given sequence: 1, 3, _, 27, 81\n    # It's a geometric sequence where each term is multiplied by a common ratio.\n    # To find the common ratio, we can divide the fourth term by the second term.\n    # common ratio (r) = 27 / 3 = 9\n    # Therefore, the missing term (third term) = second term * common ratio\n    # third term = 3 * 9 = 27\n    \n    # However, because we are looking for the pattern, it might also be that\n    # the terms are being cubed: 1^3 = 1, 2^3 = 8, 3^3 = 27, 4^3 = 64.\n    # Looking at the given sequence, 1 is 1^3, 3 is not a cube, 27 is 3^3, and 81 is 4^3.\n    # The missing number, which is a cube, between 3 and 27, is 2^3 = 8.\n\n    missing_term = 2**3  # This is equal to 8\n\n    return missing_term\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5/8) * 160\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother_age_now, daughter_age_now = symbols('mother_age_now daughter_age_now')\n    # When the daughter reaches her mother's current age, their age difference will remain constant.\n    age_difference = mother_age_now - daughter_age_now\n\n    # Equation 1: The mother will be 75 years old when the daughter reaches her current age. \n    equation1 = Eq(mother_age_now + age_difference, 75)\n\n    # Equation 2: When the mother was the daughter's current age, the daughter was 3.\n    # So, age_difference years ago, the daughter's age was 3.\n    equation2 = Eq(daughter_age_now - age_difference, 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mother_age_now, daughter_age_now))\n\n    return solutions[mother_age_now]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    ans = 146 * 37\n    return ans\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # The worst case scenario before she is guaranteed to get 3 red apples\n    # is if she takes out all non-red apples first. So, she needs to take out\n    # all green and yellow apples first before she is certain to get 3 red apples.\n\n    # Number of green apples\n    green_apples = 11\n    # Number of yellow apples\n    yellow_apples = 7\n    # Number of red apples she wants\n    red_apples_needed = 3\n\n    # Calculate the minimum number of apples to take out to ensure 3 red apples\n    # She needs to take out all green and yellow apples plus 3 red apples\n    min_apples_to_take = green_apples + yellow_apples + red_apples_needed\n\n    return min_apples_to_take\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n\n    # The smallest number of right-handed girls occurs when all non-right-handed pupils are girls.\n    # We subtract right-handed pupils from total pupils to find non-right-handed pupils\n    non_right_handed = total_pupils - right_handed\n\n    # All non-right-handed pupils are girls in the worst-case scenario, and the remaining girls are right-handed.\n    right_handed_girls = total_girls - non_right_handed\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    original_price = 6400 / 0.2  # price after 80% discount, so divide by 0.2 to get full price\n    money_saved = original_price - 6400\n    return money_saved\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # A single round-robin tournament where each team plays every other team once\n    # There are C(6, 2) games in total, where C(n, k) represents the number of combinations (n choose k)\n    \n    from math import comb\n    total_games = comb(6, 2)\n    \n    # In each game, there are three possible outcomes: Team A wins (Team A gets 2 points, Team B gets 0),\n    # Team B wins (Team B gets 2 points, Team A gets 0), or a tie (both teams get 1 point).\n    # Therefore, each game contributes 2 points to the total point tally.\n\n    # The total points are therefore equal to two times the total number of games\n    total_points = 2 * total_games\n    \n    return total_points\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "def solution():\n    from itertools import permutations\n\n    # Since there are equal numbers of digits 0, 1, and 2 in the date\n    # First, we consider all possible permutations of 2014 (fixed part)\n    # followed by 0, 1, 2 and a digit from 3 to 9 (not considering leading 0s for the days).\n    # We also keep fixed one 2 from '2014', so we have to permute 014 + one 2 + one from 3-9\n\n    # Fixed 2 in '2014' and three available positions from 0, 1, 4\n    fixed_part = '2014'[1:]\n\n    # Create a list of 3...9 digits as strings for possible remaining positions\n    remaining_digits = [str(i) for i in range(3, 10)]\n\n    # Count valid days\n    valid_days = 0\n\n    for digit in remaining_digits:\n        # Current composition of the date (without the day indicator)\n        composition = fixed_part + digit + '012'\n        \n        # Count all possible permutations of the current composition\n        for perm in permutations(composition):\n            day = int(''.join(perm[-2:])) # Extract day from permutation\n            month = int(''.join(perm[-4:-2])) # Extract month from permutation\n            \n            # Check if the permutation leads to a valid date\n            if month in range(1, 13) and day in range(1, 32):\n                # Check the particular conditions for each month\n                if month == 2 and day > 28:\n                    continue  # February has 28 days in 2014 (not a leap year)\n                if month in [4, 6, 9, 11] and day > 30:\n                    continue  # April, June, September, November have 30 days\n                valid_days += 1\n\n    # Eliminate duplicates due to the fixed '2014' and multiplied by 2\n    # for possible leading zeros in day representation (01, 02, etc.)\n    valid_days /= (2 * len(set(permutations(fixed_part + '012'))))\n\n    return int(valid_days)\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "网络故障，请重试"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Given equations based on the problem statement\n    eq1 = Eq(boys, girls + 90)  # There are 90 more boys than girls\n    eq2 = Eq(girls_swim / girls_not_swim, 31/49)  # Ratio of number of girls who can swim to who cannot\n    eq3 = Eq(boys_not_swim, boys_swim + 120)  # The number of boys who can swim is 120 less than those who cannot\n    eq4 = Eq(girls + boys, 1690)  # Total pupils in the school\n\n    # Eqations to compute total girls (sum of those who can swim and those who can't)\n    eq5 = Eq(girls, girls_swim + girls_not_swim)\n    # Eqations to compute total boys (sum of those who can swim and those who can't)\n    eq6 = Eq(boys, boys_swim + boys_not_swim)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the total number of pupils who cannot swim (boys and girls)\n    total_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return total_not_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    count = 0\n    n = 1\n    while True:\n        # Calculate the number of factors of 5 in n! since 5 is the \n        # limiting factor in the prime factorization of a factorial for trailing zeroes.\n        # Every 5 contributes to one zero in multiplication due to 2*5 = 10.\n        # There are more than enough 2s so only count the 5s.\n        factors_of_5 = n // 5 + n // 25 + n // 125 + n // 625\n        if factors_of_5 == 28:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "from sympy import primerange\n\ndef solution():\n    # Find all primes less than 41 since 3a + 7b will not exceed 41\n    primes = list(primerange(1, 41))\n    \n    # Check through each pair of primes for a match\n    for a in primes:\n        for b in primes:\n            if 3*a + 7*b == 41:\n                return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    cost_per_4pc = 7\n    cost_per_6pc = 8.5\n\n    price_per_pc_4pc = cost_per_4pc / 4\n    price_per_pc_6pc = cost_per_6pc / 6\n\n    return '4pc' if price_per_pc_4pc < price_per_pc_6pc else '6pc'\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # To ensure Jane gets 4 different coloured marbles, assume the worst case scenario\n    # where she draws the most number of marbles of the same color before getting all the colors.\n    # Since there are at least 2 marbles of each color, Jane might take all but one marble of every color,\n    # and then one more to get the last color.\n    # Therefore, the number of marbles she needs to draw is:\n    # max(red-1, green-1, blue-1, orange-1) + 1 (for the last color)\n\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # We subtract one from each and take the max to get worst case scenario without the last color\n    worst_case_without_last_color = max(red - 1, green - 1, blue - 1, orange - 1)\n    \n    # Then we add one to ensure we have the last color\n    total_marbles = worst_case_without_last_color + 1\n\n    return total_marbles\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    spent_phone = 740\n    remaining = salary - spent_phone\n    spent_rent = remaining * 0.75\n    left_ratio = 1/5\n\n    # Equation that represents Kiera's expenses and what she has left\n    equation = Eq(spent_phone + spent_rent, salary * (1 - left_ratio))\n\n    # Solve the equation for the salary\n    solution_dict = solve(equation, salary)\n\n    return solution_dict[salary]\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    # Let x be the weight of the basket\n    # Let y be the weight of each apple\n    # From the problem, we have two equations:\n    # 5y + x = 580\n    # 2y + x = 280\n    # By solving these equations we can find the value of x\n\n    # Subtract the second equation from the first to get the weight of 3 apples\n    # (5y + x) - (2y + x) = 580 - 280\n    # 3y = 300\n    # y = 300 / 3\n    y = 300 / 3\n\n    # Use the value of y to solve for x from the second equation\n    # x = 580 - 5y\n    x = 580 - 5*y\n    \n    return int(x)\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    num_list = ['2', '3', '4']\n    count = 0\n    \n    for i in range(1, len(num_list) + 1):\n        perm = permutations(num_list, i)\n        count += len(list(perm))\n        \n    return count\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    remaining_after_class = 150\n    drunk_after_class = 100\n    \n    # If Pip drank 100ml after class and there were 150ml left,\n    # it means half the bottle's content was 250ml (100 + 150).\n    half_bottle = remaining_after_class + drunk_after_class\n    \n    # Pip drank half of the original amount before the class, \n    # hence the original content equals to twice the half_bottle amount.\n    original_content = half_bottle * 2\n    \n    return original_content\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    # There are 36 possible outcomes when two dice are thrown (6 sides on each die)\n    total_outcomes = 6 * 6\n    \n    # Outcomes with sum greater than 10 are (5, 6), (6, 5), and (6, 6)\n    favorable_outcomes = 3\n    \n    # Probability of getting a sum greater than 10\n    prob = favorable_outcomes / total_outcomes\n    \n    # Expected win per game is the probability of winning multiplied by the amount won minus the initial bet\n    expected_win_per_game = prob * (10 - 1)  # 10 pounds won minus 1 pound bet\n    \n    # Expected loss per game is the probability of losing multiplied by the amount lost\n    expected_loss_per_game = (1 - prob) * 1  # 1 pound bet\n    \n    # Expected net outcome per game\n    expected_net_per_game = expected_win_per_game - expected_loss_per_game\n    \n    # Expected net outcome for 60 games\n    expected_net_60_games = expected_net_per_game * 60\n    \n    # Return the expected loss (negative of the expected net outcome)\n    return -expected_net_60_games\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    total_mushrooms = 40\n    second_hour_mushrooms = (total_mushrooms + 26) / 2\n    return second_hour_mushrooms\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n    \n    equation1 = Eq(lynn - 160, mary - 58)\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    return solutions[lynn] - 160\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n\n    def triangle(A, B):\n        return 5 * A - B * B\n\n    ans = triangle(diamond(4, 2), 6)\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    initial_grapes = 210\n    sold_monday = initial_grapes * (3/7)\n    remaining_after_monday = initial_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_grapes = remaining_after_monday - sold_tuesday\n    bag_weight = 3/4\n    number_of_bags = remaining_grapes / bag_weight\n    \n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    remaining_tickets_percent = 100 - 60\n    total_tickets = 28 * 100 / remaining_tickets_percent\n    return int(total_tickets)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    # Starting point is 02:31\n    hours, minutes = 2, 31\n\n    while True:\n        minutes += 1\n        if minutes == 60:\n            minutes = 0\n            hours += 1\n        if hours == 24:\n            hours = 0\n\n        # Convert the hours and minutes to strings and append them\n        time_str = f\"{hours:02d}{minutes:02d}\"\n        \n        # Check if all the digits 0, 1, 2, 3 are in the time string\n        if all(digit in time_str for digit in \"0123\"):\n            break\n\n    # Calculate and return the difference in minutes since 02:31\n    total_minutes = (hours - 2) * 60 + (minutes - 31)\n    return total_minutes\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    total_students_fifth_grade = 6 * 36\n    total_students_sixth_grade = 3 * 38\n    total = total_students_fifth_grade + total_students_sixth_grade\n    return total\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    divisor = 27\n    remainder = 9\n    # Using the formula Dividend = Divisor * Quotient + Remainder\n    dividend = divisor * (divisor - 1) + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Devis and Jerry's current ages\n    devis, jerry = symbols('devis jerry')\n\n    # Equation based on the information that Devis is 8 years older than Jerry\n    equation1 = Eq(devis, jerry + 8)\n\n    # Equation based on the future ratio of their ages in 4 years\n    equation2 = Eq((devis + 4) / (jerry + 4), 5/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (devis, jerry))\n\n    # Jerry's age is the second value in the tuple solution\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum((-1)**(i+1) * (64 - 2*i) for i in range(11))\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    for tens_subtrahend in range(10):\n        for ones_subtrahend in range(10):\n            for tens_minuend in range(1, 10):\n                for ones_minuend in range(10):\n                    mistaken_subtrahend = 10 * (tens_subtrahend + 2) + (ones_subtrahend - 1)\n                    correct_subtrahend = 10 * tens_subtrahend + ones_subtrahend\n                    minuend = 10 * tens_minuend + ones_minuend\n                    if minuend - mistaken_subtrahend == 36 and tens_subtrahend == 3 and ones_subtrahend == 2:\n                        correct_difference = minuend - correct_subtrahend\n                        return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x - 4, 41)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jugs_needed = (total_ml + 249) // 250\n    return jugs_needed\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1\n    blue_balls = 1\n\n    red_balls_to_remove = 0\n    while True:\n        current_red_balls = 49 - red_balls_to_remove\n        if current_red_balls / total_balls == 0.9:\n            break\n        red_balls_to_remove += 1\n        total_balls -= 1\n\n    return red_balls_to_remove\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    sum = 0\n    term = 1\n    for i in range(97, 0, -1):\n        term *= (100 - (97 - i))\n        term /= i\n        sum += term\n    return sum\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    number_of_matches = 220\n\n    matches_weight = total_weight_with_matches - empty_box_weight\n    weight_per_match = matches_weight / number_of_matches\n\n    return weight_per_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    # Let x be the number of cows and y be the number of birds\n    # We know that:\n    # x + y = 1300; (1)\n    # 4x (the number of legs for cows) + 2y (the number of legs for birds) = 3440; (2)\n\n    # Using substitution to solve the equation system\n    # From (1), we express y in terms of x\n    # y = 1300 - x\n\n    # Substitute y in (2)\n    # 4x + 2(1300 - x) = 3440\n    # 4x + 2600 - 2x = 3440\n    # 2x = 3440 - 2600\n    # x = (3440 - 2600) / 2\n\n    x = (3440 - 2600) // 2\n\n    # Return the number of cows\n    return x\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    # Let's denote the number of pens Ben has initially as x.\n    # According to the problem, if Jenny gives Ben 28 pens, they will have the same number.\n    # Jenny has 83 pens initially, so after giving away 28, she will have 83 - 28 pens.\n    # This will be equal to the number of pens Ben has after receiving the 28 pens.\n    # That is, x + 28 = 83 - 28\n    # Solving for x gives us the number of pens Ben has initially.\n    \n    jenny_pens_initial = 83\n    jenny_pens_after = jenny_pens_initial - 28\n    ben_pens_after = jenny_pens_after\n    ben_pens_initial = ben_pens_after - 28\n    \n    return ben_pens_initial\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return int(total_books)\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # The distance covered by the trees\n    total_distance = (21 - 1) * 2\n\n    # The interval for lamp posts\n    lamp_post_interval = 10\n\n    # Number of lamp posts required\n    num_lamp_posts = (total_distance // lamp_post_interval) + 1\n\n    return int(num_lamp_posts)\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    return 15.05 - 14.84\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd = symbols('laptop dvd')\n\n    equation1 = Eq(5 * laptop + 4 * dvd, 14438)\n    equation2 = Eq(laptop + dvd, 2960)\n\n    solutions = solve((equation1, equation2), (laptop, dvd))\n\n    return solutions[dvd]\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Define symbols for velocity components of the combined cars after impact\n    vx, vy = symbols('vx vy')\n\n    # Since the cars are of the same mass and stick together, we can use conservation of momentum\n    # Initial momentum in the north direction (y direction) is just the first car\n    # Initial momentum in the west direction (x direction) is the second car\n    momentum_north = 500 * 20  # m1*v1y = 500kg * 20m/s\n    momentum_west = 500 * 30   # m2*v2x = 500kg * 30m/s\n\n    # Final momentum in the north direction (y) is (m1 + m2)*vy = 1000*vy\n    # Final momentum in the west direction (x) is (m1 + m2)*vx = 1000*vx\n\n    # Since momentum is conserved, the final momentum should be equal to the initial momentum\n    equation_north = Eq(1000 * vy, momentum_north)\n    equation_west = Eq(1000 * vx, -momentum_west)  # negative sign because west is the negative x direction\n\n    # Solve the system of equations for vx and vy\n    solution = solve((equation_north, equation_west), (vx, vy))\n\n    # Calculate the magnitude of the resultant velocity vector using Pythagorean theorem\n    velocity_magnitude = sqrt(solution[vx]**2 + solution[vy]**2)\n\n    return velocity_magnitude.evalf()\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    # A 3-digit odd number divisible by 9 must also have the sum of its digits divisible by 9\n    # Moreover, the tens digit must be divisible by 4, so the tens digit can be 0, 4, or 8\n    # Since we want the greatest number, we'll try 8 first in the tens place\n    # And since the number should be odd, the last digit should be odd\n    # We will start from the greatest number and decrement by 9 (because it has to be divisible by 9)\n\n    for hundreds_digit in range(9, 0, -1):  # Starts from 9 to get the greatest number\n        for units_digit in [9, 7, 5, 3, 1]:  # Looking for odd digits\n            candidate = hundreds_digit * 100 + 8 * 10 + units_digit  # Forming the 3-digit number\n            if candidate % 9 == 0:\n                return candidate  # Found the greatest 3-digit odd number divisible by 9 with tens digit divisible by 4\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n    ans = sizes * colors\n    return ans\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "def solution():\n    # Since each letter represents a different digit, and the sum of three \"one-triangle\" digits\n    # forms a \"four-triangle\" number, there are only limited possibilities we can consider.\n    # For instance, the only possible sums for a three-digit number using distinct digits that\n    # ends in 0 are 190, 280, 370. We base these on the fact that the maximum sum of 3 distinct digits\n    # would be 9 + 8 + 7 (since they can't be the same digit) and the minimum is 1 + 2 + 3.\n    # We'll iterate over the possible values for \"one triangle\" digit (1 through 9) and check if\n    # there is a valid combination of 3 distinct digits that sum up to a number that ends in 0.\n    \n    for triangle in range(1, 10):\n        for d2 in range(10):\n            for d3 in range(10):\n                if len({triangle, d2, d3}) == 3:\n                    if (triangle + d2 + d3) % 10 == 0:\n                        # We have found a valid combination where the sum ends in 0\n                        return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i + 1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_length = 5\n    repetition = 2000 // pattern_length\n    partial_sum = sum(range(1, 6))  # Sum of digits in the pattern 12345\n\n    full_pattern_sum = partial_sum * repetition\n    remaining_digits = 2000 % pattern_length\n    remaining_sum = sum(range(1, 1 + remaining_digits))\n\n    ans = full_pattern_sum + remaining_sum\n    return ans\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15  # Total cost in pounds\n    coffee_cost = 3.69  # Coffee cost in pounds\n    milk_cost = 0.89  # Milk cost in pounds (converted from pence to pounds)\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)  # Calculate sugar cost\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        hours_passed = hour\n        hours_remaining = 12 - hour\n        if hours_passed == 2 * hours_remaining:\n            return hour\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Maximum number of balls she needs to take to ensure\n    # she has 4 of at least one color:\n    # Taking all of the balls of the other two colors first (worst case scenario)\n    # plus one more ball to guarantee the fourth of the same color.\n    max_other_balls = 4 + 2  # Maximum number of orange and yellow balls combined\n    balls_needed = max_other_balls + 1  # Add one more to get the fourth blue ball\n\n    return balls_needed\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    # Let x be the original average weight of the group\n    # Let n be the number of people in the group before Aaron joined\n\n    # When Aaron joins:\n    # (nx + 45) / (n + 1) = 61\n    # => nx + 45 = 61(n + 1)\n    # => nx + 45 = 61n + 61\n    # => nx - 61n = 61 - 45\n    # => n(x - 61) = 16\n\n    # When Ben joins:\n    # (nx + 45 + 71) / (n + 2) = 62\n    # => nx + 45 + 71 = 62(n + 2)\n    # => nx + 116 = 62n + 124\n    # => nx - 62n = 124 - 116\n    # => n(x - 62) = 8\n\n    # We have two equations:\n    # n(x - 61) = 16 (1)\n    # n(x - 62) = 8  (2)\n\n    # Subtract equation (2) from (1):\n    # n(x - 61) - n(x - 62) = 16 - 8\n    # n = 8\n\n    # Substitute n back into equation (1):\n    # 8(x - 61) = 16\n    # x - 61 = 2\n    # x = 63\n\n    # So the average weight of the group before Aaron and Ben joined them was 63kg.\n    return 63\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    weight_oranges_kg = 4.1\n    price_mangoes_per_kg = 2.3\n    weight_mangoes_kg = 2\n\n    total_cost = (price_oranges_per_kg * weight_oranges_kg) + (price_mangoes_per_kg * weight_mangoes_kg)\n    \n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # List of known numbers\n    mean_value = 5  # The given mean value\n    \n    total_sum = sum(numbers)  # Sum of the known numbers\n    num_numbers = len(numbers) + 1  # Total numbers including the unknown 'a'\n    \n    # Calculate total sum including 'a' using the mean formula\n    # mean = (total_sum of numbers including 'a') / (number of numbers including 'a')\n    total_sum_including_a = mean_value * num_numbers\n    \n    # Calculate the value of 'a' by subtracting known total from total including 'a'\n    a = total_sum_including_a - total_sum\n    \n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    A_rate = 1 / 15\n    B_rate = 1 / 10\n    days_worked_together = 4\n    \n    work_done_together = days_worked_together * (A_rate + B_rate)\n    remaining_work = 1 - work_done_together\n    days_B_to_finish = remaining_work / B_rate\n    \n    return days_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculating the sum of the first sequence\n    sum_sequence1 = sum(range(1, 14))\n\n    # The second sequence is the same as the first but without the first term, so we subtract it\n    sum_sequence2 = sum_sequence1 - 1\n\n    # Finally, we add both sequences together to get the total sum\n    total_sum = sum_sequence1 + sum_sequence2\n    \n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction_amount = original_price - reduced_price\n    reduction_percentage = (reduction_amount / original_price) * 100\n    return reduction_percentage\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    num_bottles = 1000\n    test_tubes = 1\n\n    while 2 ** test_tubes < num_bottles:\n        test_tubes += 1\n\n    return test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    number = 100\n    while not (number % 5 == 1 and number % 6 == 1 and number % 7 == 1):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Number of legs that ducklings, baby geese, and lambs have, respectively.\n    ducklings_legs = 4 * 2\n    baby_geese_legs = 2 * 2\n    lamb_legs = 4\n\n    # Total legs from ducklings and baby geese.\n    total_known_legs = ducklings_legs + baby_geese_legs\n\n    # Total legs to subtract from 36 to find out how many legs the lambs have.\n    remaining_legs_for_lambs = 36 - total_known_legs\n\n    # Number of lambs based on remaining legs.\n    num_lambs = remaining_legs_for_lambs // lamb_legs\n\n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    liters = 2.5\n    milliliters_per_liter = 1000\n    n = liters * milliliters_per_liter\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    # On the fourth day, he ate 1/4 of the remaining sweets\n    # Let's reverse the process: if 6 is the three-quarters (1 - 1/4) that remained, then \n    before_fourth_day = remaining_sweets / (1 - 1/4)\n\n    # On the third day, he ate 1/5 of the remaining sweets, \n    # so we apply the reverse process again\n    before_third_day = before_fourth_day / (1 - 1/5)\n\n    # On the second day, he ate 1/6 of the remaining sweets\n    before_second_day = before_third_day / (1 - 1/6)\n\n    # On the first day, he ate 1/7 of the sweets\n    initial_sweets = before_second_day / (1 - 1/7)\n    \n    return int(initial_sweets)\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of cookies Charlene had at first.\n    x = symbols('x')\n\n    # Charlene kept 1/2 of the cookies plus 8.\n    charlene_cookies = 1/2 * x + 8\n\n    # Emerald received the remaining cookies.\n    emerald_cookies = x - charlene_cookies\n\n    # Emerald ate 1/3 of the cookies plus 4.\n    emerald_ate = 1/3 * emerald_cookies + 4\n    \n    # Emerald gave the remaining cookies to Hebe.\n    hebe_cookies = emerald_cookies - emerald_ate\n\n    # Hebe ate 1/4 of the cookies and had 42 left.\n    equation = Eq(1/4 * hebe_cookies + 42, hebe_cookies)\n\n    # Solve for x\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    total_diff = 52\n    # Let n be the number of layers. There will be n layers of boys and n-1 layers of girls.\n    # We start testing from n = 1 until the difference between boys and girls is met\n    n = 1\n    while True:\n        # The number of students in the n-th layer (both boys and girls) is (2n - 1)^2\n        # The number of students in the (n-1)-th layer (all girls) is (2n - 3)^2\n        # The difference in the n-th layer (boys - girls) is (2n - 1)^2 - (2n - 3)^2\n        diff = (2 * n - 1) ** 2 - (2 * n - 3) ** 2\n        # When the difference meets the required difference, break the loop\n        if diff == total_diff:\n            total_students = (2 * n - 1) ** 2\n            return total_students\n        n += 1\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    n = Symbol('n')\n    # For n teams, each team plays (n-1) other teams two times\n    matches = n * (n - 1)\n    \n    # Number of matches played in total is twice the number of unique matches\n    eq = matches - 30*2\n    \n    # Solve for number of teams\n    teams = solve(eq, n)\n    \n    # Return only the positive solution (as number of teams cannot be negative)\n    return [team for team in teams if team.is_real and team > 0][0]\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_to_make = 3600\n    days_for_720_sets = 5\n\n    total_days = (total_sets_to_make / sets_made_in_5_days) * days_for_720_sets\n\n    return int(total_days)\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n    \n    # Nelson can reach step 5 in fib(5) ways\n    # After reaching step 5, he can reach step 10 in fib(6) ways\n    # Because he can either go to step 6 (1 way) and then has fib(5) ways to finish\n    # Or he goes directly to step 7 (1 way) and then has fib(4) ways to finish\n    return fib(5) * fib(6)\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first_num, second_num, third_num = symbols('first_num second_num third_num')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(first_num, second_num + 1099)\n    equation2 = Eq(third_num, second_num - 877)\n    equation3 = Eq(first_num + second_num + third_num, 7656)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first_num, second_num, third_num))\n\n    return solutions[second_num]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation = Eq(girls, 3 * boys - 21)\n    solutions = solve((equation, Eq(girls, 45)), (girls, boys))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    prime_factors = [2, 2, 2, 3, 8, 5, 5, 25]\n    twos = 0\n    fives = 0\n    \n    for factor in prime_factors:\n        while factor % 2 == 0:\n            twos += 1\n            factor //= 2\n        while factor % 5 == 0:\n            fives += 1\n            factor //= 5\n    \n    # The number of zeros at the end is determined by the pairings of 2's and 5's\n    ans = min(twos, fives)\n    return ans\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8):  # 49 is the only square number between 40 and 50 (7^2)\n        n = i ** 2\n        if 40 < n < 50:\n            return n\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    cups_poured = 3\n\n    water_left = initial_volume - (cup_volume * cups_poured)\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    ans = 936 // 54\n    return ans\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Total cost equation\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n\n    # Cost equation for a notebook and a pencil case\n    equation2 = Eq(notebook + pencil_case, 6)\n\n    # Cost equation for a pencil case and an eraser\n    equation3 = Eq(pencil_case + eraser, 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    \n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    \n    # In 10 years' time, their total age will be 53 years old\n    equation2 = Eq(alice + sister + 20, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    factor = 3024 \n    for i in range(1, int(factor ** (1/4)) + 1): \n        if factor % i == 0:\n            if factor % (i + 1) == 0:\n                if factor % (i + 2) == 0:\n                    if factor % (i + 3) == 0:\n                        return i + 3\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    return 527 - 9\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n    \n    # Find the least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n    \n    # Calculate the least number of packs needed to get at least 1000 markers\n    # by dividing 1000 by the number of markers in each combined pack (LCM)\n    # and rounding up to the nearest whole number\n    packs_needed = -(-1000 // pack_lcm)\n    \n    # The total number of packs is the number of each type of pack needed\n    total_packs = 4 * packs_needed\n    \n    return total_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    num_students = 10\n    handshakes = num_students * (num_students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    def convert_recurring_decimal(a, b, c, d):\n        non_recurring_length = len(a)\n        recurring_length = len(b)\n        numerator = int(a + b) - int(a)\n        denominator = int('9' * recurring_length + '0' * non_recurring_length)\n        whole_part = int(c)\n        fraction_part = d\n        fraction_denominator = 10 ** len(d)\n        total_numerator = whole_part * denominator * fraction_denominator + numerator * fraction_denominator + int(fraction_part)\n        total_denominator = denominator * fraction_denominator\n        return total_numerator, total_denominator\n\n    def gcd(x, y):\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    n1_num, n1_den = convert_recurring_decimal('0', '1', '0', '199251')\n    n2_num, n2_den = convert_recurring_decimal('0', '23', '0', '456')\n\n    lcm_denominator = (n1_den * n2_den) // gcd(n1_den, n2_den)\n\n    n = 1\n    while True:\n        digit_n1 = (n1_num * (10 ** n)) // n1_den % 10\n        digit_n2 = (n2_num * (10 ** n)) // n2_den % 10\n        if digit_n1 == digit_n2 == 7:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    # Let's denote the number of apples Anne has as A.\n    # According to the problem, Maria has A + 20 apples.\n    \n    # The total number of apples when Maria and Anne are combined is 44.\n    # So, we have the equation: A + (A + 20) = 44\n\n    # Solving for A:\n    A = (44 - 20) / 2  # Rearrange the equation to isolate A\n\n    return int(A)  # Return the result as an integer\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    numbers = [678, 6798, 6879, 9876, 6987]\n    target = 6789\n    \n    closest_number = min(numbers, key=lambda num: abs(num - target))\n    \n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100) * 90 - (90 / 100) * 20\n    return difference\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the common difference, n be the number of days\n    d, n = symbols('d n')\n\n    # The sum of an arithmetic series S = n/2 * (first_term + last_term)\n    # S = 550, first_term = 30, last_term = 70\n\n    equation1 = Eq(n / 2 * (30 + (n - 1) * d), 550)\n    equation2 = Eq(30 + (n - 1) * d, 70)\n\n    solutions = solve((equation1, equation2), (d, n))\n\n    return int(solutions[d])\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    ans = morning_fruit - afternoon_fruit\n    return ans\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_amount = 10  # in grams\n\n    water_amount = (orange_amount / orange_ratio) * water_ratio\n\n    return water_amount\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    required_average = 8.5\n    required_total = required_average * 5\n    current_total = sum(scores)\n    final_score_required = required_total - current_total\n\n    return final_score_required\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let `r` be the annual interest rate\n    r = symbols('r')\n    \n    # Equation based on the compound interest formula:\n    # P(1 + r)^n = P + I, where P is the principal amount ($10000),\n    # I is the interest ($816), and n is the number of years (2)\n    equation = Eq(10000 * (1 + r)**2, 10000 + 816)\n\n    # Solve for the interest rate `r`\n    rate_per_year = solve(equation, r)\n\n    # Since the solve function can return multiple solutions including complex numbers,\n    # we are interested in the positive real solution, thus we pick the solution that is real and positive\n    rate_per_year = [float(sol.evalf()) for sol in rate_per_year if sol.is_real and sol > 0]\n    \n    # We expect the list to have one element, the interest rate,\n    # Multiply by 100 to get percentage and round to two decimal places\n    return round(rate_per_year[0] * 100, 2)\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # Correct approach to find the quotient and remainder when a number is divided by 4\n    # Given equation: 'number' ÷ 4 = 9 R 2\n    \n    # To find the original number (dividend), we use the formula:\n    # dividend = (divisor * quotient) + remainder\n    divisor = 4\n    quotient = 9\n    remainder = 2\n    \n    dividend = (divisor * quotient) + remainder\n    \n    # Check Johnny's solution\n    johnnys_solution = (quotient * remainder) + divisor # This is incorrect\n    \n    # Check if Johnny's answer matches the correct dividend\n    is_correct = johnnys_solution == dividend\n    \n    return (dividend, is_correct)\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    answer = 43\n    original_number = (answer - 7) / 2\n    return original_number\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    hannah_speed = symbols('hannah_speed')\n    \n    # We know that Time = Distance/Speed and the distance is the same for both\n    # Since ratio of times is 3:4 => Peter's time is 3/4 of Hannah's time\n    # Let x be the speed of Hannah, so speed of Peter is x + 15\n    # Thus, Peter's speed / Hannah's speed = Hannah's time / Peter's time = 4 / 3\n    \n    # Set up the proportion equation\n    equation = Eq((hannah_speed + 15) / hannah_speed, 4 / 3)\n\n    # Solve the equation\n    solution = solve(equation, hannah_speed)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    emily, victor, victoria = symbols('emily victor victoria')\n    \n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n    \n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n    \n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    # Let the number of 50-cent coins originally be f\n    # Let the number of 1-dollar coins originally be d\n    # From the problem we know that f / (f + d) = 2/7\n    # So, 7f = 2f + 2d => 5f = 2d => d = (5/2)f\n    # Mother gave 10 one-dollar coins and 5/0.5 = 10 fifty-cent coins\n    # After receiving the coins, Owen has twice as many one-dollar coins as fifty-cent coins.\n    # f + 10 = 0.5(d + 20)\n    # Substitute d in terms of f\n    # => f + 10 = 0.5((5/2)f + 20)\n    # => f + 10 = (5/4)f + 10\n    # => (1/4)f = 0\n    # There are only positive integers coins, so the minimum coins of f is 4 (0 would not make sense because he had some coins).\n    # Therefore, 4 fifty-cent coins and 10 one-dollar coins initially.\n\n    num_fifty_coins_initially = 4\n    num_one_dollar_coins_initially = int((5 / 2) * num_fifty_coins_initially)\n    total_initial_coins = num_fifty_coins_initially + num_one_dollar_coins_initially\n\n    return total_initial_coins\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    multiple_choice_time = 23\n    fill_in_blank_time = 35\n    \n    short_answers_time = total_time - (multiple_choice_time + fill_in_blank_time)\n    \n    return short_answers_time\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # train speed in meters per second\n    train_length = 850 # train length in meters\n    crossing_time = 45 # time to cross the tunnel in seconds\n\n    # Distance covered by the train to completely cross the tunnel\n    total_distance = train_speed * crossing_time\n\n    # Length of the tunnel\n    tunnel_length = total_distance - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    ans = circles * (circles - 1) + 2*circles + 1 + line\n    return ans\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from math import factorial\n\ndef solution():\n    # Total ways to choose entrances for Joe, Mike, and Tina without restrictions\n    total_ways = factorial(4) * factorial(3)\n    \n    # Ways Joe and Mike enter the same entrance (Tina has 3 choices & Joe and Mike share 1)\n    same_entrance_ways = 1 * factorial(3) * factorial(2)\n    \n    # Subtract the restricted ways from the total ways\n    ans = total_ways - same_entrance_ways\n    return ans\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    spent_money = total_money - saved_money\n    \n    # Let's denote the money spent on transportation as x.\n    # Money spent on food would then be 2 * x.\n    # Thus, x + 2 * x (money for transportation + money for food) = spent_money.\n    # Simplifying gives us 3 * x = spent_money.\n    # Therefore, x = spent_money / 3 is the money spent on transportation.\n    \n    food_spending = 2 * (spent_money / 3)\n    \n    return food_spending\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Initial cost for first 3 tons + fixed service fee\n    initial_cost = 4 * 3 + 4\n    \n    # Amount remaining for additional water usage\n    remaining_amount = 109 - initial_cost\n    \n    # Calculate the maximum additional tons she can use\n    additional_tons = remaining_amount // 3\n    \n    # Total tons of water is the sum of the first 3 tons + additional tons\n    total_tons = 3 + additional_tons\n    \n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    return (45*7 + 13*7) // 7\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amelia = 160\n    daniel = symbols('daniel')\n    bala = daniel + 320\n    carl = symbols('carl')\n    total_cookies = 6230\n    \n    equation1 = Eq(bala, (1/2) * (amelia + carl + daniel))\n    equation2 = Eq(carl, (3/4) * (amelia + bala + daniel))\n    equation3 = Eq(amelia + bala + carl + daniel, total_cookies)\n\n    solutions = solve((equation1, equation2, equation3), (carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_dividend = quotient * (remainder + 1) + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    # Let's define the rates in lawns per hour\n    rate_quick = 1 / 12\n    rate_together = 1 / 8\n\n    # The rate of the lazy gardener can be found by subtracting the quick gardener rate from their combined rate\n    rate_lazy = rate_together - rate_quick\n\n    # The time it takes for the lazy gardener to mow the lawn on his own is the inverse of his rate\n    time_lazy = 1 / rate_lazy\n\n    return time_lazy\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples - apples/3 + oranges - oranges/2, 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9 + 0  # Total candy brought by Eve and Alice\n    number_of_girls = 3  # Eve, Alice, and Irene\n\n    candy_per_girl = total_candy // number_of_girls  # Divide the candy equally among the girls\n\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    noah, pete, howard = symbols('noah pete howard')\n    \n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n    \n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda = 36\n    belinda_after_giving = belinda - 7\n    matthew_before = belinda_after_giving\n\n    return matthew_before\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    initial_amount = 182\n    cost_per_dress = 5\n    cost_per_skirt = 3\n    remaining = 5 * x\n\n    equation = Eq(initial_amount - (cost_per_dress + cost_per_skirt) * x, remaining)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    return floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import gcd\n\n    green_line_interval = 5\n    red_line_interval = 6\n\n    lcm = (green_line_interval * red_line_interval) // gcd(green_line_interval, red_line_interval)\n\n    hours = lcm // 60\n    minutes = lcm % 60\n\n    start_time_hour = 5\n    start_time_minute = 0\n\n    next_common_time_hour = (start_time_hour + hours) % 24\n    next_common_time_minute = (start_time_minute + minutes) % 60\n\n    return (next_common_time_hour, next_common_time_minute)\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    # Initialize the answer variable\n    ans = 0\n    \n    # Start with the first term\n    term = 1    \n\n    # Since the last terms are 13*14, it implies that we have 7 terms in total\n    for i in range(7):\n        ans += term\n        term *= (2 * i + 3)  # Every new term is multiplied by an odd number starting from 3\n        \n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990\n    half_jug_capacity_ml = jug_capacity_ml / 2\n    capacity_per_cup_ml = half_jug_capacity_ml / 3\n    return capacity_per_cup_ml\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n\n    position_from_back = total_cars - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the price of one apple and one banana\n    apple, banana = symbols('apple banana')\n\n    # Given equation 1: 3 apples and 2 bananas cost £1.25\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n\n    # Given equation 2: 1 apple and 1 banana cost £0.48\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas using the obtained price per banana\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_100g = 80\n    grams_needed = 250\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * grams_needed\n    return total_cost\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum(i**2 for i in range(6, 52, 5))\n    return ans\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Distance between each tree\n    distance_per_tree = 3  # meters\n    \n    # Total distance from first tree to the 101th tree\n    distance_to_101th_tree = (101 - 1) * distance_per_tree  # Olivia is starting from the first tree\n    \n    # Time taken to walk from the first tree to the 101th tree in minutes\n    time_to_101th_tree = 3  # minutes\n    \n    # Olivia's walking speed in meters per minute\n    walking_speed = distance_to_101th_tree / time_to_101th_tree  # meters/minute\n    \n    # Total distance to Olivia's home\n    total_distance_to_home = 4000  # meters\n    \n    # Total time taken to travel to school from home\n    total_time_to_school = total_distance_to_home / walking_speed  # minutes\n\n    return total_time_to_school\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Ratio of 1 rabbit to fish is 5 fish / 2 rabbits => 2.5 fish for 1 rabbit\n    fish_per_rabbit = 5 / 2\n    # Ratio of fish to packs of wheat can be found from transactions\n    # 4 rabbits are traded for 7 packs of wheat\n    # Therefore, 1 pack of wheat is traded for (4 rabbits)/(7 packs) => rabbit per pack of wheat\n    rabbits_per_pack = 4 / 7\n    # Now, find the fish per pack of wheat by multiplying the two ratios\n    # (fish per rabbit) * (rabbits per pack) = fish per pack\n    fish_per_pack = fish_per_rabbit * rabbits_per_pack\n    # Owen wants to trade for 14 packs of wheat\n    # Multiply the number of packs by the fish per pack to get the answer\n    fish_for_14_packs = fish_per_pack * 14\n\n    return fish_for_14_packs\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "def solution():\n    from itertools import permutations\n\n    ways = 0\n    for perm in permutations('123', 3):\n        for person in 'LJAJ':\n            ways += len(set(list(perm + person)))\n    \n    # Count the ways where three different entrances are chosen by the four people\n    return ways\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    for correct in range(7):\n        incorrect = 6 - correct\n        score = correct*5 - incorrect*2\n        if score == 23:\n            return correct\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of animals initially\n    # Let g be the number of goats initially\n    # Cows would then be 0.65x (since 65% are cows)\n    x, g = symbols('x g')\n    equation1 = Eq(0.65 * x, x - g)  # 65% of initial animals were cows\n\n    # When 240 more cows and goats are added, cows become 85% (65% + 20%)\n    # Goats double in number, so they become 2g\n    equation2 = Eq(0.85 * (x + 240), x - g + 240)  # New percentage of cows\n    equation3 = Eq(2 * g, g + 240)  # Number of goats doubled\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Calculating the sum using the formula: 1³+2³+3³+......+n³=(1+2+3+......+n)²\n    # However, the sequence given is a multiple of 4, so we need to scale the formula accordingly\n    \n    # Finding the number of terms in the series: 124/4 = 31 terms\n    n = 124 // 4\n    \n    # The standard sum of sequence 1+2+3+...+n is (n*(n+1))/2\n    # Since we are dealing with multiples of 4, the sum becomes (4*1 + 4*2 + ... + 4*n)\n    # We can factor out the 4 to get 4*(1+2+...+n), and then apply the sum of sequence formula:\n    sum_of_sequence = 4 * (n * (n + 1) // 2)\n    \n    # The square of that sum will give us the answer according to the provided formula:\n    ans = sum_of_sequence ** 2\n    \n    return ans\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    ans = sum(numbers) / len(numbers)\n    return ans\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solution = solve(equation, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    num_drawings = 111\n    total_time = time_per_drawing * num_drawings\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            break\n        cookies += 1\n    return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    ans, _ = solve_congruence(*congruences)\n    \n    while ans < 100:\n        return ans\n        ans += 4*5*6\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n    \n    final_payment = total_cost - discount\n    \n    return final_payment\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    return 828 + 191\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_six_cases = books_per_case * 6\n    return total_books_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to arrange two boys in two positions (at each end)\n    arrangements_boys = factorial(2)\n    \n    # Number of ways to arrange three girls in three positions (in the middle)\n    arrangements_girls = factorial(3)\n    \n    # Apply the multiplication principle to find the total arrangements\n    total_arrangements = arrangements_boys * arrangements_girls\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    for idx, age in enumerate(ages):\n        if age % 3 == 0 and ages[idx] != ages[-1]:  # Tom's age is a multiple of 3 and not the oldest\n            return ages[idx]\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # If we take two balls from each color, we can end up with only two colors\n    # This is the worst case scenario without getting three different colors\n    # Therefore, we need to draw one more ball to guarantee the third color\n    balls_drawn = (2 * 3) + 1\n    return balls_drawn\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    num_str = '2023'\n    n = 1\n    while True:\n        current_num = int(num_str * n)\n        if current_num % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    return 224 - 75\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 / 21\n    return ans\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    total_apples = 28\n    num_children = 6  # Avril + 5 other children\n\n    # To maximize the apples Avril gets, we should minimize the apples others get.\n    # To do this, we allocate the apples to the others in increasing order, starting from 1.\n    apples_for_others = list(range(1, num_children))  # 1, 2, ..., num_children - 1\n    apples_for_avril = total_apples - sum(apples_for_others)\n    \n    return apples_for_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    # Let's use algebra to solve this, by substituting each symbol with a variable.\n    # Let's assume:\n    # triangle = a\n    # square = b\n    # circle = c\n    # diamond = d\n\n    # From the given information,\n    # a + a = b  -> (1)\n    # b + a = c  -> (2)\n    # d = c + b + a -> (3)\n\n    # From equation (1), we get: 2a = b -> a = b/2 -> b = 2a\n\n    # Substituting b = 2a in equation (2), we get:\n    # 2a + a = c -> 3a = c\n\n    # Now, let's substitute b = 2a and c = 3a in equation (3),\n    # d = 3a + 2a + a -> d = 6a\n\n    # Hence, ◆ (diamond) is equal to 6 ■ (triangles).\n    ans = 6\n    return ans\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5/8\n\n    laptop_cost = total_money * fraction_spent\n\n    return laptop_cost\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # meters per second\n    ratio_jocye_lori = 3 / 2\n    jocye_speed = lori_speed * ratio_jocye_lori\n    time = 10  # seconds\n\n    distance_jocye = jocye_speed * time\n    return distance_jocye\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    original_total = original_average * 2\n    new_total = new_average * 3\n    new_number = new_total - original_total\n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define the times based on the question\n    left_school_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    caught_bus_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    drop_off_time = caught_bus_time + timedelta(minutes=18)\n    home_time = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    # Time spent walking is the difference between leaving school and catching the bus\n    # plus the difference between getting off the bus and getting home\n    first_walk_duration = caught_bus_time - left_school_time\n    second_walk_duration = home_time - drop_off_time\n\n    # Total walking time in minutes\n    total_walking_time = first_walk_duration.total_seconds() / 60 + \\\n                         second_walk_duration.total_seconds() / 60\n    \n    return int(total_walking_time)\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    common_difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    \n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken_initial, lisa_initial, amount_given = symbols('ken_initial lisa_initial amount_given')\n    \n    # Ken had $15 more than Lisa at first.\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n    \n    # After Ken gave some of his money to Lisa, he had $21 less than Lisa.\n    # Ken's amount after giving money: ken_initial - amount_given\n    # Lisa's amount after receiving money: lisa_initial + amount_given\n    equation2 = Eq(ken_initial - amount_given, lisa_initial + amount_given - 21)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (ken_initial, lisa_initial, amount_given))\n    \n    # The amount of money Ken gave to Lisa\n    return solutions[amount_given]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = 0\n    for i in range(1, 10):  # From question 1 to question 9\n        if i <= 5:\n            trophies += i  # Adding trophies for questions 1 to 5\n        else:\n            trophies += (10 - i)  # Subtracting 1 trophy for each question from 6 onwards\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    # Since the boy ate 6 more cookies each day than the day before, \n    # it's an arithmetic sequence with a common difference of 6.\n    # Let the first day's cookies be x, then the sequence of cookies\n    # eaten each day is: x, x+6, x+12, x+18, x+24.\n    \n    # The sum Sn of an arithmetic sequence with n terms is given by:\n    # Sn = n/2 * (a1 + an), where a1 is the first term and an is the last term.\n    # We know Sn (total cookies) is 100, and n (days) is 5, so we can solve for a1 (first day's cookies).\n    \n    # Using sum formula: Sn = n/2 * (2*a1 + (n-1)*d), \n    # where Sn is the sum, n is the number of terms, a1 is the first term, and d is the common difference.\n    # We therefore have the equation: 100 = 5/2 * (2*x + (5-1)*6),\n    # which simplifies to 100 = 5/2 * (2*x + 24)\n    \n    # Solving for x:\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(5/2 * (2*x + 24), 100)\n    \n    first_day_cookies = solve(equation, x)[0]\n    return first_day_cookies\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # The total number of terms can be calculated using the pattern\n    total_number_terms = sum([i for i in range(2, 9)]) # 2 ones, 3 twos, ..., 8 eights\n    \n    # The cumulative count of numbers\n    cumulative_count_numbers = [sum(range(2, i+1)) for i in range(2, 10)]\n    \n    # Find the middle index\n    median_index = (total_number_terms + 1) // 2\n    \n    # Find out the median number by finding in which interval the median_index falls\n    for i, count in enumerate(cumulative_count_numbers):\n        if median_index <= count:\n            return i + 1  # +1 because the list indexing starts from 0\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # You want to ensure getting 2 red marbles\n    # Worst case: you get all blue and orange marbles first\n    blue_marbles = 18\n    orange_marbles = 8\n    # To ensure two red marbles, draw all blue and orange, plus the 2 red\n    marbles_to_draw = blue_marbles + orange_marbles + 2 # 2 red marbles\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n\n    return largest - smallest\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 31):\n        # Check for multiples of 2 or 3 and apply Inclusion-Exclusion Principle\n        if i % 2 == 0 and i % 3 == 0:\n            # If multiple of 2 and 3, the student ends up facing away after both turns\n            continue\n        elif i % 2 == 0 or i % 3 == 0:\n            # If multiple of 2 or 3, but not both, the student ends up facing away\n            continue\n        else:\n            # The student is not a multiple of 2 or 3, hence faces the teacher\n            facing_teacher += 1\n    \n    return facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    ans = 3267 - 745\n    return ans\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x**0.5 + 36**0.5, 81**0.5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    # 4th term calculation: a + 3d = 25, thus 4th term (a4) is 25\n    fourth_term = 25\n    # Calculate common difference (d)\n    d = (fourth_term - first_term) / 3\n    # Number of terms (n)\n    n = 25\n    # Sum of an arithmetic series formula: n/2 * (2a + (n-1)*d)\n    sum_of_series = n/2 * (2 * first_term + (n - 1) * d)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Probability of winning with the strategy to switch gates.\n    prob_switch = 2/3\n    \n    # Probability of winning without switching gates.\n    prob_stay = 1/3 \n\n    # Strategy to choose based on higher probability of winning.\n    if prob_switch > prob_stay:\n        ans = \"Choose gate 2\"\n    else:\n        ans = \"Stay with gate 1\"\n\n    return ans\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    return 221 * 4\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 2.\n    # The first term, a1, is 1 and the last term, an, is 49.\n    # We can find the number of terms, n, by using the formula an = a1 + (n - 1)d.\n    # We need to rearrange the formula to solve for n: n = (an - a1) / d + 1.\n\n    first_term = 1\n    last_term = 49\n    common_difference = 2\n\n    # Calculate the number of terms in the sequence.\n    num_terms = (last_term - first_term) // common_difference + 1\n\n    # Calculate the sum of the arithmetic sequence using the formula S = n/2 * (a1 + an).\n    sum_sequence = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 4 == 2 and number % 3 == 2 and number % 7 == 1:\n            break\n    return number\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original sum of money as 'x'.\n    x = symbols('x')\n\n    # David spent 3/4 of his money on CDs. So 1/4 is remaining.\n    # Then he spent 1/4 of the remaining (which is 1/4 of 1/4 of x) on batteries.\n    # Finally he was left with 1/3 of the original sum of money (x).\n    # So, the equation will be: x - (3/4)x - (1/4)(1/4)x = (1/3)x\n    # Simplify the equation: x - (3/4)x - (1/16)x = (1/3)x\n\n    equation = Eq(x - (3/4)*x - (1/16)*x, (1/3)*x)\n  \n    # Solve the equation.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # 1 trainer catches 1 pokemon in 7 minutes\n    # Therefore, the rate is 1 pokemon/7 minutes per trainer\n    rate_per_trainer = 1 / 7  # pokemon per minute for each trainer\n\n    # In 49 minutes, 1 trainer would catch 49/7 = 7 pokemon\n    # We need to catch 49 pokemon\n    # So the number of trainers needed is total pokemon needed divided by the number that one trainer can catch in 49 minutes\n    trainers_needed = 49 / (rate_per_trainer * 49)\n\n    return int(trainers_needed)\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from itertools import permutations\n\ndef solution():\n    total_books = 7\n    total_students = 3\n    # We use permutations because the books are distinct and the order of lending them matters.\n    # Since each student gets only one book, we permute 7 books taking 3 at a time.\n    ways = len(list(permutations(range(total_books), total_students)))\n    return ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    tommy_and_friends = 12 + 1\n    minutes_per_person = 142\n\n    total_time_spent = tommy_and_friends * minutes_per_person\n\n    return total_time_spent\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The given number is a repetition of 928, which appears 33 times to make up the 99-digit number.\n    # First, find the remainder of 928 when divided by 9\n    remainder_928 = 928 % 9\n    \n    # The remainder of the entire number when divided by 9 will be the same as the remainder of 928\n    # multiplied by 33 and then taken the remainder when divided by 9 again\n    ans = (remainder_928 * 33) % 9\n\n    return ans\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value\n    op = symbols('oplus')\n\n    # Define the equation given in the problem statement\n    equation = Eq(op * 9 + 47 - op, 84 + 27)\n\n    # Solve the equation\n    solution = solve(equation, op)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_people = 1500\n\n    percentage_incorrect = (incorrect_people / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbols for the three numbers\n    x, y, z = symbols('x y z')\n\n    # sum of three numbers is 56\n    equation1 = Eq(x + y + z, 56)\n    # average of the smallest two numbers is 14\n    equation2 = Eq((x + y) / 2, 14)\n    # average of the largest two numbers is 22\n    equation3 = Eq((y + z) / 2, 22)\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    # median is the second number when sorted\n    median = sorted(solutions.values())[1]\n\n    return median\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda num: abs(num - target))\n    return closest\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    bars = 1\n    while True:\n        eliot_cost = 12 * bars\n        maya_cost = 17 * bars\n\n        eliot_change = (3 * 100) - eliot_cost\n        maya_change = (4 * 100) - maya_cost\n\n        if eliot_change == maya_change:\n            break\n        bars += 1\n\n    return bars\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 5, 2]\n    even_permutations = [int(''.join(map(str, p))) for p in permutations(digits, 4) if p[-1] % 2 == 0]\n    return min(even_permutations)\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jackson, chloe = symbols('jackson chloe')\n    \n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n    \n    solutions = solve((equation1, equation2), (jackson, chloe))\n    \n    return solutions[jackson] + 3\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    first_eq = 66 * 2 + 66 * 3\n    second_eq = 66 * 5\n    ans = first_eq == second_eq\n    return ans\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the prices of one pork dumpling and one bun\n    dumpling, bun = symbols('dumpling bun')\n\n    # Create equations based on the information given in the question\n    equation1 = Eq(6 * dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * dumpling + 1 * bun, 41)\n\n    # Solve the equations for the price of one dumpling and one bun\n    solutions = solve((equation1, equation2), (dumpling, bun))\n\n    # Return the price of one pork dumpling\n    return solutions[dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    return 297 + 198 + 204 + 99\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_cost = 2.5\n    additional_cost_per_km = 1.2\n    total_cost = 8.5\n    base_distance_km = 1.8\n\n    # Calculate the cost minus the base cost\n    additional_cost = total_cost - base_cost\n\n    # Divide the additional cost by the cost per kilometer to get additional kilometers\n    additional_km = additional_cost / additional_cost_per_km\n\n    # Add the base distance to the additional kilometers to get the total distance\n    total_distance = base_distance_km + additional_km\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # Using the pigeonhole principle, if at least one student gets at least 3 apples,\n    # then in the worst-case scenario, every other student gets at least 2 apples\n    # because 1 apple would not help in finding the minimum number of students.\n    \n    # If there are n students and at least 1 student gets 3 apples,\n    # then the rest n-1 students get at least 2 apples each.\n    # We can set up the following inequality to find the minimum n:\n    # 3 + 2*(n - 1) <= 80\n\n    # Simplifying the inequality gives us:\n    # 3 + 2n - 2 <= 80\n    # 2n + 1 <= 80\n    # 2n <= 79\n    # n <= 79 / 2\n    # n <= 39.5\n\n    # Since n has to be a whole number, we take the floor of the division (i.e., 39),\n    # But since n is the number of students getting at least 2 apples and one gets 3 apples,\n    # we need to add 1 to account for the student who receives 3 apples.\n    # Hence, the minimum number of students is 39 + 1.\n\n    n = 39 + 1\n    return n\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n    \n    eq1 = Eq(red, 2 * yellow)\n    eq2 = Eq(blue, 3 * yellow)\n    eq3 = Eq(red + yellow + blue, 150)\n    \n    solutions = solve((eq1, eq2, eq3), (red, yellow, blue))\n    \n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    return 8 * 2\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    capacity_big_car = 4\n    capacity_small_car = 2\n\n    big_cars_needed = boys_in_big_cars // capacity_big_car\n    small_cars_needed = girls_in_small_cars // capacity_small_car\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n    \n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the number of years in the future\n    years = symbols('years')\n    \n    # Julia's current age\n    julia_age_now = 7\n    \n    # Julia's mother's current age\n    mother_age_now = 36\n    \n    # Julia's father's current age\n    father_age_now = 42\n    \n    # Equation for the sum of their ages in a given number of years\n    equation = Eq(julia_age_now + years + mother_age_now + years + father_age_now + years, 100)\n    \n    # Solve for the number of years\n    solution = solve(equation, years)\n    \n    # Return the solution, which is the number of years required for the sum of their ages to be 100\n    return solution[0]\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_per_kg = 16 * 2.2\n    newborn_tiger_cub_ounces = 56\n    newborn_tiger_cub_kg = newborn_tiger_cub_ounces / ounces_per_kg\n    return round(newborn_tiger_cub_kg, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Summing up the increasing sequence from 5 to 80\n    sum_increasing = sum(range(5, 81))\n    # Summing up the decreasing sequence from 79 down to 5\n    sum_decreasing = sum(range(79, 4, -1))\n    # The total sum is the sum of both sequences\n    total_sum = sum_increasing + sum_decreasing\n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for p in permutations(range(1, 10)):\n        abc = p[0] * 100 + p[1] * 10 + p[2]\n        bcd = p[1] * 100 + p[2] * 10 + p[3]\n        cde = p[2] * 100 + p[3] * 10 + p[4]\n        def_ = p[3] * 100 + p[4] * 10 + p[5]\n        efg = p[4] * 100 + p[5] * 10 + p[6]\n        fgh = p[5] * 100 + p[6] * 10 + p[7]\n        ghi = p[6] * 100 + p[7] * 10 + p[8]\n        A = abc + bcd + cde + def_ + efg + fgh + ghi\n        max_A = max(A, max_A)\n    return max_A\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / 0.8  # Calculate the original price before the first discount\n    final_price = 32 - 4  # Calculate the final price after the additional discount\n    total_discount = original_price - final_price  # Calculate total discount amount\n    total_percentage_discount = (total_discount / original_price) * 100  # Calculate total percentage discount\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "def solution():\n    from math import factorial\n    \n    # Number of ways to arrange A, B, C with A left to B and B left to C is 1 (since A, B, C order is fixed)\n    # The remaining 2 people (D and E) can be arranged in 2! ways\n    # Now, there are 5 positions to arrange these three entities (A-B-C group, D, E)\n    # The number of ways to arrange these 3 entities in 5 positions is 5!\n    # However, since we've treated A-B-C as one group, we must divide by 3! to correct for over counting combinations within the A-B-C group\n    \n    total_ways = factorial(5) // factorial(3) * factorial(2)\n    \n    return total_ways\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i * (i + 7)) for i in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    common_difference = 2\n    \n    # Using the formula for the sum of an arithmetic series: n/2 * (first_term + last_term)\n    # where n is the number of terms, which could be found by: (last_term - first_term) / common_difference + 1\n\n    number_of_terms = int((last_term - first_term) / common_difference + 1)\n    sum_of_terms = number_of_terms / 2 * (first_term + last_term)\n    \n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Defining a pattern function given the provided puzzle.\n    # Observing the puzzle, it seems the pattern involves the difference\n    # between two digits being squared, i.e. (b - a) ^ 2\n    # where the number is in the format 'ab'\n    def pattern_func(num):\n        # Converting the number to a string\n        str_num = str(num)\n        \n        # Getting the first and second digits as integers\n        a, b = int(str_num[0]), int(str_num[1])\n        \n        # Applying the observed pattern (b - a) ^ 2\n        return (b - a) ** 2\n    \n    # Applying pattern to 55\n    return pattern_func(55)\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    # Create all permutations of the six digits\n    perm = permutations([0, 1, 2, 3, 4, 5])\n    \n    # Convert them into integer numbers while skipping those that start with 0\n    valid_numbers = sorted(int(''.join(map(str, p))) for p in perm if p[0] != 0)\n    \n    # Return the 505th number\n    return valid_numbers[504]\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    nums = ['0', '2', '3']\n    count = 0\n    for first_digit in nums[1:]:  # The first digit cannot be 0\n        for second_digit in nums:\n            for third_digit in nums:\n                if second_digit != first_digit and third_digit != first_digit and third_digit != second_digit:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Number of girls\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Equation representing the total score from girls and boys\n    equation = Eq(x * girls_average + (total_students - x) * boys_average, total_students * total_average)\n\n    # Solving for the number of girls\n    number_of_girls = solve(equation, x)[0]\n\n    return number_of_girls\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples.append(i)\n    return multiples\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    a7 = 105\n    a8 = 120\n    a9 = 135\n    difference = a8 - a7\n    a1 = a7 - 6 * difference\n    a100 = a1 + 99 * difference\n    return a100\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Maximum number of socks of different colors you can take without forming a pair\n    max_different_socks = 4 + 4 - 1\n    \n    # Add one to ensure that the next sock forms a pair\n    min_socks_for_pair = max_different_socks + 1\n    \n    return min_socks_for_pair\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # The combined age of 3 dogs 4 years ago was 24 years.\n    combined_age_4_years_ago = 24\n    \n    # Each year, each dog gets 1 year older. So in 4 years, 3 dogs get 4 * 3 years older.\n    # Thus, we need to add these years to the combined age 4 years ago.\n    additional_age_4_years = 4 * 3\n    \n    # Let's find their combined age now.\n    current_combined_age = combined_age_4_years_ago + additional_age_4_years\n    \n    # Now we want to know their combined age in 2 years' time.\n    # Each dog will again get 2 years older in 2 years.\n    future_additional_age = 2 * 3\n    \n    # Finally, we add the future additional years to the current combined age.\n    combined_age_in_2_years = current_combined_age + future_additional_age\n    \n    # Return the combined age in 2 years' time.\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Work rate of Alice and Bob\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n\n    # Total work done\n    total_work = 1\n\n    # Let x be the number of days Alice takes off\n    # Total work done by Alice and Bob in 27 days - work done by Alice during her off days = total work\n    # (27 * alice_work_rate + 27 * bob_work_rate) - x * alice_work_rate = total_work\n    # 27 * (alice_work_rate + bob_work_rate) - x * alice_work_rate = 1\n    # x = (27 * (alice_work_rate + bob_work_rate) - 1) / alice_work_rate\n\n    x = (27 * (alice_work_rate + bob_work_rate) - total_work) / alice_work_rate\n\n    return x\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4**2) // 2\n    return n\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n    \n    # Original ratio\n    equation1 = Eq(ryan / audrey, 2 / 7)\n    \n    # After changes in the number of marbles\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n    \n    solutions = solve((equation1, equation2), (ryan, audrey))\n    \n    return solutions[audrey]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n\n    # Each hour represents 30 degrees (360 degrees / 12 hours)\n    # Each minute represents 6 degrees (360 degrees / 60 minutes)\n    # Each minute, the hour hand moves by 0.5 degrees (30 degrees / 60 minutes)\n\n    # Calculate the position of the hour hand\n    hour_angle = (hour % 12) * 30 + minute * 0.5\n\n    # Calculate the position of the minute hand\n    minute_angle = minute * 6\n\n    # Calculate the angle between the two hands\n    angle = abs(hour_angle - minute_angle)\n\n    # The angle should be the smaller of the two possibilities\n    angle = min(angle, 360 - angle)\n\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    sisters_count = 4\n    apples_left = 20\n\n    total_apples = justin_apples + (sisters_apples_each * sisters_count) + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    required_arrival_time = datetime.strptime('07:45', '%H:%M')\n    wake_up_time = required_arrival_time - timedelta(minutes=total_minutes)\n\n    return wake_up_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum([i if i % 4 in [0, 1] else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    # Add the given whole numbers\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    # Let the number of chickens (and ducks) be x\n    # Let the number of cows be y\n    # We know that chickens and ducks have 1 head and 2 legs each,\n    # and cows have 1 head and 4 legs each.\n    \n    # From the problem we have the following equations\n    # Equation for heads: x + x + y = 51  -> (1)\n    # Simplified: 2x + y = 51\n    \n    # Equation for legs: 2x + 2x + 4y = 160 -> (2)\n    # Simplified: 4x + 4y = 160\n    \n    # Now we can express y from equation (1): y = 51 - 2x\n    # Substitute y in equation (2):\n    # 4x + 4(51 - 2x) = 160\n    # 4x + 204 - 8x = 160\n    # 204 - 4x = 160\n    # -4x = -44\n    # x = 11 (number of chickens (and ducks))\n    \n    return 11\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coin_types = [1, 2, 5]  # Available coin types\n\n    possible_sums = set()\n\n    for c1 in coin_types:\n        for c2 in coin_types:\n            for c3 in coin_types:\n                sum_of_coins = c1 + c2 + c3\n                possible_sums.add(sum_of_coins)\n\n    ans = len(possible_sums)\n    return ans\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # black + white + red\n    full_patterns = total_beads // pattern_length\n    remaining_beads = total_beads % pattern_length\n    black_beads_in_full_pattern = full_patterns * 3\n\n    if remaining_beads > 0:\n        if remaining_beads <= 3:\n            black_beads_in_remaining_pattern = remaining_beads\n        else:\n            black_beads_in_remaining_pattern = 3\n    else:\n        black_beads_in_remaining_pattern = 0\n\n    total_black_beads = black_beads_in_full_pattern + black_beads_in_remaining_pattern\n    return total_black_beads\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "def solution():\n    from itertools import permutations\n\n    # Total number of permutations if there were no restrictions\n    total_ways = len(list(permutations([1, 2, 3, 4], 3)))\n\n    # Joe and Mike cannot join the same entrance, so we subtract the ways they can be at the same entrance\n    # Since Joe must be at a different entrance from Mike, for each choice of entrance for Joe,\n    # there are 3 choices for Mike and 2 remaining choices for Tina\n    restricted_ways = 4 * 3 * 2\n\n    # Subtract the restricted combinations from the total\n    ans = total_ways - restricted_ways\n\n    return ans\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    initial_juice = 750\n    \n    rebekah_drank = initial_juice * (1/5)\n    abigail_drank = 200\n    anna_drank = 120\n    \n    remaining_juice = initial_juice - (rebekah_drank + abigail_drank + anna_drank)\n    \n    return remaining_juice\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    red, white, black = symbols('red white black')\n\n    # Set up the equations based on the given ratios and total\n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    equation3 = Eq(red + white + black, 136)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_miles = 3000  # total distance travelled in nautical miles\n    total_time_days = 13\n    total_time_hours = 22\n\n    # Convert total time into hours\n    total_time_in_hours = (total_time_days * 24) + total_time_hours\n\n    # Calculate average speed (distance / time)\n    average_speed = total_miles / total_time_in_hours\n\n    # Round to the nearest integer\n    average_speed_rounded = round(average_speed)\n\n    return average_speed_rounded\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    total_volume = 2 + 3  # The total volume of the new mixture\n    juice_in_first = 2 * 0.4  # Amount of juice in the first mixture\n    juice_in_second = 3 * 0.7  # Amount of juice in the second mixture\n    total_juice = juice_in_first + juice_in_second  # Total amount of juice in the new mixture\n    concentration = (total_juice / total_volume) * 100  # Concentration in percentage\n    return concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    lowest_multiple = (50 // 11) + 1\n    highest_multiple = 150 // 11\n\n    return highest_multiple - lowest_multiple + 1\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of men and women\n    men, women = symbols('men women', integer=True)\n    \n    # After the first bus, the number of women is 3/5 the number of men\n    eq1 = Eq(women - 36, 3/5 * men)\n    \n    # After the second bus, the number of men is 48 less, and they are equal\n    eq2 = Eq(men - 48, women - 36)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (men, women))\n    \n    men_at_start = solutions[men]\n    women_at_start = solutions[women]\n    \n    # Calculate the total number of people at the start\n    total_people_at_start = men_at_start + women_at_start\n    \n    return total_people_at_start\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    stamps_given_1 = 339\n    stamps_bought = 455\n    stamps_given_2 = 777\n\n    final_stamps = initial_stamps - stamps_given_1 + stamps_bought - stamps_given_2\n    return final_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2  # Bella and Albert themselves\n\n    total_people = people_in_front_of_bella + albert_and_bella + people_behind_albert\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "from sympy import primerange\n\ndef solution():\n    primes_between_20_and_30 = list(primerange(20, 30))\n    ans = primes_between_20_and_30[0]\n    return ans\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    count = 0\n    combinations = []\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 + x2 + x3 == 14 and len(set([x1, x2, x3])) == 3:\n                    combinations.append((x1, x2, x3))\n                    count += 1\n    unique_combinations = []\n    for combo in combinations:\n        if set(combo) not in unique_combinations:\n            unique_combinations.append(set(combo))\n    return len(unique_combinations), unique_combinations\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = (1*3*8) + (2*6*16) + (3*9*24)\n    denominator = (1*2*4) + (2*4*8) + (3*6*12)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    height_diff = 132 - 124  # Difference between tallest and shortest\n    min_same_height_students = 4  # At least 4 students of the same height\n    \n    # The worst case scenario: if there are n+1 different heights, then having 4 students in each\n    # height category distributes 4n+4 students. To exceed this, there needs to be one more student.\n    class_size = (height_diff + 1) * min_same_height_students + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_spent = 3 * 0.50\n    change = 5 - total_spent\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # If Fred wants to win, he needs to make sure that\n    # at the end, he leaves George with a position where\n    # George is forced to leave Fred with 4 oranges on the table next round.\n    # This is because whatever number between 1 and 3 George picks, Fred will be able to pick the remainder\n    # to total 4 (i.e., if 1 is taken by George, Fred takes 3; if 2 taken, Fred takes 2; etc.)\n    # To achieve this, Fred needs to take a number of oranges so that the remaining count\n    # is a multiple of 4 after his turn. The closest multiple of 4 less than 15 is 12 (3 * 4).\n\n    first_move = 15 % 4  # Fred should make the total number of oranges left a multiple of 4.\n\n    return first_move\n\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    finish_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    cooking_duration = timedelta(hours=1, minutes=25)\n    start_time = finish_time - cooking_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n\n    total_students = go + checkers + chess - go_checkers - go_chess - checkers_chess + all_three\n\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n    \n    # The total age increase for both of them per year is 2 (since each of them gets 1 year older).\n    # We need the increased amount to add up to (48 - (26 + 20)), which is the additional age\n    # sum required to reach the target of 48.\n\n    years_needed = (target_sum_age - (oliver_current_age + lin_current_age)) // 2\n\n    return years_needed\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    number_of_poles = 40\n    distance_between_poles = 3\n    # Since there are no poles right outside her school and house,\n    # The total distance is the distance between 40 poles minus one\n    total_distance = (number_of_poles - 1) * distance_between_poles\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "from sympy import factorint\n\ndef solution():\n    factorization = factorint(245)\n    \n    # To make 245p a cube, the exponent of each prime factor must be a multiple of 3.\n    # we will find the least exponent that when added to the factorization exponent results in a multiple of 3\n    p = 1\n    for prime, exp in factorization.items():\n        needed_exp = (3 - (exp % 3)) % 3\n        p *= prime**needed_exp\n        \n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        e, s, a, m, o = p\n        if e == '0' or s == '0' or a == '0' or m == '0' or o == '0':\n            continue\n        esse = int(e + s + s + e)\n        sasmo = int(s + a + s + m + o)\n        if esse + 2018 == sasmo:\n            return sum(int(x) for x in {s, a, m, o})\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm = 736\n    m_per_cm = 0.01\n    ans = cm * m_per_cm\n    return ans\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum(64 - i * 2 for i in range(10) if i % 2 == 0) - sum(62 - i * 2 for i in range(10) if i % 2 != 0)\n    return ans\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year = 36000\n    last_year = this_year * 1/4\n    last_year += 1  # Since last year produced more than 1/4 of this year\n\n    return int(last_year)\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 2  # One on sick leave and one on personal leave\n    present_students = total_students - absent_students\n\n    attendance_rate = present_students / total_students\n\n    return round(attendance_rate * 100, 2)\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    cross_multiply = 5 * (□) == 15 * 8\n    ans = (15 * 8) / 5\n    return ans\n\n□ = symbols('□')\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    total_sum = 0\n    for n in range(2, 2018):\n        total_sum += sum((i/n) for i in range(1, n))\n    return total_sum\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    age_now = symbols('age_now')\n\n    equation = Eq(age_now + 2, 2 * (age_now - 5))\n    solution = solve(equation, age_now)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    result = 0.3 * 270\n    return result\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # If Tim is 4th from front and 3rd from back, there are 2 people behind him\n    # and 3 people in front of him, making the total length of the line along the\n    # front-to-back direction = 3 + 1 (Tim himself) + 2 = 6\n\n    # Similarly, if Tim is 4th from right to left, there are 3 people to his right\n    # and 0 people to his left, making the total length of the line along the\n    # left-to-right direction = 1 (Tim himself) + 3 = 4\n\n    # The total number of band members is the product of the number of rows and\n    # the number of columns (which is equivalent to a 2D array or matrix)\n    total_members = 6 * 4\n\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    # Original ratio equation: 3/8 = apples/oranges\n    equation1 = Eq(apples * 8, oranges * 3)\n    \n    # New ratio after removing one apple: 1/3 = (apples - 1)/oranges\n    equation2 = Eq((apples - 1) * 3, oranges)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda x: abs(x - 100))\n    return closest\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    total_amount = 150\n    daily_savings = 2.40\n    days_per_week = 7\n\n    days_needed = total_amount / daily_savings\n    weeks_needed = days_needed / days_per_week\n\n    return int(weeks_needed) if weeks_needed.is_integer() else int(weeks_needed) + 1\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    sum_14 = sum(range(1, 15))\n    target_sum = sum_14 + 2019\n    \n    for start in range(1, target_sum):\n        consecutive_sum = sum(range(start, start + 8))\n        if consecutive_sum == target_sum:\n            return start\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    # Convert mixed fraction to improper fraction\n    num = 6 * 2 + 1  # 6 and 1/2 as an improper fraction\n\n    # Perform division by multiplying by the reciprocal of the divisor\n    ans = num * (4/1)\n    \n    return ans\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Let r be the weight of one rabbit and c be the weight of one chicken.\n    # 2 rabbits = 6 chickens => 2r = 6c => r = 3c\n    r = 3\n\n    # 3 kangaroos = 4 rabbits => 3k = 4r => k = (4/3)r\n    k = (4/3) * r\n\n    # One kangaroo weighs the same as how many chickens? => k = ?c\n    # Since r = 3c, replace r with 3c in the equation for k\n    k_chickens = k\n\n    return k_chickens\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    \n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    ways = factorial(len(word))\n    for count in letter_counts.values():\n        ways //= factorial(count)\n    return ways\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    tasks = [\n        3,  # cut wood\n        1,  # weave wet grass into rope\n        5,  # dry the wood\n        1,  # mow the grass\n        1,  # prepare food\n        1,  # soak cut grass\n        1   # choose wood\n    ]\n    # Since some tasks can be done simultaneously, we take the max duration as the tasks are independent\n    ans = max(tasks) \n    return ans\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    return common_factor * (836 + 162 + 2)\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_money = 1000\n    note_value = 5\n    num_notes = total_money / note_value\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    difference_in_age = 2\n\n    brother_age_then = (ashley_age - 3) - difference_in_age\n\n    brother_current_age = brother_age_then + 3\n    \n    return brother_current_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    left_side = (9 * 5) + (15 * 5)\n    y = left_side // 5\n    return y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # If Snow White is the 7th in line counting from front to back and she is in the middle,\n    # it means there are 6 people in front of her and 6 people (dwarves) behind her.\n    dwarves_in_front = 6\n    dwarves_behind = 6\n    \n    # Including Snow White, the total number of dwarves and Snow White is:\n    total = dwarves_in_front + dwarves_behind + 1\n    \n    return total\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    # If the school with the most participants had at least 4, then we use the Pigeonhole Principle.\n    # Each \"pigeonhole\" will be a school, and each \"pigeon\" a participant.\n    # In the worst case scenario, to guarantee a minimum of 4 participants per the most filled school,\n    # we would need to distribute 3 participants to as many schools as possible before adding the 4th\n    # to any school would mean no school can have fewer than 4 participants.\n    # So we distribute 3 participants per school until we reach 100 or need to add a 4th to any school.\n    max_schools = participants // 3\n\n    return max_schools if participants % 3 == 0 else max_schools + 1\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2019):\n        total_sum += (2018 + i) / 5 - ((2018 + i) // 5)\n    return total_sum\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for num in range(1000,10000):\n        if round((num / 6) ** 0.5) ** 2 == num / 6 and round((num * 6) ** (1/3)) ** 3 == num * 6:\n            return num\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Speed of faster train\n    speed_fast = 48\n    # Speed of slower train\n    speed_slow = 36\n    # Difference in distance traveled by the faster train\n    distance_diff = 70\n\n    # Since both trains start at the same time and meet at the same time,\n    # their travel times are the same.\n    # Let t be the time it takes for them to meet.\n    # We can set up the following equations:\n    # distance_fast = speed_fast * t\n    # distance_slow = speed_slow * t\n\n    # We know that distance_fast = distance_slow + distance_diff, so\n    # speed_fast * t = speed_slow * t + distance_diff\n    # Rearrange the equation to solve for t\n    t = distance_diff / (speed_fast - speed_slow)\n\n    # Now we can use t to calculate the distance the faster train traveled\n    distance_fast = speed_fast * t\n\n    # Finally, the total distance between the two stations is the sum of the\n    # distances each train traveled when they met\n    total_distance = distance_fast + (speed_slow * t)\n\n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Counting from front to back, Tim is 4th, and 3rd from back to front. \n    # This means there are (4 - 1) people in front of him and (3 - 1) people behind him.\n    # So the total number of people in that line is 4 + 3 - 1 = 6. (we subtract 1 because Tim is counted in both directions)\n\n    # Similarly, counting from left to right, Tim is 4th and 7th from right to left.\n    # So there are (4 - 1) people to his left and (7 - 1) to his right.\n    # The total number of people in that row is 4 + 7 - 1 = 10. (again, subtract 1 to avoid double-counting Tim)\n\n    # Now, to find the total number of band members, we multiply the number of people in the front-back direction by the left-right direction\n    total_members = 6 * 10\n\n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the remainders and moduli\n    congruences = [(3, 4), (1, 7), (5, 9)]\n\n    # Solve the system of congruences\n    lcm, remainder = solve_congruence(*congruences)\n\n    return remainder\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    # Zoey's original amount in cents\n    original_amount = 50 + 20 + 10 + 5\n    \n    # List of coins Zoey had\n    coins = [50, 20, 10, 5]\n    \n    # Check for each coin, if after losing it, Zoey has twice her brother's amount\n    for coin in coins:\n        if (original_amount - coin) % 2 == 0 and (original_amount - coin) // 2 not in coins:\n            lost_coin = coin\n            break\n    \n    return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (1 + 1/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chocolates, friends = symbols('chocolates friends')\n    \n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n    \n    solutions = solve((equation1, equation2), (chocolates, friends))\n    \n    chocolates_total = solutions[chocolates]\n    remaining = chocolates_total - 20 * solutions[friends]\n    \n    return remaining\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(rasidah * (2/5), chai_seng * (1/7))\n    equation3 = Eq(chai_seng * (1/7), rasidah * (2/5) / 2)\n\n    solutions = solve((equation1, equation2, equation3), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for t in range(1, 10):  # Thousands digit must be between 1-9 (inclusive).\n        for h in range(t + 1, 10):  # Hundreds digit must be greater than thousands digit.\n            for u in range(h + 1, 10):  # Tens digit must be greater than hundreds digit.\n                o = t + h + u  # Ones digit is the sum of the other three.\n                if o < 10 and o > u and t + h + u + o == 16:  # Ones digit must be a single digit and the sum must be 16.\n                    return o\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    count = 0\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != '0' and d1 != d2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007) ** 2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for perm in permutations('2468', 4):\n        num = int(''.join(perm))\n        if num % 4 == 0 and num > max_number:\n            max_number = num\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance for uphill and downhill\n    uphill_distance = 5 * 3  # Speed * Time\n    downhill_distance = 10 * 2  # Speed * Time\n    \n    # Calculate the total distance and total time\n    total_distance = uphill_distance + downhill_distance\n    total_time = 3 + 2\n    \n    # Calculate the average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Constants given in the problem statement\n    base_rate = 2       # Base rate per kolowatt-hour for the first 5 hours\n    additional_rate = 1 # Rate for each additional kolowatt-hour\n    service_fee = 3     # Fixed service fee\n    total_cost = 63     # Total cost of the electricity\n\n    # Cost for the first 5 kolowatt-hour\n    cost_for_first_5_kwh = 5 * base_rate + service_fee\n    \n    # Remaining cost after the first 5 kolowatt-hour\n    remaining_cost = total_cost - cost_for_first_5_kwh\n    \n    # Total kolowatt-hour used\n    total_kwh_used = 5 + remaining_cost / additional_rate\n    \n    return total_kwh_used\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    result = 54 / 63 * 7\n    return result\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    for num_students in range(1, 1000):  # Assuming there are fewer than 1000 students\n        if (num_students % 3 == 2) and (num_students % 7 == 6) and (num_students % 11 == 10):\n            return num_students\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = int(f\"{x}{y}\")\n            B = int(f\"4{x}{y}\")\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    num = 4320\n    prime_factors = {}\n\n    # Prime factorization of the constant number 4320\n    for i in range(2, num + 1):\n        while (num % i == 0):\n            if i in prime_factors:\n                prime_factors[i] += 1\n            else:\n                prime_factors[i] = 1\n            num = num // i\n\n    # The power of 2 in 3/2^n must not exceed the power of 2 in the prime factors of 4320\n    # and similarly for the power of 3\n    power_of_two = prime_factors.get(2, 0) # power of 2 in 4320\n    power_of_three = prime_factors.get(3, 0) # power of 3 in 4320\n\n    # Because (3/2)^n introduces one more 3 and takes away one 2 for each increment of n, \n    # n can be the difference of the powers of 3 and 2, or anything less than that\n    num_of_values = power_of_three - (power_of_two - power_of_three) + 1\n\n    return num_of_values\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    small_boxes_needed, remaining_cookies = divmod(total_cookies, small_box_capacity)\n    \n    if remaining_cookies > 0:\n        small_boxes_needed += 1\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Given numbers\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    at_least_one_pass = 43\n\n    # Maximum possible intersection of all three sets based on Inclusion-Exclusion Principle\n    max_all_three_pass = (math_pass + science_pass + english_pass) - at_least_one_pass\n\n    return max_all_three_pass\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    juice_in_first_punch = 20 * 0.35\n    juice_in_second_punch = 30 * 0.60\n    total_juice = juice_in_first_punch + juice_in_second_punch\n\n    concentration = (total_juice / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the original amount of grain in warehouse B\n    b = symbols('b')\n\n    # Equation representing the relationship after the shipments\n    equation = Eq(50 + 12, 2 * (b - 16))\n\n    # Solve the equation for b\n    solutions = solve(equation, b)\n\n    # Return the amount of grain originally in warehouse B\n    return solutions[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 37, 41, 43]\n    return primes[2]\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = 'COLLEGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    return total_permutations\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    boat = 1\n    while True:\n        students = 6 * (boat + 1)\n        if (boat - 1) > 0 and students % (boat - 1) == 0 and (students // (boat - 1)) == 9:\n            return students\n        boat += 1\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    fish_to_rabbit_ratio = 3 / 1\n    rabbit_to_wheat_ratio = 1 / (3 / 2)\n\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    ans = fish_to_wheat_ratio\n    return ans\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 1000):\n        if (people + 7) % 3 == 0 and (people - 3) % 7 == 0:\n            return people\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n    \n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n    \n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    for pencils in range(400, 501):\n        if pencils % 4 == 1 and pencils % 5 == 2 and pencils % 7 == 4:\n            return pencils\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10):\n            x3 = 9 - x1 - x2\n            if x3 >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n\n    total = ginnie + lyn\n    return total\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    diff = 21 - 11\n    return diff\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_a = 2\n    ratio_b = 3\n    bigger_share = (ratio_b / (ratio_a + ratio_b)) * total_amount\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mass_full, mass_empty = symbols('mass_full mass_empty')\n\n    # When 5/6 of the bottle is filled, total mass is 4.6kg\n    eq1 = Eq(5/6 * mass_full + mass_empty, 4.6)\n\n    # When 2/3 of the bottle is filled, total mass is 4.45kg\n    eq2 = Eq(2/3 * mass_full + mass_empty, 4.45)\n\n    # Solving the system of equations\n    solution = solve((eq1, eq2), (mass_full, mass_empty))\n\n    # Getting the mass of the empty bottle in grams\n    mass_empty_grams = solution[mass_empty] * 1000\n\n    return mass_empty_grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Lisa's favourite number\n    fav_number = symbols('fav_number')\n\n    # Equation representing the relationship\n    equation = Eq(fav_number * 2 - 3, 19)\n\n    # Solve for Lisa's favourite number\n    solution = solve(equation, fav_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10, 2):  # As it is an odd number, the hundred's place should be an odd number between 1 and 9.\n        for ten in range(10):\n            for unit in range(10):\n                if hundred + ten + unit == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 0\n    page = 1\n\n    while total_digits < 1101:\n        total_digits += len(str(page))\n        page += 1\n\n    # Subtract 1 because we added 1 after exceeding 1101 digits\n    return page - 1\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    return 123 * 321\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    sum = 0\n    for i in range(1, 21):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    term = 1\n    increment = 2\n    while term < 100:\n        term += increment\n        increment += 2\n        if term >= 100:\n            term -= increment\n            break\n    return term\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let A, B, C represent the weights of Adam, Ben, and Carl respectively.\n    # According to the problem statement, we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    \n    # Add all three equations to get:\n    # 2A + 2B + 2C = 292\n    # Divide by 2 to get the total weight of Adam, Ben, and Carl.\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, magazines = symbols('books magazines', integer=True)\n\n    equation1 = Eq(3.4 * books + 1.6 * magazines, 23)\n    solutions = solve(equation1, (books, magazines))\n\n    # Filter the solutions for non-negative integers\n    for sol in solutions:\n        if all(map(lambda x: x.is_integer and x >= 0, sol.values())):\n            return sol[magazines]\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    sister_initial_notebooks = andy_notebooks - andy_gives - (andy_notebooks - 2 * andy_gives)\n    return sister_initial_notebooks\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ashley, crystal, justin = symbols('ashley crystal justin')\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n    \n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n    \n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n    \n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age is less than 100\n        age_base10_str = str(age)\n        age_base3_str = str(int(age_base10_str + '0', base=3))\n\n        if age_base10_str == age_base3_str:\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Total number of flowers at first\n    equation1 = Eq(orchids + tulips + roses, 3616)\n\n    # Ratio of the number of orchids to the number of tulips is 3:5\n    equation2 = Eq(orchids * 5, tulips * 3)\n\n    # After selling flowers\n    # 40% of the orchids\n    sold_orchids = orchids * 0.40\n\n    # 1/5 of the tulips\n    sold_tulips = tulips * (1/5)\n\n    # 25% of the roses\n    sold_roses = roses * 0.25\n\n    # There were 2644 flowers left in the end\n    equation3 = Eq((orchids - sold_orchids) + (tulips - sold_tulips) + (roses - sold_roses), 2644)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    from fractions import Fraction\n\n    result = (Fraction(5, 8) + Fraction(1, 17)) * 8 + Fraction(9, 17)\n\n    return result\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    # Since we know that both numbers are 2-digit multiples of 7, \n    # we can start by factoring 7007 to find the potential multiples\n    factor_pairs = [(i, 7007 // i) for i in range(1, 100) if 7007 % i == 0]\n\n    # We filter for the factor pairs where both are 2-digit numbers and multiples of 7\n    valid_pairs = [pair for pair in factor_pairs if all(x % 7 == 0 and 9 < x < 100 for x in pair)]\n\n    # There should only be one valid pair satisfying the condition\n    if valid_pairs:\n        two_digit_multiples = valid_pairs[0]\n        # Return their sum\n        return sum(two_digit_multiples)\n    else:\n        # If no valid pair is found, we return None or an appropriate error message\n        return None\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n\n    # Since the table is circular, fix one person's position and arrange the others\n    # This eliminates the rotations being counted as different orders\n    fixed_seat = 1\n    remaining_seats = 7\n\n    # Calculate the permutations of the remaining seats\n    ans = factorial(remaining_seats)\n\n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    ways = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            if x3 > 0:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(2, 56):\n        if is_prime(i) and is_prime(55 - i):\n            return i * (55 - i)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_cost = 9\n    cheesecake_to_cookie_ratio = 3 / 5\n    cheesecake_cost = cheesecake_to_cookie_ratio * cookie_cost\n    chocolate_to_cheesecake_ratio = 3 / 2\n    chocolate_cost = chocolate_to_cheesecake_ratio * cheesecake_cost\n    \n    return chocolate_cost\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "from itertools import permutations\n\ndef solution():\n    digits = '12345678'  # '0' and '9' are already in the number\n    sum_fixed = 2 + 0 + 1 + 9  # Sum of the fixed digits in the seven-digit number\n    for perm in permutations(digits, 3):\n        A, M, C = map(int, perm)  # Extract the digits for A, M, C\n        if (sum_fixed + A + M + C) % 9 == 0 and len({A, M, C}) == 3:  # Check divisibility by 9 and unique digits\n            return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the number of candies Valeria has now,\n    # and m be the number of candies Mike has now.\n    # According to the problem, if both eat the same amount of candy,\n    # Mike will have 6 left and Valeria will have 22.\n    # Therefore, m - x = 6 and v - x = 22, where x is the amount they eat.\n    # Also, we know that v + m = 36 (the total amount of candy they have).\n\n    v, m, x = symbols('v m x')\n    \n    # Mike's equation after eating x candy is 6 left.\n    mike_eq = Eq(m - x, 6)\n\n    # Valeria's equation after eating x candy is 22 left.\n    valeria_eq = Eq(v - x, 22)\n\n    # The sum of their candies is 36.\n    total_eq = Eq(v + m, 36)\n\n    # Now we will solve these equations.\n    solutions = solve((mike_eq, valeria_eq, total_eq), (v, m, x))\n\n    # Return the number of candies Valeria has now\n    return solutions[v]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Melissa's current age and her mother's current age\n    melissa_age, mother_age = symbols('melissa_age mother_age')\n\n    # Given age difference when Melissa was 8\n    age_difference_when_melissa_was_8 = 32 - 8\n\n    # Define equations based on the problem\n    equation1 = Eq(mother_age - melissa_age, age_difference_when_melissa_was_8)\n    equation2 = Eq(mother_age, 3 * melissa_age)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (melissa_age, mother_age))\n\n    return solutions[melissa_age]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    ans = 42 / (2 * 7)\n    return int(ans)\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # The digits after the decimal point in the decimal form of 6/7 repeat after every 6 digits\n    repeating_sequence = [8, 5, 7, 1, 4, 2]\n\n    # To find the sum of the first 58 digits, we calculate how many complete sets of the repeating sequence there are\n    complete_sets, remaining_digits = divmod(58, len(repeating_sequence))\n\n    # Sum of digits in one complete repeating sequence\n    sum_repeating_sequence = sum(repeating_sequence)\n\n    # Total sum for complete sets\n    total_sum = sum_repeating_sequence * complete_sets\n\n    # Add the sum of the remaining digits\n    total_sum += sum(repeating_sequence[:remaining_digits])\n\n    return total_sum\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from decimal import Decimal\n    from fractions import Fraction\n\n    # Convert the repeating decimal to a fraction\n    repeating_decimal_to_fraction = Fraction(473, 99)\n    non_repeating_decimal = Decimal('4.73')\n    another_non_repeating_decimal = Decimal('4.737')\n    repeating_with_more_digits = Decimal(repeating_decimal_to_fraction)\n\n    # Find the smallest one among the given decimals\n    smallest = min(repeating_with_more_digits, non_repeating_decimal, \n                   Decimal('4.77'), another_non_repeating_decimal)\n\n    return smallest\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    joel_plants = (remaining_plants + 2) * 2\n    valerie_plants = (joel_plants + 3) * 2\n    initial_plants = (valerie_plants + 1) * 2\n    return initial_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # in meters\n    tunnel_length = 544  # in meters\n    speed = 52  # in meters per second\n\n    # Total distance to be covered by the train to completely pass through the tunnel\n    total_distance = train_length + tunnel_length\n\n    # Time taken to pass through the tunnel is distance divided by speed\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    # Let the number of eggs in the basket at first be x.\n    # After selling the first set of eggs, he had (x - 16) / 2 eggs left.\n    # Then he sold another set, resulting in (x - 16) / 2 - 7 eggs remaining, which equals to 18.\n\n    # Rearranging the equation to find the initial number of eggs x.\n    # ((x - 16) / 2 - 7) * 2 = 18 * 2\n    # (x - 16) / 2 - 7 = 18\n    # (x - 16) / 2 = 25\n    # x - 16 = 50\n    # x = 50 + 16\n\n    initial_eggs = (remaining_eggs + 7) * 2 + 16\n\n    return initial_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let s be the side length of the cube\n    s = symbols('s')\n\n    # According to Pythagorean theorem in 3D, we can write the equations:\n    # PB^2 = s^2 + s^2 + (2s)^2\n    # PC^2 = s^2 + s^2 + 0^2\n    # PD^2 = s^2 + 0^2 + 0^2\n    # PG^2 = (3s)^2\n\n    # Therefore, we can establish the following system of equations based on the given distances:\n    equations = [\n        s**2 + s**2 + (2*s)**2 - (60*10**0.5)**2,\n        s**2 + s**2 - (60*5**0.5)**2,\n        s**2 - (120*2**0.5)**2,\n        (3*s)**2 - (36*7**0.5)**2\n    ]\n\n    # Solve the system of equations for s\n    side_length_solution = solve(equations, s)\n\n    # We need to find only the positive real solution for the side length\n    for sol in side_length_solution:\n        if sol.is_real and sol > 0:\n            side_length = sol\n            break\n\n    # Now, we can find PA using the diagonal formula PA^2 = s^2+s^2+s^2\n    PA = (side_length**2 + side_length**2 + side_length**2)**0.5\n\n    return PA\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    # Let x be the number of P6 students and y be the number of P1 students\n    # Hence, x P6 students carried 2x buckets and y P1 students carried y/2 buckets\n    # We have two equations based on the given information:\n    # x + y = 120 (total number of students)\n    # 2x + y/2 = 180 (total number of buckets)\n\n    # Importing sympy for solving the system of equations\n    from sympy import symbols, Eq, solve\n    \n    # Defining symbols for P1 and P6 students\n    x, y = symbols('x y')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(x + y, 120)\n    equation2 = Eq(2*x + y/2, 180)\n    \n    # Solving the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Return the number of P1 students\n    return solutions[y]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_per_toss = 2  # There are 2 outcomes for each coin toss: head or tail\n    total_tosses = 2       # The coin is tossed 2 times\n    total_outcomes = outcomes_per_toss ** total_tosses  # The total outcomes is 2^2\n\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    # Number of football teams\n    n_teams = 5\n    \n    # Using the formula for number of matches in a round-robin tournament.\n    # (n_teams * (n_teams - 1)) / 2\n    num_matches = (n_teams * (n_teams - 1)) // 2\n    \n    return num_matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    return 7 / (1/3)\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "from math import gcd\n\ndef solution():\n    pencils = 55\n    pens = 143\n\n    ans = gcd(pencils, pens)\n    \n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen trades 3 fish for 1 rabbit\n    fish_to_rabbit = 3 / 1\n\n    # Oscar trades 2 rabbits for 3 packs of wheat\n    rabbit_to_wheat = 2 / 3\n\n    # Calculate how many fish for 1 pack of wheat by multiplying the ratios\n    fish_to_wheat = fish_to_rabbit * (1 / rabbit_to_wheat)\n\n    # Return the number of fish for one pack of wheat\n    return fish_to_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "网络故障，请重试"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = [(i, 8-i) for i in range(1, 7) if (8-i) <= 6 and (8-i) > i]\n    ans = len(ways)\n    return ans, ways\n\nans, ways = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes_needed = 66.5 / apples_per_box\n    return int(total_boxes_needed)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8  # The age difference between Mike and Eddie\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference  # Mike's age when Eddie is 18\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of students in the canteen initially\n    x = symbols('x')\n    \n    # Initially, boys were 40% of the total number of students\n    initial_boys = 0.4 * x\n    \n    # 16 boys left and 16 girls entered\n    # Boys now make up 2/15 of the students in the canteen\n    new_boys = initial_boys - 16\n    new_total = x + (16 - 16)  # total number of students does not change\n    equation = Eq(new_boys, 2/15 * new_total)\n    \n    # Solve for x\n    total_students_solution = solve(equation, x)\n    initial_total_students = total_students_solution[0]\n    \n    # Number of girls now\n    girls_now = initial_total_students - new_boys\n    \n    return int(girls_now)\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "def solution():\n    from sympy import isprime\n\n    digits = ['2', '7', '9']\n    primes = set()\n\n    # Generate all possible numbers with 1 or 2 digits using the given digits\n    for d1 in digits:\n        # Check for 1-digit primes\n        if isprime(int(d1)):\n            primes.add(int(d1))\n        for d2 in digits:\n            # Form 2-digit numbers and check if they're prime\n            number2 = int(d1 + d2)\n            if isprime(number2) and number2 < 100:\n                primes.add(number2)\n\n            # Form 2-digit numbers by reversing the digits and check if they're prime\n            number2_reversed = int(d2 + d1)\n            if isprime(number2_reversed) and number2_reversed < 100:\n                primes.add(number2_reversed)\n\n    return len(primes)\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    final_price = 21\n    increase_percent = 0.40\n    original_price = final_price / (1 + increase_percent)\n    return original_price\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    mixed_to_improper = lambda whole, numerator, denominator: Fraction(whole * denominator + numerator, denominator)\n\n    # Numerator calculation\n    numerator = (Fraction(10, 3) * Fraction(19, 10)) + (Fraction(195, 10) / mixed_to_improper(4, 1, 2))\n    # Denominator calculation\n    denominator = (Fraction(62, 75) - Fraction(16, 100)) / (Fraction(35, 10) + mixed_to_improper(4, 2, 3) + mixed_to_improper(2, 2, 15)) / (Fraction(1, 2) * (mixed_to_improper(1, 1, 20) + Fraction(41, 10)))\n\n    # Final calculation\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Since the difference between the numbers is 2021, we need to try all possibilities\n    # where 2021 is added to a three-digit number to produce a four-digit number N.\n    # Furthermore, since the digits stay in the same order, the difference between N and M\n    # must come from the removal of a '0' followed by multiplication by a power of 10\n    # depending on the position of the removed digit.\n    \n    # We know that 20210, 202100, and 2021000 cannot be the answer because they have more than 4 digits.\n    # Thus, we must try only numbers 2021, 20210, 202100, and each must be multiplied by a digit 1-9.\n\n    possible_ms = [2021, 20210, 202100]\n\n    # Iterate over every possible M and every possible digit to insert (from 1 to 9)\n    for m in possible_ms:\n        for digit in range(1, 10):\n            # Try inserting the digit at different positions\n            for power in range(4):\n                # The original number N is M plus the digit multiplied by 10^power\n                N = m + (digit * (10 ** power))\n\n                # Validate that N is a 4-digit number\n                if 1000 <= N < 10000:\n                    # Check if M is part of N and in the right order\n                    str_N = str(N)\n\n                    # Construct M by omitting the digit at the current power\n                    str_M = str_N[:len(str_N) - power - 1] + str_N[len(str_N) - power:]\n\n                    # Check if the integer value of constructed M matches the original M\n                    if int(str_M) == m:\n                        return N  # Returning the original number N\n\n    return None  # If no solution is found, although this should not happen\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n    both_sports = swimming + jogging - (total_students - neither)\n\n    return both_sports\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A can do 1/15 of the job in 1 day.\n    # B can do 1/10 of the job in 1 day.\n    \n    # Together they can do 1/15 + 1/10 = (2+3)/30 = 1/6 of the job in a day.\n    work_done_per_day_together = 1/15 + 1/10\n    \n    # In 4 days they do 4*(1/6) = 2/3 of the job.\n    work_done_in_4_days = 4 * work_done_per_day_together\n    \n    # Thus, the remaining job is 1 - 2/3 = 1/3.\n    remaining_work = 1 - work_done_in_4_days\n    \n    # B can finish the remaining work in (1/3) / (1/10) = 10/3 days.\n    days_for_B_to_finish = remaining_work / (1/10)\n    \n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65)\n    part2 = (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    time_linda = 5  # time for Linda to complete one problem in minutes\n    time_cici = 6   # time for Cici to complete one problem in minutes\n    total_time = 2 * 60  # total working time in minutes (2 hours)\n\n    # Linda's rate of working is 1 problem every 5 minutes, i.e., 1/5 problems per minute\n    rate_linda = 1 / time_linda\n\n    # Cici's rate of working is 1 problem every 6 minutes, i.e., 1/6 problems per minute\n    rate_cici = 1 / time_cici\n\n    # Combined rate is the sum of individual rates\n    combined_rate = rate_linda + rate_cici\n\n    # The number of problems they can do together in total_time minutes\n    total_problems = combined_rate * total_time\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy should have (amy - x) apples\n    # Similarly, John should have (john + x) apples\n    # According to the problem, Amy should have 4 more apples than John\n    # So, (amy - x) = (john + x) + 4\n    # Solving this equation for x\n    x = (amy - john - 4) / 2\n    # Return the number of apples Amy gives to John\n    return int(x)\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n\n    num1 = 16\n    num2 = 28\n\n    return gcd(num1, num2)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    # Initialize the list of odd numbers less than 17\n    odds = [i for i in range(1, 17) if i % 2 != 0]\n\n    # Filter out the odd numbers that are more than 13\n    valid_odds = [num for num in odds if num > 13]\n\n    # Since we need a single number, we'll take the first element from the list\n    ans = valid_odds[0]\n\n    return ans\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n    \n    wait_time = bus_interval - (late_time % bus_interval)\n    \n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # One goat eats as much as 4 rabbits\n    goat_to_rabbit_ratio = 4\n    \n    # 14 goats for 15 days is the same as 14 * 4 rabbits for 15 days\n    # Which means the pasture can feed 14 * 4 rabbits for 15 days\n    total_rabbit_days = 14 * goat_to_rabbit_ratio * 15\n    \n    # Since the pasture can also feed 70 rabbits for 8 days\n    # We could equate the two to find the total grass units in the pasture\n    # 14 * 4 rabbits * 15 days = 70 rabbits * 8 days\n    # total_rabbit_days = 70 * 8\n    \n    # Now we know how many rabbit-days worth of grass we have\n    # We need to find out how many rabbit-days worth of grass 17 goats + 20 rabbits would eat in one day\n    daily_rabbit_consumption = (17 * goat_to_rabbit_ratio) + 20\n    \n    # The number of days the pasture can feed the 17 goats and 20 rabbits is:\n    num_days = total_rabbit_days / daily_rabbit_consumption\n    \n    return int(num_days)\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = 37 * 10\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine_books = 38.79\n    cost_per_book = total_cost_for_nine_books / 9\n    total_cost_for_seven_books = cost_per_book * 7\n    return total_cost_for_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chan, toh = symbols('chan toh')\n    \n    equation1 = Eq(1/4 * chan, 1/3 * toh + 33)\n    equation2 = Eq(chan + toh, 1000)\n    \n    solutions = solve((equation1, equation2), (chan, toh))\n    \n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, sandra * 3 / 5)\n    equation3 = Eq(tasha, riley + 60)\n\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    daytime_climb = 10\n    night_slide = 0\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < height:\n        day += 1\n        total_climbed += daytime_climb\n        if total_climbed >= height:\n            break\n        night_slide += 1  # The snail slides down more each night\n        total_climbed -= night_slide\n\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    result = 4\n    for i in range(1, 4):\n        result += int(str(4) * (i + 1))\n    return result\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    jan_savings = 13\n    feb_savings = 18\n    mar_savings = 5\n\n    mean_savings = (jan_savings + feb_savings + mar_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    return (9**2) - 7\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel = \"0141705021\"\n    devil = \"Devil\"\n\n    # Convert characters in \"Angel\" to corresponding order numbers\n    order_numbers = [str(ord(char) - ord('A')) for char in angel]\n\n    # Create a mapping of character to number from \"Angel\"\n    angel_to_num = dict(zip(angel, order_numbers))\n\n    # Convert \"Devil\" to numbers using the mapping from \"Angel\"\n    devil_num = ''.join(angel_to_num.get(char, char) for char in devil)\n\n    # Andy's attempt\n    andy_attempt = \"4005220912\"\n\n    # Check if Andy can unlock the chest\n    if andy_attempt == devil_num:\n        ans = True  # Andy's attempt is correct\n    else:\n        ans = devil_num  # Andy's attempt is incorrect; provide the correct password\n\n    return ans\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    answer = 2** (6-1) - 1\n    return answer\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    # Convert recurring decimals to fractions\n    term_1 = (1 / 9)\n    term_2 = (1 * 10 + 2) / (9 * 10)\n    term_3 = (2 * 10 + 3) / (9 * 10)\n    term_4 = (3 * 10 + 4) / (9 * 10)\n    term_5 = (4 * 10 + 5) / (9 * 10)\n    term_6 = (5 * 10 + 4) / (9 * 10)\n    term_7 = (7 * 10 + 8) / (9 * 10)\n\n    # Sum the terms\n    ans = term_1 + term_2 + term_3 + term_4 + term_5 + term_6 + term_7\n    return ans\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n    \n    # Define the symbol for variable\n    a = symbols('a')\n    \n    # Given equation sqrt(x) = sqrt(a) - 2/sqrt(a)\n    # Rearrange the equation to find x in terms of a\n    x = (sqrt(a) - 2/sqrt(a))**2\n    \n    # Square the result to remove the square root\n    # And simplify the expression\n    result = simplify(sqrt(x**2 + 8*x))\n\n    return result\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    sheep = 23\n    pens = 11\n    max_sheep_in_pen = (sheep + pens - 1) // pens\n    return max_sheep_in_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for n in range(300, 401):\n        if n % 3 == 2 and n % 4 == 2 and n % 5 == 2 and n % 7 == 5:\n            return n\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    total_choir = total_boys + total_girls\n\n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n\n    total_age_choir = total_age_boys + total_age_girls\n    mean_age_choir = total_age_choir / total_choir\n\n    return mean_age_choir\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    # Define the mapping from letters to numbers for \"Angel\"\n    angel_mapping = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n\n    # Define the word \"Devil\"\n    devil = \"Devil\"\n\n    # Map each letter in \"Devil\" to its corresponding number based on \"Angel\" mapping\n    devil_numbers = ''.join(angel_mapping.get(char, char) for char in devil.lower())\n\n    # Andy's attempt to unlock the treasure chest\n    andy_input = \"4005220912\"\n\n    # Check if Andy's input matches the correct password\n    return andy_input == devil_numbers, devil_numbers\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "网络故障，请重试"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution():\n    raye = 6\n    simon = 12\n    taylor = 16\n\n    least_common_multiple = reduce(lcm, [raye, simon, taylor])\n\n    return least_common_multiple\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    tenth_term = 31\n    common_difference = 3\n    n = 10\n    \n    first_term = tenth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30\n    sam_speed = 1  # m/s\n    ben_speed = 0.6  # m/s\n    total_time = 10 * 60  # 10 minutes converted to seconds\n\n    # Relative speed is the sum of individual speeds when moving towards each other\n    relative_speed = sam_speed + ben_speed  # m/s\n\n    distance_covered_together = total_time * relative_speed\n    # The number of times they meet is equivalent to the number of lengths of the pool they have covered together\n    num_meets = distance_covered_together / pool_length\n\n    return int(num_meets)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    ans = a * b + c * d\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    total_height_for_bob_cindy = 120 * 2\n    height_of_doris = 126\n    average_height_three_children = (total_height_for_bob_cindy + height_of_doris) / 3\n    return average_height_three_children\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # To ensure getting 5 balls of the same color, Sara must consider the worst case scenario, \n    # which is picking every other color before getting the fifth ball of the same color.\n\n    # The worst case scenario before getting 5 green balls would be:\n    # 4 green balls (not enough)\n    # 4 yellow balls (not enough, and every other color would be up to 4 after this)\n    # 2 red balls (all red balls, but not enough)\n    # + 1 more green ball (to make 5 green balls)\n    # Total balls Sara must take out: 4 + 4 + 2 + 1 = 11\n    return 4 + 4 + 2 + 1\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine_money = 24\n    tom_money = 2 * katherine_money\n    gareth_money = 4 * tom_money\n    return gareth_money\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n\n    # Destin will be twice his nephew's age in 6 years\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    \n    # 6 years ago, the ratio of Destin's age to his nephew's age was 5:1\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    # Calculate the sum of their ages in 10 years' time\n    sum_ages_in_10_years = solutions[destin] + 10 + solutions[nephew] + 10\n\n    return sum_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_students = 40\n    total_avg_pencils = 35\n\n    # Let x be the number of boys\n    boy_avg_pencils = 20\n    girl_avg_pencils = 60\n\n    # Total pencils distributed\n    total_pencils = total_avg_pencils * total_students \n    \n    # Equation for total pencils: boy_avg_pencils * x + girl_avg_pencils * (total_students - x) = total_pencils\n    # 20x + 60(40 - x) = 35*40\n    # Solve the equation for x\n    x = (total_pencils - girl_avg_pencils * total_students) / (boy_avg_pencils - girl_avg_pencils)\n\n    return int(x)\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pies each of them had at first\n    x = symbols('x') \n\n    # Mrs Tan bought 12 more pies\n    mrs_tan = x + 12\n\n    # Mrs Lim gave away 4 pies\n    mrs_lim = x - 4\n\n    # Mrs Tan has twice as many pies as Mrs Lim now\n    equation = Eq(mrs_tan, 2 * mrs_lim)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the number of pies they had at first\n    return solution[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "import itertools\n\ndef solution():\n    digits = [1, 3, 5]\n    permutations = itertools.permutations(digits, len(digits))\n    return len(list(permutations))\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    departure_time = \"6:35am\"\n    arrival_time = \"10:22am\"\n\n    departure_time_obj = datetime.strptime(departure_time, '%I:%M%p')\n    arrival_time_obj = datetime.strptime(arrival_time, '%I:%M%p')\n\n    # Calculate the duration of the train journey\n    duration = arrival_time_obj - departure_time_obj\n\n    # Convert duration to minutes\n    duration_in_minutes = duration.seconds // 60\n\n    return duration_in_minutes\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"3456\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    full_repeats = 50 // len(pattern)\n    remainder = 50 % len(pattern)\n    sum_full_repeats = pattern_sum * full_repeats\n    sum_remainder = sum(int(pattern[i]) for i in range(remainder))\n\n    ans = sum_full_repeats + sum_remainder\n    return ans\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    cards = [6, 12, 35, 175, 245, 300]\n\n    # Find all possible combinations for Candy (2 cards)\n    candy_combinations = list(combinations(cards, 2))\n    candy_products = {prod(combo): combo for combo in candy_combinations}\n\n    # Find all possible combinations for Candice (3 cards)\n    candice_combinations = list(combinations(cards, 3))\n\n    # Find matching products and corresponding combos\n    for combo in candice_combinations:\n        product = prod(combo)\n        if product in candy_products:\n            # Merge and find the number not picked\n            all_picked_numbers = set(candy_products[product] + combo)\n            break\n\n    # Find the number not picked by comparing with the original set\n    not_picked_number = set(cards) - all_picked_numbers\n\n    return list(not_picked_number)[0]\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    father_current_age = father_future_age - (father_future_age - tom_age)\n    return father_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3 / 10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    days_in_packet_A = 25\n    days_in_packet_B = 20\n    days_to_sync = lcm(days_in_packet_A, days_in_packet_B)\n\n    starting_date = 1\n    sync_date = starting_date + days_to_sync\n\n    return sync_date\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n\n    # Calculate the amount and remainder of sweets after the first distribution\n    sweets_first_distribution = total_sweets * fraction_first_group\n    remainder_sweets = total_sweets - sweets_first_distribution\n\n    # Calculate number of students in the first group\n    students_first_group = sweets_first_distribution / sweets_first_group\n\n    fraction_second_group = 1/4\n    sweets_second_group = 4\n\n    # Calculate the amount of sweets for the second distribution and number of students\n    sweets_second_distribution = remainder_sweets * fraction_second_group\n    students_second_group = sweets_second_distribution / sweets_second_group\n\n    # Calculate the number of students in the third group\n    remainder_sweets_after_second = remainder_sweets - sweets_second_distribution\n    sweets_third_group = 5\n    students_third_group = remainder_sweets_after_second / sweets_third_group\n\n    # Calculate the total number of students in the classroom\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) / 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert the mixed numbers to improper fractions\n    num1 = (3 * 4 + 1) / 4  # 3 1/4\n    num2 = (1 * 4 + 3) / 4  # 1 3/4\n\n    # Calculate the difference and convert to decimal\n    diff = num1 - num2\n    \n    return diff\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_money = 580\n    money_per_boy = 8\n    money_per_girl = 5\n\n    # Equation1: Each boy receives $8 and each girl receives $5\n    equation1 = Eq(boys * money_per_boy + girls * money_per_girl, total_money)\n\n    # Equation2: There are thrice as many boys as girls\n    equation2 = Eq(boys, 3 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    first_term = 3\n    difference = 4\n    last_term = 99\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    perimeter = 12\n    # Since the perimeter is 12, the maximum length of a side in an isosceles triangle cannot exceed perimeter // 2\n    for equal_side in range(1, perimeter // 2):\n        # The base of the isosceles triangle could be at most perimeter - 2 * equal_side\n        for base in range(1, perimeter - 2*equal_side + 1):\n            if equal_side >= base / 2:  # Triangle inequality theorem\n                # We found a valid isosceles triangle if the sides add up to the perimeter\n                if 2 * equal_side + base == perimeter:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    for num in range(1000, 0, -2):  # start from 1000, stop at 1, step -2 for odd numbers\n        found = False\n        for i in range(2, num):\n            if is_composite(i):\n                for j in range(2, num-i):\n                    if is_composite(j) and is_composite(num-i-j) and i != j and i != num-i-j and j != num-i-j:\n                        found = True\n                        break\n                if found:\n                    break\n        if not found:\n            return num\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elder, younger = symbols('elder younger')\n    \n    equation1 = Eq(elder + younger, 42)  # The sum of their ages now\n    equation2 = Eq(younger - (elder - younger), elder / 2)  # Relationship in the past\n    \n    solutions = solve((equation1, equation2), (elder, younger))\n    \n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    return 104 // 4\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    class_a_students = 8\n    class_b_students = 12\n    class_c_students = 20\n\n    gcf_ab = gcd(class_a_students, class_b_students)\n    gcf_abc = gcd(gcf_ab, class_c_students)\n\n    return gcf_abc\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    only_passed_second = 3\n\n    only_passed_first = passed_first - (total_students - failed_second - only_passed_second)\n\n    return only_passed_first\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Ways going from A to D directly\n    direct_AD = 6\n    \n    # Ways going from A to B first, then B to D through C\n    AB_then_BCD = 7 * 5 * 2\n    \n    # Ways going from A to C first, then C to D\n    AC_then_CD = 4 * 2\n    \n    # Sum all possible ways\n    total_ways = direct_AD + AB_then_BCD + AC_then_CD\n    \n    return total_ways\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    total_cost = 20\n    pencil_cost = 2\n    pencils = 3\n    pens = 2\n\n    # Total cost of pencils\n    total_pencil_cost = pencils * pencil_cost\n    \n    # Remaining amount is the total cost of pens\n    total_pen_cost = total_cost - total_pencil_cost\n    \n    # Cost of one pen\n    pen_cost = total_pen_cost / pens\n\n    return pen_cost\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300  # total kilograms of hay\n    cattle = 5       # number of cattle\n    days = 10        # number of days the hay lasts\n\n    daily_hay_per_cattle = total_hay / (cattle * days)\n\n    return daily_hay_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    for age1 in range(1, 10):\n        for age2 in range(age1 + 1, 10):  # different ages, so start from age1 + 1\n            for age3 in range(age2 + 1, 10):  # different ages, so start from age2 + 1\n                if age1 * age2 * age3 == 210:\n                    return age1    # age1 is the youngest\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    total_students = 39\n    for boys in range(total_students + 1):\n        girls = total_students - boys\n        if 5 * boys == 4 * 2 * girls:\n            return boys - girls\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    ans = total_avocados // per_box\n    return ans\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed_by_frost = 3 / 8\n    seedlings_killed = total_seedlings * fraction_killed_by_frost\n    seedlings_survive = total_seedlings - seedlings_killed\n\n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n\n    full_days = total_locusts // daily_consumption\n    remaining_locusts = total_locusts - full_days * daily_consumption\n\n    return remaining_locusts\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote chocolate cupcakes as 'choco' and cheese cupcakes as 'cheese'\n    choco, cheese = symbols('choco cheese')\n    \n    # Equation for the total cupcakes\n    total_cupcakes_eq = Eq(choco + cheese, 255)\n    \n    # Equation for the remaining cupcakes after the sale\n    remaining_cupcakes_eq = Eq(choco - 0.40 * choco, cheese - 0.75 * cheese)\n    \n    # Solve the system of equations\n    solutions = solve((total_cupcakes_eq, remaining_cupcakes_eq), (choco, cheese))\n    \n    # Calculate the chocolate cupcakes left after selling\n    choco_left = solutions[choco] - 0.40 * solutions[choco]\n    \n    # This is the answer to how many cupcakes Eric has left\n    # Since an equal number of cheese cupcakes and chocolate cupcakes are left,\n    # we only need to compute one of them\n    return int(choco_left)\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $5 notes initially\n    x, y = symbols('x y')\n    \n    # Equation1: total number of notes\n    equation1 = Eq(x + y, 116)\n    \n    # Equation2: remaining $10 notes after spending 60%\n    equation2 = Eq(x * (1 - 0.60), 4/7 * y * (1 - 0.25))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the amount spent in dollars from the solution\n    spent_10_notes = solutions[x] * 0.60 * 10\n    spent_5_notes = solutions[y] * 0.25 * 5\n    total_spent = spent_10_notes + spent_5_notes\n    \n    return total_spent\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12*92 + 22*82 + 32*72\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    don_initial, ben_initial = symbols('don_initial ben_initial')\n\n    # Initial ratio of stickers\n    initial_ratio = Eq(don_initial/ben_initial, 2/3)\n\n    # Ratio after Don buys 10 stickers and Ben loses 5 stickers\n    after_change_ratio = Eq((don_initial + 10)/(ben_initial - 5), 6/7)\n\n    # Solving the simultaneous equations\n    solutions = solve((initial_ratio, after_change_ratio), (don_initial, ben_initial))\n\n    return solutions[don_initial]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    return round(726 * 8, 1)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    result = 0\n    for i in range(2, 2017, 4):\n        result += i - (i+1)\n    return result\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    ans = remainder if remainder == 0 else 25 - remainder\n    return ans\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    \n    amy_gives = (amy_toys - sally_toys) // 2\n\n    return amy_gives\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    # We need to maximize a*b*c given a+b+c=31\n    # For three numbers with a fixed sum, the product is maximized when the numbers are as close to each other as possible.\n    # We will start by assuming a = b = c.\n    a = b = c = 31 // 3\n    \n    # If 31 is not divisible by 3, distribute the remainder across the variables to keep them as close as possible.\n    remainder = 31 % 3\n    \n    # Depending on the remainder, adjust a, b, and c to keep them close\n    if remainder == 1:\n        a += 1\n    elif remainder == 2:\n        a += 1\n        b += 1\n    \n    # The product abc is maximized\n    return a * b * c\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia = 80\n    kenny = cecilia / 4\n    total_money = cecilia + kenny\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # Given sum of squares from 1^2 to 20^2\n    sum_squares = 2870\n    # We recognize that we need to find the sum of products of consecutive odd numbers\n    # Using the fact that (n)(n+2) = n^2 + 2n, we can decompose our expression into two sums\n    total_sum = 0\n    for n in range(1, 21, 2):\n        total_sum += n * (n + 2)\n    \n    # The total sum is the sum of odds square plus two times the sum of the first 20 natural numbers\n    # sum of the first n natural numbers (n * (n + 1)) / 2\n    natural_numbers_sum = 20 * (20 + 1) // 2\n    final_sum = sum_squares + 2 * natural_numbers_sum\n    \n    return final_sum\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # There are 5 entities to arrange: 2 boys (twins but not together), 3 girls (together), and 2 other students.\n    # First, calculate arrangements of these entities treating the triplets as a single unit.\n    # There are 4! ways to arrange these 4 entities.\n    arrangements_entities = factorial(4)\n    \n    # Next, we place the triplet sisters. The triplets can be arranged among themselves in 3! different ways.\n    arrangements_triplets = factorial(3)\n    \n    # Finally, we prevent the twin boys from standing next to each other.\n    # There are 3 places the first boy can stand, and 2 places left for the second boy.\n    arrangements_twins = 3 * 2\n    \n    # Multiply the arrangement options of all entities, triplets, and twins.\n    total_arrangements = arrangements_entities * arrangements_triplets * arrangements_twins\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    distance = 150  # the stretch of road\n    interval = 10   # distance between trees\n    # Since there's a tree at each end, start with 2 trees\n    # Then calculate the number of intervals between the trees and add to the count\n    num_trees = 2 + (distance - interval) // interval\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    total_milk_needed = milk_per_cup * cups_needed\n    return total_milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"21{digit1}{digit2}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    # Pigeonhole principle calculation\n    min_students_in_max_day = (total_students // days_in_week) + 1\n\n    return min_students_in_max_day\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Assuming the first day of summer vacation is a Friday\n    first_day = 1  \n    # There are 55 days of summer vacation in total\n    total_days = 55  \n    # Calculate the number of weeks by dividing the total days by 7 (since a week has 7 days)\n    full_weeks = total_days // 7\n    # Calculate the remaining days after the full weeks\n    remaining_days = total_days % 7 \n\n    # The number of Fridays equals the number of full weeks (since each week has one Friday)\n    # plus one if there are remaining days that can include a Friday\n    fridays = full_weeks + (1 if remaining_days >= first_day else 0)\n\n    return fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - (1 / 2))\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20 / 100\n    girls_wearing_glasses = total_girls * percentage_wearing_glasses\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    N = 5\n    while True:\n        if all(N % d == 0 for d in (2, 3, 4, 5, 6, 8, 9)):\n            return N\n        N += 7  # increment by 7 to ensure the remainder is always 5\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    pencils_for_a_pen = pen_cost // pencil_cost\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Calculate the price of one mug\n    price_per_mug = 3.50 / 5\n    # Calculate the price of one pen\n    price_per_pen = 6.80 / 8\n    # Calculate total cost of 7 mugs\n    total_cost_mugs = price_per_mug * 7\n    # Calculate total cost of 5 pens\n    total_cost_pens = price_per_pen * 5\n    # Calculate total cost of 7 mugs and 5 pens\n    total_cost = total_cost_mugs + total_cost_pens\n    # Calculate the change from £10\n    change = 10 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    fraction_away = 1/5\n\n    pupils_away = total_pupils * fraction_away\n    pupils_going = total_pupils - pupils_away\n\n    return int(pupils_going)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_child_per_song = 3  # 3 minutes for one song\n    number_of_children = 50\n    number_of_songs = 2\n\n    # Total time assuming all children sing simultaneously\n    total_time = time_per_child_per_song * number_of_songs\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - weight_with_2_apples\n    weight_of_basket = weight_with_2_apples - 2 * (weight_of_3_apples / 3)\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    return max(25 / 100, 0.3)\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    rate = 1.5 / 100\n\n    years = 0\n    amount = principal\n\n    while amount < final_amount:\n        interest = amount * rate\n        amount += interest\n        years += 1\n\n    if years == 5:\n        return True\n    else:\n        return years\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes with 6 donuts each\n    donuts_eaten = 3\n    donuts_left = total_donuts - donuts_eaten\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least Common Multiple of 3 and 7\n    i = 1\n    while True:\n        number = lcm * i\n        if str(number).endswith('2'):\n            return number\n        i += 1\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n    return days_in_a_week * num_weeks\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    pos1 = 3 * 10**2  # The value of the 3 in the hundreds place\n    pos2 = 3 * 10**5  # The value of the 3 in the hundred thousands place\n    difference = pos2 - pos1\n    return difference\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the work rates of John, Jonah, and Angus as J, JA, and A, respectively.\n    # These are in units of (walls built per hour).\n    J, JA = symbols('J JA')\n\n    # Equation 1: The rate at which John, Jonah, and Angus, working together, build the wall.\n    # They build one wall in 27 hours.\n    equation1 = Eq(J + JA, 1 / 27)\n\n    # Equation 2: The rate at which Jonah and Angus, working together, build the wall.\n    # They build one wall in 36 hours.\n    equation2 = Eq(JA, 1 / 36)\n\n    # Solve the system of equations to find the values of J and JA\n    # where J is the work rate of John on his own, and JA is the combined work rate of Jonah and Angus.\n    solutions = solve((equation1, equation2), (J, JA))\n\n    # Calculate how long it would take for John to build the wall on his own.\n    # The time taken is the reciprocal of John's work rate.\n    john_time = 1 / solutions[J]\n\n    return john_time\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2 ** 17 % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(n for n in range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # This is a classical problem known as the coin problem, or the Frobenius number problem.\n    # For two coin denominations a and b that are coprime, the largest amount that cannot be paid is a*b - a - b.\n    # Since 4z and 5z are coprime, we can use the formula directly.\n    \n    a = 4\n    b = 5\n    largest_unpayable_total = a * b - a - b\n    \n    return largest_unpayable_total\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # Since we need the maximum value of d and the sum of the 10 integers is 1001,\n    # we simply need to find the largest divisor of 1001 that could be used 10 times\n    # in some combination to sum up to 1001.\n    \n    # Start by finding the divisors of 1001.\n    divisors = [i for i in range(1, 1002) if 1001 % i == 0]\n    # The maximum divisor that can be used 10 times would be the maximum value\n    # of d times 10 should not exceed 1001.\n    # Hence the maximum potential value for d would be 1001 // 10.\n    max_divisor = max(divisor for divisor in divisors if divisor * 10 <= 1001)\n    \n    return max_divisor\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let c be the current age of Claire and d be the current age of Daniel.\n    # Five years ago, Claire would be (c - 5) and Daniel would be (d - 5).\n    # Their combined age five years ago was (c - 5) + (d - 5) = 14.\n\n    # Expressing the current age of Claire and Daniel in terms of their age 5 years ago:\n    # c = (c - 5) + 5 and d = (d - 5) + 5\n    # Thus, c + d = 14 + 5 + 5 (adding 5 to both their ages to get the current age)\n\n    current_combined_age = 14 + 5 + 5  # Their combined age now\n\n    # In 3 years, their combined age will be:\n    combined_age_in_3_years = current_combined_age + 3 + 3\n\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            num = int(f\"1082{a}{b}\")\n            if num % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    weight_4_apples_4_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_4_apples_4_pears.evalf()\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation representing the initial state with the total number of students\n    equation1 = Eq(boys + girls, 152)\n    \n    # Equation after removing 1/11 of the boys and 5 girls\n    equation2 = Eq(boys - boys / 11, girls - 5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            break\n        num += 1\n    return num\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    return 42 + 21 + 16 + 44 + 37\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils // pencils_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_per_day = 50\n    days_to_adult = 30\n    total_days = 40\n    new_adults = 0\n    \n    for day in range(total_days):\n        if day >= days_to_adult:\n            new_adults += eggs_per_day\n\n    return new_adults\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    # The equation is (24 - missing_number)/3 = 7\n    # Multiply both sides by 3 to isolate the missing number on one side\n    # 24 - missing_number = 7 * 3\n    # Subtract 24 from both sides to solve for the missing number\n    # - missing_number = 7 * 3 - 24\n    # Multiply by -1 to get the positive missing number\n    missing_number = 24 - (7 * 3)\n    \n    return missing_number\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    French = 15\n    Japanese = 12\n    Italian = 13\n    French_Japanese = 5\n    French_Italian = 3\n    Japanese_Italian = 2\n    All_three = 1\n\n    total = (French + Japanese + Italian) - (French_Japanese + French_Italian + Japanese_Italian) + All_three\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_litre_orange_drink = 12\n    fraction_of_water = 3 / 4\n    \n    litres_of_water = total_litre_orange_drink * fraction_of_water\n    \n    return litres_of_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n\n    last_term = first_term + (num_rows - 1) * difference\n    total_students = (first_term + last_term) * num_rows / 2\n\n    return int(total_students)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int('5' + str(abcd))\n        N = int(str(abcd) + '5')\n        if M - N == 22122:\n            return abcd\n            \nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 21*286 + 21\n    den1 = 286\n    frac1 = Fraction(num1, den1)\n\n    num2 = 6*2530 + 647\n    den2 = 2530\n    frac2 = Fraction(num2, den2)\n\n    num3 = 1*2829 + 1370\n    den3 = 2829\n    frac3 = Fraction(num3, den3)\n\n    # Perform the calculations\n    result = frac1 / frac2 * frac3\n\n    # Convert the fraction back to a mixed number\n    mixed_num = result.numerator // result.denominator\n    mixed_frac = Fraction(result.numerator % result.denominator, result.denominator)\n\n    return mixed_num, mixed_frac\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # The dimensions of the cuboid are 6x10x12. \n    # When the cuboid is cut into 720 small cubes, it means that each dimension is divided by the same number.\n    # The factor by which the dimensions are reduced can be found by taking the cube root of 720.\n    num_small_cubes = 720\n    factor = round(num_small_cubes ** (1/3))\n    \n    # Now we calculate the new dimensions of the smaller cubes\n    new_x = 6 // factor\n    new_y = 10 // factor\n    new_z = 12 // factor\n    \n    # To calculate the number of cubes with exactly one face painted pink, consider:\n    # - top and bottom layers, without the edges\n    # - front and back layers, without the edges\n    # - left and right layers, without the edges\n    # Calculate the number for one layer (top) and multiply by 2 (top and bottom), same for front/back and left/right\n    top_bottom = (new_x - 2) * (new_y - 2) * 2\n    front_back = (new_y - 2) * (new_z - 2) * 2\n    left_right = (new_x - 2) * (new_z - 2) * 2\n    \n    # The total number of cubes with exactly one face painted\n    total_painted = top_bottom + front_back + left_right\n    \n    return total_painted\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 30 / 100 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 385  # in pence since the amounts are given in pence\n    pencil_price = 38  # in pence\n    ruler_price = 59   # in pence\n\n    money_left = total_money - (pencil_price + ruler_price)\n    return money_left\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_per_hour, nini_per_hour = symbols('star_per_hour nini_per_hour')\n\n    # Star types for 5 hours then Nini types for 20 hours to finish the job\n    equation1 = Eq(5 * star_per_hour + 20 * nini_per_hour, 1)\n\n    # Star types for 20 hours then Nini types for 8 hours to finish the job\n    equation2 = Eq(20 * star_per_hour + 8 * nini_per_hour, 1)\n\n    # Solve the system of equations for hourly rates\n    solutions = solve((equation1, equation2), (star_per_hour, nini_per_hour))\n\n    # Calculate the time it will take Nini to finish the job alone\n    nini_time = 1 / solutions[nini_per_hour]\n\n    return nini_time\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n\n    num_apples_anne = solve(total_apples, anne)\n\n    return num_apples_anne[0]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    candy = 140\n    ways = 0\n    # Factor out the 2^2 = 4 since we need each pile to have odd number of candies\n    odd_candy = candy // 4\n    \n    # A function to calculate all divisors of a number\n    def find_divisors(n):\n        divisors = []\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                divisors.append(i)\n                if n // i not i:\n                    divisors.append(n // i)\n        return divisors\n    \n    # Calculate divisors of the odd_candy \n    divisors = find_divisors(odd_candy)\n    \n    # Iterate over the divisors and for each divisor (which will represent the number\n    # of pieces in each pile), count the ways we can distribute among an odd number of piles\n    for divisor in divisors:\n        if divisor % 2 == 1:\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    return 20 + 19 + 18 + 17 + 16 + 15 + 14 + 13 + 12 + 11 + 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Initial number of stones in stacks A and B\n    stack_A = 20\n    stack_B = 20\n\n    # Tom takes 4 stones from Stack B\n    stack_B -= 4  # Now there are 16 stones in Stack B\n\n    # To ensure Jerry wins, Jerry must take stones to leave a state of equal stones in both stacks\n    # Because from that point, whatever move Tom makes, Jerry can copy on the other stack and eventually win.\n\n    # Calculate how many stones Jerry needs to take from which stack to make both stacks equal\n    stones_to_take = abs(stack_A - stack_B)  # This will make both stacks have the same number of stones\n\n    # Determine from which stack Jerry must take the stones\n    stack_to_take_from = 'B' if stack_B > stack_A else 'A'\n\n    return f'Jerry must take {stones_to_take} stone(s) from Stack {stack_to_take_from}.'\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Every sheet of a newspaper consists of 4 pages.\n    # Two on the front (i.e., p and p+1) and two on the back (i.e., p+2 and p+3).\n    # The third sheet will have the following pages: 5, 6, 7, 8\n\n    # Calculate the sum of the third sheet's page numbers:\n    sum_of_pages = 5 + 6 + 7 + 8\n    \n    return sum_of_pages\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3/7\n    num_girls = total_students * fraction_girls\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    # 1 watermelon = 6 peaches\n    watermelon_to_peaches = 6\n    \n    # 2 peaches = 3 apples\n    peaches_to_apples = 3 / 2\n    \n    # Convert watermelons to apples\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n    \n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    pages = 0\n    digits_used = 0\n    \n    while digits_used < total_digits:\n        pages += 1\n        digits_used += len(str(pages))\n    \n    return pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_apple_juice_cost = 30 * 5\n    total_orange_juice_cost = 50 * 3\n    total_peach_juice_cost = 20 * 10\n\n    total_cost = total_apple_juice_cost + total_orange_juice_cost + total_peach_juice_cost\n    total_cups = 30 + 50 + 20\n\n    average_cost_per_cup = total_cost / total_cups\n\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initially, both boxes have the same number of pens of each color\n    initial_pens = {'blue': 10, 'red': 15, 'black': 20, 'green': 25}\n    \n    # When 20 pens are taken from Box A, there are at least 15 pens of each color left\n    pens_to_leave = {'blue': 15, 'red': 15, 'black': 15, 'green': 15}\n\n    # Calculate how many pens of each color need to be returned\n    pens_to_return = {color: max(0, pens_to_leave[color] - (initial_pens[color] - 20 // 4))\n                      for color in initial_pens}\n\n    # Calculate the total number of pens that need to be returned\n    total_pens_to_return = sum(pens_to_return.values())\n\n    return total_pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    single_digits = 9  # From 1 to 9\n    double_digits = 82 * 2  # From 10 to 91\n    total_digits = single_digits + double_digits\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert 9:15pm to minutes\n    end_time = (11 * 60) + 6    # Convert 11:06pm to minutes\n    duration = end_time - start_time\n    \n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    # Starting from the smallest possible square (3x3)\n    # We will increment the size of the square layer by layer (5x5, 7x7, ...)\n    # Until the condition (boys - girls == 32) is met\n    total_students = 0\n    boys = 0\n    girls = 0\n    layer = 3  # 3x3 is the smallest square to have an outer and inner layer\n\n    while True:\n        # Outer layer students count are layer * 4 - 4\n        # because each corner is counted twice\n        outer_layer_students = layer * 4 - 4\n\n        # On even layers, there are boys, on odd layers, there are girls\n        if layer % 2 == 0:\n            girls += outer_layer_students\n        else:\n            boys += outer_layer_students\n\n        # Conditions check\n        if boys - girls == 32:\n            # Total students in a square = layer^2\n            total_students = layer * layer\n            break\n\n        # Next layer (increment the layer by 2 for the next possible square)\n        layer += 2\n\n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    return 1 / 8\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    # Total chocolates = 20\n    # Plain chocolates = 8\n    # Milk chocolates = 12\n    # Soft-centres chocolates = 16\n\n    # Since there are more soft-centre chocolates (16) than there are milk chocolates (12),\n    # it means at least some of the plain chocolates must have soft centres.\n    # The minimum number of plain chocolates with soft-centres would occur\n    # if all milk chocolates had soft-centres.\n    # Therefore, in the worst-case scenario, all 12 milk chocolates have soft-centres.\n\n    # Total soft-centres chocolates - Milk chocolates with soft-centres\n    plain_with_soft_centres = 16 - 12  # This will give us the minimum number of plain chocolates with soft-centres\n\n    return plain_with_soft_centres\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    quotient = 29\n    remainder = 11\n    sum_dividend_divisor = 431\n\n    # From the given information, we can deduce:\n    # dividend = divisor * quotient + remainder\n\n    # We also know:\n    # dividend + divisor = sum_dividend_divisor\n    # => divisor * quotient + remainder + divisor = sum_dividend_divisor\n    # => divisor * (quotient + 1) + remainder = sum_dividend_divisor\n\n    # Now we can solve for divisor:\n    # divisor = (sum_dividend_divisor - remainder) / (quotient + 1)\n    divisor = (sum_dividend_divisor - remainder) / (quotient + 1)\n\n    # Then we calculate the dividend using the first deduced equation:\n    dividend = divisor * quotient + remainder\n\n    # Finally, we take the absolute difference between the dividend and divisor:\n    difference = abs(dividend - divisor)\n    return int(difference)\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage = 12.5 / 100\n    violin_players = 11\n    total_pupils = violin_players / percentage\n    \n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    cost_per_bar = 50\n    C = cost_per_bar * n\n    return C\n\nans = solution(n)  # 'n' would be provided somewhere in your code as the number of chocolate bars"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    # Denote the number of each type of coin by n.\n    # Each 1p coin contributes 1 * n pence.\n    # Each 2p coin contributes 2 * n pence.\n    # Each 5p coin contributes 5 * n pence.\n    # Each 10p coin contributes 10 * n pence.\n    # The total sum in pence is 90.\n\n    # So, we have 1 * n + 2 * n + 5 * n + 10 * n = 90\n    # This simplifies to 18 * n = 90\n    # Hence n = 90 / 18\n\n    n = 90 // 18  # We use integer division since number of coins cannot be fractional.\n\n    # Since there are equal numbers of each coin, the total number of coins is 4 times n.\n    total_coins = 4 * n\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for apples and pears\n    apples, pears = symbols('apples pears')\n\n    # Create equations based on the problem statement\n    total_fruits_eq = Eq(apples + pears, 105)  # Total number of apples and pears\n    remaining_apples_eq = Eq(apples - (1/3)*apples, (5/6)*(pears - (2/5)*pears))  # Relation between remaining apples and pears\n\n    # Solve the system of equations\n    solutions = solve((total_fruits_eq, remaining_apples_eq), (apples, pears))\n\n    # Calculate the number of fruits sold\n    apples_sold = (1/3) * solutions[apples]\n    pears_sold = (2/5) * solutions[pears]\n    total_sold = apples_sold + pears_sold\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = 0.2 * total_cars\n\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    ratio_equation = Eq(4*A, 5*B)\n    ratio_equation2 = Eq(5*B, 6*C)\n    difference_equation = Eq(C - A, 10)\n\n    solutions = solve((ratio_equation, ratio_equation2, difference_equation), (A, B, C))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n    \n    # Since A, B, C and D are always next to each other, treat them as one unit. \n    # So we have 9 units (the combined unit of A-D, and the 8 other students)\n    units_permutations = factorial(9)\n    \n    # The students A, B, C, and D can be arranged amongst themselves in 4! ways,\n    # since we have 4 students within the unit.\n    ABCD_permutations = factorial(4)\n    \n    # The total number of ways they can line up is the product of the two permutations\n    total_permutations = units_permutations * ABCD_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # The total number of points earned by the students will be the same as the total\n    # number of games played times 2 (since 2 points are awarded per game).\n    # Each student plays every other student once, which equals:\n    # 5 games for the first student, 4 for the second, 3 for the third, etc.\n    # This is the sum of the first 5 positive integers, which is 5 * (5 + 1) / 2 = 15.\n    # Since we have 6 students, the total games played is C(6, 2), which is 6! / (2! * 4!) = 15 games.\n    total_games_played = 15\n\n    # Each game has 2 points awarded, so the total points awarded is:\n    total_points = total_games_played * 2  # Two points per game\n\n    # The sum of points of the five students mentioned is:\n    points_known_students = 7 + 6 + 5 + 4 + 3\n\n    # The points for the remaining student is therefore:\n    points_last_student = total_points - points_known_students\n\n    return points_last_student\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total weight of candy in bag A, y be the total weight of candy in bag B\n    x, y = symbols('x y')\n\n    # Original ratio of weights: A / B = 5 / 3\n    equation1 = Eq(x / y, 5 / 3)\n\n    # After transferring 10 grams from A to B, the new weights are x - 10 and y + 10\n    # New ratio of weights: (A - 10) / (B + 10) = 7 / 5\n    equation2 = Eq((x - 10) / (y + 10), 7 / 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total weight of both bags is the sum of x and y\n    total_weight = solutions[x] + solutions[y]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    number_of_girls = (number_of_boys / boys_to_girls_ratio) * 5\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n    \n    # Total number of players = n/2 * (first_line_players + last_line_players)\n    # where n is the number of terms in the arithmetic sequence\n    # So we solve for n using the above formula\n    # 378 = n/2 * (22 + 62)\n    \n    sum_of_first_and_last = first_line_players + last_line_players\n    number_of_lines = (2 * total_players) / sum_of_first_and_last\n    \n    # Now we find the common difference d using the formula for the nth term of an arithmetic sequence:\n    # last_line_players = first_line_players + (n - 1) * d\n    \n    difference = (last_line_players - first_line_players) / (number_of_lines - 1)\n    \n    return difference\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    # Calculate the product first\n    product = 48 * 925 * 38 * 435\n\n    # Convert the product to string to count the number of zeros at the end\n    product_str = str(product)\n\n    # Count the number of zeros at the end of the string\n    count_zeros = 0\n    for char in reversed(product_str):\n        if char == '0':\n            count_zeros += 1\n        else:\n            break\n            \n    return count_zeros\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # All masses converted to grams\n    max_mass = max(masses)\n\n    return max_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import Rational\n\n    # Given values\n    thefts = 2\n    bark_prob_with_theft = Rational(9, 10)   # Probability of barking given a theft\n    weeks = 1000 / 7                         # Number of weeks in 1000 days\n    barks_per_week = 3\n\n    # Calculate the total number of barks\n    total_barks = barks_per_week * weeks\n\n    # Probability of a particular bark being during a theft\n    prob_bark_during_theft = (bark_prob_with_theft * thefts) / total_barks\n\n    return prob_bark_during_theft\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use symbols for the different types of candies\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_girls = 6 / 11\n    num_girls = total_children * fraction_girls\n    num_boys = total_children - num_girls\n    return int(num_boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    smallest_diff = float('inf')\n    \n    # Generate all permutations of the digits 1 through 9\n    from itertools import permutations\n    for perm in permutations('123456789'):\n        number = int(''.join(perm))\n        # Generate all other permutations for the second number and compute the difference\n        for perm2 in permutations('123456789'):\n            if perm != perm2:\n                number2 = int(''.join(perm2))\n                diff = abs(number - number2)\n                if diff == 0:\n                    continue  # numbers are same, not interested\n                smallest_diff = min(smallest_diff, diff)\n\n    return smallest_diff\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70*4) - (80*3) + (60*5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total number of bricks be x\n    x = symbols('x')\n    \n    # First trip moved x/2 - 26 bricks\n    first_trip = x / 2 - 26\n    \n    # Remaining bricks after the first trip\n    remaining_after_first = x - first_trip\n    \n    # Second trip moved (remaining_after_first / 2) + 11 bricks\n    second_trip = remaining_after_first / 2 + 11\n    \n    # Remaining bricks after the second trip\n    remaining_after_second = remaining_after_first - second_trip\n    \n    # Third trip moved 68 bricks, and 25 bricks were left unmoved\n    third_trip = 68\n    remaining_bricks = 25\n    \n    # Equation for the total amount of bricks\n    equation = Eq(remaining_after_second - third_trip, remaining_bricks)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    ans = sum(str(i).count('1') for i in range(1, 131))\n    return ans\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    # Number of kids\n    n = 3\n    # Number of ways to arrange n kids\n    num_ways = factorial(n)\n\n    return num_ways\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Since Mike is always the 2nd in line, we know that the square array\n    # must have a minimum size of 3x3 to satisfy the condition.\n    students = 3\n    while True:\n        # Check if the number of students can form a perfect square array.\n        if (students ** 0.5).is_integer() and students - 1 == 2 * (int(students ** 0.5) - 1):\n            return students\n        students += 1\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Initial condition, boys are 65 fewer than girls\n    eq1 = Eq(boys, girls - 65)\n    \n    # After a fraction of boys and girls left, they are equal\n    eq2 = Eq((2/5) * boys, (3/7) * girls)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (boys, girls))\n    \n    # Calculate the total number left in the hall\n    boys_left = (3/5) * solutions[boys]\n    girls_left = (4/7) * solutions[girls]\n    total_left = boys_left + girls_left\n    \n    return int(total_left)\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum_ages = 22\n    target_sum_ages = 40\n    # The sum of their ages increases by 2 each year as they both get one year older\n    years_until_target = (target_sum_ages - current_sum_ages) // 2\n    return years_until_target\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)  # Calculate the remaining passengers after the first stop\n    original_passengers = remaining_after_first_stop / (1 - 2/5)  # Calculate the number of passengers at the start\n    return int(original_passengers)\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g = the number of girls, b = the number of boys\n    # Let gs = the number of girls who can swim, gb = the number of girls who can not swim\n    # Let bs = the number of boys who can swim, bb = the number of boys who can not swim\n    g, gs, gb, bs, bb = symbols('g gs gb bs bb')\n\n    # We have the following relationships:\n    # b = g + 90 (90 more boys than girls)\n    # gs / gb = 31 / 49 (ratio of girls who can swim to those who cannot)\n    # bs = bb - 120 (the number of boys who can swim is 120 less than the number of boys who can not swim)\n    # g + b = 1690 (the total number of pupils)\n    # gs + gb = g (the total number of girls is the sum of those who can swim and those who cannot)\n    # bs + bb = b (the total number of boys is the sum of those who can swim and those who cannot)\n    \n    equation1 = Eq(g + (g + 90), 1690)\n    equation2 = Eq(gs / gb, 31 / 49)\n    equation3 = Eq(bs, bb - 120)\n    equation4 = Eq(gs + gb, g)\n    equation5 = Eq(bs + bb, g + 90)\n\n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (g, gs, gb, bs, bb))\n    \n    # The number of pupils who cannot swim is the sum of gb and bb\n    pupils_cannot_swim = solutions[gb] + solutions[bb]\n\n    return pupils_cannot_swim\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    count = 0\n    for page in range(1, 21):\n        count += len(str(page))\n    return count\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Initialize the ways array with zeros, where index represents the number of steps\n    ways = [0] * 11\n    # There is 1 way to reach the 0th step (by not climbing at all)\n    ways[0] = 1\n\n    # Calculate the number of ways to reach each step\n    for i in range(1, 11):\n        # By taking 2 steps from (i-2)th step, if it is possible\n        if i - 2 >= 0:\n            ways[i] += ways[i - 2]\n        # By taking 3 steps from (i-3)th step, if it is possible\n        if i - 3 >= 0:\n            ways[i] += ways[i - 3]\n\n    # The number of ways to reach the 10th step\n    return ways[10]\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for i in range(1000, 10000):\n        new_number = int(str(i)[-1] + str(i)[:3])\n        if new_number - i == 5877:\n            return i\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n\n    minimum_dividend = smallest_divisor * quotient + remainder\n\n    return minimum_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n    \n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number = 1998\n    multiple = ''\n    n = 0\n\n    while True:\n        multiple += str(number)\n        n = len(multiple)\n        if int(multiple) % 33 == 0:\n            break\n\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first = group_number\n    second = first ** 2\n    third = second * group_number\n\n    return first + second + third\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    total_miles = 3.75\n    per_run_mileage = 1 / 4\n    number_of_runs = total_miles / per_run_mileage\n    return int(number_of_runs)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000030\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n\n    total_girls = (total_boys / boys_to_girls_ratio)\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for num in range(100, 1000):  # Loop through three-digit numbers\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num  # Return the first number that satisfies all conditions\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n    \n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbols for the number of erasers they have\n    candice, doris, elly = symbols('candice doris elly')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # we know 10/x = 14/21\n    # Therefore, x = (10*21)/14\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10\n    correct_answer = original_number + tens_to_add\n    johnnys_answer = 5839\n    return correct_answer if johnnys_answer != correct_answer else johnnys_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    count = 0\n    for i in range(1, 28):\n        if 27 % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # 3 meters converted to cm\n    lengths_cm = [147, 32.5, 67]  # lengths of the three pieces in cm\n\n    fourth_length_cm = total_length_cm - sum(lengths_cm)  # remaining length for the fourth piece\n    return fourth_length_cm\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from itertools import product\n\ndef solution():\n    probabilities = [0.5, 0.4, 0.2]\n    pass_counts = {0: 0, 1: 0, 2: 0, 3: 0}\n\n    for outcome in product((0, 1), repeat=3):\n        prob = 1\n        pass_count = sum(outcome)\n        for i, passed in enumerate(outcome):\n            prob *= probabilities[i] if passed else 1 - probabilities[i]\n        pass_counts[pass_count] += prob\n\n    most_likely_pass_count = max(pass_counts, key=pass_counts.get)\n    return most_likely_pass_count\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    total_paper = 18\n    interval = 3\n    leaves_needed = (total_paper - 1) // interval\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "网络故障，请重试"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    ans = None\n    for i in range(10, 100, 10):  # Check only numbers ending with 0\n        if i % 6 == 0 and i % 9 == 0:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # Initialize with the first term\n    for i in range(2, 11):  # From 2 to 10\n        ans += (1/i) * (i - 1)  # Add (1/i) multiplied by (i-1) to cover all fractions from 1/i to (i-1)/i\n        ans += (1/i) * (i - 1)  # Repeat to cover all fractions from (i-1)/i to 1/i\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n\n    # Initial ratio of watches to caps.\n    equation1 = Eq(watches/caps, 8/11)\n    \n    # Ratio after selling 88 caps.\n    equation2 = Eq(watches/(caps-88), 12/11)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Sam spends 30 minutes to cover the distance between the first and the sixth house\n    # This means he covers 5 intervals (between house 1 and 2, 2 and 3, 3 and 4, 4 and 5, 5 and 6)\n    time_for_5_intervals = 30  # in minutes\n    # The total number of intervals for 10 houses is 9 (between house 1 and 2 up to 9 and 10)\n    total_intervals = 9\n\n    # Calculate the time for each interval\n    time_per_interval = time_for_5_intervals / 5\n\n    # Calculate the total time for all 9 intervals\n    total_time = time_per_interval * total_intervals\n\n    return total_time\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    # Loop through all possible values for the last digit (D)\n    for D in range(1, 10):\n        A = D // 4\n        if 4 * A != D or A == 0:\n            continue\n        B = A - 1\n        if B <= 0:\n            continue\n        # Loop through all possible values for C\n        for C in range(0, 10):\n            if C == A or C == B or C == D:\n                continue\n            ABCD = 1000 * A + 100 * B + 10 * C + D\n            DCBA = 1000 * D + 100 * C + 10 * B + A\n            if 4 * ABCD == DCBA:\n                return ABCD\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # total length of the ribbon in meters\n    total_length_cm = total_length_m * 100  # convert meters to centimeters\n    \n    # Let the length of the shorter piece be x cm. Then the longer piece would be 2x cm.\n    # Based on the problem we know that: x + 2x = total_length_cm\n    \n    # Solve for x\n    x = total_length_cm / 3\n    \n    # Calculate the length of the longer piece\n    longer_piece_cm = 2 * x\n    \n    return longer_piece_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    total_coins = 2015\n    max_pick = 11\n    # To ensure Jack wins, the remaining coins after Jack's first turn should be a multiple of (max_pick + 1)\n    # Jack's aim is to get the coin count in a state such that no matter how Ken plays, Jack can always leave\n    # a multiple of (max_pick + 1) coins after his turn.\n    # So Jack's first move should get to (total_coins - 1) % (max_pick + 1)\n    coins_to_pick = (total_coins - 1) % (max_pick + 1)\n\n    return coins_to_pick if coins_to_pick > 0 else max_pick  # if 0, Jack can pick the max_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin (0, 0), we know that b = 0.\n    # Now we use the point (4, 8) to find the slope m.\n    x2, y2 = 4, 8\n    x1, y1 = 0, 0\n\n    # The slope m is calculated by the change in y divided by the change in x.\n    m = (y2 - y1) / (x2 - x1)\n\n    # Since b = 0, the linear equation is y = mx.\n    return f\"y={m}x\"\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    number_in_words = \"twelve hundred million, thirty-one thousand and ninety three\"\n    parts = number_in_words.replace(\"and \", \"\").split(\", \")\n    \n    num_dict = {\n        \"hundred\": 100,\n        \"thousand\": 1000,\n        \"million\": 1000000,\n        \"billion\": 1000000000\n    }\n\n    total = 0\n    for part in parts:\n        if '-' in part:\n            temp_parts = part.split('-')\n            num1 = int(temp_parts[0]) * num_dict[temp_parts[1].split(' ')[1]]\n            num2 = int(temp_parts[1].split(' ')[0])\n            total += num1 + num2\n        else:\n            words = part.split(' ')\n            if len(words) == 3:\n                total += int(words[0]) * num_dict[words[1]] * num_dict[words[2]]\n            elif len(words) == 2:\n                total += int(words[0]) * num_dict[words[1]]\n            else:\n                total += int(words[0])\n\n    return total\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # ●○●○○ pattern: 3 white balls in every 5 balls\n    pattern_white_balls = 3\n    pattern_total_balls = 5\n    \n    # Find complete patterns\n    complete_patterns = 92 // pattern_white_balls\n    \n    # Calculate total balls for complete patterns\n    total_balls = complete_patterns * pattern_total_balls\n    \n    # Find remaining white balls outside of complete patterns\n    remaining_white_balls = 92 % pattern_white_balls\n    \n    # Add remaining balls to the total, considering the pattern repeats\n    if remaining_white_balls > 0:\n        if remaining_white_balls == 1:\n            # If there's 1 remaining white ball, add 2 (since ●○)\n            total_balls += 2\n        elif remaining_white_balls == 2:\n            # If there are 2 remaining white balls, add 4 (since ●○●○)\n            total_balls += 4\n        \n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def count_holes(num):\n        holes = {0: 1, 1: 0, 6: 1, 8: 2, 9: 1}\n        return sum(holes[int(digit)] for digit in str(num) if int(digit) in holes)\n\n    ans = count_holes(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let the age of the youngest dwarf be x\n    # Then, the ages of the youngest three are: x, x+1, and x+2\n    # Their total age is: x + (x+1) + (x+2) = 42\n    # So, 3x + 3 = 42\n    # Then x, the age of the youngest, is (42 - 3) / 3\n    youngest_age = (42 - 3) // 3\n    \n    # The oldest one is 6 years older than the youngest one\n    oldest_age = youngest_age + 6\n    \n    return oldest_age\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    for pears in range(1, 1000):  # Assuming the number won't be too large for practicality\n        if (pears - 2) % 6 == 0 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    sharpened_shorter_mm = 4\n    sharpened_shorter_cm = sharpened_shorter_mm / 10\n    new_length = original_length_cm - sharpened_shorter_cm\n    return new_length\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances in meters\n    distance1 = 420\n    distance2 = 620\n    # The remaining distance is the total minus the sum of the first two distances\n    distance3 = 1200 - (distance1 + distance2)\n\n    # Time = Distance / Speed for each part of the race\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time is the sum of times for all parts\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_average = 89\n    desired_average = 95\n    current_total_tests = 4\n    current_total_marks = current_average * current_total_tests\n    additional_tests = 0\n\n    while True:\n        additional_tests += 1\n        new_average = (current_total_marks + 100 * additional_tests) / (current_total_tests + additional_tests)\n        if new_average >= desired_average:\n            break\n\n    return additional_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be number of $10 notes and y be number of $2 notes\n    x, y = symbols('x y')\n\n    # Equation based on the total number of notes\n    eq1 = Eq(x + y, 72)\n\n    # Equation based on the notes left after spending\n    # David spent 90% of $10 notes and 75% of $2 notes, so he has left 10% and 25% respectively\n    eq2 = Eq(0.1 * x, 0.25 * y * 2)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Determine the number of $10 and $2 notes originally\n    num_10_notes = solutions[x]\n    num_2_notes = solutions[y]\n\n    # Calculate the amount spent\n    spent_10_notes = 0.9 * num_10_notes * 10\n    spent_2_notes = 0.75 * num_2_notes * 2\n\n    # Total cost of the gift\n    total_cost = spent_10_notes + spent_2_notes\n\n    return total_cost\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    # Let a, b, c be the work rates of Hoses A, B, and C respectively.\n    # If Hose A and B together take 9 hours, their combined work rate is 1/9 pool per hour.\n    # If Hose A and C together take 12 hours, their combined work rate is 1/12 pool per hour.\n    # If Hose B and C together take 18 hours, their combined work rate is 1/18 pool per hour.\n    # Adding these combined work rates gives us:\n    # a + b + a + c + b + c = 1/9 + 1/12 + 1/18\n    # Simplifying, we get:\n    # 2a + 2b + 2c = 1/9 + 1/12 + 1/18\n    # Hence, a + b + c (the work rate of all three hoses together) is half of the RHS.\n    # The time taken to fill the pool with all three hoses is then the reciprocal of\n    # their combined work rate.\n\n    # Calculate the combined work rate of all three hoses:\n    combined_rate = (1/9 + 1/12 + 1/18) / 2\n\n    # Calculate the time it will take to fill the pool with this combined work rate:\n    time_to_fill = 1 / combined_rate\n\n    return time_to_fill\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    meters_per_day = 75\n    days = 4\n    total_length = meters_per_day * days\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # There are 3 different colors\n    colors = 3\n    \n    # To be sure we have at least 2 markers of the same color,\n    # We take one marker of each color + 1 additional marker\n    num_markers = colors + 1\n    \n    return num_markers\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    for five_notes in range(59):\n        two_notes = 58 - five_notes\n        total = two_notes * 2 + five_notes * 5\n        if total == 164:\n            return five_notes\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter, john = symbols('sam peter john')\n    # let original number of stickers for John be 'john'\n    \n    # Sam and Peter had stickers in the ratio 7 : 5\n    equation1 = Eq(sam / peter, 7 / 5)\n    \n    # Both Sam and Peter gave 20% of their stickers to John\n    # Sam gave 0.2 * sam stickers to John\n    # Peter gave 0.2 * peter stickers to John\n    # After giving away, Sam has 0.8 * sam stickers, Peter has 0.8 * peter stickers\n    # John's stickers increased by 80%, which means it became 1.8 * john stickers\n    # Therefore, the total amount of stickers John received is 1.8 * john - john\n    # Thus, Sam + Peter's total contribution is equal to John's increase\n    equation2 = Eq((1.8 * john - john), (0.2 * sam + 0.2 * peter))\n\n    # After giving stickers to John, Sam had 20 more stickers than John\n    # 0.8 * sam - 1.8 * john = 20\n    equation3 = Eq((0.8 * sam - 1.8 * john), 20)\n    \n    # solve for sam, peter and john\n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n    \n    # return the initial number of stickers Peter had\n    return solutions[peter]\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Calculate the common difference\n    common_difference = 120 - 105  # this is the difference between the consecutive terms\n\n    # Calculate the first term of the sequence\n    first_term = 105 - common_difference * (7 - 1)  # since the 105 is the 7th term\n\n    # Calculate the 100th term of the sequence\n    hundredth_term = first_term + common_difference * (100 - 1)  # because we want the 100th term\n\n    return hundredth_term\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    total_spent = 187.50\n    # She spent 5/9 of her money on the initial purchase of cupcakes and muffins\n    # and then 1/6 of her money on additional cupcakes\n    # Therefore, the initial purchase of cupcakes and muffins is (5/9 - 1/6) of her total money\n    fraction_initial = (5 / 9) - (1 / 6)\n    initial_money = total_spent / (1 / fraction_initial)\n\n    # The initial number of cupcakes Cellina bought before spending the additional 1/6 of her money\n    initial_cupcakes = 36\n    # The price for one cupcake is the total spent on cupcakes divided by the total number of cupcakes bought\n    price_per_cupcake = total_spent / (initial_cupcakes + total_spent / (price_per_muffin * 3) )\n\n    # Now find the price of one muffin\n    price_per_muffin = price_per_cupcake / 3\n\n    # Finally, calculate how much she spent on muffins\n    muffins_spent = 32 * price_per_muffin\n    \n    return muffins_spent\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(4, 9))\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    \n    # To find the minimum number of pigeons in the cage with the most pigeons,\n    # We use the Pigeonhole Principle. According to the principle, if n pigeons\n    # are put into m cages, then at least one cage must contain at least\n    # ceil(n/m) pigeons (where ceil is the ceiling function).\n    pigeons_per_cage = -(-total_pigeons // total_cages) # Ceiling division in Python\n  \n    return pigeons_per_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    number_of_parterres = 1007\n    minimum_sprinklers_needed = number_of_parterres - 1\n    return minimum_sprinklers_needed\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    # Mass of papaya in kg\n    mass_papaya = 2 + 1/4\n    \n    # Mass of jackfruit is 3 times the mass of papaya\n    mass_jackfruit = 3 * mass_papaya\n    \n    # Total mass of the papaya and the jackfruit\n    total_mass = mass_papaya + mass_jackfruit\n    \n    # James's error was in multiplying the papaya's mass by 4 instead of calculating the jackfruit's mass correctly\n    # Correct total mass is returned\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    current_steps = 1991\n\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            break\n\n    return current_steps - 1991\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # We want the smallest number of marbles, starting with 2\n    # Since each box must contain a multiple of 2 and a different amount of marbles\n    # except for two boxes, we can start by assigning 2 marbles to the first box\n    # and then continue with the multiples of 2 for the rest.\n    \n    # Initialize a list to contain the smallest multiple of 2 for each box\n    marbles = [2]\n    \n    # Since 9 boxes need to have a unique count of marbles that are multiples of 2,\n    # we will use the first 9 even numbers (minimum requirement). For the 10th box, \n    # we'll replicate the smallest number of marbles, which is 2.\n    \n    # Starting from 4 (next multiple of 2), assign to each subsequent box\n    for i in range(4, 4+(8*2), 2):\n        marbles.append(i)\n    \n    # Add another 2 to account for the two boxes with the same number of marbles\n    marbles.append(2)\n    \n    # Smallest number of marbles is the sum of marbles in each box\n    ans = sum(marbles)\n    return ans\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    first_day = 8\n    second_day = total_length / 6 + 4\n    two_days = total_length * 5 / 12\n\n    equation = Eq(first_day + second_day, two_days)\n\n    total_length_solution = solve(equation, total_length)\n\n    return total_length_solution[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 4, 5]\n    three_digit_numbers = list(permutations(digits, 3))\n    count = len(three_digit_numbers)\n\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Let x be the total number of bottle caps before giving away.\n    # According to the problem, after giving away $440 bottle caps, Justin is left with 5/9 of the collection.\n    # This means that 440 bottle caps correspond to 4/9 of the collection (since 9/9 - 5/9 = 4/9).\n    # We can set up the equation: (4/9) * x = 440\n    # Solving for x gives us the original number of bottle caps.\n    \n    # Calculate the original number of bottle caps\n    x = (440 * 9) / 4\n\n    return int(x)\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n\n    # Subtract the corner wheats (4 of them are on the corners)\n    total_wheat -= 4\n\n    # The wheats are distributed among two lengths and two widths\n    per_side_wheat = total_wheat // 4\n\n    # Calculate the spacing for length and width separately\n    length_spacing = (length - 1) / per_side_wheat # subtract 1 to account for the corner wheat\n    width_spacing = (width - 1) / per_side_wheat # subtract 1 to account for the corner wheat\n\n    # Both spacings should be equal, take one as the answer\n    distance_between_wheat = length_spacing\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    i = 1\n    while True:\n        num = i * 35\n        num_str = str(num)\n        if num_str.endswith('35'):\n            digits_sum = sum(int(digit) for digit in num_str)\n            if digits_sum == 35:\n                return num\n        i += 1\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_nuts = 112\n    sunny_nuts = 20\n    rainy_nuts = 12\n\n    # Let the number of rainy days be 'r' and sunny days be 's'.\n    # We have two equations, s + r = total_days and sunny_nuts * s + rainy_nuts * r = total_nuts.\n\n    for r in range(total_days+1):\n        s = total_days - r\n        if (sunny_nuts * s + rainy_nuts * r) == total_nuts:\n            return r\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    mary, alexis, charlotte_initial, charlotte_final = symbols('mary alexis charlotte_initial charlotte_final')\n\n    # Given conditions\n    equation1 = Eq(mary, (7/5) * alexis) # Marry had 7/5 as many stickers as Alexis\n    equation2 = Eq(charlotte_final, charlotte_initial + 0.8 * charlotte_initial) # Charlotte's stickers increased by 80%\n    equation3 = Eq(mary - 0.2 * mary, charlotte_final + 20) # Mary had 20 stickers more than Charlotte after giving 20% to Charlotte\n    equation4 = Eq(alexis - 0.2 * alexis, charlotte_initial + 0.2 * mary) # Alexis gave 20% of her stickers to Charlotte\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (mary, alexis, charlotte_initial, charlotte_final))\n\n    # Return the number of stickers Alexis had at first\n    return solutions[alexis]\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pence\n    price_1 = 15\n    price_2 = 28\n    price_5 = 60\n    \n    # Total bottles needed\n    bottles = 17\n    \n    # Initialize the minimum cost to a large number\n    min_cost = float('inf')\n    \n    # Loop through possible combinations of packs\n    for pack_5 in range(bottles // 5 + 1):\n        for pack_2 in range((bottles - pack_5 * 5) // 2 + 1):\n            pack_1 = bottles - pack_5 * 5 - pack_2 * 2\n            cost = pack_1 * price_1 + pack_2 * price_2 + pack_5 * price_5\n            min_cost = min(min_cost, cost)\n    \n    # Convert the minimum cost to pounds\n    min_cost_in_pounds = min_cost / 100\n    return min_cost_in_pounds\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, every game eliminates one person.\n    # With 4 people, we need to eliminate 3 people to determine a winner.\n    # Therefore, we need 3 rounds to determine a winner.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_correct = 10\n    second_correct = 15\n    both_correct = 7\n\n    one_correct = (first_correct - both_correct) + (second_correct - both_correct)\n\n    return one_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    days_off = (end_date - start_date).days + 1\n    return days_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces of candy, then they would have the same number of pieces\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If both eat 8 pieces of candy, Rachel has 3 times as many pieces of candy left over as Alice\n    equation2 = Eq((rachel - 8)/3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # meters per second\n    time_passed = 5  # seconds\n    length_of_train = speed * time_passed  # distance = speed * time\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(6):  # 6 because we already have the first two terms\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Define the original expression elements\n    a = 285\n    b = 15\n    c = 5\n    d = 2\n    \n    # Calculate different results with different combinations of brackets\n    results = set()\n    results.add(a + b / c - d)  # No brackets\n    results.add(a + (b / c) - d)  # Same as no brackets due to order of operations\n    results.add((a + b) / c - d)  # Brackets changing addition order\n    results.add((a + b / c - d))  # Same as no brackets due to order of operations  \n    results.add(a + b / (c - d))  # Brackets changing division order\n    results.add(a + (b / c - d))  # Same as no brackets due to order of operations\n    results.add((a + b) / (c - d))  # Brackets changing addition and division order\n    results.add(((a + b) / c) - d)  # Brackets changing the scope of division\n    results.add(a + ((b / c) - d))  # Redundant due to order of operations\n    results.add(a + (b / (c - d)))  # Changing the divisor\n    results.add((a + (b / c)) - d)  # Redundant due to order of operations\n    \n    # Return the number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the mushrooms gathered in each hour\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # We have two equations based on the problem statement\n    # 1. The first equation represents the total mushrooms gathered in two hours\n    equation1 = Eq(first_hour + second_hour, 40)\n    # 2. The second equation represents that after adding 26 more mushrooms to the first hour, the amounts would be equal\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towels_price = 10\n    brushes_price = 3\n    total_spent = 59\n\n    max_brushes = total_spent // brushes_price\n    for num_brushes in range(max_brushes + 1):\n        if num_brushes * brushes_price < 10:\n            if (total_spent - num_brushes * brushes_price) % towels_price == 0:\n                return num_brushes\n    return 0\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_bears = 35\n    days = 5\n    difference = 2\n\n    # Using n/2 * (2a + (n - 1)d) = S, where n is the number of terms, a is the first term,\n    # d is the common difference, and S is the sum.\n    # Here, we want to find the first term a.\n    \n    # Rearranged the formula to solve for a: a = (S/n - (n - 1)d) / 2\n    first_day_bears = (total_bears / days - (days - 1) * difference) / 2\n\n    # Calculate the number of bears made on the last (fifth) day.\n    fifth_day_bears = first_day_bears + difference * (days - 1)\n\n    return int(fifth_day_bears)\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    result_number = 71\n    multiplied_by = 7\n    added_number = 8\n\n    original_number = (result_number - added_number) / multiplied_by\n\n    return original_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(0.49).limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    options = [0, 1, 8]\n    count = 0\n    for hundreds_place in options[1:]:  # Hundreds place cannot be 0\n        for tens_place in options:\n            if tens_place != hundreds_place:\n                for ones_place in options:\n                    if ones_place != tens_place and ones_place != hundreds_place:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    # Number of pink, grey, and blue marbles\n    pink = 9\n    grey = 7\n    blue = 11\n    \n    # To ensure drawing a blue marble without looking, we consider the worst case:\n    # Drawing all pink and grey marbles first.\n    draw_without_blue = pink + grey\n    \n    # To ensure a blue marble is drawn next, add one more draw.\n    ans = draw_without_blue + 1\n    \n    return ans\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    return 262 + 8\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n\n    price_of_computer = sales_tax_paid / sales_tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n    numbers = range(1, 9)  # Numbers from 1 to 8\n    for perm in permutations(numbers):\n        # Check if any two adjacent numbers are coprime\n        if all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm)-1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3/10\n    whole = 6/7\n    percentage = (part / whole) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n\n    # Equation representing the relationship between boys and girls\n    equation1 = Eq(boys, girls - 30)\n\n    # Equation after a fraction of boys and girls left the hall for recess\n    equation2 = Eq((1 - 3/5) * boys, (1 - 5/8) * girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Number of boys present at the graduation ceremony at first\n    num_boys = solutions[boys]\n\n    return num_boys\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n    \n    equation1 = Eq(frogs_begin - dragonflies_begin, 9)\n    equation2 = Eq(frogs_begin - (11 - dragonflies_begin), dragonflies_begin - (10 - frogs_begin))\n\n    solutions = solve((equation1, equation2), (frogs_begin, dragonflies_begin))\n\n    return solutions[frogs_begin]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    total_subtraction = sum(numbers_to_subtract)\n    ans = 300 - total_subtraction\n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    # Given equation (24 - _) / 4 = 4\n    # Let's find the missing number denoted by _\n\n    # Rearrange the equation to solve for the missing number\n    # Missing number = 24 - (4 * 4)\n\n    missing_number = 24 - (4 * 4)\n    return missing_number\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Rates of workers: A, B, C\n    AB_rate = 1 / 3  # Job per hour\n    BC_rate = 1 / 4\n    AC_rate = 1 / 8\n    \n    # Sum of individual rates of A, B, C\n    # A_rate + A_rate + B_rate + C_rate = AB_rate + BC_rate + AC_rate\n    # 2 * (A_rate + B_rate + C_rate) = AB_rate + BC_rate + AC_rate\n    sum_rates = (AB_rate + BC_rate + AC_rate) / 2\n    \n    # Time taken by A, B, C together\n    ABC_time = 1 / sum_rates\n    return ABC_time\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "网络故障，请重试"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "from itertools import combinations\n\ndef solution():\n    # Define operation function including addition, division, and subtraction\n    operations = {\n        '+': lambda a, b: a + b,\n        '/': lambda a, b: a / b,\n        '-': lambda a, b: a - b,\n    }\n\n    # Define the initial sequence of the numbers and operators\n    elements = [285, '+', 15, '/', 5, '-', 2]\n    \n    # Calculate all possible results with one and two pairs of brackets\n    results = set()\n    for num_brackets in [1, 2]:\n        for comb in combinations(range(1, len(elements), 2), num_brackets):\n            for locs in combinations(comb, 2):\n                new_elements = elements[:]\n                # Add brackets around operator at locs in elements\n                for loc in locs:\n                    new_elements[loc-1:loc+2] = [f'({new_elements[loc-1]}{new_elements[loc]}{new_elements[loc+1]})']\n                \n                # Evaluate the new expression with brackets\n                while len(new_elements) != 1:\n                    for i, el in enumerate(new_elements):\n                        if isinstance(el, str) and el[0] == '(':\n                            # Perform operation inside brackets\n                            parts = el.strip('()').split()\n                            new_elements[i] = operations[parts[1]](int(parts[0]), int(parts[2]))\n                            break\n                        elif i > 0 and isinstance(new_elements[i-1], int) and isinstance(el, str):\n                            # Perform operation without brackets\n                            new_elements[i-1:i+2] = [operations[el](new_elements[i-1], new_elements[i+1])]\n                            break\n                results.add(new_elements[0])\n                \n    return len(results)\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the unknown variable for the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation: total sugar = sugar from 45% solution + sugar from 15% solution\n    equation = Eq(2 * 0.45 + x * 0.15, 0.25 * (2 + x))\n\n    # Solve the equation\n    amount_15_percent_water = solve(equation, x)\n\n    return amount_15_percent_water[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    # equation1: Total coins they have together\n    equation1 = Eq(johnson + vicky, 48)\n\n    # equation2: If Johnson gives Vicky 8 coins situation\n    equation2 = Eq(vicky + 8, johnson - 8 - 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of kids be 'k' and the number of candies be 'c'\n    k, c = symbols('k c')\n\n    # Equation 1: If each kid eats 18 candies, there are not enough candies by 12\n    equation1 = Eq(k * 18, c - 12)\n\n    # Equation 2: If each kid eats 15 candies, candies are just enough for 2 more kids\n    equation2 = Eq((k + 2) * 15, c)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (k, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = boys / boys_to_girls_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    last_five_digits_sum = sum(int('2' * i) % 100000 for i in range(1, 2018))\n    return last_five_digits_sum % 100000\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = (77 / 7) - 6\n    return result\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    \n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n    \n    solutions = solve((equation1, equation2), (david, eugene))\n    \n    total_cupcakes = solutions[david] + solutions[eugene]\n    \n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let s be the initial number of cookies Sam had, and t be the initial number Tim had\n    s, t = symbols('s t')\n\n    # Sam ate 1/4 of her cookies\n    sam_ate = s / 4\n\n    # Tim bought 1/5 more cookies of his initial amount\n    tim_bought = t / 5\n\n    # create the equations based on the problem statement\n    equation1 = Eq(s + t, 1170)                  # Total number of cookies\n    equation2 = Eq(s - sam_ate + 663, t + tim_bought) # Sam has 663 fewer cookies than Tim after eating and buying more.\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (s, t))\n\n    return solutions[s] / 4  # we want to find the amount Sam ate, which is 1/4 of her initial cookies.\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    kilograms_in_6_days = 24\n    days = 8\n\n    # Calculate the unit rate i.e. kilograms picked per day\n    kilograms_per_day = kilograms_in_6_days / 6\n\n    # Calculate the kilograms that can be picked over 8 days\n    total_kilograms_in_8_days = kilograms_per_day * days\n    return total_kilograms_in_8_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for num in range(200, 300):\n        if all(num % x == 1 for x in [2, 3, 4, 6]) and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_initial = 40\n    ting_initial = 32\n\n    # Let the number of stamps Sally gave to Ting be x\n    # After the transaction, Sally has (40 - x) stamps and Ting has (32 + x) stamps\n    # According to the question, (40 - x)/(32 + x) = 1/2\n    # So, 80 - 2x = 32 + x\n    # Solve for x\n    x = (80 - 32) / 3\n\n    # Find Ting's final number of stamps\n    ting_final = ting_initial + x\n\n    return int(ting_final)\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_rate = 1 / 18  # Jerry can complete the job in 18 hours\n    combined_rate = 1 / 6  # Together, they can complete the job in 6 hours\n    tom_rate = combined_rate - jerry_rate  # Tom's rate is the combined rate minus Jerry's rate\n    tom_time = 1 / tom_rate  # The time it takes for Tom to do the job alone\n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let t be the time (in minutes) David walks at the increased speed\n    t = symbols('t')\n\n    # initial speed is 150 m/min for the first 10 minutes\n    dist_first_part = 10 * 150\n\n    # after increasing his speed, it becomes (150 + 50) = 200 m/min\n    dist_second_part = t * (150 + 50)\n\n    # total distance walked\n    total_dist = dist_first_part + dist_second_part\n\n    # Equation for the total distance walked being 3700 meters\n    eq = Eq(total_dist, 3700)\n\n    # Solving for t\n    time_spent_walking_at_increased_speed = solve(eq, t)[0]\n\n    # Total time spent walking in the park is the initial 10 minutes plus the time\n    # walked at the increased speed\n    total_time_spent = 10 + time_spent_walking_at_increased_speed\n\n    return total_time_spent\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    total_money = 20\n    price_per_packet = 4\n    sweets_per_packet = 8\n    free_sweets_condition = 2\n\n    packets_bought = total_money // price_per_packet\n    free_sweets = (packets_bought // free_sweets_condition) * sweets_per_packet\n    total_sweets = (packets_bought * sweets_per_packet) + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Assuming that each child gets a different number of pieces,\n    # and everybody gets at least one piece, we want to minimize\n    # the number of pieces for the child with the most while still\n    # distributing all 88 pieces.\n    # We can do this by giving the first child 1 piece, the next child 2 pieces,\n    # and so on, until the last child, who will get the remaining pieces.\n\n    pieces = 88\n    children = 8\n\n    # Start by giving each child a different number of pieces, at least one\n    min_pieces = sum(range(1, children))  # Minimum pieces distributed to the first 7 children\n\n    # The last child gets the remaining pieces\n    most_pieces = pieces - min_pieces\n\n    return most_pieces\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initial number of counters of each color\n    pink = 5\n    purple = 7\n    orange = 8\n\n    # Total number of counters initially\n    total_counters = pink + purple + orange\n    \n    # Initial probability of picking a pink counter\n    initial_probability = pink / total_counters\n    \n    # We want to double this probability\n    target_probability = 2 * initial_probability\n    \n    # Number of extra pink counters needed to be added\n    extra_pink = 0\n    while True:\n        extra_pink += 1\n        new_probability = (pink + extra_pink) / (total_counters + extra_pink)\n        if new_probability >= target_probability:\n            break\n    \n    return extra_pink\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    # Convert 1/4 to decimal\n    fraction_to_decimal = 1 / 4\n    # Subtract 1/4 in decimal from 0.4\n    ans = 0.4 - fraction_to_decimal\n    return ans\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of boys and girls\n    boys, girls = symbols('boys girls', integer=True)\n\n    # Create equations based on the problem statement\n    equation1 = Eq(boys, 1.4 * girls)                 # There were 40% more boys\n    equation2 = Eq(boys - 24, 1.5 * (girls - 24))    # After 24 boys and girls left, 50% more boys than girls\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    n = factorial(16)\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    return count\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # She could take out 3 socks of different colors first.\n    num_socks = 3\n    # After that, any sock she takes out must create at least one pair.\n    # She needs another pair, so she must take out 3 more, one of each of the remaining colors.\n    num_socks += 3\n    # Now she has one pair and three single socks of different colors.\n    # The next sock she takes out will guarantee at least two pairs of the same color.\n    num_socks += 1\n    return num_socks\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    c = m = 1  # Assume c and m are equal to start with a placeholder value\n    while True:  # We use a loop to increment the value until we find an answer\n        if m - 12 == 2 * (c - 60):  # The equation based on the problem\n            return (c + m)  # As c and m are the same, we can just add them\n        c += 1\n        m += 1  # Increment both as they start off the same\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for daily pocket money received by Helen and George\n    helen_daily, george_daily = symbols('helen_daily george_daily')\n\n    # George gets $3 more daily than Helen, equation for their daily money\n    george_helen_eq = Eq(george_daily, helen_daily + 3)\n    \n    # Both spend $5 each day, equation for their saving rates\n    save_rate_helen = helen_daily - 5\n    save_rate_george = george_daily - 5\n    \n    # Helen saves $60 in total\n    total_saved_helen_eq = Eq(save_rate_helen, 60)\n    \n    # When Helen has saved $60, George has saved $90 more than Helen\n    total_saved_george_eq = Eq(save_rate_george - save_rate_helen, 90)\n\n    # Solving the system of equations\n    solutions = solve((george_helen_eq, total_saved_helen_eq, total_saved_george_eq), (helen_daily, george_daily))\n\n    return solutions[helen_daily]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_la = 12.25  # hours\n    la_to_shanghai = shanghai_to_la + 1.5  # 90 minutes is 1.5 hours\n    round_trip = shanghai_to_la + la_to_shanghai\n    return round_trip\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    lisa_gives = 4\n\n    # Original ratio\n    equation1 = Eq(eddi / wiya, 3 / 2)\n\n    # New ratio after Lisa gives Eddi $4\n    equation2 = Eq((eddi + lisa_gives) / wiya, 8 / 5)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[wiya]\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # a is the first term, d is the common difference\n    term_9 = a + 8 * d\n    term_15 = a + 14 * d\n    term_20 = a + 19 * d\n    term_12 = a + 11 * d\n\n    equation1 = Eq(term_9, term_15 + 18)\n    equation2 = Eq(term_20 + term_12, 88)\n\n    solutions = solve((equation1, equation2), (a, d))\n    a_val = solutions[a]\n    d_val = solutions[d]\n\n    term_32 = a_val + 31 * d_val\n\n    return term_32\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Calculate sum of numbers from 1 to 30\n    sum_1_to_30 = sum(range(1, 31))\n    # Calculate sum of numbers from 1 to 29\n    sum_1_to_29 = sum(range(1, 30))\n    # Add the two sums together\n    ans = sum_1_to_30 + sum_1_to_29\n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance driven in the first 2 hours\n    first_distance = 2 * 40 # 2 hours * 40 km/h\n    \n    # Remaining distance is already given as 280 km\n    \n    # Total distance driven\n    total_distance = first_distance + 280 # 80km + 280 km\n    \n    # Time taken to drive the remaining 280 km\n    remaining_time = 280 / 70 # 280 km / 70 km/h\n    \n    # Total time taken for the whole trip\n    total_time = 2 + remaining_time # 2 hours (first part) + remaining_time (second part)\n    \n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # All possible 3-digit numbers (without leading 0)\n    no_sevens = 8 * 9 * 9  # All possible 3-digit numbers with no 7 at all\n\n    # At least two sevens, we have to subtract numbers with no sevens from total numbers\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n\n    # However, the above calculation also includes numbers with exactly one 7\n    # We need to subtract all the cases where there's exactly one 7\n    one_seven_first_position = 1 * 9 * 9  # 7 at first position, rest can be any digit except 7\n    one_seven_second_position = 9 * 1 * 9  # 7 at second position, rest can be any digit except 7\n    one_seven_third_position = 9 * 9 * 1  # 7 at third position, rest can be any digit except 7\n    exactly_one_seven = one_seven_first_position + one_seven_second_position + one_seven_third_position\n\n    # So the number of three digit numbers with at least two sevens is:\n    numbers_with_at_least_two_sevens = at_least_two_sevens - exactly_one_seven\n\n    return numbers_with_at_least_two_sevens\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 4 * four_page_letters + 3 * three_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    digit_str = str(number)\n    position = digit_str.find('8')\n    value_of_8 = 10 ** (len(digit_str) - position - 1)\n    return value_of_8\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    packet1 = 25\n    packet2 = 20\n\n    days_until_new_packets = lcm(packet1, packet2)\n\n    return days_until_new_packets\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange 6 singing performances\n    singings = factorial(6)\n    # Consider the available slots for 4 dancing performances within the singing performances (_S_S_S_S_S_S_), 7 slots in total\n    # If we want at least 1 singing performance between each of the 2 dancing performances\n    # it's a problem of choosing 4 places out of 7 to place the dancing performance\n    # This is a combination problem C(7, 4)\n    dancing_slots = 7\n    dance_performances = 4\n    dances = factorial(dancing_slots) // (factorial(dance_performances) * factorial(dancing_slots - dance_performances))\n    \n    # Total arrangements = arrangements for singing performances * arrangements for dancing performances slots\n    total_ways = singings * dances\n    return total_ways\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from sympy import Rational\n\ndef solution():\n    A = 1\n    a1_delta = Rational(1, 2)\n    a2_delta = Rational(2, 3)\n    a3_delta = Rational(7, 8)\n    a4_delta = Rational(29, 30)\n    a5_delta = Rational(139, 144)\n    a6_delta = Rational(839, 840)\n\n    # A Delta a_i = A - a_i, so a_i = A - A Delta a_i\n    a1 = A - a1_delta\n    a2 = A - a2_delta\n    a3 = A - a3_delta\n    a4 = A - a4_delta\n    a5 = A - a5_delta\n    a6 = A - a6_delta\n\n    # Now, calculate a0 using the sum of A\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # m/n is the simplest form of a0, so we calculate the sum m + n\n    m_n_sum = a0.numerator + a0.denominator\n\n    return m_n_sum\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    possible_numbers = set(range(10)) - {5, 4, 3, 0} # Exclude 5, 4, 3, 0 according to the last statement\n    for guess, correct_digits, correct_positions in [('8765', 2, 0), ('1023', 2, 0), ('8642', 2, 2)]:\n        guess_set = set(guess)\n        \n        # Narrow down possible numbers based on the information from each guess\n        if correct_digits == 0:\n            possible_numbers -= guess_set\n        elif correct_positions == 0:\n            possible_numbers &= guess_set\n        elif correct_positions == 2:\n            for i, digit in enumerate(guess):\n                if digit.isdigit() and int(digit) not in possible_numbers:\n                    # These positions cannot contain the correct digits since they are in incorrect positions\n                    # or have been deemed impossible based on other guesses\n                    guess = guess[:i] + 'x' + guess[i + 1:]\n        \n        if correct_digits == 2 and correct_positions == 0:\n            # Exclude digits that were guessed in the correct position\n            for i, digit in enumerate(guess):\n                if digit.isdigit() and int(digit) in possible_numbers:\n                    guess = guess[:i] + 'x' + guess[i + 1:]\n        \n        if correct_digits == 2 and correct_positions == 2:\n            # Here we know that 2 digits must be in the correct position\n            # We loop over the guess and check if each digit has been previously determined as incorrect;\n            for i, digit in enumerate(guess):\n                if digit == 'x' or int(digit) in possible_numbers:\n                    pass  # This is either a determined mismatch or a possible correct digit\n                else:\n                    # Eliminate numbers that are not present in possible_numbers but are in the correct position in the guess\n                    return guess\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Aiden's mistaken calculation\n    mistaken = Eq(x / 4 - 25, 2021)\n    # Solving for the original number\n    original_number = solve(mistaken, x)[0]\n    \n    # Aiden's intended calculation\n    correct_answer = original_number * 4 + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let's denote the number of books Donna has as d books.\n    # According to the problem statement: Chloe has 4 times as many books as Donna.\n    # This can be written as: c = 4 * d\n    # It is also given that Donna has 816 fewer books than Chloe.\n    # This can be written as: c - d = 816\n    # We substitute the first equation into the second equation to solve for d.\n    # 4 * d - d = 816\n    # 3 * d = 816\n    # d = 816 / 3\n    d = 816 // 3  # Using integer division\n\n    return d\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the unknown represented by ~\n    x = symbols('x')\n\n    # Setting up the equation\n    equation = Eq((x + 4) / 8, 3)\n\n    # Solving the equation\n    sol = solve(equation, x)\n\n    # Return the solution\n    return sol[0]\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    children, adults, boys, girls = symbols('children adults boys girls')\n\n    # Establish the equations based on the problem description\n    equation1 = Eq(adults, 3 * children)  # Three times as many adults as children\n    equation2 = Eq(boys, 2 * girls)       # Twice as many boys as girls\n    equation3 = Eq(adults, girls + 176)   # 176 more adults than girls\n    \n    # As both boys and girls are considered children\n    equation4 = Eq(children, boys + girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (children, adults, boys, girls))\n\n    # Calculate total number of people at the concert\n    total_people = solutions[children] + solutions[adults]\n\n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    base = 999 % 10  # Find the last digit of the base\n    exponent = 99\n    last_digit = pow(base, exponent, 10)  # Calculate the last digit of the result\n    return last_digit\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n    \n    # Since a and b are primes and smaller than 193, iterate over range\n    for a in range(2, 194):\n        if isprime(a):\n            # Calculate b based on current a\n            b = (193 - 3*a) / 11\n            \n            # Check if b is an integer and prime\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 as it's the tens digit\n        for b in range(10):  # 'b' can range from 0 to 9\n            ab = 10 * a + b\n            if ab * 7 == 100 * a + b:\n                return ab\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create the congruences based on the problem statement.\n    # x = 1 (mod 4), x = 2 (mod 5), x = 4 (mod 7)\n    congruences = [(1, 4), (2, 5), (4, 7)]\n\n    # Use the Chinese Remainder Theorem to find the smallest such integer.\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from math import factorial\n\n    # The number of zeros at the end of a product is determined by the number of pairs of 2s and 5s in the prime factorization,\n    # since 10 is 2 * 5. We can ignore other prime factors for this purpose.\n    \n    # Prime factorize each number\n    factorization = {\n        75: {3:1, 5:2}, # 75 = 3 * 5^2\n        56: {2:3, 7:1}, # 56 = 2^3 * 7\n        12: {2:2, 3:1}, # 12 = 2^2 * 3\n        105: {3:1, 5:1, 7:1} # 105 = 3 * 5 * 7\n    }\n    \n    # Combine the prime factors\n    combined_factors = {}\n    for factors in factorization.values():\n        for prime, count in factors.items():\n            if prime in combined_factors:\n                combined_factors[prime] += count\n            else:\n                combined_factors[prime] = count\n    \n    # The number of zeros is the min number of 2's and 5's since they pair to make a 10\n    zeros = min(combined_factors.get(2, 0), combined_factors.get(5, 0))\n    \n    return zeros\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    banana_price = solutions[banana]\n    apple_price = solutions[apple]\n\n    annabella_cost = banana_price + apple_price\n\n    return annabella_cost\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    initial_workers = 3\n    initial_houses = 14\n    initial_days = 4\n\n    final_workers = 9\n    final_days = 2\n\n    houses_per_worker_per_day = initial_houses / (initial_workers * initial_days)\n    ans = houses_per_worker_per_day * final_workers * final_days\n\n    return ans\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    num1 = 12\n    num2 = 15\n    num3 = 60\n\n    # Finding gcd of three numbers\n    gcd_result = gcd(num1, gcd(num2, num3))\n    \n    return gcd_result\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total money Adam has as 'm' and the price of one ball as 'x'\n    m, x = symbols('m x')\n\n    # If he buys 5 balls he will have $15 left\n    equation1 = Eq(m - 5 * x, 15)\n\n    # If he buys 8 balls he will need $12 more\n    equation2 = Eq(m - 8 * x, -12)\n\n    # Solving the equations for 'm' and 'x'\n    solutions = solve((equation1, equation2), (m, x))\n\n    # We need to find the cost of 1 ball which is 'x'\n    return solutions[x]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "from math import gcd\n\ndef solution():\n    max_sum = 0\n    for A in range(100, 1000):\n        for B in range(A+1, 1000):  # B should be greater than A to be distinct\n            if gcd(A, B) == 75:\n                A_digits = [int(d) for d in str(A)]\n                B_digits = [int(d) for d in str(B)]\n                # Check if A and B have two equal digits\n                if len(set(A_digits)) <= 2 or len(set(B_digits)) <= 2:\n                    two_equal_digits = False\n                    for d in A_digits:\n                        if A_digits.count(d)==2 or B_digits.count(d)==2:\n                            two_equal_digits = True\n                            break\n                    if two_equal_digits:\n                        max_sum = max(max_sum, A + B)\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    height_after_first_bounce = height_after_second_bounce / (1/3)\n    initial_height = height_after_first_bounce / (1/3)\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    sol = solve_congruence(*congruences)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    ans = ((1/30 + 1/6) / (2/25)) + ((2 - 2/3) / (8/3))\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n    \n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Set up the symbols for the ages\n    bob, rex, fido = symbols('bob rex fido', integer=True)\n\n    # Eq1: Fido is 10 years younger than Bob\n    equation1 = Eq(fido, bob - 10)\n\n    # Eq2: The sum of ages is 28\n    equation2 = Eq(bob + rex + fido, 28)\n\n    # Set up a list to store the products of their ages\n    age_products = []\n\n    # Since fido is 10 years younger than Bob, we start with Bob being at least 10\n    # We also know that Rex must be older than Fido, so we start with Rex's age as Fido + 1 (Bob - 9)\n    for bob_age in range(10, 28):\n        for rex_age in range(bob_age - 9, 28):\n            fido_age = 28 - bob_age - rex_age\n            # Check if we have positive ages and all different ages for dogs\n            if fido_age > 0 and bob_age != rex_age and rex_age != fido_age and bob_age != fido_age:\n                age_products.append(bob_age * rex_age * fido_age)\n\n    # The minimum product of ages\n    min_product = min(age_products)\n\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from fractions import Fraction\n    \n    # Let's assume the total number of people is x.\n    # Then the number of children is (2/5)x, number of women is (1/4)x and men is x - (2/5)x - (1/4)x\n    # According to the problem, children - men = 20\n    # So we set up the equation: (2/5)x - (x - (2/5)x - (1/4)x) = 20\n    # Simplify the equation to find x\n\n    # Children\n    children_fraction = Fraction(2, 5)\n    # Women\n    women_fraction = Fraction(1, 4)\n    # Men (rest of the people)\n    men_fraction = 1 - children_fraction - women_fraction\n    \n    # Set up the equation children - men = 20\n    # (children_fraction) * x  - (men_fraction) * x = 20\n    # Simplify the equation\n    equation = children_fraction - men_fraction\n    \n    # Solve for x\n    total_people = 20 / equation\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the time Lee takes to finish the job alone\n    # Let N be the time Nancy takes to finish the job alone\n    L, N = symbols('L N')\n\n    # Working together, they finish the job in 10 hours\n    equation1 = Eq((1/L + 1/N), 1/10)\n\n    # Lee works for 6 hours and Nancy finishes the job in 20 more hours\n    equation2 = Eq(6/L + 20/N, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L, N))\n\n    # We want to find the time it takes for Nancy to finish the job by herself\n    return solutions[N]\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_students = 40 + 30\n    total_average = 90\n    # Let the average score of Class A be 'a'.\n    # Then the average score of Class B will be 'a + 7'.\n    # Total score for both classes is average multiplied by number of students.\n    total_score = total_students * total_average\n    # Now, we set up the equation for the total score.\n    # 40 * a + 30 * (a + 7) = total_score\n    # 40a + 30a + 210 = 70 * 90\n    # 70a = 70 * 90 - 210\n    # a = (70 * 90 - 210) / 70\n    # a = 90 - 3\n    # Hence, the average score for Class B will be:\n    # a + 7 = 87 + 7\n    average_b = 87 + 7\n\n    return average_b\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    sum_of_fractions = (1/(2007*2008)) + (1/(2008*2009)) + (1/2009)\n    ans = 1 / sum_of_fractions\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_pences in range(6):\n        for twenty_pences in range(4):\n            for fifty_pences in range(2):\n                if ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    a = 250250\n    b = a - 1\n    c = a + 1\n    ans = a**2 - b * c\n    return ans\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people_in_line = 30\n\n    people_in_front_of_mark = total_people_in_line - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    # Since the number is divisible by 15, it must be divisible by both 3 and 5.\n    # For a number to be divisible by 5, its last digit must be 0 or 5. Since we have 'a' at the end,\n    # 'a' must be 5 to make the number divisible by 5.\n    \n    a = 5\n    \n    # Now we check if the number is divisible by 3.\n    # A number is divisible by 3 if the sum of its digits is divisible by 3.\n    # The sum of the digits would be 9 + a + 8 + a.\n    # Let's check if it's divisible by 3.\n    \n    sum_of_digits = 9 + a + 8 + a\n    \n    # If the sum is divisible by 3, return the value of 'a'.\n    if sum_of_digits % 3 == 0:\n        return a\n    else:\n        return None\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # To be divisible by 4, the last two digits of the number must form a number that is divisible by 4\n    for J in range(10):\n        if (int(f'5{J}6')) % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of a table (t) and chair (c)\n    t, c = symbols('t c')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(5 * t + 12 * c, 720)  # The total cost of tables and chairs is £720\n    equation2 = Eq(t, c + 25)  # Each table costs £25 more than each chair\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    # The solution is the cost of a table\n    return solutions[t]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the price of an apple and a peach\n    price_apple, price_peach = symbols('price_apple price_peach')\n    \n    # Create equations based on the given information\n    equation1 = Eq(4 * price_apple + 3 * price_peach, 10)\n    equation2 = Eq(4 * price_apple + 6 * price_peach, 16)\n    \n    # Solve the system of equations for the price of an apple and a peach\n    solutions = solve((equation1, equation2), (price_apple, price_peach))\n    \n    # Extract the price of a peach from the solutions\n    peach_price = solutions[price_peach]\n    \n    return peach_price\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) * 6, 66)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    result = 33\n    # From the definition of the operation, 9⊙x = 33, we have 5*9 - 2*x = 33\n    x = (5 * a - result) / (-2)\n    return x\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(1, 25))\n    sum_of_cubes = sum(i**3 for i in range(1, 24))\n    \n    ans = 0 * 1**2 + sum_of_squares + sum_of_cubes\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    ans = 476 // 17\n    return ans\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time = 360  # Total time in minutes\n    up_to_down_ratio = 5 / 4\n\n    # Calculate time spent going up and going down\n    time_down = total_time / (1 + up_to_down_ratio)\n    time_up = up_to_down_ratio * time_down\n\n    # Speed difference\n    speed_diff = 10  # Speed difference in m/min\n\n    # Speed going down is 10m/min faster than going up\n    speed_down = speed_diff / (1 - (1 / up_to_down_ratio))\n    speed_up = speed_down - speed_diff\n\n    # Calculate distances\n    distance_up = speed_up * time_up\n    distance_down = speed_down * time_down\n\n    # Total distance cycled\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    # Alice's age after 6 years will be 24\n    age_in_6_years = 24\n    # Alice's current age is therefore 24 - 6\n    current_age = age_in_6_years - 6\n    # Alice's age 9 years ago is her current age - 9\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    # Given packet sizes\n    packet_A = 25\n    packet_B = 20\n\n    # Finding the least common multiple to determine when the new packets will start\n    days_until_new_packets = lcm(packet_A, packet_B)\n\n    # We add the days to the start date which is March 1st\n    # Since a non-leap year has 365 days and Feb has 28 days, March 1st is the 60th day of the year\n    day_of_year = 60 + days_until_new_packets\n\n    return day_of_year\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons_initial = 94\n    pineapples_initial = 138\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n\n    # Let x be the number of days after which the condition is satisfied\n    # watermelons_left = watermelons_initial - watermelons_per_day * x\n    # pineapples_left = pineapples_initial - pineapples_per_day * x\n    # pineapples_left = 3 * watermelons_left\n\n    # Set up the equation based on the above conditions\n    for x in range(1, min(watermelons_initial, pineapples_initial) // 9 + 1):\n        watermelons_left = watermelons_initial - watermelons_per_day * x\n        pineapples_left = pineapples_initial - pineapples_per_day * x\n        if pineapples_left == 3 * watermelons_left:\n            return x\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_per_person = num_friends - 1\n\n    total_cards_sent = num_friends * cards_sent_per_person\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age, jerry_age = symbols('tom_age jerry_age')\n    # Tom will be twice his age in 4 years from now means tom_age + 4 = 2 * tom_age\n    equation1 = Eq(tom_age + 4, 2 * tom_age)\n    # Three years ago, the sum of Tom and Jerry's ages was 10\n    equation2 = Eq((tom_age - 3) + (jerry_age - 3), 10)\n\n    # Solve the equations\n    ages_solution = solve((equation1, equation2), (tom_age, jerry_age))\n    # Calculate in how many years from now will Jerry's age be doubled\n    years = symbols('years')\n    jerry_future_age = Eq(jerry_age + years, 2 * jerry_age)\n    years_solution = solve(jerry_future_age.subs(jerry_age, ages_solution[jerry_age]), years)\n\n    return years_solution[0]\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Calculate the mass carried by each car\n    fruits_per_car = 24.2 / 4\n    \n    # Calculate the mass carried by each truck\n    fruits_per_truck = 410 / 50\n    \n    # Calculate the difference in mass between what a truck carries and what a car carries\n    difference = fruits_per_truck - fruits_per_car\n    \n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    arrival_time = 9 * 60 + 22  # Time Aiden arrives converted to minutes past midnight\n    bus_time = 9 * 60 + 15  # 9:15 bus time converted to minutes past midnight\n    bus_interval = 35  # Bus leaves every 35 minutes\n\n    if arrival_time <= bus_time:\n        wait_time = bus_time - arrival_time\n    else:\n        wait_time = bus_interval - ((arrival_time - bus_time) % bus_interval)\n\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    total_days = 329\n    days_in_week = 7\n\n    num_weeks = total_days // days_in_week\n\n    return num_weeks\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # Eddie's speed in metres per minute\n    brother_speed = 70  # Brother's speed in metres per minute\n    meet_time = 5  # Time after which they meet in minutes\n\n    # Total distance covered by both Eddie and his brother when they meet\n    total_distance = (eddie_speed + brother_speed) * meet_time\n\n    # Since Eddie walks towards the mall and his brother returns from the mall,\n    # the total distance is actually the distance from the mall to their house.\n    return total_distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9)*243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import primerange\n\n    # Initial ages of family members\n    ages = [7, 5, 29, 31]\n\n    # Infinite loop to find the next year where all ages are prime\n    while True:\n        # Increment all family members' ages by 1\n        ages = [age + 1 for age in ages]\n        \n        # Check if all incremented ages are prime\n        if all(age in primerange(1, max(ages) + 1) for age in ages):\n            # Return the father's age when the condition is met\n            return ages[-1]\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((-1)**(i-1) * (i**2) for i in range(3, 52, 1))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    # Since Jamie plants 3 flowers between every 2 lamp posts\n    # The number of gaps between the lamp posts equals the total number of flowers divided by 3\n    num_gaps = 30 // 3\n    \n    # The total distance is 50m, so the distance between every 2 lamp posts is the total \n    # distance divided by the number of gaps\n    distance_between_lamp_posts = 50 / num_gaps\n\n    return distance_between_lamp_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n = 7\n    ans = 1 + n * (n + 1) // 2 + n * (n - 1) * (n - 2) // 6\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_each_friend = 15\n    number_of_friends = 8\n    \n    books_given_to_friends = books_given_each_friend * number_of_friends\n    books_remaining = total_books - books_given_to_friends\n    \n    return books_remaining\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    lora, mother = symbols('lora mother')\n\n    # Define the equations\n    equation1 = Eq(lora + mother, 44)      # The sum of their ages is 44\n    equation2 = Eq(mother, 3 * lora)       # Her mother's age is 3 times Lora's age\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    # Return Lora's age\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    exponent_cycle = 2  # 4^1 ends in 4, 4^2 ends in 6, 4^3 ends in 4, 4^4 ends in 6, and then it repeats\n\n    # Since the cycle for the unit digit of powers of 4 is 2 (4 and 6),\n    # we only need to figure out if the power is odd or even to determine the last digit\n    if 2008 % exponent_cycle == 0:\n        ans = 6\n    else:\n        ans = 4\n\n    return ans\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return int(\"ninety thousand and nine\".replace(\"ninety thousand and nine\", \"90009\"))\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    male_adults = total_adults * fraction_male\n    return int(male_adults)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to the audio shop, book shop, and chapel\n    paths_to_audio = 6\n    paths_to_book = 4\n    paths_to_chapel = 5\n    \n    # Number of paths from the audio shop, book shop, and chapel to school\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n    \n    # Total number of paths from home to school\n    total_paths = (paths_to_audio * paths_audio_to_school +\n                   paths_to_book * paths_book_to_school +\n                   paths_to_chapel * paths_chapel_to_school)\n    \n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let A, B, C represent the weight of Adam, Ben, and Carl respectively.\n    # From the given information, we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Now, we need to find the total weight, which is A + B + C.\n    # Add all three equations to get 2 * (A + B + C), divide by 2 to obtain the total weight.\n    total_double = (102 + 97 + 93)\n    total_weight = total_double / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = \"12:40 PM\"\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M %p\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.50 + twenty_pence_coins * 0.20\n\n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    ans = 76 * 9\n    return ans\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belle, eddie = symbols('belle eddie')\n    \n    belle_sticks = 49\n    eddie_gave_sticks = 11\n    \n    equation = Eq(belle_sticks + eddie_gave_sticks, eddie)\n    \n    solutions = solve(equation, eddie)\n\n    # Eddie's ice-cream sticks at first (before giving)\n    eddie_initial_sticks = solutions[0] + eddie_gave_sticks\n\n    return eddie_initial_sticks\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamps = 50\n    distance_between = 2\n    # Since there's a lamp post at each end, we subtract one; the road length is distance * (num_lamps - 1)\n    road_length = distance_between * (num_lamps - 1)\n\n    return road_length\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5/11) + (2/27)) * 11 + (5/27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chelsia, brian = symbols('chelsia brian')\n    \n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n    \n    solutions = solve((equation1, equation2), (chelsia, brian))\n    \n    total_money = solutions[chelsia] + solutions[brian]\n    \n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    num_boxes = 6\n    total_weight = weight_per_box * num_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    j, k = symbols('j k')  # Define the symbols for John and Kofi's coins\n\n    # John and Kofi have 25 coins in total\n    equation1 = Eq(j + k, 25)\n\n    # If John gives Kofi 4 coins, Kofi will have three fewer coins than John\n    equation2 = Eq((k + 4), (j - 4) - 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, k))\n\n    # John's number of coins before giving any to Kofi\n    return solutions[j]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    equal_volume = total_tea // 2\n    tea_to_give = equal_volume - 179\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from math import factorial\n\ndef solution():\n    digits = 3  # Number of different digits\n    return factorial(digits)\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    normal_rabbit, special_rabbit = symbols('normal_rabbit special_rabbit')\n    \n    # Equation for heads\n    heads_eq = Eq(normal_rabbit + 3 * special_rabbit, 53)\n    \n    # Equation for feet\n    feet_eq = Eq(4 * normal_rabbit + 2 * special_rabbit, 102)\n    \n    # Solving the system of equations\n    solutions = solve((heads_eq, feet_eq), (normal_rabbit, special_rabbit))\n    \n    return solutions[normal_rabbit] + solutions[special_rabbit]\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = (10 * 100) - total_cost  # Convert £10 to pence\n\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return 18 + 2 + 16\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    result = sum((-1)**(i + 1) * i for i in range(1, 101))\n    return result\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_left_with = 4\n    neelesh_ate = 1\n    neelesh_initial = neelesh_left_with + neelesh_ate\n    ayesha_initial = neelesh_initial * 6\n    ayesha_gave_to_neelesh = neelesh_initial\n    ayesha_left_with = ayesha_initial - ayesha_gave_to_neelesh\n    return ayesha_left_with\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(3) / Fraction(1, 3)\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    \n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    gummy_bears, lollipops = symbols('gummy_bears lollipops')\n    \n    # Original ratio equation\n    original_ratio_eq = Eq(gummy_bears / lollipops, 5/7)\n\n    # New ratio after adding 120 to each pile\n    new_ratio_eq = Eq((gummy_bears + 120) / (lollipops + 120), 4/5)\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio_eq, new_ratio_eq), (gummy_bears, lollipops))\n    \n    # Calculate the total number of candies now\n    total_candies_now = solutions[gummy_bears] + 120 + solutions[lollipops] + 120\n    \n    return total_candies_now\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # Since 1/70 is a fraction, its decimal form is a repeating decimal.\n    # To find the 500th digit, we can first calculate a large number of digits,\n    # then find the pattern of repetition and determine the 500th digit in the sequence.\n\n    # The decimal form of 1/70 has a recurring cycle. Find the cycle by iteratively multiplying by 10.\n    remainder = 1\n    seen_remainders = {}\n    repeating_sequence = \"\"\n    \n    # Keep track of the remainders to find the repeating cycle\n    while remainder not in seen_remainders:\n        seen_remainders[remainder] = len(repeating_sequence)\n        remainder *= 10\n        repeating_sequence += str(remainder // 70)\n        remainder %= 70\n\n        if remainder == 0:\n            break\n\n    if remainder != 0:\n        # If we found a repeating cycle, get the length of the cycle\n        cycle_length = len(repeating_sequence) - seen_remainders[remainder]\n        repeating_sequence = repeating_sequence[seen_remainders[remainder]:]\n    else:\n        cycle_length = 0\n\n    # Find which digit in the repeating cycle is the 500th digit after the decimal\n    if cycle_length != 0:\n        index = (500 - 1) % cycle_length  # -1 because we want the digit after the decimal\n        ans = int(repeating_sequence[index])\n    else:\n        # If there's no remainder, the decimal does not repeat, and we can return 0 for the 500th digit\n        ans = 0\n\n    return ans\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    total_marbles = 560\n    marbles_in_A = 80\n    # Let marbles_in_C be x\n    # marbles_in_B will be 2x\n    # Equation: marbles_in_A + marbles_in_B + marbles_in_C = total_marbles\n    # 80 + 2x + x = 560\n    # Rearrange the equation for x:\n    # 3x = 560 - 80\n    marbles_in_C = (total_marbles - marbles_in_A) / 3\n    \n    return int(marbles_in_C)\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference_pounds = abs(david_weight_pounds - andrew_weight_pounds)\n    \n    return weight_difference_pounds\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    term_10_value = 31\n    common_difference = 3\n    term_number = 10\n    \n    first_term_value = term_10_value - common_difference * (term_number - 1)\n\n    return first_term_value\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    sum_of_numbers = sum(numbers) * 3\n    return sum_of_numbers\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    terms = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert base 3 numbers to base 10, perform subtraction, then convert back to base 3\n    base_10_num1 = int(str(12101), 3)\n    base_10_num2 = int(str(2210), 3)\n    \n    subtracted_value_base_10 = base_10_num1 - base_10_num2\n    ans = ''\n    while subtracted_value_base_10 > 0:\n        ans = str(subtracted_value_base_10 % 3) + ans\n        subtracted_value_base_10 //= 3\n        \n    return ans if ans else '0'\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n    \n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n    \n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    ans = 58 * 60\n    return ans\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Initialize the list of the first 20 positive integers\n    numbers = list(range(1, 21))\n    chosen = []\n\n    # Iterate through the list and pick numbers ensuring no two numbers differ by 5\n    while numbers:\n        n = numbers.pop(0)\n        chosen.append(n)\n        numbers = [x for x in numbers if abs(x - n) != 5]  # Remove numbers that differ by 5 with chosen number\n\n    # The length of 'chosen' is our answer for the largest value of n\n    ans = len(chosen)\n    return ans\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for the calories in one cake and one biscuit\n    cake, biscuit = symbols('cake biscuit')\n\n    # Now we set up our equations based on the problem statement\n    equation1 = Eq(1 * cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n\n    # We solve the equations for cake and biscuit\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    # We return the number of calories in one biscuit\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_age, mother_age, age_difference = symbols('john_age mother_age age_difference')\n\n    equation1 = Eq(john_age + 8, mother_age - 20)\n    equation2 = Eq(mother_age, 5 * john_age)\n\n    # Solve for john_age and mother_age\n    solutions = solve((equation1, equation2), (john_age, mother_age))\n\n    # Since john_age is the younger age, we take the first solution\n    john_current_age = solutions[john_age]\n    \n    # Calculate the age difference using the second equation\n    age_diff = solve(Eq(age_difference, mother_age - john_age))[age_difference]\n\n    # Find John's age when mother was 5 times his age\n    # mother_age = 5 * john_past_age\n    # age difference is fixed\n    john_past_age = symbols('john_past_age')\n    equation3 = Eq(john_past_age + age_diff, 5 * john_past_age)\n    john_past_age = solve(equation3, john_past_age)[0]\n\n    return john_past_age\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    total_marks = (6 * 12) + (2 * 0)\n    total_questions = 6 + 2\n    average_mark = total_marks / total_questions\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    from fractions import Fraction\n\n    # Performing the required calculations step by step\n    num = (Fraction(16159, 8) * Fraction(11, 3)) - (Fraction(16155, 8) * Fraction(11, 3))\n    denom = (Fraction(6051, 3) - Fraction(16155, 8)) * 17\n    fraction_result = num / denom\n    final_result = fraction_result * Fraction(119, 32)\n\n    return final_result\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for x in range(10):\n        pencils_total = int(\"1\" + str(x) + \"1\")\n        if pencils_total % 44 == 0:\n            pencils_each = pencils_total // 44\n            return pencils_each\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of letters written by each person\n    kevin, sara, james = symbols('kevin sara james')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "def solution():\n    from math import lcm\n    return lcm(4, 6, 7)\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = set()\n        for divisor in range(2, 11):\n            remainders.add(M % divisor)\n        if len(remainders) == 9 and all(r != 0 for r in remainders):\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    tom_time_per_lap = 24\n    william_time_per_lap = 8\n    \n    lcm_time = (tom_time_per_lap * william_time_per_lap) // math.gcd(tom_time_per_lap, william_time_per_lap)\n    \n    return lcm_time\n\nimport math\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n    \n    containers_needed = -(-total_apples // apples_per_container) # Ceiling division\n    \n    return containers_needed\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n    equation = Eq(romily, reema + 10)\n\n    # Assuming the total amount collected for charity is given and equal to 100\n    # If the total amount is not given, the problem cannot be solved.\n    total_collected = 100\n    equation_total = Eq(romily + reema, total_collected)\n\n    solutions = solve((equation, equation_total), (romily, reema))\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Applying the Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from math import gcd\n\n    # find the prime factorization of 28\n    n = 28\n    prime_factors = {}\n    \n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            prime_factors[i] = prime_factors.get(i, 0) + 1\n            n //= i\n        i += 1\n    if n > 1:\n        prime_factors[n] = prime_factors.get(n, 0) + 1\n    \n    # Find the smallest number that needs to be multiplied to 28 to make it a perfect square\n    # For any prime factor with an odd count, we must multiply by that prime factor to make the count even\n    smallest_multiplier = 1\n    for prime, count in prime_factors.items():\n        if count % 2 != 0:\n            smallest_multiplier *= prime\n\n    return smallest_multiplier\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n\n    # Number of intervals = field_length / post_interval\n    # Number of posts = Number of intervals + 1 (because we add a post at the beginning)\n    num_posts = (field_length // post_interval) + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # a is the ten's digit, hence starting from 1 to exclude 0\n        for b in range(0, 10):  # b is the one's digit and can be from 0 to 9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers = [10, 20, 30, 50, 60, 70]\n    negative_numbers = [6, 16, 26, 46, 56, 66]\n\n    ans = sum(positive_numbers) - sum(negative_numbers)\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Total time spent after reaching home and before finishing lunch\n    total_time_spent = timedelta(minutes=(10 + 20 + 20))\n    \n    # Time when lunch was finished\n    lunch_finished_time = datetime.strptime('14:50', '%H:%M')\n    \n    # Calculate the time when Benson reached home\n    reached_home_time = lunch_finished_time - total_time_spent\n    \n    # Convert the time to the required format (e.g., HH:MM am/pm)\n    ans = reached_home_time.strftime('%I:%M %p')\n    \n    return ans\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Treat A and B as a single entity since they are always next to each other.\n    # There are 5 \"entities\" to arrange: (AB), C, D, E, F\n    entity_count = 5\n\n    # There are 2 ways to arrange A and B within the single entity (AB or BA).\n    arrangements_within_entity = 2\n\n    # Total permutations for 5 entities is 5!\n    total_permutations = factorial(entity_count)\n\n    # Multiply the permutations of the entities with the arrangements within the entity (AB)\n    number_of_ways = total_permutations * arrangements_within_entity\n\n    return number_of_ways\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    for _ in range(years):\n        initial_rabbits = initial_rabbits * 5 / 2  # Each year 5 times birth and half die\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    y, x = symbols('y x')\n    equation = Eq(y, 6 * x)\n    return equation\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the number of steps of the escalator\n    # Let 'v' be the speed of the escalator in steps per second\n    x, v = symbols('x v')\n\n    # When Peter walks at 1 step per second for 10 seconds, he reaches the top\n    equation1 = Eq(10 * (1 + v), x)\n\n    # When Peter walks at 2 steps per second for 8 seconds (16 steps), he reaches the top\n    equation2 = Eq(8 * (2 + v), x)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, v))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of red balloons be r\n    r = symbols('r')\n    \n    # Given that there are 1/4 as many red balloons as green, we can express the number of green balloons as 4r\n    # Given that there are 3/5 as many red balloons as purple, we can express the number of purple balloons as (5/3)r\n    # The total mass, m = 4r * 4 (red) + 4r * 5 (green) + (5/3)r * 7 (purple)\n    m = Eq(4*r*4 + 4*r*5 + (5/3)*r*7, 642)\n    \n    # We solve for r to find the number of red balloons\n    red_balloons = solve(m, r)[0]\n    \n    # Then we calculate the number of purple balloons using the ratio of red to purple balloons\n    purple_balloons = (5/3) * red_balloons\n    \n    return purple_balloons\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    # Starting with the smallest class size where a student gets at least 5 sweets\n    class_size = total_sweets // 5\n    \n    # Since we need to distribute as evenly as possible,\n    # we look for the largest class size that will have no remainder when dividing the sweets\n    while total_sweets % class_size != 0:\n        class_size -= 1\n        \n    return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    ans = (246 + 2) * 135\n    return ans\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    # Including both ends, the number of intervals will be one less than the number of trees\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_values = 3 * 10 + 33 * 0.01 + 300 * 0.001\n    return sum_of_values\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    return 25 / 100 * 1200\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James is 120 cm tall\n    height_difference = 30  # James is 30 cm shorter than Mark\n\n    mark_height = james_height + height_difference  # Calculate Mark's height\n\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel * 1.3)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    blocks_given_to_sally = total_blocks / 4\n    blocks_left_with_ben = total_blocks - blocks_given_to_sally\n\n    return blocks_left_with_ben\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # hundreds digit can only be 2, 4 because it has to be even and less than the ones digit\n        for tens in range(0, 10, 2):  # tens digit must be even\n            ones = 2 * hundreds  # ones digit is twice the hundreds digit\n            if ones > tens > hundreds and ones < 10:  # digits must be different and valid\n                number = 100 * hundreds + 10 * tens + ones\n                if number % 2 == 0 and number % 9 == 0:  # divisible by 2 and 9\n                    return number\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    return 7268 + 94 + 567\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, ken = symbols('sally ken')\n\n    # Initial ratio of chocolates between Sally and Ken\n    initial_ratio = Eq(sally/ken, 5/7)\n    \n    # After Ken gives 24 chocolates to Sally, Sally's chocolates double Ken's chocolates\n    final_ratio = Eq(sally + 24, 2 * (ken - 24))\n\n    solutions = solve((initial_ratio, final_ratio), (sally, ken))\n\n    return solutions[ken]\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    total_cost = solutions[pencil] + solutions[notebook]\n\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    # Cost for parking more than 40 hours but up to 50 hours\n    cost_40_to_50 = 5\n    # Cost for parking more than 50 hours but up to 60 hours\n    cost_50_to_60 = 8\n    # Cost for parking more than 60 hours\n    cost_above_60 = 15\n\n    # Initial 40 hours are free\n    total_bill = 82\n    free_hours = 40\n    # Calculate the hours parked after 40 free hours for the first price segment (up to 50)\n    extra_hours_40_to_50 = min((total_bill // cost_40_to_50), 10)\n\n    # Update the current bill after calculating for the first price segment\n    total_bill -= extra_hours_40_to_50 * cost_40_to_50\n\n    # If total_bill is still greater than 0, calculate hours parked in the next segment (50 to 60)\n    extra_hours_50_to_60 = min((total_bill // cost_50_to_60), 10)\n\n    # Update the current bill after calculating for the second price segment\n    total_bill -= extra_hours_50_to_60 * cost_50_to_60\n\n    # If total_bill is still greater than 0, calculate hours parked in the final segment (above 60)\n    extra_hours_above_60 = total_bill // cost_above_60\n\n    # Total parking hours is the sum of all the segments\n    total_parking_hours = free_hours + extra_hours_40_to_50 + extra_hours_50_to_60 + extra_hours_above_60\n\n    return total_parking_hours\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percent = 0.20\n    tax_percent = 0.10\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts of money each boy has\n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    # Raju has 3 times as much money as Vijay\n    eq1 = Eq(raju, 3 * vijay)\n    # Raju has 152 more than Patrick\n    eq2 = Eq(raju, patrick + 152)\n    # The average amount of money is 507 for the three boys\n    eq3 = Eq((raju + vijay + patrick)/3, 507)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (raju, vijay, patrick))\n    \n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_in_triangle = 3\n    sides_in_square = 4\n\n    number_thought = (sides_in_square * 2) - sides_in_triangle\n\n    return number_thought\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    initial_pay = 7.50\n    increase_percent = 12 / 100\n    new_pay = initial_pay * (1 + increase_percent)\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits = 1014\n    # initial count of pages is zero\n    pages = 0 \n    # initial count of digits used is also zero\n    used_digits = 0 \n    # Page numbers 1-9 use one digit, 10-99 use two digits, 100-999 use three digits, and so on.\n    while used_digits < digits:\n        pages += 1\n        used_digits += len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    ans = 89 * 19\n    return ans\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    ans = 96 * 8\n    return ans\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent_weekly) * weeks\n\n    difference = joanna_total - amy_total\n\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq((57 + magic_number), 4 * (9 + magic_number))\n    \n    solved = solve(equation, magic_number)\n\n    return solved[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    # Number of ways to choose a teacher\n    teacher_ways = comb(2, 1)\n    \n    # Number of ways to choose 4 students without any female\n    all_male_ways = comb(7, 4)\n    \n    # Number of ways to choose 4 students from all students regardless of gender\n    all_students_ways = comb(13, 4)\n    \n    # Subtract the all-male committee ways from total possible ways to ensure at least one female\n    at_least_one_female_ways = all_students_ways - all_male_ways\n    \n    # Calculate total ways by multiplying the ways to choose a teacher\n    # and ways to choose a committee with at least one female student\n    total_ways = teacher_ways * at_least_one_female_ways\n    \n    return total_ways\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n    \n    original_number = solve(equation, x)\n    return original_number[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    kevin_monthly_salary = 3.248\n    roger_debt = 1.6\n\n    months_needed = roger_debt / kevin_monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum(10 * i - 6 * i + 1 for i in range(1, 8)) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    # Given conditions\n    equation1 = Eq(alice, 2 * sister)            # Alice is twice as old as her sister now\n    equation2 = Eq(alice + 10 + sister + 10, 53) # In 10 years, their total age will be 53\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = (15 - 10)\n\n    common_difference = (fifteenth_term - tenth_term) / position_difference\n    twelfth_term = tenth_term + 2 * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # The degree of the monomial is the sum of the exponents of all variables\n    # Degree of -x^3 is 3, so the degree of y^(2n) must be 5 - 3 = 2\n    degree_of_y = 5 - 3\n    # Since the exponent of y is 2n, we have 2n = degree_of_y\n    n = degree_of_y / 2\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    cups = 45\n    milk_per_cup = 2/3\n    tea_per_cup = 3/5\n    \n    total_milk = cups * milk_per_cup\n    total_tea = cups * tea_per_cup\n    \n    total_liquids = total_milk + total_tea\n    \n    return total_liquids\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_cost = symbols('book_cost')\n    \n    # Sarah's purchase cost\n    sarah_cost = 8 * book_cost + 3 * 0.40\n    # Rebecca's purchase cost\n    rebecca_cost = 3 * book_cost + 8 * 0.40\n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_cost, rebecca_cost + 1.00)\n\n    # Solve for the cost of a book\n    book_cost_solution = solve(equation, book_cost)\n\n    return book_cost_solution[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n\n    price_per_gummy = 6 / 100  # Convert pence to pounds\n    total_cost = 3.42  # Total cost in pounds\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq(angela * price_per_gummy + bernice * price_per_gummy + candice * price_per_gummy, total_cost)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since the median of the list is 20, the middle value when the list is in order is 20\n    # There are 10 numbers in the list, so the median is the average of the 5th and 6th numbers\n    # That means n+7 (the 5th number) and n+8 (the 6th number) average to 20\n    median_value = 20\n    n_plus_7 = median_value - 0.5  # subtract 0.5 because the median is the average of n+7 and n+8\n    n = n_plus_7 - 7\n    \n    # Calculate the mean of the numbers by adding all terms and dividing by the count (10)\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean_value = sum(numbers) / len(numbers)\n    \n    return mean_value\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a, b, c be the weights of the apples such that a < b < c\n    a, b, c = symbols('a b c', positive=True)\n\n    # If Tim eats the largest apple, the mean weight of the remaining two apples is 70 grams\n    equation1 = Eq((a + b) / 2, 70)\n\n    # If Tim eats the lightest apple, the mean weight of the remaining two apples is 105 grams\n    equation2 = Eq((b + c) / 2, 105)\n\n    # Solve the system of equations to find the values of a, b, and c\n    solutions = solve((equation1, equation2), (a, b, c))\n\n    # Calculate the weight difference between the heaviest apple and the lightest apple\n    weight_difference = solutions[c] - solutions[a]\n\n    return weight_difference\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the three consecutive numbers be x, x+1, and x+2\n    # Their sum is x + (x+1) + (x+2) which is equal to 60\n    # So, we can write the equation as 3x + 3 = 60\n    # Solving for x we get:\n    \n    x = (60 - 3) // 3\n    \n    # Now, the largest number which is x+2 is:\n    largest_number = x + 2\n    \n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice // per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_groups = 4\n    # Total handshakes for n people: n * (n-1) / 2\n    total_handshakes = total_members * (total_members - 1) // 2\n    # Handshakes that did not occur within the non-shaking group: m * (m-1) / 2\n    non_shaking_handshakes = non_shaking_groups * (non_shaking_groups - 1) // 2\n    # Subtract the handshakes that did not happen from the total\n    handshakes_that_happened = total_handshakes - non_shaking_handshakes\n    return handshakes_that_happened\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Given the puzzle:\n    #   A A A\n    # + A A A\n    # -------\n    #   9 9 9\n    # It implies that 3 * A = 9 (in the ones place) and since it's a single digit,\n    # A must be 3.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10):\n        new_number = int(str(i) + '0')\n        if new_number - i == 27:\n            return i\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Since Bob is always the 3rd in line no matter from which side he counts,\n    # it means Bob must be positioned in such a way that there are two animals in front of him\n    # and two animals behind him in both directions (horizontal and vertical).\n    # Therefore, the array must have 5 animals in each direction with Bob in the center (3rd position).\n    rows = 5\n    cols = 5\n    \n    # The total number of animals is just the number of rows multiplied by the number of columns.\n    total_animals = rows * cols\n\n    return total_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of one-cent, two-cent, and five-cent coins as o, t, f respectively\n    o, t, f = symbols('o t f')\n\n    # Based on the problem statement, we can create two equations from the height relationships:\n    equation1 = Eq(6*o, 5*t)  # 6 one-cent coins have the same height as 5 two-cent coins\n    equation2 = Eq(4*o, 3*f)  # 4 one-cent coins have the same height as 3 five-cent coins\n\n    # The third equation comes from the total number of coins used by Sam:\n    equation3 = Eq(o + t + f, 124)  # The sum of all coins used is 124\n\n    # Now, we'll solve the system of equations for o, t, and f\n    solutions = solve((equation1, equation2, equation3), (o, t, f))\n\n    # Calculate the total value of the coins\n    # o coins of 1-cent, t coins of 2-cent, and f coins of 5-cent\n    total_value = solutions[o]*1 + solutions[t]*2 + solutions[f]*5\n\n    return total_value\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    \n    for green_pens in range(1, 100):\n        blue_pens = (2/5) * green_pens\n        red_pens = (1/4) * green_pens\n        \n        if blue_pens.is_integer() and red_pens.is_integer():\n            total_pens = blue_pens + green_pens + red_pens\n            if total_pens < 100 and red_pens > max_red_pens:\n                max_red_pens = int(red_pens)\n                \n    return max_red_pens\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_amount = 200\n    spent_books = 0.25 * initial_amount\n    remaining_after_books = initial_amount - spent_books\n    spent_dvd = 0.20 * remaining_after_books\n    remaining_after_dvd = remaining_after_books - spent_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Equation 1: A is 350mL more than B\n    equation1 = Eq(A, B + 350)\n    # Equation 2: After spilling 500mL, B has twice the water that's left in A\n    equation2 = Eq(B, 2 * (A - 500))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution():\n    m = symbols('m')\n    monthly_production = m / 12\n    return monthly_production\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Number of intervals between plum trees is one less than the number of plum trees\n    plum_intervals = 41 - 1\n    # Total distance spanned by the plum trees\n    plum_distance = plum_intervals * 4  # distance in meters\n\n    # Number of pine trees can be found by dividing the distance by the interval distance of pine trees\n    # and adding 1 for the pine tree at the starting point\n    pine_trees = (plum_distance // 5) + 1\n\n    return pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 // 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11\n\n    return smallest_multiple + largest_multiple\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    corrected_salary_difference = 3040 - 2800\n    correct_total_salary = incorrect_total_salary + corrected_salary_difference\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    max_palindrome = 0\n    for i in range(999, 99, -1):\n        for j in range(999, 99, -1):\n            product = i * j\n            if str(product) == str(product)[::-1] and product % 6 == 0:\n                max_palindrome = max(max_palindrome, product)\n    return max_palindrome\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n\n    total_children_after_an_hour = initial_boys + initial_girls + children_joined\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # x represents the original number of marbles\n    x = symbols('x')\n    \n    # Wei Yan gave 3/8 of x to his friends\n    remaining_after_friends = x - 3/8 * x\n\n    # He then gave 5/7 of the remaining marbles to his brother\n    remaining_after_brother = remaining_after_friends - 5/7 * remaining_after_friends\n    \n    # His cousin gave him 408 marbles\n    final_count = remaining_after_brother + 408\n\n    # In the end, he had twice as many marbles as he had at first\n    equation = Eq(final_count, 2 * x)\n\n    # Solve the equation to find the original number of marbles\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    length_of_pattern = len(pattern)\n    sum_of_pattern = sum(pattern)\n    number_of_full_patterns = 41 // length_of_pattern\n    remaining_numbers = 41 % length_of_pattern\n    total_sum = number_of_full_patterns * sum_of_pattern + sum(pattern[:remaining_numbers])\n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    fraction = 2/7\n    number = 315\n    result = fraction * number\n    return result\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    for two_pence in range(0, 47, 2):\n        for five_pence in range(0, 47, 5):\n            if two_pence + five_pence == 47:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = ((9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11)\n    denominator = (1 / 8 - 1 / 9 + 1 / 10 - 1 / 11)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_needles = 2540\n    sold_pins = 1820\n    remaining_pins = total_pins_needles - sold_pins\n\n    # 4/5 of needles is equal to the sold pins, so\n    # (4/5) * needles = sold_pins\n    # needles = 5/4 * sold_pins\n    \n    needles = 5 / 4 * sold_pins\n    sold_needles = 4 / 5 * needles\n    remaining_needles = needles - sold_needles\n\n    # Check if remaining pins equal remaining needles\n    if remaining_pins != remaining_needles:\n        # Calculate correct remaining needles\n        # remaining_pins + remaining_needles = total_pins_needles - sold_pins - sold_needles\n        # 2 * remaining_needles = total_pins_needles - sold_pins - (4/5) * remaining_needles\n        # (10/5) * remaining_needles = total_pins_needles - sold_pins\n        # remaining_needles = 5 * (total_pins_needles - sold_pins) / 10\n\n        remaining_needles = (total_pins_needles - sold_pins) / ((5 / 10) + (4 / 5))\n    \n    return int(remaining_needles)\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    age_difference = 41 - 14\n    for brian_age in range(15, 100):\n        father_age = brian_age + age_difference\n        if str(father_age) == str(brian_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            if x1 != x2 and x1 + x2 < 11:\n                x3 = 11 - (x1 + x2)\n                if x3 != x1 and x3 != x2:\n                    count += 1\n    return count // 6  # Divide by 6 to account for permutations of piles\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    number1 = 654876\n    number2 = 279745\n    \n    round_number1 = round(number1, -2)\n    round_number2 = round(number2, -2)\n    \n    estimated_difference = round_number1 - round_number2\n    \n    return estimated_difference\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for n in range(2, 9):  # n is the number of terms in the sum\n        if n == 2:\n            count += 1  # Only one way to split 8 into two non-zero numbers\n        else:\n            # Calculate (n-1)-combinations from 7 \n            # since we distribute the number '1' to all n piles first.\n            combinations = math.comb(7, n-1)\n            count += combinations\n    return count\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time = 16  # time to pass the tree in seconds\n    length = 480  # length of the train in meters\n\n    speed = length / time  # speed = distance / time\n\n    return speed  # speed in meters per second\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    # We can use summation of the sequence directly to find the answer\n    ans = sum(range(1, 6)) + sum(range(1, 5))\n    return ans\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # in meters\n    short_by_m = 0.10  # 10 cm in meters\n\n    piece_length_m = desired_length_m - short_by_m\n\n    return piece_length_m\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    ans = (2/5) * 30\n    return ans\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    return (5/8) * 4000\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    num_lampposts = 113\n    distance_between_lampposts = 8\n    \n    road_length = (num_lampposts - 1) * distance_between_lampposts\n    \n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    value = (10**5) / (5**5)\n    return value\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    failed_percentage = (failed_pupils / total_pupils) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    total = 0\n    for num in range(1, 51):\n        if '3' in str(num):\n            total += num\n    return total\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # There are 10 keys and 10 doors.\n    # In the worst case scenario, the warden tries all the keys for the first door,\n    # then all remaining keys for the second door and so on.\n    # For the first door, the warden tries 10 keys.\n    # For the second door, he tries at most 9 keys (since one is matched with the first door).\n    # This continues until the last door, which will need just 1 key to be tried.\n    # The number of tries is the sum of the first 10 natural numbers.\n    \n    num_keys = 10\n    max_tries = sum(range(1, num_keys + 1))\n    \n    return max_tries\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    poppers_per_bag = 12\n\n    full_bags_used, poppers_left = divmod(total_guests, poppers_per_bag)\n\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # The ones digit of powers of 7 cycle in a pattern: 7, 9, 3, 1\n\n    cycle = [7, 9, 3, 1]\n    # Find the position in the cycle for the 2023rd power of 7\n    position = (2023 - 1) % 4\n    \n    # The ones digit is the value at the found position\n    ones_digit = cycle[position]\n\n    return ones_digit\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from sympy import Rational, sqrt, cbrt\n\n    numerator = cbrt(Rational(-40, 3)) * Rational(409, 99)**2\n    denominator = Rational(5924, 100) - sqrt(Rational(1000, 9))\n    \n    result = numerator / denominator\n    ans = round(float(result), 3)\n    \n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    num_str = ''.join(str(i) for i in range(1, 31))\n    smallest_num_str = '1' + '0' * (len(num_str) - 46)\n    return int(smallest_num_str)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    # Iterate backwards from the largest three-digit number\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # Define the least 5-digit palindrome\n    least_5_digit_palindrome = int(\"10001\")\n    \n    # Define the greatest 6-digit palindrome\n    greatest_6_digit_palindrome = int(\"999999\")\n    \n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    choose_children = 2\n\n    ans = comb(total_children, choose_children)\n    return ans\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    total_members = boys * 4  # Since boys represent the remaining quarter\n    girls = total_members * 3 // 4  # Three quarters are girls\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    \n    total_seating = (two_seater_benches * 2) + (three_seater_benches * 3)\n\n    return total_seating\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    paid_with = 16  # As 1 pound coins are used, the payment is the next whole number above book cost\n    change = paid_with - book_cost\n    return round(change, 2)  # rounded to 2 decimal places to represent pence accurately\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    terms = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    # Convert 201 1/7 to an improper fraction\n    numerator = 201 * 7 + 1\n    denominator = 7\n\n    # Perform the division by 8\n    result = numerator / (denominator * 8)\n\n    # Since result is in the form of A + 1/7\n    # We subtract 1/7 to find A\n    A = result - (1/7)\n\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of footballs and b be the number of basketballs\n    f, b = symbols('f b')\n\n    # Original ratio of footballs to basketballs\n    original_ratio = Eq(f, 2/5 * b)\n    \n    # Ratio of footballs to basketballs after selling 16 basketballs\n    sold_ratio = Eq(f, 2/3 * (b - 16))\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, sold_ratio), (f, b))\n\n    # Calculate total number of footballs and basketballs initially\n    total_initial = solutions[f] + solutions[b]\n\n    return total_initial\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    # Sara's age this year\n    sara_age = 8\n    # Lucy's age this year\n    lucy_age = 36\n    # The total sum of their ages we want to reach\n    desired_age_sum = 60\n    # Calculate the number of years needed for their ages to sum to 60\n    # We know that every year, the sum of their ages increases by 2 (since each of them gets 1 year older)\n    # The difference between their current age sum and the desired sum is:\n    age_sum_difference = desired_age_sum - (sara_age + lucy_age)\n    # Since this increases by 2 each year, the number of years needed is half the age sum difference\n    years = age_sum_difference // 2\n\n    return years\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'y' be the current age of the younger brother and 'o' the current age of the older brother.\n    y, o = symbols('y o')\n\n    # When older brother was 'y' years old, the younger brother was 12.\n    eq1 = Eq(o - y, 12)\n\n    # When younger brother becomes 'o' years old, (o - y) years later, older brother will be 27.\n    eq2 = Eq(o + (o - y), 27)\n\n    # Solving the equations\n    solutions = solve((eq1, eq2), (y, o))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # To ensure a pair of gloves of the same color, Rona must take out at least one glove more than the product of the number of colors and the number of gloves needed to form a pair (which is 1, since we want to ensure one pair).\n    # With 5 colors, we can take out one of each color without guaranteeing a pair. Thus, we need to take out 5 (one of each color) + 1 (to ensure a pair) gloves.\n    num_colors = 5\n    gloves_for_pair = 1\n    gloves_needed = num_colors * gloves_for_pair + 1\n\n    return gloves_needed\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    start = 30\n    end = 82\n    multiple_of = 8\n\n    first_multiple = (start // multiple_of) * multiple_of\n    if first_multiple < start:\n        first_multiple += multiple_of\n\n    last_multiple = (end // multiple_of) * multiple_of\n\n    num_multiples = ((last_multiple - first_multiple) // multiple_of) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Peter's initial amount of stickers (p) and Sam's initial amount (s)\n    p, s = symbols('p s')\n    \n    # Write the equations based on the problem description:\n    # Sam had 40 stickers more than Peter initially: s = p + 40\n    # Sam gave 20% of his stickers to Peter: s - 0.2 * s + 0.25 * p = s - 0.2s + 0.25p\n    # Peter gave 25% of his stickers to Sam: p - 0.25 * p + 0.2 * s = p - 0.25p + 0.2s\n    # In the end, Sam had 96 stickers more than Peter\n    \n    # Initial situation equations\n    equation1 = Eq(s, p + 40)\n    \n    # After exchange equation: Sam's new amount - Peter's new amount = 96\n    equation2 = Eq((s - 0.2 * s + 0.25 * p) - (p - 0.25 * p + 0.2 * s), 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (p, s))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    lines = 13\n    # Maximum number of junctions (crossing points) occurs when each line\n    # intersects with every other line exactly once\n    # The formula to calculate junctions is n(n-1)/2 where n is the number of lines\n    ans = lines * (lines - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    price_after_increase = original_price * (1 + 10 / 100)\n    price_after_decrease = price_after_increase * (1 - 10 / 100)\n    return price_after_decrease\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # convert time from minutes to hours\n    time = 7.2 / 60\n\n    # speed of teacher relative to student when going towards the front\n    speed_towards = 12 + 8\n\n    # speed of teacher relative to student when going back\n    speed_back = 12 - 8\n\n    # time for teacher to reach the front is same as the time it takes to get back to the end\n    # distance = speed * time => time = distance / speed\n    # So, total time is time to front + time back = distance/speed_towards + distance/speed_back\n    # distance = length of the line\n    # 2 * distance = time * (speed_towards + speed_back)\n    distance = (time * (speed_towards + speed_back)) / 2\n\n    return distance\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Division into 4 groups with 4 people each\n    people_in_group = 16 // 4\n    \n    # Single round-robin in each group: each person plays each other once\n    games_in_group_stage = 4 * (people_in_group * (people_in_group - 1) // 2)\n    \n    # Knockout stage games\n    # 8 people - 4 games to get to top 4\n    # 4 people - 2 games to get to top 2\n    # 2 people - 1 game to determine winner and runner-up\n    # An extra game for determining third place\n    games_in_knockout_stage = 4 + 2 + 1 + 1\n    \n    # Total games\n    total_games = games_in_group_stage + games_in_knockout_stage\n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    flora_age_two_years_ago = flora_age_now - 2\n    father_age_two_years_ago = 9 * flora_age_two_years_ago\n\n    father_age_now = father_age_two_years_ago + 2\n\n    return father_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets = [i for i in range(31, 40) if i % 4 == 0 and i % 6 == 0]\n    return sweets[0] if sweets else None\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('distance')\n\n    # Speed = Distance / Time\n    # Time at 4 km/h = Distance / 4\n    # Time at 6 km/h = Distance / 6\n\n    # When traveling at 4 km/h, Mike is 20 minutes late\n    # So the actual time taken (in hours) is Time at 4 km/h - 1/3 (since 20 min = 1/3 hour)\n    # When traveling at 6 km/h, Mike is 10 minutes early\n    # So the actual time taken (in hours) is Time at 6 km/h + 1/6 (since 10 min = 1/6 hour)\n\n    # Setting up the equation Eq(Time at 4 km/h - 1/3, Time at 6 km/h + 1/6)\n    eq = Eq(distance/4 - 1/3, distance/6 + 1/6)\n\n    # Solving the equation for distance\n    solution = solve(eq, distance)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count(\"3\")\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        count += str(i * 2).count('3')\n    \n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    value_in_pounds = 1.25\n    value_in_pence = value_in_pounds * 100\n    return value_in_pence\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of a banana and an apple\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's purchase: 2 bananas + 3 apples = 1.50\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    \n    # Beth's purchase: 3 bananas + 2 apples = 1.45\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    # Annabella’s purchase: 1 banana + 1 apple\n    annabella_cost = solutions[banana] + solutions[apple]\n    \n    return annabella_cost\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Ken took 1 less than half, so reverse that operation\n    ken_took = remaining * 2 + 1\n    # New total before Ken took his share\n    remaining += ken_took\n    \n    # Nini took 3 more than half, reverse that\n    nini_took = (remaining * 2) - 3\n    # New total before Nini took her share\n    remaining += nini_took\n    \n    # Ivy took 2 less than half, reverse that\n    ivy_took = (remaining * 2) + 2\n    # New total before Ivy took her share\n    remaining += ivy_took\n    \n    # Eddie took 1 more than half, so reverse that\n    eddie_took = (remaining * 2) - 1\n    # Total candy in the bowl at the beginning\n    remaining += eddie_took\n    \n    return remaining\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    letters = \"CYZZ\"\n    perm_set = set(permutations(letters))\n    return len(perm_set)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    heights_in_m = [\n        5,          # height in meters\n        120 / 100,  # height in centimeters converted to meters\n        50 / 1000,  # height in millimeters converted to meters\n        8 * 0.3048  # height in feet converted to meters\n    ]\n    \n    # Assuming average height of a child is between 1m and 2m\n    correct_heights = [height for height in heights_in_m if 1 <= height <= 2]\n    \n    # Return the number of correct estimates since we need to check which might be correct\n    return len(correct_heights)\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    for boys in range(1, 99):\n        girls = 3 * boys\n        total_paintbrushes = 2 * girls + 3 * boys\n        if total_paintbrushes == 99:\n            return girls\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    students_A = 12\n    students_B = 16\n    students_C = 20\n    \n    gcf_ab = gcd(students_A, students_B)\n    gcf_abc = gcd(gcf_ab, students_C)\n    \n    return gcf_abc\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    # Total distance to climb\n    total_distance = 18\n    # Distance climbed each day\n    daily_climb = 7\n    # Special climb distance on day 6\n    special_climb_day6 = 3\n\n    # We know that until day 6, the snail has not reached the top yet, \n    # and the distance climbed in 5 days is subtracted by the night slips for 5 days.\n    # On the 6th day, the snail reaches the top with a climb of 3 meters.\n    # So, the distance slid each night can be calculated by the remaining distance after 5 days.\n\n    # The distance climbed after 5 days (not including day 6)\n    distance_after_5_days = 5 * daily_climb\n    # The remaining distance to climb on day 6\n    remaining_distance_day6 = total_distance - special_climb_day6\n    # Calculate how much the snail slides down during the night\n    nightly_slide = distance_after_5_days - remaining_distance_day6\n\n    return nightly_slide\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_participants = 18 + 12\n    total_average_score = 82\n    boys_average = 74\n    boys_total = 18 * boys_average\n\n    total_score = total_participants * total_average_score\n    girls_total = total_score - boys_total\n    girls_average = girls_total / 12\n\n    return girls_average\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_diff = 121 - 124\n    n = 15\n    \n    nth_term = first_term + (n - 1) * common_diff\n    \n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Let N be the total number of fish in the pond\n    # We are given that 100 fish are caught and marked initially.\n    # In the second catch, 200 fish are caught, out of which 25 are marked.\n    # Using the capture-recapture method, we estimate N using the formula:\n    # (Number of marked fish in first catch / Total number of fish) = (Number of marked fish in second catch / Number of fish caught in second catch)\n    # => 100 / N = 25 / 200\n    # => N = 100 * 200 / 25\n\n    N = (100 * 200) / 25\n    return int(N)\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    rabbits_initial = 12\n    days_initial = 15\n    rabbits_final = 20\n\n    days_final = (rabbits_initial * days_initial) / rabbits_final\n    return days_final\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let the number of trees boys planted be x\n    x = Symbol('x')\n    \n    # Let the number of trees girls planted be x + 12\n    # According to the problem, we have the following equation\n    equation = Eq(x + (x + 12), 100)\n    \n    # Solve the equation\n    trees_boys_planted = solve(equation, x)\n\n    return trees_boys_planted[0]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    money_received = 22\n    dress_cost = 56\n    \n    total_money = susan_money + money_received\n    additional_money_needed = dress_cost - total_money\n    \n    return additional_money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    get_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    breakfast_start_time = get_up_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    school_arrival_time = breakfast_end_time + timedelta(minutes=35)\n    registration_time = school_arrival_time - timedelta(minutes=5)\n    \n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    num_packets = 6\n\n    total_salt = salt_per_packet * num_packets\n\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    # Initialize the count of ways to 0\n    count = 0\n    \n    # The maximum number of 2-gram weights is 77 // 2\n    max_two_gram_weights = 77 // 2\n    \n    # Iterate through the possible numbers of 2-gram weights\n    for two_gram_weights in range(max_two_gram_weights + 1):\n        # Calculate the remaining weight to be made up by 3-gram weights\n        remaining_weight = 77 - (2 * two_gram_weights)\n        \n        # Check if the remaining weight is exactly divisible by 3\n        if remaining_weight % 3 == 0:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    n = 20\n    sum_n = n * (n + 1) // 2\n    sum_n_squared = sum_n ** 2\n    \n    m = 9\n    sum_m = m * (m + 1) // 2\n    sum_m_squared = sum_m ** 2\n    \n    ans = sum_n_squared - sum_m_squared\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    whole_number = 2\n    fraction = 1 / 2\n    quarters_in_one = 4\n\n    total_quarters = (whole_number + fraction) * quarters_in_one\n\n    return int(total_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score_for_5_assignments = 90 * 5\n    sum_of_first_4_assignments = 96 + 85 + 89 + 92\n    score_on_5th_assignment = total_score_for_5_assignments - sum_of_first_4_assignments\n    return score_on_5th_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (6, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure 4 colors, we can draw maximum of 9 pencils each (one less than 10)\n    # for the first 4 colors. This is because even if we pick 9 pencils of the same color\n    # we are not guaranteed to have 10 of any color.\n    pencils_first_4_colors = 4 * 9\n\n    # Now, for the fifth color, we are guaranteed to have 10 pencils once we draw 10 more.\n    pencils_fifth_color = 10\n\n    # Total pencils drawn to ensure at least 5 different colors with at least\n    # 10 pencils of each color.\n    total_pencils = pencils_first_4_colors + pencils_fifth_color\n    \n    return total_pencils\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    coach_capacity = 34\n    \n    full_coaches = pupils // coach_capacity\n    remaining_pupils = pupils % coach_capacity\n    \n    if remaining_pupils > 0:\n        full_coaches += 1\n        \n    return full_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of sweets Pip and Bud originally have\n    pip, bud = symbols('pip bud')\n\n    # Create two equations representing the problem\n    # Equation 1: The original ratio of sweets between Pip and Bud\n    equation1 = Eq(pip / bud, 4 / 7)\n    \n    # Equation 2: After Santa gave Bud five sweets, the new ratio\n    equation2 = Eq((pip) / (bud + 5), 8 / 15)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    # Calculate the last digit of 5 to the power of 20\n    last_digit_5 = (5 ** 20) % 10\n    # Calculate the last digit of 7 to the power of 30\n    last_digit_7 = (7 ** 30) % 10\n\n    # The last digit of the final expression will be the multiplication of these two last digits\n    last_digit = (last_digit_5 * last_digit_7) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    length1 = 39\n    length2 = 52\n    ans = gcd(length1, length2)\n    return ans\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of girls and boys\n    girls, boys = symbols('girls boys')\n\n    # Equation 1: Total number of boys is 90 more than girls\n    equation1 = Eq(boys, girls + 90)\n    \n    # Equation 2: Total number of students is the sum of boys and girls\n    equation2 = Eq(girls + boys, 1690)\n    \n    # Solve equations to find the number of girls and boys\n    solutions = solve((equation1, equation2), (girls, boys))\n    num_girls = solutions[girls]\n    num_boys = solutions[boys]\n\n    # Define the ratio of girls who can swim to those who cannot\n    girls_swim = num_girls * 31 / (31 + 49)\n    girls_cannot_swim = num_girls * 49 / (31 + 49)\n    \n    # Define the number of boys who can swim and cannot swim\n    boys_cannot_swim = num_boys / 2 + 120 / 2\n    boys_swim = num_boys / 2 - 120 / 2\n    \n    # Calculate the total number of pupils who cannot swim\n    cannot_swim_total = girls_cannot_swim + boys_cannot_swim\n\n    return int(cannot_swim_total)\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the points for an A and a B as symbols\n    A, B = symbols('A B')\n\n    # Simon's equation: 4*A + 4*B = 36\n    simon_eq = Eq(4*A + 4*B, 36)\n    \n    # Peter's equation: 2*A + 3*B = 22\n    peter_eq = Eq(2*A + 3*B, 22)\n\n    # Solve for A and B\n    solutions = solve((simon_eq, peter_eq), (A, B))\n\n    # Calculate the score for 3 A grades and 5 B grades\n    score = 3*solutions[A] + 5*solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # If Joe shares his chocolate bar with his friend evenly,\n    # Joe will have half of the chocolate bar.\n    total_squares = 16\n    joe_squares = total_squares // 2  # Integer division to get an integer result\n    return joe_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    half_of_999 = 999 / 2\n    return half_of_999\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Since every corner is planted with a wheat, we have to subtract those from the total count first\n    total_wheats = 116 - 4  # Subtracting the 4 corner wheats\n\n    # The field has two lengths (144m each) and two widths (204m each) where wheats are planted\n    # If we divide the 4 sides into sections with wheats (excluding corners), each side will have total_wheats // 4 sections\n    wheats_per_side = total_wheats // 4\n\n    # The distance between each wheat is the side's length divided by the number of sections\n    distance_between_wheats_length = 144 / (wheats_per_side + 1)  # +1 since corner wheats are not included in wheats_per_side\n    distance_between_wheats_width = 204 / (wheats_per_side + 1)\n\n    # Since the field is rectangular and the wheat count is even for each side, the distances should be the same\n    # We can choose either one as they should be equal given the problem constraints\n    distance_between_wheats = distance_between_wheats_length\n\n    return distance_between_wheats\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    children_between = 2\n    amanda_from_end = 7\n\n    total_children = laura_position + children_between + amanda_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "from sympy import isprime\n\ndef solution():\n    # Since they're unique prime numbers less than 45,\n    # we'll iterate through the prime numbers to find the correct numbers\n    primes = [p for p in range(2, 46) if isprime(p)]\n\n    # Check through all possible options for A, B, and C by iterating through\n    # unique combinations of three prime numbers less than 45 such that the conditions are met\n    for a in primes:\n        for b in primes:\n            if b == a:\n                continue\n            if (b - 1) % 7 != 0:  # B unique and B-1 should give a remainder of 7 when divided by 7\n                continue\n            for c in primes:\n                if c == a or c == b:\n                    continue\n                # A's condition: No valid addition equation can be formed\n                if not (a + b == c or a + c == b or b + c == a):\n                    # C's condition: Doubling C to form a valid addition equation\n                    if (2 * c + a == b or 2 * c + b == a or a + b == 2 * c):\n                        # Return the sum of these three numbers\n                        return a + b + c\n    \n    return None  # If no solution is found\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # A is the smallest prime number\n    A = 2\n    # B is the smallest composite number\n    B = 4\n    # C is neither prime number nor composite number or zero (it must be 1)\n    C = 1\n    # D is 2 less than the smallest prime number\n    D = A - 2\n    # E is the largest composite number up to 10\n    E = 10\n    # F only has factors 1 and 5\n    F = 5\n    # G is the greatest factor of 8\n    G = 8\n    # H is the lowest multiple of 6\n    H = 6\n\n    ans = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n    return ans\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    initial_ratio = Eq(7 * alexis, 5 * marry)\n    \n    # Marry and Alexis gave 20% of their stickers to Charlotte\n    marry_gave = 0.20 * marry\n    alexis_gave = 0.20 * alexis\n    \n    # Charlotte's stickers increased by 80%\n    new_charlotte_stickers = charlotte * 1.80\n    \n    # Marry has 20 more stickers than Charlotte in the end\n    marry_remaining = marry - marry_gave\n    marry_has_more = Eq(marry_remaining, charlotte + 20)\n    \n    # Alexis and Marry gave their stickers to Charlotte\n    charlotte_total = Eq(new_charlotte_stickers, charlotte + marry_gave + alexis_gave)\n\n    solutions = solve((initial_ratio, marry_has_more, charlotte_total), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_after = 322\n\n    people_before = people_after - people_got_on + people_got_off\n\n    return people_before\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    import math\n\n    # Eddie and his mom and dad can be considered as one unit, taking three spots.\n    # We want to find out how many ways this unit can be arranged: 3! (Eddie, mom, dad)\n    family_unit_permutations = math.factorial(3)\n\n    # Now consider the number of ways to arrange the remaining units (people)\n    # Since the family unit counts as one, and has to be in the line, the number \n    # of other units is 1 (the family unit itself).\n    # We want to find the permutations for this unit: 1!\n    remaining_permutations = math.factorial(1)\n\n    # The total number of ways the family can line up is the product \n    # of the permutations of the family unit and the permutations of the remaining units.\n    total_permutations = family_unit_permutations * remaining_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 2, 2, 3, 3]\n    unique_numbers = set(permutations(digits, 4))\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for thousands_units in range(1, 10):  # Loop from 1 to 9 for thousands and units digits as it can't be 0\n        for tens_hundreds in range(0, 100):  # Loop from 00 to 99 for tens and hundreds digits\n            pip_number = int(f\"{thousands_units}{tens_hundreds:02d}{thousands_units}\")\n            bud_number = int(f\"{tens_hundreds:02d}{thousands_units}{thousands_units}\")\n            if pip_number + bud_number == 5510:\n                return pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let x be the number of cows that can be fed for 50 days\n\n    # From the problem, we have two scenarios:\n    # 25 cows for 10 days, so the pasture has 25 * 10 \"cow-days\" of grass\n    pasture_capacity_1 = 25 * 10\n    # 15 cows for 20 days, so the pasture has 15 * 20 \"cow-days\" of grass\n    pasture_capacity_2 = 15 * 20\n\n    # Since the amount of grass in the pasture can be considered constant, let's equate the capacities\n    assert pasture_capacity_1 == pasture_capacity_2\n\n    # Now we are asked to find the number of cows (x) that can be fed for 50 days\n    # pasture_capacity = x * 50\n    x = pasture_capacity_1 // 50\n\n    return x\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    total_pages = 95\n    days = 0\n    pages_read = 0\n\n    while pages_read < total_pages:\n        days += 1\n        pages_read += days\n\n    return days\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    day_seconds = 24 * 60 * 60  # Total seconds in a day\n    part_of_day = 1 / 4 * 1 / 6 * 1 / 8\n    seconds = day_seconds * part_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of oranges and y be the initial number of lemons\n    x, y = symbols('x y')\n\n    # Ratio before selling oranges\n    initial_ratio = Eq(x/y, 3/5)\n    # Ratio after selling 48 oranges\n    new_ratio = Eq((x - 48)/y, 1/2)\n\n    # Solving the system of equations for x and y\n    solutions = solve((initial_ratio, new_ratio), (x, y))\n\n    # Number of lemons\n    num_lemons = solutions[y]\n\n    return num_lemons\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3\n    third_day = (5/3) * second_day\n    total_sold = first_day + second_day + third_day\n    return int(total_sold)\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial as f\n\ndef solution():\n    # Number of ways to arrange the 3 maths books (M1, M2, M3) among themselves\n    math_books_arrangement = f(3)\n    \n    # Number of ways to arrange the 2 English books (E1, E2) among themselves\n    english_books_arrangement = f(2)\n    \n    # Now, consider the group of maths books as a single book (M) and the group of English books as another single book (E),\n    # along with the 3 other books (O1, O2, O3), we have 5 'books' to arrange.\n    books_arrangement = f(5)\n\n    # The total number of ways to arrange the books is then the product of the individual arrangements.\n    total_ways = books_arrangement * math_books_arrangement * english_books_arrangement\n\n    return total_ways\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30 * original_price\n    member_discount = 100\n    sales_tax_rate = 0.10\n\n    selling_price = original_price - discount - member_discount\n    sales_tax = selling_price * sales_tax_rate\n    total_price = selling_price + sales_tax\n\n    return total_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_needed_per_cake = 200 / 12\n    cakes = 250 / flour_needed_per_cake\n    return int(cakes)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    # Work rate of Ivy\n    ivy_rate = 1 / 24\n    # Work rate of Kevin\n    kevin_rate = 1 / 20\n    # Combined work rate when both are working\n    combined_rate = ivy_rate + kevin_rate\n\n    # Total work done by the end of the 12th day\n    total_work = combined_rate * 12\n\n    # Since work done is equivalent to work done by Ivy alone,\n    # We solve for the number of days Kevin took off\n    kevin_work_days = (total_work - ivy_rate * 12) / kevin_rate\n    kevin_days_off = 12 - kevin_work_days\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (20 / 32) * 8\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n    \n    # Using inclusion-exclusion principle\n    both_competitions = math_competition + art_competition - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for number in range(1, 201):\n        count += str(number).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Cindy needs to take out socks one by one until she is certain she has a pair.\n    # Worst case scenario using the Pigeonhole Principle:\n    # - She takes one black sock.\n    # - She takes one red sock.\n    # - No matter the third sock she takes, she will have a pair of one color.\n    # Therefore, she must take 3 socks to be sure of having a pair.\n    return 3\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of statues\n    r = 4  # number of statues to arrange\n    # Number of ways to arrange r statues from n is given by nPr (Permutations)\n    perm = factorial(n) // factorial(n - r)\n    return perm\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price = 100  # in pence, since £1.00 == 100p\n\n    increase = new_price - original_price\n    percent_increase = (increase / original_price) * 100\n\n    return percent_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    original_price = 80\n    gst_rate = 0.08\n    final_price = original_price + (original_price * gst_rate)\n    return final_price\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of bicycles and t represent the number of tricycles\n    b, t = symbols('b t')\n\n    # We know there are 300 total bicycles and tricycles\n    equation1 = Eq(b + t, 300)\n\n    # A bicycle has 2 wheels and a tricycle has 3 wheels\n    # The total wheels for tricycles is 180 more than the total wheels for bicycles\n    equation2 = Eq(3 * t - 2 * b, 180)\n\n    # Solve the two equations simultaneously\n    solutions = solve((equation1, equation2), (b, t))\n\n    # Return the number of bicycles\n    return solutions[b]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    principal = final_amount / (1 + interest_rate) ** years\n\n    return principal\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_multiplier = 2\n    grey_rabbits = 14\n    total_pattern_length = 1 + 2 + 2  # Black + White + Grey\n    pattern_grey = grey_rabbits // grey_multiplier\n    \n    # Since the pattern is BWGG and we have 14 grey rabbits which means 7 patterns,\n    # we need to check if we have an additional grey rabbit without completing the pattern.\n    additional_grey = grey_rabbits % grey_multiplier\n    total_rabbits = pattern_grey * total_pattern_length\n    \n    # If there's one additional grey, it means we have an additional grey and white rabbit\n    if additional_grey == 1:\n        total_rabbits += 1 + 2  # 1 more White and 1 more Grey\n    \n    return total_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation = 0.8154\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    final_value_approximated = initial_value * approximate_depreciation\n\n    return final_value_approximated\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    # Directly calculate the expression using the Difference of Two Squares Formula\n    ans = 2015 * 2015 - 2016 * 2014\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrapped_biscuits = 20\n    chocolate_foil_wrapped_biscuits = 15\n    non_chocolate_non_foil_biscuits = 9\n    \n    chocolate_biscuits = (chocolate_foil_wrapped_biscuits +\n                          (total_biscuits - foil_wrapped_biscuits - non_chocolate_non_foil_biscuits))\n    \n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4 / 5\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original speed be x m/min and the original time be y minutes\n    x, y = symbols('x y')\n\n    # If speed increases by 25%, time decreases by 20 minutes: new time = original time - 20\n    equation1 = Eq(x * 1.25 * (y - 20), x * y)\n\n    # If speed decreases by 45 m/min, time increases by 75%: new time = original time + (75% of original time)\n    equation2 = Eq((x - 45) * (y * 1.75), x * y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Distance = speed * time\n    distance = solutions[x] * solutions[y]\n\n    return distance\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009  # construct the number from its place values\n    rounded_number = round(number, 1)  # round off to one decimal place\n    \n    if rounded_number == 9764.0:  # check if the rounded number matches Tongtong's answer\n        return True, rounded_number  # Tongtong is correct\n    else:\n        return False, rounded_number  # Tongtong is incorrect, provide the correct rounded number\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    # The minimum value for the divisor is always 1 more than the remainder\n    divisor = remainder + 1\n    # Calculate dividend using the formula: dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')  # Let x represent the number of crystals Jason had at first\n\n    # Equation: (half of his crystals + 10) sold to Yvonne, +20 crystals mined,\n    # -14 sold to Cherlyn, = 35 crystals in the end\n    equation = Eq((x / 2 + 10) + 20 - 14, 35)\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Prime factorization of each multiplier\n    # Number of zeros at the end is determined by the number of 10's in the prime factorization\n    # 10 is 2 * 5, so we need to find the number of pairs of 2's and 5's\n    num_fives = 15  # there are 15 fives in the 5's sequence\n    num_twos = 10   # there are 10 twos in the 2's sequence\n\n    # The number of zeros at the end of the product will be the minimum of num_twos and num_fives\n    ans = min(num_fives, num_twos)\n\n    return ans\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    olaf, anna = symbols('olaf anna')\n    \n    equation1 = Eq(olaf, 3 * anna)\n    equation2 = Eq(anna + 335, 2 * (olaf - 335))\n    \n    solutions = solve((equation1, equation2), (olaf, anna))\n    \n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    decimal_positions = 3  # Between each pair of digits\n    \n    # All possible permutations of the digits\n    permutations_of_digits = [''.join(p) for p in permutations(digits)]\n    \n    # Each permutation multiplied by the number of positions the decimal point\n    # can take (which is always one less than the number of digits):\n    possibilities_with_decimal = len(permutations_of_digits) * decimal_positions\n    \n    return possibilities_with_decimal\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    Ali_and_Bala = 2\n    \n    total_people = people_in_front_of_Ali + Ali_and_Bala + people_behind_Bala\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Blue Dodges + Blue Fords = Blue Cars\n    # Blue Dodges = Total Dodges - Black Dodges\n    # Blue Fords = Blue Cars - Blue Dodges\n    # Blue Fords = Blue Cars - (Total Cars - Fords - Black Dodges)\n\n    blue_fords = blue_cars - (total_cars - fords - black_dodges)\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_cost_pence = 85  # cost of one plant in pence\n    budget_pounds = 30     # total budget in pounds\n    budget_pence = budget_pounds * 100  # convert budget to pence\n    \n    max_plants = budget_pence // plant_cost_pence  # maximum plants that can be bought\n    \n    return max_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4  # Smallest composite number is 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check if A, B, C, D are all composite\n        if all(not all(num % i for i in range(2, int(num ** 0.5) + 1)) for num in [A, B, C, D]):\n            return A + B + C + D\n        A += 1  # Increment A and check the next set of consecutive numbers\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    total_balls = 8 + 10 + 13\n    min_picks = total_balls - 2  # To ensure getting at least one of each color\n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    number = 0\n    while True:\n        if number % 11 == 5 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    num_working_days = 5\n\n    total_weekly_earnings = average_daily_earnings * num_working_days\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n\n    # Give each child one apple\n    total_apples -= children\n\n    # Divide the rest equally\n    least_apples_for_max = total_apples // (children - 1) + 1\n\n    return least_apples_for_max\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_marks = 3\n    wrong_marks = -2\n    total_score = 125\n\n    # Assuming all answers were correct\n    max_score = total_questions * correct_marks\n\n    # The difference between the actual score and the maximum possible score\n    score_difference = max_score - total_score\n\n    # Since each wrong answer not only loses 3 points but also further reduces 2 points,\n    # a wrong answer contributes to a 5 point difference\n    wrong_answers = score_difference // (correct_marks - wrong_marks)\n\n    # Correct answers are total questions minus the number of wrong answers\n    correct_answers = total_questions - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    return (3/8) * 960\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)  # Combination of 6 teams taken 2 at a time\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n    \n    num1 = 60\n    num2 = 72\n    num3 = 84\n\n    ans = gcd(gcd(num1, num2), num3)\n\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    total_numbers = 12\n    total_count = 30\n    ending_number = 10\n    \n    # Since Eddie stops at 10 on the clock (the numbers go from 1 to 12), we are just interested in the remainder when we subtract 1 from the total count\n    # Subtract 1 from total_count because we start counting from 1 (not 0)\n    starting_number = (ending_number - (total_count - 1) % total_numbers) % total_numbers\n\n    # Clock numbers go from 1 to 12, so if we have 0 we should interpret it as 12\n    if starting_number == 0:\n        starting_number = 12\n    \n    return starting_number\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        if (2 + 9 + 6 + digit + 1 + 2) % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    a, b = 2, 2\n    for i in range(3, 2012):\n        a, b = b, (a + b) % 10\n    return b\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    whole_number = two_thirds * (3/2)\n    three_quarters = whole_number * (3/4)\n    return three_quarters\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Distance driven in the first 2 hours\n    distance_first_part = 2 * 40  # speed * time\n\n    # Total distance\n    total_distance = distance_first_part + 280\n\n    # Time taken for the remaining 280 kilometres\n    time_remaining_part = 280 / 70  # distance / speed\n\n    # Total time taken\n    total_time = 2 + time_remaining_part\n\n    # Average speed calculation\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bob, alan = symbols('bob alan')\n    \n    # Before Colin gives Bob 25 cards\n    equation1 = Eq(bob, alan + 15)\n    \n    # After Colin gives Bob 25 cards, Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    solutions = solve((equation1, equation2), (bob, alan))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    saved_per_day = 1\n    saved_days = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    final_amount = original_amount + (saved_per_day * saved_days) - lent_to_brother - spent_on_snacks\n\n    return final_amount\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    return 5 * 3\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's equation: 2 bananas + 3 apples = 3 dollars.\n    eq1 = Eq(2*banana + 3*apple, 3)\n    \n    # Beth's equation: 3 bananas + 2 apples = 4 dollars.\n    eq2 = Eq(3*banana + 2*apple, 4)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (banana, apple))\n    \n    # Calculate the total cost for Annabella\n    total_cost = 10 * solutions[banana] + 10 * solutions[apple]\n\n    return total_cost\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    # summation of an odd number series starting from 23 can be expressed using the formula\n    # sum = n^2 - (n0-1)^2, where n0 is the first term divided by 2 (since all are odd numbers)\n    # and n is the total number of terms\n    # 23 is the 12th odd number (23/2 = 11.5 -> 11 + 1 = 12)\n    # the formula for the kth term of the sequence is 2k-1.\n    # We equate n^2-(n0-1)^2 to m^2 and solve for n considering that k is greater than 30\n    \n    def is_square(integer):\n        # Testing whether a number is square\n        root = integer**0.5\n        if int(root + 0.5) ** 2 == integer:\n            return True\n        else:\n            return False\n\n    n0 = 12  # Because 23 is the 12th odd number\n    k = 31  # Start from 31 because k must be greater than 30\n    while True:  # We use a loop to find the smallest k\n        # Deriving sum of the series using the derived formula and k\n        sum_series = (2*k-1)*k - (2*n0-1)*n0\n        if is_square(sum_series):\n            # If it's a square, then we will return its square root.\n            return int(sum_series**0.5)\n        k += 1  # Increase k by 1 and test the next number\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil taken from each bucket\n    x = symbols('x')\n\n    # Creating the equation:\n    # (big_oil_bucket - x) / (small_oil_bucket - x) = 12\n    equation = Eq((89 - x) / (45 - x), 12)\n\n    # Solving the equation for x\n    sold_amount = solve(equation, x)[0]\n\n    return sold_amount\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    # Probability of train to work being late is 0.7\n    p_work_late = 0.7\n    # Probability of train home being late is 0.4\n    p_home_late = 0.4\n    \n    # Probability that both trains are not late\n    p_neither_late = (1 - p_work_late) * (1 - p_home_late)\n    \n    # Probability that at least one train is late is the complement of neither being late\n    p_at_least_one_late = 1 - p_neither_late\n    \n    return p_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_had = 86\n    lena_gave_away = 29\n    lena_left_with = lena_had - lena_gave_away\n    lena_final = 100\n    mother_gave = lena_final - lena_left_with\n    return mother_gave\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let's suppose the total number of visitors is x.\n    # According to the question, 37% of the visitors were men,\n    # so the number of men m is 0.37 * x\n    # The rest of the visitors, which are women and children, sum up to 63% of the visitors,\n    # and their number is wc = 0.63 * x.\n    # Women and children are in the ratio 4:5, let's say 4k women and 5k children.\n    # According to the ratio, the number of women w is 4k, and the number of children c is 5k.\n    # It is also given that there are 12 more men than children: m = c + 12.\n\n    # Thus, we can infer the following equations:\n    # m = 0.37 * x\n    # wc = 0.63 * x\n    # m = c + 12\n    # w = (4/9) * wc\n    # c = (5/9) * wc\n    \n    # From the 3rd equation, we can say:\n    # 0.37 * x = c + 12\n    # Now, replace c with (5/9) * wc in the above equation and wc with 0.63 * x:\n    # 0.37 * x = (5/9) * (0.63 * x) + 12\n    # Solve for x:\n\n    # x = 9 * 12 / (0.37 - (5/9) * 0.63)\n    x = 9 * 12 / (0.37 - (5/9) * 0.63)\n\n    # Calculate the number of women w:\n    # w = (4/9) * (0.63 * x)\n    w = (4/9) * (0.63 * x)\n\n    # Round to the nearest integer since visitors are counted in whole numbers\n    return int(round(w))\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 99 - 10 + 1  # All 2-digit numbers from 10 to 99.\n    numbers_without_six = 0\n    \n    for i in range(10, 100):\n        if '6' not in str(i):\n            numbers_without_six += 1\n    \n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1/04/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/05/2023', '%d/%m/%Y')\n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    val = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    \n    return val\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_pow_2023 = (2 ** 2023) % 10\n\n    last_digit_sum = (last_digit_2023_squared + last_digit_2_pow_2023) % 10\n    last_digit_result = (last_digit_sum ** 3) % 10\n\n    return last_digit_result\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360  # The distance between two places\n    speed_a = 48    # The speed of car A\n    speed_b = 72    # The speed of car B\n\n    relative_speed = speed_a + speed_b  # The relative speed when moving towards each other\n\n    time_to_meet = distance / relative_speed  # Time = Distance / Speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n\n    eq1 = Eq(mango + orange, 3.80)\n    eq2 = Eq(mango + pear, 3.40)\n    eq3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    solutions = solve((eq1, eq2, eq3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    # The maximum number of intersection points that can be formed\n    # by n straight lines can be found using the combination formula:\n    # C(n, 2) = n! / (2!(n-2)!) which is the number of ways to choose\n    # 2 lines out of n to intersect.\n    ans = num_lines * (num_lines - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_of_5 = 5 ** 20 % 10\n    last_digit_of_7 = 7 ** 20 % 10\n\n    ans = (last_digit_of_5 * last_digit_of_7) % 10\n\n    return ans\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Since AB = CD = 14 cm, the radius of each quadrant and semicircle is 7 cm.\n    radius = 7\n\n    # The perimeter consists of 2 semicircles and 2 quadrants\n    # Perimeter of a full circle with radius r is 2 * pi * r\n    # Perimeter of a semicircle would hence be pi * r\n    # Perimeter of a quadrant would be (1/4) the perimeter of a full circle, plus radius (for the straight edge)\n    perimeter_semicircle = (22 / 7) * radius\n    perimeter_quadrant = ((22 / 7) * radius) / 2 + radius\n\n    # Total perimeter is the sum of perimeters of 2 semicircles and 2 quadrants\n    total_perimeter = 2 * perimeter_semicircle + 2 * perimeter_quadrant\n\n    return total_perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 3/5)\n    initial_amount = remaining_after_first_day / (2/3)\n    return int(initial_amount)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one packet of rice\n    cost_rice = symbols('cost_rice')\n\n    # Each packet of pasta costs 95 pence\n    cost_pasta_per_packet = 95\n\n    # Total spent on pasta\n    total_pasta = 6 * cost_pasta_per_packet\n\n    # Total amount spent in pence\n    total_spent = 1170  # Convert pounds to pence\n\n    # Equation for the cost of rice packets + pasta packets = total spent\n    equation = Eq(5 * cost_rice + total_pasta, total_spent)\n\n    # Solve for the cost of rice per packet\n    solutions = solve(equation, cost_rice)\n\n    return solutions[0]\n\nans = solution()  # Call the solution function"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm_of_3_5_7 = 3 * 5 * 7  # Least Common Multiple of 3, 5, and 7\n    for i in range(0, 100, 5):  # Increment by 5 to ensure divisibility by 5 (last digit must be 0 or 5)\n        number = 600 + i  # Start with 6 in the hundreds place and iterate over possible two last digits\n        if number % lcm_of_3_5_7 == 0:  # Check if number is divisible by LCM of 3, 5, and 7\n            return number\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_cup_noodles = 10\n    cup_noodles_chosen = 6\n    ways = comb(total_cup_noodles, cup_noodles_chosen)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    from sympy import symbols, nsimplify, Rational\n\n    # Convert the given fraction into its nested form\n    fraction = Rational(13, 10)\n\n    # Define symbols\n    a, b, c = symbols('a b c', integer=True)\n\n    # Define the complex fraction format\n    complex_frac = 1 + 1 / (a + 1 / (b + 1 / c))\n\n    # Set the fraction equal to our target fraction and simplify the equation\n    equation = nsimplify(complex_frac - fraction)\n\n    # Since sympy won't be able to solve the complex fraction directly,\n    # we solve it manually by converting it into a continuous fraction\n    # and retrieving the numerator and denominator.\n    nested_frac = fraction - 1  # Remove the leading 1 (1 + rest of the fraction), resulting in the nested fraction part\n\n    coeffs = []  # Initialize coefficients list for a, b, c\n\n    # Iterate and decompose the fraction\n    while True:\n        # Take the integer part\n        int_part = int(nested_frac)\n        coeffs.append(int_part)\n\n        # Check if remainder is 0, breaking the loop if it's a perfect denominator\n        rem = nested_frac - int_part\n        if rem == 0:\n            break\n        \n        # Invert the remainder for the next iteration\n        nested_frac = 1 / rem\n\n    # Ensure coeffs have three elements, completing with 1s if necessary\n    coeffs += [1] * (3 - len(coeffs))\n\n    # Assign a, b, c to the coefficients\n    a, b, c = coeffs\n\n    # Return the value of a + 2b + 3c\n    return a + 2*b + 3*c\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    ans = 336 // 6\n    return ans\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    energetic_rate = 1/20  # Energetic decorator can paint the house in 20 days\n    lazy_rate = symbols('lazy_rate')  # Lazy decorator's rate is unknown\n\n    # Equation based on combined work:\n    # (energetic_rate + lazy_rate) * 12 days = 1 house\n    equation = Eq((energetic_rate + lazy_rate) * 12, 1)\n\n    # Solve for lazy_rate\n    solutions = solve(equation, lazy_rate)\n\n    # Calculate the number of days it would take the lazy one alone\n    lazy_days = 1 / solutions[0]\n\n    return lazy_days\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    return 0.30 * (2/3) * 45\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3*9 + 5*9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    total_sum = 1650\n    num_numbers = 15\n    \n    # Average = total_sum / num_numbers\n    average = total_sum / num_numbers\n    \n    # The middle number in a sequence of consecutive numbers is the average.\n    # smallest_number = average - (num_numbers // 2)\n    # largest_number = average + (num_numbers // 2)\n    # Because the numbers are consecutive, subtract 1 from largest_number calculation for correct index\n    smallest_number = average - (num_numbers // 2)\n    largest_number = smallest_number + num_numbers - 1\n    \n    # Sum of the largest and smallest number in the sequence\n    sum_largest_smallest = smallest_number + largest_number\n    \n    return int(sum_largest_smallest)\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    num_pies = 1\n    while True:\n        if num_pies % 4 == 0 and num_pies % 6 == 0:\n            break\n        num_pies += 1\n    return num_pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    total_girls = (total_boys / boys_to_girls_ratio)\n    return int(total_girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for number in range(1, 1000):\n        oddtastic = True\n        for digit in str(number):\n            if int(digit) % 2 == 0:\n                oddtastic = False\n                break\n        if oddtastic:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    remainder_a = 6\n    remainder_b = 7\n    sum_remainders = (remainder_a + remainder_b) % 8\n\n    return sum_remainders\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n    num_blouses = 2\n\n    cloth_used_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n\n    cloth_per_blouse = remaining_cloth / num_blouses\n\n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    num_string = \"\"\n    for i in range(1, 2019):\n        num_string += str(i)\n        if len(num_string) >= 2019:\n            break\n    ans = int(num_string[2018])\n    return ans\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # If we have 11 keys and 11 rooms, in the worst case scenario,\n    # the guard would try 10 keys for the first room (last key must be the correct one for the first room),\n    # then 9 keys for the second room (last key must be the correct one for the second room), and so on...\n    # therefore, we sum the numbers from 1 to 10 for the worst case scenario.\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The list of tuples represents the congruences in the form: (remainder, modulus)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    # Use the Chinese Remainder Theorem to solve the system of congruences\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef multichoose(n, k):\n    \"Calculate the number of ways to choose `k` elements from a multiset of size `n`.\"\n    return factorial(n + k - 1) // (factorial(n - 1) * factorial(k))\n\ndef solution():\n    # Counting the arrangements for the pattern 2233 (2 twos and 2 threes)\n    num_2233 = multichoose(2, 4)\n    \n    # Counting the arrangements for the pattern 2223 (3 twos and 1 three)\n    num_2223 = multichoose(1, 4)\n    \n    ans = num_2233 + num_2223\n    return ans\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # Total mass in kilograms\n    basket_mass_kg = 500 / 1000  # Convert basket mass from grams to kilograms\n    kitten_mass_kg = 0.6  # Mass of each kitten in kilograms\n\n    # Calculate the total mass of kittens\n    total_mass_of_kittens_kg = 4 * kitten_mass_kg\n\n    # Mass of the cat equals total mass minus mass of basket and kittens\n    cat_mass_kg = total_mass_kg - basket_mass_kg - total_mass_of_kittens_kg\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_spent = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_spent / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    new_price = original_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 1 + 3 + 4  # Mary + three brothers + four sisters\n    eggs_bought = (family_members - 1) * family_members\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    # Define the time format\n    time_format = \"%H:%M\"\n\n    # Create datetime objects for departure and arrival\n    departure_time = datetime.strptime(\"7:50\", time_format)\n    arrival_time = datetime.strptime(\"8:40\", time_format)\n\n    # Calculate the time difference in minutes\n    journey_duration = (arrival_time - departure_time).total_seconds() / 60\n\n    return int(journey_duration)\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # sequence is 3, 6, 10, 15, ...\n    # This is a sequence where the difference between terms increases by one each time.\n    # The differences are: 3, 4, 5, ...\n    # So, the next difference should be 6 (5 + 1).\n\n    next_difference = 5 + 1\n    last_number = 15\n    missing_number = last_number + next_difference\n\n    return missing_number\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent the amount of money Samuel had at first\n    m = symbols('m')\n\n    # After spending 1/6 of his money and an additional $5 on a DVD\n    money_after_dvd = m - (m / 6 + 5)\n\n    # He then spent 2/5 of the remaining money and an additional $12 on magazines\n    money_after_magazines = money_after_dvd - (2 / 5 * money_after_dvd + 12)\n\n    # He had $24 left after all spending\n    equation = Eq(money_after_magazines, 24)\n\n    # Solve the equation for m\n    sol = solve(equation, m)\n\n    return sol[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    # Let x be the initial amount of money Joanne had.\n    # After spending 1/5 of x on a handbag, she has 4/5 of x left.\n    # Then, spending 3/5 of the remaining money on a dress, she has 2/5 of 4/5 of x left, which equals $80.\n    # Therefore, 2/5 of 4/5 of x = 80, which simplifies to 8/25 of x = 80.\n    # To find the initial amount x, we calculate x = 80 / (8/25) = 80 * (25/8).\n\n    initial_money = 80 * (25 / 8)\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47\n    poured_into_bottle = 5\n    poured_into_tanks = total_volume - poured_into_bottle\n    tanks = 6\n    volume_per_tank = poured_into_tanks / tanks\n    return volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    years = symbols('years')\n    \n    # Grandpa's current age\n    grandpa_age_now = 72\n    # Johnny's current age\n    johnny_age_now = 8\n    \n    # Grandpa's age in 'years' years = grandpa_age_now + years\n    # Johnny's age in 'years' years = johnny_age_now + years\n    # Grandpa's age in 'years' years = 5 times Johnny's age in 'years' years\n    equation = Eq(grandpa_age_now + years, 5 * (johnny_age_now + years))\n\n    # Solve the equation\n    solution = solve(equation, years)\n\n    # Return the number of years needed\n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Since 4 children are between Pip and Bud and Pip is in front,\n    # The position of Pip is 8 and Bud is 8 + 4 + 1 = 13th from the front.\n    # However, Bud is also the 10th from the end.\n    # So if we count Bud's position from the front, it would be total_children - 10 + 1\n    # Therefore, total_children - 10 + 1 = 13\n    # Solving for total_children gives us the answer.\n    \n    total_children = 13 + 10 - 1  # 13 - 1 adjusts the counting from end to front\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    alan, bob = symbols('alan bob')\n\n    # Bob has $15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    \n    # Colin gives Bob $25 cards\n    # Bob now has $3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    # Alan's amount is what we're looking for\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    # calculate the total growth factor\n    growth_factor = amount / principal\n\n    # calculate the interest rate\n    interest_rate = (growth_factor ** (1 / years)) - 1\n\n    # convert interest rate to percentage and round to one decimal place\n    interest_rate_percent = round(interest_rate * 100, 1)\n\n    return interest_rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Calculate the sum of odd numbers from 1 to 50\n    sum_melvin = sum(range(1, 51, 2))\n    # Calculate the sum of even numbers from 1 to 50\n    sum_monica = sum(range(2, 51, 2))\n    # Calculate the difference between the sums of Monica and Melvin\n    diff = sum_monica - sum_melvin\n    \n    return diff\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Let x be the number of elderly people Janice wants to give oranges to.\n    # If Janice gave 20 oranges to each, 10 elderly will not receive any oranges.\n    # This means she can give to x - 10 elderly people.\n    \n    # If she gave 16 oranges to each elderly, she would have enough oranges to pack 25 boxes, each containing 2 dozen (24) oranges.\n    # This means she has 25 * 24 oranges in total.\n    \n    # Let's denote the total number of oranges as total_oranges.\n    total_oranges = 25 * 24\n    \n    # Now, we need to find an x such that when Janice gives 20 oranges to each of `x - 10` elderly, all oranges are given out.\n    # This means total_oranges = 20 * (x - 10).\n    # At the same time, we also know that if Janice gives 16 oranges to each elderly, she will have exactly enough oranges for x elderly.\n    # This means total_oranges = 16 * x.\n    \n    # We have two equations now:\n    # 1) total_oranges = 20 * (x - 10)\n    # 2) total_oranges = 16 * x\n    # Since both equations equal total_oranges, we can equate them:\n    # 20 * (x - 10) = 16 * x\n    # Simplify and solve for x:\n    x = total_oranges // 16  # Since 16 * x = total_oranges, x must be total_oranges divided by 16.\n    \n    # Now find the number of oranges Janice should give to each elderly.\n    oranges_per_elderly = total_oranges // x\n\n    return oranges_per_elderly\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Given that m~Δ~n = 5m + 3n and x~Δ~9=37, solve for x\n    \n    # We can treat Δ as an operator that takes two operands m and n, \n    # returning 5 times the first operand plus 3 times the second operand.\n    # So, we can set up the equation x~Δ~9 = 37.\n    # This translates into 5x + 3*9 = 37.\n\n    # Now, solve for x\n    # 5x + 27 = 37\n    # 5x = 37 - 27\n    x_value = (37 - 27) / 5\n\n    # Return the solution\n    return x_value\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # In the worst case, Sheila could pick 3 blue balls, 3 orange balls, and 2 yellow balls,\n    # and still not have 4 balls of the same color. That's a total of 3 + 3 + 2 = 8 balls.\n    # If she picks one more ball, it will have to be either a blue or orange ball, ensuring\n    # that she has 4 balls of that color.\n    # So, she must pick 8 + 1 = 9 balls to be sure to have 4 of the same color.\n\n    return 3 + 3 + 2 + 1\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    # Let 'w' be the weight of the empty wheel barrow\n    # Let 's' be the weight of the soil when the wheel barrow is full\n    # According to the problem:\n    # w + s = 31 (the weight when full)\n    # w + (4/5)s = 27 (the weight after removing 1/5 of the soil)\n    # We need to find 'w'\n\n    # From the second equation:\n    # (4/5)s = 27 - w\n    # s = (5/4) * (27 - w)\n\n    # Substitute 's' from the first equation:\n    # w + (5/4)*(27 - w) = 31\n    # w + 67.5 - (5/4)*w = 31\n    # (1 - (5/4))*w = 31 - 67.5\n    # (-1/4)*w = -36.5\n    # w = -36.5 * (-4)\n    w = 36.5 * 4\n\n    return w\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    Tim, Tyler = symbols('Tim Tyler')\n\n    # The equation representing the relation between Tim's and Tyler's cookies\n    # 1/6 of Tim's is equal to 3/8 of Tyler's\n    equation1 = Eq(1/6 * Tim, 3/8 * Tyler)\n\n    # After Tyler sold 96 cookies, Tim had 9 times as many cookies as Tyler\n    equation2 = Eq(Tim, 9 * (Tyler - 96))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Tim, Tyler))\n\n    # Total number of cookies initially\n    total_cookies = solutions[Tim] + solutions[Tyler]\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Sally had 72 more chocolate cupcakes than vanilla cupcakes\n    equation1 = Eq(chocolate, vanilla + 72)\n    # Sally had 36 lesser blueberry cupcakes than vanilla cupcakes\n    equation2 = Eq(blueberry, vanilla - 36)\n    # After selling 1/6 of the chocolate cupcakes, \n    # 2/3 of the vanilla cupcakes and 7/9 of the blueberry cupcakes,\n    # Sally is left with 427 cupcakes altogether.\n    equation3 = Eq((5/6)*chocolate + (1/3)*vanilla + (2/9)*blueberry, 427)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # How many chocolate cupcakes did Sally sell?\n    # Sold = Initial - Remaining\n    chocolate_sold = (1/6) * solutions[chocolate]\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    interval1 = 24\n    interval2 = 30\n    lcm_interval = lcm(interval1, interval2)\n\n    minutes_after_9_am = lcm_interval\n    hours, minutes = divmod(minutes_after_9_am, 60)\n    next_time_hour = 9 + hours\n    next_time_minute = minutes\n\n    # If the hours exceed 24, adjust for next day\n    if next_time_hour >= 24:\n        next_time_hour -= 24\n\n    return (next_time_hour, next_time_minute)\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 24\n    fraction_filled = 3/4\n    full_tank = part_filled / fraction_filled\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    remainder_a = 6\n    remainder_b = 7\n\n    total_remainder = (remainder_a + remainder_b) % 8\n\n    return total_remainder\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mark, david = symbols('mark david')\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n    \n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Jessica's position from the front is represented by 5 desks in front of her + 1 (her own desk)\n    jessica_position = 5 + 1\n    \n    # Judy's position from the back is represented by 7 desks behind her + 1 (her own desk)\n    judy_position_from_back = 7 + 1\n\n    # Total desks would be Jessica's position plus the remaining desks behind her represented by Judy's position from the back\n    total_desks = jessica_position + judy_position_from_back\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = sum(str(number).count('6') for number in range(2, 57))\n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original average weight, and let n be the original number of people in the group.\n    x, n = symbols('x n')\n\n    # Equation 1: The sum of weights of the original group plus Aaron's weight divided by the number\n    # of people plus one (Aaron) equals the new average weight of 61 kg.\n    equation1 = Eq((n * x + 45) / (n + 1), 61)\n\n    # Equation 2: The sum of weights of the original group plus Aaron and Ben's weight divided by the number\n    # of people plus two (Aaron and Ben) equals the new average weight of 62 kg.\n    equation2 = Eq((n * x + 45 + 71) / (n + 2), 62)\n\n    # Solve the system of equations for x and n.\n    solutions = solve((equation1, equation2), (x, n))\n\n    # Return the original average weight x.\n    return solutions[x]\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols for the number of red and white marbles initially\n    R, W = symbols('R W', integer=True)\n    \n    # Pip's red balls\n    P = symbols('P', integer=True)\n    \n    # Bud's white balls\n    B = symbols('B', integer=True)\n    \n    # Equations based on the problem statement\n    equation1 = Eq(R/W, 3/2)            # Initial ratio of red to white marbles\n    equation2 = Eq((R+P)/W, 5/3)        # After Pip adds red marbles\n    equation3 = Eq((R+P)/(W+B), 5/4)    # After Bud adds white marbles\n    equation4 = Eq(B, P + 100)          # Bud adds 100 more marbles than Pip\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (R, W, P, B))\n\n    # Since there are multiple solutions, we find the one that fits our integer constraint\n    # (i.e., W as an integer and W > 0 since you can't have negative marbles) \n    for solution in solutions:\n        if solution[W].is_Integer and solution[W] > 0:\n            return solution[W]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    balls_taken = 2989\n\n    while balls_taken > 0:\n        # Scenario 1: Taking two white balls\n        if white_balls > 1:\n            white_balls -= 2\n            black_balls += 1\n        # Scenario 2: Taking two black balls\n        elif black_balls > 1:\n            black_balls -= 1  # One black ball was removed from Bag A but another was added back.\n        # Scenario 3: Taking one white and one black ball\n        else:\n            white_balls -= 1\n            black_balls -= 1\n            white_balls += 1  # The white ball was put back to Bag A\n\n        balls_taken -= 2  # Ming takes 2 balls out\n    \n    # After all balls are taken out, check what is left\n    if white_balls > 0:\n        remaining_color = 'white'\n    else:\n        remaining_color = 'black'\n\n    return white_balls + black_balls, remaining_color\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        a, b, c, d, e = p\n        if a != '0' and c != '0':\n            num1 = int(a + b + c)\n            num2 = int(c + d + e)\n            product = num1 * num2\n            if len(str(product)) == 5:\n                str_product = str(product)\n                if str_product[1] == b and str_product[2] == d and str_product[3] == e:\n                    return product\n    return None\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    original_hours = 15\n    new_hours = 2\n    original_people = 6\n\n    people_needed = (original_hours / new_hours) * original_people\n\n    return int(people_needed)\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_first_n_numbers = n * (n + 1) // 2\n    return sum_of_first_n_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    meters = 2.1\n    centimeters_per_meter = 100\n    n = meters * centimeters_per_meter\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    total_money = 30\n    expenses = 3.99 + 2.50 + 0.70 + 10.99 + (4 * 1.50)\n    change = total_money - expenses\n    return change\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 5):\n        for x2 in range(1, 5):\n            if x1 + x2 == 5:\n                count += 1\n            for x3 in range(1, 5):\n                if x1 + x2 + x3 == 5:\n                    count += 1\n                for x4 in range(1, 5):\n                    if x1 + x2 + x3 + x4 == 5:\n                        count += 1\n    return count//2  # Division by 2 to account for permutations of the same numbers\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 8):  # Hundreds digit from 1 to 7 to allow the units digit to be 2 more\n        units_digit = hundreds_digit + 2  # Units digit is two more than hundreds digit\n        for tens_digit in range(0, 10):  # Tens digit can be anything from 0 to 9\n            count += 1  # Each valid combination counts as one good-number\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    han, daughter = symbols('han daughter')\n    equation1 = Eq(han, 3 * daughter)\n    equation2 = Eq(han + daughter, 91.2)\n\n    solutions = solve((equation1, equation2), (han, daughter))\n\n    return solutions[han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - 2/5)\n    initial_chocolates = remaining_after_students / (1 - 0.8)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        ans += i**2 - (i - 1)**2\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Since Samantha has more votes than anyone else, the other two students must have fewer votes each.\n    # If Samantha has the least number of votes while still having more than the others, \n    # she should have just one more vote than the other two.\n    # We can apply the Pigeonhole principle here by dividing the total votes by three and rounding up.\n\n    total_votes = 25\n    other_max = (total_votes - 1) // 3  # This will give the maximum votes the other two can have\n    samantha_min_votes = other_max + 1  # Samantha needs to have at least one more vote\n    \n    return samantha_min_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    unique_totals = set()\n\n    for first_coin in coin_values:\n        for second_coin in coin_values:\n            for third_coin in coin_values:\n                total = first_coin + second_coin + third_coin\n                unique_totals.add(total)\n\n    ans = len(unique_totals)\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    principal_amount = 6000\n    amount_after_5_years = 8029.35\n    time_in_years = 5\n\n    # The formula for compound interest is A = P * (1 + r/n)^(nt)\n    # Since interest is compounded annually, n = 1 and the formula simplifies to A = P * (1 + r)^t\n    # Here, A is the final amount, P is the principal amount, r is the annual interest rate, and t is the time in years.\n\n    equation = Eq(principal_amount * (1 + x/100) ** time_in_years, amount_after_5_years)\n    interest_rate = solve(equation, x)\n\n    # Since there may be more than one solution, we filter out the one that is relevant in the economic context\n    interest_rate = [rate for rate in interest_rate if rate > 0]\n\n    if interest_rate:\n        return round(float(interest_rate[0]), 2)\n    else:\n        raise ValueError(\"No valid solution found for the interest rate\")\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits = 291\n    digit_count = 0\n    while digit_count < digits:\n        pages += 1\n        digit_count += len(str(pages))\n    \n    # We increase the page number one extra, we need to subtract one to get the real page count\n    return pages - 1\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    weight_kg = 2.4\n    weight_g = weight_kg * 1000\n    return weight_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_amount = 1500\n    chairs_amount = 360\n\n    percent_spent_on_chairs = (chairs_amount / total_amount) * 100\n\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the number of pages Clarice initially read\n    # Total pages in the magazine will be 6x\n    # After reading 80 more pages, she will have read x + 80 pages\n    # This is 70% of the total number of pages, i.e. 0.7 * 6x\n    x = symbols('x')\n    equation = Eq(x + 80, 0.7 * 6 * x)\n\n    # Solve the equation for x\n    solved_x = solve(equation, x)\n\n    # Total number of pages in the magazine is 6 times the initial pages she has read\n    total_pages = 6 * solved_x[0]\n    return total_pages\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of questions CC answered correctly\n    # Let y be the number of questions CC answered incorrectly or skipped\n\n    # Each correct answer gives 10 points and wrong answer deducts 5 points.\n    # Since they answered 10 questions each, we have x + y = 10 for CC.\n\n    # Vivi scored 15 more points than CC.\n    # Total points scored by Vivi and CC together is 95.\n    # Points by CC: 10x - 5y, Points by Vivi: 10x - 5y + 15\n    # Summing up points by CC and Vivi: 2 * (10x - 5y) + 15 = 95\n\n    # Now let's solve for x and y.\n    for x in range(11):  # CC cannot answer more than 10 questions correctly\n        y = 10 - x\n        if 2 * (10 * x - 5 * y) + 15 == 95:\n            return x\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, magazine = symbols('book magazine')\n    \n    # equations based on the given information\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n    \n    # solving the equations\n    solutions = solve((equation1, equation2), (book, magazine))\n    \n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 // 5\n    teachers_rooms = 3\n    total_rooms = girls_rooms + teachers_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_for_15_people = 650\n    people = 18\n    flour_for_one_person = flour_for_15_people / 15\n    flour_for_18_people = flour_for_one_person * people\n    return flour_for_18_people\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    adults = 2\n    children = 3\n    total_cost = (adults * adult_ticket_price) + (children * child_ticket_price)\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    s = '2581953752'\n    min_sum = float('inf') # Initialize to infinity to ensure any sum found will be smaller\n    \n    # Since there are 10 digits and 2 cuts to make, we need to consider all possible places for the cuts\n    for i in range(1, len(s) - 1):\n        for j in range(i + 1, len(s)):\n            # Make the cuts\n            part1 = int(s[:i])\n            part2 = int(s[i:j])\n            part3 = int(s[j:])\n            \n            # Calculate the sum of the three parts\n            current_sum = part1 + part2 + part3\n            \n            # Update the minimum sum if the current sum is smaller\n            if current_sum < min_sum:\n                min_sum = current_sum\n                \n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    original_sum = Eq(x + y, 11.63)\n    shifted_sum = Eq(x + 0.1*y, 5.87)\n\n    solutions = solve((original_sum, shifted_sum), (x, y))\n\n    difference = abs(solutions[x] - solutions[y])\n\n    return int(difference * 100)\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_in_m = 1000\n    ans = 7000000 / mm_in_m\n    return ans\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    total_members = 99\n\n    # Let the common ratio factor for literature club be x\n    # Science : Literature : Math = 9x : 10x : 14x\n    total_ratio = 9 + 10 + 14\n\n    # Find the value of x\n    x = total_members / total_ratio\n\n    # Calculate the number of members in Literature and Math club\n    lit_members = 10 * x\n    math_members = 14 * x\n\n    # Calculate the difference\n    difference = math_members - lit_members\n\n    return int(difference)\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n\n    minimum_dividend = (smallest_divisor * quotient) + remainder\n\n    return minimum_dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # If Benny takes 2 blue, 2 yellow and 1 red, it is still possible that he has not\n    # achieved 3 marbles of the same color. That's 5 marbles in total.\n    # However, as soon as he takes 1 more of any color, he will have 3 marbles of the same color.\n    # Therefore, the maximum number he must take to ensure 3 marbles of the same color is 6.\n\n    return 6\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa, mother = symbols('melissa mother')\n\n    equation1 = Eq(mother, melissa + 24)  # Mother was 32 when Melissa was 8, so the difference is 24\n    equation2 = Eq(mother, 3 * melissa)   # Now, mother is three times as old as Melissa\n\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side has 6 flowers including the corners\n    # For each side, the corners are counted twice (once for each adjacent side)\n    # So we can count the corner flowers once and the non-corner flowers for each side\n    flowers_per_side = 6\n\n    # Subtracting the corner flowers (they are counted once, not twice like others)\n    non_corner_flowers_per_side = flowers_per_side - 2\n\n    # Count non-corner flowers for all four sides\n    total_non_corner_flowers = non_corner_flowers_per_side * 4\n\n    # We have 4 corner flowers\n    corner_flowers = 4\n\n    # Total flowers is the sum of non-corner flowers and corner flowers\n    total_flowers = total_non_corner_flowers + corner_flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    num = 48\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    even_factors_count = len([f for f in factors if f % 2 == 0])\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    cut1 = 4.8\n    cut2 = 2.73\n    remaining_piece = original_length - (cut1 + cut2)\n    pieces = [cut1, cut2, remaining_piece]\n    longest_piece = max(pieces)\n    shortest_piece = min(pieces)\n    difference = longest_piece - shortest_piece\n    return difference\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Let the initial amount of money Li Yan had be x.\n    # She spent 1/3 of it on a book, so the book costs (1/3)x.\n    # The remainder after buying the book is 2/3x.\n    # She then spent 1/2 of the remainder on a bag, which is 1/2 * (2/3)x = (1/3)x.\n    # Therefore, the book and the bag cost (1/3)x + (1/3)x = (2/3)x = $132\n    # So, x (initial amount) = 3/2 * 132\n    \n    initial_amount = 3/2 * 132\n    return initial_amount\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the prices\n    b, v = symbols('b v')  # b for basketball, v for volleyball\n\n    # Equation1: Cost of 5 basketballs and 6 volleyballs\n    equation1 = Eq(5*b + 6*v, 325)\n    \n    # Equation2: A basketball costs $10 more than a volleyball\n    equation2 = Eq(b, v + 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, v))\n    \n    return solutions[b]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    full_pattern = pattern * (47 // len(pattern))\n    remaining = pattern[:47 % len(pattern)]\n\n    full_number = full_pattern + remaining\n    ans = sum(int(digit) for digit in full_number)\n    return ans\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_for_6_bottles = 2.52\n    cost_per_bottle = cost_for_6_bottles / 6\n    cost_for_9_bottles = cost_per_bottle * 9\n    return cost_for_9_bottles\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    average_pencils = 35\n    \n    # Let the number of boys be b, and girls will be total_pupils - b\n    boys, girls = symbols('boys girls')\n    \n    # Form the equations based on the average pencils per gender\n    equation1 = Eq(boys * 20 + girls * 60, average_pencils * total_pupils)\n    equation2 = Eq(boys + girls, total_pupils)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_problems = 25\n    target_score = 61\n\n    for correct in range(total_problems + 1):\n        incorrect = total_problems - correct\n        score = 4 * correct - incorrect\n        if score == target_score:\n            for correct_johnson in range(correct):\n                incorrect_johnson = total_problems - correct_johnson\n                score_johnson = 4 * correct_johnson - incorrect_johnson\n                if score_johnson == target_score:\n                    return total_problems - correct\n    return None\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):         # a cannot be 0 as it’s a 2-digit number's tens place\n        for b in range(0, 10):     # b can be 0\n            ab = 10 * a + b        # Construct the number ab\n            ba = 10 * b + a        # Construct the number ba\n            if 8 * ab == 3 * ba:   # Check the condition\n                return ab          # Return the number ab when condition is satisfied\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Define the cost parameters\n    base_price = 4.5\n    discount = 0.2\n    base_cupcakes = 20\n    shipping_handling = 12\n    total_bill = 120\n\n    # Calculate the number of cupcakes for orders of 20 or fewer\n    if total_bill <= base_cupcakes * base_price + shipping_handling:\n        cupcakes = (total_bill - shipping_handling) / base_price\n    else:\n        # Calculate the number of cupcakes for orders of more than 20\n        # Find the cost without shipping for discounted cupcakes\n        total_bill -= base_cupcakes * base_price + shipping_handling  # Subtract the cost of the first 20 cupcakes and shipping\n        discounted_price_per_cupcake = base_price * (1 - discount)\n        additional_cupcakes = total_bill / discounted_price_per_cupcake\n        cupcakes = base_cupcakes + additional_cupcakes\n\n    return int(cupcakes)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n\n    equation1 = Eq(3 * pigs + goats, 440)\n    equation2 = Eq(pigs + 2 * goats, 280)\n\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    total_cost = 5 * solutions[pigs] + 5 * solutions[goats]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28  # 1 pound 28 pence\n    total_pence = 57     # 57 pence\n\n    ans = total_pounds + (total_pence / 100)  # Convert pence to pounds and add\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    rhs = 1 / 3\n    ans = 15 / rhs\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for number in range(10000, 100000):\n        if int(str(number) + '1') == 3 * int('1' + str(number)):\n            return number\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    # Total people = people in front of Rose + Rose herself + people behind her\n    total_people = people_in_front + 1 + (position_from_back - 1)\n    \n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lazy, energetic = symbols('lazy energetic')\n\n    # equation1 represents the combined work of the two decorators\n    equation1 = Eq(1/lazy + 1/energetic, 1/6)\n    \n    # equation2 represents the work of the energetic decorator alone\n    equation2 = Eq(1/energetic, 1/10)\n    \n    solutions = solve((equation1, equation2), (lazy, energetic))\n\n    return solutions[lazy]\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_number = symbols('original_number')\n    equation = Eq((original_number + 45) / 3, original_number * 2)\n    \n    solution = solve(equation, original_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    sum_n = n * (n + 1) // 2\n    return sum_n\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    original_number = (result - 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Since each brother has at least two books, we start from (2,2,2) and subtract 6 from 10\n    for x1 in range(2, 10 - 2*2 + 1):\n        for x2 in range(2, 10 - x1 - 2 + 1):\n            x3 = 10 - x1 - x2\n            if x3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # The worst-case scenario for not getting 4 different colors is to get all marbles of one color first.\n    # After that, we need to draw one of each of the remaining three colors to ensure we have 4 different colors.\n    \n    # Number of marbles of the most abundant color (to ensure we get all of those first).\n    max_color = 12\n    \n    # Now we need one of each of the remaining three colors.\n    marbles_needed_from_other_colors = 3\n\n    # Total marbles needed: all of one color plus one each of the other three.\n    total_marbles_needed = max_color + marbles_needed_from_other_colors\n \n    return total_marbles_needed\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Since we know the pattern of the number 5...5?9...9 where ? is the missing digit\n    # Let's construct the number with a placeholder for the unknown digit\n    num_str = '5' * 19 + 'x' + '9' * 19\n    # We will replace 'x' with digits from 0 to 9 to find which makes the number divisible by 7\n    for i in range(10):\n        # Replace the placeholder with the current digit\n        current_num = int(num_str.replace('x', str(i)))\n        # Check divisibility by 7\n        if current_num % 7 == 0:\n            # If divisible, we've found our middle digit\n            return i\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_book = 1/5\n\n    total_pages = pages_read_first_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Since Tom is the 10th in line from shortest to tallest,\n    # there are 9 children shorter than Tom.\n    # To maximize Tom's height, we place the children shorter than Tom\n    # at the shortest possible heights while keeping their heights distinct,\n    # which means starting from 1, 2, ..., 9 cm.\n    \n    # The maximum possible height difference between two consecutive children is:\n    max_difference = 131 - 31 + 1  # As there are 31 children\n    \n    # The maximum possible height for Tom would be when the 9 children before him\n    # have the smallest possible heights and the 21 children after him have the tallest\n    # possible heights, ranging from Tom+1 cm to 131 cm for the last child.\n    tom_height = 9 + max_difference\n    \n    return tom_height\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    first_two_digit_number_with_6 = 16\n    last_two_digit_number_with_6 = 96\n    step = 10  # Since the unit digit is fixed at 6, the step between numbers will be 10.\n\n    ans = ((last_two_digit_number_with_6 - first_two_digit_number_with_6) // step) + 1\n    return ans\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    current_purchase = 105.6\n    increase_amount = 14.4\n    last_purchase = current_purchase - increase_amount\n    total_spent = current_purchase + last_purchase\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let x be the original number of storybooks Anthea had.\n    # After giving 4 storybooks, Jason and Anthea will have the same number.\n    # Hence, Jason will have 30 - 4 = 26 books after giving.\n    # And Anthea will have x + 4 books after receiving.\n    # Since they end up with the same number of books, we set them equal.\n    # 26 = x + 4\n    \n    # Solve for x, the original number of books Anthea had\n    x = 26 - 4\n    \n    # The difference between Jason and Anthea's books originally is:\n    difference = 30 - x\n    \n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for i in range(2021):\n        a, b = b, a + b\n        a, b = a % 3, b % 3  # only the remainder is relevant for our result\n    return a\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    number1 = 208 - magic_number\n    number2 = 136 - magic_number\n\n    equation = Eq(number1, 9 * number2)\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    for n in range(1, 1000):  # Assuming the number of students is less than 1000\n        if ((n * 5 + 3) - 9) % 4 == 0:\n            if ((n * 5 + 3) - (n * 4 + 9)) == 5 - 4:\n                return n\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    number = 840\n    factors = 0\n    for possible_factor in range(1, number + 1):\n        if number % possible_factor == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_age_difference = 42\n    years_later = 2\n\n    john_future_age = john_current_age + years_later\n    grandmother_future_age = john_current_age + grandmother_age_difference + years_later\n\n    total_future_age = john_future_age + grandmother_future_age\n\n    return total_future_age\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bella, chloe = symbols('alan bella chloe')\n    \n    total_money = 200\n    ratio_alan_bella = 4 / 3\n    more_than_chloe = 20\n    \n    equation1 = Eq(alan + bella + chloe, total_money)\n    equation2 = Eq(alan, bella * ratio_alan_bella)\n    equation3 = Eq(alan, chloe + more_than_chloe)\n    \n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    chocolate_bar_price = 1.83\n    number_of_bars = 2\n    note = 20\n\n    total_cost = box_of_chocolates + (chocolate_bar_price * number_of_bars)\n    change = note - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    import math\n    # Lily stands on the left end and her mother on the right end\n    # That leaves 3 spots in the middle to be arranged for the remaining 3 family members\n    # The number of ways to arrange n distinct objects is n!\n    ans = math.factorial(3)\n    return ans\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    difference = 4\n    last_term = 99\n    total_rows = ((last_term - first_term) // difference) + 1\n\n    total_seats = (total_rows * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):  # Start at 10, the smallest two-digit number\n        if (num - 4) % 5 == 0 and (num - 4) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    all_perms = list(permutations(range(1, 9), 2))  # Permutations of 2 digits from 1 to 8\n    valid_numbers = set()  # Set to hold all 2-digit numbers that are valid according to the clues\n    \n    # Filter permutations according to the given clues\n    for tens, ones in all_perms:\n        num = tens * 10 + ones\n        if ones == 2 * tens or (ones + tens == 9) or (tens == ones + 5) or (ones % 2 == 1):\n            valid_numbers.add(num)\n    \n    valid_numbers = list(valid_numbers)\n    valid_numbers.sort()\n    \n    # Detect the odd number among the four\n    odd_number = [x for x in valid_numbers if x % 2 != 0][0]\n    valid_numbers.remove(odd_number)\n    \n    # Find the smallest number by the given condition\n    smallest_number = [x for x in valid_numbers if x % 10 == 2 * (x // 10)]\n    for num in smallest_number:\n        valid_numbers.remove(num)\n    \n    # Find the largest number by the given condition\n    largest_number = [x for x in valid_numbers if (x // 10) + (x % 10) == 9]\n    for num in largest_number:\n        valid_numbers.remove(num)\n\n    # The second largest number has a tens digit 5 more than the ones\n    second_largest_number = [x for x in valid_numbers if x // 10 == (x % 10) + 5]\n    \n    # Now only the second smallest number remains\n    second_smallest_number = valid_numbers[0]\n    \n    return second_smallest_number\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n    children = 3/5 * visitors\n    remaining = visitors - children\n    men = 1/2 * remaining\n    equation = Eq(children, men + 140)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had $40 stickers more than Peter\n    initial_condition = Eq(sam, peter + 40)\n\n    # Sam gave $20 \\%$ of his stickers to Peter\n    sam_gives = 0.20 * sam\n    peter_after_sam_gives = peter + sam_gives\n\n    # In return, Peter gave $25 \\%$ of his (new amount of) stickers to Sam\n    peter_gives = 0.25 * peter_after_sam_gives\n    sam_after_peter_gives = sam - sam_gives + peter_gives\n\n    # In the end, Sam has $96$ stickers more than Peter after the exchange\n    final_condition = Eq(sam_after_peter_gives - peter_after_sam_gives, 96)\n\n    # Solve the equations\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Total sum of the first three numbers\n    total_sum_first_three = 3 * 120\n\n    # Total sum of all four numbers\n    total_sum_four_numbers = 4 * 150\n\n    # Fourth number\n    fourth_number = total_sum_four_numbers - total_sum_first_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    # Formula to calculate the sum of squares from 1 to n is n(n + 1)(2n + 1) / 6\n    # Kimmy's answer seems to be using the formula but only for n=15.\n    # To get the sum from 5^2 to 15^2, we calculate the sum from 1^2 to 15^2 and subtract the sum from 1^2 to 4^2.\n\n    # Calculate the sum of squares from 1 to 15\n    n = 15\n    sum_to_n = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Calculate the sum of squares from 1 to 4\n    n = 4\n    sum_to_4 = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Calculate the sum of squares from 5 to 15\n    ans = sum_to_n - sum_to_4\n    return ans\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    wrong_points = -2\n    total_points = 51\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_points + wrong_answers * wrong_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial amount of money Amy had be x\n    x = symbols('x')\n\n    # After spending 6/11 of her money and an additional $5, her remaining money is (5/11)x - 5\n    # She then spends 3/10 of the remainder and an additional $12, which leaves her with $30\n    # (5/11)x - 5 - (3/10)((5/11)x - 5) - 12 = 30\n    # Solve this equation for x to get the initial amount of money\n    equation = Eq((5/11) * x - 5 - (3/10) * ((5/11) * x - 5) - 12, 30)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, gillian = symbols('sally gillian')\n    equation1 = Eq(sally / gillian, 2 / 7)\n    equation2 = Eq((sally + 15) / (gillian + 15), 1 / 2)\n\n    solutions = solve((equation1, equation2), (sally, gillian))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    reported_result = 30\n    actual_subtrahend = 75\n\n    actual_result = reported_result + (actual_subtrahend - mistaken_subtrahend)\n\n    return actual_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = 3 * 4  # Least Common Multiple of 3 and 4\n    # Count the number of customers who are both every 3rd and every 4th\n    # i.e., at positions that are multiples of the LCM of 3 and 4 (which is 12)\n    count = 40 // lcm\n    return count\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_cake = 4\n    mass_per_9_apples = 1  # kg\n    total_mass_apples = 8  # kg\n\n    apples_per_kg = 9 / mass_per_9_apples\n    total_apples = apples_per_kg * total_mass_apples\n\n    num_cakes = total_apples / apples_per_cake\n\n    return int(num_cakes)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    ans = (35 * 9) / 45\n    return ans\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    number_of_seeds = 12\n\n    # The circumference is the total distance around the circle\n    # Since seeds are evenly spaced, the circumference is equal to\n    # the distance between seeds times the number of seeds\n    circumference = distance_between_seeds * number_of_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    result = (3/8) * 32\n    return result\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "网络故障，请重试"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    return 198 + 67 - 25\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    boys = 12\n    girls = 8\n    average_boys = 10\n    average_all = 14\n\n    total_score_boys = boys * average_boys\n    total_score_all = (boys + girls) * average_all\n\n    total_score_girls = total_score_all - total_score_boys\n    average_girls = total_score_girls / girls\n\n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    for n in range(1, 10000):  # Reasonable range to find the solution\n        if (n**2 + 9 == (n + 1)**2 - 16):\n            return n**2 + 9\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # First, we figure out the number of postcards per envelope after dividing 50 postcards into 5 envelopes.\n    postcards_per_envelope_initial = 50 // 5\n\n    # The fact that the new postcards are divided into another 2 envelopes and each envelope still has the same number of postcards\n    # means that the total number of new postcards added is a multiple of the `postcards_per_envelope_initial`.\n    # Since we are not told how many postcards her friends give her, we can only express the number of new postcards as:\n    # `new_postcards = N * postcards_per_envelope_initial`, where N is the number of new envelopes added, which is 2.\n    new_postcards_per_envelope = 2 * postcards_per_envelope_initial\n\n    # Therefore, the total number of postcards is the sum of the initial 50 and the new postcards added.\n    total_postcards = 50 + new_postcards_per_envelope\n\n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Possible coin values in GBP\n    coin_values = [1, 2, 5, 10, 20, 50, 100, 200]  # represent pence\n\n    # Iterate over the coin values from smallest to largest (since we want smallest coin)\n    for coin in coin_values: \n        remaining_change = 250  # change in pence\n\n        # Check if two of each smaller coin fits into the change\n        for smaller_coin in coin_values:\n            if smaller_coin > coin:\n                break\n            remaining_change -= 2 * smaller_coin\n            if remaining_change < 0:\n                # If we've subtracted too much, this coin can't be the smallest\n                break\n\n        # If exactly 0 is left, the current coin is the smallest\n        if remaining_change == 0:\n            return coin / 100  # convert pence back to pounds\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of cookies be x\n    x = symbols('x')\n\n    # She threw away 3/5 of the cookies, so she has 2/5 left\n    # She sold 75% of the remaining cookies, so she sold 2/5 * 3/4 of the total cookies\n    cookies_sold = (2/5) * (3/4) * x\n\n    # The number of cookies burnt is 3/5 of the total cookies\n    cookies_burnt = (3/5) * x\n\n    # The number of cookies burnt is 42 more than the number of cookies she sold\n    eq = Eq(cookies_burnt, cookies_sold + 42)\n\n    # Solve the equation\n    solution = solve(eq, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 80 / 100  # Convert pence to pounds\n    cost_per_gram = cost_per_100g / 100  # Cost for 1 gram\n    cost_of_250g = cost_per_gram * 250  # Scaling to 250 grams\n\n    return cost_of_250g\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    # Loop through the possible numbers, assuming they are less than 10000,\n    # as the new number with 9 at start would not be more than 4 times larger.\n    for i in range(1, 10000):\n        if int(str(9) + str(i // 10)) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        if (1000 + 70 + Y) % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 1 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # There are 6 students in total.\n    \n    # Laura must stand in the front, so there's only 1 way for her position.\n    # After placing Laura, we have 5 positions left.\n\n    # Rita cannot stand at the end, so she has 4 options (the 5 possible positions minus the last one).\n    # After placing Rita, we have 4 students left for the remaining 4 positions.\n\n    # The number of ways to arrange the remaining 4 students is 4 factorial.\n    \n    ans = 4 * factorial(4)\n    \n    return ans\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let x be the length of the road\n    # Jerry's speed is (2/5)x mph, and Kevin's speed is 80 mph\n    # When they meet, Jerry has traveled (3/7)x miles\n\n    # The time taken for both of them to meet is the same, hence\n    # Time taken by Jerry = Distance traveled by Jerry / Jerry's speed\n    # Time taken by Kevin = Distance traveled by Kevin / Kevin's speed\n\n    # Since Jerry has traveled (3/7)x, Kevin has traveled (4/7)x (because together they cover the whole distance when they meet)\n    # The equations for time are thus:\n    # (3/7)x / (2/5)x = (4/7)x / 80\n\n    # Simplify the equation:\n    # (3/7) / (2/5) = (4/7) / 80\n    # 15 / 14 = (4/7) / 80\n    # 15 * 80 = 14 * 4\n    # 1200 = 56\n    # x = 1200 / 56\n\n    x = 1200 / 56\n    return x\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    def new_operation(a, b):\n        return (a + b) * a\n\n    ans = new_operation(4, 7)\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    discount = 0.50\n    additional_discount = 0.20\n    num_items = 8\n    \n    # Calculate price after the first discount\n    price_after_first_discount = regular_price * (1 - discount)\n    \n    # Since Mr Tan bought at least 5 items, calculate the additional discount\n    price_after_additional_discount = price_after_first_discount * (1 - additional_discount)\n    \n    return price_after_additional_discount\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction_sold = 4 / 7\n\n    total_apples = sold_apples / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the departure time from Singapore\n    departure = datetime(2023, 8, 24, 5, 0)\n    \n    # Define the arrival time in London (need to adjust for Singapore time being ahead)\n    arrival = datetime(2023, 8, 24, 11, 0) + timedelta(hours=7)  # Adjusting for time difference\n    \n    # Calculate the duration of the flight\n    flight_duration = arrival - departure\n    \n    return flight_duration.seconds // 3600  # Convert seconds to hours\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    return 42 / 10\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 40 - boys\n    \n    total_pencils = 40 * 35\n    boys_pencils = boys * 20\n    girls_pencils = girls * 60\n    \n    equation = Eq(boys_pencils + girls_pencils, total_pencils)\n    \n    boys_number = solve(equation, boys)\n    \n    return boys_number[0]\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # Probability of Sally winning a game\n    p_win = 0.3\n    \n    # Probability of Sally drawing a game\n    p_draw = 0.1\n    \n    # Probability of Sally losing a game (since there are only three possible outcomes)\n    p_lose = 1 - p_win - p_draw\n    \n    # Probability that Sally will win exactly one of the two games:\n    # This can happen in two scenarios: Win-Lose or Lose-Win\n    # We will use the multiplication principle for independent events\n    prob_win_lose = p_win * p_lose\n    prob_lose_win = p_lose * p_win\n    \n    # Total probability of winning exactly one game by using the law of addition for mutually exclusive events\n    p_exactly_one_win = prob_win_lose + prob_lose_win\n    \n    return p_exactly_one_win\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # The number of Lollipops Jonathan has can be expressed as\n    # N = 4x + 32  where x is the number of boxes when putting 4 lollipops per box\n    # N = 7y + 3   where y is the number of boxes when putting 7 lollipops per box\n    # We need to find the value of N that satisfies both conditions\n    # Since both expressions are equal, we can equate them\n    # 4x + 32 = 7y + 3\n\n    # We start to check for each possible value of y, starting from 0 until we find a match\n    y = 0\n    while True:\n        # Based on the second equation, calculate the number of lollipops\n        N = 7 * y + 3\n        # Check if the calculated number of lollipops leaves 32 remaining when divided by 4\n        if (N - 32) % 4 == 0:\n            return N\n        y += 1\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # The problem is equivalent to finding the greatest common divisor (GCD) of\n    # the differences between the given numbers\n    from math import gcd\n\n    # Calculate the pair-wise differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # Calculate the GCD of these differences\n    common_diff_gcd = gcd(gcd(diff1, diff2), diff3)\n\n    # The largest possible D is the GCD of the differences\n    D = common_diff_gcd\n\n    # The same remainder R when dividing each number by D\n    R = 2010 % D\n\n    # The largest possible value of D + R\n    return D + R\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    fraction = 1 / 13\n    decimal = format(fraction, '.3000f')\n    recurring_section = decimal[2:]\n\n    index = (2012 - 1) % len(recurring_section)\n    ans = int(recurring_section[index])\n    return ans\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # 2-digit numbers from 10 to 99\n        if (i // 10 + i % 10) % 5 == 0:  # Sum of digits is divisible by 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    return a * 3 + b * 4\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    # Let the initial number of cards Eddi had be 8x and Wiya had be 7x\n    # After Eddi gave 4 cards to Wiya, Eddi had 8x - 4 cards, and Wiya had 7x + 4 cards\n    # The new ratio is 18/17 so we can write the equation (8x - 4) / (7x + 4) = 18 / 17\n    \n    # Importing sympy functions to solve equations\n    from sympy import symbols, Eq, solve\n    \n    # Using sympy to define a symbolic variable x and set up the equation\n    x = symbols('x')\n    equation = Eq((8 * x - 4) / (7 * x + 4), 18 / 17)\n\n    # Solving the equation for x\n    x_value = solve(equation, x)\n    \n    # Eddi's initial number of cards is 8x\n    # Recall that we assume the number of cards are integers, so we take the integer part\n    eddi_initial_cards = 8 * x_value[0]\n    \n    return eddi_initial_cards\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_to_blue_ratio = 5/6\n    red_marbles = blue_marbles * red_to_blue_ratio\n    green_marbles = red_marbles / 2\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    from fractions import Fraction as F\n\n    numerator = (2017 + F(7, 8)) * (3 + F(2, 3)) - 2016.875 * F(11, 3)\n    denominator = ((2017 + F(1, 3)) - 2016.875) * 17\n    fraction = (numerator / denominator) * (3 + F(23, 32))\n\n    return float(fraction)\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "网络故障，请重试"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # let x be the number of students to move from Class A to Class B\n    # A = B + 47 (initial condition)\n    # A - x = B + x + 9 (final condition after moving x students)\n    # => (B + 47) - x = B + x + 9\n    # => 47 - 9 = 2x\n    # => 38 = 2x\n    x = 38 / 2\n    return int(x)\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n\n    piece3 = total_length - piece1 - piece2\n\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 31):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n\n    total_footballs = footballs_per_basket * number_of_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # According to the question x - y = -57 (since x is smaller, the difference will be negative)\n    # Also from the question x + y = 77\n    # Using algebra, we can add these two equations:\n    # (x - y) + (x + y) = -57 + 77\n    # 2x = 20\n    # x = 20 / 2\n    # x = 10\n    # So the smaller number is 10\n    return 10\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, adults, girls = symbols('boys adults girls')\n    \n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n    \n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for num in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    # Loop through all 3-digit numbers\n    for i in range(100, 1000):\n        # Check if the number is odd\n        if i % 2 != 0:\n            # Calculate the sum of the digits\n            sum_digits = sum(map(int, str(i)))\n            # Check if the sum of the digits is 5\n            if sum_digits == 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_avocados = total_pairs * 2  # since pairs are being sold\n    cost_per_avocado_pounds = total_cost_pounds / total_avocados\n    cost_per_avocado_pence = cost_per_avocado_pounds * 100  # converting pounds to pence\n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    # Initialize the counter for the sums of the dice rolls\n    sum_counter = Counter()\n\n    # Iterate through all possible rolls for the first die\n    for die1 in range(1, 7):\n        # Iterate through all possible rolls for the second die\n        for die2 in range(1, 7):\n            # Add the results and increment the count of the sum\n            sum_counter[die1 + die2] += 1\n    \n    # Find the sum with the highest count (most likely sum)\n    most_likely_total_score = sum_counter.most_common(1)\n    \n    # Return the most likely total score\n    return most_likely_total_score[0][0]\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    # Symbols and equations are not required in this problem.\n    # Let x represent the number of girls.\n    # Therefore, 36 - x will be the number of boys.\n    # The total score for the girls will be 88x.\n    # The total score for the boys will be 91(36 - x).\n    # The total score for the class is 89*36.\n    \n    # The equation representing the situation is:\n    # 88x + 91(36 - x) = 89*36\n    \n    # Solve the equation for x to find the number of girls\n    class_total = 89 * 36\n    for girls in range(36 + 1):\n        boys = 36 - girls\n        if (88 * girls + 91 * boys) == class_total:\n            return girls\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    rhinos = symbols('rhinos')\n    deer = symbols('deer')\n    ostriches = symbols('ostriches')\n\n    # Given: Number of rhinos is equal to the number of deer\n    eq1 = Eq(rhinos, deer)\n    # Total number of heads (rhinos + deer + ostriches)\n    eq2 = Eq(rhinos + deer + ostriches, 28)\n    # Total number of legs (rhinos and deer have 4 legs, ostriches have 2 legs)\n    eq3 = Eq(4*rhinos + 4*deer + 2*ostriches, 88)\n\n    # We can solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (rhinos, deer, ostriches))\n\n    # We need to find the number of rhinos, which is the same as the number of deer\n    return solutions[rhinos]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    tables_in_row = 8\n    # Corners are shared among two adjacent tables\n    shared_corners_per_join = 4\n    # Total shared corners when tables are put in a row\n    total_shared_corners = (tables_in_row - 1) * shared_corners_per_join\n\n    # Calculate the maximum number of people\n    max_people = (people_per_square_table * tables_in_row) - total_shared_corners\n    \n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n    equation1 = Eq(xavier, 3 * andrew)\n    equation2 = Eq(andrew, (boris + jeffery + xavier)/3 - 30)\n\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n    boris_jeffery_total = solutions[boris] + solutions[jeffery]\n\n    return boris_jeffery_total\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    result = 9786 // 7\n    return result\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    digits_per_page = 0\n    pages_count = 0\n    \n    while total_digits > 0:\n        pages_count += 1\n        if pages_count < 10:\n            digits_per_page = 1\n        elif pages_count < 100:\n            digits_per_page = 2\n        else:\n            digits_per_page = 3\n        \n        total_digits -= digits_per_page\n    \n    return pages_count\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    # A number with exactly 15 factors must be in the form p^(14) or p^2 * q^2,\n    # where p and q are prime numbers because the number of factors is calculated\n    # by adding 1 to each of the exponents in the prime factorization and then multiplying them.\n    # Since 15 = 3 * 5, and the exponents in the prime factorization must sum to 14 or be (2,2)\n    # The factorization of such numbers could be p^14, p^2 * q^2, but considering it should be a multiple of 15,\n    # it must have a 3 and a 5 in its prime factorization.\n    from sympy import primerange, factorint\n\n    # Generate all primes less than 15 (as 15 itself cannot be a prime factor of these numbers)\n    primes = list(primerange(1, 15))\n\n    # Include 3 and 5 as they are prime factors of 15\n    primes.extend([3, 5])\n\n    # Initialize count\n    count = 0\n\n    # First case: p^14\n    for prime in primes:\n        # Check if p^14 is a multiple of 15\n        if (prime ** 14) % 15 == 0:\n            # The number is in the form p^14 and is a multiple of 15\n            count += 1\n\n    # Second case: p^2*q^2,\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            # Calculate the number with two different prime factors raised to the power of 2\n            number = (primes[i] ** 2) * (primes[j] ** 2)\n\n            # Check if the number has exactly 15 factors\n            if number % 15 == 0 and len(factorint(number)) == 2:\n                # Count this number\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15 am\", \"%I:%M %p\")\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%I:%M %p\").lower().strip()\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    last_digit_32 = pow(32, 33, 10)  # Calculate the last digit of 32**33\n    last_digit_22 = pow(22, 29, 10)  # Calculate the last digit of 22**29\n    ans = (last_digit_32 - last_digit_22) % 10  # Subtract and find the ones digit\n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Let the total number of layers be n\n    # For odd layers (1st, 3rd, ...), we have students\n    # For even layers (2nd, 4th, ...), we have teachers\n    # If n is odd, the number of student layers will be (n + 1) / 2, teacher layers will be n / 2\n    # If n is even, the number of student layers will be n / 2, teacher layers will be n / 2\n    \n    # Let's calculate the total number of layers\n    # The difference between students and teachers is given as 52\n    # So (students_layers - teachers_layers) * (2 * layer_index - 1)**2 = 52\n    # where layer_index goes from 1 to the maximum possible layer index (the conditions ensure that students_layers always >= teachers_layers)\n\n    diff = 52\n    # Assuming that the maximum possible layer index cannot be more than 100 for this problem\n    # (this number is arbitrary, could be more or less based on the problem's specifications)\n    for n in range(1, 100):\n        student_layers = (n + 1) // 2  # Taking advantage of integer division rounding down\n        teacher_layers = n // 2\n        num_students = sum((2 * i - 1) ** 2 for i in range(1, student_layers + 1))\n        num_teachers = sum((2 * i) ** 2 for i in range(1, teacher_layers + 1))\n        if num_students - num_teachers == diff:\n            ans = num_students + num_teachers\n            return ans\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    # Loop through all possible A and B within the required ranges\n    for A in range(10, 100): # A is a 2-digit number\n        for B in range(1000, 10000): # B is a 4-digit number\n            # Check if A+B and A^2 + B^2 are multiples of 7\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                # If both conditions are true, check if this is the largest difference\n                max_diff = max(max_diff, B - A)\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n\n    num_ways = comb(total_players, players_needed)\n\n    return num_ways\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Initial condition: Danny bought 5/7 as many apples as oranges\n    equation1 = Eq(apples, (5/7) * oranges)\n\n    # After buying 12 more oranges, Danny had 2/3 as many apples as oranges\n    equation2 = Eq(apples, (2/3) * (oranges + 12))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # 8*80*100 can be rewritten as 8^2 * 10 * 80\n    # We want to find the number inside the box that, when multiplied by 8^2, gives the original product\n    # Given that 8 * 80 = 8^1 * 8^1 = 8^2, we have\n    # 8^2 * 10 * 8^2 = 8^2 * (10 * 8^2)\n    # Thus, the missing number is 10 * 8^2, which is\n    missing_number = 10 * (8**2)\n    \n    return missing_number\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the variables\n    x, y, z = symbols('x y z')\n\n    # Set up the equation according to the given fraction and the condition\n    equation = Eq(2014/37, 54 + 1/(x + 1/(y + 1/z)))\n\n    # Solve the equation\n    solutions = solve(equation, (x, y, z))\n\n    # Since x, y, z are distinct integers, filter non-integer and non-distinct solutions\n    solutions = [s for s in solutions if all(isinstance(val, int) for val in s) and len(set(s)) == 3]\n\n    # There might be more than one solution, but only one with distinct integers\n    # Assuming there is only one solution based on the problem statement\n    if solutions:\n        x, y, z = solutions[0]\n\n    # Calculate the sum of x, y, and z\n    return x + y + z\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    count_end = 30\n    end_position = 10 \n    clock_numbers = 12\n\n    start_position = (end_position - (count_end % clock_numbers)) % clock_numbers\n    if start_position == 0:\n        start_position = clock_numbers\n\n    return start_position\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Amount of oil sold from each bucket\n\n    # Equation representing the final weight of the big bucket\n    # after selling x kilograms of oil\n    big_final = 89 - x\n\n    # Equation representing the final weight of the small bucket\n    # after selling x kilograms of oil\n    small_final = 45 - x\n\n    # The equation representing the relationship after selling the oil\n    equation = Eq(big_final, 12 * small_final)\n\n    # Solve the equation to find the amount of oil sold (x)\n    solution = solve((equation), (x))\n\n    return solution[x]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    total_jackpot = 131112\n    num_people = 9\n    \n    amount_per_person = total_jackpot // num_people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n\n    return frog_hibernation\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    for num in range(100, 1000):  # Search for the smallest three-digit number\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    a = 31 - 26\n    b = 26 - 20\n    c = 31 - 20\n    return a * b * c\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time_hours = 54 / 60  # Convert minutes to hours\n    \n    # Let d be the distance to the park.\n    # She travels to the park at 5 km/h and back at 4 km/h.\n    # Time to park: d/5 hours, time back: d/4 hours.\n    # Total time taken is (d/5 + d/4) hours, which is 54 minutes.\n    # We need to solve for d:\n    # d/5 + d/4 = total_time_hours\n    \n    # To solve for d, get the left-hand side to a common denominator:\n    # (4d + 5d) / 20 = total_time_hours\n    # 9d / 20 = total_time_hours\n    # d = (total_time_hours * 20) / 9\n    \n    d = (total_time_hours * 20) / 9\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    joleen, rennie = symbols('joleen rennie')\n    equation1 = Eq(joleen, rennie + 5)\n    equation2 = Eq(3/4 * rennie, 2/3 * joleen)\n    solutions = solve((equation1, equation2), (joleen, rennie))\n    total_pies = solutions[joleen] + solutions[rennie]\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    # Let the number of boys be b\n    # Then the number of girls is b + 8\n    # Their total is 26\n    # b + (b + 8) = 26\n    # 2b + 8 = 26\n    # 2b = 26 - 8\n    # 2b = 18\n    # b = 18 / 2\n    # b = 9\n    # So, the number of girls is b + 8 = 9 + 8\n    girls = 9 + 8\n    return girls\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both apples and bananas\n    x = symbols('x')\n\n    # Number of students who like apples is three times the number of students who like both\n    apples = 3 * x\n\n    # Number of students who like bananas is five times the number of students who like both\n    bananas = 5 * x\n\n    # Total number of students in the class is the sum of students who like only one fruit\n    # and those who like both fruits, without double counting those who like both\n    # Using the Inclusion-Exclusion Principle\n    total_students = apples + bananas - x\n\n    # We set up the equation based on the total number of students in the class\n    equation = Eq(total_students, 35)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Number of aliens including the one purchasing:\n    num_aliens = 1 + 5\n    \n    # Number of legs per alien:\n    num_legs_per_alien = 5\n    \n    # Number of shoes needed, aliens need one shoe per leg:\n    num_shoes_needed = num_aliens * num_legs_per_alien\n    \n    # Number of shoes in a pack and the cost of each pack:\n    shoes_per_pack = 5\n    cost_per_pack_of_shoes = 78\n    \n    # Total number of shoe packs needed (each alien has 5 legs, rounded up since they have to buy whole packs):\n    num_packs_of_shoes = -(-num_shoes_needed // shoes_per_pack)\n    \n    # Total cost for shoes:\n    total_cost_shoes = num_packs_of_shoes * cost_per_pack_of_shoes\n    \n    # Number of socks needed, aliens need a pair per leg:\n    num_socks_needed = num_aliens * num_legs_per_alien\n    \n    # Number of socks in a pair and the cost of each pair:\n    socks_per_pair = 2\n    cost_per_pair_of_socks = 12\n    \n    # Total number of pairs of socks needed (each alien has 5 legs, rounded up since they have to buy whole pairs):\n    num_pairs_of_socks = -(-num_socks_needed // socks_per_pair)\n    \n    # Total cost for socks:\n    total_cost_socks = num_pairs_of_socks * cost_per_pair_of_socks\n    \n    # Total cost for shoes and socks:\n    total_cost = total_cost_shoes + total_cost_socks\n    \n    return total_cost\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time Nancy takes to finish the job alone\n    x = symbols('x')\n\n    # Lee and Nancy together finish the job in 10 hours\n    # Their combined work rate is 1 job / 10 hours = 1/10\n    combined_rate = 1/10\n    \n    # If Nancy works for 20 hours, her work rate is 1 job / x hours\n    # Lee's work rate is the same as the combined work rate minus Nancy's rate\n    lee_rate = combined_rate - (1/x)\n    \n    # Lee only works for 6 hours, so his work is 6 * lee_rate\n    # Nancy's work is her rate times 20 hours, because she works for the whole duration\n    # The total work done by both should be equal to 1 job\n    equation = Eq(6 * lee_rate + 20 * (1/x), 1)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return Nancy's time to finish the job alone\n    return solution[0]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    pie_oranges_kg = 550 / 1000\n    juice_oranges_kg = 1050 / 1000\n\n    remaining_oranges_kg = total_oranges_kg - (pie_oranges_kg + juice_oranges_kg)\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 6 * A + 25:\n                return A\n    return \"No solution found\"\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day = 15\n    common_difference = 3\n    total_days = 5\n    total_chairs = sum(first_day + common_difference * (day - 1) for day in range(1, total_days + 1))\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for number in range(1, 416):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    pencil_ruler_choices = pencil_colours * ruler_colours\n    pencil_pen_choices = pencil_colours * pen_colours\n    ruler_pen_choices = ruler_colours * pen_colours\n\n    total_choices = pencil_ruler_choices + pencil_pen_choices + ruler_pen_choices\n\n    return total_choices\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Taking into account the worst-case scenario for three marbles of the same color,\n    # Benny could take out all marbles of two other colors first.\n    # So, to ensure he gets 3 marbles of the same color, he would have to take:\n    # - All 4 blue marbles (which is not enough by itself for 3 of same color)\n    # - All 3 yellow marbles (which is not enough by itself for 3 of same color)\n    # - Plus 1 additional marble (which will be the third marble of one color)\n    \n    # We add 1 because after taking out all blue and yellow marbles, the next one is guaranteed\n    # to be the third of its color (either blue or yellow since there's only one red).\n    marbles_needed = 4 + 3 + 1\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    cong1 = (1, 13)   # Represents x congruent to 1 modulo 13\n    cong2 = (3, 4)    # Represents x congruent to 3 modulo 4\n    \n    # Solve the system of congruences\n    ans = solve_congruence(cong1, cong2)\n    \n    # It yields the lowest positive solution. We need to find the number in the range 100-190\n    while ans[0] < 100 or ans[0] > 190:\n        ans = (ans[0] + ans[1], ans[1])\n        \n    return ans[0]\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    ans = 98 - 87 + 76 - 65 + 54 - 43 + 32 - 21 + 10\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Let m be the age of Mary and s be the age of her son.\n    # Given the sum of their ages is 45.\n    m_plus_s = 45\n\n    # In 5 years, both Mary and her son will be 5 years older.\n    # So we add 5 to each of their current ages and sum them up.\n    sum_in_5_years = m_plus_s + 5 + 5\n\n    return sum_in_5_years\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost_p = 7 * 14  # total cost in pence\n    paid_p = 100           # amount paid in pence (£1 = 100p)\n    change_p = paid_p - total_cost_p\n\n    return change_p\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbols for the current ages of Sebastian and Garrett\n    sebastian_age, garrett_age = symbols('sebastian_age garrett_age')\n\n    # equation representing that Sebastian is 24 years younger than Garrett\n    equation1 = Eq(sebastian_age, garrett_age - 24)\n\n    # equation representing that in 10 years, Garrett will be thrice as old as Sebastian\n    equation2 = Eq(garrett_age + 10, 3 * (sebastian_age + 10))\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian_age, garrett_age))\n\n    return solutions[garrett_age]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n    \n    # We know that initially there were 65 fewer boys than girls\n    equation1 = Eq(b, g - 65)\n    \n    # After 2/5 of the boys left, the number of boys remaining is (3/5)b\n    # After 3/7 of the girls left, the number of girls remaining is (4/7)g\n    \n    # We also know that the remaining boys and girls are equal in number\n    equation2 = Eq((3/5)*b, (4/7)*g)\n    \n    # Now we can solve the system of equations to find the initial number of boys and girls\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Calculate the remaining number of boys and girls\n    remaining_boys = (3/5) * solutions[b]\n    remaining_girls = (4/7) * solutions[g]\n    \n    # The total number of students remaining in the hall\n    total_remaining = remaining_boys + remaining_girls\n\n    return total_remaining\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_percentage = 6\n    sales_tax_paid = 90\n\n    price_of_sofa = (sales_tax_paid * 100) / sales_tax_percentage\n\n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n    number_of_people = 4\n    number_of_days = 7\n\n    total_travel_cost = travel_cost_per_person * number_of_people\n    total_hotel_cost = hotel_cost_per_day_per_person * number_of_days * number_of_people\n    total_spending_money = spending_money_per_person * number_of_people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n\n    total_earnings = march_earnings + april_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "def solution():\n    from math import factorial\n\n    # Since all books of the same subject are together, we treat each subject as one group\n    # We have 4 groups in total (1 group for each subject)\n    # We find the number of ways to arrange the 4 groups\n    group_arrangements = factorial(4)\n\n    # Now we find the number of ways to arrange the books within each subject group\n    math_arrangements = factorial(4)     # 4 math books\n    chemistry_arrangements = factorial(3)  # 3 chemistry books\n    physics_arrangements = factorial(2)    # 2 physics books\n    # Biology has only 1 book, so it's just 1 way to place it\n\n    # Multiply the number of ways to arrange groups with the ways to arrange books within each group\n    total_arrangements = group_arrangements * math_arrangements * chemistry_arrangements * physics_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7\n    total_vowels = 3\n    total_consonants = total_letters - total_vowels\n\n    total_arrangements = factorial(total_letters)\n\n    vowel_arrangements = factorial(total_vowels)\n    arrangements_with_vowels_together = vowel_arrangements * factorial(total_consonants + 1)\n\n    arrangements_with_vowels_not_together = total_arrangements - arrangements_with_vowels_together\n\n    return arrangements_with_vowels_not_together\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges, bananas = symbols('apples oranges bananas')\n    \n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n    \n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    ans = 70017007\n    return ans\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n    height_kilometers = height_meters / meters_to_kilometers\n    return height_kilometers\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of stickers each person originally had\n    eugene, melvin, david = symbols('eugene melvin david', integer=True)\n\n    # Create equations based on the problem statement\n    total = Eq(eugene + melvin + david, 260)                                # The sum of their stickers is 260\n    after_eugene_gives = Eq(eugene - 2*melvin, melvin + 2*melvin)            # Eugene gives Melvin twice the number of stickers Melvin has\n    after_melvin_gives = Eq(melvin, 2*david)                                 # Melvin gives David as many stickers as David has\n    after_david_gives = Eq(eugene + (eugene - 2*melvin), david)              # David gives Eugene as many stickers as Eugene has left\n\n    # Create equations for the final ratio\n    final_ratio = Eq((eugene - 2*melvin + (eugene - 2*melvin)) / (melvin + 2*melvin - 2*david) / (david + david - (eugene - 2*melvin)), 46/12/7)\n\n    # Solve the system of equations for the original number of stickers each person had\n    solutions = solve((total, after_eugene_gives, after_melvin_gives, after_david_gives, final_ratio), (eugene, melvin, david))\n\n    # There might be more than one solution. We filter out the one with all positive integers.\n    correct_solution = next(sol for sol in solutions if all(val > 0 for val in sol))\n\n    return correct_solution[0]  # Return the number of stickers Eugene had originally\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category_1 = 30\n    category_2 = 40\n    category_3 = 45\n\n    ways = category_1 * category_2 * category_3\n    \n    return ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import Eq, solve, isprime\n\n    # symbols a, b, c represent the prime numbers\n    a, b, c = symbols('a b c')\n    \n    # set up the equations based on the given information\n    equation1 = Eq(31 + a, 26 + b)\n    equation2 = Eq(26 + b, 20 + c)\n    \n    # solve the equations for a, b and c\n    solutions = solve((equation1, equation2), (a, b, c))\n    \n    # assign the results\n    a_val = solutions[a]\n    b_val = solutions[b]\n    c_val = solutions[c]\n\n    # check if the solutions are prime and calculate the product\n    if isprime(a_val) and isprime(b_val) and isprime(c_val):\n        result = a_val * b_val * c_val\n    else:\n        result = None\n    \n    return result\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 12//2+1):\n        for b in range(a, 12-a+1):\n            c = 12 - a - b\n            if b <= c < a+b: # inequality property of triangle\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    # For a circular permutation, the number of ways to arrange n people\n    # around a circular table with k seats is (n-1)! for n <= k\n    n_people = 6\n    n_seats = 8\n\n    # Check if there are enough people to fill the table\n    if n_people > n_seats: \n        return 0\n    else:\n        # We fix one person and arrange the remaining (circular permutations)\n        num_ways = factorial(n_people - 1)\n        return num_ways\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let original number of boys and girls be x each.\n    boys, girls = symbols('boys girls')\n\n    # Condition after 12 boys came and 8 girls left.\n    equation = Eq(boys + 12, 2 * (girls - 8))\n\n    # Since originally the number of boys and girls was equal.\n    original_condition = Eq(boys, girls)\n\n    # Solve the system of equations.\n    solutions = solve((equation, original_condition), (boys, girls))\n\n    # Total students at first is sum of boys and girls.\n    total_students_at_first = solutions[boys] + solutions[girls]\n\n    return total_students_at_first\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum = 0\n    for i in range(80, 55, -4):\n        sum += (i - (i - 2))\n    return sum\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    speed1 = 7  # speed in m/s for the first 280 m\n    distance1 = 280  # distance in m for the first part\n    time1 = distance1 / speed1  # time in s for the first part\n\n    speed2 = 5  # speed in m/s for the middle 400 m\n    distance2 = 400  # distance in m for the middle part\n    time2 = distance2 / speed2  # time in s for the middle part\n\n    remaining_distance = 800 - (distance1 + distance2)\n    speed3 = 8  # speed in m/s for the remaining distance\n    time3 = remaining_distance / speed3  # time in s for the last part\n\n    total_time = time1 + time2 + time3  # total time in seconds\n\n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    ans = 21 * (2 / 7)\n    return ans\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Since the problem seems closely related to the game theory concept known as \"Nim\",\n    # the winning strategy involves exclusive OR (XOR) operation on the pile sizes.\n\n    # Calculate the XOR of the two piles\n    xor_value = 35 ^ 24\n\n    # If the result is 0, then the second player (Wei'er) has the winning strategy,\n    # otherwise, the first player (Eddie) does.\n\n    # Determine the winner\n    if xor_value == 0:\n        winner = \"Wei'er\"\n    else:\n        winner = \"Eddie\"\n\n    # To determine the winning strategy for Eddie, he needs to make a move such\n    # that the XOR of the pile sizes after his move is 0. That is the winning state\n    # for subsequent moves.\n\n    strategy_pile_A = None\n    strategy_pile_B = None\n\n    # Compute the strategy for Eddie if he has the winning strategy\n    if winner == \"Eddie\":\n        for matches_to_take in range(1, 36):  # Check for pile A\n            if (35 - matches_to_take) ^ 24 == 0:\n                strategy_pile_A = matches_to_take\n                break\n\n        for matches_to_take in range(1, 25):  # Check for pile B\n            if 35 ^ (24 - matches_to_take) == 0:\n                strategy_pile_B = matches_to_take\n                break\n    \n    # Return the winning player and the strategy\n    return (winner, strategy_pile_A, strategy_pile_B)\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['3', '5', '7']\n    perm = permutations(digits, 3)\n\n    count = len(list(perm))\n\n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 25))\n    for prime in primes:\n        if 25 - prime in primes:\n            return prime * (25 - prime)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    length_ribbon1 = 15\n    length_ribbon2 = 45\n    largest_possible_length = gcd(length_ribbon1, length_ribbon2)\n    return largest_possible_length\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time = (6 * 60) + 52  # 6:52 PM in minutes\n    finish_time = (8 * 60) + 24  # 8:24 PM in minutes\n    \n    time_spent = finish_time - start_time  # total minutes spent\n\n    return time_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Equations based on the problem statement\n    eq1 = Eq(chocolate - 72, vanilla)\n    eq2 = Eq(vanilla + 36, blueberry)\n    \n    # Sold cupcakes\n    sold_chocolate = chocolate / 6\n    sold_vanilla = 2 * vanilla / 3\n    sold_blueberry = 7 * blueberry / 9\n    \n    # Equation for the remaining cupcakes\n    eq3 = Eq(chocolate - sold_chocolate + vanilla - sold_vanilla + blueberry - sold_blueberry, 427)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (chocolate, vanilla, blueberry))\n    \n    # Calculate the amount of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n    \n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_lamp_posts = 2\n    road_length = (num_lamp_posts - 1) * distance_between_lamp_posts\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n    # According to the Pigeonhole Principle, if n items are put into m containers,\n    # with n > m, then at least one container must contain more than one item.\n    # To find out the least number of peaches that the student with the most peaches can get,\n    # Divide total_peaches by total_students and take the ceiling of the result.\n    peaches_per_student = total_peaches // total_students\n    remaining_peaches = total_peaches % total_students\n    # If there are any remaining peaches, the student with the most peaches gets one more peach.\n    min_max_peaches = peaches_per_student + (1 if remaining_peaches > 0 else 0)\n    return min_max_peaches\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    midpoint = (18 + 52) / 2\n    return midpoint\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Let the smallest number be x, then consecutive numbers will be x+1, x+2, ..., x+6\n    # The sum of these consecutive numbers will be x + (x+1) + (x+2) + ... + (x+6) = 140\n    # This simplifies to 7x + (1 + 2 + 3 + ... + 6) = 140\n    # The sum of the first 6 natural numbers is 6 * (6 + 1) / 2 = 21\n    # Thus, 7x + 21 = 140\n    # Solving for x, we get 7x = 140 - 21\n    x = (140 - 21) // 7\n\n    return x\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    ans = (2/9) * 36\n    return ans\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (3, 4),  # means 3 children had to sit out when grouped in 4\n        (1, 7),  # means 1 child had to sit out when grouped in 7\n        (3, 9)   # means 3 children had to sit out when grouped in 9\n    ]\n\n    lcm, remainder = solve_congruence(*congruences)\n    \n    return remainder\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    total_spent = (10 * 0.45) + (10 * 0.27)\n    change = 10 - total_spent\n    return change\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    total_ways = 3 * 2 * 1  # Total ways without any restrictions (Claire's seat fixed)\n    face_to_face_ways = 1 * 2 * 1  # Ways in which Tony sits face to face with Claire\n    return total_ways - face_to_face_ways\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    frank_rate = 180 / 10  # tables per day for Frank\n    ryan_rate = 180 / 15   # tables per day for Ryan\n    difference = frank_rate - ryan_rate  # difference in tables per day\n    return difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    # Let x be the total number of questions Miss Atkinson had to mark.\n    # Let t be the amount of time it should take her to mark the questions (in minutes).\n\n    # If she marks 4 questions per minute and finishes 5 minutes late, the equation is:\n    # 4(t + 5) = x\n    \n    # If she marks 6 questions per minute and finishes 5 minutes early, the equation is:\n    # 6(t - 5) = x\n    \n    # Setting the two expressions for x equal to each other gives us an equation in terms of t:\n    # 4(t + 5) = 6(t - 5)\n\n    # Solving for t gives us:\n    t = (4 * 5 + 6 * 5) / (6 - 4) # After simplifying the equation\n\n    # Now that we have t, we can find x using either of the original equations, for example:\n    # x = 4(t + 5)\n    x = 4 * (t + 5)\n    \n    return x\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    smallest_mass = 7.35  # 7.4 rounded to one decimal place could have been 7.35 to 7.44\n    return smallest_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100 - 4):\n        # Five consecutive 2-digit numbers\n        nums = [i, i + 1, i + 2, i + 3, i + 4]\n        \n        # Check sum of any three numbers for divisibility by 37 and 60\n        for j in range(5):\n            for k in range(j+1, 5):\n                for l in range(k+1, 5):\n                    sum_3_nums = nums[j] + nums[k] + nums[l]\n                    # Check divisibility by 37 and 60 for different sets of 3 numbers\n                    if sum_3_nums % 37 == 0:\n                        other_two = set(nums) - {nums[j], nums[k], nums[l]}\n                        if sum(other_two) % 60 == 0:\n                            # Return the largest number if conditions are met\n                            return max(nums)\n    return None\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_mark = 2\n    total_marks = 79\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = (correct_answers * correct_mark) - (wrong_answers * wrong_mark)\n        if score == total_marks:\n            return correct_answers\n            \nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_amount_in_pence = 165 * 100  # Convert pounds to pence\n    cake_price = 75  # price of one cake in pence\n    number_of_cakes_sold = total_amount_in_pence / cake_price\n    return int(number_of_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3/7) * total_money\n    remaining_after_restaurant = total_money - spent_at_restaurant\n    spent_on_fees = (2/9) * remaining_after_restaurant\n    remaining_money = remaining_after_restaurant - spent_on_fees\n    return remaining_money\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_each = total_candies // 2\n\n    candies_to_give = amy_candies - candies_each\n\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution('x', 'y')"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # It takes 6 seconds for the clock to chime 3 times.\n    # This includes the intervals between the chimes (2 intervals for 3 chimes).\n    # Therefore, each interval takes 6 seconds / 2 intervals = 3 seconds per interval.\n    interval_duration = 6 / (3 - 1)\n\n    # To chime 6 times, there will be 5 intervals.\n    # So the total time to chime 6 times is the interval duration times the number of intervals.\n    total_time = interval_duration * (6 - 1)\n    \n    return total_time\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # P's work rate per hour\n    P_rate = 1 / (12 * 8)\n    # Q's work rate per hour\n    Q_rate = 1 / (8 * 10)\n\n    # Combined work rate (P and Q together) per hour when working 8 hours a day\n    combined_rate_per_hour = P_rate + Q_rate\n\n    # Total combined work rate per day\n    combined_rate_per_day = combined_rate_per_hour * 8\n\n    # Days required to complete the job when working together, rounded up to the next whole number\n    days_required = -(-1 / combined_rate_per_day) // 1  # Ceiling division\n\n    return int(days_required)\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_centimeters = 3.2 * 100\n    difference = meters_to_centimeters - 30\n    return difference\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    n = 10\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    ans = 3 * sum_of_squares\n    return ans\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 41):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56 / 100  # Convert pence to pounds\n    total_cost = 5 * cost_per_kg\n    total_money = 10  # The amount of money Lindsey has in pounds\n    change = total_money - total_cost\n    return round(change, 2)  # Round the result to 2 decimal places to represent pounds\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    factors_count = 1\n    prime_factors = factorint(120)\n    for exponent in prime_factors.values():\n        factors_count *= exponent + 1\n        \n    return factors_count\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    from math import sqrt\n\n    num = 180\n    min_difference = float('inf')\n\n    for i in range(1, int(sqrt(num)) + 1):\n        if num % i == 0:\n            factor1 = i\n            factor2 = num // i\n            difference = abs(factor1 - factor2)\n            min_difference = min(min_difference, difference)\n\n    return min_difference\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n\n    overall_change = midday_temp - midnight_temp\n\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(6, 15):\n        if num % 3 == 0 and 27 % num == 0:\n            return num\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    num_people = 85\n    price_per_person = 1.30\n\n    total_money_collected = num_people * price_per_person\n\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 36)\n\n    return ans\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let's call Max's time to cover the distance t (in minutes).\n    # Then Luca's time to cover the distance is t + 10.\n    # Given that the ratio of their speeds is 2:3, the ratio of their times is the inverse, 3:2.\n    # This results in the equation: (t + 10) / t = 3/2\n\n    # Solving the equation for t:\n    t = 20  # This satisfies the equation (20 + 10) / 20 = 3/2\n\n    # Now, if Luca walks at double his usual speed, his speed becomes equal to Max's speed\n    # This means that he would take the same time as Max to cover the distance, which is 20 minutes.\n    return t\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_fruit = 3 + 5\n    total_weight = total_durian_weight + total_watermelon_weight\n    \n    average_weight = total_weight / total_fruit\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    correct_answer_score = 2\n    wrong_answer_score = -1\n    total_score = 71\n\n    # Jimmy is stating Tom made a mistake in his calculation. Let's calculate the correct number of wrong answers.\n    # Use a loop to find the number of questions Tom answered wrongly by checking all possible numbers of correct answers.\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = (correct_answers * correct_answer_score) + (wrong_answers * wrong_answer_score)\n        if score == total_score:\n            return wrong_answers\n\n    # In case no such number of wrong answers is found (which should not be the case),\n    # return None to indicate an error in calculation.\n    return None\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let x be the initial number of pens and pencils\n    x = symbols('x')\n    \n    # Equation: After giving 5 pencils away, she has twice as many pens as pencils\n    equation = Eq(x - 5, 2 * (x - 5))\n    \n    # Solve the equation to find the initial number of pens/pencils\n    initial_pens_pencils = solve(equation, x)[0]\n    \n    # Calculate the final number of pens after buying another 18 pens\n    final_pens = initial_pens_pencils + 18\n    \n    return final_pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Jogging time in hours from 6:30 AM to 7:30 AM\n    jogging_time = 1\n    # Jogging speed in miles per hour\n    jogging_speed = 6.5\n    # Walking time in hours from 7:30 AM to 9:30 AM\n    walking_time = 2\n    # Walking speed in miles per hour\n    walking_speed = 4.5\n\n    # Distance traveled while jogging\n    jogging_distance = jogging_time * jogging_speed\n    # Distance traveled while walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 4 patterns, so there are 4 A's in a deck of 52 cards.\n    # To ensure that we draw at least one A, we must consider the worst-case scenario\n    # where we draw every card except the A's. Once we have drawn all non-A cards,\n    # the next draw must be an A.\n\n    # Number of non-A cards\n    non_a_cards = 52 - 4  # Total cards - number of A's\n\n    # Number of cards to ensure at least one A is drawn\n    cards_to_draw = non_a_cards + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_still_water = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_still_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    num_piles = 10\n    books_per_pile = total_books // num_piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    initial_length = 240\n    lengths_cut_off = 2 * 45\n    remaining_length = initial_length - lengths_cut_off\n    wire_length = 40\n\n    number_of_length_cuts = remaining_length // wire_length\n\n    return number_of_length_cuts\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    # Given values\n    left_handed_tennis_players = 16\n    fraction_of_left_handed_students_playing_tennis = 1/10\n    fraction_of_girls_who_are_left_handed = 0.25\n    \n    # Calculate the total number of left-handed students\n    total_left_handed_students = left_handed_tennis_players / fraction_of_left_handed_students_playing_tennis\n    \n    # Calculate the total number of students\n    total_students = total_left_handed_students / fraction_of_girls_who_are_left_handed\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram_of_butter = 80 / 20\n    grams_needed_for_100_cookies = 100 / cookies_per_gram_of_butter\n    return grams_needed_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    options_per_digit = 3  # 6, 7, or 8\n    total_digits = 3  # three-digit number\n    total_combinations = options_per_digit ** total_digits\n    return total_combinations\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count = 0\n    num = 1\n    while True:\n        str_num = str(num)\n        count += str_num.count('0')\n        if count >= 100:\n            # Find the exact position where the 100th zero occurs\n            pos_of_100th_zero = str_num.index('0', count - 100)\n            # If the 100th zero is not the first character in the string, it means the 100th zero is in this number\n            if pos_of_100th_zero > 0 or count == 100:\n                return num\n            else:\n                # If not, the 100th zero was in the previous number\n                return num - 1\n        num += 1\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_consumed = 9\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_consumed\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time = 10\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180  # speed in meters per minute initially\n    speed_slow = 120  # speed in meters per minute after feeling tired\n    time_fast = 6     # time in minutes at initial speed\n    time_slow = 8     # time in minutes at slower speed\n\n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n    total_distance = distance_fast + distance_slow\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Let the first term of the sequence be x\n    # Therefore, the other terms will be x+1, x+2, ..., x+7\n    # The sum of 8 consecutive numbers starting from x will be:\n    # S = x + (x+1) + (x+2) + ... + (x+7)\n    # S = 8*x + (1+2+...+7)\n    # S = 8*x + 28, because the sum of the first 7 consecutive numbers is 28 (sum of the sequence 1 to 7)\n    # Given that the sum S is 2012, we can find x:\n    # 2012 = 8*x + 28\n    \n    S = 2012\n    sum_of_first_seven_consecutive_numbers = sum(range(1, 8))\n    \n    # To find the first term x, we rearrange the equation:\n    # x = (S - 28) / 8\n    x = (S - sum_of_first_seven_consecutive_numbers) // 8\n    \n    # The largest number will then be x + 7\n    largest_number = x + 7\n    return largest_number\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    \n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n    people_behind_danya = danya_position_from_back - 1  # Elias is directly behind Danya\n\n    total_people = people_in_front_of_elias + 1 + people_behind_danya + 1  # +1 for Danya and +1 for Elias\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1/3\n    peter_rate = 1/6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42 / 35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    # Before transfer\n    equation1 = Eq(a, 5/7 * b)\n    # After transfer\n    equation2 = Eq(a + 3, 4/5 * (b - 3))\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the original number of bottles Faye had.\n    # Every exchange reduces the number of empty bottles by 2 (3 old for 1 new).\n    # After 5 exchanges, Faye has 5*2 = 10 bottles less.\n    # Faye ended up with 4 bottles, but it was 1 more than expected, so\n    # she was supposed to end up with 3 bottles.\n    # The number of bottles after exchanges should be x - 10.\n    # Set up the equation: x - 10 = 3\n    \n    x = symbols('x')\n    equation = Eq(x - 10, 3)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    ans = 52248 // 12\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    for boys in range(1, 1000):  # Assuming a reasonable upper limit for the number of boys\n        total_people = boys + 17\n        if int((boys ** 0.5) + 1) ** 2 == total_people:\n            return boys\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate = 125  # in millilitres per second\n    millilitres_in_a_litre = 1000\n    \n    total_water_ml = total_litres * millilitres_in_a_litre  # Convert litres to millilitres\n    time_seconds = total_water_ml / flow_rate  # Calculate time by dividing total volume by flow rate\n    \n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages = 0\n    digits = 0\n    while digits < 237:\n        pages += 1\n        digits += len(str(pages))\n    return pages - 1 if digits > 237 else pages\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    # Let's denote the number of days Olivia saved money as 'n'.\n    # The total savings Olivia initially thought she had is n * 1462.\n    # But because she accidentally recorded one day wrong, we need to correct this.\n    # She recorded 1268 instead of 1082, so the difference is 1268 - 1082.\n    incorrect_diff = 1268 - 1082\n\n    # Now, the new average she calculated is higher by 6 ($1468 instead of $1462).\n    # This means that the incorrect total savings are n * 1468.\n    # Subtracting the correct total savings from the incorrect total savings\n    # should give us the incorrect difference.\n    # n * 1468 - n * 1462 = incorrect_diff\n    # This simplifies to n * 6 = incorrect_diff\n\n    days = incorrect_diff / 6\n\n    return int(days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # If Mr Tung can cut a rope into 4 pieces of equal length in 12 minutes,\n    # it means he makes 3 cuts since 1 initial piece requires 0 cuts.\n    cuts_for_4_pieces = 3\n    time_for_4_pieces = 12  # 12 minutes for 4 pieces\n    \n    # To calculate the number of cuts needed to get 12 equal pieces,\n    # we subtract 1 from the total number of pieces because 1 initial piece requires 0 cuts.\n    cuts_for_12_pieces = 12 - 1\n    \n    # Assuming each cut takes the same amount of time,\n    # we can calculate the total time by scaling proportionally.\n    time_for_12_pieces = (time_for_4_pieces / cuts_for_4_pieces) * cuts_for_12_pieces\n    \n    return time_for_12_pieces\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80  # Lord Ownlynose was born 80 years before 1940\n    current_year = 2011\n    age_of_tree = current_year - birth_year  # Age of the oak tree now\n    return age_of_tree\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    difference = 28 - 25\n\n    first_term = last_shown_term - (nth_term - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d represent the distance and v the velocity\n    d, v = symbols('d v')\n\n    # Original scenario: t = 7 p.m. - 1 p.m. = 6 hours\n    t_original = 6\n\n    # Updated scenario: t' = 7 p.m. - 1 p.m. - 1 hour = 5 hours\n    t_update = 5\n\n    # Equation from the original scenario: d = v * 6\n    # Equation from the updated scenario: d = (v + 2) * 5\n\n    # Set up the equations\n    equation1 = Eq(d, v * t_original)\n    equation2 = Eq(d, (v + 2) * t_update)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (d, v))\n\n    # Get the value of the distance d\n    return solution[d]\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of Lily, Marry, and Carol\n    lily, marry = symbols('lily marry')\n\n    # Express the age relations\n    carol_age = marry + 2\n    marry_age = lily + 1\n\n    # Define the equation according to the problem\n    age_equation = Eq(4 * lily * marry * carol_age, 2240)\n\n    # Solve the system of equations\n    ages = solve((age_equation), (lily, marry))\n\n    # Calculate Carol's age\n    carol_age_value = ages[marry] + 2\n    \n    return carol_age_value\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # a is the first term and d is the common difference\n\n    # 9th term formula: a + 8d\n    # 15th term formula: a + 14d\n    # The 9th term is 18 larger than the 15th term: (a + 8d) - (a + 14d) = 18\n    equation1 = Eq(a + 8*d - (a + 14*d), 18)\n\n    # 20th term formula: a + 19d\n    # 12th term formula: a + 11d\n    # Sum of the 20th term and the 12th term is 88: (a + 19d) + (a + 11d) = 88\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the system of equations for a and d\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Calculate the 32nd term using the found a and d: a + 31d\n    a_val = solutions[a]\n    d_val = solutions[d]\n    nd_term_32 = a_val + 31*d_val\n\n    return nd_term_32\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3*(6 - 2*x), 8 + 10*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = (2 / 5) * total_flowers\n    purple_flowers = (1 / 8) * total_flowers\n\n    return int(red_flowers + purple_flowers)\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    ways = 0\n    # Since there are 10 identical marbles, we iterate from 0 to 10 to represent how many marbles are in the first pile\n    # The second pile will contain (10 - marbles in the first pile)\n    for first_pile in range(11):\n        ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # convert 2.5 liters to quarts\n    cups_per_quart = 2  # 1 quart is equal to 2 cups of 0.5 quart each\n    total_cups = liters_to_quarts * cups_per_quart\n    return round(total_cups)\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Correctly set up the equation based on the question\n    correct_equation = Eq((8*x + 8)/2 - 3*(x + 6), x + 22)\n\n    # Solve for x\n    solution = solve(correct_equation, x)\n\n    # Chewy's wrong working: (8x + 8) / 2 - 3(x + 6) = 4x + 4 - 3x - 18\n    # It should be -3(x + 6) = -3x - 18, not -3x + 18\n    # Hence the correct answer is:\n    corrected_equation = Eq((8*x + 8)/2 - 3*(x + 6), x)\n\n    # Obtain the left-hand side of the equation by expanding the corrected equation\n    lhs = ((8*x + 8)/2 - 3*(x + 6)).expand()\n\n    # The correct left-hand side is the solution\n    return lhs\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    lengths_cm = [85, 200, 147]  # lengths in cm (2m converted to 200cm)\n    total_length_cm = sum(lengths_cm)  # sum of lengths in cm\n    total_length_m = total_length_cm / 100  # convert cm to m\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fractional_part = 34 / 100\n    decimal_number = whole_number + fractional_part\n    return decimal_number\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    total_legs = 64\n    spider_legs = 8\n    ant_legs = 6\n\n    max_ants = total_legs // ant_legs\n\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    vivian = 5 * justin + 8\n\n    equation = Eq(vivian - justin, 48)\n    solutions = solve(equation, justin)\n\n    return solutions[justin] + 48\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    remaining_stamps = 34\n    stamps_after_giving = remaining_stamps + 2  # Used to send a letter\n    stamps_after_buying = stamps_after_giving - 11  # Bought from Singpost\n    initial_stamps = stamps_after_buying + 14  # Gave to her sister\n\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    litres = 7.5\n    millilitres = litres * litres_to_millilitres\n    return millilitres\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # The worst case scenario to get 3 cars of the same color:\n    # He may pick all cars of the other two colors before getting three of the same one.\n    max_pick_red = 2  # Max number of red cars to pick without having 3 red cars.\n    max_pick_blue = 2  # Max number of blue cars to pick without having 3 blue cars.\n    max_pick_white = 2  # Max number of white cars to pick without having 3 white cars.\n\n    # Therefore, he needs to pick at least:\n    # - 2 red + 2 blue + 2 white = 6 cars to make sure he doesn't get 3 of the same color\n    # But after those 6 picks, he is guaranteed to get the 3rd car of the same color\n    # with one more pick regardless of the color.\n    # So we add one, which ensures 3 cars of the same color.\n    cars_to_pick = max_pick_red + max_pick_blue + max_pick_white + 1\n    \n    return cars_to_pick\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((((x - 6) * 6) + 6) / 6, 6)\n\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)  # The expected sum of two numbers\n    equation2 = Eq(x + y/10, 5.87)  # The incorrect sum Oliver got by shifting the decimal\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    difference = abs(solutions[x] - solutions[y])\n\n    return int(difference * 100)\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    return 2 * 9 + 200 + 9\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_spent = initial_amount / 2\n    remaining_amount = initial_amount - amount_spent\n    return remaining_amount\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if b == a: continue\n            for c in range(10):\n                if c in (a, b): continue\n                for d in range(10):\n                    if d in (a, b, c): continue\n                    for e in range(10):\n                        if e in (a, b, c, d): continue\n                        number = int(f'8{a}{b}{c}{d}{e}')\n                        if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                            return number\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99\n    cost_of_cd = 899\n\n    total_cost_individual_songs = cost_per_song * 12\n\n    savings = total_cost_individual_songs - cost_of_cd\n\n    return savings / 100  # Converting pence to pounds\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let the height from which the ball was dropped be h.\n    # After the first bounce, it reached a height of 3h\n    # After the second bounce, it reached a height of 3 * 3h = 9h\n    # After the third bounce, it reached a height of 9h / 2\n    # After the fourth bounce, it reached a height of (9h / 2) / 2\n    # The fourth bounce height is given as 36 meters.\n\n    # Setting up the equation: (9h / 2) / 2 = 36\n    # Simplifying: 9h / 4 = 36\n    # Finally: h = 36 * 4 / 9\n\n    h = (36 * 4) / 9\n\n    return h\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    num_of_trays = 40\n\n    total_eggs = eggs_per_tray * num_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = []\n    for n in range(10, 100):  # Looping through all 2-digit numbers\n        original = str(n)\n        reverse = original[::-1]\n        result = abs(int(original) - int(reverse))\n        results.append(result)\n    \n    unique_results = set(results)  # Find unique results to see patterns\n    return sorted(unique_results)  # Sort unique results to show pattern clearly\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    payment = 20\n    change = payment - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()  # Using a set to avoid duplicates\n\n    # Generate all permutations of the 2 digits\n    for perm in permutations(digits, 2):\n        number = int(''.join(perm))\n        two_digit_numbers.add(number)\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    digits = list(range(10))\n    \n    # To minimize the difference, assign the smallest digits to the most significant places in the smaller number\n    # and the largest digits to the most significant places in the larger number.\n    # Numbers should be 01234 and 98765 or similar with the smallest values in the highest order.\n    num1 = int(''.join(map(str, digits[:5])))\n    num2 = int(''.join(map(str, digits[:4:-1])))\n    \n    return num2 - num1\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    num = 38942\n    remainder = num % 9\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_to_pass = 15  # time in seconds\n    length_of_train = 450  # length in meters\n\n    speed_of_train = length_of_train / time_to_pass  # speed in meters per second\n\n    return speed_of_train\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    return 10*9*8*7*6*5*4*3*2*1\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt_weight = 8\n    water_weight = 32\n    total_weight = salt_weight + water_weight\n    \n    percent_concentration = (salt_weight / total_weight) * 100\n    return percent_concentration\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the number of stickers Peter had originally\n    p = symbols('p')\n    \n    # Sam had 40 stickers more than Peter initially\n    s = p + 40\n    \n    # Sam gave 20% of his stickers to Peter\n    peter_after_sam_gives = p + 0.20 * s\n    sam_after_sam_gives = s - 0.20 * s\n    \n    # Peter gave 25% of his stickers to Sam\n    peter_final = peter_after_sam_gives - 0.25 * peter_after_sam_gives\n    sam_final = sam_after_sam_gives + 0.25 * peter_after_sam_gives\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(sam_final - peter_final, 96)\n\n    # Solve the equation\n    initial_stickers_peter = solve(equation, p)\n\n    return initial_stickers_peter[0]\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_one_pen = pen_cost // pencil_cost\n\n    return pencils_for_one_pen\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    ali_front = 14\n    baba_behind = 10\n    ali_and_baba = 2\n\n    total_people = ali_front + ali_and_baba + baba_behind\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to all the other friends\n    cards_sent_per_person = friends - 1\n    # Total cards sent is each person's cards times the number of friends\n    total_cards_sent = cards_sent_per_person * friends\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    return (18 - 17) + (16 - 15) + (14 - 13)\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for number in range(1, 829):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    \n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chloe, david, emily = symbols('chloe david emily')\n    \n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n    \n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    first_3_days = 9 * 3\n    next_2_days = 15 * 2\n    last_2_days = 10 * 2\n\n    total_days = 3 + 2 + 2\n    total_cookies = first_3_days + next_2_days + last_2_days\n\n    average_cookies_per_day = total_cookies / total_days\n\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's third law, the force exerted by the table on the book (normal force)\n    # is equal in magnitude and opposite in direction to the force of the book's weight (gravitational force).\n    # Since the book is at rest, these forces are balanced, so the magnitude of the force exerted by the table is 20N.\n    force_magnitude = 20\n    return force_magnitude\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(y)"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Maximum number of balls taken without getting 6 of the same type\n    # We add the maximum number before getting 6 of a kind for 2 kinds of balls\n    # 5 footballs + 5 basketballs + 5 volleyballs = 15\n    \n    # Next ball must be the 6th of one kind\n    balls_to_take = 5 + 5 + 5 + 1\n\n    return balls_to_take\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_per_cake = 36 / 6\n    total_time = time_per_cake * 10\n    return total_time\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    meal_cost = 40\n    tip = meal_cost * 0.15\n    tax = meal_cost * 0.08\n    total_cost = meal_cost + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of students\n    x = symbols('x')\n\n    # if he gives 13 stickers to each pupil, he will have an excess of 190 stickers.\n    equation1 = Eq(13*x + 190, 17*x + 50)\n\n    # solve the equation to find the number of students\n    num_students = solve(equation1, x)[0]\n\n    # number of stickers Mr. Ya has is when he gives 13 stickers to each plus the excess\n    num_stickers = 13*num_students + 190\n\n    return num_stickers\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Given values\n    initial_velocity = 5  # m/s\n    angle = 45  # degrees\n    height = 30  # meters\n    \n    # Converting the angle from degrees to radians\n    angle_rad = math.radians(angle)\n    \n    # Resolving the initial velocity into its horizontal and vertical components\n    v_horizontal = initial_velocity * math.cos(angle_rad)\n    v_vertical_initial = initial_velocity * math.sin(angle_rad)\n    \n    # Calculating the time taken for the arrow to reach the ground\n    # Using the formula: final_vertical_velocity^2 = initial_vertical_velocity^2 + 2 * g * height\n    # and assuming the final vertical velocity is 0 (when it just reaches the ground), we solve for time 't'\n    g = 9.81  # Acceleration due to gravity in m/s^2\n    t = math.sqrt((2 * height) / g)\n    \n    # The horizontal velocity remains constant as there is no horizontal acceleration,\n    # while the vertical component of the velocity increases due to gravity.\n    # So, at the point of impact with the ground, the vertical velocity would be:\n    v_vertical_final = v_vertical_initial + g * t\n    \n    # Finally, we find the resultant velocity of the two components using the Pythagorean theorem\n    final_velocity = math.sqrt(v_horizontal**2 + v_vertical_final**2)\n    \n    return final_velocity\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # If each child gets at least one orange, we have 13 - 3 = 10 oranges left to distribute.\n    # We need to calculate the combinations with repetition for 10 oranges and 3 - 1 = 2 separators.\n    # This is equal to choosing 2 separators from 10 + 2 = 12 positions.\n\n    total_ways = comb(10 + 2, 2)\n    \n    return total_ways\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n\n    total_water = initial_water + jug_capacity * jugs_added\n\n    return total_water\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    for num in range(10**(20//9), 10**19):\n        if sum(int(digit) for digit in str(num)) == 20 and num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Amount of work Candy can do in a day\n    candy_work_per_day = 1 / 20\n    # Amount of work David can do in a day\n    david_work_per_day = 1 / 25\n    # Total work done by Candy in 12 days\n    total_candy_work = candy_work_per_day * 12\n\n    # Let d be the number of days David takes off\n    # Since the job is finished by the end of the 12th day, we need to solve for d\n    # Total work done by David when he works (12 - d) days\n    # total_candy_work + david_work_per_day * (12 - d) = 1 (complete job)\n\n    from sympy import symbols, Eq, solve\n    d = symbols('d')\n    equation = Eq(total_candy_work + david_work_per_day * (12 - d), 1)\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    # constants\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h = 5.0  # height in meters\n\n    # using the equation v^2 = u^2 + 2gh (where u=0, since the ball is gently pushed)\n    v = sqrt(2 * g * h)\n\n    return v\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 140000\n    tax_paid = 15100\n    tax_first_50000 = 0.05 * 50000\n    tax_rest = 0.08 + (T / 100)\n\n    equation = Eq(tax_first_50000 + tax_rest * (income - 50000), tax_paid)\n\n    result = solve(equation, T)\n\n    return result[0]\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    for S in range(10):\n        for A in range(10):\n            if A == S:\n                continue\n            for M in range(10):\n                if M in [S, A]:\n                    continue\n                for O in range(10):\n                    if O in [S, A, M]:\n                        continue\n                    for G in range(10):\n                        if G in [S, A, M, O]:\n                            continue\n                        SASMO = 10000 * S + 1010 * A + 100 * M + O\n                        OGAMS = 10000 * O + 1000 * G + 100 * A + 10 * M + S\n                        if SASMO * 4 == OGAMS:\n                            return SASMO\n    return None\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2\n    drink_options = 3\n    dessert_options = 4\n\n    total_combinations = food_options * drink_options * dessert_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    result = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return result\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of fruits\n    x = symbols('x')\n\n    # Number of apples and pears initially\n    apples_initial = (4/5) * x\n    pears_initial = x - apples_initial\n\n    # Number of fruits removed\n    fruits_removed = (3/4) * x\n\n    # Number of apples and pears left\n    apples_left = (1/8) * apples_initial\n    pears_left = 30\n\n    # Number of apples removed\n    apples_removed = apples_initial - apples_left\n\n    # Number of pears removed\n    pears_removed = fruits_removed - apples_removed\n\n    # Equation based on the number of pears\n    equation = Eq(pears_removed, pears_initial - pears_left)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    transfer_from_A_to_B = equal_volume - 28\n\n    return transfer_from_A_to_B\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, horses, cows, elephants = symbols('pigs horses cows elephants')\n\n    equation1 = Eq(elephants, 5 / 2 * cows)\n    equation2 = Eq(cows, 3 / 4 * horses)\n    equation3 = Eq(horses, 5 / 3 * pigs)\n  \n    solutions = solve((equation1, equation2, equation3), (pigs, horses, cows, elephants))\n\n    # Solving for the number of pigs that weigh the same as 8 elephants\n    pigs_per_elephant = solutions[pigs] / solutions[elephants]\n    pigs_for_8_elephants = 8 / pigs_per_elephant\n\n    return pigs_for_8_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    principal = 2000\n    final_amount = 2519.42\n    years = 3\n\n    interest_rate = ((final_amount / principal) ** (1 / years)) - 1\n    return interest_rate\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2*10 + 4*2 + 8*0.5\n    change_received = 0.40\n    total_cost = total_paid - change_received\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mangoes, lychees = symbols('mangoes lychees')\n\n    # Equation representing the total cost\n    equation1 = Eq(24 * mangoes + 20 * lychees, 1160)\n    # Equation representing the relationship between the cost of boxes\n    equation2 = Eq(lychees, 2 * mangoes - 6)\n\n    solutions = solve((equation1, equation2), (mangoes, lychees))\n\n    return solutions[lychees]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    ans = 0.6 * (2/5) * 75\n    return ans\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 0.18\n    sales_tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    sales_tax = bill * sales_tax_percentage\n    total_cost = bill + tip + sales_tax\n\n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # Total ways to arrange 6 singing and 4 dancing performances without restriction\n    total_ways = factorial(6 + 4) // (factorial(6) * factorial(4))\n    \n    # Ways in which 2 dancing performances can be next to each other - unacceptable cases\n    # There are 5 such pairs when arranged in a line, and for each pair, we can treat the pair as a single unit\n    # Thus, we have 5 dancing units and 6 singing performances\n    unacceptable_ways = 5 * (factorial(5 + 6) // (factorial(5) * factorial(6)))\n    \n    # Subtract unacceptable arrangements from total ways\n    acceptable_ways = total_ways - unacceptable_ways\n    \n    return acceptable_ways\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_of_5_boxes = 350\n    weight_per_box = total_weight_of_5_boxes / 5\n    total_weight_of_3_boxes = weight_per_box * 3\n    return total_weight_of_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    comics_factorial = factorial(4)\n    fictions_factorial = factorial(6)\n    total_blocks_factorial = factorial(2)\n    \n    ans = comics_factorial * fictions_factorial * total_blocks_factorial\n    return ans\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = (2.4 * 7) - (6.8 - (7 / 10))\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let's denote the number of correct answers for Dora as c\n    for c in range(11):  # Dora can only answer between 0 and 10 questions correctly\n        # Dora's total points\n        dora_points = c * 10 - (10 - c) * 5\n        # Justin's total points\n        justin_points = dora_points + 15\n        # Together\n        if dora_points + justin_points == 155:\n            return c\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Average number of candies sold by each group in Class A\n    avg_A = 12\n    \n    # Average number of candies sold by each group in Class A and Class B combined\n    avg_total = 8\n    \n    # Total number of groups in Class A and Class B\n    groups_total = 3 + 4  # 3 in Class A, 4 in Class B\n    \n    # Total candies sold by groups in Class A and Class B combined\n    total_candies = avg_total * groups_total\n    \n    # Total candies sold by groups in Class A\n    total_candies_A = avg_A * 3\n    \n    # Total candies sold by groups in Class B\n    total_candies_B = total_candies - total_candies_A\n    \n    # Average number of candies sold by each group in Class B\n    avg_B = total_candies_B / 4\n    \n    return avg_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Lee's rate be L and Nancy's rate be N. The rates are in jobs per hour.\n    L, N = symbols('L N')\n\n    # Lee and Nancy together finish the job in 10 hours\n    equation1 = Eq(1, 10 * (L + N))\n\n    # Lee works for 6 hours, and Nancy works for 20 hours to finish the job\n    equation2 = Eq(1, 6 * L + 20 * N)\n\n    # Solving the system of equations for L and N\n    solutions = solve((equation1, equation2), (L, N))\n\n    # The time it takes for Nancy to finish the job by herself is the inverse of her rate\n    time_for_nancy = 1 / solutions[N]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    remaining_string_length = total_string_length - used_string_length\n    number_of_pieces = 10\n\n    length_of_each_piece = remaining_string_length / number_of_pieces\n\n    return length_of_each_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)  # Reverse the second action\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)  # Reverse the first action\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    ans = 0.45 * 80\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    num_flavours = 7\n    num_doughnuts = 2\n    return comb(num_flavours, num_doughnuts)\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    # Find Greatest Common Divisor (GCD) for first two numbers\n    gcd_first_two = gcd(6, 9)\n    \n    # Find GCD of the third number with the result of the first two\n    greatest_common_factor = gcd(gcd_first_two, 18)\n    \n    return greatest_common_factor\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = symbols('total_students')\n    \n    # 1/4 of the students and additional 3 boys like badminton\n    badminton_students = (1/4)*total_students + 3\n    \n    # 1/3 of the remaining students less 3 like table tennis\n    remaining_students = total_students - badminton_students\n    table_tennis_students = (1/3)*remaining_students - 3\n    \n    # The rest of the 25 students like football\n    football_students = Eq(remaining_students - table_tennis_students, 25)\n    \n    solutions = solve((football_students), (total_students))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Let x be the number of red balls added\n    # total red balls will be 5 + x\n    # total green balls is 10\n    # total balls will be 15 + x\n    # we want the probability of getting a green ball to be 1/3\n    # P(green) = number of green balls / total balls\n    # 10 / (15 + x) = 1/3\n    # Solving for x gives us x = 5\n    \n    # Now let's solve it using Python\n    x = 0  # Start with no red balls added\n    while (10 / (15 + x)) != 1/3:\n        x += 1  # Increment the number of red balls until the condition is satisfied\n    \n    return x\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    big_square_side = 6\n    small_square_side = 3\n\n    num_small_squares = (big_square_side // small_square_side) ** 2\n\n    return num_small_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    metres = 70.24\n    centimetres_per_metre = 100\n    centimetres = metres * centimetres_per_metre\n    return centimetres\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for ans in range(10, 100):\n        if ans % 3 == 0 and ans % 7 == 0:\n            return ans\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spend_amount = 5  # Avril spends 5p\n    one_quarter = 1 / 4  # One-quarter\n    # If 5p is one-quarter, then the full amount is 4 times 5p\n    total_amount = spend_amount / one_quarter\n    return total_amount\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for each type of chocolate\n    white, milk, dark = symbols('white milk dark')\n\n    # Set up the equations based on the problem statement\n    ratio_eq = Eq(white / 3, milk / 7)\n    ratio_eq = Eq(ratio_eq.rhs, dark / 5)  # This ensures the proportionality of all three types\n    dark_white_diff_eq = Eq(dark, white + 8)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, dark_white_diff_eq), (white, milk, dark))\n\n    # Return the number of milk chocolates\n    return solutions[milk]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    ones_32_power_33 = (32 ** 33) % 10\n    ones_22_power_29 = (22 ** 29) % 10\n    result = (ones_32_power_33 - ones_22_power_29) % 10\n    return result\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    digit_counts = {6: 0}\n    page_number = 0\n    \n    # Increment page numbers until we have seen the digit 6 exactly 18 times\n    while digit_counts[6] < 18:\n        page_number += 1\n        for digit in str(page_number):\n            if int(digit) == 6:\n                digit_counts[6] += 1\n                if digit_counts[6] == 18:\n                    return page_number\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for red in range(1, 7):\n        for green in range(1, 7):\n            for blue in range(1, 7):\n                if red != green and green != blue and red != blue:\n                    if red + green + blue == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    types_of_fruits = 2\n    types_of_vegetables = 3\n\n    combinations = types_of_fruits * types_of_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Given is the proportion a:b = c:d, where a is the missing number, b = 81, c = 4, and d = 9.\n    # To find a, we solve the proportion a/81 = 4/9.\n    # Cross multiplying gives us 9a = 81 * 4.\n    \n    a = (81 * 4) / 9\n\n    return a\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the amounts of stickers Sam and Peter initially have\n    sam, peter = symbols('sam peter')\n    \n    # Equation representing the relationship between Sam's and Peter's stickers\n    equation1 = Eq(sam, peter + 40)\n    \n    # Equation after Sam gives 20% of his stickers to Peter\n    sam_gives = sam - 0.20 * sam\n    peter_receives = peter + 0.20 * sam\n    \n    # Equation after Peter gives 25% of his new sticker count to Sam\n    sam_receives = sam_gives + 0.25 * peter_receives\n    peter_gives = peter_receives - 0.25 * peter_receives\n    \n    # Final equation representing the difference after all transactions\n    equation2 = Eq(sam_receives - peter_gives, 96)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # Returning the initial amount of stickers Peter has\n    return solutions[peter]\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    fall_down = 3\n    jumps = 0\n    height_after_jumps = 0\n    \n    while height_after_jumps < total_height:\n        jumps += 1\n        height_after_jumps += jump_up\n        if jumps % 2 == 0:\n            height_after_jumps -= fall_down\n        \n        if height_after_jumps >= total_height:\n            break\n    \n    return jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum([(2 * i) ** 3 / (2 * i * (2 * i + 1) * (2 * i + 2)) for i in range(1, 2013)]) + 1/4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    ans = None\n    for i in range(1, 100):\n        if i < 100 and i % 16 == 0 and (i + 1) % 5 == 0:\n            root = int(i ** 0.5)\n            if root * root == i:\n                ans = i\n                break\n    return ans\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    sequence = [15, 21, 27, 33, 39]\n    common_difference = sequence[1] - sequence[0]\n    next_term = sequence[-1] + common_difference\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_mark = 4\n    incorrect_mark = -2\n\n    # Let x be the number of correct answers\n    x = symbols('x')\n    # The number of incorrect answers is total_questions - x\n    \n    # Equation for the total score\n    equation = Eq(correct_mark * x + incorrect_mark * (total_questions - x), 152)\n    \n    # Solve the equation for x\n    correct_answers = solve(equation, x)\n    \n    return correct_answers[0]\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    people = 24\n    sausages = 16\n    # Each person should get an equal part from each sausage\n    # to minimize cuts, we first find the greatest common divisor\n    from math import gcd\n    # Calculate the greatest common divisor\n    gcd_value = gcd(sausages, people)\n    # Calculate the number of cuts required\n    cuts = sausages - gcd_value\n    return cuts\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_letters = len(\"RAINBOW\")\n    total_vowels = len(\"AI\")\n    total_consonants = total_letters - total_vowels\n    \n    consonant_permutations = factorial(total_consonants+1)\n    vowel_permutations = factorial(total_vowels)\n    \n    total_arrangements = factorial(total_letters)\n    \n    arrangements_with_vowels_together = consonant_permutations * vowel_permutations\n    \n    ans = total_arrangements - arrangements_with_vowels_together\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define variables for Wendy's and Vivien's current ages\n    wendy, vivien = symbols('wendy vivien')\n\n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n\n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    # Solve the system of equations\n    age_values = solve((equation1, equation2), (wendy, vivien))\n\n    # Wendy's age in 5 years = Wendy's current age + 5\n    wendy_future_age = age_values[wendy] + 5\n\n    return wendy_future_age\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of water in Container A as 'a' and Container B as 'b'.\n    a, b = symbols('a b')\n\n    # Container A contained 350 mL more water than Container B at first.\n    equation1 = Eq(a, b + 350)\n\n    # After 500 mL of water was spilled out of Container A,\n    # Container B had twice as much water as Container A.\n    equation2 = Eq(b, 2 * (a - 500))\n\n    # We solve the system of equations.\n    solutions = solve((equation1, equation2), (a, b))\n\n    # We specifically want the amount of water in Container A at first.\n    return solutions[a]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n    \n    num1 = 39\n    num2 = 51\n    num3 = 147\n    \n    diff21 = abs(num2 - num1)  # Difference between 51 and 39\n    diff32 = abs(num3 - num2)  # Difference between 147 and 51\n    diff31 = abs(num3 - num1)  # Difference between 147 and 39\n    \n    # Greatest common divisor of the differences will give us the required integer\n    ans = gcd(gcd(diff21, diff32), diff31)\n    \n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    lovelle_interactions = 5 * 3  # Lovelle said 3 sentences to each of the 5 team members\n    others_interactions = 12 * 3   # Each of the 12 members who did not speak to Lovelle said 3 sentences to each other\n    \n    # Every interaction involves 2 people, so we must divide the sum by 2 to avoid double-counting\n    total_interactions = (lovelle_interactions + others_interactions) // 2\n    \n    # Since every member interacts with every other member, this can be represented as n*(n-1)/2\n    # n*(n-1)/2 = total_interactions\n    # We solve for n\n    n = 1\n    while n * (n - 1) / 2 < total_interactions:\n        n += 1\n    \n    # n is the total number of team members including Lovelle\n    return n\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    digits = 0\n    for i in range(1, 326):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\n\ndef solution():\n    total_perms = factorial(9) // (factorial(3) * factorial(3) * factorial(2) * factorial(1))\n    forbidden_perms = factorial(8) // (factorial(3) * factorial(3) * factorial(2))  # consider all T's as one\n\n    # For each forbidden arrangement of T's, there are 'factorial(3) - 1' arrangements where the T's are together\n    forbidden_perms *= factorial(3) - 1\n\n    count = total_perms - forbidden_perms\n\n    return count\n\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_sales = 2140\n    second_week_sales = first_week_sales - 320\n    third_week_sales = second_week_sales - 210\n\n    total_sales = first_week_sales + second_week_sales + third_week_sales\n\n    return total_sales\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_rate_per_hour = 50\n\n    hours_needed = total_pieces / average_rate_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n\n    equation1 = Eq(sarah, mark + 20)\n    equation2 = Eq(sarah + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    return (2018 - 20 + 18) // 8\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    attempts = 0\n    # The first chest can be opened with any of the 9 keys: 9 attempts\n    attempts += 9\n    # The second chest can now be opened with any of the remaining 8 keys: 8 attempts\n    attempts += 8\n    # The third chest can be opened with any of the remaining 7 keys: 7 attempts\n    attempts += 7\n    # The last chest will require only one attempt because there's only one key left\n    attempts += 1\n\n    return attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    # Start with the smallest number of fruit gums that can be evenly divided in four\n    # equal parts (since an equal amount was eaten in each of the next four lessons).\n    # Also, there must be at least 1 fruit gum to be shared with friends at break.\n    # Therefore, start with 4 (for the four lessons) and add 1 for the one shared, the result is 5.\n    # We then multiply by 3 (to counter the division by 1/3) and add 2 (the eaten ones) to find the smallest packet size.\n    packet_size = 5\n    while True:\n        # Calculate the remaining after eating 2\n        remaining_after_secret = packet_size - 2\n        # Calculate the amount shared with friends\n        shared_with_friends = remaining_after_secret // 3\n        # Check if it is perfectly divisible by 3 (one third shared)\n        if remaining_after_secret % 3 == 0:\n            # The remaining gums after sharing\n            remaining_after_sharing = remaining_after_secret - shared_with_friends\n            # If the remaining can be evenly divided over the next four lessons, we have found our answer\n            if remaining_after_sharing % 4 == 0:\n                return packet_size\n        # Increase the packet size by the smallest number that keeps the division by 4 intact\n        packet_size += 12\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Observing the pattern, the sequence changes like +500, -200, +500, ?...\n    difference_sequence = [500, -200, 500]\n    current_number = 3745\n    next_difference_index = 3 % len(difference_sequence)\n    next_number = current_number + difference_sequence[next_difference_index]\n    \n    return next_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    h_value = solve(equation, h)\n    \n    return h_value[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    result = 15 / (1/7)\n    return result\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    total_mushrooms = 40\n    more_in_first_hour = 26\n\n    # Let x be the mushrooms gathered in the first hour\n    # Then the mushrooms gathered in the second hour are x + 26\n    # Total is x + (x + 26) = 40\n    x = (total_mushrooms - more_in_first_hour) / 2\n\n    # Mushrooms gathered in the second hour\n    second_hour_mushrooms = x + more_in_first_hour\n\n    return int(second_hour_mushrooms)\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    original_price = 20000\n    depreciation_rate = 0.10\n    years = 6\n\n    car_value_after_years = original_price * ((1 - depreciation_rate) ** years)\n\n    return car_value_after_years\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknowns\n    women, men = symbols('women men')\n\n    # Create equations according to the problem statement\n    equation1 = Eq(women, 4 * men)  # 4 times as many women as men\n    equation2 = Eq(2 * women + 5 * men, 182)  # Total mini cupcakes eaten\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (women, men))\n\n    # Answer: Number of women at the dessert party\n    return solutions[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    diameter = 1.85  # diameter of one coin in cm\n    num_coins = 11   # number of coins\n\n    # Since the coins touch one another in a row, the total length is the diameter\n    # of one coin times the number of coins, minus the diameter of one coin because\n    # the first coin does not contribute to the length from both sides.\n    total_length = diameter * (num_coins - 1) + diameter\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    common_difference = 8 - 5\n    num_of_terms = 14\n\n    nth_term = first_term + (num_of_terms - 1) * common_difference\n    sum_of_sequence = (num_of_terms * (first_term + nth_term)) / 2\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number_to_round = 5345\n    rounded_number = round(number_to_round, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    # Simplify the fraction 3/12 to find the equivalent fraction\n    numerator = 3\n    denominator = 12\n    proportion_denominator = 20\n\n    # Finding the corresponding numerator for the equivalent fraction with denominator 20\n    equivalent_numerator = (numerator * proportion_denominator) / denominator\n\n    return int(equivalent_numerator)\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 / (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    num_people = 8\n    # Subtract 1 from num_people because the circle eliminates the significance of\n    # the starting point, effectively reducing one arrangement possibility.\n    arrangements = factorial(num_people - 1)\n    return arrangements\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    temp_difference = night_temp - morning_temp\n\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # The last digit of a number only depends on the last digits of the factors\n    # Compute the last digit of 2^2017\n    last_digit_2 = (2 ** 2017) % 10\n    \n    # Compute the last digit of 3^2017\n    last_digit_3 = (3 ** 2017) % 10\n    \n    # Multiply these last digits to get the last digit of the product\n    ans = (last_digit_2 * last_digit_3) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ants_initial = symbols('ants_initial')\n\n    ants_after_sweep = ants_initial * (1 - 3/4)\n    ants_after_run = ants_after_sweep * (1 - 2/5)\n    ants_final = ants_after_run + 185\n    equation = Eq(ants_final, 2 * ants_initial)\n\n    ants_initial_value = solve(equation, ants_initial)\n\n    return ants_initial_value[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    difference_in_age_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    \n    return difference_in_age_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    # Extract common factor 0.4 = 4/10\n    common_factor = 0.4\n    common_factor_rewritten = 4 / 10\n    \n    # Calculate the multiplication with the common factor extracted\n    ans = 25 * 123 * common_factor_rewritten\n    \n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_price = 13\n    books_day1 = 89\n    books_day2 = 11\n    total_cost = (books_day1 + books_day2) * book_price\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the first term and d be the common difference\n    a, d = symbols('a d')\n\n    # The sum of the first four terms (S4) is a + (a + d) + (a + 2d) + (a + 3d)\n    sum_first_four = 4*a + 6*d\n\n    # The sum of the last four terms (S8 - S4) is (a + 7d) + (a + 6d) + (a + 5d) + (a + 4d)\n    # which is equal to sum_first_four + 32\n    sum_last_four = 4*a + 22*d\n\n    # Creating the equation sum_last_four - sum_first_four = 32\n    equation = Eq(sum_last_four - sum_first_four, 32)\n\n    # Solving the equation for d (common difference)\n    solution = solve(equation, d)\n\n    return solution[d]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    next_index = 8  # As we have 7 numbers in the sequence, the next index is 8\n    next_number = next_index ** 2  # Since it's a square number sequence\n\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    total_friends = 42\n    pens_per_friend = 23\n\n    total_pens = total_friends * pens_per_friend\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def get_next_number(current):\n        next_number = current * 2 + 4\n        if next_number >= 100:\n            next_number %= 100\n        return next_number\n    \n    current_number = 1\n    for _ in range(2021):  # Since we already have the first number, we do this 2021 more times.\n        current_number = get_next_number(current_number)\n    \n    return current_number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    # Calculate least common multiple (LCM) of the two frequencies\n    from math import lcm\n    \n    red_flash_rate = 4  # Red light flashes 4 times a minute\n    green_flash_rate = 6  # Green light flashes 6 times a minute\n    \n    # The LCM gives us how often they flash together in a minute\n    flashes_per_minute = lcm(red_flash_rate, green_flash_rate)\n    \n    # Calculate the number of times they both flash together in an hour\n    flashes_per_hour = 60 // flashes_per_minute\n    \n    # Include the first and the last time\n    return flashes_per_hour + 1\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 14): # Since 3a + 7b = 41 and both a & b are prime, a must be less than 14.\n        if isprime(a):\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    start = 4.5\n    end = 10.3\n    mid_point = (start + end) / 2\n    return mid_point\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    profit_percentage_initial = 30\n    selling_price = 6500\n    cost_price = selling_price / (1 + profit_percentage_initial / 100)\n    desired_profit = 5000\n\n    new_selling_price = cost_price + desired_profit\n    profit_percentage_new = ((new_selling_price - cost_price) / cost_price) * 100\n\n    return profit_percentage_new\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n\n    sol = solve(equation, n)\n\n    return sol[1]  # Return the positive solution\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume_per_bottle = 120 / (1 - 3/5)  # total volume = juice / (1 - fraction of water)\n    water_volume_per_bottle = total_volume_per_bottle * (3/5)  # water volume = total volume * fraction of water\n    water_volume_for_six_bottles = water_volume_per_bottle * 6  # total water needed for 6 bottles\n    return water_volume_for_six_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_g = 1000  # 1 kg = 1000 g\n    n = 8.2 * kg_to_g\n    return int(n)\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    word = 'EARTH'\n    unique_letters_count = len(set(word))\n  \n    if unique_letters_count == len(word): # all letters are unique\n        ans = factorial(len(word))\n    else:\n        ans = None  # If the word doesn't have all unique letters\n\n    return ans\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    time_walked = 10\n    simon_run_speed = simon_speed * 2\n\n    distance_walked_by_simon = simon_speed * time_walked\n    distance_walked_by_friend = friend_speed * time_walked\n\n    time_for_simon_to_return = distance_walked_by_simon / simon_run_speed\n\n    distance_friend_walked_while_simon_returns = friend_speed * time_for_simon_to_return\n\n    total_distance_between_them = distance_walked_by_friend + distance_friend_walked_while_simon_returns\n\n    return total_distance_between_them\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_bells_stars_redballs = factorial(7) // (factorial(2) * factorial(2) * factorial(2))\n    return total_bells_stars_redballs\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Calculate the shortest time for all 4 of them to cross the bridge.\n    # Strategy:\n    # 1. Eddie(1min) and Jack(2min) cross first, total 2 min. Eddie returns with the flashlight, total 3 min.\n    # 2. Rose(5min) and Mary(10min) cross, total 13 min. Jack returns with the flashlight, total 15 min.\n    # 3. Eddie(1min) and Jack(2min) cross again, total 17 min.\n    # This strategy ensures that the longest times are paired and the fastest person makes the return trips.\n\n    # Initialize the total time.\n    total_time = 0\n\n    # First step: Eddie and Jack cross, Eddie returns.\n    total_time += 2  # Eddie and Jack cross\n    total_time += 1  # Eddie returns\n\n    # Second step: Rose and Mary cross, Jack returns.\n    total_time += 10  # Rose and Mary cross\n    total_time += 2  # Jack returns\n\n    # Third step: Eddie and Jack cross again.\n    total_time += 2  # Eddie and Jack cross again\n\n    return total_time\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    # Total water in liters initially in the dispenser\n    total_water = 5\n    \n    # Size of the other container is 0.25 times the size of the water dispenser\n    container_size = 0.25 * total_water\n    \n    # Water used to fill the other container in liters\n    water_for_container = container_size\n    \n    # Volume of 14 cups of water, each 150ml, in liters\n    # 1 liter = 1000ml, so 150ml = 0.15 liters\n    water_for_cups = 14 * 0.15  # in liters\n    \n    # Water left in the dispenser\n    water_left = total_water - water_for_container - water_for_cups\n\n    return water_left\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"2{digit1}{digit2}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 100\n    while n % 7 != 0:\n        n -= 1\n    return n - 7\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # minutes\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n    return ginny_time\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        a, b, c = perm\n        if a != 0 and c != 0:\n            # Assuming ~-- represents the multiplication of two numbers\n            # Thus, we have ~ as 'a', - as 'b' and the second - as 'c'\n            # The multiplication of two 1-digit numbers should give a result of ab * c = abc, which is a 3-digit number\n            number1 = 10 * a + b  # Constructing the first two-digit number\n            number2 = c  # The second number will be a 1-digit number\n            product = number1 * number2  # Multiplying the two numbers\n            str_product = str(product)\n            \n            # Check if the product is a 3-digit number and all digits are unique and used in the multiplication\n            if len(str_product) == 3:\n                d, e, f = map(int, str_product)\n                if len(set([a, b, c, d, e, f])) == 6 and 0 not in [d, e, f]:  # All digits must be unique\n                    return product\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages_per_day_original = symbols('pages_per_day_original')\n    total_pages = 8 * pages_per_day_original\n    equation = Eq(total_pages, (8 - 2) * (pages_per_day_original + 2))\n\n    solved_pages_per_day_original = solve(equation, pages_per_day_original)\n\n    return total_pages.subs(pages_per_day_original, solved_pages_per_day_original[0])\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    pip_rate = 5 / 20  # loaves per minute\n    bud_rate = 3 / 15  # loaves per minute\n\n    total_time = 40  # minutes\n    total_loaves = (pip_rate + bud_rate) * total_time\n\n    return int(total_loaves)\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    increase_rate = 0.1\n    decrease_rate = 0.1\n    last_year_value = 11000\n    original_value = last_year_value / (1 + increase_rate)\n    this_year_value = original_value * (1 - decrease_rate)\n    profit_or_loss = this_year_value - original_value\n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # In the worst case scenario, Yohan takes all red and black socks before getting a white pair.\n    # Since he needs a pair, he could take one of each of the other colors without getting a white pair.\n    max_red_socks = 10\n    max_black_socks = 10\n    # Now he takes one white sock, still not a pair.\n    one_white_sock = 1\n    # The next sock he takes must be white to make a white pair.\n    white_pair_sock = 1\n\n    # Total socks taken in the worst case to get a pair of white socks:\n    total_socks = max_red_socks + max_black_socks + one_white_sock + white_pair_sock\n    return total_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expr = 12*a / 4 + 2*a * 5\n    simplified_expr = simplify(expr)\n    return simplified_expr\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    return (6 * 1 + 5 * 1 - 1) * 'd'\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    equation = Eq(cookies * (1 - 3/8 - 1/6), 33)\n\n    initial_cookies = solve(equation, cookies)\n\n    return initial_cookies[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    # Create the sequence of numbers according to the pattern provided\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * (i + 2))\n\n    # Find the median of the sequence\n    n = len(sequence)\n    sequence.sort()\n\n    if n % 2 == 1:\n        # Odd number of elements, median is the middle element\n        median = sequence[n // 2]\n    else:\n        # Even number of elements, median is the average of the two middle elements\n        median = (sequence[(n // 2) - 1] + sequence[n // 2]) / 2\n    \n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jemmas_number = symbols('jemmas_number')\n\n    equation = Eq((jemmas_number + 3) * 5, 35)\n\n    solution = solve(equation, jemmas_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # The year is arbitrary since we are just counting days of the week\n    end_date = datetime(2020, 6, 7)\n    day_count = (end_date - start_date).days + 1  # Including the end date\n\n    sunday_count = 0\n    for day in range(day_count):\n        current_day = start_date + timedelta(days=day)\n        if current_day.weekday() == 6:  # In Python, Monday is 0 and Sunday is 6\n            sunday_count += 1\n\n    return sunday_count\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r, w = symbols('r w')  # red and white marbles in the original box\n    r_pip, w_bud = symbols('r_pip w_bud')  # marbles added by Pip and Bud\n\n    # Original ratio of red to white marbles\n    equation1 = Eq(r/w, 3/2)\n\n    # After Pip adds red marbles, the ratio becomes 5:3\n    equation2 = Eq((r + r_pip)/w, 5/3)\n\n    # After Bud adds white marbles, the ratio becomes 5:4\n    equation3 = Eq((r + r_pip)/(w + w_bud), 5/4)\n\n    # Bud puts 100 more white marbles than the red marbles put by Pip\n    equation4 = Eq(w_bud, r_pip + 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (r, w, r_pip, w_bud))\n\n    # Return the number of white balls in the box at first\n    return solutions[w]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_capacity = 120\n    bucket_capacity = 8\n    num_buckets = barrel_capacity // bucket_capacity\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for K in range(10):\n        number = int(f\"5{K}27{K}\")\n        if number % 3 == 0 and number % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies and y be the number of brownies initially\n    x, y = symbols('x y')\n\n    # According to the problem, we have two ratios 4:3 and 12:7\n    # 4:3 can be written as x/y = 4/3\n    # when 6 brownies are given away, the new ratio 12:7 can be written as x/(y-6) = 12/7\n\n    # Creating the equations based on the ratios\n    equation1 = Eq(x/y, 4/3)\n    equation2 = Eq(x/(y-6), 12/7)\n\n    # Solving the system of equations for x and y\n    solution = solve((equation1, equation2), (x, y))\n\n    # Summing up the total cookies and brownies\n    total = solution[x] + solution[y]\n\n    return total\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # 4 companies build 900m in 5 days\n    companies = 4\n    expressway_length = 900\n    days = 5\n    \n    # Total work = work rate per company * number of companies * number of days\n    work_per_company_per_day = expressway_length / (companies * days)\n\n    # For 5400m by 6 companies\n    new_companies = 6\n    new_expressway_length = 5400\n\n    # Find the total number of days for 6 companies to build 5400m\n    total_days = new_expressway_length / (work_per_company_per_day * new_companies)\n    \n    return total_days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # First transaction: Sell the horse at $20, buy at $10, profit = $20 - $10\n    profit_first_trans = 20 - 10\n    \n    # Second transaction: Sell the horse at $40, buy at $30, profit = $40 - $30\n    profit_second_trans = 40 - 30\n    \n    # Total profit is the sum of profits from both transactions\n    total_profit = profit_first_trans + profit_second_trans\n\n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n\n    price_per_ticket = adam_spent / adam_tickets\n    claire_tickets = claire_spent / price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    term = 10\n    last_value = 31\n    common_difference = 28 - 25\n\n    first_term = last_value - (term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "from itertools import permutations\n\ndef solution():\n    # All cards\n    cards = range(1, 9) \n    # Maximum card value for player two\n    max_card_player_two = 0\n\n    for combination in permutations(cards, 4):\n        sum_combination = sum(combination)\n        # Check if the combination sums up to 23 for player one\n        if sum_combination == 23:\n            remaining_cards = list(set(cards) - set(combination))\n            # Check the highest card from the remaining cards for player two\n            max_card_in_remaining = max(remaining_cards)\n            max_card_player_two = max(max_card_in_remaining, max_card_player_two)\n\n    return max_card_player_two\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, so 18 individual shoes\n    time_per_shoe = 2  # minutes to clean each shoe\n    \n    # Since there are 2 cobblers, the work is distributed equally between them\n    shoes_per_cobbler = total_shoes / 2\n    \n    # Each cobbler takes 2 minutes to clean each shoe, so the total time for one cobbler to clean half the shoes:\n    time = shoes_per_cobbler * time_per_shoe\n    \n    return time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    # Sum of the squares of the first n natural numbers is n(n + 1)(2n + 1)/6\n    def sum_of_squares(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    ans = sum(sum_of_squares(i) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    # Using the property (a - 1)(a + 1) = a^2 - 1 to simplify the numerator\n    # Since 2019 + 2018 * 2020 = 2019 + 2019 * 2020 - 2020, we can rewrite this as:\n    # numerator = 2019(2020 - 1) - (2020 - 1)\n    # Thus, numerator = (2019 - 1)(2020 - 1)\n    # Which means that numerator = denominator, so the fraction simplifies to 1.\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    score = 168\n    correct_mark = 4\n    wrong_mark = -1\n\n    # Total attempted questions\n    attempted = total_questions - not_attempted\n\n    # Let x be the number of correct answers\n    # The number of wrong answers is then (attempted - x)\n    # Setting up the equation: 4x - (attempted - x) = score\n    # which simplifies to: 4x - attempted + x = score\n    # Then, we have: 5x - attempted = score\n    # Solving for x (number of correct answers):\n    x = (score + attempted) // (correct_mark - wrong_mark)\n\n    return x\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    return comb(6, 2)\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    \n    total_dumplings = luna_dumplings + lucy_dumplings\n    each_should_have = total_dumplings // 2\n    \n    dumplings_to_give = luna_dumplings - each_should_have\n    \n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    \n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        if B == 0:  # The number cannot start with 0\n            continue\n        CBCD = C * 1001 + B * 100 + D * 10\n        CDBC = C * 1010 + D * 100 + B * 10\n        BDEC = B * 1000 + D * 100 + E * 10 + C\n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # find the smallest multiple of pack_lcm that is greater than or equal to 1000\n    num_packs = 1000 // pack_lcm\n    if 1000 % pack_lcm != 0:\n        num_packs += 1\n    \n    return num_packs * pack_lcm\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(9)\n    vowels_together = factorial(7) * factorial(3)\n    ans = total_letters // vowels_together\n    return ans\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_tailor = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_day_per_tailor * number_of_seamstresses * number_of_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Calculate total spendings\n    jan_to_mar = 450 * 3  # January to March\n    apr_to_jul = 350 * 4  # April to July\n    aug_to_oct = 1250     # August to October\n    nov_to_dec = 400 * 2  # November to December\n\n    # Total spending for the year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n\n    # Average spending per month over 12 months\n    average_spent = total_spent / 12\n\n    return average_spent\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    # Calculate total revenue from each type of cake\n    total_carrot_cake_revenue = 4 * 5\n    total_cheesecake_revenue = 1 * 10\n    total_chocolate_cake_revenue = 5 * 12\n\n    # Calculate the total revenue from all cakes\n    total_revenue = total_carrot_cake_revenue + total_cheesecake_revenue + total_chocolate_cake_revenue\n\n    # Calculate the total number of cakes\n    total_cakes = 4 + 1 + 5\n\n    # Calculate the average selling price per cake\n    average_selling_price = total_revenue / total_cakes\n\n    return average_selling_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return round(cost_per_person, 2)\n    \nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    dividend = remainder\n\n    while True:\n        quotient = dividend // remainder\n        if quotient == remainder and dividend % remainder == remainder:\n            break\n        dividend += 1\n\n    return dividend\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve, Rational\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    # cars is four-thirds of the number of bikes\n    equation1 = Eq(cars, Rational(4, 3) * bikes)\n    # The number of bikes is one quarter more than the number of lorries\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    # The total number of cars, bikes and lorries is an even number and is less than 100\n    equation3 = Eq(cars + bikes + lorries % 2, 0) \n    equation4 = Eq(cars + bikes + lorries < 100, True) \n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (cars, bikes, lorries))\n\n    # Filter out the solutions that are not in the domain (<100 and even total)\n    valid_solutions = [(s[cars], s[bikes], s[lorries]) for s in solutions \n                       if s[cars] + s[bikes] + s[lorries] < 100 \n                       and (s[cars] + s[bikes] + s[lorries]) % 2 == 0]\n\n    return valid_solutions[0]\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n\n    # Calculate the depreciation over two years\n    value_after_1st_year = initial_value * (1 - depreciation_rate)\n    value_after_2nd_year = value_after_1st_year * (1 - depreciation_rate)\n\n    return value_after_2nd_year\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    common_difference = 2\n    row_number = 12\n\n    # nth term of an arithmetic progression formula: an = a1 + (n - 1) * d\n    nth_term = first_term + (row_number - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_rate_one_entrance = 25\n    \n    # Calculate the number of visitors that arrive in 16 minutes.\n    visitors_in_16_min = 16 * visitors_per_minute\n    \n    # Calculate the total check-in rate when there are 2 entrances.\n    check_in_rate_two_entrances = 2 * check_in_rate_one_entrance\n    \n    # Calculate the time required for 2 entrances to process all the visitors.\n    time_no_waiting_two_entrances = visitors_in_16_min / check_in_rate_two_entrances\n    \n    return time_no_waiting_two_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 1\n    while True:\n        cube_root = (245 * p) ** (1/3)\n        if cube_root.is_integer():\n            return p\n        p += 1\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    average_pages_per_day = 20\n\n    days_spent_reading = total_pages / average_pages_per_day\n\n    return int(days_spent_reading)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    return (6 ** 2) - (4 ** 2)\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_money = 100\n    book_cost = initial_money * 0.10\n    remaining_money = initial_money - book_cost\n    dvd_cost = remaining_money * 0.20\n    final_money = remaining_money - dvd_cost\n    return final_money\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    # We know that 1/3 is 0.(3) recurring decimal.\n    # Therefore, the first 1000 digits in the decimal part are all 3.\n    sum_of_digits = 3 * 1000\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    day_distance = 5\n    night_distance = 3\n    effective_distance = day_distance - night_distance\n\n    days = 0\n    distance_climbed = 0\n\n    while True:\n        days += 1\n        distance_climbed += day_distance\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_distance\n\n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    subtracted_number = final_number - 12\n    original_number = subtracted_number / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    # Let x be the number of oranges originally and y be the number of lemons.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # Initial condition: ratio of oranges to lemons is 3:5.\n    equation1 = Eq(3*y, 5*x)\n    \n    # After selling 48 oranges: ratio of oranges to lemons is 1:2.\n    equation2 = Eq(2*(x - 48), y)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Number of lemons originally\n    return solutions[y]\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    ans = 8102 - 2018\n    return ans\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # Each student can choose from 1 to 3 types of fruits.\n    # Choices for 1 type of fruit = 3 (apple, pear, cherry)\n    # Choices for 2 types of fruits = 3 choose 2 = 3! / (2! * (3-2)!) = 3\n    # Choices for 3 types of fruits = 1 (apple, pear, cherry together)\n    # Total distinct choices students can make = 3 (for 1 type) + 3 (for 2 types) + 1 (for 3 types)\n    total_choices = 3 + 3 + 1\n    \n    # By the Pigeonhole Principle, to ensure two students choose the same combination,\n    # we need one more student than the number of distinct choices.\n    ans = total_choices + 1\n    \n    return ans\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    bike_price = 80\n    discount = 10 / 100\n    christmas_price = bike_price * (1 - discount)\n    \n    return christmas_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    # Number of choices for each category\n    num_burgers = 2\n    num_sides = 3\n    num_drinks = 5\n\n    # Calculate combinations using the Principle of Multiplication\n    total_combos = num_burgers * num_sides * num_drinks\n\n    return total_combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    # Avril spent 10p which was one quarter of her money\n    # We can represent one-quarter of her money as 1/4\n    # So we can set up an equation where 1/4 of her total money is equal to 10p\n    # Let total_money be the total amount of money Avril had at first\n    # Then we have (1/4) * total_money = 10p\n    # To find total_money we can multiply both sides by 4 to isolate the variable\n    total_money = 10 * 4\n    \n    return total_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Define the number of legs for each animal\n    ducks_legs = 2\n    parrots_legs = 2\n    rabbit_legs = 4\n    \n    # Given legs for each kind of animal already in the house\n    given_legs = (3 * ducks_legs) + (2 * parrots_legs) + (1 * rabbit_legs)\n    \n    # Total legs in the house\n    total_legs = 32\n    \n    # Remaining legs to be accounted for by cats\n    remaining_legs = total_legs - given_legs\n    \n    # Since each cat has 4 legs, divide the remaining legs by 4 to find the number of cats\n    num_cats = remaining_legs // 4\n    \n    return num_cats\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "import math\n\ndef solution():\n    students_class_A = 45\n    students_class_B = 75\n    students_class_C = 210\n\n    gcd_AB = math.gcd(students_class_A, students_class_B)\n    gcd_ABC = math.gcd(gcd_AB, students_class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's declare symbols for Judy's age and her father's age\n    judy_age, father_age = symbols('judy_age father_age')\n    \n    # Equation 1: father_age = judy_age + 33\n    equation1 = Eq(father_age, judy_age + 33)\n    \n    # Equation 2: father_age + judy_age = 63\n    equation2 = Eq(father_age + judy_age, 63)\n    \n    # Let's solve for Judy's age and her father's age\n    ages = solve((equation1, equation2), (judy_age, father_age))\n    \n    # Find the number of years ago when her father's age was four times her age\n    # Let's declare a symbol for the number of years ago (years_ago)\n    years_ago = symbols('years_ago')\n    # Equation for \"years ago\" situation:\n    # (father_age - years_ago) = 4 * (judy_age - years_ago)\n    past_age_eq = Eq(ages[father_age] - years_ago, 4 * (ages[judy_age] - years_ago))\n    \n    # Solve for years_ago\n    result = solve(past_age_eq, (years_ago))\n    \n    return result[0]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    teams = 11\n    matches = comb(teams, 2)\n    return matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two brothers' current ages\n    older_current, younger_current = symbols('older_current younger_current')\n\n    # Create equation based on the problem statement\n    # older_current - younger_current = older_current - 12 (when the older was as old as the younger is now)\n    # older_current + (older_current - younger_current) = 27 (when the younger will be as old as the older is now)\n    equation1 = Eq(older_current - younger_current, older_current - 12)\n    equation2 = Eq(younger_current + (older_current - younger_current), 27)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (older_current, younger_current))\n    \n    # Return the current age of the older brother\n    return solutions[older_current]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    def lcm(x, y):\n        from math import gcd\n        return x * y // gcd(x, y)\n\n    multiples = [6, 8, 9, 15]\n    lcm_val = lcm(lcm(multiples[0], multiples[1]), lcm(multiples[2], multiples[3]))\n\n    min_markers = (1000 // lcm_val) * lcm_val\n    if min_markers < 1000:\n        min_markers += lcm_val\n\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rooms, students = symbols('rooms students')\n    \n    # Equation for 4 people per room, 40 students don't have dormitories\n    equation1 = Eq(4 * rooms + 40, students)\n    \n    # Equation for 6 people per room, 24 beds are vacated\n    equation2 = Eq(6 * rooms - 24, students)\n    \n    # Solve the system of equations for the number of rooms\n    solutions = solve((equation1, equation2), (rooms, students))\n    \n    return solutions[rooms]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n    \n    first_number = tenth_number - common_difference * (10 - 1)\n    nth_number = first_number + common_difference * (102 - 1)\n    \n    return nth_number\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    sweets_eaten = 18\n    fraction_eaten = 3/5\n    total_sweets = sweets_eaten / fraction_eaten\n    sweets_left_over = total_sweets - sweets_eaten\n    \n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    age_difference = 9 - 5\n    john_age_when_jane_15 = 15 - age_difference\n    return john_age_when_jane_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for i in range(10, 21):\n        if i % 4 == 0 and 36 % i == 0:\n            return i\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    for i in range(100):\n        if (13 - i) ** 2 == 25:\n            return i\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    cp = symbols('cp')\n    \n    # Marked price is 120% of cost price\n    mp = 1.20 * cp  \n    \n    # Selling price is 80% of marked price\n    sp = 0.80 * mp \n    \n    # Loss is given as $40, so cost price - selling price = $40\n    loss_eq = Eq(cp - sp, 40)\n    \n    # Use sympy's solve function to solve for cost price (cp)\n    cost_price = solve(loss_eq, cp)[0]\n    \n    return cost_price\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    ans = ((7 + 3) * 11) - (7 + (3 * 11))\n    return ans\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Let 1/x be the part of the tank filled by Tap Y alone in one minute.\n    # Since both taps together fill the tank in 6 minutes, their combined rate is 1/6 of the tank per minute.\n\n    x_rate = 1 / 10  # Tap X fills the tank at the rate of 1/10 of the tank per minute\n    combined_rate = 1 / 6  # Both taps fill the tank at the combined rate of 1/6 of the tank per minute\n\n    # Calculating the rate for Tap Y\n    y_rate = combined_rate - x_rate  # We subtract the rate of Tap X from the combined rate to get the rate of Tap Y\n\n    # Now convert the rate for Tap Y into the time it would take to fill the tank\n    y_time = 1 / y_rate\n\n    return y_time\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    only_apples = 20 - 10\n    only_strawberries = 30 - 10\n    both = 10\n    neither = 5\n\n    total_students = only_apples + only_strawberries + both + neither\n    \n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "网络故障，请重试"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    original_price = 1050\n    discount_rate = 0.12\n    discount_amount = original_price * discount_rate\n    final_price = original_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    correct_answers = symbols('correct_answers')\n    incorrect_answers = 10 - correct_answers\n\n    # Equation: 6 * correct - 2 * (total - correct) = total points\n    equation = Eq(6 * correct_answers - 2 * incorrect_answers, 44)\n\n    # Solve the equation\n    answers = solve(equation, correct_answers)\n\n    return answers[0]\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum(factorial(i) for i in range(1, 9))\n    ans = factorial_sum % 100\n    return ans\n\nfrom math import factorial\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    total_volume = 300 + 300\n    sugar_in_A = 300 * 0.20\n    sugar_in_B = 300 * 0.30\n\n    total_sugar = sugar_in_A + sugar_in_B\n    concentration = total_sugar / total_volume\n\n    return concentration\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles Ahmad and Ryan have\n    ahmad, ryan = symbols('ahmad ryan')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(ahmad + ryan, 1442)  # Ahmad and Ryan have 1442 marbles together\n    equation2 = Eq(ahmad, 6 * ryan)     # Ahmad has 6 times as many marbles as Ryan\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n    \n    # Calculate the number of marbles Ahmad must give to Ryan to have an equal amount\n    marbles_to_give = (solutions[ahmad] - solutions[ryan]) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    pounds_to_dollars = 2.50\n    pounds = dollars / pounds_to_dollars\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    exchange_result = 175\n\n    # Let x be the number of $2-notes at first, and y be the number of $10-notes\n    # x + y = total_notes (equation 1)\n    # After exchange, number of $2-notes is x + 5y = exchange_result (equation 2)\n\n    # by substituting equation 1 into equation 2, we get x + 5(x + y - x) = exchange_result\n    # Simplifying gives 5y = exchange_result - total_notes\n    y = (exchange_result - total_notes) // 5\n\n    # Now we substitute y back into equation 1 to get x\n    x = total_notes - y\n\n    return x\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    distance_between_carriages = 1\n\n    remaining_length = total_length - head_length\n    carriage_total_length = carriage_length + distance_between_carriages\n\n    num_carriages = (remaining_length // carriage_total_length) + 1  # +1 for the train's head\n\n    return num_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    count_ones = 0\n    count_tens = 0\n    count_hundreds = 0\n\n    for i in range(1, 289):\n        ones = i % 10\n        tens = (i // 10) % 10\n        hundreds = (i // 100) % 10\n\n        if ones == 8:\n            count_ones += 1\n        if tens == 8:\n            count_tens += 1\n        if hundreds == 8:\n            count_hundreds += 1\n\n    total_count = count_ones + count_tens + count_hundreds\n\n    return total_count\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # How many triangles are equal to a diamond?\n    ans = solutions[diamond] / solutions[triangle]\n\n    return ans\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_points = 2\n    incorrect_points = -1\n    actual_score = 82\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == actual_score:\n            return correct\n\n    return \"No valid solution\"\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 0\n    while True:\n        if (24*x - 8) % 25 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0\n        for y in range(10):  # y can be [0-9]\n            A = 10 * x + y\n            B = 2 * A\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = 0.15\n    increase = 0.15\n\n    discounted_price = original_price * (1 - discount)\n    final_price = discounted_price * (1 + increase)\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kg for the 2.5 kg bag\n    price_per_kg_1 = 5 / 2.5\n    # Calculate the price per kg for the 4 kg bag\n    price_per_kg_2 = 7.70 / 4\n    \n    # Compare the two prices to find out which is the better value\n    if price_per_kg_1 < price_per_kg_2:\n        return \"2.5kg bag\"\n    else:\n        return \"4kg bag\"\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inv = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inv\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    three_quarter_full = 350  # mass when jar is 3/4 full\n    one_quarter_full = 250    # mass when jar is 1/4 full\n    \n    # Difference in mass between 3/4 full and 1/4 full\n    half_jar_mass = three_quarter_full - one_quarter_full\n    \n    # Mass of the empty jar\n    empty_jar_mass = one_quarter_full - half_jar_mass\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n    num_trees_per_side = (road_length // interval) + 1\n    total_trees = num_trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (number_of_buses * bus_length) + (distance_between_buses * (number_of_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Mistaken calculation\n    mistaken_equation = Eq(x / 4 - 25, 2021)\n    mistaken_solution = solve(mistaken_equation, x)\n\n    original_value = mistaken_solution[0]\n\n    # Correct calculation\n    correct_answer = original_value * 4 + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    blocks_28_height = 182\n    block_height = blocks_28_height / 28\n    blocks_42_height = block_height * 42\n    return blocks_42_height\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    ans = 4.8 * 5\n    return ans\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    # Arithmetic sequence sum formula: n/2 * (first_term + last_term)\n    # where n is the number of terms\n    \n    first_term = 106\n    last_term = 2019\n    difference = 1\n    \n    # Calculate number of terms n = (last_term - first_term) / difference + 1\n    num_terms = (last_term - first_term) // difference + 1\n    \n    # Calculate the sum of the sequence\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # Define the variables x and y\n    x, y = 5, 3\n    \n    # The relationship between x and y is direct proportional relationship\n    # Let's use the direct proportional relationship to find the value of y when x is 5\n    y_when_x_is_5 = (y * 5) / x\n    \n    return y_when_x_is_5\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Assume the first number is a and the second number is b\n    # The sequence would then be: a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # The fourth number is a + 2b = 6 and the sixth number is 3a + 5b = 15\n\n    # Solve for a and b\n    a_plus_2b = 6\n    _3a_plus_5b = 15\n\n    # Let's subtract 3 times the first equation from the second equation\n    # (3a + 5b) - 3(a + 2b)\n    # 3a + 5b - 3a - 6b\n    # -b\n\n    b = _3a_plus_5b - 3 * a_plus_2b  # Since -b = 15 - (3 * 6), then b = -3\n    a = a_plus_2b - 2 * b  # Now that we have b, we can solve for a\n\n    # Now we know a and b\n    a = 6 - 2 * (-3)\n    b = -3\n    \n    # The seventh number will be the sum of the fifth and sixth numbers\n    # 7th number = (2a + 3b) + (3a + 5b) = 5a + 8b\n    ans = 5 * a + 8 * b\n    return ans\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price_before_discount = cost_price + (cost_price * 0.50)\n    selling_price_after_discount = selling_price_before_discount - (selling_price_before_discount * 0.10)\n    profit = selling_price_after_discount - cost_price\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    for m in range(1, 500):  # A reasonable range to search for m\n        original_students = m**2 + 5\n        if ((original_students + 18) ** 0.5).is_integer():\n            ans = original_students\n            break\n    return ans\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    return sum(numbers)\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "from math import gcd\n\ndef solution():\n    students_class_A = 12\n    students_class_B = 15\n    students_class_C = 18\n\n    # Finding the greatest common divisor of the three numbers\n    greatest_common_divisor = gcd(gcd(students_class_A, students_class_B), students_class_C)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_sum = 3 * 25\n    new_sum = 3 * 22\n    change = original_sum - new_sum\n    original_number = 16 + change\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    i = 1\n    while True:\n        if i % 5 == 3 and i % 6 == 5:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    \n    # Total number of students\n    total_students = 36\n    \n    # Total score for the class\n    total_class_score = total_students * 89\n    # Boys count\n    boys = total_students - girls\n    \n    # Average score for girls\n    girls_avg_score = 88\n    # Average score for boys\n    boys_avg_score = 91\n    \n    # Equation representing total score from girls and boys\n    equation = Eq(girls_avg_score * girls + boys_avg_score * boys, total_class_score)\n    \n    # Solve the equation\n    solution = solve(equation, girls)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    points_for_correct = 4\n    points_for_incorrect = -2\n    total_score = 66\n    questions_answered = total_questions - 1\n\n    # Assume all answered questions are correct\n    max_correct_score = questions_answered * points_for_correct\n\n    # The difference needed to be subtracted to get to the actual score\n    difference = max_correct_score - total_score\n\n    # Each incorrect answer reduces the score by points_for_correct - points_for_incorrect\n    # since we assumed first that it was correct. So, we need to find out how many\n    # reductions of that amount it takes to get to the actual difference.\n    corrections_required = difference // (points_for_correct - abs(points_for_incorrect))\n\n    # Subtract the number of incorrect from the total answered to get the number of correct answers\n    correct_answers = questions_answered - corrections_required\n\n    return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "from itertools import product\n\ndef solution():\n    vertices = range(1, 9)  # Vertices labeled from 1 to 8\n    count = 0  # Initialize counter for distinct graphs\n    # Each edge can be either present or not, generating all possible graphs\n    for edges in product([0, 1], repeat=28):  # A complete graph K8 has 28 edges\n        graph = {v: set() for v in vertices}  # Adjacency list representation\n        e_idx = 0  # Edge index\n        for i in range(1, 9):  # Go through all possible edges\n            for j in range(i + 1, 9):\n                # If edge is present in this combination, add it to both vertices' adjacency set\n                if edges[e_idx] == 1:\n                    graph[i].add(j)\n                    graph[j].add(i)\n                e_idx += 1\n\n        # Check if each vertex has degree 3 (each vertex must have exactly 3 edges)\n        if all(len(neighbors) == 3 for neighbors in graph.values()):\n            # Check if graph is connected\n            visited = set()\n            stack = [1]  # Start DFS from vertex 1\n\n            while stack:\n                vertex = stack.pop()\n                if vertex not in visited:\n                    visited.add(vertex)\n                    stack.extend(graph[vertex] - visited)\n\n            # If DFS visited all vertices, the graph is connected\n            if len(visited) == 8:\n                count += 1\n\n    return count // 24  # Divide by 24 to account for rotational symmetry (4!*3)\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time_in_minutes = 5 * 60  # converting 5 p.m. to minutes\n    total_activity_time = 45 + 30  # total time spent in minutes\n\n    end_time_in_minutes = start_time_in_minutes + total_activity_time\n    end_hour = end_time_in_minutes // 60\n    end_minutes = end_time_in_minutes % 60\n\n    # Convert to standard 12-hour clock format if the time is beyond 12 hours\n    if end_hour > 12:\n        end_hour -= 12\n\n    ans = f\"{end_hour}:{end_minutes:02d} p.m.\" if end_hour < 12 or end_hour == 12 and end_minutes == 0 else f\"{end_hour}:{end_minutes:02d} a.m.\"\n    \n    return ans\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # Amount of sugar David has\n    sugar_david = 800 * 0.05\n    # Amount of sugar Eugene has\n    sugar_eugene = 200 * 0.30\n    # Amount of sugar Felix has\n    sugar_felix = 300 * 0.10\n\n    # Total amount of sugar\n    total_sugar = sugar_david + sugar_eugene + sugar_felix\n\n    # Total volume of solution\n    total_volume = 800 + 200 + 300\n\n    # Concentration of the resulting sugar solution\n    concentration = total_sugar / total_volume\n\n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(gill, andrew + 18)\n    equation2 = Eq(andrew + gill, 62)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for e in range(10):\n        number = 20302 + e*1010  # constructing the number by replacing E\n        if number % 9 == 0:\n            return e\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    fruit_juice_in_first_punch = 20 * 0.35\n    fruit_juice_in_second_punch = 30 * 0.60\n    total_fruit_juice = fruit_juice_in_first_punch + fruit_juice_in_second_punch\n    concentration = (total_fruit_juice / total_volume) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    people = 4\n    handshakes = comb(people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import Eq, solve, symbols\n    \n    initial_badges, remaining_after_day1, remaining_after_day2 = symbols('initial_badges remaining_after_day1 remaining_after_day2')\n    \n    # After selling 5/7 of the badges on the first day\n    equation1 = Eq(remaining_after_day1, initial_badges - (5/7) * initial_badges)\n    \n    # After selling 1/3 of the remaining badges on the second day\n    equation2 = Eq(remaining_after_day2, remaining_after_day1 - (1/3) * remaining_after_day1)\n    \n    # She then made an additional 354 badges and in the end had 3 times the initial number\n    equation3 = Eq(remaining_after_day2 + 354, 3 * initial_badges)\n    \n    # Solving the system of equations\n    solution = solve((equation1, equation2, equation3), (initial_badges, remaining_after_day1, remaining_after_day2))\n    \n    return solution[initial_badges]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n    \n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    for num in range(100, 1000):\n        digits = [int(d) for d in str(num)]\n        if 7 in digits:\n            if all(abs(d1 - d2) <= 4 for d1 in digits for d2 in digits):\n                return num\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    previous_password = 'Angel'\n    new_password = 'Devil'\n\n    angel_dict = {letter: str(index) for index, letter in enumerate(previous_password)}\n    devil_number = ''.join([angel_dict.get(letter, '') for letter in new_password])\n\n    andy_try = '4005220912'\n\n    return devil_number == andy_try, devil_number\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    number_of_players = 4\n    # Each match eliminates one player, so a total of n - 1 matches are needed for n players\n    rounds_to_determine_winner = number_of_players - 1\n    return rounds_to_determine_winner\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n\n    only_A_or_B = total_exhibits - (not_produced_by_A + not_produced_by_B)\n    produced_by_both = total_exhibits - (only_A_or_B + not_produced_by_A + not_produced_by_B)\n\n    return produced_by_both\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temperature = 4\n    temperature_drop = 10\n    midnight_temperature = noon_temperature - temperature_drop\n    return midnight_temperature\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee one ball of each color, the worst case scenario is:\n    # picking all balls of one color, then all of another color, and then one more ball.\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n\n    # Picking all balls of one color and one more guarantees one ball of another color.\n    # Picking one more guarantees the third color.\n    balls_needed = red_balls + blue_balls + 1  # We added one to finally get a green ball.\n\n    return balls_needed\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    # Using the sympy library to solve the system of modular equations\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = [(3, 6), (3, 7), (5, 11)]\n\n    # Using Chinese Remainder Theorem to solve the congruences\n    result = solve_congruence(*congruences)\n\n    # Check if the number is between 200 and 300\n    while result[0] < 200 or result[0] > 300:\n        result = (result[0] + result[1], result[1])\n\n    # Return the number that satisfies all conditions\n    return result[0]\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirt, blouse = symbols('skirt blouse')\n\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n\n    solutions = solve((equation1, equation2), (skirt, blouse))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Since B is a prime and 8A - 3B is multiple of 3, B can't be 3 itself (otherwise 8A won't be a multiple of 3)\n    # The other prime that is multiple of 3 is 3, but since B can't be 3, B has to be a prime that when multiplied by 3 and subtracted from\n    # a multiple of 3, the result is still a multiple of 3. This implies B must not affect the 3-multiplicity - hence B must be of the form 3k+1.\n    # A can be any prime number since 8 * A will always be a multiple of 2, and does not affect the 3-multiplicity.\n    # The smallest prime of the form 3k+1 is 2. If we choose A = 2,\n    # then 8A - 3B = 16 - 3 * 2 = 10, which is not a multiple of 3.\n    # Hence, A can't be 2.\n    # The next prime is 3, again 24 - 6(B) is not a multiple of 3\n    # Then A = 5,\n    # then 8A - 3B = 40 - 3 * 2 = 34, which is not a multiple of 3.\n    # A = 7 is the next prime number\n    # then 8A - 3B = 56 - 3 * 2 = 50, which is not a multiple of 3.\n    # A = 11,\n    # then 8A - 3B = 88 - 3 * 2 = 82, which is not a multiple of 3.\n    # A = 13,\n    # then 8A - 3B = 104 - 3 * 2 = 98, which is not a multiple of 3.\n    # The pattern suggests we are looking for A of the form 3k+2.\n    # Indeed, if A = 3k+2 and B = 3l+1, then 8A - 3B = 8(3k+2) - 3(3l+1) = 24k + 16 - 9l - 3\n    # which simplifies to 24k - 9l + 13, and this is clearly a multiple of 3 if k and l are integers.\n    # So we need to find the smallest prime A of the form 3k+2:\n    # Trying A = 5 (3*1+2): 8A - 3B = 40 - 3 * 2 = 34, not a multiple of 3.\n    # Trying A = 11 (3*3+2): 8A - 3B = 88 - 3 * 2 = 82, not a multiple of 3.\n    # Trying A = 17 (3*5+2): 8A - 3B = 136 - 3 * 2 = 130, not a multiple of 3.\n    # Trying A = 23 (3*7+2): 8A - 3B = 184 - 3 * 2 = 178, not a multiple of 3.\n    # Trying A = 29 (3*9+2), We find that 8*29 - 3*2 = 232 - 6 = 226, and 226 is a multiple of 3.\n    # Therefore, A = 29.\n    \n    return 29\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # After the first year the value of the house was £110,000.\n    final_value_first_year = 110000\n\n    # The increase in value was 10% in the first year.\n    # To find the original price, we need to divide the final value by 1 + percentage increase.\n    original_price = final_value_first_year / 1.10\n\n    # In the second year, the house loses 10% of its value.\n    # Decrease the value by 10%.\n    final_value_second_year = final_value_first_year * 0.90\n\n    # Calculate the amount of profit or loss comparing with the original price.\n    amount_profit_loss = final_value_second_year - original_price\n\n    return amount_profit_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Calculate factorial for numbers 3, 4 and 1\n    f3 = factorial(3)\n    f4 = factorial(4)\n    f1 = factorial(1)\n    \n    # Calculate arrangements of groups, considering each flower type as a single group\n    group_arrangements = factorial(3) # Because there are 3 groups: roses, jasmines, and daisy\n\n    # Multiply the arrangements within each group with the group arrangements\n    ans = f3 * f4 * f1 * group_arrangements\n    return ans\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    multiple = 1 * 2 * 3 * 4 * 5 * 6\n    factor = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8\n    m_values = set()\n\n    for i in range(1, factor + 1):\n        if multiple % i == 0 and factor % i == 0:\n            m_values.add(i)\n\n    return len(m_values)\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # To find the maximum number of different positive integers that can sum up to 60\n    # we need to use the smallest positive integers starting from 1, 2, 3, and so on.\n    # We will keep a running total and a count of the number of integers\n    # When the running total is about to exceed 60, that means we've reached the maximum number\n    # of different positive integers that can be added to not exceed the sum of 60.\n    s = 0\n    i = 0\n    while s + (i + 1) <= 60:\n        i += 1\n        s += i\n    return i\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount = 0.20\n    new_price = original_price * (1 - discount)\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    ans = 12321 // 9\n    return ans\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20  # ml per min\n    minutes_in_hour = 60\n    volume_leaked_in_hour = leak_rate_per_minute * minutes_in_hour  # in ml\n    volume_leaked_in_hour_in_litres = volume_leaked_in_hour / 1000  # converting ml to litres\n    return volume_leaked_in_hour_in_litres\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        s, e, x = p\n        if s == 0:  # A number cannot start with 0\n            continue\n        see = s*100 + e*10 + e\n        eex = e*100 + e*10 + x\n        if see + eex == s*1000 + e*100 + e*10 + x:\n            return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences are of the form (remainder, modulus)\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    # Assume number of custard pies is 'n' and number of friends is 'f'.\n    # From the problem statement, we have:\n    # n = 5f + 3 (if each friend gets 5 pies, 3 pies are left)\n    # n = 6f - 2 (if each friend gets 6 pies, short of 2 pies)\n    # Therefore, we have the following equations:\n    # 5f + 3 = 6f - 2\n    # Rearrange the equation to solve for 'f':\n    # f = 5\n    \n    # Plug the value of 'f' into either equation to solve for 'n':\n    # We choose the first equation for simplicity:\n    n = 5 * 5 + 3\n    return n\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are 3 different colors, and we want to guarantee one pair of the same color.\n    # According to the worst case scenario in Pigeonhole Principle:\n    # She might pick one sock from each color first (3 socks),\n    # Then the next sock she picks must match one of them to make a pair.\n\n    total_socks_to_pick = 3 + 1\n\n    return total_socks_to_pick\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n    \n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n    \n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    # Let x be the number of pieces of paper cut into three parts.\n    # Thus, we have the equation: 10 - x + 3x = 16\n    # Solving for x gives us:\n    # 10 + 2x = 16\n    # 2x = 16 - 10\n    # 2x = 6\n    # x = 3\n\n    x = (16 - 10) // 2\n    return x\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # You have 4 red and 4 green apples.\n    # Worst case scenario following the pigeonhole principle:\n    # You take 1 red, then 1 green (No match yet)\n    # You take 1 red, then 1 green (No match yet)\n    # Now you have 2 red and 2 green apples\n    # The next apple you take, regardless of its color, will result in a pair of the same color.\n    \n    # So, in the worst case, you need to take out 5 apples to ensure you have 2 apples of the same color.\n    return 5\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    return 20000 - 20\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    marks = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    return 6.3 + 8.7 + 9.6 - 2.6\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4\n    water_left = 7\n\n    original_volume = (pails_filled * water_per_pail) + water_left\n    return original_volume\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    x = 243 ** (1/20)\n    y = 243 ** (1/15)\n    z = 243 ** (1/5)\n    ans = (x ** 8) * (y ** 6) * (z ** 2)\n    return ans\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    \n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum(i if i % 2 == 0 else -i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution_c = solve(equation, c)\n    return solution_c[0]\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's designate b as the cost of one book and p as the cost of one pencil box\n    b, p = symbols('b p')\n\n    # Now we set up our equations based on the information given.\n    # 2 books and 3 pencil boxes cost $42\n    equation1 = Eq(2 * b + 3 * p, 42)\n\n    # 2 books and 6 pencil boxes cost $60\n    equation2 = Eq(2 * b + 6 * p, 60)\n\n    # We solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    # We return the cost of each pencil box\n    return solutions[p]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    A = 1\n    for i in range(1, 2011):\n        A *= i\n        while A % 10 == 0:\n            A //= 10\n        A = A % 100000  # To prevent overflow, keep only the last few digits\n\n    return A % 10\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    from statistics import median\n\n    sequence = []\n    for number in range(1, 9):\n        sequence.extend([number] * (number + 1))\n\n    return median(sequence)\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    # Total height of the six players\n    total_height_six_players = 6 * 150\n\n    # Average height of four players is 2 cm lower than the average of the team\n    average_height_four_players = 150 - 2\n\n    # Total height of the four players\n    total_height_four_players = 4 * average_height_four_players\n\n    # Total height of the other two players\n    total_height_two_players = total_height_six_players - total_height_four_players\n\n    # Average height of the other two players\n    average_height_two_players = total_height_two_players / 2\n\n    return average_height_two_players\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "def solution():\n    from math import comb\n    num_handshakes = comb(10, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    per_day_paving = 50\n    days_needed = total_length / per_day_paving\n    return days_needed\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    from math import sqrt\n\n    x = 42\n    y = int(sqrt(42 * 42))\n\n    factors = []\n    i = 2\n\n    while i * i <= 42:\n        if 42 % i:\n            i += 1\n        else:\n            42 //= i\n            factors.append(i)\n\n    if 42 > 1:\n        factors.append(42)\n\n    y_factors = []\n    for i in factors:\n        if y % i == 0:\n            y //= i\n            y_factors.append(i)\n\n    remaining = y\n    if remaining > 1:\n        y_factors.append(remaining)\n\n    if all(y_factors.count(factor) == 1 for factor in y_factors):\n        ans = x + y\n    else:\n        ans = x\n\n    return ans\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    # Number of cattles\n    cattles = 8\n    # Number of days\n    days = 4\n    # Fodder consumed by one cattle in a day\n    fodder_per_cattle_per_day = 10\n    \n    # Total fodder consumed by all cattles in all days\n    total_fodder = cattles * days * fodder_per_cattle_per_day\n    \n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 rabbits * 2 chickens each = 16 chickens\n\n    # Number of chickens that weigh as much as one dog\n    num_chickens = 8 * 2\n    \n    return num_chickens\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let x be the total number of marbles Larry had originally\n    # After giving away 5/12 of his marbles to Mark, Larry has (7/12)x marbles left\n    # After giving away 30 marbles to Nate, Larry has (7/12)x - 30 marbles left\n    # After giving away 26 marbles to Ollie, Larry has (7/12)x - 30 - 26 marbles left\n    # Finally, we know that Larry has 35 marbles left\n    # Therefore, we can set up the following equation:\n    # (7/12)x - 30 - 26 = 35\n    # (7/12)x = 35 + 30 + 26\n    # (7/12)x = 91\n    # x = (91 * 12) / 7\n    x = (91 * 12) / 7\n    return x\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of sweets Jess and Jill have before and after sharing\n    jess_before, jill_before, jess_after, jill_after = symbols('jess_before jill_before jess_after jill_after')\n\n    # Jill has six sweets for every five sweets Jess has before sharing\n    equation1 = Eq(jill_before, 6/5 * jess_before)\n\n    # After sharing, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill_after, 4/7 * jess_after)\n\n    # Jill gives eight sweets to Jess\n    equation3 = Eq(jill_before - 8, jill_after)\n    equation4 = Eq(jess_before + 8, jess_after)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (jess_before, jill_before, jess_after, jill_after))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jess_before] + solutions[jill_before]\n\n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_mass = 600  # Total mass of the sugar solution\n    concentration = 0.22  # Sugar concentration 22%\n\n    # Amount of sugar used = total mass of the solution * concentration\n    sugar_mass = total_mass * concentration\n\n    return sugar_mass\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = 0\n\n    for number in range(1, 100):\n        for digit in str(number):\n            total_sum += int(digit)\n    \n    return total_sum\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    pies, cakes = symbols('pies cakes')\n    \n    # From the given ratios\n    total_money = 1848\n    money_ratio_pies = 15\n    money_ratio_cakes = 7\n    pie_cake_ratio = 4\n    \n    # Establish equations based on the given information\n    cake_price = 13 * pies\n    equation1 = Eq(pies * pie_cake_ratio, cakes)\n    equation2 = Eq(pies * (money_ratio_pies / money_ratio_cakes) + cake_price, total_money)\n\n    # Solve equations\n    solutions = solve((equation1, equation2), (pies, cakes))\n\n    return solutions[cakes]\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    money_given = total_money * 0.25\n\n    return money_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) * 3 == int(str(num) + '1'):\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    current_date = datetime.now()\n    years_ago = timedelta(days=(38 * 365.25 + 6 * 30))  # Approximate 1 year as 365.25 days and 1 month as 30 days\n    birth_date = current_date - years_ago\n    return birth_date.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n    remaining_length = original_length - piece_cut\n\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_money = symbols('initial_money')\n    \n    # After spending 1/4 and an additional $3 on CDs\n    remaining_after_CDs = initial_money - (initial_money / 4) - 3\n\n    # After spending 3/5 of the remaining money and an additional $6 on batteries\n    remaining_after_batteries = remaining_after_CDs - (3/5) * remaining_after_CDs - 6\n\n    # He was left with $24\n    equation = Eq(remaining_after_batteries, 24)\n\n    # Solving for the initial amount of money Hanson had\n    solution = solve(equation, initial_money)\n    \n    # Since solve returns a list, get the first (and in this case, only) solution\n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "def solution():\n    from itertools import permutations\n\n    # Digits available.\n    digits = ['0', '1', '3', '6', '8', '9']\n\n    # Find all permutations of the digits, taking 4 at a time.\n    all_permutations = list(permutations(digits, 4))\n\n    # Filter out permutations that do not result in a valid 4-digit even number.\n    valid_numbers = [perm for perm in all_permutations if perm[-1] in ('0', '6', '8') and perm[0] != '0']\n    \n    # Count the number of valid permutations.\n    count = len(valid_numbers)\n\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads.append(i)\n    ans = beads[0]\n    return ans\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    qiqi_speed = 60  # m/min\n    weiling_speed = 72  # m/min\n    time_difference = 2  # minutes\n    arrival_difference = 4  # minutes\n\n    # Let x be the time it takes for Qiqi to reach the school from the moment she starts walking\n    # In the same time, Weiling will walk for (x - 2) minutes\n    # When Weiling arrives, Qiqi will still need 4 minutes to reach the school.\n    \n    # Distance is the same for both, so we can set up the equation:\n    # Qiqi's distance = Weiling's distance\n    # qiqi_speed * x = weiling_speed * (x - 2 - 4) \n\n    # Now we solve for x\n    x = (weiling_speed * (time_difference + arrival_difference)) / (weiling_speed - qiqi_speed)\n\n    # Finally, calculate the distance using Qiqi's speed and time x\n    distance = qiqi_speed * x\n\n    return distance\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # 9^2015 has the same units digit as 9^1, 9^5, 9^9, ... (since 9^1 = 9, 9^2 = 81, 9^3 = 729, 9^4 = 6561 ...)\n    # Hence, the units digit of 9^2015 is 9.\n\n    # 9^2016 is 9 * 9^2015, so its units digit is the unit digit of (9 * 9). Since 9 * 9 = 81, the units digit is 1.\n\n    # Now we need to add the units digits of both: 9 (from 9^2015) and 1 (from 9^2016)\n    units_digit = (9 + 1) % 10  # We use modulo 10 to extract the units digit\n\n    return units_digit\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # First, calculate the permutations of men as they have no restrictions\n    men_permutations = factorial(5)\n    \n    # There are 6 places where women can be placed without being next to each other (5 + 1)\n    # Women: _ M _ M _ M _ M _ M _, M represents men and _ represents possible positions for women\n    women_positions = 6\n    \n    # Now, calculate the permutations of 3 women in the 6 possible positions\n    women_permutations = factorial(women_positions) // factorial(women_positions - 3)\n    \n    # The total permutations is the product of men_permutations and women_permutations\n    total_permutations = men_permutations * women_permutations\n    \n    return total_permutations \n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n\n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    marc_time_str = '11:50 AM'\n    marc_time = datetime.strptime(marc_time_str, '%I:%M %p')\n    marc_slow_minutes = 15\n    george_fast_minutes = 7\n\n    # Adjust Marc's watch to correct time\n    correct_time = marc_time + timedelta(minutes=marc_slow_minutes)\n    # Add 30 minutes to get the time it will be in half an hour\n    correct_time_in_half_hour = correct_time + timedelta(minutes=30)\n    # Adjust for George's watch being fast\n    george_time_in_half_hour = correct_time_in_half_hour - timedelta(minutes=george_fast_minutes)\n    \n    # Format the time to be displayed in hour:minute\n    ans = george_time_in_half_hour.strftime('%I:%M %p')\n    \n    return ans\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = symbols('income')\n\n    tax_on_first_30000 = 30000 * T / 100\n    tax_on_remaining = (income - 30000) * (T + 3) / 100\n    total_tax = tax_on_first_30000 + tax_on_remaining\n\n    equation = Eq(total_tax, income * (T + 1) / 100)\n\n    solutions = solve((equation, income > 30000), (T, income))\n\n    return float(solutions[income])\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    return 0.45 * 540\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up - (fall_down / 3)\n    \n    # The squirrel reaches 30 meters using the effective jump, then one final jump to the top\n    jumps_before_last = (total_height - 1) // effective_jump\n    \n    # Check if it requires an additional jump to reach the last meter\n    if (total_height - 1) % effective_jump > 0:\n        jumps_before_last += 1\n    \n    # The last jump to reach or go beyond 31 meters\n    final_jump = 1\n\n    # Total jumps are the jumps before the last one plus the final jump\n    total_jumps = jumps_before_last * 3 + final_jump\n    return total_jumps\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # We know that x + y = 30 (total questions) and 5x - y = 90 (total score).\n    # We can solve for x using these equations.\n\n    # From x + y = 30, we get y = 30 - x.\n    # Substituting y in the second equation we get 5x - (30 - x) = 90\n    # Which simplifies to 6x - 30 = 90\n    # And then to 6x = 120\n    x = 120 / 6\n\n    return int(x)\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    # A's work rate is 1 house per 10 hours\n    rate_a = 1 / 10\n    # B's work rate is 1 house per 15 hours\n    rate_b = 1 / 15\n\n    # Combined work rate of A and B\n    combined_rate = rate_a + rate_b\n\n    # Time taken to paint the house together is the reciprocal of combined rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    ans = 20.14 * 4.4\n    return ans\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Drawing one of each of the first three colors\n    red, blue, yellow = 1, 1, 1\n    # Since we have two colors with the same number (red), we need to draw all three of one color\n    # and one from each of the other two colors to ensure we have at least one of each of the other\n    # two colors. Also, we need one more marble to ensure we have the fourth color\n    guaranteed_four_colors = max(red, blue, yellow) + 3  # 1 from each of the other colors + 1 more\n\n    return guaranteed_four_colors\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for num in range(0, 101):\n        if num % 3 == 0 and num % 7 == 0 and (num - 2) % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate the difference in years between Gigi and Jenny's ages at their specified reference points.\n    age_difference = 45 - 22\n\n    # Calculate the year when Gigi was 22.\n    year_when_gigi_was_22 = 2002 - (45 - 22)\n    \n    # Calculate Jenny's age in the year when Gigi was 22.\n    jennys_age_when_gigi_was_22 = (1995 + age_difference) - year_when_gigi_was_22\n    \n    return jennys_age_when_gigi_was_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    # Find the last positive term\n    last_positive_term = difference + 1\n    \n    # Calculate number of terms until the last positive term is reached\n    num_terms = (last_positive_term - first_term) / difference\n    \n    # Counting the first term\n    num_terms += 1\n    \n    return int(num_terms)\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    ans = 1.29 * 1000\n    return ans\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    number = \"20190406\"\n    sum_digits = sum(int(digit) for digit in number)\n    for A in range(10):\n        if (sum_digits + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    number = 0\n    for i in range(1, 1000):  # Assuming the search within a reasonable range\n        if i % 3 == 0 and i % 8 == 0 and str(i)[-1] == '2':\n            number = i\n            break\n    return number\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    return 2.5 * 7 * 4\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for i in range(10):\n        num = int(\"451\" + str(i))\n        if num % 3 == 0 and num % 5 != 0 and num % 9 != 0:\n            return i\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    ans = numerator / denominator\n    return round(ans, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    # Since we have to divide them into two groups with different number of apples,\n    # one way is to consider that one group has 1 apple, the next has 2 and so on.\n    # The total number of ways would be the count of numbers from 1 to n-1\n    # where n is the total number of apples.\n    ways = total_apples - 1\n    \n    return ways\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25  # Speed of the ship in still water in km/h\n    speed_of_current = 3       # Speed of the current in km/h\n    \n    # Speed downstream is the sum of the speed of the ship in still water and the speed of the current\n    downstream_speed = speed_in_still_water + speed_of_current\n    \n    distance = 140  # Distance to travel downstream in km\n    \n    # Time taken is distance divided by speed\n    time_taken = distance / downstream_speed\n    \n    return time_taken\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percent = 15\n    discount_amount = original_price * (discount_percent / 100)\n    sale_price = original_price - discount_amount\n\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelets_cost = 5 * 0.99\n    cards_cost = 2 * 1.98\n    total_cost = bracelets_cost + cards_cost\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cost_per_cupcake = 3.25\n    num_cupcakes = 3\n    num_cans = 2\n\n    total_cupcake_cost = cost_per_cupcake * num_cupcakes\n    total_can_cost = total_cost - total_cupcake_cost\n    cost_per_can = total_can_cost / num_cans\n\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    total_questions = 20\n    points_per_correct = 5\n    points_per_wrong = -2\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * points_per_correct + wrong * points_per_wrong\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from math import gcd\nfrom fractions import Fraction\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution():\n    first_light = Fraction(1, 2)  # 0.5 minutes in fraction\n    second_light = Fraction(3, 4)  # 0.75 minutes in fraction\n    third_light_at_least = Fraction(1, 2)  # At least 0.5 minutes\n    \n    combined_cycle = Fraction(9)  # 9 minutes cycle for all lights to turn green\n    lcm_first_second = lcm(first_light.denominator, second_light.denominator)\n    \n    for third_denominator in range(lcm_first_second, combined_cycle.denominator * lcm_first_second):\n        third_light_time = Fraction(1, third_denominator)\n        if third_light_time >= third_light_at_least:\n            if lcm(lcm_first_second, third_denominator) == combined_cycle.denominator:\n                return third_light_time * 60  # Convert to seconds\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Let the members of group A be a and members of group B be b.\n    # We know that a + b = n * 36 + 11, where n is the number of full buses.\n    # Thus, we can write a = n * 36 and b = 11.\n    # Since each member of A took a picture with every member of B, there are a * b pictures.\n    # Total pictures can be divided by 36 to determine the number of full rolls of film.\n    # Let's represent the leftover pictures as pictures % 36, which is the answer we seek.\n\n    # However, we have insufficient information to determine 'a' and 'b' uniquely.\n    # Thus, let's look at least a = 36 (at least one full bus for group A).\n    # We iterate over possible values of 'a' divisible by 36 and calculate 'b' accordingly.\n    # We seek the situation where (a * 11) % 36 gives the maximum value, as this represents\n    # the maximum remaining pictures on the last roll of film, which is our answer.\n\n    max_pictures = 0\n    \n    for a in range(36, 1000, 36):  # assuming a maximum of 1000 members in group A for practical reasons\n        b = 11\n        pictures = a * b  # total pictures taken between members of group A and B\n        left_pictures = pictures % 36\n        if left_pictures > max_pictures:\n            max_pictures = left_pictures  # update the maximum remaining pictures\n    \n    return max_pictures\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    sequence = [8, 20, 31, 41, 50]\n    differences = [sequence[i + 1] - sequence[i] for i in range(len(sequence) - 1)]\n    next_difference = differences[-1] - (differences[-2] - differences[-3])\n    next_number = sequence[-1] + next_difference\n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean = 5\n    total_numbers = 8\n\n    total_sum = mean * total_numbers\n    missing_number = total_sum - sum(numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # There are 3 other individuals that A can pass the ball to in the first pass.\n    first_pass_options = 3\n    \n    # After the first pass, the person with the ball can pass it to 2 others (excluding A and themselves).\n    second_pass_options = 2\n    \n    # On the third pass, only A can receive the ball, so there is only 1 option.\n    third_pass_options = 1\n    \n    # The number of different methods is the product of options for each pass.\n    num_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return num_methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Daniel and Ming's ages\n    daniel, ming = symbols('daniel ming')\n\n    # Setting up the equations based on the problem statements\n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    paper_weight_g = 25\n    number_of_girls = 250\n    total_weight_g = paper_weight_g * number_of_girls\n    total_weight_kg = total_weight_g / 1000  # Convert grams to kilograms\n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "def solution():\n    from itertools import permutations\n\n    cards = [1, 2, 8, 9]\n    max_product = 0\n\n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Time taken to entirely cross the first bridge\n    time_first_bridge = 8  # seconds\n    \n    # Time taken to entirely cross the second bridge\n    time_second_bridge = 10  # seconds\n    \n    # Length of the people line\n    length_of_line = 3  # meters\n    \n    # Length of the first bridge\n    length_first_bridge = 9  # meters\n    \n    # To entirely cross a bridge, the line must cover its own length plus the length of the bridge\n    # The speed of the line (speed is the same for both bridges)\n    speed = (length_first_bridge + length_of_line) / time_first_bridge  # speed = distance / time\n    \n    # Use the same speed to calculate the length of the second bridge\n    length_second_bridge = (speed * time_second_bridge) - length_of_line\n    \n    return length_second_bridge\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    sum_sq = 0\n    \n    for i in range(2, 1001, 4):\n        sum_sq += (i + 2) ** 2 - i ** 2\n\n    return sum_sq\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    # Since the product of three consecutive even numbers is given, we start by taking the cube root of the number\n    # to find an approximation of the middle number (it won't be accurate if the middle number is not a perfect cube)\n    cube_root_approx = int(round(2688 ** (1/3)))\n\n    # We check numbers around this cube root to find the exact middle even number\n    # We check both lower and upper because the cube root approximation might not be perfect\n    for middle_num in range(cube_root_approx - 3, cube_root_approx + 3):\n        if middle_num % 2 == 0:  # Making sure it's even\n            # Calculate product of three consecutive even numbers\n            product = (middle_num - 2) * middle_num * (middle_num + 2)\n            if product == 2688:\n                # If product matches, we've found our sequence and return the largest number\n                return middle_num + 2\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime('11:55AM', '%I:%M%p')\n    end_time = datetime.strptime('1:40PM', '%I:%M%p')\n    \n    time_played = end_time - start_time\n    minutes_played = time_played.total_seconds() / 60\n    return int(minutes_played)\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    # Crystal is one person, so we add 1 to the counts of people on either side\n    total_people = 11 + 7 + 1\n    \n    # Double the total because there are 2 rows\n    total_people *= 2\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    # Since the number is divisible by both 3 and 11, it is also divisible by 3*11=33.\n    # Iterate through all three-digit multiples of 33 to find the number that satisfies all conditions.\n    for num in range(100, 1000, 33):\n        if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):  # Possible number of cupcakes in the first group\n        for x2 in range(1, 10):  # Possible number of cupcakes in the second group\n            if x1 + x2 == 10 and x1 != x2:  # Sum should be 10 and groups must be different\n                count += 1\n    # Since order does not matter (group 1 and group 2 are not distinct), divide by 2 to avoid over counting\n    return count // 2\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    n = 224\n    ans = 1\n    i = 2\n\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            n /= i\n            count += 1\n        ans *= (count + 1)\n        i += 1\n\n    if n > 1:\n        ans *= 2\n\n    return ans\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    start_time = 8 * 60 + 30  # School starts at 8:30 am; convert to minutes\n    lesson_duration = 45      # Each lesson is 45 minutes\n    moving_period = 5         # 5 minutes between lessons\n\n    # Calculate the time by adding the duration of three lessons and two moving periods\n    break_start_time_in_minutes = start_time + 3 * lesson_duration + 2 * moving_period\n\n    # Convert time back to hours and minutes\n    break_start_hours = break_start_time_in_minutes // 60\n    break_start_minutes = break_start_time_in_minutes % 60\n\n    return f\"{break_start_hours}:{break_start_minutes:02d}\"\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # Hundreds digit can't be 0\n        for b in range(10): # Tens digit\n            for c in range(10): # Ones digit\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return 100 * a + 10 * b + c\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    num1 = 28\n    num2 = 84\n    num3 = 126\n\n    # Find the greatest common divisor of num1 and num2\n    gcd_num1_num2 = gcd(num1, num2)\n\n    # Now find the greatest common divisor of the result and num3\n    greatest_divisor = gcd(gcd_num1_num2, num3)\n\n    return greatest_divisor\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    five_dollar_notes, ten_dollar_notes = symbols('five_dollar_notes ten_dollar_notes')\n\n    # Total number of notes\n    total_notes = Eq(five_dollar_notes + ten_dollar_notes, 57)\n\n    # The amount spent\n    spent_fives = 0.25 * five_dollar_notes * 5\n    spent_tens = 0.60 * ten_dollar_notes * 10\n\n    # Money left\n    left_five_dollar_notes = five_dollar_notes - (0.25 * five_dollar_notes)\n    left_ten_dollar_notes = ten_dollar_notes - (0.60 * ten_dollar_notes)\n\n    # twice as many $10 notes as $5 notes after spending\n    notes_left = Eq(left_ten_dollar_notes, 2 * left_five_dollar_notes)\n\n    # solve the equations\n    solutions = solve((total_notes, notes_left), (five_dollar_notes, ten_dollar_notes))\n\n    # calculate cost of the bag\n    cost_of_bag = spent_fives.subs(five_dollar_notes, solutions[five_dollar_notes]) + \\\n                  spent_tens.subs(ten_dollar_notes, solutions[ten_dollar_notes])\n\n    return cost_of_bag\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n\n    equation1 = Eq(troy, 5 * adam)  # Troy had 5 times as many coins as Adam\n    equation2 = Eq(adam + 24, troy / 3)  # After Adam took 24 more, he had 1/3 as many as Troy\n\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    total_initial_coins = solutions[troy] + solutions[adam]\n    return total_initial_coins\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    \n    equation1 = Eq(wands + cards, 69)  # Total count of wands and cards is 69\n    equation2 = Eq(wands, cards + 17)  # Number of wands is 17 more than number of cards\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for original amount\n    original_amount = symbols('original_amount')\n\n    # Given conditions transformed into equations:\n    # Hanson spent 1/4 of his money and an additional $3 on CDs,\n    # so the amount left is original_amount - 1/4 * original_amount - 3\n    after_cds = original_amount - 1/4 * original_amount - 3\n\n    # Then Hanson spent 3/5 of the remaining money and an additional $6 on batteries.\n    # So the amount left is after_cds - 3/5 * after_cds - 6, which equals $24.\n    final_amount = after_cds - 3/5 * after_cds - 6\n\n    # The final amount left is $24\n    equation = Eq(final_amount, 24)\n\n    # Solve the equation for the original amount\n    solution = solve(equation, original_amount)\n\n    # Return the original amount of money Hanson had\n    return solution[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n            if product > 8:\n                break\n        if product == 8:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for i in range(1, 8):\n        for j in range(1, 8):\n            for k in range(0, 8, 2):  # Even digit in the ones place\n                if i != j and j != k and i != k and i + j + k == 8:\n                    count += 1\n                    # Since it's a three-digit number, no need to check for k != 0\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Darrell could draw all blue and white beads before getting 5 green beads\n    # Blue beads\n    blue = 5\n    # White beads\n    white = 6\n    # Darrell needs 5 green beads for sure\n    green_needed = 5\n\n    # The worst case is drawing all blue and white beads first, then the green ones\n    # The number of beads to draw to get 5 green beads would then be\n    # blue + white + green_needed\n    beads_to_draw = blue + white + green_needed\n\n    return beads_to_draw\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    quarter_of_sixteen = 1/4 * 16\n    half_of_missing_number = quarter_of_sixteen\n    missing_number = half_of_missing_number * 2\n    return missing_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the number of games played during the group stage\n    # For a single round-robin tournament, each contestant plays every other contestant once\n    # Each group has 4 members, so each member plays 3 games, and there are 4 groups\n    group_games = 4 * (4 * (4 - 1) // 2)\n\n    # Calculate the number of games played during the knockout round\n    # 2 winners from each group makes 8 participants, followed by top 4, top 2, and the final match\n    knockout_games = 8 - 1  # 7 games, as each round eliminates half of the contestants\n\n    # Calculate the third-place playoff game\n    third_place_game = 1\n\n    # Total number of games is the sum of group stage games and knockout games including the third place game\n    total_games = group_games + knockout_games + third_place_game\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    A_days = symbols('A')\n    B_days = 2 * A_days\n    A_work_rate = 1 / A_days\n    B_work_rate = 1 / B_days\n\n    combined_rate = A_work_rate + B_work_rate\n    combined_time = 1 / combined_rate\n\n    days_difference = Eq(B_days - A_days, 12)\n    A_days_solved = solve(days_difference, A_days)[0]\n\n    combined_time_solved = combined_time.subs(A_days, A_days_solved)\n\n    return combined_time_solved.evalf()\n\nfrom sympy import symbols, Eq, solve\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    smallest_number = solve_congruence(*congruences)[0]\n    return smallest_number\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of potted plants\n    r = 4  # number of plants to arrange in a row\n    \n    # Calculate the number of ways to arrange r plants out of n\n    arrangements = factorial(n) // factorial(n - r)\n    \n    return arrangements\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n    \n    # Using the Inclusion-Exclusion Principle to find the number of people who like both\n    likes_both = likes_bananas + likes_apples - total_people\n\n    return likes_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given = 76\n    stickers_bought = 65\n\n    stickers_start = stickers_end - stickers_bought + stickers_given\n\n    return stickers_start\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pineapple, apple = symbols('pineapple apple')\n    \n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n    \n    solutions = solve((equation1, equation2), (pineapple, apple))\n    \n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (2, 4), (2, 5), (0, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    # Check if the number formed by the first n digits is divisible by n\n    def check_divisibility(num, n):\n        return int(num[:n]) % n == 0\n    \n    # Generate all possible 10-digit numbers with the digit 8 at the front\n    for perm in permutations('0123456789', 10):\n        if perm[0] != '8':\n            continue\n        \n        if all(check_divisibility(''.join(perm), i+1) for i in range(9)):\n            return ''.join(perm)\n    \n    return None\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    matthew_tomatoes = belinda_tomatoes - 7\n    \n    # After giving away\n    belinda_tomatoes_after = belinda_tomatoes - 7\n    matthew_tomatoes_after = matthew_tomatoes + 7\n    \n    # Matthew originally had 7 fewer tomatoes than Belinda had remaining\n    matthew_originally_had = belinda_tomatoes_after - 7\n    \n    return matthew_originally_had\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    initial_output = 10\n    efficiency_increase = 0.5\n    new_output = initial_output * (1 + efficiency_increase)\n    return new_output\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n\n    D_minus_R = gcd(2012 - 1274, 2012) - (2012 % gcd(2012 - 1274, 2012))\n\n    return D_minus_R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4 + ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    given_to_grace = (5/7) * total_juice\n    remainder = total_juice - given_to_grace\n    given_to_evelyn = (1/9) * remainder\n    juice_left = remainder - given_to_evelyn\n    \n    return juice_left\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    last_digit_4_power = 4 ** (2009 % 4)  # The cycle of last digit of powers of 4 is 4 -> 6 -> 4 -> 6\n    last_digit_6_power = 6 ** (2010 % 4)  # The last digit of powers of 6 is always 6\n\n    last_digit_sum = (last_digit_4_power + last_digit_6_power) % 10  # Sum the last digits and get the last digit of sum\n\n    return last_digit_sum\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    total_weight = 63\n    for two_gram_weights in range(total_weight // 2 + 1):\n        for five_gram_weights in range(total_weight // 5 + 1):\n            if 2 * two_gram_weights + 5 * five_gram_weights == total_weight:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let the first term be a and the common difference be d\n    # The sum of the first n terms of an arithmetic sequence is given by:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # We can set up two equations from the given information\n    # S_8 = 8/2 * (2a + (8 - 1)d) = 32\n    # S_22 = 22/2 * (2a + (22 - 1)d) = 44\n    # From these two equations, we can form the system:\n    # 4 * (2a + 7d) = 32\n    # 11 * (2a + 21d) = 44\n    \n    # Divide both sides by 4 and 11 to simplify:\n    # (2a + 7d) = 8       (1)\n    # (2a + 21d) = 4      (2)\n    \n    # Then we subtract equation (1) from (2) to find the value of d\n    # 14d = -4\n    d = -4 / 14\n    \n    # Substitute the value of d back into equation (1) to find a\n    a = (8 - 7 * d) / 2\n    \n    # Now, we need to find the sum of the first 15 terms S_15\n    # S_15 = 15/2 * (2a + (15 - 1)d)\n    S_15 = 15/2 * (2 * a + 14 * d)\n    \n    return S_15\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    # Total height of the team\n    total_height_team = 6 * 150\n    \n    # Average height of four players\n    avg_height_four_players = 150 - 2\n    \n    # Total height of four players\n    total_height_four_players = 4 * avg_height_four_players\n    \n    # Total height of the other two players\n    total_height_two_players = total_height_team - total_height_four_players\n    \n    # Average height of the other two players\n    avg_height_two_players = total_height_two_players / 2\n    \n    return avg_height_two_players\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Using the concept of winning and losing positions in combinatorial games.\n    # A winning position is when reaching this number of numbers left on the board allows\n    # a player to eventually force a win, and a losing position when it doesn't.\n    \n    # Initialize an array where 0 represents a losing position and\n    # 1 represents a winning position. None means undetermined yet.\n    # We will have a total of 53 slots for numbers 0 to 52.\n    positions = [None] * 53\n    \n    # Define a helper function to determine if a position is winning or losing.\n    def is_winning(pos):\n        # If the position is already determined, return the result.\n        if positions[pos] is not None:\n            return positions[pos]\n        \n        # Try all possible moves of 1, 3, 4, or 6 and check if any of these moves take\n        # the player to a previously determined losing position (which would mean the current\n        # one is a winning position).\n        for move in [1, 3, 4, 6]:\n            if pos - move >= 0 and not is_winning(pos - move):\n                positions[pos] = 1 # Winning position\n                return True\n        \n        positions[pos] = 0 # Losing position\n        return False\n    \n    # Since we're looking for whether Betty (the first player) should go first or second,\n    # we need to determine whether 52 is a winning position.\n    if is_winning(52):\n        # If 52 is a winning position, then Betty wants to go first and always take the move\n        # that leaves Abby in a losing position.\n        return \"First\", \"Leave a multiple of 7 numbers for opponent\"\n    else:\n        # If not, Betty will go second and wait for Abby to be in a losing position,\n        # then maintain that advantage.\n        return \"Second\", \"Wait to move after opponent is in a losing position\"\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    # Let the flow rate of inlet pipe A be a tons/hour\n    # Let the flow rate of inlet pipe B be 2a tons/hour (Since B is twice as fast as A)\n    # Let the flow rate of inlet pipe C be c tons/hour\n\n    # We have two equations from the information given:\n    # (A + C) = 18\n    # (B + C) = 27\n    # By substituting B's flow rate in terms of A\n    # (2a + c) = 27\n    \n    # Now we can solve the system to find the value of a and c\n    from sympy import symbols, Eq, solve\n    \n    a, c = symbols('a c')\n    \n    equation1 = Eq(a + c, 18)\n    equation2 = Eq(2*a + c, 27)\n    \n    solutions = solve((equation1, equation2), (a, c))\n    \n    # Calculate the total flow rate of A, B, and C\n    total_flow_rate = solutions[a] + 2*solutions[a] + solutions[c]\n    \n    return total_flow_rate\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    # The two given factors are 15 and 21. The greatest common divisor (GCD) of these is 3,\n    # which implies that the number must be a multiple of their least common multiple (LCM).\n    # The LCM of 15 and 21 is 105 (i.e., LCM(15, 21) = 3 * 5 * 7).\n\n    import math\n\n    # The number's prime factorization must include the primes 3, 5, and 7 to have 15 and 21 as factors.\n    # Since 105 is comprised of three primes (3, 5, 7), and the number of total factors (including 1 and itself)\n    # is 8, which is 2^3, the number itself must have only three prime factors, possibly with some primes\n    # raised to a power. The prime factorization will be in the form of p^a * q^b * r^c where p, q, and r are prime\n    # factors and a, b, c are their respective powers. For the number to have exactly eight factors (2^3),\n    # a + 1 multiplied by b + 1 multiplied by c + 1 must equal 8. The possible combinations for the powers of a, b,\n    # and c that satisfy (a+1)(b+1)(c+1) = 8 are (1,1,1), implying that each prime factor is to the first power.\n\n    # Therefore, the number is 105 itself with no more factors.\n    # We now find all the factors of 105 by checking every number up to its square root\n    # and pairing each divisor with its complementary divisor.\n    number = 105\n    factors = set()\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n\n    # The sum of all factors is then calculated.\n    return sum(factors)\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    score_per_correct = 4\n    score_per_incorrect = -2\n    score_per_unattempted = 0\n    rex_score = 66\n    rex_attempted = total_questions - 1\n    \n    # Let's denote x as the number of correct answers and y as the number of incorrect answers.\n    # We know that rex attempted `rex_attempted` questions and he left one question, thus he has no points for that question.\n    # For rex_attempted questions he either answered correctly or incorrectly:\n    # Hence, x + y = rex_attempted\n    # And the score from correct and incorrect questions would sum to rex_score:\n    # Thus, 4*x + (-2)*y = rex_score\n    \n    # Translating the above system of equations into code to solve for x and y\n    for x in range(rex_attempted + 1):\n        y = rex_attempted - x\n        if score_per_correct * x + score_per_incorrect * y == rex_score:\n            return x\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    sequence_sum = sum(range(1, 21))\n    total_sum = sequence_sum * 2 - 20\n    return total_sum\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    # There are 5 choices for the first letter\n    # Then there are 4 choices left for the second letter (since it must be different)\n    # There are 3 choices left for the third letter\n    # Finally, there are 2 choices left for the fourth letter\n    ans = 5 * 4 * 3 * 2\n    return ans\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age == age / 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    meatballs_left_first = 20\n    meatballs_left_second = 10\n    extra_meatballs_eaten = meatballs_left_first - meatballs_left_second\n    \n    # Since the number of meatballs left changes by the number of meatballs each student gets when an additional student eats,\n    # we know that the number of meatballs eaten by each student is a factor of the difference in meatballs left.\n    # We will iterate from 1 to `extra_meatballs_eaten` to find the factor that satisfies the condition.\n    for i in range(1, extra_meatballs_eaten + 1):\n        if extra_meatballs_eaten % i == 0:\n            # Check if adding one more student (who eats `i` meatballs), the total meatballs can be divided by the new student count\n            if (meatballs_left_first + i) % i == 0:\n                return i\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    initial_amount = 9.32\n    fraction_to_increase = 1 / 10\n\n    increase_amount = initial_amount * fraction_to_increase\n    final_amount = initial_amount + increase_amount\n\n    return final_amount\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    remaining_questions_third_day = 23\n    # On the 2nd day, he completed 5 fewer than half of the remaining questions\n    # Let x be the questions completed on the 2nd day\n    # => x = (remaining_after_1st_day / 2) - 5\n    # remaining_after_1st_day = 2 * (x + 5)\n    # remaining_after_1st_day = remaining_questions_third_day + x\n    # => 2 * (x + 5) = remaining_questions_third_day + x\n    # => x = remaining_questions_third_day + 10 - 2 * (x + 5)\n    x = (remaining_questions_third_day + 10) / 2\n    remaining_after_1st_day = x + remaining_questions_third_day\n    # On the 1st day, he completed 7 more than half of all the questions\n    # => total_questions / 2 + 7 = total_questions - remaining_after_1st_day\n    # => total_questions = 2 * (remaining_after_1st_day - 7)\n    total_questions = (remaining_after_1st_day - 7) * 2\n    return total_questions\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction = 4 / 25\n    decimal = 0.17\n    \n    if fraction > decimal:\n        ans = \"4/25 is larger\"\n    else:\n        ans = \"0.17 is larger\"\n    \n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_volume = 1000  # milliliters in 1 liter\n    cup_volume = 200  # milliliters for each cup\n    num_cups = 3  # number of cups\n\n    used_volume = cup_volume * num_cups\n    remaining_volume = total_volume - used_volume\n\n    return remaining_volume\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, months, per_month_roses, per_month_daisies = symbols('original_roses original_daisies months per_month_roses per_month_daisies')\n    \n    # total roses and daisies now\n    equation1 = Eq(original_roses + original_daisies, 300)\n    \n    # total roses and daisies later\n    equation2 = Eq(original_roses + months * per_month_roses, 280)\n    equation3 = Eq(original_daisies + months * per_month_daisies, 180)\n    \n    # same number of roses and daisies planted every month\n    equation4 = Eq(per_month_roses, per_month_daisies)\n    \n    # using the given fact that planter plants roses and daisies\n    solutions = solve((equation1, equation2, equation3, equation4), (original_roses, original_daisies, months, per_month_roses, per_month_daisies))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_diff = 15 - 10  # Difference between the positions\n\n    # Calculate the common difference\n    common_difference = (fifteenth_term - tenth_term) / position_diff\n\n    # Calculate the 12th term (2 steps from the 10th term)\n    twelfth_term = tenth_term + 2 * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    num_lamps = 250\n    ans = 0\n    for lamp in range(1, num_lamps + 1):\n        if int(lamp ** 0.5) == lamp ** 0.5:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 60\n    correct_10_problem_test = 10 * 0.20\n    correct_20_problem_test = 20 * 0.80\n    correct_30_problem_test = 30 * 0.90\n\n    overall_correct = correct_10_problem_test + correct_20_problem_test + correct_30_problem_test\n    overall_score_percentage = (overall_correct / total_problems) * 100\n\n    return overall_score_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # size of one 6dm by 6dm brick in cm^2\n    size_large_brick = (6 * 10) ** 2\n    # total area covered by 80 large bricks in cm^2\n    total_area = size_large_brick * 80\n    # size of one 64cm^2 brick\n    size_small_brick = 64\n    # number of 64cm^2 bricks needed\n    num_small_bricks = total_area / size_small_brick\n\n    return int(num_small_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    water, fruit = symbols('water fruit')\n\n    # 2 bottles of water + 3 bags of fruit = £2.55\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n\n    # a bottle of water costs 15p more than a bag of fruit\n    equation2 = Eq(water, fruit + 0.15)\n\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    return solutions[fruit]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    greatest_number = 0\n    nums = [1, 3, 4, 5, 7, 8]\n    for perm in permutations(nums):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0:\n            greatest_number = max(greatest_number, number)\n    return greatest_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq(girls, boys + 30)\n    equation2 = Eq(girls + boys, 500)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    for i in range(2, 91):\n        if 91 % i == 0:\n            return (i, 91 // i)  # Return a tuple of the divisors found\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    total_students = 0\n    boys_excess = 31\n    side_length = 1  # start with a square of side 1, and increase\n    \n    while True:\n        boys = side_length * 4 - 4 if side_length > 1 else 1  # calculate perimeter and subtract corners if not first layer\n        girls = (side_length - 2) * 4 if side_length > 2 else 0  # calculate inner perimeter\n\n        current_excess = boys - girls\n        if current_excess == boys_excess:\n            total_students = side_length ** 2\n            break\n        elif current_excess > boys_excess:  # no solution found, break\n            break\n        else:\n            side_length += 2  # increase to the next possible square (next layer of boys and girls)\n\n    return total_students\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    from math import log10\n\n    # Number of 4's multiplied is 2018 and number of digits it contributes is log10(4) * 2018\n    digits_from_4 = log10(4) * 2018\n    # Number of 25's multiplied is 2018 and number of digits it contributes is log10(25) * 2018\n    digits_from_25 = log10(25) * 2018\n\n    # The total number of digits is the sum of both contributions\n    total_digits = digits_from_4 + digits_from_25\n\n    # Since we are using the logarithm, we need to take the ceiling to get the number of digits\n    from math import ceil\n    num_digits = ceil(total_digits)\n\n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    ribbon_a_length = 10\n    ribbon_b_length = 5 * ribbon_a_length\n    total_length = ribbon_a_length + ribbon_b_length\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    return comb(total_players, team_size)\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + profit_percent / 100)\n    \n    alternative_profit = 5000\n    alternative_selling_price = cost_price + alternative_profit\n    alternative_profit_percent = (alternative_profit / cost_price) * 100\n    \n    return alternative_profit_percent\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for original number of apples\n    original_apples = symbols('original_apples')\n\n    # Equation representing the situation\n    equation = Eq((original_apples - original_apples / 5 - 80), original_apples * 30 / 100)\n\n    # Solve the equation\n    solved = solve(equation, original_apples)\n\n    # Calculate number of apples he had in the end\n    apples_in_end = solved[0] * 30 / 100\n\n    return int(apples_in_end)\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            x3 = 10 - x1 - x2\n            if x1 < x2 < x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14): # Ensure x2 is greater than x1\n            for x3 in range(x2 + 1, 14): # Ensure x3 is greater than x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2  # Since both are in the queue as well\n\n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n\n    return total_people\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let x be the first even number\n    x = symbols('x')\n    \n    # The seven consecutive even numbers are:\n    # x, x+2, x+4, x+6, x+8, x+10, x+12\n    \n    # The fourth number (x+6)\n    fourth_num = x + 6\n    \n    # One-third of the sum of the first (x) and seventh (x+12) numbers\n    one_third_sum = (x + (x + 12)) / 3\n    \n    # Writing the equation based on the information given\n    equation = Eq(fourth_num, one_third_sum + 6)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Calculate the sum of the seven numbers\n    sum_seven_nums = sum([solution[0] + 2*i for i in range(7)])\n    \n    return sum_seven_nums\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    pieces = 2\n    length_each_piece = total_length / pieces\n    return length_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies / 5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = 3/4 * remainder_cookies\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    meters_per_km = 1000\n    ans = km * meters_per_km\n    return ans\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    sum_of_eight_numbers = total_sum - 180\n    average_of_eight_numbers = sum_of_eight_numbers / 8\n    return average_of_eight_numbers\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n    red_orchids = 28\n\n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(red + white, 38)\n\n    solutions = solve((equation1, equation2, equation3), (purple, yellow, white, red))\n\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + red_orchids\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers  # twice as many red as blue markers\n    green_markers = blue_markers + 45  # 45 more green than blue markers\n    \n    total_markers = red_markers + blue_markers + green_markers\n    \n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    highway_length = 45\n    tree_spacing = 9\n    trees_per_side = (highway_length // tree_spacing) + 1\n    total_trees = 2 * trees_per_side  # Because trees are on both sides\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd_number = 1\n    common_difference = 2\n\n    nth_odd_number = first_odd_number + (20 - 1) * common_difference\n\n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    overtook = 5\n    final_position = 2\n    total_cars = overtook + final_position\n    return total_cars\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n    \n    initial_rings = johnny_rings + amber_rings + remaining_rings\n    \n    return initial_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    total_angle_sum = (sides - 2) * 180\n    interior_angle = total_angle_sum / sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_val = 0\n    for i in range(1, 21):\n        sum_val += int(\"5\" * i)\n\n    ans = sum_val % 10000  # Get the last 4 digits\n    return ans\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(x, y):\n    man_days_per_wall = 2 * 3\n    total_man_days = man_days_per_wall * x\n    days_to_build_x_walls_by_y_men = total_man_days / y\n    return days_to_build_x_walls_by_y_men\n\nans = solution(1, 1)  # Example usage with x = 1 wall and y = 1 man"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percent = 0.25\n    women_fraction = 1/5\n\n    men = total_people * men_percent\n    women = total_people * women_fraction\n    children = total_people - men - women\n\n    return int(children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let x be the number of checked shirts\n    # Then 7x is the number of white shirts\n    # The total number of shirts is x + 7x = 72\n    # Solve for x\n    x = symbols('x')\n    equation = Eq(x + 7*x, 72)\n    checked_shirts = solve(equation, x)[0]\n\n    # The number of white shirts is 7 times the number of checked shirts\n    white_shirts = 7 * checked_shirts\n    \n    return white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for num in range(999, 99, -2):  # Start from 999 and decrement by 2 for odd numbers\n        if num % 9 == 0 and (num // 10) % 10 % 4 == 0:  # Check divisibility by 9 and the tens digit by 4\n            return num\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Without the actual pattern and expected figure to insert, the solution cannot be provided.\n    # In a normal scenario, the pattern would be analyzed and the solution derived\n    # mathematically. But since the pattern is not given, it's impossible to solve.\n    # Please provide the pattern or additional information.\n\n    ans = None  # Placeholder for the actual answer after analyzing the pattern\n    return ans\n\n# Since I can't solve without the pattern, I'll return None\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # According to the worst case scenario (Pigeonhole Principle), in order to guarantee obtaining 2 balls of the same colour,\n    # we need to consider the case where we draw the balls in such a way that we are as unlucky as possible.\n    # That is, we keep drawing balls of different colors until we are forced to draw a ball of the same color as one we already have.\n\n    # We have 3 colors, if we draw one of each color we will have 3 balls, and the next ball we draw will definitely be of the same color as one we already have.\n    # We must draw 1 more ball to ensure that at least 2 balls have the same color, and so:\n    # 1 (white) + 1 (red) + 1 (green) + 1 (any) = 4\n\n    # So minimum number of draws to ensure 2 balls of the same color is 4.\n    return 4\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    total_children = 390\n    \n    # one-third of the girls equals to one-half of the boys\n    equation1 = Eq(girls / 3, boys / 2)\n    \n    # total number of children (girls + boys)\n    equation2 = Eq(girls + boys, total_children)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(int(digit) for digit in str(m)) == 5 * sum(int(digit) for digit in str(m + 1)):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # Calculate the total amount spent each period\n    jan_to_apr = 300 * 4\n    may_to_jul = 250 * 3\n    aug_to_sep = 750\n    oct_to_dec = 300 * 3\n\n    # Calculate the total amount spent in the year\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n\n    # Calculate the average per month for the whole year\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = three_quarters_of_number * (4/3)\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - (2 / 100)\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    start_temp = 17\n    end_temp = -2\n    temp_drop = start_temp - end_temp\n    return temp_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age_now = 10\n    father_age_future = 70\n    \n    # The difference in age between Tom and his father will always be the same\n    age_difference = father_age_future - tom_age_now\n    \n    father_age_now = age_difference + tom_age_now\n\n    return father_age_now\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n\n    children_count = total_passengers - (men_count + women_count)\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    train_departure = datetime.strptime('0735', '%H%M')\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = train_departure + journey_duration + walk_duration\n    return arrival_time.strftime('%H%M')\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    possible_values = []\n    for N in range(1, 200):\n        sum_base4 = sum(int(digit) for digit in format(N, '4'))\n        sum_base6 = sum(int(digit) for digit in format(N, '6'))\n        sum_base8 = sum(int(digit) for digit in format(N, '8'))\n        if sum_base4 == 5 and sum_base6 == 8 and sum_base8 == 9:\n            possible_values.append(N)\n    return possible_values\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # For the hundreds place, we cannot have zero so we have only two choices (2 or 3)\n    hundreds_place_options = 2 \n    \n    # For the tens place and ones place, we can use any of the three digits including zero\n    tens_place_options = ones_place_options = 3\n    \n    total_combinations = hundreds_place_options * tens_place_options * ones_place_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_of_six_hotdogs = 1.10\n    number_of_hotdogs = 12\n    cost_per_hotdog = cost_of_six_hotdogs / 6\n    total_cost = cost_per_hotdog * number_of_hotdogs\n    return total_cost\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    cost_per_bag = 16  # cost in pence\n    total_amount_pence = 200  # total amount in pence (£2 = 200p)\n    \n    num_bags = total_amount_pence // cost_per_bag\n    \n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    # Iterate over the possible digits to fill in the square\n    for digit in range(10):\n        # Form the five-digit number by including the current digit\n        number = int(f\"63{digit}25\")\n        # Check if the resulting number is divisible by 45 without remainder\n        if number % 45 == 0:\n            return digit  # Return the digit that makes the number divisible by 45\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    # After giving away 14 acorns, Chip has 14 fewer acorns than he started with\n    # Let's denote the number of acorns Chip had at first as \"c\"\n    # Dale would then have \"total_acorns - c\" acorns\n    # After the exchange, Chip has \"c - 14\" and Dale has \"total_acorns - c + 14\"\n    # Since after giving 14 acorns, Chip and Dale have equal amounts, we can set up an equation:\n    # c - 14 = total_acorns - c + 14\n    # Solving the equation for \"c\", we get:\n    c = (total_acorns + 14 * 2) // 2\n    return c\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2 # Total number of books\n    fiction_books = 6    # Number of fiction books\n    comic_books = 2      # Number of comic books\n\n    # Calculate the number of different arrangements using the formula for permutations of identical items:\n    # n! / (n1! * n2! * ... * nk!)\n    # where n is the total number of items, and ni is the number of identical items of type i.\n    arrangements = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n\n    return arrangements\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 4 == 0 and i % 3 == 0 and (i ** 0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "def solution():\n    # Since 2 is the smallest prime and the only even prime, we want to minimize the number of primes\n    # we use by taking the largest possible primes less than 51.\n    # We'll start by subtracting the largest prime number less than 51, and then continue subtracting\n    # the largest primes until the remainder is a prime number itself or zero.\n    \n    primes = [47, 43, 41, 37, 31, 29, 23, 19, 17, 13, 11, 7, 5, 3, 2]\n    target_sum = 51\n    count = 0\n  \n    for prime in primes:\n        while target_sum >= prime:\n            target_sum -= prime\n            count += 1\n            if target_sum == 0:\n                break\n        if target_sum == 0:\n            break\n        \n    # If the remainder is not zero after using the largest primes, it means we have to use additional\n    # primes (which will be 2, since it's the smallest) to reach the target sum of 51. We don't include\n    # 2 multiple times in the initial list to avoid slow calculations.\n    \n    if target_sum > 0:\n        count += target_sum // 2  # Assuming that the remainder can be composed of 2's\n    \n    return count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    # Increment through all 2-digit numbers and check the conditions\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    science_books, novels = symbols('science_books novels')\n    \n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n    \n    solutions = solve((equation1, equation2), (science_books, novels))\n    \n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (40 - i) for i in range(40))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n\n    for penpals_4_page in range(total_penpals + 1):\n        penpals_3_page = total_penpals - penpals_4_page\n        if (4 * penpals_4_page + 3 * penpals_3_page) == total_pages:\n            return penpals_3_page\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apples_pie_kg = 750 / 1000\n    apples_juice_kg = 1025 / 1000\n    \n    remaining_apples_kg = total_apples_kg - (apples_pie_kg + apples_juice_kg)\n    \n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 15\n    total_people = people_in_front + position_from_back - 1\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    time_period_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / time_period_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Assuming the worst case for the pigeonhole principle.\n    # Draw all balls of one color (5), then all balls of second color (5).\n    # In the worst case, we would still have 2 different colors.\n    # Therefore, we need to draw one more to ensure we have the 3 different colored balls.\n    balls_drawn = 5 + 5 + 1\n    \n    return balls_drawn\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the shorter piece, then 2x would be the longer piece\n    x = symbols('x')\n    equation = Eq(x + 2 * x, 12.75)\n\n    # Solve for x to find the length of the shorter piece\n    shorter_piece_length = solve(equation, x)[0]\n\n    # Return the length of the longer piece, which is twice the shorter piece\n    longer_piece_length = 2 * shorter_piece_length\n    return longer_piece_length\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    left_including_favorite = 14\n    right_excluding_favorite = 6\n    \n    total_books = left_including_favorite + right_excluding_favorite \n    \n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1  # As we are considering relative volumes, we can set it as unity.\n    new_volume = original_volume * (1/2) * (1/2) * (1/2)  # Each dimension is halved, cubic relation for volume\n\n    original_weight = 1200\n    new_weight = original_weight * new_volume\n\n    return new_weight\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of coins Gigi and Lily each get in class\n    gigi_coins_class, lily_coins_class = symbols('gigi_coins_class lily_coins_class')\n\n    # Gigi's total coins after class is 120 + gigi_coins_class\n    # Lily's total coins after class is 24 + lily_coins_class\n    # According to the problem, both got the same amount of coins in class:\n    # gigi_coins_class == lily_coins_class\n    # Also, Gigi has three times Lily's coins after class:\n    # 120 + gigi_coins_class == 3 * (24 + lily_coins_class)\n\n    equation1 = Eq(gigi_coins_class, lily_coins_class)\n    equation2 = Eq(120 + gigi_coins_class, 3 * (24 + lily_coins_class))\n\n    # Solving the equations for the number of coins they each got in class\n    solutions = solve((equation1, equation2), (gigi_coins_class, lily_coins_class))\n\n    # We only need the number of coins they get in the class\n    return solutions[gigi_coins_class]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for card in range(1, 21):\n        if not isprime(card):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    difference = father_age - brian_age\n    \n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # Only even units for odd number\n                if hundreds + tens + ones == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Assuming you have only one pot to boil the eggs\n    # Since it takes 5 minutes to boil one egg, boiling 3 eggs one after another will take:\n    time_to_boil_one_egg = 5\n    number_of_eggs = 3\n    total_time = time_to_boil_one_egg * number_of_eggs\n    # But you can boil more than one egg at the same time, so the least amount of time is:\n    return time_to_boil_one_egg\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    capacity = 6\n    cabins = (students + capacity - 1) // capacity\n    return cabins\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16\n    cookie_dough_g = 45\n    brownie_dough_g = 150\n    num_cookies = 240\n    num_brownies = 2\n\n    total_dough_g = initial_dough_kg * 1000\n    total_dough_used_g = (cookie_dough_g * num_cookies) + (brownie_dough_g * num_brownies)\n    remaining_dough_g = total_dough_g - total_dough_used_g\n    remaining_dough_kg = remaining_dough_g / 1000\n\n    return round(remaining_dough_kg, 2)\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    calories_today = calories_yesterday - 1  # Dan needs to take in at least 1 calorie less\n    return calories_today\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # Inverse of the second day: add 2, then multiply by 2\n    day_before = (remaining_biscuits + 2) * 2\n    # Inverse of the first day: add 4, then multiply by 2\n    total_biscuits = (day_before + 4) * 2\n    return total_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit = 5\n    spend = 8\n    # Bob alternates between depositing and spending\n    cycle_days = 2\n\n    cycle_balance_change = deposit - spend  # Net change every 2 days\n    cycles_completed = total_days // cycle_days\n    remaining_days = total_days % cycle_days\n\n    amount_after_cycles = initial_amount + (cycle_balance_change * cycles_completed)\n    final_amount = amount_after_cycles\n\n    if remaining_days == 1:\n        final_amount += deposit  # Deposit on the first day of the incomplete cycle\n    \n    return final_amount\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]  # Define the pattern\n    pattern_length = len(pattern)   # Length of the pattern\n    # Calculate the index within the pattern for the 1004th element\n    index = (1004 - 1) % pattern_length  \n    # Use the index to find the corresponding value in the pattern\n    ans = pattern[index]\n    return ans\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = sum(range(1, 101)) * (1001 - 1)\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friends, chocolates = symbols('friends chocolates')\n    \n    # if she gave 18 pieces each, she has 41 in excess\n    equation1 = Eq(friends * 18 + 41, chocolates)\n    # if she gave 23 pieces each, she needs 34 more\n    equation2 = Eq(friends * 23, chocolates + 34)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (friends, chocolates))\n\n    # calculate the chocolates left if she gave 20 pieces each\n    chocolates_left = solutions[chocolates] - solutions[friends] * 20\n    \n    return chocolates_left\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    # Let the first term be a, and the common difference be d.\n    # The sum of first 4 terms: a + (a + d) + (a + 2d) + (a + 3d) = 124 => 4a + 6d = 124\n    # If n is the number of terms, sum of the last 4 terms: (a + (n-4)d) + (a + (n-3)d) + (a + (n-2)d) + (a + (n-1)d) = 156\n    # => 4a + (4n - 10)d = 156\n    # And the sum of n terms: n/2 * (2a + (n-1)d) = 210\n    \n    # We have three equations: \n    # 1. 4a + 6d = 124\n    # 2. 4a + (4n - 10)d = 156\n    # 3. n/2 * (2a + (n-1)d) = 210\n\n    # From 1., we get a = (124 - 6d) / 4\n    # Plugging a into 3., we solve for n in terms of d.\n    \n    from sympy import symbols, Eq, solve\n\n    a, d, n = symbols('a d n')\n    equation1 = Eq(4 * a + 6 * d, 124)\n    equation2 = Eq(4 * a + (4 * n - 10) * d, 156)\n    equation3 = Eq(n / 2 * (2 * a + (n - 1) * d), 210)\n\n    # Solve for a, d, n\n    solutions = solve((equation1, equation2, equation3), (a, d, n))\n    # There might be multiple solutions, we need the one where n is an integer and positive\n    for sol in solutions:\n        if sol[n].is_integer and sol[n] > 0:\n            return sol[n]\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let 'm' represent the number of push-ups Mulan can do.\n    # According to the question, Mulan can do more push-ups than the best boy soldier.\n    # The best boy soldier can do 50 push-ups.\n    # Therefore, the inequality that represents how many push-ups Mulan can do is: m > 50\n\n    m = symbols('m')\n    inequality = m > 50\n\n    return inequality\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    from itertools import combinations\n    \n    # Define all potential 3-digit block numbers from 100 to 999\n    candidate_numbers = range(100, 1000)\n\n    # Define the conditions based on the students' statements\n    def is_multiple_of_27(num): return num % 27 == 0\n    def is_multiple_of_7(num): return num % 7 == 0\n    def digits_sum_seventeen(num): return sum(map(int, str(num))) == 17\n    def is_perfect_square(num): return int(num**0.5) == num**0.5\n    def is_factor_of_89100(num): return 89100 % num == 0\n\n    # Combine all condition functions into a list for easy iteration\n    conditions = [is_multiple_of_27, is_multiple_of_7,\n                  digits_sum_seventeen, is_perfect_square,\n                  is_factor_of_89100]\n\n    # Check all combinations of three truth statements\n    for block_number in candidate_numbers:\n        for true_conditions in combinations(conditions, 3):\n            if all(condition(block_number) for condition in true_conditions):\n                false_conditions = set(conditions) - set(true_conditions)\n                if not any(condition(block_number) for condition in false_conditions):\n                    return block_number\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_needed = 40\n    blown_up = 22\n    burst = 3\n    still_needed = total_needed - (blown_up - burst)\n    return still_needed\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    ans = 694 * 27\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_amount = 200\n    spent_on_book = initial_amount * 15 / 100\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 30 / 100\n    remaining_money = remaining_after_book - spent_on_dvd\n    return remaining_money\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams, results = 10, [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    total_games = teams * (teams - 1) // 2\n    games_played = sum(results)\n    games_remaining = total_games - games_played\n    return games_remaining\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # Since the children must all get different number of pieces and at least one each,\n    # the minimum distribution will start from 1, 2, ..., 8 (consecutive numbers)\n    # Let's find out the minimum sum of 8 consecutive numbers\n    min_sum = sum(range(1, 9))\n\n    # Now we need to distribute the remaining candies to maximize the number of candies that\n    # the child who gets the most can have\n    remaining_candies = 88 - min_sum\n\n    # The child who gets the most will be the one represented by the last number in the \n    # consecutive range. So we start from 8 and keep adding 1 to every child's share in a round-robin\n    # manner until we run out of candies\n    most_pieces = 8\n\n    while remaining_candies >= 8:\n        most_pieces += 8\n        remaining_candies -= 8\n\n    # Give the remaining candies to the child who gets the most\n    most_pieces += remaining_candies\n\n    return most_pieces\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the number of stones left:\n    # Stack A: 20 stones, Stack B: 16 stones\n    # Jerry should aim to leave both stacks with the same number of stones.\n    # Because in a game of nim, the player who can create a situation where all\n    # piles have the same number of objects will win given perfect play by both\n    # players, as they will always be able to return to this state after the\n    # opponent's move.\n    stones_taken_by_jerry = 20 - 16\n    stack = 'A'  # Jerry should take from Stack A to make the number of stones equal\n\n    return stones_taken_by_jerry, stack\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    halfway_number = (15 + 37) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    # Number of pails filled\n    num_pails = 4\n    # Volume each pail can hold\n    volume_per_pail = 4\n    # Volume of water left\n    remaining_water = 7\n\n    # Calculating the original volume of water\n    original_volume = (num_pails * volume_per_pail) + remaining_water\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    boys_to_girls_ratio = 9 / 7\n    more_boys = 16\n\n    # Let's represent the number of girls with the variable 'g'.\n    # Therefore, the number of boys will be 'g * boys_to_girls_ratio'.\n    # According to the problem, the number of boys is 16 more than the number of girls.\n    # Hence, the equation will be: g * boys_to_girls_ratio = g + 16\n\n    # Now, we solve for 'g'.\n    g = more_boys / (boys_to_girls_ratio - 1)\n    total_pupils = g + (g * boys_to_girls_ratio)  # Total pupils = number of girls + number of boys\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    total_students = 37\n    \n    # Calculate the sum without a mistake\n    correct_sum = sum(range(1, 1 + total_students*3, 3))\n    \n    # Find the difference caused by the mistaken subtraction\n    difference = correct_sum - 2011\n    \n    # Since the subtraction causes a difference of twice the correct value,\n    # dividing by 6 gives the term number where the mistake was made\n    mistake_position = difference // 6\n    \n    return mistake_position\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_cake = 10 / 12\n    cakes_made = 25 / milk_per_cake\n    return int(cakes_made)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Total sum of the balls is given as 160\n    total_balls = 160\n    # There are 5 students and balls are consecutive natural numbers,\n    # so the middle number (third number) multiplied by 5 gives the total.\n    # Let the middle number be x; then 5x = total_balls.\n    # The series of balls will be (x-2), (x-1), x, (x+1), (x+2).\n    # As (x-2) + (x-1) + x + (x+1) + (x+2) = 5x which equals to total_balls.\n    \n    # Find the middle number x\n    x = total_balls // 5\n\n    # The student with the most balls has (x+2) balls.\n    most_balls = x + 2\n\n    return most_balls\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    wine_gums_per_child = total_wine_gums / children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):  # Hundreds place can't be 0\n        for ones in range(10):     # Ones place can be 0-9\n            # Construct the three-digit number with 0 in tens place\n            M = 100 * hundreds + ones\n            # Sum of all digits in M\n            S = hundreds + ones \n            # Check if M is 67 times the sum of its digits\n            if M == 67 * S:\n                # Reverse the digits of M to form a new number\n                M_reversed = 10 * hundreds + 100 * ones\n                # Return the result of dividing the reversed number by the sum of digits\n                return M_reversed // S\n    return None\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # converting 2 meters to centimeters\n    piece_length_cm = 6\n\n    num_complete_pieces = stick_length_cm // piece_length_cm\n\n    return num_complete_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    return comb(10, 7)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "from sympy import symbols, Rational\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n\n    # Define the equation based on the given complex fraction\n    equation = 1 + 1/(a + 1/(b + 1/c)) - Rational(13, 10)\n\n    # Solve the equation for a, b, c\n    solutions = []\n    for val_a in range(1, 100): # arbitrary upper range to check for a\n        for val_b in range(1, 100): # arbitrary upper range to check for b\n            # Since c is in the denominator, it cannot be zero.\n            for val_c in range(1, 100): # arbitrary upper range to check for c\n                if equation.subs({a: val_a, b: val_b, c: val_c}) == 0:\n                    solutions.append((val_a, val_b, val_c))\n                    break  # we break because we only need one valid solution\n            if solutions:\n                break\n        if solutions:\n            break\n    \n    a_val, b_val, c_val = solutions[0]\n    return a_val + 2 * b_val + 3 * c_val\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    exponent = 30\n    ones_digit = (base ** exponent) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n\n    num_days = total_pages / pages_per_day\n\n    return int(num_days)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_points = 52\n    points_correct = 5\n    points_wrong = -3\n\n    for correct in range(21):\n        wrong = 20 - correct\n        if correct * points_correct + wrong * points_wrong == total_points:\n            return correct\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    # The question is essentially asking for the smallest number of parts\n    # into which the number 100 can be partitioned, with each part being unique\n    # This classic problem is solved by realizing that the minimum sum of N unique numbers\n    # is given by the sum of the first N natural numbers, due to the triangular number formula\n\n    max_peaches = 100\n    day = 0\n    total_peaches_eaten = 0\n\n    # Loop until the total_peaches_eaten exceeds max_peaches\n    while total_peaches_eaten < max_peaches:\n        day += 1\n        total_peaches_eaten += day\n\n    # The last day has exceeded the max_peaches, so we subtract one day\n    return day - 1\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n\n    ans = right_side / left_side\n\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    sum_numbers = sum(range(1, 21, 6))\n    return sum_numbers\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_mass = 600  # total mass of the sugar solution\n    concentration = 0.48  # concentration of the sugar solution\n    \n    sugar_mass = total_mass * concentration  # mass of sugar in the solution\n    water_mass = total_mass - sugar_mass  # mass of water in the solution\n    \n    return water_mass\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    return 53.4 - 2.5\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    number_of_terms = 9\n    value_to_add = 5\n    ans = sum([value_to_add for _ in range(number_of_terms)])\n    return ans\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if 1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a == 1370:\n                        return 1000*a + 100*b + 10*c + d\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    # Adding the fractional parts (4/5 five times)\n    fractional_part = 4/5 * 5\n\n    # Adding the integer parts\n    integer_part = 19 + 199 + 1999 + 19999 + 199999\n\n    # Sum of integer and fractional parts\n    total_sum = integer_part + fractional_part\n\n    return total_sum\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n\n    result = total_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n\n    years_until_total_35 = (35 - current_total_age)\n\n    return years_until_total_35\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_two_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_in_two_tests\n\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Denote the ages of the oldest three, youngest three, and the middle one\n    y1, y2, y3 = symbols('y1 y2 y3')\n    o1, o2, o3 = symbols('o1 o2 o3')\n    middle = symbols('middle')\n\n    # The youngest three's sum\n    equation1 = Eq(y1 + y2 + y3, 42)\n\n    # The difference between consecutive ages is the same\n    # Since we don't know the exact difference, we call it d\n    d = symbols('d')\n\n    # Define relations between ages based on arithmetic sequence property\n    equation2 = Eq(y2, y1 + d)\n    equation3 = Eq(y3, y2 + d)\n    equation4 = Eq(o3, middle + d)\n    equation5 = Eq(o2, middle)\n    equation6 = Eq(o1, o2 - d)\n\n    # The sum of the ages of the oldest three dwarfs\n    equation7 = Eq(o1 + o2 + o3, middle + o1 + o3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (y1, y2, y3, o1, o2, o3, middle, d))\n\n    # The equation for the sum of the oldest three ages in terms of the middle age (since the difference cancels out)\n    sum_oldest = solutions[middle] + solutions[o1] + solutions[o3]\n\n    return sum_oldest\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's represent the current age of the dad and his son with symbols\n    dad_current, son_current = symbols('dad_current son_current')\n\n    # We're given that 6 years ago, the dad's age was 5 times the son's age\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n\n    # We're also given that the sum of their current ages is 78\n    equation2 = Eq(dad_current + son_current, 78)\n\n    # Now we solve the system of equations for the dad's and son's ages\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    # We're interested in the dad's current age\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = sum(2*(i/j) for j in range(1, 9) for i in range(1, j+1))\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    terry, gerald = symbols('terry gerald')\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n    \n    solutions = solve((equation1, equation2), (terry, gerald))\n    \n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the total number of sweets is x\n    x = symbols('x')\n    \n    # According to the question,\n    # Fruit drops = 6 = (2/7) * Number of milk chocolates\n    # Milk chocolates = (3/4) * Total number of sweets\n    # We can set up the equation as:\n    # 6 = (2/7) * (3/4) * x\n    \n    equation = Eq(6, (2/7) * (3/4) * x)\n    \n    # Now we can solve for x\n    total_number_of_sweets = solve(equation, x)\n\n    return total_number_of_sweets[0]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    # Let the cost of one football be x dollars and one volleyball be y dollars.\n    # From the first condition: x + 2y = 60 (Equation 1)\n    # From the second condition: 2x + 16 = 60 (Equation 2)\n    # Solving the two equations, we get:\n    x = (60 - 16) // 2  # Simplify Equation 2 to find the cost of one football\n    y = (60 - x) // 2   # Substitute the value of x in Equation 1 to find the cost of one volleyball\n    return y\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    ages = [7, 7, 8, 9, 11]\n    # Sort the ages to find the second oldest\n    ages.sort()\n    # The second oldest is the second last element in the sorted list\n    second_oldest = ages[-2]\n    return second_oldest\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "from itertools import permutations\n\ndef solution():\n    # Guess 1 gives us 1703 with two correct digits in the correct place\n    # Guess 2 gives us 2745 with two correct digits in the wrong place\n    # Guess 3 gives us 3541 with all digits correct but in the wrong place\n\n    # Since the third guess digits are all correct\n    # The possibilities are the permutations of 3541\n    possible_numbers = [''.join(p) for p in permutations('3541')]\n    for number in possible_numbers:\n        # Check against the conditions for the first guess\n        if (number[0] == '1' and number[2] == '0') or (number[0] == '1' and number[3] == '3') or (number[1] == '7' and number[2] == '0') or (number[1] == '7' and number[3] == '3'):\n            # Check against the conditions for the second guess\n            if (number[0] != '2' and '2' in number[1:]) and (number[1] != '7' and '7' in number[0] + number[2:]) and (number[2] != '4' and '4' in number[:2] + number[3]) and (number[3] != '5' and '5' in number[:3]):\n                # We now have the correct number\n                return int(number)\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    return 1000 - 630\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_n = (n * (n + 1) // 2) ** 2\n    return sum_n\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    num_books = 3\n    arrangements = factorial(num_books)\n    return arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for combo in permutations('ABCDE'):\n        if combo.index('A') != 0 and combo.index('A') != 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_players = 16\n    ans = math.ceil(math.log(num_players, 2))\n    return ans\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    pink = 3\n    yellow = pink + 7\n    red = 3 * yellow\n    total = red + yellow\n    return total\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'g' be the number of girls in the morning\n    g = symbols('g')\n    # Boys are 50% more than girls, so boys will be 1.5 times girls\n    b = 1.5 * g\n\n    # In the afternoon, 12 boys and 12 girls joined\n    new_b = b + 12\n    new_g = g + 12\n    \n    # The new ratio of boys to girls is 19 : 14\n    equation = Eq(new_b / new_g, 19 / 14)\n\n    # Solve for the number of girls\n    solution = solve(equation, g)\n    g_num = solution[0]\n    b_num = 1.5 * g_num\n\n    # Total number of children is boys + girls in the afternoon\n    total_children = (b_num + 12) + (g_num + 12)\n\n    return total_children\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Original ratio: 3 apples / 8 oranges\n    original_ratio_eq = Eq(apples/oranges, 3/8)\n\n    # New ratio after removing one apple: (apples - 1) / oranges = 1 / 3\n    new_ratio_eq = Eq((apples - 1)/oranges, 1/3)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio_eq, new_ratio_eq), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for units in range(0, 10):\n                if tens < hundreds and tens < units and hundreds != units:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n    from sympy import Symbol, solve\n\n    # This is a classic problem of derangements, also known as subfactorials or !n\n    # The number of derangements for n items is given by !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    # Alternatively, the recursive formula: !n = (n - 1) * (!(n - 1) + !(n - 2))\n\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n    \n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    for pencils in range(11):\n        notebooks = 10 - pencils\n        if (pencils * 9 + notebooks * 3) == 48:\n            return pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_seats = 9 * 36\n    total_students = 500\n    second_floor_students = total_students - first_floor_seats\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    last_term = 56\n    ratio = 2\n\n    next_term = last_term * ratio\n\n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (31 - i) for i in range(31))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    # prime factors of 2 and 5 will combine to form a zero\n    prime_factor_2 = 0\n    prime_factor_5 = 0\n    \n    # count the number of 2s and 5s in the prime factorization of the product\n    for i in range(1, 51):\n        while i % 2 == 0:\n            prime_factor_2 += 1\n            i = i // 2\n        while i % 5 == 0:\n            prime_factor_5 += 1\n            i = i // 5\n    \n    # the number of zeros will be the minimum of the count of 2s and 5s\n    count_zeros = min(prime_factor_2, prime_factor_5)\n    \n    return count_zeros\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    # Loop through each number from 3 to 47\n    for i in range(3, 48):\n        # Convert the number to a string to iterate over its digits\n        digits = str(i)\n        # Loop through each digit of the string\n        for d in digits:\n            # Increment count if the digit is '7'\n            if d == '7':\n                count += 1\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the total number of cards Helen and Oliver had initially\n    helen_initial, oliver_initial = 18, 22\n\n    # Define the symbols for the total number of cards helen and oliver have after several rounds\n    helen, oliver = symbols('helen oliver')\n\n    # First equation represents initial total number of cards\n    # Second equation represents the difference in number of cards after several rounds\n    equation1 = Eq(helen + oliver, helen_initial + oliver_initial)\n    equation2 = Eq(helen - oliver, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (helen, oliver))\n\n    return solutions[helen]\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    # Given that value of card A is 40\n    card_a_value = 40\n    \n    # Given that value of card A is twice that of card B\n    card_b_value = card_a_value / 2\n    \n    # Given that the value of card B is twice that of card C\n    card_c_value = card_b_value / 2\n    \n    # Calculating the total value of all 3 numbers\n    total_value = card_a_value + card_b_value + card_c_value\n    \n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250  # Total weight of the sugar solution\n    concentration = 0.65  # The concentration of sugar in the solution\n    sugar_weight = total_weight * concentration  # The weight of the sugar in the solution\n    return sugar_weight\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first term of the six consecutive even numbers be x.\n    # Therefore, the numbers are x, x+2, x+4, x+6, x+8, x+10.\n    # The sum of these numbers is 6x + (2+4+6+8+10), which equals 510.\n    total_sum = 510\n    # Calculate the sum of the constants 2+4+6+8+10.\n    const_sum = 2 + 4 + 6 + 8 + 10\n    # Deduct the constant sum from the total sum and divide by 6 to find x.\n    x = (total_sum - const_sum) // 6\n\n    # Mean is the sum of all numbers divided by the count, so mean is total_sum / 6.\n    mean = total_sum / 6\n\n    # Median of even number of terms is the average of two middle values.\n    # For six numbers, it's average of 3rd and 4th term which are x+4 and x+6.\n    # (x+4 + x+6)/2 simplifies to x+5.\n    median = x + 5\n\n    # Difference between mean and median\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    starting_height = 12\n    climb_up_1 = 23\n    climb_down = 31\n    climb_up_2 = 17\n\n    current_height = starting_height + climb_up_1 - climb_down + climb_up_2\n\n    return current_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    import math\n\n    N = 5 ** 100\n    num_digits = int(math.log10(N)) + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mangoes, strawberries = symbols('mangoes strawberries')\n    \n    # Initial condition: mangoes = strawberries + 448g\n    equation1 = Eq(mangoes, strawberries + 448)\n    \n    # After giving away 900g of mangoes, strawberries become twice the mass of remaining mangoes\n    # strawberries = 2 * (mangoes - 900)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n    \n    # Solving equations for the mass of strawberries\n    solutions = solve((equation1, equation2), (mangoes, strawberries))\n    \n    return solutions[strawberries]\n    \nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be n\n    # The consecutive numbers are n, n+1, n+2, n+3, n+4\n    # Their sum is 5n + 10 (combining the constant terms 1+2+3+4)\n    # Set up the equation 5n + 10 = 40 and solve for n\n    n = (40 - 10) / 5\n    return n\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    # Subtract 1 because 1 is neither prime nor composite\n    composite_numbers = total_numbers - prime_numbers - 1 \n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(int(digit) for digit in str(year)) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all 5-digit numbers from given digits without repetition\n    numbers = [''.join(p) for p in permutations('0134689', 5) if p[0] != '0']\n    \n    # Filter numbers that are multiples of 9 (the sum of digits of a multiple of 9 is divisible by 9)\n    multiples_of_9 = [int(num) for num in numbers if sum(int(digit) for digit in num) % 9 == 0]\n\n    # Sort the numbers to get the largest and smallest\n    sorted_multiples = sorted(multiples_of_9)\n\n    # Calculate the largest possible value of (M - N) / 9\n    M = sorted_multiples[-1]\n    N = sorted_multiples[0]\n    \n    return (M - N) // 9\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    initial_sweets = 33\n    sweets_given_away = 8\n    remaining_sweets = initial_sweets - sweets_given_away\n    return remaining_sweets\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '2']\n    all_combinations = [''.join(p) for p in permutations(digits)]\n    max_number = int(max(all_combinations))\n    return max_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    number = \"four million four hundred and four\".replace(\" million\", \"000000\").replace(\" hundred\", \"00\").replace(\"four\", \"4\")\n    ans = int(number)\n    return ans\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    salt_from_first = 30 * 0.30\n    salt_from_second = 20 * 0.20\n    total_salt = salt_from_first + salt_from_second\n    total_solution = 30 + 20\n    final_concentration = 0.10\n\n    water_to_add = (total_salt - (final_concentration * total_solution)) / (1 - final_concentration)\n    \n    return water_to_add\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n\n    # Find the difference made by the incorrect addend\n    difference = incorrect_addend - correct_addend\n\n    # Subtract the difference from the incorrect sum to get the correct sum\n    correct_sum = incorrect_sum - difference\n\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    # Given values\n    total_distance = 3000  # meters\n    johnson_speed = 600    # meters per minute\n    vicky_speed = 250      # meters per minute\n    \n    # Time taken for Johnson and Vicky to finish the race respectively\n    johnson_time = total_distance / johnson_speed\n    vicky_time = total_distance / vicky_speed\n    \n    # Time difference\n    time_difference = vicky_time - johnson_time\n\n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To guarantee 29 balls of one color, 28 balls of another, and 10 of the last,\n    # we should consider the worst case scenario where we pick the maximum number \n    # of balls without satisfying the condition.\n\n    # Worst case scenarios considering the pigeonhole principle:\n    #  - We pick all 30 white balls, still need at least 29 of another color.\n    #  - We then pick all 40 red balls, now we have at least 29 red balls, but still need 28 of another color.\n    #  - To make sure we have 28 of the last color, since we already have up to 29 red balls,\n    #    we would need to pick 28 blue balls.\n    \n    # Adding them up, 30 (white) + 40 (red) + 28 (blue) gives us the number of balls needed.\n    total_balls_needed = 30 + 40 + 28\n    return total_balls_needed\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    n4 = 39  # fourth term\n    n12 = 57 # twelfth term\n    d = (n12 - n4) / (12 - 4)  # common difference\n    n1 = n4 - 3 * d  # first term\n\n    return n1\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Pigeonhole principle: If n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n\n    # In the worst case scenario, we can draw all different cards without repeating a number.\n    # That is 2 cards of each number (2 * 13 = 26).\n\n    # To ensure we get 3 cards of the same number, we need to draw one more card.\n    # This will give us at least one set of three cards with the same number.\n\n    # Therefore, the answer is the worst case (without a match) + 1.\n    ans = 26 + 1\n    return ans\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    prime_numbers = list(primerange(1, 21))  # Generate a list of prime numbers from 1 to 20\n    total_numbers = 20  # Total number of cards\n\n    proportion = len(prime_numbers) / total_numbers  # Calculate the proportion\n\n    return round(proportion, 2)  # Return the proportion as a decimal rounded to 2 decimal places\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    number1 = 3.2\n    number2 = 5.6\n    average = (number1 + number2) / 2\n    return average\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_sum = 12 + 4 + 6 + 4 + 2 + 9 + 7\n    total_numbers = 8\n    desired_mean = 8\n\n    total_sum = total_numbers * desired_mean\n    missing_number = total_sum - known_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "def solution():\n    from itertools import permutations\n\n    # All possible permutations of the students without any conditions\n    total_permutations = permutations('ABCDEFGH')\n\n    count = 0\n\n    for perm in total_permutations:\n        if abs(perm.index('C') - perm.index('A')) == abs(perm.index('C') - perm.index('B')) == 1 \\\n            and ((perm.index('D') + 1 == perm.index('E')) or (perm.index('D') - 1 == perm.index('E'))) \\\n                and ((perm.index('F') + 1 == perm.index('G')) or (perm.index('F') - 1 == perm.index('G'))):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    prices = set()\n\n    for notebook in notebooks:\n        for calendar in calendars:\n            prices.add(notebook + calendar)\n\n    return len(prices)\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    num_str = \"123\"\n    total = 0\n\n    for i in range(1, 124):\n        total += int(num_str * i)\n\n    # Convert to a string to get the hundreds place\n    total_str = str(total)\n    hundreds_digit = total_str[-3] if len(total_str) >= 3 else '0'\n\n    return int(hundreds_digit)\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    original_length = 90  # length of the painting in cm\n    lego_length_reduction = 70.5  # reduction of length in cm for the lego\n    length_to_breadth_ratio = 5 / 2  # ratio of length to breadth\n\n    # Length of the lego after reduction\n    lego_length = original_length - lego_length_reduction\n\n    # Calculate the breadth of the lego using the ratio\n    lego_breadth = lego_length / length_to_breadth_ratio\n\n    return int(lego_breadth)  # Return the maximum size in whole numbers (cm)\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of lime solution transferred from each bottle\n    x = symbols('x')\n\n    # After transfer, bottle A will have (5-x) litres of the original solution and x litres from bottle B\n    # After transfer, bottle B will have (3-x) litres of the original solution and x litres from bottle A\n    # Set up the equation for the concentration equalling each other\n    # Concentration in bottle A after mixing = (Initial lime in A + lime from B added to A) / final total volume in A\n    # Concentration in bottle B after mixing = (Initial lime in B + lime from A added to B) / final total volume in B\n    # The following equations represent these relationships:\n    equationA = Eq(((5 * 0.10) - (x * 0.10) + (x * 0.20)) / (5), (0.10 - (0.10 * x / 5) + (0.20 * x / 5)))\n    equationB = Eq(((3 * 0.20) - (x * 0.20) + (x * 0.10)) / (3), (0.20 - (0.20 * x / 3) + (0.10 * x / 3)))\n\n    # Solve the system of equations\n    solution = solve((equationA, equationB), (x))\n\n    return solution[x]\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = total_amount / 3  # since after losing a coin she has twice as much as her brother\n\n    for coin in [50, 20, 10, 5]:\n        if total_amount - coin == 2 * brother_amount:\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    bananas_lovers = 18\n    apples_lovers = 12\n\n    both_lovers = bananas_lovers + apples_lovers - total_people\n\n    return both_lovers\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    # Jaan's total time to finish the race\n    jaan_time = 200 / 8  # distance / speed\n    \n    # Kane's distance when Jaan finished\n    kane_distance = 200 - 12.5\n    \n    # Kane's speed = Kane's distance / Jaan's time\n    kane_speed = kane_distance / jaan_time\n    \n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10  # 110p is £1.10\n\n    amount_to_pay = (cake_price + milk_price) - voucher\n    return amount_to_pay\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_pay_rate = 12\n    overtime_multiplier = 1 + 1/4\n    overtime_pay_rate = normal_pay_rate * overtime_multiplier\n    normal_hours = 8\n    overtime_hours = 10 - normal_hours\n    total_pay = (normal_hours * normal_pay_rate) + (overtime_hours * overtime_pay_rate)\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    return 111 - 87\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    ans = 35 / 100 * 60\n    return ans\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y, e = symbols('y e')  # y for younger brother, e for elder brother\n\n    equation1 = Eq(y + e, 42)  # total age now\n    equation2 = Eq(y, e/2)  # younger brother's age when the elder was the age of the younger now\n\n    solutions = solve((equation1, equation2), (y, e))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 3 and number % 7 == 3:\n            return number\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # The given number is a repetition of the sequence 928\n    sequence = '928'\n\n    # Since the number is 99 digits long, we need to find how many complete sequences of '928' there are.\n    num_repeats = 99 // len(sequence)\n\n    # Calculate the remaining number of digits that don't complete a full sequence\n    remainder_digits = 99 % len(sequence)\n\n    # Create the number with complete sequences of '928'\n    complete_num_str = sequence * num_repeats\n\n    # Add the remaining digits to the number\n    complete_num_str += sequence[:remainder_digits]\n\n    # Convert the string to an integer\n    complete_num = int(complete_num_str)\n\n    # Find the remainder when dividing by 9\n    ans = complete_num % 9\n    \n    return ans\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let John, Raj, and Pete's rates of working be J, R, and P respectively.\n    J, R, P = symbols('J R P')\n\n    # Together they finish in 1 hour, thus J + R + P = 1 job/hour\n    equation1 = Eq(J + R + P, 1)\n\n    # John and Raj together finish in 1 hr 12 min = 1.2 hours, thus J + R = 1/1.2 jobs/hour\n    equation2 = Eq(J + R, 1 / 1.2)\n\n    # Raj and Pete together finish in 1 hr 30 min = 1.5 hours, thus R + P = 1/1.5 jobs/hour\n    equation3 = Eq(R + P, 1 / 1.5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (J, R, P))\n\n    # Raj's time to finish the job by himself would be inverse of his rate\n    raj_time_hours = 1 / solutions[R]\n\n    # Convert hours to minutes\n    raj_time_minutes = raj_time_hours * 60\n\n    return raj_time_minutes\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # Try to make sure to get at least three of the same color,\n    # you have to consider the worst-case scenario.\n    # That is, picking balls in such a way that you do not get three of the same color \n    # until you've picked the maximum possible number of balls.\n\n    # So we pick 2 balls from each color.\n    # After we've done that, the next ball we pick\n    # will ensure that we have at least three of one color.\n    balls_needed = (2 * 4) + 1\n    return balls_needed\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are looking for a number which leaves a remainder of 1 when divided \n    # by 5, 6, or 7. This translates to the congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    #\n    # We use the Chinese Remainder Theorem to solve this system of congruences.\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    solution, _ = solve_congruence(*congruences)\n\n    return solution\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    n = Symbol('n')\n    # Each team plays with each other once at home and once away, which is n-1 teams,\n    # thus 2 * (n-1) matches for one team. Total matches is this number times number of teams\n    # divided by 2 (as each match is counted twice for two different teams).\n    equation = 2 * (n * (n - 1) / 2) - 30\n\n    num_teams = solve(equation, n)[0]  # solve equation and take the first (positive) solution\n\n    return num_teams\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes = 66.5 / apples_per_box\n    return round(total_boxes)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later when their sum of ages will be 40.\n    # Currently, the sum of George's age and his sister's age is 34.\n    current_sum_ages = 34\n    future_sum_ages = 40\n    \n    # Each year, both George and his sister get 1 year older, so together they add 2 years to the sum of their ages.\n    # We want to find out how many years it takes for the sum of their ages to increase from 34 to 40.\n    # Therefore, we can set up the equation: current_sum_ages + x*2 = future_sum_ages\n    # Solving for x:\n    x = (future_sum_ages - current_sum_ages) / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # symbol for the length one turn wraps around the tree\n    turn_length = symbols('turn_length')\n\n    equation1 = Eq(10 * turn_length - 3, 12 * turn_length + 3)\n    \n    # solve for the length one turn wraps around the tree\n    turn_length_solution = solve(equation1, (turn_length))\n\n    # calculate the length of rope left after 8 turns\n    rope_left = 8 * turn_length_solution[0]\n    \n    return rope_left\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Using the Pigeonhole Principle\n    countries = 11\n    participants_per_country_to_ensure = 5\n  \n    # If there are 4 participants from each country then you don't have 5 from the same country\n    # Therefore multiply the number of countries by one less than the number we need to ensure\n    max_participants_without_ensuring = countries * (participants_per_country_to_ensure - 1)\n  \n    # Add one more participant to ensure at least one country has 5 participants\n    min_participants_to_ensure = max_participants_without_ensuring + 1\n  \n    return min_participants_to_ensure\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    x, y, z = solutions[x], solutions[y], solutions[z]\n    return x + y + z\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    ans = 73 + 28 + 37 + 82\n    return ans\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x represents the total amount of money Mary had\n    equation = Eq(x * (3/7) - x * (4/7), 12)\n\n    total_amount = solve(equation, x)[0]\n\n    amount_spent_on_bag = total_amount * (3/7)\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 28)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        top_number = A*1000 + B*100 + B*10 + C \n        bottom_number = B*1000 + C*100 + C*10 + D\n        multiplied_number = A*1000 + B*100 + C*10 + D\n        if top_number + bottom_number == multiplied_number:\n            return A + B + C + D\n            \nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Let x be the age of the fourth dwarf (middle term in the arithmetic sequence)\n    # Since the ages are consecutive, the youngest three dwarfs' ages are x-3, x-2, and x-1\n    # Their total age is (x-3) + (x-2) + (x-1) = 42\n    # Simplifying, we get 3x - 6 = 42, so x = (42 + 6) / 3\n    \n    x = (42 + 6) / 3\n    \n    # The oldest three dwarfs' ages will then be x+1, x+2 and x+3\n    # Their total age is (x+1) + (x+2) + (x+3)\n    \n    total_age_oldest = (x + 1) + (x + 2) + (x + 3)\n    \n    return total_age_oldest\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    number = 111\n    dots = 7\n    ans = number - sum(range(1, dots))\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    sum_of_squares = (1/6) * n * (n + 1) * (2 * n + 1) * (5 ** 2)\n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # Let's denote the number of toys made by Factory A, B, and C as a, b, and c respectively.\n    total_toys = 659  # Total toys made by A, B, and C\n    ab_toys = 447  # Total toys made by A and B\n    bc_toys = 335  # Total toys made by B and C\n    \n    # The number of toys made by Factory C can be found by subtracting the number of toys made by A and B from the total:\n    c = total_toys - ab_toys  # Toys made by Factory C\n    \n    # Now, we can find the number of toys made by Factory B by subtracting the number of toys made by Factory C from the total made by B and C:\n    b = bc_toys - c  # Toys made by Factory B\n    \n    return b\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for original_num in range(10, 100):\n        tens_digit = original_num // 10\n        ones_digit = original_num % 10\n        new_num = ones_digit * 10 + tens_digit\n        if new_num == (original_num // 3) + 3:\n            return original_num\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    # If he gives 13 stickers to each pupil, he will have an excess of 190 stickers.\n    equation1 = Eq(stickers - 13 * pupils, 190)\n\n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers.\n    equation2 = Eq(stickers - 17 * pupils, 50)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    \n    # Let the number of boys be b\n    # Therefore, the number of girls will be b + 30\n    # According to the given problem, we have the equation:\n    # b + (b + 30) = 500\n    # Simplifying the equation gives us:\n    # 2b + 30 = 500\n    # 2b = 470\n    # b = 235\n    # Hence, the number of girls will be:\n    b = (total_pupils - 30) // 2\n    girls = b + 30\n\n    return girls\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n\n    equation1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n    equation2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n\n    solutions = solve((equation1, equation2), (file_cost, storybook_cost))\n\n    total_cost = solutions[file_cost] + solutions[storybook_cost]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_tray = 1\n    additional_sausages = 21\n\n    total_sausages_before = initial_trays * initial_mean\n    total_trays_now = initial_trays + additional_tray\n    total_sausages_now = total_sausages_before + additional_sausages\n    \n    new_mean = total_sausages_now / total_trays_now\n    \n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit goes from 1 to 9\n        for tens in range(0, 10):  # tens digit goes from 0 to 9\n            for units in range(1, 10):  # units digit goes from 1 to 9\n                if tens < hundreds and tens < units:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    return 3.5 / 0.25\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (263 + 137) / 20  # Speed of the train in m/s\n    length_of_second_bridge = speed * 27 - 137  # Length of the second bridge in meters\n\n    return length_of_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n\n    total = rani + brenda\n    equal_amount = total // 2\n\n    money_to_give = brenda - equal_amount\n\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    \n    equation1 = Eq(blue + red, 125)\n    equation2 = Eq(2 * blue / 5, 3 * red / 5)\n    \n    solutions = solve((equation1, equation2), (blue, red))\n    \n    blue_balls = solutions[blue]\n    red_balls = solutions[red]\n    \n    return blue_balls - red_balls\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "def solution():\n    from math import factorial\n\n    # Total books and students\n    books = 7\n    students = 3\n\n    # Calculate total number of ways\n    # Every student gets at least one book. We choose which students get the extra books.\n    # The remaining books can be distributed in any order.\n    # Thus, we are choosing 4 books from 7 books to distribute to students after each has received one.\n    ans = factorial(students) * factorial(books) // (factorial(books - students) * factorial(students - 1))\n\n    return ans\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watch, handbag = symbols('watch handbag')\n    \n    equation1 = Eq(3*watch + 5*handbag, 915)\n    equation2 = Eq(4*watch + 2*handbag, 632)\n    \n    solutions = solve((equation1, equation2), (watch, handbag))\n    \n    total_cost = 2*solutions[watch] + 2*solutions[handbag]\n    \n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # Assume the child with the least pieces gets 1 piece of candy,\n    # the next one gets 2 pieces, and so on.\n    # The minimum total pieces distributed to 7 children (except the one with most pieces) would be:\n    # 1+2+3+4+5+6+7 = 28 pieces\n\n    min_pieces_distributed_to_seven = sum(range(1, 8))\n    \n    # The remaining candies go to the 8th child, who gets the most.\n    pieces_for_eighth_child = 88 - min_pieces_distributed_to_seven\n\n    return pieces_for_eighth_child\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 100\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    \n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Calculate the difference in years between the two given dates\n    year_difference = 2008 - 1996\n    \n    # Calculate the age of the grandmother on 1st December 1996\n    grandmother_age_1996 = 80 - year_difference\n    \n    # Since the daughter was 40 years old on 1st December 1996,\n    # the grandmother's age when her daughter was born is the difference\n    # of the grandmother's age in 1996 and the daughter's age in 1996\n    ans = grandmother_age_1996 - 40\n    \n    return ans\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are 3 people to whom A can pass the ball initially (not including A).\n    first_pass_options = 3\n    # For the second pass, the person who got the ball from A can pass to 2 other people (not A and not themselves).\n    second_pass_options = 2\n    # For the third pass, the person who got the ball from the second pass can only pass it back to A to complete the requirement.\n    third_pass_options = 1\n    \n    count = first_pass_options * second_pass_options * third_pass_options\n    return count\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    eq1 = Eq(nicole, 3 * eddy)\n    eq2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((eq1, eq2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(8)        # Total ways without restrictions\n    together_ways = factorial(7) * 2 # A and B together are treated as single unit\n    \n    # C and D not next to each other\n    # Count the ways C and D can be next to each other and subtract from total ways\n    next_to_each_other = factorial(7)        # C and D next to each other as a unit\n    opposite_ways = total_ways - next_to_each_other * 2\n\n    # Final answer considering both conditions\n    ans = together_ways * opposite_ways // total_ways\n    return ans\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    total_salt = leroy_salt + lenny_salt\n    total_solution = 200 + 300\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candies, valeria_candies = symbols('mike_candies valeria_candies')\n\n    equation1 = Eq(mike_candies - valeria_candies, 6 - 22)\n    equation2 = Eq(mike_candies + valeria_candies, 36)\n\n    solutions = solve((equation1, equation2), (mike_candies, valeria_candies))\n\n    return solutions[valeria_candies]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    sugar = 300 * 0.35\n    water = 300 - sugar\n    return water\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Calculate 12^50\n    twelve_to_fifty = 12**50\n\n    # The problem is equivalent to finding k^75 < 12^50.\n    # To compare the bases, both sides need to have the same exponent. \n    # So, we can take both to the power of 1/75 to compare k with 12^(50/75) or 12^(2/3).\n    k = 12**(50/75)\n\n    # Since we need the largest whole number k, we take the floor of this number.\n    ans = int(k)\n\n    return ans\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    final_oranges = 133\n    thrown_away_oranges = 34\n    bought_oranges = 25\n    \n    initial_oranges = final_oranges - bought_oranges + thrown_away_oranges\n    return initial_oranges\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi(a, b):\n        return a * b + 2 if a < b else a - b + 2\n\n    return psi(psi(14, 13), 12)\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    total_digits = sum(len(str(i)) for i in range(1, 20))\n    return total_digits\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Number of legs for each animal\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Given number of each animal except birds\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n\n    # Given total number of legs\n    total_legs = 28\n\n    # Calculate the total number of legs for cats, dogs and rabbits\n    total_legs_of_other_pets = (cat_legs * num_cats) + (dog_legs * num_dogs) + (rabbit_legs * num_rabbits)\n\n    # Calculate the remaining legs which should be from birds\n    legs_for_birds = total_legs - total_legs_of_other_pets\n\n    # Calculate the number of birds\n    num_birds = legs_for_birds / bird_legs\n\n    return int(num_birds)\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    original_team_size = 5\n    original_time = 6\n    new_length_factor = 2\n    desired_time = 5\n\n    original_work_rate = original_team_size / original_time\n    new_work_rate_required = new_length_factor / desired_time\n\n    minimum_people = new_work_rate_required / original_work_rate\n    minimum_people = int(minimum_people) if minimum_people.is_integer() else int(minimum_people) + 1\n\n    return minimum_people\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    minutes_per_staircase = 12 / 4\n    flights_in_30_minutes = 30 / minutes_per_staircase\n    return int(flights_in_30_minutes)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    butter_for_50_cookies = 8\n    cookies_made = 50\n    butter_available = 21.6\n\n    cookies_with_available_butter = (butter_available * cookies_made) / butter_for_50_cookies\n\n    return cookies_with_available_butter\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert the base 8 number to base 10\n    N_base8 = '12345654321'\n    N_base10 = int(N_base8, 8)\n    \n    # Calculate the remainders\n    remainder_7 = N_base10 % 7\n    remainder_9 = N_base10 % 9\n    \n    # Sum of the remainders\n    sum_of_remainders = remainder_7 + remainder_9\n    return sum_of_remainders\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(belt + wallet + handbag, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    dividend = 96\n    divisor = 3\n    \n    ans = dividend // divisor\n    \n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    # Three years ago the combined age was 7\n    combined_age_three_years_ago = 7\n    \n    # Adding the three years that have passed to the combined age\n    current_combined_age = combined_age_three_years_ago + (2 * 3)\n    \n    # The combined age in four years' time\n    combined_age_in_four_years = current_combined_age + (2 * 4)\n    \n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    # 2 books and 3 magazines cost $24.90\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    # 1 book and 1 magazine cost $10\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 100\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_of_first_n = (n * (n + 1)) // 2\n\n    ans = sum_of_squares + sum_of_first_n - n\n    \n    return ans\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    return 637 - 473\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "from sympy import divisors, is_square\n\ndef solution():\n    all_divisors = divisors(2016)\n    square_divisors = [div for div in all_divisors if is_square(div)]\n    count = len(square_divisors)\n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Since the numbers are consecutive, let's denote them as x, x+1, and x+2.\n    # The sum of these three numbers is 60: x + (x + 1) + (x + 2) = 60.\n    # Simplify it to 3x + 3 = 60.\n    # Solve for x: 3x = 60 - 3.\n    x = (60 - 3) // 3\n    \n    # The largest of the three numbers is x+2.\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big, small = symbols('big small')\n\n    # 3 big pails and 4 small pails hold 68 litres\n    equation1 = Eq(3 * big + 4 * small, 68)\n    # 4 big pails and 2 small pails hold 64 litres\n    equation2 = Eq(4 * big + 2 * small, 64)\n\n    solutions = solve((equation1, equation2), (big, small))\n\n    return solutions[big]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):  # all permutations of four different digits\n        A, B, C, D = p\n        if A != 0 and C != 0 and A*101 + C*101 + B*10 + D*10 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    num_orange = 6\n    num_pink = 4\n    num_brown = 12\n    \n    # In the worst case, Annabella could take all the orange, pink, and brown shirts\n    # Before she is guaranteed to get a yellow shirt, which is the worst case.\n    worst_case = num_orange + num_pink + num_brown + 1\n    \n    return worst_case\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # ceiling division\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    mixed_numbers = [9 + 4/5, 99 + 4/5, 199 + 4/5, 2999 + 4/5, 39999 + 4/5, 1]\n    ans = sum(mixed_numbers)\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    terms = [94, 80, 73, 66]\n    differences = [terms[i] - terms[i+1] for i in range(len(terms) - 1)]\n    # Assuming a second-degree pattern as differences are not constant\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences) - 1)]\n    \n    # Since the second differences are constant, we can predict the next first difference\n    next_difference = differences[-1] - second_differences[0]\n    next_term = terms[1] - next_difference\n    return next_term\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    for age in range(1, 7*6*4*3*2):  # The least common multiple of 2, 3, 4, 6 is 24, and we can include 7*24 in the range\n        if all(age % num == 1 for num in [2, 3, 4, 6]) and age % 7 == 0:\n            return age\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    # average = (total score of girls + total score of boys) / total number of students\n    equation = Eq((girls * 88 + boys * 91) / 36, 89)\n\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glass_sales = 25\n    tumbler_sales = 12\n    carton_volume_ml = 1000\n    \n    total_ml_sold = (wine_glass_sales * wine_glass_ml) + (tumbler_sales * tumbler_ml)\n    cartons_needed = total_ml_sold / carton_volume_ml\n    \n    return int(cartons_needed) if total_ml_sold % carton_volume_ml == 0 else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    # Let the common ratio unit be x\n    # Original number of avocados is 2x, peaches 9x, and lemons 8x\n    # After selling, the number of avocados is 2x - 52, peaches 9x - 12, and lemons 8x - 60\n    # The new ratio of peaches to lemons is 6:5, hence (9x - 12) / (8x - 60) = 6 / 5\n\n    # Solve for x using sympy\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((9 * x - 12) / (8 * x - 60), 6 / 5)\n\n    # Find the value of x\n    solution_x = solve(equation, x)\n\n    # Taking the positive solution since x cannot be negative\n    x_value = [sol for sol in solution_x if sol > 0][0]\n\n    # Calculate the total number of fruits left\n    avocados_left = 2 * x_value - 52\n    peaches_left = 9 * x_value - 12\n    lemons_left = 8 * x_value - 60\n    \n    # Sum them up to get the total\n    total_fruits_left = avocados_left + peaches_left + lemons_left\n\n    return int(total_fruits_left)\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    # Initialize the count of students facing the teacher\n    count = 0\n\n    # Iterate over each student\n    for student in range(1, 61):\n        # If the student is a multiple of both 3 and 5 (which is a multiple of 15)\n        # Or is not a multiple of 3 or 5, they are facing the teacher\n        if student % 15 != 0 and (student % 3 != 0 or student % 5 != 0):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy.ntheory import lcm\n\n    # Since the age gives a remainder of 1 when divided by 2, 4, or 6,\n    # we need to find lcm of 2, 4, and 6 and add 1 to it.\n    # This will be the starting point because any number that satisfys condition\n    # for 2, 4, and 6 will be of form lcm(2, 4, 6) * k + 1.\n    lcm_2_4_6 = lcm(2, 4, 6)\n\n    # Starting at lcm(2, 4, 6) + 1, check if dividing by 7 gives a remainder of 5.\n    # Continue this process, incrementing by lcm(2, 4, 6) which keeps the remainder\n    # 1 for the three divisions, until the condition for division by 7 is also satisfied.\n    age = lcm_2_4_6 + 1\n    while age % 7 != 5:\n        age += lcm_2_4_6\n        \n    return age\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jess_sweets represent the number of sweets Jess has initially\n    # Let jill_sweets represent the number of sweets Jill has initially\n    jess_sweets, jill_sweets = symbols('jess_sweets jill_sweets')\n\n    # Jill has six sweets for every five sweets Jess has.\n    equation1 = Eq(jill_sweets, 6 / 5 * jess_sweets)\n\n    # Jill gives eight sweets to Jess.\n    # Now, Jill has four sweets for every seven sweets Jess has.\n    equation2 = Eq((jill_sweets - 8) * 7, (jess_sweets + 8) * 4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (jess_sweets, jill_sweets))\n\n    # Get the number of sweets each has initially\n    jess_initial = solutions[jess_sweets]\n    jill_initial = solutions[jill_sweets]\n\n    # Calculate the total number of sweets\n    total_sweets = jess_initial + jill_initial\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for num_cards in range(1, 8):  # From 1 card to 7 cards\n        for cards in permutations(range(1, 8), num_cards):\n            number = int(''.join(map(str, cards)))\n            if all(number % int(str(card)) == 0 for card in cards):\n                max_number = max(max_number, number)\n    return max_number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    n = 900\n    count = 0\n    for i in range(1, int(n**0.5)+1, 2):\n        if n % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let a, b, and c represent the weights of Adam, Ben, and Carl respectively.\n    # From the problem, we can write the following equations:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 93\n    \n    # Now we can add all three equations to get 2 times the total weight.\n    # (a + b) + (b + c) + (a + c) = 2 * (a + b + c)\n    # 102 + 97 + 93 = 2 * (a + b + c)\n    total_weight_times_two = 102 + 97 + 93\n    total_weight = total_weight_times_two / 2  # Divide by 2 to get the total weight.\n    \n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for number in range(10, 100):\n        if (number % 3 == 2) and (number % 11 == 2):\n            return number\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    remainder = 2\n    divisor = 53\n    quotient = 120 // divisor  # Find the quotient for 120 and the divisor\n    smallest_number = (quotient + 1) * divisor + remainder  # Calculate the next number that satisfies the condition\n    return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n\n    perimeter = 2 * (length + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    decimals = [8.05, 8.50, 8.505, 8.055]\n    smallest = min(decimals)\n    return smallest\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_m = 2\n    height_cm = 2\n    height_total = height_m + (height_cm / 100.0)\n    return height_total\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * 1.25\n    third_test_score = second_test_score * 0.80\n\n    total_score = first_test_score + second_test_score + third_test_score\n\n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    interest_rate = 0.03\n    time = 2\n    amount = principal * ((1 + interest_rate) ** time)\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(bookmarks - 6*pupils, -10)\n    \n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    # Loop over each hour of the day\n    for hour in range(24):\n        # Loop over each minute of the hour\n        for minute in range(60):\n            # Convert hour and minute to strings and concatenate\n            time_str = f\"{hour:02d}{minute:02d}\"\n            # Count how many times '4' appears in the time string\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    from sympy import isprime\n    return isprime(233)\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_squares = sum([(7 * i) ** 2 for i in range(1, 16)])\n    return sum_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    total_sum = 4.22 + 31.49 + 0.76\n    return total_sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(130, 151))\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    first_multiple = 56 // 4 if 56 % 4 == 0 else 56 // 4 + 1\n    last_multiple = 92 // 4\n    \n    num_multiples = last_multiple - first_multiple + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for i in range(1, 100):\n        if i % 3 == 2 and i % 4 == 3 and i % 5 == 4:\n            return i\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the speed of the river current.\n    v = symbols('v')\n    \n    # The speed downstream is the speed in still water plus the current speed.\n    speed_downstream = 15 + v\n    \n    # The speed upstream is the speed in still water minus the current speed.\n    speed_upstream = 15 - v\n    \n    # Distance is the product of speed and travel time.\n    # We know that the distance from Magic Town to Super Town is 144 km.\n    # The ship travels downstream 8 h from Magic Town to Super Town,\n    # so the distance downstream is also speed_downstream * 8.\n    distance = 144\n\n    # Set up the equation Distance_downstream = speed_downstream * 8 hours.\n    equation = Eq(speed_downstream * 8, distance)\n    \n    # Solve the equation to find the velocity of the river current.\n    current_speed = solve(equation, v)[0]\n\n    # Calculate the time to come back from Super Town to Magic Town.\n    # Time = Distance / Speed\n    time_back = distance / (speed_upstream.subs(v, current_speed))\n\n    return float(time_back)\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of a power of 2 cycles every 4: 2 -> 4 -> 8 -> 6\n    # The last digit repeats with a period of 4\n    cycle_period = 4\n\n    # Number of times 2 is multiplied\n    repetitions = 859433\n\n    # Find the position in the cycle\n    cycle_position = repetitions % cycle_period\n\n    # Match the cycle position to the last digit\n    cycle = [6, 2, 4, 8]  # This is the cycle of last digits, starting from position 0.\n    last_digit = cycle[cycle_position - 1]\n\n    return last_digit\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    students = 15\n    select = 2\n\n    return comb(students, select)\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h, k = symbols('h k')  # h: hippo's daily food intake, k: kangaroo's daily food intake\n\n    equation1 = Eq(h, k + 45)             # The hippo eats 45 kilograms more food than the kangaroo each day\n    equation2 = Eq(20 * h, 10 * (20 * k)) # After 20 days, the hippo has consumed 10 times as much food as the kangaroo in total\n\n    solutions = solve((equation1, equation2), (h, k))\n\n    hippo_daily = solutions[h]\n    total_hippo_consumed = 20 * hippo_daily\n\n    return total_hippo_consumed\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    initial_hour = 15   # 3 p.m. is 15:00 hours\n    initial_minute = 15\n    \n    waiting_hours = 1\n    waiting_minutes = 25\n    \n    final_hour = initial_hour + waiting_hours\n    final_minute = initial_minute + waiting_minutes\n    \n    if final_minute >= 60:\n        final_minute -= 60\n        final_hour += 1\n        \n    return \"{:02d}:{:02d}\".format(final_hour, final_minute)\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1 / i for j in range(2, 21) for i in range(j, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Work done by A in one day\n    A_work_per_day = 1 / 15\n    # Work done by B in one day\n    B_work_per_day = 1 / 20\n\n    # Work done by A and B in 2 days\n    work_done_in_2_days = 2 * (A_work_per_day + B_work_per_day)\n\n    # Remaining work after 2 days\n    remaining_work = 1 - work_done_in_2_days\n\n    # Days for A to finish the remaining work\n    days_for_A_to_finish = remaining_work / A_work_per_day\n\n    return days_for_A_to_finish\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure we have at least two balls of the same color, we must consider the worst-case scenario.\n    # This would be picking balls in alternating colors.\n    \n    # We start by taking one green ball and one blue ball, but this does not ensure two of the same color.\n    green_balls = 1\n    blue_balls = 1\n    \n    # The next ball we take, regardless of color, will ensure we have two of the same color.\n    next_ball = 1\n    \n    # The total balls taken will be the sum of the green, blue, and the next ball we take.\n    total_balls_taken = green_balls + blue_balls + next_ball\n    \n    return total_balls_taken\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # Number of zodiac signs\n    zodiac_signs = 12\n    # We want at least 11 students to share the same zodiac sign\n    students_required_per_sign = 10\n    # Apply Pigeonhole Principle\n    students_needed = (zodiac_signs * students_required_per_sign) + 1\n    \n    return students_needed\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Using Pigeonhole Principle: to be sure to have 10 balls of the same color,\n    # we must consider the worst case scenario.\n    # Worst case: pick all yellow and white balls and still not have 10 of the same color.\n    # Worst case count: 5 yellow + 15 white = 20 balls\n    # Next pick will ensure we have 10 balls of the same color - black in this case.\n    \n    worst_case_picks = 5 + 15\n    # To ensure 10 black balls, we pick one more after the worst case\n    balls_to_pick_for_10_black = worst_case_picks + 1\n    \n    return balls_to_pick_for_10_black\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    starting_seat = 3\n    num_children = 9\n\n    last_seat = (starting_seat - 1 + total_candies) % num_children\n    if last_seat == 0: \n        last_seat = num_children\n    \n    return last_seat\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 60\n    last_term = first_term + (n - 1) * difference\n    \n    sum_of_terms = n * (first_term + last_term) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n\n    days_spg = 7\n    days_apple = 3\n\n    next_day = lcm(days_spg, days_apple)\n\n    return next_day\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Maximum possible children with both dogs and cats is min(children_with_dogs, children_with_cats)\n    max_both = min(children_with_dogs, children_with_cats)  \n\n    # Minimum children with both dogs and cats using the Inclusion-Exclusion Principle\n    min_both = (children_with_dogs + children_with_cats) - total_children\n    \n    return min_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from math import factorial as fact\nfrom itertools import permutations\n\ndef count_ways(A, left, right, pairs, avoid):\n    # Total permutations for students without restrictions\n    total_ways = fact(len(A))\n    \n    # Deduct ways that do not satisfy 'Student A between B and C'\n    # For every permutation where A is not between B and C\n    not_between_ways = 2 * fact(len(A) - 3) * fact(2)\n    \n    # Calculate ways where D and E are always together by treating them as one\n    always_together_ways = fact(len(A) - 1)\n    \n    # Calculate ways where F and G cannot be together\n    total_adjacent_ways = len(A) * (len(A) - 1) * fact(len(A) - 2)\n    adjacent_ways_FG = total_adjacent_ways - fact(len(A) - 2) * (len(A) - 2) * 2\n    \n    # Final calculation\n    ways = total_ways - not_between_ways                       # A between B and C\n    ways *= always_together_ways / total_ways                  # D and E always together\n    ways *= (total_ways - adjacent_ways_FG) / total_ways       # F and G not together\n    \n    return int(ways)\n\ndef solution():\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    return count_ways(students, 'A', ['B', 'C'], [('D', 'E')], [('F', 'G')])\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # The table represents an arithmetic sequence with a difference of 1\n    # For an arithmetic sequence, the sum can be calculated using the formula:\n    # sum = n/2 * (first_term + last_term)\n    first_term = 1  # The table starts at 1\n    last_term = 190  # The table ends at 190\n    n = last_term  # Number of terms (since difference is 1)\n\n    # Calculate the sum\n    sum_numbers = n/2 * (first_term + last_term)\n    return int(sum_numbers)\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    range_of_data = max(data) - min(data)\n    return range_of_data\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    # 1. The number of shirts she had was 36 less than the number of skirts.\n    equation1 = Eq(shirts, skirts - 36)\n    \n    # 2. After selling 2/3 of her shirts and 5/6 of her skirts, she had 72 shirts and skirts left in total.\n    # shirts_left = shirts - (2/3) * shirts = (1/3) * shirts\n    # skirts_left = skirts - (5/6) * skirts = (1/6) * skirts\n    # shirts_left + skirts_left = 72\n    equation2 = Eq((1/3) * shirts + (1/6) * skirts, 72)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shirts, skirts))\n    \n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    months = 3\n    total_savings = monthly_saving * months\n    return total_savings\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    length = 100\n    width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    num_cloaks_lengthwise = length // cloak_length\n    num_cloaks_widthwise = width // cloak_width\n\n    total_cloaks = num_cloaks_lengthwise * num_cloaks_widthwise\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "网络故障，请重试"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    for num_biscuits in range(400, 801):\n        if num_biscuits % 5 == 1 and num_biscuits % 6 == 2 and num_biscuits % 11 == 7:\n            return num_biscuits\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets * total_ratio) / nell_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    count = 0  # Initialize the count of digits\n\n    for i in range(1, 35):  # Iterate through shirts 1 to 34\n        count += len(str(i))  # Add the number of digits of each shirt number to the count\n\n    return count\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # If 2 minutes are needed to cut a rod into 2 pieces, then 1 cut takes 2 minutes\n    # To cut the rod into 5 pieces, we need 4 cuts (since the first cut leaves us with 2 pieces)\n    num_cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_time = num_cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    ans = 31.6 * 7\n    return ans\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    # The original sum of the three numbers\n    original_sum = 3 * 120\n\n    # The new average that is needed\n    new_average = 110\n\n    # The new sum required for this new average with an additional number (total 4 numbers now)\n    new_sum = 4 * new_average\n\n    # The number that needs to be added to the original sum to achieve the new average\n    number_to_add = new_sum - original_sum\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Jovan has twice as many marbles as Sean.\n    # Herman has 3 times as many marbles as Jovan.\n    # Jovan has 240 fewer marbles than Herman.\n    # Let's denote the number of marbles Sean has as 's'.\n    \n    sean, jovan, herman = symbols('sean jovan herman')\n    \n    # Jovan = 2 * Sean\n    equation1 = Eq(jovan, 2 * sean)\n    \n    # Herman = 3 * Jovan\n    equation2 = Eq(herman, 3 * jovan)\n    \n    # Jovan has 240 fewer marbles than Herman.\n    # Jovan = Herman - 240\n    equation3 = Eq(jovan, herman - 240)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (sean, jovan, herman))\n    \n    # Total number of marbles: Sean + Jovan + Herman\n    total_marbles = solutions[sean] + solutions[jovan] + solutions[herman]\n    \n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    m = symbols('m')\n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n    solution = solve(equation, m)\n    return solution[0]\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Find the total amount of hay needed for 1 horse for 1 day (unitary value)\n    hay_per_horse_per_day = (horses_initial * days_initial) / horses_initial\n\n    # Find the total amount of hay available\n    total_hay = hay_per_horse_per_day * days_initial\n\n    # Calculate the number of days the same pile of hay could feed 20 horses\n    days_final = total_hay / horses_final\n\n    return days_final\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 12)\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for masses of John, Andy and Charles\n    john, andy, charles = symbols('john andy charles')\n    \n    # Given equations\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n    \n    # Calculate the total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n    \n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_length = 900\n    total_days = 5\n    companies = 4\n\n    daily_length_per_company = (total_length / total_days) / companies\n\n    return daily_length_per_company\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoes_per_set = 5\n    shoe_set_price = 78\n    sock_price = 12\n\n    # Alien and his 5 brothers, each having 5 legs\n    total_legs = 5 * (1 + 5)\n\n    # Total number of shoe sets needed (one for each leg)\n    total_shoe_sets = total_legs / shoes_per_set\n    total_shoe_cost = total_shoe_sets * shoe_set_price\n\n    # Total number of socks needed (one for each leg)\n    total_sock_cost = total_legs * sock_price\n\n    # Total cost calculation\n    total_cost = total_shoe_cost + total_sock_cost\n    \n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import median, mean\n\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    deviations = [abs(x - mean(data)) for x in data]\n    mad = mean(deviations)\n    \n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Three kids can get 0 to 13 oranges, we can model this with the following:\n    # Assume x1, x2, and x3 are the number of oranges the three kids get.\n    # We then have: x1 + x2 + x3 = 13\n    # Since someone might not get any orange, x1, x2, and x3 can be 0.\n    # So we are looking for the number of non-negative integer solutions to this equation.\n    \n    # The problem can be solved by the stars and bars method from combinatorics.\n    # The formula is: (n + k - 1) choose (k - 1), where n is the total number to be divided,\n    # k is the number of parts, in this case, 3 kids.\n    # Here, n = 13, k = 3.\n    \n    n = 13\n    k = 3\n    # Use sympy's binomial coefficient function, which is equivalent to \"n choose k\"\n    ans = binomial(n + k - 1, k - 1)\n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Assuming the original number is ABCD where A, B, C, and D represent the digits\n    # The new number is DBCD which is 5877 greater than ABCD\n    \n    for A in range(1, 10):  # Since it's a 4-digit number, A cannot be 0\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    original_number = A * 1000 + B * 100 + C * 10 + D\n                    new_number = D * 1000 + B * 100 + C * 10 + D\n                    if new_number - original_number == 5877:\n                        return original_number\n                        \nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david_cookies, jeremy_cookies, jeremy_50_cent, jeremy_10_cent = symbols('david_cookies jeremy_cookies jeremy_50_cent jeremy_10_cent')\n    \n    # David's cookies were cost thrice as much as Jeremy's cookies\n    equation1 = Eq(david_cookies, 3 * jeremy_cookies)\n    # David had only $0.50 cookies\n    david_50_cent = 1\n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies\n    equation2 = Eq(jeremy_50_cent, 3/5 * jeremy_10_cent)\n    # There were 60 fewer $0.10 cookies than $0.50 cookies\n    equation3 = Eq(jeremy_10_cent - jeremy_50_cent, 60)\n    # David's $0.50 cookie value is known\n    david_cookies_value = 0.50 * david_50_cent\n\n    # Calculate value of Jeremy's cookies\n    solutions = solve((equation1, equation2, equation3), (jeremy_cookies, jeremy_50_cent, jeremy_10_cent))\n\n    jeremy_cookies_value = 0.50 * solutions[jeremy_50_cent] + 0.10 * solutions[jeremy_10_cent]\n\n    return jeremy_cookies_value\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    candy_pairs = combinations(numbers, 2)\n    candice_triples = combinations(numbers, 3)\n    product_map = {}\n\n    # For each pair that Candy could choose, compute the product and map it.\n    for pair in candy_pairs:\n        product = pair[0] * pair[1]\n        product_map[product] = product_map.get(product, []) + [pair]\n\n    # Now find a product by Candice's choice that matches one of Candy's\n    for triple in candice_triples:\n        product = triple[0] * triple[1] * triple[2]\n        if product in product_map:\n            # If we find a match, the numbers not in the matching pairs and triples are the ones not chosen.\n            matched_pairs = product_map[product]\n            all_picked_numbers = set(triple)\n            for pair in matched_pairs:\n                all_picked_numbers.update(pair)\n            not_picked = [num for num in numbers if num not in all_picked_numbers]\n            return not_picked[0] if not_picked else None\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    for total in possible_totals:\n        if (total - 4) % 7 == 0:\n            return total\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_first_fifth = 20\n    total_distance = 200\n    \n    # The distance between each tree (interval) is the distance between the first and fifth tree\n    # divided by the number of intervals between them (5 - 1 = 4).\n    interval = distance_first_fifth / (5 - 1) \n    \n    # The number of intervals for the whole road is the total distance divided by the interval.\n    # Add 1 to account for the first tree.\n    num_trees = (total_distance / interval) + 1\n    \n    return int(num_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Tank per minute for Tap A\n    rate_b = 1 / 8   # Tank per minute for Tap B\n    rate_both = rate_a + rate_b\n    \n    # Time to fill half the tank with both taps open\n    time_to_fill_half = 0.5 / rate_both\n\n    return time_to_fill_half\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Initial expression\n    first_step = (36 * 21) // (6 * 7)\n    \n    # Mistake Jason made: Ignoring the order of operations by not grouping the division correctly\n    # Correct operation using the order of operations: division before multiplication\n    correct_step = 36 // 6 * 21 // 7 \n    \n    ans = correct_step\n    \n    return ans\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    ans = 4392 // 6\n    return ans\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruits = 48\n    fraction_apples = 5 / 8\n    apples = total_fruits * fraction_apples\n    pears = total_fruits - apples\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # Let the side of the smaller square be n.\n    # Then the boys form an array of n*n.\n    # When the girls join, they form a square array of (n+1)*(n+1)\n    # The number of girls added will equal to 2n+1 because they add one row and one column\n    # Hence, we can set up the equation 2n + 1 = 17 to find the original side length n.\n    # Solve for n.\n    n = (17 - 1) // 2\n    \n    # Now that we have n, we can calculate the number of boys as n*n.\n    boys = n ** 2\n    \n    return boys\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    # Ann is the 8th person in the queue\n    ann_position = 8\n\n    # There are 3 people between Ann and David\n    people_between = 3\n\n    # David is the second last, which means there's one person behind him\n    david_behind = 1\n\n    # Total number of people in the queue\n    total_people = ann_position + people_between + david_behind + 1\n\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 22:\n        if '8' in str(page):\n            count += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total = 555\n\n    third_number = total - first_number - second_number\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    # Assuming n, 8, 9, and 12 are in proportion n:8 = 9:12\n    # Thus, we can find n by cross multiplying the means and extremes\n    n = (9 * 8) / 12\n    \n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To ensure we get 29 balls of one color, 28 balls of another, and 10 balls of the last,\n    # we consider the worst case scenario using the pigeonhole principle.\n    \n    # In the worst case, we might pick all balls of the colors that we need 28 and 10 of, before getting 29 of any.\n    # There are 80 blue balls, 40 red balls, and 30 white balls.\n\n    # The worst case scenario:\n    # We first pick all red balls (40), and we still don't have 29 of one color.\n    # Then we continue to pick all white balls (30), and we still don't have 29 of one color.\n    # Now we have 40 red + 30 white = 70 balls, but we only have 28 of each color at most.\n    # If we now pick one more ball, it must be blue, since there are only blue balls left.\n    # At this point, we are at 29 blue balls.\n    # But we still need 1 red and 2 white to satisfy the requirement of at least 28 of another color.\n    # Therefore, we have to add these to our count.\n    # So we pick 1 more red and 2 more white from the blue pile (since red and white are already exhausted).\n\n    # Picking the remaining 3 to meet the blue requirement yields: 70 + 1 + 2 = 73 balls.\n    # Now, no matter what the next ball is, we will have 29 of one color (blue),\n    # at least 28 of another (red or white), and at least 10 of the last color.\n\n    return 70 + 3\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    day_climb = 3\n    night_slide = 1\n    progress_per_day = day_climb - night_slide\n    day = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n    \n    return day\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n    \n    # Using the Inclusion-Exclusion Principle\n    both_competitions = (maths_competition + art_competition) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800  # initial amount\n    rate = 8 / 100  # interest rate per annum in decimal form\n    time = 3  # number of years\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4 * x, 19)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    return 8848 - 978\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    alicia, beth, casey = symbols('alicia beth casey')\n    \n    # Define the equations based on the problem statement\n    total_money = Eq(alicia + beth + casey, 900)\n    alicia_spent = alicia / 2\n    beth_spent = 60\n    casey_spent = 3 * alicia_spent\n    money_left_eq = Eq(alicia - alicia_spent, beth - beth_spent)\n    money_left_eq2 = Eq(alicia - alicia_spent, casey - casey_spent)\n\n    # Solve the system of equations for the variable of interest\n    solutions = solve((total_money, money_left_eq, money_left_eq2), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since the last digit of any factorial greater than or equal to 5! is 0 \n    # (due to the presence of at least one 2 and one 5 in the prime factorization,\n    # which forms a 10), the last digit of 2014! will also be 0.\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*(x+3), 30)\n\n    solution_dict = solve(equation, x)\n    return solution_dict[x]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    primes = [2, 2, 3, 8, 5, 5, 5]\n    count2 = primes.count(2) + primes.count(8) * 3  # 8 is 2^3\n    count5 = primes.count(5) * 3  # each 5 contributes to one zero in the product\n    \n    # The number of zeros in the end of the product is equal to\n    # the minimum of counts of 2 and 5 in its prime factorization\n    ans = min(count2, count5)\n    return ans\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    ans = (6 / 20) * 100\n    return ans\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    final_result = 1\n    step1 = final_result + 8 # Add 8 to the answer\n    step2 = step1 * 8 # Multiply by 8\n    step3 = step2 // 3 # Divide by 3\n    original_number = step3 - 6 # Subtract 6 from the sum\n    \n    return original_number\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = original_number * 10\n    equation = Eq(original_number + new_number, 253)\n\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    difference = 6\n    \n    # Sum of n terms in an arithmetic sequence: S_n = n/2 * (2*a1 + (n-1)*d)\n    # Where S_n is the sum of n terms, a1 is the first term, and d is the common difference.\n    # In this case, S_5 = 100, n = 5, d = 6. We need to find a1.\n    \n    # Rearranging the sum of arithmetic sequence formula to solve for a1:\n    # a1 = (S_n - n/2 * (n-1) * d) / n\n    first_day_cookies = (total_cookies - (days / 2) * (days - 1) * difference) / days\n\n    return int(first_day_cookies)\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    gave_to_sister = 35\n    gave_to_friend = 23\n    picked_seashells = 70\n    \n    # Calculate seashells after transactions\n    total_seashells = initial_seashells - gave_to_sister - gave_to_friend + picked_seashells\n    \n    # Divide equally into 8 boxes\n    seashells_per_box = total_seashells // 8\n    \n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for number in range(1, 90):\n        if number % 9 == 0 and (number - 1) in sieve and (number + 1) % 5 == 0:\n            return number\n\nfrom sympy import primerange\n\n# Generate a set of prime numbers less than 90 for quick membership testing\nsieve = set(primerange(1, 90))\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    amount = 250\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 50))\n    for prime in primes:\n        if prime < 50 and prime % 3 == 2 and prime % 5 == 3:\n            return prime\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n    # There are 4 men and 4 women.\n    # We need to choose positions for men, and then arrange the men in those positions.\n    # Similarly, we need to choose positions for women, and then arrange the women in those positions.\n    \n    # Two choices for the pattern: MWMWMWMW or WMWMWMWM.\n    # First, choose positions for men: 2 choices for the pattern (starting with a man or a woman).\n    # Then arrange the 4 men in the chosen positions: 4! ways.\n    # Then arrange the 4 women in the remaining positions: 4! ways.\n    ways_to_arrange_men = factorial(4)\n    ways_to_arrange_women = factorial(4)\n    ways_to_choose_pattern = 2\n    \n    # Total ways will be the product of these options.\n    total_ways = ways_to_choose_pattern * ways_to_arrange_men * ways_to_arrange_women\n\n    return total_ways\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(5)  # Total letters of HAPPY is 5\n    p_count = factorial(2)        # 'P' appears twice\n    ans = total_letters // p_count\n\n    return ans\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    pack_of_three_mya = cost_per_roll_mya * 3\n    return pack_of_three_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley = symbols('ashley')\n    crystal = 2 * ashley\n    justin = 10 * ashley\n    equation = Eq(justin - 72, crystal)\n\n    ashley_pages = solve(equation, ashley)[0]\n    crystal_pages = 2 * ashley_pages\n    justin_pages = 10 * ashley_pages\n\n    total_pages = ashley_pages + crystal_pages + justin_pages\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    total_children = 12 / (1 - (2/5))\n    boys = (2/5) * total_children\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    from sympy import factorint\n\n    prime_factors = factorint(96)\n    factors_count = 1\n    \n    for exponent in prime_factors.values():\n        factors_count *= (exponent + 1)\n    \n    return factors_count\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2  # both Peter and John are counted once\n\n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    result = 0.60 * 0.10 * 900\n    return result\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    departure_time = datetime.strptime(\"12:00\", \"%H:%M\")  # Noon in 24-hour format\n    flight_duration = timedelta(hours=4)  # Duration of the flight\n    arrival_time = departure_time + flight_duration  # Time of arrival\n   \n    # Since St Petersburg is in the Moscow time zone, which is GMT+3,\n    # we need to add 3 hours to the arrival time.\n    st_petersburg_time = arrival_time + timedelta(hours=3)\n    return st_petersburg_time.strftime(\"%H:%M\")  # Format the time in hours and minutes\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n    \n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):  # N cannot be 0 as it's a two-digit number\n        for O in range(10):  # O can be from 0 to 9\n            if len(set(str(N*100 + N*10 + O))) == 3:  # Checking all characters are unique\n                return N*10 + O\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum([i if i%4 == 2 else -i for i in range(32, 51, 2)])\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 different colors of socks, so to guarantee a pair,\n    # she must pick one more than three times the number of colors.\n    socks_needed = 3 * 3 + 1\n    return socks_needed\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kilograms = 2.5\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    # Let's denote the total number of children as 'c', the number of boys as 'b', and the number of girls as 'g'.\n    # According to the problem statement, we have the following relationships:\n    # b = 3/8 * c (number of boys is 3/8 of the total number of children)\n    # g = c - b (number of girls is the total number of children minus the number of boys)\n    # 4b + 12g = 360 (each boy took 4 sweets, each girl took 12 sweets, and the total number of sweets is 360)\n\n    # We can substitute b with 3/8 * c and express g in terms of c to solve for c first.\n    # Let's find the total number of children 'c'.\n    total_sweets = 360\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n    boys_ratio = 3/8\n\n    # Using the total sweets and the ratio of boys to find total number of children\n    # c = b + g\n    # 360 = sweets_per_boy * b + sweets_per_girl * g\n    # 360 = sweets_per_boy * (3/8 * c) + sweets_per_girl * (c - 3/8 * c)\n    # Simplifying the above equation will give us c.\n    # 360 = 4 * (3/8 * c) + 12 * (5/8 * c)\n    # 360 = (3 * c) + (15 * c / 2)\n    # 360 = (6 * c + 15 * c) / 2\n    # 720 = 21 * c\n    c = total_sweets / (sweets_per_boy * boys_ratio + sweets_per_girl * (1 - boys_ratio))\n\n    # Once the total number of children 'c' is found, we can easily calculate the number of girls 'g'.\n    g = c - (c * boys_ratio)\n\n    return int(g)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km on the ground is represented by 5 cm on the map\n    distance_on_map_cm = 12\n    distance_on_ground_km = distance_on_map_cm * scale_ratio\n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "from fractions import Fraction\n\ndef solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (Fraction(1, i) - Fraction(1, 52 - i))\n    ans = product\n    return ans\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number be n\n    n = symbols('n')\n\n    # Create equation for the remainders\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n\n    # Create equation for the sum of quotients\n    eq4 = Eq((n // 6) + (n // 7) + (n // 8), 265)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), n)\n\n    # Return the valid solution (positive and satisfies all conditions)\n    for sol in solutions:\n        if sol.is_positive:\n            # Substitute solution in equations to check validity\n            if all([eq1.subs(n, sol), eq2.subs(n, sol), eq3.subs(n, sol), eq4.subs(n, sol)]):\n                return sol\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2  # Jasmin's speed in kilometers per hour\n    time_seconds = 24  # Time in seconds\n\n    # Convert speed to meters per second (1 km/h = 1000 m / 3600 s)\n    speed_mps = (speed_kmh * 1000) / 3600\n\n    # Calculate distance travelled in 24 seconds\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Define a positive integer which is not a prime number\n    # to check if the statement is correct.\n    # According to the definition of composite numbers,\n    # a composite number is a positive integer greater than 1\n    # that is not prime (i.e., it has more than two different divisors).\n\n    # Checking 1, which is not a prime nor a composite\n    test_number = 1\n    if test_number > 1:\n        # Initiate a flag to denote it's a prime number\n        is_prime = True\n        for i in range(2, int(test_number ** 0.5) + 1):\n            if test_number % i == 0:  # If it's divisible by any number other than 1 and itself\n                is_prime = False  # It is not a prime number\n                break\n        if not is_prime:\n            ans = True  # This number is a composite\n        else:\n            ans = False  # This number is not a composite\n    else:\n        # For 1, which is neither prime nor composite, Pip's statement doesn't hold true.\n        ans = False  # This number is neither prime nor composite\n\n    return ans\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n\n    both_classes = math_students + language_students - total_students\n\n    only_math = math_students - both_classes\n\n    return only_math\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(3, 2)\n    for i in range(3, 10):\n        result *= Fraction(i + 1, i)\n    return result\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    # Since balloons are identical we just need to ensure that each group is unique\n    # and the sum of the groups equal 12.\n    for a in range(0, 12 + 1):\n        for b in range(0, 12 + 1):\n            for c in range(0, 12 + 1):\n                for d in range(0, 12 + 1):\n                    if a + b + c + d == 12 and len({a, b, c, d}) == 4:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    num = 40309\n    adder = 0\n    while True:\n        adder += 1\n        possible_palindrome = num + adder\n        if str(possible_palindrome) == str(possible_palindrome)[::-1]:\n            return adder\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    # Kasia keeps 13 sweets for herself.\n    sweets_kept_by_kasia = 13\n    \n    # Total number of sweets Kasia initially has.\n    total_sweets = 42\n    \n    # Sweets left after Kasia keeps her share.\n    sweets_left = total_sweets - sweets_kept_by_kasia\n    \n    # Sweets shared equally between Maya and Lucie.\n    sweets_per_friend = sweets_left // 2\n    \n    # Lucie gives away 2/7 of her sweets to Joan.\n    sweets_given_to_joan = (2/7) * sweets_per_friend\n    \n    # Sweets Lucie keeps after giving to Joan.\n    sweets_kept_by_lucie = sweets_per_friend - sweets_given_to_joan\n\n    return int(sweets_kept_by_lucie)\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    # As the students are arranged in a square array, let's assume there are n rows of boys on the outside. \n    # This would mean (n-2) rows of girls in the next layer and so on, forming concentric squares.\n    # The number of students in each layer would then be 4*(n-1) for boys outermost and 4*(n-3) for girls in the second layer.\n    # There would be 52 more boys than girls, so we need to find the value of n such that the sum difference equals 52.\n    \n    boys_excess = 52\n    total_students = 0\n    n = 1 # Starts with the smallest possible square which is 1x1\n\n    while True:\n        # The number of boys in the outermost layer\n        boys = 4 * n if n > 1 else 1\n        # The number of girls in the next inner layer is 0 when n is 1 or 2.\n        girls = 4 * (n - 2) if n > 2 else 0  \n        \n        # Boys must always be more than girls by the excess\n        if boys - girls == boys_excess:\n            # Calculate total students by summing up the squares of odd numbers up to n^2\n            total_students = sum([(2 * i + 1)**2 for i in range(n)])\n            break\n        \n        n += 1  # Increment n to check for the next possible square size\n\n    return total_students\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let's denote the total weekly pension as 1 (whole week's pension)\n    friday_night_out = 1 / 4\n    remaining_after_friday = 1 - friday_night_out\n    saturday_night_out = remaining_after_friday / 3\n    remaining_after_weekend = remaining_after_friday - saturday_night_out\n\n    return remaining_after_weekend\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the volume of the fish tank as 'v'.\n    v = symbols('v')\n    \n    # First case: if he uses a 5-litre pail,\n    # 4 litres of water will overflow, meaning the tank holds v = 5*n - 4.\n    equation1 = Eq(5 - 4, v % 5)\n    \n    # Second case: if he uses a 3-litre pail, he needs 4 more pails.\n    # Meaning for some number of 3-litre pails (say 'm'), v = 3*m + 4*3.\n    equation2 = Eq(4*3, v - (v // 3) * 3)\n    \n    # Solving the two equations to find 'v'.\n    solution_v = solve((equation1, equation2), (v))\n    \n    # Since solve may return a dictionary or a list of tuples, we make sure to get the value of 'v'.\n    v_value = solution_v[v] if isinstance(solution_v, dict) else solution_v[0][0]\n    \n    return v_value\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_sum = 1 + 4  # ratio of adults to children is 1:4, so sum is 1 + 4 = 5 parts\n    adults = (total_people * 1) // ratio_sum  # number of adults corresponds to 1 part\n    \n    return adults\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n\n    combinations = num_school_bags * num_pencil_boxes\n\n    return combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, pears = symbols('apples pears')\n    equation1 = Eq(apples / pears, 3 / 4)\n    equation2 = Eq((apples + 36) / (pears - 36), 3 / 2)\n\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    decimal_part = \"66129043\" # The repeated sequence of digits\n    total_digits = len(decimal_part) # Number of digits in the repeating sequence\n    \n    # Number of complete sequences within 212 digits\n    complete_sequences = 212 // total_digits\n    \n    # The remaining digits after the complete sequences\n    remaining_digits = 212 % total_digits\n    \n    # Sum of digits in one complete sequence\n    sum_complete_sequence = sum(int(digit) for digit in decimal_part)\n    \n    # Sum of the remaining digits\n    sum_remaining = sum(int(decimal_part[i]) for i in range(remaining_digits))\n    \n    # Total sum of first 212 digits\n    total_sum = (sum_complete_sequence * complete_sequences) + sum_remaining\n\n    return total_sum\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # Let's denote the side of the original square array as n.\n    # Then we have that the total number of soldiers in the original array is n^2.\n    # After adding 31 soldiers, the total becomes (n+1)^2.\n    # And we know that (n+1)^2 = n^2 + 31\n    n = 0\n    while ((n + 1) ** 2 - n ** 2) != 31:\n        n += 1\n    total = (n + 1) ** 2\n    return total\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    # One less willow than ginkgo because willows are planted between ginkgo trees\n    willow_trees = ginkgo_trees - 1\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    ans = (36 / 100) * 50\n    return ans\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    zeros = 28\n    n = 1\n    factor_5_count = 0\n    \n    while factor_5_count < zeros:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            factor_5_count += 1\n            temp_n //= 5\n    \n    return n\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    return (2/3) * 729\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n_people = 12\n    handshakes = (n_people * (n_people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Picking one from each color ensures no matching pairs\n    picks_without_pair = 1 * 5  # one from each color\n\n    # To ensure a matching pair, we need to pick another one after trying each color once\n    # to guarantee at least one pair\n    pick_one_more_for_pair = 1\n\n    # We already have one pair, to ensure another pair, we pick another sock\n    # The worst case is picking the sock of a color already having a pair, which will not\n    # give us a new pair, hence we need to pick three more socks to guarantee another pair\n    picks_for_second_pair = 3\n\n    total_picks = picks_without_pair + pick_one_more_for_pair + picks_for_second_pair\n\n    return total_picks\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    total_cost = (5 * 1.09) + (6 * 0.55)\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam = symbols('sam')\n    equation = Eq(sam + 4, 2 * (sam - 4))\n    solutions = solve(equation, sam)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7\n    vowels = 3\n    consonants = total_letters - vowels\n    \n    # Total arrangements of the word RAINBOW\n    total_arrangements = factorial(total_letters)\n    \n    # Total arrangements when vowels are together\n    # Treat the vowels as a single unit -> 5 units (3 vowels as one + 4 consonants)\n    vowels_together = factorial(consonants + 1) * factorial(vowels)\n    \n    # Subtract arrangements where vowels are together from total arrangements\n    return total_arrangements - vowels_together\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    perms = permutations(digits)\n    odd_numbers = [int(''.join(p)) for p in perms if int(p[-1]) % 2 == 1]\n    n = min(odd_numbers)\n    return n\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    n1, S1 = 10, 20  # First 10 terms sum to 20\n    n2, S2 = 30, 90  # First 30 terms sum to 90\n\n    # The sum of the first n terms of an arithmetic progression is given by: S = n/2 * (a1 + an)\n    # Where a1 is the first term, and an is the nth term\n    # Also, an = a1 + (n - 1)d, where d is the common difference\n    # Therefore, we have S1 = n1/2 * (2a1 + (n1 - 1)d) and S2 = n2/2 * (2a1 + (n2 - 1)d)\n    # We can setup a system of two equations:\n    # 2S1 = n1 * (2a1 + (n1 - 1)d) -----(1)\n    # 2S2 = n2 * (2a1 + (n2 - 1)d) -----(2)\n \n    # Now, we subtract equation (1) from equation (2):\n    # 2S2 - 2S1 = n2 * (2a1 + (n2 - 1)d) - n1 * (2a1 + (n1 - 1)d)\n    # 2(S2 - S1) = 2a1(n2 - n1) + d(n2^2 - n1^2 - n2 + n1)\n    # We'll divide both sides by 2 and solve for d:\n    # S2 - S1 = a1(n2 - n1) + d(n2^2 - n1^2 - n2 + n1)/2\n\n    # Let's denote L as S2 - S1:\n    L = S2 - S1  # L is the difference of sums which we can calculate directly\n\n    # Substitute the known values of L, n1, and n2\n    # L = a1 * (n2 - n1) + d * (n2^2 - n1^2 - n2 + n1)/2\n    # We know that a1 * (n2 - n1) is the L for the sum of first terms equal to n1,\n    # So it can be deduced that the remaining of the equation stand by d,\n    # that leads to d * (n2 - n1) * (n2 + n1 - 1) / 2 = L\n\n    # Now, as L = d * (n2 - n1) * (n2 + n1 - 1) / 2, we get\n    d = (2 * L) / ((n2 - n1) * (n2 + n1 - 1))\n    \n    return d\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    ans = 3.462 / 0.3\n    return ans\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15*x - 0.25*(1000 - x), -50)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)  # Total chickens and goats is 40\n    equation2 = Eq(3 * chickens, 5 * cows)  # 3 times the chickens equals 5 times the cows\n    equation3 = Eq(2 * goats, 10 * cows)  # 2 times the goats equals 10 times the cows\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n    chickens_num = solutions[chickens]\n    goats_num = solutions[goats]\n    cows_num = solutions[cows]\n\n    # Chicken feet = 2, Goat feet = 4, Cow feet = 4\n    total_feet = chickens_num * 2 + goats_num * 4 + cows_num * 4\n    return total_feet\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_sum = 5 + 4\n    penny_stickers = (total_stickers * 4) / ratio_sum\n    return int(penny_stickers)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    words_in_6_days = words_in_9_minutes * days\n\n    return words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6  # in kilometers per hour\n    time_sec = 300  # in seconds\n    \n    speed_mps = speed_kmh * (1000 / 3600)  # convert speed to meters per second\n    distance_meters = speed_mps * time_sec  # calculate distance in meters\n    \n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Jack sold = 4/7 of the apples he brought\n    # He brought 1/2 of all the apples he has\n    \n    # Let the total number of apples Jack has be X\n    # Jack brought 1/2 of X => X/2\n    # Jack sold 4/7 of what he brought => 4/7*(X/2)\n    # And we know Jack sold 40 apples\n    # Therefore, 4/7*(X/2) = 40\n    # Solving for X gives us the total number of apples Jack has\n    \n    X = 40 * (2/(4/7))\n    return X\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    ans = sum(range(200, 209, 2))\n    return ans\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_numbers = [int(''.join(p)) for p in permutations(digits)]\n    closest_number = min(all_numbers, key=lambda x: abs(x - 2978))\n    return closest_number\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    n = 10\n    # The formula for the maximum number of regions created by n lines is given by:\n    # R(n) = n*(n + 1)/2 + 1\n    ans = n * (n + 1) // 2 + 1\n    return ans\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    # Prime factorization of 7007\n    factors = []\n    n = 7007\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    factors.sort()\n    \n    # Since we need 2-digit multiples of 7, we group the prime factors such that each group is a multiple of 7\n    # within the range [10, 99] - the range of 2-digit numbers. \n    product_a = factors[0] * factors[-1]  # Smallest and largest prime factor\n    product_b = factors[1] * factors[-2]  # Second and second to last prime factor\n    \n    # Check that both products are 2-digit numbers and multiples of 7\n    if 10 <= product_a <= 99 and 10 <= product_b <= 99 and \\\n       product_a % 7 == 0 and product_b % 7 == 0:\n        return product_a + product_b\n    else:\n        return None\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    # Let the number Freya thought of be x\n    # According to the question, we form the equation: 2x - 10 = 50\n    # We will now isolate x by performing inverse operations\n    result = 50 + 10  # Add 10 to both sides of the equation\n    x = result / 2    # Divide by 2 to both sides to get x\n    return x\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Average of first two numbers is 10\n    average_first_two = 10\n    total_first_two = average_first_two * 2\n    \n    # Average of last two numbers is 22\n    average_last_two = 22\n    total_last_two = average_last_two * 2\n    \n    # Average of first and last numbers is 14\n    average_first_last = 14\n    total_first_last = average_first_last * 2\n    \n    # Let's denote the four numbers by a, b, c, and d.\n    # So, we have:\n    # a + b = total_first_two\n    # c + d = total_last_two\n    # a + d = total_first_last\n    \n    # We want to find the average of b and c.\n    # From the above, we can express b + c as:\n    # (a + b + c + d) - (a + d)\n    # The sum of all four numbers can be found by adding the total of the first two and the last two.\n    # Then we subtract the sum of the first and last to leave the sum of the two middle numbers.\n    \n    sum_all_numbers = total_first_two + total_last_two\n    sum_middle_numbers = sum_all_numbers - total_first_last\n    \n    # Average of the two middle numbers will be their sum divided by 2\n    average_middle_numbers = sum_middle_numbers / 2\n    \n    return average_middle_numbers\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_ab = 22\n    c = 19\n    total_ab = 2 * average_ab\n    total_abc = total_ab + c\n    average_abc = total_abc / 3\n\n    return average_abc\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let the average age of Chinese, English, and Mathematics teachers be C, E, and M respectively.\n    # According to the problem statement:\n    # (C + E) / 2 = 34   =>   C + E = 68\n    # (E + M) / 2 = 36   =>   E + M = 72\n    # (C + M) / 2 = 44   =>   C + M = 88\n    # We need to find the average of C, E, and M\n    \n    # Sum of all three equations gives us: C + E + E + M + C + M = 68 + 72 + 88\n    total = 68 + 72 + 88\n    # There are 2E, 2C, and 2M in the sum, so to find the average of C, E, and M:\n    # We divide the total by 2 (to get C + E + M) and then divide by 3 (to get the average)\n    average_age = total / 2 / 3\n    return average_age\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "from datetime import date\n\ndef solution():\n    birth_date = date(1533, 9, 7)\n    death_date = date(1603, 3, 24)\n    age_at_death = death_date.year - birth_date.year - ((death_date.month, death_date.day) < (birth_date.month, birth_date.day))\n    return age_at_death\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # Using the Pigeonhole Principle, we calculate the minimum number of cakes\n    # in the layer with the most cakes by dividing the total cakes by layers\n    # and then adding one to ensure at least one layer has more.\n    max_cakes = (total_cakes // layers) + (total_cakes % layers != 0)\n    \n    return max_cakes\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    length = 23\n    max_side = int(length ** 0.5)\n    cut_length = length - max_side**2\n    return cut_length\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    # (21 + 1) * 7 - (20 + (1 * 7))\n    ans = (21 + 1) * 7 - (20 + (1 * 7))\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    result = 0\n    for i in range(1, 2019):\n        result += (2018 + i) / 5 - int((2018 + i) / 5)\n    return result\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(benson - chelsia, 18)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    repetitions = factorial(2)  # The number 1 is repeated twice\n    all_permutations = factorial(total_digits)\n    \n    ans = all_permutations // repetitions\n    return ans\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = 3 * total_students // 10\n    year_5_girls = 3 * year_5_students // 5\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    ans = 12 * 1.99\n    return ans\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum([1/i for i in range(1995, 2009)])\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    \n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    # The total number of cookies is 425.\n    # Box 1 has 11 cookies.\n    # The number of cookies in each box forms an arithmetic progression.\n    \n    # Let's denote the number of cookies in the first box as a1 and the common difference as d.\n    # Then, the sum of an arithmetic series is given by:\n    # S_n = n/2 * (2*a1 + (n-1)*d), where n is the number of boxes, which is 10.\n    \n    # We substitute known values: S_10 = 425, a1 = 11, n = 10.\n    # We get: 425 = 10/2 * (2*11 + 9*d)\n    # Simplifying: 425 = 5 * (22 + 9d)\n    #             425 = 110 + 45d\n    #               d = (425 - 110) / 45\n    \n    d = (425 - 110) // 45\n\n    return d\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # For seven consecutive odd numbers, we can denote them as:\n    # x, x+2, x+4, x+6, x+8, x+10, x+12, where x is the smallest odd number.\n    # The sum of these numbers would be: 7x + (2+4+6+8+10+12)\n    # We are given that the sum is 357.\n    # So we can set up the equation: 7x + 42 = 357\n    # Solving for x gives us the smallest number.\n    \n    total_odd_numbers = 7\n    sum_of_intervals = 2 + 4 + 6 + 8 + 10 + 12\n    sum_of_numbers = 357\n    x = (sum_of_numbers - sum_of_intervals) / total_odd_numbers\n    return int(x)\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # The only even prime number is 2\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "出错啦，请重试"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Carter's speed and Martin's speed\n    carter_speed, martin_speed = symbols('carter_speed martin_speed')\n\n    # Given ratio of timetaken by Martin and Carter to complete a race\n    # time_martin / time_carter = 9 / 13\n    # Since time = distance / speed, we assume the distance is d for both and can cancel it out in the ratio\n    # which gives us martin_speed / carter_speed = 13 / 9\n\n    # Martin's speed is 20 meters/minute faster than Carter's\n    equation1 = Eq(martin_speed, carter_speed + 20)\n\n    # Time ratio converted to speed ratio\n    equation2 = Eq(martin_speed / carter_speed, 13 / 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (carter_speed, martin_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    \n    # Use the Chinese Remainder Theorem to find a solution to the system of congruences\n    x, mod = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "出错啦，请重试"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "出错啦，请重试"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # 1 room painted is the unit of work\n    # Fred and George together paint 1/6 of a room per hour\n    fg_rate = 1 / 6\n\n    # Fred paints 1/9 of a room per hour\n    f_rate = 1 / 9\n\n    # George's rate is the difference between Fred and George Together and Fred alone\n    g_rate = fg_rate - f_rate\n\n    # George's time to paint the room is the reciprocal of his rate\n    g_time = 1 / g_rate\n\n    return g_time\n\nans = solution()"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    num_entrances = 5\n    num_people = 4\n\n    # Since the order of the people entering matters and they can choose \n    # the same entrance, it's a permutations problem with repetition allowed.\n    ways = num_entrances ** num_people\n\n    return ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    return 2.42 * 1.6\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    value_after_first_year = 10500\n    original_value = value_after_first_year / 1.05\n    value_after_second_year = original_value * (1 - 0.05)\n    profit_or_loss = value_after_second_year - original_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // (5 * 7)\n\n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Legs of pets\n    legs_of_cats = 4 * 2\n    legs_of_dogs = 4 * 2\n    legs_of_rabbit = 4 * 1\n\n    # Legs of birds are 2 each, but we don't know the number of birds yet\n\n    # Calculate the remaining legs for the birds\n    remaining_legs_for_birds = 28 - (legs_of_cats + legs_of_dogs + legs_of_rabbit)\n\n    # Since each bird has 2 legs, the number of birds is half the remaining legs\n    number_of_birds = remaining_legs_for_birds / 2\n\n    return int(number_of_birds)\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    average = 6\n    total_numbers = 4\n    missing_number = (average * total_numbers) - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x in range(1, 13 - 1):\n        for y in range(1, 13 - x):\n            z = 13 - x - y\n            if z > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(2, 50):  # numbers less than 50\n        if num % 3 == 2 and isprime(num) and (num - 2) % 5 == 0:  # given conditions\n            return num\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    n = 400 // 4  # Calculate the number of terms in one half of the sequence\n    sum_half_sequence = (n * (4 + 400)) // 2  # Sum of the arithmetic sequence for one half\n    total_sum = 2 * sum_half_sequence - 400  # Multiply by 2 for both halves and subtract the middle term which is added twice\n    return total_sum\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ruler, pen = symbols('ruler pen')\n    # 2 rulers and 9 pens cost $21.60\n    equation1 = Eq(2 * ruler + 9 * pen, 21.60)\n    # A ruler costs $0.90 more than a pen\n    equation2 = Eq(ruler, pen + 0.90)\n\n    solutions = solve((equation1, equation2), (ruler, pen))\n\n    return solutions[ruler]\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_price = 5\n    refill_price = 1\n    total_money = 10\n\n    cups = 1  # he can always afford at least one cup\n    remaining_money = total_money - initial_cup_price\n\n    # Now calculate how many refills can he afford with the remaining money\n    refills = remaining_money // refill_price\n    cups += refills\n\n    return cups\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'  # Given digits\n    permutations_list = permutations(digits)  # Generate all permutations of the given digits\n\n    for perm in permutations_list:  # Iterate over each permutation\n        first_num = int(''.join(perm[:3]))  # Convert the first 3 digits to an integer\n        second_num = int(''.join(perm[3:6]))  # Convert the next 3 digits to an integer\n        third_num = int(''.join(perm[6])) * 100  # Convert the last digit to an integer and place it as the hundredth\n        \n        # Check if the conditions in the problem are met\n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    income = 120000\n    tax_for_first_50k = 0.06 * 50000\n    tax_for_rest = (0.06 + T/100) * (income - 50000)\n    total_tax_paid = 10000\n    \n    tax_equation = Eq(tax_for_first_50k + tax_for_rest, total_tax_paid)\n    \n    T_value = solve(tax_equation, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let the original number of red pens be 3x and black pens be 7x\n    # According to the question, after selling y pens of each:\n    # (3x - y) : (7x - y) = 5 : 13, and there were 20 red pens left, so 3x - y = 20\n\n    # From the first ratio relation, we can express y in terms of x:\n    # (3x - y) / (7x - y) = 5 / 13\n    # 13 * (3x - y) = 5 * (7x - y)\n    # 39x - 13y = 35x - 5y\n    # 4x = 8y\n    # x = 2y\n\n    # Substitute x = 2y into 3x - y = 20:\n    # 3 * (2y) - y = 20\n    # 6y - y = 20\n    # 5y = 20\n    # y = 4\n\n    # Number of red pens sold is y\n    return y\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the groups of books themselves (story, comic, science)\n    group_arrangements = factorial(3)\n    \n    # Number of ways to arrange books within each group\n    story_books_arrangements = factorial(2)\n    comic_books_arrangements = factorial(3)\n    science_books_arrangements = factorial(4)\n    \n    # Total arrangements is the product of the group arrangements and the arrangements within each group\n    total_arrangements = (group_arrangements * story_books_arrangements *\n                          comic_books_arrangements * science_books_arrangements)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    from math import comb\n\n    # Since each friend must get at least one ice-cream, we will first give them one each\n    remaining_ice_creams = 5 - 3  \n\n    # Now we need to distribute the remaining ice creams among the three friends\n    # This is equivalent to the problem of putting two indistinguishable items (ice-creams)\n    # into three distinguishable boxes (friends), which is a combinations with repetition problem\n\n    # Number of ways to do that is given by the formula: comb(n + r - 1, r)\n    # Where n is the number of boxes and r is the number of items\n    # In our case, n = 3 (three friends) and r = 2 (remaining_ice_creams)\n\n    ways_to_distribute = comb(3 + remaining_ice_creams - 1, remaining_ice_creams)\n\n    return ways_to_distribute\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_gravel = 300\n    bag_weight = 12\n    num_bags = total_gravel / bag_weight\n    return -(-total_gravel // bag_weight)  # Ceiling division to ensure enough bags are purchased\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5/(3*x+2)) + (2/(1.5*x+1)), (4.5/(5-6*x)) - (3/(2.5-3*x)))\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Total peaches eaten by 3 monkeys in 2 days\n    total_peaches_for_3_monkeys = 96\n    # As every monkey eats the same amount of peaches each day,\n    # we can calculate peaches eaten by one monkey in 1 day (unit rate)\n    peaches_per_monkey_per_day = total_peaches_for_3_monkeys / (3 * 2)\n\n    # Now, we find how many peaches 5 monkeys eat in 4 days using the unit rate\n    total_peaches_for_5_monkeys_4_days = peaches_per_monkey_per_day * 5 * 4\n\n    return total_peaches_for_5_monkeys_4_days\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, solve\n\n    x, y = symbols('x y')\n    equation = 9 * 2 - y * x\n\n    # Find the proportional relationship between x and y\n    y_for_x_3 = solve(equation.subs(x, 3), y)[0]\n\n    return y_for_x_3\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['2', '3', '5', '6']\n    odd_nums = []\n\n    for p in permutations(digits):\n        num = int(''.join(p))\n        if num % 2 != 0:\n            odd_nums.append(num)\n\n    ans = min(odd_nums)\n    return ans\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    total_sweets = 0\n    \n    # Start with 1270 because the least value M can take is 0 (e.g., 1270)\n    for M in range(0, 10):\n        # Construct the number \\overline{127M}\n        num_sweets = int(\"127\" + str(M))\n        \n        # Check if the number of sweets is divisible by 25 (no remainder)\n        if num_sweets % 25 == 0:\n            total_sweets = num_sweets\n            break\n            \n    # Calculate the number of sweets in each bag\n    sweets_per_bag = total_sweets // 25\n    \n    return sweets_per_bag\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # If we take out one ball of each color, we are not guaranteed to have two of the same color.\n    # So after that, the very next ball we take out must assure us of having at least two of the same color.\n    num_green_balls = 7\n    num_blue_balls = 8\n    # Taking one ball of each color out.\n    total_balls_taken = num_green_balls + num_blue_balls\n    \n    # We need one more to be sure that we have at least two of the same colour.\n    return total_balls_taken - 1 + 1\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    # Reverse the steps to find out the month and day\n    result = 1126\n    \n    # Step 8: Add 50 to the result\n    result += 50\n    \n    # Step 7: Undo the last addition by subtracting day of birth\n    # Day of birth unknown, so just assign result before subtracting day of birth to a new variable\n    temp_result = result\n    \n    # Step 6: Undo the last multiplication by dividing by 5\n    temp_result /= 5\n    \n    # Step 5: Undo the subtraction by adding 20\n    temp_result += 20\n    \n    # Step 4: Undo the last multiplication by dividing by 5\n    temp_result /= 5\n    \n    # Step 3: Undo the addition by subtracting 6\n    temp_result -= 6\n    \n    # Step 2: Undo the last multiplication by dividing by 4\n    month = int(temp_result / 4)\n    \n    # Step 1: At this point, temp_result should be equal to the month of birth, so the rest is the day\n    day = result - (month * 4 * 5 * 5 + 50)\n    \n    # The birthday is in the format MMDD\n    birthday = f\"{month:02d}{day:02d}\"\n    \n    return birthday\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Calculate the total spent from January to March\n    jan_to_mar = 450 * 3\n    # Calculate the total spent from April to July\n    apr_to_jul = 350 * 4\n    # Given the total from August to October\n    aug_to_oct = 1250\n    # Calculate the total spent from November to December\n    nov_to_dec = 400 * 2\n\n    # Calculate the total amount spent in the year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n\n    # Calculate the average spent per month from January to December\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from sympy import root, sqrt\n\n    numerator = -6.94 - root(9.604, 3)\n    denominator = sqrt(44.541 / 67) - ((-377 / 6) * (5 / 3))\n\n    ans = round(numerator / denominator, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    # Calculate the total cost of each type of book\n    science_fictions_cost = 20 * 4\n    comic_books_cost = 10 * 5\n    novels_cost = 20 * 6\n\n    # Calculate the total cost of all books\n    total_cost = science_fictions_cost + comic_books_cost + novels_cost\n\n    # Since the amount of book remains unchanged, the number of books is 50\n    num_books = 50\n\n    # Calculate the average cost per book\n    average_cost = total_cost / num_books\n\n    return average_cost\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let x be the number we think of\n    x = symbols('x')\n    \n    # Perform the operations step by step on x\n    # Step 1: Add 3\n    x = x + 3\n    # Step 2: Multiply by 2\n    x = x * 2\n    # Step 3: Take away 2\n    x = x - 2\n    # Step 4: Add 10\n    x = x + 10\n    # Step 5: Divide by 2\n    x = x / 2\n    # Step 6: Take away the number you started with (original x)\n    x = x - symbols('x')\n\n    # Simplify the expression to find out what number is left\n    ans = x.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(51, 100)) # Primerange generates prime numbers in the half-open interval [a, b)\n    return len(primes)\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    felicia_initial, janice_initial = symbols('felicia_initial janice_initial')\n    felicia_sold = 3/5 * felicia_initial\n    janice_bought = 2/5 * felicia_sold\n    felicia_final = felicia_initial - felicia_sold\n    janice_final = janice_initial + janice_bought\n\n    equation1 = Eq(janice_initial, 96)  # Janice had 96 bracelets initially\n    equation2 = Eq(felicia_final / janice_final, 5/7)  # The final ratio\n    \n    solutions = solve((equation1, equation2), (felicia_initial, janice_initial))\n\n    return solutions[janice_bought]\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    ans = lcm(9, 10, 15)\n    return ans\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    individual_price = 35  # individual price in pence\n    multipack_price = 390  # multipack price in pence (1 pound = 100 pence)\n    total_individual_price = individual_price * 15\n    savings = total_individual_price - multipack_price\n    return savings / 100  # converting the savings back to pounds\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate_of_interest = 0.05\n    time_in_years = 11\n\n    total_amount = principal * (1 + rate_of_interest * time_in_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    result = (3/4 + 3/4 + 3/4) - 1\n    return result * 4\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the amount of money Sophie's mother gave her\n    # Price of 1 serving of ice cream is (5x - 2.30) / 5\n    # Price of 3 servings of ice cream is 3 * ((5x - 2.30) / 5)\n    # Money left after buying 3 servings is x - 3 * ((5x - 2.30) / 5)\n    # Set the equation for money left to 0.30 (30 cents)\n\n    # Calculate price for one serving based on the shortage and required servings\n    price_per_serving = (5 * (0.30 + 2.30)) / 5\n    \n    # Calculate the money Sophie spent on 3 servings\n    money_spent_on_3_servings = 3 * price_per_serving\n    \n    # Calculate the initial amount based on the money spent and the money left\n    initial_amount = money_spent_on_3_servings + 0.30\n    \n    return initial_amount\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, 2/7 * (jack - 72))\n\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    orange = 6\n    pink = 4\n    brown = 12\n    # Annabella needs to take out all other colors to ensure she gets at least one yellow shirt\n    shirts_to_take = orange + pink + brown + 1 # plus one to get at least one yellow shirt\n\n    return shirts_to_take\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    daytime_climb = 3\n    nighttime_slip = 2\n    net_progress = daytime_climb - nighttime_slip\n    \n    # Calculate the distance climbed before the final day\n    distance_before_final_day = total_distance - daytime_climb\n    \n    # Calculate the number of full days needed to reach or exceed the distance before the final day\n    full_days = distance_before_final_day // net_progress\n    \n    # If there's a remainder, we need one extra day for the worm to climb out\n    if distance_before_final_day % net_progress != 0:\n        full_days += 1\n    \n    # Add one more day for the final climb\n    total_days = full_days + 1\n    \n    return total_days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    first_period_pages = 25 * 4\n    second_period_pages = 40 * 6\n    last_period_pages = 80\n    total_pages = first_period_pages + second_period_pages + last_period_pages\n    total_days = 4 + 6 + 5\n    average_pages_per_day = total_pages / total_days\n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    penny_toys_after = 14\n    brother_toys_after = 12\n    toys_difference = penny_toys_after - brother_toys_after\n\n    brother_toys_original = brother_toys_after - toys_difference\n\n    return brother_toys_original\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walk_speed = 40  # Walking speed in meters per minute\n    cycle_speed = 60  # Cycling speed in meters per minute\n    \n    # Assume the distance to the library is d meters\n    d = 1  # The actual value is irrelevant for average speed calculation\n\n    # Time taken to walk to the library is distance divided by walk speed\n    walk_time = d / walk_speed\n    \n    # Time taken to cycle from the library is distance divided by cycle speed\n    cycle_time = d / cycle_speed\n\n    # Total time for the whole trip is the sum of walk time and cycle time\n    total_time = walk_time + cycle_time\n    \n    # Total distance for the whole trip is twice the distance d (to and from the library)\n    total_distance = 2 * d\n\n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate = 54\n    strawberry = chocolate + 12\n    vanilla = 3 * chocolate\n\n    total_cookies = chocolate + strawberry + vanilla\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20\n    d = 2\n    total_sum = 560\n    # formula for the sum of an arithmetic progression: S_n = n/2 * (2a + (n-1)d)\n    # where S_n is the total sum, n is the number of terms, a is the first term, and d is the common difference\n    # 560 = 20/2 * (2a + (20-1)*2)\n    # Solve for the first term a\n    a = (total_sum - (n * (n - 1) * d) / 2) / n\n    return a\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    multiplication = 12345679 * 63\n    return multiplication\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # age has to be two digits\n        reverse_age = int(str(age)[::-1])  # reverse the digits of age\n        if reverse_age + 1 == age / 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    num_suits = 4\n    cards_per_suit_to_guarantee = 4\n\n    # By the pigeonhole principle, we need to draw one more than the product of\n    # the other three suits' card counts to guarantee a fourth card of the same suit.\n    ans = (cards_per_suit_to_guarantee - 1) * num_suits + 1\n\n    return ans\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percentage_sold = 60\n    remaining_tickets = 28\n    total_capacity = remaining_tickets / (100 - percentage_sold) * 100\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (2 / 3) * number\n    return two_thirds\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Initial amount from two-dollar notes\n    two_dollar_notes = 5 * 2\n    \n    # Initial amount from fifty-cent coins converted to dollars\n    fifty_cent_coins = 7 * 0.50\n    \n    # Total initial amount\n    total_initial = two_dollar_notes + fifty_cent_coins\n    \n    # Cost of the file\n    file_cost = 11.95\n    \n    # Money left after buying the file\n    money_left = total_initial - file_cost\n    \n    return money_left\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_sequence = n * (n + 1) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_slide = 1\n    net_distance = day_distance - night_slide\n    day_count = 0\n\n    while total_distance > 0:\n        day_count += 1\n        total_distance -= day_distance\n        if total_distance <= 0:\n            break\n        total_distance += night_slide\n\n    return day_count\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) / factorial(n - r)\n\n    ans = permutations(18, 3)\n    return int(ans)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hayden, mitchell, spent = symbols('hayden mitchell spent')\n\n    equation1 = Eq(hayden - spent, 4 * (mitchell - spent))\n    equation2 = Eq(hayden, 1420)\n    equation3 = Eq(mitchell, 505)\n\n    solutions = solve((equation1, equation2, equation3), (hayden, mitchell, spent))\n\n    return solutions[spent]\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n\n    # Equation representing the number of children\n    children = (4/7) * total_people\n    # Equation representing the number of girls, which is 5/8 of the children \n    girls = (5/8) * children\n\n    # We have the number of girls, which is 45, so we set up the equation\n    equation = Eq(girls, 45)\n\n    solutions = solve(equation, total_people)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28\n    speed_of_current = 3\n    distance = 150\n\n    speed_upstream = speed_in_still_water - speed_of_current\n    time_upstream = distance / speed_upstream  # time = distance / speed\n\n    return time_upstream\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_between_each = 2\n    \n    # Number of intervals between ginkgo trees is one less than the number of trees\n    intervals = ginkgo_trees - 1\n    \n    # Total willow trees is the number of intervals multiplied by the willow trees planted in each interval.\n    willow_trees = intervals * willow_between_each\n    \n    return willow_trees\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "出错啦，请重试"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "出错啦，请重试"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total_money = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # equations based on the problem statement:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    \n    # The total weight T is A + B + C.\n    # To find the value of T, we can add all three given equations:\n    # (A + B) + (B + C) + (A + C)\n    # We get 2A + 2B + 2C\n    # But this is twice the total weight, so we divide it by 2 to get the actual total weight.\n    \n    # Putting the numbers in we get:\n    T = (102 + 97 + 93) // 2\n\n    return T\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "出错啦，请重试"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "出错啦，请重试"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "出错啦，请重试"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "出错啦，请重试"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    n = 1  # Smallest possible square size\n    while True:\n        # Number of people on the outside layer of the square (4n-4 for n>1, and 1 for n=1)\n        outer = 4 * n - 4 if n > 1 else 1\n        # Number of people on the inside (total - outer)\n        inner = (n - 2)**2 if n > 2 else 0\n        # Number of students and teachers\n        students = outer + inner\n        teachers = n**2 - students\n        # Check if the difference is 80\n        if students - teachers == 80:\n            # Total number of people\n            total_people = students + teachers\n            return total_people\n        n += 1  # Increase square size\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "出错啦，请重试"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts collected by each friend\n    chloe, david, emily = symbols('chloe david emily')\n    \n    # We are given the amounts collected by Alan and Bilal\n    alan = 74\n    bilal = 86\n    \n    # Create equations based on the information given in the problem\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    \n    # The sum of all amounts collected is £400\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    length, width = symbols('length width')\n    equation = Eq(2 * (length + width), 72)\n    length_relation = Eq(length, 2 * width)\n    \n    solutions = solve((equation, length_relation), (length, width))\n    \n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "出错啦，请重试"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Nick's solution\n    nick_salt = 300 * 0.12\n    nick_total = 300\n    \n    # Nicole's solution\n    nicole_salt = 500 * 0.28\n    nicole_total = 500\n    \n    # Combined solution\n    combined_salt = nick_salt + nicole_salt\n    combined_total = nick_total + nicole_total\n    \n    # Concentration of combined solution\n    concentration = combined_salt / combined_total\n    \n    return concentration * 100  # Convert to percentage\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    third_term = 23\n    fifteenth_term = 155\n    # Distance between terms is 15 - 3 = 12 steps\n    steps = 15 - 3\n    # common difference (d) = (fifteenth_term - third_term) / steps\n    common_diff = (fifteenth_term - third_term) / steps\n    return common_diff\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "出错啦，请重试"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "出错啦，请重试"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_worker_per_hour = total_parts / (total_workers * total_hours)\n    \n    return parts_per_worker_per_hour\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    advance_during_day = 5\n    slide_during_night = 3\n    net_advance_per_day = advance_during_day - slide_during_night\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance - advance_during_day:\n        current_distance += net_advance_per_day\n        days += 1\n    \n    days += 1\n    return days\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # B scored 50 points less than A\n    equation1 = Eq(B, A - 50)\n    # If B gave A 25 points, then the score of A would be 5 times that of B\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    # Initialize the cube numbers (as there are only 34 cube numbers less than or equal to 44000),\n    # and check which cube number 44000 is divisible by to get the value of q\n    for i in range(1, 35):\n        cube_number = i ** 3\n        if 44000 % cube_number == 0:\n            q = 44000 // cube_number\n            # We also need to ensure that q itself is not a cube number,\n            # because q must be the factor that prevents 44000/q from being a cube number\n            q_root = q ** (1/3)\n            if q_root.is_integer():  # If q is also a cube, continue\n                continue\n            # If q is not a cube number, then we've found our answer\n            return q\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    # Initialize variables\n    # Start checking from the first positive square and cube numbers\n    square = 1\n    cube = 1\n    found = False\n    \n    # Keep checking until we identify an overlap between square + 1 and cube\n    while not found:\n        # Calculate one more than the current cube\n        cube_plus_one = cube ** 3 + 1\n        \n        # Check if cube_plus_one is a perfect square\n        if int(cube_plus_one ** 0.5) ** 2 == cube_plus_one:\n            # If it is a perfect square, we have the answer\n            found = True\n        else:\n            # Else, increase the cube number and continue\n            cube += 1\n\n    return cube_plus_one\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "出错啦，请重试"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    applied_force = 250  # force applied to the crate in N\n\n    # Calculate the normal force, which is equal to mass * gravity\n    gravity = 9.81  # acceleration due to gravity in m/s^2\n    normal_force = mass * gravity\n\n    # Calculate the maximum static friction\n    max_static_friction = coefficient_of_static_friction * normal_force\n\n    # The magnitude of the force of static friction is the minimum between\n    # the applied force and the maximum static friction\n    force_of_static_friction = min(applied_force, max_static_friction)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "出错啦，请重试"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    frac_number = 8 / 100\n    decimal_number = 0.7\n\n    if frac_number > decimal_number:\n        ans = frac_number\n    else:\n        ans = decimal_number\n\n    return ans\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "出错啦，请重试"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "出错啦，请重试"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n    \n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n    \n    return solutions[bentley]\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "出错啦，请重试"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    bounce_height_ratio = 0.1\n    total_distance = initial_height\n    \n    while initial_height > 0:\n        initial_height *= bounce_height_ratio\n        total_distance += 2 * initial_height\n    \n    return total_distance\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "出错啦，请重试"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "def solution():\n    # Convert mixed fractions to improper fractions\n    first_fraction = 3\n    second_fraction = 4/5\n    third_fraction = 1 * 9/9 + 1/9  # 1 1/9\n    fourth_fraction = 5 * 2/2 + 1/2  # 5 1/2\n    fifth_fraction = 3/11\n    \n    # Calculate the product\n    ans = first_fraction * second_fraction * third_fraction * fourth_fraction * fifth_fraction\n\n    return ans\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    total_distance = 3000\n    buck_speed = 600\n    elephant_speed = 250\n\n    buck_time = total_distance / buck_speed\n    elephant_time = total_distance / elephant_speed\n\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    percentage_bad = 15\n    total_apples = 200\n\n    bad_apples = (percentage_bad / 100) * total_apples\n\n    return int(bad_apples)\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    return 123 - 67\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    sheet = 1\n    while True:\n        # For a sheet folded in half, the page numbers will be sheet*2-1, sheet*2, sheet*2+1 and sheet*2+2.\n        sum_of_pages = (sheet * 2 - 1) + (sheet * 2) + (sheet * 2 + 1) + (sheet * 2 + 2)\n        if sum_of_pages == 58:\n            return sheet\n        sheet += 1\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Number of choices for one drink (coffee, milk)\n    num_drinks = 2 \n    # Number of choices for one food item (hamburger, burrito, bagel)\n    num_food_items = 3\n    \n    # Using the principle of multiplication to find the total combinations\n    total_combinations = num_drinks * num_food_items\n    \n    return total_combinations\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Considering the series is symmetrical around the center, we can calculate half of the series and multiply by two.\n    \n    # Series: 4, 8, ..., 396, 400\n    # This is an arithmetic series with the first term (a) as 4, the last term (l) as 400, and the common difference (d) as 4.\n    a = 4\n    l = 400\n    d = 4\n\n    # Calculating the number of terms (n) in the half series using the formula for the last term of an arithmetic series: l = a + (n-1)d\n    n_half = ((l - a) / d) + 1\n\n    # Calculate sum of the half series using the formula for the sum of an arithmetic series: S = n/2 * (a + l)\n    S_half = n_half * (a + l) / 2\n\n    # The total sum is the sum of the half sequence times 2\n    total_sum = S_half * 2\n    return int(total_sum)\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlocked = 0\n    for locker in range(1, 101):\n        if locker % 3 == 0:\n            unlocked += 1\n        if locker % 5 == 0:\n            unlocked += 1  # Change the status of lockers\n    for i in range(1, 11):   # There are 10 perfect squares between 1 and 100 (1^2 to 10^2)\n        if (i * i) % 3 == 0 or (i * i) % 5 == 0:\n            unlocked -= 1  # Change the status of perfect squares divisible by 3 or 5\n    return 100 - unlocked\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Simon's speed\n    simon_speed = 80  # km/h\n\n    # Wife's speed\n    wife_speed = 60  # km/h\n\n    # Distance between offices\n    distance_between_offices = 15  # km\n\n    # Relative speed is the difference between Simon's and his wife's speed\n    relative_speed = simon_speed - wife_speed  # km/h\n\n    # Time it takes for Simon to cover the distance between the offices\n    time_to_catch_up = distance_between_offices / relative_speed  # hours\n\n    # Convert this time to minutes\n    time_to_catch_up_minutes = time_to_catch_up * 60  # minutes\n\n    # Starting time 6:10 pm, converting to a datetime object\n    starting_time = datetime.strptime('18:10', '%H:%M')\n\n    # Calculate the time Simon overtakes his wife\n    overtaking_time = starting_time + timedelta(minutes=time_to_catch_up_minutes)\n\n    # Convert overtaking time to a string in the format HH:MM\n    ans = overtaking_time.strftime('%H:%M')\n\n    return ans\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Ways to reach the 5th step:\n    # 1 step at a time (1 way)\n    # 1-1-1-2, 1-1-2-1, 1-2-1-1, 2-1-1-1 (4 ways)\n    # Total ways to reach the 5th step: 1 + 4 = 5\n    \n    # Ways to reach the 10th step from the 5th step:\n    # 1 step at a time (1 way)\n    # 1-1-1-1-2, 1-1-1-2-1, 1-1-2-1-1, 1-2-1-1-1, 2-1-1-1-1 (5 ways)\n    # 1-1-2-2, 1-2-1-2, 1-2-2-1, 2-1-1-2, 2-1-2-1, 2-2-1-1 (6 ways)\n    # Total ways to reach the 10th step from the 5th step: 1 + 5 + 6 = 12\n    \n    # Multiply the ways to reach the 5th step by the ways to reach the 10th step from the 5th step\n    ans = 5 * 12\n    return ans\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    total_minutes = 12\n    total_pancakes = pancakes_per_minute * total_minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # The cost of 12 pencils\n    cost_of_12_pencils = 1.80\n    # The cost of one pencil\n    cost_of_one_pencil = cost_of_12_pencils / 12\n    # The ratio of the cost of a pen to the cost of a pencil is 7:3\n    ratio_pen_to_pencil = 7 / 3\n    # The cost of one pen\n    cost_of_one_pen = cost_of_one_pencil * ratio_pen_to_pencil\n    # The cost of 5 pens\n    cost_of_five_pens = 5 * cost_of_one_pen\n    \n    return cost_of_five_pens\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_distance = 500\n    total_days = 5\n    distance_per_day = total_distance / total_days\n    return distance_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    # To ensure 8 people do not come from the same country, max participants per country (8)\n    max_people_per_country = 8\n    participants = (countries * max_people_per_country) + 1\n    # This will ensure that there is at least one country with 9 participants.\n    return participants\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    total_sum = 2014\n    num_numbers = 53\n\n    average = total_sum / num_numbers\n    largest_number = average + (num_numbers - 1) / 2\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    \n    # Sandra wrote 88 instead of 98 by mistake and got 22\n    # So the incorrect equation is 88 / A = 22\n    incorrect_equation = Eq(88 / A, 22)\n    \n    # Solve for A\n    found_A = solve(incorrect_equation, A)\n    \n    # Now use the correct value of A to calculate what 98 / A should have been\n    correct_answer = 98 / found_A[0]\n    \n    return found_A[0], correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    cost_for_twelve_calculators = cost_per_calculator * 12\n    return cost_for_twelve_calculators\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_speed = 5 / 6   # Lucas's speed in laps per minute\n    miller_speed = 5 / 10  # Miller's speed in laps per minute\n\n    relative_speed = lucas_speed - miller_speed  # Relative speed in laps per minute\n\n    time_to_overtake = 1 / relative_speed  # Time required for Lucas to overtake Miller once\n\n    return time_to_overtake * 60  # Convert minutes to seconds\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # we'll use brute force to find the optimal solution\n    # we'll try every possible combination of crossings and return the smallest time\n    people = [5, 5, 7, 9]\n    shortest_time = float('inf')  # Initialize to a very large number\n\n    # there are 4 options for the first person to cross with the second person\n    for i in range(4):\n        for j in range(i + 1, 4):\n            first_crossing_time = max(people[i], people[j])\n            for k in range(4):\n                if k != i and k != j:\n                    # One of the first two returns\n                    second_person_back_time = people[k]\n                    for l in range(4):\n                        if l != i and l != j and l != k:\n                            # Remaining two cross\n                            second_crossing_time = max(people[k], people[l])\n                            # Faster of the initial pair returns\n                            first_person_back_time = people[i] if i < j else people[j]\n                            total_time = (first_crossing_time + second_person_back_time +\n                                          second_crossing_time + first_person_back_time)\n                            shortest_time = min(shortest_time, total_time)\n\n    return shortest_time\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_amt = 1670\n    greatest_possible_amt = rounded_amt - 0.01\n    return greatest_possible_amt\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours_to_minutes = 60\n    total_hours = 2 + 1/2\n    total_minutes = total_hours * hours_to_minutes\n    return total_minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for total visitors\n    visitors = symbols('visitors')\n\n    # Express children and men in terms of total visitors\n    children = (3/5) * visitors\n    remaining = visitors - children\n    men = (1/4) * remaining\n\n    # Create the equation based on the problem statement\n    equation = Eq(children - men, 120)\n\n    # Solve the equation\n    solutions = solve(equation, visitors)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_price = 80  # in cents\n    additional_price = 5  # in cents\n    total_cost = 140  # in cents\n    additional_minutes_cost = total_cost - base_price\n    if additional_minutes_cost <= 0:\n        return 15\n    else:\n        additional_minutes = additional_minutes_cost / additional_price\n        total_minutes = 15 + additional_minutes\n        return total_minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age = 8\n    mother_future_age = 54\n    mother_current_age = mother_future_age - (mother_future_age - tim_age)\n    \n    return mother_current_age\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    # Conversion of orange string length from meters to centimeters\n    orange_length_cm = 5.52 * 100\n    \n    # Calculate the length of the purple string\n    purple_length_cm = orange_length_cm / 9.2\n    \n    # Calculate the length of the green string\n    green_length_cm = purple_length_cm + 24.9\n    \n    # Convert the length of the green string back to meters\n    green_length_m = green_length_cm / 100\n    \n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Since we don't have an explicit number puzzle to solve, I assume A is the solution to a number puzzle\n    # where A has a specific value when arranged in a certain way.\n    # Without a specific puzzle, the value of A cannot be determined.\n    # For the sake of this exercise, let's consider A to be an unsolvable variable in this context.\n    A = \"unsolvable\"\n    return A\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 2 == 0 and num % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    \n    work_done_in_half_time = 0.5\n    \n    total_days = 18\n    days_worked_together = total_days - work_done_in_half_time * total_days\n    \n    work_done_together = days_worked_together * (ivy_rate + kevin_rate)\n    remaining_work = 1 - work_done_together\n    \n    remaining_days = work_done_in_half_time * total_days\n    kevin_days_off = remaining_days - remaining_work / ivy_rate\n    \n    return kevin_days_off\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the two pieces of the rope\n    short_piece, long_piece = symbols('short_piece long_piece')\n    \n    # Equation representing the length of the rope\n    total_length_eq = Eq(short_piece + long_piece, 49.5)\n    # Equation representing the relationship between the lengths of the two pieces\n    length_ratio_eq = Eq(long_piece, 5 * short_piece)\n    \n    # Solve the system of equations\n    solutions = solve((total_length_eq, length_ratio_eq), (short_piece, long_piece))\n    \n    # Return the length of the longer piece, rounded to 1 decimal place\n    return round(solutions[long_piece], 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n    \n    total_money_per_day = money_from_mum + money_from_dad\n    number_of_days = 3\n    \n    total_money = total_money_per_day * number_of_days\n    \n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    day_distance = 4\n    night_distance = 1\n    net_distance = day_distance - night_distance\n    days = 0\n    current_distance = 0\n\n    while True:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n    \n    return days\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time it takes for Tim to write the book alone\n    t = symbols('t')\n\n    # Nancy completes 1/6 of the book in one day\n    # Tim completes 1/t of the book in one day\n    # Together they complete 1/4 of the book in one day\n    equation = Eq(1/6 + 1/t, 1/4)\n\n    # Solve for t, the time it takes for Tim to write the book alone\n    tim_alone = solve(equation, t)\n\n    return tim_alone[0]\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_days = 15\n    money = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:\n            money += 5\n        else:\n            money -= 8\n    return money\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    effective_jump = jump_up * 3 - slide_down\n\n    # How many full cycles to reach or exceed the height\n    full_cycles = (total_height - 1) // effective_jump # -1 to ensure it's on the tree before the final jump \n\n    # Jumps taken in full cycles\n    jumps = full_cycles * 3\n\n    # Remaining height after full cycles\n    remaining_height = total_height - full_cycles * effective_jump\n\n    # Additional jumps for the remaining height\n    additional_jumps = 0\n    while remaining_height > 0:\n        additional_jumps += 1\n        remaining_height -= jump_up\n        if remaining_height <= 0:\n            break\n        remaining_height += slide_down\n\n    jumps += additional_jumps\n\n    return jumps\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    # 20% are in Year 7 normally, hence 0.20 * x are Year 7 pupils\n    # After some Year 7 girls miss school, 10% of the remaining 400 are Year 7\n    # So, 0.10 * 400 = 40 are Year 7 pupils now\n    # The difference between the normal Year 7 pupils and the ones after the match is the number of Year 7 girls who missed school\n    # Therefore, 0.20 * x - 40 is the number of Year 7 girls who missed school\n    # The total number of pupils minus the absent Year 7 girls gives us 400\n    # Hence, x - (0.20 * x - 40) = 400\n    # Solving for x, we get the equation x - 0.20 * x + 40 = 400\n\n    # The above equation simplifies to:\n    # 0.80 * x + 40 = 400\n    # 0.80 * x = 360\n    # x = 360 / 0.80\n\n    x = 360 / 0.80\n    return int(x)\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    ans = sum((i / ((i**2 - 1) * (i**2 + i))) for i in range(1, 7)) + 1/22\n    return ans\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_dress = 40 / (2 / 5)\n    initial_amount = remaining_after_dress / (2 / 3)\n    return initial_amount\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n\n    def prime_factorization_count(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n    \n    numerator_zeros = count_trailing_zeros(factorial(999))\n    denominator_zeros = count_trailing_zeros(factorial(300))\n    \n    # The number of zeros in the result equals the difference in the number\n    # of zeros between the numerator and the denominator\n    ans = numerator_zeros - denominator_zeros\n    \n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a, b = 10, 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    ans = 345 * 6\n    return ans\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    remainder = 5217 % 13\n    return remainder\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # The number of students on the outermost layer of a square is 4 times one side minus the 4 corners.\n    # Since 60 students form the outermost layer, and each corner is counted once, we can calculate the length of one side as follows:\n    side_length = (60 + 4) // 4  # Add the 4 corners back and divide by 4 to get the length of one side\n\n    # The total number of students is the square of the side length\n    total_students = side_length ** 2\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, bikes + bikes / 3)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    equation3 = Eq(cars + bikes + lorries, 2 * (cars + bikes + lorries) / 2)\n\n    for total_vehicles in range(2, 100, 2): # total number is even and less than 100\n        equation3 = Eq(cars + bikes + lorries, total_vehicles) \n        solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n        cars_value, bikes_value, lorries_value = solutions[cars], solutions[bikes], solutions[lorries]\n        if cars_value.is_integer and bikes_value.is_integer and lorries_value.is_integer:\n            return (int(cars_value), int(bikes_value), int(lorries_value))\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n\n    while total_tiles > 0:\n        tiles_in_layer = (layer * 2 - 1)**2\n        remaining_tiles = total_tiles - tiles_in_layer\n        \n        if remaining_tiles < 0:\n            tiles_in_layer = total_tiles\n        \n        if layer % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n        \n        total_tiles -= tiles_in_layer\n        layer += 1\n\n    more_tiles_color = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n\n    return more_tiles_color, difference\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18 * 20132013 - 2013 * 180018\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    # The first bin is at the starting point (0m) and the last bin is at the end (300m).\n    # We need to find out how many intervals of 10m fit between the bins,\n    # thus we divide the length of the boulevard by the interval and add 1 for the starting point.\n    num_bins = (boulevard_length // interval) + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    for n in range(1, 1000):  # We start searching from n=1 to an arbitrary upper limit\n        # Creating the number by string manipulation and concatenation\n        number_str = \"26\" + \"2011\" * n + \"7\"\n        number = int(number_str)  # Convert the string to an integer\n\n        # Check divisibility by 33 (33 is 3 * 11, so we need to check for both)\n        if number % 3 == 0 and number % 11 == 0:\n            return n  # If divisible, we return n as the answer\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of buttons in box A and y be the initial number of buttons in box B.\n    x, y = symbols('x y')\n\n    # According to the question:\n    # x = y + 64 (There were 64 more buttons in box A than box B at first)\n    # For every 1 button added to A, 2 buttons were removed from B. \n    # Let's call the number of buttons added to A as 'z'.\n    # So, y - 2z = y - 28 (The number of buttons in box B became 28 fewer than before)\n    # After the operation the ratio of the total number of buttons to the buttons in box B is 4:1.\n    # Therefore, (x + z) + (y - 2z) : (y - 2z) = 4 : 1\n\n    # We write down these equations based on the problem statement:\n    equation1 = Eq(x, y + 64)\n    equation2 = Eq(y - 2*z, y - 28)\n    equation3 = Eq((x + z) + (y - 2*z), 4 * (y - 2*z))\n\n    # Solving the system of equations for x, y, and z\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    # We return the value of x since the question asks for the number of buttons in box A initially.\n    return solutions[x]\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n\n    total_flour_needed = flour_per_cake * number_of_cakes\n\n    return total_flour_needed\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z, rounds = 20, 19, 18, 0\n    while min(x, y, z) > 0:\n        if x >= y and x >= z:\n            x -= 1\n            y += 1\n            z += 1\n        elif y > x and y >= z:\n            y -= 1\n            x += 1\n            z += 1\n        else:\n            z -= 1\n            x += 1\n            y += 1\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # If it takes 3 minutes to cut a log into 4 pieces, this means Bob makes 3 cuts\n    # Each cut takes 1 minute (3 minutes / 3 cuts)\n    cut_time_per_piece = 3 / 3\n    \n    # To cut a log into 8 pieces, Bob needs to make 7 cuts\n    # Multiply the time per cut by the number of cuts needed\n    total_time = cut_time_per_piece * 7\n    \n    return total_time\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    # Let x be the number of rounds Hana won, and y be the number of rounds she lost.\n    # We have two equations based on the problem statement:\n    # Equation 1: x + y = 12 (The total number of rounds played)\n    # Equation 2: 4x - 2y = 24 (The net number of cards won)\n    # We need to solve these two equations to find the value of y (the number of rounds she lost).\n\n    # Solve Equation 1 for x: x = 12 - y\n    # Substitute x in Equation 2:\n    # 4(12 - y) - 2y = 24\n    # 48 - 4y - 2y = 24\n    # 48 - 6y = 24\n    # -6y = 24 - 48\n    # -6y = -24\n    # y = -24 / -6\n    # y = 4\n\n    # Hana lost 4 rounds\n    return 4\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money\n    # Chai Seng spent 6/7 of his money\n    # Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq((chai_seng - (6/7) * chai_seng), (1/2) * (rasidah - (3/5) * rasidah))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n    \n    final_count = initial_cards - duplicates + new_cards\n    return final_count\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # There are 7 spaces for Amy and Judy to occupy together (since they must be together),\n    # as if they were one person, plus the 6 other people.\n    spaces = 7\n\n    # There are 2! ways to arrange Amy and Judy within their shared space.\n    amy_judy_permutations = factorial(2)\n\n    # There are spaces-1! ways to arrange the remaining people around the table\n    # because the circular table's rotations are not counted as unique.\n    others_permutations = factorial(spaces - 1)\n\n    # Multiply the permutations of Amy and Judy with the permutations of the others.\n    total_permutations = amy_judy_permutations * others_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy_initial, ben_initial = symbols('andy_initial ben_initial')\n\n    # Relationship between Andy's and Ben's initial cookies\n    equation1 = Eq(andy_initial, ben_initial - 84)\n\n    # Andy and Ben buy more cookies\n    andy_final = andy_initial + (1/3) * andy_initial\n    ben_final = ben_initial + (1/5) * ben_initial\n\n    # Relationship between Andy's and Ben's final number of cookies\n    equation2 = Eq(andy_final, (1/3) * ben_final)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andy_initial, ben_initial))\n\n    # Calculate Andy's final amount of cookies\n    andy_end = solutions[andy_initial] + (1/3) * solutions[andy_initial]\n\n    return andy_end\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # Since the lollipops are identical and the plates are identical,\n    # the problem is equivalent to solving the partition of the integer 7 into\n    # at most 3 parts, which is a problem of integer partitioning.\n\n    # The partitions of 7 into at most 3 parts are:\n    # 7 = 7\n    # 7 = 6 + 1\n    # 7 = 5 + 2\n    # 7 = 5 + 1 + 1\n    # 7 = 4 + 3\n    # 7 = 4 + 2 + 1\n    # 7 = 4 + 1 + 1 + 1 (not allowed as it uses 4 parts)\n    # 7 = 3 + 3 + 1\n    # 7 = 3 + 2 + 2\n    # 7 = 3 + 2 + 1 + 1 (not allowed as it uses 4 parts)\n    # 7 = 3 + 1 + 1 + 1 + 1 (not allowed as it uses 5 parts)\n    # 7 = 2 + 2 + 2 + 1 (not allowed as it uses 4 parts)\n    # 7 = 2 + 2 + 1 + 1 + 1 (not allowed as it uses 5 parts)\n    # 7 = 2 + 1 + 1 + 1 + 1 + 1 (not allowed as it uses 6 parts)\n    # 7 = 1 + 1 + 1 + 1 + 1 + 1 + 1 (not allowed as it uses 7 parts)\n    \n    # Count the allowed partitions\n    count = 6 # From the valid partition outcomes listed above\n    \n    return count\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    ans = sum(1 / i for i in range(1, 8))\n    return int(ans)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    rate = 0.015\n    final_amount = 37100\n\n    years = 0\n    amount = principal\n    while amount < final_amount:\n        amount *= (1 + rate)\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    num1 = 0.7\n    num2 = 0.04\n    num3 = 1.006\n\n    ans = num1 + num2 + num3\n\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    sequence = [18, -16, 19, -15, 20]\n    next_positive = sequence[-2] + 1\n    next_negative = sequence[-1] - 1\n    n = next_positive if len(sequence) % 2 == 0 else next_negative\n    return n\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    equivalent_numerator = 12\n    original_numerator = 6\n    original_denominator = 20\n\n    # Find the factor by which the numerator is multiplied to get the equivalent numerator.\n    factor = equivalent_numerator / original_numerator\n\n    # Multiply the original denominator by the factor to find the equivalent denominator.\n    equivalent_denominator = original_denominator * factor\n\n    return int(equivalent_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total pupils passed at least one test\n    total_passed_at_least_one = 43\n    \n    # Total pupils passed each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    \n    # Maximum number that can possibly pass all three tests\n    # Apply the principle of inclusion-exclusion for the three sets:\n    # AtMost(P(A ∩ B ∩ C)) = P(A) + P(B) + P(C) - P(at least one)\n    max_passed_all = passed_math + passed_science + passed_english - total_passed_at_least_one\n    \n    return max_passed_all\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since only 4 students are certain about their hat number being divisible\n    # or not by the number Mr. Tan wrote, it means that this number has exactly\n    # four two-digit multiples. The number must be 25, because it's the only\n    # number less than 50 that has exactly four two-digit multiples (25, 50, 75, 100).\n    # Multiples of 24 are 24, 48, 72, 96.\n    \n    # Since 6 students raised their hands for the second question,\n    # it implies that 6 students have numbers on their hat that either a multiple of 24\n    # or cannot be a multiple of 24 because they are less than 24.\n    # Since 4 students already had a number on the slip, this means that two more students\n    # had a number less than 24 because adding multiples of 24 (besides those 4)\n    # would mean there are more than 4 multiples of the number on the slip.\n    \n    # This means Tom's hat number must be a multiple of both 24 and 25, which is 1200 (24*25*2).\n    # But since Tom's hat number must be two-digits, it is not possible for it to be 1200.\n    # Hence, we have an inconsistency in the problem as stated.\n    \n    # Based on the given conditions and the numbers involved, it might not be possible to arrive\n    # at a consistent solution and sum the 8 numbers that Tom saw. This inconsistency is likely\n    # due to the nature of the puzzle and not an oversight in the logic applied.\n\n    # However, assuming we ignore the impossibility of Tom's number being 1200 and we want to\n    # calculate the sum of numbers on friends' hats without Tom's number, we have:\n    possible_multiples_of_24 = [num for num in range(24, 100, 24) if num >= 24 and num < 100]\n    possible_multiples_of_25 = [num for num in range(25, 100, 25) if num >= 24 and num < 100]\n    non_multiples_of_24 = [num for num in range(24) if num >= 10]\n    \n    # All students must have seen at least one multiple of 25 on other student's hats,\n    # otherwise they couldn't raise hand for the first question.\n    # Hence first four students must have multiples of 25 on their hats.\n    # Next two students have numbers less than 24.\n    \n    # Let's calculate the sum of all numbers Tom saw on his friends' hats:\n    all_hat_numbers = set(possible_multiples_of_24 + possible_multiples_of_25 + non_multiples_of_24)\n    sum_hat_numbers = sum(all_hat_numbers) - min(non_multiples_of_24) * 2  # remove Tom's hat number\n    \n    return sum_hat_numbers\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the distance between the school and their home be x meters\n    x = symbols('x')\n\n    # Ahmad's speed is 80 meters per minute, his younger brother's is 50 meters per minute\n    ahmad_speed = 80\n    brother_speed = 50\n\n    # Ahmad meets his brother 210 meters away from the school\n    distance_met = 210\n\n    # Time taken for Ahmad to reach the school and come back\n    ahmad_time = x / ahmad_speed + (x - distance_met) / ahmad_speed\n\n    # Time taken for his brother to meet Ahmad\n    brother_time = (x - distance_met) / brother_speed\n\n    # Since both take the same amount of time to meet, we set the times equal to each other\n    equation = Eq(ahmad_time, brother_time)\n\n    # Solve for x, the distance between the school and their home\n    distance = solve(equation, x)\n    \n    return distance[0]\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pens are identical and the pencil cases are distinct\n    # and none of the cases can be empty, we can treat this as a problem of\n    # partitioning the number 6 into 3 distinct parts.\n    # There are two ways: (1+1+4), (2+2+2) but the latter does not have distinct parts.\n    # We only need to consider (1+1+4).\n    # We choose two pencil cases to contain one pen each, and the remaining pencil case will contain four pens.\n    # There are C(3, 2) ways to choose the two pencil cases for one pen.\n \n    from math import comb\n    ans = comb(3, 2)\n    \n    return ans\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "from fractions import Fraction\n\ndef solution():\n    first_numerator = Fraction(1, 30) + Fraction(1, 6)\n    first_denominator = Fraction(2, 25)\n    first_fraction = first_numerator / first_denominator\n\n    second_numerator = 2 - Fraction(2, 3)\n    second_denominator = Fraction(8, 3)\n    second_fraction = second_numerator / second_denominator\n\n    ans = first_fraction + second_fraction\n    \n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    num_str = str(8844)\n    place_value_1 = int(num_str[0]) * 1000\n    place_value_2 = int(num_str[2]) * 10\n    difference = place_value_1 - place_value_2\n\n    return difference\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let's denote the numbers as a > b > c > d\n    # From the first condition:\n    # d + (a + b + c)/3 = 39\n    # => 3d + a + b + c = 117   (1)\n    \n    # From the second condition:\n    # a + (b + c + d)/3 = 51\n    # => a + (b + c + d) = 153  (2)\n    \n    # The system of equations (1) and (2) yields:\n    # 3d + a + b + c = 117\n    #  a +  b + c + d = 153\n    # ------------------------\n    # 2a + 2b + 2c = 270 => a + b + c = 135   (3)\n    \n    # From (3) we get:\n    # d = 153 - (a + b + c) = 153 - 135 = 18\n    \n    # Now we know d, we can place it in equation (1) to find 'a' which is the largest number.\n    # 3d + a + b + c = 117 => a + b + c = 117 - 3d = 117 - 3*18 = 63\n    \n    # 'a' should be as large as possible, thus we minimize 'b' and 'c'.\n    # Since all numbers are distinct whole numbers and a > b > c > d, we can take:\n    # c = d + 1 = 18 + 1 = 19\n    # b = c + 1 = 19 + 1 = 20\n    # Now we can solve for 'a' which is the largest number.\n    # a = 63 - b - c = 63 - 20 - 19 = 24\n    \n    # Hence, the largest possible value for 'a' is 24.\n    return 24\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    max_palindrome = 0\n    min_palindrome = float('inf')\n\n    # Range of 5-digit numbers\n    for i in range(10000, 100000):\n        if str(i) == str(i)[::-1] and i % 45 == 0:\n            if i > max_palindrome:\n                max_palindrome = i\n            if i < min_palindrome:\n                min_palindrome = i\n\n    return max_palindrome - min_palindrome\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # For a number to be divisible by 5, its last digit must be 0 or 5.\n    # Since the number is 572A, and for it to be divisible by 5, A must be 0 or 5.\n    \n    # For a number to be divisible by 4, the last two digits must be divisible by 4.\n    # Since the second to last digit is 2, we need to find A such that 2A is divisible by 4.\n    # If A is 0, then 20 is divisible by 4.\n    # If A is 5, then 25 is not divisible by 4.\n    \n    # Therefore, A must be 0 for 572A to be divisible by both 4 and 5.\n    A = 0\n    return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Common supplement is not used in this context\n\n    # Step 2: Find the LCM of all the divisors (5, 6, 11)\n    lcm = 5 * 6 * 11  # Since 5, 6 and 11 are co-prime\n\n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    # Using Chinese Remainder Theorem to find a number which when divided by divisors gives respective remainders\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    result = solve_congruence(*congruences)\n\n    unknown = result[0]  # The unknown number of biscuits\n\n    return unknown\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n\n    length_ribbon1 = 16\n    length_ribbon2 = 24\n\n    ans = gcd(length_ribbon1, length_ribbon2)\n\n    return ans\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n    total_sheep = luna_position + sheep_behind\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n\n    hours_needed = desired_earnings / hourly_rate\n\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mean_all = symbols('mean_all')  # mean score of all 10 students\n    sum_top_3 = 3 * 92  # sum of scores of top 3 students\n    sum_last_7 = 7 * (mean_all - 6)  # sum of scores of last 7 students\n\n    # Total score of all 10 students is the sum of scores of top 3 and last 7 students\n    equation = Eq(sum_top_3 + sum_last_7, 10 * mean_all)\n\n    mean_score_all = solve(equation, mean_all)[0]  # Solve for mean score of all 10 students\n\n    return mean_score_all\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))   # unique digits\n        if len(digits) == 4:      # must be 4 unique digits\n            for perm in permutations(digits):\n                if int(''.join(perm)) in range(123, 9877): # check if permutations form a lucky year\n                    consecutive = sorted(list(perm))\n                    if all(abs(int(consecutive[i]) - int(consecutive[i+1])) == 1 for i in range(len(consecutive)-1)):\n                        count += 1\n                        break\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for i in range(len(bags)):\n        reds = bags[i]\n        others = bags[:i] + bags[i+1:]\n        for j in range(len(others)):\n            for k in range(j+1, len(others)):\n                for l in range(k+1, len(others)):\n                    jaslin_bags = others[j] + others[k] + others[l]\n                    george_bags = sum(others) - jaslin_bags\n                    if jaslin_bags == 2 * george_bags:\n                        return reds\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'a' be the number of sweets Andre had originally and 'b' be the number Beth had.\n    a, b = symbols('a b')\n    \n    # Equation representing the total number of sweets before the teacher gave them more.\n    equation1 = Eq(a + b, 24)\n    \n    # Equation representing the difference after the teacher gave them 4 sweets each.\n    equation2 = Eq(a + 4 - (b + 4), 6)\n    \n    # Solving the system of equations for a and b.\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Beth's sweets now including the 4 sweets given by the teacher.\n    beth_sweets_now = solutions[b] + 4\n    \n    return beth_sweets_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Since the numbers are consecutive even numbers, they form an arithmetic sequence\n    # with a common difference of 2.\n    # Let the first term be x.\n    # Then the five terms are x, x+2, x+4, x+6, x+8.\n    # Their sum is 5x + 20, which is 100 according to the problem statement.\n\n    # Sum of 5x + 20 = 100\n    # 5x = 100 - 20\n    # 5x = 80\n    # x = 80 / 5\n    # x = 16\n\n    # The smallest number is the first term x, which is 16.\n    return 16\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed = 550 / 5  # speed = distance / time\n    distance_3_hours = speed * 3  # distance = speed * time\n    return distance_3_hours\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_apples = 150\n    fraction_sold = 2/5\n    fraction_remaining = 1 - fraction_sold\n\n    total_apples = remaining_apples / fraction_remaining\n\n    return total_apples\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    def is_even(arrangement):\n        for color in 'RBGYOP':\n            indices = [i for i, block in enumerate(arrangement) if block == color]\n            if (indices[1] - indices[0]) % 2 != 1:\n                return False\n        return True\n\n    arrangements = permutations('RRBBYYGGOOPP')\n    even_count = sum(is_even(arrangement) for arrangement in set(arrangements))\n\n    total_count = len(set(arrangements))\n    factor = gcd(even_count, total_count)\n    m = even_count // factor\n    n = total_count // factor\n\n    return m + n\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "网络故障，请重试"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    return 342 - (85 - 78) * 15\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of fruits without considering chocolates\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # 1 / Alan's rate + 1 / Bob's rate = 1 / Combined rate\n    combined_rate = 1 / 4\n    bob_rate = 1 / 6\n    \n    # Alan's rate is the difference between the combined rate and Bob's rate\n    alan_rate = combined_rate - bob_rate\n    \n    # Alan time is the inverse of Alan's rate\n    alan_time = 1 / alan_rate\n    \n    return alan_time\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n\n    prob_rain_neither_day = (1 - prob_rain_saturday) * (1 - prob_rain_sunday)\n    \n    prob_rain_at_least_one_day = 1 - prob_rain_neither_day\n\n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    correct_points = 10\n    incorrect_points = -3\n    total_questions = 10\n\n    # Let x be the number of correctly answered questions\n    # Then, the number of incorrectly answered questions is total_questions - x\n    # The total points can be calculated as:\n    # correct_points * x + incorrect_points * (total_questions - x) = total_points\n\n    for x in range(total_questions + 1):  # including the possibility of correctly answering all questions\n        if correct_points * x + incorrect_points * (total_questions - x) == total_points:\n            incorrect = total_questions - x\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    zeros_needed = 28\n    zero_count = 0\n    n = 1\n    while zero_count < zeros_needed:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            zero_count += 1\n            temp_n //= 5\n\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(henry + fred + richard, 204.56)\n    equation2 = Eq(richard, henry - 3.24)\n    equation3 = Eq(fred, richard + 5.6)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Rates at which each inlet fills the pool per minute\n    rate_A = 1 / 36\n    rate_B = 1 / 48\n\n    # Cycle length and total fill rate during one cycle\n    cycle_minutes = 1 + 2 + 2 + 1  # 6 min total for the given pattern\n    cycle_fill_rate = (1 * rate_A) + (2 * rate_B) + (2 * rate_A) + (1 * rate_B)\n\n    # Calculate the part of the pool filled during one cycle\n    fill_per_cycle = cycle_fill_rate * cycle_minutes\n\n    # Calculate full cycles needed to fill the pool\n    full_cycles_needed = 1 // fill_per_cycle\n\n    # Remaining pool to be filled after the last full cycle\n    remaining_pool = 1 % fill_per_cycle\n\n    # Time needed to fill the remaining pool\n    remaining_time = 0\n    pattern = [1 * rate_A, 2 * rate_B, 2 * rate_A, 1 * rate_B]  # Fill pattern per minutes\n    for time in pattern:\n        remaining_time += time / rate_A if remaining_pool - time > 0 else remaining_pool / rate_A\n        remaining_pool -= time\n        if remaining_pool <= 0:\n            break\n\n    # Total time to fill the pool is time for full cycles + time for remaining pool\n    total_time = (full_cycles_needed * cycle_minutes) + remaining_time\n\n    # Return the total time rounded to the nearest minute\n    return round(total_time)\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    # Since Andrea is 12th from end, Andrea's position from front is (total_children + 1) - andrea_position_from_end\n    andrea_position_from_front = (total_children + 1) - andrea_position_from_end\n    \n    # The number of children between Vanessa and Andrea is the difference between their positions minus 1\n    num_children_between = abs(andrea_position_from_front - vanessa_position_from_front) - 1\n    \n    return num_children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    total_sweets = 320\n    sweets_bought_per_week = 30\n    weeks_passed = 7\n    sweets_left = 348\n    \n    total_sweets_bought = sweets_bought_per_week * weeks_passed\n    sweets_eaten = (total_sweets + total_sweets_bought) - sweets_left\n    sweets_eaten_per_week = sweets_eaten // weeks_passed\n    \n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        if (2810 + digit) % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = total_path_length - fenced_length\n\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    total_bottles = 10\n    empty_bottles = 10 + 1  # Lucas borrowed 1 empty bottle\n\n    while empty_bottles >= 2:\n        # Exchange two empty bottles for one bottle of mineral water\n        total_bottles += empty_bottles // 2\n        # Update the count of empty bottles (1 empty bottle remains after each exchange)\n        empty_bottles = (empty_bottles // 2) + (empty_bottles % 2)\n    \n    # Return the 1 bottle borrowed back to the shop owner\n    total_bottles -= 1 \n    \n    return total_bottles\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of minutes after which A's waterline height will be 3 times that of B.\n    x = symbols('x')\n    \n    # Since the pools have the same base and height, their draining rates are proportional to 1/10 for A and 1/6 for B.\n    # Let's denote the initial height of water as h (same for both pools).\n    # In 1 minute, A drains h/10 and B drains h/6.\n    # After x minutes, the height of water drained from A will be x*h/10, and x*h/6 for B.\n    \n    # The height of remaining water in A will be h - x*h/10\n    # The height of remaining water in B will be h - x*h/6\n    # According to the problem, height of A will be 3 times that of B -> h - x*h/10 = 3*(h - x*h/6)\n    \n    # Creating an equation with the above condition\n    equation = Eq(h - x*h/10, 3*(h - x*h/6))\n    \n    # Solving for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Speed at first instance (slow speed) = 3 km/h\n    slow_speed = 3\n    # Speed at second instance (fast speed) = 7 km/h\n    fast_speed = 7\n\n    # Time difference in hours (12 min late - 8 min early) = 20 min = 20/60 hours\n    time_difference = (12 + 8) / 60\n\n    # Time taken at slow speed - Time taken at fast speed = Time difference\n    # distance / slow_speed - distance / fast_speed = time_difference\n    # Let distance be 'd'\n    # d/3 - d/7 = 20/60\n    # Solving the equation for 'd'\n    distance = (slow_speed * fast_speed * time_difference) / (fast_speed - slow_speed)\n\n    return distance\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    return 0.35 * 200\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 69//2 + 1):\n        if isprime(i) and isprime(69 - i):\n            return 69 - i - i\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Let x be the number of students in school A originally\n    # Let y be the number of students in school B originally\n    # We have two equations based on the problem statement:\n    # (1) x + y = 1050 (total students)\n    # (2) (x - 20) = (y + 20) + 10 (A will have 10 more students than B after 20 students transfer)\n    # We can simplify equation (2) to get: x - y = 50\n    # Now we can solve the system of equations\n\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 1050)\n    equation2 = Eq(x - y, 50)\n\n    solution = solve((equation1, equation2), (x, y))\n\n    return solution[x]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let x be the number of sweets Yue Ying has\n    # Then Chenxi has x + 5 sweets\n    # After Chenxi gives 10 sweets to Yue Ying, Chenxi will have (x + 5) - 10\n    # After receiving 10 sweets, Yue Ying will have x + 10\n    # The difference in the number of sweets they have now is |(x + 10) - ((x + 5) - 10)|\n    \n    # Simplifying the above expression:\n    # The difference is |x + 10 - x - 5 + 10| = |15|\n    difference = abs(15)\n\n    return difference\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # The equation given is 15 + 5 * 5 + 15 - 6 + 7\n    # We need to insert two pairs of brackets to maximize this result.\n    # Using the standard BODMAS/BIDMAS/PEMDAS rule, multiplication has higher precedence.\n    # However, we can use brackets to change the evaluation order.\n    # If we want to get the highest result, we should add brackets around additions that come before multiplications.\n    # i.e., (15 + 5) * (5 + 15) - 6 + 7\n    # This should give us the highest possible result because it maximizes the use of multiplication over addition.\n    \n    ans = (15 + 5) * (5 + 15) - 6 + 7\n    return ans\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # Since it's a time problem based on combinatorics, it suggests we are looking for arrangements of time.\n    # The only possible time problem that fits this pattern is finding combinations for a 24-hour clock display.\n    # We have to choose 4 digits (HH:MM) such that the hours are between 00 and 23 and minutes are between 00 and 59.\n    # We'll calculate this in two steps: hours and minutes.\n\n    hours = 0\n    minutes = 0\n    \n    # Calculate combinations for hours (00 - 23)\n    for i in range(24):  # from 00 to 23\n        if i < 10:\n            # Single digit hours can have the second digit be any one of 0-9 (e.g., 00, 01, ... 09)\n            hours += 10\n        else:\n            # For hours with two different digits (e.g., 10, 12, 21), the first digit can only be 1 or 2,\n            # so we need to ensure the second digit is not the same as the first\n            first_digit = i // 10\n            second_digit = i % 10\n\n            if first_digit != second_digit:\n                # Since the first and second digits are different, we have two distinct digits\n                # to form combinations with the other two digits\n                hours += 9\n            else:\n                # If the first and second digits are the same (e.g., 11, 22), we have only one way\n                # to represent the hour with those two digits\n                hours += 1\n    \n    # Calculate combinations for minutes (00 - 59)\n    for i in range(60):\n        if i < 10:\n            # Similar to hours, if it's a single digit minute, the second digit can be 0-9\n            minutes += 10\n        else:\n            first_digit = i // 10\n            second_digit = i % 10\n\n            if first_digit != second_digit:\n                minutes += 9\n            else:\n                minutes += 1\n    \n    # The final combination is the product of the distinct combinations of hours and minutes\n    ans = hours * minutes\n    return ans\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_score = 70\n    correct_points = 10\n    incorrect_points = -5\n\n    # Let the number of correct answers be x\n    for correct in range(11):  # Since the total number of questions is 10, the range is 0-10\n        incorrect = 10 - correct\n        score = correct * correct_points + incorrect * incorrect_points\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    maths_students = 20\n    both_classes_students = 11\n    neither_classes_students = 10\n\n    # Students taking only one class is total minus those taking neither.\n    one_class_students = total_students - neither_classes_students\n\n    # Students taking writing class only is one_class_students minus students taking both\n    writing_only_students = one_class_students - (maths_students - both_classes_students)\n\n    return writing_only_students\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import prevprime\n\ndef solution():\n    # Convert the birthday to digits\n    digits = '08072003'\n\n    # Form the largest number less than 50 from the birthday digits\n    max_number = max(int(''.join(sorted(digits, reverse=True)[:2])) for _ in digits if int(''.join(sorted(digits, reverse=True)[:2])) < 50)\n    \n    # Get the largest prime less than or equal to the max number\n    ans = prevprime(max_number)\n    \n    return ans\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    first_two_average = 48\n    total_sum = total_average * 5  # Sum of all five numbers\n    first_two_sum = first_two_average * 2  # Sum of the first two numbers\n    last_three_sum = total_sum - first_two_sum  # Sum of the last three numbers\n    last_three_average = last_three_sum / 3  # Average of the last three numbers\n    return last_three_average\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    return sum(range(1, 18, 2))\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    cuts = [1, 2, 3, 4]  # Representing the number of cuts\n    max_slices = sum(cuts)  # Sum of the number of new slices each cut can potentially make\n    \n    return max_slices  # This is the explanation based on Andrea's reasoning, not necessarily the correct answer\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    # Position of elephant from left to right\n    pos_elephant_left = 10\n    \n    # Toys between rabbit and elephant\n    toys_between = 5\n\n    # Position of rabbit from left to right\n    pos_rabbit_left = pos_elephant_left + toys_between + 1\n\n    # Total number of toys\n    total_toys = 40\n\n    # Position of rabbit from right to left\n    pos_rabbit_right = total_toys - pos_rabbit_left + 1\n\n    return pos_rabbit_right\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    def sum_of_digits(number):\n        return sum(int(digit) for digit in str(number))\n\n    total_sum = sum(sum_of_digits(i) for i in range(1, 110))\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    # Let p be the number of pink dolphins\n    # Let g be the number of gray dolphins\n    # According to the problem:\n    # g = 11 * p\n    # p + g = 48\n    # So we substitute the first equation into the second to get:\n    # p + 11 * p = 48\n    # 12 * p = 48\n    # p = 48 / 12\n\n    p = 48 / 12\n    return int(p)\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the age of Teddy and 'f' be the age of his father currently\n    t, f = symbols('t f')\n\n    # Equation 1: When Teddy was 5, his father's age was 7 times his age.\n    equation1 = Eq(f - (t - 5), 7 * 5)\n\n    # Equation 2: When his father is 40, Teddy's age will be 'f' - 't' + 40.\n    equation2 = Eq(t + (40 - f), 40)\n\n    # Solving the equations to find current ages of Teddy and his father.\n    solutions = solve((equation1, equation2), (t, f))\n\n    # We need to find Teddy's age when his father is 40.\n    # Teddy's age = f - t + 40 = solutions[f] - solutions[t] + 40\n    teddy_age_when_father_40 = solutions[f] - solutions[t] + 40\n\n    return teddy_age_when_father_40\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # fraction of the audience that were adults\n    adults_fraction = 2 / 7 \n    # fraction of the remaining audience that were boys\n    boys_fraction_of_remaining = 4 / 5 \n\n    # fraction of the remaining audience that were girls (correcting the mistake in the workings)\n    girls_fraction_of_remaining = 1 - boys_fraction_of_remaining\n\n    # fraction of the total audience that were girls (correcting the mistake in the workings)\n    girls_fraction_of_total = (1 - adults_fraction) * girls_fraction_of_remaining \n\n    # difference in fractions between adults and girls (correcting the mistake in the workings)\n    difference_in_fractions = adults_fraction - girls_fraction_of_total\n\n    # since this difference in fractions represents 80 people, calculate the total amount of people\n    total_people = 80 / difference_in_fractions \n\n    return int(total_people)\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(2, 33, 3))\n    return sum_squares\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the original number of chairs and tables\n    chairs, tables = symbols('chairs tables')\n\n    # Create an equation representing the original condition (equal number of chairs and tables)\n    original_condition = Eq(chairs, tables)\n\n    # Create an equation representing the final condition (after selling and bringing in items)\n    final_condition = Eq(chairs + 24, 4 * (tables - 42))\n\n    # Solve the system of equations\n    solutions = solve((original_condition, final_condition), (chairs, tables))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    result = (35 / 100) * 700\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_candy = 4\n    cabinets_right_of_candy = 7\n    candy_cabinet = 1  # Including Candy's cabinet itself\n\n    total_cabinets = cabinets_left_of_candy + candy_cabinet + cabinets_right_of_candy\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    ans = 1914 // 6\n    return ans\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds place must be 1-9\n        for tens in range(0, 10):\n            for units in range(0, 10, 2):  # units place must be even\n                if hundreds + tens + units == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        number = int(f\"106{Y}\")\n        if number % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Given expression is 2^2019 / (4^982 - 2^1963) modulo 5\n    # We simplify the expression using the property a^2 - b^2 = (a + b)(a - b)\n    # Here, 4^982 is (2^1964) since 4 = 2^2 and 2^1963 is itself in the expression\n    # So we have 2^2019 / (2^1964 - 2^1963)\n    # Which simplifies further since (2^1964 - 2^1963) = 2^1963 * (2 - 1)\n    # Hence simplified expression becomes 2^2019 / 2^1963 \n    # Which is the same as 2^(2019 - 1963)\n    # This is 2^56\n    \n    # Calculate 2^56 modulo 5 directly as powers of 2 cycle every 4 (2^1=2, 2^2=4, 2^3=3 (mod 5), 2^4=1 (mod 5))\n    # So we just need (2^56) mod 5 which is (2^(4*14)) mod 5\n    # Since 2^4 mod 5 is 1, it means (2^(4*14)) mod 5 = (1^14) mod 5 = 1 mod 5\n    # Hence the result is 1 mod 5 which is 1.\n    \n    return 1\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for num in range(99, -1, -1):  # Start checking from 99 downwards\n        if num % 10 == 0 and num % 2 == 0 and (49 + num // 10) % 3 == 0:  # Check divisibility by 2, 5 and 3\n            return 4900 + num  # Form the four-digit number\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n\n    # Total count of vehicles\n    equation1 = Eq(motorcycles + cars + lorries, 27)\n\n    # Total count of wheels\n    equation2 = Eq(2 * motorcycles + 4 * cars + 6 * lorries, 96)\n\n    # Number of cars equal to the number of lorries\n    equation3 = Eq(cars, lorries)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (motorcycles, cars, lorries))\n\n    # We only need the number of cars\n    return solutions[cars]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_integers = n * (n + 1) // 2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of the jar and y be the mass of one chocolate\n\n    # From the first condition, we get the following equation:\n    # x + 5y = 185 (1)\n\n    # From the second condition, we get the following equation:\n    # x + 17y = 317 (2)\n\n    # To find the value of x and y, we will solve these two simultaneous equations\n    # Subtract equation (1) from equation (2):\n    # (x + 17y) - (x + 5y) = 317 - 185\n    # x + 17y - x - 5y = 132\n    # 12y = 132\n    # y = 132 / 12\n    y = 132 / 12\n\n    # Now we substitute the value of y back to any of the equations to find x.\n    # x + 5y = 185\n    # x = 185 - 5y\n    x = 185 - 5 * y\n\n    # Finally, we need to find the mass of the jar with 10 chocolates.\n    # So we use the found values of x and y to calculate:\n    # mass_with_10_chocolates = x + 10y\n    mass_with_10_chocolates = x + 10 * y\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    ana_height = 150\n    kristoff_multiplier = 5.5\n    \n    # Ana is 116 cm taller than Olaf, so Olaf's height is Ana's height minus 116 cm\n    olaf_height = ana_height - 116\n    \n    # Kristoff is five and a half times the height of Olaf\n    kristoff_height = kristoff_multiplier * olaf_height\n    \n    # Kristoff is taller than Ana by\n    kristoff_ana_difference = kristoff_height - ana_height\n    \n    return kristoff_ana_difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700\n    sugar_concentration = 0.32\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 1/10\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800     # Total length of the road in meters\n    num_trees = 21         # Number of trees\n\n    # Since trees are at both ends, we consider intervals as num_trees - 1\n    intervals = num_trees - 1\n    \n    # Distance between each tree is the total length divided by the number of intervals\n    distance = total_length / intervals\n\n    return distance\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_current_age = 9 - 3  # Hazel is 9 in 3 years, so subtract 3 to get current age.\n    jessica_current_age = hazel_current_age - 3  # Jessica is 3 years younger than Hazel.\n\n    hazel_age_next_year = hazel_current_age + 1  # Hazel's age next year.\n    jessica_age_next_year = jessica_current_age + 1  # Jessica's age next year.\n\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year  # Total age next year.\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the amounts spent on each fruit\n    apples_money, pears_money, mangoes_money = symbols('apples_money pears_money mangoes_money')\n\n    # Each apple costs $0.60, and we have the ratios:\n    # apples_money : pears_money = 3 : 2\n    # pears_money : mangoes_money = 1 : 5\n    # Therefore, we can write these ratios as equations:\n    equation1 = Eq(apples_money / pears_money, 3/2)\n    equation2 = Eq(pears_money / mangoes_money, 1/5)\n\n    # John paid a total of $150\n    equation3 = Eq(apples_money + pears_money + mangoes_money, 150)\n\n    # Solve the system of equations to find money spent on each type of fruit\n    solutions = solve((equation1, equation2, equation3), (apples_money, pears_money, mangoes_money))\n\n    # Calculate the number of apples, pears, and mangoes bought based on the money spent and cost\n    # John bought 4/5 as many pears as apples and 2/5 as many mangoes as apples\n    # Cost of each apple is $0.60\n    apple_price = 0.60\n    num_apples = solutions[apples_money] / apple_price\n    num_pears = (4/5) * num_apples\n    num_mangoes = (2/5) * num_apples\n\n    # Return the total number of fruits\n    return int(num_apples + num_pears + num_mangoes)\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    months_first_half = 6\n    average_second_half = 65\n    months_second_half = 6\n    \n    total_second_half = average_second_half * months_second_half\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / (months_first_half + months_second_half)\n    \n    return average_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {char: word.count(char) for char in set(word)}\n\n    ans = factorial(len(word))\n    for count in letter_counts.values():\n        ans //= factorial(count)\n\n    return ans\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # The number is divisible by 2 if the last digit is even.\n    # The number is divisible by 5 if the last digit is 0 or 5.\n    # Since we want the smallest number, the last digit should be 0.\n\n    # The number is divisible by 3 if the sum of its digits is divisible by 3.\n    # The sum of the first four digits (1+9+9+2=21) is already divisible by 3.\n    # So, we need to find three more digits that make the sum of all seven digits divisible by 3.\n\n    # The number is divisible by 11 if the difference between the sum of digits in the odd positions and the sum of the digits in the even positions is divisible by 11.\n    # The difference is currently (1-9+9-2)= -1 or we can consider it as (9-1+2-9)= 1 depending on how we pair them.\n\n    # Since the third pair of digits will not affect divisibility by 11 (it adds same amount to both sides of the difference), we only need to find the last digit to make the entire number divisible by 11.\n    \n    # Start with the last digit as 0 and find two digits that make the number divisible by 3 and 11.\n    for digit1 in range(10):\n        for digit2 in range(10):\n            if (21 + digit1 + digit2) % 3 == 0:\n                # We already have the last digit as 0, so just check for divisibility by 11\n                if (1 - digit1 + digit2) % 11 == 0:\n                    # We've found the smallest number that satisfies the divisibility\n                    return int(f\"1992{digit1}{digit2}0\")\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    number_of_terms = (last_term - first_term) + 1\n    sum_of_series = (number_of_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    return gcd(4811, 1981)\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_score_first_five = 94 * 5\n    total_score_six_assignments = 92 * 6\n    score_sixth_assignment = total_score_six_assignments - total_score_first_five\n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price = 65\n    selling_price = 74\n    remaining_pairs = 5\n    total_profit = 440\n\n    profit_per_pair = selling_price - cost_price\n\n    sold_pairs = total_profit // profit_per_pair\n    \n    initial_pairs = sold_pairs + remaining_pairs\n\n    return initial_pairs\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    halfway_point = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    duration = end_time - halfway_point\n    start_time = halfway_point - duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    initial_cars = 30 + 10 - 8\n    return initial_cars\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(((x*2/4)**2 - 4) / 10, 6)\n\n    sol = solve(equation, x)[0]\n\n    return sol\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    fill_rate_per_day = 10\n    leak_rate_per_night = 3\n    effective_daily_fill = fill_rate_per_day - leak_rate_per_night\n    first_day_fill = 3\n    days_passed = 1  # because the pipe has filled 3 liters on the first day\n\n    remaining_water_needed = total_water_needed - first_day_fill\n    additional_days_needed = (remaining_water_needed + effective_daily_fill - 1) // effective_daily_fill\n\n    days_passed += additional_days_needed\n\n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    ans = 1234 - 566\n    return ans\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    # Using the unitary method\n    # First find the number of toys produced in 1 minute\n    toys_per_minute = 27 / 5\n    # Then find the number of toys produced in 20 minutes\n    toys_in_20_minutes = toys_per_minute * 20\n    \n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n    return lcm(24, 36)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_time = 30 * 60  # half an hour in seconds\n    current_number = 1\n    time_spent = 0\n\n    while time_spent + len(str(current_number)) <= total_time:\n        time_spent += len(str(current_number))\n        current_number += 1\n    \n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    fractions = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n    \n    fractions.sort()\n    difference = fractions[-1] - fractions[0]\n\n    return difference\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"11:20 PM\", \"%I:%20%p\")\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Worst case scenario to draw the first green one is if Darrell draws all non-green ones first\n    blue = 5\n    white = 9\n    black = 2\n    # Green marbles are not counted as Darrell needs to draw at least one of them\n    # So, we add up all non-green marbles and then add 1 (for the first green marble)\n    ans = blue + white + black + 1\n\n    return ans\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "from math import comb\n\ndef solution():\n    teams = 20\n    matches = comb(teams, 2)\n    return matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    \n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    # Total distance to climb is 20 metres\n    total_distance = 20\n    # Distance climbed each day is 6 metres\n    daily_climb = 6\n    # Except for the 7th day, where the climb is only 2 metres\n    seventh_day_climb = 2\n\n    # Calculate the total climb until the 7th day\n    total_climb_until_seventh_day = (daily_climb * 6) + seventh_day_climb\n\n    # Remaining distance after the 7th day\n    remaining_distance = total_distance - total_climb_until_seventh_day\n\n    # Since the snail succeeds to climb out on the 7th day,\n    # the slide down distance is the remaining distance minus the 7th day's climb.\n    nightly_slide = remaining_distance - seventh_day_climb\n\n    return nightly_slide\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for _ in range(years):\n        initial_rabbits = 3 * initial_rabbits / 2\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Define the total distance between Ivy's and Candy's house\n    total_distance = 1200\n\n    # Define the time at which they met after Ivy started walking (in minutes)\n    time_when_met = 6 + 12  # Candy waited for 6 minutes, then 12 minutes until they met \n\n    # Let the speed of Candy be x meters per minute\n    # Then the speed of Ivy is x + 20 meters per minute\n    \n    # The distance covered by Ivy is (time_when_met) * (x + 20)\n    ivy_distance = time_when_met * (20)  # At this point, we can keep it separate from x for simplicity\n    \n    # The distance covered by Candy is 12 minutes * x, as she started walking 6 minutes after Ivy\n    candy_distance = 12 * 20  # At this point, we can keep it separate from x for simplicity\n\n    # Since they meet after they both walked these distances, the distances should add up to total_distance\n    # ivy_distance + candy_distance = total_distance\n    # (time_when_met * 20) + (12 * x) = total_distance - time_when_met * x\n\n    # We have: time_when_met * 20 + 12 * 20 = 1200 - time_when_met * x\n    # Solving for x in the above equation gives us Candy's walking speed\n    candy_speed = (total_distance - ivy_distance) / (time_when_met + 12)\n\n    return candy_speed\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament, each player plays every other player once.\n    # Therefore, the number of matches each player plays is equal to the number of\n    # other players, which is 7 matches for each of the 8 players.\n\n    # Since each player has a different number of wins, the possible number of wins\n    # is from 0 to 7 (no one can win more than 7 matches).\n\n    # The player with the most wins would be the champion. Since no two players can\n    # have the same number of wins, the player with the most wins will have 7 wins,\n    # which is the maximum number of wins possible in this tournament format.\n\n    # The champion, having more wins than any other player, must therefore have 7 wins.\n    return 7\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2  # Find how many puffs Minah can make in one hour\n    hours_for_120_puffs = 120 / puffs_per_hour  # Calculate the hours needed for 120 puffs\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight_metal1 = 6  # in mg\n    weight_metal2 = 14  # in mg\n    percent_nickel1 = 45 / 100  # converting percentage to decimal\n    percent_nickel2 = 60 / 100  # converting percentage to decimal\n\n    total_weight = weight_metal1 + weight_metal2\n    total_nickel = (weight_metal1 * percent_nickel1) + (weight_metal2 * percent_nickel2)\n\n    percent_concentration = (total_nickel / total_weight) * 100  # converting back to percentage\n\n    return percent_concentration\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    # Initialize the maximum product\n    max_product = 0\n    \n    # Iterate over all possible combinations of four numbers that sum up to 13\n    for x1 in range(1, 13):\n        for x2 in range(1, 13 - x1):\n            for x3 in range(1, 13 - x1 - x2):\n                x4 = 13 - x1 - x2 - x3\n                product = x1 * x2 * x3 * x4\n                # Update the maximum product if the current one is larger\n                if product > max_product:\n                    max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (edward_age + years):\n            break\n\n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1 cm to 6 m\n    plan_length_cm = 5  # Playground length on the plan\n\n    real_length_m = plan_length_cm * scale_ratio\n\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    # Let's denote the side of the smaller square as n.\n    # The total number of students in the smaller square is n^2,\n    # and the total number with the surplus is n^2 + 11.\n    # When a row and a column are added, the new square has side n+1\n    # and the total number needed is (n+1)^2, which is n^2 + 2n + 1.\n    # We also know that (n+1)^2 - 12 students are already present,\n    # resulting in the following equation:\n    # (n^2 + 11) + 12 = n^2 + 2n + 1\n    # Simplifying this equation gives us:\n    # 2n + 1 - 11 - 12 = 0\n    # 2n - 22 = 0\n    # n = 11\n    # So the number of students is n^2 + 11 = 11^2 + 11 = 121 + 11 = 132\n\n    n = 11\n    num_students = n**2 + 11\n\n    return num_students\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n\n    num_boxes = total_money // cost_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    return 4060800 - 4000000 - 800\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let g represent the number of girls\n    g = symbols('g')\n\n    # average number of apples picked by everyone is 26\n    # total number of apples = average number * total number of people\n    # boys' apple count: 15 boys * 30 apples\n    # girls' apple count: g girls * 20 apples\n    total_apples = (15 * 30) + (g * 20)\n\n    # total number of people = 15 boys + g girls\n    total_people = 15 + g\n\n    # forming the equation for the average\n    equation = Eq(total_apples / total_people, 26)\n\n    # solving for the number of girls\n    solution = solve(equation, g)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_in_tank_a = 673\n    oil_in_tank_b = oil_in_tank_a + 56\n    return oil_in_tank_b\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    # Total number of balls bought\n    total_balls = 12\n    # Total cost of all balls\n    total_cost = 340\n    # Cost of one basketball\n    cost_basketball = 30\n    # Cost of one volleyball\n    cost_volleyball = 25\n\n    # Loop to find the number of basketballs \n    for num_basketballs in range(total_balls + 1):\n        num_volleyballs = total_balls - num_basketballs\n        if (cost_basketball * num_basketballs + cost_volleyball * num_volleyballs) == total_cost:\n            return num_basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000  # £15 million\n\n    richie_share = total_wealth * 1/3\n    remaining_after_richie = total_wealth - richie_share\n\n    thrifty_share = remaining_after_richie * 1/2\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n\n    bounty_share = remaining_after_thrifty * 2/5\n    archie_share = remaining_after_thrifty - bounty_share\n\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    candy_given_to_lily = total_candy * (3 / 4)\n    remaining_candy = total_candy - candy_given_to_lily\n    candy_given_to_brother = remaining_candy * (1 / 3)\n    final_candy = remaining_candy - candy_given_to_brother\n    \n    return final_candy\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1 / i for i in range(2, n+1)) for n in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d represent the amount Dennis had initially and r represent the amount Roy had initially.\n    d, r = symbols('d r')\n\n    # Roy and Dennis shared a sum of money totaling $340.\n    equation1 = Eq(d + r, 340)\n\n    # After Roy spent 2/3 of his money, he has 1/3 left.\n    # After Dennis spent 1/4 of his money, he has 3/4 left.\n    # Dennis had twice as much money left as Roy.\n    equation2 = Eq(3/4 * d, 2 * (1/3 * r))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, r))\n\n    # Dennis's amount after spending 1/4 of his money\n    dennis_end = 3/4 * solutions[d]\n\n    return dennis_end\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define friday as F, so we have:\n    # Saturday = F + 27\n    # Sunday = F - 14\n    # Total = F + (F + 27) + (F - 14) = 475\n\n    # Define symbol for Friday\n    F = symbols('F')\n\n    # Create equation\n    equation = Eq(F + (F + 27) + (F - 14), 475)\n\n    # Solve the equation\n    solutions = solve(equation, F)\n\n    # Return the solution for the number of curry puffs sold on Friday\n    return solutions[0]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits = 300\n    pages_with_1_digit = 9\n    pages_with_2_digits = 90 * 2\n\n    # Subtract the number of digits used by 1 and 2 digit page numbers\n    remaining_digits = digits - (pages_with_1_digit + pages_with_2_digits)\n\n    # Calculate the last page number by adding up the pages\n    last_page = 9 + 90 + (remaining_digits // 3)\n\n    return last_page\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total mass of each container as c1, c2, and c3.\n    c1, c2, c3 = symbols('c1 c2 c3')\n    \n    # Let's denote the mass of mint candies as m, which is the same for all containers.\n    m = symbols('m')\n\n    # Since the mint and chocolate candies are fixed, we can denote the mass\n    # of chocolate candies in each container as c1 - m, c2 - m, and c3 - m respectively.\n    # Thus, the mass of strawberry candies in each container would be 2/5 * c1, 2/7 * c2, and 2/9 * c3 respectively.\n\n    # The total mass of all the strawberry candies from all containers together is then:\n    strawberry_mass = 2/5 * c1 + 2/7 * c2 + 2/9 * c3\n\n    # The total mass of all three containers is given as 1371g.\n    total_mass = Eq(c1 + c2 + c3, 1371)\n\n    # We also know that the amount of mint candies to chocolate candies always stays the same, which gives us:\n    # chocolate / mint = chocolate_mass / m\n    # (c1-m)/m = (c2-m)/m = (c3-m)/m -> meaning the ratio chocolate/mint is constant for all containers\n    # We can then infer from container 1 that for container 2 and 3, we have:\n    # c1 - m = (c1/m) * m = c2 - m -> c1 = c2 \n    # c1 - m = (c1/m) * m = c3 - m -> c1 = c3\n    # Therefore, all containers have the same mass, so we can simplify to:\n    c1 = c2\n    c2 = c3\n\n    # With this information, we can solve for c1.\n    c1_solution = solve((total_mass, Eq(c1 - m, c2 - m), Eq(c1 - m, c3 - m)), (c1, m))\n    c1_val = c1_solution[c1]\n\n    # Since all containers are the same size, we need to find the strawberry mass in one container.\n    strawberry_mass_c1 = 2/5 * c1_val\n\n    # Lastly, we multiply the mass of strawberries for one container by 3 to get the total mass across all containers.\n    total_strawberry_mass = strawberry_mass_c1 * 3\n\n    return total_strawberry_mass\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    ball_cost = 20.45\n    number_of_balls = 8\n    number_of_hoops = 6\n\n    total_ball_cost = ball_cost * number_of_balls\n    total_hoop_cost = total_cost - total_ball_cost\n    cost_per_hoop = total_hoop_cost / number_of_hoops\n\n    return cost_per_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "import math\n\ndef solution():\n    number = 693\n    factorization = {2: 0, 3: 0, 5: 0, 7: 0}  # initialized for all prime factors of 693\n\n    # factorization of 693 into its prime factors (3 * 3 * 7 * 11)\n    for i in [3, 7, 11]:\n        while number % i == 0:\n            factorization[i] += 1\n            number //= i\n    \n    # for the product to be a perfect square, all the powers in the prime factorization should be even\n    minimum_number = 1\n    for prime in factorization:\n        if factorization[prime] % 2 != 0:\n            minimum_number *= prime\n    \n    return minimum_number\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Calculate the unit digit of each term separately\n    unit_digit_13 = pow(13, 242, 10)\n    unit_digit_17 = pow(17, 379, 10)\n    unit_digit_4 = pow(4, 2012, 10)\n\n    # Calculate the unit digit of the entire expression\n    ans = (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n    return ans\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_juice = 8 * 3  # total cartons * liters in each carton\n    juice_left = total_juice - 9  # subtract the juice that was drunk\n    containers_needed = -(-juice_left // 5)  # ceiling division to get number of containers\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solution_A = solve(equation, A)\n\n    return solution_A[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alexis, mary, charlotte_initial, charlotte_final = symbols('alexis mary charlotte_initial charlotte_final')\n    mary = 7/5 * alexis\n    charlotte_final = charlotte_initial + 0.8 * charlotte_initial\n    mary_end = mary - 0.2 * mary\n    alexis_end = alexis - 0.2 * alexis\n    charlotte_initial = mary_end - 20\n    \n    equation = Eq(charlotte_final, mary_end + alexis_end)\n    solutions = solve(equation, alexis)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3 + 1/2\n    cost_per_kg = 7.50\n    total_cost = steak_weight * cost_per_kg\n    money_have = 20\n\n    if money_have >= total_cost:\n        more_money_needed = 0\n    else:\n        more_money_needed = total_cost - money_have\n    \n    return more_money_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddies_position = 12\n    \n    from_end = total_people - eddies_position + 1\n    \n    return from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mass of a light bowling ball\n    x = symbols('x')\n    \n    # Equation: 6*x + 6*(2*x) = 65.7\n    equation = Eq(6*x + 6*(2*x), 65.7)\n    \n    # Solve for x\n    mass_of_light_ball = solve(equation, x)[0]\n    \n    # Return the mass of the light bowling ball rounded to the nearest kg\n    return round(mass_of_light_ball)\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    total_money = 705\n    cost_calculator = 34\n    cost_racket = 63\n\n    # Benson's money after buying the calculator\n    benson_left = benson - cost_calculator\n    # Clive's money after buying the racket\n    clive_left = clive - cost_racket\n    # Total money should be conserved and they should have the same amount left\n    equation1 = Eq(benson_left, clive_left)\n    equation2 = Eq(benson + clive, total_money)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average = sum(scores) / len(scores)\n    return average\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    average_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    \n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    denise, jay = symbols('denise jay')\n\n    equation1 = Eq(jay, 6 * denise)\n    equation2 = Eq(denise + jay, 126)\n\n    solutions = solve((equation1, equation2), (denise, jay))\n\n    return solutions[denise]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_bar_price = 1.26\n    total_cost_chocolate = 5 * chocolate_bar_price\n    per_cookie_price = total_cost_chocolate / 6\n    cost_of_cookies = 4 * per_cookie_price\n    initial_money = 9.05\n\n    remaining_money = initial_money - cost_of_cookies\n\n    return round(remaining_money, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_children = Eq(boys + girls, 650)\n    total_balls = Eq(boys/3 + girls/2, 250)\n\n    solutions = solve((total_children, total_balls), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the original number of girls and b represent the original number of boys\n    g, b = symbols('g b')\n\n    # After 25 girls go outside, the number of girls is g - 25\n    # After 15 boys go outside, the number of boys is b - 15\n    # According to the problem, we have two equations:\n    # 1) g - 25 = 2/3 * (b - 15)\n    # 2) g - 25 = b - 15\n\n    # Setting up the equations\n    equation1 = Eq(g - 25, 2/3 * (b - 15))\n    equation2 = Eq(g - 25, b - 15)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # The total number of students is the sum of the original number of girls and boys\n    total_students = solutions[g] + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for i in range(1000):  # Reasonable range to find the solution\n        if 8 * 11 == i * 9 + 34:\n            return i\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    decrease = 12\n    midnight_temp = midday_temp - decrease\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.20\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    side_length = 7\n    hole_side_length = 3\n    volume = 320\n\n    base_area = side_length**2 - hole_side_length**2\n    height = volume / base_area\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # There are 7 entities: Amy&Judy as one entity and 6 others.\n    # So think of it as 7 entities around the table.\n    entities_permutations = factorial(7)\n    \n    # Now, Amy and Judy can switch places in 2 ways.\n    amy_judy_permutations = 2\n    \n    # Total is the product of the two possibilities.\n    total_permutations = entities_permutations * amy_judy_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    total_value = 7590  # total value in cents\n    ratio = 8 / 3\n    value_10cent = 10\n    value_50cent = 50\n\n    # Let's denote the number of 50-cent coins as x.\n    # Then, the number of 10-cent coins would be ratio times x, i.e., 8x/3.\n    # The total value is given by value_10cent * (8x/3) + value_50cent * x\n    # We set the equation equal to the total value and solve for x.\n\n    # value_10cent * (8x/3) + value_50cent * x = total_value\n    # 10 * (8x/3) + 50 * x = 7590\n    # Simplifying, we get:\n    # 80x/3 + 50x = 7590\n    # 80/3 * x + 150/3 * x = 7590\n    # (80 + 150) / 3 * x = 7590\n    # 230/3 * x = 7590\n    # x = 7590 / (230/3)\n    # x = 7590 * 3 / 230\n    x = (total_value * 3) / (value_10cent * (8/3) + value_50cent)\n\n    # Now we find the total value of the 50-cent coins\n    total_value_50cent = value_50cent * x\n    return total_value_50cent\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit must be in the range 1 to 9\n        for j in range(10):  # The second digit can be in the range 0 to 9\n            # The palindromic number is constructed by the pattern abba.\n            # Since we don't need to check the third and fourth digits individually,\n            # the count of palindromic numbers is simply the product of possibilities\n            # of the first and second digits.\n            palindromic_number = int(str(i) + str(j) + str(j) + str(i))\n            if 1000 <= palindromic_number <= 9999:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    def find_triangle_number_index(n):\n        i = 1\n        while n > i:\n            n -= i\n            i += 1\n        return n, i\n\n    nth, triangle_number_index = find_triangle_number_index(2008)\n    \n    return nth\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    # Given: 3x balances 10y, and 1x weighs 1.5g\n    weight_of_x = 1.5  # in grams\n    weight_of_y = (3 * weight_of_x) / 10  # Balance implies 3x = 10y\n\n    return weight_of_y\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    terms = [6, 10, 14, 18, 22, 26]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of tomatoes and cucumbers sold\n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n\n    # Equation: number of tomatoes sold was 3 more than 3 times that of cucumbers\n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n\n    # Tommy sold 27 tomatoes\n    tomatoes_sold = 27\n\n    # Solve for the number of cucumbers\n    cucumbers_sold = solve(equation.subs(tomatoes, tomatoes_sold), cucumbers)\n\n    return cucumbers_sold[0]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    digits = [3, 5, 9]\n    count = 0\n    for i in range(len(digits)):\n        for j in range(len(digits)):\n            for k in range(len(digits)):\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        if i % 5 == 2:\n            sum += i\n    return sum\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    n = 31\n    difference = 6\n    a_16 = 100\n    # Calculating the first term using the formula for the nth term of an arithmetic sequence\n    # a_n = a_1 + (n - 1) * d\n    # a_16 = a_1 + (16 - 1) * 6  =>  a_1 = a_16 - (16 - 1) * 6\n    a_1 = a_16 - (16 - 1) * difference\n    # Sum of the first n terms of an arithmetic sequence is given by the formula:\n    # S_n = n/2 * (2a_1 + (n - 1) * d)\n    S_n = n / 2 * (2 * a_1 + (n - 1) * difference)\n    return int(S_n)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_away = total_bags // 3\n    remaining_bags = total_bags - given_away\n    return remaining_bags\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # To ensure victory, Chris must leave a multiple of 3 matches after his turn.\n    # This forces Dylan to pick 1 or 2 matches and still leave a multiple of 3,\n    # which allows Chris to continue the pattern and eventually pick the last match.\n    for first_move in range(1, 3):\n        if (7 - first_move) % 3 == 0:\n            return first_move\n    # If multiple of 3 condition is not met, pick another strategy (however,\n    # for the given numbers, the above condition will always give the result).\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:  # A cannot be zero as it is the first digit of a 3-digit number\n            ABC = A * 100 + B * 10 + C\n            return ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 5):\n        a, b, c, d, e = p\n        if a == '0' or d == '0':  # a and d can't be zero as they're leading digits\n            continue\n        abac = int(a + b + a + c)\n        dbec = int(d + b + e + c)\n        acedc = int(a + c + e + d + c)\n        if abac + dbec == acedc:\n            return int(dbec)\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    # Convert both times to minutes since midnight\n    start_time_minutes = (9 * 60) + 23  # 9:23 am\n    end_time_minutes = (13 * 60) + 6    # 1:06 pm\n\n    # Calculate difference in minutes\n    diff_minutes = end_time_minutes - start_time_minutes\n\n    return diff_minutes\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    return 64**2 - 36\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assuming that the provided knowledge point suggests we are finding combinations,\n    # but the actual problem statement is missing details about the number of restaurants\n    # or other relevant information required to calculate combinations.\n    \n    # Since there isn't enough information provided to solve the actual question,\n    # we will return a placeholder value, like -1, to indicate that the question is incomplete.\n    return -1\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    sequence_sum = sum(range(1, 10)) + sum(range(1, 9))\n    return sequence_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    return sum([53, 47, 41, 35, 29, 23]) - sum([50, 44, 38, 32, 26])\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance_to_market = 48  # meters\n    walking_speed = 8  # meters per minute\n    \n    actual_time_taken = distance_to_market / walking_speed  # in minutes\n\n    return int(actual_time_taken)\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, E, _, _ = perm\n        if A == 0:  # A cannot be 0 as it's the first digit of a four-digit number\n            continue\n        number = A * 1000 + E * 100 + E * 10 + A\n        # Check if all conditions are met\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n            return number\n    return None\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_family_members = 4\n    average_age = 25\n    harry_age = 14\n    harrys_mom_age = 36\n    harrys_sister_age = 10\n    \n    total_age = total_family_members * average_age\n    harrys_dad_age = total_age - (harry_age + harrys_mom_age + harrys_sister_age)\n    \n    return harrys_dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    measurements_m = [83, 200 / 100, 8 / 100, 1/2]\n    door_height_m = 2  # Assuming standard classroom door height to be around 2 meters\n    closest_measurement = min(measurements_m, key=lambda x: abs(x - door_height_m))\n    return closest_measurement\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    pages = 0\n    digits = 0\n\n    while digits < 450:\n        pages += 1\n        digits += len(str(pages))\n\n    if digits > 450:\n        pages -= 1\n\n    return pages\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - 5/12\n    remaining_after_dinner = 1 - 2/7\n    money_left = 45\n\n    original_amount = money_left / (remaining_after_lunch * remaining_after_dinner)\n    return original_amount\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 0\n    pages = 0\n    \n    while total_digits < 1524:\n        pages += 1\n        total_digits += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * (5 - 1)) // 2\n    gina_wins = total_games - (2 + 1 + 4 + 3)\n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    ans = 2 * (largest - smallest)\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "import math\n\ndef solution():\n    g = 9.81  # Acceleration due to gravity (m/s^2)\n    theta = math.radians(20)  # Convert slope angle from degrees to radians\n    d = 400  # Distance along the slope (m)\n    mu_k = 0.2  # Coefficient of kinetic friction\n\n    # Calculate the force of gravity parallel to the incline\n    force_gravity_parallel = math.sin(theta) * g\n\n    # Calculate the acceleration (a) of the skier\n    a = force_gravity_parallel - (mu_k * math.cos(theta) * g)\n\n    # Use kinematic equation: v^2 = u^2 + 2ad \n    # where u is the initial velocity (0 because the skier starts from rest)\n    v_squared = 2 * a * d\n\n    # Calculate the final speed (v) of the skier at the bottom of the slope\n    v = math.sqrt(v_squared)\n\n    return v\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    total_points = 155\n    point_difference = 15\n    questions = 10\n    points_per_correct = 10\n    points_per_wrong = -5\n\n    # Let x be the number of correct answers for Avril\n    for x in range(questions + 1):\n        avril_correct = x\n        avril_wrong = questions - x\n        avril_points = avril_correct * points_per_correct + avril_wrong * points_per_wrong\n\n        eddie_correct = avril_correct + (point_difference / (points_per_correct - points_per_wrong))\n        eddie_wrong = questions - eddie_correct\n        eddie_points = eddie_correct * points_per_correct + eddie_wrong * points_per_wrong\n\n        if (avril_points + eddie_points) == total_points:\n            return avril_correct\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    # Cost of a shirt and a bag\n    shirt_cost = 5\n    bag_cost = 10\n\n    # Total amount spent\n    total_amount = 300\n\n    # Marcus calculates the cost of a shirt and a bag as a single unit\n    single_unit_cost = shirt_cost + bag_cost  # $15 according to Marcus\n    # Number of groups based on Marcus' calculation\n    num_groups = total_amount / single_unit_cost\n\n    # According to Marcus' method, each group consists of 4 shirts and 1 bag\n    # But he mistakenly calculated shirts as num_groups * 1 (which should be for bags, not shirts)\n    # Correct calculation should be\n    shirts_per_group = 4  # 4 shirts for 1 bag as per the problem statement\n    correct_shirts_bought = num_groups * shirts_per_group\n\n    # Check if Marcus' answer is correct\n    is_correct = correct_shirts_bought == 20\n\n    # Return the correct number of shirts and whether Marcus was correct\n    return int(correct_shirts_bought), is_correct\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Calculate the rate of work for men and women\n    men_rate = 1 / (6 * 5)\n    women_rate = 1 / (5 * 6)\n    \n    # Calculate the combined rate of work for 10 men and 5 women\n    combined_rate = 10 * men_rate + 5 * women_rate\n    \n    # Calculate the time it will take for 10 men and 5 women to complete the job\n    days = 1 / combined_rate\n\n    return days\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    initial_condition = Eq(boys, 3 * girls)\n    after_changes = Eq(boys - 12, girls + 20)\n    \n    solutions = solve((initial_condition, after_changes), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of coffee bean types\n    type_a = 56\n    type_b = 96\n    type_c = 120\n\n    # Calculate greatest common divisor (GCD) for the three weights\n    gcd_ab = gcd(type_a, type_b)\n    gcd_abc = gcd(gcd_ab, type_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    number = 35\n    factors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # Minimum number of apples each child can get\n    min_apples_per_child = 1\n    \n    # Total number of children\n    total_children = 6\n    \n    # Total number of apples\n    total_apples = 30\n    \n    # Apples distributed equally to ensure each child gets at least one apple\n    apples_after_min_distribution = total_apples - (min_apples_per_child * total_children)\n    \n    # Number of children remaining after one child receives an extra apple\n    remaining_children = total_children - 1\n    \n    # Distribute the remaining apples equally among the remaining children\n    # This ensures the child with the most apples gets as few as possible\n    apples_for_max_child = (apples_after_min_distribution // remaining_children) + 1\n    \n    # Returning the smallest possible number of apples the child with the most can get\n    return apples_for_max_child\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana, orange = symbols('apple banana orange')\n    \n    equation1 = Eq(banana, 2 * apple)  # There are two bananas for every apple\n    equation2 = Eq(orange, 3 * apple)  # There are three oranges for every apple\n    equation3 = Eq(apple + banana + orange, 24)  # Total number of fruits used\n    \n    solutions = solve((equation1, equation2, equation3), (apple, banana, orange))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "网络故障，请重试"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Convert 2.4 m to cm to work uniformly in centimeters\n    additional_length_may = 240  # 2.4 m to cm\n\n    # Given lengths of the short and long ribbons \n    short_ribbon_length = 40  # length of May's short ribbon in cm\n    long_ribbon_length = 70   # length of Nancy's long ribbon in cm\n\n    # Given quantities of ribbons\n    may_short_ribbons = 7     # May's pieces of short ribbon\n    nancy_long_ribbons = 18   # Nancy's pieces of long ribbon\n\n    # Calculate the total length of Nancy's ribbons\n    total_length_nancy = nancy_long_ribbons * long_ribbon_length\n\n    # Calculate the total length of May's ribbons, which is longer by 2.4 m than Nancy's\n    total_length_may = total_length_nancy + additional_length_may\n\n    # May has equal number of ribbons as Nancy, so total ribbons May has\n    total_may_ribbons = may_short_ribbons + (total_length_may - may_short_ribbons * short_ribbon_length) // long_ribbon_length\n\n    return total_may_ribbons\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_animals = 12\n    total_legs = 34\n\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    result = (2.4 * 52 / 100) + (7.6 * 52 / 100)\n    return result\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    red_paint_ratio = 3\n\n    total_paint = 1  # in litres\n    red_paint = (red_paint_ratio / total_ratio) * total_paint\n\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    known_numbers = [9, 7, 5, 8, 4, 1, 8]\n    total_numbers = len(known_numbers) + 1  # Total numbers including the missing one\n    mean_value = 6\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    money_given = total_money / 4\n    money_left = total_money - money_given\n\n    return money_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    apples = 50\n    children = 8\n    min_apples_most = (apples - sum(range(1, children))) // children + children - 1\n    return min_apples_most\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # The daily amount of grass consumed by one cow is constant.\n    # If the pasture can feed 8 cows for 10 days, it can feed 1 cow for 80 days (8 * 10).\n    # If the pasture can feed 4 cows for 15 days, it can feed 1 cow for 60 days (4 * 15).\n    # Therefore, the total amount of grass in the pasture is enough for 1 cow for 60 days.\n\n    # Finding total consumption which is equal whether we use 8 cows for 10 days or 4 cows for 15 days.\n    total_consumption = 8 * 10  # This is the same as 4 cows * 15 days, which gives us 60 days for 1 cow.\n\n    # Finding how many cows can be fed for 5 days using the total consumption.\n    cows_for_5_days = total_consumption / 5\n\n    return cows_for_5_days\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_of_12_packets = 1.02  # in kilograms\n    total_mass_of_4_packets = (total_mass_of_4_packets / 12) * 4\n    return total_mass_of_4_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    total_cost = 83\n    tape_cost = 9\n    number_of_tapes = 3\n    number_of_cds = 4\n    \n    total_tape_cost = tape_cost * number_of_tapes\n    total_cd_cost = total_cost - total_tape_cost\n    cost_per_cd = total_cd_cost / number_of_cds\n    \n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    decimal_divisor = 1.22\n    incorrect_result_difference = 99.396\n    true_result = incorrect_result_difference / (1 - 1/decimal_divisor)\n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hisham, melissa = symbols('hisham melissa')\n    \n    total_cards = 876\n    equation1 = Eq(melissa, 2 * hisham)\n    equation2 = Eq(hisham + melissa, total_cards)\n    \n    solved_values = solve((equation1, equation2), (hisham, melissa))\n    hisham_cards = solved_values[hisham]\n    melissa_cards = solved_values[melissa]\n    \n    cards_to_give = (melissa_cards - hisham_cards) / 2\n    \n    return cards_to_give\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Since we have the 4th and 6th terms, we can find the 5th term by subtracting the 4th from the 6th.\n    # Then we can find the 3rd term by subtracting the 4th from the 5th (going backwards in the Fibonacci-like sequence)\n    # Using this information, we can then find the 2nd and 1st terms\n    # Then we can find the 7th term by summing the 5th and 6th terms\n    \n    term_6 = 15\n    term_4 = 6\n    \n    # Find the 5th term\n    term_5 = term_6 - term_4  # term_6 = term_4 + term_5\n\n    # Find the 3rd term\n    term_3 = term_4 - term_5  # term_4 = term_3 + term_5\n    \n    # Find the 2nd term\n    term_2 = term_3 - term_4  # term_3 = term_2 + term_4\n    \n    # Find the 1st term\n    term_1 = term_2 - term_3  # term_2 = term_1 + term_3\n    \n    # Finally, find the 7th term\n    term_7 = term_5 + term_6\n    \n    return term_7\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    # Initial value after multiplication and addition\n    final_value = 35\n    \n    # Reverse the addition: Subtract 8\n    after_subtraction = final_value - 8\n    \n    # Reverse the multiplication: Divide by 3\n    initial_number = after_subtraction / 3\n    \n    return initial_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n    boys = 28\n    girls = 32\n\n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # Convert litres to millilitres\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * (sum(1 / (5 * i * (5 * i + 5)) for i in range(7)))\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '7', '5', '8', '3']\n    all_permutations = permutations(digits)\n    valid_numbers = [int(''.join(p)) for p in all_permutations if int(p[-1]) % 2 != 0]\n    return min(valid_numbers)\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # One man's one day work\n    work_per_man_per_day = 1 / (24 * 16)\n    # One woman's one day work\n    work_per_woman_per_day = 1 / (16 * 24)\n\n    # Work done by 10 men and 6 women in one day\n    work_per_day_combined = 10 * work_per_man_per_day + 6 * work_per_woman_per_day\n\n    # Total days required to complete the job by 10 men and 6 women\n    total_days = 1 / work_per_day_combined\n    \n    return total_days\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # When n rectangles are placed on a plane, the maximum number of regions created is given by:\n    # R(n) = n^2 + n + 1 where n is the number of rectangles\n\n    n = 4  # number of rectangles\n    ans = n**2 + n + 1\n    return ans\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_salary = solve(equation, julie)[0]\n    marion_salary = 2 * julie_salary\n    ethan_salary = 5 * julie_salary\n\n    total_salary = julie_salary + marion_salary + ethan_salary\n\n    return total_salary\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    total_positions = factorial(5)\n    eddie_middle_positions = factorial(4)\n    total_arrangements = total_positions - eddie_middle_positions\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Given geometric sequence: 96, n, 24, 12, 6\n    # To find n, we can use the property of geometric sequences: a(n) = a(n-1) * r\n    # where r is the common ratio and a(n) is the nth term.\n    \n    # Find common ratio using the terms 24 and 12\n    r = 12 / 24  # r = 0.5\n    \n    # Use the common ratio to find n, which is the term before 24\n    n = 24 / r  # n = 24 / 0.5\n    \n    return int(n)  # Return n as an integer\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the sum of money Hamid had at first\n    x = symbols('x')\n\n    # The equation represents what he is left with after spending some amount on a watch and $56 on a tie  \n    equation = Eq(x - (x / 3 + 56), (3/8) * x)\n\n    # Solve the equation to find the original sum of money\n    original_sum = solve(equation, x)[0]\n\n    # Calculate the total amount spent which is the amount spent on watch and tie\n    total_spent = (1/3) * original_sum + 56\n\n    return total_spent\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    min_value = float('inf')\n    for perm in permutations(range(1,10)):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0:\n            min_value = min(min_value, number)\n    return min_value\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    time_to_pass = 10  # seconds\n\n    relative_speed = eddie_speed + train_speed  # m/s\n    train_length = relative_speed * time_to_pass  # meters\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    operations = ['+', '*']\n    for combo in product(operations, repeat=3):\n        expression = f\"1{combo[0]}2{combo[1]}3{combo[2]}4\"\n        value = eval(expression)\n        max_value = max(max_value, value)\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    correct_mark = 8\n    incorrect_penalty = 3\n    total_questions = 12\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark - incorrect_answers * incorrect_penalty\n        if score == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700\n    bridge_length = 900\n    speed = 400  # in meters per minute\n\n    total_distance_to_cover = train_length + bridge_length\n    time_required = total_distance_to_cover / speed\n\n    return time_required\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    # Define the first two terms of the sequence\n    a, b = 3, 10\n    # Since we want to find the 1997th term modulo 3,\n    # we only need to keep track of each term modulo 3\n    for _ in range(1997 - 2):\n        a, b = b % 3, (a + b) % 3\n    # Now 'a' is holding the 1996th term modulo 3 and 'b' is holding the 1997th term modulo 3\n    # We return the 1997th term modulo 3\n    return b\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers Sam and Peter originally had\n    sam, peter = symbols('sam peter')\n\n    # Original condition: Sam had 40 more stickers than Peter\n    eq1 = Eq(sam, peter + 40)\n\n    # Sam gives 20% of his stickers to Peter\n    sam_gives = sam * 20 / 100\n\n    # Peter gives 25% of his stickers to Sam\n    peter_gives = (peter + sam_gives) * 25 / 100\n\n    # Final condition: Sam had 96 more stickers than Peter\n    eq2 = Eq(sam - sam_gives + peter_gives, (peter + sam_gives - peter_gives) + 96)\n\n    # Solving the equations\n    solutions = solve((eq1, eq2), (sam, peter))\n\n    # Peter's original number of stickers\n    return solutions[peter]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current_age, mom_current_age = symbols('hazel_current_age mom_current_age')\n    \n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel_current_age * 3, hazel_current_age + 12)\n    \n    # On Hazel's 18th birthday, her mom will be three times her age at that time\n    equation2 = Eq(mom_current_age + (18 - hazel_current_age), 3 * 18)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hazel_current_age, mom_current_age))\n\n    return solutions[mom_current_age]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    years_passed = 0\n    \n    while True:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n        if peter_age == pip_age + pit_age:\n            return peter_age\n        years_passed += 1\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Total terms in the sequence\n    total_terms = 60\n\n    # Summation of arithmetic sequence formula: S_n = n/2 * (first_term + last_term)\n    # Where n is the number of terms, first_term is the first term and last_term is the last term.\n\n    # Given: Sum of first 5 numbers is 10: S_5 = 10\n    # Given: Sum of last 5 numbers is 120: S'_5 = 120\n\n    # Let the first term be a, and the common difference be d.\n    # S_5 = 5/2 * (2a + 4d) = 10 ==> 1) 2a + 4d = 4\n    # S'_5 = 5/2 * [2a + 2(60 - 1)d] = 120 ==> 2) 2a + 2(60 - 1)d = 48\n\n    # Subtract equation 1 from equation 2 to find the common difference, d:\n    # 2(60 - 1)d - 4d = 48 - 4\n    # 2*59d - 4d = 44\n    # 118d - 4d = 44\n    # 114d = 44\n    d = 44 / 114\n\n    # Now substitute d back into equation 1 to find the first term, a:\n    # 2a + 4*(44/114) = 4\n    # 2a + 176/114 = 4\n    # 2a = 4 - 176/114\n    # a = (4*114 - 176) / (2*114)\n    a = (4 * 114 - 176) / (2 * 114)\n\n    # Now find the last term, l, which is a + (n-1)d where n is 60\n    l = a + (total_terms - 1) * d\n\n    # Calculate the sum of all 60 terms using the formula: S_n = n/2 * (first_term + last_term)\n    S_60 = total_terms / 2 * (a + l)\n\n    return S_60\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 different numbers, so if we want to guarantee two consecutive numbers,\n    # we would have to draw all cards for 12 numbers plus one from the next number.\n    # This is because in the worst case scenario, we could be drawing all non-consecutive numbers\n    # until we've covered all 13 numbers.\n    # Since each number has 4 different patterns, we multiply 12 by 4 and add 1 for the next number card.\n    return 12 * 4 + 1\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    # To find the smallest M we start testing numbers consecutively from 0 up.\n    M = 0\n    while True:\n        # Assuming the common difference of arithmetic sequence is d,\n        # and the smallest remainder when divided by 7, 9, a, and 28 as r1, r2, r3, and r4 respectively.\n        # We have r2 = r1 + d, r3 = r1 + 2d, and r4 = r1 + 3d, and also 0 <= r1, ..., r4 < 28\n        # We test each M to see if it satisfies the conditions.\n        remainders = [M % 7, M % 9, M % a if M % a < 28 else 0, M % 28]\n        if len(set(remainders)) == 4 and sorted(remainders) == remainders:\n            differences = [remainders[i + 1] - remainders[i] for i in range(len(remainders) - 1)]\n            if len(set(differences)) == 1:\n                return M\n        M += 1\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48  # Number of seats in the first row\n    last_term = 80   # Number of seats in the last row\n    difference = 4   # Difference between the number of seats in consecutive rows\n\n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    num_rows = (last_term - first_term) // difference + 1\n\n    # Calculate the sum of the arithmetic sequence (the total number of seats) using the formula:\n    # sum = n/2 * (first_term + last_term)\n    total_seats = num_rows * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Initialize the counter for the total number of digits\n    total_digits = 0\n\n    # Loop through numbers from 1 to 129\n    for i in range(1, 130):\n        # Add the number of digits in the current number\n        total_digits += len(str(i))\n    \n    return total_digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Calculate the number of pages per sheet\n    pages_per_sheet = 4\n    \n    # Calculate the sheet number for the back page (sheet with the last page)\n    sheet_number = 36 // pages_per_sheet\n\n    # Calculate the page numbers for the fifth sheet (front and back)\n    # The following numbers are from the perspective of \"facing up\" when the newspaper is unfolded\n    page_front_right = 5 * 2 - 1  # Right page when the fifth sheet is facing up\n    page_front_left = page_front_right - 1  # Left page when the fifth sheet is facing up\n    page_back_left = 36 - (page_front_right - 1)  # Left page when the fifth sheet is flipped\n    page_back_right = page_back_left + 1  # Right page when the fifth sheet is flipped\n\n    # Calculate the sum of all page numbers on the fifth sheet\n    sum_of_pages = page_front_left + page_front_right + page_back_left + page_back_right\n    \n    return sum_of_pages\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original cost of each laptop, n be the number of laptops\n    x, n = symbols('x n')\n\n    # Initial total profit = 60000\n    # Total profit after decrease in cost = 60000 * 1.3\n    # Selling price remains the same = 2000 for each laptop\n\n    # Equation 1: Initial profit calculation\n    equation1 = Eq(n * (2000 - x), 60000)\n\n    # Equation 2: Profit calculation after cost decreases by 1/5\n    cost_decreased = x - x / 5\n    new_profit = 60000 * 1.3\n    equation2 = Eq(n * (2000 - cost_decreased), new_profit)\n\n    # Solve the equations for n\n    solutions = solve((equation1, equation2), (x, n))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Calculate how many man-days are required to dig the original trench\n    man_days_for_120m_trench = 3 * 2\n    \n    # Calculate the man-days per metre for the original trench\n    man_days_per_metre = man_days_for_120m_trench / 120\n    \n    # Calculate the total man-days needed for the 880m trench\n    total_man_days_needed = man_days_per_metre * 880\n    \n    # Calculate the number of days required for four men to dig the 880m trench\n    days_needed_for_4men = total_man_days_needed / 4\n    \n    return days_needed_for_4men\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_time = 4\n\n    combined_rate = total_people / combined_time\n    gloria_rate = combined_rate - ellie_rate\n\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = (2 * 15) / 5\n    return int(numerator)\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    books_first_shelf = 18\n    books_second_shelf = 24\n    moved_books = symbols('moved_books')\n\n    equation = Eq(books_second_shelf + moved_books, 2 * (books_first_shelf - moved_books))\n\n    ans = solve(equation, moved_books)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    num1 = 285 + 6/7\n    num2 = 181 + 10/11\n    num3 = 153 + 12/13\n\n    den1 = 1/7\n    den2 = 1/11\n    den3 = 1/13\n\n    numerator = num1 + num2 + num3\n    denominator = den1 + den2 + den3\n\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    def total_students(n):\n        return n * n   # Total number of students in an n*n square\n\n    def boys_girls_difference(n):\n        if n % 2 == 0:\n            boys = (n / 2) * ((n / 2) + 1)\n            girls = (n - 1) * (n / 2)\n        else:\n            boys = ((n + 1) / 2) ** 2\n            girls = ((n - 1) / 2) ** 2\n        return boys - girls\n\n    n = 1   # We start checking from the smallest possible square size of 1\n    while True:\n        diff = boys_girls_difference(n)\n        if diff == 36:   # According to the problem, the difference should be 36\n            return total_students(n)\n        n += 1\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # seconds\n    distance = 300  # meters\n\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # Initial assumption based on the first condition\n    num_lollipops = 32\n\n    # Continue until we find a solution that satisfies both conditions\n    while True:\n        # Check if the number of lollipops fits the second condition\n        if (num_lollipops - 3) % 7 == 0:\n            break\n        # If not, add 4 to try the next possible number of lollipops\n        num_lollipops += 4\n\n    return num_lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    # Let x be the number of long tubes and y be the number of short tubes\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n    \n    # Since we want to find out the number of long tubes specifically,\n    # we can express y in terms of x using a simple equation derived\n    # from the total number of balls: \n    # total_balls = long_tube_capacity * x + short_tube_capacity * y\n    \n    # Assuming the maximum number of long tubes, and then we will decrease\n    # the count of long tubes and check if the rest can be divided among short tubes\n    max_long_tubes = total_balls // long_tube_capacity\n    \n    for x in range(max_long_tubes, -1, -1):\n        if (total_balls - (long_tube_capacity * x)) % short_tube_capacity == 0:\n            return x\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    term_difference = (ninth_term - third_term) // (9 - 3)\n\n    eleventh_term = third_term + term_difference * (11 - 3)\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "网络故障，请重试"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from fractions import Fraction\n\n    # Let total number of students be x\n    # According to the question:\n    # 5 are in the school band\n    # 3/4 of the remaining (x - 5) are in the choir\n    # 2/9 of the class are neither in the band nor the choir\n\n    # From the 2/9 statement, we can write the equation:\n    # 5 + 3/4 * (x - 5) + 2/9 * x = x\n    # Now we solve for x\n\n    # If 2/9 of the class are neither in the band nor the choir, then 7/9 are in either band or choir\n    # Thus, 5 (band members) + 3/4 * (x - 5) (choir members) represents 7/9 of the class\n    # So we can setup the equation 5 + 3/4 * (x - 5) = 7/9 * x\n\n    # Simplify and solve the equation for x\n    # Multiplying both sides by 36 (LCM of 4 and 9) to clear the fractions:\n    # 36 * 5 + 36 * 3/4 * (x - 5) = 36 * 7/9 * x\n    # 180 + 27 * (x - 5) = 28 * x\n    # 180 + 27x - 135 = 28x\n    # 45 + 27x = 28x\n    # x = 45\n\n    # The total number of students in the class is 45\n    return 45\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    # Generating the list of numbers to be cubed\n    numbers_to_cube = [number for number in range(1, 15) if number % 3 != 0]  # Skips multiples of 3\n\n    # Using the formula: 1³ + 2³ + 3³ + ... + n³ = (1 + 2 + 3 + ... + n)²\n    # First, we calculate the sum of the numbers to be cubed\n    total_sum = sum(numbers_to_cube)\n    \n    # Then we square the sum to get the result according to the formula\n    ans = total_sum ** 2\n\n    return ans\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15 / 100\n    discount_amount = original_price * discount_percentage\n    discounted_price = original_price - discount_amount\n\n    return discounted_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    incorrect_result = 2138.4\n    missing_decimal_value = 4.32\n\n    correct_result = incorrect_result / (missing_decimal_value * 10 - 1)\n    return correct_result\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    # Calculate the sum of 9 + 99 + 999 + 9999\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys + 8)  # There were 8 more girls than boys\n    equation2 = Eq(5 * boys + 3 * girls, 448)  # Total candies shared\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Grandmother's age in 2008\n    grandma_age_2008 = 80\n    # Mother's age in 1996\n    mum_age_1996 = 40\n    \n    # Calculate the year difference between 2008 and 1996\n    years_difference = 2008 - 1996\n\n    # Calculate the age of grandmother in 1996\n    grandma_age_1996 = grandma_age_2008 - years_difference\n\n    # Calculate the age of grandmother when mother was born (grandmother age in 1996 - mother age in 1996)\n    grandma_age_when_mum_born = grandma_age_1996 - mum_age_1996\n    \n    return grandma_age_when_mum_born\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # Find the differences between the numbers as they have the same remainder when divided by A\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n\n    # Find the greatest common divisor (GCD) of the differences\n    from math import gcd\n    gcd_diff = gcd(diff1, diff2)\n\n    # List to store all the possible values of A\n    possible_values = []\n\n    # The possible values of A are the divisors of the GCD of the differences\n    # excluding 1 because the divisor must be greater than the remainder\n    for i in range(2, gcd_diff + 1):\n        if gcd_diff % i == 0:\n            possible_values.append(i)\n\n    # Return the sum of all the possible values of A\n    return sum(possible_values)\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    # Initialize variables\n    total_income = 2012\n    lemonade_price = 4\n    plus_price = 7\n    total_bottles = 350\n\n    # Find the maximum bottles of lemonade that could be sold within the income limit\n    max_lemonade_bottles = total_income // lemonade_price\n\n    for lemonade_bottles in range(max_lemonade_bottles + 1):\n        plus_bottles = (total_income - lemonade_bottles * lemonade_price) // plus_price\n\n        if lemonade_bottles + plus_bottles <= total_bottles:\n            return plus_bottles\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    total_apples_initial = 60\n    apples_per_friend_initial = 4\n    \n    num_friends = total_apples_initial // apples_per_friend_initial\n    apples_per_friend_final = apples_per_friend_initial + 1\n    total_apples_final = num_friends * apples_per_friend_final\n    \n    return total_apples_final\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    # Using sympy to handle algebraic equations\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    milk, fruit = symbols('milk fruit')\n\n    # Original ratio equation: milk/fruit = 7/9\n    equation1 = Eq(milk / fruit, 7/9)\n\n    # After eating 8 pieces of milk candy, the ratio changes: (milk - 8)/fruit = 2/3\n    equation2 = Eq((milk - 8) / fruit, 2/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (milk, fruit))\n\n    # Get the original number of milk candy\n    return solutions[milk]\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # To get a pair of white socks in the worst case, Yohan could pick all red and black socks first.\n    # There are 10 red socks and 10 black socks.\n    max_red_black_socks = 10 + 10\n    \n    # He could pick one more sock and it is guaranteed to be a white sock (because even if\n    # he had picked one white sock before, he didn't get a pair yet).\n    one_white_sock = 1\n    \n    # Then, the next sock he picks must be white to make a pair of white socks, \n    # which means he must pick at least one more white sock.\n    another_white_sock = 1\n    \n    # The maximum number of socks Yohan must take to guarantee a pair of white socks is the sum of the above.\n    max_socks_for_white_pair = max_red_black_socks + one_white_sock + another_white_sock\n    \n    return max_socks_for_white_pair\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    total_students = 112\n    total_groups = 24\n\n    # Using system of equations\n    # If x is the number of groups with 4 pupils and y is the number of groups with 6 pupils,\n    # then we have the following equations:\n    # 4x + 6y = total_students      (1)\n    # x + y = total_groups          (2)\n\n    # From equation (2), we have x = total_groups - y\n    # Substituting x in equation (1), we get:\n    # 4(total_groups - y) + 6y = total_students\n    # 4 * total_groups - 4y + 6y = total_students\n    # 2y = total_students - 4 * total_groups\n    # y = (total_students - 4 * total_groups) / 2\n\n    y = (total_students - 4 * total_groups) // 2\n\n    return y\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_of_three = 60\n    sum_of_three = average_of_three * 3\n    average_of_four = 90\n    sum_of_four = average_of_four * 4\n\n    fourth_number = sum_of_four - sum_of_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    cm_per_meter = 100\n    cm = meters * cm_per_meter\n    return cm\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                if A != B and A != C and B != C:\n                    return A * 100 + B * 10 + C\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen:Oscar = 3 fish : 2 rabbit, which means 1 rabbit = 3/2 fish\n    rabbit_to_fish_ratio = 3 / 2\n\n    # Oscar:Dennis = 3 rabbit : 4 packs of wheat, which means 1 pack of wheat = 3/4 rabbit\n    wheat_to_rabbit_ratio = 3 / 4\n    \n    # To find out how many fish is to 1 pack of wheat, multiply the ratios:\n    # 1 pack of wheat = (3/4 rabbit) * (3/2 fish/rabbit)\n    wheat_to_fish_ratio = wheat_to_rabbit_ratio * rabbit_to_fish_ratio\n\n    # Now, find out how many fish for 8 packs of wheat\n    fish_for_eight_packs_of_wheat = 8 * wheat_to_fish_ratio\n\n    return fish_for_eight_packs_of_wheat\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    handbag_after_discount = 428\n    handbag_discount_percent = 20 / 100\n    total_discount = 121\n    \n    handbag_before_discount = handbag_after_discount / (1 - handbag_discount_percent)\n    purse_discount = total_discount - handbag_before_discount * handbag_discount_percent\n    \n    purse_discount_percent = 28 / 100\n    purse_before_discount = purse_discount / purse_discount_percent\n    \n    return purse_before_discount\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    from math import factorial\n\n    n = factorial(25)\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n        \n    return count\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # In 20 digits, the \"A2\" pattern will repeat 10 times (since each pattern has 2 digits).\n    # The sum of the digits in one pattern \"A2\" is A + 2.\n    # The sum of the digits in 20 digits will be 10 times the sum of one pattern.\n    # Therefore, the equation is 10 * (A + 2) = 80.\n    \n    # Solving for A\n    A = (80 / 10) - 2\n    \n    return int(A)\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    climbed_distance = 0\n    day = 0\n    while climbed_distance < 25:\n        day += 1  # Every new iteration represents a new day\n        climbed_distance += 4  # Snail climbs up 4 meters\n        if climbed_distance >= 25:  # Check if the snail is out of the well\n            break\n        climbed_distance -= 1  # At night, the snail slides down 1 meter\n        \n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    return 2 * 2  # Sally dances twice a week, so in 2 weeks she will dance 2 times 2.\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Time spent jogging: 7:00 AM - 6:30 AM = 30 minutes = 0.5 hours\n    jogging_time = 0.5\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Time spent walking: 8:00 AM - 7:00 AM = 1 hour\n    walking_time = 1\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    x = symbols('x')\n    chair_cost = 120\n    jacket_portion = 0.4\n    remaining_portion = 0.3\n\n    # Expression for the cost of the jacket\n    jacket_cost = jacket_portion * (x - chair_cost)\n    \n    # Remaining money is 30% of original\n    remaining_money = remaining_portion * x\n    \n    # Equation based on the information given in the problem\n    equation = Eq(chair_cost + jacket_cost + remaining_money, x)\n    \n    # Solve for x\n    original_amount = solve(equation, x)[0]\n    \n    return original_amount\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        if gcd(numerator, numerator + 5) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n    return lcm(6, 10)\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    min_books_on_most_filled_layer = (total_books + layers - 1) // layers\n    return min_books_on_most_filled_layer\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 4):  # hundreds place can be 1, 2, or 3\n        for tens in range(0, 4):  # tens place can be 0, 1, 2, or 3\n            for ones in range(0, 4):  # ones place can be 0, 1, 2, or 3\n                if len(set([hundreds, tens, ones])) == 3:  # no repetitions\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = -4\n    n = 1  # Starting with the first term\n\n    while first_term + common_difference * (n - 1) >= 0:\n        n += 1\n\n    return n - 1  # Subtracting 1 because we stop before the first negative term\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Rachel and Alice's candies\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 candies, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If both eat 8 candies, Rachel has 3 times the candies Alice has\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total candies originally\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_kg = 1.2\n    weight_per_piece_g = 30\n    total_weight_g = total_weight_kg * 1000\n    num_pieces = total_weight_g / weight_per_piece_g\n    return int(num_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # Convert 2.5 liters to quarts\n    cups_per_quart = 1 / 0.5  # Calculate how many 0.5 quart cups are in 1 quart\n\n    total_cups = liters_to_quarts * cups_per_quart  # Calculate total number of cups\n\n    return round(total_cups)\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    initial_books = symbols('initial_books')\n\n    # Establish equations based on the average price before and after buying the extra books\n    # Before buying extra books, the total cost is initial_books * 3.5\n    # After buying the extra books, the total number of books is initial_books + 2\n    # and the new average price is 4, so the total cost is (initial_books + 2) * 4\n    # The difference between the two total costs must be the cost of the 2 extra books at $6 each\n    equation = Eq((initial_books * 3.5) + 2 * 6, (initial_books + 2) * 4)\n\n    # Solve the equation for the number of initial books\n    initial_books_solution = solve(equation, initial_books)\n\n    # Calculate the total number of books bought\n    total_books = initial_books_solution[0] + 2\n\n    return total_books\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Calculate the distance covered while jogging from 6:30am to 7:30am\n    jogging_time = 1  # hours\n    jogging_speed = 6 # miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the distance covered while walking from 7:30am to 9:30am\n    walking_time = 2  # hours\n    walking_speed = 5 # miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Calculate the total distance covered\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n\n    equation1 = Eq(angel, 5/6 * belle)\n    equation2 = Eq(angel - 58, 0.75 * belle)\n\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    # Six years ago relationship between dad's and son's age\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n\n    # Current age sum of dad and son\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    ans = (4 / 9) * 36\n    return ans\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # Since B=2 and D=0, the equation becomes\n    # 5 x (A, 2, 0, C, E, F) = 6 x (E, F, A, B, C, 0)\n    # Then A cannot be 1, since if A were 1, E would also be 1, violating the unique digit\n    # constraint.\n    for A in range(2, 10):\n        for C in range(1, 10):\n            for E in range(1, 10):\n                for F in range(1, 10):\n                    # A, B, C, D, E and F must all be different\n                    if len({A, 2, 0, C, E, F}) == 6:\n                        left_num = int(f\"{A}20{C}{E}{F}\")\n                        right_num = int(f\"{E}{F}A20{C}\")\n                        # Check if left_num is exactly 6/5 times right_num\n                        if left_num * 6 == right_num * 5:\n                            return int(f\"{F}{A}{C}{E}\")\n    return None\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original amount of money, and y be the number of children\n    x, y = symbols('x y')\n    \n    # If there was £0.20 more, then each child would get £0.70\n    equation1 = Eq(x + 0.20, y * 0.70)\n    \n    # If each child was to receive £0.60, then £2.10 would be left\n    equation2 = Eq(x - y * 0.60, 2.10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Number of children is the 'y' variable\n    return int(solutions[y])\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n    \n    remit = salary * remit_percentage\n    bank_charge = remit * bank_charge_percentage\n    \n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for vase1 in range(1, 10 - 2):  # Deduct 2 because of at least 1 carnation in each of the other two vases.\n        for vase2 in range(1, 10 - vase1 - 1):  # Deduct vase1 and 1 from the remaining for the last vase.\n            vase3 = 10 - vase1 - vase2\n            if vase1 < vase2 < vase3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment_received = 120.75\n    new_balance = account_balance + payment_received\n    return new_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"2 March 2023\", \"%d %B %Y\")\n    end_date = datetime.strptime(\"15 April 2023\", \"%d %B %Y\")\n\n    difference = end_date - start_date\n    return difference.days\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1000, 10000):  # Start looking for 4-digit numbers because the result should have the same number of digits as the original number\n        if int(str(i)[-1] + str(i)[:-1]) == 4 * i:  # Moving last digit to the front and multiplying by 4\n            return i\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    import math\n\n    # Eddie is fixed on the left end.\n    # Avril can be either to the immediate right of Eddie (one possibility).\n    # So, Avril's position is fixed too.\n\n    # We only need to arrange the remaining 5 students.\n    number_of_ways = math.factorial(5)\n\n    return number_of_ways\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # number of gloves required to be sure of having at least a pairing color\n    max_single_color_gloves = max(1+2, 3+4)  # either blue or green gloves\n    # since Dilly can't distinguish left from right, we need one more glove to be sure\n    ans = max_single_color_gloves + 1\n    return ans\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    percentage_increase = 45\n    new_price = original_price + (original_price * percentage_increase / 100)\n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean_value = 6\n    total_numbers = 8\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    circumference = 300\n    first_interval = 3\n    second_interval = 5\n    \n    # The number of trees in the first phase\n    num_trees_first_phase = 30\n\n    # Remaining circumference after the first 30 trees are planted\n    circumference_remaining = circumference - (num_trees_first_phase * first_interval)\n\n    # Calculate the number of trees (holes) with the second interval\n    num_trees_second_phase = circumference_remaining // second_interval\n    \n    # If the remaining circumference is not exactly divisible by the second interval,\n    # one additional hole will be required\n    if circumference_remaining % second_interval != 0:\n        num_trees_second_phase += 1\n    \n    return num_trees_second_phase\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Calculate ways to reach the 5th step\n    ways_to_5th = [0] * 6\n    ways_to_5th[0], ways_to_5th[1], ways_to_5th[2] = 1, 1, 2\n\n    for i in range(3, 6):\n        ways_to_5th[i] = ways_to_5th[i - 1] + ways_to_5th[i - 2]\n\n    # Calculate ways to reach the 10th step from the 5th\n    ways_from_5th_to_10th = [0] * 6\n    ways_from_5th_to_10th[0], ways_from_5th_to_10th[1], ways_from_5th_to_10th[2] = 1, 1, 2\n\n    for i in range(3, 6):\n        ways_from_5th_to_10th[i] = ways_from_5th_to_10th[i - 1] + ways_from_5th_to_10th[i - 2]\n\n    # Multiply the ways to reach the 5th step by the ways to reach the 10th step from the 5th\n    ans = ways_to_5th[5] * ways_from_5th_to_10th[5]\n\n    return ans\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for num in range(1, 51):\n        if '3' in str(num):\n            erased_sum += num\n    return erased_sum\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    # Initialize variables\n    total_digits = 792\n    digits_used = 0\n    page_number = 0\n    \n    # Since the pages 1-9 use 1 digit each, 10-99 use 2 digits each, and so on,\n    # we'll loop through these segments.\n    while digits_used < total_digits:\n        page_number += 1\n        if page_number < 10:\n            digits_used += 1\n        elif page_number < 100:\n            digits_used += 2\n        elif page_number < 1000:\n            digits_used += 3\n        else:\n            digits_used += 4\n    \n    # Return the last page number that used up the 792nd digit\n    return page_number\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    billy_average_4 = 89\n    billy_goal_average = ivan_average + 10\n    billy_total_before_5 = billy_average_4 * 4\n\n    billy_total_5_assignments = billy_goal_average * 5\n    billy_score_5th_assignment = billy_total_5_assignments - billy_total_before_5\n\n    return billy_score_5th_assignment\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length / pipe_length\n    \n    return int(num_pipes) if num_pipes.is_integer() else int(num_pipes) + 1\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # Consider the first number as x, and the second number will be 1000 - x.\n    # As x increases from 1 to 999, we have a unique second number each time.\n    # When x is 500, we will have already counted 499 pairs (1 and 999, 2 and 998, ... 499 and 501)\n    # The 500th pair will be (500, 500), which is also unique.\n    # Therefore, the total number of ways to add up to 1000 is 500.\n    ans = 500\n    return ans\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    first_term = 39 - (7 - 1) * 5  # Calculate the first term of the sequence\n    hundredth_term = first_term + (100 - 1) * 5  # Calculate the 100th term of the sequence\n\n    return hundredth_term\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "from sympy import symbols, solve, Eq, sqrt\n\ndef solution():\n    m = symbols('m')\n    expression = 1260 * m\n    equation = Eq(sqrt(expression)**2, expression)\n    m_value = solve(equation, m)\n\n    # The solve function returns a list of solutions. We need to find the positive integer\n    # value of m that makes 1260 * m a square number.\n    m_value = [int(sol.evalf()) for sol in m_value if sol.is_real and sol > 0 and (1260 * sol).is_square]\n\n    # Since we need a single value of m and we are assured it exists, we take the first\n    # (and presumably only) solution.\n    ans = m_value[0]\n    return ans\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = (2 * peaches) + 5\n    \n    return apples\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # To maximize the expression, multiply the largest terms together and then add the rest.\n\n    # Option 1: (15+5) * (5+15) - 6 + 7\n    option1 = (15+5) * (5+15) - 6 + 7\n    \n    # Option 2: 15 + (5*5+15) - (6+7)\n    option2 = 15 + (5*5+15) - (6+7)\n\n    # Option 3: (15+5) * 5 + 15 - 6 + 7\n    option3 = (15+5) * 5 + 15 - 6 + 7\n\n    # Option 4: 15 + 5 * (5+15) - 6 + 7\n    option4 = 15 + 5 * (5+15) - 6 + 7\n\n    # Identifying the largest result among the options\n    ans = max(option1, option2, option3, option4)\n\n    return ans\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(1, 29):\n        if (i % 4 == 3) and (i % 7 == 3):\n            return i\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    # Calculate least common multiple of 8 and 11\n    from math import lcm\n    multiple = lcm(8, 11)\n    \n    # Search for the number in the range of two-digit numbers\n    for num in range(10, 100):\n        if num % 8 == 6 and num % 11 == 6:\n            return num\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # Since we only care about the ones digit, we can look at the pattern of the ones digit of 9^x\n    # This sequence has a pattern: 9, 1, 9, 1, ...\n    power_pattern = [9, 1]\n    \n    # Find the position in the pattern for 9^99\n    # Since the pattern repeats every 2 numbers, using modulo 2\n    pattern_index = 99 % 2\n    \n    # Get the ones digit from the pattern\n    ones_digit = power_pattern[pattern_index - 1]  # minus 1 because list indices start at 0\n    \n    return ones_digit\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_cost = 151.25\n    chair_cost = 24.15\n    total_cost = table_cost + chair_cost\n    return total_cost\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234 + 50  # Adding 50 to reverse step (5)\n    day = int(result % 100)  # The remainder after dividing by 100 gives the day\n    month = int((result - day * 2) / (50 * 4))  # Reverse steps (1) - (4)\n\n    return (month, day)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    stickers_given_away = 9\n    remaining_stickers = (animal_stickers + fruit_stickers) - stickers_given_away\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return pow(2, 2015, 3)\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Treat the four pupils who insist on standing together as one unit.\n    # So we have 5 units to arrange (4 individuals + 1 group of 4 pupils)\n    units_to_arrange = factorial(5)\n    \n    # Now, arrange the 4 pupils within the group.\n    arrangements_within_group = factorial(4)\n    \n    # Total arrangements is the product of the two.\n    total_arrangements = units_to_arrange * arrangements_within_group\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar_weight = 7\n    water_weight = 21\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # If x is the middle number, the three numbers are (x-1), x, and (x+1)\n    # Their sum is (x - 1) + x + (x + 1) = 3x\n    # We know that their sum is 60, so 3x = 60\n    # Solve for x\n    x = 60 / 3\n    # The largest number is x + 1\n    largest_number = x + 1\n    # Return the largest number\n    return int(largest_number)\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the five other ponies\n    x = symbols('x')\n\n    # Initially, average value of ponies in the small stable (without Rein Beau)\n    average_small_initial = x / 3\n\n    # Initially, average value of ponies in the large stable\n    average_large_initial = x / 3\n\n    # After Rein Beau moves to the large stable, the average values change\n    average_small_final = (x - 250000) / 2\n    average_large_final = (x + 250000) / 4\n\n    # Set up the equations based on the average value increase\n    equation1 = Eq(average_small_initial, average_small_final + 10000)\n    equation2 = Eq(average_large_initial, average_large_final + 10000)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x))\n\n    # Total value of all six ponies is x + the value of Rein Beau\n    total_value = solutions[x] + 250000\n\n    return total_value\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let's use x for gold medals and y for silver medals\n    # From the given information, we have two equations\n    # 5x + 4y = 331 (total points)\n    # x + y = 80 (total medals)\n    \n    # We can solve these two equations using substitution or elimination\n    # I'll use substitution for simplicity.\n    # From the second equation, we can express y in terms of x: y = 80 - x\n    \n    # Now, we'll substitute y in the first equation:\n    # 5x + 4(80 - x) = 331\n    # 5x + 320 - 4x = 331\n    # x = 331 - 320\n    x = 331 - 320\n    \n    # We solve for x which represents the number of gold medals\n    return x\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    price_per_kg_lamb = 8.70\n    price_per_kg_beef = 9.40\n    total_lamb = 7 * price_per_kg_lamb\n    total_beef = 30 * price_per_kg_beef\n    total_cost = total_lamb + total_beef\n    return total_cost\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    total_spectators = symbols('total_spectators')\n    children = total_spectators / 3\n    remainder = total_spectators - children\n    men = 5 * remainder / 8\n    women = 80\n\n    # Equation: children + men + women = total_spectators\n    equation = Eq(children + men + women, total_spectators)\n\n    ans = solve(equation, total_spectators)[0]\n    return ans\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Since from the given examples, whenever the first number is greater than the second number, \n    # the operation seems to add both numbers.\n    # And whenever the first number is smaller, it seems to keep the number as the output.\n    # Therefore, we can establish a conditional operation based on these observations.\n    def star_op(a, b):\n        if a > b:\n            return a + b\n        else:\n            return a\n\n    return star_op(11, 10)\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # Position of elephant from the left.\n    elephant_pos_from_left = 10  \n    \n    # Position of rabbit from the right.\n    rabbit_pos_from_right = 9\n    \n    # Number of dolls between the rabbit and the elephant.\n    dolls_between = 5  \n    \n    # The total number of dolls is the sum of:\n    # Position of the elephant from the left + Number of dolls between + Position of rabbit from the right.\n    total_dolls = elephant_pos_from_left + dolls_between + rabbit_pos_from_right\n    \n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * (11/52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    boys_difference = 32\n    total_students = 0\n    layer = 0\n\n    while True:\n        boys_in_layer = (layer*2 + 1)**2 - (layer*2)**2\n        girls_in_layer = ((layer+1)*2)**2 - (layer*2 + 1)**2\n        total_students += boys_in_layer\n        if boys_in_layer - girls_in_layer == boys_difference:\n            total_students += girls_in_layer\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the rates of work for the master and apprentice \n    master_rate, apprentice_rate = symbols('master_rate apprentice_rate')\n    \n    # Eq1: 1 master rate + 3 apprentice rates = 1/4 of the work per day\n    eq1 = Eq(1 * master_rate + 3 * apprentice_rate, 1/4)\n    \n    # Eq2: 2 master rates + 1 apprentice rate = 1/3 of the work per day\n    eq2 = Eq(2 * master_rate + 1 * apprentice_rate, 1/3)\n    \n    # Solve the equations to find the individual rates of work for the master and the apprentice\n    solutions = solve((eq1, eq2), (master_rate, apprentice_rate))\n    \n    # Calculate the time it takes for 1 apprentice to complete the task alone (applied as 1/apprentice_rate)\n    time_for_apprentice_alone = 1 / solutions[apprentice_rate]\n    \n    return time_for_apprentice_alone\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, months, monthly_plants = symbols('original_roses original_daisies months monthly_plants')\n    \n    # Equation representing total flowers initially\n    equation1 = Eq(original_roses + original_daisies, 300)\n    # Equations representing the future scenario\n    equation2 = Eq(original_roses + months * monthly_plants, 280)\n    equation3 = Eq(original_daisies + months * monthly_plants, 180)\n    # Since the planter plants the same number of roses and daisies each month,\n    # the difference between roses and daisies remains the same\n    equation4 = Eq(original_roses - original_daisies, 280 - 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (original_roses, original_daisies, months, monthly_plants))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 61))\n    return sum(primes)\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # Known positions and values of the arithmetic sequence\n    tenth_term = 23\n    fifteenth_term = 38\n    \n    # Calculate the common difference using the known terms\n    common_diff = (fifteenth_term - tenth_term) / (15 - 10)\n    \n    # Equation of nth term of an arithmetic sequence: a_n = a_1 + (n-1)*d\n    # We can calculate the first term (a_1) using one of the known terms\n    first_term = tenth_term - (10 - 1) * common_diff\n    \n    # Calculate the 102nd term using the first term and common difference\n    nth_term = first_term + (102 - 1) * common_diff\n    \n    return nth_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n\n    non_english_books = total_books - english_books\n    comics = non_english_books / 3\n\n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    return 8.002 + 10.421\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_volume = 6\n\n    total_volume = coffee_volume * (total_ratio / coffee_ratio)\n\n    return total_volume\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n    average_score = total_score / total_shots\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    zeros_count = 0\n    for page in range(1, 201):\n        zeros_count += str(page).count('0')\n    return zeros_count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Start by giving each child one apple\n    apples_left = 50 - 8\n    \n    # The problem is equivalent to finding the least maximum partition\n    # of the number 42 into 8 distinct parts.\n    # We will give the next 7 children two apples, until we reach the maximum number,\n    # and the remaining apples will be summed with the first child.\n    for i in range(7):\n        apples_left -= (i + 1)\n    \n    # The first child now gets the rest of the apples\n    max_apples_for_first_child = 1 + apples_left\n\n    return max_apples_for_first_child\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Perform the calculation step by step using fractions\n    from fractions import Fraction\n    \n    # Calculate the numerator of the first complex fraction\n    numerator_first = Fraction(1, 30) + Fraction(1, 6)\n    # Calculate the denominator of the first complex fraction\n    denominator_first = Fraction(2, 25)\n    # Calculate the first complex fraction\n    first_complex_fraction = numerator_first / denominator_first\n    \n    # Calculate the numerator of the second complex fraction\n    numerator_second = 2 - Fraction(2, 3)\n    # Calculate the denominator of the second complex fraction\n    denominator_second = Fraction(8, 3)\n    # Calculate the second complex fraction\n    second_complex_fraction = numerator_second / denominator_second\n    \n    # Add the two complex fractions together\n    result = first_complex_fraction + second_complex_fraction\n    \n    return result\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for num_parts in range(2, 9):\n        for i1 in range(1, 8):\n            for i2 in range(i1, 8):\n                # with two parts the sum must be exactly 8, with more parts at least one must be 1\n                if num_parts == 2 and i1 + i2 == 8:\n                    count += 1\n                elif num_parts > 2 and i1 + i2 < 8:\n                    remaining_sum = 8 - (i1 + i2)\n                    # partition remaining_sum into num_parts - 2 parts\n                    for partition in range(1, remaining_sum):\n                        rest_parts = remaining_sum - partition\n                        if rest_parts <= partition * (num_parts - 2):\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kg = total_cost / total_weight\n    return cost_per_kg\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253  # in meters\n    tunnel_length = 669  # in meters\n    train_speed = 104  # in meters per second\n\n    # The total distance the train needs to cover to completely clear the tunnel\n    total_distance = train_length + tunnel_length\n\n    # Time taken for the entire train to pass through the tunnel is total distance divided by the speed\n    time = total_distance / train_speed\n\n    return time\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    return 234 + 578\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # If everyone wearing a bow tie is also wearing spectacles, then the number\n    # of men not wearing bow ties nor spectacles will be maximized.\n    # Minimum number of men wearing both a bow tie and spectacles.\n    min_both = max(0, bow_ties + spectacles - total_men)\n\n    # Maximum number of men not wearing bow ties and not wearing spectacles\n    max_neither = total_men - (bow_ties + spectacles - min_both)\n\n    return max_neither\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    base_amount = 350\n    percent_20 = 20 / 100\n    percent_50 = 50 / 100\n    \n    ans = base_amount * percent_20 * percent_50\n    return ans\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1/3) * 414\n    return result\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Treat Ali and Bala as a single entity because they must stand together.\n    # So, we have 4 entities to arrange: Dan, (Ali and Bala), Charles, Ella\n    # Since Dan must be at the furthest left, we are left with 3 positions to arrange.\n    arrangements_of_three = factorial(3)\n\n    # Ali and Bala can switch places within their single entity position.\n    arrangements_of_ali_bala = factorial(2)\n\n    total_arrangements = arrangements_of_three * arrangements_of_ali_bala\n\n    return total_arrangements\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n\n    for page in range(1, 141):  # 140 pages, so range is from 1 to 140 inclusive\n        total_digits += len(str(page))\n\n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Initialize possible solutions list\n    solutions = []\n\n    # Loop through possible minuend and subtrahend values\n    for minuend in range(10, 100):\n        for tens in range(1, 10):\n            for ones in range(10):\n                # Correct subtrahend value\n                correct_subtrahend = tens * 10 + ones\n                # Incorrect subtrahend value\n                incorrect_subtrahend = (tens + 2) * 10 + (ones - 2)\n                # Incorrect difference obtained by Serene\n                incorrect_difference = minuend - incorrect_subtrahend\n\n                # Check if incorrect difference matches the one got by Serene\n                if incorrect_difference == 36:\n                    # Correct difference using the correct subtrahend value\n                    correct_difference = minuend - correct_subtrahend\n                    solutions.append(correct_difference)\n\n    # Since there can only be one correct difference, we return the first in the list\n    return solutions[0]\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # The worst case scenario to get all three colors.\n    # First take all white balls, we have 9 white balls, \n    # then take all yellow balls, there are 6 yellow balls.\n    # The next ball we take must be red.\n    max_white_yellow = 9 + 6\n    \n    # Since we want 3 different colored balls, we draw one more, which must be red.\n    return max_white_yellow + 1\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    terms = [2 + 3 * i for i in range(12)]\n    return sum(terms)\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # since we are to distribute 19 apples to 5 children such that no two have the same number and each gets at least 1,\n    # we sort the children by the number of apples they get in ascending order.\n    # Let's denote the number of apples the children get as a1, a2, a3, a4, a5 with a1 < a2 < a3 < a4 < a5\n    # Given each child has at least one apple, we start with a1 = 1, a2 = 2, a3 = 3, a4 = 4\n    # The remaining apples for a5 are total apples minus the sum given to the first four children.\n    # If we keep a1, a2, a3, a4 at their minimum values, a5 will be at its maximum value.\n    a1, a2, a3, a4 = 1, 2, 3, 4\n    children = [a1, a2, a3, a4]\n\n    total_apples = 19\n    # Calculate apples for the child who gets the most (a5).\n    a5 = total_apples - sum(children)\n\n    # The largest possible number of apples for the child who gets the most is a5.\n    return a5\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Given that 3 fishes are equivalent to 2 rabbits\n    fishes_to_rabbits_ratio = 3 / 2\n    \n    # And 3 rabbits are equivalent to 4 packs of wheat\n    rabbits_to_wheat_ratio = 4 / 3\n    \n    # We want to find how many fishes are equivalent to 8 packs of wheat\n    # First, find how many fishes are equivalent to 1 pack of wheat\n    fishes_to_one_pack_wheat = fishes_to_rabbits_ratio * rabbits_to_wheat_ratio\n    \n    # Then, calculate how many fishes are equivalent to 8 packs of wheat\n    fishes_for_eight_packs_wheat = fishes_to_one_pack_wheat * 8\n    \n    return fishes_for_eight_packs_wheat\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fences = 3.2\n    used_wood = 6.5\n\n    remaining_length = total_length - (used_fences + used_wood)\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [2, 7, 8]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    # Ellen gives away 12 sweets\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny - 12))\n\n    # Lenny gives away 12 sweets\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny - 12))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    # Total number of sweets\n    total_sweets = solutions[ellen] + solutions[lenny]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # Length of the train in meters\n    tunnel_length = 500  # Length of the tunnel in meters\n    train_speed = 10  # Speed of the train in meters per second\n    \n    # The time it takes for the train to completely pass through the tunnel\n    # is the time needed for the train's front to reach the end of the tunnel\n    # after entering it, which is the sum of the train length and tunnel\n    # length, divided by the speed of the train.\n    total_distance = train_length + tunnel_length\n    time_to_pass = total_distance / train_speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_bought = 2\n    total_cost_pence = cost_per_pound * pounds_bought\n    pounds_in_pence = 100  # 1 pound is 100 pence\n\n    change = pounds_in_pence - total_cost_pence\n\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 0\n    while True:\n        # Increment n until all conditions are met\n        if isprime(n) and isprime(n + 4) and isprime(n + 6) and isprime(n + 132) and isprime(n + 250):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # The smallest difference will be when the larger number has the larger digits at the front\n    # and the smaller number has the smaller digits at the front.\n    # We should also avoid putting 0 at the beginning of a number as that would not be a valid 5-digit number.\n    # Larger number = 98765 and smaller number = 01234 is not valid.\n    # Thus, we put the smallest non-zero digit in the front of the smaller number:\n    # Larger number = 98765 and smaller number = 10234 is a valid combination.\n\n    larger_number = int(''.join(map(str, sorted([9, 8, 7, 6, 5], reverse=True))))\n    smaller_number = int(''.join(map(str, [1, 0, 2, 3, 4])))\n\n    # Calculate the difference\n    difference = larger_number - smaller_number\n\n    return difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "import itertools\n\ndef solution():\n    total_presents = 7      # Total number of different presents\n    total_children = 5      # Total number of children\n\n    # Richard wants the toy car (R1) or the puzzle (R2). Kevin wants the toy car (K1) or the calculator (K2).\n    # Presents other than the toy car, the puzzle, or the calculator are marked as \"Other\"\n    presents = ['R1', 'R2', 'K1', 'K2'] + ['Other'] * (total_presents - 3)\n\n    # Count all possible permutations of presents, while children are fixed\n    all_possible_permutations = list(itertools.permutations(presents))\n\n    # Filter out permutations where Richard and Kevin both don't get what they want\n    valid_permutations = [perm for perm in all_possible_permutations if ('R1' in perm[:2] or 'R2' in perm[:2]) and ('K1' in perm[:2] or 'K2' in perm[:2])]\n\n    # Calculate the number of ways Amy can give away 5 out of the 7 presents to her children\n    ways_to_give_presents = len(valid_permutations) // (total_children * (total_children - 1))\n    \n    return ways_to_give_presents\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rabbit1, rabbit2, rabbit3 = symbols('rabbit1 rabbit2 rabbit3')\n\n    # Equations based on the problem statement\n    equation1 = Eq(rabbit2, rabbit1 + 2)\n    equation2 = Eq(rabbit3, rabbit2 - 0.80) # 80p is £0.80\n    equation3 = Eq(rabbit1 + rabbit2 + rabbit3, 19.70)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (rabbit1, rabbit2, rabbit3))\n\n    # Returning the cost of the first rabbit\n    return solutions[rabbit1]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    sugar_concentration = 0.15\n    \n    sugar_amount = total_weight * sugar_concentration\n\n    return sugar_amount\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10  # time in hours they meet\n\n    # The relative speed at which Jack and Rose are approaching each other\n    relative_speed = jack_speed - rose_speed  \n\n    # The distance they cover when meeting each other after 10 hours\n    # is equal to the relative speed times the time they travel.\n    distance = relative_speed * time\n\n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((4*i**2 - 4*(i-1)**2) for i in range(1, 1011))\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 4.6 * x - 35 / 100 - 0.57\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    max_num = 5000\n    multiple_of_7 = max_num // 7\n    multiple_of_13 = max_num // 13\n    multiple_of_7_and_13 = max_num // (7 * 13)\n\n    ans = multiple_of_7 + multiple_of_13 - multiple_of_7_and_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Calculate the total number of permutations of 'SUCCESS'\n    total_permutations = factorial(len('SUCCESS')) // (factorial(3) * factorial(2) * factorial(2))\n\n    # Calculate permutations where S's are together\n    # Treat 'SSS' as one entity, so 'SUCCES' (SSS as one) has 6 characters\n    s_together_permutations = factorial(6) // (factorial(2) * factorial(2)) * factorial(3)\n\n    # Subtract the number of invalid permutations where S's are together from total\n    valid_permutations = total_permutations - s_together_permutations\n\n    return valid_permutations\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    first_50k_tax = 0.06 * 50000\n    remaining_income = 120000 - 50000\n    total_tax = first_50k_tax + remaining_income * (0.06 + T/100)\n\n    equation = Eq(total_tax, 10000)\n    T_value = solve(equation, T)[0]\n\n    return T_value\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    number_of_girls = 333\n    number_of_teachers = 36\n    \n    number_of_boys = total_pupils - number_of_girls\n    difference = number_of_boys - number_of_teachers\n    \n    return difference\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Let x be the number of days David worked alone\n    # Then Emma worked (14 - x) days\n    # In one day, David can complete 1/10 of the work and Emma can complete 1/18 of the work\n    # David's work + Emma's work = 1 (the whole journal)\n    # (x/10) + ((14 - x)/18) = 1\n\n    # Solve for x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x/10) + ((14 - x)/18), 1)\n    days_david_worked = solve(equation, x)\n    \n    # Emma's working days are total days minus the number of days David worked\n    days_emma_worked = 14 - days_david_worked[0]\n    return days_emma_worked\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    shirts_bought = 138\n    money_left = 56\n    shirts_total = 145\n\n    shirt_price = money_left / (shirts_total - shirts_bought)\n    total_money = shirt_price * shirts_total\n\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    sum_integers = n * (n + 1) // 2\n    ans = sum_cubes / sum_integers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    total_numbers = 14\n    average = 119\n    # In an arithmetic sequence the average is in the middle\n    # So for 14 numbers, the middle two numbers average to 119\n    # Therefore, the 7th number (middle left) is one step below average\n    # Each step in an even sequence is 2\n    middle_left_number = average - 1\n    # Smallest number is 6 steps below the middle left number\n    smallest_number = middle_left_number - 6 * 2\n\n    return smallest_number\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f'1{a}2{a}3{a}4{a}5{a}')\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # Range of heights from shortest to tallest: 124 - 132 cm (9 possible heights)\n    possible_heights = 132 - 124 + 1\n\n    # At least 4 students with the same height.\n    min_students_same_height = 4\n\n    # Calculate the minimum number of students so that at least 4 students will have the same height.\n    # This is done by multiplying the number of possible heights by 3 (one less than min_students_same_height),\n    # because we need to force the 4th student to match the height of one of the other students.\n    class_size = (min_students_same_height - 1) * possible_heights + 1\n\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    old_pay_per_hour = 6.50\n    increase_percentage = 12 / 100\n    new_pay_per_hour = old_pay_per_hour + (old_pay_per_hour * increase_percentage)\n    return new_pay_per_hour\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount_in_pence = 126  # £1.26 is equivalent to 126 pence\n\n    # Let's denote the number of 2p coins as 'n' and number of 5p coins also as 'n'\n    # Hence, total pence will be 2n + 5n = 7n\n    # We need to find the value of 'n' such that 7n = 126\n\n    n = total_amount_in_pence / 7  # Solve for n\n\n    # Since there are an equal number of 2p and 5p coins, total number of coins is 2n\n    total_coins = 2 * n\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Since we want the ones digit of 3^2009, we will look at the pattern of the ones digit as the powers of 3 increase.\n    # The pattern repeats every 4 powers for 3, which means the ones digit of 3^2009 is the same as 3^(2009%4)\n    # since 2009 % 4 = 1, the ones digit of 3^2009 is the same as the ones digit of 3^1 which is 3\n    \n    return 3**2009 % 10\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # Let's assume the total number of people at the party is p.\n    # According to the problem:\n    # (2/5)p are adults, so (3/5)p are not adults.\n    # Among those who are not adults, (5/9)(3/5)p are boys and the rest are girls.\n    # The number of girls is given as 36, which is (4/9)(3/5)p\n    # So, we can set up the equation (4/9)(3/5)p = 36 and solve for p.\n    \n    # calculating the fraction of the people at the party who are girls\n    fraction_girls = (4/9) * (3/5) # (4/9 of the remaining 3/5 of the people)\n    \n    # now we can find the total number of people (p) at the party\n    p = 36 / fraction_girls\n    \n    return int(p)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 0\n    while True:\n        num += 2  # Ensure the number is even\n        if num % 5 == 0 and (num**0.5).is_integer():\n            # Check if it is a multiple of 5 and a perfect square\n            return int(num)\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25  # 25% discount\n    senior_discount = 0.20  # 20% discount\n\n    child_ticket_cost = 30  # cost of a child's ticket with discount\n    # Calculate the original price of adult ticket (base price before discount)\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    # Calculate the cost of a senior's ticket with discount\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n    \n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from sympy import symbols, expand\n\ndef solution():\n    # The generating function for a kid is (1 + x + x^2 + ... + x^20)\n    # Since we have 4 kids, the generating function for the problem is the\n    # 4th power of the generating function for a kid.\n    x = symbols('x')\n    generating_function = (1 + x + x**2 + x**3 + x**4 + x**5 + x**6 + x**7 + x**8 + x**9 + x**10 +\n                           x**11 + x**12 + x**13 + x**14 + x**15 + x**16 + x**17 + x**18 + x**19 + x**20)**4\n    \n    # Expand the function and get the coefficient of x^20\n    expanded_function = expand(generating_function)\n    ans = expanded_function.coeff(x**20)\n\n    return ans\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men1 = 3\n    days1 = 30\n    men2 = 2\n\n    work_done = men1 * days1\n    days2 = work_done / men2\n\n    return days2\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n\n    will_age_now = solve(equation, will_now)\n\n    return will_age_now[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n    # Using the law of addition for independent events\n    ans = trains + cars + boats\n    return ans\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    number_of_days = total_pages // pages_per_day\n    if total_pages % pages_per_day != 0:\n        number_of_days += 1\n\n    return number_of_days\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    books = 30\n    kids = 5\n    # Each kid gets at least two books\n    books -= 2 * kids\n    \n    # Calculate combinations with repetition\n    ans = comb(books + kids - 1, kids - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    ans = 6846 * 8\n    return ans\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Each cut creates an additional section.\n    # To divide the wood into 5 sections, Rachel needs 4 cuts.\n    # If she needs 12 minutes to make 4 cuts, then she needs 3 minutes per cut.\n    time_per_cut = 12 / 4\n\n    # If her cutting speed remains the same, and she needs to cut the piece of wood 5 times,\n    # the total time would be time_per_cut * number_of_cuts\n    number_of_cuts = 5\n    total_time = time_per_cut * number_of_cuts\n\n    return total_time\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 40/100 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup = solutions[mike] + solutions[mason] + solutions[chewy]\n\n    return total_soup / 1000  # convert from ml to litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    initial_amount = 1000\n    interest_rate = 0.06\n    years = 2\n    \n    balance = initial_amount * ((1 + interest_rate) ** years)\n    \n    return round(balance, 4)\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    operators = ['+', '-', '*', '/']\n    max_sum = None\n    second_largest_simple_form = None\n\n    for ops in permutations(operators):\n        # Unpack operators for current permutation\n        op1, op2, op3, op4 = ops\n        \n        # Calculate the sum of expressions with the current permutation of operators\n        expr1 = eval(f'Fraction(1, 2) {op1} Fraction(1, 9)')\n        expr2 = eval(f'Fraction(1, 3) {op2} Fraction(1, 8)')\n        expr3 = eval(f'Fraction(1, 4) {op3} Fraction(1, 7)')\n        expr4 = eval(f'Fraction(1, 5) {op4} Fraction(1, 6)')\n        \n        current_sum = expr1 + expr2 + expr3 + expr4\n        \n        # Keep track of the maximum sum and the second largest expression\n        if max_sum is None or current_sum > max_sum:\n            max_sum = current_sum\n            # Sort the expressions and get the second largest in its simplest form\n            sorted_expr = sorted([expr1, expr2, expr3, expr4])\n            second_largest = sorted_expr[-2]\n            second_largest_simple_form = (second_largest.numerator, second_largest.denominator)\n\n    # Get the value of A + B\n    A, B = second_largest_simple_form\n    ans = A + B\n    return ans\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n    \n    num_trees = (road_length // interval) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one jug (j) and one cup (c)\n    j, c = symbols('j c')\n\n    # Set up equations based on the problem statement\n    equation1 = Eq(4 * j + 5 * c, 85)\n    equation2 = Eq(2 * j + 2 * c, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # Available coin denominations in pence are 1, 2, 5, 10, 20, 50, 100 (1 pound), 200 (2 pounds)\n    # Since Susan's bus fare is exactly 44 pence, we start with the highest denomination she could use\n    # which is less than 44 pence, to minimize the number of coins.\n\n    # She can't use a 50 pence coin since her fare is less than that.\n    # So, we start with a 20 pence coin.\n    remaining_fare = 44\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    num_coins = 0\n\n    for coin in coins:\n        while remaining_fare >= coin:\n            remaining_fare -= coin\n            num_coins += 1\n\n    return num_coins\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum(x if x % 2 == 0 else -x for x in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    left = 20.35\n    initial_amount = spent + left\n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    total_points = 12\n    right_angle_combinations = 0\n\n    # A right-angled triangle can be formed if one side is the diameter of the circle.\n    # There are 12 options for the vertex opposite the diameter, and each option can form a different right triangle.\n    # Therefore, the number of right-angle combinations is simply the number of points, because every point can be the vertex opposite the diameter once.\n\n    right_angle_combinations = total_points\n\n    return right_angle_combinations\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Known values from the problem statement\n    tenth_term = 23\n    tenth_position = 10\n    fifteenth_term = 38\n    fifteenth_position = 15\n    twelfth_position = 12\n\n    # Find the common difference\n    common_difference = (fifteenth_term - tenth_term) / (fifteenth_position - tenth_position)\n    \n    # Calculate the 12th term using the arithmetic sequence formula:\n    # nth_term = first_term + (n-1) * common_difference\n    # We find the first term using the 10th position as a reference\n    first_term = tenth_term - (tenth_position - 1) * common_difference\n    \n    # Now find the 12th term\n    twelfth_term = first_term + (twelfth_position - 1) * common_difference\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    def nth_term_num(n):\n        return n\n    \n    def nth_term_denom(n):\n        if n == 1:\n            return 1 * 2\n        return (3*n - 3) * (3*n - 2)\n    \n    sum_series = 0\n    for n in range(1, 8):\n        sum_series += nth_term_num(n) / nth_term_denom(n)\n    \n    # Adding the last term separately\n    sum_series += 1 / 29\n    \n    return sum_series\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    class_a = 24\n    class_b = 36\n    class_c = 42\n\n    # Find the greatest common divisor of class_a, class_b, and class_c\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum(4 * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_lunch_cost = 4.36\n    total_days = 5\n\n    total_cost = children * daily_lunch_cost * total_days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    # Let x be the number of correct answers, y be the number of wrong answers\n    # Each correct answer gives 5 points and each wrong answer loses 3 points.\n    # Since there are 20 questions and Justin answers all the questions,\n    # x + y = 20\n    # For each correct answer, Justin gets 5 points, for each wrong answer he loses 3 points:\n    # 5x - 3y = 76\n    # Now we use the first equation to express y in terms of x:\n    # y = 20 - x\n    # Substitute y in the second equation:\n    # 5x - 3(20 - x) = 76\n    # Solve for x:\n    x = (76 + 3 * 20) // (5 + 3)\n\n    return x\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    ans = (3/8) * 16\n    return ans\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    marked_price = 1.20 * cost_price\n    selling_price = 0.90 * marked_price\n    profit = Eq(selling_price - cost_price, 120)\n    cost_price_value = solve(profit, cost_price)\n    \n    return cost_price_value[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5 / 8) * total_sheep\n    white_sheep = (1 / 4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    total_people = 38\n\n    total_cost = cost_per_person * total_people\n\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks:\n    first_case = factorial(4)\n\n    # For two different colored pairs of socks:\n    second_case = factorial(4) / (factorial(2) * factorial(2))\n\n    # The numbers are different because in the first case, each sock is unique,\n    # leading to a higher number of arrangements. In the second case, the pairs\n    # are not unique and this repetition decreases the number of arrangements.\n    \n    return first_case, second_case\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10): # 'a' cannot be zero as it's the leftmost digit\n        for b in range(0, 10):\n            if int(f\"{a}{b}\") + int(f\"{b}{a}\") + b == int(f\"{a}{a}{b}\"):\n                return a + b\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Rational\n\n    x = symbols('x')\n    inequality = ((x + 3)/(2 * x + 5)) > Rational(505, 1000)\n    solution_set = solve(inequality, x)\n\n    # Largest integer less than the solution x < 47.5\n    ans = int(solution_set[0].evalf()) - 1\n    return ans\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    ans = 9 * 59\n    return ans\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    # There are 4 people. Each person shakes hands with everyone else once.\n    # Total number of handshake combinations can be calculated using\n    # n*(n-1)/2, where n = number of people\n    num_people = 4\n    num_handshakes = num_people * (num_people - 1) // 2\n    return num_handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    return comb(10, 3)\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    total_sweets = andre + beth\n    after_addition = Eq(total_sweets, 24)\n    after_gift = Eq(andre + 4, beth + 4 + 6)\n    \n    solutions = solve((after_addition, after_gift), (andre, beth))\n    \n    return solutions[beth]\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # The total number of apples that Anthea needs to make sure is left after her turn \n    # is a multiple of 4 (1+3, 2+2, 3+1 - this way Ben can only take 1 to 3 apples, \n    # and Anthea can always leave a multiple of 4 after her turn again).\n    # To get a multiple of 4 when there are 18 apples, Anthea should take 2 apples.\n    # That will leave 16 apples, which is a multiple of 4, allowing her to win at the end of the game.\n    return 2\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the mass of the table and chair\n    table, chair = symbols('table chair')\n\n    # Equation representing total mass of tables equal to total mass of chairs\n    eq1 = Eq(3 * table, 4 * chair)\n\n    # Equation representing the mass relationship between table and chair\n    eq2 = Eq(table, chair + 2)\n\n    # Solving the equations to find the mass of the table\n    solved_values = solve((eq1, eq2), (table, chair))\n\n    return solved_values[table]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    import math\n    # Judy can either stand at the start or end, so 2 ways for Judy\n    judy_options = 2\n    \n    # The remaining 5 friends can stand in any order, so 5! ways for them\n    friends_permutations = math.factorial(5)\n    \n    # Total ways = ways for Judy * ways for friends\n    total_ways = judy_options * friends_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'andre' be the number of sweets Andre has now\n    # Let 'beth' be the number of sweets Beth has now\n    andre, beth = symbols('andre beth')\n\n    # Equation representing the total sweets they both had initially\n    equation1 = Eq(andre + beth, 24)\n\n    # Equation representing the sweets they have after being given more sweets\n    # Andre has 6 more sweets than Beth\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # We return the number of sweets Beth has now (beth + 4)\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_of_6_bars = 3.18\n    cost_per_bar = cost_of_6_bars / 6\n    cost_of_5_bars = cost_per_bar * 5\n    return cost_of_5_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # Let x be the original position of the Ferrari driver\n    # After overtaking 5 cars, the Ferrari driver finished in second place\n    # This means the Ferrari driver's original position was x - 5 (since he overtook 5 cars)\n    # Since the Ferrari driver finished in second, we have the equation:\n    # x - 5 = 2 => x = 2 + 5 => x = 7\n    # The number of cars in the race is the Ferrari's original place since he started last\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    answer = 2\n    number = (answer * 12) + 6\n    return number\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    elder_math, younger_math, elder_english, younger_english = symbols('elder_math younger_math elder_english younger_english')\n\n    # Equations based on the problem statement\n    equation1 = Eq(elder_math, younger_math + 10)\n    equation2 = Eq(younger_english, younger_math + 4)\n    equation3 = Eq(elder_math + elder_english, 88)\n    equation4 = Eq(younger_math, younger_english - 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (elder_math, younger_math, elder_english, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_sum = 4 * 130\n    remaining_sum = 3 * 110\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for the given time intervals\n    first_light_interval = 1 * 60  # 1 minute in seconds\n    second_light_interval = 1.5 * 60  # 1.5 minutes in seconds\n    \n    # Find the least common multiple of the first two lights to synchronize them\n    lcm_two_lights = lcm(first_light_interval, int(second_light_interval))\n\n    # Since we need to find the interval for the third light and all three lights need to turn green \n    # every 9 minutes (which is 540 seconds), we find the lcm with the 9 minutes interval\n    ans = lcm(lcm_two_lights, 540)\n    \n    return ans // 3  # Divided by 3 to get the interval of the third light only\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # To ensure a victory, Leo must force Mia into a position where,\n    # no matter what Mia does, Leo can always take the last apple.\n    # If there are n apples and Leo can leave a multiple of 3\n    # (i.e., after his turn, the number of apples is divisible by 3),\n    # then Mia cannot win, because:\n    # - If Mia takes 1 apple, Leo can take 2.\n    # - If Mia takes 2 apples, Leo can take 1.\n    # This way, Leo can always maintain the total number of remaining\n    # apples as a multiple of 3, eventually forcing Mia to take the\n    # second-to-last apple.\n    \n    # Since there are 14 apples initially, Leo needs to take away apples\n    # such that 14 - x is divisible by 3, where x is the number of apples Leo takes.\n    for x in range(1, 3): # Leo can take 1 or 2 apples\n        if (14 - x) % 3 == 0:\n            return x\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let x be the value of one silver spoon\n    # Let y be the value of one gold ring\n    # Nick's 12 silver spoons have three quarters the value of Pilpha's 6 gold rings\n    # 12x = (3/4) * 6y\n    # Simplify the equation: 16x = 6y\n    # We want to find how many silver spoons have the same value as 3 gold rings\n    # Let n be the number of silver spoons that have the same value as 3 gold rings\n    # nx = 3y\n    # Now we can combine the two equations:\n    # 16x = 6y && nx = 3y\n    # Dividing the second equation by the first equation, we get:\n    # (nx) / (16x) = (3y) / (6y)\n    # Simplifying we get: n / 16 = 3 / 6\n    # Simplify further: n / 16 = 1 / 2\n    # Solving for n: n = 16 / 2\n    # n = 8\n\n    n = 16 // 2\n    return n\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    boy_excess = 55\n    total_students = 0\n\n    for layer in range(1, 100):  # Assuming a maximum of 100 layers (arbitrary large number)\n        boys = layer * 4\n        if layer == 1:  # The innermost layer\n            boys += 1   # Adding the innermost boy\n        girls = (layer - 1) * 4\n\n        diff = boys - girls\n\n        if diff == boy_excess:\n            side_length = 1 + 2 * (layer - 1)  # side length of the square\n            total_students = side_length ** 2  # total students in the square\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let wm be the number of whiteboard markers and pb be the number of paintbrushes.\n    wm, pb = symbols('wm pb')\n\n    # Each whiteboard marker costs $3, each paintbrush costs $1, and the teacher paid $28 in all.\n    # There are a total of 12 items (paintbrushes and whiteboard markers).\n    eq1 = Eq(3*wm + pb, 28)\n    eq2 = Eq(wm + pb, 12)\n\n    # Solve the system of equations.\n    solution = solve((eq1, eq2), (wm, pb))\n\n    return solution[wm]\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female teachers\n    f = symbols('f')\n    total_weight = 65 * (3 + f)                   # Total weight of all teachers\n    male_weight = 3 * 75                          # Total weight of male teachers\n    female_weight = 60 * f                        # Total weight of female teachers\n\n    # Equation based on the total weight of teachers\n    equation = Eq(total_weight, male_weight + female_weight)\n\n    # Solve for the number of female teachers\n    num_female_teachers = solve(equation, f)[0]\n\n    return num_female_teachers\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    from_front = 5\n    from_back = 7\n    from_left = 2\n    from_right = 4\n\n    total_rows = from_front + from_back - 1\n    total_columns = from_left + from_right - 1\n\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from math import sqrt\n\n    # Decompose 33 and 55 into prime factors\n    # 33 = 3 * 11\n    # 55 = 5 * 11\n    # So, the product 33 * 55 = 3 * 11 * 5 * 11\n    # To make the product a perfect square,\n    # we need to balance the power of primes.\n    # We have twice 11, so we need another 3 and 5.\n\n    # The smallest m that balances the powers is 3 * 5 = 15.\n    # 33 * 55 * m = (3 * 11) * (5 * 11) * (3 * 5)\n    # m = 3 * 5 = 15, which gives us the square of (3 * 5 * 11)²\n    \n    # Check the result just for confirmation\n    m = 3 * 5\n    product = 33 * 55 * m\n    if sqrt(product) == int(sqrt(product)):\n        return m\n    else:\n        raise Exception(\"Calculated m does not result in a perfect square product.\")\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    count = 0\n    for x1 in range(2, 7):\n        for x2 in range(2, 7):\n            x3 = 8 - x1 - x2\n            if x3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    import math\n    # Since Star must be the first runner, we only need to arrange the remaining 4 runners.\n    # There are 4! ways to arrange 4 people.\n    ans = math.factorial(4)\n    return ans\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # The three numbers can be denoted as:\n    # ABCD (increasing order), DCBA (decreasing order) and a third MNPQ using the same digits.\n    # Their sum is 26352.\n    #\n    # Since the numbers are four digits and use the same digits in different permutations,\n    # the sum of each place should be a multiple of (1+1+1)*2 = 6\n    \n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    if A < B < C < D: # Digits increasing from left to right\n                        ABCD = A*1000 + B*100 + C*10 + D\n                        DCBA = D*1000 + C*100 + B*10 + A\n                        if (A+D) * 2 % 6 != 0 or (B+C) * 2 % 6 != 0:  # Checking the sum of each place\n                            continue  # This is not a correct set, so skip\n\n                        # The sum of the numbers ABCD and DCBA doesn't include the third number,\n                        # so for the sum to be 26352, the remaining number MNPQ has to be 26352\n                        # minus the sum of ABCD and DCBA\n                        MNPQ = 26352 - (ABCD + DCBA)\n\n                        # Checking if MNPQ uses the same digits.\n                        # Convert to a string to check if each digit of MNPQ is in 'ABCD' \n                        if all(str(digit) in str(ABCD) for digit in [int(char) for char in str(MNPQ)]):\n                            return min(ABCD, DCBA, MNPQ)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # The pattern involves multiplying and then\n    # adding a certain number derived from the operands\n    # Let's deduce the pattern using the given examples\n\n    # Analyzing the pattern:\n    # 2 * 4 + (2 + 4)^2 = 8 + 36 = 44\n    # 5 * 7 + (5 + 7)^2 = 35 + 144 = 179 (Error in the example given, it should be 179, not 104)\n    # 1 * 5 + (1 + 5)^2 = 5 + 36 = 41 (Error in the example given, it should be 41, not 28)\n    # 7 * 10 + (7 + 10)^2 = 70 + 289 = 359 (Error in the example given, it should be 359, not 146)\n\n    # Assuming the correct pattern is multiplication and then adding the square of the sum\n    # We compute for 6 otimes 12\n\n    a = 6\n    b = 12\n\n    result = a * b + (a + b) ** 2\n    return result\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # Each cut creates one additional segment\n    # Therefore, for 31 segments, we need 30 cuts\n    cuts_for_31_segments = 31 - 1\n    time_for_31_segments = 60  # in minutes\n\n    # The number of cuts needed for 50 segments\n    cuts_for_50_segments = 50 - 1\n\n    # Time per cut is the same for both cases\n    time_per_cut = time_for_31_segments / cuts_for_31_segments\n\n    # Calculate the total time for 50 segments\n    time_for_50_segments = time_per_cut * cuts_for_50_segments\n\n    return time_for_50_segments\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Using the Chinese Remainder Theorem to solve the system of modular equations\n    # x ≡ 1 (mod 3), x ≡ 3 (mod 5), x ≡ 5 (mod 7)\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    \n    # Determine the smallest non-negative solution\n    ans, _ = solve_congruence(*congruences)\n    \n    # Find a solution within the given range\n    while ans < 100:\n        ans += 3 * 5 * 7  # The product of the moduli\n    \n    return ans if 100 <= ans < 200 else None\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = 210 / (1 - 0.3)\n    return number\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003\n    while True:\n        if str(year) == str(year)[::-1]:\n            break\n        else:\n            year += 1\n    return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of flowers Candy and Nancy have now\n    candy_now, nancy_now = symbols('candy_now nancy_now')\n\n    # At the beginning, Candy had 11 flowers, and Nancy had 9 flowers.\n    candy_begin = 11\n    nancy_begin = 9\n\n    # After Candy gave some flowers to Nancy, Nancy has 8 more flowers than Candy.\n    equation1 = Eq(nancy_now, candy_now + 8)\n\n    # The total number of flowers remains the same before and after the exchange.\n    equation2 = Eq(candy_now + nancy_now, candy_begin + nancy_begin)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (candy_now, nancy_now))\n\n    return solutions[candy_now]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    total_ways = factorial(len(word)) // denominator\n    return total_ways\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45 / 100\n    price_increase = original_price * increase_percentage\n    new_price = original_price + price_increase\n    return new_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60  # Money from Mum in pence\n    money_from_dad = 40  # Money from Dad in pence\n\n    # Calculate the total money for one day\n    total_money_one_day = money_from_mum + money_from_dad\n    \n    # Multiply by 3 for Monday, Tuesday, and Wednesday\n    total_money = total_money_one_day * 3 \n\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i // 24 == 36 and i % 24 == 0:\n            return i\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temperature = -5\n    midday_temperature = 17\n    overall_change = midday_temperature - midnight_temperature\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    addend = 1\n    while term <= 50:\n        addend += 1\n        term += addend\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_price = 43 / 100  # Convert pence to pounds\n    booklet_price = 1.85\n    total_cost = (3 * pen_price) + (4 * booklet_price)\n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # As this is a knowledge-based question and not a calculation-based,\n    # the solution will be to directly return the population in figures\n    # According to the knowledge cutoff in 2023, the population of St. Petersburg is approx 5.5 million\n    # Please note that the exact figure may vary, and such data can be outdated quickly.\n    # Thus, the answer provided is based on available information up to early 2023.\n    # For the most accurate and current population figure, an official or updated source should be consulted.\n    ans = 5500000\n    return ans\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all 3-digit numbers\n        str_num = str(i)\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    # Thousands digit can only be from 5 to 9 inclusive\n    for thousands in range(5, 10):\n        # Loop through possible digits for hundreds, tens, and ones place\n        for hundreds in range(1, 10):\n            for tens in range(1, 10):\n                for ones in range(1, 10):\n                    # Check if thousands digit is divisible by the other digits\n                    if thousands % hundreds == 0 and thousands % tens == 0 and thousands % ones == 0:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 10))  # List of primes less than 10 should definitely include the third prime\n    third_prime = primes[2]           # Indexing starts from 0, thus index 2 will give the third element\n\n    return third_prime\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the tilde symbol as a variable\n    tilde = symbols('tilde')\n\n    # Create an equation based on the given expression\n    equation = Eq(((tilde + 7) / 9), 9)\n\n    # Solve the equation\n    solution = solve(equation, tilde)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # The 4th child is opposite the 22nd child, \n    # which means the 22nd child is halfway around the circle from the 4th.\n    # Therefore, the total number of children is twice the difference between the 22nd and 4th child.\n\n    number_of_children = 2 * (22 - 4)\n    return number_of_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    difference = 4\n    num_weeks = 10\n\n    total_coins = (num_weeks / 2) * (2 * first_term + (num_weeks - 1) * difference)\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily = 24\n    gina = lily // 2\n    fiona = gina // 4\n    total_dresses = gina + fiona\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    amount = 37100\n    \n    years = 0\n    current_amount = principal\n    \n    while current_amount < amount:\n        current_amount += current_amount * rate\n        years += 1\n    \n    ans = years\n    \n    return ans if ans != 5 else \"right\"\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_one_quarter_full = 250\n    mass_three_quarter_full = 350\n\n    mass_half_full = (mass_one_quarter_full + mass_three_quarter_full) / 2\n    mass_empty_jar = mass_half_full - (mass_three_quarter_full - mass_one_quarter_full) / 2\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    empty_bottle_fraction = 1/7\n    empty_bottle_capacity = 9.1\n    cup_capacity_ml = 350\n    cups_number = 4\n\n    # Calculate the amount of soda used to fill the part of the bottle\n    soda_for_bottle = empty_bottle_capacity * empty_bottle_fraction\n    \n    # Calculate the total amount of soda used to fill the cups (in liters)\n    # 1 liter = 1000 milliliters\n    soda_for_cups = (cup_capacity_ml * cups_number) / 1000 \n    \n    # Calculate the remaining soda in the bucket in liters\n    remaining_soda = total_soda_liters - (soda_for_bottle + soda_for_cups)\n    \n    return remaining_soda\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the father's and son's current age\n    father_age, son_age = symbols('father_age son_age')\n    \n    # Equation for the ages 6 years ago\n    equation_age_6_years_ago = Eq(father_age - 6, 5 * (son_age - 6))\n    \n    # Equation for the sum of their ages today\n    equation_sum_of_ages = Eq(father_age + son_age, 78)\n    \n    # Solve the system of equations\n    solutions = solve((equation_age_6_years_ago, equation_sum_of_ages), (father_age, son_age))\n    \n    # Return the father's current age\n    return solutions[father_age]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import pi, sqrt\n\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    A = 0.08  # amplitude in meters\n    x = 0.04  # displacement from equilibrium in meters\n\n    # Energy of the oscillator (total mechanical energy in a simple harmonic oscillator)\n    E = (1/2) * k * A**2\n\n    # Speed of the block at x from equilibrium (using conservation of energy)\n    # Total mechanical energy E is constant and equal to the sum of kinetic and potential energy\n    # E = (1/2) * k * x**2 + (1/2) * m * v**2\n    # Solve for v: v = sqrt((E - (1/2) * k * x**2) * 2 / m)\n    v = sqrt((E - (1/2) * k * x**2) * 2 / m)\n\n    return (E, v)\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the scores of A, B, C, D, and E\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Given conditions\n    equation1 = Eq((A + B + C) / 3, 95)  # Average score of A, B, C\n    equation2 = Eq((B + C + D) / 3, 94)  # Average score of B, C, D\n    equation3 = Eq(E, 96)                # E's score\n    equation4 = Eq(B, D)                 # B and D have the same score\n    # Additional condition due to A having the highest score\n    # and all scores are above 91:\n    # A's score must be higher than E's, which is the second-highest at 96\n    equation5 = Eq(A > E)                 \n    # Assume all scores are integers\n    equation6 = Eq(A, 97)\n    equation7 = Eq(B - (B - A).as_nonnegative(), 96) # B's score is less than A's\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), (A, B, C, D, E))\n\n    return solutions[D]\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # Given that taking 1 or 2 marbles leaves a multiple of 3 for the second player,\n    # to ensure victory, the first player needs to always leave a multiple of 3 marbles for the second player.\n    # Hence, the first player should take away 1 marble.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let f be the number of female teachers\n    # Average weight of all teachers (male and female) is 65\n    # There are 3 male teachers with an average weight of 75\n    # Average weight of female teachers is 60\n\n    # Total weight of male teachers\n    total_male_weight = 3 * 75\n\n    # The total weight of the teachers can be represented as\n    # Total weight = Total male weight + Total female weight\n    # To find the total number of teachers n, we can use the formula:\n    # Total weight = Average weight * Total number of teachers\n    # And for females:\n    # Total female weight = Average female weight * Number of female teachers\n\n    # From the information given:\n    # 65n = total_male_weight + 60f\n    # But n = 3 (male teachers) + f (female teachers)\n    # Therefore, substituting n with 3 + f we get:\n    # 65(3 + f) = total_male_weight + 60f\n    # 195 + 65f = total_male_weight + 60f\n    # 5f = total_male_weight - 195\n    # Solve for f\n    f = (total_male_weight - 195) / 5\n\n    return int(f)\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pence = 45 * 100\n    coin_value_pence = 5\n    num_coins = total_pence // coin_value_pence\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    pip_per_minute, bud_per_minute = symbols('pip_per_minute bud_per_minute')\n\n    # Equations based on the problem statement\n    # Total distance run by Pip and Bud in 3 minutes is 540 metres\n    total_distance_eq = Eq(3 * pip_per_minute + 3 * bud_per_minute, 540)\n\n    # Each minute Pip runs 20 metres more than Bud\n    distance_difference_eq = Eq(pip_per_minute, bud_per_minute + 20)\n\n    # Solve the system of equations\n    solutions = solve((total_distance_eq, distance_difference_eq), (pip_per_minute, bud_per_minute))\n\n    # Pip's total distance run in 3 minutes\n    pip_total_distance = 3 * solutions[pip_per_minute]\n\n    return pip_total_distance\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    possibilities = set('0123456789')\n    \n    # Based on 1258, we know none of these digits are in the code\n    possibilities -= set('1258')\n\n    # Based on 5648, we know two of these digits are in the code\n    possible_5648 = set('5648') & possibilities\n\n    # Based on 3628, we know two of these digits are in the code\n    possible_3628 = set('3628') & possibilities\n\n    # Based on 3147, we know two of these digits are in the code\n    possible_3147 = set('3147') & possibilities\n\n    # Based on 5629, we know two of these digits are in the code\n    possible_5629 = set('5629') & possibilities\n\n    # Identifiying the common possible digits from the above sets\n    common_digits = (possible_5648 | possible_3628 | possible_3147 | possible_5629) - set('1258')\n\n    # Since 1258 are all wrong, we filter out any common numbers that are in 1258\n    common_digits -= set('1258')\n    \n    # Now we test combinations where two digits come from 5648 and the remaining from the intersection of the sets\n    for digit1 in possible_5648:\n        for digit2 in possible_5648 - set(digit1):\n            for digit3 in common_digits - set([digit1, digit2]):\n                for digit4 in common_digits - set([digit1, digit2, digit3]):\n                    # The correct combination must satisfy the condition that each of the four tested combinations\n                    # contains exactly two of the chosen digits\n                    if (digit1 in '5648') + (digit2 in '5648') + (digit3 in '5648') + (digit4 in '5648') == 2 and \\\n                       (digit1 in '3628') + (digit2 in '3628') + (digit3 in '3628') + (digit4 in '3628') == 2 and \\\n                       (digit1 in '3147') + (digit2 in '3147') + (digit3 in '3147') + (digit4 in '3147') == 2 and \\\n                       (digit1 in '5629') + (digit2 in '5629') + (digit3 in '5629') + (digit4 in '5629') == 2 and \\\n                       (digit1 not in '1258') and (digit2 not in '1258') and (digit3 not in '1258') and (digit4 not in '1258'):\n                        # If the condition is satisfied, we've found our answer\n                        return ''.join([digit1, digit2, digit3, digit4])\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for a and b\n    a, b = symbols('a b')\n\n    # Given that a and b are square roots of 2023\n    equation1 = Eq(a**2, 2023)\n    equation2 = Eq(b**2, 2023)\n\n    # Solve for a and b\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Extract the non-negative square root values of a and b\n    a_val = max(solutions[0][0], solutions[1][0])\n    b_val = max(solutions[0][1], solutions[1][1])\n    \n    # Calculate the expression a + b - ab\n    ans = a_val + b_val - a_val * b_val\n\n    return ans\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Convert hexadecimal values to decimal\n    value1 = int('2A3', 16)\n    value2 = int('17B', 16)\n\n    # Add the decimal values\n    sum_decimal = value1 + value2\n\n    # Convert the sum back to hexadecimal\n    sum_hex = hex(sum_decimal)[2:].upper()\n\n    return sum_hex\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for number in range(1, 501):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    ans = (25/100) * (30/100) * (40/100) * 300\n    return ans\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of coins in Box B\n    # Then 4x is the original number of coins in Box A\n    a, b, c = symbols('a b c')\n\n    # Set up the equation based on the problem statement\n    # a - 0.06*a + b - 0.2*b = 1220 \n    # c = 1220 / 1.22\n    # a = 4*b\n\n    equation1 = Eq(a - 0.06*a + b - 0.2*b, 1220) # Coins transferred to box C\n    equation2 = Eq(c, 1220 / 1.22)               # 22% more than original number in box C\n    equation3 = Eq(a, 4*b)                       # Box A has 4 times coins than Box B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let initial number of tea bottles be 't' and coffee bottles be 'c'.\n    # According to the problem, 60% of the total are coffee initially.\n    # Which means 40% of the total are tea initially.\n    # So we can say c = 1.5 * t because 60%/40% = 1.5\n    # After she buys more tea, 40% of the total are coffee.\n    # Let's say she bought 'x' number of tea bottles additionally.\n    # So the new total number of tea bottles is t + x.\n    # 40% of total is coffee, which implies 60% of total is tea.\n    # In the new scenario, tea is 60% of the total, so we can say:\n    # 0.6 * (c + t + x) = t + x\n    # But from the first scenario we have c = 1.5 * t, substitute this:\n    # 0.6 * (1.5 * t + t + x) = t + x\n    # Now solve for x in terms of t\n    # 0.6 * (2.5 * t + x) = t + x\n    # 1.5 * t + 0.6 * x = t + x\n    # 0.5 * t = 0.4 * x\n    # x = 1.25 * t\n    # The percentage increase in tea is (x - t) / t * 100%\n    #                          = (1.25 * t - t) / t * 100%\n    #                          = 0.25 * t / t * 100%\n    #                          = 25%\n    return 25\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_sales = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_price_per_flower = total_sales / total_flowers\n    return average_price_per_flower\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    for tricycles in range(25):\n        cars = 24 - tricycles\n        wheels = tricycles * 3 + cars * 4\n        if wheels == 86:\n            return tricycles\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # The times for each individual task are fixed, so we just sum them up\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    # Sum all the times to get the total time required\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n    \n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_pence = 60\n    james_money_pound = 1.10\n    james_money_pence = james_money_pound * 100\n\n    total_money_pence = lewis_money_pence + james_money_pence\n    total_money_pound = total_money_pence / 100\n\n    return total_money_pound\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    letters = 'WINNING'\n    letter_counts = {letter: letters.count(letter) for letter in set(letters)}\n    numerator = factorial(len(letters))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    \n    num_arrangements = numerator // denominator\n    return num_arrangements\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13 - 3*2 + 1):  # Each pile has at least 3 books\n        for x2 in range(3, 13 - x1 - 3 + 1):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:  # Ensure the last pile has at least 3 books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from itertools import permutations\n\n    def count_derangement(n):\n        # Base case\n        if n == 1: return 0\n        if n == 2: return 1\n        \n        # Use the recursive formula for derangements\n        # !n = (n - 1) * (!(n - 1) + !(n - 2))\n        dp = [0]*(n+1)\n        dp[1] = 0\n        dp[2] = 1\n        \n        for i in range(3, n+1):\n            dp[i] = (i-1) * (dp[i-1] + dp[i-2])\n        return dp[n]\n        \n    ans = count_derangement(6)\n    \n    return ans\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # in kilograms\n    final_velocity = 8  # in meters per second\n    time = 4  # in seconds\n    \n    # Using the formula: Force = mass * acceleration\n    # And given the formula for acceleration: acceleration = (final_velocity - initial_velocity) / time\n    # Since the object is initially stationary, initial_velocity = 0 m/s\n    initial_velocity = 0  # in meters per second\n    acceleration = (final_velocity - initial_velocity) / time\n    \n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # this problem is related to the Frobenius coin problem and can be solved using the formula:\n    # largest number = box1 * box2 - box1 - box2, where\n    # box1 and box2 are relatively prime (have no common divisors other than 1)\n    \n    # here box1 = 3 and box2 = 7, which are relatively prime\n    largest_number = 3 * 7 - 3 - 7\n    \n    return largest_number\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n    equation1 = Eq(correct, 3 * incorrect + 12)\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n    \n    solutions = solve((equation1, equation2), (correct, incorrect))\n    \n    return solutions[correct]\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # Let x be the number of lemonade bottles sold at $4 each\n    # Let y be the number of \"1000 Plus\" bottles sold at $7 each\n    \n    # The total number of bottles before sales is 350\n    # The total income from selling bottles is $2012\n    \n    # We want to find the minimum y value that satisfies the conditions\n    # Therefore, we iterate over possible y values, beginning from 0\n    # And calculate the corresponding x value, checking if it's within the 350 bottle limit\n    \n    for y in range(350):\n        income_from_y = 7 * y  # Income from \"1000 Plus\" bottles\n        remaining_income = 2012 - income_from_y  # Remaining income to be covered by lemonade bottles\n        \n        # If the remaining income is divisible by $4 (price per lemonade bottle),\n        # then it's possible to have sold that many lemonade bottles\n        if remaining_income % 4 == 0:\n            x = remaining_income // 4\n            # Check if the sold bottles do not exceed the total of 350 bottles\n            if x + y <= 350:\n                return y  # Return the minimum number of \"1000 Plus\" bottles sold\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Initial ratio values of blue and red pens\n    ratio_blue = 3\n    ratio_red = 5\n    total_initial_pens = 96\n\n    # Initial number of blue and red pens\n    total_ratio = ratio_blue + ratio_red\n    initial_blue = (ratio_blue / total_ratio) * total_initial_pens\n    initial_red = (ratio_red / total_ratio) * total_initial_pens\n\n    # New total number of red pens after adding 60\n    new_red = initial_red + 60\n\n    # Since 40% are blue, we derive 60% are red, which gets us the new total number of pens\n    new_total_pens = new_red / 0.6\n\n    # Find the new number of blue pens from the new total\n    new_blue = new_total_pens * 0.4\n\n    # Calculate the number of blue pens added by subtracting the initial amount from the new amount\n    blue_pens_added = new_blue - initial_blue\n\n    return int(blue_pens_added)\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    total_cost = 2.42 * 32\n    cost_per_person = total_cost / 11\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    num1 = int('45', 7)  # Convert base 7 number to base 10\n    num2 = int('66', 7)  # Convert base 7 number to base 10\n    sum_base10 = num1 + num2  # Perform the addition in base 10\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans  # Convert the sum back to base 7\n        sum_base10 //= 7\n        \n    return ans or '0'\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    # Inclusion-Exclusion Principle: |A ∪ B| = |A| + |B| - |A ∩ B|\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Total matches played by the six students mentioned (A, B, C, D, E, G)\n    matches_played_by_six = 4 + 6 + 2 + 1 + 3 + 5\n    # Each match is played by two students, so to find the total number of\n    # matches, we divide by 2 because each match is counted twice in the sum above.\n    total_matches = matches_played_by_six // 2\n    # Since F has played the same number of matches as the total calculated\n    matches_played_by_f = total_matches\n    return matches_played_by_f\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    from sympy import lcm\n\n    # Find Least Common Multiple (LCM) of the first 20 natural numbers\n    lcm_20 = lcm(list(range(1, 21)))\n\n    # We check all pairs of consecutive numbers to see which pair doesn't divide the LCM\n    for i in range(1, 20):\n        if lcm_20 % i != 0 or lcm_20 % (i + 1) != 0:\n            return i + (i + 1)\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from itertools import combinations, product\n\n    def number_of_factors(n):\n        return len(set(f for i in range(1, int(n ** 0.5) + 1) for f in (i, n // i) if n % i == 0))\n    \n    # Factors for each number from 1 to 13\n    factors = {i: number_of_factors(i) for i in range(1, 14)}\n    \n    # The two students who know the number of factors must have a unique number of factors\n    unique_factors = {k for k, v in factors.items() if list(factors.values()).count(v) == 1}\n    \n    # Alice has an odd number and she sees two students with a unique factor count\n    odd_numbers = [i for i in range(1, 14, 2) if i not in unique_factors]\n    \n    # All possible combinations for the 9 chosen numbers, excluding the numbers with unique number of factors\n    combinations_of_nine = list(combinations([n for n in range(1, 14) if n not in unique_factors], 9))\n    \n    # Find a valid combination where Alice has an odd number and May has a number that is less than Alice by 2 and more than Mark by 1\n    for combo in combinations_of_nine:\n        for alice, may, mark in product(combo, repeat=3):\n            if alice in odd_numbers and alice - may == 2 and may - mark == 1 and \\\n               alice != may and may != mark and mark in combo:\n                diff = set(range(1, 14)).difference(set(combo))\n                return eval('*'.join(map(str, diff)))\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    ans = 628 * 5\n    return ans\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jamie_anne, natasha = symbols('jamie_anne natasha')\n\n    ratio_eq = Eq(jamie_anne, 5/3 * natasha)\n    difference_eq = Eq(jamie_anne - natasha, 18)\n\n    solutions = solve((ratio_eq, difference_eq), (jamie_anne, natasha))\n\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n    \n    return total_stamps\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_numbers = 0\n    for number in range(161, 15*30):  # Because the number must be greater than 160\n        if number % 15 == number // 15:\n            sum_numbers += number\n    return sum_numbers\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    return min_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_one_way = 300  # meters\n    speed_uphill = 10  # m/min\n    speed_downhill = 30  # m/min\n\n    time_uphill = distance_one_way / speed_uphill  # time to go uphill\n    time_downhill = distance_one_way / speed_downhill  # time to go downhill\n    total_time = time_uphill + time_downhill  # total time for round trip\n    total_distance = 2 * distance_one_way  # total distance for round trip\n\n    average_speed = total_distance / total_time  # average speed\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Cici's age when she was born and Linda's age at that time\n    cici_age_at_birth, linda_age_at_birth = symbols('cici_age_at_birth linda_age_at_birth')\n\n    # Linda was 11 years old when Cici was born\n    equation1 = Eq(linda_age_at_birth, cici_age_at_birth + 11)\n\n    # The sum of their ages 4 years later will be 37\n    equation2 = Eq((cici_age_at_birth + 4) + (linda_age_at_birth + 4), 37)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cici_age_at_birth, linda_age_at_birth))\n\n    # Linda's age 3 years later\n    linda_age_3_years_later = solutions[linda_age_at_birth] + 3\n\n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    # Each person can choose from 5 entrances\n    choices_per_person = 5\n    \n    # There are 4 people choosing independently\n    # Thus, the total number of different ways is:\n    total_ways = choices_per_person ** 4\n    \n    return total_ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    peaches = 18\n    peaches_per_bag = 2\n\n    bags_needed = peaches // peaches_per_bag\n\n    return bags_needed\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Calculating the number of fruits to be distributed\n    apples_to_distribute = 226 - 10\n    pears_to_distribute = 352 - 28\n    oranges_to_distribute = 157 - 13\n\n    # Calculating the greatest common divisor\n    common_divisor = gcd(apples_to_distribute, gcd(pears_to_distribute, oranges_to_distribute))\n\n    return common_divisor\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    # Judy has 2 options: to stand at either the first or the last place\n    judy_options = 2\n\n    # There are 5 friends and 5 positions left\n    friends_options = factorial(5)\n\n    # By the multiplication rule, since Judy's position and her friends' arrangements are independent events\n    total_ways = judy_options * friends_options\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    lcm = 12\n    num = 6\n    for i in range(1, lcm + 1):\n        if lcm % i == 0 and num % i == 0 and (i == 1 or i == 2):\n            other_num = lcm // num * i\n            if all(other_num % j != 0 or j <= 2 for j in range(2, other_num)):\n                return other_num\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    current_number = 1\n    digit_count = 0\n    while True:\n        current_str = str(current_number)\n        if digit_count + len(current_str) >= 200:\n            return int(current_str[200 - digit_count - 1])\n        else:\n            digit_count += len(current_str)\n            current_number += 1\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    total_production = total_days * 500\n    points_for_qualified = 5\n    points_lost_unqualified = 18\n    \n    # Let x be the number of qualified TVs\n    x = symbols('x')\n    \n    # if all were qualified, the points would be max points\n    max_points = total_production * points_for_qualified\n    \n    # The factory got 9,931 points, which is max_points - (total_production - x) * points_lost_unqualified\n    equation = Eq((max_points - (total_production - x) * points_lost_unqualified), 9931)\n    \n    qualified_products = solve(equation, x)\n\n    return qualified_products[0]\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    price = cost + 40\n    discount_price = price * 0.8\n    profit = discount_price - cost\n\n    equation = Eq(profit, 12)\n    solutions = solve(equation, cost)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Daniel's current age and his daughter's current age\n    daniel, daughter = symbols('daniel daughter')\n\n    # Create the equations based on the problem\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))  # Two years ago\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))  # Two years from now\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    # Return Daniel's current age\n    return solutions[daniel]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # The distance where April met Baye for the first time\n    distance_met = 1800 - 800\n\n    # Since April runs back at 4 times her speed, the distance April runs \n    # after meeting Baye is 4 times the distance Baye walks in the same amount of time.\n    baye_distance_after_meeting = distance_met / 4\n\n    # Now calculate the distance Baye is away from Q when April gets back to P\n    baye_distance_from_Q = 1800 - (distance_met + baye_distance_after_meeting)\n\n    return baye_distance_from_Q\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Lets suppose the initial number of roosters is x\n    # Then the initial number of hens will be 6x\n    # After increasing, the number of roosters will be x + 60\n    # and the number of hens will be 6x + 60\n    # According to the condition after increasing, number of hens is 4 times of roosters\n    # So we have the equation: 6x + 60 = 4 * (x + 60)\n\n    x = symbols('x')\n    equation = Eq(6*x + 60, 4*(x + 60))\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Total number of chickens before increasing is number of hens and roosters\n    total_chickens_before = solution[0] * 6 + solution[0]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_initial = 7 * 12\n    total_final = 8 * 11\n    eighth_number = total_final - total_initial\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    seq_sum = sum(range(1, 9)) + sum(range(7, 0, -1)) + sum(range(1, 3))\n    return seq_sum\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_sequence = \"538462\"\n    sequence_length = len(recurring_sequence)\n    position = 2021\n    index_in_sequence = (position - 1) % sequence_length\n    digit = recurring_sequence[index_in_sequence]\n    return int(digit)\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    ans = str(list(range(1, 101))).count('9')\n    return ans\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total money be x\n    total_money = symbols('total_money')\n\n    # According to the question\n    equation = Eq((1/3 + 2/5) * total_money, 132)\n\n    # Solve the equation\n    solutions = solve(equation, total_money)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    A, B, C = symbols('A B C')\n\n    # Create the equations according to the problem statement\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Worst case scenario: Drawing all beads of other colors before getting 5 green beads\n    blue_beads = 5\n    white_beads = 6\n    green_beads_needed = 5\n\n    # To ensure 5 green beads, Darrell might have to draw all blue and white beads first\n    beads_to_draw = blue_beads + white_beads + green_beads_needed\n\n    return beads_to_draw\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    max_num = 105\n    divisible_by_5 = max_num // 5\n    divisible_by_7 = max_num // 7\n    divisible_by_5_and_7 = max_num // (5*7)\n    \n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 216):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') // 3:\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 82):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # Since the time taken is directly proportional to the distance (number of floors),\n    # we can use a simple ratio to find the time taken for the eighth floor.\n\n    # Time taken for 3 floors (from 1st to 4th)\n    time_for_3floors = 12\n\n    # We need to find the time for 7 floors (from 1st to 8th)\n    floors_ratio = 7 / 3\n\n    # Calculate the time for 7 floors\n    time_for_7floors = time_for_3floors * floors_ratio\n\n    return time_for_7floors\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    # We can use a stars and bars approach, since the baskets are identical.\n    # We have 6 \"stars\" (apples) and 2 \"bars\" (dividers), for a total of 8 positions.\n    # We need to choose 2 positions from 8 to place the bars.\n    from math import comb\n    \n    stars = 6\n    bars = 2\n    \n    ans = comb(stars + bars, bars)\n\n    return ans\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder - divisor)):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    num_months = 5  # From March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * num_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n    \n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n    \n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio of birds to squirrels\n    birds_to_squirrels_ratio = 8 / 5\n    \n    # Initial total number of birds and squirrels\n    # Can be represented as birds + squirrels = 13 * k, where k is a common factor for both\n    k = 1  # We can assume k=1 for calculation of percentage, as it will be the same ratio\n    initial_birds = 8 * k\n    initial_squirrels = 5 * k\n    total_animals = initial_birds + initial_squirrels\n    \n    # Squirrels increased by 20%\n    new_squirrels = initial_squirrels * 1.20\n    \n    # Since the total number of birds and squirrels remains the same\n    # birds_flew_away = initial_birds - remaining_birds\n    # remaining_birds = total number of animals - new_squirrels\n    remaining_birds = total_animals - new_squirrels\n    \n    # Calculate percentage of birds that flew away\n    birds_flew_away = initial_birds - remaining_birds\n    birds_flew_away_percentage = (birds_flew_away / initial_birds) * 100\n    \n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice_liters = 8 * 3\n    juice_left = total_juice_liters - 9\n    container_volume = 5\n    containers_needed = -(-juice_left // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10), 4):\n        D, A, R, T = perm\n        if (D + A + R + T == 11) and (T + A + R + T == 12) and (C + A + R + T == 13):\n            A_plus_R_plus_T = A + R + T\n            if A_plus_R_plus_T > max_sum:\n                max_sum = A_plus_R_plus_T\n    return max_sum\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Assuming the operation ◈ follows an unknown but consistent pattern, the aim is to decode it.\n    # We'll start by observing the inputs and outputs given:\n    # 4 ◈ 7 = 21  --> This implies some kind of operation between 4 and 7, leading to 21.\n    # 6 ◈ 22 = 20 --> Similarly, there's an operation between 6 and 22, resulting in 20.\n    # 8 ◈ 30 = 26 --> An operation between 8 and 30, leading to 26.\n    \n    # One noticeable pattern is that the results are close to the multiples of the first number in each operation:\n    # 4 * 5 = 20 (close to 21)\n    # 6 * 3 = 18 (close to 20)\n    # 8 * 3 = 24 (close to 26)\n    \n    # If we look at the differences between the results and the multiples:\n    # 21 - 20 = 1\n    # 20 - 18 = 2\n    # 26 - 24 = 2\n    \n    # We notice that the difference appears to be the same as the difference between 7 and 4, 22 and 6, 30 and 8, respectively.\n    # Based on this observation, we can guess that the rule for the operator ◈ might be:\n    # A ◈ B = A * (B - A) + A\n    \n    # Let's apply this rule to find 9 ◈ 20.\n    A = 9\n    B = 20\n    result = A * (B - A) + A  # Applying the guessed rule\n\n    return result\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    loafs_needed = 35\n    cups_needed = loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1  # each friend sends a card to all the other friends\n    total_cards_sent = friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_on_left = 3\n    members_on_right = 5\n    tanya = 1  # Tanya herself\n\n    total_members = members_on_left + tanya + members_on_right\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n\n    # Largest four-digit number is 9999, so we start from there and go downwards\n    for potential_factor in range(9999, 999, -1):\n        if 87878 % potential_factor == 0 and next(primerange(potential_factor, potential_factor+1)) == potential_factor:\n            return potential_factor\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)\n\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5\n    max_load_per_van = 12\n    num_vans = -(-total_weight // max_load_per_van)  # Ceiling division\n    return num_vans\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    return (128 - (24 + 16) // 5) * 2\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Given that 1/4 of the boys is equal to 2/5 of the girls\n    equation1 = Eq(boys / 4, girls * 2 / 5)\n\n    # Total number of students is the sum of boys and girls\n    equation2 = Eq(boys + girls, 39)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Find the number of boys\n    boys_count = solutions[boys]\n    # Find the number of girls\n    girls_count = solutions[girls]\n\n    # Calculate the difference between the number of boys and girls\n    difference = boys_count - girls_count\n\n    return difference\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def count_partitions(n, max_num):\n        if n == 0:\n            return 1\n        elif n < 0 or max_num == 0:\n            return 0\n        else:\n            return count_partitions(n, max_num - 1) + count_partitions(n - max_num, max_num)\n\n    return count_partitions(5, 5)\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82  # Below sea level so it's negative\n    plane_height = 569  # Above sea level so it's positive\n\n    # The vertical distance is the sum of the absolute values of the whale's depth and the plane's height\n    distance = abs(whale_depth) + abs(plane_height)\n\n    return distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Maximum number of left-handed girls\n    left_handed_girls = girls - (total_pupils - right_handed)\n\n    # Number of right-handed girls (since it's the smallest number that are right-handed)\n    right_handed_girls = girls - left_handed_girls\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n\n    # Equation representing after Daniel gave away 24 stickers\n    equation1 = Eq(daniel - 24, patrick + 10)\n\n    # Equation representing Patrick having twice as much as Daniel after changes\n    equation2 = Eq(patrick + 10, 2 * (daniel - 24))\n\n    # Since Daniel and Patrick had equal number of stickers at first\n    equation3 = Eq(daniel, patrick)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "from itertools import permutations\n\ndef solution():\n    nums = list(permutations(range(1, 10)))\n    min_diff = float('inf')\n    for num1 in nums:\n        for num2 in nums:\n            if num1 != num2:\n                n1 = int(''.join(map(str, num1)))\n                n2 = int(''.join(map(str, num2)))\n                min_diff = min(min_diff, abs(n1 - n2))\n    return min_diff\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for total number of fruits\n    total_fruits = symbols('total_fruits')\n\n    # Expressing the given ratios\n    apples = (2/3) * total_fruits\n    bananas = (1/9) * total_fruits\n\n    # Since the rest are lemons, we subtract apples and bananas from total\n    lemons = total_fruits - apples - bananas\n\n    # Equation given in the problem: apples is 12 more than lemons\n    equation = Eq(apples, lemons + 12)\n\n    # Solve the equation for total number of fruits\n    solutions = solve(equation, total_fruits)\n\n    # Calculate the number of lemons based on the total fruits found\n    lemons_bought = solutions[0] - (2/3) * solutions[0] - (1/9) * solutions[0]\n\n    return lemons_bought\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_worker = 6\n    total_skirts = 0\n    num_workers = 1  # on the first day\n\n    for day in range(1, 10):\n        total_skirts += skirts_per_worker * num_workers\n        num_workers += 1\n\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    difference = 5\n    qiqi_pizza = jenny_pizza + difference\n    return qiqi_pizza\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_living_over_20 = 0.6\n    probability_living_over_25_given_over_20 = 0.3\n\n    # Use the conditional probability formula, P(B|A) = P(A and B) / P(A)\n    probability_living_over_25 = probability_living_over_25_given_over_20 / probability_living_over_20\n\n    return probability_living_over_25\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # The rate of 5 taps to fill a 1 litre jug in 2 minutes\n    rate_per_5_taps = 1 / 2  # in litres per minute\n\n    # The rate of 1 tap to fill a 1 litre jug\n    rate_per_1_tap = rate_per_5_taps / 5  # divide by 5 because there are 5 taps\n\n    # The time it takes for 1 tap to fill a 500ml jug\n    time_for_500ml = 0.5 / rate_per_1_tap  # 500ml is 0.5 litres\n\n    return time_for_500ml\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    total_erasers = 246\n    more_erasers = 32\n\n    brothers_erasers = (total_erasers - more_erasers) // 2\n\n    return brothers_erasers\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 100):  # limit the range for a as it's a whole number and a*a should be close to 399\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20   # The difference in height between Ben and Sally in cm\n\n    sally_height = ben_height + difference  # Sally's height in cm\n\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    # children are 3/5 of the visitors\n    children = 3/5 * visitors\n\n    # remaining visitors are visitors - children\n    remaining_visitors = visitors - children\n\n    # men are 1/2 of the remaining visitors\n    men = 1/2 * remaining_visitors\n\n    # there were 140 more children than men\n    equation = Eq(children - men, 140)\n\n    # solve for the total visitors\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "def solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    sorted_digits = sorted(digits, reverse=True)\n\n    # The greatest sum is formed by using the three largest digits in the first number\n    # and the next three largest in the second number.\n    first_number = sorted_digits[0] * 100 + sorted_digits[1] * 10 + sorted_digits[2]\n    second_number = sorted_digits[3] * 100 + sorted_digits[4] * 10 + sorted_digits[5]\n\n    ans = first_number + second_number\n    return ans\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume = 2000  # 2 liters in millilitres\n    volume_drank = 350     # volume drank in millilitres\n\n    remaining_volume = initial_volume - volume_drank\n\n    return remaining_volume\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 0.40 * 3280\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    pattern_diff = [7, 8, 7, 23, 7]\n    next_number = 53 + pattern_diff[len(pattern_diff) % 2]\n    return next_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the tons of water A can fill, y be the tons B can fill,\n    # and z be the tons C can fill\n    x, y, z = symbols('x y z')\n\n    # Equation for the scenario with A and C\n    equation1 = Eq(x + z, 18)\n\n    # Equation for the scenario with B and C\n    equation2 = Eq(y + z, 27)\n\n    # Given flow rate of B is twice that of A\n    equation3 = Eq(y, 2 * x)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # The pool's full volume is when A, B, and C are turned on\n    pool_volume = solutions[x] + solutions[y] + solutions[z]\n\n    return pool_volume\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    matches = 20\n    pay_per_match = 500\n    goals_per_game = 2\n    pay_per_goal = 100\n\n    total_pay = (matches * pay_per_match) + (matches * goals_per_game * pay_per_goal)\n\n    return total_pay\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kg = 8\n    cost_per_kg = total_cost / total_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    def operation_sun(num, count):\n        total = 0\n        for i in range(count):\n            total += num + 2 * i\n        return total\n    \n    ans = operation_sun(1, 10)\n    return ans\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Total grass consumed by 20 horses in 12 days\n    total_grass_horses = 20 * 12\n    # Total grass consumed by 60 sheep in 24 days\n    total_grass_sheep = 60 * 24\n    # Since both consume entire grassland, their totals are equal\n    assert total_grass_horses == total_grass_sheep\n    # Therefore, one horse eats as much as 4 sheep in a day\n    horse_to_sheep_ratio = 4\n    # 12 horses eat as much as 12 * 4 = 48 sheep\n    equivalent_sheep_for_horses = 12 * horse_to_sheep_ratio\n    # Total equivalent sheep eating the grass is 48 (for horses) + 88 sheep\n    total_equivalent_sheep = equivalent_sheep_for_horses + 88\n    # The total number of days it takes for this number of \"equivalent sheep\" to eat the grass\n    days_for_equivalent_sheep = total_grass_horses / total_equivalent_sheep\n    return days_for_equivalent_sheep\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    # Assume the number of $2 notes initially is x and the number of $5 notes is y,\n    # then we have the two equations:\n    # x + y = 55 (total number of notes)\n    # y + 8 = (3/7) * (x - x/3 + y + 8) (number of $5 notes after transactions)\n\n    # Solving the two equations using sympy\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # Define symbols for x and y\n\n    # Create equations based on the problem description\n    equation1 = Eq(x + y, 55)\n    equation2 = Eq(y + 8, (3/7) * (x - x/3 + y + 8))\n\n    # Solve the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total amount of money Cindy had at first\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n\n    return total_money\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial\n\n    # There are 6 seats in the waiting room\n    # Mr Spencer and his 2 children must sit together, so we can treat them as a single unit for now\n    # This effectively reduces the number of units to 4 [Mr Spencer with 2 children + 3 other people]\n    \n    # Calculate the permutations of these 4 units\n    unit_permutations = factorial(4)\n    \n    # Within the unit of Mr Spencer and his children, there are 3! ways they can be arranged because Mr Spencer must sit between his 2 children\n    spencer_children_permutations = factorial(3)\n    \n    # Total permutations is the product of permutations of the units and permutations within the Spencer unit\n    total_permutations = unit_permutations * spencer_children_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols\n    M, A, T, H = symbols('M A T H', integer=True)\n\n    # Construct the equations\n    # Since MATH and HTAM are 4-digit numbers, M and H cannot be zero.\n    equation = Eq(M*1000 + A*100 + T*10 + H + H*1000 + T*100 + A*10 + M, 12221)\n    \n    # Set the range for each variable (digit from 0 to 9)\n    # Also, we need that M and H can't be 0 based on the assumption of 4-digit numbers\n    solutions = solve((equation,\n                       (M > 0, M < 10),\n                       (A >= 0, A < 10),\n                       (T >= 0, T < 10),\n                       (H > 0, H < 10),\n                       (Ne(M, A), Ne(M, T), Ne(M, H), Ne(A, T), Ne(A, H), Ne(T, H))), \n                       (M, A, T, H), dict=True)\n\n    # Based on the equation, MATH + HTAM is symmetric w.r.t M and H, and A and T\n    # This implies that M and H, and A and T are likely to be interchangeable\n    # However, the equation is sensitive to whether M and H, A and T are even or odd.\n    # If M + H = X (where X is a two digit number due to carryover), M and H must be of the same parity\n    # This is because if M was odd and H was even (or vice versa), M + H would not end in X0 or X1.\n    # Similarly for A and T.\n    # Therefore, there should only be a few solutions that meet these criteria.\n\n    # Extract and calculate sum if there's a valid solution\n    if solutions:\n        M, A, T, H = solutions[0].values()\n        return M + A + T + H\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    eaten_sweets = total_sweets / 2\n    remaining_sweets = total_sweets - eaten_sweets\n    given_away_sweets = remaining_sweets / 3\n    sweets_left = remaining_sweets - given_away_sweets\n\n    return sweets_left\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    marks_for_correct = 5\n    marks_deducted_for_wrong = 2\n    \n    for correct_questions in range(total_questions + 1):\n        wrong_questions = total_questions - correct_questions\n        score = (marks_for_correct * correct_questions) - (marks_deducted_for_wrong * wrong_questions)\n        if score == 23:\n            return correct_questions\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    # Find the prime factors of 24 (A * B) and 52 (B * C) to determine all possible values for B\n    from sympy import primefactors\n\n    factors_24 = primefactors(24)\n    factors_52 = primefactors(52)\n    \n    # Since B is a common factor in both A*B and B*C, find the common factors of 24 and 52\n    common_factors = list(set(factors_24).intersection(factors_52))\n    \n    # Find all factor pairs of 24 and 52, then calculate A + C for each common factor\n    min_A_plus_C = float('inf')\n    for B in common_factors:\n        A = 24 // B\n        C = 52 // B\n        min_A_plus_C = min(min_A_plus_C, A + C)\n    \n    return min_A_plus_C\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # in meters per minute\n    \n    time_taken = distance / speed  # time = distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result = 18\n    original_number = (result - 7) * 3\n    return original_number\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    # There are three positions where '7' can appear: hundreds, tens, and ones.\n    \n    # Case 1: There is exactly one seven \n    # Since there cannot be a 0 in the hundreds place, there are 9 choices (1-9), and in the other two places there are 10 choices each (0-9), \n    # but we exclude the choice of 7 since we want exactly one 7, therefore it's 9*9 choices\n    # So, for each position of the single seven, there are 9 * 9 ways.\n    \n    # Case 2: There are exactly two sevens\n    # There are 3 ways to position the two sevens, and for the remaining position, there are 9 choices (1-9 for hundreds, 0-9 for tens and ones but exclude 7).\n    # So there are 3 * 9 ways.\n    \n    # Case 3: There are exactly three sevens\n    # There's only 1 such number: 777.\n    \n    # Using the Inclusion-Exclusion principle, we have to subtract the cases where there's only one '7' from the total\n    # so there are not at least two '7's\n    \n    # Total possible three digit numbers\n    total_three_digit = 9 * 10 * 10\n    \n    # Total with no 7 (8 choices for hundreds [excluding 0 and 7], 9 choices for the rest [excluding 7])\n    total_with_no_seven = 8 * 9 * 9\n\n    # Subtract no sevens from the total to get at least one seven\n    total_with_one_seven = total_three_digit - total_with_no_seven\n    \n    # Number of numbers with at least two sevens is total one seven - numbers with exactly one seven\n    at_least_one_seven = total_with_one_seven - (3 * 9 * 9)\n    \n    # Finally, add the numbers with three sevens (which is 1)\n    ans = at_least_one_seven + 1\n    \n    return ans\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    nth_odd_number = 1 + (20 - 1) * 2\n    return nth_odd_number\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of scarfs produced each day,\n    # and y be the total number of scarfs needed to produce.\n    x, y = symbols('x y')\n\n    # Original plan: 6 days to finish y scarfs\n    original_plan = Eq(6 * x, y)\n\n    # New plan: 4 days to finish y scarfs, producing 24 more each day\n    new_plan = Eq(4 * (x + 24), y)\n\n    # Solve the system of equations\n    solutions = solve((original_plan, new_plan), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, students = symbols('sweets students')\n    \n    equation1 = Eq(sweets - 6*students, -26)\n    equation2 = Eq(sweets - 5*students, -5)\n\n    solutions = solve((equation1, equation2), (sweets, students))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of boys be 5x and girls be 3x\n    boys, girls = symbols('boys girls')\n    \n    # Initial ratio equation\n    equation1 = Eq(boys/girls, 5/3)\n    \n    # Ratio after 15 boys left\n    equation2 = Eq((boys - 15)/girls, 5/6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate the total number of pupils initially (boys + girls)\n    total_pupils = solutions[boys] + solutions[girls]\n\n    return total_pupils\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n    \n    # Treat ABC as a single entity and EF as another single entity.\n    # Then we have 6 entities to arrange: (ABC), D, G, H, I, (EF)\n    entities = factorial(6)\n    \n    # ABC can be arranged in 3! ways internally\n    ABC = factorial(3)\n    \n    # EF can be arranged in 2! ways internally\n    EF = factorial(2)\n    \n    # Multiply the arrangements of entities with internal arrangements of ABC and EF\n    total_arrangements = entities * ABC * EF  \n    \n    return total_arrangements\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15): # start from x1 + 1 to ensure x2 is different and greater than x1\n            for x3 in range(x2 + 1, 15): # start from x2 + 1 to ensure x3 is different and greater than x2\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series = [2, 4, 6, 8, 10, 12, 14]\n    return sum(series)\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(675)  # Factorize 675 to get its prime factors and their powers\n    required_factors = {}\n\n    # For a number to be a square, all prime factors must have even powers\n    for prime, count in factors.items():\n        if count % 2 != 0:  # If the power of the prime factor is odd\n            required_factors[prime] = 1  # We need one more prime to make the power even\n\n    # Multiply all the required primes to get B\n    B = 1\n    for prime, count in required_factors.items():\n        B *= prime ** count\n\n    return B\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n    \n    cost_per_ball = total_cost / number_of_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_fraction = 1/3\n    original_price = sale_price / (1 - discount_fraction)\n\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    current_age_shelby = 65\n    age_shelby_5_years_ago = current_age_shelby - 5\n    age_josh_5_years_ago = (3/5) * age_shelby_5_years_ago\n    current_age_josh = age_josh_5_years_ago + 5\n    return int(current_age_josh)\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    ans = 10 * 20 * 30 * 40\n    return ans\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost = 6.95  # in pounds\n    single_can_cost = 65  # in pence\n    cost_of_12_individual_cans = 12 * single_can_cost\n    \n    # Convert multipack cost to pence\n    multipack_cost_in_pence = multipack_cost * 100\n    \n    # Calculate the difference\n    savings = cost_of_12_individual_cans - multipack_cost_in_pence\n    \n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n    \n    # Count numbers with four digits within the range\n    for number in range(3267, 5121):\n        str_number = str(number)\n        \n        # Check if all digits are unique and within the allowed set\n        if len(set(str_number)) == len(str_number) and all(digit in '123456' for digit in str_number):\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let's denote the weights of Adam, Ben, and Carl as A, B, and C respectively.\n    \n    # We're given that Adam and Ben together weigh 102kg: A + B = 102\n    # Ben and Carl together weigh 97kg: B + C = 97\n    # Adam and Carl together weigh 93kg: A + C = 93\n    \n    # Now let's add all three equations together:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n    # 2A + 2B + 2C = 292\n    # A + B + C = 146\n    \n    # Each person's weight appears twice in the sum, so divide by 2 to get the total weight.\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana = symbols('apple banana')\n    \n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n    \n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Let x be the time it takes for Alan to paint the room on his own\n    # Alan's work rate: 1/x\n    # Bob's work rate: 1/6\n    # Together work rate: 1/4\n    \n    # The combined work rate is the sum of their individual work rates\n    # 1/x + 1/6 = 1/4\n    \n    # Solving for x:\n    # Multiply through by 12x to get rid of the denominators:\n    # 12 + 2x = 3x\n    # 12 = 3x - 2x\n    # 12 = x\n    \n    # So, Alan would take 12 hours on his own\n    x = 12\n    return x\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    percentage = 55\n    total_value = 80\n\n    ans = (percentage / 100) * total_value\n\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500  # initial amount\n    rate = 0.08  # annual interest rate\n    time = 10  # time in years\n    # Compound interest formula: A = P * (1 + r/n)^(nt)\n    # In this case, interest is compounded yearly, so n = 1.\n    # Hence, the formula simplifies to A = P * (1 + r)^t\n    amount = principal * (1 + rate)**time\n    \n    return amount\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    # Shaun has twice as many stamps as Kim\n    equation1 = Eq(shaun, 2 * kim)\n    # Andrew has 24 less stamps than Shaun\n    equation2 = Eq(andrew, shaun - 24)\n    # Total number of stamps\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    return 10024 + 3968\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_consumption = 15\n    weeks = 26\n    total_consumption = weekly_consumption * weeks\n    return total_consumption\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for Pinkie's original score\n    original_score = symbols('original_score')\n    \n    # Equation based on the problem statement\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    \n    # Solve the equation for Pinkie's original score\n    solution = solve(equation, original_score)\n    \n    # Return the solution which is Pinkie's original score\n    return solution[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    votes_for_peter = 35\n\n    # To be elected without fail, Peter needs one more than half of the total votes.\n    votes_needed = (total_votes // 2) + 1\n\n    # Additional votes Peter needs to win.\n    additional_votes = votes_needed - votes_for_peter\n\n    return additional_votes\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, nicholas = symbols('alex nicholas')\n    equation1 = Eq(nicholas - 13, 6 * (alex - 58))\n    equation2 = Eq(alex, nicholas)\n\n    solutions = solve((equation1, equation2), (alex, nicholas))\n\n    total_money = solutions[alex] * 2\n\n    return total_money\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for i in range(1, 30):\n        if i % 3 == 0 and i % 2 == 1 and i % 4 == 1 and i % 5 == 1:\n            return i\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    result = 250 - 6*6 - 8*6\n    return result\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_later = 28\n    days_in_week = 7\n    # Find the remainder when days_later is divided by days_in_week\n    remainder = days_later % days_in_week\n\n    # Mapping from weekday number to the required format\n    weekday_mapping = {\n        0: '0001', # Monday\n        1: '0002', # Tuesday\n        2: '0003', # Wednesday\n        3: '0004', # Thursday\n        4: '0005', # Friday\n        5: '0006', # Saturday\n        6: '0007', # Sunday\n    }\n\n    # Calculate the day of the week\n    day_of_week = (6 + remainder) % days_in_week\n    ans = weekday_mapping[day_of_week]\n    return ans\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600  # Total amount of flour Mrs Lee bought\n    remaining_flour = 21  # Remaining amount of flour after baking\n\n    used_flour = initial_flour - remaining_flour  # Calculate the amount of flour used for baking\n    \n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    return 12.35 + 8.65 + 9.8 - 2.8\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    return 9 ** (3/2)\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    position_value = 0.1\n    value_of_digit = 6 * position_value\n    return value_of_digit\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    total_distance = 240  # in meters\n    pole_interval = 12    # distance between two poles in meters\n\n    # To find the number of poles, we calculate the number of intervals first.\n    # One fewer pole than the number of intervals since no poles are placed at the ends.\n    num_intervals = (total_distance // pole_interval) - 1\n\n    return num_intervals\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, rulers = symbols('pencils rulers')\n    \n    equation1 = Eq(pencils - rulers, 10)\n    equation2 = Eq(pencils + rulers, 52)\n    \n    solutions = solve((equation1, equation2), (pencils, rulers))\n\n    return solutions[rulers]\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]  # Given numbers without x\n    mean_value = 11  # Given mean of the dataset\n    total_sum = mean_value * (len(numbers) + 1)  # Total sum of the dataset including x\n\n    x_value = total_sum - sum(numbers)  # Calculate x\n    return x_value\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    value_difference = 7 * (10**3 - 10)\n    return value_difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # If we take 3 red, 3 yellow, and 3 blue, we can still end up with no 4 marbles of the same color\n    marbles_taken = 3 * 3\n    \n    # The next marble we take must be the fourth marble of at least one color\n    marbles_taken += 1\n    \n    return marbles_taken\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    total_ratio = boys_ratio + girls_ratio\n    number_of_boys = 200\n\n    number_of_girls = (girls_ratio / boys_ratio) * number_of_boys\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    decimal_part = '3' * 1000\n    digits_list = [int(d) for d in decimal_part]\n    ans = sum(digits_list)\n    return ans\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percent = 15\n    total = 29\n\n    ans = (percent / 100) * total\n    return ans\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    return 100 // 2\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    x = Symbol('x')\n    equation = 4 * x - 13 - 55\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    sum_of_all = fraction + percentage + decimal\n\n    return round(sum_of_all, 3)\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import divisors\n\n    # Get divisors of the ages product of this year and the last year.\n    divisors_current = divisors(2016)\n    divisors_last_year = divisors(1377)\n    \n    # Find the common divisors (possible ages) between this year and the last year.\n    common_divisors = set(divisors_current).intersection(set(divisors_last_year))\n\n    for age1 in common_divisors:\n        for age2 in common_divisors:\n            for age3 in common_divisors:\n                # Check if the ages satisfy the given conditions.\n                if age1 * age2 * age3 == 2016 and \\\n                   (age1 - 1) * (age2 - 1) * (age3 - 1) == 1377:\n                    # Calculate the product of the ages two years ago.\n                    ans = (age1 - 2) * (age2 - 2) * (age3 - 2)\n                    return ans\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n\n    # We treat the two people who want to stand next to each other as one entity.\n    # There are now effectively 4 entities to arrange.\n    ways_to_arrange_4 = factorial(4)\n\n    # The two people can arrange themselves in 2! ways.\n    ways_to_arrange_2 = factorial(2)\n\n    # The total number of ways is the product of the two possibilities.\n    return ways_to_arrange_4 * ways_to_arrange_2\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_apples_first_3_days = 33\n    average_apples_last_4_days = 18\n    total_days = 7\n\n    total_apples_last_4_days = average_apples_last_4_days * 4\n    total_apples_whole_week = total_apples_first_3_days + total_apples_last_4_days\n    average_apples_per_day_whole_week = total_apples_whole_week / total_days\n\n    return average_apples_per_day_whole_week\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the original concentration in container A\n    original_concentration = symbols('x')\n\n    # The initial amount of pure water in each container\n    A_initial = 30\n    B_initial = 40\n    C_initial = 50\n\n    # The amount of solution transferred between containers\n    transferred_amount = 10\n    \n    # After putting 10 grams of solution into container A\n    A_final = A_initial + transferred_amount\n    \n    # The concentration in A after addition (in terms of x)\n    A_concentration = (original_concentration * transferred_amount) / A_final\n    \n    # After transferring 10 grams from A to B\n    B_final = B_initial + transferred_amount\n    # Since 10 grams is transferred, the concentration in B will be the same as it was in A\n    B_concentration = A_concentration\n    \n    # After transferring 10 grams from B to C\n    C_final = C_initial + transferred_amount\n    # The final concentration in C\n    C_final_concentration = 0.005 # 0.5% concentration expressed as a decimal\n    \n    # Equation representing the final concentration in C\n    equation = Eq((B_concentration * transferred_amount) / C_final, C_final_concentration)\n\n    # Solve for the original concentration x\n    original_concentration_value = solve(equation, original_concentration)\n\n    return original_concentration_value[0] * 100 # Convert the decimal to a percentage\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    metal1_amount = 12  # in mg\n    metal2_amount = 13  # in mg\n    nickel_percent_in_metal1 = 0.40  # 40%\n    nickel_percent_in_metal2 = 0.60  # 60%\n\n    total_nickel = (metal1_amount * nickel_percent_in_metal1) + (metal2_amount * nickel_percent_in_metal2)\n    total_metal = metal1_amount + metal2_amount\n\n    nickel_concentration_percent = (total_nickel / total_metal) * 100\n    \n    return nickel_concentration_percent\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    num1 = -3\n    num2 = 8\n    midpoint = (num1 + num2) / 2\n    return midpoint\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays against every other player once.\n    # Therefore, each player plays 7 games (since there are 7 opponents).\n    # Because there are no ties and every player has a different number of wins, the possible number of wins\n    # are distributed as 0, 1, 2, 3, 4, 5, 6, and 7.\n    # The champion, having the highest number of wins, will correspond to the maximum value, which is 7.\n    # Therefore, the champion records 7 wins in the tournament.\n    return 7\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    numerator = 15\n    denominator = 1/7\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    # The sum of numbers from 1 to n is given by n(n+1)/2; let's denote it as S. \n    # However, John got a sum of 3405, which means S + x = 3405, where x is the number added twice.\n    # We need to find a number n such that n(n+1)/2 is less than 3405 and (n(n+1)/2) + x = 3405, where x is an integer.\n    \n    # We need to find the value of n for which the sum of integers from 1 to n is closest to but less than 3405.\n    n = 1\n    while n * (n + 1) // 2 < 3405:\n        n += 1\n    n -= 1  # we decrement n once because the while loop exits when sum exceeds or equals 3405\n\n    # Now we find the actual sum of numbers from 1 to n\n    correct_sum = n * (n + 1) // 2\n    \n    # The difference between the incorrect sum and correct sum is the number added twice.\n    repeated_number = 3405 - correct_sum\n\n    return repeated_number\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    for x in range(1, 10000):\n        if (24 * x) == (30 * (x - 6)):\n            return 24 * x\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    possible_values = set()\n    remainder = 3\n\n    for divisor in range(1, 40-remainder+1):  # Divisor range from 1 to 36\n        for quotient in range(1, (40-remainder-divisor+1)):  # Quotient range based on remaining value\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    ratio_history_to_math = 7 / 8\n    total_history_club = total_math_club * ratio_history_to_math\n    return int(total_history_club)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reversing the numbers according to Zog's system\n    first_number = int(str(729)[::-1])\n    second_number = int(str(26)[::-1])\n\n    # Performing the subtraction\n    result = first_number - second_number\n\n    # Reversing the result to match Zog's writing\n    pluto_answer = int(str(result)[::-1])\n\n    return pluto_answer\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    import math\n\n    ans = math.gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Given terms sum of AP:\n    sum_6 = 64\n    sum_12 = 156\n    \n    # We know that the sum of an AP is given by (n/2) * (2a + (n-1)d)\n    # where n = number of terms, a = first term, and d = common difference.\n    \n    # Therefore, sum_6 = (6/2) * (2a + 5d) = 3 * (2a + 5d)\n    # sum_12 = (12/2) * (2a + 11d) = 6 * (2a + 11d)\n    \n    # We can set up two equations to solve for a and d:\n    # 3 * (2a + 5d) = 64 (1)\n    # 6 * (2a + 11d) = 156 (2)\n    \n    # We can simplify them and make them solvable:\n    # 6a + 15d = 64 (1)\n    # 12a + 66d = 156 (2)\n    \n    # Dividing equation (2) by 2 to simplify the system:\n    # 6a + 33d = 78 (2')\n    \n    # Now we can subtract equation (1) from equation (2') to find d:\n    # (6a + 33d)-(6a + 15d) = 78 - 64\n    # 18d = 14\n    # d = 14 / 18\n    # d = 7 / 9\n    d = 7 / 9\n    \n    # Now we can find a by inserting d back into equation (1):\n    # 6a + 15*(7/9) = 64\n    # 6a + 35/3 = 64\n    # 6a = 64 - 35/3\n    # 6a = 192/3 - 35/3\n    # 6a = 157/3\n    # a = (157/3) / 6\n    # a = 157 / 18\n    a = 157 / 18\n    \n    # Now that we have a and d, we can find the sum of the first 18 terms:\n    # Sum_18 = (n/2) * (2a + (n-1)d)\n    n = 18\n    sum_18 = (n / 2) * (2 * a + (n - 1) * d)\n    \n    return sum_18\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    time = 30\n    train_speed = 20  # meters per second\n\n    # distance the train travels to pass the bridge completely\n    distance_travelled = train_speed * time\n\n    # length of the bridge is total distance minus the train length\n    bridge_length = distance_travelled - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percent = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percent / 100) * total_marks\n    difference = hebe_score - emily_score\n\n    return int(difference)\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:00 AM is 0.5 hours\n    jogging_time = 0.5\n\n    # Walking time from 7:00 AM to 8:00 AM is 1 hour\n    walking_time = 1\n\n    # Jogging speed in km per hour\n    jogging_speed = 9\n\n    # Walking speed in km per hour\n    walking_speed = 7.5\n\n    # Distance travelled while jogging\n    distance_jogging = jogging_speed * jogging_time\n\n    # Distance travelled while walking\n    distance_walking = walking_speed * walking_time\n\n    # Total distance travelled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the first digit (3 or 4 because a three-digit number cannot start with 0)\n    first_digit = 2\n    # There are 3 choices for the second digit (0, 3, or 4, since now 0 can be used)\n    second_digit = 3\n    # There are 3 choices for the third digit (same reason as the second digit)\n    third_digit = 3\n    \n    # The total number of different three-digit numbers is the product of these possibilities\n    total_numbers = first_digit * second_digit * third_digit\n\n    return total_numbers\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    games_won, games_lost = symbols('games_won games_lost')\n\n    equation1 = Eq(games_won, 2 * games_lost)\n    equation2 = Eq(games_won + games_lost, 63)\n\n    solutions = solve((equation1, equation2), (games_won, games_lost))\n\n    return solutions[games_lost]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    difference_in_multiplicands = 55 - 44\n    ans = common_factor * difference_in_multiplicands\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define symbols for the number of cows and goats initially\n    cows, goats = symbols('cows goats')\n    total_animals = cows + goats\n    \n    # Initial conditions\n    equation1 = Eq(cows, 0.65 * total_animals)\n    equation2 = Eq(goats, total_animals - cows)\n    \n    # Conditions after adding 240 animals\n    equation3 = Eq(cows + 240 * 0.8, 0.65 * (total_animals + 240))\n    equation4 = Eq(goats * 2, total_animals - (cows + 240 * 0.2))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (cows, goats))\n    \n    return solutions[goats]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    return (9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1)\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "def solution():\n    from math import factorial\n    \n    def permutations(n, k):\n        return factorial(n) // factorial(n - k)\n    \n    # There are 3 girls, so we treat them as a single unit.\n    # Now there are 3 boys, 3 teachers, and 1 unit of girls, totaling 7 units.\n    # The total ways to arrange these 7 units would be 7!.\n    total_ways_units = permutations(7, 7)\n    \n    # Now, we have to insert the boys in such a way that no two boys are adjacent to each other.\n    # If we consider the 7 previously arranged units, there are 8 possible positions for the boys:\n    # (before or after each of the 7 units)\n    # We must choose 3 of these positions to place the boys in, which can be done in 8 choose 3 ways.\n    ways_to_place_boys = permutations(8, 3) // factorial(3)\n    \n    # The 3 girls can be arranged among themselves in 3! ways.\n    ways_girls_arranged = permutations(3, 3)\n    \n    # The final answer is the product of the three counts.\n    ans = total_ways_units * ways_to_place_boys * ways_girls_arranged\n    \n    return ans\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # The area of an equilateral triangle is given by the formula\n    # A = (sqrt(3) / 4) * side^2\n    from math import sqrt\n    \n    # Area of Triangle X\n    side_x = 3\n    area_x = (sqrt(3) / 4) * (side_x ** 2)\n    \n    # Area of Triangle Y\n    side_y = 9\n    area_y = (sqrt(3) / 4) * (side_y ** 2)\n    \n    # How many times Triangle X can fit into Triangle Y\n    times_fit = area_y / area_x\n    \n    return int(times_fit)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_spent = Eq(5*x*12 + 3*x*5, 120)\n    solution = solve(total_spent, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_choose = 2\n    \n    num_ways = comb(total_students, students_to_choose)\n    \n    return num_ways\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    return (8 * 9 * 10) - (1 * 2 * 3)\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n\n    total_roses = bouquets * roses_per_bouquet\n\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soup_options = 2  # 1 soup choice or no soup\n    dessert_options = 3  # 2 dessert choices or no dessert\n\n    # Calculate the total possible combinations\n    total_combinations = appetisers * main_courses * soup_options * dessert_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for children in range(100, 201):\n        if children % 8 == 3 and children % 9 == 1:\n            return children\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue_balls = symbols('blue_balls')\n    total_balls = blue_balls + 4\n    \n    # Probability of getting two red balls without replacement\n    probability = (4 / total_balls) * (3 / (total_balls - 1))\n    \n    # Equation based on the given probability\n    equation = Eq(probability, 2 / 7)\n    \n    # Solve for the number of blue balls\n    num_blue_balls = solve(equation, blue_balls)\n    \n    return num_blue_balls[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # Define the first term (a), common difference (d), and number of terms (n)\n    a = 6\n    d = 5\n    n = (41 - 6) // 5 + 1  # Calculate the number of terms based on the common difference\n    \n    # Calculate the sum of the arithmetic sequence using the formula: S_n = (n / 2) * (2a + (n - 1) * d)\n    S_n = (n / 2) * (2 * a + (n - 1) * d)\n    \n    return S_n\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    \n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from math import comb\n\ndef solution():\n    # We need to find the number of ways to write 2^27 as a product of ten numbers,\n    # since each digit's contribution is a power of 2: 1=2^0, 2=2^1, 4=2^2, 8=2^3.\n    # The only possible digits are: 2^0 = 1, 2^1 = 2, 2^2 = 4, and 2^3 = 8.\n    # We need to partition 27 into exactly 10 parts where each part is 0, 1, 2, or 3.\n    \n    count = 0\n    # We iterate through the possible number of 2's, 4's, and 8's. The rest will be 1's.\n    for eights in range(10):\n        for fours in range(10):\n            for twos in range(10 - fours - eights):\n                ones = 10 - eights - fours - twos\n                # Calculate the product of current combination.\n                if 3*eights + 2*fours + twos == 27:\n                    # Count unique permutations that avoid duplicate 1s, 2s, 4s, and 8s.\n                    permutations = comb(10, ones) * comb(10 - ones, twos) * comb(10 - ones - twos, fours)\n                    count += permutations\n    return count\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # x represents the total number of slices.\n    # (3/5)*x - 2 slices were given to friends, and 4 slices were left\n    # x = (3/5)*x + 2 + 4\n    # x - (3/5)*x = 6\n    # (2/5)*x = 6\n    # x = 6 / (2/5)\n    # x = 6 * (5/2)\n    x = 6 * (5/2)\n    return int(x)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let M be the per hour work of Mike, and D be the per hour work of Danny\n    M, D = symbols('M D')\n\n    # First equation represents work done together\n    equation1 = Eq(1/M + 1/D, 1/10)\n\n    # Second equation represents Mike working for 8 hours and Danny for 13 hours\n    equation2 = Eq(8*M + 13*D, 1)\n\n    # Solving the two equations for M and D\n    solutions = solve((equation1, equation2), (M, D))\n\n    # We need to find the time for Danny to finish the job.\n    # It is the inverse of Danny's work per hour.\n    time_for_danny = 1 / solutions[D]\n\n    return time_for_danny\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1st_3 = 3 * 10**2  # The 3 in the hundreds place\n    place_value_2nd_3 = 3 * 10**5  # The 3 in the hundred thousands place\n    \n    difference = place_value_2nd_3 - place_value_1st_3\n\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n\n    min_pencils = (total_pencils + pencil_cases - 1) // pencil_cases\n\n    return min_pencils\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_oplus(a, b):\n        return sum(a + i for i in range(b+1))\n    \n    for m in range(66):\n        if custom_oplus(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n    # Corners will be counted twice (once for each adjacent side), need to subtract the 4 corners once\n    total_chess = 4 * (side_length // interval) - 4\n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # Assume that all the squares will be painted red if there are 5 or more of the same number.\n    # Since there are 10 digits (0-9) and 100 squares, the best way to minimize the number of red squares\n    # is to distribute the numbers as evenly as possible.\n    \n    # If we distribute 4 of each digit (0-9), that's 4*10 = 40 squares filled without any red.\n    # We cannot add another of the same digit without turning a square red, so we need to use new digits.\n    # There are 100 - 40 = 60 squares left to fill.\n    # We still have 10 possible digits to use, and 6*10 = 60, so we can fill the remaining squares\n    # with 6 different digits and they will all turn red because they will have appeared 5 or more times.\n    # The smallest possible number of red squares is 60.\n\n    return 60\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # This is -4\n\n    # Let n be the number of terms until the first negative term, therefore:\n    # an = a1 + (n - 1)d < 0\n    # a_n = 50 + (n - 1)(-4) < 0\n    # -4n + 54 < 0\n    # 4n > 54\n    # n > 13.5\n    # Since n has to be an integer, n must be at least 14 to satisfy the condition.\n    # However, the 14th term is the first negative one, so we want the one before it.\n    num_terms = 13\n\n    return num_terms\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_amount = 2.89\n    father_contribution = 4 / 5\n\n    remaining_amount = initial_amount - spent_amount + father_contribution\n\n    return round(remaining_amount, 2)\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    # Iterate over 2-digit numbers since the first two and last two digits are the same\n    for i in range(10, 100):\n        # Construct a 4-digit number with the same first two and last two digits\n        num = int(f\"{i}{i}\")\n        # Check if the number is a perfect square\n        if (num**0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    num_zeros = 28\n    n = 1\n    trailing_zeros = 0\n\n    while trailing_zeros <= num_zeros:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            trailing_zeros += 1\n            temp_n /= 5\n\n    return n - 1\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    return (3 * m - 1) + m\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    # Tim's speed\n    speed_tim = 56\n    # Bob's speed\n    speed_bob = 74\n    # Combined speed when driving towards each other\n    combined_speed = speed_tim + speed_bob\n    # Initial distance\n    initial_distance = 780\n    # Remaining distance when they meet for the first time\n    remaining_distance = 130\n    # Distance covered\n    distance_covered = initial_distance - remaining_distance\n    # Time required\n    time_hours = distance_covered / combined_speed\n    # Return answer\n    return time_hours\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    day_progress = 3\n    night_regress = 1\n    total_progress = 0\n    total_height = 11\n    day = 0\n    \n    while total_progress < total_height:\n        day += 1\n        total_progress += day_progress\n        if total_progress >= total_height:\n            break\n        total_progress -= night_regress\n    \n    return day\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_of_numbers = 5\n    total_numbers = 5\n    sum_of_numbers = mean_of_numbers * total_numbers\n    known_numbers_sum = 3 + 4 + 6 + 10\n    fifth_number = sum_of_numbers - known_numbers_sum\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    # Visiting frequencies in days for Akon, Ben, and Cris\n    akon_frequency = 4\n    ben_frequency = 7\n    cris_frequency = 8\n\n    # Calculating the least common multiple of the frequencies\n    days_until_meeting_again = lcm(akon_frequency, ben_frequency, cris_frequency)\n\n    return days_until_meeting_again\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        year_str = str(year)\n        digits = set(year_str)\n        if len(digits) == 4:\n            digit_list = [int(d) for d in digits]\n            for perm in permutations(digit_list):\n                if perm == tuple(sorted(perm)) and perm[0] != 0 and perm[3] - perm[0] == 3:\n                    lucky_years += 1\n                    break\n    return lucky_years\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_digits = [8, 3, 5, 4]  # Recurring decimal is 0.835484848...\n    sum_digits = 0\n    total_digits = 84\n\n    # Loop through the digits until we reach total digits\n    for i in range(total_digits):\n        sum_digits += recurring_digits[i % len(recurring_digits)]\n\n    return sum_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Time between each strike is total time minus the time of strikes\n    # divided by the number of strikes minus 1\n    interval_time = (43 - 6 * 3) / (6 - 1)\n\n    # Calculate total time for 12 strikes\n    total_time_12_strikes = 12 * 3 + interval_time * (12 - 1)\n    \n    return int(total_time_12_strikes)\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n\n    each_pay = total_cost / people\n\n    return each_pay\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    n = 20 - 6  # We give 1 pen to each kid initially, and distribute the rest\n    k = 6 - 1   # The problem now is to put n identical items into k+1 boxes\n    return factorial(n + k) // (factorial(n) * factorial(k))\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    m = 1\n    while True:\n        original_students = m ** 2 + 5\n        n = m + 1\n        if n ** 2 == original_students + 18:\n            break\n        m += 1\n    return original_students\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n    \n    # Work is assumed to be constant, so workers * hours = constant work\n    # Therefore, initial_people * initial_hours = required_people * target_hours\n    required_people = (initial_people * initial_hours) / target_hours\n    \n    return required_people\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # time in minutes to finish one quiz\n    total_quizzes = 4  # total number of quizzes\n    total_time_minutes = time_per_quiz * total_quizzes  # total time in minutes\n    total_time_hours = total_time_minutes / 60  # converting total time into hours\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Numbers from 100 to 999\n    non_zero_numbers = 9 * 9 * 9  # Numbers with no zeros at any position\n    numbers_with_at_least_one_zero = total_three_digit_numbers - non_zero_numbers\n    return numbers_with_at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    velocity = 30  # in meters per second\n\n    kinetic_energy = 0.5 * mass * velocity**2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (1, 4), (1, 5), (2, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n    seventh_term = first_term + (n - 1) * common_difference\n    return seventh_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The Chinese Remainder Theorem states that if one knows the remainders of the euclidean division of an integer n by several integers, then one can determine uniquely the remainder of the division of n by the product of these integers, under the condition that the divisors are pairwise coprime.\n    \n    # these are our congruences: x ≡ 2 (mod 5), x ≡ 2 (mod 6), x ≡ 2 (mod 7)\n    congruences = [(2, 5), (2, 6), (2, 7)]\n\n    # Solve the system of congruences\n    lcm, remainder = solve_congruence(*congruences)\n\n    # Since we know the number is less than 300, we can find the solution in the range [0, 300)\n    # by adding multiples of the LCM (least common multiple) to the remainder\n    # until we find a number in the range.\n    number = remainder\n    while number < 300:\n        if number >= 100:  # Ensure it is a three-digit number\n            return number\n        number += lcm\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let x be the distance Jerry drives\n    # Kevin drives 1.5 times the distance of Jerry, so he drives 1.5x\n    # They meet after covering the total distance of 225 miles\n    # So, the equation is x + 1.5x = 225\n    # Solving for x we get 2.5x = 225\n    # Hence, x = 225 / 2.5\n    jerry_distance = 225 / 2.5\n\n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    number_of_cuts = 8\n    number_of_pieces = number_of_cuts + 1\n    length_per_piece = total_length / number_of_pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    # Total space available between two extreme pictures\n    total_space = 4800 - 2 * 210  # subtract the width of the pictures on each end\n    \n    # Number of gaps between the pictures\n    num_gaps = 10 - 1  # number of intervals is one less than number of pictures\n    \n    # The gaps between each picture must be equal\n    gap_width = total_space / num_gaps\n    \n    # Center of the wall\n    wall_center = 4800 / 2\n    \n    # Center of the third picture from the left\n    # First picture is at 0 + 1/2 picture width, so we add two gap widths to reach the third picture's center\n    third_picture_center = 210 / 2 + 2 * gap_width\n    \n    # Now calculate the distance from the wall center to the center of the third picture\n    # If the third picture's center is to the left of the wall center, the result should be negative\n    distance_from_wall_center = third_picture_center - wall_center\n    \n    return distance_from_wall_center\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "import math\n\ndef solution():\n    original_height_percentage = 100  \n    bounce_height_percentage = 75  \n    target_percentage = 25  \n    bounces = 0  \n\n    while original_height_percentage > target_percentage:\n        original_height_percentage *= bounce_height_percentage / 100\n        bounces += 1\n\n    return bounces\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    # Since the series is an arithmetic progression with a common difference of 3\n    # We can calculate the sum using the formula: sum = n/2 * (first_term + last_term)\n    \n    first_term = 5\n    last_term = 20\n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    ans = num_terms * (first_term + last_term) // 2\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable x\n    x = symbols('x')\n    \n    # Create an equation according to the problem\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    # Solve the equation for x\n    sol = solve(equation, x)\n    \n    # Get the solution which is the value of x\n    return sol[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    # Let x be the uncle's age\n    # Uncle's age when Doris reaches the uncle's current age\n    future_uncle_age = 40\n    # Doris will reach her uncle's current age in (x - doris_age) years\n    # Uncle will be 40 years old at that time\n    # So, uncle's current age is future_uncle_age - (x - doris_age)\n    # Therefore, the equation is x = future_uncle_age - (x - doris_age)\n    # Simplifying the equation gives us: x = 40 - x + 10\n    # Which further simplifies to: 2 * x = 50\n    # Therefore uncle's current age is: x = 25\n\n    uncle_age = (future_uncle_age - doris_age) + doris_age\n    return uncle_age\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # The greatest odd digit for the ones place\n    ones_place = 9\n    # We need to find two different digits for the hundreds and tens place\n    # that add up to 13.\n    # The hundreds place cannot be zero, since it's a 4-digit number.\n    # So, we will start with the smallest hundreds place digit, which is 1\n    # and see if we can find a corresponding tens place digit.\n    for hundreds_place in range(1, 10):\n        tens_place = 13 - hundreds_place\n        # The tens place digit need to be a unique digit and cannot be 9\n        # because 9 is already used in the ones place & should be less than 10\n        if tens_place != 9 and tens_place < 10 and hundreds_place != tens_place:\n            # We've found our hundreds and tens place digits.\n            break\n    # The smallest digit other than 0 for the thousands place\n    # that is not equal to the hundreds and tens digits.\n    # Since we've used 9 already and cannot use 'tens_place' \n    # and 'hundreds_place' digits, we'll use 0\n    thousands_place = 0\n    \n    # Construct the number\n    smallest_number = (thousands_place * 1000 +\n                       hundreds_place * 100 +\n                       tens_place * 10 +\n                       ones_place)\n    \n    return smallest_number\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    interest_rate = 2.25 / 100\n\n    principal = interest / interest_rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # The initial assumption is that the answer is $7$.\n    # Let's write down Timothy's reasoning in an equation form.\n    initial_answer = 7\n    regroup_number = 8 + initial_answer\n    \n    # Since 5 is smaller than 8, Timothy is suggesting a carry occurred from the units to the tens.\n    # Therefore, Timothy is saying after regrouping, there will be 1 in the tens place added to the number.\n    # Let's check if this is true with his initial answer.\n    # We need to have a result of 15 in the end.\n    \n    if regroup_number % 10 == 5 and regroup_number // 10 == 1:\n        # If the result is equal to 15, then his answer is correct.\n        is_timothy_correct = True\n        correct_answer = initial_answer\n    else:\n        # If the result is not equal to 15, then his answer is incorrect.\n        # Let's find the correct number needed to add.\n        is_timothy_correct = False\n        for i in range(1, 10):\n            if (8 + i) % 10 == 5 and (8 + i) // 10 == 1:\n                correct_answer = i\n                break\n    \n    return correct_answer\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    money_after_watch = original_money - 200\n    money_after_shirt = money_after_watch - (2/7) * money_after_watch\n    equation = Eq(money_after_shirt, (1/3) * original_money)\n\n    ans = solve(equation, original_money)\n\n    return ans[0]\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the price per banana and apple\n    price_banana, price_apple = symbols('price_banana price_apple')\n    \n    # Ellie's purchase represents the equation: 2*price_banana + 3*price_apple = 1.50\n    ellie_eq = Eq(2*price_banana + 3*price_apple, 1.50)\n    \n    # Beth's purchase represents the equation: 3*price_banana + 2*price_apple = 1.45\n    beth_eq = Eq(3*price_banana + 2*price_apple, 1.45)\n    \n    # Define the system of equations\n    equations = (ellie_eq, beth_eq)\n    \n    # Solve the system of equations for the prices\n    solution = solve(equations, (price_banana, price_apple))\n    \n    # Calculate Annabella's total cost for 1 banana and 1 apple\n    total_cost = solution[price_banana] + solution[price_apple]\n    \n    return total_cost\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "from math import factorial\n\ndef solution():\n    # Tom and Harry together can be considered as a single entity\n    # along with the remaining 5 students makes 6 entities\n    # which can be arranged in 6! ways.\n    together_permutations = factorial(6)\n    \n    # Tom and Harry can switch places within their entity,\n    # which adds a factor of 2! for their internal permutation.\n    tom_harry_permutations = factorial(2)\n    \n    # Ronda must stand at the furthest right, so we do not consider\n    # her position in the permutation calculations.\n    \n    # Multiply the two permutation calculations to get the total.\n    total_permutations = together_permutations * tom_harry_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1664\n    final_amount = initial_investment * interest_first_three_years * interest_last_two_years\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    # To round $125,000 to the nearest $100, the actual price could be anywhere from $124,950 to $125,049.\n    # Therefore, the lowest possible price of the car to the nearest dollar would be $124,950, not $125,001 as Ryna thinks.\n    lowest_possible_price = 124950\n    return lowest_possible_price\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    v = symbols('v')  # Usual speed\n    t = symbols('t')  # Usual time\n    d = symbols('d')  # Distance between city P and Q\n    \n    # First condition: it reaches 1 hour earlier if the speed is increased by 20%\n    eq1 = Eq(d, v*t)                      # Original distance equation\n    eq2 = Eq(d, (v * 1.2) * (t - 1))      # Distance with increased speed and 1 hour less\n    \n    # Second condition: traveling first 200 km at usual speed, then remaining at 25% increased speed\n    # and reaching 12 minutes (0.2 hours) earlier\n    part2_time = (d - 200) / (v * 1.25)   # Time taken for the second part of the journey\n    eq3 = Eq(t - 0.2, 200/v + part2_time) # Total time with the new condition\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (v, t, d))\n\n    # Return the distance between city P and Q\n    return solutions[d]\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_avg = 89\n    desired_avg = 95\n    current_total_tests = 4\n    current_total_score = current_avg * current_total_tests\n    \n    more_tests = 0\n    while True:\n        more_tests += 1\n        new_total_tests = current_total_tests + more_tests\n        new_total_score = desired_avg * new_total_tests\n        if new_total_score - current_total_score <= more_tests * 100:\n            break\n    \n    return more_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Distances in meters\n    dist1 = 540\n    dist2 = 300\n    dist3 = 1000 - (dist1 + dist2)  # Total distance minus the sum of the first two parts\n\n    # Speeds in meters per second\n    speed1 = 9\n    speed2 = 6\n    speed3 = 10\n\n    # Time = Distance / Speed\n    time1 = dist1 / speed1\n    time2 = dist2 / speed2\n    time3 = dist3 / speed3\n\n    # Total time in seconds\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = doris_age + age_difference\n    return uncle_current_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    performances_by_classes = 18\n    extra_performances = 2  # Lia and Liz prepare one extra performance each\n    total_performances = performances_by_classes + extra_performances\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # speed of the train in m/s\n\n    total_distance = train_length + bridge_length  # total distance to be covered by the train to cross the bridge\n    time_to_cross = total_distance / speed  # time = distance / speed\n\n    return time_to_cross\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep, cows = symbols('sheep cows')\n    \n    equation1 = Eq(sheep, (5/7) * cows)\n    equation2 = Eq(cows - 7, (3/4) * (sheep + 21))\n\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    stamps_collected_by_chloe = 176\n    stamps_collected_by_polly = 4 * stamps_collected_by_chloe\n    more_stamps = stamps_collected_by_polly - stamps_collected_by_chloe\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    # Eq1: 2*book + 3*pencil_box = 42\n    equation1 = Eq(2*book + 3*pencil_box, 42)\n    \n    # Eq2: 2*book + 6*pencil_box = 60\n    equation2 = Eq(2*book + 6*pencil_box, 60)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    start_time = (8 * 60) + 30  # Convert 08:30 AM to minutes\n    end_time = (9 * 60) + 25    # Convert 09:25 AM to minutes\n\n    n = end_time - start_time\n\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_time = 6\n    A_efficiency = 1 / A_time\n    B_efficiency = A_efficiency / 2\n    \n    combined_efficiency = A_efficiency + B_efficiency\n    total_time = 1 / combined_efficiency\n\n    return total_time\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let x be the number of years it will take for the sum of their ages to be 30\n    # Let g be Geoff's current age and s be his sister's current age\n    # According to the problem, g + s = 22\n    # After x years, their ages will be (g + x) and (s + x)\n    # Thus, (g + x) + (s + x) = 30\n    \n    # We can simplify the equation to:\n    # g + s + 2x = 30\n    # We know that g + s = 22, so we replace it in the equation to find x:\n    # 22 + 2x = 30\n    # 2x = 30 - 22\n    # 2x = 8\n    # x = 8 / 2\n    # x = 4\n    \n    # The sum of their ages will be 30 in 4 years.\n    return 4\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mamee, haribo, jelly = symbols('mamee haribo jelly')\n\n    equation1 = Eq(mamee, haribo - 30/100)  # Convert cents to dollars\n    equation2 = Eq(jelly, 6 * mamee)\n    equation3 = Eq(haribo, 50/100)  # Convert cents to dollars\n\n    solutions = solve((equation1, equation2, equation3), (mamee, haribo, jelly))\n\n    return solutions[jelly]\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n    \n    anna = 3/8 * total_candies\n    belle = 1/4 * total_candies\n    cathy_and_dawn = total_candies - anna - belle\n    \n    equation = Eq(anna + belle, cathy_and_dawn + 90)\n\n    candies_total = solve(equation, total_candies)\n\n    return candies_total[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    numerator = 18 * 32\n    denominator = 36\n    ans = numerator // denominator  # Using integer division for whole number result\n    return ans\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_after_joel = 4\n    before_joel = (remaining_after_joel + 2) * 2\n    \n    remaining_after_valerie = before_joel\n    before_valerie = (remaining_after_valerie + 3) * 2\n    \n    total_plants = (before_valerie + 1) * 2\n    \n    return total_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the initial number of fish balls as x\n    x = symbols('x')\n\n    # In the morning he sold 3/4 of the fish balls\n    morning_sold = (3/4) * x\n\n    # Remaining fish balls after morning sale\n    remaining_after_morning = x - morning_sold\n\n    # In the afternoon, he sold 1/3 of the remaining fish balls\n    afternoon_sold = (1/3) * remaining_after_morning\n\n    # Remaining fish balls after afternoon sale\n    remaining_after_afternoon = remaining_after_morning - afternoon_sold\n\n    # He made another 506 fish balls\n    new_fish_balls = remaining_after_afternoon + 506\n\n    # Now he has twice the number of fish balls he made at first\n    equation = Eq(new_fish_balls, 2 * x)\n\n    # Solve for x\n    initial_fish_balls = solve(equation, x)\n\n    return initial_fish_balls[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # We create symbols for each type of cupcake.\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # We set up the first equation according to the given relation:\n    # Sally had 72 more chocolate cupcakes than vanilla cupcakes.\n    eq1 = Eq(chocolate, vanilla + 72)\n\n    # We set up the second equation according to the given relation:\n    # Sally had 36 lesser blueberry cupcakes than vanilla cupcakes.\n    eq2 = Eq(blueberry, vanilla - 36)\n\n    # We set up the third equation according to the remaining cupcakes:\n    # After selling a fraction of the cupcakes, Sally had 427 cupcakes left altogether.\n    eq3 = Eq(chocolate*(5/6) + vanilla*(1/3) + blueberry*(2/9), 427)\n\n    # Now we solve the system of equations for the numbers of cupcakes.\n    solutions = solve((eq1, eq2, eq3), (chocolate, vanilla, blueberry), dict=True)\n\n    # There should be only one solution, which gives us the initial\n    # number of cupcakes of each type.\n    initial_chocolate = solutions[0][chocolate]\n\n    # We calculate how many chocolate cupcakes Sally sold:\n    sold_chocolate = initial_chocolate * (1/6)\n    \n    return int(sold_chocolate)\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    result = 0.23 * 200\n    return result\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books_extra = 8\n    \n    beck_has_to_give = beck_books_extra / 2\n\n    return int(beck_has_to_give)\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    result = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return result\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys = 2\n    ratio_girls = 7\n    total_ratio = ratio_boys + ratio_girls\n    girls = (boys / ratio_boys) * ratio_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    price_strawberry = 3\n    price_marble = price_strawberry + 2\n    price_cheese = 3 * price_marble\n    cost_2_cheese_cakes = 2 * price_cheese\n\n    return cost_2_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6 * 6 + 2)\n\n    solutions = solve(equation, circle)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for num in range(400, 501):\n        if (num % 3 == 1) and (num % 5 == 3) and (num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    n = 36\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    pigs = 8\n    green_apples_per_pig = 1\n    red_apples_per_two_pigs = 1\n\n    green_apples = pigs * green_apples_per_pig\n    red_apples = pigs / 2 * red_apples_per_two_pigs\n\n    total_apples = green_apples + red_apples\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    death_rate = 1/4\n    alive_seeds = total_seeds * (1 - death_rate)\n    return int(alive_seeds)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    return solutions[shirt] + solutions[pants]\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    amount = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # deposit days (odd)\n            amount += 10\n        else:  # spending days (even)\n            amount -= 8\n    return amount\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Defining the congruences based on the problem statement\n    # x = 1 (mod 2), x = 2 (mod 3), x = 3 (mod 4), x = 4 (mod 5)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    # Using the Chinese Remainder Theorem to find the smallest x that satisfies all congruences\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return int(remaining_durians)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    # Let x be the number Michael thought of.\n    # According to the problem description we have: (2*x + 178) / 4 = 54\n    # We apply inverse operations to solve for x.\n\n    # Multiply both sides by 4 to eliminate the divide by 4 operation\n    result_after_addition = 54 * 4\n    \n    # Subtract 178 to reverse the addition operation\n    result_after_multiplication = result_after_addition - 178\n    \n    # Divide by 2 to reverse the multiplication operation\n    original_number = result_after_multiplication / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    apples = [42, 41, 30, 29, 38]\n    average_apples = sum(apples) / len(apples)\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    marry_initial, alexis_initial, charlotte_initial = symbols('marry_initial alexis_initial charlotte_initial')\n    \n    # Creating equations based on the information given\n    # Marry and Alex ratio and Charlotte's increase in stickers\n    ratio_eq = Eq(marry_initial / alexis_initial, 7/5)\n    charlotte_increase_eq = Eq(charlotte_initial * 1.8, marry_initial * 0.2 + alexis_initial * 0.2 + charlotte_initial)\n    \n    # Marry's final amount after giving 20% to Charlotte is equal to Charlotte's final amount plus 20.\n    marry_final_eq = Eq(marry_initial - 0.2 * marry_initial, charlotte_initial * 1.8 - 20)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, charlotte_increase_eq, marry_final_eq), (marry_initial, alexis_initial, charlotte_initial))\n    \n    return solutions[alexis_initial]\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    # Given variables\n    original_time = 8  # hours\n    reduced_time = original_time - 1  # hours\n    extra_speed = 5  # km/h\n\n    # Let's denote the original speed as s (km/h)\n    # Distance = Speed * Time\n    # Original distance = s * original_time\n    # New distance if traveled one hour earlier = (s + extra_speed) * reduced_time\n    # Since the distance remains the same, we can equate the two distances:\n    # s * original_time = (s + extra_speed) * reduced_time\n\n    # Rearrange the equation to solve for s (original speed)\n    # s * original_time = s * reduced_time + extra_speed * reduced_time\n    # s * (original_time - reduced_time) = extra_speed * reduced_time\n    # s = (extra_speed * reduced_time) / (original_time - reduced_time)\n\n    original_speed = (extra_speed * reduced_time) / (original_time - reduced_time)\n\n    # Now that we have the original speed, let's calculate the distance\n    # Distance = original_speed * original_time\n    distance = original_speed * original_time\n\n    return distance\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_arrangements = 4 * 3 * 2 * 1 # Total arrangements without restrictions\n    \n    # We treat Claire & Tony as one unit with two permutations (CT and TC), multiplied by\n    # two ways to arrange Chantel and Cole around this unit (ChC or CCh).\n    # The pair of Claire & Tony can sit in two different ways (next to each other or with one person between them),\n    # multiplied by two different orientations each, giving us a total of four arrangements.\n    restricted_arrangements = 2 * 2 * 2 * 2 \n    \n    allowed_arrangements = total_arrangements - restricted_arrangements\n    \n    return allowed_arrangements\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    perm = sorted(permutations(digits))\n    fifth_perm = perm[4]\n    return int(''.join(fifth_perm))\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    import math\n\n    num_bottles = 1000\n    # We need to find the minimum number of test tubes that can uniquely identify one bottle out of 1000\n    num_test_tubes = math.ceil(math.log(num_bottles, 2))\n\n    return num_test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs = 10\n    removed_chairs = 3\n    total_distance = 36\n    remaining_chairs = total_chairs - removed_chairs\n    \n    # Distance between chairs with all 10 chairs placed\n    distance_with_all_chairs = total_distance / (total_chairs - 1)\n    \n    # Distance between chairs with 3 chairs removed\n    new_distance = distance_with_all_chairs * ((total_chairs - 1) / (remaining_chairs - 1))\n    \n    return new_distance\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Since each brother has at least two books, we start from two books each and distribute the remaining 4 books\n    for x1 in range(2, 11):\n        for x2 in range(2, 11):\n            if x1 + x2 >= 10:\n                continue\n            x3 = 10 - x1 - x2\n            if x3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the fourth angle, then the third angle is 5x\n    x = symbols('x')\n    # Sum of angles in a quadrilateral is 360 degrees\n    equation = Eq(90 + 90 + 5*x + x, 360)\n    \n    # Solve for x\n    angle_fourth = solve(equation, x)[0]\n    # The largest angle is the third angle which is 5 times the fourth angle\n    angle_third = 5 * angle_fourth\n    \n    return angle_third\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    dp = [0] * 11  # Create a list with 11 zeros, representing ways to reach each step\n    dp[0] = 1  # There is one way to stand still at the bottom (0 steps)\n\n    for i in range(1, 11):\n        if i == 5:  # Skip the muddy 5th step logic\n            continue\n        dp[i] += dp[i - 1]  # Ways to reach current step by taking 1 step from previous\n        if i > 1:\n            dp[i] += dp[i - 2]  # Ways to reach current step by taking 2 steps\n        if i > 2:\n            dp[i] += dp[i - 3]  # Ways to reach current step by taking 3 steps\n        # Avoid counting ways that include stepping on the fifth step\n        if i > 5:\n            dp[i] -= dp[i - 5]\n    return dp[10]\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    for small_boxes in range(54 // 5 + 1):\n        for medium_boxes in range(54 // 7 + 1):\n            for large_boxes in range(54 // 10 + 1):\n                if small_boxes * 5 + medium_boxes * 7 + large_boxes * 10 == 54:\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            paired_factor = 7007 // i\n            if paired_factor % 7 == 0 and 10 <= paired_factor <= 99:\n                factors.append(i)\n                factors.append(paired_factor)\n                break\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = [i for i in range(1, 10) for _ in range(i)]\n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    fraction = 6 / 7\n    number = 42\n    ans = fraction * number\n    return ans\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    speed_mph = 65  # miles per hour\n    # Convert 65 miles per hour to kilometers per hour (1 mile = 1.60934 kilometers)\n    speed_kmph = speed_mph * 1.60934\n    \n    time_hours = 15 / 60  # Convert 15 minutes to hours\n    \n    # Distance = speed * time\n    distance_km = speed_kmph * time_hours\n    \n    return distance_km\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n    \n    # Equation representing the initial state\n    equation1 = Eq(frogs_begin, dragonflies_begin + 9)\n    \n    # Equation representing the transformation state, assuming the total number remains constant\n    equation2 = Eq(frogs_begin - (11 - 10), dragonflies_begin + (11 - 10))\n    \n    # Solve the equations to find the number of frogs in the beginning\n    solutions = solve((equation1, equation2), (frogs_begin, dragonflies_begin))\n    \n    return solutions[frogs_begin]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    distance_per_day = 5\n    slide_per_night = 3\n    total_distance = 16\n    net_progress_per_day = distance_per_day - slide_per_night\n    \n    days = 0\n    current_distance = 0\n    \n    while True:\n        days += 1\n        current_distance += distance_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n        \n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_away\n    num_bottles = remaining_cookies / cookies_per_bottle\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    # Define a variable that represents the number of muffins\n    muffins = symbols('muffins')\n    \n    # Equation: cookies = muffins + 24\n    cookies = muffins + 24\n    \n    # After selling part of them, she has 74 left\n    # 3/4 of the muffins are sold, so 1/4 are left: (1/4) * muffins\n    # 5/8 of the cookies are sold, so 3/8 are left: (3/8) * cookies\n    equation = Eq((1/4) * muffins + (3/8) * cookies, 74)\n    \n    # Solve the equation\n    solution = solve(equation, muffins)\n    \n    # Calculate the initial number of cookies\n    initial_cookies = solution[0] + 24\n    \n    return initial_cookies\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for i in range(999, 99, -1):  # Start checking from the greatest 3-digit number\n        if i % 25 == 0:  # If the number is a multiple of 25\n            return i     # Return that number as the greatest multiple of 25 with exactly 3 digits\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_rate_one_entrance = 25\n\n    total_minutes_one_entrance = 16\n    total_visitors = visitors_per_minute * total_minutes_one_entrance\n    check_in_rate_two_entrances = check_in_rate_one_entrance * 2\n\n    minutes_two_entrances = total_visitors / check_in_rate_two_entrances\n\n    return minutes_two_entrances\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    met_ticket_price = 2  # The cost of the met ticket for one way\n    met_round_trip = 2 * met_ticket_price  # The cost of the met round trip\n    coffee_price = 3  # The cost for a cup of coffee\n    game_ticket_price = 14  # The cost of the entry fee to the game\n\n    total_cost_per_person = met_round_trip + coffee_price + game_ticket_price\n    richard_budget = 40\n\n    # Number of friends Richard can treat (excluding tickets for himself)\n    num_friends = (richard_budget - total_cost_per_person) // total_cost_per_person\n\n    return num_friends\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    # Since the number is even and not divisible by 5, A cannot be 5 or any odd number\n    # Possible values for A are 0, 2, 4, 6, and 8\n    \n    # Check each possible value of A\n    for A in [0, 2, 4, 6, 8]:\n        number = int(f\"123{A}456{A}789{A}0\")\n        \n        # Check divisibility by 9 using the rule that the sum of the digits must be divisible by 9\n        digits_sum = sum(int(digit) for digit in str(number))\n        if digits_sum % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Speed ratio of the driver to the cyclist\n    speed_ratio_driver_cyclist = 13 / 2\n\n    # Additional time taken by the cyclist in minutes\n    additional_time_cyclist = 143\n\n    # Assuming the driver takes x minutes to reach the destination\n    # Then the cyclist will take (13/2) * x to reach\n    # Given that the cyclist takes additional 143 minutes:\n    # x + 143 = (13/2) * x\n    # Solving the equation for x gives us the driver's time\n    x = symbols('x')\n    equation = Eq(x + 143, (speed_ratio_driver_cyclist) * x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the driver's time in minutes\n    return solution[0]\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum([i**3 for i in range(2, n+1)])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    sausage_rolls_cost = 4 * 24\n    hotdogs_cost = 5 * 81\n    drinks_cost = 7 * 20\n    total_cost = sausage_rolls_cost + hotdogs_cost + drinks_cost\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Analyzing the logical statements\n    # Assume each statement to be correct and check for consistency with the other statements\n    for i in range(1, 6):\n        if i == 1:\n            # If statement 1 is true, then all statements are true, which is a contradiction.\n            # (because at least one of the other statements says it is the only correct statement)\n            continue \n        elif i == 2:\n            # If statement 2 is true, then none of the statements including itself is correct, which is a contradiction.\n            continue\n        elif i == 3:\n            # If statement 3 is true, then one of the statements 1 or 2 is correct.\n            # This is not possible because if statement 1 or 2 is correct, it contradicts statement 3 itself.\n            continue\n        elif i == 4:\n            # If statement 4 is true, then all statements above are correct.\n            # This is a contradiction as it would mean this statement itself and statement 5 are both true, which cannot be the case.\n            continue\n        elif i == 5:\n            # If statement 5 is true, then none of the statements above it are true, and since all other combinations lead to contradictions, statement 5 must be the correct one.\n            return 5\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of coins on the table as 'c'.\n    c = symbols('c')\n\n    # According to the problem, initially one quarter of the coins are showing heads.\n    initial_heads = c / 4\n\n    # If we turn over two more coins to show heads, we'll have.\n    heads_after_turning = initial_heads + 2\n\n    # According to the problem, after turning two more coins, one third of the coins are showing heads.\n    equation = Eq(heads_after_turning, c / 3)\n\n    # Solve the equation for 'c'.\n    number_of_coins = solve(equation, c)\n\n    return number_of_coins[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    # Total shows = singing shows + comedy shows\n    total_shows = 5 + 3\n    # Choose 5 positions out of 8 for singing shows, rest will automatically be for comedy shows\n    # Since comedy shows cannot be consecutive, we can think of placing 5 singing shows first\n    # and then finding spaces for 3 comedy shows where they are not consecutively placed.\n    # There are 6 slots surrounding singing shows for placement (before and after each show) and 1 additional at the end\n    # So, we need to select 3 positions for comedy shows out of these 6 possible positions (slots between singing shows)\n    total_ways = factorial(6) // (factorial(3) * factorial(6 - 3))\n    return total_ways\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    planes = 2\n\n    total_ways = trains + cars + planes\n\n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    road_length = 500  # total road length to pave in meters\n    total_days = 5     # total days to complete the paving\n\n    meters_per_day = road_length / total_days  # meters paved in one day\n\n    return meters_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    sum_of_digits = 0\n    # Incrementing the recurring digits after the first one:\n    # 0.2222... + 0.00333... + 0.000444... + 0.00005555... + ...\n    # Each sequence of repeating digits forms the series 2+2+2+... for 2100 digits\n    for i in range(1, 10):\n        # Calculate number of times the digit 'i' appears in the first 2100 places\n        occurrences = 2100 // (i + 1)\n        # Since we might not have a complete set of occurrences for the last digit\n        remainder = 2100 % (i + 1)\n        if remainder > i:\n            occurrences += 1\n        sum_of_digits += occurrences * i\n    return sum_of_digits\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    # Convert each fractional value to a decimal\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    # Sort the list of values\n    sorted_values = sorted(values)\n    # Calculate the index of the middle value\n    middle_index = len(sorted_values) // 2\n    # Get the middle value\n    ans = sorted_values[middle_index]\n    return ans\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq((5 * x + 7) / 4, 8)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq((x / 2) - 9, 12)\n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n    \n    # There are 6 people to sit in 8 seats, but as the table is circular\n    # seating arrangements that can be rotated into each other count as the same.\n    # Fix one person's position to account for rotation, then arrange the remaining\n    # 5 people in the remaining 7 seats.\n    ans = factorial(7) // factorial(7 - 5)\n    return ans\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    smallest_even_digit = min(filter(lambda x: x % 2 == 0, digits))\n    digits.remove(smallest_even_digit)\n    digits.sort()\n    smallest_four_digit_number = int(''.join(map(str, digits)) + str(smallest_even_digit))\n\n    return smallest_four_digit_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    steps = symbols('steps')\n    \n    # Let the number of steps of the escalator be \"steps\"\n    # The escalator moves at a certain rate, contributing to the number of steps Peter doesn't have to walk.\n    # When Peter walks at 1 step per second for 10 seconds, the escalator adds \"steps - 10\" to his own steps:\n    eq1 = Eq(1 * 10 + steps - 10, steps)\n    \n    # When Peter walks at 2 steps per second for 8 seconds, the escalator again adds \"steps - 16\" to his own steps:\n    eq2 = Eq(2 * 8 + steps - 16, steps)\n    \n    # Solve the two equations to find the number of steps in the escalator\n    solution = solve((eq1, eq2), (steps))\n    \n    return solution[steps]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    ans = total_dollars * quarters_in_one_dollar\n    return int(ans)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    # Total spent amount in pence\n    total_spent = (10 * 100) - (3 * 100 + 88)  # convert pounds to pence and subtract change\n    # Amount spent on chocolate bar\n    chocolate_bar = 72\n    # Amount spent on balloons\n    spent_on_balloons = total_spent - chocolate_bar\n    # Price of each balloon in pence\n    balloon_price = 20\n    # Number of balloons bought\n    num_balloons = spent_on_balloons // balloon_price\n    \n    return num_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    ans = lcm(3, 4, 10)\n    return ans\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_length = 2000\n\n    ans = (percentage / 100) * total_length\n\n    return ans\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "import math\n\ndef solution():\n    students = 17\n    capacity = 4\n    kayaks_needed = math.ceil(students / capacity)\n    return kayaks_needed\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    spent_money = spent_fraction * total_money\n    remaining_money = total_money - spent_money\n\n    # Let the cost of one slice of pizza be p and one cupcake be c\n    # We know that 3 slices of pizza is equal to 2 cupcakes: 3p = 2c\n    # Mark bought 5 cupcakes and 6 slices of pizza\n    # So the total spent money is for 5 cupcakes and 6 slices of pizza: 5c + 6p = spent_money\n    # Replacing 3p with 2c: 5c + 6/3 * 2c = spent_money\n    # Simplifying gives us: 5c + 4c = 9c = spent_money\n    # Now we can find the cost of one cupcake: c = spent_money / 9\n\n    cost_per_cupcake = spent_money / 9\n\n    # Greatest number of cupcakes he can buy with the remaining money:\n    max_cupcakes = remaining_money // cost_per_cupcake\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    a = 4 * (3 ** 0.5)\n    x = (3 * a) ** 2 / 3\n    return x\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    first_expression = (4 + 2) * 13\n    second_expression = 4 + (2 * 13)\n    ans = first_expression - second_expression\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let the youngest dwarf's age be 'x'.\n    # Then the next two dwarfs' ages would be 'x + 1' and 'x + 2' since they are born in consecutive years.\n    # The total age of the youngest three dwarfs is 42.\n    # x + (x + 1) + (x + 2) = 42\n    x = (42 - 3) // 3  # Subtract 3 (1+2) from 42 and divide by 3 to find 'x'.\n\n    # Now we find the age of the 4th dwarf, which is the middle term and also the average age.\n    middle_dwarf_age = x + 3\n\n    # The ages of the oldest three dwarfs would then be:\n    # (middle_dwarf_age + 1), (middle_dwarf_age + 2), (middle_dwarf_age + 3)\n    # The sum of the oldest three dwarfs' ages is:\n    sum_oldest_three = (middle_dwarf_age + 1) + (middle_dwarf_age + 2) + (middle_dwarf_age + 3)\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):\n        if len(set(str(number))) == len(str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n    \n    # The formula to find the nth term in an arithmetic sequence is:\n    # last_term = first_term + (n - 1) * difference\n    # Solving for n gives us the number of terms (months)\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n    digits = [2, 3, 5]\n    num_permutations = len(list(permutations(digits, 3)))\n    return num_permutations\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "from sympy import sqrt\n\ndef solution():\n    count = 0\n    num = 2\n    while True:\n        number_str = '2' + '5' * num\n        if len(number_str) > 15:  # Arbitrarily large number to stop\n            break\n        number = int(number_str)\n        root = sqrt(number)\n        if root == int(root):\n            count += 1\n        num += 1\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    original_pieces = 10\n    total_pieces_after_cut = 16\n\n    # The number of the pieces of paper cut into three parts can be represented by x.\n    # Each piece cut into three creates two additional pieces.\n    # The total number of pieces after cutting is original_pieces + 2*x.\n\n    # original_pieces + 2*x = total_pieces_after_cut\n    # 2*x = total_pieces_after_cut - original_pieces\n    # x = (total_pieces_after_cut - original_pieces) / 2\n\n    x = (total_pieces_after_cut - original_pieces) // 2\n\n    return x\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # First, we determine the rate of production per worker per minute\n    rate_per_worker_per_minute = (120 / 6) / 4\n    \n    # Using the unitary method, determine the number of parts 3 workers can produce in 10 minutes\n    parts_for_machine = 3 * rate_per_worker_per_minute * 10\n    \n    # Return the calculated number of parts\n    return parts_for_machine\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    initial = 98\n    final = 44.1\n    percent_change = ((final - initial) / initial) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    n = 1\n    # loop from 1 to 2240 to check if 2240/n results in a perfect square\n    for i in range(1, 2241):\n        if 2240 % i == 0 and ((2240 // i) ** 0.5).is_integer():\n            n = i\n    return n\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 70 / 100\n    swimming_girls = 200\n\n    # Let the number of boys be b and the number of girls be g\n    # We know that g + b = total_pupils and 40% of boys can't swim, so 60% of boys can swim\n    # The total number of swimming pupils is the sum of swimming boys and swimming girls\n    # swimming_pupils = 0.6 * b + swimming_girls\n\n    # Rearrange the equation: 0.6 * b = swimming_pupils - swimming_girls\n    # Find b: b = (swimming_pupils - swimming_girls) / 0.6\n    # Then find g: g = total_pupils - b\n\n    b = (swimming_pupils - swimming_girls) / 0.6\n    g = total_pupils - b\n\n    return int(g)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples * (1/4)\n    non_rotten_apples = total_apples - rotten_apples\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n    \n    increase = final_value - initial_value\n    percent_increase = (increase / initial_value) * 100\n    \n    return percent_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for mass of sack of rice and packet of oatmeal\n    sack_of_rice, packet_of_oatmeal = symbols('sack_of_rice packet_of_oatmeal')\n\n    # Create the equations based on the problem\n    equation1 = Eq(3 * sack_of_rice + 3 * packet_of_oatmeal, 36)\n    equation2 = Eq(sack_of_rice, 2 * packet_of_oatmeal)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (sack_of_rice, packet_of_oatmeal))\n\n    # Return the mass of each sack of rice\n    return solutions[sack_of_rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation representing the mixture of sugar from both solutions\n    equation = Eq(0.30 * 4 + 0.10 * x, 0.26 * (4 + x))\n\n    # Solve for x\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_discount_percentage = (total_discount / original_price) * 100\n\n    return total_discount_percentage\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let j represent the mass of the jar and c represent the mass of one chocolate\n    j, c = symbols('j c')\n\n    # Set up equations based on the given information\n    equation1 = Eq(j + 5 * c, 185)\n    equation2 = Eq(j + 17 * c, 317)\n\n    # Solve the equations for j (the mass of the jar) and c (the mass of one chocolate)\n    solutions = solve((equation1, equation2), (j, c))\n\n    # Calculate the mass of the jar with 10 chocolates using the found values\n    mass_with_10_chocolates = solutions[j] + 10 * solutions[c]\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    number = 200\n    ways = 0  # Start with no ways found\n    for i in range(1, number):\n        if number % i == 0:  # If i is a divisor of number\n            # Each divisor corresponds to one way to write the sum (except for the number itself)\n            ways += 1\n    # Exclude the number itself as a way (as it's not a sum of parts)\n    return ways - 1\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def otimes(a, b):\n    return a * b - a - b + 1\n\ndef solution():\n    return otimes(otimes(2, 3), 4)\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # The total perimeter of the field\n    total_perimeter = 2 * (144 + 204)\n\n    # Since there's a wheat at every corner, we subtract 4 from 116,\n    # then divide the remaining 112 by the perimeter to find the distance between each wheat.\n    distance_between_wheat = total_perimeter / (116 - 4)\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # We let x be Lana's initial amount of sweets and y be Mark's initial amount of sweets.\n    x, y = symbols('x y')\n\n    # We create our equations based on the given information.\n    # Lana gave away 1/3 of her sweets, so she has 2/3 left.\n    # Mark ate 34 of his sweets.\n    # After that, they had the same number of sweets.\n    # The sum of their sweets is 674.\n    equation1 = Eq((2/3) * x, y - 34)\n    equation2 = Eq(x + y, 674)\n\n    # We solve the equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The difference in the number of sweets they originally had\n    lana_more = solutions[x] - solutions[y]\n\n    return lana_more\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    \n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    # Variables to represent fractions of the summer\n    half = 1/2\n    half_of_half = half * half  # which is a quarter (1/4)\n    two_weeks_in_days = 2 * 7\n    days_at_friend = 4\n\n    # Total holiday duration = working in music store (1/2) + reading/relaxing at home (1/4) + days at a friend's house (4 days) + summer camp (2 weeks)\n    # Let the total holiday duration be x days\n    # x = (1/2)x + (1/4)x + 4 + 14\n    # Rearranging terms we get:\n    # x - (1/2)x - (1/4)x = 4 + 14\n    # Multiplying all terms by 4 to clear the denominators:\n    # 4x - 2x - x = 18 * 4\n    # x = 18 * 4\n    x = 18 * 4\n\n    return x\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_for_one_cat_to_catch_one_fish = 10  # minutes\n    cats = 5\n    fish = 5\n\n    # Since all cats are catching fish simultaneously, the time doesn't change.\n    time_to_catch_five_fish_by_five_cats = time_for_one_cat_to_catch_one_fish\n\n    return time_to_catch_five_fish_by_five_cats\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    perimeter = 2 * (144 + 204)  # Calculate the perimeter of the field.\n    # Total wheats count have four corners included\n    # need to exclude 4 corners to find the actual intervals\n    intervals = (116 - 4)  \n    # Calculate the distance between every 2 wheats\n    distance = perimeter / intervals  \n    return distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result_after_operations = 81\n\n    # Reverse the operations\n    original_number = result_after_operations / 9  # Reverse multiplication by 9\n    original_number *= 4  # Reverse division by 4\n    original_number -= 3  # Reverse addition of 3\n\n    return original_number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remainder = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remainder\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    bracelets_to_make = total_bracelets - bracelets_made\n\n    return bracelets_to_make\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40 / 1  # Ellie's weekly rate\n    combined_weeks = 4\n    combined_rate = total_people / combined_weeks  # Combined weekly rate for Ellie and Gloria\n\n    # Calculate Gloria's weekly rate\n    gloria_rate = combined_rate - ellie_rate\n\n    # Calculate how many weeks Gloria needs to interview everyone by herself\n    gloria_weeks = total_people / gloria_rate\n\n    return gloria_weeks\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n    \n    for perm in permutations('123456789', 4):  # Avoiding 0 and 2 as B=2 and D=0\n        A, C, E, F = perm\n        ABCDEF = int(f\"{A}2{C}0{E}{F}\")\n        EFABCD = int(f\"{E}{F}A2BC\")\n        if 5 * ABCDEF == 6 * EFABCD:\n            FACE = int(f\"{F}{A}{C}{E}\")\n            return FACE\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    return (3/8) * 48\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    # Amount of rice in dogfood A (in pounds)\n    rice_in_A = 0.40 * 15\n    # Total amount of dogfood mixture (in pounds)\n    total_mixture = 15 + 60\n    # Total amount of rice in the mixture (in pounds)\n    total_rice_in_mixture = 0.28 * total_mixture\n    \n    # Calculate the amount of rice in dogfood B (in pounds)\n    rice_in_B = total_rice_in_mixture - rice_in_A\n    # Calculate the percent of rice in dogfood B\n    percent_rice_in_B = (rice_in_B / 60) * 100\n    \n    return percent_rice_in_B\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the numbers as a, b, c, d (a > b > c > d)\n    a, b, c, d = symbols('a b c d', positive=True, integer=True)\n\n    # d + (a + b + c) / 3 = 39\n    equation1 = Eq(d + (a + b + c) / 3, 39)\n\n    # a + (b + c + d) / 3 = 51\n    equation2 = Eq(a + (b + c + d) / 3, 51)\n\n    # We know: a + b + c + d = 3(39) \n    # and also a + b + c + d = 3(51) but d is included twice and a once.\n    # We can thus form a third equation which is the sum of all numbers\n    equation3 = Eq(2*a + b + c + 2*d, (3*39 + 3*51))\n\n    # Since the numbers are distinct and positive, a has to be greater than d, b, and c\n    inequalities = [\n        a > b,\n        b > c,\n        c > d,\n        a > d\n    ]\n\n    # We find the solutions given the equations and inequalities\n    solutions = solve((equation1, equation2, equation3) + tuple(inequalities), (a, b, c, d))\n\n    # We will only keep solutions which satisfy the inequalities\n    valid_solutions = [sol for sol in solutions if all(ineq.subs(sol) for ineq in inequalities)]\n\n    # The largest possible value of the largest number a\n    max_a = max(sol[a] for sol in valid_solutions)\n\n    return max_a\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15  # in milliliters\n    total_minutes = 2 * 60  # converting hours to minutes\n    total_leakage = leak_rate_per_minute * total_minutes  # in milliliters\n    total_leakage_in_litres = total_leakage / 1000  # converting milliliters to litres\n    return total_leakage_in_litres\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n\n    # Calculate number of intervals by dividing the road length by the tree interval.\n    # Add 1 because trees are at both ends of the road.\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Speed of Barbara = 60 m/min\n    # Speed of Catherine = 45 m/min\n    # Difference in distance when Barbara reaches = 60 m\n    # Let's use relative speed to calculate the time taken by Barbara to make this difference.\n\n    relative_speed = 60 - 45  # Since they are moving in the same direction\n    time_to_difference = 60 / relative_speed  # Time taken by Barbara to create a 60 meter difference\n    \n    # Now we know the time, we can calculate the distance travelled by Barbara in this time.\n    distance_to_mall = 60 * time_to_difference\n\n    return distance_to_mall\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, pen = symbols('book pen')\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n    \n    solutions = solve((equation1, equation2), (book, pen))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    ten_dollar_notes = 2\n    five_dollar_notes = 5\n    twenty_cent_coins = 4\n    total_change = ten_dollar_notes * 10 + five_dollar_notes * 5 + twenty_cent_coins * 0.20\n    total_money_given = 100\n    spent_money = total_money_given - total_change\n    return spent_money\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B + C, 200)\n    equation2 = Eq(A, 4/7*(A+B))\n    equation3 = Eq(A, C + 20)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    \n    solutions = solve((equation,), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3  # minutes to fry one plate\n    total_time = 18  # total frying time in minutes\n\n    num_plates = total_time // time_per_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    nini, dad = symbols('nini dad')\n\n    # Equation 1: Dad is 25 years older than Nini\n    eq1 = Eq(dad, nini + 25)\n\n    # Equation 2: After 5 years, dad's age will be 8 less than twice Nini's age\n    eq2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    facing_teacher = 0\n    for student in range(1, 51):\n        if student % 4 == 0:\n            facing_teacher -= 1\n        if student % 6 == 0:\n            facing_teacher += 1  # Reverse again if turned for both 4 and 6 (i.e., multiple of 12)\n    return 50 + facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    numerator = 471471471471\n    denominator = 157157157157\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    pears_sold_first_day = total_pears * (2/5)\n    remaining_pears_after_first_day = total_pears - pears_sold_first_day\n    pears_sold_second_day = remaining_pears_after_first_day * (7/9)\n\n    return pears_sold_second_day\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # Since at least one student gets at least 3 apples, we remove those 3 apples from the total.\n    remaining_apples = 29 - 3\n\n    # Now distribute the remaining 26 apples among the students.\n    # Because each student must get at least 1 apple, by the pigeonhole principle,\n    # the maximum number of students equals the number of remaining apples.\n    # This is because if each student gets 1 apple, we would need just as many students as apples.\n\n    return remaining_apples  # This gives us the size of the class.\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    ways = boys * girls\n\n    return ways\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reversed_num = int(str(num)[::-1])\n            if isprime(reversed_num) and reversed_num != num:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the initial number of green balls\n    # Let b represent the initial number of blue balls\n    g, b = symbols('g b')\n\n    # Equation 1: Total number of balls initially\n    equation1 = Eq(g + b, 140)\n\n    # Equation 2: After removing balls, green balls are equal to blue balls\n    # After removing (2/5)*b of the blue balls, the number of blue balls left: b - (2/5)*b = (3/5)*b\n    # After removing 28 green balls, the number of green balls left: g - 28\n    # The number of blue balls is equal to the number of green balls after removal\n    equation2 = Eq((3/5)*b, g - 28)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Assuming each bar is equally likely to be visited, we calculate the probability\n    # he is not at two bars and hence must be at the third.\n    # Since the events are disjoint, the third bar is the complement of the other two.\n    \n    # Probability he is not at the first bar\n    prob_not_at_first = 1 - 1/3\n    \n    # Probability he is not at the second bar (given he is not at the first)\n    prob_not_at_second = 1 - 1/3\n    \n    # Probability he is at the third bar\n    prob_at_third = 1 - (prob_not_at_first * prob_not_at_second)\n    \n    return prob_at_third\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot_now = symbols('eliot_now')\n    cousin_now = symbols('cousin_now')\n\n    equation1 = Eq(eliot_now, 2 * cousin_now)      # Eliot is now twice his cousin's age\n    equation2 = Eq(eliot_now + 4, 16)             # In 4 years' time Eliot will be 16\n\n    solutions = solve((equation1, equation2), (eliot_now, cousin_now))\n\n    cousin_future_age = solutions[cousin_now] + 4  # cousin's age in 4 years' time\n\n    return cousin_future_age\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) // 2\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_fish = 16\n    total_caught_second_time = 100\n    estimated_population = (total_caught_second_time * total_caught_second_time) / marked_fish\n    return estimated_population\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let the total distance that Nancy walked be x meters.\n    # Since Randy walks 3m for every 2m that Nancy walks, Randy walks (3/2)x meters.\n    # When they meet, Randy has walked 10m more than Nancy, so we have the equation (3/2)x = x + 10.\n    # To find x, we solve the above equation.\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3/2)*x, x + 10)\n    distance_nancy = solve(equation, x)[0]\n    \n    # The total distance Randy walked when they meet is x + 10.\n    distance_randy = distance_nancy + 10\n    \n    # The total distance between them when they set off is the sum of the distances they both walked.\n    total_distance = distance_nancy + distance_randy\n    \n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    \n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numer = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denom = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n    ans = numer / denom\n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let the repeating decimal be a variable y\n    y = 0.20141414141414  # ...\n    \n    # Multiply y by 100 to shift two decimal places (shifts the repeating part to the right of decimal)\n    # 100y = 20.1414141414...\n    # Subtract the original y from this to get rid of the repeating part\n    # 100y - y = 20.1414141414... - 0.201414141414...\n    # 99y = 20 - 0.20 = 19.8\n    \n    # Therefore y == 19.8 / 99\n    y = 19.8 / 99\n    \n    # We know that x / 9900 = y, therefore x = 9900 * y\n    x = 9900 * y\n    \n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    \n    # Ali has 5 marbles less than the average of Bronson's and Charlie's\n    equation1 = Eq(ali, (bronson + charlie) / 2 - 5)\n    \n    # Bronson has twice as many marbles as Ali\n    equation2 = Eq(bronson, 2 * ali)\n\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n\n    ans = sum1 - sum2\n\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    \n    # Alice is twice as old as her sister now.\n    equation1 = Eq(alice, 2 * sister)\n    \n    # In 10 years, their total age is 53 years old.\n    equation2 = Eq(alice + sister + 20, 53)  # added 20 because both will be 10 years older\n    \n    # Get the solution for Alice's age\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    # The three digits we will be generating.\n    for d1 in range(1, 10):  # The hundreds place cannot be 0.\n        for d2 in range(0, 10):  # The tens place can be 0.\n            for d3 in range(0, 10, 2):  # The ones place must be even.\n                if d1 + d2 + d3 == 8 and len({d1, d2, d3}) == 3:\n                    # If the sum of the digits is 8 and all digits are different\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000):\n        if num % 10 == 2:\n            new_num = int(str(2) + str(num)[:-1])\n            if new_num == num // 3:\n                return num\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n    \n    # Since 12 students failed the second exam, 30 - 12 students passed it.\n    passed_second_exam = total_students - failed_second_exam\n    \n    # To find the number of students who passed only the first exam,\n    # subtract the number of students who passed the second exam\n    # from the number of students who passed the first exam, \n    # and then add the students who passed the second exam but failed the first.\n    passed_only_first_exam = passed_first_exam - passed_second_exam + passed_second_failed_first\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 3 (mod 5), x ≡ 6 (mod 8), and x ≡ 7 (mod 9)\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    x, _ = solve_congruence(*congruences)\n    \n    # Ensure that the solution is between 500 and 1000\n    while x < 500:\n        x += 5 * 8 * 9\n\n    ans = x if x < 1000 else None\n    return ans\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n    remainder = total_bars % people\n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # We need to find the sum of all possible three-digit numbers\n    # formed by digits a, b and c without repetition. Each digit will\n    # occur in each place (hundreds, tens, ones) two times\n    \n    # Place value contribution for each digit when placed at hundreds place is 100\n    # Place value contribution for each digit when placed at tens place is 10\n    # Place value contribution for each digit when placed at ones place is 1\n\n    # Since each digit occurs twice in each place, multiply the place value sum by 2\n    sum_hundreds = 2 * (a + b + c) * 100\n    sum_tens = 2 * (a + b + c) * 10\n    sum_ones = 2 * (a + b + c) * 1\n\n    # The total sum is the sum of individual contributions\n    total_sum = sum_hundreds + sum_tens + sum_ones\n\n    return total_sum\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):  # since 'ab' is a two-digit number, a cannot be 0\n        for b in range(10):\n            num = a * 10 + b\n            rev_num = b * 10 + a\n            product = num * rev_num\n            \n            if product % 100 == 0:  # Check if ones and tens digits are 0\n                return num\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    hours_for_78 = 6.5\n    rate_per_hour = 78 / hours_for_78\n    hours_for_300 = 300 / rate_per_hour\n    return hours_for_300\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of potatoes in the large sack and small sack\n    large_sack, small_sack = symbols('large_sack small_sack')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(large_sack, small_sack + 0.20 * small_sack)  # large sack holds 20% more than small\n    equation2 = Eq(large_sack + small_sack, 77)  # Together they contain 77 potatoes\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (large_sack, small_sack))\n    \n    # Get the number of potatoes in the large sack\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    total_fruits = 125\n    sold_oranges = 35\n\n    # Let x be the number of oranges Mrs Lee had at first.\n    # Then, the number of apples she had at first is total_fruits - x.\n    # After selling, she had x - sold_oranges oranges and (total_fruits - x) / 2 apples left.\n    # According to the problem, the remaining oranges and apples are equal in number.\n    # So we set up an equation x - sold_oranges = (total_fruits - x) / 2\n\n    x = (total_fruits + 2 * sold_oranges) / 3  # Solving the equation for x\n\n    return int(x)\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    fraction = 5 / 9\n    ans = round(fraction, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (the first 5-digit number that reads the same forwards and backwards)\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome is 999999 (the largest 6-digit number that reads the same forwards and backwards)\n    greatest_6_digit_palindrome = 999999\n    \n    # The difference between the greatest 6-digit palindrome and the least 5-digit palindrome\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    total_students = 35\n    capacity_per_cabin = 6\n    min_cabins_needed = (total_students + capacity_per_cabin - 1) // capacity_per_cabin\n    return min_cabins_needed\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 59):\n        total_digits += len(str(number))\n\n    return total_digits\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    number_of_digits_in_group = [9, 90 * 2, 900 * 3]\n    current_position = 2011  # Start counting from the right\n    \n    # Find the group where the 2011th digit from the right falls\n    group = 0\n    while current_position > number_of_digits_in_group[group]:\n        current_position -= number_of_digits_in_group[group]\n        group += 1\n    \n    # Calculate which number in that group has the digit\n    if group == 0:\n        # The position is directly the number since each number is one digit\n        digit = current_position\n    else:\n        digits_per_number = group + 1\n        number_position = (current_position - 1) // digits_per_number\n        digit_in_number = (current_position - 1) % digits_per_number\n        number = 10**group + number_position\n        \n        # Since it is from the right, we read the number from right to left\n        reverse_number = str(number)[::-1]\n        digit = int(reverse_number[digit_in_number])\n    \n    return digit\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins\n    x = symbols('x')\n    # A quarter of coins were heads initially\n    heads_initial = x / 4\n    # After turning over 2 more coins, one third of the coins are heads\n    heads_final = (heads_initial + 2) / x\n\n    # Equation representing the final state\n    equation = Eq(heads_final, 1/3)\n\n    # Solve the equation\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    # Number of books on the right of the picture book\n    books_on_right = 6\n    # Position of the picture book from the left\n    position_from_left = 14\n\n    # Total number of books is the number of books on the right plus the position of the picture book\n    total_books = books_on_right + position_from_left\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    # arithmetic sequence: a_n = a_1 + (n - 1)d\n    # here a_1 = 5 (first term), d = 5 (common difference)\n\n    # Find the last term that is a multiple of 5 and less than or equal to 50\n    # This could also be found with 50 // 5 * 5, but taking 50 directly works because it's a multiple of 5\n    last_term = 50\n\n    # Find the number of terms in the sequence\n    num_terms = last_term // 5\n\n    # Sum of arithmetic sequence: n/2 * (a_1 + a_n)\n    total_sum = num_terms / 2 * (5 + last_term)\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km/minute\n    speed_planet2 = 40  # km/minute\n    time = 5  # minutes ago\n\n    # Total distance apart 5 minutes ago\n    distance_apart = (speed_planet1 + speed_planet2) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Each car has 4 tyres, each motorbike has 2 tyres\n    # Let the number of cars be x and the number of motorbikes be y\n    # We have two equations based on the problem statement:\n    # x + y = 140 (total number of vehicles)\n    # 4x + 2y = 490 (total number of tyres)\n    \n    # Rearrange the first equation: y = 140 - x\n    # Substitute y in the second equation:\n    # 4x + 2(140 - x) = 490\n    # 4x + 280 - 2x = 490\n    # 4x - 2x = 490 - 280\n    # 2x = 210\n    # x = 105\n    \n    # The number of cars is x\n    num_cars = 210 // 2\n    return num_cars\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # We can form two-digit numbers by selecting from the digits 1-5 for the first digit\n    # (since the number cannot start with 0), and selecting from the digits 0-5 for the second digit.\n    # This is a simple permutation problem without repetition.\n    \n    # Available choices for the first digit (cannot be zero) = 5 (1, 2, 3, 4, 5)\n    first_digit_choices = 5\n    \n    # Available choices for the second digit = 6 (0, 1, 2, 3, 4, 5)\n    second_digit_choices = 6\n    \n    # The total count is the product of the choices for the first and second digit\n    total_count = first_digit_choices * second_digit_choices\n    \n    return total_count\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    common_difference = 34 - 26\n    last_term = 626\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    price_after_discount = 64\n    discount_rate = 0.20\n    original_price = price_after_discount / (1 - discount_rate)\n    \n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n    \n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n    \n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    a = symbols('a')\n    number = symbols('number')\n\n    # Equations based on the remainders and the relationship between the numbers and 'a'\n    equation1 = Eq(190 % number, a)\n    equation2 = Eq(137 % number, a + 4)\n    equation3 = Eq(101 % number, a + 6)\n\n    # Solve the system of equations for 'number'\n    solutions = solve((equation1, equation2, equation3), (a, number))\n\n    # Assuming the number is the same in all cases, get the common divisor\n    divisor = None\n    for sol in solutions:\n        if div := sol[number]:  # Verify that the solution for number is not zero\n            divisor = div\n            break\n\n    # Find the remainder when 299 is divided by the identified number (divisor)\n    remainder = 299 % divisor\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = -1\n    daily_progress = day_distance + night_distance\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n        \n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_kilograms = 960\n    per_box_kilograms = 8\n    num_boxes = total_kilograms // per_box_kilograms\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    final_number = 26\n    added_number = 12\n\n    original_number = (final_number - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 13 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25/100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    students_per_class = 100\n    total_classes = 5\n    donation_per_student = 5.78\n\n    total_donation = students_per_class * total_classes * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    max_sum = 0\n    for x in range(2, 200):\n        if all(x % i != 0 for i in range(2, int(x**0.5) + 1)):\n            y = 200 - x\n            if x * (2 + y) == 200 + y and x != y and all(y % i != 0 for i in range(2, int(y**0.5) + 1)):\n                max_sum = max(max_sum, x + y)\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    duplicate_2 = 2\n    duplicate_3 = 2\n\n    total_ways = factorial(total_digits) // (factorial(duplicate_2) * factorial(duplicate_3))\n\n    return total_ways\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Bud spends 2p which is one-quarter of her money\n    spent = 2\n    fraction_spent = 1 / 4\n    \n    # Calculate the total money Bud had initially\n    total_money = spent / fraction_spent\n\n    return total_money\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sleepy, 80)\n    equation4 = Eq(doc + sleepy, dopey + sneezy)\n    equation5 = Eq(dopey, sneezy)\n    equation6 = Eq(dopey, bashful)\n    equation7 = Eq(dopey, grumpy)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    rounds_played = teams * (teams - 1) // 2\n    return rounds_played\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    numerator = (5 + 1/6) + (6 + 1/5)\n    denominator = (1/6) + (1/5)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]  # Index 4 because lists are zero-indexed in Python\n    return int(fifth_number)\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_for_2600_meters = 2600 / meters_per_day\n    return days_for_2600_meters\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_original = 250  # distance covered in 5 hrs\n    time_original = 5  # original time\n    time_new = 3  # new time to find distance for\n\n    speed = distance_original / time_original  # speed = distance / time\n    distance_new = speed * time_new  # new distance = speed * new time\n\n    return distance_new\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60):\n        if num % 8 == 3 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let's denote the numbers on the hats as q, r, and s for Qiang, Rory, and Sophia, respectively.\n    # According to the problem statement, we have:\n    # r + s = 11 (total on Qiang's hat)\n    # q + s = 17 (total on Rory's hat)\n    # q + r = 22 (total on Sophia's hat)\n    # We need to solve these equations to find the individual numbers, and then find the largest one.\n\n    # We can solve for one variable in terms of the others and substitute into other equations.\n    # From the first equation: s = 11 - r\n    # Substitute s in the second equation: q + (11 - r) = 17\n    # Now solve for q: q = 17 - 11 + r = r + 6\n    # Substitute q and s into the third equation:\n    # (r + 6) + r = 22\n    # 2r + 6 = 22\n    # 2r = 16\n    # r = 8\n    # Now that we have r, we can find q and s:\n    q = r + 6   # q = 8 + 6\n    s = 11 - r  # s = 11 - 8\n    # Find the largest number\n    largest_number = max(q, r, s)\n    return largest_number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    num_trees = 30\n    distance_between_trees = 5\n    road_length = (num_trees - 1) * distance_between_trees\n    \n    return road_length\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (1 + 1/i)\n    ans = product\n    return ans\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import primerange, isprime\n\ndef solution():\n    prime_numbers = list(primerange(1, 21))\n    count = 0\n    for prime in prime_numbers:\n        if isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    ans = 54 * 7\n    return ans\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define symbol x to represent Andy's speed\n\n    distance_1 = x * (30/60)        # distance covered in first 30 minutes\n    distance_2 = (x - 20) * (30/60) # distance covered in second 30 minutes\n    distance_3 = (x + 10) * (30/60) # distance covered in last 30 minutes\n\n    equation = Eq(distance_1 + distance_2 + distance_3, 70) # total distance is 70 miles\n\n    solution = solve(equation, x)\n    return solution[0]  # the value of x\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # We can calculate the sum by considering the number of elements in the sequence\n    # Since the sequence is an arithmetic sequence, we can use the formula for the sum of an arithmetic series:\n    # Sum = n/2 * (first_term + last_term)\n    \n    # However, we only want to know if the sum is odd or even, not the actual sum.\n    # So we focus on the fact that the product of an even number and any other number is always even.\n    # We know that there are an odd number of terms (90 - 12) / 1 + 1 = 79 terms, an odd number.\n    # Since n (the number of terms) is odd, we can ignore it for now because the oddness or evenness of the sum\n    # will be determined by the sum of the first and last term only.\n\n    first_plus_last = 12 + 90\n\n    # If the sum of the first and last term is even, then n/2 * (first + last) will be even, because even * odd is even.\n    # If the sum of the first and last term is odd, then the overall sum will be odd, because odd * odd is odd.\n\n    # Determine if the sum of the first and last terms is odd or even\n    if first_plus_last % 2 == 0:\n        # Even sum means overall sum is even since number of terms (n) is odd\n        return \"Even\"\n    else:\n        # Odd sum means overall sum is odd since number of terms (n) is odd\n        return \"Odd\"\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n\n    # one-digit pages (1-9)\n    total_digits += 9\n\n    # two-digits pages (10-99)\n    total_digits += 2 * (99 - 10 + 1)\n\n    # three-digits pages (100-345)\n    total_digits += 3 * (345 - 100 + 1)\n\n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_per_bus = 25\n    num_buses = total_people / max_per_bus\n    return -int(-num_buses)  # Ceiling division to get the next integer if there is a remainder\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize_money = symbols('total_prize_money')\n\n    equation = Eq((1/5 + 1/15) * total_prize_money, 360)\n\n    total = solve(equation, total_prize_money)\n\n    return total[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # Since the coach is fixed in the middle, we need to arrange 6 players around them\n    # The captain has to be next to the coach, so there are 2 possible positions for the captain\n    captain_positions = 2\n    \n    # The remaining 5 players can be arranged in any order, which is a permutation of 5 players\n    other_players_permutations = factorial(5)\n\n    # Apply the multiplication principle\n    total_ways = captain_positions * other_players_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Start with an assumption of a possible square size\n    # The smallest square size with an outer layer of boys is 3 (1 girl in the middle)\n    # Iterate through the odd numbers since the square will have an odd side length (alternating boys and girls)\n    side_length = 3\n    while True:\n        # Calculate the number of boys: outer layer and every other layer inside\n        boys = (side_length * side_length + 1)//2\n        # Calculate the number of girls: layers in between the boys\n        girls = (side_length * side_length - 1)//2\n        # Check the condition that there are 20 more boys than girls\n        if boys - girls == 20:\n            # Calculate the total number of students\n            total_students = boys + girls\n            return total_students\n        # Increase the side_length by 2 to check the next possible square size\n        side_length += 2\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    \n    equation1 = Eq(3 * penguins + 25, 6 * (penguins - 1) + 1)\n    \n    solutions = solve(equation1, penguins)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    def get_term(n):\n        for number in range(1, n + 1):\n            if n <= number * (number + 1) // 2:\n                return number\n    \n    sum_of_terms = sum(get_term(i) for i in range(1, 31))\n    return sum_of_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    result = 0.25 * 20 + (1/5) * 30 + (2/3) * 18\n    return result\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n\n    # To ensure Cindy wins, she needs one more vote than the current highest after all votes are done\n    max_other_votes = max(alice_votes, betty_votes)\n    votes_left = total_votes - (alice_votes + betty_votes + cindy_votes)\n    \n    # Cindy needs one more vote than the max votes of others to win\n    required_votes_for_cindy_to_win = max_other_votes - cindy_votes + 1\n\n    # If there are not enough votes left for Cindy to ensure win, return 0, else the required extra votes\n    return max(0, required_votes_for_cindy_to_win)\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # First expression: 7 / -3.33... / cube root of -0.027\n    expr1_numerator = 7 / -(10 / 3)\n    expr1_denominator = (-27 / 1000) ** (1/3)\n    expr1 = expr1_numerator / expr1_denominator\n\n    # Second expression: 2^3 / 4^2 / (0.125 * (1.8 - (0.2 * 7)))\n    expr2_numerator = 2**3 / 4**2\n    expr2_denominator = 0.125 * (1.8 - (0.2 * 7))\n    expr2 = expr2_numerator / expr2_denominator\n\n    # Third expression: 0.1 / 0.142857... + (2 * 0.3)\n    expr3_part1 = 0.1 / (1 / 7)\n    expr3_part2 = 2 * 0.3\n    expr3 = expr3_part1 + expr3_part2\n\n    # Final result: expr1 + expr2 - expr3\n    ans = expr1 + expr2 - expr3\n\n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chelsia, brian = symbols('chelsia brian')\n    \n    # Equation representing the given relationship: 3/4 of Chelsia's money equals to 5/6 of Brian's money\n    equation1 = Eq(3/4*chelsia, 5/6*brian)\n    \n    # Equation representing the given relationship: Chelsia has $24 more than Brian\n    equation2 = Eq(chelsia, brian + 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    # Calculate the total amount of money for Chelsia and Brian\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina was 50 years old on 10th May 2005\n    gina_age_in_2005 = 50\n    # So, Gina was born in 2005 - 50 = 1955\n    \n    # James was 20 years old on 10th May 1997\n    james_age_in_1997 = 20\n    # So, James was born in 1997 - 20 = 1977\n    \n    # Gina's age when James was born is: Gina's birth year - James's birth year\n    gina_age_when_james_born = 1977 - 1955\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    base_salary = 2500\n    total_salary = 3300\n    commission_1_rate = 0.02\n    commission_2_rate = 0.05\n    commission_breakpoint = 25000\n    commission_extra_sales = (total_salary - base_salary) / commission_2_rate\n    total_sales = commission_breakpoint + commission_extra_sales\n\n    return total_sales\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ryan, audrey = symbols('ryan audrey')\n    \n    initial_ratio = Eq(ryan / audrey, 2 / 7)\n    new_ratio = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n    \n    solutions = solve((initial_ratio, new_ratio), (ryan, audrey))\n    \n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    # total height of six players\n    total_height_six_players = 6 * 150\n    \n    # average height of four players\n    average_height_four_players = 150 - 2\n    \n    # total height of four players\n    total_height_four_players = 4 * average_height_four_players\n    \n    # total height of the other two players\n    total_height_two_players = total_height_six_players - total_height_four_players\n    \n    # average height of the other two players\n    average_height_two_players = total_height_two_players / 2\n    \n    return average_height_two_players\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p1 = 0.4\n    \n    # Probability of failing the first attempt but passing the second\n    p2 = (1 - p1) * 0.5\n    \n    # Probability of failing the first two attempts but passing the third\n    p3 = (1 - p1) * (1 - 0.5) * 0.3\n    \n    # The total probability is the sum of the probabilities of passing on each attempt\n    total_probability = p1 + p2 + p3\n    \n    return total_probability\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    pages = 0\n    digits_in_page = 0\n\n    while total_digits > 0:\n        pages += 1\n        if pages < 10:\n            digits_in_page = 1\n        elif pages < 100:\n            digits_in_page = 2\n        elif pages < 1000:\n            digits_in_page = 3\n        elif pages < 10000:\n            digits_in_page = 4\n        \n        total_digits -= digits_in_page\n\n    return pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    last_term = first_term + (num_terms - 1) * difference\n\n    sum_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    rate_per_hour = 50\n    \n    hours_needed = total_pieces / rate_per_hour\n    \n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "from math import factorial\n\ndef solution():\n    n = factorial(15)\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n = n // 10\n    return count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grandpa_age = symbols('grandpa_age')\n    equation = Eq(grandpa_age/4 + 32, grandpa_age - 22)\n\n    age = solve(equation, grandpa_age)\n\n    return age[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    boys_more_than_girls = 44\n    total_students = 0\n    # Since the difference in boys and girls is given, and boys form the outer layers,\n    # we can start from 1 (the innermost layer if it's a girl) or 2 (if it's a boy)\n    # and try to find a square number pattern that satisfies the given difference.\n    for i in range(1, 1000, 2):  # We are checking for all possible square arrays\n        boys = (i + 2) ** 2 - i ** 2  # Calculate boys in the outer layer\n        girls = i ** 2 - (i - 2) ** 2 if i > 2 else 1  # Calculate girls in the next layer\n        if boys - girls == boys_more_than_girls:\n            total_students = (i + 2) ** 2  # The total students in the square array\n            break\n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_distance = 18\n    daily_climb = 7\n    sixth_day_climb = 3\n\n    # Calculate the distance climbed in the first 5 days\n    distance_in_5_days = daily_climb * 5\n\n    # Calculate the remaining distance after the 6th day's climb\n    remaining_distance_after_sixth_day = total_distance - (distance_in_5_days + sixth_day_climb)\n\n    # Since the snail gets out on the sixth day, it does not slide down anymore\n    # Therefore, sliding distance is the extra climb made on the fifth day\n    sliding_distance = daily_climb - remaining_distance_after_sixth_day\n\n    return sliding_distance\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Fastest to slowest: Eddie(1), Jack(2), Rose(5), Mary(10)\n    # Step 1: Eddie and Jack cross together (time elapsed: 2)\n    # Step 2: Eddie rows back (time elapsed: 1)\n    # Step 3: Rose and Mary cross together (time elapsed: 10)\n    # Step 4: Jack rows back (time elapsed: 2)\n    # Step 5: Eddie and Jack cross again (time elapsed: 2)\n    # Total time: 2 + 1 + 10 + 2 + 2 = 17 minutes\n\n    return 2 + 1 + 10 + 2 + 2\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let the original length be L and the original width be W\n    # The perimeter of the original rectangle is P = 2 * (L + W)\n    # After increasing the length by 12 cm, the new length is L + 12\n    # The perimeter of the new rectangle is P_new = 38 = 2 * (L + 12 + W)\n    # Simplify the above equation to find L + W:\n    L_plus_W = (38 / 2) - 12\n    # Calculate the perimeter of the original rectangle using L + W\n    P_original = 2 * L_plus_W\n\n    return P_original\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum((-1)**(i+1) * i**2 for i in range(1, 90))\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    prime_number = 2**19 - 1\n    remainder = prime_number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for i in range(30, 41):\n        if i % 3 == 1 and i % 4 == 1:\n            return i\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n\n    number_of_students = 4\n    ways_to_line_up = factorial(number_of_students)\n\n    return ways_to_line_up\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # We sort the students by the amount of apples they receive, so the first student gets the least apples and the fourth student gets the most.\n    max_apples_second_student = 0  # We initialize this variable to store the max number of apples the second student can get.\n    \n    # We iterate through the possible values for the first student.\n    for first_student in range(1, 48//4):  # The first student must get at least 1 apple, and can't get more than a quarter of the total.\n        remaining_after_first = 48 - first_student\n        \n        # We iterate through the possible values for the second student.\n        for second_student in range(first_student + 1, remaining_after_first//3):  # The second student must get more than the first student, and their maximum is limited by the remaining apples divided by the three remaining students.\n            remaining_after_second = remaining_after_first - second_student\n            \n            # We iterate through the possible values for the third student.\n            for third_student in range(second_student + 1, remaining_after_second//2):  # The third student must get more than the second student, and their maximum is limited by the remaining apples divided by the two remaining students.\n                fourth_student = remaining_after_second - third_student  # The fourth student gets the remaining apples.\n                if fourth_student > third_student:  # The fourth student must get more than the third student.\n                    max_apples_second_student = max(max_apples_second_student, second_student)  # We update the maximum for the second student if the current distribution allows for a higher value.\n\n    return max_apples_second_student\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Choices for the first day\n    first_day = ['chocolate']  # Fixed as chocolate\n\n    # Choices for the second day (since she can't eat chocolate again)\n    second_day = ['peaches', 'strawberries']\n\n    # Choices for the third day, depends on what she ate on the second day\n    third_day = {\n        'peaches': ['chocolate', 'strawberries'],\n        'strawberries': ['chocolate', 'peaches']\n    }\n\n    # Calculate the total number of ways\n    count = 0\n    for f in first_day:\n        for s in second_day:\n            count += len(third_day[s])\n\n    return count\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # Since order doesn't matter, we only need to consider the smaller number in each pair.\n    # We start from 1 and go up to half of 8 since after that, we'd just be switching the numbers\n    # which we consider the same as per the question.\n    half = 8 // 2\n    return half\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    # Let total_salary be the total salary Almaz had originally\n    # Almaz spent 5/9 of her salary on a television\n    # She has 4/9 of her salary left\n    \n    # Then she spent 3/4 of the remainder on a table\n    # So she has 1/4 of 4/9 of her total_salary left, which is 160 dollars\n    leftover = 160\n    total_salary = leftover / (1/4) / (4/9)\n\n    # The cost of the television is 5/9 of her total salary\n    television_cost = (5/9) * total_salary\n\n    return television_cost\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n    # Since rotation of the table doesn't change the order,\n    # we fix one person and arrange the remaining 6.\n    num_ways = factorial(6)\n    return num_ways\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5/3)\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John and Emma's current age\n    john_age, emma_age = symbols('john_age emma_age')\n\n    # Equation 1: In 3 years, the sum of John and Emma's ages will be 27\n    equation1 = Eq(john_age + emma_age + 3 * 2, 27)\n\n    # Equation 2: Emma's age is the difference between her own and John's ages\n    equation2 = Eq(emma_age, john_age - emma_age)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_age, emma_age))\n\n    # Emma's current age\n    return solutions[emma_age]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_earnings_per_day = 70\n    number_of_working_days = 6\n\n    total_earnings = average_earnings_per_day * number_of_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h, and Jack's speed is 50 km/h.\n    tom_speed = 48\n    jack_speed = 50\n\n    # Jack left 3 hours after Tom.\n    time_difference = 3\n\n    # After 5 more hours the two cars are 15 km away from each other.\n    additional_time = 5\n\n    # Calculate the distance Tom has traveled before Jack starts.\n    tom_distance_before_jack_starts = tom_speed * time_difference\n\n    # Total time both cars have been moving when they are 15 km apart.\n    total_time_moving = time_difference + additional_time\n\n    # Calculate the distance both have traveled in total_time_moving.\n    tom_total_distance = tom_speed * total_time_moving\n    jack_total_distance = jack_speed * additional_time\n\n    # Total distance between A and B is the sum of distances each car traveled minus 15 km.\n    total_distance_AB = tom_total_distance + jack_total_distance + 15\n\n    return total_distance_AB\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    # Let 'c' be the number of children and 'd' be the number of dogs.\n    # Each child has 2 legs and each dog has 4 legs.\n    # According to the given, there are 3 times as many dogs as children,\n    # which translates to d = 3c.\n    # The total number of legs is 56, which gives us the equation:\n    # 2c (legs of children) + 4d (legs of dogs) = 56.\n    # Substituting the value of d (3c) in the equation, we get:\n    # 2c + 4(3c) = 56 => 2c + 12c = 56 => 14c = 56.\n    # Dividing both sides by 14, we get c = 56 / 14\n    \n    c = 56 // 14\n\n    return c\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present = 18\n    absent_fraction = 2/5\n    present_fraction = 1 - absent_fraction\n\n    total_pupils = present / present_fraction\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return int(ans)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 * 7 + 5 * 7) // 7\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday, sunday + 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Let's define the total number of people as n.\n\n    # According to the question:\n    # 1/4 of the people chose tea - 1/4 * n\n    # 7 people chose coffee - 7\n    # 30% chose cola - 30/100 * n\n    # Rest chose water, which corresponds to 36 degrees in the pie chart.\n\n    # Since a full circle is 360 degrees, the percentage of people who chose water is\n    # 36/360 = 1/10 of the total people - 1/10 * n\n\n    # Now we know that the sum of all choices should equal the total number of people (n):\n    # (1/4 * n) + 7 + (30/100 * n) + (1/10 * n) = n\n\n    # If we denote 1/4 * n as tea, 30/100 * n as cola, and 1/10 * n as water,\n    # we get the equation:\n    # tea + coffee + cola + water = n\n    # (1/4 * n) + 7 + (30/100 * n) + (1/10 * n) = n\n\n    # Rearranging the terms, we get:\n    # (1/4 * n) + (30/100 * n) + (1/10 * n) = n - 7\n\n    # Calculating the common denominator for the fractions which is 100, we have:\n    # (25/100 * n) + (30/100 * n) + (10/100 * n) = n - 7\n\n    # Summing up the fractions, we get:\n    # (65/100 * n) = n - 7\n\n    # Subtracting (65/100 * n) from both sides of the equation, we get:\n    # n - (65/100 * n) = 7\n\n    # Factor out n on the left side\n    # n * (1 - 65/100) = 7\n    # n * (35/100) = 7\n\n    # Solving for n gives:\n    n = 7 / (35/100)\n\n    # Returning the number of total people that took the survey\n    return int(n)\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    # Subtract corners since they are counted twice\n    trees_in_length = (length // spacing) * 2\n    trees_in_width = (width // spacing) * 2\n\n    # remove the four corners\n    total_trees = trees_in_length + trees_in_width - 4\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    katie_height_m = 1.36\n    conversion_factor = 100  # 1 meter = 100 cm\n    katie_height_cm = katie_height_m * conversion_factor\n    return katie_height_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 0.03\n    tax_paid = income * tax_rate\n    net_income = income - tax_paid\n    return net_income\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    adult_ticket_price = 20\n    children_ticket_price = 15\n\n    # number of children\n    children = 0\n    while True:\n        charge_for_children = children * children_ticket_price\n        remaining_charge = total_charge - charge_for_children\n        if remaining_charge % adult_ticket_price == 0 and remaining_charge // adult_ticket_price >= 2:\n            return children\n        children += 1\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10**7):  # Arbitrary large value to ensure we check enough numbers\n        if int(str(9) + str(i // 10)) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_squash = 750\n    ratio_squash = 1\n    ratio_water = 9\n    total_ratio = ratio_squash + ratio_water\n\n    total_liquid = total_squash * total_ratio / ratio_squash\n    bottle_volume = 1000  # 1 liter in milliliters\n\n    full_bottles = total_liquid // bottle_volume\n\n    return int(full_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    result = (0.6 * 100) / 180\n    return result\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Total cost of the book and the bag\n    total_cost = 132\n\n    # According to Thomas' solution, 5 units cost $132\n    # Calculate the value of 1 unit\n    one_unit_cost = total_cost / 5  # Thomas' calculation\n\n    # Calculate the initial amount of money Li Yan had based on Thomas' method\n    initial_money_thomas = one_unit_cost * 6\n\n    # Let's verify Thomas' solution by calculating the actual amount spent\n    # Li Yan spent 1/3 on a book\n    book_cost = initial_money_thomas / 3\n    # The remainder after buying the book is 2/3 of the initial amount\n    remainder_after_book = initial_money_thomas * 2/3\n    # Li Yan spent 1/2 of the remainder on a bag\n    bag_cost = remainder_after_book / 2\n\n    # The total cost of the book and bag according to Li Yan's spending\n    actual_total_cost = book_cost + bag_cost\n\n    # Check if the actual total cost matches the given cost\n    if actual_total_cost == total_cost:\n        # If the actual total cost is correct, return Thomas' initial money calculation\n        return initial_money_thomas\n    else:\n        # Since the total cost does not match, recalculate correctly\n        # Let x be the initial amount of money Li Yan had\n        # She spent 1/3 of it on a book: (1/3)x\n        # The remainder: x - (1/3)x = (2/3)x\n        # She spent 1/2 of the remainder on a bag: (1/2)(2/3)x = (1/3)x\n        # The book and the bag cost $132 altogether:\n        # (1/3)x + (1/3)x = 132 -> (2/3)x = 132 -> x = (3/2) * 132 = 198\n        correct_initial_money = (3 / 2) * total_cost\n        return correct_initial_money\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n\n    remainder = pow(base, exponent, divisor)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Calculate the last two digits of each part separately\n    \n    # For 6^2015, we only need the last two digits, i.e., we calculate it modulo 100\n    last_two_digits_6_pow_2015 = pow(6, 2015, 100)\n    \n    # For 2015 * 6, just take the product and modulo 100 to get the last two digits\n    last_two_digits_2015_times_6 = (2015 * 6) % 100\n    \n    # For 2015^6, as before we calculate it modulo 100\n    last_two_digits_2015_pow_6 = pow(2015, 6, 100)\n    \n    # Add up the last two digits of each part, then take modulo 100 to get the last two digits of the sum\n    ans = (last_two_digits_6_pow_2015 + last_two_digits_2015_times_6 + last_two_digits_2015_pow_6) % 100\n    \n    return ans\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    # Given B = 2 and D = 0, we can fill in those values\n    # The equation becomes: 5 x (A20C2F) = 6 x (2FAC20)\n    # Now we try all combinations for A, C, E, and F where they are unique\n    # and different from 2 and 0.\n    \n    for A in range(10):\n        if A == 0 or A == 2: continue\n        \n        for C in range(10):\n            if C in [0, 2, A]: continue\n            \n            for E in range(10):\n                if E in [0, 2, A, C]: continue\n                \n                for F in range(10):\n                    if F in [0, 2, A, C, E]: continue\n                    \n                    # Construct the 6-digit numbers based on A, C, E, F\n                    ABCDEF = A*100000 + 2*10000 + 0*1000 + C*100 + E*10 + F\n                    EFABCD = E*100000 + F*10000 + A*1000 + 2*100 + C*10 + 0\n                    \n                    # Check if they satisfy the given equation\n                    if 5 * ABCDEF == 6 * EFABCD:\n                        # If they do, return the 4-digit FACE\n                        return A*1000 + C*100 + E*10 + F\n    \n    return None\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if (cookies - 4) % 6 == 0 and (cookies + 5) % 7 == 0:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Given that the number has 8 factors, and we know the first 5 factors, \n    # we can deduce that the factors are arranged in pairs that multiply to the number.\n    # Since 1 and the number itself are always factors, the last (8th) factor must be the number.\n\n    # The largest known factor given is 8. To find the number, we can try to multiply 8 by\n    # each of the other known factors to see which multiplication gives us a product with \n    # precisely 8 factors.\n\n    known_factors = [1, 2, 4, 7, 8]\n    for factor in known_factors:\n        candidate_number = 8 * factor\n\n        # Now we need to count the factors of this candidate number.\n        count = 0\n        for i in range(1, candidate_number + 1):\n            if candidate_number % i == 0:\n                count += 1\n\n        # If we find a candidate number with exactly 8 factors, we return this number.\n        if count == 8:\n            return candidate_number\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percentage = 10\n    discounted_price = original_price * (1 - discount_percentage / 100)\n    \n    return discounted_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, goats = symbols('cows goats')\n\n    # Initial conditions\n    equation1 = Eq(cows, 0.65 * (cows + goats))\n\n    # After adding animals\n    equation2 = Eq(cows + 240, 0.85 * (cows + goats + 240))\n    equation3 = Eq(goats * 2, goats + 240)\n\n    solutions = solve((equation1, equation2, equation3), (cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    first_month_sold = 1680\n    second_month_sold = first_month_sold * (7/20) + first_month_sold\n    decrease_in_kept = first_month_sold * (3/20)\n\n    total_cookies = second_month_sold + decrease_in_kept\n    return int(total_cookies)\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position = 6\n    amy_position = 8\n    total_children = jolene_position + amy_position - 1\n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps = 0\n    height_after_jumps = 0\n    \n    while height_after_jumps < total_height:\n        jumps += 1\n        height_after_jumps += jump_up\n        # The monkey falls down 3m after every 2 jumps\n        if jumps % 2 == 0:\n            height_after_jumps -= slide_down\n            \n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    return 78.2 - 31.45 + 5.24 - 2.3\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The congruences are x ≡ 1 (mod 5), x ≡ 2 (mod 6), and x ≡ 9 (mod 11).\n    congruences = [(1, 5), (2, 6), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    perimeter = 432 * 5  # side_length * number_of_sides\n    sunflower_spacing = 4\n    corner_sunflowers = 5  # one sunflower at each corner\n    \n    # Subtract the corner contributions since they are already included\n    available_length = perimeter - corner_sunflowers * sunflower_spacing\n    \n    # Calculate the number of sunflowers we can place on the available length\n    additional_sunflowers = available_length // sunflower_spacing\n    \n    # Total sunflowers is the sum of corner sunflowers and additional sunflowers\n    total_sunflowers = corner_sunflowers + additional_sunflowers\n    \n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    ans = 253 * 160\n    return ans\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300   # £3 = 300p\n    num_stamps = pounds_to_pence // stamp_cost_pence\n\n    return num_stamps\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let t be the time Ryan usually drives.\n    # At usual speed, Ryan drives for distance d = 45 * t.\n    # Due to traffic, Ryan drives for d = 30 * (t + 2).\n    \n    # Now equate both expressions for distance d and solve for t.\n    # 45t = 30(t + 2)\n    # 45t = 30t + 60\n    # 15t = 60\n    t = 60 / 15\n\n    return t\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n\n    numerator = factorial(100)\n    denominator = factorial(98)\n\n    ans = numerator // denominator\n\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Calculate the sum from 3 to 10\n    forward_sum = sum(range(3, 11))\n    \n    # Calculate the sum from 3 to 6\n    backward_sum = sum(range(3, 7))\n    \n    # The total sum is the sum from 3 to 10 plus the sum from 3 to 6\n    total_sum = forward_sum + backward_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def partitions(n, I=1):\n        yield (n,)\n        for i in range(I, n//2 + 1):\n            for p in partitions(n-i, i):\n                yield (i,) + p\n    \n    return len(list(partitions(5))) - 1\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, (a + b)\n    ans = b % 3\n    return ans\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    boat_capacity = 7\n    trip_time = 2  # minutes for one way\n\n    # Total trips consists of trips across the river and returning trips\n    # But the very last trip does not require a return trip\n\n    # Each full capacity trip ferries 7 people and requires a return trip, except the last one\n    full_trips = (adventurers - 1) // boat_capacity\n\n    # There's 1 last trip for remaining adventurers (except for the boat driver returning)\n    last_trip = 1 if (adventurers - 1) % boat_capacity != 0 else 0\n\n    total_trip_time = (full_trips * 2 + last_trip) * trip_time\n\n    return total_trip_time\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let x be the number of students and y be the number of sweets.\n    # When giving each student 6 sweets, the total sweets needed is 6*x, and he is short by 26 sweets.\n    # Therefore, y + 26 = 6*x -- Equation 1\n    # When giving each student 5 sweets, the total sweets needed is 5*x, and he is short by 5 sweets.\n    # Therefore, y + 5 = 5*x -- Equation 2\n    # Subtract Equation 2 from Equation 1: (y + 26) - (y + 5) = 6*x - 5*x\n    # Simplify the equation: 21 = x\n    # Substitute x back into Equation 2: y + 5 = 5*21\n    y = 5*21 - 5\n\n    return y\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    mary_cookies = amin_cookies - 97 - 58\n\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Leo's current age be 'l' and his son's current age be 's'\n    leo, son = symbols('leo son')\n\n    # When Leo was son's current age, the son was 4 years old.\n    # So, we get the equation: leo - son = son - 4\n    equation1 = Eq(leo - son, son - 4)\n\n    # When the son reaches Leo's current age, Leo will be 70 years old.\n    # So, we get the equation: son + (leo - son) = 70\n    equation2 = Eq(son + (leo - son), 70)\n\n    # Solving the two equations for leo and son's current ages\n    solutions = solve((equation1, equation2), (leo, son))\n\n    # Returning Leo's current age\n    return solutions[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef combination(n, r):\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\ndef solution():\n    # Initially, place all singing performances with 3 spaces for dancing\n    # [S] S S S [S]\n    # 4 choices for the first singing spot \n    # We treat these \"spaces\" for dancing as distinguishable since song performances are distinguishable\n    singings = 4 \n    # Calculate the combinations placing the 3 dancing performances in the 4 available spaces\n    spaces = 4\n    dancings = combination(spaces, 3)\n    \n    # Calculate the permutations of the singing performances\n    perm_singings = factorial(singings)\n    \n    # The final answer is the product of the combinations for dancing and permutations for singing\n    ans = perm_singings * dancings\n    return ans\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number of years later\n    years_later = symbols('years_later')\n    \n    # Create the equation Dad's age = 4 * Heidi's age\n    equation = Eq((50 + years_later), 4 * (8 + years_later))\n    \n    # Solve the equation\n    solution = solve(equation, years_later)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Check if the total sum can be achieved with the constraints\n    # Since the difference of fruits between trees is 1 and we have 8 trees,\n    # they form an arithmetic sequence with a common difference of 1.\n    # If we assume that the smallest number of fruits is 'a', then the 8 tree's fruits can be represented as:\n    # a, a+1, a+2, a+3, a+4, a+5, a+6, a+7\n    # The sum of an arithmetic sequence is given by the formula: sum = n/2 * (first_term + last_term)\n    # For our case, sum = 8/2 * (a + (a+7)) => sum = 4 * (2a + 7)\n\n    # The total sum of fruits in the problem is 225, so we set up the equation:\n    # 4 * (2a + 7) = 225\n    # This simplifies to:\n    # 8a + 28 = 225\n    # 8a = 225 - 28\n    # 8a = 197\n    # a = 197 / 8\n\n    # Since 'a' must be an integer (as we cannot have a fractional number of fruits on a tree),\n    # we check if 197 is divisible by 8.\n    a, remainder = divmod(197, 8)\n\n    # If the remainder is not 0, then it is not possible to have the trees with the given constraints\n    if remainder != 0:\n        return \"Not possible, as the sum of fruit cannot be distributed according to the mentioned scenario.\"\n    else:\n        # If it's possible, we construct the equation with the value of 'a'\n        smallest_number_of_fruits = a\n        equation = f\"The trees have {smallest_number_of_fruits}, {smallest_number_of_fruits+1}, {smallest_number_of_fruits+2}, {smallest_number_of_fruits+3}, {smallest_number_of_fruits+4}, {smallest_number_of_fruits+5}, {smallest_number_of_fruits+6}, {smallest_number_of_fruits+7} fruits respectively.\"\n        return equation\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n    \n    return min(count_factors(60, 2), count_factors(60, 5))\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Calculating the sum of the three numbers using the first average\n    sum_first_three = 120 * 3\n    \n    # Calculating the sum of all four numbers using the second average\n    sum_all_four = 150 * 4\n    \n    # Calculating the fourth number by subtracting the sum of the first three from the sum of all four\n    fourth_number = sum_all_four - sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    fraction = 3/13\n    number = 52\n    result = fraction * number\n    return result\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percent = 15\n    discount_amount = (discount_percent / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    import math\n    numerator = 4.219 ** 2 / (4 + 2/3 + 38/59)\n    denominator = 2.501 ** 3\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    # Formula to calculate dividend is dividend = (divisor * quotient) + remainder\n    # Smallest possible dividend occurs when divisor is smallest possible value greater than remainder\n    smallest_divisor = remainder + 1\n    smallest_dividend = (smallest_divisor * quotient) + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    # Define the daily climb and slide lengths, and the total climbing days\n    climb_during_day = 8\n    slide_during_night = 3\n    total_days = 9\n    \n    # Calculate the effective distance climbed each day except for the last one\n    effective_daily_climb = climb_during_day - slide_during_night\n\n    # Calculate the total distance climbed until the start of the last day\n    total_climbed_before_last_day = effective_daily_climb * (total_days - 1)\n\n    # On the last day, the snail climbs out of the well, so we only add the day climb to the total\n    total_climbed = total_climbed_before_last_day + climb_during_day\n\n    return total_climbed\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    french_and_japanese = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - french_and_japanese\n    \n    return only_french\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4  # Since the sequence is decreasing\n    \n    # The nth term of an arithmetic sequence can be found by a_n = a_1 + (n - 1)d\n    # The first negative term will occur when a_n < 0\n    # 50 + (n - 1)(-4) < 0\n    # (n - 1) > 50 / 4\n    # n > 12.5\n    # Since n must be an integer, the first negative term will be when n = 13\n\n    return 12  # The last term before the first negative term\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n    \n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n    \n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n\n    result = total_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    # Total number of people including Teddy\n    total_people = 6\n\n    # Total arrangements without restriction\n    total_arrangements = factorial(total_people)\n\n    # Arrangements with Teddy on the furthest left\n    arrangements_with_teddy_left = factorial(total_people - 1)\n\n    # Arrangements where Teddy is not on the furthest left\n    arrangements_without_teddy_left = total_arrangements - arrangements_with_teddy_left\n\n    return arrangements_without_teddy_left\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    # loop over all 2-digit numbers\n    for i in range(10, 100):\n        if sum(map(int, str(i))) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Since the numbers are consecutive, the middle one is the average, so:\n    middle_number = 280 // 7\n    \n    # The largest number is three more than the middle number (3 steps from the middle for 7 numbers)\n    largest_number = middle_number + 3\n    \n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    def square_diff(a, b):\n        return a**2 - b**2\n\n    ans = (square_diff(1000, 990) + square_diff(980, 970) + square_diff(20, 10))\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Define the equations based on the given information\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The bigger number is x\n    return solutions[x]\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    right_side = 11 * 14 + 26\n    ans = right_side / 15\n    return ans\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    from math import gcd\n\n    max_sum = 0\n    for i in range(100, 1000):\n        for j in range(i+1, 1000):\n            if gcd(i, j) == 75:\n                digits_i = set(str(i))\n                digits_j = set(str(j))\n                if len(digits_i) <= 2 or len(digits_j) <= 2:\n                    if len(digits_i.intersection(digits_j)) >= 1:\n                        max_sum = max(max_sum, i+j)\n    return max_sum\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    # Loop over possible values of r to find when 216r is a perfect square\n    r = 1\n    while True:\n        # Check if 216r is a perfect square\n        if ((216 * r) ** 0.5).is_integer():\n            # If it is a perfect square, return r\n            return r\n        r += 1\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = 0\n    for i in range(2, 21, 2):\n        if i % 4 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # The given series is: 8+32+72+128+200+288+392+512+648 which corresponds to\n    # 2^3 * 1^2 + 2^3 * 2^2 + 2^3 * 3^2 + ... + 2^3 * 9^2.\n    # Factoring out the 2^3, we get:\n    # 2^3 * (1^2 + 2^2 + 3^2 + ... + 9^2).\n    \n    # Calculate the sum using the formula for the sum of squares of first n natural numbers\n    n = 9\n    sum_of_squares = (1/6) * n * (n + 1) * (2*n + 1)\n    \n    # Multiply the sum of squares with 2^3 to get the total sum\n    ans = 2**3 * sum_of_squares\n    \n    return int(ans)\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # Calculate ways to arrange magazines (M = 5 spaces for storybooks (S))\n    # S can be in the following positions: | S | S | S | S | S |\n    # There are 6 positions to insert M, but since we need at least 1 M between S\n    # We have 4 \"mandatory\" M to place and 1 \"free\" M to place anywhere\n    # Calculate arrangements for the 4 mandatory M: C(5, 4) = 5\n    # Calculate arrangements for the 1 free M among the 6 possible positions\n    # This can be thought of as stars and bars problem, where there's 1 bar (the free M)\n    # And 5 stars (including the mandatory M)\n    \n    # Number of ways to arrange 5 storybooks and 1 free magazine is C(6, 1) = 6\n    magazines_free_arrangement = factorial(6) // factorial(1) // factorial(6 - 1) # C(6, 1) = 6\n    \n    # Overall possibilities\n    total_arrangements = magazines_free_arrangement * factorial(5)  # Multiply by 5! for the arrangements of magazines themselves\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    next_throw_deduct = False\n    \n    for throw in throws:\n        if next_throw_deduct:\n            position -= throw\n            next_throw_deduct = False\n        elif throw == 6:\n            next_throw_deduct = True\n        else:\n            position += throw\n    \n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n    \n    equation1 = Eq(alex + brayden, 756)\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    # Smallest number of fruit gums (x) after defining equation as per the conditions\n    # Let's start with a possible minimum of gums for the packet and increase until we find a solution\n    min_gums = 2  # Start with 2 because already ate 2\n    \n    while True:\n        remaining_gums_after_eating_2 = min_gums - 2\n        remaining_gums_after_sharing = remaining_gums_after_eating_2 * (2/3)\n        # As per the last condition, the remaining gums should be dividable by 4 equally\n        if remaining_gums_after_sharing % 4 == 0:\n            return min_gums\n        min_gums += 1  # Try the next number of gums\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    amount_given = (james - kate) / 2\n    return amount_given\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = 420000 + A * 1000 + 280 + B\n            if number % 99 == 0:\n                return A * 10 + B\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one bag of sweets and one can of drink\n    bag_sweets, can_drink = symbols('bag_sweets can_drink')\n\n    # Rachel's purchase equation: 3 bags of sweets + 5 cans of drink = 4.90\n    equation1 = Eq(3 * bag_sweets + 5 * can_drink, 4.90)\n\n    # Rosie's purchase equation: 1 bag of sweets + 3 cans of drink = 2.70\n    equation2 = Eq(bag_sweets + 3 * can_drink, 2.70)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (bag_sweets, can_drink))\n\n    return solution[bag_sweets]\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10  # The sum of all ten numbers\n    remaining_sum = 9 * 9  # The sum of the remaining nine numbers\n    removed_number = total_sum - remaining_sum  # The value of the removed number\n    \n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6  # Lucy's speed in kilometers per hour\n    speed_mps = speed_kmh * 1000 / 3600  # Convert speed to meters per second\n    time_s = 300  # Time in seconds\n\n    distance_m = speed_mps * time_s  # Distance in meters\n\n    return distance_m\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount each of the four siblings received.\n    # If the three brothers alone had shared the money, they would have received x + 20 each.\n    x = symbols('x')\n\n    # If the brothers alone had shared the money, the original sum would be divided by 3 instead of 4\n    equation = Eq(4*x, 3*(x + 20))\n\n    # Solve the equation for x, the amount each sibling originally received\n    siblings_share = solve(equation, x)\n    original_sum = siblings_share[0] * 4  # since there are four siblings\n\n    return original_sum\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    sum_of_numbers = sum(range(1, 22, 2))\n    ans = sum_of_numbers ** 2\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, blue = symbols('red green blue')\n\n    # Equation1: red - green - blue = 350 after giving away\n    equation1 = Eq(red + green + (blue - 112), 350)\n    # Equation2: red = 2 * green\n    equation2 = Eq(red, 2 * green)\n    # Equation3: blue - 50 = red\n    equation3 = Eq(blue - 50, red)\n    # Equation4: blue = red = green (initially all were equal)\n    equation4 = Eq(blue, red)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (red, green, blue))\n\n    # As Lauren had the same number of red, green and blue beads at first, we take the number of blue beads.\n    original_blue_beads = solutions[blue] + 112\n\n    return original_blue_beads\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # The sum of the four numbers with the given averages\n    sum_36 = 36 * 4\n    sum_38 = 38 * 4\n    sum_39 = 39 * 4\n    sum_45 = 45 * 4\n    sum_49 = 49 * 4\n\n    # The sum of all the five numbers is one of the sums multiplied by 5 divided by 4 plus the largest number\n    # Therefore, the largest number is multiplied by 5 minus the sum\n    # We just need to find the maximum of such differences\n    all_sums = [sum_36, sum_38, sum_39, sum_45, sum_49]\n    total_sum_of_four = sum(all_sums)  # sum of all sums of four out of five numbers\n\n    # The total sum of the five numbers equals the sum of the sums of four numbers out of five\n    # minus 4 times the sum of the averages (because each average is counted four times)\n    total_sum_of_five = total_sum_of_four - 4 * (36 + 38 + 39 + 45 + 49)\n\n    # Find the largest number by finding the difference between the total sum of five numbers\n    # and the sum of four numbers with the smallest average\n    largest_number = total_sum_of_five - min(all_sums)\n\n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4/5\n    art_books_fraction = 1/3\n\n    # relationship between 1/3 of art books and 4/5 of science books\n    science_books = (art_books * art_books_fraction) / science_books_fraction\n\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    jared_to_katelyn_ratio = 5 / 2\n    sticker_difference = 60\n    \n    katelyn_stickers = sticker_difference / (jared_to_katelyn_ratio - 1)\n    jared_stickers = jared_to_katelyn_ratio * katelyn_stickers\n    \n    total_stickers = katelyn_stickers + jared_stickers\n    return int(total_stickers)\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.05 ** 3\n    interest_last_two_years = 1.10 ** 2\n    \n    amount_after_three_years = initial_investment * interest_first_three_years\n    total_amount_after_five_years = amount_after_three_years * interest_last_two_years\n    \n    return round(total_amount_after_five_years, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # To share 16 sausages among 24 people equally each person should get 16/24 parts of a sausage\n    # Simplifying 16/24 we get 2/3\n    # Each person gets 2/3 of a sausage means 3 people share 2 sausages\n    # For 24 people, 24/3 groups are needed which is 8 groups\n    # For each group, you cut 2 sausages once so they become 3 parts\n    # That means you need 1 cut per group\n    # Hence, for 8 groups, you need 8 cuts\n    return 8\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    # Volumes of each type of textbook\n    chinese_textbooks = 42\n    math_textbooks = 63\n    nature_textbooks = 28\n\n    # Calculate the greatest common divisor of the volumes\n    gcd_value = gcd(gcd(chinese_textbooks, math_textbooks), nature_textbooks)\n\n    return gcd_value\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols representing the distance\n    distance = symbols('distance')\n\n    # The time it takes for Qiqi to walk to school\n    time_qiqi = distance / 60\n\n    # The time it takes for Weiling to walk to school, which is the time for Qiqi minus 2 - 4 (since Weiling starts 2mins later and arrives 4mins earlier)\n    time_weiling = distance / 72 + 6\n\n    # Setting up the equation that time for Qiqi equals time for Weiling\n    equation = Eq(time_qiqi, time_weiling)\n\n    # Solving for distance\n    solution = solve(equation, (distance))\n\n    return solution[0]\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the work Star does per hour and n be the work Nini does per hour\n    s, n = symbols('s n')\n    \n    # According to the problem, we have two equations:\n    # 5s + 20n = 1 (1 represents the whole job done)\n    # 20s + 8n = 1\n    equation1 = Eq(5*s + 20*n, 1)\n    equation2 = Eq(20*s + 8*n, 1)\n\n    # Solving for s and n\n    solutions = solve((equation1, equation2), (s, n))\n\n    # The time taken for Nini to complete the job by herself would be 1/n\n    time_for_nini_alone = 1 / solutions[n]\n\n    return time_for_nini_alone\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Calculate the total work using work = companies * days\n    total_work = 4 * 5\n\n    # Since work is directly proportional to the length of the expressway:\n    # Calculate days required for 1 construction company to build a 2700m expressway\n    days_required = (1 * total_work * 2700) / (900 * 4)\n\n    return days_required\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    # Richard meets the plane at 12 noon St Petersburg time\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n    \n    # The flight duration is known to be 3 hours and 40 minutes\n    flight_duration = timedelta(hours=3, minutes=40)\n    \n    # Calculate the departure time from Manchester by subtracting the flight duration from the arrival time\n    manchester_departure_time = st_petersburg_time - flight_duration\n    \n    # Adjust for time zone difference between St Petersburg and Manchester is -3 hours\n    time_zone_difference = timedelta(hours=-3)\n    manchester_departure_time += time_zone_difference\n    \n    # Format the result to match expected output (hours:minutes)\n    ans = manchester_departure_time.strftime('%H:%M')\n    \n    return ans\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    return kg * kg_to_lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    ben_height = jane_height - difference\n    return ben_height\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_liters = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_liters = (coffee_liters / coffee_ratio) * total_ratio\n\n    return latte_liters\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 8 == 2 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    total = 0\n    sign = 1\n    for n in range(2, 33, 2):\n        total += sign * n\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_marbles = symbols('total_marbles')\n    red_marbles = (2/5) * total_marbles\n    green_marbles = (1/3) * total_marbles\n    yellow_marbles = 96\n\n    equation = Eq(red_marbles + green_marbles + yellow_marbles, total_marbles)\n    solutions = solve(equation, total_marbles)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / (1 + interest_rate) ** years\n\n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Since there are 10 people between Ben and Frank, and Ben is 6th from the front,\n    # we add 10 to Ben's position to get the position right behind Frank\n    behind_frank_position = 6 + 10 + 1\n    \n    # Since Frank is 9th from the back, we add 8 (one less, because we start counting from 1)\n    # to Frank's position from the back to get the total number of people in the queue\n    total_people = behind_frank_position + 8\n    \n    # return the total number of people in the queue\n    return total_people\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    number = 42663\n    remainder = number % 9\n    ans = (remainder ** 2) % 9\n    return ans\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    last_digits = 0\n    number = 0\n    \n    for i in range(1, 2016):\n        number = number * 10 + 1\n        last_digits += number\n        last_digits %= 10000  # Keep only the last 4 digits\n\n    return last_digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if hundreds + tens + ones == 8 and ones % 2 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    return 1 / 20\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # The unit digit of a number raised to a power is cyclical.\n    # For 13, the cycle of unit digits is [3, 9, 7, 1], which repeats every 4 powers\n    # For 17, the cycle of unit digits is [7, 9, 3, 1], which repeats every 4 powers\n    # For 4, the cycle of unit digits is [4, 6], which repeats every 2 powers\n\n    # Find the position in the cycle for 13^242\n    unit_digit_13 = [3, 9, 7, 1]\n    cycle_position_13 = 242 % 4  # Calculate the remainder to find the cycle position\n    unit_13 = unit_digit_13[cycle_position_13 - 1]  # Subtract 1 because indexing starts from 0\n\n    # Find the position in the cycle for 17^379\n    unit_digit_17 = [7, 9, 3, 1]\n    cycle_position_17 = 379 % 4  # Calculate the remainder to find the cycle position\n    unit_17 = unit_digit_17[cycle_position_17 - 1]  # Subtract 1 because indexing starts from 0\n\n    # Find the position in the cycle for 4^2012\n    unit_digit_4 = [4, 6]\n    cycle_position_4 = 2012 % 2  # Calculate the remainder to find the cycle position\n    unit_4 = unit_digit_4[cycle_position_4]  # For a 2-length cycle, the index is the remainder itself \n\n    # Now multiply the unit digit of 17^379 with the unit digit of 4^2012, then add to unit digit of 13^242\n    final_unit_digit = (unit_17 * unit_4 + unit_13) % 10  # The unit digit after summing up\n\n    return final_unit_digit\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # Since there are only 2 colors of marbles, after picking 3 marbles\n    # you are guaranteed to have at least 2 of the same color.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences must be presented as (remainder, modulus)\n    congruences = [(2, 4), (3, 5), (3, 11)]\n\n    # The Chinese Remainder Theorem is used to solve the system of congruences\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    for john_age in range(1, 100):\n        mary_age = john_age - 1\n        if john_age * mary_age >= 2019:\n            continue\n        for child1_age in range(1, 100):\n            child2_age = child1_age + 2\n            child3_age = child1_age + 4\n            if child1_age * child2_age * child3_age >= 2019:\n                continue\n            if (john_age + 1) * (mary_age + 1) > 2020 and (child1_age + 1) * (child2_age + 1) * (child3_age + 1) > 2020:\n                return john_age + mary_age + child1_age + child2_age + child3_age\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3\n    n = 7\n\n    # formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1)d\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n\n    plates_cost = 36\n    money_left_after_plates = total_money - plates_cost\n    cups_cost = (3/4) * money_left_after_plates\n    final_money_left = total_money - plates_cost - cups_cost\n    equation = Eq(final_money_left, (1/6) * total_money)\n\n    initial_money = solve(equation, total_money)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for p in permutations(range(1, 10)):\n        abc = 100*p[0] + 10*p[1] + p[2]\n        bcd = 100*p[1] + 10*p[2] + p[3]\n        cde = 100*p[2] + 10*p[3] + p[4]\n        def_ = 100*p[3] + 10*p[4] + p[5]  # 'def' is a keyword in Python, hence the underscore\n        efg = 100*p[4] + 10*p[5] + p[6]\n        fgh = 100*p[5] + 10*p[6] + p[7]\n        ghi = 100*p[6] + 10*p[7] + p[8]\n        A = abc + bcd + cde + def_ + efg + fgh + ghi\n        if A > max_A:\n            max_A = A\n    return max_A\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    # Calculate how many numbers there are with a given number of digits starting with 8\n    def count_numbers_with_digits(digits):\n        if digits == 1:\n            return 1\n        else:\n            return 9 * (10 ** (digits - 2))\n\n    # Find the number of digits the 2012th number has\n    remaining = 2012\n    digits = 1\n    while remaining - count_numbers_with_digits(digits) > 0:\n        remaining -= count_numbers_with_digits(digits)\n        digits += 1\n    \n    # Find the actual number that is the 2012th in the list\n    if digits == 1:\n        ans = 8\n    else:\n        # Starting with '8' followed by digits-1 number of 0s (to create the leftmost 8 number with the given digits)\n        starting_number = 8 * (10 ** (digits - 1))\n        # Since each digit can vary from 0 to 9, we need to add (remaining - 1) to the starting_number\n        # Subtract 1 from remaining as we already included the starting number in the count\n        ans = starting_number + (remaining - 1)\n\n    return ans\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    for x in range(1, 160):\n        if 5 * x + 10 == 160:  # using the formula: n/2 * (2a + (n - 1)d), where n=5, d=1, and a=x (the first term)\n            most_balls = x + 4  # the student with the most balls would have the fifth number in our sequence\n            return most_balls\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from math import comb\n\ndef solution():\n    total_envelopes = 15\n    minimum_a = 2\n    minimum_b = 4\n    minimum_c = 3\n    \n    # Deduct the minimum required envelopes for boxes A, B, and C\n    remaining_envelopes = total_envelopes - (minimum_a + minimum_b + minimum_c)\n    \n    # We can distribute the remaining envelopes to any of the 4 boxes\n    num_boxes = 4\n    \n    # Calculate the number of ways to distribute remaining envelopes using stars and bars method\n    ans = comb(remaining_envelopes + num_boxes - 1, remaining_envelopes)\n    \n    return ans\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total = 80\n    \n    result = (percentage / 100) * total\n    \n    return result\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i ** 2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols\n    income = symbols('income')\n\n    # Tax equations\n    tax_equation = 0.15*20000 + 0.20*(income - 20000) - 7000\n\n    # Solve for income\n    income_value = solve(tax_equation, income)\n\n    return income_value[0]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n    \n    x_value = solve(equation, x)\n    \n    return x_value[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    result = 1.4 * (1/10)\n    return result\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # To find the digit in the 2022th decimal place, we need to understand the pattern of the repeating decimals for 1/13.\n    # Since 1/13 is a rational number, its decimal expansion repeats.\n    # We calculate the first few digits to find the pattern.\n\n    decimal = []\n    remainder = 1\n\n    for i in range(2022):\n        remainder *= 10\n        digit = remainder // 13\n        remainder %= 13\n        decimal.append(digit)\n\n    # The repeating cycle length for 1/13 is known to be 6.\n    cycle_length = 6\n    # Thus, the 2022nd digit would be the same as the (2022 % 6)th digit of the recurring cycle.\n\n    ans = decimal[(2022 % cycle_length) - 1]  # Subtract 1 because indexing starts from 0\n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ropes\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    # Calculate the greatest common divisor of the three rope lengths\n    ans = gcd(gcd(rope1, rope2), rope3)\n\n    return ans\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    for chickens in range(41):\n        rabbits = 40 - chickens\n        if (chickens * 2 + rabbits * 4) == 100:\n            return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B, 3 * (A - 290))\n    equation2 = Eq(A, B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    # both stores have the same number of packs, hence, total is A+B\n    total_packs = solutions[A] + solutions[B]\n\n    return total_packs\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    packed_lunch_boys = 4\n    school_lunch_girls = 7\n    went_home_boys = 3\n    went_home_total = 5\n\n    girls = total_students - boys\n    went_home_girls = went_home_total - went_home_boys\n    packed_lunch_girls = girls - school_lunch_girls\n\n    total_packed_lunch = packed_lunch_boys + packed_lunch_girls\n\n    return total_packed_lunch\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile = 2 + 30 / 60  # convert time to minutes\n    miles_per_hour = 60 / time_per_mile\n    \n    return miles_per_hour\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolate = 20 * 6\n    total_milk_chocolate = 20 * 5\n    total_strawberry_chocolate = 20 * 4\n    \n    total_cost = total_dark_chocolate + total_milk_chocolate + total_strawberry_chocolate\n    total_chocolates = 20 + 20 + 20\n    \n    average_cost = total_cost / total_chocolates\n    \n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    # Calculate the rate of production per day\n    rate_per_day = 720 / 5\n    \n    # Calculate the total number of days to complete 3600 sets\n    total_days = 3600 / rate_per_day\n    \n    return total_days\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    factors = 0\n    for i in range(1, 37):\n        if 36 % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return (100 - 1) // 12\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed_m_per_s = 53\n    time_sec = 19\n\n    train_length = speed_m_per_s * time_sec\n\n    return train_length\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    man_rate = 1 / 15\n    together_rate = 1 / 12\n    wife_rate = symbols('wife_rate')\n    \n    equation = Eq(man_rate + wife_rate, together_rate)\n    \n    wife_rate_solution = solve(equation, wife_rate)\n\n    wife_days = 1 / wife_rate_solution[0]\n\n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    friends = 6\n    \n    pears_per_friend = total_pears // friends\n    strawberries_per_friend = total_strawberries // friends\n    chocolates_per_friend = total_chocolates // friends\n    \n    fruits_per_friend = pears_per_friend + strawberries_per_friend + chocolates_per_friend\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    offer_number_of_books = 3 + 1  # Buy 3 get 1 free, so 4 books in total for the price of 3\n    books_required = 5\n\n    full_price_books = books_required % offer_number_of_books\n    offer_price_books = books_required - full_price_books\n    offer_deals = offer_price_books // offer_number_of_books\n\n    total_cost = (offer_deals * offer_number_of_books * book_price) / offer_number_of_books + full_price_books * book_price\n\n    return total_cost\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the number of women (w), men (m), and children (c)\n    w, m, c = symbols('w m c')\n\n    # Equation 1: 2/5 of total people are women, total people = w + m + c\n    equation1 = Eq(w, 2/5 * (w + m + c))\n\n    # Equation 2: There are three times as many men as children\n    equation2 = Eq(m, 3 * c)\n\n    # Equation 3: There are 190 more women than children\n    equation3 = Eq(w, c + 190)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (w, m, c))\n\n    # Get solution for total number of people\n    total_people = solutions[w] + solutions[m] + solutions[c]\n\n    return total_people\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    base_of_turpan_depression = -154\n    tip_of_mount_fuji = 3776\n    distance = tip_of_mount_fuji - base_of_turpan_depression\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    result = 0\n    for i in range(1, 51):\n        result += int('1' * i)\n    ans = result % 100\n    return ans\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the price of one apple, and 'b' be the price of one banana\n    a, b = symbols('a b')\n\n    # Set up the equations according to the problem statement\n    equation1 = Eq(6*a + 7*b, 8*a + 4*b)\n\n    # We know that when Einstein buys only bananas, it would cost equivalent to buying 6 apples and 7 bananas or 8 apples and 4 bananas\n    # Solve the equation to find the relationship between the prices of apples and bananas\n    solution = solve(equation1, (a, b))\n\n    # The price of one banana\n    price_of_banana = solution[b]\n\n    # Since both options leave him with no change, we can use either option to calculate how much money Einstein has\n    # Let's use the first option: 6 apples and 7 bananas = total money\n    total_money = 6 * solution[a] + 7 * solution[b]\n\n    # The number of bananas he can afford will be total money divided by the price of one banana\n    num_bananas = total_money / price_of_banana\n\n    return num_bananas\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding = 36\n    math = 21\n    both = 20\n\n    total_students = (coding + math) - both\n\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    # Each mailbox will have a minimum required number of envelopes.\n    min_required = {'A': 2, 'B': 4, 'C': 3}\n    \n    # Calculate the remaining envelopes after placing the minimum required in each box.\n    remaining_envelopes = 15 - sum(min_required.values())\n    \n    # There are now 4 boxes (including box D which has no minimum) to distribute the remaining envelopes.\n    # We use combinations_with_replacement to include combinations like (0, 0, 6) where some boxes might get no envelopes.\n    distribution_combinations = combinations_with_replacement(range(remaining_envelopes + 1), 4)\n    \n    # Count valid distributions: those that when added to the minimum requirements still sum up to 15.\n    count = sum(1 for comb in distribution_combinations if sum(comb) == remaining_envelopes)\n\n    return count\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    total_pupils = 40\n    total_pencils = total_pupils * 35 # total pencils = average * number of pupils\n    boys_pencils_avg = 20\n    girls_pencils_avg = 60\n\n    # Let the number of boys be b and number of girls be g\n    # We have two equations:\n    # b + g = 40 (total number of pupils)\n    # boys_pencils_avg * b + girls_pencils_avg * g = total_pencils (total pencils owned by boys and girls)\n    # We can solve for b as follows:\n\n    # g = total_pupils - b -> substitute in second equation\n    # boys_pencils_avg * b + girls_pencils_avg * (total_pupils - b) = total_pencils\n    # 20b + 60(40 - b) = 40 * 35\n\n    b = (girls_pencils_avg * total_pupils - total_pencils) / (girls_pencils_avg - boys_pencils_avg)\n\n    return int(b)\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    error_result = 98.01\n    divisor_error = 2.11 * 100  # Because the decimal point was missed, multiply by 100\n\n    # The error is 98.01 less than the true result, so we add it back to get the true result\n    true_result = error_result + (error_result / divisor_error)\n\n    return true_result\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for number in range(1, 201):\n        count += str(number).count('1')\n    return count\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n\n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    male, female = symbols('male female')\n    # Let female be x and male be x + 450\n    # On the second day\n    # female visitors increased by 15%\n    female_second_day = female * 1.15\n    # male visitors decreased by 18%\n    male_second_day = male * 0.82\n    # The total number of visitors for the second day is 1354\n    equation = Eq(female_second_day + male_second_day, 1354)\n    # Solve the system of equations\n    solutions = solve((equation, Eq(male - female, 450)), (male, female))\n    \n    return solutions[male]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_eggs_second = remaining_eggs * 2 + 4\n    remaining_after_first_sale = sold_eggs_second + remaining_eggs\n    initial_eggs = (remaining_after_first_sale + 5) * 2\n    \n    return initial_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    speed_mph = 65  # speed in miles per hour\n    time_hours = 15 / 60  # time in hours (15 minutes)\n\n    distance_miles = speed_mph * time_hours  # distance in miles\n    distance_km = distance_miles * 1.60934  # convert miles to kilometers\n    \n    return distance_km\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    increase_percentage = 10 / 100\n\n    increased_amount = original_amount * (1 + increase_percentage)\n\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8  # Length of the actual yacht in meters\n    scale_ratio = 1 / 20  # Scale ratio 1:20\n    model_length_m = actual_length_m * scale_ratio  # Length of the model yacht in meters\n    model_length_cm = model_length_m * 100  # Convert meters to centimeters\n    return model_length_cm  # Return the model yacht length in centimeters\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n    \n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    \n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    ans = 617 * 6\n    return ans\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # For permutation of 4 elements where no element stays in the same position\n    # This is a case of derangement, also known as subfactorial or !n\n    \n    # Calculating the derangement for 4\n    # !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    # For n = 4, it will be: 4! * (1 - 1/1! + 1/2! - 1/3! + 1/4!)\n\n    n = 4\n    derangement = factorial(n)\n    for i in range(n):\n        derangement += (-1)**i * factorial(n) / factorial(i)\n    \n    return int(derangement)\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    num_pupils = 7\n    \n    balloons_per_pupil = total_balloons // num_pupils\n\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n\n    ans = (count, ways)\n    return ans\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    effective_climb = climb_per_day - slide_per_night\n    days = 0\n    \n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n        \n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n    \n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    weekly_hours = 8 * 5\n    weekly_pay = hourly_rate * weekly_hours\n\n    debt_remaining = 700 - weekly_pay\n    return debt_remaining\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    ans = 53 * 627\n    return ans\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('20:30', '%H:%M')\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Lets assume that John and Choon Mui originally had 'x' amount of money\n    x = symbols('x')\n    \n    # John spent $30, so he now has x - 30\n    # Choon Mui spent $150, so she now has x - 150\n    # According to the problem, John's remaining money is four times Choon Mui's remaining money\n    equation = Eq(x - 30, 4 * (x - 150))\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    # Calculate how much money John had left\n    john_left = solution[0] - 30\n    \n    return john_left\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n\n    # The vertical number puzzle implies that the numbers should form addition.\n    # In place of each A, a digit must be placed, but we know that,\n    # In vertical form: A is in hundreds, tens and ones place.\n    #  A\n    #  A\n    #  A\n    # +\n    #  A\n    # ---\n    # AAA (which is in context 111*A)\n    equation = Eq(111 * A, A + 10 * A + 100 * A)\n\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    round_to_nearest = 100\n    ans = round(number / round_to_nearest) * round_to_nearest\n    return ans\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        num_str = str(i)\n        if num_str.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_period = 14  # 2 weeks\n    yahya_period = 10  # 10 days\n\n    return lcm(arjun_period, yahya_period)\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for i in range(10):\n        for j in range(10):\n            number = 2090 + i * 10 + j\n            if number % 3 == 0 and number % 5 == 0:\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_apart = 7\n    num_trees = (highway_length - distance_apart) // distance_apart\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    initial_stamps = 34 + 2 - 11 + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    number_of_terms = (last_term - first_term) // 1 + 1  # The common difference is 1\n    sum_of_series = (number_of_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5/7) * 112\n    return result\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Since A, B and C always line up together, treat them as a single student.\n    # Then, we have 8 individual students and 1 group (ABC), so in total 8 + 1 = 9 entities to arrange.\n    group_permutations = factorial(9)\n    \n    # Now, within that group ABC, there are 3! ways to arrange A, B, and C.\n    within_group_permutations = factorial(3)\n    \n    # The total number of ways they can line up is the product of both permutations.\n    total_permutations = group_permutations * within_group_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Given information\n    distance_1 = 280  # meters\n    distance_2 = 400  # meters\n    distance_3 = 800 - (distance_1 + distance_2)  # meters, because total race is 800 meters\n    \n    speed_1 = 7  # meters per second\n    speed_2 = 5  # meters per second\n    speed_3 = 8  # meters per second\n    \n    # Calculate time for each segment\n    time_1 = distance_1 / speed_1\n    time_2 = distance_2 / speed_2\n    time_3 = distance_3 / speed_3\n    \n    # Total time is the sum of times for each segment\n    total_time = time_1 + time_2 + time_3\n    return total_time\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    number_str = ''.join(str(i) for i in range(1, 31))\n    return int(''.join(sorted(number_str)[:len(number_str)-46]))\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, one must consider the worst case scenario,\n    # which is picking out all blue balls first before getting a white ball.\n    blue_balls = 6\n    # Take out all blue balls first.\n    balls_needed = blue_balls\n    # Take out one more ball to guarantee it's white.\n    balls_needed += 1\n    return balls_needed\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total = james + linda + ben\n    return int(total)\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    term1 = sum(range(1, 5))\n    term2 = sum(range(2018, 2021))\n    ans = (term1 * 1) - (term2 * 0)\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler = 20\n    overlap = 3\n    total_rulers = 3\n    total_overlaps = total_rulers - 1\n    \n    length_of_bundle = (short_ruler * total_rulers) - (overlap * total_overlaps)\n    \n    return length_of_bundle\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Calculate the distance covered while jogging\n    # Time spent jogging: 7:30 AM - 6:30 AM = 1 hour\n    jogging_speed = 6  # in miles per hour\n    jogging_time = 1  # in hours\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the distance covered while walking\n    # Time spent walking: 9:30 AM - 7:30 AM = 2 hours\n    walking_speed = 5  # in miles per hour\n    walking_time = 2  # in hours\n    walking_distance = walking_speed * walking_time\n\n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    new_cups = 0\n\n    while total_used_cups >= 7:\n        # Make new cups from the used cups\n        new_cups_made_now = total_used_cups // 7\n        new_cups += new_cups_made_now\n        # Subtract the used cup for the new ones and add the cups that remain (cannot form a new cup)\n        total_used_cups = total_used_cups % 7 + new_cups_made_now\n        \n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    total_number = 2000\n    subtracted_number = 222\n    ans = total_number - subtracted_number\n    return ans\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    # Convert the length of the plot to cm\n    plot_length_cm = 23 * 100  # 23 meters is 2300 cm\n\n    # Subtract the initial 20 cm from the length\n    length_for_cauliflowers_cm = plot_length_cm - 20\n\n    # Calculate the space required for each cauliflower including the gap\n    space_per_cauliflower_cm = 45 + 15\n\n    # Calculate the number of cauliflowers that can be planted\n    number_of_cauliflowers = length_for_cauliflowers_cm // space_per_cauliflower_cm \n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    pages_first_3_days = 14 * 3\n    pages_next_2_days = 9 * 2\n    pages_sixth_day = 12\n    total_days = 6\n\n    total_pages = pages_first_3_days + pages_next_2_days + pages_sixth_day\n    average_pages = total_pages / total_days\n    \n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A = 8\n    class_B = 12\n    class_C = 20\n\n    # Find the Greatest Common Divisor (GCD) between the three classes\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton, bowling = symbols('badminton bowling')\n    # Original equation based on the given problem\n    equation1 = Eq(badminton, 3 * bowling)\n    # Equation after 36 members left badminton club and 4 left bowling club\n    equation2 = Eq(badminton - 36, bowling - 4)\n\n    solutions = solve((equation1, equation2), (badminton, bowling))\n\n    # Members in the end for each club\n    members_in_end_badminton = solutions[badminton] - 36\n    members_in_end_bowling = solutions[bowling] - 4\n\n    return members_in_end_badminton, members_in_end_bowling\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    n = 72\n    factors_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note = 50\n    lucas_lost = cost_of_shoes + fake_note\n    return lucas_lost\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    difference = number1 - number2\n    return difference\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total = 504\n    avg = 126\n    diff = 6\n    # Since the average is given and total sum is known, we can find the number of cards\n    num_cards = total // avg  # Using integer division because the number of cards must be an integer\n    \n    # Let the smallest number be x\n    # Then the numbers on the cards are x, x+2, x+4, ..., x+2*(num_cards-1)\n    # Since the difference between greatest and smallest is 6, we have x + 2*(num_cards-1) = x + 6\n    # It simplifies to 2*(num_cards-1) = 6\n    # num_cards from above is 4 (504 / 126 = 4)\n    # smallest number = x\n    # The next number would then be x + 2 and so on.\n    \n    # Thus the smallest number is:\n    smallest_number = (total - (2 + 4 + 6)) // num_cards\n    \n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w represent Wendy's current age and v represent Vivien's current age.\n    w, v = symbols('w v')\n    \n    # According to the problem, we have two equations:\n    # Wendy is twice as old as Vivien: w = 2v\n    # Vivien was 1/4 as old as Wendy 10 years ago: v - 10 = 1/4 * (w - 10)\n    equation1 = Eq(w, 2 * v)\n    equation2 = Eq(v - 10, 1/4 * (w - 10))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (w, v))\n    \n    # Wendy's age in 5 years' time is w + 5\n    wendys_age_in_5_years = solutions[w] + 5\n    \n    return wendys_age_in_5_years\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # in meters per second\n    distance = 1.5 * 10**3  # converting kilometers to meters\n\n    time_taken = distance / speed_of_sound  # time = distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    # Initialize counter for the powers of 5 and 2\n    count_5 = 0\n    count_2 = 0\n\n    # Count the powers of 5 and 2 in the prime factorization of each number\n    for i in range(301, 1000):\n        # Count the powers of 5\n        temp = i\n        while temp % 5 == 0:\n            count_5 += 1\n            temp /= 5\n        # Count the powers of 2\n        temp = i\n        while temp % 2 == 0:\n            count_2 += 1\n            temp /= 2\n\n    # The number of zeros at the end of the product will\n    # be equal to the minimum of the powers of 5 and 2\n    ans = min(count_5, count_2)\n    \n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    total_sum = sum(1 / i for i in range(10, 20))\n    integer_part = int(total_sum)\n\n    return integer_part\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3 * x - (2 * x + 3), 5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of girls and boys\n    g, b = symbols('g b')\n\n    # Equation for the total number of pupils in the school\n    total_pupils_eq = Eq(g + b, 1690)\n\n    # Equation for the number of boys being 90 more than the number of girls\n    boys_girls_diff_eq = Eq(b, g + 90)\n\n    # Solve for the number of girls and boys\n    pupils_solution = solve((total_pupils_eq, boys_girls_diff_eq), (g, b))\n\n    # Unpack the solutions for the number of girls and boys\n    girls, boys = pupils_solution[g], pupils_solution[b]\n\n    # Calculate the number of girls who can swim and who can not swim\n    girls_can_swim = 31 / (31 + 49) * girls\n    girls_cannot_swim = 49 / (31 + 49) * girls\n\n    # Equation for the number of boys who can swim\n    boys_can_swim_eq = Eq((boys - 120) / 2, boys / 2 - 120)\n\n    # Solve the equation to find the number of boys who can swim\n    boys_can_swim_solution = solve(boys_can_swim_eq)\n\n    # Since there must be a positive solution, we take the positive one\n    boys_can_swim = boys / 2 - 120\n\n    # Calculate the number of boys who can't swim\n    boys_cannot_swim = boys - boys_can_swim\n\n    # The total number of pupils who can't swim is the sum of girls who can't swim and boys who can't swim\n    pupils_cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return int(pupils_cannot_swim)\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):  # Check every two-digit number\n        if i % 6 == 0 and (i - 1) % 13 == 0:  # Two-digit multiple of 6, one more than multiple of 13\n            return i\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330    # rabbit speed in m/min\n    turtle_speed = 30     # turtle speed in m/min\n    race_distance = 6990  # race distance in meters\n    nap_time = 215        # rabbit nap time in minutes\n    start_delay = 10      # time after the race starts before rabbit naps, in minutes\n\n    # Distance covered by rabbit before nap\n    rabbit_distance_before_nap = rabbit_speed * start_delay\n\n    # Time taken by the turtle to finish the race\n    turtle_time_to_finish = race_distance / turtle_speed\n\n    # Time taken by the rabbit to finish the race\n    rabbit_time_to_finish = rabbit_distance_before_nap / rabbit_speed + nap_time + (race_distance - rabbit_distance_before_nap) / rabbit_speed\n\n    # Determine who finishes first\n    time_difference = turtle_time_to_finish - rabbit_time_to_finish\n\n    # If the rabbit wins (time difference is negative), calculate the distance the turtle has to go\n    # If the turtle wins (time difference is positive), calculate the distance the rabbit has to go\n    if time_difference < 0:\n        winner = \"rabbit\"\n        distance_at_finish = turtle_speed * (turtle_time_to_finish - nap_time - start_delay)\n    else:\n        winner = \"turtle\"\n        distance_at_finish = rabbit_speed * (nap_time + start_delay) + rabbit_speed * (turtle_time_to_finish - nap_time - start_delay) - race_distance\n\n    return winner, round(distance_at_finish)\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    increase_rate = 0.10\n    years_passed = 2020 - 2018\n\n    initial_amount = final_amount / ((1 + increase_rate) ** years_passed)\n\n    return initial_amount\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    # Total number of people\n    total_people = 7\n\n    # Number of people who don't want to stand next to each other\n    exclusive_group = 3\n\n    # Number of people outside the exclusive group\n    others = total_people - exclusive_group\n\n    # First, calculate the factorial for the total people\n    total_arrangements = factorial(total_people)\n\n    # Calculate the arrangements of the exclusive group\n    arrangements_exclusive_group = factorial(exclusive_group)\n\n    # Calculate the positions where the group of 3 can be placed\n    # There are 'others + 1' possible slots for the exclusive group\n    exclusive_slots = others + 1\n\n    # Calculate the arrangements where the group of 3 are together\n    # This is the product of the arrangements of the exclusive group and its possible slots\n    together_arrangements = exclusive_slots * arrangements_exclusive_group\n\n    # Subtract the together_arrangements from total arrangements for the final answer\n    ans = total_arrangements - together_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    # Given values\n    first_row = 10\n    fourth_row = 25\n    total_rows = 25\n\n    # Formula for nth term of an Arithmetic Progression (AP) is a + (n - 1) * d\n    # where a is the first term, d is the common difference and n is the term number\n\n    # Common difference 'd' calculation using first and fourth term\n    d = (fourth_row - first_row) // (4 - 1)\n\n    # Total number of athletes is the sum of an A.P.\n    # Formula for the sum S of n terms of an arithmetic sequence is: S = n/2 * (2a + (n - 1) * d)\n    total_athletes = total_rows / 2 * (2 * first_row + (total_rows - 1) * d)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors_of_five(n):\n        count = 0\n        while n % 5 == 0:\n            n //= 5\n            count += 1\n        return count\n\n    zeros = 0\n    for i in range(1, 790):\n        zeros += count_factors_of_five(i)\n        \n    return zeros\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    ans = sum(range(10, 21))  # Sum the numbers from 10 to 20 inclusive\n    return ans\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    average_A = 76\n    average_B = 67\n    average_total = 70\n    students_A = 20\n    \n    # total score of team A\n    total_A = average_A * students_A\n    \n    # let's denote students_B as x, then the total score of team B would be average_B * x\n    # total score of both teams combined would be total_A + average_B * x\n    # and the total number of students would be students_A + x\n    \n    # we can set up the equation based on the average of the combined teams\n    # (total_A + average_B * x) / (students_A + x) = average_total\n    \n    # solve for x\n    students_B = (average_total * students_A - total_A) / (average_B - average_total)\n    \n    return int(students_B)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    # If each school had at most 3 participants, then to maximize the number of schools,\n    # we divide the total participants by 3 and round up\n    max_schools = -(-participants // 3) # Ceiling division\n    # Now, since we need to guarantee at least 4 participants per school for the school with the most,\n    # we subtract 1 from the max number of schools\n    return max_schools - 1\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            # Convert hour and minutes to string and count occurrences of '4'\n            time_str = str(hour).zfill(2) + str(minute).zfill(2)\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    all_perms = list(permutations(digits, 6))\n    min_product = float('inf')\n\n    for perm in all_perms:\n        num1 = perm[0] * 100 + perm[1] * 10 + perm[2]\n        num2 = perm[3] * 100 + perm[4] * 10 + perm[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n            \n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = range(1, 10)\n    max_product = 0\n    min_product = float('inf')\n\n    for comb in permutations(all_digits, 7):\n        A, B, C, D, E, F, G = comb\n        num_ABCD = 1000 * A + 100 * B + 10 * C + D\n        num_EFG = 100 * E + 10 * F + G\n        if num_ABCD + num_EFG == 1993:\n            product = num_ABCD * num_EFG\n            if product > max_product:\n                max_product = product\n            if product < min_product:\n                min_product = product\n\n    ans = max_product - min_product\n    return ans\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    min_steps = 25\n    max_dice_roll = 6\n\n    min_rolls = (min_steps - 1) // max_dice_roll + 1\n\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    last_term = 19\n    difference = -50\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(10):\n            if i + j == 15:\n                return i * 10 + j\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    first_part = 20.23 * 321\n    second_part = 202.3 * 45.6\n    third_part = 2.023 * 2230\n    ans = first_part + second_part + third_part\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb = 40\n    slip = 10\n    total_climb = 0\n    hours = 0\n    \n    while total_climb < depth:\n        hours += 1\n        total_climb += climb\n        if total_climb >= depth:\n            break\n        total_climb -= slip\n\n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    for number in range(29, 0, -1):\n        if isprime(number):\n            return number\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    total_sum = 3989\n    known_sum = 3000 + 80 + 9\n    missing_number = total_sum - known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    total_typists = 5\n    sick_typists = 2\n    healthy_typists = total_typists - sick_typists\n    words = 6000\n    minutes = 20\n    \n    # Find the rate at which one typist types words per minute\n    words_per_minute_per_typist = words / (total_typists * minutes)\n    \n    # Total number of words needed to be typed\n    total_words_needed = 9000\n    \n    # Find the total time needed for the remaining typists to type out 9000 words\n    time_needed = total_words_needed / (words_per_minute_per_typist * healthy_typists)\n    \n    return time_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price_each = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n\n    total_spent = cabbage_price_each * cabbages_bought\n    lettuce_price_each = total_spent / lettuces_bought\n\n    return lettuce_price_each\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n\n    saved_money = total_money - spent_money\n\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    initial_plants = 11\n    remaining_plants = 3\n\n    initial_intervals = initial_plants - 1\n    new_intervals = remaining_plants - 1\n\n    new_distance = total_distance / new_intervals\n\n    return new_distance\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13*60 + 52  # convert start time to minutes\n    end_time = 14*60 + 5  # convert end time to minutes\n    duration = end_time - start_time  # calculate the duration of the call in minutes\n    cost_per_minute = 14  # cost in pence per minute\n    total_cost = duration * cost_per_minute  # calculate the total cost of the call\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    # Calculate the sum of all the factors of the number 20\n    sum_of_factors = sum(divisors(20))\n\n    return sum_of_factors\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 320 * 0.40\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    # Generate all combinations of the digits 2 and 3 for a three-digit number\n    for combination in product('23', repeat=3):\n        number = ''.join(combination)\n        \n        # Check if the generated number has both digits 2 and 3\n        if '2' in number and '3' in number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 10, 17)  # Assuming the year 2023\n    end_date = datetime(2023, 12, 20)\n    sunday_count = 0\n\n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday is 6 according to datetime module\n            sunday_count += 1\n        current_date += timedelta(days=1)\n\n    return sunday_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_price = pen_price + ruler_price\n\n    return total_price\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple_tarts, strawberry_tarts = symbols('apple_tarts strawberry_tarts')\n    diff_price = 0.40\n    total_spent = 40\n\n    equation1 = Eq(apple_tarts, 2 * strawberry_tarts)\n    equation2 = Eq(2 * apple_tarts * diff_price, strawberry_tarts * diff_price)\n    equation3 = Eq(apple_tarts * (diff_price + diff_price) + strawberry_tarts * diff_price, total_spent)\n\n    solutions = solve((equation1, equation2, equation3), (apple_tarts, strawberry_tarts))\n\n    total_apple_tarts = solutions[apple_tarts]\n    total_strawberry_tarts = solutions[strawberry_tarts]\n\n    return total_apple_tarts + total_strawberry_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for each traffic light\n    # Traffic light 1: every 30 seconds\n    # Traffic light 2: every 0.75 minutes, which is 45 seconds\n    # Since 3 traffic lights turn green every 9 minutes (540 seconds), we need to find\n    # the LCM of the first two traffic lights and then find the smallest multiple\n    # that is greater than or equal to 540 seconds.\n\n    light1 = 30  # Traffic light 1 changes every 30 seconds\n    light2 = 45  # Traffic light 2 changes every 45 seconds\n\n    # The smallest time the third light can take to change is the LCM of the first two divided by 540\n    third_light_min_time = lcm(light1, light2) // 540 * 540\n\n    # If third_light_min_time is less than 540, we need it to be at least 540\n    # because they all change at the same time every 9 minutes (540 seconds)\n    if third_light_min_time < 540:\n        third_light_min_time = 540\n\n    # Now we need to find the smallest factor of third_light_min_time that is at least 30 seconds\n    # We start at 30 seconds and check each multiple of 30 to see if it is a factor\n    time = 30\n    while time < third_light_min_time:\n        if third_light_min_time % time == 0:\n            if time >= 30:\n                return time\n        time += 30\n\n    return time\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    ans = 43 * 16\n    return ans\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n    \n    # Since all skiboards are of different colors, this is a permutation problem.\n    # Given 5 people and 5 unique skiboards, we want to know the number of ways\n    # the 5 people can each pick 1 of the 5 unique skiboards. This is\n    # essentially asking for the number of permutations of 5 items. The formula\n    # for permutations of n items taken n at a time is n!.\n\n    num_ways = factorial(5)  # 5! (5 factorial)\n    return num_ways\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    \n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    \n    return round(percentage_increase, 2)\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pieces in the jigsaw puzzle\n    x = symbols('x')\n\n    # On the first day, Tim fits 20% of the pieces: 0.20 * x\n    # On the second day, he fits 60 more pieces\n    # The number of fitted pieces is now 0.20*x + 60\n    # The number of unfitted pieces is x - (0.20*x + 60)\n    # The ratio of fitted to unfitted pieces is 2:5 or 2/5\n    equation = Eq((0.20 * x + 60) / (x - (0.20 * x + 60)), 2/5)\n\n    # Solve the equation to find the value of x\n    total_pieces = solve(equation, x)\n\n    return total_pieces[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position = 18\n    tony_position_from_right = 17\n\n    count_from_henry_to_tony = total_children - henry_position + tony_position_from_right\n\n    return count_from_henry_to_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    millimetres_per_metre = 1000\n    metres = 2\n    millimetres = metres * millimetres_per_metre\n    return millimetres\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    not_multiples_of_10 = total_numbers - total_numbers // 10\n    percentage = (not_multiples_of_10 / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_loan = 4\n    repayment = 30 / 100 * initial_loan\n    amount_owed = initial_loan - repayment\n    \n    return amount_owed\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Number of legs for each pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Given number of pets\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n\n    # Given total number of legs\n    total_legs = 28\n\n    # Calculate legs without birds\n    legs_without_birds = (legs_per_cat * num_cats) + (legs_per_dog * num_dogs) + (legs_per_rabbit * num_rabbits)\n\n    # Calculate number of birds\n    num_birds = (total_legs - legs_without_birds) // legs_per_bird\n\n    return num_birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    meeting_time = 10  # Time taken for them to meet in hours\n\n    distance = (jack_speed + rose_speed) * meeting_time\n    \n    return distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the symbol for the variable x\n    equation = Eq(12 * (x - 1), 36)  # Define the equation\n\n    ans = solve(equation, x)  # Solve the equation for x\n\n    return ans[0]  # Return the solution\n\nans = solution()  # Call the function to get the answer"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's represent the total number of cards Nelson and Oliver originally had as 'n' and 'o' respectively\n    n, o = symbols('n o')\n\n    # Melvin's original number of cards\n    melvin_original = 40\n\n    # Melvin gains 5/8 of his original number of cards from Nelson\n    melvin_after_first_round = melvin_original + (5/8 * melvin_original)\n\n    # Melvin and Nelson each lose 1/4 of Melvin's original number of cards to Oliver\n    melvin_after_second_round = melvin_after_first_round - (1/4 * melvin_original)\n    nelson_after_second_round = n - (1/4 * melvin_original)\n    oliver_after_second_round = o + (1/2 * melvin_original)  # Oliver gains 1/4 from each, so total 1/4 * 2\n\n    # Melvin gains 1/8 of his original number of cards from Nelson in the final round\n    melvin_final = melvin_after_second_round + (1/8 * melvin_original)\n    nelson_final = nelson_after_second_round - (1/8 * melvin_original)\n    oliver_final = oliver_after_second_round  # Oliver does not gain or lose any cards in final round\n\n    # After the final round, they all have the same number of cards\n    equation1 = Eq(melvin_final, nelson_final)\n    equation2 = Eq(melvin_final, oliver_final)\n\n    # Solving for n and o\n    solutions = solve((equation1, equation2), (n, o))\n\n    # Total number of cards they all had at first\n    total_cards_at_first = melvin_original + solutions[n] + solutions[o]\n\n    return total_cards_at_first\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "from sympy import primefactors\n\ndef solution():\n    card_numbers = [6, 12, 35, 175, 245, 300]\n    for number in card_numbers:\n        remaining_cards = card_numbers.copy()\n        remaining_cards.remove(number)\n        products = []\n        for i in range(4):\n            for j in range(i+1, 5):\n                product = remaining_cards[i] * remaining_cards[j]\n                products.append(product)\n        products = set(products)\n        for i in range(3):\n            for j in range(i+1, 4):\n                for k in range(j+1, 5):\n                    product = remaining_cards[i] * remaining_cards[j] * remaining_cards[k]\n                    if product in products:\n                        return number\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25, 2):\n        if 24 % i == 0:\n            n += i\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let's define Polly's age as x when the sum of her children's ages equals her own.\n    # At that point, child1's age will be x - 20\n    # child2's age will be x - 22 (since child2 was born two years after child1)\n    # child3's age will be x - 24 (since child3 was born two years after child2)\n    \n    # Now, let's set up the equation:\n    # Polly's age = sum of her children's ages\n    # x = (x - 20) + (x - 22) + (x - 24)\n    \n    # Solving the above equation gives us:\n    # x = 3x - 66\n    # 2x = 66\n    x = 66 / 2\n    \n    return x\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n    return sum_series\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n    ans = part1 + part2\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n\n    total_sweets = initial_sweets + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    # let x be the weight of the empty suitcase\n    # total weight when coming back is 5 times the original weight, which is the presents plus the weight of the suitcase\n    # 5 * (20 + x) = 20 + 5x\n    # Thus, we can solve for x to find out the weight of the empty suitcase\n\n    # Simplifying the equation: 5 * 20 + 5x = 20 + 5x\n    # Since we have 5x on both sides, cancel them out\n    # We end up with a simple equation: 100 = 20 + 5x - 5x\n    # Subtract 20 from both sides: 80 = 5x\n\n    x = 20 / 5  # Divide both sides by 5 to solve for x\n    \n    return x\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Age of the dogs combined four years ago\n    combined_age_4_years_ago = 10\n    \n    # Calculate the combined age now by adding 4 years\n    combined_age_now = combined_age_4_years_ago + 2 * 4\n\n    # Calculate the combined age in 2 years by adding 2 years\n    combined_age_in_2_years = combined_age_now + 2\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x - y, 39)\n    equation2 = Eq(x + y, 59)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(14*m, 8*(10 + m) - 3)\n\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    import math\n\n    # Given A * B = 30\n    # Given B * C = 35\n    # Given C * A = 42\n\n    # A * B * C = sqrt(A^2 * B^2 * C^2) = sqrt(30 * 35 * 42)\n    ABC = math.sqrt(30 * 35 * 42)\n    \n    # A = 42 / C, B = 35 / C, C = C\n    # So, A + B + C = (42 / C) + (35 / C) + C = (42 + 35 + C^2) / C\n\n    # To solve for C, we use the value of A * B * C\n    C = ABC / 30\n\n    # Now find A and B using the values of C\n    A = 42 / C\n    B = 35 / C\n\n    # Hence, the sum of A, B, and C is A + B + C\n    return A + B + C\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\n# Example call to the function\nx, y = symbols('x y')\nans = solution(x, y)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percent = 15\n    amount = 340\n    ans = (percent / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n\n    while True:\n        if mother_age == 3 * justin_age:\n            break\n        justin_age += 1\n        mother_age += 1\n        years += 1\n    \n    return years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    return 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    # If Cora gives Qingle $8 sweets, then Cora will have \"cora - 8\" and Qingle will have \"qingle + 8\"\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n\n    # Solve the equation\n    solution = solve(equation1, (cora, qingle))\n\n    # The difference in the number of sweets they have at first\n    difference = solution[cora] - solution[qingle]\n\n    return int(difference)\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0, 0), the value of b must be 0 (y-intercept is 0)\n    b = 0\n    \n    # point (4, 8) lies on the line, we can use it to calculate the slope m\n    x1, y1 = 0, 0 # origin coordinates\n    x2, y2 = 4, 8 # coordinates of the given point\n    \n    # The formula for slope (m) is (y2 - y1) / (x2 - x1)\n    m = (y2 - y1) / (x2 - x1)\n    \n    # Our linear equation is then y = mx + b\n    # Since b is 0, the equation simplifies to y = mx\n    # Returning the final result in the format y = mx + b\n    return f\"y = {m}x + {b}\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import Eq, solve, symbols\n\n    # let's denote the number of seashells Jane has as J and Eric as E\n    J, E = symbols('J E')\n\n    # given that Jane has 5 seashells for every 7 seashells Eric has\n    eq1 = Eq(J, 5/7 * E)\n\n    # If Eric gives Jane 6 seashells, the ratio will be 11:13\n    eq2 = Eq((J + 6)/(E - 6), 11/13)\n\n    # solve the system of equations\n    solutions = solve((eq1, eq2), (J, E))\n\n    # calculate total seashells they have\n    total_seashells = solutions[J] + solutions[E]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    current_number = 0\n    largest_number = 0\n    warren_add = 20\n    naida_subtract = 1\n\n    while warren_add > 0:\n        # Warren adds\n        current_number += warren_add\n        largest_number = max(largest_number, current_number)\n\n        # Naida subtracts\n        current_number -= naida_subtract\n\n        # Update values for next iteration\n        warren_add -= 1\n        naida_subtract += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    total_rate = first_faucet_rate + 3 * other_faucet_rate\n    time_to_fill = 1 / total_rate\n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from sympy import primefactors\n    \n    # Prime factors of 10 are 2 and 5.\n    # To find the number of zeros at the end of a product,\n    # we need to find the minimum of the counts of the prime factors 2 and 5.\n    \n    product = 48 * 925 * 38 * 435\n    prime_factors_2 = 0\n    prime_factors_5 = 0\n\n    # Count the number of 2s in the prime factors\n    while product % 2 == 0:\n        prime_factors_2 += 1\n        product = product // 2\n    \n    # Count the number of 5s in the prime factors\n    while product % 5 == 0:\n        prime_factors_5 += 1\n        product = product // 5\n    \n    # The number of zeros at the end is given by the minimum of the two counts\n    ans = min(prime_factors_2, prime_factors_5)\n    return ans\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    even_permutations = [int(\"\".join(map(str, perm))) for perm in permutations(digits) if perm[-1] % 2 == 0]\n    smallest_even = min(even_permutations)\n    return smallest_even\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_and_violin_pupils = piano_pupils // 4\n\n    neither_pupils = total_pupils - (piano_pupils + violin_pupils - piano_and_violin_pupils)\n\n    return neither_pupils\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    initial_amount = 20000\n    interest_rate = 0.05\n    years = 11\n\n    final_amount = initial_amount * (1 + interest_rate * years)\n    return final_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    return 7  # There are 7 days in a week\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)  # After the second stop, 1/3 of the passengers got off.\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)  # At the first stop, 2/5 of the passengers got off.\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    from sympy import integrate, symbols, sqrt\n\n    # Define the integral limits and function\n    x, y = symbols('x y')\n    f = sqrt(x**2 + y**2)\n\n    # Integrate the function over the quarter-circle area with radius 1\n    probability_area = integrate(integrate(f, (y, 0, sqrt(1 - x**2))), (x, 0, 1))\n\n    # The area of the whole triangle\n    triangle_area = 2 * 2 / 2\n    \n    # Calculate probability\n    probability = probability_area / triangle_area\n\n    return float(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    # No explicit library imports are required for this solution\n    \n    # Loop through all possible last digit values from 2 to 9\n    # (it cannot be 1 since first digit is 1/4 last digit and also not 0)\n    for d4 in range(2, 10):\n        d1 = d4 // 4  # first digit as per the given condition\n        if d4 % 4 != 0 or d1 == 0:\n            continue  # Ensure first digit is exactly 1/4 of the last digit and not zero\n        d2 = d1 - 1  # second digit as per the given condition\n        if d2 < 0:\n            continue  # Ensure second digit is not negative\n\n        # Since when multiplied by 4, the digits appear in reverse order, check the multiplication\n        number = 1000 * d1 + 100 * d2 + 10 * (4 * d2) + (4 * d1)\n\n        d3 = number // 100 % 10  # third digit after multiplication by 4\n\n        # Check if all digits are different and d4 is the last digit\n        if d3 != d1 and d3 != d2 and d3 != d4 and (number // 4) == (10 * d4 + d3) * 100 + (10 * d2 + d1):\n            return number // 4  # Return the original number before multiplication\n\n    return None  # Return None if no such number is found\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime\n\ndef solution():\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_bus_caught = datetime.strptime(\"16:01\", \"%H:%M\")\n    time_bus_trip_end = datetime.strptime(\"16:19\", \"%H:%M\") # 16:01 plus 18 mins\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    first_walk_duration = time_bus_caught - time_left_school\n    second_walk_duration = time_got_home - time_bus_trip_end\n    \n    total_walk_minutes = first_walk_duration.total_seconds() / 60 + second_walk_duration.total_seconds() / 60\n    ans = total_walk_minutes\n    return int(ans)\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for number in range(100, 200):\n        if str(number) == str(number)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    # If we subtract 10 and then multiply by 3, we get the original number.\n    return (25 - 10) * 3\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_count = len(numbers) + 1  # Including 'a'\n    total_sum = mean_value * total_count\n    \n    sum_of_known_numbers = sum(numbers)\n    \n    a = total_sum - sum_of_known_numbers\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    # Calculate the missing number by rearranging the equation\n    ans = (2030452 - 30000 - 452) // 2\n    return ans\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    result = 0.20 * 8880\n    return result\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    ribbon_length_cm = 150\n    piece_length_m = (ribbon_length_cm / 2) / 100\n    return piece_length_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # We use the Pigeonhole Principle to solve this question.\n    total_colours = 3 # There are 3 different colours of socks.\n    \n    # Worst case scenario for not having a pair is to pick one of each colour.\n    # To guarantee a pair, we need to add one more sock after picking one of each color.\n    worst_case_without_pair = total_colours  # One of each colour.\n    \n    # Thus, to guarantee a pair, she must pick one more sock.\n    socks_to_guarantee_pair = worst_case_without_pair + 1\n    \n    return socks_to_guarantee_pair\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_row = 6 + 1 + 7  # pupils to her left, Victoria herself, and pupils to her right\n    rows = 1 + 1 + 8  # row in front of her, Victoria's row, and rows behind her\n    total_pupils = pupils_in_row * rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_score_3_tests = 75 * 3\n    total_score_2_tests = 172\n    score_remaining_test = total_score_3_tests - total_score_2_tests\n    return score_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time_period = 1\n\n    interest = principal * interest_rate * time_period\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n\n    # given operations and final result\n    equation = Eq(((number + 3) / 4) * 9, 81)\n\n    # solve the equation\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / (11 + i) / (31 - i) for i in range(9))\n\n    return numerator_sum / denominator_sum\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Distance covered from 8:00 am to 8:30 am\n    distance_covered = 6300 - 1800  # in meters\n    time_spent = timedelta(minutes=30)  # time spent from 8:00 am to 8:30 am\n\n    # Speed in meters per minute\n    speed = distance_covered / time_spent.total_seconds() * 60  # converting seconds to minutes\n\n    # Remaining distance to cover at 8:30 am\n    remaining_distance = 1800  # in meters\n\n    # Time to cover the remaining distance\n    remaining_time = remaining_distance / speed\n\n    # Start time at 8:00 am\n    start_time = datetime.strptime(\"8:00\", \"%H:%M\")\n\n    # Calculate the time when he reaches his friend's house\n    arrival_time = start_time + timedelta(minutes=30 + remaining_time)\n\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Mr. Smith's mixture\n    mr_smith_sugar = 0.50 * 300 + 0.20 * 600\n\n    # Mrs. Smith's mixture\n    x = symbols('x')\n    mrs_smith_sugar = 0.10 * 700 + x * 300\n\n    # Total volume of mixtures\n    total_mixture_volume = 300 + 600  # Mr. Smith's total volume\n    total_mixture_volume_mrs = 700 + 300  # Mrs. Smith's total volume\n\n    # The sugar percentages are equal\n    equation = Eq(mr_smith_sugar / total_mixture_volume, mrs_smith_sugar / total_mixture_volume_mrs)\n\n    # Solve for x\n    x_value = solve(equation, x)[0]\n    return round(x_value, 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    return (17 - 2) / 5\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    candy_to_lily = total_candy * 3/4\n    remaining_candy = total_candy - candy_to_lily\n    candy_to_brother = remaining_candy * 1/3\n    final_candy = remaining_candy - candy_to_brother\n    \n    return final_candy\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    may_age_future = 10\n    kenny_older_by = 2\n\n    # Let k be the current age of Kenny's younger brother\n    # Then (k + kenny_older_by) is Kenny's current age\n    # In three years, their ages will be (k + 3) and (k + kenny_older_by + 3)\n    # The sum is 3 times May's age when she is 10 years old\n    \n    from sympy import symbols, Eq, solve\n\n    k = symbols('k')\n    equation = Eq((k + 3) + (k + kenny_older_by + 3), 3 * may_age_future)\n\n    younger_brother_age_now = solve(equation, k)[0]\n    kenny_age_now = younger_brother_age_now + kenny_older_by\n\n    # May is currently 7, so the difference in age between Kenny and May now is:\n    kenny_may_age_diff_now = kenny_age_now - 7\n\n    return kenny_may_age_diff_now\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the variables\n    # total_money represents the total amount of money Amy had initially\n    total_money = symbols('total_money')\n    # price_per_donut represents the price for one donut\n    price_per_donut = 10 / 7\n    # price_per_muffin represents the price for one muffin\n    price_per_muffin = 6 / 3\n\n    # Amy spent half of her money on donuts\n    money_spent_on_donuts = total_money / 2\n    # The other half is spent on muffins\n    money_spent_on_muffins = total_money / 2\n\n    # Calculate the number of muffins and donuts Amy could buy\n    number_of_donuts = money_spent_on_donuts / price_per_donut\n    number_of_muffins = money_spent_on_muffins / price_per_muffin\n\n    # The problem statement says Amy bought 54 more donuts than muffins\n    equation = Eq(number_of_donuts - number_of_muffins, 54)\n\n    # Solve the equation for the total amount of money Amy had initially\n    initial_money_solution = solve(equation, total_money)\n\n    return initial_money_solution[0]\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    total_minutes = 12\n\n    total_pancakes = pancakes_per_minute * total_minutes\n\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    cost_price = 10  # pounds\n    sell_price_per_bag = 0.65  # pounds\n    \n    total_weight = 5  # kg\n    weight_per_bag = 250 / 1000  # kg (converted from g to kg)\n    \n    number_of_bags = total_weight / weight_per_bag\n    total_sell_price = number_of_bags * sell_price_per_bag\n    \n    profit = total_sell_price - cost_price\n    profit_percent = (profit / cost_price) * 100\n    \n    return profit_percent\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    # Total apples.\n    total_apples = 14\n    # Given that each children needs to get at least one apple.\n    min_apples_per_child = 1\n    # The total number of children.\n    total_children = 5\n\n    # Minimum apples to be distributed so each child gets at least one apple.\n    distributed_apples = min_apples_per_child * total_children\n\n    # Remaining apples after distributing the minimum to each child.\n    remaining_apples = total_apples - distributed_apples\n\n    # The child with the most apples will have the remaining apples plus the one already guaranteed.\n    most_apples = remaining_apples + min_apples_per_child\n\n    return most_apples\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The distance between the 4th and the 9th teeth involves 5 gaps (between teeth 4 and 5, 5 and 6, 6 and 7, 7 and 8, 8 and 9).\n    num_gaps_between_4th_and_9th = 9 - 4\n    \n    # The distance for each gap in mm.\n    distance_per_gap = 30 / num_gaps_between_4th_and_9th\n    \n    # The total number of gaps for 100 teeth is 99 (since gaps are one less than teeth).\n    total_number_of_gaps = 100 - 1\n    \n    # The total length of the comb in mm.\n    length_of_comb_mm = distance_per_gap * total_number_of_gaps\n    \n    # Convert length from mm to cm (10 mm in 1 cm).\n    length_of_comb_cm = length_of_comb_mm / 10\n    \n    return length_of_comb_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # My grandmother was 80 years old on 1st December 2008.\n    grandmother_age_in_2008 = 80\n    \n    # My mum was 40 years old on 1st December 1996.\n    mum_age_in_1996 = 40\n\n    # Calculate the respective years from the given ages\n    year_of_birth_grandmother = 2008 - grandmother_age_in_2008\n    year_of_birth_mum = 1996 - mum_age_in_1996\n\n    # Calculate grandmother's age when my mum was 25\n    age_difference = year_of_birth_mum - year_of_birth_grandmother\n\n    grandmother_age_when_mum_25 = 25 + age_difference\n\n    return grandmother_age_when_mum_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    # Total number of ways to arrange five people in a line\n    total_arrangements = 5 * 4 * 3 * 2 * 1\n    \n    # Number of ways to arrange the two who refuse to stand next to each other\n    # We treat them as a single entity and calculate arrangements\n    arrangements_together = 4 * 3 * 2 * 1  # Arrangements for the remaining people\n    arrangements_together *= 2  # The two can switch places with each other\n    \n    # Subtract the number of arrangements where the two are together\n    # from the total arrangements\n    return total_arrangements - arrangements_together\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "from math import factorial\n\ndef solution():\n    total_ice_creams = 5\n    total_friends = 3\n\n    # Accounting for the fact that each friend must get at least one ice-cream cone,\n    # we distribute one to each friend first.\n    remaining_ice_creams = total_ice_creams - total_friends\n\n    # Now it's a problem of distributing remaining_ice_creams to total_friends \n    # with no restrictions. This is equivalent to the \"stars and bars\" problem,\n    # which has a combinatorial solution.\n    ways = factorial(remaining_ice_creams + total_friends - 1) // \\\n           (factorial(remaining_ice_creams) * factorial(total_friends - 1))\n\n    return ways\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sale = total_vegetables * 2 / 3\n    remaining_after_monday = total_vegetables - monday_sale\n    tuesday_sale = remaining_after_monday * 2 / 5\n\n    total_sale = monday_sale + tuesday_sale\n\n    return total_sale\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # Number of balls of each color\n    colors = [16, 26, 34, 24, 40]\n    \n    # Balls that need to be picked to ensure 16 balls of one color\n    balls_for_16 = max(colors) - 1\n    \n    # Balls that need to be picked to ensure 13 balls of another color\n    # For the worst case, we may pick 15 balls of the remaining 4 colors each\n    # to avoid getting 16 of the same color, after that, the next 13 balls will\n    # ensure the second condition.\n    balls_for_13 = 4 * 15 + 12\n    \n    # Total balls to be picked\n    total_balls = balls_for_16 + balls_for_13 + 1\n\n    return total_balls\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    ans = sum(5 * i if i % 2 != 0 else -5 * i for i in range(1, (855 // 5) + 1))\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, q = symbols('p q')\n    equation1 = Eq(p, 4 * q)\n    equation2 = Eq(p - q, 2700)\n\n    solutions = solve((equation1, equation2), (p, q))\n    return solutions[q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    biscuits_given_to_sister = total_biscuits / 4\n    biscuits_left_for_freddie = total_biscuits - biscuits_given_to_sister\n    return biscuits_left_for_freddie\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table_cost, chair_cost = symbols('table_cost chair_cost')\n    \n    equation1 = Eq(2 * table_cost + 5 * chair_cost, 220)\n    equation2 = Eq(table_cost, 3 * chair_cost)\n    \n    solutions = solve((equation1, equation2), (table_cost, chair_cost))\n    \n    return solutions[table_cost]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    total_spent = 1.55 + 2.25\n    money_left_fraction = 4 / 5\n    money_left = total_spent / (1 - money_left_fraction)\n    \n    return money_left\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate_of_interest = 3.81 / 100\n    time_in_years = 5\n    \n    amount = principal * (1 + rate_of_interest * time_in_years)\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    percent = 40\n    total = 75\n\n    ans = (percent / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n    total_coins = joann + sana + nancy\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    \n    # The ratio of Lucas' speed to his mother's speed is 3:5.\n    # Therefore, the distances they walk will be in the same ratio.\n    ratio_lucas = 3\n    ratio_mother = 5\n\n    # Let the distance Lucas walks be 'distance_lucas', then his mother walks 'distance_mother'.\n    # According to the ratio, distance_lucas / distance_mother = ratio_lucas / ratio_mother\n    # Together, they have covered the distance (total_distance - remaining_distance).\n    # Hence, distance_lucas + distance_mother = total_distance - remaining_distance.\n    \n    # We can solve the system of equations:\n    # distance_lucas / distance_mother = ratio_lucas / ratio_mother\n    # distance_lucas + distance_mother = total_distance - remaining_distance\n    \n    # Multiplying both sides of the first equation by distance_mother gives us:\n    # distance_lucas = (ratio_lucas / ratio_mother) * distance_mother\n    # Substituting this into the second equation gives:\n    # (ratio_lucas / ratio_mother) * distance_mother + distance_mother = total_distance - remaining_distance\n    # Simplifying, we get:\n    # distance_mother = (total_distance - remaining_distance) / (1 + (ratio_lucas / ratio_mother))\n    distance_mother = (total_distance - remaining_distance) / (1 + (ratio_lucas / ratio_mother))\n    \n    # Now we can find the distance Lucas walked:\n    distance_lucas = (total_distance - remaining_distance) - distance_mother\n\n    return distance_lucas\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    # Sum of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    sum_seq = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n    \n    return int(sum_seq)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_original = 30\n    pizzas_original = 12\n    people_new = 35\n\n    # Find the unit rate\n    pizzas_per_person = pizzas_original / people_original\n\n    # Calculate the number of pizzas needed for 35 people\n    pizzas_needed = pizzas_per_person * people_new\n\n    # Round up since you can't have a fraction of a pizza\n    from math import ceil\n    return ceil(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    num_teams = 16\n    rounds = 0\n    while num_teams > 1:\n        num_teams //= 2\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n\n    equation = Eq(marion - ethan, -168)\n\n    julie_salary = solve(equation, julie)[0]\n    marion_salary = 2 * julie_salary\n    ethan_salary = 5 * julie_salary\n\n    total_earnings = julie_salary + marion_salary + ethan_salary\n\n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    part = 21\n    whole = 35\n    fraction_of_whole = part * 5 / whole\n    return fraction_of_whole\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' be the number of students in the big class, 's' be the number of students in the small class\n    b, s = symbols('b s')\n\n    # Apples equation: 2 apples for each student in both classes\n    eq1 = Eq(2*b + 2*s, 48)\n    # Oranges equation: 3 oranges for big class, 2 oranges for small class\n    eq2 = Eq(3*b + 2*s, 55)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (b, s))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    from math import sqrt, floor\n\n    max_value = 2016 * 72\n    count = 0\n\n    for i in range(1, floor(sqrt(max_value)) + 1):\n        if i**2 <= max_value and i**2 >= 72 and (i**2) % 72 == 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n\n    total_cost = cost_per_lollipop * num_lollipops\n\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    danny, efron, years = symbols('danny efron years')\n    # Efron is 30 years younger than Danny\n    equation1 = Eq(efron, danny - 30)\n    # The current ratio of Danny's age to Efron's age is 8:3\n    equation2 = Eq(danny/efron, 8/3)\n    # In how many years' time will the ratio of Danny's age to Efron's age be 5:3?\n    equation3 = Eq((danny + years)/(efron + years), 5/3)\n    \n    solutions = solve((equation1, equation2, equation3), (danny, efron, years))\n    \n    return solutions[years]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy import symbols, solve\n    from sympy.ntheory.modular import solve_congruence\n    \n    # Define a symbol for the number of children\n    n = symbols('n', integer=True)\n    \n    # Congruences based on the conditions given in the problem\n    congruences = [(n % 5, 0), (n % 7, 1), (n % 8, 1)]\n    \n    # Solve the system of congruences using the Chinese Remainder Theorem\n    n_value = solve_congruence(*congruences)\n    \n    return n_value[0]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_initial = 100\n    butter_initial = 40\n    cookies_required = 150\n    \n    butter_required = (butter_initial * cookies_required) / cookies_initial\n    \n    return butter_required\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count_4 = 0\n    for number in range(1, 405):\n        count_4 += str(number).count('4')\n    return count_4\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Group Stage: each group has 4 teams playing in a single round-robin format\n    # In a single round-robin, each team plays with all other teams once.\n    # Number of matches in one group is given by Combination(4, 2)\n    num_matches_per_group = (4 * 3) // 2\n    \n    # There are 8 groups, so total matches in the group stage is:\n    group_stage_matches = num_matches_per_group * 8\n    \n    # Knockout Stage: after group stage, we have 16 teams (2 from each group)\n    # Knockout stage has 4 rounds: Round of 16, Quarter-finals, Semi-finals, and finals (including match for third place)\n    # Each match in the knockout stage eliminates one team.\n    # Therefore, number of matches in each round is half the number of teams that start that round.\n    # Round of 16: 16 teams, 8 matches\n    # Quarter-finals: 8 teams, 4 matches\n    # Semi-finals: 4 teams, 2 matches\n    # Final and third place: 2 teams, 1 match + 1 match for third place\n    knockout_stage_matches = 8 + 4 + 2 + 1 + 1\n    \n    # Total matches in the World Cup is the sum of Group Stage matches and Knockout Stage matches\n    total_matches = group_stage_matches + knockout_stage_matches\n    \n    return total_matches\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):  # The second digit can range from 1 to 9\n        first_digit = 1 + 2 * second_digit  # The first digit is one more than twice the second digit\n        if first_digit < 10:  # The first digit should be a single-digit number\n            for third_digit in range(0, 10):  # The third digit can range from 0 to 9\n                sum_of_digits = first_digit + second_digit + third_digit\n                if 9 < sum_of_digits < 14:  # The sum of the digits must be greater than 9 and less than 14\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    \n    eq1 = Eq(racket, ball + 28)\n    eq2 = Eq(ball + racket, 30)\n    \n    answer = solve((eq1, eq2), (ball, racket))\n    \n    return answer[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n    \n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    cost_of_5_bananas = 5 * solutions[banana]\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from math import factorial\n\n    def matches(n):\n        # Calculate the number of matches when n teams play each other once\n        return factorial(n) // (factorial(2) * factorial(n - 2))\n    \n    n = 1\n    while True:\n        if matches(n) == 15:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    # Find the prime factorization of the number\n    factorization = factorint(224)\n    \n    # If the prime factorization is of the form p1^a1 * p2^a2 * ... * pn^an,\n    # the total number of factors is given by (a1 + 1) * (a2 + 1) * ... * (an + 1)\n    num_factors = 1\n    for exponent in factorization.values():\n        num_factors *= (exponent + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / 0.7\n    return number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    total_ways = pencil_colours * ruler_colours * pen_colours\n\n    return total_ways\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_wrong = -2\n    total_points = 44\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * points_correct + wrong * points_wrong == total_points:\n            return correct\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirt = symbols('shorts tshirt')\n\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of triangles be t\n    # Number of quadrilaterals will be t + 82\n    # Number of pentagons is given as 2\n\n    # Triangles have 3 sides, quadrilaterals have 4 sides, pentagons have 5 sides\n    \n    t = symbols('t')\n\n    # The total number of sides is the sum of sides from all polygons\n    total_sides_eq = Eq(3 * t + 4 * (t + 82) + 5 * 2, 394)\n    \n    # Solving for t\n    t_value = solve(total_sides_eq, t)[0]\n\n    # Number of quadrilaterals\n    q = t_value + 82\n\n    return q\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n\n    third_term = first_term + 2 * common_difference\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of sweets Rachel has originally\n    # Let a represent the number of sweets Alice has originally\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they have the same number\n    # r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n\n    # If both eat 8 pieces, Rachel has 3 times as many as Alice\n    # r - 8 = 3 * (a - 8)\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Total number of sweets originally\n    total_sweets = solutions[r] + solutions[a]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    num_lamp_posts = 4\n    distance_between_each = 25\n\n    total_distance = (num_lamp_posts - 1) * distance_between_each\n\n    return total_distance\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let G be the number of all-girl teams.\n    # From (iⅲ), the number of all-boy teams is 2G.\n    # The total number of teams is 150 / 3 = 50.\n    # From (i) and (ii), the number of mixed teams (at least one boy) is 15 + 27.\n    # Therefore, the total number of teams is the sum of all-girl teams, all-boy teams and mixed teams.\n    # 50 = G + 2G + (15 + 27)\n    # 50 = 3G + 42\n    # Subtract 42 from both sides:\n\n    G = (50 - 42) // 3\n\n    # Each all-girl team has 3 girls, so the total number of girls is:\n    total_girls = G * 3\n\n    return total_girls\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    # Since the number is divisible by 3, 5, and 7, it must be divisible by their least common multiple (LCM).\n    from math import lcm\n    common_multiple = lcm(3, 5, 7)\n\n    # Find the smallest number with the digit 6** that is divisible by the LCM\n    for number in range(600, 700, common_multiple):\n        if number % common_multiple == 0:\n            return number\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    return 63 - (55 - 27)\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let x be the distance between Town A and Town B\n    # Speed at 10 km/h, arrives at 10 am -> Time taken = x / 10\n    # Speed at 15 km/h, arrives at 8 am -> Time taken = x / 15\n    # Difference in time is 2 hours\n    # x / 10 - x / 15 = 2\n    # Solving for x gives x = 30 km\n    x = 30\n    \n    # To arrive at 9 am, he needs to take 1 hour less than when he cycles at 10 km/h\n    # So the time taken should be x / 10 - 1\n    # Required speed = distance / time\n    required_speed = x / (x / 10 - 1)\n    \n    return required_speed\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 6 * pears + 5)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    return sum(int(digit) for digit in str(product))\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    num1 = int('61', 7)\n    num2 = int('34', 7)\n    diff = num1 - num2\n    ans = ''\n    while diff > 0:\n        ans = str(diff % 7) + ans\n        diff //= 7\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    dog_to_rabbit = 8  # 1 dog = 8 rabbits\n    rabbit_to_chicken = 2  # 1 rabbit = 2 chickens\n    \n    # Since 1 dog = 8 rabbits and 1 rabbit = 2 chickens,\n    # 1 dog = 8 rabbits * 2 chickens/rabbit\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # The smallest number of gloves that Dilly needs to take to ensure she has a matching pair\n    # We use the worst-case scenario for each color since Dilly cannot distinguish between left and right gloves\n    \n    # Worst case for getting a blue pair: Take all green gloves (left and right) + one blue glove\n    worst_case_blue = 2 + 4 + 1\n    \n    # Worst case for getting a green pair: Take all blue gloves (left and right) + one green glove\n    worst_case_green = 1 + 3 + 1\n\n    # The worst-case overall would be the lower of the two worst cases calculated\n    smallest_number_to_ensure_pair = min(worst_case_blue, worst_case_green)\n    \n    return smallest_number_to_ensure_pair\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies = 5 * 12  # Total candies before new student\n    new_student_count = 5 + 1  # 1 more student joins, making it 6\n    candies_each = total_candies // new_student_count  # Redivide the candies\n\n    return candies_each\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    cards = 0\n    while True:\n        cards += 1\n        if cards % 4 == 3 and cards % 5 == 4 and cards % 7 == 6:\n            break\n    return cards\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    value_after_years = initial_value * (1 - depreciation_rate) ** years\n    \n    return round(value_after_years, 4)\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    total_difference = 52\n    total_students = 0\n\n    for layer in range(1, 100):  # Searching within a reasonable limit of layers\n        boys = layer * 4 if layer > 1 else 1\n        girls = (layer - 1) * 4 if layer > 1 else 0\n        difference = boys - girls\n\n        if difference == total_difference:\n            # square array of students\n            side_length = 2 * layer - 1\n            total_students = side_length ** 2\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e represent the number of pins Eugene had originally\n    # Let y represent the number of pins Yuna had originally\n    e, y = symbols('e y')\n\n    # Original amount of pins: Eugene had 3 times as many pins as Yuna\n    equation1 = Eq(e, 3 * y)\n    \n    # After Yuna bought 76 pins, she had 7/9 as many pins as Eugene\n    equation2 = Eq(y + 76, 7/9 * e)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (e, y))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    num_permutations = factorial(len(word))\n\n    for count in letter_counts.values():\n        num_permutations //= factorial(count)\n\n    return num_permutations\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must be divisible by 9.\n    # Given number is 12345A, where A is a digit that makes number divisible by 9.\n    # So, 1 + 2 + 3 + 4 + 5 + A must be divisible by 9.\n    sum_digits = 1 + 2 + 3 + 4 + 5\n    A = -1  # Start with an invalid digit\n    for i in range(10):\n        if (sum_digits + i) % 9 == 0:\n            A = i\n            break\n    \n    # Now, to find the remainder when dividing by 4, we only need to consider the last two digits.\n    # Since we have a 5 in the tens place, and we need to find A for the ones place,\n    # the number we need to consider is 5A.\n    remainder = (50 + A) % 4\n    \n    return remainder\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    return 825\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    result = 7.257 - 3.47\n    return result\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # Kelly needs to ensure she wins, so she needs to force Dan into a position where\n    # no matter what Dan does, Kelly can always leave 1 match on the next turn.\n\n    # If Kelly takes away 1 match, she leaves 10 matches, and Dan can take away\n    # 1 or 2 matches leaving either 9 or 8 matches, which isn't guaranteed to be a win\n    # for Kelly since Dan can still force a win with the correct strategy.\n\n    # If Kelly takes away 2 matches, she leaves 9 matches. Now no matter what Dan does:\n    # If Dan takes 1 match (8 left), Kelly can take 2 (6 left), Dan takes 1 or 2 (4 or 5 left), \n    # Kelly can always leave a situation where there are 3 matches left after her turn, \n    # which ensures her victory since Dan cannot take all three.\n\n    # Therefore, Kelly should take away 2 matches in the first turn.\n    return 2\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_flowers = symbols('total_flowers')\n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 / 7 * remaining_flowers\n    \n    equation = Eq(red_flowers, pink_flowers + 6)\n    \n    solution = solve(equation, total_flowers)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    import math\n    num_kids = 3\n    ans = math.factorial(num_kids)\n    return ans\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    # Let's denote the square with the variable x.\n    # According to the equation: 4 * x - 3 = 65, we need to find x.\n    # Adding 3 to both sides of the equation gives us: 4 * x = 68\n    # Now we divide both sides by 4 to get x.\n    x = (65 + 3) / 4\n    return x\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    # Let's denote the number of cars as c and the number of motorcycles as m.\n    # We know that the total number of vehicles is 27, so c + m = 27.\n    # Also, we know that the total number of wheels is 78, so 4c + 2m = 78.\n\n    # Let's solve this system of equations.\n    from sympy import symbols, Eq, solve\n\n    c, m = symbols('c m')\n    \n    # Equation representing the total number of vehicles\n    vehicle_equation = Eq(c + m, 27)\n    # Equation representing the total number of wheels\n    wheel_equation = Eq(4*c + 2*m, 78)\n\n    # Solve the system of equations for c and m\n    solutions = solve((vehicle_equation, wheel_equation), (c, m))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, nicole = symbols('jason nicole')\n    \n    # Initial condition: Nicole has more stickers than Jason\n    initial_condition = Eq(nicole, jason + 20)\n    \n    # After giving 18 stickers to Jason\n    jason_stickers_after = jason + 18\n    nicole_stickers_after = nicole - 18\n    \n    # Jason has 5 fewer stickers than Nicole after the exchange\n    final_condition = Eq(jason_stickers_after, nicole_stickers_after - 5)\n\n    # Solve the equations\n    solutions = solve((initial_condition, final_condition), (jason, nicole))\n\n    # Nicole's initial sticker count\n    return solutions[nicole]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    increase_length_factor = 1 + (10 / 100)  # Length increased by 10%\n    breadth_factor = 4 / 5  # Breadth reduced to 4/5 of original\n    height_factor = 11 / 10  # Height ratio is 11:10\n\n    # New volume as a percentage of the original volume\n    new_volume_percentage = (increase_length_factor * breadth_factor * height_factor) * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 39):\n        for three_gram_weights in range(0, 26):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance = 5000\n    number_of_intervals = 9\n\n    distance_between_two_marshals = total_distance / (number_of_intervals + 1)\n\n    return distance_between_two_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    initial_speed = 180  # meters per minute\n    initial_time = 6     # minutes\n\n    reduced_speed = 120  # meters per minute\n    reduced_time = 8     # minutes\n\n    distance_initial = initial_speed * initial_time\n    distance_reduced = reduced_speed * reduced_time\n\n    total_distance = distance_initial + distance_reduced\n\n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    initial_amount = 6000\n    interest_rate = 0.03\n\n    # Interest earned in the first year\n    interest_first_year = initial_amount * interest_rate\n\n    # Total amount at the end of the first year\n    amount_end_first_year = initial_amount + interest_first_year\n\n    # Interest earned in the second year\n    interest_second_year = amount_end_first_year * interest_rate\n\n    return interest_second_year\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # minutes (1 hour 20 minutes)\n    num_pictures = total_time_available // time_for_one_picture\n    return num_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    number = 1 + 4/7\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    repeating_sequence = \"428571\"  # The repeating sequence in the decimal form\n    index_to_find = 69 - 1  # Adjusting to zero-based indexing\n\n    # Since the sequence repeats every 6 digits, use modulo to find the position\n    sequence_index = index_to_find % len(repeating_sequence)\n    return int(repeating_sequence[sequence_index])\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Calculate the number of layers in the square\n    layers = 0\n    total_tiles = 400\n    while total_tiles > 0:\n        current_layer_tiles = (1 + 2 * layers) * 4\n        if total_tiles - current_layer_tiles < 0:\n            break\n        total_tiles -= current_layer_tiles\n        layers += 1\n\n    # As layers start from the outermost layer which has red tiles, then odd layers will have red tiles \n    # and even layers will have green tiles. We need to calculate the number of red and green tiles.\n    # Since we break the loop for an incomplete layer, the last one will be an incomplete layer.\n    red_tiles = 0\n    green_tiles = 0\n\n    for i in range(1, layers + 1):\n        if i % 2 == 0:  # Even layer with green tiles\n            green_tiles += (1 + 2 * (i - 1)) * 4\n        else:           # Odd layer with red tiles\n            red_tiles += (1 + 2 * (i - 1)) * 4\n\n    # Since the question asks for the dominant color and the number of tiles it has more,\n    # we compare the counts of red and green tiles.\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n    \n    return dominant_color, difference\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Assuming the cost of the goods is $100 (for simplicity)\n    total_cost = 100\n    planned_profit = 0.50 * total_cost  # 50% profit on cost\n\n    # Scenario 1: Sold 70% of goods at 50% profit\n    first_day_sales = 0.70 * total_cost\n    first_day_profit = 0.50 * first_day_sales\n\n    # Remaining goods after the first day\n    remaining_goods = total_cost - first_day_sales\n\n    # Actual total profit achieved is 82% of the planned profit\n    actual_total_profit = 0.82 * planned_profit\n\n    # Actual profit from the remaining goods sold on the second day\n    second_day_profit = actual_total_profit - first_day_profit\n\n    # We need to find the selling price of the remaining goods on the second day\n    # Second day sales - Remaining goods cost = Second day profit\n    # Let x be the discount rate on the second day\n    # (1 - x) * Remaining goods = Second day sales\n    # Second day sales - Remaining goods = second_day_profit\n    # (1 - x) * Remaining goods - Remaining goods = second_day_profit\n    # x * Remaining goods = -second_day_profit\n    # So, discount rate x = -second_day_profit / Remaining goods\n\n    discount_rate = -second_day_profit / remaining_goods\n\n    # Return the discount rate as a percentage\n    return discount_rate * 100\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_solution = 300 * 0.35\n    daisy_solution = 200 * 0.50\n    total_salt = dylan_solution + daisy_solution\n    total_solution = 300 + 200\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y)  # y should be defined outside the solution function"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each child's age.\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Equations based on the problem statement\n    equation1 = Eq(younger_son, older_son + 3)  # Sons are three years apart\n    equation2 = Eq(older_daughter + 2, younger_daughter)  # Daughters are two years apart\n    equation3 = Eq(younger_son, 2 * older_daughter)  # Younger son is twice the age of the older daughter\n    equation4 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)  # Sum of their ages\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Determine the age of the youngest child (since they are two sons and two daughters, the youngest child\n    # could be either the younger son or the younger daughter, depending on their ages).\n    youngest_age = min(solutions[older_son], solutions[younger_son], solutions[older_daughter], solutions[younger_daughter])\n\n    return youngest_age\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the number of widgets Megacorp sold in 2014\n    m = symbols('m')\n    # Vastco sold 68% more widgets than Megacorp in 2014, so it sold 1.68 * m widgets\n    v2014 = 1.68 * m\n    \n    # In 2015, Vastco's widget sales rose by 32%, so it sold 1.32 * v2014 widgets\n    v2015 = 1.32 * v2014\n\n    # In 2015, Vastco only sold 44% more widgets than Megacorp, which means Vastco's 2015 sales were 1.44 times Megacorp's 2015 sales\n    # Let m2015 be the number of widgets Megacorp sold in 2015\n    m2015 = symbols('m2015')\n    v2015_expr = 1.44 * m2015\n\n    # We can set up an equation where Vastco's sales in 2015 (v2015) are equal to the expression we found for v2015_expr\n    equation = Eq(v2015, v2015_expr)\n\n    # Solve for Megacorp's 2015 sales (m2015)\n    solutions = solve(equation, m2015)\n    megacorp_2015 = solutions[0]\n\n    # Now we have Megacorp's sales in 2014 (m) and 2015 (megacorp_2015)\n    # Find the percentage increase: ((megacorp_2015 - m) / m) * 100%\n    percentage_increase = ((megacorp_2015 - m) / m) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n\n    while empty_bottles >= 4:\n        new_bottles, remainder = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        empty_bottles = new_bottles + remainder\n    \n    # Considering borrowing 1 empty bottle\n    if empty_bottles == 3:\n        total_bottles += 1\n\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Counting the number of digits for 1 to 9\n    digits_1_9 = 9 * 1\n    \n    # Counting the number of digits for 10 to 99\n    digits_10_99 = (99 - 9) * 2\n    \n    # Counting the number of digits for 100 to 113\n    digits_100_113 = (113 - 99) * 3\n    \n    # Adding them up to get the total number of digits written by Johnny\n    total_digits = digits_1_9 + digits_10_99 + digits_100_113\n    \n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_pearls = symbols('total_pearls')\n    \n    floor_pearls = total_pearls / 2\n    chair_pearls = total_pearls / 4\n    lap_pearls = total_pearls / 6\n    remaining_pearls = 3\n    \n    equation = Eq(floor_pearls + chair_pearls + lap_pearls + remaining_pearls, total_pearls)\n\n    ans = solve(equation, total_pearls)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n\n    days_for_one_worker = total_work / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    numerator = 5 + 1/7 + 3 + 3/11 + 1 + 13/23\n    denominator = 3 + 3/7 + 2 + 2/11 + 1 + 1/23\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    return 548 - 45 + 23 - 107\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from math import factorial\n\ndef solution():\n    total_ways = 3**4  # Each person has 3 choices, so 3 * 3 * 3 * 3 total combinations\n    subtract_cases = 3  # Subtract the cases where all 4 go through the same entrance (3 such cases)\n    mixed_cases = 3 * factorial(4)  # 4! ways to distribute 4 people when exactly one entrance is not used\n    ans = total_ways - subtract_cases - mixed_cases\n    return ans\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    payment_for_safe = 1\n    penalty_for_broken = -1\n    expected_earnings = 92\n\n    # Let x be the number of glasses broken\n    # Then (total_glasses - x) would be the number of glasses delivered safely\n    # The total earnings is the number of glasses delivered safely minus the number broken\n    # (total_glasses - x) * payment_for_safe + x * penalty_for_broken = expected_earnings\n    # After simplifying the above expression, we get:\n    # total_glasses - 2x = expected_earnings\n    # Solve for x:\n    glasses_broken = (total_glasses - expected_earnings) // 2\n\n    return glasses_broken\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # In a round-robin competition, every team plays every other team once,\n    # If there are 'n' teams, the total number of rounds played is n*(n-1)/2\n    # We need to find 'n' such that n*(n-1)/2 = 45\n    # Rearrange to form a quadratic equation n^2 - n - 90 = 0\n\n    # import the square root function from the math module\n    from math import sqrt\n\n    # calculate the discriminant\n    discriminant = 1**2 - 4*1*(-90)\n    \n    # calculate the positive solution of the quadratic equation\n    n = (1 + sqrt(discriminant)) / 2\n\n    # return the number of teams\n    return int(n)\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mayank_number = symbols('mayank_number')\n\n    equation = Eq(2 * mayank_number + 4, 40)\n\n    solution = solve(equation, mayank_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the original number of boats and p be the number of people in the whole class\n    b, p = symbols('b p')\n\n    # Equation 1: If the number of boats is reduced by 1, then each boat will take 9 people\n    equation1 = Eq((b - 1) * 9, p)\n\n    # Equation 2: If the number of boats is increased by 1, then each boat will take 6 people\n    equation2 = Eq((b + 1) * 6, p)\n    \n    # Solving the equations for b and p\n    solutions = solve((equation1, equation2), (b, p))\n    \n    return solutions[p]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change = 1200 - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    n = symbols('n', integer=True)\n    equation = Eq(n + (n + 2) + (n + 4), 57)\n    solutions = solve(equation, n)\n    return solutions[0]\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # Given the division equation (x / 3 = 2), we can find x by multiplication\n    x = 3 * 2\n    for number in [2, 6, 1, 10, 5, 3]:\n        if number == x:\n            return number\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, peter = symbols('john peter')\n    \n    equation1 = Eq(john, peter + 180)\n    equation2 = Eq(4/5 * john, 1/2 * (peter - 3/10 * peter))\n\n    solutions = solve((equation1, equation2), (john, peter))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    multiples_of_4 = [i for i in range(5, 16) if i % 4 == 0]\n    factors_of_36 = [j for j in range(1, 37) if 36 % j == 0]\n    common = [num for num in multiples_of_4 if num in factors_of_36]\n    return common[0] if common else None\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n    pencils = 32\n    pens = 40\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')\n    \n    for perm in permutations(digits):\n        number1 = perm[0] * 10 + perm[1]\n        number2 = perm[2] * 10 + perm[3]\n        current_sum = number1 + number2\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks = 4 * 60  # total marks from 4 tests\n    new_total_marks = total_marks + 70  # add 70% from the 5th test\n    new_average = new_total_marks / 5  # calculate new average\n\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n\n    total_apples_eaten = (total_horses * apples_per_horse) + (total_pigs * apples_per_pig) + (total_rabbits * apples_per_rabbit)\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    average_apples_per_animal = total_apples_eaten / total_animals\n\n    return average_apples_per_animal\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for x in range(100, 1000): # Iterate through all 3-digit numbers\n        str_x = str(x)\n        if int(str_x[2]) == (int(str_x[0]) + int(str_x[1])):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    number_of_cups = 6\n    sale_plan_A_savings = 1 * number_of_cups  # $1 off each cup\n    sale_plan_B_threshold = 20  # Spend $20 to get $6 off\n    total_full_price = full_price_per_cup * number_of_cups\n\n    # Calculate total price using Sale Plan A\n    total_price_A = total_full_price - sale_plan_A_savings\n\n    # Calculate total price using Sale Plan B\n    total_price_B = total_full_price\n    if total_full_price >= sale_plan_B_threshold:\n        total_price_B -= 6\n\n    # Determine which plan is cheaper\n    min_total_price = min(total_price_A, total_price_B)\n\n    return min_total_price\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Define the variables\n    peaches = Symbol('peaches')\n    students_b = Symbol('students_b')\n\n    # Create equations based on the problem statement\n    equation1 = peaches - (students_b + 3) * 5 - 10\n    equation2 = peaches - students_b * 8 + 2\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (peaches, students_b))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    total_sum = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(total_sum)[-5:]\n    ans = sum(map(int, last_five_digits))\n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_drink = 12\n    water_ratio = 3/4\n    water_litres = total_drink * water_ratio\n    return water_litres\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    units_digit_547 = 7\n    units_digit_479 = 9\n    n = (units_digit_547 * units_digit_479) % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters_to_centimeters = 100\n    total_centimeters = 212.4 * meters_to_centimeters\n    return total_centimeters\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the amount Benson had originally\n    # Let j represent the amount Jayden had originally\n    b, j = symbols('b j')\n    \n    # Benson spent $74\n    b_left = b - 74\n    \n    # Jayden spent $120\n    j_left = j - 120\n    \n    # Benson had left was three times as much as Jayden had left\n    equation1 = Eq(b_left, 3 * j_left)\n    \n    # Combined total at first was $590\n    equation2 = Eq(b + j, 590)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (b, j))\n    \n    # Jayden's amount left\n    jayden_left = solutions[j] - 120\n    \n    return jayden_left\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    # The equation in the question is of the form x*x + x = 380\n    # First, let's find the integer solutions for this quadratic equation.\n    # We have x^2 + x - 380 = 0\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x ** 2 + x - 380, 0)\n    \n    # solve the equation\n    solutions = solve(equation, x)\n    \n    # filter out the positive integer solution\n    ans = [s.evalf() for s in solutions if s.is_real and s > 0][0]\n    \n    return int(ans)\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    own_dog = 100\n    own_goldfish = 14\n    own_both = 9\n    \n    own_neither = total_pet_owners - ((own_dog + own_goldfish) - own_both)\n\n    return own_neither\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_part = 1\n    total_volume = 300\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n    return raspberry_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # System of Equations:\n    # Let's denote b's speed as bs (metres per minute) and k's speed as ks\n    # 1) bs * 6 = ks * (6 + t) + 150      (Betty walked for 6 mins and Kevin walked for 6 + t mins and 150 more metres till the grocery store)\n    # 2) bs * (6 + 3) = 900               (Betty will be 900 metres away from cinema after 9 mins)\n    # 3) ks * (6 + t + 3) = bs * 6        (After another 3 mins, Kevin arrives at the store)\n\n    # From equation (2), we can write: bs = 900 / 9\n    bs = 900 / 9\n\n    # Plug bs into equation (1) and solve for ks:\n    # ks * (6 + t) + 150 = 6 * bs\n    # ks * (6 + t) = 6 * bs - 150\n    # ks = (6 * bs - 150) / (6 + t)\n\n    # Plug bs into equation (3) and solve for ks using previously obtained ks:\n    # ks * (6 + t + 3) = 6 * bs\n    # (6 * bs - 150) / (6 + t) * (6 + t + 3) = 6 * bs\n    # After simplifying:\n    # (6 * bs - 150) * (9 + t) = 6 * bs * (6 + t)\n    # 6 * bs * 9 + 6 * bs * t - 150 * 9 - 150 * t = 36 * bs + 6 * bs * t\n    # 150 * t = 6 * bs * 9 - 150 * 9\n    # t = (6 * bs * 9 - 150 * 9) / 150\n    t = (6 * bs * 9 - 150 * 9) / 150\n\n    return t\n\nans = solution()"
    ]
}